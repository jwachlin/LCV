
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c144  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  0000c144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000052d4  20000078  0000c1bc  00020078  2**2
                  ALLOC
  3 .stack        00002004  2000534c  00011490  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005eca2  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000683b  00000000  00000000  0007ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006327  00000000  00000000  000855d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001200  00000000  00000000  0008b8fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd0  00000000  00000000  0008cafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002271b  00000000  00000000  0008dacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001dc67  00000000  00000000  000b01e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096db6  00000000  00000000  000cde4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000043dc  00000000  00000000  00164c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 73 00 20 51 84 00 00 95 86 00 00 8f 86 00 00     Ps. Q...........
	...
      2c:	95 1e 00 00 00 00 00 00 00 00 00 00 c1 1f 00 00     ................
      3c:	09 20 00 00 49 85 00 00 49 85 00 00 51 6c 00 00     . ..I...I...Ql..
      4c:	49 85 00 00 49 85 00 00 49 85 00 00 49 85 00 00     I...I...I...I...
      5c:	49 85 00 00 49 85 00 00 e9 6f 00 00 01 70 00 00     I...I....o...p..
      6c:	19 70 00 00 31 70 00 00 49 70 00 00 61 70 00 00     .p..1p..Ip..ap..
      7c:	49 85 00 00 49 85 00 00 49 85 00 00 49 85 00 00     I...I...I...I...
      8c:	49 85 00 00 49 85 00 00 49 85 00 00 49 85 00 00     I...I...I...I...
      9c:	55 0b 00 00 49 85 00 00 3d 11 00 00 49 85 00 00     U...I...=...I...
      ac:	49 85 00 00 00 00 00 00                             I.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	0000c144 	.word	0x0000c144

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	0000c144 	.word	0x0000c144
     10c:	0000c144 	.word	0x0000c144
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1bc:	1dfb      	adds	r3, r7, #7
     1be:	781b      	ldrb	r3, [r3, #0]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d002      	beq.n	1ca <system_voltage_reference_enable+0x1a>
     1c4:	2b01      	cmp	r3, #1
     1c6:	d007      	beq.n	1d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     1c8:	e00d      	b.n	1e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <system_voltage_reference_enable+0x3c>)
     1cc:	4a07      	ldr	r2, [pc, #28]	; (1ec <system_voltage_reference_enable+0x3c>)
     1ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1d0:	2102      	movs	r1, #2
     1d2:	430a      	orrs	r2, r1
     1d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1d6:	e006      	b.n	1e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1da:	4a04      	ldr	r2, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1de:	2104      	movs	r1, #4
     1e0:	430a      	orrs	r2, r1
     1e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1e4:	46c0      	nop			; (mov r8, r8)
	}
}
     1e6:	46bd      	mov	sp, r7
     1e8:	b002      	add	sp, #8
     1ea:	bd80      	pop	{r7, pc}
     1ec:	40000800 	.word	0x40000800

000001f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b084      	sub	sp, #16
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1fe:	68fb      	ldr	r3, [r7, #12]
     200:	7e5b      	ldrb	r3, [r3, #25]
     202:	b2db      	uxtb	r3, r3
     204:	b25b      	sxtb	r3, r3
     206:	2b00      	cmp	r3, #0
     208:	da01      	bge.n	20e <adc_is_syncing+0x1e>
		return true;
     20a:	2301      	movs	r3, #1
     20c:	e000      	b.n	210 <adc_is_syncing+0x20>
	}

	return false;
     20e:	2300      	movs	r3, #0
}
     210:	0018      	movs	r0, r3
     212:	46bd      	mov	sp, r7
     214:	b004      	add	sp, #16
     216:	bd80      	pop	{r7, pc}

00000218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     220:	687b      	ldr	r3, [r7, #4]
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2200      	movs	r2, #0
     23c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2200      	movs	r2, #0
     254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     256:	687b      	ldr	r3, [r7, #4]
     258:	22c0      	movs	r2, #192	; 0xc0
     25a:	0152      	lsls	r2, r2, #5
     25c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2200      	movs	r2, #0
     262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     276:	687b      	ldr	r3, [r7, #4]
     278:	2200      	movs	r2, #0
     27a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	222a      	movs	r2, #42	; 0x2a
     280:	2100      	movs	r1, #0
     282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2224      	movs	r2, #36	; 0x24
     294:	2100      	movs	r1, #0
     296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	222b      	movs	r2, #43	; 0x2b
     2ae:	2100      	movs	r1, #0
     2b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	222c      	movs	r2, #44	; 0x2c
     2b6:	2100      	movs	r1, #0
     2b8:	5499      	strb	r1, [r3, r2]
}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	46bd      	mov	sp, r7
     2be:	b002      	add	sp, #8
     2c0:	bd80      	pop	{r7, pc}
	...

000002c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b098      	sub	sp, #96	; 0x60
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2cc:	230c      	movs	r3, #12
     2ce:	18fa      	adds	r2, r7, r3
     2d0:	4b15      	ldr	r3, [pc, #84]	; (328 <_adc_configure_ain_pin+0x64>)
     2d2:	0010      	movs	r0, r2
     2d4:	0019      	movs	r1, r3
     2d6:	2350      	movs	r3, #80	; 0x50
     2d8:	001a      	movs	r2, r3
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <_adc_configure_ain_pin+0x68>)
     2dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     2de:	4b14      	ldr	r3, [pc, #80]	; (330 <_adc_configure_ain_pin+0x6c>)
     2e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2b13      	cmp	r3, #19
     2e6:	d81a      	bhi.n	31e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2e8:	230c      	movs	r3, #12
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	0092      	lsls	r2, r2, #2
     2f0:	58d3      	ldr	r3, [r2, r3]
     2f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	0018      	movs	r0, r3
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <_adc_configure_ain_pin+0x70>)
     2fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2fe:	2308      	movs	r3, #8
     300:	18fb      	adds	r3, r7, r3
     302:	2200      	movs	r2, #0
     304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     306:	2308      	movs	r3, #8
     308:	18fb      	adds	r3, r7, r3
     30a:	2201      	movs	r2, #1
     30c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     310:	b2db      	uxtb	r3, r3
     312:	2208      	movs	r2, #8
     314:	18ba      	adds	r2, r7, r2
     316:	0011      	movs	r1, r2
     318:	0018      	movs	r0, r3
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <_adc_configure_ain_pin+0x74>)
     31c:	4798      	blx	r3
	}
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b018      	add	sp, #96	; 0x60
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	0000bc50 	.word	0x0000bc50
     32c:	0000b389 	.word	0x0000b389
     330:	0000ffff 	.word	0x0000ffff
     334:	00000189 	.word	0x00000189
     338:	000083c9 	.word	0x000083c9

0000033c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     33c:	b5f0      	push	{r4, r5, r6, r7, lr}
     33e:	b089      	sub	sp, #36	; 0x24
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
     344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     346:	231f      	movs	r3, #31
     348:	18fb      	adds	r3, r7, r3
     34a:	2200      	movs	r2, #0
     34c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     34e:	2310      	movs	r3, #16
     350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     352:	2317      	movs	r3, #23
     354:	18fb      	adds	r3, r7, r3
     356:	2200      	movs	r2, #0
     358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	0018      	movs	r0, r3
     366:	4bce      	ldr	r3, [pc, #824]	; (6a0 <_adc_set_config+0x364>)
     368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     36a:	683b      	ldr	r3, [r7, #0]
     36c:	781a      	ldrb	r2, [r3, #0]
     36e:	230c      	movs	r3, #12
     370:	18fb      	adds	r3, r7, r3
     372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	0019      	movs	r1, r3
     37a:	201e      	movs	r0, #30
     37c:	4bc9      	ldr	r3, [pc, #804]	; (6a4 <_adc_set_config+0x368>)
     37e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     380:	201e      	movs	r0, #30
     382:	4bc9      	ldr	r3, [pc, #804]	; (6a8 <_adc_set_config+0x36c>)
     384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     386:	683b      	ldr	r3, [r7, #0]
     388:	222c      	movs	r2, #44	; 0x2c
     38a:	5c9b      	ldrb	r3, [r3, r2]
     38c:	2b00      	cmp	r3, #0
     38e:	d040      	beq.n	412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     390:	2316      	movs	r3, #22
     392:	18fb      	adds	r3, r7, r3
     394:	683a      	ldr	r2, [r7, #0]
     396:	212b      	movs	r1, #43	; 0x2b
     398:	5c52      	ldrb	r2, [r2, r1]
     39a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     3a0:	2315      	movs	r3, #21
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	2216      	movs	r2, #22
     3a6:	18ba      	adds	r2, r7, r2
     3a8:	7812      	ldrb	r2, [r2, #0]
     3aa:	188a      	adds	r2, r1, r2
     3ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	222c      	movs	r2, #44	; 0x2c
     3b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     3b4:	230f      	movs	r3, #15
     3b6:	18fb      	adds	r3, r7, r3
     3b8:	2215      	movs	r2, #21
     3ba:	18ba      	adds	r2, r7, r2
     3bc:	7812      	ldrb	r2, [r2, #0]
     3be:	188a      	adds	r2, r1, r2
     3c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     3c2:	e018      	b.n	3f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3c4:	2316      	movs	r3, #22
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	220f      	movs	r2, #15
     3cc:	4013      	ands	r3, r2
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	7b12      	ldrb	r2, [r2, #12]
     3d2:	189b      	adds	r3, r3, r2
     3d4:	0018      	movs	r0, r3
     3d6:	4bb5      	ldr	r3, [pc, #724]	; (6ac <_adc_set_config+0x370>)
     3d8:	4798      	blx	r3
			start_pin++;
     3da:	2315      	movs	r3, #21
     3dc:	18fb      	adds	r3, r7, r3
     3de:	781a      	ldrb	r2, [r3, #0]
     3e0:	2315      	movs	r3, #21
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	3201      	adds	r2, #1
     3e6:	701a      	strb	r2, [r3, #0]
			offset++;
     3e8:	2316      	movs	r3, #22
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	781a      	ldrb	r2, [r3, #0]
     3ee:	2316      	movs	r3, #22
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	3201      	adds	r2, #1
     3f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     3f6:	2315      	movs	r3, #21
     3f8:	18fa      	adds	r2, r7, r3
     3fa:	230f      	movs	r3, #15
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	7812      	ldrb	r2, [r2, #0]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	429a      	cmp	r2, r3
     404:	d3de      	bcc.n	3c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     406:	683b      	ldr	r3, [r7, #0]
     408:	89db      	ldrh	r3, [r3, #14]
     40a:	0018      	movs	r0, r3
     40c:	4ba7      	ldr	r3, [pc, #668]	; (6ac <_adc_set_config+0x370>)
     40e:	4798      	blx	r3
     410:	e009      	b.n	426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     412:	683b      	ldr	r3, [r7, #0]
     414:	7b1b      	ldrb	r3, [r3, #12]
     416:	0018      	movs	r0, r3
     418:	4ba4      	ldr	r3, [pc, #656]	; (6ac <_adc_set_config+0x370>)
     41a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     41c:	683b      	ldr	r3, [r7, #0]
     41e:	89db      	ldrh	r3, [r3, #14]
     420:	0018      	movs	r0, r3
     422:	4ba2      	ldr	r3, [pc, #648]	; (6ac <_adc_set_config+0x370>)
     424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     426:	683b      	ldr	r3, [r7, #0]
     428:	7d5b      	ldrb	r3, [r3, #21]
     42a:	009b      	lsls	r3, r3, #2
     42c:	b2da      	uxtb	r2, r3
     42e:	693b      	ldr	r3, [r7, #16]
     430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     432:	683b      	ldr	r3, [r7, #0]
     434:	7d9b      	ldrb	r3, [r3, #22]
     436:	01db      	lsls	r3, r3, #7
     438:	b25a      	sxtb	r2, r3
			(config->reference);
     43a:	683b      	ldr	r3, [r7, #0]
     43c:	785b      	ldrb	r3, [r3, #1]
     43e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     440:	4313      	orrs	r3, r2
     442:	b25b      	sxtb	r3, r3
     444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     446:	693b      	ldr	r3, [r7, #16]
     448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	791b      	ldrb	r3, [r3, #4]
     44e:	2b34      	cmp	r3, #52	; 0x34
     450:	d846      	bhi.n	4e0 <_adc_set_config+0x1a4>
     452:	009a      	lsls	r2, r3, #2
     454:	4b96      	ldr	r3, [pc, #600]	; (6b0 <_adc_set_config+0x374>)
     456:	18d3      	adds	r3, r2, r3
     458:	681b      	ldr	r3, [r3, #0]
     45a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     45c:	231f      	movs	r3, #31
     45e:	18fb      	adds	r3, r7, r3
     460:	683a      	ldr	r2, [r7, #0]
     462:	7c52      	ldrb	r2, [r2, #17]
     464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     466:	2317      	movs	r3, #23
     468:	18fb      	adds	r3, r7, r3
     46a:	683a      	ldr	r2, [r7, #0]
     46c:	7c12      	ldrb	r2, [r2, #16]
     46e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     470:	2310      	movs	r3, #16
     472:	61bb      	str	r3, [r7, #24]
		break;
     474:	e036      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     476:	231f      	movs	r3, #31
     478:	18fb      	adds	r3, r7, r3
     47a:	2201      	movs	r2, #1
     47c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     47e:	2317      	movs	r3, #23
     480:	18fb      	adds	r3, r7, r3
     482:	2202      	movs	r2, #2
     484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     486:	2310      	movs	r3, #16
     488:	61bb      	str	r3, [r7, #24]
		break;
     48a:	e02b      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     48c:	231f      	movs	r3, #31
     48e:	18fb      	adds	r3, r7, r3
     490:	2202      	movs	r2, #2
     492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     494:	2317      	movs	r3, #23
     496:	18fb      	adds	r3, r7, r3
     498:	2204      	movs	r2, #4
     49a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     49c:	2310      	movs	r3, #16
     49e:	61bb      	str	r3, [r7, #24]
		break;
     4a0:	e020      	b.n	4e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4a2:	231f      	movs	r3, #31
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	2201      	movs	r2, #1
     4a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4aa:	2317      	movs	r3, #23
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	2206      	movs	r2, #6
     4b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4b2:	2310      	movs	r3, #16
     4b4:	61bb      	str	r3, [r7, #24]
		break;
     4b6:	e015      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4b8:	231f      	movs	r3, #31
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	2200      	movs	r2, #0
     4be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4c0:	2317      	movs	r3, #23
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	2208      	movs	r2, #8
     4c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c8:	2310      	movs	r3, #16
     4ca:	61bb      	str	r3, [r7, #24]
		break;
     4cc:	e00a      	b.n	4e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4ce:	2330      	movs	r3, #48	; 0x30
     4d0:	61bb      	str	r3, [r7, #24]
		break;
     4d2:	e007      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4d4:	2320      	movs	r3, #32
     4d6:	61bb      	str	r3, [r7, #24]
		break;
     4d8:	e004      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4da:	2300      	movs	r3, #0
     4dc:	61bb      	str	r3, [r7, #24]
		break;
     4de:	e001      	b.n	4e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     4e0:	2317      	movs	r3, #23
     4e2:	e1ae      	b.n	842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4e4:	231f      	movs	r3, #31
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	011b      	lsls	r3, r3, #4
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2270      	movs	r2, #112	; 0x70
     4f0:	4013      	ands	r3, r2
     4f2:	b2da      	uxtb	r2, r3
     4f4:	2317      	movs	r3, #23
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	4313      	orrs	r3, r2
     4fc:	b2da      	uxtb	r2, r3
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     502:	683b      	ldr	r3, [r7, #0]
     504:	7ddb      	ldrb	r3, [r3, #23]
     506:	2b3f      	cmp	r3, #63	; 0x3f
     508:	d901      	bls.n	50e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     50a:	2317      	movs	r3, #23
     50c:	e199      	b.n	842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     50e:	683b      	ldr	r3, [r7, #0]
     510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     512:	693b      	ldr	r3, [r7, #16]
     514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     516:	46c0      	nop			; (mov r8, r8)
     518:	687b      	ldr	r3, [r7, #4]
     51a:	0018      	movs	r0, r3
     51c:	4b65      	ldr	r3, [pc, #404]	; (6b4 <_adc_set_config+0x378>)
     51e:	4798      	blx	r3
     520:	1e03      	subs	r3, r0, #0
     522:	d1f9      	bne.n	518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     524:	683b      	ldr	r3, [r7, #0]
     526:	885a      	ldrh	r2, [r3, #2]
     528:	69bb      	ldr	r3, [r7, #24]
     52a:	b29b      	uxth	r3, r3
     52c:	4313      	orrs	r3, r2
     52e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     530:	683b      	ldr	r3, [r7, #0]
     532:	2124      	movs	r1, #36	; 0x24
     534:	5c5b      	ldrb	r3, [r3, r1]
     536:	b29b      	uxth	r3, r3
     538:	00db      	lsls	r3, r3, #3
     53a:	b29b      	uxth	r3, r3
			resolution |
     53c:	4313      	orrs	r3, r2
     53e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     540:	683b      	ldr	r3, [r7, #0]
     542:	7d1b      	ldrb	r3, [r3, #20]
     544:	b29b      	uxth	r3, r3
     546:	009b      	lsls	r3, r3, #2
     548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     54a:	4313      	orrs	r3, r2
     54c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     54e:	683b      	ldr	r3, [r7, #0]
     550:	7c9b      	ldrb	r3, [r3, #18]
     552:	b29b      	uxth	r3, r3
     554:	18db      	adds	r3, r3, r3
     556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     558:	4313      	orrs	r3, r2
     55a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     55c:	683b      	ldr	r3, [r7, #0]
     55e:	7cdb      	ldrb	r3, [r3, #19]
     560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     562:	4313      	orrs	r3, r2
     564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     566:	693b      	ldr	r3, [r7, #16]
     568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	7e1b      	ldrb	r3, [r3, #24]
     56e:	2b00      	cmp	r3, #0
     570:	d100      	bne.n	574 <_adc_set_config+0x238>
     572:	e0c4      	b.n	6fe <_adc_set_config+0x3c2>
		switch (resolution) {
     574:	69bb      	ldr	r3, [r7, #24]
     576:	2b10      	cmp	r3, #16
     578:	d100      	bne.n	57c <_adc_set_config+0x240>
     57a:	e076      	b.n	66a <_adc_set_config+0x32e>
     57c:	d802      	bhi.n	584 <_adc_set_config+0x248>
     57e:	2b00      	cmp	r3, #0
     580:	d04d      	beq.n	61e <_adc_set_config+0x2e2>
     582:	e0bc      	b.n	6fe <_adc_set_config+0x3c2>
     584:	2b20      	cmp	r3, #32
     586:	d023      	beq.n	5d0 <_adc_set_config+0x294>
     588:	2b30      	cmp	r3, #48	; 0x30
     58a:	d000      	beq.n	58e <_adc_set_config+0x252>
     58c:	e0b7      	b.n	6fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     58e:	683b      	ldr	r3, [r7, #0]
     590:	7cdb      	ldrb	r3, [r3, #19]
     592:	2b00      	cmp	r3, #0
     594:	d011      	beq.n	5ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     596:	683b      	ldr	r3, [r7, #0]
     598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     59a:	2b7f      	cmp	r3, #127	; 0x7f
     59c:	dc0b      	bgt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     5a2:	3380      	adds	r3, #128	; 0x80
     5a4:	db07      	blt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     5a6:	683b      	ldr	r3, [r7, #0]
     5a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     5aa:	2b7f      	cmp	r3, #127	; 0x7f
     5ac:	dc03      	bgt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     5ae:	683b      	ldr	r3, [r7, #0]
     5b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     5b2:	3380      	adds	r3, #128	; 0x80
     5b4:	da01      	bge.n	5ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5b6:	2317      	movs	r3, #23
     5b8:	e143      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	69db      	ldr	r3, [r3, #28]
     5be:	2bff      	cmp	r3, #255	; 0xff
     5c0:	dc04      	bgt.n	5cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     5c6:	2bff      	cmp	r3, #255	; 0xff
     5c8:	dc00      	bgt.n	5cc <_adc_set_config+0x290>
     5ca:	e091      	b.n	6f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5cc:	2317      	movs	r3, #23
     5ce:	e138      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5d0:	683b      	ldr	r3, [r7, #0]
     5d2:	7cdb      	ldrb	r3, [r3, #19]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d015      	beq.n	604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     5dc:	4a36      	ldr	r2, [pc, #216]	; (6b8 <_adc_set_config+0x37c>)
     5de:	4293      	cmp	r3, r2
     5e0:	dc0e      	bgt.n	600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     5e6:	4a35      	ldr	r2, [pc, #212]	; (6bc <_adc_set_config+0x380>)
     5e8:	4293      	cmp	r3, r2
     5ea:	db09      	blt.n	600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     5f0:	4a31      	ldr	r2, [pc, #196]	; (6b8 <_adc_set_config+0x37c>)
     5f2:	4293      	cmp	r3, r2
     5f4:	dc04      	bgt.n	600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     5f6:	683b      	ldr	r3, [r7, #0]
     5f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     5fa:	4a30      	ldr	r2, [pc, #192]	; (6bc <_adc_set_config+0x380>)
     5fc:	4293      	cmp	r3, r2
     5fe:	da01      	bge.n	604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
     602:	e11e      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     604:	683b      	ldr	r3, [r7, #0]
     606:	69db      	ldr	r3, [r3, #28]
     608:	4a2d      	ldr	r2, [pc, #180]	; (6c0 <_adc_set_config+0x384>)
     60a:	4293      	cmp	r3, r2
     60c:	dc05      	bgt.n	61a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     60e:	683b      	ldr	r3, [r7, #0]
     610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     612:	4a2b      	ldr	r2, [pc, #172]	; (6c0 <_adc_set_config+0x384>)
     614:	4293      	cmp	r3, r2
     616:	dc00      	bgt.n	61a <_adc_set_config+0x2de>
     618:	e06c      	b.n	6f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     61a:	2317      	movs	r3, #23
     61c:	e111      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     61e:	683b      	ldr	r3, [r7, #0]
     620:	7cdb      	ldrb	r3, [r3, #19]
     622:	2b00      	cmp	r3, #0
     624:	d015      	beq.n	652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     626:	683b      	ldr	r3, [r7, #0]
     628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     62a:	4a26      	ldr	r2, [pc, #152]	; (6c4 <_adc_set_config+0x388>)
     62c:	4293      	cmp	r3, r2
     62e:	dc0e      	bgt.n	64e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     630:	683b      	ldr	r3, [r7, #0]
     632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     634:	4a24      	ldr	r2, [pc, #144]	; (6c8 <_adc_set_config+0x38c>)
     636:	4293      	cmp	r3, r2
     638:	db09      	blt.n	64e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     63e:	4a21      	ldr	r2, [pc, #132]	; (6c4 <_adc_set_config+0x388>)
     640:	4293      	cmp	r3, r2
     642:	dc04      	bgt.n	64e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     644:	683b      	ldr	r3, [r7, #0]
     646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     648:	4a1f      	ldr	r2, [pc, #124]	; (6c8 <_adc_set_config+0x38c>)
     64a:	4293      	cmp	r3, r2
     64c:	da01      	bge.n	652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     64e:	2317      	movs	r3, #23
     650:	e0f7      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     652:	683b      	ldr	r3, [r7, #0]
     654:	69db      	ldr	r3, [r3, #28]
     656:	4a1d      	ldr	r2, [pc, #116]	; (6cc <_adc_set_config+0x390>)
     658:	4293      	cmp	r3, r2
     65a:	dc04      	bgt.n	666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     65c:	683b      	ldr	r3, [r7, #0]
     65e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     660:	4a1a      	ldr	r2, [pc, #104]	; (6cc <_adc_set_config+0x390>)
     662:	4293      	cmp	r3, r2
     664:	dd48      	ble.n	6f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     666:	2317      	movs	r3, #23
     668:	e0eb      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	7cdb      	ldrb	r3, [r3, #19]
     66e:	2b00      	cmp	r3, #0
     670:	d032      	beq.n	6d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     672:	683b      	ldr	r3, [r7, #0]
     674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     676:	4a16      	ldr	r2, [pc, #88]	; (6d0 <_adc_set_config+0x394>)
     678:	4293      	cmp	r3, r2
     67a:	dc0e      	bgt.n	69a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     680:	4a14      	ldr	r2, [pc, #80]	; (6d4 <_adc_set_config+0x398>)
     682:	4293      	cmp	r3, r2
     684:	db09      	blt.n	69a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     686:	683b      	ldr	r3, [r7, #0]
     688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     68a:	4a11      	ldr	r2, [pc, #68]	; (6d0 <_adc_set_config+0x394>)
     68c:	4293      	cmp	r3, r2
     68e:	dc04      	bgt.n	69a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     690:	683b      	ldr	r3, [r7, #0]
     692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     694:	4a0f      	ldr	r2, [pc, #60]	; (6d4 <_adc_set_config+0x398>)
     696:	4293      	cmp	r3, r2
     698:	da1e      	bge.n	6d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     69a:	2317      	movs	r3, #23
     69c:	e0d1      	b.n	842 <_adc_set_config+0x506>
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00000115 	.word	0x00000115
     6a4:	00008095 	.word	0x00008095
     6a8:	000080d9 	.word	0x000080d9
     6ac:	000002c5 	.word	0x000002c5
     6b0:	0000bca0 	.word	0x0000bca0
     6b4:	000001f1 	.word	0x000001f1
     6b8:	000001ff 	.word	0x000001ff
     6bc:	fffffe00 	.word	0xfffffe00
     6c0:	000003ff 	.word	0x000003ff
     6c4:	000007ff 	.word	0x000007ff
     6c8:	fffff800 	.word	0xfffff800
     6cc:	00000fff 	.word	0x00000fff
     6d0:	00007fff 	.word	0x00007fff
     6d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     6d8:	683b      	ldr	r3, [r7, #0]
     6da:	69db      	ldr	r3, [r3, #28]
     6dc:	4a5b      	ldr	r2, [pc, #364]	; (84c <_adc_set_config+0x510>)
     6de:	4293      	cmp	r3, r2
     6e0:	dc04      	bgt.n	6ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     6e6:	4a59      	ldr	r2, [pc, #356]	; (84c <_adc_set_config+0x510>)
     6e8:	4293      	cmp	r3, r2
     6ea:	dd07      	ble.n	6fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6ec:	2317      	movs	r3, #23
     6ee:	e0a8      	b.n	842 <_adc_set_config+0x506>
			break;
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	e004      	b.n	6fe <_adc_set_config+0x3c2>
			break;
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	e002      	b.n	6fe <_adc_set_config+0x3c2>
			break;
     6f8:	46c0      	nop			; (mov r8, r8)
     6fa:	e000      	b.n	6fe <_adc_set_config+0x3c2>
			}
			break;
     6fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	687b      	ldr	r3, [r7, #4]
     702:	0018      	movs	r0, r3
     704:	4b52      	ldr	r3, [pc, #328]	; (850 <_adc_set_config+0x514>)
     706:	4798      	blx	r3
     708:	1e03      	subs	r3, r0, #0
     70a:	d1f9      	bne.n	700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	7e1a      	ldrb	r2, [r3, #24]
     710:	693b      	ldr	r3, [r7, #16]
     712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     714:	46c0      	nop			; (mov r8, r8)
     716:	687b      	ldr	r3, [r7, #4]
     718:	0018      	movs	r0, r3
     71a:	4b4d      	ldr	r3, [pc, #308]	; (850 <_adc_set_config+0x514>)
     71c:	4798      	blx	r3
     71e:	1e03      	subs	r3, r0, #0
     720:	d1f9      	bne.n	716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     722:	683b      	ldr	r3, [r7, #0]
     724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     726:	b29a      	uxth	r2, r3
     728:	693b      	ldr	r3, [r7, #16]
     72a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	0018      	movs	r0, r3
     732:	4b47      	ldr	r3, [pc, #284]	; (850 <_adc_set_config+0x514>)
     734:	4798      	blx	r3
     736:	1e03      	subs	r3, r0, #0
     738:	d1f9      	bne.n	72e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	6a1b      	ldr	r3, [r3, #32]
     73e:	b29a      	uxth	r2, r3
     740:	693b      	ldr	r3, [r7, #16]
     742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     744:	2314      	movs	r3, #20
     746:	18fb      	adds	r3, r7, r3
     748:	683a      	ldr	r2, [r7, #0]
     74a:	212c      	movs	r1, #44	; 0x2c
     74c:	5c52      	ldrb	r2, [r2, r1]
     74e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     750:	2314      	movs	r3, #20
     752:	18fb      	adds	r3, r7, r3
     754:	781b      	ldrb	r3, [r3, #0]
     756:	2b00      	cmp	r3, #0
     758:	d006      	beq.n	768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     75a:	2314      	movs	r3, #20
     75c:	18fb      	adds	r3, r7, r3
     75e:	781a      	ldrb	r2, [r3, #0]
     760:	2314      	movs	r3, #20
     762:	18fb      	adds	r3, r7, r3
     764:	3a01      	subs	r2, #1
     766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     768:	2314      	movs	r3, #20
     76a:	18fb      	adds	r3, r7, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2b0f      	cmp	r3, #15
     770:	d804      	bhi.n	77c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     772:	683b      	ldr	r3, [r7, #0]
     774:	222b      	movs	r2, #43	; 0x2b
     776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     778:	2b0f      	cmp	r3, #15
     77a:	d901      	bls.n	780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     77c:	2317      	movs	r3, #23
     77e:	e060      	b.n	842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     780:	46c0      	nop			; (mov r8, r8)
     782:	687b      	ldr	r3, [r7, #4]
     784:	0018      	movs	r0, r3
     786:	4b32      	ldr	r3, [pc, #200]	; (850 <_adc_set_config+0x514>)
     788:	4798      	blx	r3
     78a:	1e03      	subs	r3, r0, #0
     78c:	d1f9      	bne.n	782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     78e:	683b      	ldr	r3, [r7, #0]
     790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     792:	683a      	ldr	r2, [r7, #0]
     794:	212b      	movs	r1, #43	; 0x2b
     796:	5c52      	ldrb	r2, [r2, r1]
     798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     79a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     79c:	2214      	movs	r2, #20
     79e:	18ba      	adds	r2, r7, r2
     7a0:	7812      	ldrb	r2, [r2, #0]
     7a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     7a4:	4313      	orrs	r3, r2
			config->negative_input |
     7a6:	683a      	ldr	r2, [r7, #0]
     7a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7aa:	4313      	orrs	r3, r2
			config->positive_input;
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     7b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     7b2:	693b      	ldr	r3, [r7, #16]
     7b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	222a      	movs	r2, #42	; 0x2a
     7ba:	5c9a      	ldrb	r2, [r3, r2]
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7c0:	693b      	ldr	r3, [r7, #16]
     7c2:	220f      	movs	r2, #15
     7c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	2224      	movs	r2, #36	; 0x24
     7ca:	5c9b      	ldrb	r3, [r3, r2]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d01e      	beq.n	80e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     7d4:	4a1f      	ldr	r2, [pc, #124]	; (854 <_adc_set_config+0x518>)
     7d6:	4293      	cmp	r3, r2
     7d8:	d901      	bls.n	7de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     7da:	2317      	movs	r3, #23
     7dc:	e031      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     7e2:	693b      	ldr	r3, [r7, #16]
     7e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7e6:	683b      	ldr	r3, [r7, #0]
     7e8:	2228      	movs	r2, #40	; 0x28
     7ea:	5e9b      	ldrsh	r3, [r3, r2]
     7ec:	4a1a      	ldr	r2, [pc, #104]	; (858 <_adc_set_config+0x51c>)
     7ee:	4293      	cmp	r3, r2
     7f0:	dc05      	bgt.n	7fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	2228      	movs	r2, #40	; 0x28
     7f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     7f8:	4a18      	ldr	r2, [pc, #96]	; (85c <_adc_set_config+0x520>)
     7fa:	4293      	cmp	r3, r2
     7fc:	da01      	bge.n	802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     7fe:	2317      	movs	r3, #23
     800:	e01f      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     802:	683b      	ldr	r3, [r7, #0]
     804:	2228      	movs	r2, #40	; 0x28
     806:	5e9b      	ldrsh	r3, [r3, r2]
     808:	b29a      	uxth	r2, r3
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <_adc_set_config+0x524>)
     810:	681b      	ldr	r3, [r3, #0]
     812:	08db      	lsrs	r3, r3, #3
     814:	b29b      	uxth	r3, r3
     816:	021b      	lsls	r3, r3, #8
     818:	b29a      	uxth	r2, r3
     81a:	23e0      	movs	r3, #224	; 0xe0
     81c:	00db      	lsls	r3, r3, #3
     81e:	4013      	ands	r3, r2
     820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <_adc_set_config+0x528>)
     824:	685c      	ldr	r4, [r3, #4]
     826:	681b      	ldr	r3, [r3, #0]
     828:	0161      	lsls	r1, r4, #5
     82a:	0edd      	lsrs	r5, r3, #27
     82c:	430d      	orrs	r5, r1
     82e:	0ee6      	lsrs	r6, r4, #27
     830:	b2ab      	uxth	r3, r5
     832:	21ff      	movs	r1, #255	; 0xff
     834:	400b      	ands	r3, r1
     836:	b29b      	uxth	r3, r3
			) |
     838:	4313      	orrs	r3, r2
     83a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     83c:	693b      	ldr	r3, [r7, #16]
     83e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     840:	2300      	movs	r3, #0
}
     842:	0018      	movs	r0, r3
     844:	46bd      	mov	sp, r7
     846:	b009      	add	sp, #36	; 0x24
     848:	bdf0      	pop	{r4, r5, r6, r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	0000ffff 	.word	0x0000ffff
     850:	000001f1 	.word	0x000001f1
     854:	00000fff 	.word	0x00000fff
     858:	000007ff 	.word	0x000007ff
     85c:	fffff800 	.word	0xfffff800
     860:	00806024 	.word	0x00806024
     864:	00806020 	.word	0x00806020

00000868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     868:	b580      	push	{r7, lr}
     86a:	b086      	sub	sp, #24
     86c:	af00      	add	r7, sp, #0
     86e:	60f8      	str	r0, [r7, #12]
     870:	60b9      	str	r1, [r7, #8]
     872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     874:	68fb      	ldr	r3, [r7, #12]
     876:	68ba      	ldr	r2, [r7, #8]
     878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     87a:	2380      	movs	r3, #128	; 0x80
     87c:	025b      	lsls	r3, r3, #9
     87e:	0019      	movs	r1, r3
     880:	2002      	movs	r0, #2
     882:	4b32      	ldr	r3, [pc, #200]	; (94c <adc_init+0xe4>)
     884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     886:	68bb      	ldr	r3, [r7, #8]
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2301      	movs	r3, #1
     890:	4013      	ands	r3, r2
     892:	d001      	beq.n	898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     894:	2305      	movs	r3, #5
     896:	e055      	b.n	944 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     898:	68bb      	ldr	r3, [r7, #8]
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	b2db      	uxtb	r3, r3
     89e:	001a      	movs	r2, r3
     8a0:	2302      	movs	r3, #2
     8a2:	4013      	ands	r3, r2
     8a4:	d001      	beq.n	8aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     8a6:	231c      	movs	r3, #28
     8a8:	e04c      	b.n	944 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	785a      	ldrb	r2, [r3, #1]
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	791b      	ldrb	r3, [r3, #4]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d102      	bne.n	8c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     8ba:	2001      	movs	r0, #1
     8bc:	4b24      	ldr	r3, [pc, #144]	; (950 <adc_init+0xe8>)
     8be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8c0:	2317      	movs	r3, #23
     8c2:	18fb      	adds	r3, r7, r3
     8c4:	2200      	movs	r2, #0
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	e00e      	b.n	8e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
     8ca:	2317      	movs	r3, #23
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	3202      	adds	r2, #2
     8d4:	0092      	lsls	r2, r2, #2
     8d6:	2100      	movs	r1, #0
     8d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8da:	2317      	movs	r3, #23
     8dc:	18fb      	adds	r3, r7, r3
     8de:	781a      	ldrb	r2, [r3, #0]
     8e0:	2317      	movs	r3, #23
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	3201      	adds	r2, #1
     8e6:	701a      	strb	r2, [r3, #0]
     8e8:	2317      	movs	r3, #23
     8ea:	18fb      	adds	r3, r7, r3
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	2b02      	cmp	r3, #2
     8f0:	d9eb      	bls.n	8ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	2200      	movs	r2, #0
     8f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	2200      	movs	r2, #0
     8fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     8fe:	68fb      	ldr	r3, [r7, #12]
     900:	2200      	movs	r2, #0
     902:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     904:	68fb      	ldr	r3, [r7, #12]
     906:	2200      	movs	r2, #0
     908:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
     90a:	4b12      	ldr	r3, [pc, #72]	; (954 <adc_init+0xec>)
     90c:	68fa      	ldr	r2, [r7, #12]
     90e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     910:	687b      	ldr	r3, [r7, #4]
     912:	222a      	movs	r2, #42	; 0x2a
     914:	5c9b      	ldrb	r3, [r3, r2]
     916:	2b00      	cmp	r3, #0
     918:	d10a      	bne.n	930 <adc_init+0xc8>
			!config->freerunning) {
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	7d1b      	ldrb	r3, [r3, #20]
     91e:	2201      	movs	r2, #1
     920:	4053      	eors	r3, r2
     922:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     924:	2b00      	cmp	r3, #0
     926:	d003      	beq.n	930 <adc_init+0xc8>
		module_inst->software_trigger = true;
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	2201      	movs	r2, #1
     92c:	775a      	strb	r2, [r3, #29]
     92e:	e002      	b.n	936 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
     930:	68fb      	ldr	r3, [r7, #12]
     932:	2200      	movs	r2, #0
     934:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     936:	687a      	ldr	r2, [r7, #4]
     938:	68fb      	ldr	r3, [r7, #12]
     93a:	0011      	movs	r1, r2
     93c:	0018      	movs	r0, r3
     93e:	4b06      	ldr	r3, [pc, #24]	; (958 <adc_init+0xf0>)
     940:	4798      	blx	r3
     942:	0003      	movs	r3, r0
}
     944:	0018      	movs	r0, r3
     946:	46bd      	mov	sp, r7
     948:	b006      	add	sp, #24
     94a:	bd80      	pop	{r7, pc}
     94c:	0000012d 	.word	0x0000012d
     950:	000001b1 	.word	0x000001b1
     954:	200052e4 	.word	0x200052e4
     958:	0000033d 	.word	0x0000033d

0000095c <adc_is_syncing>:
{
     95c:	b580      	push	{r7, lr}
     95e:	b084      	sub	sp, #16
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     964:	687b      	ldr	r3, [r7, #4]
     966:	681b      	ldr	r3, [r3, #0]
     968:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	7e5b      	ldrb	r3, [r3, #25]
     96e:	b2db      	uxtb	r3, r3
     970:	b25b      	sxtb	r3, r3
     972:	2b00      	cmp	r3, #0
     974:	da01      	bge.n	97a <adc_is_syncing+0x1e>
		return true;
     976:	2301      	movs	r3, #1
     978:	e000      	b.n	97c <adc_is_syncing+0x20>
	return false;
     97a:	2300      	movs	r3, #0
}
     97c:	0018      	movs	r0, r3
     97e:	46bd      	mov	sp, r7
     980:	b004      	add	sp, #16
     982:	bd80      	pop	{r7, pc}

00000984 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     984:	b580      	push	{r7, lr}
     986:	b084      	sub	sp, #16
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	681b      	ldr	r3, [r3, #0]
     990:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     992:	46c0      	nop			; (mov r8, r8)
     994:	687b      	ldr	r3, [r7, #4]
     996:	0018      	movs	r0, r3
     998:	4b0b      	ldr	r3, [pc, #44]	; (9c8 <adc_start_conversion+0x44>)
     99a:	4798      	blx	r3
     99c:	1e03      	subs	r3, r0, #0
     99e:	d1f9      	bne.n	994 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9a0:	68fb      	ldr	r3, [r7, #12]
     9a2:	7b1b      	ldrb	r3, [r3, #12]
     9a4:	b2db      	uxtb	r3, r3
     9a6:	2202      	movs	r2, #2
     9a8:	4313      	orrs	r3, r2
     9aa:	b2da      	uxtb	r2, r3
     9ac:	68fb      	ldr	r3, [r7, #12]
     9ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	0018      	movs	r0, r3
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <adc_start_conversion+0x44>)
     9b8:	4798      	blx	r3
     9ba:	1e03      	subs	r3, r0, #0
     9bc:	d1f9      	bne.n	9b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	46bd      	mov	sp, r7
     9c2:	b004      	add	sp, #16
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000095d 	.word	0x0000095d

000009cc <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	000a      	movs	r2, r1
     9d6:	1cfb      	adds	r3, r7, #3
     9d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	1cfa      	adds	r2, r7, #3
     9e4:	7812      	ldrb	r2, [r2, #0]
     9e6:	75da      	strb	r2, [r3, #23]
}
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	46bd      	mov	sp, r7
     9ec:	b004      	add	sp, #16
     9ee:	bd80      	pop	{r7, pc}

000009f0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b084      	sub	sp, #16
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
     9f8:	000a      	movs	r2, r1
     9fa:	1cfb      	adds	r3, r7, #3
     9fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	681b      	ldr	r3, [r3, #0]
     a02:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a04:	68fb      	ldr	r3, [r7, #12]
     a06:	1cfa      	adds	r2, r7, #3
     a08:	7812      	ldrb	r2, [r2, #0]
     a0a:	759a      	strb	r2, [r3, #22]
}
     a0c:	46c0      	nop			; (mov r8, r8)
     a0e:	46bd      	mov	sp, r7
     a10:	b004      	add	sp, #16
     a12:	bd80      	pop	{r7, pc}

00000a14 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     a14:	b580      	push	{r7, lr}
     a16:	b084      	sub	sp, #16
     a18:	af00      	add	r7, sp, #0
     a1a:	0002      	movs	r2, r0
     a1c:	1dfb      	adds	r3, r7, #7
     a1e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     a20:	1dfb      	adds	r3, r7, #7
     a22:	781a      	ldrb	r2, [r3, #0]
     a24:	4b47      	ldr	r3, [pc, #284]	; (b44 <_adc_interrupt_handler+0x130>)
     a26:	0092      	lsls	r2, r2, #2
     a28:	58d3      	ldr	r3, [r2, r3]
     a2a:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	7e1b      	ldrb	r3, [r3, #24]
     a32:	b2da      	uxtb	r2, r3
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	7ddb      	ldrb	r3, [r3, #23]
     a3a:	b2db      	uxtb	r3, r3
     a3c:	4013      	ands	r3, r2
     a3e:	b2db      	uxtb	r3, r3
     a40:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     a42:	68bb      	ldr	r3, [r7, #8]
     a44:	2201      	movs	r2, #1
     a46:	4013      	ands	r3, r2
     a48:	d045      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	2201      	movs	r2, #1
     a50:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	0018      	movs	r0, r3
     a58:	4b3b      	ldr	r3, [pc, #236]	; (b48 <_adc_interrupt_handler+0x134>)
     a5a:	4798      	blx	r3
     a5c:	1e03      	subs	r3, r0, #0
     a5e:	d1f9      	bne.n	a54 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	695b      	ldr	r3, [r3, #20]
     a64:	1c99      	adds	r1, r3, #2
     a66:	68fa      	ldr	r2, [r7, #12]
     a68:	6151      	str	r1, [r2, #20]
     a6a:	68fa      	ldr	r2, [r7, #12]
     a6c:	6812      	ldr	r2, [r2, #0]
     a6e:	8b52      	ldrh	r2, [r2, #26]
     a70:	b292      	uxth	r2, r2
     a72:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	8b1b      	ldrh	r3, [r3, #24]
     a78:	b29b      	uxth	r3, r3
     a7a:	3b01      	subs	r3, #1
     a7c:	b29b      	uxth	r3, r3
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	1c19      	adds	r1, r3, #0
     a82:	8311      	strh	r1, [r2, #24]
     a84:	2b00      	cmp	r3, #0
     a86:	d008      	beq.n	a9a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	7f5b      	ldrb	r3, [r3, #29]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d022      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	0018      	movs	r0, r3
     a94:	4b2d      	ldr	r3, [pc, #180]	; (b4c <_adc_interrupt_handler+0x138>)
     a96:	4798      	blx	r3
     a98:	e01d      	b.n	ad6 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     a9a:	68fb      	ldr	r3, [r7, #12]
     a9c:	2101      	movs	r1, #1
     a9e:	0018      	movs	r0, r3
     aa0:	4b2b      	ldr	r3, [pc, #172]	; (b50 <_adc_interrupt_handler+0x13c>)
     aa2:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	7f1b      	ldrb	r3, [r3, #28]
     aa8:	b2db      	uxtb	r3, r3
     aaa:	2b05      	cmp	r3, #5
     aac:	d113      	bne.n	ad6 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	2200      	movs	r2, #0
     ab2:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     ab4:	68fb      	ldr	r3, [r7, #12]
     ab6:	7edb      	ldrb	r3, [r3, #27]
     ab8:	001a      	movs	r2, r3
     aba:	2301      	movs	r3, #1
     abc:	4013      	ands	r3, r2
     abe:	d00a      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	7e9b      	ldrb	r3, [r3, #26]
     ac4:	001a      	movs	r2, r3
     ac6:	2301      	movs	r3, #1
     ac8:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     aca:	d004      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	68fa      	ldr	r2, [r7, #12]
     ad2:	0010      	movs	r0, r2
     ad4:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     ad6:	68bb      	ldr	r3, [r7, #8]
     ad8:	2204      	movs	r2, #4
     ada:	4013      	ands	r3, r2
     adc:	d014      	beq.n	b08 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     ade:	68fb      	ldr	r3, [r7, #12]
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	2204      	movs	r2, #4
     ae4:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ae6:	68fb      	ldr	r3, [r7, #12]
     ae8:	7edb      	ldrb	r3, [r3, #27]
     aea:	001a      	movs	r2, r3
     aec:	2302      	movs	r3, #2
     aee:	4013      	ands	r3, r2
     af0:	d00a      	beq.n	b08 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     af2:	68fb      	ldr	r3, [r7, #12]
     af4:	7e9b      	ldrb	r3, [r3, #26]
     af6:	001a      	movs	r2, r3
     af8:	2302      	movs	r3, #2
     afa:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     afc:	d004      	beq.n	b08 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	68db      	ldr	r3, [r3, #12]
     b02:	68fa      	ldr	r2, [r7, #12]
     b04:	0010      	movs	r0, r2
     b06:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     b08:	68bb      	ldr	r3, [r7, #8]
     b0a:	2202      	movs	r2, #2
     b0c:	4013      	ands	r3, r2
     b0e:	d014      	beq.n	b3a <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	2202      	movs	r2, #2
     b16:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	7edb      	ldrb	r3, [r3, #27]
     b1c:	001a      	movs	r2, r3
     b1e:	2304      	movs	r3, #4
     b20:	4013      	ands	r3, r2
     b22:	d00a      	beq.n	b3a <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     b24:	68fb      	ldr	r3, [r7, #12]
     b26:	7e9b      	ldrb	r3, [r3, #26]
     b28:	001a      	movs	r2, r3
     b2a:	2304      	movs	r3, #4
     b2c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b2e:	d004      	beq.n	b3a <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	691b      	ldr	r3, [r3, #16]
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	0010      	movs	r0, r2
     b38:	4798      	blx	r3
		}
	}
}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	46bd      	mov	sp, r7
     b3e:	b004      	add	sp, #16
     b40:	bd80      	pop	{r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	200052e4 	.word	0x200052e4
     b48:	0000095d 	.word	0x0000095d
     b4c:	00000985 	.word	0x00000985
     b50:	000009f1 	.word	0x000009f1

00000b54 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     b58:	2000      	movs	r0, #0
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <ADC_Handler+0x10>)
     b5c:	4798      	blx	r3
}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	46bd      	mov	sp, r7
     b62:	bd80      	pop	{r7, pc}
     b64:	00000a15 	.word	0x00000a15

00000b68 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b084      	sub	sp, #16
     b6c:	af00      	add	r7, sp, #0
     b6e:	60f8      	str	r0, [r7, #12]
     b70:	60b9      	str	r1, [r7, #8]
     b72:	1dfb      	adds	r3, r7, #7
     b74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b76:	1dfb      	adds	r3, r7, #7
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	3202      	adds	r2, #2
     b7e:	0092      	lsls	r2, r2, #2
     b80:	68b9      	ldr	r1, [r7, #8]
     b82:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     b84:	68fb      	ldr	r3, [r7, #12]
     b86:	7e9b      	ldrb	r3, [r3, #26]
     b88:	b25a      	sxtb	r2, r3
     b8a:	1dfb      	adds	r3, r7, #7
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	2101      	movs	r1, #1
     b90:	4099      	lsls	r1, r3
     b92:	000b      	movs	r3, r1
     b94:	b25b      	sxtb	r3, r3
     b96:	4313      	orrs	r3, r2
     b98:	b25b      	sxtb	r3, r3
     b9a:	b2da      	uxtb	r2, r3
     b9c:	68fb      	ldr	r3, [r7, #12]
     b9e:	769a      	strb	r2, [r3, #26]
}
     ba0:	46c0      	nop			; (mov r8, r8)
     ba2:	46bd      	mov	sp, r7
     ba4:	b004      	add	sp, #16
     ba6:	bd80      	pop	{r7, pc}

00000ba8 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     ba8:	b580      	push	{r7, lr}
     baa:	b084      	sub	sp, #16
     bac:	af00      	add	r7, sp, #0
     bae:	60f8      	str	r0, [r7, #12]
     bb0:	60b9      	str	r1, [r7, #8]
     bb2:	1dbb      	adds	r3, r7, #6
     bb4:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     bb6:	68fb      	ldr	r3, [r7, #12]
     bb8:	8b1b      	ldrh	r3, [r3, #24]
     bba:	b29b      	uxth	r3, r3
     bbc:	2b00      	cmp	r3, #0
     bbe:	d104      	bne.n	bca <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
     bc0:	68fb      	ldr	r3, [r7, #12]
     bc2:	7f1b      	ldrb	r3, [r3, #28]
     bc4:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
     bc6:	2b05      	cmp	r3, #5
     bc8:	d101      	bne.n	bce <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
     bca:	2305      	movs	r3, #5
     bcc:	e017      	b.n	bfe <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	2205      	movs	r2, #5
     bd2:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
     bd4:	68fb      	ldr	r3, [r7, #12]
     bd6:	1dba      	adds	r2, r7, #6
     bd8:	8812      	ldrh	r2, [r2, #0]
     bda:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
     bdc:	68fb      	ldr	r3, [r7, #12]
     bde:	68ba      	ldr	r2, [r7, #8]
     be0:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	2101      	movs	r1, #1
     be6:	0018      	movs	r0, r3
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <adc_read_buffer_job+0x60>)
     bea:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	7f5b      	ldrb	r3, [r3, #29]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d003      	beq.n	bfc <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
     bf4:	68fb      	ldr	r3, [r7, #12]
     bf6:	0018      	movs	r0, r3
     bf8:	4b04      	ldr	r3, [pc, #16]	; (c0c <adc_read_buffer_job+0x64>)
     bfa:	4798      	blx	r3
	}

	return STATUS_OK;
     bfc:	2300      	movs	r3, #0
}
     bfe:	0018      	movs	r0, r3
     c00:	46bd      	mov	sp, r7
     c02:	b004      	add	sp, #16
     c04:	bd80      	pop	{r7, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	000009cd 	.word	0x000009cd
     c0c:	00000985 	.word	0x00000985

00000c10 <adc_get_job_status>:
 * \return Status of the job.
 */
enum status_code adc_get_job_status(
		struct adc_module *module_inst,
		enum adc_job_type type)
{
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
     c18:	000a      	movs	r2, r1
     c1a:	1cfb      	adds	r3, r7, #3
     c1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
     c1e:	1cfb      	adds	r3, r7, #3
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b00      	cmp	r3, #0
     c24:	d103      	bne.n	c2e <adc_get_job_status+0x1e>
		return module_inst->job_status;
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	7f1b      	ldrb	r3, [r3, #28]
     c2a:	b2db      	uxtb	r3, r3
     c2c:	e000      	b.n	c30 <adc_get_job_status+0x20>
	} else {
		return STATUS_ERR_INVALID_ARG;
     c2e:	2317      	movs	r3, #23
	}
}
     c30:	0018      	movs	r0, r3
     c32:	46bd      	mov	sp, r7
     c34:	b002      	add	sp, #8
     c36:	bd80      	pop	{r7, pc}

00000c38 <system_gclk_chan_get_config_defaults>:
{
     c38:	b580      	push	{r7, lr}
     c3a:	b082      	sub	sp, #8
     c3c:	af00      	add	r7, sp, #0
     c3e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	2200      	movs	r2, #0
     c44:	701a      	strb	r2, [r3, #0]
}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	46bd      	mov	sp, r7
     c4a:	b002      	add	sp, #8
     c4c:	bd80      	pop	{r7, pc}
	...

00000c50 <system_apb_clock_set_mask>:
{
     c50:	b580      	push	{r7, lr}
     c52:	b082      	sub	sp, #8
     c54:	af00      	add	r7, sp, #0
     c56:	0002      	movs	r2, r0
     c58:	6039      	str	r1, [r7, #0]
     c5a:	1dfb      	adds	r3, r7, #7
     c5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     c5e:	1dfb      	adds	r3, r7, #7
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b01      	cmp	r3, #1
     c64:	d00a      	beq.n	c7c <system_apb_clock_set_mask+0x2c>
     c66:	2b02      	cmp	r3, #2
     c68:	d00f      	beq.n	c8a <system_apb_clock_set_mask+0x3a>
     c6a:	2b00      	cmp	r3, #0
     c6c:	d114      	bne.n	c98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     c6e:	4b0e      	ldr	r3, [pc, #56]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c70:	4a0d      	ldr	r2, [pc, #52]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c72:	6991      	ldr	r1, [r2, #24]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	430a      	orrs	r2, r1
     c78:	619a      	str	r2, [r3, #24]
			break;
     c7a:	e00f      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c7e:	4a0a      	ldr	r2, [pc, #40]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c80:	69d1      	ldr	r1, [r2, #28]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	430a      	orrs	r2, r1
     c86:	61da      	str	r2, [r3, #28]
			break;
     c88:	e008      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c8c:	4a06      	ldr	r2, [pc, #24]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c8e:	6a11      	ldr	r1, [r2, #32]
     c90:	683a      	ldr	r2, [r7, #0]
     c92:	430a      	orrs	r2, r1
     c94:	621a      	str	r2, [r3, #32]
			break;
     c96:	e001      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     c98:	2317      	movs	r3, #23
     c9a:	e000      	b.n	c9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     c9c:	2300      	movs	r3, #0
}
     c9e:	0018      	movs	r0, r3
     ca0:	46bd      	mov	sp, r7
     ca2:	b002      	add	sp, #8
     ca4:	bd80      	pop	{r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	40000400 	.word	0x40000400

00000cac <system_pinmux_get_config_defaults>:
{
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	2280      	movs	r2, #128	; 0x80
     cb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	2200      	movs	r2, #0
     cbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	2201      	movs	r2, #1
     cc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	2200      	movs	r2, #0
     cca:	70da      	strb	r2, [r3, #3]
}
     ccc:	46c0      	nop			; (mov r8, r8)
     cce:	46bd      	mov	sp, r7
     cd0:	b002      	add	sp, #8
     cd2:	bd80      	pop	{r7, pc}

00000cd4 <system_voltage_reference_enable>:
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b082      	sub	sp, #8
     cd8:	af00      	add	r7, sp, #0
     cda:	0002      	movs	r2, r0
     cdc:	1dfb      	adds	r3, r7, #7
     cde:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d002      	beq.n	cee <system_voltage_reference_enable+0x1a>
     ce8:	2b01      	cmp	r3, #1
     cea:	d007      	beq.n	cfc <system_voltage_reference_enable+0x28>
			return;
     cec:	e00d      	b.n	d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     cee:	4b08      	ldr	r3, [pc, #32]	; (d10 <system_voltage_reference_enable+0x3c>)
     cf0:	4a07      	ldr	r2, [pc, #28]	; (d10 <system_voltage_reference_enable+0x3c>)
     cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
     cf4:	2102      	movs	r1, #2
     cf6:	430a      	orrs	r2, r1
     cf8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     cfa:	e006      	b.n	d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <system_voltage_reference_enable+0x3c>)
     cfe:	4a04      	ldr	r2, [pc, #16]	; (d10 <system_voltage_reference_enable+0x3c>)
     d00:	6c12      	ldr	r2, [r2, #64]	; 0x40
     d02:	2104      	movs	r1, #4
     d04:	430a      	orrs	r2, r1
     d06:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     d08:	46c0      	nop			; (mov r8, r8)
}
     d0a:	46bd      	mov	sp, r7
     d0c:	b002      	add	sp, #8
     d0e:	bd80      	pop	{r7, pc}
     d10:	40000800 	.word	0x40000800

00000d14 <_dac_set_config>:
 *
 */
static void _dac_set_config(
		struct dac_module *const module_inst,
		struct dac_config *const config)
{
     d14:	b580      	push	{r7, lr}
     d16:	b086      	sub	sp, #24
     d18:	af00      	add	r7, sp, #0
     d1a:	6078      	str	r0, [r7, #4]
     d1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(config);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	60fb      	str	r3, [r7, #12]

	/* Set selected DAC output to be enabled when enabling the module */
	module_inst->output = config->output;
     d24:	683b      	ldr	r3, [r7, #0]
     d26:	785a      	ldrb	r2, [r3, #1]
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	711a      	strb	r2, [r3, #4]
	module_inst->start_on_event = false;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2200      	movs	r2, #0
     d30:	719a      	strb	r2, [r3, #6]

	uint32_t new_ctrla = 0;
     d32:	2300      	movs	r3, #0
     d34:	617b      	str	r3, [r7, #20]
	uint32_t new_ctrlb = 0;
     d36:	2300      	movs	r3, #0
     d38:	613b      	str	r3, [r7, #16]

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	799b      	ldrb	r3, [r3, #6]
     d3e:	2b00      	cmp	r3, #0
     d40:	d003      	beq.n	d4a <_dac_set_config+0x36>
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     d42:	697b      	ldr	r3, [r7, #20]
     d44:	2204      	movs	r2, #4
     d46:	4313      	orrs	r3, r2
     d48:	617b      	str	r3, [r7, #20]
	}

	/* Set reference voltage */
	new_ctrlb |= config->reference;
     d4a:	683b      	ldr	r3, [r7, #0]
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	001a      	movs	r2, r3
     d50:	693b      	ldr	r3, [r7, #16]
     d52:	4313      	orrs	r3, r2
     d54:	613b      	str	r3, [r7, #16]

	/* Left adjust data if configured */
	if (config->left_adjust) {
     d56:	683b      	ldr	r3, [r7, #0]
     d58:	789b      	ldrb	r3, [r3, #2]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d003      	beq.n	d66 <_dac_set_config+0x52>
		new_ctrlb |= DAC_CTRLB_LEFTADJ;
     d5e:	693b      	ldr	r3, [r7, #16]
     d60:	2204      	movs	r2, #4
     d62:	4313      	orrs	r3, r2
     d64:	613b      	str	r3, [r7, #16]
	}

#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	/* Bypass DATABUF write protection if configured */
	if (config->databuf_protection_bypass) {
     d66:	683b      	ldr	r3, [r7, #0]
     d68:	791b      	ldrb	r3, [r3, #4]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d003      	beq.n	d76 <_dac_set_config+0x62>
		new_ctrlb |= DAC_CTRLB_BDWP;
     d6e:	693b      	ldr	r3, [r7, #16]
     d70:	2210      	movs	r2, #16
     d72:	4313      	orrs	r3, r2
     d74:	613b      	str	r3, [r7, #16]
	}
#endif

	/* Voltage pump disable if configured */
	if (config->voltage_pump_disable) {
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	795b      	ldrb	r3, [r3, #5]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d003      	beq.n	d86 <_dac_set_config+0x72>
		new_ctrlb |= DAC_CTRLB_VPD;
     d7e:	693b      	ldr	r3, [r7, #16]
     d80:	2208      	movs	r2, #8
     d82:	4313      	orrs	r3, r2
     d84:	613b      	str	r3, [r7, #16]
	}

	/* Apply the new configuration to the hardware module */
	dac_module->CTRLA.reg = new_ctrla;
     d86:	697b      	ldr	r3, [r7, #20]
     d88:	b2da      	uxtb	r2, r3
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	701a      	strb	r2, [r3, #0]

	while (dac_is_syncing(module_inst)) {
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	0018      	movs	r0, r3
     d94:	4b05      	ldr	r3, [pc, #20]	; (dac <_dac_set_config+0x98>)
     d96:	4798      	blx	r3
     d98:	1e03      	subs	r3, r0, #0
     d9a:	d1f9      	bne.n	d90 <_dac_set_config+0x7c>
		/* Wait until the synchronization is complete */
	}

	dac_module->CTRLB.reg = new_ctrlb;
     d9c:	693b      	ldr	r3, [r7, #16]
     d9e:	b2da      	uxtb	r2, r3
     da0:	68fb      	ldr	r3, [r7, #12]
     da2:	705a      	strb	r2, [r3, #1]
}
     da4:	46c0      	nop			; (mov r8, r8)
     da6:	46bd      	mov	sp, r7
     da8:	b006      	add	sp, #24
     daa:	bd80      	pop	{r7, pc}
     dac:	00000db1 	.word	0x00000db1

00000db0 <dac_is_syncing>:
 * \retval true If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
bool dac_is_syncing(
		struct dac_module *const dev_inst)
{
     db0:	b580      	push	{r7, lr}
     db2:	b084      	sub	sp, #16
     db4:	af00      	add	r7, sp, #0
     db6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	60fb      	str	r3, [r7, #12]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
     dbe:	68fb      	ldr	r3, [r7, #12]
     dc0:	79db      	ldrb	r3, [r3, #7]
     dc2:	b2db      	uxtb	r3, r3
     dc4:	b25b      	sxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	da01      	bge.n	dce <dac_is_syncing+0x1e>
#endif
		return true;
     dca:	2301      	movs	r3, #1
     dcc:	e000      	b.n	dd0 <dac_is_syncing+0x20>
	}

	return false;
     dce:	2300      	movs	r3, #0
}
     dd0:	0018      	movs	r0, r3
     dd2:	46bd      	mov	sp, r7
     dd4:	b004      	add	sp, #16
     dd6:	bd80      	pop	{r7, pc}

00000dd8 <dac_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_get_config_defaults(
		struct dac_config *const config)
{
     dd8:	b580      	push	{r7, lr}
     dda:	b082      	sub	sp, #8
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	701a      	strb	r2, [r3, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2201      	movs	r2, #1
     dea:	705a      	strb	r2, [r3, #1]
	config->left_adjust    = false;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2200      	movs	r2, #0
     df0:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2200      	movs	r2, #0
     df6:	711a      	strb	r2, [r3, #4]
#endif
	config->voltage_pump_disable = false;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2200      	movs	r2, #0
     dfc:	715a      	strb	r2, [r3, #5]
	config->clock_source   = GCLK_GENERATOR_0;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2200      	movs	r2, #0
     e02:	70da      	strb	r2, [r3, #3]
	config->run_in_standby = false;
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2200      	movs	r2, #0
     e08:	719a      	strb	r2, [r3, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	46bd      	mov	sp, r7
     e0e:	b002      	add	sp, #8
     e10:	bd80      	pop	{r7, pc}
	...

00000e14 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     e14:	b580      	push	{r7, lr}
     e16:	b086      	sub	sp, #24
     e18:	af00      	add	r7, sp, #0
     e1a:	60f8      	str	r0, [r7, #12]
     e1c:	60b9      	str	r1, [r7, #8]
     e1e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	68ba      	ldr	r2, [r7, #8]
     e24:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
#if (SAMC21)
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
     e26:	2380      	movs	r3, #128	; 0x80
     e28:	02db      	lsls	r3, r3, #11
     e2a:	0019      	movs	r1, r3
     e2c:	2002      	movs	r0, #2
     e2e:	4b35      	ldr	r3, [pc, #212]	; (f04 <dac_init+0xf0>)
     e30:	4798      	blx	r3
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     e32:	68bb      	ldr	r3, [r7, #8]
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	001a      	movs	r2, r3
     e3a:	2302      	movs	r3, #2
     e3c:	4013      	ands	r3, r2
     e3e:	d001      	beq.n	e44 <dac_init+0x30>
		return STATUS_ERR_DENIED;
     e40:	231c      	movs	r3, #28
     e42:	e05b      	b.n	efc <dac_init+0xe8>
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     e44:	68bb      	ldr	r3, [r7, #8]
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	b2db      	uxtb	r3, r3
     e4a:	001a      	movs	r2, r3
     e4c:	2301      	movs	r3, #1
     e4e:	4013      	ands	r3, r2
     e50:	d001      	beq.n	e56 <dac_init+0x42>
		return STATUS_BUSY;
     e52:	2305      	movs	r3, #5
     e54:	e052      	b.n	efc <dac_init+0xe8>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     e56:	2314      	movs	r3, #20
     e58:	18fb      	adds	r3, r7, r3
     e5a:	0018      	movs	r0, r3
     e5c:	4b2a      	ldr	r3, [pc, #168]	; (f08 <dac_init+0xf4>)
     e5e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	78da      	ldrb	r2, [r3, #3]
     e64:	2314      	movs	r3, #20
     e66:	18fb      	adds	r3, r7, r3
     e68:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     e6a:	2314      	movs	r3, #20
     e6c:	18fb      	adds	r3, r7, r3
     e6e:	0019      	movs	r1, r3
     e70:	2021      	movs	r0, #33	; 0x21
     e72:	4b26      	ldr	r3, [pc, #152]	; (f0c <dac_init+0xf8>)
     e74:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     e76:	2021      	movs	r0, #33	; 0x21
     e78:	4b25      	ldr	r3, [pc, #148]	; (f10 <dac_init+0xfc>)
     e7a:	4798      	blx	r3

	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e7c:	2310      	movs	r3, #16
     e7e:	18fb      	adds	r3, r7, r3
     e80:	0018      	movs	r0, r3
     e82:	4b24      	ldr	r3, [pc, #144]	; (f14 <dac_init+0x100>)
     e84:	4798      	blx	r3

	/* Set up the DAC VOUT pin */
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     e86:	2310      	movs	r3, #16
     e88:	18fb      	adds	r3, r7, r3
     e8a:	2201      	movs	r2, #1
     e8c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e8e:	2310      	movs	r3, #16
     e90:	18fb      	adds	r3, r7, r3
     e92:	2200      	movs	r2, #0
     e94:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e96:	2310      	movs	r3, #16
     e98:	18fb      	adds	r3, r7, r3
     e9a:	2200      	movs	r2, #0
     e9c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     e9e:	2310      	movs	r3, #16
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	0019      	movs	r1, r3
     ea4:	2002      	movs	r0, #2
     ea6:	4b1c      	ldr	r3, [pc, #112]	; (f18 <dac_init+0x104>)
     ea8:	4798      	blx	r3

	/* Write configuration to module */
	_dac_set_config(module_inst, config);
     eaa:	687a      	ldr	r2, [r7, #4]
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	0011      	movs	r1, r2
     eb0:	0018      	movs	r0, r3
     eb2:	4b1a      	ldr	r3, [pc, #104]	; (f1c <dac_init+0x108>)
     eb4:	4798      	blx	r3

	/* Store reference selection for later use */
	module_inst->reference = config->reference;
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	781a      	ldrb	r2, [r3, #0]
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	715a      	strb	r2, [r3, #5]

#if DAC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
     ebe:	2317      	movs	r3, #23
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	2200      	movs	r2, #0
     ec4:	701a      	strb	r2, [r3, #0]
     ec6:	e010      	b.n	eea <dac_init+0xd6>
		module_inst->callback[i] = NULL;
     ec8:	2317      	movs	r3, #23
     eca:	18fb      	adds	r3, r7, r3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	68fa      	ldr	r2, [r7, #12]
     ed0:	3304      	adds	r3, #4
     ed2:	009b      	lsls	r3, r3, #2
     ed4:	18d3      	adds	r3, r2, r3
     ed6:	3304      	adds	r3, #4
     ed8:	2200      	movs	r2, #0
     eda:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
     edc:	2317      	movs	r3, #23
     ede:	18fb      	adds	r3, r7, r3
     ee0:	781a      	ldrb	r2, [r3, #0]
     ee2:	2317      	movs	r3, #23
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	3201      	adds	r2, #1
     ee8:	701a      	strb	r2, [r3, #0]
     eea:	2317      	movs	r3, #23
     eec:	18fb      	adds	r3, r7, r3
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	2b02      	cmp	r3, #2
     ef2:	d9e9      	bls.n	ec8 <dac_init+0xb4>
	};

	_dac_instances[0] = module_inst;
     ef4:	4b0a      	ldr	r3, [pc, #40]	; (f20 <dac_init+0x10c>)
     ef6:	68fa      	ldr	r2, [r7, #12]
     ef8:	601a      	str	r2, [r3, #0]
#endif

	return STATUS_OK;
     efa:	2300      	movs	r3, #0
}
     efc:	0018      	movs	r0, r3
     efe:	46bd      	mov	sp, r7
     f00:	b006      	add	sp, #24
     f02:	bd80      	pop	{r7, pc}
     f04:	00000c51 	.word	0x00000c51
     f08:	00000c39 	.word	0x00000c39
     f0c:	00008095 	.word	0x00008095
     f10:	000080d9 	.word	0x000080d9
     f14:	00000cad 	.word	0x00000cad
     f18:	000083c9 	.word	0x000083c9
     f1c:	00000d15 	.word	0x00000d15
     f20:	200052e8 	.word	0x200052e8

00000f24 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     f24:	b580      	push	{r7, lr}
     f26:	b084      	sub	sp, #16
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	60fb      	str	r3, [r7, #12]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     f32:	68fb      	ldr	r3, [r7, #12]
     f34:	785b      	ldrb	r3, [r3, #1]
     f36:	b2da      	uxtb	r2, r3
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	791b      	ldrb	r3, [r3, #4]
     f3c:	4313      	orrs	r3, r2
     f3e:	b2da      	uxtb	r2, r3
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	705a      	strb	r2, [r3, #1]

	while (dac_is_syncing(module_inst)) {
     f44:	46c0      	nop			; (mov r8, r8)
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	0018      	movs	r0, r3
     f4a:	4b0b      	ldr	r3, [pc, #44]	; (f78 <dac_enable+0x54>)
     f4c:	4798      	blx	r3
     f4e:	1e03      	subs	r3, r0, #0
     f50:	d1f9      	bne.n	f46 <dac_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     f52:	68fb      	ldr	r3, [r7, #12]
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	b2db      	uxtb	r3, r3
     f58:	2202      	movs	r2, #2
     f5a:	4313      	orrs	r3, r2
     f5c:	b2da      	uxtb	r2, r3
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	701a      	strb	r2, [r3, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	795b      	ldrb	r3, [r3, #5]
     f66:	2b00      	cmp	r3, #0
     f68:	d102      	bne.n	f70 <dac_enable+0x4c>
	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
		};
	}
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     f6a:	2001      	movs	r0, #1
     f6c:	4b03      	ldr	r3, [pc, #12]	; (f7c <dac_enable+0x58>)
     f6e:	4798      	blx	r3
	}

#endif
}
     f70:	46c0      	nop			; (mov r8, r8)
     f72:	46bd      	mov	sp, r7
     f74:	b004      	add	sp, #16
     f76:	bd80      	pop	{r7, pc}
     f78:	00000db1 	.word	0x00000db1
     f7c:	00000cd5 	.word	0x00000cd5

00000f80 <dac_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
     f80:	b580      	push	{r7, lr}
     f82:	b082      	sub	sp, #8
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
}
     f88:	46c0      	nop			; (mov r8, r8)
     f8a:	46bd      	mov	sp, r7
     f8c:	b002      	add	sp, #8
     f8e:	bd80      	pop	{r7, pc}

00000f90 <dac_chan_set_config>:
 */
void dac_chan_set_config(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
     f90:	b580      	push	{r7, lr}
     f92:	b084      	sub	sp, #16
     f94:	af00      	add	r7, sp, #0
     f96:	60f8      	str	r0, [r7, #12]
     f98:	607a      	str	r2, [r7, #4]
     f9a:	230b      	movs	r3, #11
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	1c0a      	adds	r2, r1, #0
     fa0:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	46bd      	mov	sp, r7
     fa6:	b004      	add	sp, #16
     fa8:	bd80      	pop	{r7, pc}

00000faa <dac_chan_enable>:
 *
 */
void dac_chan_enable(
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
     faa:	b580      	push	{r7, lr}
     fac:	b082      	sub	sp, #8
     fae:	af00      	add	r7, sp, #0
     fb0:	6078      	str	r0, [r7, #4]
     fb2:	000a      	movs	r2, r1
     fb4:	1cfb      	adds	r3, r7, #3
     fb6:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
     fb8:	46c0      	nop			; (mov r8, r8)
     fba:	46bd      	mov	sp, r7
     fbc:	b002      	add	sp, #8
     fbe:	bd80      	pop	{r7, pc}

00000fc0 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b084      	sub	sp, #16
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	0008      	movs	r0, r1
     fca:	0011      	movs	r1, r2
     fcc:	1cfb      	adds	r3, r7, #3
     fce:	1c02      	adds	r2, r0, #0
     fd0:	701a      	strb	r2, [r3, #0]
     fd2:	003b      	movs	r3, r7
     fd4:	1c0a      	adds	r2, r1, #0
     fd6:	801a      	strh	r2, [r3, #0]
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	60fb      	str	r3, [r7, #12]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	0018      	movs	r0, r3
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <dac_chan_write+0x50>)
     fe6:	4798      	blx	r3
     fe8:	1e03      	subs	r3, r0, #0
     fea:	d1f9      	bne.n	fe0 <dac_chan_write+0x20>
	};

	if (module_inst->start_on_event) {
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	799b      	ldrb	r3, [r3, #6]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d004      	beq.n	ffe <dac_chan_write+0x3e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
     ff4:	68fb      	ldr	r3, [r7, #12]
     ff6:	003a      	movs	r2, r7
     ff8:	8812      	ldrh	r2, [r2, #0]
     ffa:	819a      	strh	r2, [r3, #12]
     ffc:	e003      	b.n	1006 <dac_chan_write+0x46>
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	003a      	movs	r2, r7
    1002:	8812      	ldrh	r2, [r2, #0]
    1004:	811a      	strh	r2, [r3, #8]
	}

	return STATUS_OK;
    1006:	2300      	movs	r3, #0
}
    1008:	0018      	movs	r0, r3
    100a:	46bd      	mov	sp, r7
    100c:	b004      	add	sp, #16
    100e:	bd80      	pop	{r7, pc}
    1010:	00000db1 	.word	0x00000db1

00001014 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1014:	b580      	push	{r7, lr}
    1016:	b082      	sub	sp, #8
    1018:	af00      	add	r7, sp, #0
    101a:	0002      	movs	r2, r0
    101c:	1dfb      	adds	r3, r7, #7
    101e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1020:	4a07      	ldr	r2, [pc, #28]	; (1040 <system_interrupt_disable+0x2c>)
    1022:	1dfb      	adds	r3, r7, #7
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	0019      	movs	r1, r3
    1028:	231f      	movs	r3, #31
    102a:	400b      	ands	r3, r1
    102c:	2101      	movs	r1, #1
    102e:	4099      	lsls	r1, r3
    1030:	000b      	movs	r3, r1
    1032:	0019      	movs	r1, r3
    1034:	2380      	movs	r3, #128	; 0x80
    1036:	50d1      	str	r1, [r2, r3]
}
    1038:	46c0      	nop			; (mov r8, r8)
    103a:	46bd      	mov	sp, r7
    103c:	b002      	add	sp, #8
    103e:	bd80      	pop	{r7, pc}
    1040:	e000e100 	.word	0xe000e100

00001044 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    1044:	b580      	push	{r7, lr}
    1046:	b084      	sub	sp, #16
    1048:	af00      	add	r7, sp, #0
    104a:	0002      	movs	r2, r0
    104c:	1dfb      	adds	r3, r7, #7
    104e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    1050:	1dfb      	adds	r3, r7, #7
    1052:	781a      	ldrb	r2, [r3, #0]
    1054:	4b37      	ldr	r3, [pc, #220]	; (1134 <_dac_interrupt_handler+0xf0>)
    1056:	0092      	lsls	r2, r2, #2
    1058:	58d3      	ldr	r3, [r2, r3]
    105a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    1062:	68bb      	ldr	r3, [r7, #8]
    1064:	799b      	ldrb	r3, [r3, #6]
    1066:	b2db      	uxtb	r3, r3
    1068:	001a      	movs	r2, r3
    106a:	2301      	movs	r3, #1
    106c:	4013      	ands	r3, r2
    106e:	d00e      	beq.n	108e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    1070:	68bb      	ldr	r3, [r7, #8]
    1072:	2201      	movs	r2, #1
    1074:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	3314      	adds	r3, #20
    107a:	2b00      	cmp	r3, #0
    107c:	d007      	beq.n	108e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    1082:	2b00      	cmp	r3, #0
    1084:	d003      	beq.n	108e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	699b      	ldr	r3, [r3, #24]
    108a:	2000      	movs	r0, #0
    108c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    108e:	68bb      	ldr	r3, [r7, #8]
    1090:	799b      	ldrb	r3, [r3, #6]
    1092:	b2db      	uxtb	r3, r3
    1094:	001a      	movs	r2, r3
    1096:	2302      	movs	r3, #2
    1098:	4013      	ands	r3, r2
    109a:	d047      	beq.n	112c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    109c:	68bb      	ldr	r3, [r7, #8]
    109e:	2202      	movs	r2, #2
    10a0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	899b      	ldrh	r3, [r3, #12]
    10a6:	b29b      	uxth	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	d033      	beq.n	1114 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	689a      	ldr	r2, [r3, #8]
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	89db      	ldrh	r3, [r3, #14]
    10b4:	b29b      	uxth	r3, r3
    10b6:	1c59      	adds	r1, r3, #1
    10b8:	b288      	uxth	r0, r1
    10ba:	68f9      	ldr	r1, [r7, #12]
    10bc:	81c8      	strh	r0, [r1, #14]
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18d3      	adds	r3, r2, r3
    10c2:	881b      	ldrh	r3, [r3, #0]
    10c4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    10c6:	68bb      	ldr	r3, [r7, #8]
    10c8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	899b      	ldrh	r3, [r3, #12]
    10ce:	b29b      	uxth	r3, r3
    10d0:	3b01      	subs	r3, #1
    10d2:	b29a      	uxth	r2, r3
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	899b      	ldrh	r3, [r3, #12]
    10dc:	b29b      	uxth	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	d118      	bne.n	1114 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2220      	movs	r2, #32
    10e6:	2100      	movs	r1, #0
    10e8:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    10ea:	68bb      	ldr	r3, [r7, #8]
    10ec:	2202      	movs	r2, #2
    10ee:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    10f0:	68bb      	ldr	r3, [r7, #8]
    10f2:	2202      	movs	r2, #2
    10f4:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    10f6:	2019      	movs	r0, #25
    10f8:	4b0f      	ldr	r3, [pc, #60]	; (1138 <_dac_interrupt_handler+0xf4>)
    10fa:	4798      	blx	r3

				if ((module->callback) &&
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	3314      	adds	r3, #20
    1100:	2b00      	cmp	r3, #0
    1102:	d007      	beq.n	1114 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    1104:	68fb      	ldr	r3, [r7, #12]
    1106:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    1108:	2b00      	cmp	r3, #0
    110a:	d003      	beq.n	1114 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	69db      	ldr	r3, [r3, #28]
    1110:	2000      	movs	r0, #0
    1112:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	3314      	adds	r3, #20
    1118:	2b00      	cmp	r3, #0
    111a:	d007      	beq.n	112c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    1120:	2b00      	cmp	r3, #0
    1122:	d003      	beq.n	112c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	695b      	ldr	r3, [r3, #20]
    1128:	2000      	movs	r0, #0
    112a:	4798      	blx	r3
		}
	}
}
    112c:	46c0      	nop			; (mov r8, r8)
    112e:	46bd      	mov	sp, r7
    1130:	b004      	add	sp, #16
    1132:	bd80      	pop	{r7, pc}
    1134:	200052e8 	.word	0x200052e8
    1138:	00001015 	.word	0x00001015

0000113c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    1140:	2000      	movs	r0, #0
    1142:	4b02      	ldr	r3, [pc, #8]	; (114c <DAC_Handler+0x10>)
    1144:	4798      	blx	r3
}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	46bd      	mov	sp, r7
    114a:	bd80      	pop	{r7, pc}
    114c:	00001045 	.word	0x00001045

00001150 <system_gclk_chan_get_config_defaults>:
{
    1150:	b580      	push	{r7, lr}
    1152:	b082      	sub	sp, #8
    1154:	af00      	add	r7, sp, #0
    1156:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	2200      	movs	r2, #0
    115c:	701a      	strb	r2, [r3, #0]
}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	46bd      	mov	sp, r7
    1162:	b002      	add	sp, #8
    1164:	bd80      	pop	{r7, pc}
	...

00001168 <system_apb_clock_set_mask>:
{
    1168:	b580      	push	{r7, lr}
    116a:	b082      	sub	sp, #8
    116c:	af00      	add	r7, sp, #0
    116e:	0002      	movs	r2, r0
    1170:	6039      	str	r1, [r7, #0]
    1172:	1dfb      	adds	r3, r7, #7
    1174:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1176:	1dfb      	adds	r3, r7, #7
    1178:	781b      	ldrb	r3, [r3, #0]
    117a:	2b01      	cmp	r3, #1
    117c:	d00a      	beq.n	1194 <system_apb_clock_set_mask+0x2c>
    117e:	2b02      	cmp	r3, #2
    1180:	d00f      	beq.n	11a2 <system_apb_clock_set_mask+0x3a>
    1182:	2b00      	cmp	r3, #0
    1184:	d114      	bne.n	11b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1186:	4b0e      	ldr	r3, [pc, #56]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1188:	4a0d      	ldr	r2, [pc, #52]	; (11c0 <system_apb_clock_set_mask+0x58>)
    118a:	6991      	ldr	r1, [r2, #24]
    118c:	683a      	ldr	r2, [r7, #0]
    118e:	430a      	orrs	r2, r1
    1190:	619a      	str	r2, [r3, #24]
			break;
    1192:	e00f      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1196:	4a0a      	ldr	r2, [pc, #40]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1198:	69d1      	ldr	r1, [r2, #28]
    119a:	683a      	ldr	r2, [r7, #0]
    119c:	430a      	orrs	r2, r1
    119e:	61da      	str	r2, [r3, #28]
			break;
    11a0:	e008      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    11a2:	4b07      	ldr	r3, [pc, #28]	; (11c0 <system_apb_clock_set_mask+0x58>)
    11a4:	4a06      	ldr	r2, [pc, #24]	; (11c0 <system_apb_clock_set_mask+0x58>)
    11a6:	6a11      	ldr	r1, [r2, #32]
    11a8:	683a      	ldr	r2, [r7, #0]
    11aa:	430a      	orrs	r2, r1
    11ac:	621a      	str	r2, [r3, #32]
			break;
    11ae:	e001      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    11b0:	2317      	movs	r3, #23
    11b2:	e000      	b.n	11b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    11b4:	2300      	movs	r3, #0
}
    11b6:	0018      	movs	r0, r3
    11b8:	46bd      	mov	sp, r7
    11ba:	b002      	add	sp, #8
    11bc:	bd80      	pop	{r7, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	40000400 	.word	0x40000400

000011c4 <system_pinmux_get_config_defaults>:
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	2200      	movs	r2, #0
    11d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	2201      	movs	r2, #1
    11dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	2200      	movs	r2, #0
    11e2:	70da      	strb	r2, [r3, #3]
}
    11e4:	46c0      	nop			; (mov r8, r8)
    11e6:	46bd      	mov	sp, r7
    11e8:	b002      	add	sp, #8
    11ea:	bd80      	pop	{r7, pc}

000011ec <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    11ec:	b580      	push	{r7, lr}
    11ee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    11f0:	4b05      	ldr	r3, [pc, #20]	; (1208 <system_is_debugger_present+0x1c>)
    11f2:	789b      	ldrb	r3, [r3, #2]
    11f4:	b2db      	uxtb	r3, r3
    11f6:	001a      	movs	r2, r3
    11f8:	2302      	movs	r3, #2
    11fa:	4013      	ands	r3, r2
    11fc:	1e5a      	subs	r2, r3, #1
    11fe:	4193      	sbcs	r3, r2
    1200:	b2db      	uxtb	r3, r3
}
    1202:	0018      	movs	r0, r3
    1204:	46bd      	mov	sp, r7
    1206:	bd80      	pop	{r7, pc}
    1208:	41002000 	.word	0x41002000

0000120c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	b097      	sub	sp, #92	; 0x5c
    1210:	af00      	add	r7, sp, #0
    1212:	6178      	str	r0, [r7, #20]
    1214:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1216:	2300      	movs	r3, #0
    1218:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    121a:	2300      	movs	r3, #0
    121c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    121e:	2300      	movs	r3, #0
    1220:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    1222:	233b      	movs	r3, #59	; 0x3b
    1224:	2210      	movs	r2, #16
    1226:	4694      	mov	ip, r2
    1228:	44bc      	add	ip, r7
    122a:	4463      	add	r3, ip
    122c:	2200      	movs	r2, #0
    122e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1230:	697b      	ldr	r3, [r7, #20]
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    1236:	697b      	ldr	r3, [r7, #20]
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    123c:	2323      	movs	r3, #35	; 0x23
    123e:	2210      	movs	r2, #16
    1240:	18ba      	adds	r2, r7, r2
    1242:	18d4      	adds	r4, r2, r3
    1244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1246:	0018      	movs	r0, r3
    1248:	4bc0      	ldr	r3, [pc, #768]	; (154c <_i2c_master_set_config+0x340>)
    124a:	4798      	blx	r3
    124c:	0003      	movs	r3, r0
    124e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1250:	230c      	movs	r3, #12
    1252:	2210      	movs	r2, #16
    1254:	4694      	mov	ip, r2
    1256:	44bc      	add	ip, r7
    1258:	4463      	add	r3, ip
    125a:	0018      	movs	r0, r3
    125c:	4bbc      	ldr	r3, [pc, #752]	; (1550 <_i2c_master_set_config+0x344>)
    125e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1260:	693b      	ldr	r3, [r7, #16]
    1262:	69db      	ldr	r3, [r3, #28]
    1264:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    1266:	693b      	ldr	r3, [r7, #16]
    1268:	6a1b      	ldr	r3, [r3, #32]
    126a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    126c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    126e:	2b00      	cmp	r3, #0
    1270:	d106      	bne.n	1280 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1274:	2100      	movs	r1, #0
    1276:	0018      	movs	r0, r3
    1278:	4bb6      	ldr	r3, [pc, #728]	; (1554 <_i2c_master_set_config+0x348>)
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
    127e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1282:	b2da      	uxtb	r2, r3
    1284:	230c      	movs	r3, #12
    1286:	2110      	movs	r1, #16
    1288:	468c      	mov	ip, r1
    128a:	44bc      	add	ip, r7
    128c:	4463      	add	r3, ip
    128e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1290:	230c      	movs	r3, #12
    1292:	2210      	movs	r2, #16
    1294:	4694      	mov	ip, r2
    1296:	44bc      	add	ip, r7
    1298:	4463      	add	r3, ip
    129a:	2202      	movs	r2, #2
    129c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    129e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    12a0:	0c1b      	lsrs	r3, r3, #16
    12a2:	b2db      	uxtb	r3, r3
    12a4:	220c      	movs	r2, #12
    12a6:	2110      	movs	r1, #16
    12a8:	468c      	mov	ip, r1
    12aa:	44bc      	add	ip, r7
    12ac:	4462      	add	r2, ip
    12ae:	0011      	movs	r1, r2
    12b0:	0018      	movs	r0, r3
    12b2:	4ba9      	ldr	r3, [pc, #676]	; (1558 <_i2c_master_set_config+0x34c>)
    12b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    12b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12b8:	2b00      	cmp	r3, #0
    12ba:	d106      	bne.n	12ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    12bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12be:	2101      	movs	r1, #1
    12c0:	0018      	movs	r0, r3
    12c2:	4ba4      	ldr	r3, [pc, #656]	; (1554 <_i2c_master_set_config+0x348>)
    12c4:	4798      	blx	r3
    12c6:	0003      	movs	r3, r0
    12c8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    12ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12cc:	b2da      	uxtb	r2, r3
    12ce:	230c      	movs	r3, #12
    12d0:	2110      	movs	r1, #16
    12d2:	468c      	mov	ip, r1
    12d4:	44bc      	add	ip, r7
    12d6:	4463      	add	r3, ip
    12d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12da:	230c      	movs	r3, #12
    12dc:	2210      	movs	r2, #16
    12de:	4694      	mov	ip, r2
    12e0:	44bc      	add	ip, r7
    12e2:	4463      	add	r3, ip
    12e4:	2202      	movs	r2, #2
    12e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    12e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12ea:	0c1b      	lsrs	r3, r3, #16
    12ec:	b2db      	uxtb	r3, r3
    12ee:	220c      	movs	r2, #12
    12f0:	2110      	movs	r1, #16
    12f2:	468c      	mov	ip, r1
    12f4:	44bc      	add	ip, r7
    12f6:	4462      	add	r2, ip
    12f8:	0011      	movs	r1, r2
    12fa:	0018      	movs	r0, r3
    12fc:	4b96      	ldr	r3, [pc, #600]	; (1558 <_i2c_master_set_config+0x34c>)
    12fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1300:	693b      	ldr	r3, [r7, #16]
    1302:	8a9a      	ldrh	r2, [r3, #20]
    1304:	697b      	ldr	r3, [r7, #20]
    1306:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1308:	693b      	ldr	r3, [r7, #16]
    130a:	8ada      	ldrh	r2, [r3, #22]
    130c:	697b      	ldr	r3, [r7, #20]
    130e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1310:	693b      	ldr	r3, [r7, #16]
    1312:	7e1b      	ldrb	r3, [r3, #24]
    1314:	2b00      	cmp	r3, #0
    1316:	d103      	bne.n	1320 <_i2c_master_set_config+0x114>
    1318:	4b90      	ldr	r3, [pc, #576]	; (155c <_i2c_master_set_config+0x350>)
    131a:	4798      	blx	r3
    131c:	1e03      	subs	r3, r0, #0
    131e:	d002      	beq.n	1326 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	657b      	str	r3, [r7, #84]	; 0x54
    1324:	e001      	b.n	132a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1326:	2300      	movs	r3, #0
    1328:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    132a:	693b      	ldr	r3, [r7, #16]
    132c:	691b      	ldr	r3, [r3, #16]
    132e:	2b00      	cmp	r3, #0
    1330:	d004      	beq.n	133c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1332:	693b      	ldr	r3, [r7, #16]
    1334:	691b      	ldr	r3, [r3, #16]
    1336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1338:	4313      	orrs	r3, r2
    133a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    133c:	693b      	ldr	r3, [r7, #16]
    133e:	689b      	ldr	r3, [r3, #8]
    1340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1342:	4313      	orrs	r3, r2
    1344:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1346:	693b      	ldr	r3, [r7, #16]
    1348:	2224      	movs	r2, #36	; 0x24
    134a:	5c9b      	ldrb	r3, [r3, r2]
    134c:	2b00      	cmp	r3, #0
    134e:	d004      	beq.n	135a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	05d2      	lsls	r2, r2, #23
    1356:	4313      	orrs	r3, r2
    1358:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    135a:	693b      	ldr	r3, [r7, #16]
    135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    135e:	2b00      	cmp	r3, #0
    1360:	d004      	beq.n	136c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1362:	693b      	ldr	r3, [r7, #16]
    1364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1368:	4313      	orrs	r3, r2
    136a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    136c:	693b      	ldr	r3, [r7, #16]
    136e:	222c      	movs	r2, #44	; 0x2c
    1370:	5c9b      	ldrb	r3, [r3, r2]
    1372:	2b00      	cmp	r3, #0
    1374:	d105      	bne.n	1382 <_i2c_master_set_config+0x176>
    1376:	693b      	ldr	r3, [r7, #16]
    1378:	689a      	ldr	r2, [r3, #8]
    137a:	2380      	movs	r3, #128	; 0x80
    137c:	049b      	lsls	r3, r3, #18
    137e:	429a      	cmp	r2, r3
    1380:	d104      	bne.n	138c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	0512      	lsls	r2, r2, #20
    1388:	4313      	orrs	r3, r2
    138a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    138c:	693b      	ldr	r3, [r7, #16]
    138e:	222d      	movs	r2, #45	; 0x2d
    1390:	5c9b      	ldrb	r3, [r3, r2]
    1392:	2b00      	cmp	r3, #0
    1394:	d004      	beq.n	13a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1398:	2280      	movs	r2, #128	; 0x80
    139a:	0412      	lsls	r2, r2, #16
    139c:	4313      	orrs	r3, r2
    139e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    13a0:	693b      	ldr	r3, [r7, #16]
    13a2:	222e      	movs	r2, #46	; 0x2e
    13a4:	5c9b      	ldrb	r3, [r3, r2]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d004      	beq.n	13b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    13aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    13ac:	2280      	movs	r2, #128	; 0x80
    13ae:	03d2      	lsls	r2, r2, #15
    13b0:	4313      	orrs	r3, r2
    13b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    13b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    13ba:	431a      	orrs	r2, r3
    13bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    13c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c2:	2280      	movs	r2, #128	; 0x80
    13c4:	0052      	lsls	r2, r2, #1
    13c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    13c8:	2323      	movs	r3, #35	; 0x23
    13ca:	2210      	movs	r2, #16
    13cc:	4694      	mov	ip, r2
    13ce:	44bc      	add	ip, r7
    13d0:	4463      	add	r3, ip
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	3314      	adds	r3, #20
    13d6:	b2db      	uxtb	r3, r3
    13d8:	0018      	movs	r0, r3
    13da:	4b61      	ldr	r3, [pc, #388]	; (1560 <_i2c_master_set_config+0x354>)
    13dc:	4798      	blx	r3
    13de:	0003      	movs	r3, r0
    13e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    13e2:	693b      	ldr	r3, [r7, #16]
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	22fa      	movs	r2, #250	; 0xfa
    13e8:	0092      	lsls	r2, r2, #2
    13ea:	4353      	muls	r3, r2
    13ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    13ee:	693b      	ldr	r3, [r7, #16]
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	22fa      	movs	r2, #250	; 0xfa
    13f4:	0092      	lsls	r2, r2, #2
    13f6:	4353      	muls	r3, r2
    13f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    13fa:	693b      	ldr	r3, [r7, #16]
    13fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    13fe:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    1400:	4b58      	ldr	r3, [pc, #352]	; (1564 <_i2c_master_set_config+0x358>)
    1402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1404:	4798      	blx	r3
    1406:	0005      	movs	r5, r0
    1408:	000e      	movs	r6, r1
    140a:	4b56      	ldr	r3, [pc, #344]	; (1564 <_i2c_master_set_config+0x358>)
    140c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    140e:	4798      	blx	r3
    1410:	60b8      	str	r0, [r7, #8]
    1412:	60f9      	str	r1, [r7, #12]
    1414:	4b53      	ldr	r3, [pc, #332]	; (1564 <_i2c_master_set_config+0x358>)
    1416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1418:	4798      	blx	r3
    141a:	4c53      	ldr	r4, [pc, #332]	; (1568 <_i2c_master_set_config+0x35c>)
    141c:	4a53      	ldr	r2, [pc, #332]	; (156c <_i2c_master_set_config+0x360>)
    141e:	4b54      	ldr	r3, [pc, #336]	; (1570 <_i2c_master_set_config+0x364>)
    1420:	47a0      	blx	r4
    1422:	0003      	movs	r3, r0
    1424:	000c      	movs	r4, r1
    1426:	603b      	str	r3, [r7, #0]
    1428:	607c      	str	r4, [r7, #4]
    142a:	4b4e      	ldr	r3, [pc, #312]	; (1564 <_i2c_master_set_config+0x358>)
    142c:	6a38      	ldr	r0, [r7, #32]
    142e:	4798      	blx	r3
    1430:	0002      	movs	r2, r0
    1432:	000b      	movs	r3, r1
    1434:	4c4c      	ldr	r4, [pc, #304]	; (1568 <_i2c_master_set_config+0x35c>)
    1436:	6838      	ldr	r0, [r7, #0]
    1438:	6879      	ldr	r1, [r7, #4]
    143a:	47a0      	blx	r4
    143c:	0003      	movs	r3, r0
    143e:	000c      	movs	r4, r1
    1440:	0018      	movs	r0, r3
    1442:	0021      	movs	r1, r4
    1444:	4c4b      	ldr	r4, [pc, #300]	; (1574 <_i2c_master_set_config+0x368>)
    1446:	2200      	movs	r2, #0
    1448:	4b4b      	ldr	r3, [pc, #300]	; (1578 <_i2c_master_set_config+0x36c>)
    144a:	47a0      	blx	r4
    144c:	0003      	movs	r3, r0
    144e:	000c      	movs	r4, r1
    1450:	001a      	movs	r2, r3
    1452:	0023      	movs	r3, r4
    1454:	4c44      	ldr	r4, [pc, #272]	; (1568 <_i2c_master_set_config+0x35c>)
    1456:	68b8      	ldr	r0, [r7, #8]
    1458:	68f9      	ldr	r1, [r7, #12]
    145a:	47a0      	blx	r4
    145c:	0003      	movs	r3, r0
    145e:	000c      	movs	r4, r1
    1460:	001a      	movs	r2, r3
    1462:	0023      	movs	r3, r4
    1464:	4c45      	ldr	r4, [pc, #276]	; (157c <_i2c_master_set_config+0x370>)
    1466:	0028      	movs	r0, r5
    1468:	0031      	movs	r1, r6
    146a:	47a0      	blx	r4
    146c:	0003      	movs	r3, r0
    146e:	000c      	movs	r4, r1
    1470:	001d      	movs	r5, r3
    1472:	0026      	movs	r6, r4
    1474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1476:	005a      	lsls	r2, r3, #1
    1478:	4b3a      	ldr	r3, [pc, #232]	; (1564 <_i2c_master_set_config+0x358>)
    147a:	0010      	movs	r0, r2
    147c:	4798      	blx	r3
    147e:	0002      	movs	r2, r0
    1480:	000b      	movs	r3, r1
    1482:	4c3c      	ldr	r4, [pc, #240]	; (1574 <_i2c_master_set_config+0x368>)
    1484:	0028      	movs	r0, r5
    1486:	0031      	movs	r1, r6
    1488:	47a0      	blx	r4
    148a:	0003      	movs	r3, r0
    148c:	000c      	movs	r4, r1
    148e:	0018      	movs	r0, r3
    1490:	0021      	movs	r1, r4
    1492:	4c3a      	ldr	r4, [pc, #232]	; (157c <_i2c_master_set_config+0x370>)
    1494:	2200      	movs	r2, #0
    1496:	4b3a      	ldr	r3, [pc, #232]	; (1580 <_i2c_master_set_config+0x374>)
    1498:	47a0      	blx	r4
    149a:	0003      	movs	r3, r0
    149c:	000c      	movs	r4, r1
    149e:	001d      	movs	r5, r3
    14a0:	0026      	movs	r6, r4
    14a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    14a4:	005a      	lsls	r2, r3, #1
    14a6:	4b2f      	ldr	r3, [pc, #188]	; (1564 <_i2c_master_set_config+0x358>)
    14a8:	0010      	movs	r0, r2
    14aa:	4798      	blx	r3
    14ac:	0002      	movs	r2, r0
    14ae:	000b      	movs	r3, r1
    14b0:	4c34      	ldr	r4, [pc, #208]	; (1584 <_i2c_master_set_config+0x378>)
    14b2:	0028      	movs	r0, r5
    14b4:	0031      	movs	r1, r6
    14b6:	47a0      	blx	r4
    14b8:	0003      	movs	r3, r0
    14ba:	000c      	movs	r4, r1
    14bc:	0019      	movs	r1, r3
    14be:	0022      	movs	r2, r4
    14c0:	4b31      	ldr	r3, [pc, #196]	; (1588 <_i2c_master_set_config+0x37c>)
    14c2:	0008      	movs	r0, r1
    14c4:	0011      	movs	r1, r2
    14c6:	4798      	blx	r3
    14c8:	0003      	movs	r3, r0
    14ca:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    14cc:	693b      	ldr	r3, [r7, #16]
    14ce:	689a      	ldr	r2, [r3, #8]
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	049b      	lsls	r3, r3, #18
    14d4:	429a      	cmp	r2, r3
    14d6:	d16a      	bne.n	15ae <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    14d8:	4b22      	ldr	r3, [pc, #136]	; (1564 <_i2c_master_set_config+0x358>)
    14da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    14dc:	4798      	blx	r3
    14de:	4c25      	ldr	r4, [pc, #148]	; (1574 <_i2c_master_set_config+0x368>)
    14e0:	0002      	movs	r2, r0
    14e2:	000b      	movs	r3, r1
    14e4:	47a0      	blx	r4
    14e6:	0003      	movs	r3, r0
    14e8:	000c      	movs	r4, r1
    14ea:	001d      	movs	r5, r3
    14ec:	0026      	movs	r6, r4
    14ee:	4b1d      	ldr	r3, [pc, #116]	; (1564 <_i2c_master_set_config+0x358>)
    14f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    14f2:	4798      	blx	r3
    14f4:	4c1c      	ldr	r4, [pc, #112]	; (1568 <_i2c_master_set_config+0x35c>)
    14f6:	2200      	movs	r2, #0
    14f8:	4b24      	ldr	r3, [pc, #144]	; (158c <_i2c_master_set_config+0x380>)
    14fa:	47a0      	blx	r4
    14fc:	0003      	movs	r3, r0
    14fe:	000c      	movs	r4, r1
    1500:	001a      	movs	r2, r3
    1502:	0023      	movs	r3, r4
    1504:	4c1f      	ldr	r4, [pc, #124]	; (1584 <_i2c_master_set_config+0x378>)
    1506:	0028      	movs	r0, r5
    1508:	0031      	movs	r1, r6
    150a:	47a0      	blx	r4
    150c:	0003      	movs	r3, r0
    150e:	000c      	movs	r4, r1
    1510:	0018      	movs	r0, r3
    1512:	0021      	movs	r1, r4
    1514:	4c19      	ldr	r4, [pc, #100]	; (157c <_i2c_master_set_config+0x370>)
    1516:	2200      	movs	r2, #0
    1518:	4b19      	ldr	r3, [pc, #100]	; (1580 <_i2c_master_set_config+0x374>)
    151a:	47a0      	blx	r4
    151c:	0003      	movs	r3, r0
    151e:	000c      	movs	r4, r1
    1520:	0019      	movs	r1, r3
    1522:	0022      	movs	r2, r4
    1524:	4b18      	ldr	r3, [pc, #96]	; (1588 <_i2c_master_set_config+0x37c>)
    1526:	0008      	movs	r0, r1
    1528:	0011      	movs	r1, r2
    152a:	4798      	blx	r3
    152c:	0003      	movs	r3, r0
    152e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1532:	2b00      	cmp	r3, #0
    1534:	d02e      	beq.n	1594 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1536:	4b16      	ldr	r3, [pc, #88]	; (1590 <_i2c_master_set_config+0x384>)
    1538:	6a79      	ldr	r1, [r7, #36]	; 0x24
    153a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    153c:	4798      	blx	r3
    153e:	0003      	movs	r3, r0
    1540:	1e9a      	subs	r2, r3, #2
    1542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1544:	1ad3      	subs	r3, r2, r3
    1546:	653b      	str	r3, [r7, #80]	; 0x50
    1548:	e031      	b.n	15ae <_i2c_master_set_config+0x3a2>
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	00006ed5 	.word	0x00006ed5
    1550:	000011c5 	.word	0x000011c5
    1554:	00006d19 	.word	0x00006d19
    1558:	000083c9 	.word	0x000083c9
    155c:	000011ed 	.word	0x000011ed
    1560:	00008201 	.word	0x00008201
    1564:	0000b0dd 	.word	0x0000b0dd
    1568:	0000a4c5 	.word	0x0000a4c5
    156c:	e826d695 	.word	0xe826d695
    1570:	3e112e0b 	.word	0x3e112e0b
    1574:	0000963d 	.word	0x0000963d
    1578:	40240000 	.word	0x40240000
    157c:	0000a9c5 	.word	0x0000a9c5
    1580:	3ff00000 	.word	0x3ff00000
    1584:	00009c5d 	.word	0x00009c5d
    1588:	0000aff1 	.word	0x0000aff1
    158c:	40080000 	.word	0x40080000
    1590:	000086a9 	.word	0x000086a9
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1596:	005a      	lsls	r2, r3, #1
    1598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    159a:	18d3      	adds	r3, r2, r3
    159c:	1e5a      	subs	r2, r3, #1
    159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15a0:	0059      	lsls	r1, r3, #1
    15a2:	4b1d      	ldr	r3, [pc, #116]	; (1618 <_i2c_master_set_config+0x40c>)
    15a4:	0010      	movs	r0, r2
    15a6:	4798      	blx	r3
    15a8:	0003      	movs	r3, r0
    15aa:	3b01      	subs	r3, #1
    15ac:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15b0:	2bff      	cmp	r3, #255	; 0xff
    15b2:	dc08      	bgt.n	15c6 <_i2c_master_set_config+0x3ba>
    15b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15b6:	2b00      	cmp	r3, #0
    15b8:	db05      	blt.n	15c6 <_i2c_master_set_config+0x3ba>
    15ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15bc:	2bff      	cmp	r3, #255	; 0xff
    15be:	dc02      	bgt.n	15c6 <_i2c_master_set_config+0x3ba>
    15c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15c2:	2b00      	cmp	r3, #0
    15c4:	da06      	bge.n	15d4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    15c6:	233b      	movs	r3, #59	; 0x3b
    15c8:	2210      	movs	r2, #16
    15ca:	4694      	mov	ip, r2
    15cc:	44bc      	add	ip, r7
    15ce:	4463      	add	r3, ip
    15d0:	2240      	movs	r2, #64	; 0x40
    15d2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    15d4:	233b      	movs	r3, #59	; 0x3b
    15d6:	2210      	movs	r2, #16
    15d8:	4694      	mov	ip, r2
    15da:	44bc      	add	ip, r7
    15dc:	4463      	add	r3, ip
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	2b40      	cmp	r3, #64	; 0x40
    15e2:	d00e      	beq.n	1602 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15e6:	22ff      	movs	r2, #255	; 0xff
    15e8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    15ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15ec:	041b      	lsls	r3, r3, #16
    15ee:	0019      	movs	r1, r3
    15f0:	23ff      	movs	r3, #255	; 0xff
    15f2:	041b      	lsls	r3, r3, #16
    15f4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15f6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    15f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    15fa:	0612      	lsls	r2, r2, #24
    15fc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1600:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1602:	233b      	movs	r3, #59	; 0x3b
    1604:	2210      	movs	r2, #16
    1606:	4694      	mov	ip, r2
    1608:	44bc      	add	ip, r7
    160a:	4463      	add	r3, ip
    160c:	781b      	ldrb	r3, [r3, #0]
}
    160e:	0018      	movs	r0, r3
    1610:	46bd      	mov	sp, r7
    1612:	b017      	add	sp, #92	; 0x5c
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	000086a9 	.word	0x000086a9

0000161c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    161c:	b590      	push	{r4, r7, lr}
    161e:	b08b      	sub	sp, #44	; 0x2c
    1620:	af00      	add	r7, sp, #0
    1622:	60f8      	str	r0, [r7, #12]
    1624:	60b9      	str	r1, [r7, #8]
    1626:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	68ba      	ldr	r2, [r7, #8]
    162c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	0018      	movs	r0, r3
    163a:	4b3b      	ldr	r3, [pc, #236]	; (1728 <i2c_master_init+0x10c>)
    163c:	4798      	blx	r3
    163e:	0003      	movs	r3, r0
    1640:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1642:	6a3b      	ldr	r3, [r7, #32]
    1644:	3302      	adds	r3, #2
    1646:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1648:	6a3b      	ldr	r3, [r7, #32]
    164a:	3314      	adds	r3, #20
    164c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    164e:	2201      	movs	r2, #1
    1650:	69fb      	ldr	r3, [r7, #28]
    1652:	409a      	lsls	r2, r3
    1654:	0013      	movs	r3, r2
    1656:	0019      	movs	r1, r3
    1658:	2002      	movs	r0, #2
    165a:	4b34      	ldr	r3, [pc, #208]	; (172c <i2c_master_init+0x110>)
    165c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    165e:	2314      	movs	r3, #20
    1660:	18fb      	adds	r3, r7, r3
    1662:	0018      	movs	r0, r3
    1664:	4b32      	ldr	r3, [pc, #200]	; (1730 <i2c_master_init+0x114>)
    1666:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	7b1a      	ldrb	r2, [r3, #12]
    166c:	2314      	movs	r3, #20
    166e:	18fb      	adds	r3, r7, r3
    1670:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1672:	69bb      	ldr	r3, [r7, #24]
    1674:	b2db      	uxtb	r3, r3
    1676:	2214      	movs	r2, #20
    1678:	18ba      	adds	r2, r7, r2
    167a:	0011      	movs	r1, r2
    167c:	0018      	movs	r0, r3
    167e:	4b2d      	ldr	r3, [pc, #180]	; (1734 <i2c_master_init+0x118>)
    1680:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1682:	69bb      	ldr	r3, [r7, #24]
    1684:	b2db      	uxtb	r3, r3
    1686:	0018      	movs	r0, r3
    1688:	4b2b      	ldr	r3, [pc, #172]	; (1738 <i2c_master_init+0x11c>)
    168a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	7b1b      	ldrb	r3, [r3, #12]
    1690:	2100      	movs	r1, #0
    1692:	0018      	movs	r0, r3
    1694:	4b29      	ldr	r3, [pc, #164]	; (173c <i2c_master_init+0x120>)
    1696:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	2202      	movs	r2, #2
    169e:	4013      	ands	r3, r2
    16a0:	d001      	beq.n	16a6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    16a2:	231c      	movs	r3, #28
    16a4:	e03b      	b.n	171e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    16a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	2201      	movs	r2, #1
    16ac:	4013      	ands	r3, r2
    16ae:	d001      	beq.n	16b4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    16b0:	2305      	movs	r3, #5
    16b2:	e034      	b.n	171e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	2217      	movs	r2, #23
    16ba:	18bc      	adds	r4, r7, r2
    16bc:	0018      	movs	r0, r3
    16be:	4b1a      	ldr	r3, [pc, #104]	; (1728 <i2c_master_init+0x10c>)
    16c0:	4798      	blx	r3
    16c2:	0003      	movs	r3, r0
    16c4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    16c6:	4a1e      	ldr	r2, [pc, #120]	; (1740 <i2c_master_init+0x124>)
    16c8:	2317      	movs	r3, #23
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	0011      	movs	r1, r2
    16d0:	0018      	movs	r0, r3
    16d2:	4b1c      	ldr	r3, [pc, #112]	; (1744 <i2c_master_init+0x128>)
    16d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16d6:	2317      	movs	r3, #23
    16d8:	18fb      	adds	r3, r7, r3
    16da:	781a      	ldrb	r2, [r3, #0]
    16dc:	4b1a      	ldr	r3, [pc, #104]	; (1748 <i2c_master_init+0x12c>)
    16de:	0092      	lsls	r2, r2, #2
    16e0:	68f9      	ldr	r1, [r7, #12]
    16e2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    16e4:	68fb      	ldr	r3, [r7, #12]
    16e6:	2200      	movs	r2, #0
    16e8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    16ea:	68fb      	ldr	r3, [r7, #12]
    16ec:	2200      	movs	r2, #0
    16ee:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    16f0:	68fb      	ldr	r3, [r7, #12]
    16f2:	2200      	movs	r2, #0
    16f4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	2200      	movs	r2, #0
    16fa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	2225      	movs	r2, #37	; 0x25
    1700:	2100      	movs	r1, #0
    1702:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	2200      	movs	r2, #0
    1708:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    170c:	2214      	movs	r2, #20
    170e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	68fb      	ldr	r3, [r7, #12]
    1714:	0011      	movs	r1, r2
    1716:	0018      	movs	r0, r3
    1718:	4b0c      	ldr	r3, [pc, #48]	; (174c <i2c_master_init+0x130>)
    171a:	4798      	blx	r3
    171c:	0003      	movs	r3, r0
}
    171e:	0018      	movs	r0, r3
    1720:	46bd      	mov	sp, r7
    1722:	b00b      	add	sp, #44	; 0x2c
    1724:	bd90      	pop	{r4, r7, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00006ed5 	.word	0x00006ed5
    172c:	00001169 	.word	0x00001169
    1730:	00001151 	.word	0x00001151
    1734:	00008095 	.word	0x00008095
    1738:	000080d9 	.word	0x000080d9
    173c:	00006c8d 	.word	0x00006c8d
    1740:	00001ba1 	.word	0x00001ba1
    1744:	00006f39 	.word	0x00006f39
    1748:	20005330 	.word	0x20005330
    174c:	0000120d 	.word	0x0000120d

00001750 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1750:	b580      	push	{r7, lr}
    1752:	b084      	sub	sp, #16
    1754:	af00      	add	r7, sp, #0
    1756:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    175e:	230e      	movs	r3, #14
    1760:	18fb      	adds	r3, r7, r3
    1762:	2200      	movs	r2, #0
    1764:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1766:	e00f      	b.n	1788 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1768:	230e      	movs	r3, #14
    176a:	18fb      	adds	r3, r7, r3
    176c:	220e      	movs	r2, #14
    176e:	18ba      	adds	r2, r7, r2
    1770:	8812      	ldrh	r2, [r2, #0]
    1772:	3201      	adds	r2, #1
    1774:	801a      	strh	r2, [r3, #0]
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	891b      	ldrh	r3, [r3, #8]
    177a:	220e      	movs	r2, #14
    177c:	18ba      	adds	r2, r7, r2
    177e:	8812      	ldrh	r2, [r2, #0]
    1780:	429a      	cmp	r2, r3
    1782:	d301      	bcc.n	1788 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1784:	2312      	movs	r3, #18
    1786:	e00e      	b.n	17a6 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1788:	68bb      	ldr	r3, [r7, #8]
    178a:	7e1b      	ldrb	r3, [r3, #24]
    178c:	b2db      	uxtb	r3, r3
    178e:	001a      	movs	r2, r3
    1790:	2301      	movs	r3, #1
    1792:	4013      	ands	r3, r2
    1794:	d106      	bne.n	17a4 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1796:	68bb      	ldr	r3, [r7, #8]
    1798:	7e1b      	ldrb	r3, [r3, #24]
    179a:	b2db      	uxtb	r3, r3
    179c:	001a      	movs	r2, r3
    179e:	2302      	movs	r3, #2
    17a0:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17a2:	d0e1      	beq.n	1768 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    17a4:	2300      	movs	r3, #0
}
    17a6:	0018      	movs	r0, r3
    17a8:	46bd      	mov	sp, r7
    17aa:	b004      	add	sp, #16
    17ac:	bd80      	pop	{r7, pc}
	...

000017b0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    17b0:	b590      	push	{r4, r7, lr}
    17b2:	b085      	sub	sp, #20
    17b4:	af00      	add	r7, sp, #0
    17b6:	6078      	str	r0, [r7, #4]
    17b8:	000a      	movs	r2, r1
    17ba:	1cfb      	adds	r3, r7, #3
    17bc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17c4:	68fb      	ldr	r3, [r7, #12]
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	2280      	movs	r2, #128	; 0x80
    17ca:	02d2      	lsls	r2, r2, #11
    17cc:	431a      	orrs	r2, r3
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    17d2:	1cfb      	adds	r3, r7, #3
    17d4:	781a      	ldrb	r2, [r3, #0]
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17da:	230b      	movs	r3, #11
    17dc:	18fc      	adds	r4, r7, r3
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	0018      	movs	r0, r3
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <_i2c_master_send_hs_master_code+0x50>)
    17e4:	4798      	blx	r3
    17e6:	0003      	movs	r3, r0
    17e8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	2201      	movs	r2, #1
    17ee:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    17f0:	230b      	movs	r3, #11
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	781b      	ldrb	r3, [r3, #0]
}
    17f6:	0018      	movs	r0, r3
    17f8:	46bd      	mov	sp, r7
    17fa:	b005      	add	sp, #20
    17fc:	bd90      	pop	{r4, r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	00001751 	.word	0x00001751

00001804 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1804:	b580      	push	{r7, lr}
    1806:	b084      	sub	sp, #16
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	69db      	ldr	r3, [r3, #28]
    1816:	2207      	movs	r2, #7
    1818:	4013      	ands	r3, r2
    181a:	1e5a      	subs	r2, r3, #1
    181c:	4193      	sbcs	r3, r2
    181e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1820:	0018      	movs	r0, r3
    1822:	46bd      	mov	sp, r7
    1824:	b004      	add	sp, #16
    1826:	bd80      	pop	{r7, pc}

00001828 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1828:	b580      	push	{r7, lr}
    182a:	b082      	sub	sp, #8
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1830:	46c0      	nop			; (mov r8, r8)
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	0018      	movs	r0, r3
    1836:	4b04      	ldr	r3, [pc, #16]	; (1848 <_i2c_master_wait_for_sync+0x20>)
    1838:	4798      	blx	r3
    183a:	1e03      	subs	r3, r0, #0
    183c:	d1f9      	bne.n	1832 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	46bd      	mov	sp, r7
    1842:	b002      	add	sp, #8
    1844:	bd80      	pop	{r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	00001805 	.word	0x00001805

0000184c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	011b      	lsls	r3, r3, #4
    1860:	0fdb      	lsrs	r3, r3, #31
    1862:	b2db      	uxtb	r3, r3
    1864:	001a      	movs	r2, r3
    1866:	230b      	movs	r3, #11
    1868:	18fb      	adds	r3, r7, r3
    186a:	1e51      	subs	r1, r2, #1
    186c:	418a      	sbcs	r2, r1
    186e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1870:	2308      	movs	r3, #8
    1872:	18fb      	adds	r3, r7, r3
    1874:	687a      	ldr	r2, [r7, #4]
    1876:	8b52      	ldrh	r2, [r2, #26]
    1878:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	8b9b      	ldrh	r3, [r3, #28]
    187e:	b29a      	uxth	r2, r3
    1880:	2308      	movs	r3, #8
    1882:	18fb      	adds	r3, r7, r3
    1884:	2108      	movs	r1, #8
    1886:	1879      	adds	r1, r7, r1
    1888:	8809      	ldrh	r1, [r1, #0]
    188a:	1a8a      	subs	r2, r1, r2
    188c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	8b9b      	ldrh	r3, [r3, #28]
    1892:	b29b      	uxth	r3, r3
    1894:	3b01      	subs	r3, #1
    1896:	b29a      	uxth	r2, r3
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    189c:	230b      	movs	r3, #11
    189e:	18fb      	adds	r3, r7, r3
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d010      	beq.n	18c8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	7adb      	ldrb	r3, [r3, #11]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d01c      	beq.n	18e8 <_i2c_master_read+0x9c>
    18ae:	687b      	ldr	r3, [r7, #4]
    18b0:	8b9b      	ldrh	r3, [r3, #28]
    18b2:	b29b      	uxth	r3, r3
    18b4:	2b01      	cmp	r3, #1
    18b6:	d117      	bne.n	18e8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	685b      	ldr	r3, [r3, #4]
    18bc:	2280      	movs	r2, #128	; 0x80
    18be:	02d2      	lsls	r2, r2, #11
    18c0:	431a      	orrs	r2, r3
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	605a      	str	r2, [r3, #4]
    18c6:	e00f      	b.n	18e8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	7adb      	ldrb	r3, [r3, #11]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d00b      	beq.n	18e8 <_i2c_master_read+0x9c>
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	8b9b      	ldrh	r3, [r3, #28]
    18d4:	b29b      	uxth	r3, r3
    18d6:	2b00      	cmp	r3, #0
    18d8:	d106      	bne.n	18e8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	685b      	ldr	r3, [r3, #4]
    18de:	2280      	movs	r2, #128	; 0x80
    18e0:	02d2      	lsls	r2, r2, #11
    18e2:	431a      	orrs	r2, r3
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	8b9b      	ldrh	r3, [r3, #28]
    18ec:	b29b      	uxth	r3, r3
    18ee:	2b00      	cmp	r3, #0
    18f0:	d10e      	bne.n	1910 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	7a9b      	ldrb	r3, [r3, #10]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d00a      	beq.n	1910 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	0018      	movs	r0, r3
    18fe:	4b0e      	ldr	r3, [pc, #56]	; (1938 <_i2c_master_read+0xec>)
    1900:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	22c0      	movs	r2, #192	; 0xc0
    1908:	0292      	lsls	r2, r2, #10
    190a:	431a      	orrs	r2, r3
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	0018      	movs	r0, r3
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <_i2c_master_read+0xec>)
    1916:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	6a1a      	ldr	r2, [r3, #32]
    191c:	2308      	movs	r3, #8
    191e:	18fb      	adds	r3, r7, r3
    1920:	881b      	ldrh	r3, [r3, #0]
    1922:	18d3      	adds	r3, r2, r3
    1924:	68fa      	ldr	r2, [r7, #12]
    1926:	2128      	movs	r1, #40	; 0x28
    1928:	5c52      	ldrb	r2, [r2, r1]
    192a:	b2d2      	uxtb	r2, r2
    192c:	701a      	strb	r2, [r3, #0]
}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	46bd      	mov	sp, r7
    1932:	b004      	add	sp, #16
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00001829 	.word	0x00001829

0000193c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	8b5b      	ldrh	r3, [r3, #26]
    194e:	b29b      	uxth	r3, r3
    1950:	001a      	movs	r2, r3
    1952:	2304      	movs	r3, #4
    1954:	4013      	ands	r3, r2
    1956:	d004      	beq.n	1962 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	2225      	movs	r2, #37	; 0x25
    195c:	211e      	movs	r1, #30
    195e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1960:	e024      	b.n	19ac <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1962:	230a      	movs	r3, #10
    1964:	18fb      	adds	r3, r7, r3
    1966:	687a      	ldr	r2, [r7, #4]
    1968:	8b52      	ldrh	r2, [r2, #26]
    196a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	8b9b      	ldrh	r3, [r3, #28]
    1970:	b29a      	uxth	r2, r3
    1972:	230a      	movs	r3, #10
    1974:	18fb      	adds	r3, r7, r3
    1976:	210a      	movs	r1, #10
    1978:	1879      	adds	r1, r7, r1
    197a:	8809      	ldrh	r1, [r1, #0]
    197c:	1a8a      	subs	r2, r1, r2
    197e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	8b9b      	ldrh	r3, [r3, #28]
    1984:	b29b      	uxth	r3, r3
    1986:	3b01      	subs	r3, #1
    1988:	b29a      	uxth	r2, r3
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    198e:	687b      	ldr	r3, [r7, #4]
    1990:	0018      	movs	r0, r3
    1992:	4b08      	ldr	r3, [pc, #32]	; (19b4 <_i2c_master_write+0x78>)
    1994:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	6a1a      	ldr	r2, [r3, #32]
    199a:	230a      	movs	r3, #10
    199c:	18fb      	adds	r3, r7, r3
    199e:	881b      	ldrh	r3, [r3, #0]
    19a0:	18d3      	adds	r3, r2, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	b2d9      	uxtb	r1, r3
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	2228      	movs	r2, #40	; 0x28
    19aa:	5499      	strb	r1, [r3, r2]
}
    19ac:	46bd      	mov	sp, r7
    19ae:	b004      	add	sp, #16
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00001829 	.word	0x00001829

000019b8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b084      	sub	sp, #16
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	7e1b      	ldrb	r3, [r3, #24]
    19ca:	b2db      	uxtb	r3, r3
    19cc:	001a      	movs	r2, r3
    19ce:	2301      	movs	r3, #1
    19d0:	4013      	ands	r3, r2
    19d2:	d02b      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    19d4:	68fb      	ldr	r3, [r7, #12]
    19d6:	2201      	movs	r2, #1
    19d8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	8b5b      	ldrh	r3, [r3, #26]
    19de:	b29b      	uxth	r3, r3
    19e0:	001a      	movs	r2, r3
    19e2:	2302      	movs	r3, #2
    19e4:	4013      	ands	r3, r2
    19e6:	d004      	beq.n	19f2 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	2225      	movs	r2, #37	; 0x25
    19ec:	2141      	movs	r1, #65	; 0x41
    19ee:	5499      	strb	r1, [r3, r2]
    19f0:	e01c      	b.n	1a2c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	8b5b      	ldrh	r3, [r3, #26]
    19f6:	b29b      	uxth	r3, r3
    19f8:	001a      	movs	r2, r3
    19fa:	2304      	movs	r3, #4
    19fc:	4013      	ands	r3, r2
    19fe:	d015      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	2225      	movs	r2, #37	; 0x25
    1a04:	2118      	movs	r1, #24
    1a06:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	2200      	movs	r2, #0
    1a0c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	7a9b      	ldrb	r3, [r3, #10]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d00a      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	0018      	movs	r0, r3
    1a1a:	4b13      	ldr	r3, [pc, #76]	; (1a68 <_i2c_master_async_address_response+0xb0>)
    1a1c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	22c0      	movs	r2, #192	; 0xc0
    1a24:	0292      	lsls	r2, r2, #10
    1a26:	431a      	orrs	r2, r3
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	8b9b      	ldrh	r3, [r3, #28]
    1a30:	b29a      	uxth	r2, r3
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	2225      	movs	r2, #37	; 0x25
    1a3a:	5c9b      	ldrb	r3, [r3, r2]
    1a3c:	b2db      	uxtb	r3, r3
    1a3e:	2b05      	cmp	r3, #5
    1a40:	d10e      	bne.n	1a60 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	2224      	movs	r2, #36	; 0x24
    1a46:	5c9b      	ldrb	r3, [r3, r2]
    1a48:	b2db      	uxtb	r3, r3
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d104      	bne.n	1a58 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	0018      	movs	r0, r3
    1a52:	4b06      	ldr	r3, [pc, #24]	; (1a6c <_i2c_master_async_address_response+0xb4>)
    1a54:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1a56:	e003      	b.n	1a60 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	0018      	movs	r0, r3
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <_i2c_master_async_address_response+0xb8>)
    1a5e:	4798      	blx	r3
}
    1a60:	46c0      	nop			; (mov r8, r8)
    1a62:	46bd      	mov	sp, r7
    1a64:	b004      	add	sp, #16
    1a66:	bd80      	pop	{r7, pc}
    1a68:	00001829 	.word	0x00001829
    1a6c:	0000193d 	.word	0x0000193d
    1a70:	0000184d 	.word	0x0000184d

00001a74 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b084      	sub	sp, #16
    1a78:	af00      	add	r7, sp, #0
    1a7a:	60f8      	str	r0, [r7, #12]
    1a7c:	60b9      	str	r1, [r7, #8]
    1a7e:	1dfb      	adds	r3, r7, #7
    1a80:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    1a82:	1dfb      	adds	r3, r7, #7
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	68fa      	ldr	r2, [r7, #12]
    1a88:	3302      	adds	r3, #2
    1a8a:	009b      	lsls	r3, r3, #2
    1a8c:	18d3      	adds	r3, r2, r3
    1a8e:	3304      	adds	r3, #4
    1a90:	68ba      	ldr	r2, [r7, #8]
    1a92:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    1a94:	68fb      	ldr	r3, [r7, #12]
    1a96:	7e1b      	ldrb	r3, [r3, #24]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	b25a      	sxtb	r2, r3
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	781b      	ldrb	r3, [r3, #0]
    1aa0:	2101      	movs	r1, #1
    1aa2:	4099      	lsls	r1, r3
    1aa4:	000b      	movs	r3, r1
    1aa6:	b25b      	sxtb	r3, r3
    1aa8:	4313      	orrs	r3, r2
    1aaa:	b25b      	sxtb	r3, r3
    1aac:	b2da      	uxtb	r2, r3
    1aae:	68fb      	ldr	r3, [r7, #12]
    1ab0:	761a      	strb	r2, [r3, #24]
}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46bd      	mov	sp, r7
    1ab6:	b004      	add	sp, #16
    1ab8:	bd80      	pop	{r7, pc}
	...

00001abc <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1abc:	b580      	push	{r7, lr}
    1abe:	b084      	sub	sp, #16
    1ac0:	af00      	add	r7, sp, #0
    1ac2:	6078      	str	r0, [r7, #4]
    1ac4:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	681b      	ldr	r3, [r3, #0]
    1aca:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1acc:	683b      	ldr	r3, [r7, #0]
    1ace:	7a5b      	ldrb	r3, [r3, #9]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d006      	beq.n	1ae2 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	7a9a      	ldrb	r2, [r3, #10]
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	0011      	movs	r1, r2
    1adc:	0018      	movs	r0, r3
    1ade:	4b1e      	ldr	r3, [pc, #120]	; (1b58 <_i2c_master_write_packet+0x9c>)
    1ae0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ae2:	68fb      	ldr	r3, [r7, #12]
    1ae4:	685b      	ldr	r3, [r3, #4]
    1ae6:	4a1d      	ldr	r2, [pc, #116]	; (1b5c <_i2c_master_write_packet+0xa0>)
    1ae8:	401a      	ands	r2, r3
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	685a      	ldr	r2, [r3, #4]
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    1af6:	683b      	ldr	r3, [r7, #0]
    1af8:	885a      	ldrh	r2, [r3, #2]
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	2224      	movs	r2, #36	; 0x24
    1b02:	2100      	movs	r1, #0
    1b04:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2225      	movs	r2, #37	; 0x25
    1b0a:	2105      	movs	r1, #5
    1b0c:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    1b0e:	68fb      	ldr	r3, [r7, #12]
    1b10:	2203      	movs	r2, #3
    1b12:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    1b14:	683b      	ldr	r3, [r7, #0]
    1b16:	7a1b      	ldrb	r3, [r3, #8]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d00d      	beq.n	1b38 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	881b      	ldrh	r3, [r3, #0]
    1b20:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b22:	683b      	ldr	r3, [r7, #0]
    1b24:	7a5b      	ldrb	r3, [r3, #9]
    1b26:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b28:	4313      	orrs	r3, r2
    1b2a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b2c:	2380      	movs	r3, #128	; 0x80
    1b2e:	021b      	lsls	r3, r3, #8
    1b30:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b32:	68fb      	ldr	r3, [r7, #12]
    1b34:	625a      	str	r2, [r3, #36]	; 0x24
    1b36:	e009      	b.n	1b4c <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b38:	683b      	ldr	r3, [r7, #0]
    1b3a:	881b      	ldrh	r3, [r3, #0]
    1b3c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	7a5b      	ldrb	r3, [r3, #9]
    1b42:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b44:	4313      	orrs	r3, r2
    1b46:	001a      	movs	r2, r3
    1b48:	68fb      	ldr	r3, [r7, #12]
    1b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    1b4c:	2300      	movs	r3, #0
}
    1b4e:	0018      	movs	r0, r3
    1b50:	46bd      	mov	sp, r7
    1b52:	b004      	add	sp, #16
    1b54:	bd80      	pop	{r7, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	000017b1 	.word	0x000017b1
    1b5c:	fffbffff 	.word	0xfffbffff

00001b60 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	6078      	str	r0, [r7, #4]
    1b68:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	8b9b      	ldrh	r3, [r3, #28]
    1b6e:	b29b      	uxth	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	d001      	beq.n	1b78 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    1b74:	2305      	movs	r3, #5
    1b76:	e00c      	b.n	1b92 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	2201      	movs	r2, #1
    1b7c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	2201      	movs	r2, #1
    1b82:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    1b84:	683a      	ldr	r2, [r7, #0]
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	0011      	movs	r1, r2
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b03      	ldr	r3, [pc, #12]	; (1b9c <i2c_master_write_packet_job+0x3c>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
}
    1b92:	0018      	movs	r0, r3
    1b94:	46bd      	mov	sp, r7
    1b96:	b002      	add	sp, #8
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	00001abd 	.word	0x00001abd

00001ba0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b086      	sub	sp, #24
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	0002      	movs	r2, r0
    1ba8:	1dfb      	adds	r3, r7, #7
    1baa:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1bac:	1dfb      	adds	r3, r7, #7
    1bae:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1bb0:	4b93      	ldr	r3, [pc, #588]	; (1e00 <_i2c_master_interrupt_handler+0x260>)
    1bb2:	0092      	lsls	r2, r2, #2
    1bb4:	58d3      	ldr	r3, [r2, r3]
    1bb6:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1bb8:	697b      	ldr	r3, [r7, #20]
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1bbe:	693b      	ldr	r3, [r7, #16]
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	011b      	lsls	r3, r3, #4
    1bc4:	0fdb      	lsrs	r3, r3, #31
    1bc6:	b2db      	uxtb	r3, r3
    1bc8:	001a      	movs	r2, r3
    1bca:	230f      	movs	r3, #15
    1bcc:	18fb      	adds	r3, r7, r3
    1bce:	1e51      	subs	r1, r2, #1
    1bd0:	418a      	sbcs	r2, r1
    1bd2:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1bd4:	230e      	movs	r3, #14
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	697a      	ldr	r2, [r7, #20]
    1bda:	7e52      	ldrb	r2, [r2, #25]
    1bdc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1bde:	697b      	ldr	r3, [r7, #20]
    1be0:	7e1b      	ldrb	r3, [r3, #24]
    1be2:	b2da      	uxtb	r2, r3
    1be4:	230e      	movs	r3, #14
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	210e      	movs	r1, #14
    1bea:	1879      	adds	r1, r7, r1
    1bec:	7809      	ldrb	r1, [r1, #0]
    1bee:	400a      	ands	r2, r1
    1bf0:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1bf2:	697b      	ldr	r3, [r7, #20]
    1bf4:	8b5b      	ldrh	r3, [r3, #26]
    1bf6:	b29b      	uxth	r3, r3
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d109      	bne.n	1c10 <_i2c_master_interrupt_handler+0x70>
    1bfc:	697b      	ldr	r3, [r7, #20]
    1bfe:	8b9b      	ldrh	r3, [r3, #28]
    1c00:	b29b      	uxth	r3, r3
    1c02:	2b00      	cmp	r3, #0
    1c04:	d004      	beq.n	1c10 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1c06:	697b      	ldr	r3, [r7, #20]
    1c08:	0018      	movs	r0, r3
    1c0a:	4b7e      	ldr	r3, [pc, #504]	; (1e04 <_i2c_master_interrupt_handler+0x264>)
    1c0c:	4798      	blx	r3
    1c0e:	e070      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c10:	697b      	ldr	r3, [r7, #20]
    1c12:	8b5b      	ldrh	r3, [r3, #26]
    1c14:	b29b      	uxth	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	d039      	beq.n	1c8e <_i2c_master_interrupt_handler+0xee>
    1c1a:	697b      	ldr	r3, [r7, #20]
    1c1c:	8b9b      	ldrh	r3, [r3, #28]
    1c1e:	b29b      	uxth	r3, r3
    1c20:	2b00      	cmp	r3, #0
    1c22:	d134      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1c24:	697b      	ldr	r3, [r7, #20]
    1c26:	2225      	movs	r2, #37	; 0x25
    1c28:	5c9b      	ldrb	r3, [r3, r2]
    1c2a:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c2c:	2b05      	cmp	r3, #5
    1c2e:	d12e      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c30:	697b      	ldr	r3, [r7, #20]
    1c32:	2224      	movs	r2, #36	; 0x24
    1c34:	5c9b      	ldrb	r3, [r3, r2]
    1c36:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d128      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1c3c:	693b      	ldr	r3, [r7, #16]
    1c3e:	2203      	movs	r2, #3
    1c40:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1c42:	697b      	ldr	r3, [r7, #20]
    1c44:	2200      	movs	r2, #0
    1c46:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	2225      	movs	r2, #37	; 0x25
    1c4c:	2100      	movs	r1, #0
    1c4e:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1c50:	697b      	ldr	r3, [r7, #20]
    1c52:	7a9b      	ldrb	r3, [r3, #10]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d00b      	beq.n	1c70 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1c58:	697b      	ldr	r3, [r7, #20]
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b6a      	ldr	r3, [pc, #424]	; (1e08 <_i2c_master_interrupt_handler+0x268>)
    1c5e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c60:	693b      	ldr	r3, [r7, #16]
    1c62:	685b      	ldr	r3, [r3, #4]
    1c64:	22c0      	movs	r2, #192	; 0xc0
    1c66:	0292      	lsls	r2, r2, #10
    1c68:	431a      	orrs	r2, r3
    1c6a:	693b      	ldr	r3, [r7, #16]
    1c6c:	605a      	str	r2, [r3, #4]
    1c6e:	e002      	b.n	1c76 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c70:	693b      	ldr	r3, [r7, #16]
    1c72:	2201      	movs	r2, #1
    1c74:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c76:	230e      	movs	r3, #14
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	2201      	movs	r2, #1
    1c7e:	4013      	ands	r3, r2
    1c80:	d037      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c82:	697b      	ldr	r3, [r7, #20]
    1c84:	68db      	ldr	r3, [r3, #12]
    1c86:	697a      	ldr	r2, [r7, #20]
    1c88:	0010      	movs	r0, r2
    1c8a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c8c:	e031      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1c8e:	697b      	ldr	r3, [r7, #20]
    1c90:	8b5b      	ldrh	r3, [r3, #26]
    1c92:	b29b      	uxth	r3, r3
    1c94:	2b00      	cmp	r3, #0
    1c96:	d02c      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
    1c98:	697b      	ldr	r3, [r7, #20]
    1c9a:	8b9b      	ldrh	r3, [r3, #28]
    1c9c:	b29b      	uxth	r3, r3
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d027      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1ca2:	693b      	ldr	r3, [r7, #16]
    1ca4:	8b5b      	ldrh	r3, [r3, #26]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	001a      	movs	r2, r3
    1caa:	2320      	movs	r3, #32
    1cac:	4013      	ands	r3, r2
    1cae:	d111      	bne.n	1cd4 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cb0:	230f      	movs	r3, #15
    1cb2:	18fb      	adds	r3, r7, r3
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	2201      	movs	r2, #1
    1cb8:	4053      	eors	r3, r2
    1cba:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d104      	bne.n	1cca <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	8b9b      	ldrh	r3, [r3, #28]
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	2b01      	cmp	r3, #1
    1cc8:	d004      	beq.n	1cd4 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1cca:	697b      	ldr	r3, [r7, #20]
    1ccc:	2225      	movs	r2, #37	; 0x25
    1cce:	2141      	movs	r1, #65	; 0x41
    1cd0:	5499      	strb	r1, [r3, r2]
    1cd2:	e00e      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1cd4:	697b      	ldr	r3, [r7, #20]
    1cd6:	2224      	movs	r2, #36	; 0x24
    1cd8:	5c9b      	ldrb	r3, [r3, r2]
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d104      	bne.n	1cea <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1ce0:	697b      	ldr	r3, [r7, #20]
    1ce2:	0018      	movs	r0, r3
    1ce4:	4b49      	ldr	r3, [pc, #292]	; (1e0c <_i2c_master_interrupt_handler+0x26c>)
    1ce6:	4798      	blx	r3
    1ce8:	e003      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1cea:	697b      	ldr	r3, [r7, #20]
    1cec:	0018      	movs	r0, r3
    1cee:	4b48      	ldr	r3, [pc, #288]	; (1e10 <_i2c_master_interrupt_handler+0x270>)
    1cf0:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1cf2:	697b      	ldr	r3, [r7, #20]
    1cf4:	8b5b      	ldrh	r3, [r3, #26]
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d047      	beq.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
    1cfc:	697b      	ldr	r3, [r7, #20]
    1cfe:	8b9b      	ldrh	r3, [r3, #28]
    1d00:	b29b      	uxth	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	d142      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1d06:	697b      	ldr	r3, [r7, #20]
    1d08:	2225      	movs	r2, #37	; 0x25
    1d0a:	5c9b      	ldrb	r3, [r3, r2]
    1d0c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1d0e:	2b05      	cmp	r3, #5
    1d10:	d13c      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1d12:	697b      	ldr	r3, [r7, #20]
    1d14:	2224      	movs	r2, #36	; 0x24
    1d16:	5c9b      	ldrb	r3, [r3, r2]
    1d18:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1d1a:	2b01      	cmp	r3, #1
    1d1c:	d136      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1d1e:	693b      	ldr	r3, [r7, #16]
    1d20:	7e1b      	ldrb	r3, [r3, #24]
    1d22:	b2db      	uxtb	r3, r3
    1d24:	001a      	movs	r2, r3
    1d26:	2302      	movs	r3, #2
    1d28:	4013      	ands	r3, r2
    1d2a:	d002      	beq.n	1d32 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d2c:	693b      	ldr	r3, [r7, #16]
    1d2e:	2202      	movs	r2, #2
    1d30:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1d32:	693b      	ldr	r3, [r7, #16]
    1d34:	2203      	movs	r2, #3
    1d36:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1d38:	697b      	ldr	r3, [r7, #20]
    1d3a:	2200      	movs	r2, #0
    1d3c:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1d3e:	697b      	ldr	r3, [r7, #20]
    1d40:	2225      	movs	r2, #37	; 0x25
    1d42:	2100      	movs	r1, #0
    1d44:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1d46:	230e      	movs	r3, #14
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	2202      	movs	r2, #2
    1d4e:	4013      	ands	r3, r2
    1d50:	d00b      	beq.n	1d6a <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1d52:	697b      	ldr	r3, [r7, #20]
    1d54:	2224      	movs	r2, #36	; 0x24
    1d56:	5c9b      	ldrb	r3, [r3, r2]
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	2b01      	cmp	r3, #1
    1d5c:	d105      	bne.n	1d6a <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1d5e:	697b      	ldr	r3, [r7, #20]
    1d60:	691b      	ldr	r3, [r3, #16]
    1d62:	697a      	ldr	r2, [r7, #20]
    1d64:	0010      	movs	r0, r2
    1d66:	4798      	blx	r3
    1d68:	e010      	b.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1d6a:	230e      	movs	r3, #14
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	781b      	ldrb	r3, [r3, #0]
    1d70:	2201      	movs	r2, #1
    1d72:	4013      	ands	r3, r2
    1d74:	d00a      	beq.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1d76:	697b      	ldr	r3, [r7, #20]
    1d78:	2224      	movs	r2, #36	; 0x24
    1d7a:	5c9b      	ldrb	r3, [r3, r2]
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d104      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1d82:	697b      	ldr	r3, [r7, #20]
    1d84:	68db      	ldr	r3, [r3, #12]
    1d86:	697a      	ldr	r2, [r7, #20]
    1d88:	0010      	movs	r0, r2
    1d8a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1d8c:	697b      	ldr	r3, [r7, #20]
    1d8e:	2225      	movs	r2, #37	; 0x25
    1d90:	5c9b      	ldrb	r3, [r3, r2]
    1d92:	b2db      	uxtb	r3, r3
    1d94:	2b05      	cmp	r3, #5
    1d96:	d02e      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
    1d98:	697b      	ldr	r3, [r7, #20]
    1d9a:	2225      	movs	r2, #37	; 0x25
    1d9c:	5c9b      	ldrb	r3, [r3, r2]
    1d9e:	b2db      	uxtb	r3, r3
    1da0:	2b00      	cmp	r3, #0
    1da2:	d028      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1da4:	693b      	ldr	r3, [r7, #16]
    1da6:	2203      	movs	r2, #3
    1da8:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1daa:	697b      	ldr	r3, [r7, #20]
    1dac:	2200      	movs	r2, #0
    1dae:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1db0:	697b      	ldr	r3, [r7, #20]
    1db2:	2200      	movs	r2, #0
    1db4:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1db6:	697b      	ldr	r3, [r7, #20]
    1db8:	2225      	movs	r2, #37	; 0x25
    1dba:	5c9b      	ldrb	r3, [r3, r2]
    1dbc:	b2db      	uxtb	r3, r3
    1dbe:	2b41      	cmp	r3, #65	; 0x41
    1dc0:	d00e      	beq.n	1de0 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1dc2:	697b      	ldr	r3, [r7, #20]
    1dc4:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d00a      	beq.n	1de0 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1dca:	697b      	ldr	r3, [r7, #20]
    1dcc:	0018      	movs	r0, r3
    1dce:	4b0e      	ldr	r3, [pc, #56]	; (1e08 <_i2c_master_interrupt_handler+0x268>)
    1dd0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1dd2:	693b      	ldr	r3, [r7, #16]
    1dd4:	685b      	ldr	r3, [r3, #4]
    1dd6:	22e0      	movs	r2, #224	; 0xe0
    1dd8:	02d2      	lsls	r2, r2, #11
    1dda:	431a      	orrs	r2, r3
    1ddc:	693b      	ldr	r3, [r7, #16]
    1dde:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1de0:	230e      	movs	r3, #14
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2204      	movs	r2, #4
    1de8:	4013      	ands	r3, r2
    1dea:	d004      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1dec:	697b      	ldr	r3, [r7, #20]
    1dee:	695b      	ldr	r3, [r3, #20]
    1df0:	697a      	ldr	r2, [r7, #20]
    1df2:	0010      	movs	r0, r2
    1df4:	4798      	blx	r3
		}
	}
}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	46bd      	mov	sp, r7
    1dfa:	b006      	add	sp, #24
    1dfc:	bd80      	pop	{r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20005330 	.word	0x20005330
    1e04:	000019b9 	.word	0x000019b9
    1e08:	00001829 	.word	0x00001829
    1e0c:	0000193d 	.word	0x0000193d
    1e10:	0000184d 	.word	0x0000184d

00001e14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	60f8      	str	r0, [r7, #12]
    1e1c:	60b9      	str	r1, [r7, #8]
    1e1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    1e20:	68fb      	ldr	r3, [r7, #12]
    1e22:	3b04      	subs	r3, #4
    1e24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	2280      	movs	r2, #128	; 0x80
    1e2a:	0452      	lsls	r2, r2, #17
    1e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	3b04      	subs	r3, #4
    1e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1e34:	68ba      	ldr	r2, [r7, #8]
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	3b04      	subs	r3, #4
    1e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1e40:	4a08      	ldr	r2, [pc, #32]	; (1e64 <pxPortInitialiseStack+0x50>)
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    1e46:	68fb      	ldr	r3, [r7, #12]
    1e48:	3b14      	subs	r3, #20
    1e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1e4c:	687a      	ldr	r2, [r7, #4]
    1e4e:	68fb      	ldr	r3, [r7, #12]
    1e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1e52:	68fb      	ldr	r3, [r7, #12]
    1e54:	3b20      	subs	r3, #32
    1e56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1e58:	68fb      	ldr	r3, [r7, #12]
}
    1e5a:	0018      	movs	r0, r3
    1e5c:	46bd      	mov	sp, r7
    1e5e:	b004      	add	sp, #16
    1e60:	bd80      	pop	{r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00001e69 	.word	0x00001e69

00001e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    1e6e:	2300      	movs	r3, #0
    1e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <prvTaskExitError+0x28>)
    1e74:	681b      	ldr	r3, [r3, #0]
    1e76:	3301      	adds	r3, #1
    1e78:	d001      	beq.n	1e7e <prvTaskExitError+0x16>
    1e7a:	b672      	cpsid	i
    1e7c:	e7fe      	b.n	1e7c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    1e7e:	b672      	cpsid	i
	while( ulDummy == 0 )
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d0fc      	beq.n	1e82 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1e88:	46c0      	nop			; (mov r8, r8)
    1e8a:	46bd      	mov	sp, r7
    1e8c:	b002      	add	sp, #8
    1e8e:	bd80      	pop	{r7, pc}
    1e90:	20000000 	.word	0x20000000

00001e94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1e94:	b580      	push	{r7, lr}
    1e96:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	46bd      	mov	sp, r7
    1e9c:	bd80      	pop	{r7, pc}
	...

00001ea0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1ea0:	4a0b      	ldr	r2, [pc, #44]	; (1ed0 <pxCurrentTCBConst2>)
    1ea2:	6813      	ldr	r3, [r2, #0]
    1ea4:	6818      	ldr	r0, [r3, #0]
    1ea6:	3020      	adds	r0, #32
    1ea8:	f380 8809 	msr	PSP, r0
    1eac:	2002      	movs	r0, #2
    1eae:	f380 8814 	msr	CONTROL, r0
    1eb2:	f3bf 8f6f 	isb	sy
    1eb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1eb8:	46ae      	mov	lr, r5
    1eba:	bc08      	pop	{r3}
    1ebc:	bc04      	pop	{r2}
    1ebe:	b662      	cpsie	i
    1ec0:	4718      	bx	r3
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	46c0      	nop			; (mov r8, r8)
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46c0      	nop			; (mov r8, r8)
    1ece:	46c0      	nop			; (mov r8, r8)

00001ed0 <pxCurrentTCBConst2>:
    1ed0:	2000515c 	.word	0x2000515c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    1ed4:	46c0      	nop			; (mov r8, r8)
    1ed6:	46c0      	nop			; (mov r8, r8)

00001ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1edc:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <xPortStartScheduler+0x40>)
    1ede:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <xPortStartScheduler+0x40>)
    1ee0:	6812      	ldr	r2, [r2, #0]
    1ee2:	21ff      	movs	r1, #255	; 0xff
    1ee4:	0409      	lsls	r1, r1, #16
    1ee6:	430a      	orrs	r2, r1
    1ee8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1eea:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <xPortStartScheduler+0x40>)
    1eec:	4a0a      	ldr	r2, [pc, #40]	; (1f18 <xPortStartScheduler+0x40>)
    1eee:	6812      	ldr	r2, [r2, #0]
    1ef0:	21ff      	movs	r1, #255	; 0xff
    1ef2:	0609      	lsls	r1, r1, #24
    1ef4:	430a      	orrs	r2, r1
    1ef6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <xPortStartScheduler+0x44>)
    1efa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <xPortStartScheduler+0x48>)
    1efe:	2200      	movs	r2, #0
    1f00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1f02:	4b08      	ldr	r3, [pc, #32]	; (1f24 <xPortStartScheduler+0x4c>)
    1f04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    1f06:	4b08      	ldr	r3, [pc, #32]	; (1f28 <xPortStartScheduler+0x50>)
    1f08:	4798      	blx	r3
	prvTaskExitError();
    1f0a:	4b08      	ldr	r3, [pc, #32]	; (1f2c <xPortStartScheduler+0x54>)
    1f0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    1f0e:	2300      	movs	r3, #0
}
    1f10:	0018      	movs	r0, r3
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	e000ed20 	.word	0xe000ed20
    1f1c:	00002049 	.word	0x00002049
    1f20:	20000000 	.word	0x20000000
    1f24:	00001ea1 	.word	0x00001ea1
    1f28:	00005cd1 	.word	0x00005cd1
    1f2c:	00001e69 	.word	0x00001e69

00001f30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    1f30:	b580      	push	{r7, lr}
    1f32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <vPortYield+0x1c>)
    1f36:	2280      	movs	r2, #128	; 0x80
    1f38:	0552      	lsls	r2, r2, #21
    1f3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    1f3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f40:	f3bf 8f6f 	isb	sy
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	bd80      	pop	{r7, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	e000ed04 	.word	0xe000ed04

00001f50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    1f54:	b672      	cpsid	i
    uxCriticalNesting++;
    1f56:	4b06      	ldr	r3, [pc, #24]	; (1f70 <vPortEnterCritical+0x20>)
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	1c5a      	adds	r2, r3, #1
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <vPortEnterCritical+0x20>)
    1f5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1f60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f64:	f3bf 8f6f 	isb	sy
}
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	46bd      	mov	sp, r7
    1f6c:	bd80      	pop	{r7, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	20000000 	.word	0x20000000

00001f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    1f74:	b580      	push	{r7, lr}
    1f76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    1f78:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <vPortExitCritical+0x2c>)
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d101      	bne.n	1f84 <vPortExitCritical+0x10>
    1f80:	b672      	cpsid	i
    1f82:	e7fe      	b.n	1f82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    1f84:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <vPortExitCritical+0x2c>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	1e5a      	subs	r2, r3, #1
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <vPortExitCritical+0x2c>)
    1f8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    1f8e:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <vPortExitCritical+0x2c>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d100      	bne.n	1f98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    1f96:	b662      	cpsie	i
    }
}
    1f98:	46c0      	nop			; (mov r8, r8)
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	20000000 	.word	0x20000000

00001fa4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1fa4:	f3ef 8010 	mrs	r0, PRIMASK
    1fa8:	b672      	cpsid	i
    1faa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    1fac:	46c0      	nop			; (mov r8, r8)
    1fae:	0018      	movs	r0, r3

00001fb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    1fb0:	f380 8810 	msr	PRIMASK, r0
    1fb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    1fb6:	46c0      	nop			; (mov r8, r8)
	...

00001fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1fc0:	f3ef 8009 	mrs	r0, PSP
    1fc4:	4b0e      	ldr	r3, [pc, #56]	; (2000 <pxCurrentTCBConst>)
    1fc6:	681a      	ldr	r2, [r3, #0]
    1fc8:	3820      	subs	r0, #32
    1fca:	6010      	str	r0, [r2, #0]
    1fcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fce:	4644      	mov	r4, r8
    1fd0:	464d      	mov	r5, r9
    1fd2:	4656      	mov	r6, sl
    1fd4:	465f      	mov	r7, fp
    1fd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fd8:	b508      	push	{r3, lr}
    1fda:	b672      	cpsid	i
    1fdc:	f003 fe78 	bl	5cd0 <vTaskSwitchContext>
    1fe0:	b662      	cpsie	i
    1fe2:	bc0c      	pop	{r2, r3}
    1fe4:	6811      	ldr	r1, [r2, #0]
    1fe6:	6808      	ldr	r0, [r1, #0]
    1fe8:	3010      	adds	r0, #16
    1fea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fec:	46a0      	mov	r8, r4
    1fee:	46a9      	mov	r9, r5
    1ff0:	46b2      	mov	sl, r6
    1ff2:	46bb      	mov	fp, r7
    1ff4:	f380 8809 	msr	PSP, r0
    1ff8:	3820      	subs	r0, #32
    1ffa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1ffc:	4718      	bx	r3
    1ffe:	46c0      	nop			; (mov r8, r8)

00002000 <pxCurrentTCBConst>:
    2000:	2000515c 	.word	0x2000515c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	46c0      	nop			; (mov r8, r8)

00002008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    200e:	4b0a      	ldr	r3, [pc, #40]	; (2038 <SysTick_Handler+0x30>)
    2010:	4798      	blx	r3
    2012:	0003      	movs	r3, r0
    2014:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2016:	4b09      	ldr	r3, [pc, #36]	; (203c <SysTick_Handler+0x34>)
    2018:	4798      	blx	r3
    201a:	1e03      	subs	r3, r0, #0
    201c:	d003      	beq.n	2026 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    201e:	4b08      	ldr	r3, [pc, #32]	; (2040 <SysTick_Handler+0x38>)
    2020:	2280      	movs	r2, #128	; 0x80
    2022:	0552      	lsls	r2, r2, #21
    2024:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	0018      	movs	r0, r3
    202a:	4b06      	ldr	r3, [pc, #24]	; (2044 <SysTick_Handler+0x3c>)
    202c:	4798      	blx	r3
}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	46bd      	mov	sp, r7
    2032:	b002      	add	sp, #8
    2034:	bd80      	pop	{r7, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	00001fa5 	.word	0x00001fa5
    203c:	00005b49 	.word	0x00005b49
    2040:	e000ed04 	.word	0xe000ed04
    2044:	00001fb1 	.word	0x00001fb1

00002048 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    2048:	b580      	push	{r7, lr}
    204a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    204c:	4b07      	ldr	r3, [pc, #28]	; (206c <prvSetupTimerInterrupt+0x24>)
    204e:	2200      	movs	r2, #0
    2050:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2052:	4b07      	ldr	r3, [pc, #28]	; (2070 <prvSetupTimerInterrupt+0x28>)
    2054:	2200      	movs	r2, #0
    2056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <prvSetupTimerInterrupt+0x2c>)
    205a:	4a07      	ldr	r2, [pc, #28]	; (2078 <prvSetupTimerInterrupt+0x30>)
    205c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    205e:	4b03      	ldr	r3, [pc, #12]	; (206c <prvSetupTimerInterrupt+0x24>)
    2060:	2207      	movs	r2, #7
    2062:	601a      	str	r2, [r3, #0]
}
    2064:	46c0      	nop			; (mov r8, r8)
    2066:	46bd      	mov	sp, r7
    2068:	bd80      	pop	{r7, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	e000e010 	.word	0xe000e010
    2070:	e000e018 	.word	0xe000e018
    2074:	e000e014 	.word	0xe000e014
    2078:	0000bb7f 	.word	0x0000bb7f

0000207c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    207c:	b580      	push	{r7, lr}
    207e:	b086      	sub	sp, #24
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    2084:	2300      	movs	r3, #0
    2086:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
    2088:	4b4c      	ldr	r3, [pc, #304]	; (21bc <pvPortMalloc+0x140>)
    208a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    208c:	4b4c      	ldr	r3, [pc, #304]	; (21c0 <pvPortMalloc+0x144>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2b00      	cmp	r3, #0
    2092:	d101      	bne.n	2098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    2094:	4b4b      	ldr	r3, [pc, #300]	; (21c4 <pvPortMalloc+0x148>)
    2096:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    2098:	4b4b      	ldr	r3, [pc, #300]	; (21c8 <pvPortMalloc+0x14c>)
    209a:	681b      	ldr	r3, [r3, #0]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	4013      	ands	r3, r2
    20a0:	d000      	beq.n	20a4 <pvPortMalloc+0x28>
    20a2:	e079      	b.n	2198 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d012      	beq.n	20d0 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
    20aa:	2208      	movs	r2, #8
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	189b      	adds	r3, r3, r2
    20b0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	2207      	movs	r2, #7
    20b6:	4013      	ands	r3, r2
    20b8:	d00a      	beq.n	20d0 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	2207      	movs	r2, #7
    20be:	4393      	bics	r3, r2
    20c0:	3308      	adds	r3, #8
    20c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	2207      	movs	r2, #7
    20c8:	4013      	ands	r3, r2
    20ca:	d001      	beq.n	20d0 <pvPortMalloc+0x54>
    20cc:	b672      	cpsid	i
    20ce:	e7fe      	b.n	20ce <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d060      	beq.n	2198 <pvPortMalloc+0x11c>
    20d6:	4b3d      	ldr	r3, [pc, #244]	; (21cc <pvPortMalloc+0x150>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	429a      	cmp	r2, r3
    20de:	d85b      	bhi.n	2198 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    20e0:	4b3b      	ldr	r3, [pc, #236]	; (21d0 <pvPortMalloc+0x154>)
    20e2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
    20e4:	4b3a      	ldr	r3, [pc, #232]	; (21d0 <pvPortMalloc+0x154>)
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    20ea:	e004      	b.n	20f6 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
    20ec:	697b      	ldr	r3, [r7, #20]
    20ee:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
    20f0:	697b      	ldr	r3, [r7, #20]
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    20f6:	697b      	ldr	r3, [r7, #20]
    20f8:	685a      	ldr	r2, [r3, #4]
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	429a      	cmp	r2, r3
    20fe:	d203      	bcs.n	2108 <pvPortMalloc+0x8c>
    2100:	697b      	ldr	r3, [r7, #20]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	2b00      	cmp	r3, #0
    2106:	d1f1      	bne.n	20ec <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    2108:	4b2d      	ldr	r3, [pc, #180]	; (21c0 <pvPortMalloc+0x144>)
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	697a      	ldr	r2, [r7, #20]
    210e:	429a      	cmp	r2, r3
    2110:	d042      	beq.n	2198 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2112:	693b      	ldr	r3, [r7, #16]
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	2208      	movs	r2, #8
    2118:	189b      	adds	r3, r3, r2
    211a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    211c:	697b      	ldr	r3, [r7, #20]
    211e:	681a      	ldr	r2, [r3, #0]
    2120:	693b      	ldr	r3, [r7, #16]
    2122:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2124:	697b      	ldr	r3, [r7, #20]
    2126:	685a      	ldr	r2, [r3, #4]
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	1ad2      	subs	r2, r2, r3
    212c:	2308      	movs	r3, #8
    212e:	005b      	lsls	r3, r3, #1
    2130:	429a      	cmp	r2, r3
    2132:	d916      	bls.n	2162 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2134:	697a      	ldr	r2, [r7, #20]
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	18d3      	adds	r3, r2, r3
    213a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2207      	movs	r2, #7
    2140:	4013      	ands	r3, r2
    2142:	d001      	beq.n	2148 <pvPortMalloc+0xcc>
    2144:	b672      	cpsid	i
    2146:	e7fe      	b.n	2146 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2148:	697b      	ldr	r3, [r7, #20]
    214a:	685a      	ldr	r2, [r3, #4]
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	1ad2      	subs	r2, r2, r3
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    2154:	697b      	ldr	r3, [r7, #20]
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    215a:	68bb      	ldr	r3, [r7, #8]
    215c:	0018      	movs	r0, r3
    215e:	4b1d      	ldr	r3, [pc, #116]	; (21d4 <pvPortMalloc+0x158>)
    2160:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    2162:	4b1a      	ldr	r3, [pc, #104]	; (21cc <pvPortMalloc+0x150>)
    2164:	681a      	ldr	r2, [r3, #0]
    2166:	697b      	ldr	r3, [r7, #20]
    2168:	685b      	ldr	r3, [r3, #4]
    216a:	1ad2      	subs	r2, r2, r3
    216c:	4b17      	ldr	r3, [pc, #92]	; (21cc <pvPortMalloc+0x150>)
    216e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    2170:	4b16      	ldr	r3, [pc, #88]	; (21cc <pvPortMalloc+0x150>)
    2172:	681a      	ldr	r2, [r3, #0]
    2174:	4b18      	ldr	r3, [pc, #96]	; (21d8 <pvPortMalloc+0x15c>)
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	429a      	cmp	r2, r3
    217a:	d203      	bcs.n	2184 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    217c:	4b13      	ldr	r3, [pc, #76]	; (21cc <pvPortMalloc+0x150>)
    217e:	681a      	ldr	r2, [r3, #0]
    2180:	4b15      	ldr	r3, [pc, #84]	; (21d8 <pvPortMalloc+0x15c>)
    2182:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    2184:	697b      	ldr	r3, [r7, #20]
    2186:	685a      	ldr	r2, [r3, #4]
    2188:	4b0f      	ldr	r3, [pc, #60]	; (21c8 <pvPortMalloc+0x14c>)
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	431a      	orrs	r2, r3
    218e:	697b      	ldr	r3, [r7, #20]
    2190:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2200      	movs	r2, #0
    2196:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2198:	4b10      	ldr	r3, [pc, #64]	; (21dc <pvPortMalloc+0x160>)
    219a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	2b00      	cmp	r3, #0
    21a0:	d101      	bne.n	21a6 <pvPortMalloc+0x12a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    21a2:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <pvPortMalloc+0x164>)
    21a4:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    21a6:	68fb      	ldr	r3, [r7, #12]
    21a8:	2207      	movs	r2, #7
    21aa:	4013      	ands	r3, r2
    21ac:	d001      	beq.n	21b2 <pvPortMalloc+0x136>
    21ae:	b672      	cpsid	i
    21b0:	e7fe      	b.n	21b0 <pvPortMalloc+0x134>
	return pvReturn;
    21b2:	68fb      	ldr	r3, [r7, #12]
}
    21b4:	0018      	movs	r0, r3
    21b6:	46bd      	mov	sp, r7
    21b8:	b006      	add	sp, #24
    21ba:	bd80      	pop	{r7, pc}
    21bc:	000059e1 	.word	0x000059e1
    21c0:	20004ebc 	.word	0x20004ebc
    21c4:	00002281 	.word	0x00002281
    21c8:	20004ec8 	.word	0x20004ec8
    21cc:	20004ec0 	.word	0x20004ec0
    21d0:	20004eb4 	.word	0x20004eb4
    21d4:	00002341 	.word	0x00002341
    21d8:	20004ec4 	.word	0x20004ec4
    21dc:	000059f9 	.word	0x000059f9
    21e0:	00008661 	.word	0x00008661

000021e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    21e4:	b580      	push	{r7, lr}
    21e6:	b084      	sub	sp, #16
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d035      	beq.n	2262 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    21f6:	2308      	movs	r3, #8
    21f8:	425b      	negs	r3, r3
    21fa:	68fa      	ldr	r2, [r7, #12]
    21fc:	18d3      	adds	r3, r2, r3
    21fe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    2204:	68bb      	ldr	r3, [r7, #8]
    2206:	685a      	ldr	r2, [r3, #4]
    2208:	4b18      	ldr	r3, [pc, #96]	; (226c <vPortFree+0x88>)
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	4013      	ands	r3, r2
    220e:	d101      	bne.n	2214 <vPortFree+0x30>
    2210:	b672      	cpsid	i
    2212:	e7fe      	b.n	2212 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    2214:	68bb      	ldr	r3, [r7, #8]
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d001      	beq.n	2220 <vPortFree+0x3c>
    221c:	b672      	cpsid	i
    221e:	e7fe      	b.n	221e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    2220:	68bb      	ldr	r3, [r7, #8]
    2222:	685a      	ldr	r2, [r3, #4]
    2224:	4b11      	ldr	r3, [pc, #68]	; (226c <vPortFree+0x88>)
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	4013      	ands	r3, r2
    222a:	d01a      	beq.n	2262 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    222c:	68bb      	ldr	r3, [r7, #8]
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	2b00      	cmp	r3, #0
    2232:	d116      	bne.n	2262 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    2234:	68bb      	ldr	r3, [r7, #8]
    2236:	685a      	ldr	r2, [r3, #4]
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <vPortFree+0x88>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	43db      	mvns	r3, r3
    223e:	401a      	ands	r2, r3
    2240:	68bb      	ldr	r3, [r7, #8]
    2242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    2244:	4b0a      	ldr	r3, [pc, #40]	; (2270 <vPortFree+0x8c>)
    2246:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    2248:	68bb      	ldr	r3, [r7, #8]
    224a:	685a      	ldr	r2, [r3, #4]
    224c:	4b09      	ldr	r3, [pc, #36]	; (2274 <vPortFree+0x90>)
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	18d2      	adds	r2, r2, r3
    2252:	4b08      	ldr	r3, [pc, #32]	; (2274 <vPortFree+0x90>)
    2254:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2256:	68bb      	ldr	r3, [r7, #8]
    2258:	0018      	movs	r0, r3
    225a:	4b07      	ldr	r3, [pc, #28]	; (2278 <vPortFree+0x94>)
    225c:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
    225e:	4b07      	ldr	r3, [pc, #28]	; (227c <vPortFree+0x98>)
    2260:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	46bd      	mov	sp, r7
    2266:	b004      	add	sp, #16
    2268:	bd80      	pop	{r7, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	20004ec8 	.word	0x20004ec8
    2270:	000059e1 	.word	0x000059e1
    2274:	20004ec0 	.word	0x20004ec0
    2278:	00002341 	.word	0x00002341
    227c:	000059f9 	.word	0x000059f9

00002280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    2280:	b580      	push	{r7, lr}
    2282:	b084      	sub	sp, #16
    2284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    2286:	4b27      	ldr	r3, [pc, #156]	; (2324 <prvHeapInit+0xa4>)
    2288:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    228a:	4b27      	ldr	r3, [pc, #156]	; (2328 <prvHeapInit+0xa8>)
    228c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	2207      	movs	r2, #7
    2292:	4013      	ands	r3, r2
    2294:	d00c      	beq.n	22b0 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    2296:	68fb      	ldr	r3, [r7, #12]
    2298:	3307      	adds	r3, #7
    229a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    229c:	68fb      	ldr	r3, [r7, #12]
    229e:	2207      	movs	r2, #7
    22a0:	4393      	bics	r3, r2
    22a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    22a4:	68ba      	ldr	r2, [r7, #8]
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	1ad2      	subs	r2, r2, r3
    22aa:	4b1f      	ldr	r3, [pc, #124]	; (2328 <prvHeapInit+0xa8>)
    22ac:	18d3      	adds	r3, r2, r3
    22ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    22b4:	4b1d      	ldr	r3, [pc, #116]	; (232c <prvHeapInit+0xac>)
    22b6:	687a      	ldr	r2, [r7, #4]
    22b8:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
    22ba:	4b1c      	ldr	r3, [pc, #112]	; (232c <prvHeapInit+0xac>)
    22bc:	2200      	movs	r2, #0
    22be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	68bb      	ldr	r3, [r7, #8]
    22c4:	18d3      	adds	r3, r2, r3
    22c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    22c8:	2208      	movs	r2, #8
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	1a9b      	subs	r3, r3, r2
    22ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	2207      	movs	r2, #7
    22d4:	4393      	bics	r3, r2
    22d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    22d8:	68fa      	ldr	r2, [r7, #12]
    22da:	4b15      	ldr	r3, [pc, #84]	; (2330 <prvHeapInit+0xb0>)
    22dc:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <prvHeapInit+0xb0>)
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	2200      	movs	r2, #0
    22e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    22e6:	4b12      	ldr	r3, [pc, #72]	; (2330 <prvHeapInit+0xb0>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	2200      	movs	r2, #0
    22ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	68fa      	ldr	r2, [r7, #12]
    22f6:	1ad2      	subs	r2, r2, r3
    22f8:	683b      	ldr	r3, [r7, #0]
    22fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    22fc:	4b0c      	ldr	r3, [pc, #48]	; (2330 <prvHeapInit+0xb0>)
    22fe:	681a      	ldr	r2, [r3, #0]
    2300:	683b      	ldr	r3, [r7, #0]
    2302:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2304:	683b      	ldr	r3, [r7, #0]
    2306:	685a      	ldr	r2, [r3, #4]
    2308:	4b0a      	ldr	r3, [pc, #40]	; (2334 <prvHeapInit+0xb4>)
    230a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    230c:	683b      	ldr	r3, [r7, #0]
    230e:	685a      	ldr	r2, [r3, #4]
    2310:	4b09      	ldr	r3, [pc, #36]	; (2338 <prvHeapInit+0xb8>)
    2312:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2314:	4b09      	ldr	r3, [pc, #36]	; (233c <prvHeapInit+0xbc>)
    2316:	2280      	movs	r2, #128	; 0x80
    2318:	0612      	lsls	r2, r2, #24
    231a:	601a      	str	r2, [r3, #0]
}
    231c:	46c0      	nop			; (mov r8, r8)
    231e:	46bd      	mov	sp, r7
    2320:	b004      	add	sp, #16
    2322:	bd80      	pop	{r7, pc}
    2324:	00004e20 	.word	0x00004e20
    2328:	20000094 	.word	0x20000094
    232c:	20004eb4 	.word	0x20004eb4
    2330:	20004ebc 	.word	0x20004ebc
    2334:	20004ec4 	.word	0x20004ec4
    2338:	20004ec0 	.word	0x20004ec0
    233c:	20004ec8 	.word	0x20004ec8

00002340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    2340:	b580      	push	{r7, lr}
    2342:	b084      	sub	sp, #16
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2348:	4b27      	ldr	r3, [pc, #156]	; (23e8 <prvInsertBlockIntoFreeList+0xa8>)
    234a:	60fb      	str	r3, [r7, #12]
    234c:	e002      	b.n	2354 <prvInsertBlockIntoFreeList+0x14>
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	681b      	ldr	r3, [r3, #0]
    2352:	60fb      	str	r3, [r7, #12]
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	681a      	ldr	r2, [r3, #0]
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	429a      	cmp	r2, r3
    235c:	d3f7      	bcc.n	234e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    235e:	68fb      	ldr	r3, [r7, #12]
    2360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	685b      	ldr	r3, [r3, #4]
    2366:	68ba      	ldr	r2, [r7, #8]
    2368:	18d2      	adds	r2, r2, r3
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	429a      	cmp	r2, r3
    236e:	d108      	bne.n	2382 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	685a      	ldr	r2, [r3, #4]
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	685b      	ldr	r3, [r3, #4]
    2378:	18d2      	adds	r2, r2, r3
    237a:	68fb      	ldr	r3, [r7, #12]
    237c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    2386:	687b      	ldr	r3, [r7, #4]
    2388:	685b      	ldr	r3, [r3, #4]
    238a:	68ba      	ldr	r2, [r7, #8]
    238c:	18d2      	adds	r2, r2, r3
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	429a      	cmp	r2, r3
    2394:	d118      	bne.n	23c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    2396:	68fb      	ldr	r3, [r7, #12]
    2398:	681a      	ldr	r2, [r3, #0]
    239a:	4b14      	ldr	r3, [pc, #80]	; (23ec <prvInsertBlockIntoFreeList+0xac>)
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	429a      	cmp	r2, r3
    23a0:	d00d      	beq.n	23be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	685a      	ldr	r2, [r3, #4]
    23a6:	68fb      	ldr	r3, [r7, #12]
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	685b      	ldr	r3, [r3, #4]
    23ac:	18d2      	adds	r2, r2, r3
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    23b2:	68fb      	ldr	r3, [r7, #12]
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	681a      	ldr	r2, [r3, #0]
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	601a      	str	r2, [r3, #0]
    23bc:	e008      	b.n	23d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    23be:	4b0b      	ldr	r3, [pc, #44]	; (23ec <prvInsertBlockIntoFreeList+0xac>)
    23c0:	681a      	ldr	r2, [r3, #0]
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e003      	b.n	23d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    23c8:	68fb      	ldr	r3, [r7, #12]
    23ca:	681a      	ldr	r2, [r3, #0]
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    23d0:	68fa      	ldr	r2, [r7, #12]
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	429a      	cmp	r2, r3
    23d6:	d002      	beq.n	23de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	46bd      	mov	sp, r7
    23e2:	b004      	add	sp, #16
    23e4:	bd80      	pop	{r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	20004eb4 	.word	0x20004eb4
    23ec:	20004ebc 	.word	0x20004ebc

000023f0 <system_interrupt_enable>:
{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
    23f6:	0002      	movs	r2, r0
    23f8:	1dfb      	adds	r3, r7, #7
    23fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    23fc:	4b06      	ldr	r3, [pc, #24]	; (2418 <system_interrupt_enable+0x28>)
    23fe:	1dfa      	adds	r2, r7, #7
    2400:	7812      	ldrb	r2, [r2, #0]
    2402:	0011      	movs	r1, r2
    2404:	221f      	movs	r2, #31
    2406:	400a      	ands	r2, r1
    2408:	2101      	movs	r1, #1
    240a:	4091      	lsls	r1, r2
    240c:	000a      	movs	r2, r1
    240e:	601a      	str	r2, [r3, #0]
}
    2410:	46c0      	nop			; (mov r8, r8)
    2412:	46bd      	mov	sp, r7
    2414:	b002      	add	sp, #8
    2416:	bd80      	pop	{r7, pc}
    2418:	e000e100 	.word	0xe000e100

0000241c <adc_is_syncing>:
{
    241c:	b580      	push	{r7, lr}
    241e:	b084      	sub	sp, #16
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    242a:	68fb      	ldr	r3, [r7, #12]
    242c:	7e5b      	ldrb	r3, [r3, #25]
    242e:	b2db      	uxtb	r3, r3
    2430:	b25b      	sxtb	r3, r3
    2432:	2b00      	cmp	r3, #0
    2434:	da01      	bge.n	243a <adc_is_syncing+0x1e>
		return true;
    2436:	2301      	movs	r3, #1
    2438:	e000      	b.n	243c <adc_is_syncing+0x20>
	return false;
    243a:	2300      	movs	r3, #0
}
    243c:	0018      	movs	r0, r3
    243e:	46bd      	mov	sp, r7
    2440:	b004      	add	sp, #16
    2442:	bd80      	pop	{r7, pc}

00002444 <adc_enable>:
{
    2444:	b580      	push	{r7, lr}
    2446:	b084      	sub	sp, #16
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	681b      	ldr	r3, [r3, #0]
    2450:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	687b      	ldr	r3, [r7, #4]
    2456:	0018      	movs	r0, r3
    2458:	4b10      	ldr	r3, [pc, #64]	; (249c <adc_enable+0x58>)
    245a:	4798      	blx	r3
    245c:	1e03      	subs	r3, r0, #0
    245e:	d1f9      	bne.n	2454 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2460:	2017      	movs	r0, #23
    2462:	4b0f      	ldr	r3, [pc, #60]	; (24a0 <adc_enable+0x5c>)
    2464:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	220f      	movs	r2, #15
    246a:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	220f      	movs	r2, #15
    2470:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2472:	68fb      	ldr	r3, [r7, #12]
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	b2db      	uxtb	r3, r3
    2478:	2202      	movs	r2, #2
    247a:	4313      	orrs	r3, r2
    247c:	b2da      	uxtb	r2, r3
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	0018      	movs	r0, r3
    2488:	4b04      	ldr	r3, [pc, #16]	; (249c <adc_enable+0x58>)
    248a:	4798      	blx	r3
    248c:	1e03      	subs	r3, r0, #0
    248e:	d1f9      	bne.n	2484 <adc_enable+0x40>
	return STATUS_OK;
    2490:	2300      	movs	r3, #0
}
    2492:	0018      	movs	r0, r3
    2494:	46bd      	mov	sp, r7
    2496:	b004      	add	sp, #16
    2498:	bd80      	pop	{r7, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	0000241d 	.word	0x0000241d
    24a0:	000023f1 	.word	0x000023f1

000024a4 <adc_enable_interrupt>:
{
    24a4:	b580      	push	{r7, lr}
    24a6:	b084      	sub	sp, #16
    24a8:	af00      	add	r7, sp, #0
    24aa:	6078      	str	r0, [r7, #4]
    24ac:	000a      	movs	r2, r1
    24ae:	1cfb      	adds	r3, r7, #3
    24b0:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	681b      	ldr	r3, [r3, #0]
    24b6:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	1cfa      	adds	r2, r7, #3
    24bc:	7812      	ldrb	r2, [r2, #0]
    24be:	75da      	strb	r2, [r3, #23]
}
    24c0:	46c0      	nop			; (mov r8, r8)
    24c2:	46bd      	mov	sp, r7
    24c4:	b004      	add	sp, #16
    24c6:	bd80      	pop	{r7, pc}

000024c8 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	000a      	movs	r2, r1
    24d2:	1cfb      	adds	r3, r7, #3
    24d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	7edb      	ldrb	r3, [r3, #27]
    24da:	b25a      	sxtb	r2, r3
    24dc:	1cfb      	adds	r3, r7, #3
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	2101      	movs	r1, #1
    24e2:	4099      	lsls	r1, r3
    24e4:	000b      	movs	r3, r1
    24e6:	b25b      	sxtb	r3, r3
    24e8:	4313      	orrs	r3, r2
    24ea:	b25b      	sxtb	r3, r3
    24ec:	b2da      	uxtb	r2, r3
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    24f2:	1cfb      	adds	r3, r7, #3
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b01      	cmp	r3, #1
    24f8:	d104      	bne.n	2504 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	2104      	movs	r1, #4
    24fe:	0018      	movs	r0, r3
    2500:	4b07      	ldr	r3, [pc, #28]	; (2520 <adc_enable_callback+0x58>)
    2502:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    2504:	1cfb      	adds	r3, r7, #3
    2506:	781b      	ldrb	r3, [r3, #0]
    2508:	2b02      	cmp	r3, #2
    250a:	d104      	bne.n	2516 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	2102      	movs	r1, #2
    2510:	0018      	movs	r0, r3
    2512:	4b03      	ldr	r3, [pc, #12]	; (2520 <adc_enable_callback+0x58>)
    2514:	4798      	blx	r3
	}
}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	46bd      	mov	sp, r7
    251a:	b002      	add	sp, #8
    251c:	bd80      	pop	{r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	000024a5 	.word	0x000024a5

00002524 <adc_cb>:
 static volatile uint16_t flow_meas_raw;

 static volatile bool setup = false;

 static void adc_cb(struct adc_module *const module)
 {
    2524:	b580      	push	{r7, lr}
    2526:	b082      	sub	sp, #8
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	2100      	movs	r1, #0
    2530:	0018      	movs	r0, r3
    2532:	4b13      	ldr	r3, [pc, #76]	; (2580 <adc_cb+0x5c>)
    2534:	4798      	blx	r3
    2536:	1e03      	subs	r3, r0, #0
    2538:	d11d      	bne.n	2576 <adc_cb+0x52>
	{
		// Motor first
		memcpy(&motor_temp_meas_raw, &adc_buffer[0], 2);
    253a:	4b12      	ldr	r3, [pc, #72]	; (2584 <adc_cb+0x60>)
    253c:	881b      	ldrh	r3, [r3, #0]
    253e:	b29a      	uxth	r2, r3
    2540:	4b11      	ldr	r3, [pc, #68]	; (2588 <adc_cb+0x64>)
    2542:	801a      	strh	r2, [r3, #0]
		// Control potentiometer
		memcpy(&potentiometer_meas_raw, &adc_buffer[2], 2);
    2544:	4b0f      	ldr	r3, [pc, #60]	; (2584 <adc_cb+0x60>)
    2546:	885b      	ldrh	r3, [r3, #2]
    2548:	b29a      	uxth	r2, r3
    254a:	4b10      	ldr	r3, [pc, #64]	; (258c <adc_cb+0x68>)
    254c:	801a      	strh	r2, [r3, #0]
		// Three pressure sensors in a raw
		// TODO be sure indexing is correct
		memcpy(&pressure_raw_int[0], &adc_buffer[4], 2);
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <adc_cb+0x60>)
    2550:	889b      	ldrh	r3, [r3, #4]
    2552:	b29a      	uxth	r2, r3
    2554:	4b0e      	ldr	r3, [pc, #56]	; (2590 <adc_cb+0x6c>)
    2556:	801a      	strh	r2, [r3, #0]
		memcpy(&pressure_raw_int[1], &adc_buffer[6], 2);
    2558:	4b0a      	ldr	r3, [pc, #40]	; (2584 <adc_cb+0x60>)
    255a:	88db      	ldrh	r3, [r3, #6]
    255c:	b29a      	uxth	r2, r3
    255e:	4b0c      	ldr	r3, [pc, #48]	; (2590 <adc_cb+0x6c>)
    2560:	805a      	strh	r2, [r3, #2]
		memcpy(&pressure_raw_int[2], &adc_buffer[8], 2);
    2562:	4b08      	ldr	r3, [pc, #32]	; (2584 <adc_cb+0x60>)
    2564:	891b      	ldrh	r3, [r3, #8]
    2566:	b29a      	uxth	r2, r3
    2568:	4b09      	ldr	r3, [pc, #36]	; (2590 <adc_cb+0x6c>)
    256a:	809a      	strh	r2, [r3, #4]
		// Flow sensor at ain[10]
		memcpy(&flow_meas_raw, &adc_buffer[16], 2);
    256c:	4b05      	ldr	r3, [pc, #20]	; (2584 <adc_cb+0x60>)
    256e:	8a1b      	ldrh	r3, [r3, #16]
    2570:	b29a      	uxth	r2, r3
    2572:	4b08      	ldr	r3, [pc, #32]	; (2594 <adc_cb+0x70>)
    2574:	801a      	strh	r2, [r3, #0]
	}
 }
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	46bd      	mov	sp, r7
    257a:	b002      	add	sp, #8
    257c:	bd80      	pop	{r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	00000c11 	.word	0x00000c11
    2584:	20004eec 	.word	0x20004eec
    2588:	20004f08 	.word	0x20004f08
    258c:	20004f06 	.word	0x20004f06
    2590:	20004f00 	.word	0x20004f00
    2594:	20004f0a 	.word	0x20004f0a

00002598 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    2598:	b580      	push	{r7, lr}
    259a:	b08c      	sub	sp, #48	; 0x30
    259c:	af00      	add	r7, sp, #0
	struct adc_config config;

	adc_module_instance.reference = ADC_REFERENCE_AREFA; // 3.3V
    259e:	4b22      	ldr	r3, [pc, #136]	; (2628 <adc_interface_init+0x90>)
    25a0:	2203      	movs	r2, #3
    25a2:	711a      	strb	r2, [r3, #4]

	adc_get_config_defaults(&config);
    25a4:	003b      	movs	r3, r7
    25a6:	0018      	movs	r0, r3
    25a8:	4b20      	ldr	r3, [pc, #128]	; (262c <adc_interface_init+0x94>)
    25aa:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    25ac:	003b      	movs	r3, r7
    25ae:	2202      	movs	r2, #2
    25b0:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    25b2:	003b      	movs	r3, r7
    25b4:	22c0      	movs	r2, #192	; 0xc0
    25b6:	0152      	lsls	r2, r2, #5
    25b8:	81da      	strh	r2, [r3, #14]
	config.differential_mode = false;
    25ba:	003b      	movs	r3, r7
    25bc:	2200      	movs	r2, #0
    25be:	74da      	strb	r2, [r3, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock TODO is this fast enough?
    25c0:	003b      	movs	r3, r7
    25c2:	2201      	movs	r2, #1
    25c4:	701a      	strb	r2, [r3, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;
    25c6:	003b      	movs	r3, r7
    25c8:	22c0      	movs	r2, #192	; 0xc0
    25ca:	00d2      	lsls	r2, r2, #3
    25cc:	805a      	strh	r2, [r3, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    25ce:	003b      	movs	r3, r7
    25d0:	2200      	movs	r2, #0
    25d2:	609a      	str	r2, [r3, #8]
	config.resolution = ADC_RESOLUTION_12BIT;
    25d4:	003b      	movs	r3, r7
    25d6:	2200      	movs	r2, #0
    25d8:	711a      	strb	r2, [r3, #4]

	// Scan from 2 through 10
	config.pin_scan.offset_start_scan = 0;
    25da:	003b      	movs	r3, r7
    25dc:	222b      	movs	r2, #43	; 0x2b
    25de:	2100      	movs	r1, #0
    25e0:	5499      	strb	r1, [r3, r2]
	config.pin_scan.inputs_to_scan = 9;
    25e2:	003b      	movs	r3, r7
    25e4:	222c      	movs	r2, #44	; 0x2c
    25e6:	2109      	movs	r1, #9
    25e8:	5499      	strb	r1, [r3, r2]

	adc_init(&adc_module_instance, ADC, &config);
    25ea:	003a      	movs	r2, r7
    25ec:	4910      	ldr	r1, [pc, #64]	; (2630 <adc_interface_init+0x98>)
    25ee:	4b0e      	ldr	r3, [pc, #56]	; (2628 <adc_interface_init+0x90>)
    25f0:	0018      	movs	r0, r3
    25f2:	4b10      	ldr	r3, [pc, #64]	; (2634 <adc_interface_init+0x9c>)
    25f4:	4798      	blx	r3
	adc_enable(&adc_module_instance);
    25f6:	4b0c      	ldr	r3, [pc, #48]	; (2628 <adc_interface_init+0x90>)
    25f8:	0018      	movs	r0, r3
    25fa:	4b0f      	ldr	r3, [pc, #60]	; (2638 <adc_interface_init+0xa0>)
    25fc:	4798      	blx	r3

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    25fe:	490f      	ldr	r1, [pc, #60]	; (263c <adc_interface_init+0xa4>)
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <adc_interface_init+0x90>)
    2602:	2200      	movs	r2, #0
    2604:	0018      	movs	r0, r3
    2606:	4b0e      	ldr	r3, [pc, #56]	; (2640 <adc_interface_init+0xa8>)
    2608:	4798      	blx	r3
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);
    260a:	4b07      	ldr	r3, [pc, #28]	; (2628 <adc_interface_init+0x90>)
    260c:	2100      	movs	r1, #0
    260e:	0018      	movs	r0, r3
    2610:	4b0c      	ldr	r3, [pc, #48]	; (2644 <adc_interface_init+0xac>)
    2612:	4798      	blx	r3

	setup = true;
    2614:	4b0c      	ldr	r3, [pc, #48]	; (2648 <adc_interface_init+0xb0>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]

	// Start the conversion
	adc_request_update();
    261a:	4b0c      	ldr	r3, [pc, #48]	; (264c <adc_interface_init+0xb4>)
    261c:	4798      	blx	r3
 }
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	46bd      	mov	sp, r7
    2622:	b00c      	add	sp, #48	; 0x30
    2624:	bd80      	pop	{r7, pc}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	20004ecc 	.word	0x20004ecc
    262c:	00000219 	.word	0x00000219
    2630:	42004000 	.word	0x42004000
    2634:	00000869 	.word	0x00000869
    2638:	00002445 	.word	0x00002445
    263c:	00002525 	.word	0x00002525
    2640:	00000b69 	.word	0x00000b69
    2644:	000024c9 	.word	0x000024c9
    2648:	20004f0c 	.word	0x20004f0c
    264c:	00002651 	.word	0x00002651

00002650 <adc_request_update>:

 void adc_request_update(void)
 {
    2650:	b580      	push	{r7, lr}
    2652:	af00      	add	r7, sp, #0
	// Trigger new measurement
	if(setup)
    2654:	4b06      	ldr	r3, [pc, #24]	; (2670 <adc_request_update+0x20>)
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d005      	beq.n	266a <adc_request_update+0x1a>
	{
		adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    265e:	4905      	ldr	r1, [pc, #20]	; (2674 <adc_request_update+0x24>)
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <adc_request_update+0x28>)
    2662:	2212      	movs	r2, #18
    2664:	0018      	movs	r0, r3
    2666:	4b05      	ldr	r3, [pc, #20]	; (267c <adc_request_update+0x2c>)
    2668:	4798      	blx	r3
	}
 }
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	46bd      	mov	sp, r7
    266e:	bd80      	pop	{r7, pc}
    2670:	20004f0c 	.word	0x20004f0c
    2674:	20004eec 	.word	0x20004eec
    2678:	20004ecc 	.word	0x20004ecc
    267c:	00000ba9 	.word	0x00000ba9

00002680 <get_pressure_sensor_cmH2O>:
 *	\param channel The sensor channel
 *	
 *	\return The pressure from the channel in cm-H2O if channel valid or 0 otherwise
 */
 float get_pressure_sensor_cmH2O(uint8_t channel)
 {
    2680:	b590      	push	{r4, r7, lr}
    2682:	b087      	sub	sp, #28
    2684:	af00      	add	r7, sp, #0
    2686:	0002      	movs	r2, r0
    2688:	1dfb      	adds	r3, r7, #7
    268a:	701a      	strb	r2, [r3, #0]
	// Pressure sensors output 0.5-4.5V corresponding to 0-5psig
	// Scaled down to 3.3V range with 3.3K/(2.2K+3.3K) divider
	if(channel >= NUM_PRESSURE_SENSOR_CHANNELS)
    268c:	1dfb      	adds	r3, r7, #7
    268e:	781b      	ldrb	r3, [r3, #0]
    2690:	2b02      	cmp	r3, #2
    2692:	d901      	bls.n	2698 <get_pressure_sensor_cmH2O+0x18>
	{
		return 0.0;
    2694:	2300      	movs	r3, #0
    2696:	e05e      	b.n	2756 <get_pressure_sensor_cmH2O+0xd6>
	}
	uint16_t raw_adc =  pressure_raw_int[channel];
    2698:	1dfb      	adds	r3, r7, #7
    269a:	7819      	ldrb	r1, [r3, #0]
    269c:	2316      	movs	r3, #22
    269e:	18fb      	adds	r3, r7, r3
    26a0:	4a2f      	ldr	r2, [pc, #188]	; (2760 <get_pressure_sensor_cmH2O+0xe0>)
    26a2:	0049      	lsls	r1, r1, #1
    26a4:	5a8a      	ldrh	r2, [r1, r2]
    26a6:	801a      	strh	r2, [r3, #0]

	float pressure_voltage_scaled_up = ((raw_adc / ADC_MAX) * 3.3) * (5.5/3.3);
    26a8:	2316      	movs	r3, #22
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	881a      	ldrh	r2, [r3, #0]
    26ae:	4b2d      	ldr	r3, [pc, #180]	; (2764 <get_pressure_sensor_cmH2O+0xe4>)
    26b0:	0010      	movs	r0, r2
    26b2:	4798      	blx	r3
    26b4:	4c2c      	ldr	r4, [pc, #176]	; (2768 <get_pressure_sensor_cmH2O+0xe8>)
    26b6:	2200      	movs	r2, #0
    26b8:	4b2c      	ldr	r3, [pc, #176]	; (276c <get_pressure_sensor_cmH2O+0xec>)
    26ba:	47a0      	blx	r4
    26bc:	0003      	movs	r3, r0
    26be:	000c      	movs	r4, r1
    26c0:	0018      	movs	r0, r3
    26c2:	0021      	movs	r1, r4
    26c4:	4c2a      	ldr	r4, [pc, #168]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    26c6:	4a2b      	ldr	r2, [pc, #172]	; (2774 <get_pressure_sensor_cmH2O+0xf4>)
    26c8:	4b2b      	ldr	r3, [pc, #172]	; (2778 <get_pressure_sensor_cmH2O+0xf8>)
    26ca:	47a0      	blx	r4
    26cc:	0003      	movs	r3, r0
    26ce:	000c      	movs	r4, r1
    26d0:	0018      	movs	r0, r3
    26d2:	0021      	movs	r1, r4
    26d4:	4c26      	ldr	r4, [pc, #152]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    26d6:	4a29      	ldr	r2, [pc, #164]	; (277c <get_pressure_sensor_cmH2O+0xfc>)
    26d8:	4b29      	ldr	r3, [pc, #164]	; (2780 <get_pressure_sensor_cmH2O+0x100>)
    26da:	47a0      	blx	r4
    26dc:	0003      	movs	r3, r0
    26de:	000c      	movs	r4, r1
    26e0:	0019      	movs	r1, r3
    26e2:	0022      	movs	r2, r4
    26e4:	4b27      	ldr	r3, [pc, #156]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    26e6:	0008      	movs	r0, r1
    26e8:	0011      	movs	r1, r2
    26ea:	4798      	blx	r3
    26ec:	1c03      	adds	r3, r0, #0
    26ee:	613b      	str	r3, [r7, #16]

	float pressure_psi = 5.0 * (pressure_voltage_scaled_up - 0.5) / 4.0;
    26f0:	4b25      	ldr	r3, [pc, #148]	; (2788 <get_pressure_sensor_cmH2O+0x108>)
    26f2:	6938      	ldr	r0, [r7, #16]
    26f4:	4798      	blx	r3
    26f6:	4c25      	ldr	r4, [pc, #148]	; (278c <get_pressure_sensor_cmH2O+0x10c>)
    26f8:	2200      	movs	r2, #0
    26fa:	4b25      	ldr	r3, [pc, #148]	; (2790 <get_pressure_sensor_cmH2O+0x110>)
    26fc:	47a0      	blx	r4
    26fe:	0003      	movs	r3, r0
    2700:	000c      	movs	r4, r1
    2702:	0018      	movs	r0, r3
    2704:	0021      	movs	r1, r4
    2706:	4c1a      	ldr	r4, [pc, #104]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    2708:	2200      	movs	r2, #0
    270a:	4b22      	ldr	r3, [pc, #136]	; (2794 <get_pressure_sensor_cmH2O+0x114>)
    270c:	47a0      	blx	r4
    270e:	0003      	movs	r3, r0
    2710:	000c      	movs	r4, r1
    2712:	0018      	movs	r0, r3
    2714:	0021      	movs	r1, r4
    2716:	4c14      	ldr	r4, [pc, #80]	; (2768 <get_pressure_sensor_cmH2O+0xe8>)
    2718:	2200      	movs	r2, #0
    271a:	4b1f      	ldr	r3, [pc, #124]	; (2798 <get_pressure_sensor_cmH2O+0x118>)
    271c:	47a0      	blx	r4
    271e:	0003      	movs	r3, r0
    2720:	000c      	movs	r4, r1
    2722:	0019      	movs	r1, r3
    2724:	0022      	movs	r2, r4
    2726:	4b17      	ldr	r3, [pc, #92]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    2728:	0008      	movs	r0, r1
    272a:	0011      	movs	r1, r2
    272c:	4798      	blx	r3
    272e:	1c03      	adds	r3, r0, #0
    2730:	60fb      	str	r3, [r7, #12]

	float pressure_cmH2O = (70.307) * pressure_psi;
    2732:	4b15      	ldr	r3, [pc, #84]	; (2788 <get_pressure_sensor_cmH2O+0x108>)
    2734:	68f8      	ldr	r0, [r7, #12]
    2736:	4798      	blx	r3
    2738:	4c0d      	ldr	r4, [pc, #52]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    273a:	4a18      	ldr	r2, [pc, #96]	; (279c <get_pressure_sensor_cmH2O+0x11c>)
    273c:	4b18      	ldr	r3, [pc, #96]	; (27a0 <get_pressure_sensor_cmH2O+0x120>)
    273e:	47a0      	blx	r4
    2740:	0003      	movs	r3, r0
    2742:	000c      	movs	r4, r1
    2744:	0019      	movs	r1, r3
    2746:	0022      	movs	r2, r4
    2748:	4b0e      	ldr	r3, [pc, #56]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    274a:	0008      	movs	r0, r1
    274c:	0011      	movs	r1, r2
    274e:	4798      	blx	r3
    2750:	1c03      	adds	r3, r0, #0
    2752:	60bb      	str	r3, [r7, #8]
	return pressure_cmH2O;
    2754:	68bb      	ldr	r3, [r7, #8]
 }
    2756:	1c18      	adds	r0, r3, #0
    2758:	46bd      	mov	sp, r7
    275a:	b007      	add	sp, #28
    275c:	bd90      	pop	{r4, r7, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	20004f00 	.word	0x20004f00
    2764:	0000b059 	.word	0x0000b059
    2768:	00009c5d 	.word	0x00009c5d
    276c:	40affe00 	.word	0x40affe00
    2770:	0000a4c5 	.word	0x0000a4c5
    2774:	66666666 	.word	0x66666666
    2778:	400a6666 	.word	0x400a6666
    277c:	aaaaaaab 	.word	0xaaaaaaab
    2780:	3ffaaaaa 	.word	0x3ffaaaaa
    2784:	0000b1f1 	.word	0x0000b1f1
    2788:	0000b14d 	.word	0x0000b14d
    278c:	0000a9c5 	.word	0x0000a9c5
    2790:	3fe00000 	.word	0x3fe00000
    2794:	40140000 	.word	0x40140000
    2798:	40100000 	.word	0x40100000
    279c:	e353f7cf 	.word	0xe353f7cf
    27a0:	405193a5 	.word	0x405193a5

000027a4 <get_pressure_sensor_cmH2O_voted>:
 *	\brief Gets pressure sensor data best estimate and checks for errors
 *
 *	\return The voted pressure in cm-H2O 
 */
 float get_pressure_sensor_cmH2O_voted(void)
 {
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	b089      	sub	sp, #36	; 0x24
    27a8:	af00      	add	r7, sp, #0
	int32_t i;
	// Get pressure
	float pressure_values[3];
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27aa:	2300      	movs	r3, #0
    27ac:	61fb      	str	r3, [r7, #28]
    27ae:	e00c      	b.n	27ca <get_pressure_sensor_cmH2O_voted+0x26>
	{
		pressure_values[i] = get_pressure_sensor_cmH2O(i);
    27b0:	69fb      	ldr	r3, [r7, #28]
    27b2:	b2db      	uxtb	r3, r3
    27b4:	0018      	movs	r0, r3
    27b6:	4b6a      	ldr	r3, [pc, #424]	; (2960 <get_pressure_sensor_cmH2O_voted+0x1bc>)
    27b8:	4798      	blx	r3
    27ba:	1c01      	adds	r1, r0, #0
    27bc:	003b      	movs	r3, r7
    27be:	69fa      	ldr	r2, [r7, #28]
    27c0:	0092      	lsls	r2, r2, #2
    27c2:	50d1      	str	r1, [r2, r3]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27c4:	69fb      	ldr	r3, [r7, #28]
    27c6:	3301      	adds	r3, #1
    27c8:	61fb      	str	r3, [r7, #28]
    27ca:	69fb      	ldr	r3, [r7, #28]
    27cc:	2b02      	cmp	r3, #2
    27ce:	ddef      	ble.n	27b0 <get_pressure_sensor_cmH2O_voted+0xc>
	}
	// Average, eliminate the furthest outlier, and average again to get actual, then check for sensor failure
	float avg_pressure = 0.0;
    27d0:	2300      	movs	r3, #0
    27d2:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27d4:	2300      	movs	r3, #0
    27d6:	61fb      	str	r3, [r7, #28]
    27d8:	e024      	b.n	2824 <get_pressure_sensor_cmH2O_voted+0x80>
	{
		avg_pressure += 0.33333 *pressure_values[i];
    27da:	4b62      	ldr	r3, [pc, #392]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    27dc:	69b8      	ldr	r0, [r7, #24]
    27de:	4798      	blx	r3
    27e0:	0005      	movs	r5, r0
    27e2:	000e      	movs	r6, r1
    27e4:	003b      	movs	r3, r7
    27e6:	69fa      	ldr	r2, [r7, #28]
    27e8:	0092      	lsls	r2, r2, #2
    27ea:	58d2      	ldr	r2, [r2, r3]
    27ec:	4b5d      	ldr	r3, [pc, #372]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    27ee:	1c10      	adds	r0, r2, #0
    27f0:	4798      	blx	r3
    27f2:	4c5d      	ldr	r4, [pc, #372]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    27f4:	4a5d      	ldr	r2, [pc, #372]	; (296c <get_pressure_sensor_cmH2O_voted+0x1c8>)
    27f6:	4b5e      	ldr	r3, [pc, #376]	; (2970 <get_pressure_sensor_cmH2O_voted+0x1cc>)
    27f8:	47a0      	blx	r4
    27fa:	0003      	movs	r3, r0
    27fc:	000c      	movs	r4, r1
    27fe:	001a      	movs	r2, r3
    2800:	0023      	movs	r3, r4
    2802:	4c5c      	ldr	r4, [pc, #368]	; (2974 <get_pressure_sensor_cmH2O_voted+0x1d0>)
    2804:	0028      	movs	r0, r5
    2806:	0031      	movs	r1, r6
    2808:	47a0      	blx	r4
    280a:	0003      	movs	r3, r0
    280c:	000c      	movs	r4, r1
    280e:	0019      	movs	r1, r3
    2810:	0022      	movs	r2, r4
    2812:	4b59      	ldr	r3, [pc, #356]	; (2978 <get_pressure_sensor_cmH2O_voted+0x1d4>)
    2814:	0008      	movs	r0, r1
    2816:	0011      	movs	r1, r2
    2818:	4798      	blx	r3
    281a:	1c03      	adds	r3, r0, #0
    281c:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    281e:	69fb      	ldr	r3, [r7, #28]
    2820:	3301      	adds	r3, #1
    2822:	61fb      	str	r3, [r7, #28]
    2824:	69fb      	ldr	r3, [r7, #28]
    2826:	2b02      	cmp	r3, #2
    2828:	ddd7      	ble.n	27da <get_pressure_sensor_cmH2O_voted+0x36>
	}
	// Eliminate the furthest outlier of average
	uint8_t biggest_error_index = 0;
    282a:	2317      	movs	r3, #23
    282c:	18fb      	adds	r3, r7, r3
    282e:	2200      	movs	r2, #0
    2830:	701a      	strb	r2, [r3, #0]
	float biggest_error = 0.0;
    2832:	2300      	movs	r3, #0
    2834:	613b      	str	r3, [r7, #16]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2836:	2300      	movs	r3, #0
    2838:	61fb      	str	r3, [r7, #28]
    283a:	e024      	b.n	2886 <get_pressure_sensor_cmH2O_voted+0xe2>
	{
		float this_error = abs(avg_pressure - pressure_values[i]);
    283c:	003b      	movs	r3, r7
    283e:	69fa      	ldr	r2, [r7, #28]
    2840:	0092      	lsls	r2, r2, #2
    2842:	58d2      	ldr	r2, [r2, r3]
    2844:	4b4d      	ldr	r3, [pc, #308]	; (297c <get_pressure_sensor_cmH2O_voted+0x1d8>)
    2846:	1c11      	adds	r1, r2, #0
    2848:	69b8      	ldr	r0, [r7, #24]
    284a:	4798      	blx	r3
    284c:	1c03      	adds	r3, r0, #0
    284e:	1c1a      	adds	r2, r3, #0
    2850:	4b4b      	ldr	r3, [pc, #300]	; (2980 <get_pressure_sensor_cmH2O_voted+0x1dc>)
    2852:	1c10      	adds	r0, r2, #0
    2854:	4798      	blx	r3
    2856:	0003      	movs	r3, r0
    2858:	17d9      	asrs	r1, r3, #31
    285a:	185a      	adds	r2, r3, r1
    285c:	404a      	eors	r2, r1
    285e:	4b49      	ldr	r3, [pc, #292]	; (2984 <get_pressure_sensor_cmH2O_voted+0x1e0>)
    2860:	0010      	movs	r0, r2
    2862:	4798      	blx	r3
    2864:	1c03      	adds	r3, r0, #0
    2866:	60fb      	str	r3, [r7, #12]
		if(this_error > biggest_error)
    2868:	4b47      	ldr	r3, [pc, #284]	; (2988 <get_pressure_sensor_cmH2O_voted+0x1e4>)
    286a:	6939      	ldr	r1, [r7, #16]
    286c:	68f8      	ldr	r0, [r7, #12]
    286e:	4798      	blx	r3
    2870:	1e03      	subs	r3, r0, #0
    2872:	d005      	beq.n	2880 <get_pressure_sensor_cmH2O_voted+0xdc>
		{
			biggest_error = this_error;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	613b      	str	r3, [r7, #16]
			biggest_error_index = i;
    2878:	2317      	movs	r3, #23
    287a:	18fb      	adds	r3, r7, r3
    287c:	69fa      	ldr	r2, [r7, #28]
    287e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2880:	69fb      	ldr	r3, [r7, #28]
    2882:	3301      	adds	r3, #1
    2884:	61fb      	str	r3, [r7, #28]
    2886:	69fb      	ldr	r3, [r7, #28]
    2888:	2b02      	cmp	r3, #2
    288a:	ddd7      	ble.n	283c <get_pressure_sensor_cmH2O_voted+0x98>
		}
	}
	// Average again with closest two values
	avg_pressure = 0.0;
    288c:	2300      	movs	r3, #0
    288e:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2890:	2300      	movs	r3, #0
    2892:	61fb      	str	r3, [r7, #28]
    2894:	e02a      	b.n	28ec <get_pressure_sensor_cmH2O_voted+0x148>
	{
		if(i != biggest_error_index)
    2896:	2317      	movs	r3, #23
    2898:	18fb      	adds	r3, r7, r3
    289a:	781a      	ldrb	r2, [r3, #0]
    289c:	69fb      	ldr	r3, [r7, #28]
    289e:	429a      	cmp	r2, r3
    28a0:	d021      	beq.n	28e6 <get_pressure_sensor_cmH2O_voted+0x142>
		{
			avg_pressure += 0.5 * pressure_values[i];
    28a2:	4b30      	ldr	r3, [pc, #192]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    28a4:	69b8      	ldr	r0, [r7, #24]
    28a6:	4798      	blx	r3
    28a8:	0005      	movs	r5, r0
    28aa:	000e      	movs	r6, r1
    28ac:	003b      	movs	r3, r7
    28ae:	69fa      	ldr	r2, [r7, #28]
    28b0:	0092      	lsls	r2, r2, #2
    28b2:	58d2      	ldr	r2, [r2, r3]
    28b4:	4b2b      	ldr	r3, [pc, #172]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    28b6:	1c10      	adds	r0, r2, #0
    28b8:	4798      	blx	r3
    28ba:	4c2b      	ldr	r4, [pc, #172]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    28bc:	2200      	movs	r2, #0
    28be:	4b33      	ldr	r3, [pc, #204]	; (298c <get_pressure_sensor_cmH2O_voted+0x1e8>)
    28c0:	47a0      	blx	r4
    28c2:	0003      	movs	r3, r0
    28c4:	000c      	movs	r4, r1
    28c6:	001a      	movs	r2, r3
    28c8:	0023      	movs	r3, r4
    28ca:	4c2a      	ldr	r4, [pc, #168]	; (2974 <get_pressure_sensor_cmH2O_voted+0x1d0>)
    28cc:	0028      	movs	r0, r5
    28ce:	0031      	movs	r1, r6
    28d0:	47a0      	blx	r4
    28d2:	0003      	movs	r3, r0
    28d4:	000c      	movs	r4, r1
    28d6:	0019      	movs	r1, r3
    28d8:	0022      	movs	r2, r4
    28da:	4b27      	ldr	r3, [pc, #156]	; (2978 <get_pressure_sensor_cmH2O_voted+0x1d4>)
    28dc:	0008      	movs	r0, r1
    28de:	0011      	movs	r1, r2
    28e0:	4798      	blx	r3
    28e2:	1c03      	adds	r3, r0, #0
    28e4:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    28e6:	69fb      	ldr	r3, [r7, #28]
    28e8:	3301      	adds	r3, #1
    28ea:	61fb      	str	r3, [r7, #28]
    28ec:	69fb      	ldr	r3, [r7, #28]
    28ee:	2b02      	cmp	r3, #2
    28f0:	ddd1      	ble.n	2896 <get_pressure_sensor_cmH2O_voted+0xf2>
		}
	}
	// Check for sensor failure
	// TODO what is threshold?
	if(abs(pressure_values[biggest_error_index] - avg_pressure) > 0.1*avg_pressure)
    28f2:	2317      	movs	r3, #23
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	781a      	ldrb	r2, [r3, #0]
    28f8:	003b      	movs	r3, r7
    28fa:	0092      	lsls	r2, r2, #2
    28fc:	58d2      	ldr	r2, [r2, r3]
    28fe:	4b1f      	ldr	r3, [pc, #124]	; (297c <get_pressure_sensor_cmH2O_voted+0x1d8>)
    2900:	69b9      	ldr	r1, [r7, #24]
    2902:	1c10      	adds	r0, r2, #0
    2904:	4798      	blx	r3
    2906:	1c03      	adds	r3, r0, #0
    2908:	1c1a      	adds	r2, r3, #0
    290a:	4b1d      	ldr	r3, [pc, #116]	; (2980 <get_pressure_sensor_cmH2O_voted+0x1dc>)
    290c:	1c10      	adds	r0, r2, #0
    290e:	4798      	blx	r3
    2910:	0003      	movs	r3, r0
    2912:	17d9      	asrs	r1, r3, #31
    2914:	185a      	adds	r2, r3, r1
    2916:	404a      	eors	r2, r1
    2918:	4b1d      	ldr	r3, [pc, #116]	; (2990 <get_pressure_sensor_cmH2O_voted+0x1ec>)
    291a:	0010      	movs	r0, r2
    291c:	4798      	blx	r3
    291e:	0005      	movs	r5, r0
    2920:	000e      	movs	r6, r1
    2922:	4b10      	ldr	r3, [pc, #64]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    2924:	69b8      	ldr	r0, [r7, #24]
    2926:	4798      	blx	r3
    2928:	4c0f      	ldr	r4, [pc, #60]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    292a:	4a1a      	ldr	r2, [pc, #104]	; (2994 <get_pressure_sensor_cmH2O_voted+0x1f0>)
    292c:	4b1a      	ldr	r3, [pc, #104]	; (2998 <get_pressure_sensor_cmH2O_voted+0x1f4>)
    292e:	47a0      	blx	r4
    2930:	0003      	movs	r3, r0
    2932:	000c      	movs	r4, r1
    2934:	001a      	movs	r2, r3
    2936:	0023      	movs	r3, r4
    2938:	4c18      	ldr	r4, [pc, #96]	; (299c <get_pressure_sensor_cmH2O_voted+0x1f8>)
    293a:	0028      	movs	r0, r5
    293c:	0031      	movs	r1, r6
    293e:	47a0      	blx	r4
    2940:	1e03      	subs	r3, r0, #0
    2942:	d004      	beq.n	294e <get_pressure_sensor_cmH2O_voted+0x1aa>
	{
		set_alarm(ALARM_PRESSURE_SENSOR, true);
    2944:	2101      	movs	r1, #1
    2946:	2002      	movs	r0, #2
    2948:	4b15      	ldr	r3, [pc, #84]	; (29a0 <get_pressure_sensor_cmH2O_voted+0x1fc>)
    294a:	4798      	blx	r3
    294c:	e003      	b.n	2956 <get_pressure_sensor_cmH2O_voted+0x1b2>
	}
	else
	{
		set_alarm(ALARM_PRESSURE_SENSOR, false);
    294e:	2100      	movs	r1, #0
    2950:	2002      	movs	r0, #2
    2952:	4b13      	ldr	r3, [pc, #76]	; (29a0 <get_pressure_sensor_cmH2O_voted+0x1fc>)
    2954:	4798      	blx	r3
	}
	return avg_pressure;
    2956:	69bb      	ldr	r3, [r7, #24]
 }
    2958:	1c18      	adds	r0, r3, #0
    295a:	46bd      	mov	sp, r7
    295c:	b009      	add	sp, #36	; 0x24
    295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2960:	00002681 	.word	0x00002681
    2964:	0000b14d 	.word	0x0000b14d
    2968:	0000a4c5 	.word	0x0000a4c5
    296c:	5a31a4be 	.word	0x5a31a4be
    2970:	3fd55547 	.word	0x3fd55547
    2974:	0000963d 	.word	0x0000963d
    2978:	0000b1f1 	.word	0x0000b1f1
    297c:	00009225 	.word	0x00009225
    2980:	0000955d 	.word	0x0000955d
    2984:	0000959d 	.word	0x0000959d
    2988:	00008889 	.word	0x00008889
    298c:	3fe00000 	.word	0x3fe00000
    2990:	0000b059 	.word	0x0000b059
    2994:	9999999a 	.word	0x9999999a
    2998:	3fb99999 	.word	0x3fb99999
    299c:	00008815 	.word	0x00008815
    29a0:	000029f9 	.word	0x000029f9

000029a4 <get_input_potentiometer_portion>:
 *	\brief Gets portion of full scale from potentiometer input
 *
 *	\return The portion from 0.0 to 1.0
 */
 float get_input_potentiometer_portion(void)
 {
    29a4:	b5b0      	push	{r4, r5, r7, lr}
    29a6:	af00      	add	r7, sp, #0
	return (potentiometer_meas_raw / ADC_MAX);
    29a8:	4b0b      	ldr	r3, [pc, #44]	; (29d8 <get_input_potentiometer_portion+0x34>)
    29aa:	881b      	ldrh	r3, [r3, #0]
    29ac:	b29b      	uxth	r3, r3
    29ae:	001a      	movs	r2, r3
    29b0:	4b0a      	ldr	r3, [pc, #40]	; (29dc <get_input_potentiometer_portion+0x38>)
    29b2:	0010      	movs	r0, r2
    29b4:	4798      	blx	r3
    29b6:	4c0a      	ldr	r4, [pc, #40]	; (29e0 <get_input_potentiometer_portion+0x3c>)
    29b8:	2200      	movs	r2, #0
    29ba:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <get_input_potentiometer_portion+0x40>)
    29bc:	47a0      	blx	r4
    29be:	0003      	movs	r3, r0
    29c0:	000c      	movs	r4, r1
    29c2:	0019      	movs	r1, r3
    29c4:	0022      	movs	r2, r4
    29c6:	4b08      	ldr	r3, [pc, #32]	; (29e8 <get_input_potentiometer_portion+0x44>)
    29c8:	0008      	movs	r0, r1
    29ca:	0011      	movs	r1, r2
    29cc:	4798      	blx	r3
    29ce:	1c03      	adds	r3, r0, #0
 }
    29d0:	1c18      	adds	r0, r3, #0
    29d2:	46bd      	mov	sp, r7
    29d4:	bdb0      	pop	{r4, r5, r7, pc}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	20004f06 	.word	0x20004f06
    29dc:	0000b059 	.word	0x0000b059
    29e0:	00009c5d 	.word	0x00009c5d
    29e4:	40affe00 	.word	0x40affe00
    29e8:	0000b1f1 	.word	0x0000b1f1

000029ec <get_motor_temp_celsius>:
 *	\brief Gets motor temperature
 *
 *	\return The temperature in Celsius
 */
 float get_motor_temp_celsius(void)
 {
    29ec:	b580      	push	{r7, lr}
    29ee:	af00      	add	r7, sp, #0
	// TODO what is scale?
 }
    29f0:	46c0      	nop			; (mov r8, r8)
    29f2:	1c18      	adds	r0, r3, #0
    29f4:	46bd      	mov	sp, r7
    29f6:	bd80      	pop	{r7, pc}

000029f8 <set_alarm>:
*
*	\param alarm_type The alarm to set
*	\param set If true, alarm is set; if false, alarm is cleared
*/
void set_alarm(ALARM_TYPE_INDEX alarm_type, bool set)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b082      	sub	sp, #8
    29fc:	af00      	add	r7, sp, #0
    29fe:	0002      	movs	r2, r0
    2a00:	1dfb      	adds	r3, r7, #7
    2a02:	701a      	strb	r2, [r3, #0]
    2a04:	1dbb      	adds	r3, r7, #6
    2a06:	1c0a      	adds	r2, r1, #0
    2a08:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    2a0a:	1dfb      	adds	r3, r7, #7
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	2b1f      	cmp	r3, #31
    2a10:	d81c      	bhi.n	2a4c <set_alarm+0x54>
	{
		return;
	}

	if(set)
    2a12:	1dbb      	adds	r3, r7, #6
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d00b      	beq.n	2a32 <set_alarm+0x3a>
	{
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
    2a1a:	1dfb      	adds	r3, r7, #7
    2a1c:	781b      	ldrb	r3, [r3, #0]
    2a1e:	2201      	movs	r2, #1
    2a20:	409a      	lsls	r2, r3
    2a22:	0013      	movs	r3, r2
    2a24:	001a      	movs	r2, r3
    2a26:	4b0b      	ldr	r3, [pc, #44]	; (2a54 <set_alarm+0x5c>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	431a      	orrs	r2, r3
    2a2c:	4b09      	ldr	r3, [pc, #36]	; (2a54 <set_alarm+0x5c>)
    2a2e:	601a      	str	r2, [r3, #0]
    2a30:	e00d      	b.n	2a4e <set_alarm+0x56>
	}
	else
	{
		alarm_bitfield &= ~(1 << (uint32_t) alarm_type);
    2a32:	1dfb      	adds	r3, r7, #7
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2201      	movs	r2, #1
    2a38:	409a      	lsls	r2, r3
    2a3a:	0013      	movs	r3, r2
    2a3c:	43db      	mvns	r3, r3
    2a3e:	001a      	movs	r2, r3
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <set_alarm+0x5c>)
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	401a      	ands	r2, r3
    2a46:	4b03      	ldr	r3, [pc, #12]	; (2a54 <set_alarm+0x5c>)
    2a48:	601a      	str	r2, [r3, #0]
    2a4a:	e000      	b.n	2a4e <set_alarm+0x56>
		return;
    2a4c:	46c0      	nop			; (mov r8, r8)
	}
	
}
    2a4e:	46bd      	mov	sp, r7
    2a50:	b002      	add	sp, #8
    2a52:	bd80      	pop	{r7, pc}
    2a54:	20004f10 	.word	0x20004f10

00002a58 <check_alarm>:
*	\param alarm_type The alarm to check
*
*	\return True if the alarm is set, false if not
*/
bool check_alarm(ALARM_TYPE_INDEX alarm_type)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b082      	sub	sp, #8
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	0002      	movs	r2, r0
    2a60:	1dfb      	adds	r3, r7, #7
    2a62:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    2a64:	1dfb      	adds	r3, r7, #7
    2a66:	781b      	ldrb	r3, [r3, #0]
    2a68:	2b1f      	cmp	r3, #31
    2a6a:	d901      	bls.n	2a70 <check_alarm+0x18>
	{
		return false;
    2a6c:	2300      	movs	r3, #0
    2a6e:	e00b      	b.n	2a88 <check_alarm+0x30>
	}

	return (alarm_bitfield & (1 << (uint32_t) alarm_type));
    2a70:	1dfb      	adds	r3, r7, #7
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	2201      	movs	r2, #1
    2a76:	409a      	lsls	r2, r3
    2a78:	0013      	movs	r3, r2
    2a7a:	001a      	movs	r2, r3
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <check_alarm+0x38>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	4013      	ands	r3, r2
    2a82:	1e5a      	subs	r2, r3, #1
    2a84:	4193      	sbcs	r3, r2
    2a86:	b2db      	uxtb	r3, r3
}
    2a88:	0018      	movs	r0, r3
    2a8a:	46bd      	mov	sp, r7
    2a8c:	b002      	add	sp, #8
    2a8e:	bd80      	pop	{r7, pc}
    2a90:	20004f10 	.word	0x20004f10

00002a94 <any_alarms_set>:
*	\brief Checks if any alarm is set
*
*	\return True if any alarm is set
*/
bool any_alarms_set(void)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	af00      	add	r7, sp, #0
	return (alarm_bitfield != 0);
    2a98:	4b03      	ldr	r3, [pc, #12]	; (2aa8 <any_alarms_set+0x14>)
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	1e5a      	subs	r2, r3, #1
    2a9e:	4193      	sbcs	r3, r2
    2aa0:	b2db      	uxtb	r3, r3
    2aa2:	0018      	movs	r0, r3
    2aa4:	46bd      	mov	sp, r7
    2aa6:	bd80      	pop	{r7, pc}
    2aa8:	20004f10 	.word	0x20004f10

00002aac <calculate_new_setpoint>:
 } CONTROL_PROFILE_STAGE;

 static CONTROL_PROFILE_STAGE stage;
 
 static uint32_t calculate_new_setpoint(uint32_t stage_start_time_ms, uint32_t current_time_ms, lcv_state_t * state, lcv_control_t * control)
 {
    2aac:	b5b0      	push	{r4, r5, r7, lr}
    2aae:	b088      	sub	sp, #32
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	60f8      	str	r0, [r7, #12]
    2ab4:	60b9      	str	r1, [r7, #8]
    2ab6:	607a      	str	r2, [r7, #4]
    2ab8:	603b      	str	r3, [r7, #0]
	int32_t time_into_profile = current_time_ms - stage_start_time_ms;
    2aba:	68ba      	ldr	r2, [r7, #8]
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	1ad3      	subs	r3, r2, r3
    2ac0:	61bb      	str	r3, [r7, #24]
	uint32_t new_state_start = stage_start_time_ms;
    2ac2:	68fb      	ldr	r3, [r7, #12]
    2ac4:	61fb      	str	r3, [r7, #28]
	// In PEEP to PIP stage?
	if(time_into_profile < control->peep_to_pip_rampup_ms)
    2ac6:	683b      	ldr	r3, [r7, #0]
    2ac8:	681a      	ldr	r2, [r3, #0]
    2aca:	69bb      	ldr	r3, [r7, #24]
    2acc:	429a      	cmp	r2, r3
    2ace:	dd2c      	ble.n	2b2a <calculate_new_setpoint+0x7e>
	{
		// Linear ramp up
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	689a      	ldr	r2, [r3, #8]
    2ad4:	683b      	ldr	r3, [r7, #0]
    2ad6:	611a      	str	r2, [r3, #16]
		float section_factor = ((float) (time_into_profile) / (float) control->peep_to_pip_rampup_ms);
    2ad8:	4b54      	ldr	r3, [pc, #336]	; (2c2c <calculate_new_setpoint+0x180>)
    2ada:	69b8      	ldr	r0, [r7, #24]
    2adc:	4798      	blx	r3
    2ade:	1c04      	adds	r4, r0, #0
    2ae0:	683b      	ldr	r3, [r7, #0]
    2ae2:	681a      	ldr	r2, [r3, #0]
    2ae4:	4b51      	ldr	r3, [pc, #324]	; (2c2c <calculate_new_setpoint+0x180>)
    2ae6:	0010      	movs	r0, r2
    2ae8:	4798      	blx	r3
    2aea:	1c02      	adds	r2, r0, #0
    2aec:	4b50      	ldr	r3, [pc, #320]	; (2c30 <calculate_new_setpoint+0x184>)
    2aee:	1c11      	adds	r1, r2, #0
    2af0:	1c20      	adds	r0, r4, #0
    2af2:	4798      	blx	r3
    2af4:	1c03      	adds	r3, r0, #0
    2af6:	617b      	str	r3, [r7, #20]
		control->pressure_set_point_cm_h20 += (int32_t)  (section_factor * (state->setting_state.pip_cm_h20 - state->setting_state.peep_cm_h20));
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	691c      	ldr	r4, [r3, #16]
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	68da      	ldr	r2, [r3, #12]
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	689b      	ldr	r3, [r3, #8]
    2b04:	1ad2      	subs	r2, r2, r3
    2b06:	4b49      	ldr	r3, [pc, #292]	; (2c2c <calculate_new_setpoint+0x180>)
    2b08:	0010      	movs	r0, r2
    2b0a:	4798      	blx	r3
    2b0c:	1c02      	adds	r2, r0, #0
    2b0e:	4b49      	ldr	r3, [pc, #292]	; (2c34 <calculate_new_setpoint+0x188>)
    2b10:	6979      	ldr	r1, [r7, #20]
    2b12:	1c10      	adds	r0, r2, #0
    2b14:	4798      	blx	r3
    2b16:	1c03      	adds	r3, r0, #0
    2b18:	1c1a      	adds	r2, r3, #0
    2b1a:	4b47      	ldr	r3, [pc, #284]	; (2c38 <calculate_new_setpoint+0x18c>)
    2b1c:	1c10      	adds	r0, r2, #0
    2b1e:	4798      	blx	r3
    2b20:	0003      	movs	r3, r0
    2b22:	18e2      	adds	r2, r4, r3
    2b24:	683b      	ldr	r3, [r7, #0]
    2b26:	611a      	str	r2, [r3, #16]
    2b28:	e07b      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms))
    2b2a:	683b      	ldr	r3, [r7, #0]
    2b2c:	681a      	ldr	r2, [r3, #0]
    2b2e:	683b      	ldr	r3, [r7, #0]
    2b30:	685b      	ldr	r3, [r3, #4]
    2b32:	18d2      	adds	r2, r2, r3
    2b34:	69bb      	ldr	r3, [r7, #24]
    2b36:	429a      	cmp	r2, r3
    2b38:	dd04      	ble.n	2b44 <calculate_new_setpoint+0x98>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	68da      	ldr	r2, [r3, #12]
    2b3e:	683b      	ldr	r3, [r7, #0]
    2b40:	611a      	str	r2, [r3, #16]
    2b42:	e06e      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms))
    2b44:	683b      	ldr	r3, [r7, #0]
    2b46:	681a      	ldr	r2, [r3, #0]
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	685b      	ldr	r3, [r3, #4]
    2b4c:	18d2      	adds	r2, r2, r3
    2b4e:	683b      	ldr	r3, [r7, #0]
    2b50:	689b      	ldr	r3, [r3, #8]
    2b52:	18d2      	adds	r2, r2, r3
    2b54:	69bb      	ldr	r3, [r7, #24]
    2b56:	429a      	cmp	r2, r3
    2b58:	dd3d      	ble.n	2bd6 <calculate_new_setpoint+0x12a>
	{
		// Linear ramp down
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	68da      	ldr	r2, [r3, #12]
    2b5e:	683b      	ldr	r3, [r7, #0]
    2b60:	611a      	str	r2, [r3, #16]
		
		float section_dt = time_into_profile - (control->peep_to_pip_rampup_ms + control->pip_hold_ms);
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	681a      	ldr	r2, [r3, #0]
    2b66:	683b      	ldr	r3, [r7, #0]
    2b68:	685b      	ldr	r3, [r3, #4]
    2b6a:	18d3      	adds	r3, r2, r3
    2b6c:	69ba      	ldr	r2, [r7, #24]
    2b6e:	1ad2      	subs	r2, r2, r3
    2b70:	4b2e      	ldr	r3, [pc, #184]	; (2c2c <calculate_new_setpoint+0x180>)
    2b72:	0010      	movs	r0, r2
    2b74:	4798      	blx	r3
    2b76:	1c03      	adds	r3, r0, #0
    2b78:	613b      	str	r3, [r7, #16]
		control->pressure_set_point_cm_h20 += (section_dt / (float) control->pip_to_peep_rampdown_ms) * (state->setting_state.peep_cm_h20 - state->setting_state.pip_cm_h20);
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	691a      	ldr	r2, [r3, #16]
    2b7e:	4b2b      	ldr	r3, [pc, #172]	; (2c2c <calculate_new_setpoint+0x180>)
    2b80:	0010      	movs	r0, r2
    2b82:	4798      	blx	r3
    2b84:	1c04      	adds	r4, r0, #0
    2b86:	683b      	ldr	r3, [r7, #0]
    2b88:	689a      	ldr	r2, [r3, #8]
    2b8a:	4b28      	ldr	r3, [pc, #160]	; (2c2c <calculate_new_setpoint+0x180>)
    2b8c:	0010      	movs	r0, r2
    2b8e:	4798      	blx	r3
    2b90:	1c02      	adds	r2, r0, #0
    2b92:	4b27      	ldr	r3, [pc, #156]	; (2c30 <calculate_new_setpoint+0x184>)
    2b94:	1c11      	adds	r1, r2, #0
    2b96:	6938      	ldr	r0, [r7, #16]
    2b98:	4798      	blx	r3
    2b9a:	1c03      	adds	r3, r0, #0
    2b9c:	1c1d      	adds	r5, r3, #0
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	689a      	ldr	r2, [r3, #8]
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	68db      	ldr	r3, [r3, #12]
    2ba6:	1ad2      	subs	r2, r2, r3
    2ba8:	4b20      	ldr	r3, [pc, #128]	; (2c2c <calculate_new_setpoint+0x180>)
    2baa:	0010      	movs	r0, r2
    2bac:	4798      	blx	r3
    2bae:	1c02      	adds	r2, r0, #0
    2bb0:	4b20      	ldr	r3, [pc, #128]	; (2c34 <calculate_new_setpoint+0x188>)
    2bb2:	1c11      	adds	r1, r2, #0
    2bb4:	1c28      	adds	r0, r5, #0
    2bb6:	4798      	blx	r3
    2bb8:	1c03      	adds	r3, r0, #0
    2bba:	1c1a      	adds	r2, r3, #0
    2bbc:	4b1f      	ldr	r3, [pc, #124]	; (2c3c <calculate_new_setpoint+0x190>)
    2bbe:	1c11      	adds	r1, r2, #0
    2bc0:	1c20      	adds	r0, r4, #0
    2bc2:	4798      	blx	r3
    2bc4:	1c03      	adds	r3, r0, #0
    2bc6:	1c1a      	adds	r2, r3, #0
    2bc8:	4b1b      	ldr	r3, [pc, #108]	; (2c38 <calculate_new_setpoint+0x18c>)
    2bca:	1c10      	adds	r0, r2, #0
    2bcc:	4798      	blx	r3
    2bce:	0002      	movs	r2, r0
    2bd0:	683b      	ldr	r3, [r7, #0]
    2bd2:	611a      	str	r2, [r3, #16]
    2bd4:	e025      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms))
    2bd6:	683b      	ldr	r3, [r7, #0]
    2bd8:	681a      	ldr	r2, [r3, #0]
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	685b      	ldr	r3, [r3, #4]
    2bde:	18d2      	adds	r2, r2, r3
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	689b      	ldr	r3, [r3, #8]
    2be4:	18d2      	adds	r2, r2, r3
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	68db      	ldr	r3, [r3, #12]
    2bea:	18d2      	adds	r2, r2, r3
    2bec:	69bb      	ldr	r3, [r7, #24]
    2bee:	429a      	cmp	r2, r3
    2bf0:	dd04      	ble.n	2bfc <calculate_new_setpoint+0x150>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	689a      	ldr	r2, [r3, #8]
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	611a      	str	r2, [r3, #16]
    2bfa:	e012      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else
	{
		// Time over this setpoint, return new transition time, keep at PEEP
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	689a      	ldr	r2, [r3, #8]
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	611a      	str	r2, [r3, #16]
		new_state_start = stage_start_time_ms + (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms);
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	681a      	ldr	r2, [r3, #0]
    2c08:	683b      	ldr	r3, [r7, #0]
    2c0a:	685b      	ldr	r3, [r3, #4]
    2c0c:	18d2      	adds	r2, r2, r3
    2c0e:	683b      	ldr	r3, [r7, #0]
    2c10:	689b      	ldr	r3, [r3, #8]
    2c12:	18d2      	adds	r2, r2, r3
    2c14:	683b      	ldr	r3, [r7, #0]
    2c16:	68db      	ldr	r3, [r3, #12]
    2c18:	18d3      	adds	r3, r2, r3
    2c1a:	001a      	movs	r2, r3
    2c1c:	68fb      	ldr	r3, [r7, #12]
    2c1e:	18d3      	adds	r3, r2, r3
    2c20:	61fb      	str	r3, [r7, #28]
	}
	return new_state_start;
    2c22:	69fb      	ldr	r3, [r7, #28]
 }
    2c24:	0018      	movs	r0, r3
    2c26:	46bd      	mov	sp, r7
    2c28:	b008      	add	sp, #32
    2c2a:	bdb0      	pop	{r4, r5, r7, pc}
    2c2c:	0000959d 	.word	0x0000959d
    2c30:	00008c05 	.word	0x00008c05
    2c34:	00008fe5 	.word	0x00008fe5
    2c38:	0000955d 	.word	0x0000955d
    2c3c:	000088e1 	.word	0x000088e1

00002c40 <pidf_control>:
 *
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 static float pidf_control(lcv_control_t * control, controller_param_t * params)
 {
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	b089      	sub	sp, #36	; 0x24
    2c44:	af00      	add	r7, sp, #0
    2c46:	60f8      	str	r0, [r7, #12]
    2c48:	60b9      	str	r1, [r7, #8]
	static float error_integral = 0.0;
	static float error_derivative = 0.0;
	static float last_error;

	float error = control->pressure_set_point_cm_h20 - control->pressure_current_cm_h20;
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	691a      	ldr	r2, [r3, #16]
    2c4e:	68fb      	ldr	r3, [r7, #12]
    2c50:	695b      	ldr	r3, [r3, #20]
    2c52:	1ad2      	subs	r2, r2, r3
    2c54:	4b7d      	ldr	r3, [pc, #500]	; (2e4c <pidf_control+0x20c>)
    2c56:	0010      	movs	r0, r2
    2c58:	4798      	blx	r3
    2c5a:	1c03      	adds	r3, r0, #0
    2c5c:	61bb      	str	r3, [r7, #24]

	float alpha = 0.7;
    2c5e:	4b7c      	ldr	r3, [pc, #496]	; (2e50 <pidf_control+0x210>)
    2c60:	617b      	str	r3, [r7, #20]
	error_derivative = alpha*(error-last_error) + (1.0 - alpha)*error_derivative;
    2c62:	4b7c      	ldr	r3, [pc, #496]	; (2e54 <pidf_control+0x214>)
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	4b7c      	ldr	r3, [pc, #496]	; (2e58 <pidf_control+0x218>)
    2c68:	1c11      	adds	r1, r2, #0
    2c6a:	69b8      	ldr	r0, [r7, #24]
    2c6c:	4798      	blx	r3
    2c6e:	1c03      	adds	r3, r0, #0
    2c70:	1c1a      	adds	r2, r3, #0
    2c72:	4b7a      	ldr	r3, [pc, #488]	; (2e5c <pidf_control+0x21c>)
    2c74:	6979      	ldr	r1, [r7, #20]
    2c76:	1c10      	adds	r0, r2, #0
    2c78:	4798      	blx	r3
    2c7a:	1c03      	adds	r3, r0, #0
    2c7c:	1c1a      	adds	r2, r3, #0
    2c7e:	4b78      	ldr	r3, [pc, #480]	; (2e60 <pidf_control+0x220>)
    2c80:	1c10      	adds	r0, r2, #0
    2c82:	4798      	blx	r3
    2c84:	0005      	movs	r5, r0
    2c86:	000e      	movs	r6, r1
    2c88:	4b75      	ldr	r3, [pc, #468]	; (2e60 <pidf_control+0x220>)
    2c8a:	6978      	ldr	r0, [r7, #20]
    2c8c:	4798      	blx	r3
    2c8e:	0002      	movs	r2, r0
    2c90:	000b      	movs	r3, r1
    2c92:	4c74      	ldr	r4, [pc, #464]	; (2e64 <pidf_control+0x224>)
    2c94:	2000      	movs	r0, #0
    2c96:	4974      	ldr	r1, [pc, #464]	; (2e68 <pidf_control+0x228>)
    2c98:	47a0      	blx	r4
    2c9a:	0003      	movs	r3, r0
    2c9c:	000c      	movs	r4, r1
    2c9e:	603b      	str	r3, [r7, #0]
    2ca0:	607c      	str	r4, [r7, #4]
    2ca2:	4b72      	ldr	r3, [pc, #456]	; (2e6c <pidf_control+0x22c>)
    2ca4:	681a      	ldr	r2, [r3, #0]
    2ca6:	4b6e      	ldr	r3, [pc, #440]	; (2e60 <pidf_control+0x220>)
    2ca8:	1c10      	adds	r0, r2, #0
    2caa:	4798      	blx	r3
    2cac:	0002      	movs	r2, r0
    2cae:	000b      	movs	r3, r1
    2cb0:	4c6f      	ldr	r4, [pc, #444]	; (2e70 <pidf_control+0x230>)
    2cb2:	6838      	ldr	r0, [r7, #0]
    2cb4:	6879      	ldr	r1, [r7, #4]
    2cb6:	47a0      	blx	r4
    2cb8:	0003      	movs	r3, r0
    2cba:	000c      	movs	r4, r1
    2cbc:	001a      	movs	r2, r3
    2cbe:	0023      	movs	r3, r4
    2cc0:	4c6c      	ldr	r4, [pc, #432]	; (2e74 <pidf_control+0x234>)
    2cc2:	0028      	movs	r0, r5
    2cc4:	0031      	movs	r1, r6
    2cc6:	47a0      	blx	r4
    2cc8:	0003      	movs	r3, r0
    2cca:	000c      	movs	r4, r1
    2ccc:	0019      	movs	r1, r3
    2cce:	0022      	movs	r2, r4
    2cd0:	4b69      	ldr	r3, [pc, #420]	; (2e78 <pidf_control+0x238>)
    2cd2:	0008      	movs	r0, r1
    2cd4:	0011      	movs	r1, r2
    2cd6:	4798      	blx	r3
    2cd8:	1c02      	adds	r2, r0, #0
    2cda:	4b64      	ldr	r3, [pc, #400]	; (2e6c <pidf_control+0x22c>)
    2cdc:	601a      	str	r2, [r3, #0]

	if(abs(error) < params->integral_enable_error_range)
    2cde:	4b67      	ldr	r3, [pc, #412]	; (2e7c <pidf_control+0x23c>)
    2ce0:	69b8      	ldr	r0, [r7, #24]
    2ce2:	4798      	blx	r3
    2ce4:	0003      	movs	r3, r0
    2ce6:	17d9      	asrs	r1, r3, #31
    2ce8:	185a      	adds	r2, r3, r1
    2cea:	404a      	eors	r2, r1
    2cec:	4b57      	ldr	r3, [pc, #348]	; (2e4c <pidf_control+0x20c>)
    2cee:	0010      	movs	r0, r2
    2cf0:	4798      	blx	r3
    2cf2:	68bb      	ldr	r3, [r7, #8]
    2cf4:	695a      	ldr	r2, [r3, #20]
    2cf6:	4b62      	ldr	r3, [pc, #392]	; (2e80 <pidf_control+0x240>)
    2cf8:	1c11      	adds	r1, r2, #0
    2cfa:	4798      	blx	r3
    2cfc:	1e03      	subs	r3, r0, #0
    2cfe:	d049      	beq.n	2d94 <pidf_control+0x154>
	{
		error_integral += error;
    2d00:	4b60      	ldr	r3, [pc, #384]	; (2e84 <pidf_control+0x244>)
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	4b60      	ldr	r3, [pc, #384]	; (2e88 <pidf_control+0x248>)
    2d06:	69b9      	ldr	r1, [r7, #24]
    2d08:	1c10      	adds	r0, r2, #0
    2d0a:	4798      	blx	r3
    2d0c:	1c03      	adds	r3, r0, #0
    2d0e:	1c1a      	adds	r2, r3, #0
    2d10:	4b5c      	ldr	r3, [pc, #368]	; (2e84 <pidf_control+0x244>)
    2d12:	601a      	str	r2, [r3, #0]
		if(abs(error_integral * params->ki) > params->interal_antiwindup)
    2d14:	68bb      	ldr	r3, [r7, #8]
    2d16:	689a      	ldr	r2, [r3, #8]
    2d18:	4b5a      	ldr	r3, [pc, #360]	; (2e84 <pidf_control+0x244>)
    2d1a:	6819      	ldr	r1, [r3, #0]
    2d1c:	4b4f      	ldr	r3, [pc, #316]	; (2e5c <pidf_control+0x21c>)
    2d1e:	1c10      	adds	r0, r2, #0
    2d20:	4798      	blx	r3
    2d22:	1c03      	adds	r3, r0, #0
    2d24:	1c1a      	adds	r2, r3, #0
    2d26:	4b55      	ldr	r3, [pc, #340]	; (2e7c <pidf_control+0x23c>)
    2d28:	1c10      	adds	r0, r2, #0
    2d2a:	4798      	blx	r3
    2d2c:	0003      	movs	r3, r0
    2d2e:	17d9      	asrs	r1, r3, #31
    2d30:	185a      	adds	r2, r3, r1
    2d32:	404a      	eors	r2, r1
    2d34:	4b45      	ldr	r3, [pc, #276]	; (2e4c <pidf_control+0x20c>)
    2d36:	0010      	movs	r0, r2
    2d38:	4798      	blx	r3
    2d3a:	68bb      	ldr	r3, [r7, #8]
    2d3c:	691a      	ldr	r2, [r3, #16]
    2d3e:	4b53      	ldr	r3, [pc, #332]	; (2e8c <pidf_control+0x24c>)
    2d40:	1c11      	adds	r1, r2, #0
    2d42:	4798      	blx	r3
    2d44:	1e03      	subs	r3, r0, #0
    2d46:	d028      	beq.n	2d9a <pidf_control+0x15a>
		{
			error_integral	= (error_integral/abs(error_integral)) * (params->interal_antiwindup) / params->ki;
    2d48:	4b4e      	ldr	r3, [pc, #312]	; (2e84 <pidf_control+0x244>)
    2d4a:	681c      	ldr	r4, [r3, #0]
    2d4c:	4b4d      	ldr	r3, [pc, #308]	; (2e84 <pidf_control+0x244>)
    2d4e:	681a      	ldr	r2, [r3, #0]
    2d50:	4b4a      	ldr	r3, [pc, #296]	; (2e7c <pidf_control+0x23c>)
    2d52:	1c10      	adds	r0, r2, #0
    2d54:	4798      	blx	r3
    2d56:	0003      	movs	r3, r0
    2d58:	17d9      	asrs	r1, r3, #31
    2d5a:	185a      	adds	r2, r3, r1
    2d5c:	404a      	eors	r2, r1
    2d5e:	4b3b      	ldr	r3, [pc, #236]	; (2e4c <pidf_control+0x20c>)
    2d60:	0010      	movs	r0, r2
    2d62:	4798      	blx	r3
    2d64:	1c02      	adds	r2, r0, #0
    2d66:	4b4a      	ldr	r3, [pc, #296]	; (2e90 <pidf_control+0x250>)
    2d68:	1c11      	adds	r1, r2, #0
    2d6a:	1c20      	adds	r0, r4, #0
    2d6c:	4798      	blx	r3
    2d6e:	1c03      	adds	r3, r0, #0
    2d70:	1c18      	adds	r0, r3, #0
    2d72:	68bb      	ldr	r3, [r7, #8]
    2d74:	691a      	ldr	r2, [r3, #16]
    2d76:	4b39      	ldr	r3, [pc, #228]	; (2e5c <pidf_control+0x21c>)
    2d78:	1c11      	adds	r1, r2, #0
    2d7a:	4798      	blx	r3
    2d7c:	1c03      	adds	r3, r0, #0
    2d7e:	1c18      	adds	r0, r3, #0
    2d80:	68bb      	ldr	r3, [r7, #8]
    2d82:	689a      	ldr	r2, [r3, #8]
    2d84:	4b42      	ldr	r3, [pc, #264]	; (2e90 <pidf_control+0x250>)
    2d86:	1c11      	adds	r1, r2, #0
    2d88:	4798      	blx	r3
    2d8a:	1c03      	adds	r3, r0, #0
    2d8c:	1c1a      	adds	r2, r3, #0
    2d8e:	4b3d      	ldr	r3, [pc, #244]	; (2e84 <pidf_control+0x244>)
    2d90:	601a      	str	r2, [r3, #0]
    2d92:	e002      	b.n	2d9a <pidf_control+0x15a>
		}
	}
	else
	{
		error_integral = 0.0;
    2d94:	4b3b      	ldr	r3, [pc, #236]	; (2e84 <pidf_control+0x244>)
    2d96:	2200      	movs	r2, #0
    2d98:	601a      	str	r2, [r3, #0]
	}

	float output = params->kf * control->pressure_set_point_cm_h20 +
    2d9a:	68bb      	ldr	r3, [r7, #8]
    2d9c:	681c      	ldr	r4, [r3, #0]
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	691a      	ldr	r2, [r3, #16]
    2da2:	4b2a      	ldr	r3, [pc, #168]	; (2e4c <pidf_control+0x20c>)
    2da4:	0010      	movs	r0, r2
    2da6:	4798      	blx	r3
    2da8:	1c02      	adds	r2, r0, #0
    2daa:	4b2c      	ldr	r3, [pc, #176]	; (2e5c <pidf_control+0x21c>)
    2dac:	1c11      	adds	r1, r2, #0
    2dae:	1c20      	adds	r0, r4, #0
    2db0:	4798      	blx	r3
    2db2:	1c03      	adds	r3, r0, #0
    2db4:	1c1c      	adds	r4, r3, #0
					params->kp * error +
    2db6:	68bb      	ldr	r3, [r7, #8]
    2db8:	685a      	ldr	r2, [r3, #4]
    2dba:	4b28      	ldr	r3, [pc, #160]	; (2e5c <pidf_control+0x21c>)
    2dbc:	69b9      	ldr	r1, [r7, #24]
    2dbe:	1c10      	adds	r0, r2, #0
    2dc0:	4798      	blx	r3
    2dc2:	1c03      	adds	r3, r0, #0
    2dc4:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    2dc6:	4b30      	ldr	r3, [pc, #192]	; (2e88 <pidf_control+0x248>)
    2dc8:	1c11      	adds	r1, r2, #0
    2dca:	1c20      	adds	r0, r4, #0
    2dcc:	4798      	blx	r3
    2dce:	1c03      	adds	r3, r0, #0
    2dd0:	1c1c      	adds	r4, r3, #0
					params->ki * error_integral +
    2dd2:	68bb      	ldr	r3, [r7, #8]
    2dd4:	689a      	ldr	r2, [r3, #8]
    2dd6:	4b2b      	ldr	r3, [pc, #172]	; (2e84 <pidf_control+0x244>)
    2dd8:	6819      	ldr	r1, [r3, #0]
    2dda:	4b20      	ldr	r3, [pc, #128]	; (2e5c <pidf_control+0x21c>)
    2ddc:	1c10      	adds	r0, r2, #0
    2dde:	4798      	blx	r3
    2de0:	1c03      	adds	r3, r0, #0
    2de2:	1c1a      	adds	r2, r3, #0
					params->kp * error +
    2de4:	4b28      	ldr	r3, [pc, #160]	; (2e88 <pidf_control+0x248>)
    2de6:	1c11      	adds	r1, r2, #0
    2de8:	1c20      	adds	r0, r4, #0
    2dea:	4798      	blx	r3
    2dec:	1c03      	adds	r3, r0, #0
    2dee:	1c1c      	adds	r4, r3, #0
					params->kd * error_derivative;
    2df0:	68bb      	ldr	r3, [r7, #8]
    2df2:	68da      	ldr	r2, [r3, #12]
    2df4:	4b1d      	ldr	r3, [pc, #116]	; (2e6c <pidf_control+0x22c>)
    2df6:	6819      	ldr	r1, [r3, #0]
    2df8:	4b18      	ldr	r3, [pc, #96]	; (2e5c <pidf_control+0x21c>)
    2dfa:	1c10      	adds	r0, r2, #0
    2dfc:	4798      	blx	r3
    2dfe:	1c03      	adds	r3, r0, #0
    2e00:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    2e02:	4b21      	ldr	r3, [pc, #132]	; (2e88 <pidf_control+0x248>)
    2e04:	1c11      	adds	r1, r2, #0
    2e06:	1c20      	adds	r0, r4, #0
    2e08:	4798      	blx	r3
    2e0a:	1c03      	adds	r3, r0, #0
    2e0c:	61fb      	str	r3, [r7, #28]

	if(output > params->max_output)
    2e0e:	68bb      	ldr	r3, [r7, #8]
    2e10:	699a      	ldr	r2, [r3, #24]
    2e12:	4b1b      	ldr	r3, [pc, #108]	; (2e80 <pidf_control+0x240>)
    2e14:	69f9      	ldr	r1, [r7, #28]
    2e16:	1c10      	adds	r0, r2, #0
    2e18:	4798      	blx	r3
    2e1a:	1e03      	subs	r3, r0, #0
    2e1c:	d002      	beq.n	2e24 <pidf_control+0x1e4>
	{
		output = params->max_output;
    2e1e:	68bb      	ldr	r3, [r7, #8]
    2e20:	699b      	ldr	r3, [r3, #24]
    2e22:	61fb      	str	r3, [r7, #28]
	}

	if(output < params->min_output)
    2e24:	68bb      	ldr	r3, [r7, #8]
    2e26:	69da      	ldr	r2, [r3, #28]
    2e28:	4b18      	ldr	r3, [pc, #96]	; (2e8c <pidf_control+0x24c>)
    2e2a:	69f9      	ldr	r1, [r7, #28]
    2e2c:	1c10      	adds	r0, r2, #0
    2e2e:	4798      	blx	r3
    2e30:	1e03      	subs	r3, r0, #0
    2e32:	d002      	beq.n	2e3a <pidf_control+0x1fa>
	{
		output = params->min_output;
    2e34:	68bb      	ldr	r3, [r7, #8]
    2e36:	69db      	ldr	r3, [r3, #28]
    2e38:	61fb      	str	r3, [r7, #28]
	}

	last_error = error;
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <pidf_control+0x214>)
    2e3c:	69ba      	ldr	r2, [r7, #24]
    2e3e:	601a      	str	r2, [r3, #0]
	return output;
    2e40:	69fb      	ldr	r3, [r7, #28]
 }
    2e42:	1c18      	adds	r0, r3, #0
    2e44:	46bd      	mov	sp, r7
    2e46:	b009      	add	sp, #36	; 0x24
    2e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	0000959d 	.word	0x0000959d
    2e50:	3f333333 	.word	0x3f333333
    2e54:	20004f14 	.word	0x20004f14
    2e58:	00009225 	.word	0x00009225
    2e5c:	00008fe5 	.word	0x00008fe5
    2e60:	0000b14d 	.word	0x0000b14d
    2e64:	0000a9c5 	.word	0x0000a9c5
    2e68:	3ff00000 	.word	0x3ff00000
    2e6c:	20004f18 	.word	0x20004f18
    2e70:	0000a4c5 	.word	0x0000a4c5
    2e74:	0000963d 	.word	0x0000963d
    2e78:	0000b1f1 	.word	0x0000b1f1
    2e7c:	0000955d 	.word	0x0000955d
    2e80:	00008861 	.word	0x00008861
    2e84:	20004f1c 	.word	0x20004f1c
    2e88:	000088e1 	.word	0x000088e1
    2e8c:	00008889 	.word	0x00008889
    2e90:	00008c05 	.word	0x00008c05

00002e94 <calculate_lcv_control_params>:
 *
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 */
 void calculate_lcv_control_params(lcv_state_t * state, lcv_control_t * control)
 {
    2e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e96:	b087      	sub	sp, #28
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
    2e9c:	6039      	str	r1, [r7, #0]
	*	PIP	         ________
	*			   /		  \
	*			 /			    \
	*	PEEP   /				  \____________
	*/
	float breath_cycle_total_time_ms = (60000.0) / state->setting_state.breath_per_min;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	691a      	ldr	r2, [r3, #16]
    2ea2:	4b6b      	ldr	r3, [pc, #428]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2ea4:	0010      	movs	r0, r2
    2ea6:	4798      	blx	r3
    2ea8:	0002      	movs	r2, r0
    2eaa:	000b      	movs	r3, r1
    2eac:	4c69      	ldr	r4, [pc, #420]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2eae:	2000      	movs	r0, #0
    2eb0:	4969      	ldr	r1, [pc, #420]	; (3058 <calculate_lcv_control_params+0x1c4>)
    2eb2:	47a0      	blx	r4
    2eb4:	0003      	movs	r3, r0
    2eb6:	000c      	movs	r4, r1
    2eb8:	0019      	movs	r1, r3
    2eba:	0022      	movs	r2, r4
    2ebc:	4b67      	ldr	r3, [pc, #412]	; (305c <calculate_lcv_control_params+0x1c8>)
    2ebe:	0008      	movs	r0, r1
    2ec0:	0011      	movs	r1, r2
    2ec2:	4798      	blx	r3
    2ec4:	1c03      	adds	r3, r0, #0
    2ec6:	617b      	str	r3, [r7, #20]
	float breath_cycle_total_time_ms_minus_ramps = breath_cycle_total_time_ms - (control->pip_to_peep_rampdown_ms + control->peep_to_pip_rampup_ms);
    2ec8:	683b      	ldr	r3, [r7, #0]
    2eca:	689a      	ldr	r2, [r3, #8]
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	681b      	ldr	r3, [r3, #0]
    2ed0:	18d2      	adds	r2, r2, r3
    2ed2:	4b63      	ldr	r3, [pc, #396]	; (3060 <calculate_lcv_control_params+0x1cc>)
    2ed4:	0010      	movs	r0, r2
    2ed6:	4798      	blx	r3
    2ed8:	1c02      	adds	r2, r0, #0
    2eda:	4b62      	ldr	r3, [pc, #392]	; (3064 <calculate_lcv_control_params+0x1d0>)
    2edc:	1c11      	adds	r1, r2, #0
    2ede:	6978      	ldr	r0, [r7, #20]
    2ee0:	4798      	blx	r3
    2ee2:	1c03      	adds	r3, r0, #0
    2ee4:	613b      	str	r3, [r7, #16]

	if(breath_cycle_total_time_ms_minus_ramps < 0)
    2ee6:	4b60      	ldr	r3, [pc, #384]	; (3068 <calculate_lcv_control_params+0x1d4>)
    2ee8:	2100      	movs	r1, #0
    2eea:	6938      	ldr	r0, [r7, #16]
    2eec:	4798      	blx	r3
    2eee:	1e03      	subs	r3, r0, #0
    2ef0:	d004      	beq.n	2efc <calculate_lcv_control_params+0x68>
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, true);
    2ef2:	2101      	movs	r1, #1
    2ef4:	2006      	movs	r0, #6
    2ef6:	4b5d      	ldr	r3, [pc, #372]	; (306c <calculate_lcv_control_params+0x1d8>)
    2ef8:	4798      	blx	r3
    2efa:	e003      	b.n	2f04 <calculate_lcv_control_params+0x70>
		// TODO pick something reasonable?
	}
	else
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, false);
    2efc:	2100      	movs	r1, #0
    2efe:	2006      	movs	r0, #6
    2f00:	4b5a      	ldr	r3, [pc, #360]	; (306c <calculate_lcv_control_params+0x1d8>)
    2f02:	4798      	blx	r3
	}

	// I:E is a ratio, so 3:1 implies 4 parts needed. Split up what is left according to the I:E ratio
	float section_size_ms;
	if(state->setting_state.ie_ratio_tenths > 10)
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	785b      	ldrb	r3, [r3, #1]
    2f08:	2b0a      	cmp	r3, #10
    2f0a:	d951      	bls.n	2fb0 <calculate_lcv_control_params+0x11c>
	{
		// Typical ratios with more expiratory time
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / ((state->setting_state.ie_ratio_tenths * 0.1) + 1.0);
    2f0c:	4b58      	ldr	r3, [pc, #352]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2f0e:	6938      	ldr	r0, [r7, #16]
    2f10:	4798      	blx	r3
    2f12:	0005      	movs	r5, r0
    2f14:	000e      	movs	r6, r1
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	785b      	ldrb	r3, [r3, #1]
    2f1a:	001a      	movs	r2, r3
    2f1c:	4b4c      	ldr	r3, [pc, #304]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2f1e:	0010      	movs	r0, r2
    2f20:	4798      	blx	r3
    2f22:	4c54      	ldr	r4, [pc, #336]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f24:	4a54      	ldr	r2, [pc, #336]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2f26:	4b55      	ldr	r3, [pc, #340]	; (307c <calculate_lcv_control_params+0x1e8>)
    2f28:	47a0      	blx	r4
    2f2a:	0003      	movs	r3, r0
    2f2c:	000c      	movs	r4, r1
    2f2e:	0018      	movs	r0, r3
    2f30:	0021      	movs	r1, r4
    2f32:	4c53      	ldr	r4, [pc, #332]	; (3080 <calculate_lcv_control_params+0x1ec>)
    2f34:	2200      	movs	r2, #0
    2f36:	4b53      	ldr	r3, [pc, #332]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2f38:	47a0      	blx	r4
    2f3a:	0003      	movs	r3, r0
    2f3c:	000c      	movs	r4, r1
    2f3e:	001a      	movs	r2, r3
    2f40:	0023      	movs	r3, r4
    2f42:	4c44      	ldr	r4, [pc, #272]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2f44:	0028      	movs	r0, r5
    2f46:	0031      	movs	r1, r6
    2f48:	47a0      	blx	r4
    2f4a:	0003      	movs	r3, r0
    2f4c:	000c      	movs	r4, r1
    2f4e:	0019      	movs	r1, r3
    2f50:	0022      	movs	r2, r4
    2f52:	4b42      	ldr	r3, [pc, #264]	; (305c <calculate_lcv_control_params+0x1c8>)
    2f54:	0008      	movs	r0, r1
    2f56:	0011      	movs	r1, r2
    2f58:	4798      	blx	r3
    2f5a:	1c03      	adds	r3, r0, #0
    2f5c:	60fb      	str	r3, [r7, #12]
		
		control->peep_hold_ms =	section_size_ms * (state->setting_state.ie_ratio_tenths * 0.1);
    2f5e:	4b44      	ldr	r3, [pc, #272]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2f60:	68f8      	ldr	r0, [r7, #12]
    2f62:	4798      	blx	r3
    2f64:	0005      	movs	r5, r0
    2f66:	000e      	movs	r6, r1
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	785b      	ldrb	r3, [r3, #1]
    2f6c:	001a      	movs	r2, r3
    2f6e:	4b38      	ldr	r3, [pc, #224]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2f70:	0010      	movs	r0, r2
    2f72:	4798      	blx	r3
    2f74:	4c3f      	ldr	r4, [pc, #252]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f76:	4a40      	ldr	r2, [pc, #256]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2f78:	4b40      	ldr	r3, [pc, #256]	; (307c <calculate_lcv_control_params+0x1e8>)
    2f7a:	47a0      	blx	r4
    2f7c:	0003      	movs	r3, r0
    2f7e:	000c      	movs	r4, r1
    2f80:	001a      	movs	r2, r3
    2f82:	0023      	movs	r3, r4
    2f84:	4c3b      	ldr	r4, [pc, #236]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f86:	0028      	movs	r0, r5
    2f88:	0031      	movs	r1, r6
    2f8a:	47a0      	blx	r4
    2f8c:	0003      	movs	r3, r0
    2f8e:	000c      	movs	r4, r1
    2f90:	0019      	movs	r1, r3
    2f92:	0022      	movs	r2, r4
    2f94:	4b3c      	ldr	r3, [pc, #240]	; (3088 <calculate_lcv_control_params+0x1f4>)
    2f96:	0008      	movs	r0, r1
    2f98:	0011      	movs	r1, r2
    2f9a:	4798      	blx	r3
    2f9c:	0002      	movs	r2, r0
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	60da      	str	r2, [r3, #12]
		control->pip_hold_ms = section_size_ms; // 1 section by definition
    2fa2:	4b3a      	ldr	r3, [pc, #232]	; (308c <calculate_lcv_control_params+0x1f8>)
    2fa4:	68f8      	ldr	r0, [r7, #12]
    2fa6:	4798      	blx	r3
    2fa8:	0002      	movs	r2, r0
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	605a      	str	r2, [r3, #4]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);

		control->pip_hold_ms =	section_size_ms * ratio_to_use;
		control->peep_hold_ms = section_size_ms; // 1 section by definition
	}
 }
    2fae:	e04b      	b.n	3048 <calculate_lcv_control_params+0x1b4>
		float ratio_to_use = 1.0 / (state->setting_state.ie_ratio_tenths * 0.1);	// Ratio of 0.5:1 means 1:2, which has 3 sections
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	785b      	ldrb	r3, [r3, #1]
    2fb4:	001a      	movs	r2, r3
    2fb6:	4b26      	ldr	r3, [pc, #152]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2fb8:	0010      	movs	r0, r2
    2fba:	4798      	blx	r3
    2fbc:	4c2d      	ldr	r4, [pc, #180]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2fbe:	4a2e      	ldr	r2, [pc, #184]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2fc0:	4b2e      	ldr	r3, [pc, #184]	; (307c <calculate_lcv_control_params+0x1e8>)
    2fc2:	47a0      	blx	r4
    2fc4:	0003      	movs	r3, r0
    2fc6:	000c      	movs	r4, r1
    2fc8:	001a      	movs	r2, r3
    2fca:	0023      	movs	r3, r4
    2fcc:	4c21      	ldr	r4, [pc, #132]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2fce:	2000      	movs	r0, #0
    2fd0:	492c      	ldr	r1, [pc, #176]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2fd2:	47a0      	blx	r4
    2fd4:	0003      	movs	r3, r0
    2fd6:	000c      	movs	r4, r1
    2fd8:	0019      	movs	r1, r3
    2fda:	0022      	movs	r2, r4
    2fdc:	4b1f      	ldr	r3, [pc, #124]	; (305c <calculate_lcv_control_params+0x1c8>)
    2fde:	0008      	movs	r0, r1
    2fe0:	0011      	movs	r1, r2
    2fe2:	4798      	blx	r3
    2fe4:	1c03      	adds	r3, r0, #0
    2fe6:	60bb      	str	r3, [r7, #8]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);
    2fe8:	4b21      	ldr	r3, [pc, #132]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2fea:	6938      	ldr	r0, [r7, #16]
    2fec:	4798      	blx	r3
    2fee:	0005      	movs	r5, r0
    2ff0:	000e      	movs	r6, r1
    2ff2:	4b1f      	ldr	r3, [pc, #124]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2ff4:	68b8      	ldr	r0, [r7, #8]
    2ff6:	4798      	blx	r3
    2ff8:	4c21      	ldr	r4, [pc, #132]	; (3080 <calculate_lcv_control_params+0x1ec>)
    2ffa:	2200      	movs	r2, #0
    2ffc:	4b21      	ldr	r3, [pc, #132]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2ffe:	47a0      	blx	r4
    3000:	0003      	movs	r3, r0
    3002:	000c      	movs	r4, r1
    3004:	001a      	movs	r2, r3
    3006:	0023      	movs	r3, r4
    3008:	4c12      	ldr	r4, [pc, #72]	; (3054 <calculate_lcv_control_params+0x1c0>)
    300a:	0028      	movs	r0, r5
    300c:	0031      	movs	r1, r6
    300e:	47a0      	blx	r4
    3010:	0003      	movs	r3, r0
    3012:	000c      	movs	r4, r1
    3014:	0019      	movs	r1, r3
    3016:	0022      	movs	r2, r4
    3018:	4b10      	ldr	r3, [pc, #64]	; (305c <calculate_lcv_control_params+0x1c8>)
    301a:	0008      	movs	r0, r1
    301c:	0011      	movs	r1, r2
    301e:	4798      	blx	r3
    3020:	1c03      	adds	r3, r0, #0
    3022:	60fb      	str	r3, [r7, #12]
		control->pip_hold_ms =	section_size_ms * ratio_to_use;
    3024:	4b1a      	ldr	r3, [pc, #104]	; (3090 <calculate_lcv_control_params+0x1fc>)
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	68f8      	ldr	r0, [r7, #12]
    302a:	4798      	blx	r3
    302c:	1c03      	adds	r3, r0, #0
    302e:	1c1a      	adds	r2, r3, #0
    3030:	4b16      	ldr	r3, [pc, #88]	; (308c <calculate_lcv_control_params+0x1f8>)
    3032:	1c10      	adds	r0, r2, #0
    3034:	4798      	blx	r3
    3036:	0002      	movs	r2, r0
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	605a      	str	r2, [r3, #4]
		control->peep_hold_ms = section_size_ms; // 1 section by definition
    303c:	4b13      	ldr	r3, [pc, #76]	; (308c <calculate_lcv_control_params+0x1f8>)
    303e:	68f8      	ldr	r0, [r7, #12]
    3040:	4798      	blx	r3
    3042:	0002      	movs	r2, r0
    3044:	683b      	ldr	r3, [r7, #0]
    3046:	60da      	str	r2, [r3, #12]
 }
    3048:	46c0      	nop			; (mov r8, r8)
    304a:	46bd      	mov	sp, r7
    304c:	b007      	add	sp, #28
    304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3050:	0000b059 	.word	0x0000b059
    3054:	00009c5d 	.word	0x00009c5d
    3058:	40ed4c00 	.word	0x40ed4c00
    305c:	0000b1f1 	.word	0x0000b1f1
    3060:	0000959d 	.word	0x0000959d
    3064:	00009225 	.word	0x00009225
    3068:	00008861 	.word	0x00008861
    306c:	000029f9 	.word	0x000029f9
    3070:	0000b14d 	.word	0x0000b14d
    3074:	0000a4c5 	.word	0x0000a4c5
    3078:	9999999a 	.word	0x9999999a
    307c:	3fb99999 	.word	0x3fb99999
    3080:	0000963d 	.word	0x0000963d
    3084:	3ff00000 	.word	0x3ff00000
    3088:	0000aff1 	.word	0x0000aff1
    308c:	0000955d 	.word	0x0000955d
    3090:	00008fe5 	.word	0x00008fe5

00003094 <run_controller>:
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 float run_controller(lcv_state_t * state, lcv_control_t * control, controller_param_t * params)
 {
    3094:	b590      	push	{r4, r7, lr}
    3096:	b087      	sub	sp, #28
    3098:	af00      	add	r7, sp, #0
    309a:	60f8      	str	r0, [r7, #12]
    309c:	60b9      	str	r1, [r7, #8]
    309e:	607a      	str	r2, [r7, #4]
	static bool was_enabled = false;
	static uint32_t last_time_ms = 0;
	static start_of_current_profile_time_ms = 0;
	uint32_t current_time_ms = xTaskGetTickCount() * portTICK_PERIOD_MS;
    30a0:	4b1d      	ldr	r3, [pc, #116]	; (3118 <run_controller+0x84>)
    30a2:	4798      	blx	r3
    30a4:	0003      	movs	r3, r0
    30a6:	617b      	str	r3, [r7, #20]

	// TODO make sure at enable transition, pressure setpoint starts at PEEP always!
	if(!was_enabled && state->current_state.enable)
    30a8:	4b1c      	ldr	r3, [pc, #112]	; (311c <run_controller+0x88>)
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	2201      	movs	r2, #1
    30ae:	4053      	eors	r3, r2
    30b0:	b2db      	uxtb	r3, r3
    30b2:	2b00      	cmp	r3, #0
    30b4:	d009      	beq.n	30ca <run_controller+0x36>
    30b6:	68fb      	ldr	r3, [r7, #12]
    30b8:	7d1b      	ldrb	r3, [r3, #20]
    30ba:	2201      	movs	r2, #1
    30bc:	4013      	ands	r3, r2
    30be:	b2db      	uxtb	r3, r3
    30c0:	2b00      	cmp	r3, #0
    30c2:	d002      	beq.n	30ca <run_controller+0x36>
	{
		start_of_current_profile_time_ms = current_time_ms;
    30c4:	697a      	ldr	r2, [r7, #20]
    30c6:	4b16      	ldr	r3, [pc, #88]	; (3120 <run_controller+0x8c>)
    30c8:	601a      	str	r2, [r3, #0]
	}

	// First, determine what the new setpoint should be
	// Updates profile if enters a new profile
	start_of_current_profile_time_ms = calculate_new_setpoint(start_of_current_profile_time_ms, current_time_ms, state, control);
    30ca:	4b15      	ldr	r3, [pc, #84]	; (3120 <run_controller+0x8c>)
    30cc:	681b      	ldr	r3, [r3, #0]
    30ce:	0018      	movs	r0, r3
    30d0:	68bb      	ldr	r3, [r7, #8]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	6979      	ldr	r1, [r7, #20]
    30d6:	4c13      	ldr	r4, [pc, #76]	; (3124 <run_controller+0x90>)
    30d8:	47a0      	blx	r4
    30da:	0003      	movs	r3, r0
    30dc:	001a      	movs	r2, r3
    30de:	4b10      	ldr	r3, [pc, #64]	; (3120 <run_controller+0x8c>)
    30e0:	601a      	str	r2, [r3, #0]

	// Then, run the controller to track this setpoint
	float output = pidf_control(control, params);
    30e2:	687a      	ldr	r2, [r7, #4]
    30e4:	68bb      	ldr	r3, [r7, #8]
    30e6:	0011      	movs	r1, r2
    30e8:	0018      	movs	r0, r3
    30ea:	4b0f      	ldr	r3, [pc, #60]	; (3128 <run_controller+0x94>)
    30ec:	4798      	blx	r3
    30ee:	1c03      	adds	r3, r0, #0
    30f0:	613b      	str	r3, [r7, #16]
	last_time_ms = current_time_ms;
    30f2:	4b0e      	ldr	r3, [pc, #56]	; (312c <run_controller+0x98>)
    30f4:	697a      	ldr	r2, [r7, #20]
    30f6:	601a      	str	r2, [r3, #0]
	was_enabled = (state->current_state.enable > 0);
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	7d1b      	ldrb	r3, [r3, #20]
    30fc:	07db      	lsls	r3, r3, #31
    30fe:	0fdb      	lsrs	r3, r3, #31
    3100:	b2db      	uxtb	r3, r3
    3102:	17da      	asrs	r2, r3, #31
    3104:	1ad3      	subs	r3, r2, r3
    3106:	0fdb      	lsrs	r3, r3, #31
    3108:	b2da      	uxtb	r2, r3
    310a:	4b04      	ldr	r3, [pc, #16]	; (311c <run_controller+0x88>)
    310c:	701a      	strb	r2, [r3, #0]
	return output;
    310e:	693b      	ldr	r3, [r7, #16]
    3110:	1c18      	adds	r0, r3, #0
    3112:	46bd      	mov	sp, r7
    3114:	b007      	add	sp, #28
    3116:	bd90      	pop	{r4, r7, pc}
    3118:	00005b2d 	.word	0x00005b2d
    311c:	20004f20 	.word	0x20004f20
    3120:	20004f24 	.word	0x20004f24
    3124:	00002aad 	.word	0x00002aad
    3128:	00002c41 	.word	0x00002c41
    312c:	20004f28 	.word	0x20004f28

00003130 <lcd_init>:
 static char main_screen_buffer[SCREEN_BUFFER_SIZE] = {0};

 static char * intro_screen = "Low Cost Ventilator";

 bool lcd_init(void)
 {
    3130:	b590      	push	{r4, r7, lr}
    3132:	b085      	sub	sp, #20
    3134:	af00      	add	r7, sp, #0
	// Turn on screen
	static uint8_t on_screen_buffer[2] = {LCD_PREFIX, LCD_COMMAND_DISPLAY_ON};
	power_on_packet.address = LCD_I2C_ADDRESS;
    3136:	4b1a      	ldr	r3, [pc, #104]	; (31a0 <lcd_init+0x70>)
    3138:	2228      	movs	r2, #40	; 0x28
    313a:	801a      	strh	r2, [r3, #0]
	power_on_packet.data = on_screen_buffer;
    313c:	4b18      	ldr	r3, [pc, #96]	; (31a0 <lcd_init+0x70>)
    313e:	4a19      	ldr	r2, [pc, #100]	; (31a4 <lcd_init+0x74>)
    3140:	605a      	str	r2, [r3, #4]
	power_on_packet.data_length = 2;
    3142:	4b17      	ldr	r3, [pc, #92]	; (31a0 <lcd_init+0x70>)
    3144:	2202      	movs	r2, #2
    3146:	805a      	strh	r2, [r3, #2]
	power_on_packet.high_speed = false;
    3148:	4b15      	ldr	r3, [pc, #84]	; (31a0 <lcd_init+0x70>)
    314a:	2200      	movs	r2, #0
    314c:	725a      	strb	r2, [r3, #9]
	power_on_packet.ten_bit_address = false;
    314e:	4b14      	ldr	r3, [pc, #80]	; (31a0 <lcd_init+0x70>)
    3150:	2200      	movs	r2, #0
    3152:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = power_on_packet;
    3154:	1d3b      	adds	r3, r7, #4
    3156:	4a12      	ldr	r2, [pc, #72]	; (31a0 <lcd_init+0x70>)
    3158:	ca13      	ldmia	r2!, {r0, r1, r4}
    315a:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    315c:	1d3b      	adds	r3, r7, #4
    315e:	6818      	ldr	r0, [r3, #0]
    3160:	6859      	ldr	r1, [r3, #4]
    3162:	689a      	ldr	r2, [r3, #8]
    3164:	4b10      	ldr	r3, [pc, #64]	; (31a8 <lcd_init+0x78>)
    3166:	4798      	blx	r3
	
	set_backlight(2);
    3168:	2002      	movs	r0, #2
    316a:	4b10      	ldr	r3, [pc, #64]	; (31ac <lcd_init+0x7c>)
    316c:	4798      	blx	r3

	set_contrast(40);
    316e:	2028      	movs	r0, #40	; 0x28
    3170:	4b0f      	ldr	r3, [pc, #60]	; (31b0 <lcd_init+0x80>)
    3172:	4798      	blx	r3

	// Set up initial screen
	memcpy(main_screen_buffer, intro_screen, strlen(intro_screen));
    3174:	4b0f      	ldr	r3, [pc, #60]	; (31b4 <lcd_init+0x84>)
    3176:	681c      	ldr	r4, [r3, #0]
    3178:	4b0e      	ldr	r3, [pc, #56]	; (31b4 <lcd_init+0x84>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	0018      	movs	r0, r3
    317e:	4b0e      	ldr	r3, [pc, #56]	; (31b8 <lcd_init+0x88>)
    3180:	4798      	blx	r3
    3182:	0002      	movs	r2, r0
    3184:	4b0d      	ldr	r3, [pc, #52]	; (31bc <lcd_init+0x8c>)
    3186:	0021      	movs	r1, r4
    3188:	0018      	movs	r0, r3
    318a:	4b0d      	ldr	r3, [pc, #52]	; (31c0 <lcd_init+0x90>)
    318c:	4798      	blx	r3
	send_buffer(MAIN_SCREEN);
    318e:	2000      	movs	r0, #0
    3190:	4b0c      	ldr	r3, [pc, #48]	; (31c4 <lcd_init+0x94>)
    3192:	4798      	blx	r3
 }
    3194:	46c0      	nop			; (mov r8, r8)
    3196:	0018      	movs	r0, r3
    3198:	46bd      	mov	sp, r7
    319a:	b005      	add	sp, #20
    319c:	bd90      	pop	{r4, r7, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	20004f50 	.word	0x20004f50
    31a4:	20000008 	.word	0x20000008
    31a8:	00004569 	.word	0x00004569
    31ac:	000033fd 	.word	0x000033fd
    31b0:	0000337d 	.word	0x0000337d
    31b4:	20000004 	.word	0x20000004
    31b8:	0000b455 	.word	0x0000b455
    31bc:	20004fc4 	.word	0x20004fc4
    31c0:	0000b389 	.word	0x0000b389
    31c4:	000031c9 	.word	0x000031c9

000031c8 <send_buffer>:
	}
	return false;
}

bool send_buffer(SCREEN_TYPE screen)
{
    31c8:	b590      	push	{r4, r7, lr}
    31ca:	b087      	sub	sp, #28
    31cc:	af00      	add	r7, sp, #0
    31ce:	0002      	movs	r2, r0
    31d0:	1dfb      	adds	r3, r7, #7
    31d2:	701a      	strb	r2, [r3, #0]
    */
	// reorganize to this format
	static uint8_t lines_1_3_buffer[40];
	static uint8_t lines_2_4_buffer[40];

	if(screen == MAIN_SCREEN)
    31d4:	1dfb      	adds	r3, r7, #7
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	2b00      	cmp	r3, #0
    31da:	d118      	bne.n	320e <send_buffer+0x46>
	{
		memcpy(&lines_1_3_buffer[0], &main_screen_buffer[0], 20);
    31dc:	4955      	ldr	r1, [pc, #340]	; (3334 <send_buffer+0x16c>)
    31de:	4b56      	ldr	r3, [pc, #344]	; (3338 <send_buffer+0x170>)
    31e0:	2214      	movs	r2, #20
    31e2:	0018      	movs	r0, r3
    31e4:	4b55      	ldr	r3, [pc, #340]	; (333c <send_buffer+0x174>)
    31e6:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &main_screen_buffer[40], 20);
    31e8:	4955      	ldr	r1, [pc, #340]	; (3340 <send_buffer+0x178>)
    31ea:	4b56      	ldr	r3, [pc, #344]	; (3344 <send_buffer+0x17c>)
    31ec:	2214      	movs	r2, #20
    31ee:	0018      	movs	r0, r3
    31f0:	4b52      	ldr	r3, [pc, #328]	; (333c <send_buffer+0x174>)
    31f2:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &main_screen_buffer[20], 20);
    31f4:	4954      	ldr	r1, [pc, #336]	; (3348 <send_buffer+0x180>)
    31f6:	4b55      	ldr	r3, [pc, #340]	; (334c <send_buffer+0x184>)
    31f8:	2214      	movs	r2, #20
    31fa:	0018      	movs	r0, r3
    31fc:	4b4f      	ldr	r3, [pc, #316]	; (333c <send_buffer+0x174>)
    31fe:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &main_screen_buffer[60], 20);
    3200:	4953      	ldr	r1, [pc, #332]	; (3350 <send_buffer+0x188>)
    3202:	4b54      	ldr	r3, [pc, #336]	; (3354 <send_buffer+0x18c>)
    3204:	2214      	movs	r2, #20
    3206:	0018      	movs	r0, r3
    3208:	4b4c      	ldr	r3, [pc, #304]	; (333c <send_buffer+0x174>)
    320a:	4798      	blx	r3
    320c:	e01e      	b.n	324c <send_buffer+0x84>
	}
	else if(screen == ALARM_SCREEN)
    320e:	1dfb      	adds	r3, r7, #7
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	2b01      	cmp	r3, #1
    3214:	d118      	bne.n	3248 <send_buffer+0x80>
	{
		memcpy(&lines_1_3_buffer[0], &alarm_screen_buffer[0], 20);
    3216:	4950      	ldr	r1, [pc, #320]	; (3358 <send_buffer+0x190>)
    3218:	4b47      	ldr	r3, [pc, #284]	; (3338 <send_buffer+0x170>)
    321a:	2214      	movs	r2, #20
    321c:	0018      	movs	r0, r3
    321e:	4b47      	ldr	r3, [pc, #284]	; (333c <send_buffer+0x174>)
    3220:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &alarm_screen_buffer[40], 20);
    3222:	494e      	ldr	r1, [pc, #312]	; (335c <send_buffer+0x194>)
    3224:	4b47      	ldr	r3, [pc, #284]	; (3344 <send_buffer+0x17c>)
    3226:	2214      	movs	r2, #20
    3228:	0018      	movs	r0, r3
    322a:	4b44      	ldr	r3, [pc, #272]	; (333c <send_buffer+0x174>)
    322c:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
    322e:	494c      	ldr	r1, [pc, #304]	; (3360 <send_buffer+0x198>)
    3230:	4b46      	ldr	r3, [pc, #280]	; (334c <send_buffer+0x184>)
    3232:	2214      	movs	r2, #20
    3234:	0018      	movs	r0, r3
    3236:	4b41      	ldr	r3, [pc, #260]	; (333c <send_buffer+0x174>)
    3238:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
    323a:	494a      	ldr	r1, [pc, #296]	; (3364 <send_buffer+0x19c>)
    323c:	4b45      	ldr	r3, [pc, #276]	; (3354 <send_buffer+0x18c>)
    323e:	2214      	movs	r2, #20
    3240:	0018      	movs	r0, r3
    3242:	4b3e      	ldr	r3, [pc, #248]	; (333c <send_buffer+0x174>)
    3244:	4798      	blx	r3
    3246:	e001      	b.n	324c <send_buffer+0x84>
	}
	else
	{
		return false;
    3248:	2300      	movs	r3, #0
    324a:	e06f      	b.n	332c <send_buffer+0x164>
	}

	// Clear any trailing 0s from string creation as those are special characters on the LCD
	for(int32_t i = 0; i < 40; i++)
    324c:	2300      	movs	r3, #0
    324e:	617b      	str	r3, [r7, #20]
    3250:	e018      	b.n	3284 <send_buffer+0xbc>
	{
		if(lines_1_3_buffer[i] < 0x07)
    3252:	4a39      	ldr	r2, [pc, #228]	; (3338 <send_buffer+0x170>)
    3254:	697b      	ldr	r3, [r7, #20]
    3256:	18d3      	adds	r3, r2, r3
    3258:	781b      	ldrb	r3, [r3, #0]
    325a:	2b06      	cmp	r3, #6
    325c:	d804      	bhi.n	3268 <send_buffer+0xa0>
		{
			lines_1_3_buffer[i] = 0x20; // ASCII space
    325e:	4a36      	ldr	r2, [pc, #216]	; (3338 <send_buffer+0x170>)
    3260:	697b      	ldr	r3, [r7, #20]
    3262:	18d3      	adds	r3, r2, r3
    3264:	2220      	movs	r2, #32
    3266:	701a      	strb	r2, [r3, #0]
		}
		if(lines_2_4_buffer[i] < 0x07)
    3268:	4a38      	ldr	r2, [pc, #224]	; (334c <send_buffer+0x184>)
    326a:	697b      	ldr	r3, [r7, #20]
    326c:	18d3      	adds	r3, r2, r3
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	2b06      	cmp	r3, #6
    3272:	d804      	bhi.n	327e <send_buffer+0xb6>
		{
			lines_2_4_buffer[i] = 0x20; // ASCII space
    3274:	4a35      	ldr	r2, [pc, #212]	; (334c <send_buffer+0x184>)
    3276:	697b      	ldr	r3, [r7, #20]
    3278:	18d3      	adds	r3, r2, r3
    327a:	2220      	movs	r2, #32
    327c:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < 40; i++)
    327e:	697b      	ldr	r3, [r7, #20]
    3280:	3301      	adds	r3, #1
    3282:	617b      	str	r3, [r7, #20]
    3284:	697b      	ldr	r3, [r7, #20]
    3286:	2b27      	cmp	r3, #39	; 0x27
    3288:	dde3      	ble.n	3252 <send_buffer+0x8a>

	i2c_transaction_t transaction;

	// First set cursor to start
	static uint8_t cursor_set[3] = {LCD_PREFIX, LCD_COMMAND_SET_CURSOR, 0x00};
	cursor_set_packet.address = LCD_I2C_ADDRESS;
    328a:	4b37      	ldr	r3, [pc, #220]	; (3368 <send_buffer+0x1a0>)
    328c:	2228      	movs	r2, #40	; 0x28
    328e:	801a      	strh	r2, [r3, #0]
	cursor_set_packet.data = cursor_set;
    3290:	4b35      	ldr	r3, [pc, #212]	; (3368 <send_buffer+0x1a0>)
    3292:	4a36      	ldr	r2, [pc, #216]	; (336c <send_buffer+0x1a4>)
    3294:	605a      	str	r2, [r3, #4]
	cursor_set_packet.data_length = 3;
    3296:	4b34      	ldr	r3, [pc, #208]	; (3368 <send_buffer+0x1a0>)
    3298:	2203      	movs	r2, #3
    329a:	805a      	strh	r2, [r3, #2]
	cursor_set_packet.high_speed = false;
    329c:	4b32      	ldr	r3, [pc, #200]	; (3368 <send_buffer+0x1a0>)
    329e:	2200      	movs	r2, #0
    32a0:	725a      	strb	r2, [r3, #9]
	cursor_set_packet.ten_bit_address = false;
    32a2:	4b31      	ldr	r3, [pc, #196]	; (3368 <send_buffer+0x1a0>)
    32a4:	2200      	movs	r2, #0
    32a6:	721a      	strb	r2, [r3, #8]
	transaction.packet = cursor_set_packet;
    32a8:	2308      	movs	r3, #8
    32aa:	18fb      	adds	r3, r7, r3
    32ac:	4a2e      	ldr	r2, [pc, #184]	; (3368 <send_buffer+0x1a0>)
    32ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    32b0:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    32b2:	2308      	movs	r3, #8
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	6818      	ldr	r0, [r3, #0]
    32b8:	6859      	ldr	r1, [r3, #4]
    32ba:	689a      	ldr	r2, [r3, #8]
    32bc:	4b2c      	ldr	r3, [pc, #176]	; (3370 <send_buffer+0x1a8>)
    32be:	4798      	blx	r3

	// Send first and third lines
	screen_buffer_first_half_packet.address = LCD_I2C_ADDRESS;
    32c0:	4b2c      	ldr	r3, [pc, #176]	; (3374 <send_buffer+0x1ac>)
    32c2:	2228      	movs	r2, #40	; 0x28
    32c4:	801a      	strh	r2, [r3, #0]
	screen_buffer_first_half_packet.data = lines_1_3_buffer;
    32c6:	4b2b      	ldr	r3, [pc, #172]	; (3374 <send_buffer+0x1ac>)
    32c8:	4a1b      	ldr	r2, [pc, #108]	; (3338 <send_buffer+0x170>)
    32ca:	605a      	str	r2, [r3, #4]
	screen_buffer_first_half_packet.data_length = 40;
    32cc:	4b29      	ldr	r3, [pc, #164]	; (3374 <send_buffer+0x1ac>)
    32ce:	2228      	movs	r2, #40	; 0x28
    32d0:	805a      	strh	r2, [r3, #2]
	screen_buffer_first_half_packet.high_speed = false;
    32d2:	4b28      	ldr	r3, [pc, #160]	; (3374 <send_buffer+0x1ac>)
    32d4:	2200      	movs	r2, #0
    32d6:	725a      	strb	r2, [r3, #9]
	screen_buffer_first_half_packet.ten_bit_address = false;
    32d8:	4b26      	ldr	r3, [pc, #152]	; (3374 <send_buffer+0x1ac>)
    32da:	2200      	movs	r2, #0
    32dc:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_first_half_packet;
    32de:	2308      	movs	r3, #8
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	4a24      	ldr	r2, [pc, #144]	; (3374 <send_buffer+0x1ac>)
    32e4:	ca13      	ldmia	r2!, {r0, r1, r4}
    32e6:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    32e8:	2308      	movs	r3, #8
    32ea:	18fb      	adds	r3, r7, r3
    32ec:	6818      	ldr	r0, [r3, #0]
    32ee:	6859      	ldr	r1, [r3, #4]
    32f0:	689a      	ldr	r2, [r3, #8]
    32f2:	4b1f      	ldr	r3, [pc, #124]	; (3370 <send_buffer+0x1a8>)
    32f4:	4798      	blx	r3

	// Send second and fourth lines
	screen_buffer_second_half_packet.address = LCD_I2C_ADDRESS;
    32f6:	4b20      	ldr	r3, [pc, #128]	; (3378 <send_buffer+0x1b0>)
    32f8:	2228      	movs	r2, #40	; 0x28
    32fa:	801a      	strh	r2, [r3, #0]
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
    32fc:	4b1e      	ldr	r3, [pc, #120]	; (3378 <send_buffer+0x1b0>)
    32fe:	4a13      	ldr	r2, [pc, #76]	; (334c <send_buffer+0x184>)
    3300:	605a      	str	r2, [r3, #4]
	screen_buffer_second_half_packet.data_length = 40;
    3302:	4b1d      	ldr	r3, [pc, #116]	; (3378 <send_buffer+0x1b0>)
    3304:	2228      	movs	r2, #40	; 0x28
    3306:	805a      	strh	r2, [r3, #2]
	screen_buffer_second_half_packet.high_speed = false;
    3308:	4b1b      	ldr	r3, [pc, #108]	; (3378 <send_buffer+0x1b0>)
    330a:	2200      	movs	r2, #0
    330c:	725a      	strb	r2, [r3, #9]
	screen_buffer_second_half_packet.ten_bit_address = false;
    330e:	4b1a      	ldr	r3, [pc, #104]	; (3378 <send_buffer+0x1b0>)
    3310:	2200      	movs	r2, #0
    3312:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_second_half_packet;
    3314:	2308      	movs	r3, #8
    3316:	18fb      	adds	r3, r7, r3
    3318:	4a17      	ldr	r2, [pc, #92]	; (3378 <send_buffer+0x1b0>)
    331a:	ca13      	ldmia	r2!, {r0, r1, r4}
    331c:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    331e:	2308      	movs	r3, #8
    3320:	18fb      	adds	r3, r7, r3
    3322:	6818      	ldr	r0, [r3, #0]
    3324:	6859      	ldr	r1, [r3, #4]
    3326:	689a      	ldr	r2, [r3, #8]
    3328:	4b11      	ldr	r3, [pc, #68]	; (3370 <send_buffer+0x1a8>)
    332a:	4798      	blx	r3
}
    332c:	0018      	movs	r0, r3
    332e:	46bd      	mov	sp, r7
    3330:	b007      	add	sp, #28
    3332:	bd90      	pop	{r4, r7, pc}
    3334:	20004fc4 	.word	0x20004fc4
    3338:	20005014 	.word	0x20005014
    333c:	0000b389 	.word	0x0000b389
    3340:	20004fec 	.word	0x20004fec
    3344:	20005028 	.word	0x20005028
    3348:	20004fd8 	.word	0x20004fd8
    334c:	2000503c 	.word	0x2000503c
    3350:	20005000 	.word	0x20005000
    3354:	20005050 	.word	0x20005050
    3358:	20004f74 	.word	0x20004f74
    335c:	20004f9c 	.word	0x20004f9c
    3360:	20004f88 	.word	0x20004f88
    3364:	20004fb0 	.word	0x20004fb0
    3368:	20004f44 	.word	0x20004f44
    336c:	2000000c 	.word	0x2000000c
    3370:	00004569 	.word	0x00004569
    3374:	20004f2c 	.word	0x20004f2c
    3378:	20004f38 	.word	0x20004f38

0000337c <set_contrast>:

bool set_contrast(uint8_t level)
{
    337c:	b590      	push	{r4, r7, lr}
    337e:	b087      	sub	sp, #28
    3380:	af00      	add	r7, sp, #0
    3382:	0002      	movs	r2, r0
    3384:	1dfb      	adds	r3, r7, #7
    3386:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 50)
    3388:	1dfb      	adds	r3, r7, #7
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	2b00      	cmp	r3, #0
    338e:	d003      	beq.n	3398 <set_contrast+0x1c>
    3390:	1dfb      	adds	r3, r7, #7
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	2b32      	cmp	r3, #50	; 0x32
    3396:	d901      	bls.n	339c <set_contrast+0x20>
	{
		return false;
    3398:	2300      	movs	r3, #0
    339a:	e025      	b.n	33e8 <set_contrast+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    339c:	4b14      	ldr	r3, [pc, #80]	; (33f0 <set_contrast+0x74>)
    339e:	22fe      	movs	r2, #254	; 0xfe
    33a0:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_CONTRAST;
    33a2:	4b13      	ldr	r3, [pc, #76]	; (33f0 <set_contrast+0x74>)
    33a4:	2252      	movs	r2, #82	; 0x52
    33a6:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    33a8:	4b11      	ldr	r3, [pc, #68]	; (33f0 <set_contrast+0x74>)
    33aa:	1dfa      	adds	r2, r7, #7
    33ac:	7812      	ldrb	r2, [r2, #0]
    33ae:	709a      	strb	r2, [r3, #2]
	contrast_packet.address = LCD_I2C_ADDRESS;
    33b0:	4b10      	ldr	r3, [pc, #64]	; (33f4 <set_contrast+0x78>)
    33b2:	2228      	movs	r2, #40	; 0x28
    33b4:	801a      	strh	r2, [r3, #0]
	contrast_packet.data = data_to_send;
    33b6:	4b0f      	ldr	r3, [pc, #60]	; (33f4 <set_contrast+0x78>)
    33b8:	4a0d      	ldr	r2, [pc, #52]	; (33f0 <set_contrast+0x74>)
    33ba:	605a      	str	r2, [r3, #4]
	contrast_packet.data_length = 3;
    33bc:	4b0d      	ldr	r3, [pc, #52]	; (33f4 <set_contrast+0x78>)
    33be:	2203      	movs	r2, #3
    33c0:	805a      	strh	r2, [r3, #2]
	contrast_packet.high_speed = false;
    33c2:	4b0c      	ldr	r3, [pc, #48]	; (33f4 <set_contrast+0x78>)
    33c4:	2200      	movs	r2, #0
    33c6:	725a      	strb	r2, [r3, #9]
	contrast_packet.ten_bit_address = false;
    33c8:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <set_contrast+0x78>)
    33ca:	2200      	movs	r2, #0
    33cc:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = contrast_packet;
    33ce:	230c      	movs	r3, #12
    33d0:	18fb      	adds	r3, r7, r3
    33d2:	4a08      	ldr	r2, [pc, #32]	; (33f4 <set_contrast+0x78>)
    33d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    33d6:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    33d8:	230c      	movs	r3, #12
    33da:	18fb      	adds	r3, r7, r3
    33dc:	6818      	ldr	r0, [r3, #0]
    33de:	6859      	ldr	r1, [r3, #4]
    33e0:	689a      	ldr	r2, [r3, #8]
    33e2:	4b05      	ldr	r3, [pc, #20]	; (33f8 <set_contrast+0x7c>)
    33e4:	4798      	blx	r3
	return true;
    33e6:	2301      	movs	r3, #1
}
    33e8:	0018      	movs	r0, r3
    33ea:	46bd      	mov	sp, r7
    33ec:	b007      	add	sp, #28
    33ee:	bd90      	pop	{r4, r7, pc}
    33f0:	20005064 	.word	0x20005064
    33f4:	20004f5c 	.word	0x20004f5c
    33f8:	00004569 	.word	0x00004569

000033fc <set_backlight>:

bool set_backlight(uint8_t level)
{
    33fc:	b590      	push	{r4, r7, lr}
    33fe:	b087      	sub	sp, #28
    3400:	af00      	add	r7, sp, #0
    3402:	0002      	movs	r2, r0
    3404:	1dfb      	adds	r3, r7, #7
    3406:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 8)
    3408:	1dfb      	adds	r3, r7, #7
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	2b00      	cmp	r3, #0
    340e:	d003      	beq.n	3418 <set_backlight+0x1c>
    3410:	1dfb      	adds	r3, r7, #7
    3412:	781b      	ldrb	r3, [r3, #0]
    3414:	2b08      	cmp	r3, #8
    3416:	d901      	bls.n	341c <set_backlight+0x20>
	{
		return false;
    3418:	2300      	movs	r3, #0
    341a:	e025      	b.n	3468 <set_backlight+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    341c:	4b14      	ldr	r3, [pc, #80]	; (3470 <set_backlight+0x74>)
    341e:	22fe      	movs	r2, #254	; 0xfe
    3420:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_BRIGHTNESS;
    3422:	4b13      	ldr	r3, [pc, #76]	; (3470 <set_backlight+0x74>)
    3424:	2253      	movs	r2, #83	; 0x53
    3426:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    3428:	4b11      	ldr	r3, [pc, #68]	; (3470 <set_backlight+0x74>)
    342a:	1dfa      	adds	r2, r7, #7
    342c:	7812      	ldrb	r2, [r2, #0]
    342e:	709a      	strb	r2, [r3, #2]
	backlight_packet.address = LCD_I2C_ADDRESS;
    3430:	4b10      	ldr	r3, [pc, #64]	; (3474 <set_backlight+0x78>)
    3432:	2228      	movs	r2, #40	; 0x28
    3434:	801a      	strh	r2, [r3, #0]
	backlight_packet.data = data_to_send;
    3436:	4b0f      	ldr	r3, [pc, #60]	; (3474 <set_backlight+0x78>)
    3438:	4a0d      	ldr	r2, [pc, #52]	; (3470 <set_backlight+0x74>)
    343a:	605a      	str	r2, [r3, #4]
	backlight_packet.data_length = 3;
    343c:	4b0d      	ldr	r3, [pc, #52]	; (3474 <set_backlight+0x78>)
    343e:	2203      	movs	r2, #3
    3440:	805a      	strh	r2, [r3, #2]
	backlight_packet.high_speed = false;
    3442:	4b0c      	ldr	r3, [pc, #48]	; (3474 <set_backlight+0x78>)
    3444:	2200      	movs	r2, #0
    3446:	725a      	strb	r2, [r3, #9]
	backlight_packet.ten_bit_address = false;
    3448:	4b0a      	ldr	r3, [pc, #40]	; (3474 <set_backlight+0x78>)
    344a:	2200      	movs	r2, #0
    344c:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = backlight_packet;
    344e:	230c      	movs	r3, #12
    3450:	18fb      	adds	r3, r7, r3
    3452:	4a08      	ldr	r2, [pc, #32]	; (3474 <set_backlight+0x78>)
    3454:	ca13      	ldmia	r2!, {r0, r1, r4}
    3456:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    3458:	230c      	movs	r3, #12
    345a:	18fb      	adds	r3, r7, r3
    345c:	6818      	ldr	r0, [r3, #0]
    345e:	6859      	ldr	r1, [r3, #4]
    3460:	689a      	ldr	r2, [r3, #8]
    3462:	4b05      	ldr	r3, [pc, #20]	; (3478 <set_backlight+0x7c>)
    3464:	4798      	blx	r3
	return true;
    3466:	2301      	movs	r3, #1
}
    3468:	0018      	movs	r0, r3
    346a:	46bd      	mov	sp, r7
    346c:	b007      	add	sp, #28
    346e:	bd90      	pop	{r4, r7, pc}
    3470:	20005068 	.word	0x20005068
    3474:	20004f68 	.word	0x20004f68
    3478:	00004569 	.word	0x00004569

0000347c <update_main_buffer>:

void update_main_buffer(lcv_parameters_t * new_settings,  SETTINGS_INPUT_STAGE stage)
{
    347c:	b590      	push	{r4, r7, lr}
    347e:	b08d      	sub	sp, #52	; 0x34
    3480:	af02      	add	r7, sp, #8
    3482:	6078      	str	r0, [r7, #4]
    3484:	000a      	movs	r2, r1
    3486:	1cfb      	adds	r3, r7, #3
    3488:	701a      	strb	r2, [r3, #0]
	lcv_parameters_t current_settings = get_current_settings();
    348a:	230c      	movs	r3, #12
    348c:	18fb      	adds	r3, r7, r3
    348e:	0018      	movs	r0, r3
    3490:	4b59      	ldr	r3, [pc, #356]	; (35f8 <update_main_buffer+0x17c>)
    3492:	4798      	blx	r3

	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    3494:	2300      	movs	r3, #0
    3496:	627b      	str	r3, [r7, #36]	; 0x24
    3498:	e007      	b.n	34aa <update_main_buffer+0x2e>
	{
		main_screen_buffer[i] = 0x20; // ASCII space
    349a:	4a58      	ldr	r2, [pc, #352]	; (35fc <update_main_buffer+0x180>)
    349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    349e:	18d3      	adds	r3, r2, r3
    34a0:	2220      	movs	r2, #32
    34a2:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    34a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34a6:	3301      	adds	r3, #1
    34a8:	627b      	str	r3, [r7, #36]	; 0x24
    34aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34ac:	2b4f      	cmp	r3, #79	; 0x4f
    34ae:	ddf4      	ble.n	349a <update_main_buffer+0x1e>
	}

	// Update info
	// NOTE: snprintf here doesn't support floats
	if(current_settings.enable)
    34b0:	230c      	movs	r3, #12
    34b2:	18fb      	adds	r3, r7, r3
    34b4:	781b      	ldrb	r3, [r3, #0]
    34b6:	2201      	movs	r2, #1
    34b8:	4013      	ands	r3, r2
    34ba:	b2db      	uxtb	r3, r3
    34bc:	2b00      	cmp	r3, #0
    34be:	d004      	beq.n	34ca <update_main_buffer+0x4e>
	{
		snprintf(&main_screen_buffer[0],9,"VENT:ON");
    34c0:	4b4e      	ldr	r3, [pc, #312]	; (35fc <update_main_buffer+0x180>)
    34c2:	4a4f      	ldr	r2, [pc, #316]	; (3600 <update_main_buffer+0x184>)
    34c4:	ca03      	ldmia	r2!, {r0, r1}
    34c6:	c303      	stmia	r3!, {r0, r1}
    34c8:	e005      	b.n	34d6 <update_main_buffer+0x5a>
	}
	else
	{
		snprintf(&main_screen_buffer[0],9,"VENT:OFF");
    34ca:	4b4c      	ldr	r3, [pc, #304]	; (35fc <update_main_buffer+0x180>)
    34cc:	4a4d      	ldr	r2, [pc, #308]	; (3604 <update_main_buffer+0x188>)
    34ce:	ca03      	ldmia	r2!, {r0, r1}
    34d0:	c303      	stmia	r3!, {r0, r1}
    34d2:	7812      	ldrb	r2, [r2, #0]
    34d4:	701a      	strb	r2, [r3, #0]
	}

	snprintf(&main_screen_buffer[10],10, "V:%iml", current_settings.tidal_volume_ml);
    34d6:	230c      	movs	r3, #12
    34d8:	18fb      	adds	r3, r7, r3
    34da:	685b      	ldr	r3, [r3, #4]
    34dc:	4a4a      	ldr	r2, [pc, #296]	; (3608 <update_main_buffer+0x18c>)
    34de:	484b      	ldr	r0, [pc, #300]	; (360c <update_main_buffer+0x190>)
    34e0:	210a      	movs	r1, #10
    34e2:	4c4b      	ldr	r4, [pc, #300]	; (3610 <update_main_buffer+0x194>)
    34e4:	47a0      	blx	r4

	snprintf(&main_screen_buffer[20],13, "PEEP:%icmH20", current_settings.peep_cm_h20);
    34e6:	230c      	movs	r3, #12
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	689b      	ldr	r3, [r3, #8]
    34ec:	4a49      	ldr	r2, [pc, #292]	; (3614 <update_main_buffer+0x198>)
    34ee:	484a      	ldr	r0, [pc, #296]	; (3618 <update_main_buffer+0x19c>)
    34f0:	210d      	movs	r1, #13
    34f2:	4c47      	ldr	r4, [pc, #284]	; (3610 <update_main_buffer+0x194>)
    34f4:	47a0      	blx	r4

	uint8_t current_inspiratory_ones = current_settings.ie_ratio_tenths / 10;
    34f6:	230c      	movs	r3, #12
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	785a      	ldrb	r2, [r3, #1]
    34fc:	2323      	movs	r3, #35	; 0x23
    34fe:	18fc      	adds	r4, r7, r3
    3500:	4b46      	ldr	r3, [pc, #280]	; (361c <update_main_buffer+0x1a0>)
    3502:	210a      	movs	r1, #10
    3504:	0010      	movs	r0, r2
    3506:	4798      	blx	r3
    3508:	0003      	movs	r3, r0
    350a:	7023      	strb	r3, [r4, #0]
	uint8_t current_inspiratory_tenths = current_settings.ie_ratio_tenths - (10*current_inspiratory_ones);
    350c:	230c      	movs	r3, #12
    350e:	18fb      	adds	r3, r7, r3
    3510:	7859      	ldrb	r1, [r3, #1]
    3512:	2323      	movs	r3, #35	; 0x23
    3514:	18fb      	adds	r3, r7, r3
    3516:	781b      	ldrb	r3, [r3, #0]
    3518:	220a      	movs	r2, #10
    351a:	4252      	negs	r2, r2
    351c:	4353      	muls	r3, r2
    351e:	b2da      	uxtb	r2, r3
    3520:	2322      	movs	r3, #34	; 0x22
    3522:	18fb      	adds	r3, r7, r3
    3524:	188a      	adds	r2, r1, r2
    3526:	701a      	strb	r2, [r3, #0]
	snprintf(&main_screen_buffer[32],9, "IE:%i.%i:1", current_inspiratory_ones, current_inspiratory_tenths);
    3528:	2323      	movs	r3, #35	; 0x23
    352a:	18fb      	adds	r3, r7, r3
    352c:	7819      	ldrb	r1, [r3, #0]
    352e:	2322      	movs	r3, #34	; 0x22
    3530:	18fb      	adds	r3, r7, r3
    3532:	781b      	ldrb	r3, [r3, #0]
    3534:	4a3a      	ldr	r2, [pc, #232]	; (3620 <update_main_buffer+0x1a4>)
    3536:	483b      	ldr	r0, [pc, #236]	; (3624 <update_main_buffer+0x1a8>)
    3538:	9300      	str	r3, [sp, #0]
    353a:	000b      	movs	r3, r1
    353c:	2109      	movs	r1, #9
    353e:	4c34      	ldr	r4, [pc, #208]	; (3610 <update_main_buffer+0x194>)
    3540:	47a0      	blx	r4

	snprintf(&main_screen_buffer[40],13, "PIP:%icmH20", current_settings.pip_cm_h20);
    3542:	230c      	movs	r3, #12
    3544:	18fb      	adds	r3, r7, r3
    3546:	68db      	ldr	r3, [r3, #12]
    3548:	4a37      	ldr	r2, [pc, #220]	; (3628 <update_main_buffer+0x1ac>)
    354a:	4838      	ldr	r0, [pc, #224]	; (362c <update_main_buffer+0x1b0>)
    354c:	210d      	movs	r1, #13
    354e:	4c30      	ldr	r4, [pc, #192]	; (3610 <update_main_buffer+0x194>)
    3550:	47a0      	blx	r4

	snprintf(&main_screen_buffer[52],7, "BPM:%i", current_settings.breath_per_min);
    3552:	230c      	movs	r3, #12
    3554:	18fb      	adds	r3, r7, r3
    3556:	691b      	ldr	r3, [r3, #16]
    3558:	4a35      	ldr	r2, [pc, #212]	; (3630 <update_main_buffer+0x1b4>)
    355a:	4836      	ldr	r0, [pc, #216]	; (3634 <update_main_buffer+0x1b8>)
    355c:	2107      	movs	r1, #7
    355e:	4c2c      	ldr	r4, [pc, #176]	; (3610 <update_main_buffer+0x194>)
    3560:	47a0      	blx	r4

	// Fill in settings input display
	uint8_t setting_inspiratory_ones = new_settings->ie_ratio_tenths / 10;
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	785a      	ldrb	r2, [r3, #1]
    3566:	2321      	movs	r3, #33	; 0x21
    3568:	18fc      	adds	r4, r7, r3
    356a:	4b2c      	ldr	r3, [pc, #176]	; (361c <update_main_buffer+0x1a0>)
    356c:	210a      	movs	r1, #10
    356e:	0010      	movs	r0, r2
    3570:	4798      	blx	r3
    3572:	0003      	movs	r3, r0
    3574:	7023      	strb	r3, [r4, #0]
	uint8_t setting_inspiratory_tenths = new_settings->ie_ratio_tenths - (10*setting_inspiratory_ones);
    3576:	687b      	ldr	r3, [r7, #4]
    3578:	7859      	ldrb	r1, [r3, #1]
    357a:	2321      	movs	r3, #33	; 0x21
    357c:	18fb      	adds	r3, r7, r3
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	220a      	movs	r2, #10
    3582:	4252      	negs	r2, r2
    3584:	4353      	muls	r3, r2
    3586:	b2da      	uxtb	r2, r3
    3588:	2320      	movs	r3, #32
    358a:	18fb      	adds	r3, r7, r3
    358c:	188a      	adds	r2, r1, r2
    358e:	701a      	strb	r2, [r3, #0]

	switch (stage)
    3590:	1cfb      	adds	r3, r7, #3
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b04      	cmp	r3, #4
    3596:	d827      	bhi.n	35e8 <update_main_buffer+0x16c>
    3598:	009a      	lsls	r2, r3, #2
    359a:	4b27      	ldr	r3, [pc, #156]	; (3638 <update_main_buffer+0x1bc>)
    359c:	18d3      	adds	r3, r2, r3
    359e:	681b      	ldr	r3, [r3, #0]
    35a0:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
			break;

		case STAGE_BPM:
			sprintf(&main_screen_buffer[60], "SET BPM:%i", new_settings->breath_per_min);
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	691a      	ldr	r2, [r3, #16]
    35a6:	4925      	ldr	r1, [pc, #148]	; (363c <update_main_buffer+0x1c0>)
    35a8:	4b25      	ldr	r3, [pc, #148]	; (3640 <update_main_buffer+0x1c4>)
    35aa:	0018      	movs	r0, r3
    35ac:	4b25      	ldr	r3, [pc, #148]	; (3644 <update_main_buffer+0x1c8>)
    35ae:	4798      	blx	r3
			break;
    35b0:	e01d      	b.n	35ee <update_main_buffer+0x172>

		case STAGE_PEEP:
			sprintf(&main_screen_buffer[60], "SET PEEP:%icmH20", new_settings->peep_cm_h20);
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	689a      	ldr	r2, [r3, #8]
    35b6:	4924      	ldr	r1, [pc, #144]	; (3648 <update_main_buffer+0x1cc>)
    35b8:	4b21      	ldr	r3, [pc, #132]	; (3640 <update_main_buffer+0x1c4>)
    35ba:	0018      	movs	r0, r3
    35bc:	4b21      	ldr	r3, [pc, #132]	; (3644 <update_main_buffer+0x1c8>)
    35be:	4798      	blx	r3
			break;
    35c0:	e015      	b.n	35ee <update_main_buffer+0x172>

		case STAGE_PIP:
			sprintf(&main_screen_buffer[60], "SET PIP:%icmH20", new_settings->pip_cm_h20);
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	68da      	ldr	r2, [r3, #12]
    35c6:	4921      	ldr	r1, [pc, #132]	; (364c <update_main_buffer+0x1d0>)
    35c8:	4b1d      	ldr	r3, [pc, #116]	; (3640 <update_main_buffer+0x1c4>)
    35ca:	0018      	movs	r0, r3
    35cc:	4b1d      	ldr	r3, [pc, #116]	; (3644 <update_main_buffer+0x1c8>)
    35ce:	4798      	blx	r3
			break;
    35d0:	e00d      	b.n	35ee <update_main_buffer+0x172>

		case STAGE_IE:
			sprintf(&main_screen_buffer[60], "SET I:E: %i.%i:1", setting_inspiratory_ones, setting_inspiratory_tenths);
    35d2:	2321      	movs	r3, #33	; 0x21
    35d4:	18fb      	adds	r3, r7, r3
    35d6:	781a      	ldrb	r2, [r3, #0]
    35d8:	2320      	movs	r3, #32
    35da:	18fb      	adds	r3, r7, r3
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	491c      	ldr	r1, [pc, #112]	; (3650 <update_main_buffer+0x1d4>)
    35e0:	4817      	ldr	r0, [pc, #92]	; (3640 <update_main_buffer+0x1c4>)
    35e2:	4c18      	ldr	r4, [pc, #96]	; (3644 <update_main_buffer+0x1c8>)
    35e4:	47a0      	blx	r4
			break;
    35e6:	e002      	b.n	35ee <update_main_buffer+0x172>
		
		default:
			break;
    35e8:	46c0      	nop			; (mov r8, r8)
    35ea:	e000      	b.n	35ee <update_main_buffer+0x172>
			break;
    35ec:	46c0      	nop			; (mov r8, r8)
	}
}
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	46bd      	mov	sp, r7
    35f2:	b00b      	add	sp, #44	; 0x2c
    35f4:	bd90      	pop	{r4, r7, pc}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	00003c11 	.word	0x00003c11
    35fc:	20004fc4 	.word	0x20004fc4
    3600:	0000bd88 	.word	0x0000bd88
    3604:	0000bd90 	.word	0x0000bd90
    3608:	0000bd9c 	.word	0x0000bd9c
    360c:	20004fce 	.word	0x20004fce
    3610:	0000b3ad 	.word	0x0000b3ad
    3614:	0000bda4 	.word	0x0000bda4
    3618:	20004fd8 	.word	0x20004fd8
    361c:	000086a9 	.word	0x000086a9
    3620:	0000bdb4 	.word	0x0000bdb4
    3624:	20004fe4 	.word	0x20004fe4
    3628:	0000bdc0 	.word	0x0000bdc0
    362c:	20004fec 	.word	0x20004fec
    3630:	0000bdcc 	.word	0x0000bdcc
    3634:	20004ff8 	.word	0x20004ff8
    3638:	0000be60 	.word	0x0000be60
    363c:	0000bdd4 	.word	0x0000bdd4
    3640:	20005000 	.word	0x20005000
    3644:	0000b411 	.word	0x0000b411
    3648:	0000bde0 	.word	0x0000bde0
    364c:	0000bdf4 	.word	0x0000bdf4
    3650:	0000be04 	.word	0x0000be04

00003654 <update_alarm_buffer>:

void update_alarm_buffer(void)
{
    3654:	b580      	push	{r7, lr}
    3656:	b082      	sub	sp, #8
    3658:	af00      	add	r7, sp, #0
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    365a:	2300      	movs	r3, #0
    365c:	607b      	str	r3, [r7, #4]
    365e:	e007      	b.n	3670 <update_alarm_buffer+0x1c>
	{
		alarm_screen_buffer[i] = 0x20; // ASCII space
    3660:	4a2e      	ldr	r2, [pc, #184]	; (371c <update_alarm_buffer+0xc8>)
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	18d3      	adds	r3, r2, r3
    3666:	2220      	movs	r2, #32
    3668:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	3301      	adds	r3, #1
    366e:	607b      	str	r3, [r7, #4]
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	2b4f      	cmp	r3, #79	; 0x4f
    3674:	ddf4      	ble.n	3660 <update_alarm_buffer+0xc>
	}

	snprintf(&alarm_screen_buffer[0],9,"ERRORS:");
    3676:	4b29      	ldr	r3, [pc, #164]	; (371c <update_alarm_buffer+0xc8>)
    3678:	4a29      	ldr	r2, [pc, #164]	; (3720 <update_alarm_buffer+0xcc>)
    367a:	ca03      	ldmia	r2!, {r0, r1}
    367c:	c303      	stmia	r3!, {r0, r1}

	if(check_alarm(ALARM_FLOW_SENSOR))
    367e:	2000      	movs	r0, #0
    3680:	4b28      	ldr	r3, [pc, #160]	; (3724 <update_alarm_buffer+0xd0>)
    3682:	4798      	blx	r3
    3684:	1e03      	subs	r3, r0, #0
    3686:	d007      	beq.n	3698 <update_alarm_buffer+0x44>
	{
		snprintf(&alarm_screen_buffer[10],10,"FLOW");
    3688:	4a27      	ldr	r2, [pc, #156]	; (3728 <update_alarm_buffer+0xd4>)
    368a:	4b28      	ldr	r3, [pc, #160]	; (372c <update_alarm_buffer+0xd8>)
    368c:	0010      	movs	r0, r2
    368e:	0019      	movs	r1, r3
    3690:	2305      	movs	r3, #5
    3692:	001a      	movs	r2, r3
    3694:	4b26      	ldr	r3, [pc, #152]	; (3730 <update_alarm_buffer+0xdc>)
    3696:	4798      	blx	r3
	}

	if(check_alarm(ALARM_PRESSURE_SENSOR))
    3698:	2002      	movs	r0, #2
    369a:	4b22      	ldr	r3, [pc, #136]	; (3724 <update_alarm_buffer+0xd0>)
    369c:	4798      	blx	r3
    369e:	1e03      	subs	r3, r0, #0
    36a0:	d005      	beq.n	36ae <update_alarm_buffer+0x5a>
	{
		snprintf(&alarm_screen_buffer[20],10,"PRES SNS");
    36a2:	4b24      	ldr	r3, [pc, #144]	; (3734 <update_alarm_buffer+0xe0>)
    36a4:	4a24      	ldr	r2, [pc, #144]	; (3738 <update_alarm_buffer+0xe4>)
    36a6:	ca03      	ldmia	r2!, {r0, r1}
    36a8:	c303      	stmia	r3!, {r0, r1}
    36aa:	7812      	ldrb	r2, [r2, #0]
    36ac:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_MOTOR_ERROR))
    36ae:	2003      	movs	r0, #3
    36b0:	4b1c      	ldr	r3, [pc, #112]	; (3724 <update_alarm_buffer+0xd0>)
    36b2:	4798      	blx	r3
    36b4:	1e03      	subs	r3, r0, #0
    36b6:	d007      	beq.n	36c8 <update_alarm_buffer+0x74>
	{
		snprintf(&alarm_screen_buffer[30],10,"MOT FAIL");
    36b8:	4a20      	ldr	r2, [pc, #128]	; (373c <update_alarm_buffer+0xe8>)
    36ba:	4b21      	ldr	r3, [pc, #132]	; (3740 <update_alarm_buffer+0xec>)
    36bc:	0010      	movs	r0, r2
    36be:	0019      	movs	r1, r3
    36c0:	2309      	movs	r3, #9
    36c2:	001a      	movs	r2, r3
    36c4:	4b1a      	ldr	r3, [pc, #104]	; (3730 <update_alarm_buffer+0xdc>)
    36c6:	4798      	blx	r3
	}

	if(check_alarm(ALARM_MOTOR_TEMP))
    36c8:	2004      	movs	r0, #4
    36ca:	4b16      	ldr	r3, [pc, #88]	; (3724 <update_alarm_buffer+0xd0>)
    36cc:	4798      	blx	r3
    36ce:	1e03      	subs	r3, r0, #0
    36d0:	d005      	beq.n	36de <update_alarm_buffer+0x8a>
	{
		snprintf(&alarm_screen_buffer[40],10,"MOT TEMP");
    36d2:	4b1c      	ldr	r3, [pc, #112]	; (3744 <update_alarm_buffer+0xf0>)
    36d4:	4a1c      	ldr	r2, [pc, #112]	; (3748 <update_alarm_buffer+0xf4>)
    36d6:	ca03      	ldmia	r2!, {r0, r1}
    36d8:	c303      	stmia	r3!, {r0, r1}
    36da:	7812      	ldrb	r2, [r2, #0]
    36dc:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_SETTINGS_LOAD))
    36de:	2005      	movs	r0, #5
    36e0:	4b10      	ldr	r3, [pc, #64]	; (3724 <update_alarm_buffer+0xd0>)
    36e2:	4798      	blx	r3
    36e4:	1e03      	subs	r3, r0, #0
    36e6:	d007      	beq.n	36f8 <update_alarm_buffer+0xa4>
	{
		snprintf(&alarm_screen_buffer[50],10,"SETT LOAD");
    36e8:	4a18      	ldr	r2, [pc, #96]	; (374c <update_alarm_buffer+0xf8>)
    36ea:	4b19      	ldr	r3, [pc, #100]	; (3750 <update_alarm_buffer+0xfc>)
    36ec:	0010      	movs	r0, r2
    36ee:	0019      	movs	r1, r3
    36f0:	230a      	movs	r3, #10
    36f2:	001a      	movs	r2, r3
    36f4:	4b0e      	ldr	r3, [pc, #56]	; (3730 <update_alarm_buffer+0xdc>)
    36f6:	4798      	blx	r3
	}

	if(check_alarm(ALARM_P_RAMP_SETTINGS_INVALID))
    36f8:	2006      	movs	r0, #6
    36fa:	4b0a      	ldr	r3, [pc, #40]	; (3724 <update_alarm_buffer+0xd0>)
    36fc:	4798      	blx	r3
    36fe:	1e03      	subs	r3, r0, #0
    3700:	d007      	beq.n	3712 <update_alarm_buffer+0xbe>
	{
		snprintf(&alarm_screen_buffer[60],10,"P RISE");
    3702:	4b14      	ldr	r3, [pc, #80]	; (3754 <update_alarm_buffer+0x100>)
    3704:	4a14      	ldr	r2, [pc, #80]	; (3758 <update_alarm_buffer+0x104>)
    3706:	6811      	ldr	r1, [r2, #0]
    3708:	6019      	str	r1, [r3, #0]
    370a:	8891      	ldrh	r1, [r2, #4]
    370c:	8099      	strh	r1, [r3, #4]
    370e:	7992      	ldrb	r2, [r2, #6]
    3710:	719a      	strb	r2, [r3, #6]
	}
    3712:	46c0      	nop			; (mov r8, r8)
    3714:	46bd      	mov	sp, r7
    3716:	b002      	add	sp, #8
    3718:	bd80      	pop	{r7, pc}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	20004f74 	.word	0x20004f74
    3720:	0000be18 	.word	0x0000be18
    3724:	00002a59 	.word	0x00002a59
    3728:	20004f7e 	.word	0x20004f7e
    372c:	0000be20 	.word	0x0000be20
    3730:	0000b389 	.word	0x0000b389
    3734:	20004f88 	.word	0x20004f88
    3738:	0000be28 	.word	0x0000be28
    373c:	20004f92 	.word	0x20004f92
    3740:	0000be34 	.word	0x0000be34
    3744:	20004f9c 	.word	0x20004f9c
    3748:	0000be40 	.word	0x0000be40
    374c:	20004fa6 	.word	0x20004fa6
    3750:	0000be4c 	.word	0x0000be4c
    3754:	20004fb0 	.word	0x20004fb0
    3758:	0000be58 	.word	0x0000be58

0000375c <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    375c:	b580      	push	{r7, lr}
    375e:	b082      	sub	sp, #8
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	095b      	lsrs	r3, r3, #5
}
    3768:	0018      	movs	r0, r3
    376a:	46bd      	mov	sp, r7
    376c:	b002      	add	sp, #8
    376e:	bd80      	pop	{r7, pc}

00003770 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    3770:	b580      	push	{r7, lr}
    3772:	b082      	sub	sp, #8
    3774:	af00      	add	r7, sp, #0
    3776:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	01db      	lsls	r3, r3, #7
    377c:	4a03      	ldr	r2, [pc, #12]	; (378c <arch_ioport_port_to_base+0x1c>)
    377e:	4694      	mov	ip, r2
    3780:	4463      	add	r3, ip
}
    3782:	0018      	movs	r0, r3
    3784:	46bd      	mov	sp, r7
    3786:	b002      	add	sp, #8
    3788:	bd80      	pop	{r7, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	41004400 	.word	0x41004400

00003790 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    3790:	b580      	push	{r7, lr}
    3792:	b082      	sub	sp, #8
    3794:	af00      	add	r7, sp, #0
    3796:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	0018      	movs	r0, r3
    379c:	4b05      	ldr	r3, [pc, #20]	; (37b4 <arch_ioport_pin_to_base+0x24>)
    379e:	4798      	blx	r3
    37a0:	0003      	movs	r3, r0
    37a2:	0018      	movs	r0, r3
    37a4:	4b04      	ldr	r3, [pc, #16]	; (37b8 <arch_ioport_pin_to_base+0x28>)
    37a6:	4798      	blx	r3
    37a8:	0003      	movs	r3, r0
}
    37aa:	0018      	movs	r0, r3
    37ac:	46bd      	mov	sp, r7
    37ae:	b002      	add	sp, #8
    37b0:	bd80      	pop	{r7, pc}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	0000375d 	.word	0x0000375d
    37b8:	00003771 	.word	0x00003771

000037bc <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    37bc:	b580      	push	{r7, lr}
    37be:	b082      	sub	sp, #8
    37c0:	af00      	add	r7, sp, #0
    37c2:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    37c4:	687b      	ldr	r3, [r7, #4]
    37c6:	221f      	movs	r2, #31
    37c8:	4013      	ands	r3, r2
    37ca:	2201      	movs	r2, #1
    37cc:	409a      	lsls	r2, r3
    37ce:	0013      	movs	r3, r2
}
    37d0:	0018      	movs	r0, r3
    37d2:	46bd      	mov	sp, r7
    37d4:	b002      	add	sp, #8
    37d6:	bd80      	pop	{r7, pc}

000037d8 <arch_ioport_set_pin_level>:
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b083      	sub	sp, #12
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	000a      	movs	r2, r1
    37e2:	1cfb      	adds	r3, r7, #3
    37e4:	701a      	strb	r2, [r3, #0]
	if (level) {
    37e6:	1cfb      	adds	r3, r7, #3
    37e8:	781b      	ldrb	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d00b      	beq.n	3806 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	0018      	movs	r0, r3
    37f2:	4b0c      	ldr	r3, [pc, #48]	; (3824 <arch_ioport_set_pin_level+0x4c>)
    37f4:	4798      	blx	r3
    37f6:	0004      	movs	r4, r0
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	0018      	movs	r0, r3
    37fc:	4b0a      	ldr	r3, [pc, #40]	; (3828 <arch_ioport_set_pin_level+0x50>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
    3802:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    3804:	e00a      	b.n	381c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	0018      	movs	r0, r3
    380a:	4b06      	ldr	r3, [pc, #24]	; (3824 <arch_ioport_set_pin_level+0x4c>)
    380c:	4798      	blx	r3
    380e:	0004      	movs	r4, r0
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	0018      	movs	r0, r3
    3814:	4b04      	ldr	r3, [pc, #16]	; (3828 <arch_ioport_set_pin_level+0x50>)
    3816:	4798      	blx	r3
    3818:	0003      	movs	r3, r0
    381a:	6163      	str	r3, [r4, #20]
}
    381c:	46c0      	nop			; (mov r8, r8)
    381e:	46bd      	mov	sp, r7
    3820:	b003      	add	sp, #12
    3822:	bd90      	pop	{r4, r7, pc}
    3824:	00003791 	.word	0x00003791
    3828:	000037bd 	.word	0x000037bd

0000382c <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
    382c:	b590      	push	{r4, r7, lr}
    382e:	b083      	sub	sp, #12
    3830:	af00      	add	r7, sp, #0
    3832:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	0018      	movs	r0, r3
    3838:	4b08      	ldr	r3, [pc, #32]	; (385c <arch_ioport_get_pin_level+0x30>)
    383a:	4798      	blx	r3
    383c:	0003      	movs	r3, r0
    383e:	6a1c      	ldr	r4, [r3, #32]
    3840:	687b      	ldr	r3, [r7, #4]
    3842:	0018      	movs	r0, r3
    3844:	4b06      	ldr	r3, [pc, #24]	; (3860 <arch_ioport_get_pin_level+0x34>)
    3846:	4798      	blx	r3
    3848:	0003      	movs	r3, r0
    384a:	4023      	ands	r3, r4
    384c:	1e5a      	subs	r2, r3, #1
    384e:	4193      	sbcs	r3, r2
    3850:	b2db      	uxtb	r3, r3
}
    3852:	0018      	movs	r0, r3
    3854:	46bd      	mov	sp, r7
    3856:	b003      	add	sp, #12
    3858:	bd90      	pop	{r4, r7, pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	00003791 	.word	0x00003791
    3860:	000037bd 	.word	0x000037bd

00003864 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    3864:	b580      	push	{r7, lr}
    3866:	b082      	sub	sp, #8
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	000a      	movs	r2, r1
    386e:	1cfb      	adds	r3, r7, #3
    3870:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    3872:	1cfb      	adds	r3, r7, #3
    3874:	781a      	ldrb	r2, [r3, #0]
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	0011      	movs	r1, r2
    387a:	0018      	movs	r0, r3
    387c:	4b02      	ldr	r3, [pc, #8]	; (3888 <ioport_set_pin_level+0x24>)
    387e:	4798      	blx	r3
}
    3880:	46c0      	nop			; (mov r8, r8)
    3882:	46bd      	mov	sp, r7
    3884:	b002      	add	sp, #8
    3886:	bd80      	pop	{r7, pc}
    3888:	000037d9 	.word	0x000037d9

0000388c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    388c:	b580      	push	{r7, lr}
    388e:	b082      	sub	sp, #8
    3890:	af00      	add	r7, sp, #0
    3892:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    3894:	687b      	ldr	r3, [r7, #4]
    3896:	0018      	movs	r0, r3
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <ioport_get_pin_level+0x1c>)
    389a:	4798      	blx	r3
    389c:	0003      	movs	r3, r0
}
    389e:	0018      	movs	r0, r3
    38a0:	46bd      	mov	sp, r7
    38a2:	b002      	add	sp, #8
    38a4:	bd80      	pop	{r7, pc}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	0000382d 	.word	0x0000382d

000038ac <init_motor_interface>:
 #include "motor_interface.h"

 static struct dac_module module;

 void init_motor_interface(void)
 {
    38ac:	b580      	push	{r7, lr}
    38ae:	b084      	sub	sp, #16
    38b0:	af00      	add	r7, sp, #0
	disable_motor();
    38b2:	4b16      	ldr	r3, [pc, #88]	; (390c <init_motor_interface+0x60>)
    38b4:	4798      	blx	r3

	// Set up DAC
	struct dac_chan_config channel_config;
	dac_chan_get_config_defaults(&channel_config);
    38b6:	230c      	movs	r3, #12
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	0018      	movs	r0, r3
    38bc:	4b14      	ldr	r3, [pc, #80]	; (3910 <init_motor_interface+0x64>)
    38be:	4798      	blx	r3

	struct dac_config config;
	dac_get_config_defaults(&config);
    38c0:	1d3b      	adds	r3, r7, #4
    38c2:	0018      	movs	r0, r3
    38c4:	4b13      	ldr	r3, [pc, #76]	; (3914 <init_motor_interface+0x68>)
    38c6:	4798      	blx	r3
	config.reference = DAC_REFERENCE_AVCC;
    38c8:	1d3b      	adds	r3, r7, #4
    38ca:	2240      	movs	r2, #64	; 0x40
    38cc:	701a      	strb	r2, [r3, #0]

	dac_init(&module, DAC, &config);
    38ce:	1d3a      	adds	r2, r7, #4
    38d0:	4911      	ldr	r1, [pc, #68]	; (3918 <init_motor_interface+0x6c>)
    38d2:	4b12      	ldr	r3, [pc, #72]	; (391c <init_motor_interface+0x70>)
    38d4:	0018      	movs	r0, r3
    38d6:	4b12      	ldr	r3, [pc, #72]	; (3920 <init_motor_interface+0x74>)
    38d8:	4798      	blx	r3
	
	dac_chan_set_config(&module, DAC_CHANNEL_0, &channel_config);
    38da:	230c      	movs	r3, #12
    38dc:	18fa      	adds	r2, r7, r3
    38de:	4b0f      	ldr	r3, [pc, #60]	; (391c <init_motor_interface+0x70>)
    38e0:	2100      	movs	r1, #0
    38e2:	0018      	movs	r0, r3
    38e4:	4b0f      	ldr	r3, [pc, #60]	; (3924 <init_motor_interface+0x78>)
    38e6:	4798      	blx	r3
	dac_chan_enable(&module, DAC_CHANNEL_0);
    38e8:	4b0c      	ldr	r3, [pc, #48]	; (391c <init_motor_interface+0x70>)
    38ea:	2100      	movs	r1, #0
    38ec:	0018      	movs	r0, r3
    38ee:	4b0e      	ldr	r3, [pc, #56]	; (3928 <init_motor_interface+0x7c>)
    38f0:	4798      	blx	r3

	dac_enable(&module);
    38f2:	4b0a      	ldr	r3, [pc, #40]	; (391c <init_motor_interface+0x70>)
    38f4:	0018      	movs	r0, r3
    38f6:	4b0d      	ldr	r3, [pc, #52]	; (392c <init_motor_interface+0x80>)
    38f8:	4798      	blx	r3

	drive_motor(0.0);
    38fa:	2300      	movs	r3, #0
    38fc:	1c18      	adds	r0, r3, #0
    38fe:	4b0c      	ldr	r3, [pc, #48]	; (3930 <init_motor_interface+0x84>)
    3900:	4798      	blx	r3
 }
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	46bd      	mov	sp, r7
    3906:	b004      	add	sp, #16
    3908:	bd80      	pop	{r7, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	000039b5 	.word	0x000039b5
    3910:	00000f81 	.word	0x00000f81
    3914:	00000dd9 	.word	0x00000dd9
    3918:	42004800 	.word	0x42004800
    391c:	2000506c 	.word	0x2000506c
    3920:	00000e15 	.word	0x00000e15
    3924:	00000f91 	.word	0x00000f91
    3928:	00000fab 	.word	0x00000fab
    392c:	00000f25 	.word	0x00000f25
    3930:	000039cd 	.word	0x000039cd

00003934 <motor_status_monitor>:

 void motor_status_monitor(void)
 {
    3934:	b580      	push	{r7, lr}
    3936:	af00      	add	r7, sp, #0
	if(ioport_get_pin_level(MOTOR_READY_GPIO) == LOW)
    3938:	2001      	movs	r0, #1
    393a:	4b13      	ldr	r3, [pc, #76]	; (3988 <motor_status_monitor+0x54>)
    393c:	4798      	blx	r3
    393e:	0003      	movs	r3, r0
    3940:	001a      	movs	r2, r3
    3942:	2301      	movs	r3, #1
    3944:	4053      	eors	r3, r2
    3946:	b2db      	uxtb	r3, r3
    3948:	2b00      	cmp	r3, #0
    394a:	d004      	beq.n	3956 <motor_status_monitor+0x22>
	{
		set_alarm(ALARM_MOTOR_ERROR, true);
    394c:	2101      	movs	r1, #1
    394e:	2003      	movs	r0, #3
    3950:	4b0e      	ldr	r3, [pc, #56]	; (398c <motor_status_monitor+0x58>)
    3952:	4798      	blx	r3
    3954:	e003      	b.n	395e <motor_status_monitor+0x2a>
	}
	else
	{
		set_alarm(ALARM_MOTOR_ERROR, false);
    3956:	2100      	movs	r1, #0
    3958:	2003      	movs	r0, #3
    395a:	4b0c      	ldr	r3, [pc, #48]	; (398c <motor_status_monitor+0x58>)
    395c:	4798      	blx	r3
	}

	if(get_motor_temp_celsius() > 100)
    395e:	4b0c      	ldr	r3, [pc, #48]	; (3990 <motor_status_monitor+0x5c>)
    3960:	4798      	blx	r3
    3962:	1c02      	adds	r2, r0, #0
    3964:	4b0b      	ldr	r3, [pc, #44]	; (3994 <motor_status_monitor+0x60>)
    3966:	490c      	ldr	r1, [pc, #48]	; (3998 <motor_status_monitor+0x64>)
    3968:	1c10      	adds	r0, r2, #0
    396a:	4798      	blx	r3
    396c:	1e03      	subs	r3, r0, #0
    396e:	d004      	beq.n	397a <motor_status_monitor+0x46>
	{
		set_alarm(ALARM_MOTOR_TEMP, true);
    3970:	2101      	movs	r1, #1
    3972:	2004      	movs	r0, #4
    3974:	4b05      	ldr	r3, [pc, #20]	; (398c <motor_status_monitor+0x58>)
    3976:	4798      	blx	r3
	}
	else
	{
		set_alarm(ALARM_MOTOR_TEMP, false);
	}
 }
    3978:	e003      	b.n	3982 <motor_status_monitor+0x4e>
		set_alarm(ALARM_MOTOR_TEMP, false);
    397a:	2100      	movs	r1, #0
    397c:	2004      	movs	r0, #4
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <motor_status_monitor+0x58>)
    3980:	4798      	blx	r3
 }
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	46bd      	mov	sp, r7
    3986:	bd80      	pop	{r7, pc}
    3988:	0000388d 	.word	0x0000388d
    398c:	000029f9 	.word	0x000029f9
    3990:	000029ed 	.word	0x000029ed
    3994:	00008889 	.word	0x00008889
    3998:	42c80000 	.word	0x42c80000

0000399c <enable_motor>:

 void enable_motor(void)
 {
    399c:	b580      	push	{r7, lr}
    399e:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, MOTOR_ENABLE_ACTIVE_LEVEL);
    39a0:	2101      	movs	r1, #1
    39a2:	2000      	movs	r0, #0
    39a4:	4b02      	ldr	r3, [pc, #8]	; (39b0 <enable_motor+0x14>)
    39a6:	4798      	blx	r3
 }
    39a8:	46c0      	nop			; (mov r8, r8)
    39aa:	46bd      	mov	sp, r7
    39ac:	bd80      	pop	{r7, pc}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00003865 	.word	0x00003865

000039b4 <disable_motor>:

 void disable_motor(void)
 {
    39b4:	b580      	push	{r7, lr}
    39b6:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    39b8:	2100      	movs	r1, #0
    39ba:	2000      	movs	r0, #0
    39bc:	4b02      	ldr	r3, [pc, #8]	; (39c8 <disable_motor+0x14>)
    39be:	4798      	blx	r3
 }
    39c0:	46c0      	nop			; (mov r8, r8)
    39c2:	46bd      	mov	sp, r7
    39c4:	bd80      	pop	{r7, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	00003865 	.word	0x00003865

000039cc <drive_motor>:

 void drive_motor(float command)
 {
    39cc:	b590      	push	{r4, r7, lr}
    39ce:	b085      	sub	sp, #20
    39d0:	af00      	add	r7, sp, #0
    39d2:	6078      	str	r0, [r7, #4]
	uint16_t dac_out = command * 1023;
    39d4:	4b0c      	ldr	r3, [pc, #48]	; (3a08 <drive_motor+0x3c>)
    39d6:	490d      	ldr	r1, [pc, #52]	; (3a0c <drive_motor+0x40>)
    39d8:	6878      	ldr	r0, [r7, #4]
    39da:	4798      	blx	r3
    39dc:	1c03      	adds	r3, r0, #0
    39de:	1c1a      	adds	r2, r3, #0
    39e0:	230e      	movs	r3, #14
    39e2:	18fc      	adds	r4, r7, r3
    39e4:	4b0a      	ldr	r3, [pc, #40]	; (3a10 <drive_motor+0x44>)
    39e6:	1c10      	adds	r0, r2, #0
    39e8:	4798      	blx	r3
    39ea:	0003      	movs	r3, r0
    39ec:	8023      	strh	r3, [r4, #0]
	dac_chan_write(&module, DAC_CHANNEL_0, dac_out);
    39ee:	230e      	movs	r3, #14
    39f0:	18fb      	adds	r3, r7, r3
    39f2:	881a      	ldrh	r2, [r3, #0]
    39f4:	4b07      	ldr	r3, [pc, #28]	; (3a14 <drive_motor+0x48>)
    39f6:	2100      	movs	r1, #0
    39f8:	0018      	movs	r0, r3
    39fa:	4b07      	ldr	r3, [pc, #28]	; (3a18 <drive_motor+0x4c>)
    39fc:	4798      	blx	r3
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	46bd      	mov	sp, r7
    3a02:	b005      	add	sp, #20
    3a04:	bd90      	pop	{r4, r7, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	00008fe5 	.word	0x00008fe5
    3a0c:	447fc000 	.word	0x447fc000
    3a10:	000088b1 	.word	0x000088b1
    3a14:	2000506c 	.word	0x2000506c
    3a18:	00000fc1 	.word	0x00000fc1

00003a1c <update_parameters_from_sensors>:

static lcv_state_t lcv_state;
static lcv_control_t lcv_control;

static void update_parameters_from_sensors(lcv_state_t * state, lcv_control_t * control)
{
    3a1c:	b580      	push	{r7, lr}
    3a1e:	b082      	sub	sp, #8
    3a20:	af00      	add	r7, sp, #0
    3a22:	6078      	str	r0, [r7, #4]
    3a24:	6039      	str	r1, [r7, #0]
	adc_request_update();
    3a26:	4b18      	ldr	r3, [pc, #96]	; (3a88 <update_parameters_from_sensors+0x6c>)
    3a28:	4798      	blx	r3
	state->current_state.enable = system_is_enabled();
    3a2a:	4b18      	ldr	r3, [pc, #96]	; (3a8c <update_parameters_from_sensors+0x70>)
    3a2c:	4798      	blx	r3
    3a2e:	0003      	movs	r3, r0
    3a30:	0019      	movs	r1, r3
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	2201      	movs	r2, #1
    3a36:	4011      	ands	r1, r2
    3a38:	0008      	movs	r0, r1
    3a3a:	7d1a      	ldrb	r2, [r3, #20]
    3a3c:	2101      	movs	r1, #1
    3a3e:	438a      	bics	r2, r1
    3a40:	1c11      	adds	r1, r2, #0
    3a42:	1c02      	adds	r2, r0, #0
    3a44:	430a      	orrs	r2, r1
    3a46:	751a      	strb	r2, [r3, #20]
	state->setting_state.enable = state->current_state.enable;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	7d1b      	ldrb	r3, [r3, #20]
    3a4c:	07db      	lsls	r3, r3, #31
    3a4e:	0fdb      	lsrs	r3, r3, #31
    3a50:	b2da      	uxtb	r2, r3
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	2101      	movs	r1, #1
    3a56:	400a      	ands	r2, r1
    3a58:	0010      	movs	r0, r2
    3a5a:	781a      	ldrb	r2, [r3, #0]
    3a5c:	2101      	movs	r1, #1
    3a5e:	438a      	bics	r2, r1
    3a60:	1c11      	adds	r1, r2, #0
    3a62:	1c02      	adds	r2, r0, #0
    3a64:	430a      	orrs	r2, r1
    3a66:	701a      	strb	r2, [r3, #0]

	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    3a68:	4b09      	ldr	r3, [pc, #36]	; (3a90 <update_parameters_from_sensors+0x74>)
    3a6a:	4798      	blx	r3
    3a6c:	1c02      	adds	r2, r0, #0
    3a6e:	4b09      	ldr	r3, [pc, #36]	; (3a94 <update_parameters_from_sensors+0x78>)
    3a70:	1c10      	adds	r0, r2, #0
    3a72:	4798      	blx	r3
    3a74:	0002      	movs	r2, r0
    3a76:	683b      	ldr	r3, [r7, #0]
    3a78:	615a      	str	r2, [r3, #20]

	motor_status_monitor();
    3a7a:	4b07      	ldr	r3, [pc, #28]	; (3a98 <update_parameters_from_sensors+0x7c>)
    3a7c:	4798      	blx	r3
}
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	46bd      	mov	sp, r7
    3a82:	b002      	add	sp, #8
    3a84:	bd80      	pop	{r7, pc}
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	00002651 	.word	0x00002651
    3a8c:	00004539 	.word	0x00004539
    3a90:	000027a5 	.word	0x000027a5
    3a94:	0000955d 	.word	0x0000955d
    3a98:	00003935 	.word	0x00003935

00003a9c <control_task>:

static void control_task(void * pvParameters)
{
    3a9c:	b590      	push	{r4, r7, lr}
    3a9e:	b08f      	sub	sp, #60	; 0x3c
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	// Set default TODO what should these be?
	lcv_state.setting_state.enable = 0;
    3aa4:	4b3c      	ldr	r3, [pc, #240]	; (3b98 <control_task+0xfc>)
    3aa6:	781a      	ldrb	r2, [r3, #0]
    3aa8:	2101      	movs	r1, #1
    3aaa:	438a      	bics	r2, r1
    3aac:	701a      	strb	r2, [r3, #0]
	lcv_state.setting_state.ie_ratio_tenths = 30;
    3aae:	4b3a      	ldr	r3, [pc, #232]	; (3b98 <control_task+0xfc>)
    3ab0:	221e      	movs	r2, #30
    3ab2:	705a      	strb	r2, [r3, #1]
	lcv_state.setting_state.peep_cm_h20 = 14;
    3ab4:	4b38      	ldr	r3, [pc, #224]	; (3b98 <control_task+0xfc>)
    3ab6:	220e      	movs	r2, #14
    3ab8:	609a      	str	r2, [r3, #8]
	lcv_state.setting_state.pip_cm_h20 = 30;
    3aba:	4b37      	ldr	r3, [pc, #220]	; (3b98 <control_task+0xfc>)
    3abc:	221e      	movs	r2, #30
    3abe:	60da      	str	r2, [r3, #12]
	lcv_state.setting_state.breath_per_min = 20;
    3ac0:	4b35      	ldr	r3, [pc, #212]	; (3b98 <control_task+0xfc>)
    3ac2:	2214      	movs	r2, #20
    3ac4:	611a      	str	r2, [r3, #16]

	// Assume nothing until feedback
	lcv_state.current_state = lcv_state.setting_state;
    3ac6:	4b34      	ldr	r3, [pc, #208]	; (3b98 <control_task+0xfc>)
    3ac8:	4a33      	ldr	r2, [pc, #204]	; (3b98 <control_task+0xfc>)
    3aca:	3314      	adds	r3, #20
    3acc:	ca13      	ldmia	r2!, {r0, r1, r4}
    3ace:	c313      	stmia	r3!, {r0, r1, r4}
    3ad0:	ca03      	ldmia	r2!, {r0, r1}
    3ad2:	c303      	stmia	r3!, {r0, r1}

	// Set initial control settings
	lcv_control.peep_to_pip_rampup_ms = 200;
    3ad4:	4b31      	ldr	r3, [pc, #196]	; (3b9c <control_task+0x100>)
    3ad6:	22c8      	movs	r2, #200	; 0xc8
    3ad8:	601a      	str	r2, [r3, #0]
	lcv_control.pip_to_peep_rampdown_ms = 200;
    3ada:	4b30      	ldr	r3, [pc, #192]	; (3b9c <control_task+0x100>)
    3adc:	22c8      	movs	r2, #200	; 0xc8
    3ade:	609a      	str	r2, [r3, #8]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    3ae0:	4a2e      	ldr	r2, [pc, #184]	; (3b9c <control_task+0x100>)
    3ae2:	4b2d      	ldr	r3, [pc, #180]	; (3b98 <control_task+0xfc>)
    3ae4:	0011      	movs	r1, r2
    3ae6:	0018      	movs	r0, r3
    3ae8:	4b2d      	ldr	r3, [pc, #180]	; (3ba0 <control_task+0x104>)
    3aea:	4798      	blx	r3

	const TickType_t xFrequency = pdMS_TO_TICKS(10);	// 100 Hz rate
    3aec:	230a      	movs	r3, #10
    3aee:	637b      	str	r3, [r7, #52]	; 0x34
	TickType_t xLastWakeTime = xTaskGetTickCount();
    3af0:	4b2c      	ldr	r3, [pc, #176]	; (3ba4 <control_task+0x108>)
    3af2:	4798      	blx	r3
    3af4:	0003      	movs	r3, r0
    3af6:	62fb      	str	r3, [r7, #44]	; 0x2c

	controller_param_t control_params;
	control_params.kf = 0.03;
    3af8:	230c      	movs	r3, #12
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	4a2a      	ldr	r2, [pc, #168]	; (3ba8 <control_task+0x10c>)
    3afe:	601a      	str	r2, [r3, #0]
	control_params.kp = 0.0;
    3b00:	230c      	movs	r3, #12
    3b02:	18fb      	adds	r3, r7, r3
    3b04:	2200      	movs	r2, #0
    3b06:	605a      	str	r2, [r3, #4]
	control_params.kd = 0.0;
    3b08:	230c      	movs	r3, #12
    3b0a:	18fb      	adds	r3, r7, r3
    3b0c:	2200      	movs	r2, #0
    3b0e:	60da      	str	r2, [r3, #12]
	control_params.ki = 0.0;
    3b10:	230c      	movs	r3, #12
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	2200      	movs	r2, #0
    3b16:	609a      	str	r2, [r3, #8]
	control_params.integral_enable_error_range = 10.0;
    3b18:	230c      	movs	r3, #12
    3b1a:	18fb      	adds	r3, r7, r3
    3b1c:	4a23      	ldr	r2, [pc, #140]	; (3bac <control_task+0x110>)
    3b1e:	615a      	str	r2, [r3, #20]
	control_params.interal_antiwindup = 0.3;
    3b20:	230c      	movs	r3, #12
    3b22:	18fb      	adds	r3, r7, r3
    3b24:	4a22      	ldr	r2, [pc, #136]	; (3bb0 <control_task+0x114>)
    3b26:	611a      	str	r2, [r3, #16]
	control_params.max_output = 1.0;
    3b28:	230c      	movs	r3, #12
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	22fe      	movs	r2, #254	; 0xfe
    3b2e:	0592      	lsls	r2, r2, #22
    3b30:	619a      	str	r2, [r3, #24]
	control_params.min_output = 0.0;
    3b32:	230c      	movs	r3, #12
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	2200      	movs	r2, #0
    3b38:	61da      	str	r2, [r3, #28]

	init_motor_interface();
    3b3a:	4b1e      	ldr	r3, [pc, #120]	; (3bb4 <control_task+0x118>)
    3b3c:	4798      	blx	r3

	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    3b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3b40:	232c      	movs	r3, #44	; 0x2c
    3b42:	18fb      	adds	r3, r7, r3
    3b44:	0011      	movs	r1, r2
    3b46:	0018      	movs	r0, r3
    3b48:	4b1b      	ldr	r3, [pc, #108]	; (3bb8 <control_task+0x11c>)
    3b4a:	4798      	blx	r3

		// Ensure at least control is not locked be feeding here
		wdt_reset_count();
    3b4c:	4b1b      	ldr	r3, [pc, #108]	; (3bbc <control_task+0x120>)
    3b4e:	4798      	blx	r3

		// Update sensor data if possible
		update_parameters_from_sensors(&lcv_state, &lcv_control);
    3b50:	4a12      	ldr	r2, [pc, #72]	; (3b9c <control_task+0x100>)
    3b52:	4b11      	ldr	r3, [pc, #68]	; (3b98 <control_task+0xfc>)
    3b54:	0011      	movs	r1, r2
    3b56:	0018      	movs	r0, r3
    3b58:	4b19      	ldr	r3, [pc, #100]	; (3bc0 <control_task+0x124>)
    3b5a:	4798      	blx	r3

		float motor_output = run_controller(&lcv_state, &lcv_control, &control_params);
    3b5c:	230c      	movs	r3, #12
    3b5e:	18fa      	adds	r2, r7, r3
    3b60:	490e      	ldr	r1, [pc, #56]	; (3b9c <control_task+0x100>)
    3b62:	4b0d      	ldr	r3, [pc, #52]	; (3b98 <control_task+0xfc>)
    3b64:	0018      	movs	r0, r3
    3b66:	4b17      	ldr	r3, [pc, #92]	; (3bc4 <control_task+0x128>)
    3b68:	4798      	blx	r3
    3b6a:	1c03      	adds	r3, r0, #0
    3b6c:	633b      	str	r3, [r7, #48]	; 0x30
		if(lcv_state.current_state.enable)
    3b6e:	4b0a      	ldr	r3, [pc, #40]	; (3b98 <control_task+0xfc>)
    3b70:	7d1b      	ldrb	r3, [r3, #20]
    3b72:	2201      	movs	r2, #1
    3b74:	4013      	ands	r3, r2
    3b76:	b2db      	uxtb	r3, r3
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d006      	beq.n	3b8a <control_task+0xee>
		{
			enable_motor();
    3b7c:	4b12      	ldr	r3, [pc, #72]	; (3bc8 <control_task+0x12c>)
    3b7e:	4798      	blx	r3
			drive_motor(motor_output);
    3b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b82:	1c18      	adds	r0, r3, #0
    3b84:	4b11      	ldr	r3, [pc, #68]	; (3bcc <control_task+0x130>)
    3b86:	4798      	blx	r3
    3b88:	e7d9      	b.n	3b3e <control_task+0xa2>
		}
		else
		{
			disable_motor();
    3b8a:	4b11      	ldr	r3, [pc, #68]	; (3bd0 <control_task+0x134>)
    3b8c:	4798      	blx	r3
			drive_motor(0.0);
    3b8e:	2300      	movs	r3, #0
    3b90:	1c18      	adds	r0, r3, #0
    3b92:	4b0e      	ldr	r3, [pc, #56]	; (3bcc <control_task+0x130>)
    3b94:	4798      	blx	r3
	{
    3b96:	e7d2      	b.n	3b3e <control_task+0xa2>
    3b98:	20005094 	.word	0x20005094
    3b9c:	200050bc 	.word	0x200050bc
    3ba0:	00002e95 	.word	0x00002e95
    3ba4:	00005b2d 	.word	0x00005b2d
    3ba8:	3cf5c28f 	.word	0x3cf5c28f
    3bac:	41200000 	.word	0x41200000
    3bb0:	3e99999a 	.word	0x3e99999a
    3bb4:	000038ad 	.word	0x000038ad
    3bb8:	00005621 	.word	0x00005621
    3bbc:	00006c09 	.word	0x00006c09
    3bc0:	00003a1d 	.word	0x00003a1d
    3bc4:	00003095 	.word	0x00003095
    3bc8:	0000399d 	.word	0x0000399d
    3bcc:	000039cd 	.word	0x000039cd
    3bd0:	000039b5 	.word	0x000039b5

00003bd4 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    3bd4:	b590      	push	{r4, r7, lr}
    3bd6:	b085      	sub	sp, #20
    3bd8:	af02      	add	r7, sp, #8
    3bda:	0002      	movs	r2, r0
    3bdc:	6039      	str	r1, [r7, #0]
    3bde:	1dbb      	adds	r3, r7, #6
    3be0:	801a      	strh	r2, [r3, #0]
	xTaskCreate(control_task, (const char * const) "CONTROL",
    3be2:	1dbb      	adds	r3, r7, #6
    3be4:	881a      	ldrh	r2, [r3, #0]
    3be6:	4906      	ldr	r1, [pc, #24]	; (3c00 <create_control_task+0x2c>)
    3be8:	4806      	ldr	r0, [pc, #24]	; (3c04 <create_control_task+0x30>)
    3bea:	4b07      	ldr	r3, [pc, #28]	; (3c08 <create_control_task+0x34>)
    3bec:	9301      	str	r3, [sp, #4]
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	9300      	str	r3, [sp, #0]
    3bf2:	2300      	movs	r3, #0
    3bf4:	4c05      	ldr	r4, [pc, #20]	; (3c0c <create_control_task+0x38>)
    3bf6:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
}
    3bf8:	46c0      	nop			; (mov r8, r8)
    3bfa:	46bd      	mov	sp, r7
    3bfc:	b003      	add	sp, #12
    3bfe:	bd90      	pop	{r4, r7, pc}
    3c00:	0000be74 	.word	0x0000be74
    3c04:	00003a9d 	.word	0x00003a9d
    3c08:	20005090 	.word	0x20005090
    3c0c:	0000538d 	.word	0x0000538d

00003c10 <get_current_settings>:
*	\brief Gets the current settings
*
*	\return The current settings
*/
lcv_parameters_t get_current_settings(void)
{
    3c10:	b590      	push	{r4, r7, lr}
    3c12:	b083      	sub	sp, #12
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
	return lcv_state.setting_state;
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	4a04      	ldr	r2, [pc, #16]	; (3c2c <get_current_settings+0x1c>)
    3c1c:	ca13      	ldmia	r2!, {r0, r1, r4}
    3c1e:	c313      	stmia	r3!, {r0, r1, r4}
    3c20:	ca03      	ldmia	r2!, {r0, r1}
    3c22:	c303      	stmia	r3!, {r0, r1}
}
    3c24:	6878      	ldr	r0, [r7, #4]
    3c26:	46bd      	mov	sp, r7
    3c28:	b003      	add	sp, #12
    3c2a:	bd90      	pop	{r4, r7, pc}
    3c2c:	20005094 	.word	0x20005094

00003c30 <update_settings>:
*	\brief Updates the current settings
*
*	\param new_settings Pointer to the new settings
*/
void update_settings(lcv_parameters_t * new_settings)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b082      	sub	sp, #8
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
	lcv_state.setting_state.breath_per_min = new_settings->breath_per_min;
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	691a      	ldr	r2, [r3, #16]
    3c3c:	4b0b      	ldr	r3, [pc, #44]	; (3c6c <update_settings+0x3c>)
    3c3e:	611a      	str	r2, [r3, #16]
	lcv_state.setting_state.peep_cm_h20 = new_settings->peep_cm_h20;
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	689a      	ldr	r2, [r3, #8]
    3c44:	4b09      	ldr	r3, [pc, #36]	; (3c6c <update_settings+0x3c>)
    3c46:	609a      	str	r2, [r3, #8]
	lcv_state.setting_state.pip_cm_h20 = new_settings->pip_cm_h20;
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	68da      	ldr	r2, [r3, #12]
    3c4c:	4b07      	ldr	r3, [pc, #28]	; (3c6c <update_settings+0x3c>)
    3c4e:	60da      	str	r2, [r3, #12]
	lcv_state.setting_state.ie_ratio_tenths = new_settings->ie_ratio_tenths;
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	785a      	ldrb	r2, [r3, #1]
    3c54:	4b05      	ldr	r3, [pc, #20]	; (3c6c <update_settings+0x3c>)
    3c56:	705a      	strb	r2, [r3, #1]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    3c58:	4a05      	ldr	r2, [pc, #20]	; (3c70 <update_settings+0x40>)
    3c5a:	4b04      	ldr	r3, [pc, #16]	; (3c6c <update_settings+0x3c>)
    3c5c:	0011      	movs	r1, r2
    3c5e:	0018      	movs	r0, r3
    3c60:	4b04      	ldr	r3, [pc, #16]	; (3c74 <update_settings+0x44>)
    3c62:	4798      	blx	r3
    3c64:	46c0      	nop			; (mov r8, r8)
    3c66:	46bd      	mov	sp, r7
    3c68:	b002      	add	sp, #8
    3c6a:	bd80      	pop	{r7, pc}
    3c6c:	20005094 	.word	0x20005094
    3c70:	200050bc 	.word	0x200050bc
    3c74:	00002e95 	.word	0x00002e95

00003c78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b082      	sub	sp, #8
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	0002      	movs	r2, r0
    3c80:	1dfb      	adds	r3, r7, #7
    3c82:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3c84:	4b06      	ldr	r3, [pc, #24]	; (3ca0 <NVIC_EnableIRQ+0x28>)
    3c86:	1dfa      	adds	r2, r7, #7
    3c88:	7812      	ldrb	r2, [r2, #0]
    3c8a:	0011      	movs	r1, r2
    3c8c:	221f      	movs	r2, #31
    3c8e:	400a      	ands	r2, r1
    3c90:	2101      	movs	r1, #1
    3c92:	4091      	lsls	r1, r2
    3c94:	000a      	movs	r2, r1
    3c96:	601a      	str	r2, [r3, #0]
}
    3c98:	46c0      	nop			; (mov r8, r8)
    3c9a:	46bd      	mov	sp, r7
    3c9c:	b002      	add	sp, #8
    3c9e:	bd80      	pop	{r7, pc}
    3ca0:	e000e100 	.word	0xe000e100

00003ca4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b082      	sub	sp, #8
    3ca8:	af00      	add	r7, sp, #0
    3caa:	0002      	movs	r2, r0
    3cac:	1dfb      	adds	r3, r7, #7
    3cae:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3cb0:	4a08      	ldr	r2, [pc, #32]	; (3cd4 <NVIC_ClearPendingIRQ+0x30>)
    3cb2:	1dfb      	adds	r3, r7, #7
    3cb4:	781b      	ldrb	r3, [r3, #0]
    3cb6:	0019      	movs	r1, r3
    3cb8:	231f      	movs	r3, #31
    3cba:	400b      	ands	r3, r1
    3cbc:	2101      	movs	r1, #1
    3cbe:	4099      	lsls	r1, r3
    3cc0:	000b      	movs	r3, r1
    3cc2:	0019      	movs	r1, r3
    3cc4:	23c0      	movs	r3, #192	; 0xc0
    3cc6:	005b      	lsls	r3, r3, #1
    3cc8:	50d1      	str	r1, [r2, r3]
}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	46bd      	mov	sp, r7
    3cce:	b002      	add	sp, #8
    3cd0:	bd80      	pop	{r7, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	e000e100 	.word	0xe000e100

00003cd8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    3cd8:	b5b0      	push	{r4, r5, r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	0002      	movs	r2, r0
    3ce0:	6039      	str	r1, [r7, #0]
    3ce2:	1dfb      	adds	r3, r7, #7
    3ce4:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    3ce6:	1dfb      	adds	r3, r7, #7
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b7f      	cmp	r3, #127	; 0x7f
    3cec:	d932      	bls.n	3d54 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3cee:	4c2f      	ldr	r4, [pc, #188]	; (3dac <NVIC_SetPriority+0xd4>)
    3cf0:	1dfb      	adds	r3, r7, #7
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	001a      	movs	r2, r3
    3cf6:	230f      	movs	r3, #15
    3cf8:	4013      	ands	r3, r2
    3cfa:	3b08      	subs	r3, #8
    3cfc:	0899      	lsrs	r1, r3, #2
    3cfe:	4a2b      	ldr	r2, [pc, #172]	; (3dac <NVIC_SetPriority+0xd4>)
    3d00:	1dfb      	adds	r3, r7, #7
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	0018      	movs	r0, r3
    3d06:	230f      	movs	r3, #15
    3d08:	4003      	ands	r3, r0
    3d0a:	3b08      	subs	r3, #8
    3d0c:	089b      	lsrs	r3, r3, #2
    3d0e:	3306      	adds	r3, #6
    3d10:	009b      	lsls	r3, r3, #2
    3d12:	18d3      	adds	r3, r2, r3
    3d14:	3304      	adds	r3, #4
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	1dfa      	adds	r2, r7, #7
    3d1a:	7812      	ldrb	r2, [r2, #0]
    3d1c:	0010      	movs	r0, r2
    3d1e:	2203      	movs	r2, #3
    3d20:	4002      	ands	r2, r0
    3d22:	00d2      	lsls	r2, r2, #3
    3d24:	20ff      	movs	r0, #255	; 0xff
    3d26:	4090      	lsls	r0, r2
    3d28:	0002      	movs	r2, r0
    3d2a:	43d2      	mvns	r2, r2
    3d2c:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3d2e:	683b      	ldr	r3, [r7, #0]
    3d30:	019b      	lsls	r3, r3, #6
    3d32:	20ff      	movs	r0, #255	; 0xff
    3d34:	4018      	ands	r0, r3
    3d36:	1dfb      	adds	r3, r7, #7
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	001d      	movs	r5, r3
    3d3c:	2303      	movs	r3, #3
    3d3e:	402b      	ands	r3, r5
    3d40:	00db      	lsls	r3, r3, #3
    3d42:	4098      	lsls	r0, r3
    3d44:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3d46:	431a      	orrs	r2, r3
    3d48:	1d8b      	adds	r3, r1, #6
    3d4a:	009b      	lsls	r3, r3, #2
    3d4c:	18e3      	adds	r3, r4, r3
    3d4e:	3304      	adds	r3, #4
    3d50:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    3d52:	e027      	b.n	3da4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3d54:	4c16      	ldr	r4, [pc, #88]	; (3db0 <NVIC_SetPriority+0xd8>)
    3d56:	1dfb      	adds	r3, r7, #7
    3d58:	781b      	ldrb	r3, [r3, #0]
    3d5a:	b25b      	sxtb	r3, r3
    3d5c:	089b      	lsrs	r3, r3, #2
    3d5e:	4914      	ldr	r1, [pc, #80]	; (3db0 <NVIC_SetPriority+0xd8>)
    3d60:	1dfa      	adds	r2, r7, #7
    3d62:	7812      	ldrb	r2, [r2, #0]
    3d64:	b252      	sxtb	r2, r2
    3d66:	0892      	lsrs	r2, r2, #2
    3d68:	32c0      	adds	r2, #192	; 0xc0
    3d6a:	0092      	lsls	r2, r2, #2
    3d6c:	5852      	ldr	r2, [r2, r1]
    3d6e:	1df9      	adds	r1, r7, #7
    3d70:	7809      	ldrb	r1, [r1, #0]
    3d72:	0008      	movs	r0, r1
    3d74:	2103      	movs	r1, #3
    3d76:	4001      	ands	r1, r0
    3d78:	00c9      	lsls	r1, r1, #3
    3d7a:	20ff      	movs	r0, #255	; 0xff
    3d7c:	4088      	lsls	r0, r1
    3d7e:	0001      	movs	r1, r0
    3d80:	43c9      	mvns	r1, r1
    3d82:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3d84:	683a      	ldr	r2, [r7, #0]
    3d86:	0192      	lsls	r2, r2, #6
    3d88:	20ff      	movs	r0, #255	; 0xff
    3d8a:	4010      	ands	r0, r2
    3d8c:	1dfa      	adds	r2, r7, #7
    3d8e:	7812      	ldrb	r2, [r2, #0]
    3d90:	0015      	movs	r5, r2
    3d92:	2203      	movs	r2, #3
    3d94:	402a      	ands	r2, r5
    3d96:	00d2      	lsls	r2, r2, #3
    3d98:	4090      	lsls	r0, r2
    3d9a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3d9c:	430a      	orrs	r2, r1
    3d9e:	33c0      	adds	r3, #192	; 0xc0
    3da0:	009b      	lsls	r3, r3, #2
    3da2:	511a      	str	r2, [r3, r4]
}
    3da4:	46c0      	nop			; (mov r8, r8)
    3da6:	46bd      	mov	sp, r7
    3da8:	b002      	add	sp, #8
    3daa:	bdb0      	pop	{r4, r5, r7, pc}
    3dac:	e000ed00 	.word	0xe000ed00
    3db0:	e000e100 	.word	0xe000e100

00003db4 <system_interrupt_enable>:
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b082      	sub	sp, #8
    3db8:	af00      	add	r7, sp, #0
    3dba:	0002      	movs	r2, r0
    3dbc:	1dfb      	adds	r3, r7, #7
    3dbe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3dc0:	4b06      	ldr	r3, [pc, #24]	; (3ddc <system_interrupt_enable+0x28>)
    3dc2:	1dfa      	adds	r2, r7, #7
    3dc4:	7812      	ldrb	r2, [r2, #0]
    3dc6:	0011      	movs	r1, r2
    3dc8:	221f      	movs	r2, #31
    3dca:	400a      	ands	r2, r1
    3dcc:	2101      	movs	r1, #1
    3dce:	4091      	lsls	r1, r2
    3dd0:	000a      	movs	r2, r1
    3dd2:	601a      	str	r2, [r3, #0]
}
    3dd4:	46c0      	nop			; (mov r8, r8)
    3dd6:	46bd      	mov	sp, r7
    3dd8:	b002      	add	sp, #8
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	e000e100 	.word	0xe000e100

00003de0 <arch_ioport_pin_to_port_id>:
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b082      	sub	sp, #8
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	095b      	lsrs	r3, r3, #5
}
    3dec:	0018      	movs	r0, r3
    3dee:	46bd      	mov	sp, r7
    3df0:	b002      	add	sp, #8
    3df2:	bd80      	pop	{r7, pc}

00003df4 <arch_ioport_port_to_base>:
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	01db      	lsls	r3, r3, #7
    3e00:	4a03      	ldr	r2, [pc, #12]	; (3e10 <arch_ioport_port_to_base+0x1c>)
    3e02:	4694      	mov	ip, r2
    3e04:	4463      	add	r3, ip
}
    3e06:	0018      	movs	r0, r3
    3e08:	46bd      	mov	sp, r7
    3e0a:	b002      	add	sp, #8
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	41004400 	.word	0x41004400

00003e14 <arch_ioport_pin_to_base>:
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	0018      	movs	r0, r3
    3e20:	4b05      	ldr	r3, [pc, #20]	; (3e38 <arch_ioport_pin_to_base+0x24>)
    3e22:	4798      	blx	r3
    3e24:	0003      	movs	r3, r0
    3e26:	0018      	movs	r0, r3
    3e28:	4b04      	ldr	r3, [pc, #16]	; (3e3c <arch_ioport_pin_to_base+0x28>)
    3e2a:	4798      	blx	r3
    3e2c:	0003      	movs	r3, r0
}
    3e2e:	0018      	movs	r0, r3
    3e30:	46bd      	mov	sp, r7
    3e32:	b002      	add	sp, #8
    3e34:	bd80      	pop	{r7, pc}
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	00003de1 	.word	0x00003de1
    3e3c:	00003df5 	.word	0x00003df5

00003e40 <arch_ioport_pin_to_mask>:
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b082      	sub	sp, #8
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	221f      	movs	r2, #31
    3e4c:	4013      	ands	r3, r2
    3e4e:	2201      	movs	r2, #1
    3e50:	409a      	lsls	r2, r3
    3e52:	0013      	movs	r3, r2
}
    3e54:	0018      	movs	r0, r3
    3e56:	46bd      	mov	sp, r7
    3e58:	b002      	add	sp, #8
    3e5a:	bd80      	pop	{r7, pc}

00003e5c <arch_ioport_get_pin_level>:
{
    3e5c:	b590      	push	{r4, r7, lr}
    3e5e:	b083      	sub	sp, #12
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	0018      	movs	r0, r3
    3e68:	4b08      	ldr	r3, [pc, #32]	; (3e8c <arch_ioport_get_pin_level+0x30>)
    3e6a:	4798      	blx	r3
    3e6c:	0003      	movs	r3, r0
    3e6e:	6a1c      	ldr	r4, [r3, #32]
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	0018      	movs	r0, r3
    3e74:	4b06      	ldr	r3, [pc, #24]	; (3e90 <arch_ioport_get_pin_level+0x34>)
    3e76:	4798      	blx	r3
    3e78:	0003      	movs	r3, r0
    3e7a:	4023      	ands	r3, r4
    3e7c:	1e5a      	subs	r2, r3, #1
    3e7e:	4193      	sbcs	r3, r2
    3e80:	b2db      	uxtb	r3, r3
}
    3e82:	0018      	movs	r0, r3
    3e84:	46bd      	mov	sp, r7
    3e86:	b003      	add	sp, #12
    3e88:	bd90      	pop	{r4, r7, pc}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	00003e15 	.word	0x00003e15
    3e90:	00003e41 	.word	0x00003e41

00003e94 <ioport_get_pin_level>:
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	0018      	movs	r0, r3
    3ea0:	4b03      	ldr	r3, [pc, #12]	; (3eb0 <ioport_get_pin_level+0x1c>)
    3ea2:	4798      	blx	r3
    3ea4:	0003      	movs	r3, r0
}
    3ea6:	0018      	movs	r0, r3
    3ea8:	46bd      	mov	sp, r7
    3eaa:	b002      	add	sp, #8
    3eac:	bd80      	pop	{r7, pc}
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	00003e5d 	.word	0x00003e5d

00003eb4 <i2c_master_is_syncing>:
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b084      	sub	sp, #16
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3ec2:	68fb      	ldr	r3, [r7, #12]
    3ec4:	69db      	ldr	r3, [r3, #28]
    3ec6:	2207      	movs	r2, #7
    3ec8:	4013      	ands	r3, r2
    3eca:	1e5a      	subs	r2, r3, #1
    3ecc:	4193      	sbcs	r3, r2
    3ece:	b2db      	uxtb	r3, r3
}
    3ed0:	0018      	movs	r0, r3
    3ed2:	46bd      	mov	sp, r7
    3ed4:	b004      	add	sp, #16
    3ed6:	bd80      	pop	{r7, pc}

00003ed8 <_i2c_master_wait_for_sync>:
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b082      	sub	sp, #8
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ee0:	46c0      	nop			; (mov r8, r8)
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	0018      	movs	r0, r3
    3ee6:	4b04      	ldr	r3, [pc, #16]	; (3ef8 <_i2c_master_wait_for_sync+0x20>)
    3ee8:	4798      	blx	r3
    3eea:	1e03      	subs	r3, r0, #0
    3eec:	d1f9      	bne.n	3ee2 <_i2c_master_wait_for_sync+0xa>
}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	46bd      	mov	sp, r7
    3ef2:	b002      	add	sp, #8
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	00003eb5 	.word	0x00003eb5

00003efc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2264      	movs	r2, #100	; 0x64
    3f08:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	4a1b      	ldr	r2, [pc, #108]	; (3f7c <i2c_master_get_config_defaults+0x80>)
    3f0e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	2200      	movs	r2, #0
    3f14:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	2200      	movs	r2, #0
    3f1a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	2200      	movs	r2, #0
    3f20:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	2280      	movs	r2, #128	; 0x80
    3f26:	0392      	lsls	r2, r2, #14
    3f28:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	2201      	movs	r2, #1
    3f2e:	4252      	negs	r2, r2
    3f30:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	2201      	movs	r2, #1
    3f36:	4252      	negs	r2, r2
    3f38:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	2200      	movs	r2, #0
    3f3e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	2200      	movs	r2, #0
    3f44:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	2224      	movs	r2, #36	; 0x24
    3f4a:	2100      	movs	r1, #0
    3f4c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	2200      	movs	r2, #0
    3f52:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	222c      	movs	r2, #44	; 0x2c
    3f58:	2100      	movs	r1, #0
    3f5a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	222d      	movs	r2, #45	; 0x2d
    3f60:	2100      	movs	r1, #0
    3f62:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	222e      	movs	r2, #46	; 0x2e
    3f68:	2100      	movs	r1, #0
    3f6a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	22d7      	movs	r2, #215	; 0xd7
    3f70:	861a      	strh	r2, [r3, #48]	; 0x30
}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00000d48 	.word	0x00000d48

00003f80 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    3f80:	b580      	push	{r7, lr}
    3f82:	b084      	sub	sp, #16
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	681b      	ldr	r3, [r3, #0]
    3f8c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    3f8e:	2300      	movs	r3, #0
    3f90:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	0018      	movs	r0, r3
    3f96:	4b14      	ldr	r3, [pc, #80]	; (3fe8 <i2c_master_enable+0x68>)
    3f98:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3f9a:	68bb      	ldr	r3, [r7, #8]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2202      	movs	r2, #2
    3fa0:	431a      	orrs	r2, r3
    3fa2:	68bb      	ldr	r3, [r7, #8]
    3fa4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	681b      	ldr	r3, [r3, #0]
    3faa:	0018      	movs	r0, r3
    3fac:	4b0f      	ldr	r3, [pc, #60]	; (3fec <i2c_master_enable+0x6c>)
    3fae:	4798      	blx	r3
    3fb0:	0003      	movs	r3, r0
    3fb2:	0018      	movs	r0, r3
    3fb4:	4b0e      	ldr	r3, [pc, #56]	; (3ff0 <i2c_master_enable+0x70>)
    3fb6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3fb8:	e00c      	b.n	3fd4 <i2c_master_enable+0x54>
		timeout_counter++;
    3fba:	68fb      	ldr	r3, [r7, #12]
    3fbc:	3301      	adds	r3, #1
    3fbe:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	88db      	ldrh	r3, [r3, #6]
    3fc4:	001a      	movs	r2, r3
    3fc6:	68fb      	ldr	r3, [r7, #12]
    3fc8:	429a      	cmp	r2, r3
    3fca:	d803      	bhi.n	3fd4 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3fcc:	68bb      	ldr	r3, [r7, #8]
    3fce:	2210      	movs	r2, #16
    3fd0:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    3fd2:	e006      	b.n	3fe2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3fd4:	68bb      	ldr	r3, [r7, #8]
    3fd6:	8b5b      	ldrh	r3, [r3, #26]
    3fd8:	b29b      	uxth	r3, r3
    3fda:	001a      	movs	r2, r3
    3fdc:	2310      	movs	r3, #16
    3fde:	4013      	ands	r3, r2
    3fe0:	d0eb      	beq.n	3fba <i2c_master_enable+0x3a>
		}
	}
}
    3fe2:	46bd      	mov	sp, r7
    3fe4:	b004      	add	sp, #16
    3fe6:	bd80      	pop	{r7, pc}
    3fe8:	00003ed9 	.word	0x00003ed9
    3fec:	00006fa5 	.word	0x00006fa5
    3ff0:	00003db5 	.word	0x00003db5

00003ff4 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    3ff4:	b580      	push	{r7, lr}
    3ff6:	b082      	sub	sp, #8
    3ff8:	af00      	add	r7, sp, #0
    3ffa:	6078      	str	r0, [r7, #4]
    3ffc:	000a      	movs	r2, r1
    3ffe:	1cfb      	adds	r3, r7, #3
    4000:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	7e5b      	ldrb	r3, [r3, #25]
    4006:	b2db      	uxtb	r3, r3
    4008:	b25a      	sxtb	r2, r3
    400a:	1cfb      	adds	r3, r7, #3
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	2101      	movs	r1, #1
    4010:	4099      	lsls	r1, r3
    4012:	000b      	movs	r3, r1
    4014:	b25b      	sxtb	r3, r3
    4016:	4313      	orrs	r3, r2
    4018:	b25b      	sxtb	r3, r3
    401a:	b2da      	uxtb	r2, r3
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	765a      	strb	r2, [r3, #25]
}
    4020:	46c0      	nop			; (mov r8, r8)
    4022:	46bd      	mov	sp, r7
    4024:	b002      	add	sp, #8
    4026:	bd80      	pop	{r7, pc}

00004028 <i2c_master_get_job_status>:
 *                                      data, indicating that slave does not
 *                                      want more data and was not able to read
 */
static inline enum status_code i2c_master_get_job_status(
		struct i2c_master_module *const module)
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	2225      	movs	r2, #37	; 0x25
    4034:	5c9b      	ldrb	r3, [r3, r2]
    4036:	b2db      	uxtb	r3, r3
}
    4038:	0018      	movs	r0, r3
    403a:	46bd      	mov	sp, r7
    403c:	b002      	add	sp, #8
    403e:	bd80      	pop	{r7, pc}

00004040 <handle_hmi_input>:
static const lcv_parameters_t upper_settings_range = {.enable = 0, .tidal_volume_ml = 2500,
.peep_cm_h20 = 20, .pip_cm_h20 = 35, .breath_per_min = 60, .ie_ratio_tenths=40};


static void handle_hmi_input(void)
{
    4040:	b590      	push	{r4, r7, lr}
    4042:	b083      	sub	sp, #12
    4044:	af00      	add	r7, sp, #0
	static bool last_button_status = false;
	// Check for stage change
	bool new_button_status = get_pushbutton_level();
    4046:	1dfc      	adds	r4, r7, #7
    4048:	4b66      	ldr	r3, [pc, #408]	; (41e4 <handle_hmi_input+0x1a4>)
    404a:	4798      	blx	r3
    404c:	0003      	movs	r3, r0
    404e:	7023      	strb	r3, [r4, #0]

	if(!last_button_status && new_button_status)
    4050:	4b65      	ldr	r3, [pc, #404]	; (41e8 <handle_hmi_input+0x1a8>)
    4052:	781b      	ldrb	r3, [r3, #0]
    4054:	2201      	movs	r2, #1
    4056:	4053      	eors	r3, r2
    4058:	b2db      	uxtb	r3, r3
    405a:	2b00      	cmp	r3, #0
    405c:	d028      	beq.n	40b0 <handle_hmi_input+0x70>
    405e:	1dfb      	adds	r3, r7, #7
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d024      	beq.n	40b0 <handle_hmi_input+0x70>
	{
		switch (stage)
    4066:	4b61      	ldr	r3, [pc, #388]	; (41ec <handle_hmi_input+0x1ac>)
    4068:	781b      	ldrb	r3, [r3, #0]
    406a:	2b04      	cmp	r3, #4
    406c:	d81c      	bhi.n	40a8 <handle_hmi_input+0x68>
    406e:	009a      	lsls	r2, r3, #2
    4070:	4b5f      	ldr	r3, [pc, #380]	; (41f0 <handle_hmi_input+0x1b0>)
    4072:	18d3      	adds	r3, r2, r3
    4074:	681b      	ldr	r3, [r3, #0]
    4076:	469f      	mov	pc, r3
		{
			case STAGE_NONE:
				stage = STAGE_BPM;
    4078:	4b5c      	ldr	r3, [pc, #368]	; (41ec <handle_hmi_input+0x1ac>)
    407a:	2201      	movs	r2, #1
    407c:	701a      	strb	r2, [r3, #0]
				break;
    407e:	e017      	b.n	40b0 <handle_hmi_input+0x70>

			case STAGE_BPM:
				stage = STAGE_PEEP;
    4080:	4b5a      	ldr	r3, [pc, #360]	; (41ec <handle_hmi_input+0x1ac>)
    4082:	2202      	movs	r2, #2
    4084:	701a      	strb	r2, [r3, #0]
				break;
    4086:	e013      	b.n	40b0 <handle_hmi_input+0x70>

			case STAGE_PEEP:
				stage = STAGE_PIP;
    4088:	4b58      	ldr	r3, [pc, #352]	; (41ec <handle_hmi_input+0x1ac>)
    408a:	2203      	movs	r2, #3
    408c:	701a      	strb	r2, [r3, #0]
				break;
    408e:	e00f      	b.n	40b0 <handle_hmi_input+0x70>

			case STAGE_PIP:
				stage = STAGE_IE;
    4090:	4b56      	ldr	r3, [pc, #344]	; (41ec <handle_hmi_input+0x1ac>)
    4092:	2204      	movs	r2, #4
    4094:	701a      	strb	r2, [r3, #0]
				break;
    4096:	e00b      	b.n	40b0 <handle_hmi_input+0x70>

			case STAGE_IE:
				// Save settings
				update_settings(&settings_input);
    4098:	4b56      	ldr	r3, [pc, #344]	; (41f4 <handle_hmi_input+0x1b4>)
    409a:	0018      	movs	r0, r3
    409c:	4b56      	ldr	r3, [pc, #344]	; (41f8 <handle_hmi_input+0x1b8>)
    409e:	4798      	blx	r3
				stage = STAGE_NONE;
    40a0:	4b52      	ldr	r3, [pc, #328]	; (41ec <handle_hmi_input+0x1ac>)
    40a2:	2200      	movs	r2, #0
    40a4:	701a      	strb	r2, [r3, #0]
				break;
    40a6:	e003      	b.n	40b0 <handle_hmi_input+0x70>
			
			default:
				stage = STAGE_NONE;
    40a8:	4b50      	ldr	r3, [pc, #320]	; (41ec <handle_hmi_input+0x1ac>)
    40aa:	2200      	movs	r2, #0
    40ac:	701a      	strb	r2, [r3, #0]
				break;
    40ae:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Handle the stage

	float knob_portion = get_input_potentiometer_portion();
    40b0:	4b52      	ldr	r3, [pc, #328]	; (41fc <handle_hmi_input+0x1bc>)
    40b2:	4798      	blx	r3
    40b4:	1c03      	adds	r3, r0, #0
    40b6:	603b      	str	r3, [r7, #0]

	switch (stage)
    40b8:	4b4c      	ldr	r3, [pc, #304]	; (41ec <handle_hmi_input+0x1ac>)
    40ba:	781b      	ldrb	r3, [r3, #0]
    40bc:	2b04      	cmp	r3, #4
    40be:	d900      	bls.n	40c2 <handle_hmi_input+0x82>
    40c0:	e083      	b.n	41ca <handle_hmi_input+0x18a>
    40c2:	009a      	lsls	r2, r3, #2
    40c4:	4b4e      	ldr	r3, [pc, #312]	; (4200 <handle_hmi_input+0x1c0>)
    40c6:	18d3      	adds	r3, r2, r3
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
		break;

		case STAGE_BPM:
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    40cc:	2206      	movs	r2, #6
    40ce:	4b4d      	ldr	r3, [pc, #308]	; (4204 <handle_hmi_input+0x1c4>)
    40d0:	0010      	movs	r0, r2
    40d2:	4798      	blx	r3
    40d4:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.breath_per_min - lower_settings_range.breath_per_min);
    40d6:	223c      	movs	r2, #60	; 0x3c
    40d8:	2306      	movs	r3, #6
    40da:	1ad2      	subs	r2, r2, r3
    40dc:	4b49      	ldr	r3, [pc, #292]	; (4204 <handle_hmi_input+0x1c4>)
    40de:	0010      	movs	r0, r2
    40e0:	4798      	blx	r3
    40e2:	1c02      	adds	r2, r0, #0
    40e4:	4b48      	ldr	r3, [pc, #288]	; (4208 <handle_hmi_input+0x1c8>)
    40e6:	6839      	ldr	r1, [r7, #0]
    40e8:	1c10      	adds	r0, r2, #0
    40ea:	4798      	blx	r3
    40ec:	1c03      	adds	r3, r0, #0
    40ee:	1c1a      	adds	r2, r3, #0
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    40f0:	4b46      	ldr	r3, [pc, #280]	; (420c <handle_hmi_input+0x1cc>)
    40f2:	1c11      	adds	r1, r2, #0
    40f4:	1c20      	adds	r0, r4, #0
    40f6:	4798      	blx	r3
    40f8:	1c03      	adds	r3, r0, #0
    40fa:	1c1a      	adds	r2, r3, #0
    40fc:	4b44      	ldr	r3, [pc, #272]	; (4210 <handle_hmi_input+0x1d0>)
    40fe:	1c10      	adds	r0, r2, #0
    4100:	4798      	blx	r3
    4102:	0002      	movs	r2, r0
    4104:	4b3b      	ldr	r3, [pc, #236]	; (41f4 <handle_hmi_input+0x1b4>)
    4106:	611a      	str	r2, [r3, #16]
			break;
    4108:	e064      	b.n	41d4 <handle_hmi_input+0x194>

		case STAGE_PEEP:
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    410a:	2203      	movs	r2, #3
    410c:	4b3d      	ldr	r3, [pc, #244]	; (4204 <handle_hmi_input+0x1c4>)
    410e:	0010      	movs	r0, r2
    4110:	4798      	blx	r3
    4112:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.peep_cm_h20 - lower_settings_range.peep_cm_h20);
    4114:	2214      	movs	r2, #20
    4116:	2303      	movs	r3, #3
    4118:	1ad2      	subs	r2, r2, r3
    411a:	4b3a      	ldr	r3, [pc, #232]	; (4204 <handle_hmi_input+0x1c4>)
    411c:	0010      	movs	r0, r2
    411e:	4798      	blx	r3
    4120:	1c02      	adds	r2, r0, #0
    4122:	4b39      	ldr	r3, [pc, #228]	; (4208 <handle_hmi_input+0x1c8>)
    4124:	6839      	ldr	r1, [r7, #0]
    4126:	1c10      	adds	r0, r2, #0
    4128:	4798      	blx	r3
    412a:	1c03      	adds	r3, r0, #0
    412c:	1c1a      	adds	r2, r3, #0
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    412e:	4b37      	ldr	r3, [pc, #220]	; (420c <handle_hmi_input+0x1cc>)
    4130:	1c11      	adds	r1, r2, #0
    4132:	1c20      	adds	r0, r4, #0
    4134:	4798      	blx	r3
    4136:	1c03      	adds	r3, r0, #0
    4138:	1c1a      	adds	r2, r3, #0
    413a:	4b35      	ldr	r3, [pc, #212]	; (4210 <handle_hmi_input+0x1d0>)
    413c:	1c10      	adds	r0, r2, #0
    413e:	4798      	blx	r3
    4140:	0002      	movs	r2, r0
    4142:	4b2c      	ldr	r3, [pc, #176]	; (41f4 <handle_hmi_input+0x1b4>)
    4144:	609a      	str	r2, [r3, #8]
			break;
    4146:	e045      	b.n	41d4 <handle_hmi_input+0x194>

		case STAGE_PIP:
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    4148:	220a      	movs	r2, #10
    414a:	4b2e      	ldr	r3, [pc, #184]	; (4204 <handle_hmi_input+0x1c4>)
    414c:	0010      	movs	r0, r2
    414e:	4798      	blx	r3
    4150:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.pip_cm_h20 - lower_settings_range.pip_cm_h20);
    4152:	2223      	movs	r2, #35	; 0x23
    4154:	230a      	movs	r3, #10
    4156:	1ad2      	subs	r2, r2, r3
    4158:	4b2a      	ldr	r3, [pc, #168]	; (4204 <handle_hmi_input+0x1c4>)
    415a:	0010      	movs	r0, r2
    415c:	4798      	blx	r3
    415e:	1c02      	adds	r2, r0, #0
    4160:	4b29      	ldr	r3, [pc, #164]	; (4208 <handle_hmi_input+0x1c8>)
    4162:	6839      	ldr	r1, [r7, #0]
    4164:	1c10      	adds	r0, r2, #0
    4166:	4798      	blx	r3
    4168:	1c03      	adds	r3, r0, #0
    416a:	1c1a      	adds	r2, r3, #0
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    416c:	4b27      	ldr	r3, [pc, #156]	; (420c <handle_hmi_input+0x1cc>)
    416e:	1c11      	adds	r1, r2, #0
    4170:	1c20      	adds	r0, r4, #0
    4172:	4798      	blx	r3
    4174:	1c03      	adds	r3, r0, #0
    4176:	1c1a      	adds	r2, r3, #0
    4178:	4b25      	ldr	r3, [pc, #148]	; (4210 <handle_hmi_input+0x1d0>)
    417a:	1c10      	adds	r0, r2, #0
    417c:	4798      	blx	r3
    417e:	0002      	movs	r2, r0
    4180:	4b1c      	ldr	r3, [pc, #112]	; (41f4 <handle_hmi_input+0x1b4>)
    4182:	60da      	str	r2, [r3, #12]
			break;
    4184:	e026      	b.n	41d4 <handle_hmi_input+0x194>

		case STAGE_IE:
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    4186:	2305      	movs	r3, #5
    4188:	001a      	movs	r2, r3
    418a:	4b1e      	ldr	r3, [pc, #120]	; (4204 <handle_hmi_input+0x1c4>)
    418c:	0010      	movs	r0, r2
    418e:	4798      	blx	r3
    4190:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.ie_ratio_tenths - lower_settings_range.ie_ratio_tenths);
    4192:	2328      	movs	r3, #40	; 0x28
    4194:	001a      	movs	r2, r3
    4196:	2305      	movs	r3, #5
    4198:	1ad2      	subs	r2, r2, r3
    419a:	4b1a      	ldr	r3, [pc, #104]	; (4204 <handle_hmi_input+0x1c4>)
    419c:	0010      	movs	r0, r2
    419e:	4798      	blx	r3
    41a0:	1c02      	adds	r2, r0, #0
    41a2:	4b19      	ldr	r3, [pc, #100]	; (4208 <handle_hmi_input+0x1c8>)
    41a4:	6839      	ldr	r1, [r7, #0]
    41a6:	1c10      	adds	r0, r2, #0
    41a8:	4798      	blx	r3
    41aa:	1c03      	adds	r3, r0, #0
    41ac:	1c1a      	adds	r2, r3, #0
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    41ae:	4b17      	ldr	r3, [pc, #92]	; (420c <handle_hmi_input+0x1cc>)
    41b0:	1c11      	adds	r1, r2, #0
    41b2:	1c20      	adds	r0, r4, #0
    41b4:	4798      	blx	r3
    41b6:	1c03      	adds	r3, r0, #0
    41b8:	1c1a      	adds	r2, r3, #0
    41ba:	4b16      	ldr	r3, [pc, #88]	; (4214 <handle_hmi_input+0x1d4>)
    41bc:	1c10      	adds	r0, r2, #0
    41be:	4798      	blx	r3
    41c0:	0003      	movs	r3, r0
    41c2:	b2da      	uxtb	r2, r3
    41c4:	4b0b      	ldr	r3, [pc, #44]	; (41f4 <handle_hmi_input+0x1b4>)
    41c6:	705a      	strb	r2, [r3, #1]
			break;
    41c8:	e004      	b.n	41d4 <handle_hmi_input+0x194>
		
		default:
			stage = STAGE_NONE;
    41ca:	4b08      	ldr	r3, [pc, #32]	; (41ec <handle_hmi_input+0x1ac>)
    41cc:	2200      	movs	r2, #0
    41ce:	701a      	strb	r2, [r3, #0]
			break;
    41d0:	e000      	b.n	41d4 <handle_hmi_input+0x194>
		break;
    41d2:	46c0      	nop			; (mov r8, r8)
	}

	last_button_status = new_button_status;
    41d4:	4b04      	ldr	r3, [pc, #16]	; (41e8 <handle_hmi_input+0x1a8>)
    41d6:	1dfa      	adds	r2, r7, #7
    41d8:	7812      	ldrb	r2, [r2, #0]
    41da:	701a      	strb	r2, [r3, #0]
}
    41dc:	46c0      	nop			; (mov r8, r8)
    41de:	46bd      	mov	sp, r7
    41e0:	b003      	add	sp, #12
    41e2:	bd90      	pop	{r4, r7, pc}
    41e4:	00004551 	.word	0x00004551
    41e8:	20005128 	.word	0x20005128
    41ec:	20005110 	.word	0x20005110
    41f0:	0000be7c 	.word	0x0000be7c
    41f4:	20005114 	.word	0x20005114
    41f8:	00003c31 	.word	0x00003c31
    41fc:	000029a5 	.word	0x000029a5
    4200:	0000be90 	.word	0x0000be90
    4204:	0000959d 	.word	0x0000959d
    4208:	00008fe5 	.word	0x00008fe5
    420c:	000088e1 	.word	0x000088e1
    4210:	0000955d 	.word	0x0000955d
    4214:	000088b1 	.word	0x000088b1

00004218 <vScreenChangeTimerCallback>:

static void vScreenChangeTimerCallback( TimerHandle_t xTimer )
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	display_main_page = !display_main_page;
    4220:	4b08      	ldr	r3, [pc, #32]	; (4244 <vScreenChangeTimerCallback+0x2c>)
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	1e5a      	subs	r2, r3, #1
    4226:	4193      	sbcs	r3, r2
    4228:	b2db      	uxtb	r3, r3
    422a:	2201      	movs	r2, #1
    422c:	4053      	eors	r3, r2
    422e:	b2db      	uxtb	r3, r3
    4230:	1c1a      	adds	r2, r3, #0
    4232:	2301      	movs	r3, #1
    4234:	4013      	ands	r3, r2
    4236:	b2da      	uxtb	r2, r3
    4238:	4b02      	ldr	r3, [pc, #8]	; (4244 <vScreenChangeTimerCallback+0x2c>)
    423a:	701a      	strb	r2, [r3, #0]
}
    423c:	46c0      	nop			; (mov r8, r8)
    423e:	46bd      	mov	sp, r7
    4240:	b002      	add	sp, #8
    4242:	bd80      	pop	{r7, pc}
    4244:	2000000f 	.word	0x2000000f

00004248 <vScreenRefreshTimerCallback>:

static void vScreenRefreshTimerCallback( TimerHandle_t xTimer )
{
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	
	// Don't display alarm page if no alarms
	if(!display_main_page)
    4250:	4b10      	ldr	r3, [pc, #64]	; (4294 <vScreenRefreshTimerCallback+0x4c>)
    4252:	781b      	ldrb	r3, [r3, #0]
    4254:	2201      	movs	r2, #1
    4256:	4053      	eors	r3, r2
    4258:	b2db      	uxtb	r3, r3
    425a:	2b00      	cmp	r3, #0
    425c:	d00b      	beq.n	4276 <vScreenRefreshTimerCallback+0x2e>
	{
		if(!any_alarms_set())
    425e:	4b0e      	ldr	r3, [pc, #56]	; (4298 <vScreenRefreshTimerCallback+0x50>)
    4260:	4798      	blx	r3
    4262:	0003      	movs	r3, r0
    4264:	001a      	movs	r2, r3
    4266:	2301      	movs	r3, #1
    4268:	4053      	eors	r3, r2
    426a:	b2db      	uxtb	r3, r3
    426c:	2b00      	cmp	r3, #0
    426e:	d002      	beq.n	4276 <vScreenRefreshTimerCallback+0x2e>
		{
			display_main_page = true;
    4270:	4b08      	ldr	r3, [pc, #32]	; (4294 <vScreenRefreshTimerCallback+0x4c>)
    4272:	2201      	movs	r2, #1
    4274:	701a      	strb	r2, [r3, #0]
		}
	}

	if(display_main_page)
    4276:	4b07      	ldr	r3, [pc, #28]	; (4294 <vScreenRefreshTimerCallback+0x4c>)
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d003      	beq.n	4286 <vScreenRefreshTimerCallback+0x3e>
	{
		send_buffer(MAIN_SCREEN);
    427e:	2000      	movs	r0, #0
    4280:	4b06      	ldr	r3, [pc, #24]	; (429c <vScreenRefreshTimerCallback+0x54>)
    4282:	4798      	blx	r3
	}
	else
	{
		send_buffer(ALARM_SCREEN);
	}
}
    4284:	e002      	b.n	428c <vScreenRefreshTimerCallback+0x44>
		send_buffer(ALARM_SCREEN);
    4286:	2001      	movs	r0, #1
    4288:	4b04      	ldr	r3, [pc, #16]	; (429c <vScreenRefreshTimerCallback+0x54>)
    428a:	4798      	blx	r3
}
    428c:	46c0      	nop			; (mov r8, r8)
    428e:	46bd      	mov	sp, r7
    4290:	b002      	add	sp, #8
    4292:	bd80      	pop	{r7, pc}
    4294:	2000000f 	.word	0x2000000f
    4298:	00002a95 	.word	0x00002a95
    429c:	000031c9 	.word	0x000031c9

000042a0 <handle_i2c_write_complete>:

void handle_i2c_write_complete(struct i2c_master_module *const module)
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b082      	sub	sp, #8
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
	i2c_master_get_job_status(module);
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	0018      	movs	r0, r3
    42ac:	4b05      	ldr	r3, [pc, #20]	; (42c4 <handle_i2c_write_complete+0x24>)
    42ae:	4798      	blx	r3

	xTaskResumeFromISR(lcd_i2c_task_handle);
    42b0:	4b05      	ldr	r3, [pc, #20]	; (42c8 <handle_i2c_write_complete+0x28>)
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	0018      	movs	r0, r3
    42b6:	4b05      	ldr	r3, [pc, #20]	; (42cc <handle_i2c_write_complete+0x2c>)
    42b8:	4798      	blx	r3
}
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	46bd      	mov	sp, r7
    42be:	b002      	add	sp, #8
    42c0:	bd80      	pop	{r7, pc}
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	00004029 	.word	0x00004029
    42c8:	200050d8 	.word	0x200050d8
    42cc:	0000588d 	.word	0x0000588d

000042d0 <lcd_i2c_hw_setup>:

static void lcd_i2c_hw_setup(void)
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b08e      	sub	sp, #56	; 0x38
    42d4:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    42d6:	1d3b      	adds	r3, r7, #4
    42d8:	0018      	movs	r0, r3
    42da:	4b1c      	ldr	r3, [pc, #112]	; (434c <lcd_i2c_hw_setup+0x7c>)
    42dc:	4798      	blx	r3
	config_i2c_master.generator_source = GCLK_GENERATOR_1;	// 8 MHz
    42de:	1d3b      	adds	r3, r7, #4
    42e0:	2201      	movs	r2, #1
    42e2:	731a      	strb	r2, [r3, #12]
	config_i2c_master.baud_rate = 45; // Set in # of kHz
    42e4:	1d3b      	adds	r3, r7, #4
    42e6:	222d      	movs	r2, #45	; 0x2d
    42e8:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535;
    42ea:	1d3b      	adds	r3, r7, #4
    42ec:	2201      	movs	r2, #1
    42ee:	4252      	negs	r2, r2
    42f0:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA16C_SERCOM1_PAD0;
    42f2:	1d3b      	adds	r3, r7, #4
    42f4:	2210      	movs	r2, #16
    42f6:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA17C_SERCOM1_PAD1;
    42f8:	1d3b      	adds	r3, r7, #4
    42fa:	2211      	movs	r2, #17
    42fc:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, LCD_SERCOM, &config_i2c_master) != STATUS_OK);
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	1d3a      	adds	r2, r7, #4
    4302:	4913      	ldr	r1, [pc, #76]	; (4350 <lcd_i2c_hw_setup+0x80>)
    4304:	4b13      	ldr	r3, [pc, #76]	; (4354 <lcd_i2c_hw_setup+0x84>)
    4306:	0018      	movs	r0, r3
    4308:	4b13      	ldr	r3, [pc, #76]	; (4358 <lcd_i2c_hw_setup+0x88>)
    430a:	4798      	blx	r3
    430c:	1e03      	subs	r3, r0, #0
    430e:	d1f7      	bne.n	4300 <lcd_i2c_hw_setup+0x30>

	// Uses FreeRTOS, so need to limit priority
	irq_register_handler(LCD_SERCOM_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    4310:	200a      	movs	r0, #10
    4312:	4b12      	ldr	r3, [pc, #72]	; (435c <lcd_i2c_hw_setup+0x8c>)
    4314:	4798      	blx	r3
    4316:	2104      	movs	r1, #4
    4318:	200a      	movs	r0, #10
    431a:	4b11      	ldr	r3, [pc, #68]	; (4360 <lcd_i2c_hw_setup+0x90>)
    431c:	4798      	blx	r3
    431e:	200a      	movs	r0, #10
    4320:	4b10      	ldr	r3, [pc, #64]	; (4364 <lcd_i2c_hw_setup+0x94>)
    4322:	4798      	blx	r3
	i2c_master_register_callback(&i2c_master_instance, handle_i2c_write_complete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    4324:	4910      	ldr	r1, [pc, #64]	; (4368 <lcd_i2c_hw_setup+0x98>)
    4326:	4b0b      	ldr	r3, [pc, #44]	; (4354 <lcd_i2c_hw_setup+0x84>)
    4328:	2200      	movs	r2, #0
    432a:	0018      	movs	r0, r3
    432c:	4b0f      	ldr	r3, [pc, #60]	; (436c <lcd_i2c_hw_setup+0x9c>)
    432e:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    4330:	4b08      	ldr	r3, [pc, #32]	; (4354 <lcd_i2c_hw_setup+0x84>)
    4332:	2100      	movs	r1, #0
    4334:	0018      	movs	r0, r3
    4336:	4b0e      	ldr	r3, [pc, #56]	; (4370 <lcd_i2c_hw_setup+0xa0>)
    4338:	4798      	blx	r3

	i2c_master_enable(&i2c_master_instance);
    433a:	4b06      	ldr	r3, [pc, #24]	; (4354 <lcd_i2c_hw_setup+0x84>)
    433c:	0018      	movs	r0, r3
    433e:	4b0d      	ldr	r3, [pc, #52]	; (4374 <lcd_i2c_hw_setup+0xa4>)
    4340:	4798      	blx	r3
}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	46bd      	mov	sp, r7
    4346:	b00e      	add	sp, #56	; 0x38
    4348:	bd80      	pop	{r7, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	00003efd 	.word	0x00003efd
    4350:	42000c00 	.word	0x42000c00
    4354:	200050e8 	.word	0x200050e8
    4358:	0000161d 	.word	0x0000161d
    435c:	00003ca5 	.word	0x00003ca5
    4360:	00003cd9 	.word	0x00003cd9
    4364:	00003c79 	.word	0x00003c79
    4368:	000042a1 	.word	0x000042a1
    436c:	00001a75 	.word	0x00001a75
    4370:	00003ff5 	.word	0x00003ff5
    4374:	00003f81 	.word	0x00003f81

00004378 <hmi_task>:

static void hmi_task(void * pvParameters)
{
    4378:	b590      	push	{r4, r7, lr}
    437a:	b087      	sub	sp, #28
    437c:	af02      	add	r7, sp, #8
    437e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	lcd_i2c_hw_setup();
    4380:	4b29      	ldr	r3, [pc, #164]	; (4428 <hmi_task+0xb0>)
    4382:	4798      	blx	r3
	lcd_init();
    4384:	4b29      	ldr	r3, [pc, #164]	; (442c <hmi_task+0xb4>)
    4386:	4798      	blx	r3

	screen_update_handle = xTimerCreate("SCREEN_TIM",
    4388:	4829      	ldr	r0, [pc, #164]	; (4430 <hmi_task+0xb8>)
    438a:	4b2a      	ldr	r3, [pc, #168]	; (4434 <hmi_task+0xbc>)
    438c:	9300      	str	r3, [sp, #0]
    438e:	2300      	movs	r3, #0
    4390:	2201      	movs	r2, #1
    4392:	211e      	movs	r1, #30
    4394:	4c28      	ldr	r4, [pc, #160]	; (4438 <hmi_task+0xc0>)
    4396:	47a0      	blx	r4
    4398:	0002      	movs	r2, r0
    439a:	4b28      	ldr	r3, [pc, #160]	; (443c <hmi_task+0xc4>)
    439c:	601a      	str	r2, [r3, #0]
				pdMS_TO_TICKS(30),
				pdTRUE,
				(void *) 0,
				vScreenRefreshTimerCallback);
	if(screen_update_handle)
    439e:	4b27      	ldr	r3, [pc, #156]	; (443c <hmi_task+0xc4>)
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d00b      	beq.n	43be <hmi_task+0x46>
	{
		xTimerStart(screen_update_handle, 0);
    43a6:	4b25      	ldr	r3, [pc, #148]	; (443c <hmi_task+0xc4>)
    43a8:	681c      	ldr	r4, [r3, #0]
    43aa:	4b25      	ldr	r3, [pc, #148]	; (4440 <hmi_task+0xc8>)
    43ac:	4798      	blx	r3
    43ae:	0002      	movs	r2, r0
    43b0:	2300      	movs	r3, #0
    43b2:	9300      	str	r3, [sp, #0]
    43b4:	2300      	movs	r3, #0
    43b6:	2101      	movs	r1, #1
    43b8:	0020      	movs	r0, r4
    43ba:	4c22      	ldr	r4, [pc, #136]	; (4444 <hmi_task+0xcc>)
    43bc:	47a0      	blx	r4
	}

	screen_change_handle = xTimerCreate("SCREEN_CHG",
    43be:	23fa      	movs	r3, #250	; 0xfa
    43c0:	00d9      	lsls	r1, r3, #3
    43c2:	4821      	ldr	r0, [pc, #132]	; (4448 <hmi_task+0xd0>)
    43c4:	4b21      	ldr	r3, [pc, #132]	; (444c <hmi_task+0xd4>)
    43c6:	9300      	str	r3, [sp, #0]
    43c8:	2300      	movs	r3, #0
    43ca:	2201      	movs	r2, #1
    43cc:	4c1a      	ldr	r4, [pc, #104]	; (4438 <hmi_task+0xc0>)
    43ce:	47a0      	blx	r4
    43d0:	0002      	movs	r2, r0
    43d2:	4b1f      	ldr	r3, [pc, #124]	; (4450 <hmi_task+0xd8>)
    43d4:	601a      	str	r2, [r3, #0]
		pdMS_TO_TICKS(2000),
		pdTRUE,
		(void *) 0,
		vScreenChangeTimerCallback);
	if(screen_change_handle)
    43d6:	4b1e      	ldr	r3, [pc, #120]	; (4450 <hmi_task+0xd8>)
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	2b00      	cmp	r3, #0
    43dc:	d00b      	beq.n	43f6 <hmi_task+0x7e>
	{
		xTimerStart(screen_change_handle, 0);
    43de:	4b1c      	ldr	r3, [pc, #112]	; (4450 <hmi_task+0xd8>)
    43e0:	681c      	ldr	r4, [r3, #0]
    43e2:	4b17      	ldr	r3, [pc, #92]	; (4440 <hmi_task+0xc8>)
    43e4:	4798      	blx	r3
    43e6:	0002      	movs	r2, r0
    43e8:	2300      	movs	r3, #0
    43ea:	9300      	str	r3, [sp, #0]
    43ec:	2300      	movs	r3, #0
    43ee:	2101      	movs	r1, #1
    43f0:	0020      	movs	r0, r4
    43f2:	4c14      	ldr	r4, [pc, #80]	; (4444 <hmi_task+0xcc>)
    43f4:	47a0      	blx	r4
	}

	const TickType_t xFrequency = pdMS_TO_TICKS(20);	// 50 Hz rate
    43f6:	2314      	movs	r3, #20
    43f8:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
    43fa:	4b11      	ldr	r3, [pc, #68]	; (4440 <hmi_task+0xc8>)
    43fc:	4798      	blx	r3
    43fe:	0003      	movs	r3, r0
    4400:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    4402:	68fa      	ldr	r2, [r7, #12]
    4404:	2308      	movs	r3, #8
    4406:	18fb      	adds	r3, r7, r3
    4408:	0011      	movs	r1, r2
    440a:	0018      	movs	r0, r3
    440c:	4b11      	ldr	r3, [pc, #68]	; (4454 <hmi_task+0xdc>)
    440e:	4798      	blx	r3

		handle_hmi_input();
    4410:	4b11      	ldr	r3, [pc, #68]	; (4458 <hmi_task+0xe0>)
    4412:	4798      	blx	r3
		// Actual display write and screen changes happens in timers. Here we just update buffers
		update_main_buffer(&settings_input, stage);
    4414:	4b11      	ldr	r3, [pc, #68]	; (445c <hmi_task+0xe4>)
    4416:	781a      	ldrb	r2, [r3, #0]
    4418:	4b11      	ldr	r3, [pc, #68]	; (4460 <hmi_task+0xe8>)
    441a:	0011      	movs	r1, r2
    441c:	0018      	movs	r0, r3
    441e:	4b11      	ldr	r3, [pc, #68]	; (4464 <hmi_task+0xec>)
    4420:	4798      	blx	r3
		update_alarm_buffer();
    4422:	4b11      	ldr	r3, [pc, #68]	; (4468 <hmi_task+0xf0>)
    4424:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    4426:	e7ec      	b.n	4402 <hmi_task+0x8a>
    4428:	000042d1 	.word	0x000042d1
    442c:	00003131 	.word	0x00003131
    4430:	0000bea4 	.word	0x0000bea4
    4434:	00004249 	.word	0x00004249
    4438:	000063a9 	.word	0x000063a9
    443c:	200050dc 	.word	0x200050dc
    4440:	00005b2d 	.word	0x00005b2d
    4444:	0000644d 	.word	0x0000644d
    4448:	0000beb0 	.word	0x0000beb0
    444c:	00004219 	.word	0x00004219
    4450:	200050e0 	.word	0x200050e0
    4454:	00005621 	.word	0x00005621
    4458:	00004041 	.word	0x00004041
    445c:	20005110 	.word	0x20005110
    4460:	20005114 	.word	0x20005114
    4464:	0000347d 	.word	0x0000347d
    4468:	00003655 	.word	0x00003655

0000446c <lcd_i2c_task>:

	}
}

static void lcd_i2c_task(void * pvParameters)
{
    446c:	b580      	push	{r7, lr}
    446e:	b086      	sub	sp, #24
    4470:	af00      	add	r7, sp, #0
    4472:	6078      	str	r0, [r7, #4]

	i2c_transaction_t transaction;

	for (;;)
	{
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    4474:	4b0c      	ldr	r3, [pc, #48]	; (44a8 <lcd_i2c_task+0x3c>)
    4476:	6818      	ldr	r0, [r3, #0]
    4478:	2301      	movs	r3, #1
    447a:	425a      	negs	r2, r3
    447c:	230c      	movs	r3, #12
    447e:	18fb      	adds	r3, r7, r3
    4480:	0019      	movs	r1, r3
    4482:	4b0a      	ldr	r3, [pc, #40]	; (44ac <lcd_i2c_task+0x40>)
    4484:	4798      	blx	r3
    4486:	0003      	movs	r3, r0
    4488:	2b01      	cmp	r3, #1
    448a:	d1f3      	bne.n	4474 <lcd_i2c_task+0x8>
		{
			// Send transaction
			i2c_master_write_packet_job(&i2c_master_instance, &transaction.packet);
    448c:	230c      	movs	r3, #12
    448e:	18fa      	adds	r2, r7, r3
    4490:	4b07      	ldr	r3, [pc, #28]	; (44b0 <lcd_i2c_task+0x44>)
    4492:	0011      	movs	r1, r2
    4494:	0018      	movs	r0, r3
    4496:	4b07      	ldr	r3, [pc, #28]	; (44b4 <lcd_i2c_task+0x48>)
    4498:	4798      	blx	r3

			// Set up timeout timer

			vTaskSuspend(lcd_i2c_task_handle);
    449a:	4b07      	ldr	r3, [pc, #28]	; (44b8 <lcd_i2c_task+0x4c>)
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	0018      	movs	r0, r3
    44a0:	4b06      	ldr	r3, [pc, #24]	; (44bc <lcd_i2c_task+0x50>)
    44a2:	4798      	blx	r3
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    44a4:	e7e6      	b.n	4474 <lcd_i2c_task+0x8>
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	200050e4 	.word	0x200050e4
    44ac:	00004df5 	.word	0x00004df5
    44b0:	200050e8 	.word	0x200050e8
    44b4:	00001b61 	.word	0x00001b61
    44b8:	200050d8 	.word	0x200050d8
    44bc:	00005745 	.word	0x00005745

000044c0 <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    44c0:	b590      	push	{r4, r7, lr}
    44c2:	b085      	sub	sp, #20
    44c4:	af02      	add	r7, sp, #8
    44c6:	0002      	movs	r2, r0
    44c8:	6039      	str	r1, [r7, #0]
    44ca:	1dbb      	adds	r3, r7, #6
    44cc:	801a      	strh	r2, [r3, #0]
	lcd_i2c_queue = xQueueCreate(LCD_I2C_QUEUE_SIZE, sizeof(i2c_transaction_t));
    44ce:	2200      	movs	r2, #0
    44d0:	210c      	movs	r1, #12
    44d2:	200a      	movs	r0, #10
    44d4:	4b0f      	ldr	r3, [pc, #60]	; (4514 <create_hmi_task+0x54>)
    44d6:	4798      	blx	r3
    44d8:	0002      	movs	r2, r0
    44da:	4b0f      	ldr	r3, [pc, #60]	; (4518 <create_hmi_task+0x58>)
    44dc:	601a      	str	r2, [r3, #0]

	xTaskCreate(hmi_task, (const char * const) "HMI",
    44de:	1dbb      	adds	r3, r7, #6
    44e0:	881a      	ldrh	r2, [r3, #0]
    44e2:	490e      	ldr	r1, [pc, #56]	; (451c <create_hmi_task+0x5c>)
    44e4:	480e      	ldr	r0, [pc, #56]	; (4520 <create_hmi_task+0x60>)
    44e6:	4b0f      	ldr	r3, [pc, #60]	; (4524 <create_hmi_task+0x64>)
    44e8:	9301      	str	r3, [sp, #4]
    44ea:	683b      	ldr	r3, [r7, #0]
    44ec:	9300      	str	r3, [sp, #0]
    44ee:	2300      	movs	r3, #0
    44f0:	4c0d      	ldr	r4, [pc, #52]	; (4528 <create_hmi_task+0x68>)
    44f2:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);

	xTaskCreate(lcd_i2c_task, (const char * const) "I2C",
    44f4:	2380      	movs	r3, #128	; 0x80
    44f6:	005a      	lsls	r2, r3, #1
    44f8:	490c      	ldr	r1, [pc, #48]	; (452c <create_hmi_task+0x6c>)
    44fa:	480d      	ldr	r0, [pc, #52]	; (4530 <create_hmi_task+0x70>)
    44fc:	4b0d      	ldr	r3, [pc, #52]	; (4534 <create_hmi_task+0x74>)
    44fe:	9301      	str	r3, [sp, #4]
    4500:	683b      	ldr	r3, [r7, #0]
    4502:	9300      	str	r3, [sp, #0]
    4504:	2300      	movs	r3, #0
    4506:	4c08      	ldr	r4, [pc, #32]	; (4528 <create_hmi_task+0x68>)
    4508:	47a0      	blx	r4
		256, NULL, task_priority, &lcd_i2c_task_handle);
}
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	46bd      	mov	sp, r7
    450e:	b003      	add	sp, #12
    4510:	bd90      	pop	{r4, r7, pc}
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	00004a31 	.word	0x00004a31
    4518:	200050e4 	.word	0x200050e4
    451c:	0000bebc 	.word	0x0000bebc
    4520:	00004379 	.word	0x00004379
    4524:	200050d4 	.word	0x200050d4
    4528:	0000538d 	.word	0x0000538d
    452c:	0000bec0 	.word	0x0000bec0
    4530:	0000446d 	.word	0x0000446d
    4534:	200050d8 	.word	0x200050d8

00004538 <system_is_enabled>:
*	\brief Checks is the system enable switch is on
*
*	\return True if enabled, false otherwise
*/
bool system_is_enabled(void)
{
    4538:	b580      	push	{r7, lr}
    453a:	af00      	add	r7, sp, #0
	return (ioport_get_pin_level(INPUT_ENABLE_GPIO) == IOPORT_PIN_LEVEL_HIGH);
    453c:	202b      	movs	r0, #43	; 0x2b
    453e:	4b03      	ldr	r3, [pc, #12]	; (454c <system_is_enabled+0x14>)
    4540:	4798      	blx	r3
    4542:	0003      	movs	r3, r0
}
    4544:	0018      	movs	r0, r3
    4546:	46bd      	mov	sp, r7
    4548:	bd80      	pop	{r7, pc}
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	00003e95 	.word	0x00003e95

00004550 <get_pushbutton_level>:
*	\brief Checks the level of the pushbutton
*
*	\return True if high, false if low
*/
bool get_pushbutton_level(void)
{
    4550:	b580      	push	{r7, lr}
    4552:	af00      	add	r7, sp, #0
	return ioport_get_pin_level(INPUT_PUSHBUTTON_GPIO);
    4554:	200c      	movs	r0, #12
    4556:	4b03      	ldr	r3, [pc, #12]	; (4564 <get_pushbutton_level+0x14>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
}
    455c:	0018      	movs	r0, r3
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	00003e95 	.word	0x00003e95

00004568 <add_lcd_i2c_transaction_to_queue>:

void add_lcd_i2c_transaction_to_queue(i2c_transaction_t transaction)
{
    4568:	b590      	push	{r4, r7, lr}
    456a:	b085      	sub	sp, #20
    456c:	af00      	add	r7, sp, #0
    456e:	1d3b      	adds	r3, r7, #4
    4570:	6018      	str	r0, [r3, #0]
    4572:	6059      	str	r1, [r3, #4]
    4574:	609a      	str	r2, [r3, #8]
	if(lcd_i2c_queue)
    4576:	4b07      	ldr	r3, [pc, #28]	; (4594 <add_lcd_i2c_transaction_to_queue+0x2c>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d006      	beq.n	458c <add_lcd_i2c_transaction_to_queue+0x24>
	{
		xQueueSend(lcd_i2c_queue, &transaction, 0);
    457e:	4b05      	ldr	r3, [pc, #20]	; (4594 <add_lcd_i2c_transaction_to_queue+0x2c>)
    4580:	6818      	ldr	r0, [r3, #0]
    4582:	1d39      	adds	r1, r7, #4
    4584:	2300      	movs	r3, #0
    4586:	2200      	movs	r2, #0
    4588:	4c03      	ldr	r4, [pc, #12]	; (4598 <add_lcd_i2c_transaction_to_queue+0x30>)
    458a:	47a0      	blx	r4
	}
    458c:	46c0      	nop			; (mov r8, r8)
    458e:	46bd      	mov	sp, r7
    4590:	b005      	add	sp, #20
    4592:	bd90      	pop	{r4, r7, pc}
    4594:	200050e4 	.word	0x200050e4
    4598:	00004af5 	.word	0x00004af5

0000459c <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    459c:	b580      	push	{r7, lr}
    459e:	b082      	sub	sp, #8
    45a0:	af00      	add	r7, sp, #0
    45a2:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    45a4:	23fa      	movs	r3, #250	; 0xfa
    45a6:	009b      	lsls	r3, r3, #2
    45a8:	0018      	movs	r0, r3
    45aa:	4b01      	ldr	r3, [pc, #4]	; (45b0 <monitor_task+0x14>)
    45ac:	4798      	blx	r3
    45ae:	e7f9      	b.n	45a4 <monitor_task+0x8>
    45b0:	000056e9 	.word	0x000056e9

000045b4 <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    45b4:	b590      	push	{r4, r7, lr}
    45b6:	b085      	sub	sp, #20
    45b8:	af02      	add	r7, sp, #8
    45ba:	0002      	movs	r2, r0
    45bc:	6039      	str	r1, [r7, #0]
    45be:	1dbb      	adds	r3, r7, #6
    45c0:	801a      	strh	r2, [r3, #0]
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    45c2:	1dbb      	adds	r3, r7, #6
    45c4:	881a      	ldrh	r2, [r3, #0]
    45c6:	4906      	ldr	r1, [pc, #24]	; (45e0 <create_monitor_task+0x2c>)
    45c8:	4806      	ldr	r0, [pc, #24]	; (45e4 <create_monitor_task+0x30>)
    45ca:	4b07      	ldr	r3, [pc, #28]	; (45e8 <create_monitor_task+0x34>)
    45cc:	9301      	str	r3, [sp, #4]
    45ce:	683b      	ldr	r3, [r7, #0]
    45d0:	9300      	str	r3, [sp, #0]
    45d2:	2300      	movs	r3, #0
    45d4:	4c05      	ldr	r4, [pc, #20]	; (45ec <create_monitor_task+0x38>)
    45d6:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    45d8:	46c0      	nop			; (mov r8, r8)
    45da:	46bd      	mov	sp, r7
    45dc:	b003      	add	sp, #12
    45de:	bd90      	pop	{r4, r7, pc}
    45e0:	0000bec4 	.word	0x0000bec4
    45e4:	0000459d 	.word	0x0000459d
    45e8:	2000512c 	.word	0x2000512c
    45ec:	0000538d 	.word	0x0000538d

000045f0 <system_interrupt_enable>:
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b082      	sub	sp, #8
    45f4:	af00      	add	r7, sp, #0
    45f6:	0002      	movs	r2, r0
    45f8:	1dfb      	adds	r3, r7, #7
    45fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    45fc:	4b06      	ldr	r3, [pc, #24]	; (4618 <system_interrupt_enable+0x28>)
    45fe:	1dfa      	adds	r2, r7, #7
    4600:	7812      	ldrb	r2, [r2, #0]
    4602:	0011      	movs	r1, r2
    4604:	221f      	movs	r2, #31
    4606:	400a      	ands	r2, r1
    4608:	2101      	movs	r1, #1
    460a:	4091      	lsls	r1, r2
    460c:	000a      	movs	r2, r1
    460e:	601a      	str	r2, [r3, #0]
}
    4610:	46c0      	nop			; (mov r8, r8)
    4612:	46bd      	mov	sp, r7
    4614:	b002      	add	sp, #8
    4616:	bd80      	pop	{r7, pc}
    4618:	e000e100 	.word	0xe000e100

0000461c <i2c_master_is_syncing>:
{
    461c:	b580      	push	{r7, lr}
    461e:	b084      	sub	sp, #16
    4620:	af00      	add	r7, sp, #0
    4622:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	681b      	ldr	r3, [r3, #0]
    4628:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	69db      	ldr	r3, [r3, #28]
    462e:	2207      	movs	r2, #7
    4630:	4013      	ands	r3, r2
    4632:	1e5a      	subs	r2, r3, #1
    4634:	4193      	sbcs	r3, r2
    4636:	b2db      	uxtb	r3, r3
}
    4638:	0018      	movs	r0, r3
    463a:	46bd      	mov	sp, r7
    463c:	b004      	add	sp, #16
    463e:	bd80      	pop	{r7, pc}

00004640 <_i2c_master_wait_for_sync>:
{
    4640:	b580      	push	{r7, lr}
    4642:	b082      	sub	sp, #8
    4644:	af00      	add	r7, sp, #0
    4646:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    4648:	46c0      	nop			; (mov r8, r8)
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	0018      	movs	r0, r3
    464e:	4b04      	ldr	r3, [pc, #16]	; (4660 <_i2c_master_wait_for_sync+0x20>)
    4650:	4798      	blx	r3
    4652:	1e03      	subs	r3, r0, #0
    4654:	d1f9      	bne.n	464a <_i2c_master_wait_for_sync+0xa>
}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	46bd      	mov	sp, r7
    465a:	b002      	add	sp, #8
    465c:	bd80      	pop	{r7, pc}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	0000461d 	.word	0x0000461d

00004664 <i2c_master_get_config_defaults>:
{
    4664:	b580      	push	{r7, lr}
    4666:	b082      	sub	sp, #8
    4668:	af00      	add	r7, sp, #0
    466a:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	2264      	movs	r2, #100	; 0x64
    4670:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	4a1b      	ldr	r2, [pc, #108]	; (46e4 <i2c_master_get_config_defaults+0x80>)
    4676:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	2200      	movs	r2, #0
    467c:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	2200      	movs	r2, #0
    4682:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	2200      	movs	r2, #0
    4688:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	2280      	movs	r2, #128	; 0x80
    468e:	0392      	lsls	r2, r2, #14
    4690:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	2201      	movs	r2, #1
    4696:	4252      	negs	r2, r2
    4698:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    469a:	687b      	ldr	r3, [r7, #4]
    469c:	2201      	movs	r2, #1
    469e:	4252      	negs	r2, r2
    46a0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	2200      	movs	r2, #0
    46a6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	2200      	movs	r2, #0
    46ac:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	2224      	movs	r2, #36	; 0x24
    46b2:	2100      	movs	r1, #0
    46b4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	2200      	movs	r2, #0
    46ba:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	222c      	movs	r2, #44	; 0x2c
    46c0:	2100      	movs	r1, #0
    46c2:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
    46c4:	687b      	ldr	r3, [r7, #4]
    46c6:	222d      	movs	r2, #45	; 0x2d
    46c8:	2100      	movs	r1, #0
    46ca:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	222e      	movs	r2, #46	; 0x2e
    46d0:	2100      	movs	r1, #0
    46d2:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
    46d4:	687b      	ldr	r3, [r7, #4]
    46d6:	22d7      	movs	r2, #215	; 0xd7
    46d8:	861a      	strh	r2, [r3, #48]	; 0x30
}
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	46bd      	mov	sp, r7
    46de:	b002      	add	sp, #8
    46e0:	bd80      	pop	{r7, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00000d48 	.word	0x00000d48

000046e8 <i2c_master_enable>:
{
    46e8:	b580      	push	{r7, lr}
    46ea:	b084      	sub	sp, #16
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
    46f6:	2300      	movs	r3, #0
    46f8:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
    46fa:	687b      	ldr	r3, [r7, #4]
    46fc:	0018      	movs	r0, r3
    46fe:	4b14      	ldr	r3, [pc, #80]	; (4750 <i2c_master_enable+0x68>)
    4700:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4702:	68bb      	ldr	r3, [r7, #8]
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	2202      	movs	r2, #2
    4708:	431a      	orrs	r2, r3
    470a:	68bb      	ldr	r3, [r7, #8]
    470c:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    470e:	687b      	ldr	r3, [r7, #4]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	0018      	movs	r0, r3
    4714:	4b0f      	ldr	r3, [pc, #60]	; (4754 <i2c_master_enable+0x6c>)
    4716:	4798      	blx	r3
    4718:	0003      	movs	r3, r0
    471a:	0018      	movs	r0, r3
    471c:	4b0e      	ldr	r3, [pc, #56]	; (4758 <i2c_master_enable+0x70>)
    471e:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4720:	e00c      	b.n	473c <i2c_master_enable+0x54>
		timeout_counter++;
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	3301      	adds	r3, #1
    4726:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	88db      	ldrh	r3, [r3, #6]
    472c:	001a      	movs	r2, r3
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	429a      	cmp	r2, r3
    4732:	d803      	bhi.n	473c <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4734:	68bb      	ldr	r3, [r7, #8]
    4736:	2210      	movs	r2, #16
    4738:	835a      	strh	r2, [r3, #26]
			return;
    473a:	e006      	b.n	474a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    473c:	68bb      	ldr	r3, [r7, #8]
    473e:	8b5b      	ldrh	r3, [r3, #26]
    4740:	b29b      	uxth	r3, r3
    4742:	001a      	movs	r2, r3
    4744:	2310      	movs	r3, #16
    4746:	4013      	ands	r3, r2
    4748:	d0eb      	beq.n	4722 <i2c_master_enable+0x3a>
}
    474a:	46bd      	mov	sp, r7
    474c:	b004      	add	sp, #16
    474e:	bd80      	pop	{r7, pc}
    4750:	00004641 	.word	0x00004641
    4754:	00006fa5 	.word	0x00006fa5
    4758:	000045f1 	.word	0x000045f1

0000475c <sensor_hw_init>:
*	\brief Sets up sensor interface hardware
*
*	Sets up ADC for communication with pressure sensors and flow meter
*/
static void sensor_hw_init(void)
{
    475c:	b580      	push	{r7, lr}
    475e:	b08e      	sub	sp, #56	; 0x38
    4760:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    4762:	1d3b      	adds	r3, r7, #4
    4764:	0018      	movs	r0, r3
    4766:	4b11      	ldr	r3, [pc, #68]	; (47ac <sensor_hw_init+0x50>)
    4768:	4798      	blx	r3
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    476a:	1d3b      	adds	r3, r7, #4
    476c:	2264      	movs	r2, #100	; 0x64
    476e:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535; 
    4770:	1d3b      	adds	r3, r7, #4
    4772:	2201      	movs	r2, #1
    4774:	4252      	negs	r2, r2
    4776:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    4778:	1d3b      	adds	r3, r7, #4
    477a:	2216      	movs	r2, #22
    477c:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    477e:	1d3b      	adds	r3, r7, #4
    4780:	2217      	movs	r2, #23
    4782:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    4784:	46c0      	nop			; (mov r8, r8)
    4786:	1d3a      	adds	r2, r7, #4
    4788:	4909      	ldr	r1, [pc, #36]	; (47b0 <sensor_hw_init+0x54>)
    478a:	4b0a      	ldr	r3, [pc, #40]	; (47b4 <sensor_hw_init+0x58>)
    478c:	0018      	movs	r0, r3
    478e:	4b0a      	ldr	r3, [pc, #40]	; (47b8 <sensor_hw_init+0x5c>)
    4790:	4798      	blx	r3
    4792:	1e03      	subs	r3, r0, #0
    4794:	d1f7      	bne.n	4786 <sensor_hw_init+0x2a>
	i2c_master_enable(&i2c_master_instance);
    4796:	4b07      	ldr	r3, [pc, #28]	; (47b4 <sensor_hw_init+0x58>)
    4798:	0018      	movs	r0, r3
    479a:	4b08      	ldr	r3, [pc, #32]	; (47bc <sensor_hw_init+0x60>)
    479c:	4798      	blx	r3

	adc_interface_init();
    479e:	4b08      	ldr	r3, [pc, #32]	; (47c0 <sensor_hw_init+0x64>)
    47a0:	4798      	blx	r3
}
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	46bd      	mov	sp, r7
    47a6:	b00e      	add	sp, #56	; 0x38
    47a8:	bd80      	pop	{r7, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	00004665 	.word	0x00004665
    47b0:	42001400 	.word	0x42001400
    47b4:	20005134 	.word	0x20005134
    47b8:	0000161d 	.word	0x0000161d
    47bc:	000046e9 	.word	0x000046e9
    47c0:	00002599 	.word	0x00002599

000047c4 <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b082      	sub	sp, #8
    47c8:	af00      	add	r7, sp, #0
    47ca:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	sensor_hw_init();
    47cc:	4b03      	ldr	r3, [pc, #12]	; (47dc <sensor_task+0x18>)
    47ce:	4798      	blx	r3
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    47d0:	23fa      	movs	r3, #250	; 0xfa
    47d2:	009b      	lsls	r3, r3, #2
    47d4:	0018      	movs	r0, r3
    47d6:	4b02      	ldr	r3, [pc, #8]	; (47e0 <sensor_task+0x1c>)
    47d8:	4798      	blx	r3
    47da:	e7f9      	b.n	47d0 <sensor_task+0xc>
    47dc:	0000475d 	.word	0x0000475d
    47e0:	000056e9 	.word	0x000056e9

000047e4 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    47e4:	b590      	push	{r4, r7, lr}
    47e6:	b085      	sub	sp, #20
    47e8:	af02      	add	r7, sp, #8
    47ea:	0002      	movs	r2, r0
    47ec:	6039      	str	r1, [r7, #0]
    47ee:	1dbb      	adds	r3, r7, #6
    47f0:	801a      	strh	r2, [r3, #0]
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    47f2:	1dbb      	adds	r3, r7, #6
    47f4:	881a      	ldrh	r2, [r3, #0]
    47f6:	4906      	ldr	r1, [pc, #24]	; (4810 <create_sensor_task+0x2c>)
    47f8:	4806      	ldr	r0, [pc, #24]	; (4814 <create_sensor_task+0x30>)
    47fa:	4b07      	ldr	r3, [pc, #28]	; (4818 <create_sensor_task+0x34>)
    47fc:	9301      	str	r3, [sp, #4]
    47fe:	683b      	ldr	r3, [r7, #0]
    4800:	9300      	str	r3, [sp, #0]
    4802:	2300      	movs	r3, #0
    4804:	4c05      	ldr	r4, [pc, #20]	; (481c <create_sensor_task+0x38>)
    4806:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
    4808:	46c0      	nop			; (mov r8, r8)
    480a:	46bd      	mov	sp, r7
    480c:	b003      	add	sp, #12
    480e:	bd90      	pop	{r4, r7, pc}
    4810:	0000becc 	.word	0x0000becc
    4814:	000047c5 	.word	0x000047c5
    4818:	20005130 	.word	0x20005130
    481c:	0000538d 	.word	0x0000538d

00004820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    4820:	b580      	push	{r7, lr}
    4822:	b082      	sub	sp, #8
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	3308      	adds	r3, #8
    482c:	001a      	movs	r2, r3
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4832:	687b      	ldr	r3, [r7, #4]
    4834:	2201      	movs	r2, #1
    4836:	4252      	negs	r2, r2
    4838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	3308      	adds	r3, #8
    483e:	001a      	movs	r2, r3
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	3308      	adds	r3, #8
    4848:	001a      	movs	r2, r3
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	2200      	movs	r2, #0
    4852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    4854:	46c0      	nop			; (mov r8, r8)
    4856:	46bd      	mov	sp, r7
    4858:	b002      	add	sp, #8
    485a:	bd80      	pop	{r7, pc}

0000485c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    485c:	b580      	push	{r7, lr}
    485e:	b082      	sub	sp, #8
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	2200      	movs	r2, #0
    4868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	46bd      	mov	sp, r7
    486e:	b002      	add	sp, #8
    4870:	bd80      	pop	{r7, pc}

00004872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4872:	b580      	push	{r7, lr}
    4874:	b084      	sub	sp, #16
    4876:	af00      	add	r7, sp, #0
    4878:	6078      	str	r0, [r7, #4]
    487a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	685b      	ldr	r3, [r3, #4]
    4880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    4882:	683b      	ldr	r3, [r7, #0]
    4884:	68fa      	ldr	r2, [r7, #12]
    4886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	689a      	ldr	r2, [r3, #8]
    488c:	683b      	ldr	r3, [r7, #0]
    488e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	689b      	ldr	r3, [r3, #8]
    4894:	683a      	ldr	r2, [r7, #0]
    4896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    4898:	68fb      	ldr	r3, [r7, #12]
    489a:	683a      	ldr	r2, [r7, #0]
    489c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    489e:	683b      	ldr	r3, [r7, #0]
    48a0:	687a      	ldr	r2, [r7, #4]
    48a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	1c5a      	adds	r2, r3, #1
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	601a      	str	r2, [r3, #0]
}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	46bd      	mov	sp, r7
    48b2:	b004      	add	sp, #16
    48b4:	bd80      	pop	{r7, pc}

000048b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    48b6:	b580      	push	{r7, lr}
    48b8:	b084      	sub	sp, #16
    48ba:	af00      	add	r7, sp, #0
    48bc:	6078      	str	r0, [r7, #4]
    48be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    48c0:	683b      	ldr	r3, [r7, #0]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    48c6:	68bb      	ldr	r3, [r7, #8]
    48c8:	3301      	adds	r3, #1
    48ca:	d103      	bne.n	48d4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	691b      	ldr	r3, [r3, #16]
    48d0:	60fb      	str	r3, [r7, #12]
    48d2:	e00c      	b.n	48ee <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	3308      	adds	r3, #8
    48d8:	60fb      	str	r3, [r7, #12]
    48da:	e002      	b.n	48e2 <vListInsert+0x2c>
    48dc:	68fb      	ldr	r3, [r7, #12]
    48de:	685b      	ldr	r3, [r3, #4]
    48e0:	60fb      	str	r3, [r7, #12]
    48e2:	68fb      	ldr	r3, [r7, #12]
    48e4:	685b      	ldr	r3, [r3, #4]
    48e6:	681a      	ldr	r2, [r3, #0]
    48e8:	68bb      	ldr	r3, [r7, #8]
    48ea:	429a      	cmp	r2, r3
    48ec:	d9f6      	bls.n	48dc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    48ee:	68fb      	ldr	r3, [r7, #12]
    48f0:	685a      	ldr	r2, [r3, #4]
    48f2:	683b      	ldr	r3, [r7, #0]
    48f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    48f6:	683b      	ldr	r3, [r7, #0]
    48f8:	685b      	ldr	r3, [r3, #4]
    48fa:	683a      	ldr	r2, [r7, #0]
    48fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    48fe:	683b      	ldr	r3, [r7, #0]
    4900:	68fa      	ldr	r2, [r7, #12]
    4902:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    4904:	68fb      	ldr	r3, [r7, #12]
    4906:	683a      	ldr	r2, [r7, #0]
    4908:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    490a:	683b      	ldr	r3, [r7, #0]
    490c:	687a      	ldr	r2, [r7, #4]
    490e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	1c5a      	adds	r2, r3, #1
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	601a      	str	r2, [r3, #0]
}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	46bd      	mov	sp, r7
    491e:	b004      	add	sp, #16
    4920:	bd80      	pop	{r7, pc}

00004922 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    4922:	b580      	push	{r7, lr}
    4924:	b084      	sub	sp, #16
    4926:	af00      	add	r7, sp, #0
    4928:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	691b      	ldr	r3, [r3, #16]
    492e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	685b      	ldr	r3, [r3, #4]
    4934:	687a      	ldr	r2, [r7, #4]
    4936:	6892      	ldr	r2, [r2, #8]
    4938:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    493a:	687b      	ldr	r3, [r7, #4]
    493c:	689b      	ldr	r3, [r3, #8]
    493e:	687a      	ldr	r2, [r7, #4]
    4940:	6852      	ldr	r2, [r2, #4]
    4942:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	685a      	ldr	r2, [r3, #4]
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	429a      	cmp	r2, r3
    494c:	d103      	bne.n	4956 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	689a      	ldr	r2, [r3, #8]
    4952:	68fb      	ldr	r3, [r7, #12]
    4954:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4956:	687b      	ldr	r3, [r7, #4]
    4958:	2200      	movs	r2, #0
    495a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	1e5a      	subs	r2, r3, #1
    4962:	68fb      	ldr	r3, [r7, #12]
    4964:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	681b      	ldr	r3, [r3, #0]
}
    496a:	0018      	movs	r0, r3
    496c:	46bd      	mov	sp, r7
    496e:	b004      	add	sp, #16
    4970:	bd80      	pop	{r7, pc}
	...

00004974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    4974:	b580      	push	{r7, lr}
    4976:	b084      	sub	sp, #16
    4978:	af00      	add	r7, sp, #0
    497a:	6078      	str	r0, [r7, #4]
    497c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    4982:	68fb      	ldr	r3, [r7, #12]
    4984:	2b00      	cmp	r3, #0
    4986:	d101      	bne.n	498c <xQueueGenericReset+0x18>
    4988:	b672      	cpsid	i
    498a:	e7fe      	b.n	498a <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    498c:	4b23      	ldr	r3, [pc, #140]	; (4a1c <xQueueGenericReset+0xa8>)
    498e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4990:	68fb      	ldr	r3, [r7, #12]
    4992:	681a      	ldr	r2, [r3, #0]
    4994:	68fb      	ldr	r3, [r7, #12]
    4996:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    499c:	434b      	muls	r3, r1
    499e:	18d2      	adds	r2, r2, r3
    49a0:	68fb      	ldr	r3, [r7, #12]
    49a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    49a4:	68fb      	ldr	r3, [r7, #12]
    49a6:	2200      	movs	r2, #0
    49a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    49aa:	68fb      	ldr	r3, [r7, #12]
    49ac:	681a      	ldr	r2, [r3, #0]
    49ae:	68fb      	ldr	r3, [r7, #12]
    49b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    49b2:	68fb      	ldr	r3, [r7, #12]
    49b4:	681a      	ldr	r2, [r3, #0]
    49b6:	68fb      	ldr	r3, [r7, #12]
    49b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49ba:	1e59      	subs	r1, r3, #1
    49bc:	68fb      	ldr	r3, [r7, #12]
    49be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    49c0:	434b      	muls	r3, r1
    49c2:	18d2      	adds	r2, r2, r3
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	2244      	movs	r2, #68	; 0x44
    49cc:	21ff      	movs	r1, #255	; 0xff
    49ce:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    49d0:	68fb      	ldr	r3, [r7, #12]
    49d2:	2245      	movs	r2, #69	; 0x45
    49d4:	21ff      	movs	r1, #255	; 0xff
    49d6:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    49d8:	683b      	ldr	r3, [r7, #0]
    49da:	2b00      	cmp	r3, #0
    49dc:	d10d      	bne.n	49fa <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	691b      	ldr	r3, [r3, #16]
    49e2:	2b00      	cmp	r3, #0
    49e4:	d013      	beq.n	4a0e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    49e6:	68fb      	ldr	r3, [r7, #12]
    49e8:	3310      	adds	r3, #16
    49ea:	0018      	movs	r0, r3
    49ec:	4b0c      	ldr	r3, [pc, #48]	; (4a20 <xQueueGenericReset+0xac>)
    49ee:	4798      	blx	r3
    49f0:	1e03      	subs	r3, r0, #0
    49f2:	d00c      	beq.n	4a0e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    49f4:	4b0b      	ldr	r3, [pc, #44]	; (4a24 <xQueueGenericReset+0xb0>)
    49f6:	4798      	blx	r3
    49f8:	e009      	b.n	4a0e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    49fa:	68fb      	ldr	r3, [r7, #12]
    49fc:	3310      	adds	r3, #16
    49fe:	0018      	movs	r0, r3
    4a00:	4b09      	ldr	r3, [pc, #36]	; (4a28 <xQueueGenericReset+0xb4>)
    4a02:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	3324      	adds	r3, #36	; 0x24
    4a08:	0018      	movs	r0, r3
    4a0a:	4b07      	ldr	r3, [pc, #28]	; (4a28 <xQueueGenericReset+0xb4>)
    4a0c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    4a0e:	4b07      	ldr	r3, [pc, #28]	; (4a2c <xQueueGenericReset+0xb8>)
    4a10:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    4a12:	2301      	movs	r3, #1
}
    4a14:	0018      	movs	r0, r3
    4a16:	46bd      	mov	sp, r7
    4a18:	b004      	add	sp, #16
    4a1a:	bd80      	pop	{r7, pc}
    4a1c:	00001f51 	.word	0x00001f51
    4a20:	00005e61 	.word	0x00005e61
    4a24:	00001f31 	.word	0x00001f31
    4a28:	00004821 	.word	0x00004821
    4a2c:	00001f75 	.word	0x00001f75

00004a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    4a30:	b590      	push	{r4, r7, lr}
    4a32:	b08b      	sub	sp, #44	; 0x2c
    4a34:	af02      	add	r7, sp, #8
    4a36:	60f8      	str	r0, [r7, #12]
    4a38:	60b9      	str	r1, [r7, #8]
    4a3a:	1dfb      	adds	r3, r7, #7
    4a3c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	2b00      	cmp	r3, #0
    4a42:	d101      	bne.n	4a48 <xQueueGenericCreate+0x18>
    4a44:	b672      	cpsid	i
    4a46:	e7fe      	b.n	4a46 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    4a48:	68bb      	ldr	r3, [r7, #8]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d102      	bne.n	4a54 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    4a4e:	2300      	movs	r3, #0
    4a50:	61fb      	str	r3, [r7, #28]
    4a52:	e003      	b.n	4a5c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4a54:	68fb      	ldr	r3, [r7, #12]
    4a56:	68ba      	ldr	r2, [r7, #8]
    4a58:	4353      	muls	r3, r2
    4a5a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    4a5c:	69fb      	ldr	r3, [r7, #28]
    4a5e:	3354      	adds	r3, #84	; 0x54
    4a60:	0018      	movs	r0, r3
    4a62:	4b0c      	ldr	r3, [pc, #48]	; (4a94 <xQueueGenericCreate+0x64>)
    4a64:	4798      	blx	r3
    4a66:	0003      	movs	r3, r0
    4a68:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    4a6a:	69bb      	ldr	r3, [r7, #24]
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d00c      	beq.n	4a8a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    4a70:	69bb      	ldr	r3, [r7, #24]
    4a72:	3354      	adds	r3, #84	; 0x54
    4a74:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    4a76:	1dfb      	adds	r3, r7, #7
    4a78:	781c      	ldrb	r4, [r3, #0]
    4a7a:	697a      	ldr	r2, [r7, #20]
    4a7c:	68b9      	ldr	r1, [r7, #8]
    4a7e:	68f8      	ldr	r0, [r7, #12]
    4a80:	69bb      	ldr	r3, [r7, #24]
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	0023      	movs	r3, r4
    4a86:	4c04      	ldr	r4, [pc, #16]	; (4a98 <xQueueGenericCreate+0x68>)
    4a88:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    4a8a:	69bb      	ldr	r3, [r7, #24]
	}
    4a8c:	0018      	movs	r0, r3
    4a8e:	46bd      	mov	sp, r7
    4a90:	b009      	add	sp, #36	; 0x24
    4a92:	bd90      	pop	{r4, r7, pc}
    4a94:	0000207d 	.word	0x0000207d
    4a98:	00004a9d 	.word	0x00004a9d

00004a9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b084      	sub	sp, #16
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	60f8      	str	r0, [r7, #12]
    4aa4:	60b9      	str	r1, [r7, #8]
    4aa6:	607a      	str	r2, [r7, #4]
    4aa8:	001a      	movs	r2, r3
    4aaa:	1cfb      	adds	r3, r7, #3
    4aac:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    4aae:	68bb      	ldr	r3, [r7, #8]
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d103      	bne.n	4abc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    4ab4:	69bb      	ldr	r3, [r7, #24]
    4ab6:	69ba      	ldr	r2, [r7, #24]
    4ab8:	601a      	str	r2, [r3, #0]
    4aba:	e002      	b.n	4ac2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    4abc:	69bb      	ldr	r3, [r7, #24]
    4abe:	687a      	ldr	r2, [r7, #4]
    4ac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    4ac2:	69bb      	ldr	r3, [r7, #24]
    4ac4:	68fa      	ldr	r2, [r7, #12]
    4ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4ac8:	69bb      	ldr	r3, [r7, #24]
    4aca:	68ba      	ldr	r2, [r7, #8]
    4acc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    4ace:	69bb      	ldr	r3, [r7, #24]
    4ad0:	2101      	movs	r1, #1
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b06      	ldr	r3, [pc, #24]	; (4af0 <prvInitialiseNewQueue+0x54>)
    4ad6:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    4ad8:	69bb      	ldr	r3, [r7, #24]
    4ada:	1cfa      	adds	r2, r7, #3
    4adc:	2150      	movs	r1, #80	; 0x50
    4ade:	7812      	ldrb	r2, [r2, #0]
    4ae0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    4ae2:	69bb      	ldr	r3, [r7, #24]
    4ae4:	2200      	movs	r2, #0
    4ae6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    4ae8:	46c0      	nop			; (mov r8, r8)
    4aea:	46bd      	mov	sp, r7
    4aec:	b004      	add	sp, #16
    4aee:	bd80      	pop	{r7, pc}
    4af0:	00004975 	.word	0x00004975

00004af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b08a      	sub	sp, #40	; 0x28
    4af8:	af00      	add	r7, sp, #0
    4afa:	60f8      	str	r0, [r7, #12]
    4afc:	60b9      	str	r1, [r7, #8]
    4afe:	607a      	str	r2, [r7, #4]
    4b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    4b02:	2300      	movs	r3, #0
    4b04:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    4b0a:	6a3b      	ldr	r3, [r7, #32]
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d101      	bne.n	4b14 <xQueueGenericSend+0x20>
    4b10:	b672      	cpsid	i
    4b12:	e7fe      	b.n	4b12 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4b14:	68bb      	ldr	r3, [r7, #8]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d103      	bne.n	4b22 <xQueueGenericSend+0x2e>
    4b1a:	6a3b      	ldr	r3, [r7, #32]
    4b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d101      	bne.n	4b26 <xQueueGenericSend+0x32>
    4b22:	2301      	movs	r3, #1
    4b24:	e000      	b.n	4b28 <xQueueGenericSend+0x34>
    4b26:	2300      	movs	r3, #0
    4b28:	2b00      	cmp	r3, #0
    4b2a:	d101      	bne.n	4b30 <xQueueGenericSend+0x3c>
    4b2c:	b672      	cpsid	i
    4b2e:	e7fe      	b.n	4b2e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4b30:	683b      	ldr	r3, [r7, #0]
    4b32:	2b02      	cmp	r3, #2
    4b34:	d103      	bne.n	4b3e <xQueueGenericSend+0x4a>
    4b36:	6a3b      	ldr	r3, [r7, #32]
    4b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b3a:	2b01      	cmp	r3, #1
    4b3c:	d101      	bne.n	4b42 <xQueueGenericSend+0x4e>
    4b3e:	2301      	movs	r3, #1
    4b40:	e000      	b.n	4b44 <xQueueGenericSend+0x50>
    4b42:	2300      	movs	r3, #0
    4b44:	2b00      	cmp	r3, #0
    4b46:	d101      	bne.n	4b4c <xQueueGenericSend+0x58>
    4b48:	b672      	cpsid	i
    4b4a:	e7fe      	b.n	4b4a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    4b4c:	4b53      	ldr	r3, [pc, #332]	; (4c9c <xQueueGenericSend+0x1a8>)
    4b4e:	4798      	blx	r3
    4b50:	1e03      	subs	r3, r0, #0
    4b52:	d102      	bne.n	4b5a <xQueueGenericSend+0x66>
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d101      	bne.n	4b5e <xQueueGenericSend+0x6a>
    4b5a:	2301      	movs	r3, #1
    4b5c:	e000      	b.n	4b60 <xQueueGenericSend+0x6c>
    4b5e:	2300      	movs	r3, #0
    4b60:	2b00      	cmp	r3, #0
    4b62:	d101      	bne.n	4b68 <xQueueGenericSend+0x74>
    4b64:	b672      	cpsid	i
    4b66:	e7fe      	b.n	4b66 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    4b68:	4b4d      	ldr	r3, [pc, #308]	; (4ca0 <xQueueGenericSend+0x1ac>)
    4b6a:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4b6c:	6a3b      	ldr	r3, [r7, #32]
    4b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4b70:	6a3b      	ldr	r3, [r7, #32]
    4b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b74:	429a      	cmp	r2, r3
    4b76:	d302      	bcc.n	4b7e <xQueueGenericSend+0x8a>
    4b78:	683b      	ldr	r3, [r7, #0]
    4b7a:	2b02      	cmp	r3, #2
    4b7c:	d12d      	bne.n	4bda <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4b7e:	683a      	ldr	r2, [r7, #0]
    4b80:	68b9      	ldr	r1, [r7, #8]
    4b82:	6a3b      	ldr	r3, [r7, #32]
    4b84:	0018      	movs	r0, r3
    4b86:	4b47      	ldr	r3, [pc, #284]	; (4ca4 <xQueueGenericSend+0x1b0>)
    4b88:	4798      	blx	r3
    4b8a:	0003      	movs	r3, r0
    4b8c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    4b8e:	6a3b      	ldr	r3, [r7, #32]
    4b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4b92:	2b00      	cmp	r3, #0
    4b94:	d00a      	beq.n	4bac <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4b96:	683a      	ldr	r2, [r7, #0]
    4b98:	6a3b      	ldr	r3, [r7, #32]
    4b9a:	0011      	movs	r1, r2
    4b9c:	0018      	movs	r0, r3
    4b9e:	4b42      	ldr	r3, [pc, #264]	; (4ca8 <xQueueGenericSend+0x1b4>)
    4ba0:	4798      	blx	r3
    4ba2:	1e03      	subs	r3, r0, #0
    4ba4:	d015      	beq.n	4bd2 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    4ba6:	4b41      	ldr	r3, [pc, #260]	; (4cac <xQueueGenericSend+0x1b8>)
    4ba8:	4798      	blx	r3
    4baa:	e012      	b.n	4bd2 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4bac:	6a3b      	ldr	r3, [r7, #32]
    4bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d009      	beq.n	4bc8 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4bb4:	6a3b      	ldr	r3, [r7, #32]
    4bb6:	3324      	adds	r3, #36	; 0x24
    4bb8:	0018      	movs	r0, r3
    4bba:	4b3d      	ldr	r3, [pc, #244]	; (4cb0 <xQueueGenericSend+0x1bc>)
    4bbc:	4798      	blx	r3
    4bbe:	1e03      	subs	r3, r0, #0
    4bc0:	d007      	beq.n	4bd2 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    4bc2:	4b3a      	ldr	r3, [pc, #232]	; (4cac <xQueueGenericSend+0x1b8>)
    4bc4:	4798      	blx	r3
    4bc6:	e004      	b.n	4bd2 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    4bc8:	69fb      	ldr	r3, [r7, #28]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d001      	beq.n	4bd2 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    4bce:	4b37      	ldr	r3, [pc, #220]	; (4cac <xQueueGenericSend+0x1b8>)
    4bd0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4bd2:	4b38      	ldr	r3, [pc, #224]	; (4cb4 <xQueueGenericSend+0x1c0>)
    4bd4:	4798      	blx	r3
				return pdPASS;
    4bd6:	2301      	movs	r3, #1
    4bd8:	e05c      	b.n	4c94 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d103      	bne.n	4be8 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4be0:	4b34      	ldr	r3, [pc, #208]	; (4cb4 <xQueueGenericSend+0x1c0>)
    4be2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4be4:	2300      	movs	r3, #0
    4be6:	e055      	b.n	4c94 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    4be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4bea:	2b00      	cmp	r3, #0
    4bec:	d106      	bne.n	4bfc <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4bee:	2314      	movs	r3, #20
    4bf0:	18fb      	adds	r3, r7, r3
    4bf2:	0018      	movs	r0, r3
    4bf4:	4b30      	ldr	r3, [pc, #192]	; (4cb8 <xQueueGenericSend+0x1c4>)
    4bf6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4bf8:	2301      	movs	r3, #1
    4bfa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4bfc:	4b2d      	ldr	r3, [pc, #180]	; (4cb4 <xQueueGenericSend+0x1c0>)
    4bfe:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4c00:	4b2e      	ldr	r3, [pc, #184]	; (4cbc <xQueueGenericSend+0x1c8>)
    4c02:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4c04:	4b26      	ldr	r3, [pc, #152]	; (4ca0 <xQueueGenericSend+0x1ac>)
    4c06:	4798      	blx	r3
    4c08:	6a3b      	ldr	r3, [r7, #32]
    4c0a:	2244      	movs	r2, #68	; 0x44
    4c0c:	5c9b      	ldrb	r3, [r3, r2]
    4c0e:	b25b      	sxtb	r3, r3
    4c10:	3301      	adds	r3, #1
    4c12:	d103      	bne.n	4c1c <xQueueGenericSend+0x128>
    4c14:	6a3b      	ldr	r3, [r7, #32]
    4c16:	2244      	movs	r2, #68	; 0x44
    4c18:	2100      	movs	r1, #0
    4c1a:	5499      	strb	r1, [r3, r2]
    4c1c:	6a3b      	ldr	r3, [r7, #32]
    4c1e:	2245      	movs	r2, #69	; 0x45
    4c20:	5c9b      	ldrb	r3, [r3, r2]
    4c22:	b25b      	sxtb	r3, r3
    4c24:	3301      	adds	r3, #1
    4c26:	d103      	bne.n	4c30 <xQueueGenericSend+0x13c>
    4c28:	6a3b      	ldr	r3, [r7, #32]
    4c2a:	2245      	movs	r2, #69	; 0x45
    4c2c:	2100      	movs	r1, #0
    4c2e:	5499      	strb	r1, [r3, r2]
    4c30:	4b20      	ldr	r3, [pc, #128]	; (4cb4 <xQueueGenericSend+0x1c0>)
    4c32:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4c34:	1d3a      	adds	r2, r7, #4
    4c36:	2314      	movs	r3, #20
    4c38:	18fb      	adds	r3, r7, r3
    4c3a:	0011      	movs	r1, r2
    4c3c:	0018      	movs	r0, r3
    4c3e:	4b20      	ldr	r3, [pc, #128]	; (4cc0 <xQueueGenericSend+0x1cc>)
    4c40:	4798      	blx	r3
    4c42:	1e03      	subs	r3, r0, #0
    4c44:	d11f      	bne.n	4c86 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4c46:	6a3b      	ldr	r3, [r7, #32]
    4c48:	0018      	movs	r0, r3
    4c4a:	4b1e      	ldr	r3, [pc, #120]	; (4cc4 <xQueueGenericSend+0x1d0>)
    4c4c:	4798      	blx	r3
    4c4e:	1e03      	subs	r3, r0, #0
    4c50:	d012      	beq.n	4c78 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4c52:	6a3b      	ldr	r3, [r7, #32]
    4c54:	3310      	adds	r3, #16
    4c56:	687a      	ldr	r2, [r7, #4]
    4c58:	0011      	movs	r1, r2
    4c5a:	0018      	movs	r0, r3
    4c5c:	4b1a      	ldr	r3, [pc, #104]	; (4cc8 <xQueueGenericSend+0x1d4>)
    4c5e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4c60:	6a3b      	ldr	r3, [r7, #32]
    4c62:	0018      	movs	r0, r3
    4c64:	4b19      	ldr	r3, [pc, #100]	; (4ccc <xQueueGenericSend+0x1d8>)
    4c66:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4c68:	4b19      	ldr	r3, [pc, #100]	; (4cd0 <xQueueGenericSend+0x1dc>)
    4c6a:	4798      	blx	r3
    4c6c:	1e03      	subs	r3, r0, #0
    4c6e:	d000      	beq.n	4c72 <xQueueGenericSend+0x17e>
    4c70:	e77a      	b.n	4b68 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    4c72:	4b0e      	ldr	r3, [pc, #56]	; (4cac <xQueueGenericSend+0x1b8>)
    4c74:	4798      	blx	r3
    4c76:	e777      	b.n	4b68 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4c78:	6a3b      	ldr	r3, [r7, #32]
    4c7a:	0018      	movs	r0, r3
    4c7c:	4b13      	ldr	r3, [pc, #76]	; (4ccc <xQueueGenericSend+0x1d8>)
    4c7e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4c80:	4b13      	ldr	r3, [pc, #76]	; (4cd0 <xQueueGenericSend+0x1dc>)
    4c82:	4798      	blx	r3
    4c84:	e770      	b.n	4b68 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4c86:	6a3b      	ldr	r3, [r7, #32]
    4c88:	0018      	movs	r0, r3
    4c8a:	4b10      	ldr	r3, [pc, #64]	; (4ccc <xQueueGenericSend+0x1d8>)
    4c8c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4c8e:	4b10      	ldr	r3, [pc, #64]	; (4cd0 <xQueueGenericSend+0x1dc>)
    4c90:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4c92:	2300      	movs	r3, #0
		}
	}
}
    4c94:	0018      	movs	r0, r3
    4c96:	46bd      	mov	sp, r7
    4c98:	b00a      	add	sp, #40	; 0x28
    4c9a:	bd80      	pop	{r7, pc}
    4c9c:	000061a1 	.word	0x000061a1
    4ca0:	00001f51 	.word	0x00001f51
    4ca4:	00004f95 	.word	0x00004f95
    4ca8:	000052e9 	.word	0x000052e9
    4cac:	00001f31 	.word	0x00001f31
    4cb0:	00005e61 	.word	0x00005e61
    4cb4:	00001f75 	.word	0x00001f75
    4cb8:	00005f21 	.word	0x00005f21
    4cbc:	000059e1 	.word	0x000059e1
    4cc0:	00005f49 	.word	0x00005f49
    4cc4:	000051e9 	.word	0x000051e9
    4cc8:	00005dc9 	.word	0x00005dc9
    4ccc:	000050c5 	.word	0x000050c5
    4cd0:	000059f9 	.word	0x000059f9

00004cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b088      	sub	sp, #32
    4cd8:	af00      	add	r7, sp, #0
    4cda:	60f8      	str	r0, [r7, #12]
    4cdc:	60b9      	str	r1, [r7, #8]
    4cde:	607a      	str	r2, [r7, #4]
    4ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4ce2:	68fb      	ldr	r3, [r7, #12]
    4ce4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    4ce6:	69bb      	ldr	r3, [r7, #24]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d101      	bne.n	4cf0 <xQueueGenericSendFromISR+0x1c>
    4cec:	b672      	cpsid	i
    4cee:	e7fe      	b.n	4cee <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4cf0:	68bb      	ldr	r3, [r7, #8]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d103      	bne.n	4cfe <xQueueGenericSendFromISR+0x2a>
    4cf6:	69bb      	ldr	r3, [r7, #24]
    4cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d101      	bne.n	4d02 <xQueueGenericSendFromISR+0x2e>
    4cfe:	2301      	movs	r3, #1
    4d00:	e000      	b.n	4d04 <xQueueGenericSendFromISR+0x30>
    4d02:	2300      	movs	r3, #0
    4d04:	2b00      	cmp	r3, #0
    4d06:	d101      	bne.n	4d0c <xQueueGenericSendFromISR+0x38>
    4d08:	b672      	cpsid	i
    4d0a:	e7fe      	b.n	4d0a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    4d0c:	683b      	ldr	r3, [r7, #0]
    4d0e:	2b02      	cmp	r3, #2
    4d10:	d103      	bne.n	4d1a <xQueueGenericSendFromISR+0x46>
    4d12:	69bb      	ldr	r3, [r7, #24]
    4d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4d16:	2b01      	cmp	r3, #1
    4d18:	d101      	bne.n	4d1e <xQueueGenericSendFromISR+0x4a>
    4d1a:	2301      	movs	r3, #1
    4d1c:	e000      	b.n	4d20 <xQueueGenericSendFromISR+0x4c>
    4d1e:	2300      	movs	r3, #0
    4d20:	2b00      	cmp	r3, #0
    4d22:	d101      	bne.n	4d28 <xQueueGenericSendFromISR+0x54>
    4d24:	b672      	cpsid	i
    4d26:	e7fe      	b.n	4d26 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d28:	4b2d      	ldr	r3, [pc, #180]	; (4de0 <xQueueGenericSendFromISR+0x10c>)
    4d2a:	4798      	blx	r3
    4d2c:	0003      	movs	r3, r0
    4d2e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    4d30:	69bb      	ldr	r3, [r7, #24]
    4d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4d34:	69bb      	ldr	r3, [r7, #24]
    4d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4d38:	429a      	cmp	r2, r3
    4d3a:	d302      	bcc.n	4d42 <xQueueGenericSendFromISR+0x6e>
    4d3c:	683b      	ldr	r3, [r7, #0]
    4d3e:	2b02      	cmp	r3, #2
    4d40:	d142      	bne.n	4dc8 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    4d42:	2313      	movs	r3, #19
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	69ba      	ldr	r2, [r7, #24]
    4d48:	2145      	movs	r1, #69	; 0x45
    4d4a:	5c52      	ldrb	r2, [r2, r1]
    4d4c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4d4e:	683a      	ldr	r2, [r7, #0]
    4d50:	68b9      	ldr	r1, [r7, #8]
    4d52:	69bb      	ldr	r3, [r7, #24]
    4d54:	0018      	movs	r0, r3
    4d56:	4b23      	ldr	r3, [pc, #140]	; (4de4 <xQueueGenericSendFromISR+0x110>)
    4d58:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    4d5a:	2313      	movs	r3, #19
    4d5c:	18fb      	adds	r3, r7, r3
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	b25b      	sxtb	r3, r3
    4d62:	3301      	adds	r3, #1
    4d64:	d124      	bne.n	4db0 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    4d66:	69bb      	ldr	r3, [r7, #24]
    4d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d00e      	beq.n	4d8c <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    4d6e:	683a      	ldr	r2, [r7, #0]
    4d70:	69bb      	ldr	r3, [r7, #24]
    4d72:	0011      	movs	r1, r2
    4d74:	0018      	movs	r0, r3
    4d76:	4b1c      	ldr	r3, [pc, #112]	; (4de8 <xQueueGenericSendFromISR+0x114>)
    4d78:	4798      	blx	r3
    4d7a:	1e03      	subs	r3, r0, #0
    4d7c:	d021      	beq.n	4dc2 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d01e      	beq.n	4dc2 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	2201      	movs	r2, #1
    4d88:	601a      	str	r2, [r3, #0]
    4d8a:	e01a      	b.n	4dc2 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4d8c:	69bb      	ldr	r3, [r7, #24]
    4d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d90:	2b00      	cmp	r3, #0
    4d92:	d016      	beq.n	4dc2 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4d94:	69bb      	ldr	r3, [r7, #24]
    4d96:	3324      	adds	r3, #36	; 0x24
    4d98:	0018      	movs	r0, r3
    4d9a:	4b14      	ldr	r3, [pc, #80]	; (4dec <xQueueGenericSendFromISR+0x118>)
    4d9c:	4798      	blx	r3
    4d9e:	1e03      	subs	r3, r0, #0
    4da0:	d00f      	beq.n	4dc2 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d00c      	beq.n	4dc2 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	2201      	movs	r2, #1
    4dac:	601a      	str	r2, [r3, #0]
    4dae:	e008      	b.n	4dc2 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    4db0:	2313      	movs	r3, #19
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	3301      	adds	r3, #1
    4db8:	b2db      	uxtb	r3, r3
    4dba:	b259      	sxtb	r1, r3
    4dbc:	69bb      	ldr	r3, [r7, #24]
    4dbe:	2245      	movs	r2, #69	; 0x45
    4dc0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    4dc2:	2301      	movs	r3, #1
    4dc4:	61fb      	str	r3, [r7, #28]
		{
    4dc6:	e001      	b.n	4dcc <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4dc8:	2300      	movs	r3, #0
    4dca:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4dcc:	697b      	ldr	r3, [r7, #20]
    4dce:	0018      	movs	r0, r3
    4dd0:	4b07      	ldr	r3, [pc, #28]	; (4df0 <xQueueGenericSendFromISR+0x11c>)
    4dd2:	4798      	blx	r3

	return xReturn;
    4dd4:	69fb      	ldr	r3, [r7, #28]
}
    4dd6:	0018      	movs	r0, r3
    4dd8:	46bd      	mov	sp, r7
    4dda:	b008      	add	sp, #32
    4ddc:	bd80      	pop	{r7, pc}
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	00001fa5 	.word	0x00001fa5
    4de4:	00004f95 	.word	0x00004f95
    4de8:	000052e9 	.word	0x000052e9
    4dec:	00005e61 	.word	0x00005e61
    4df0:	00001fb1 	.word	0x00001fb1

00004df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    4df4:	b580      	push	{r7, lr}
    4df6:	b08a      	sub	sp, #40	; 0x28
    4df8:	af00      	add	r7, sp, #0
    4dfa:	60f8      	str	r0, [r7, #12]
    4dfc:	60b9      	str	r1, [r7, #8]
    4dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    4e00:	2300      	movs	r3, #0
    4e02:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4e04:	68fb      	ldr	r3, [r7, #12]
    4e06:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    4e08:	6a3b      	ldr	r3, [r7, #32]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d101      	bne.n	4e12 <xQueueReceive+0x1e>
    4e0e:	b672      	cpsid	i
    4e10:	e7fe      	b.n	4e10 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    4e12:	68bb      	ldr	r3, [r7, #8]
    4e14:	2b00      	cmp	r3, #0
    4e16:	d103      	bne.n	4e20 <xQueueReceive+0x2c>
    4e18:	6a3b      	ldr	r3, [r7, #32]
    4e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	d101      	bne.n	4e24 <xQueueReceive+0x30>
    4e20:	2301      	movs	r3, #1
    4e22:	e000      	b.n	4e26 <xQueueReceive+0x32>
    4e24:	2300      	movs	r3, #0
    4e26:	2b00      	cmp	r3, #0
    4e28:	d101      	bne.n	4e2e <xQueueReceive+0x3a>
    4e2a:	b672      	cpsid	i
    4e2c:	e7fe      	b.n	4e2c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    4e2e:	4b4c      	ldr	r3, [pc, #304]	; (4f60 <xQueueReceive+0x16c>)
    4e30:	4798      	blx	r3
    4e32:	1e03      	subs	r3, r0, #0
    4e34:	d102      	bne.n	4e3c <xQueueReceive+0x48>
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d101      	bne.n	4e40 <xQueueReceive+0x4c>
    4e3c:	2301      	movs	r3, #1
    4e3e:	e000      	b.n	4e42 <xQueueReceive+0x4e>
    4e40:	2300      	movs	r3, #0
    4e42:	2b00      	cmp	r3, #0
    4e44:	d101      	bne.n	4e4a <xQueueReceive+0x56>
    4e46:	b672      	cpsid	i
    4e48:	e7fe      	b.n	4e48 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4e4a:	4b46      	ldr	r3, [pc, #280]	; (4f64 <xQueueReceive+0x170>)
    4e4c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4e4e:	6a3b      	ldr	r3, [r7, #32]
    4e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4e52:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    4e54:	69fb      	ldr	r3, [r7, #28]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d01a      	beq.n	4e90 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4e5a:	68ba      	ldr	r2, [r7, #8]
    4e5c:	6a3b      	ldr	r3, [r7, #32]
    4e5e:	0011      	movs	r1, r2
    4e60:	0018      	movs	r0, r3
    4e62:	4b41      	ldr	r3, [pc, #260]	; (4f68 <xQueueReceive+0x174>)
    4e64:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    4e66:	69fb      	ldr	r3, [r7, #28]
    4e68:	1e5a      	subs	r2, r3, #1
    4e6a:	6a3b      	ldr	r3, [r7, #32]
    4e6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4e6e:	6a3b      	ldr	r3, [r7, #32]
    4e70:	691b      	ldr	r3, [r3, #16]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d008      	beq.n	4e88 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4e76:	6a3b      	ldr	r3, [r7, #32]
    4e78:	3310      	adds	r3, #16
    4e7a:	0018      	movs	r0, r3
    4e7c:	4b3b      	ldr	r3, [pc, #236]	; (4f6c <xQueueReceive+0x178>)
    4e7e:	4798      	blx	r3
    4e80:	1e03      	subs	r3, r0, #0
    4e82:	d001      	beq.n	4e88 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    4e84:	4b3a      	ldr	r3, [pc, #232]	; (4f70 <xQueueReceive+0x17c>)
    4e86:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    4e88:	4b3a      	ldr	r3, [pc, #232]	; (4f74 <xQueueReceive+0x180>)
    4e8a:	4798      	blx	r3
				return pdPASS;
    4e8c:	2301      	movs	r3, #1
    4e8e:	e062      	b.n	4f56 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d103      	bne.n	4e9e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4e96:	4b37      	ldr	r3, [pc, #220]	; (4f74 <xQueueReceive+0x180>)
    4e98:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4e9a:	2300      	movs	r3, #0
    4e9c:	e05b      	b.n	4f56 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    4e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d106      	bne.n	4eb2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    4ea4:	2314      	movs	r3, #20
    4ea6:	18fb      	adds	r3, r7, r3
    4ea8:	0018      	movs	r0, r3
    4eaa:	4b33      	ldr	r3, [pc, #204]	; (4f78 <xQueueReceive+0x184>)
    4eac:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4eae:	2301      	movs	r3, #1
    4eb0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4eb2:	4b30      	ldr	r3, [pc, #192]	; (4f74 <xQueueReceive+0x180>)
    4eb4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4eb6:	4b31      	ldr	r3, [pc, #196]	; (4f7c <xQueueReceive+0x188>)
    4eb8:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4eba:	4b2a      	ldr	r3, [pc, #168]	; (4f64 <xQueueReceive+0x170>)
    4ebc:	4798      	blx	r3
    4ebe:	6a3b      	ldr	r3, [r7, #32]
    4ec0:	2244      	movs	r2, #68	; 0x44
    4ec2:	5c9b      	ldrb	r3, [r3, r2]
    4ec4:	b25b      	sxtb	r3, r3
    4ec6:	3301      	adds	r3, #1
    4ec8:	d103      	bne.n	4ed2 <xQueueReceive+0xde>
    4eca:	6a3b      	ldr	r3, [r7, #32]
    4ecc:	2244      	movs	r2, #68	; 0x44
    4ece:	2100      	movs	r1, #0
    4ed0:	5499      	strb	r1, [r3, r2]
    4ed2:	6a3b      	ldr	r3, [r7, #32]
    4ed4:	2245      	movs	r2, #69	; 0x45
    4ed6:	5c9b      	ldrb	r3, [r3, r2]
    4ed8:	b25b      	sxtb	r3, r3
    4eda:	3301      	adds	r3, #1
    4edc:	d103      	bne.n	4ee6 <xQueueReceive+0xf2>
    4ede:	6a3b      	ldr	r3, [r7, #32]
    4ee0:	2245      	movs	r2, #69	; 0x45
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
    4ee6:	4b23      	ldr	r3, [pc, #140]	; (4f74 <xQueueReceive+0x180>)
    4ee8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4eea:	1d3a      	adds	r2, r7, #4
    4eec:	2314      	movs	r3, #20
    4eee:	18fb      	adds	r3, r7, r3
    4ef0:	0011      	movs	r1, r2
    4ef2:	0018      	movs	r0, r3
    4ef4:	4b22      	ldr	r3, [pc, #136]	; (4f80 <xQueueReceive+0x18c>)
    4ef6:	4798      	blx	r3
    4ef8:	1e03      	subs	r3, r0, #0
    4efa:	d11e      	bne.n	4f3a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4efc:	6a3b      	ldr	r3, [r7, #32]
    4efe:	0018      	movs	r0, r3
    4f00:	4b20      	ldr	r3, [pc, #128]	; (4f84 <xQueueReceive+0x190>)
    4f02:	4798      	blx	r3
    4f04:	1e03      	subs	r3, r0, #0
    4f06:	d011      	beq.n	4f2c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4f08:	6a3b      	ldr	r3, [r7, #32]
    4f0a:	3324      	adds	r3, #36	; 0x24
    4f0c:	687a      	ldr	r2, [r7, #4]
    4f0e:	0011      	movs	r1, r2
    4f10:	0018      	movs	r0, r3
    4f12:	4b1d      	ldr	r3, [pc, #116]	; (4f88 <xQueueReceive+0x194>)
    4f14:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    4f16:	6a3b      	ldr	r3, [r7, #32]
    4f18:	0018      	movs	r0, r3
    4f1a:	4b1c      	ldr	r3, [pc, #112]	; (4f8c <xQueueReceive+0x198>)
    4f1c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4f1e:	4b1c      	ldr	r3, [pc, #112]	; (4f90 <xQueueReceive+0x19c>)
    4f20:	4798      	blx	r3
    4f22:	1e03      	subs	r3, r0, #0
    4f24:	d191      	bne.n	4e4a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    4f26:	4b12      	ldr	r3, [pc, #72]	; (4f70 <xQueueReceive+0x17c>)
    4f28:	4798      	blx	r3
    4f2a:	e78e      	b.n	4e4a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    4f2c:	6a3b      	ldr	r3, [r7, #32]
    4f2e:	0018      	movs	r0, r3
    4f30:	4b16      	ldr	r3, [pc, #88]	; (4f8c <xQueueReceive+0x198>)
    4f32:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4f34:	4b16      	ldr	r3, [pc, #88]	; (4f90 <xQueueReceive+0x19c>)
    4f36:	4798      	blx	r3
    4f38:	e787      	b.n	4e4a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    4f3a:	6a3b      	ldr	r3, [r7, #32]
    4f3c:	0018      	movs	r0, r3
    4f3e:	4b13      	ldr	r3, [pc, #76]	; (4f8c <xQueueReceive+0x198>)
    4f40:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4f42:	4b13      	ldr	r3, [pc, #76]	; (4f90 <xQueueReceive+0x19c>)
    4f44:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4f46:	6a3b      	ldr	r3, [r7, #32]
    4f48:	0018      	movs	r0, r3
    4f4a:	4b0e      	ldr	r3, [pc, #56]	; (4f84 <xQueueReceive+0x190>)
    4f4c:	4798      	blx	r3
    4f4e:	1e03      	subs	r3, r0, #0
    4f50:	d100      	bne.n	4f54 <xQueueReceive+0x160>
    4f52:	e77a      	b.n	4e4a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    4f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    4f56:	0018      	movs	r0, r3
    4f58:	46bd      	mov	sp, r7
    4f5a:	b00a      	add	sp, #40	; 0x28
    4f5c:	bd80      	pop	{r7, pc}
    4f5e:	46c0      	nop			; (mov r8, r8)
    4f60:	000061a1 	.word	0x000061a1
    4f64:	00001f51 	.word	0x00001f51
    4f68:	00005075 	.word	0x00005075
    4f6c:	00005e61 	.word	0x00005e61
    4f70:	00001f31 	.word	0x00001f31
    4f74:	00001f75 	.word	0x00001f75
    4f78:	00005f21 	.word	0x00005f21
    4f7c:	000059e1 	.word	0x000059e1
    4f80:	00005f49 	.word	0x00005f49
    4f84:	000051b5 	.word	0x000051b5
    4f88:	00005dc9 	.word	0x00005dc9
    4f8c:	000050c5 	.word	0x000050c5
    4f90:	000059f9 	.word	0x000059f9

00004f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b086      	sub	sp, #24
    4f98:	af00      	add	r7, sp, #0
    4f9a:	60f8      	str	r0, [r7, #12]
    4f9c:	60b9      	str	r1, [r7, #8]
    4f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    4fa0:	2300      	movs	r3, #0
    4fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4fa4:	68fb      	ldr	r3, [r7, #12]
    4fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    4faa:	68fb      	ldr	r3, [r7, #12]
    4fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d10e      	bne.n	4fd0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4fb2:	68fb      	ldr	r3, [r7, #12]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d14e      	bne.n	5058 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4fba:	68fb      	ldr	r3, [r7, #12]
    4fbc:	685b      	ldr	r3, [r3, #4]
    4fbe:	0018      	movs	r0, r3
    4fc0:	4b2a      	ldr	r3, [pc, #168]	; (506c <prvCopyDataToQueue+0xd8>)
    4fc2:	4798      	blx	r3
    4fc4:	0003      	movs	r3, r0
    4fc6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	2200      	movs	r2, #0
    4fcc:	605a      	str	r2, [r3, #4]
    4fce:	e043      	b.n	5058 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d119      	bne.n	500a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    4fd6:	68fb      	ldr	r3, [r7, #12]
    4fd8:	6898      	ldr	r0, [r3, #8]
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4fde:	68bb      	ldr	r3, [r7, #8]
    4fe0:	0019      	movs	r1, r3
    4fe2:	4b23      	ldr	r3, [pc, #140]	; (5070 <prvCopyDataToQueue+0xdc>)
    4fe4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	689a      	ldr	r2, [r3, #8]
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fee:	18d2      	adds	r2, r2, r3
    4ff0:	68fb      	ldr	r3, [r7, #12]
    4ff2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4ff4:	68fb      	ldr	r3, [r7, #12]
    4ff6:	689a      	ldr	r2, [r3, #8]
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	685b      	ldr	r3, [r3, #4]
    4ffc:	429a      	cmp	r2, r3
    4ffe:	d32b      	bcc.n	5058 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	681a      	ldr	r2, [r3, #0]
    5004:	68fb      	ldr	r3, [r7, #12]
    5006:	609a      	str	r2, [r3, #8]
    5008:	e026      	b.n	5058 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    500a:	68fb      	ldr	r3, [r7, #12]
    500c:	68d8      	ldr	r0, [r3, #12]
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5012:	68bb      	ldr	r3, [r7, #8]
    5014:	0019      	movs	r1, r3
    5016:	4b16      	ldr	r3, [pc, #88]	; (5070 <prvCopyDataToQueue+0xdc>)
    5018:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	68da      	ldr	r2, [r3, #12]
    501e:	68fb      	ldr	r3, [r7, #12]
    5020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5022:	425b      	negs	r3, r3
    5024:	18d2      	adds	r2, r2, r3
    5026:	68fb      	ldr	r3, [r7, #12]
    5028:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    502a:	68fb      	ldr	r3, [r7, #12]
    502c:	68da      	ldr	r2, [r3, #12]
    502e:	68fb      	ldr	r3, [r7, #12]
    5030:	681b      	ldr	r3, [r3, #0]
    5032:	429a      	cmp	r2, r3
    5034:	d207      	bcs.n	5046 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	685a      	ldr	r2, [r3, #4]
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    503e:	425b      	negs	r3, r3
    5040:	18d2      	adds	r2, r2, r3
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	2b02      	cmp	r3, #2
    504a:	d105      	bne.n	5058 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    504c:	693b      	ldr	r3, [r7, #16]
    504e:	2b00      	cmp	r3, #0
    5050:	d002      	beq.n	5058 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    5052:	693b      	ldr	r3, [r7, #16]
    5054:	3b01      	subs	r3, #1
    5056:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    5058:	693b      	ldr	r3, [r7, #16]
    505a:	1c5a      	adds	r2, r3, #1
    505c:	68fb      	ldr	r3, [r7, #12]
    505e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    5060:	697b      	ldr	r3, [r7, #20]
}
    5062:	0018      	movs	r0, r3
    5064:	46bd      	mov	sp, r7
    5066:	b006      	add	sp, #24
    5068:	bd80      	pop	{r7, pc}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	000061d9 	.word	0x000061d9
    5070:	0000b389 	.word	0x0000b389

00005074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    5074:	b580      	push	{r7, lr}
    5076:	b082      	sub	sp, #8
    5078:	af00      	add	r7, sp, #0
    507a:	6078      	str	r0, [r7, #4]
    507c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5082:	2b00      	cmp	r3, #0
    5084:	d018      	beq.n	50b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	68da      	ldr	r2, [r3, #12]
    508a:	687b      	ldr	r3, [r7, #4]
    508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    508e:	18d2      	adds	r2, r2, r3
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    5094:	687b      	ldr	r3, [r7, #4]
    5096:	68da      	ldr	r2, [r3, #12]
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	685b      	ldr	r3, [r3, #4]
    509c:	429a      	cmp	r2, r3
    509e:	d303      	bcc.n	50a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	681a      	ldr	r2, [r3, #0]
    50a4:	687b      	ldr	r3, [r7, #4]
    50a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	68d9      	ldr	r1, [r3, #12]
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    50b0:	683b      	ldr	r3, [r7, #0]
    50b2:	0018      	movs	r0, r3
    50b4:	4b02      	ldr	r3, [pc, #8]	; (50c0 <prvCopyDataFromQueue+0x4c>)
    50b6:	4798      	blx	r3
	}
}
    50b8:	46c0      	nop			; (mov r8, r8)
    50ba:	46bd      	mov	sp, r7
    50bc:	b002      	add	sp, #8
    50be:	bd80      	pop	{r7, pc}
    50c0:	0000b389 	.word	0x0000b389

000050c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    50c4:	b580      	push	{r7, lr}
    50c6:	b084      	sub	sp, #16
    50c8:	af00      	add	r7, sp, #0
    50ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    50cc:	4b34      	ldr	r3, [pc, #208]	; (51a0 <prvUnlockQueue+0xdc>)
    50ce:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    50d0:	230f      	movs	r3, #15
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	687a      	ldr	r2, [r7, #4]
    50d6:	2145      	movs	r1, #69	; 0x45
    50d8:	5c52      	ldrb	r2, [r2, r1]
    50da:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    50dc:	e022      	b.n	5124 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    50e2:	2b00      	cmp	r3, #0
    50e4:	d009      	beq.n	50fa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	2100      	movs	r1, #0
    50ea:	0018      	movs	r0, r3
    50ec:	4b2d      	ldr	r3, [pc, #180]	; (51a4 <prvUnlockQueue+0xe0>)
    50ee:	4798      	blx	r3
    50f0:	1e03      	subs	r3, r0, #0
    50f2:	d00f      	beq.n	5114 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    50f4:	4b2c      	ldr	r3, [pc, #176]	; (51a8 <prvUnlockQueue+0xe4>)
    50f6:	4798      	blx	r3
    50f8:	e00c      	b.n	5114 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50fe:	2b00      	cmp	r3, #0
    5100:	d017      	beq.n	5132 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	3324      	adds	r3, #36	; 0x24
    5106:	0018      	movs	r0, r3
    5108:	4b28      	ldr	r3, [pc, #160]	; (51ac <prvUnlockQueue+0xe8>)
    510a:	4798      	blx	r3
    510c:	1e03      	subs	r3, r0, #0
    510e:	d001      	beq.n	5114 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    5110:	4b25      	ldr	r3, [pc, #148]	; (51a8 <prvUnlockQueue+0xe4>)
    5112:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    5114:	230f      	movs	r3, #15
    5116:	18fb      	adds	r3, r7, r3
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	3b01      	subs	r3, #1
    511c:	b2da      	uxtb	r2, r3
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    5124:	230f      	movs	r3, #15
    5126:	18fb      	adds	r3, r7, r3
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	b25b      	sxtb	r3, r3
    512c:	2b00      	cmp	r3, #0
    512e:	dcd6      	bgt.n	50de <prvUnlockQueue+0x1a>
    5130:	e000      	b.n	5134 <prvUnlockQueue+0x70>
						break;
    5132:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    5134:	687b      	ldr	r3, [r7, #4]
    5136:	2245      	movs	r2, #69	; 0x45
    5138:	21ff      	movs	r1, #255	; 0xff
    513a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    513c:	4b1c      	ldr	r3, [pc, #112]	; (51b0 <prvUnlockQueue+0xec>)
    513e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    5140:	4b17      	ldr	r3, [pc, #92]	; (51a0 <prvUnlockQueue+0xdc>)
    5142:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    5144:	230e      	movs	r3, #14
    5146:	18fb      	adds	r3, r7, r3
    5148:	687a      	ldr	r2, [r7, #4]
    514a:	2144      	movs	r1, #68	; 0x44
    514c:	5c52      	ldrb	r2, [r2, r1]
    514e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    5150:	e014      	b.n	517c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	691b      	ldr	r3, [r3, #16]
    5156:	2b00      	cmp	r3, #0
    5158:	d017      	beq.n	518a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	3310      	adds	r3, #16
    515e:	0018      	movs	r0, r3
    5160:	4b12      	ldr	r3, [pc, #72]	; (51ac <prvUnlockQueue+0xe8>)
    5162:	4798      	blx	r3
    5164:	1e03      	subs	r3, r0, #0
    5166:	d001      	beq.n	516c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    5168:	4b0f      	ldr	r3, [pc, #60]	; (51a8 <prvUnlockQueue+0xe4>)
    516a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    516c:	230e      	movs	r3, #14
    516e:	18fb      	adds	r3, r7, r3
    5170:	781b      	ldrb	r3, [r3, #0]
    5172:	3b01      	subs	r3, #1
    5174:	b2da      	uxtb	r2, r3
    5176:	230e      	movs	r3, #14
    5178:	18fb      	adds	r3, r7, r3
    517a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    517c:	230e      	movs	r3, #14
    517e:	18fb      	adds	r3, r7, r3
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	b25b      	sxtb	r3, r3
    5184:	2b00      	cmp	r3, #0
    5186:	dce4      	bgt.n	5152 <prvUnlockQueue+0x8e>
    5188:	e000      	b.n	518c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    518a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	2244      	movs	r2, #68	; 0x44
    5190:	21ff      	movs	r1, #255	; 0xff
    5192:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    5194:	4b06      	ldr	r3, [pc, #24]	; (51b0 <prvUnlockQueue+0xec>)
    5196:	4798      	blx	r3
}
    5198:	46c0      	nop			; (mov r8, r8)
    519a:	46bd      	mov	sp, r7
    519c:	b004      	add	sp, #16
    519e:	bd80      	pop	{r7, pc}
    51a0:	00001f51 	.word	0x00001f51
    51a4:	000052e9 	.word	0x000052e9
    51a8:	00005ff5 	.word	0x00005ff5
    51ac:	00005e61 	.word	0x00005e61
    51b0:	00001f75 	.word	0x00001f75

000051b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    51b4:	b580      	push	{r7, lr}
    51b6:	b084      	sub	sp, #16
    51b8:	af00      	add	r7, sp, #0
    51ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    51bc:	4b08      	ldr	r3, [pc, #32]	; (51e0 <prvIsQueueEmpty+0x2c>)
    51be:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    51c4:	2b00      	cmp	r3, #0
    51c6:	d102      	bne.n	51ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    51c8:	2301      	movs	r3, #1
    51ca:	60fb      	str	r3, [r7, #12]
    51cc:	e001      	b.n	51d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    51ce:	2300      	movs	r3, #0
    51d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    51d2:	4b04      	ldr	r3, [pc, #16]	; (51e4 <prvIsQueueEmpty+0x30>)
    51d4:	4798      	blx	r3

	return xReturn;
    51d6:	68fb      	ldr	r3, [r7, #12]
}
    51d8:	0018      	movs	r0, r3
    51da:	46bd      	mov	sp, r7
    51dc:	b004      	add	sp, #16
    51de:	bd80      	pop	{r7, pc}
    51e0:	00001f51 	.word	0x00001f51
    51e4:	00001f75 	.word	0x00001f75

000051e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    51e8:	b580      	push	{r7, lr}
    51ea:	b084      	sub	sp, #16
    51ec:	af00      	add	r7, sp, #0
    51ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    51f0:	4b09      	ldr	r3, [pc, #36]	; (5218 <prvIsQueueFull+0x30>)
    51f2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    51fc:	429a      	cmp	r2, r3
    51fe:	d102      	bne.n	5206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    5200:	2301      	movs	r3, #1
    5202:	60fb      	str	r3, [r7, #12]
    5204:	e001      	b.n	520a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    5206:	2300      	movs	r3, #0
    5208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    520a:	4b04      	ldr	r3, [pc, #16]	; (521c <prvIsQueueFull+0x34>)
    520c:	4798      	blx	r3

	return xReturn;
    520e:	68fb      	ldr	r3, [r7, #12]
}
    5210:	0018      	movs	r0, r3
    5212:	46bd      	mov	sp, r7
    5214:	b004      	add	sp, #16
    5216:	bd80      	pop	{r7, pc}
    5218:	00001f51 	.word	0x00001f51
    521c:	00001f75 	.word	0x00001f75

00005220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    5220:	b580      	push	{r7, lr}
    5222:	b084      	sub	sp, #16
    5224:	af00      	add	r7, sp, #0
    5226:	6078      	str	r0, [r7, #4]
    5228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    522a:	2300      	movs	r3, #0
    522c:	60fb      	str	r3, [r7, #12]
    522e:	e015      	b.n	525c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    5230:	4b0e      	ldr	r3, [pc, #56]	; (526c <vQueueAddToRegistry+0x4c>)
    5232:	68fa      	ldr	r2, [r7, #12]
    5234:	00d2      	lsls	r2, r2, #3
    5236:	58d3      	ldr	r3, [r2, r3]
    5238:	2b00      	cmp	r3, #0
    523a:	d10c      	bne.n	5256 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    523c:	4b0b      	ldr	r3, [pc, #44]	; (526c <vQueueAddToRegistry+0x4c>)
    523e:	68fa      	ldr	r2, [r7, #12]
    5240:	00d2      	lsls	r2, r2, #3
    5242:	6839      	ldr	r1, [r7, #0]
    5244:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    5246:	4a09      	ldr	r2, [pc, #36]	; (526c <vQueueAddToRegistry+0x4c>)
    5248:	68fb      	ldr	r3, [r7, #12]
    524a:	00db      	lsls	r3, r3, #3
    524c:	18d3      	adds	r3, r2, r3
    524e:	3304      	adds	r3, #4
    5250:	687a      	ldr	r2, [r7, #4]
    5252:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    5254:	e005      	b.n	5262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    5256:	68fb      	ldr	r3, [r7, #12]
    5258:	3301      	adds	r3, #1
    525a:	60fb      	str	r3, [r7, #12]
    525c:	68fb      	ldr	r3, [r7, #12]
    525e:	2b07      	cmp	r3, #7
    5260:	d9e6      	bls.n	5230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	46bd      	mov	sp, r7
    5266:	b004      	add	sp, #16
    5268:	bd80      	pop	{r7, pc}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	200052ec 	.word	0x200052ec

00005270 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    5270:	b580      	push	{r7, lr}
    5272:	b086      	sub	sp, #24
    5274:	af00      	add	r7, sp, #0
    5276:	60f8      	str	r0, [r7, #12]
    5278:	60b9      	str	r1, [r7, #8]
    527a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    527c:	68fb      	ldr	r3, [r7, #12]
    527e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    5280:	4b15      	ldr	r3, [pc, #84]	; (52d8 <vQueueWaitForMessageRestricted+0x68>)
    5282:	4798      	blx	r3
    5284:	697b      	ldr	r3, [r7, #20]
    5286:	2244      	movs	r2, #68	; 0x44
    5288:	5c9b      	ldrb	r3, [r3, r2]
    528a:	b25b      	sxtb	r3, r3
    528c:	3301      	adds	r3, #1
    528e:	d103      	bne.n	5298 <vQueueWaitForMessageRestricted+0x28>
    5290:	697b      	ldr	r3, [r7, #20]
    5292:	2244      	movs	r2, #68	; 0x44
    5294:	2100      	movs	r1, #0
    5296:	5499      	strb	r1, [r3, r2]
    5298:	697b      	ldr	r3, [r7, #20]
    529a:	2245      	movs	r2, #69	; 0x45
    529c:	5c9b      	ldrb	r3, [r3, r2]
    529e:	b25b      	sxtb	r3, r3
    52a0:	3301      	adds	r3, #1
    52a2:	d103      	bne.n	52ac <vQueueWaitForMessageRestricted+0x3c>
    52a4:	697b      	ldr	r3, [r7, #20]
    52a6:	2245      	movs	r2, #69	; 0x45
    52a8:	2100      	movs	r1, #0
    52aa:	5499      	strb	r1, [r3, r2]
    52ac:	4b0b      	ldr	r3, [pc, #44]	; (52dc <vQueueWaitForMessageRestricted+0x6c>)
    52ae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    52b0:	697b      	ldr	r3, [r7, #20]
    52b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    52b4:	2b00      	cmp	r3, #0
    52b6:	d106      	bne.n	52c6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    52b8:	697b      	ldr	r3, [r7, #20]
    52ba:	3324      	adds	r3, #36	; 0x24
    52bc:	687a      	ldr	r2, [r7, #4]
    52be:	68b9      	ldr	r1, [r7, #8]
    52c0:	0018      	movs	r0, r3
    52c2:	4b07      	ldr	r3, [pc, #28]	; (52e0 <vQueueWaitForMessageRestricted+0x70>)
    52c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    52c6:	697b      	ldr	r3, [r7, #20]
    52c8:	0018      	movs	r0, r3
    52ca:	4b06      	ldr	r3, [pc, #24]	; (52e4 <vQueueWaitForMessageRestricted+0x74>)
    52cc:	4798      	blx	r3
	}
    52ce:	46c0      	nop			; (mov r8, r8)
    52d0:	46bd      	mov	sp, r7
    52d2:	b006      	add	sp, #24
    52d4:	bd80      	pop	{r7, pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	00001f51 	.word	0x00001f51
    52dc:	00001f75 	.word	0x00001f75
    52e0:	00005e0d 	.word	0x00005e0d
    52e4:	000050c5 	.word	0x000050c5

000052e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    52e8:	b580      	push	{r7, lr}
    52ea:	b086      	sub	sp, #24
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    52f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    52f8:	2300      	movs	r3, #0
    52fa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    52fc:	693b      	ldr	r3, [r7, #16]
    52fe:	2b00      	cmp	r3, #0
    5300:	d101      	bne.n	5306 <prvNotifyQueueSetContainer+0x1e>
    5302:	b672      	cpsid	i
    5304:	e7fe      	b.n	5304 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    5306:	693b      	ldr	r3, [r7, #16]
    5308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    530a:	693b      	ldr	r3, [r7, #16]
    530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    530e:	429a      	cmp	r2, r3
    5310:	d301      	bcc.n	5316 <prvNotifyQueueSetContainer+0x2e>
    5312:	b672      	cpsid	i
    5314:	e7fe      	b.n	5314 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    5316:	693b      	ldr	r3, [r7, #16]
    5318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    531a:	693b      	ldr	r3, [r7, #16]
    531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    531e:	429a      	cmp	r2, r3
    5320:	d22a      	bcs.n	5378 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    5322:	230f      	movs	r3, #15
    5324:	18fb      	adds	r3, r7, r3
    5326:	693a      	ldr	r2, [r7, #16]
    5328:	2145      	movs	r1, #69	; 0x45
    532a:	5c52      	ldrb	r2, [r2, r1]
    532c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    532e:	683a      	ldr	r2, [r7, #0]
    5330:	1d39      	adds	r1, r7, #4
    5332:	693b      	ldr	r3, [r7, #16]
    5334:	0018      	movs	r0, r3
    5336:	4b13      	ldr	r3, [pc, #76]	; (5384 <prvNotifyQueueSetContainer+0x9c>)
    5338:	4798      	blx	r3
    533a:	0003      	movs	r3, r0
    533c:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    533e:	230f      	movs	r3, #15
    5340:	18fb      	adds	r3, r7, r3
    5342:	781b      	ldrb	r3, [r3, #0]
    5344:	b25b      	sxtb	r3, r3
    5346:	3301      	adds	r3, #1
    5348:	d10d      	bne.n	5366 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    534a:	693b      	ldr	r3, [r7, #16]
    534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    534e:	2b00      	cmp	r3, #0
    5350:	d012      	beq.n	5378 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    5352:	693b      	ldr	r3, [r7, #16]
    5354:	3324      	adds	r3, #36	; 0x24
    5356:	0018      	movs	r0, r3
    5358:	4b0b      	ldr	r3, [pc, #44]	; (5388 <prvNotifyQueueSetContainer+0xa0>)
    535a:	4798      	blx	r3
    535c:	1e03      	subs	r3, r0, #0
    535e:	d00b      	beq.n	5378 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    5360:	2301      	movs	r3, #1
    5362:	617b      	str	r3, [r7, #20]
    5364:	e008      	b.n	5378 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    5366:	230f      	movs	r3, #15
    5368:	18fb      	adds	r3, r7, r3
    536a:	781b      	ldrb	r3, [r3, #0]
    536c:	3301      	adds	r3, #1
    536e:	b2db      	uxtb	r3, r3
    5370:	b259      	sxtb	r1, r3
    5372:	693b      	ldr	r3, [r7, #16]
    5374:	2245      	movs	r2, #69	; 0x45
    5376:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    5378:	697b      	ldr	r3, [r7, #20]
	}
    537a:	0018      	movs	r0, r3
    537c:	46bd      	mov	sp, r7
    537e:	b006      	add	sp, #24
    5380:	bd80      	pop	{r7, pc}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	00004f95 	.word	0x00004f95
    5388:	00005e61 	.word	0x00005e61

0000538c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    538c:	b590      	push	{r4, r7, lr}
    538e:	b08d      	sub	sp, #52	; 0x34
    5390:	af04      	add	r7, sp, #16
    5392:	60f8      	str	r0, [r7, #12]
    5394:	60b9      	str	r1, [r7, #8]
    5396:	603b      	str	r3, [r7, #0]
    5398:	1dbb      	adds	r3, r7, #6
    539a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    539c:	1dbb      	adds	r3, r7, #6
    539e:	881b      	ldrh	r3, [r3, #0]
    53a0:	009b      	lsls	r3, r3, #2
    53a2:	0018      	movs	r0, r3
    53a4:	4b1d      	ldr	r3, [pc, #116]	; (541c <xTaskCreate+0x90>)
    53a6:	4798      	blx	r3
    53a8:	0003      	movs	r3, r0
    53aa:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    53ac:	697b      	ldr	r3, [r7, #20]
    53ae:	2b00      	cmp	r3, #0
    53b0:	d010      	beq.n	53d4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    53b2:	2058      	movs	r0, #88	; 0x58
    53b4:	4b19      	ldr	r3, [pc, #100]	; (541c <xTaskCreate+0x90>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    53bc:	69fb      	ldr	r3, [r7, #28]
    53be:	2b00      	cmp	r3, #0
    53c0:	d003      	beq.n	53ca <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    53c2:	69fb      	ldr	r3, [r7, #28]
    53c4:	697a      	ldr	r2, [r7, #20]
    53c6:	631a      	str	r2, [r3, #48]	; 0x30
    53c8:	e006      	b.n	53d8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    53ca:	697b      	ldr	r3, [r7, #20]
    53cc:	0018      	movs	r0, r3
    53ce:	4b14      	ldr	r3, [pc, #80]	; (5420 <xTaskCreate+0x94>)
    53d0:	4798      	blx	r3
    53d2:	e001      	b.n	53d8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    53d4:	2300      	movs	r3, #0
    53d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    53d8:	69fb      	ldr	r3, [r7, #28]
    53da:	2b00      	cmp	r3, #0
    53dc:	d016      	beq.n	540c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    53de:	1dbb      	adds	r3, r7, #6
    53e0:	881a      	ldrh	r2, [r3, #0]
    53e2:	683c      	ldr	r4, [r7, #0]
    53e4:	68b9      	ldr	r1, [r7, #8]
    53e6:	68f8      	ldr	r0, [r7, #12]
    53e8:	2300      	movs	r3, #0
    53ea:	9303      	str	r3, [sp, #12]
    53ec:	69fb      	ldr	r3, [r7, #28]
    53ee:	9302      	str	r3, [sp, #8]
    53f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53f2:	9301      	str	r3, [sp, #4]
    53f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53f6:	9300      	str	r3, [sp, #0]
    53f8:	0023      	movs	r3, r4
    53fa:	4c0a      	ldr	r4, [pc, #40]	; (5424 <xTaskCreate+0x98>)
    53fc:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    53fe:	69fb      	ldr	r3, [r7, #28]
    5400:	0018      	movs	r0, r3
    5402:	4b09      	ldr	r3, [pc, #36]	; (5428 <xTaskCreate+0x9c>)
    5404:	4798      	blx	r3
			xReturn = pdPASS;
    5406:	2301      	movs	r3, #1
    5408:	61bb      	str	r3, [r7, #24]
    540a:	e002      	b.n	5412 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    540c:	2301      	movs	r3, #1
    540e:	425b      	negs	r3, r3
    5410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    5412:	69bb      	ldr	r3, [r7, #24]
	}
    5414:	0018      	movs	r0, r3
    5416:	46bd      	mov	sp, r7
    5418:	b009      	add	sp, #36	; 0x24
    541a:	bd90      	pop	{r4, r7, pc}
    541c:	0000207d 	.word	0x0000207d
    5420:	000021e5 	.word	0x000021e5
    5424:	0000542d 	.word	0x0000542d
    5428:	0000553d 	.word	0x0000553d

0000542c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    542c:	b580      	push	{r7, lr}
    542e:	b086      	sub	sp, #24
    5430:	af00      	add	r7, sp, #0
    5432:	60f8      	str	r0, [r7, #12]
    5434:	60b9      	str	r1, [r7, #8]
    5436:	607a      	str	r2, [r7, #4]
    5438:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    543c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	009b      	lsls	r3, r3, #2
    5442:	001a      	movs	r2, r3
    5444:	21a5      	movs	r1, #165	; 0xa5
    5446:	4b39      	ldr	r3, [pc, #228]	; (552c <prvInitialiseNewTask+0x100>)
    5448:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    544c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	4937      	ldr	r1, [pc, #220]	; (5530 <prvInitialiseNewTask+0x104>)
    5452:	468c      	mov	ip, r1
    5454:	4463      	add	r3, ip
    5456:	009b      	lsls	r3, r3, #2
    5458:	18d3      	adds	r3, r2, r3
    545a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    545c:	693b      	ldr	r3, [r7, #16]
    545e:	2207      	movs	r2, #7
    5460:	4393      	bics	r3, r2
    5462:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    5464:	693b      	ldr	r3, [r7, #16]
    5466:	2207      	movs	r2, #7
    5468:	4013      	ands	r3, r2
    546a:	d001      	beq.n	5470 <prvInitialiseNewTask+0x44>
    546c:	b672      	cpsid	i
    546e:	e7fe      	b.n	546e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    5470:	2300      	movs	r3, #0
    5472:	617b      	str	r3, [r7, #20]
    5474:	e013      	b.n	549e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    5476:	68ba      	ldr	r2, [r7, #8]
    5478:	697b      	ldr	r3, [r7, #20]
    547a:	18d3      	adds	r3, r2, r3
    547c:	7818      	ldrb	r0, [r3, #0]
    547e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5480:	2134      	movs	r1, #52	; 0x34
    5482:	697b      	ldr	r3, [r7, #20]
    5484:	18d3      	adds	r3, r2, r3
    5486:	185b      	adds	r3, r3, r1
    5488:	1c02      	adds	r2, r0, #0
    548a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    548c:	68ba      	ldr	r2, [r7, #8]
    548e:	697b      	ldr	r3, [r7, #20]
    5490:	18d3      	adds	r3, r2, r3
    5492:	781b      	ldrb	r3, [r3, #0]
    5494:	2b00      	cmp	r3, #0
    5496:	d006      	beq.n	54a6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    5498:	697b      	ldr	r3, [r7, #20]
    549a:	3301      	adds	r3, #1
    549c:	617b      	str	r3, [r7, #20]
    549e:	697b      	ldr	r3, [r7, #20]
    54a0:	2b09      	cmp	r3, #9
    54a2:	d9e8      	bls.n	5476 <prvInitialiseNewTask+0x4a>
    54a4:	e000      	b.n	54a8 <prvInitialiseNewTask+0x7c>
		{
			break;
    54a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    54a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54aa:	223d      	movs	r2, #61	; 0x3d
    54ac:	2100      	movs	r1, #0
    54ae:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    54b0:	6a3b      	ldr	r3, [r7, #32]
    54b2:	2b04      	cmp	r3, #4
    54b4:	d901      	bls.n	54ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    54b6:	2304      	movs	r3, #4
    54b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    54ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54bc:	6a3a      	ldr	r2, [r7, #32]
    54be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    54c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54c2:	6a3a      	ldr	r2, [r7, #32]
    54c4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    54c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54c8:	2200      	movs	r2, #0
    54ca:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    54cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54ce:	3304      	adds	r3, #4
    54d0:	0018      	movs	r0, r3
    54d2:	4b18      	ldr	r3, [pc, #96]	; (5534 <prvInitialiseNewTask+0x108>)
    54d4:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    54d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54d8:	3318      	adds	r3, #24
    54da:	0018      	movs	r0, r3
    54dc:	4b15      	ldr	r3, [pc, #84]	; (5534 <prvInitialiseNewTask+0x108>)
    54de:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    54e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    54e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    54e6:	6a3b      	ldr	r3, [r7, #32]
    54e8:	2205      	movs	r2, #5
    54ea:	1ad2      	subs	r2, r2, r3
    54ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    54f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    54f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    54f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54f8:	2200      	movs	r2, #0
    54fa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    54fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54fe:	2254      	movs	r2, #84	; 0x54
    5500:	2100      	movs	r1, #0
    5502:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5504:	683a      	ldr	r2, [r7, #0]
    5506:	68f9      	ldr	r1, [r7, #12]
    5508:	693b      	ldr	r3, [r7, #16]
    550a:	0018      	movs	r0, r3
    550c:	4b0a      	ldr	r3, [pc, #40]	; (5538 <prvInitialiseNewTask+0x10c>)
    550e:	4798      	blx	r3
    5510:	0002      	movs	r2, r0
    5512:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5514:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    5516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5518:	2b00      	cmp	r3, #0
    551a:	d002      	beq.n	5522 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    551e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    5522:	46c0      	nop			; (mov r8, r8)
    5524:	46bd      	mov	sp, r7
    5526:	b006      	add	sp, #24
    5528:	bd80      	pop	{r7, pc}
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	0000b39b 	.word	0x0000b39b
    5530:	3fffffff 	.word	0x3fffffff
    5534:	0000485d 	.word	0x0000485d
    5538:	00001e15 	.word	0x00001e15

0000553c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    553c:	b580      	push	{r7, lr}
    553e:	b082      	sub	sp, #8
    5540:	af00      	add	r7, sp, #0
    5542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    5544:	4b2b      	ldr	r3, [pc, #172]	; (55f4 <prvAddNewTaskToReadyList+0xb8>)
    5546:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    5548:	4b2b      	ldr	r3, [pc, #172]	; (55f8 <prvAddNewTaskToReadyList+0xbc>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	1c5a      	adds	r2, r3, #1
    554e:	4b2a      	ldr	r3, [pc, #168]	; (55f8 <prvAddNewTaskToReadyList+0xbc>)
    5550:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    5552:	4b2a      	ldr	r3, [pc, #168]	; (55fc <prvAddNewTaskToReadyList+0xc0>)
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	2b00      	cmp	r3, #0
    5558:	d109      	bne.n	556e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    555a:	4b28      	ldr	r3, [pc, #160]	; (55fc <prvAddNewTaskToReadyList+0xc0>)
    555c:	687a      	ldr	r2, [r7, #4]
    555e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5560:	4b25      	ldr	r3, [pc, #148]	; (55f8 <prvAddNewTaskToReadyList+0xbc>)
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	2b01      	cmp	r3, #1
    5566:	d110      	bne.n	558a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    5568:	4b25      	ldr	r3, [pc, #148]	; (5600 <prvAddNewTaskToReadyList+0xc4>)
    556a:	4798      	blx	r3
    556c:	e00d      	b.n	558a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    556e:	4b25      	ldr	r3, [pc, #148]	; (5604 <prvAddNewTaskToReadyList+0xc8>)
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	2b00      	cmp	r3, #0
    5574:	d109      	bne.n	558a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    5576:	4b21      	ldr	r3, [pc, #132]	; (55fc <prvAddNewTaskToReadyList+0xc0>)
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5580:	429a      	cmp	r2, r3
    5582:	d802      	bhi.n	558a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    5584:	4b1d      	ldr	r3, [pc, #116]	; (55fc <prvAddNewTaskToReadyList+0xc0>)
    5586:	687a      	ldr	r2, [r7, #4]
    5588:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    558a:	4b1f      	ldr	r3, [pc, #124]	; (5608 <prvAddNewTaskToReadyList+0xcc>)
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	1c5a      	adds	r2, r3, #1
    5590:	4b1d      	ldr	r3, [pc, #116]	; (5608 <prvAddNewTaskToReadyList+0xcc>)
    5592:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5594:	4b1c      	ldr	r3, [pc, #112]	; (5608 <prvAddNewTaskToReadyList+0xcc>)
    5596:	681a      	ldr	r2, [r3, #0]
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    559c:	687b      	ldr	r3, [r7, #4]
    559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55a0:	4b1a      	ldr	r3, [pc, #104]	; (560c <prvAddNewTaskToReadyList+0xd0>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	429a      	cmp	r2, r3
    55a6:	d903      	bls.n	55b0 <prvAddNewTaskToReadyList+0x74>
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ac:	4b17      	ldr	r3, [pc, #92]	; (560c <prvAddNewTaskToReadyList+0xd0>)
    55ae:	601a      	str	r2, [r3, #0]
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55b4:	0013      	movs	r3, r2
    55b6:	009b      	lsls	r3, r3, #2
    55b8:	189b      	adds	r3, r3, r2
    55ba:	009b      	lsls	r3, r3, #2
    55bc:	4a14      	ldr	r2, [pc, #80]	; (5610 <prvAddNewTaskToReadyList+0xd4>)
    55be:	189a      	adds	r2, r3, r2
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	3304      	adds	r3, #4
    55c4:	0019      	movs	r1, r3
    55c6:	0010      	movs	r0, r2
    55c8:	4b12      	ldr	r3, [pc, #72]	; (5614 <prvAddNewTaskToReadyList+0xd8>)
    55ca:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    55cc:	4b12      	ldr	r3, [pc, #72]	; (5618 <prvAddNewTaskToReadyList+0xdc>)
    55ce:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    55d0:	4b0c      	ldr	r3, [pc, #48]	; (5604 <prvAddNewTaskToReadyList+0xc8>)
    55d2:	681b      	ldr	r3, [r3, #0]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d008      	beq.n	55ea <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    55d8:	4b08      	ldr	r3, [pc, #32]	; (55fc <prvAddNewTaskToReadyList+0xc0>)
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55e2:	429a      	cmp	r2, r3
    55e4:	d201      	bcs.n	55ea <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    55e6:	4b0d      	ldr	r3, [pc, #52]	; (561c <prvAddNewTaskToReadyList+0xe0>)
    55e8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	46bd      	mov	sp, r7
    55ee:	b002      	add	sp, #8
    55f0:	bd80      	pop	{r7, pc}
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	00001f51 	.word	0x00001f51
    55f8:	20005234 	.word	0x20005234
    55fc:	2000515c 	.word	0x2000515c
    5600:	00006039 	.word	0x00006039
    5604:	20005240 	.word	0x20005240
    5608:	20005250 	.word	0x20005250
    560c:	2000523c 	.word	0x2000523c
    5610:	20005160 	.word	0x20005160
    5614:	00004873 	.word	0x00004873
    5618:	00001f75 	.word	0x00001f75
    561c:	00001f31 	.word	0x00001f31

00005620 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    5620:	b580      	push	{r7, lr}
    5622:	b086      	sub	sp, #24
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
    5628:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    562a:	2300      	movs	r3, #0
    562c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	2b00      	cmp	r3, #0
    5632:	d101      	bne.n	5638 <vTaskDelayUntil+0x18>
    5634:	b672      	cpsid	i
    5636:	e7fe      	b.n	5636 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    5638:	683b      	ldr	r3, [r7, #0]
    563a:	2b00      	cmp	r3, #0
    563c:	d101      	bne.n	5642 <vTaskDelayUntil+0x22>
    563e:	b672      	cpsid	i
    5640:	e7fe      	b.n	5640 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    5642:	4b23      	ldr	r3, [pc, #140]	; (56d0 <vTaskDelayUntil+0xb0>)
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	2b00      	cmp	r3, #0
    5648:	d001      	beq.n	564e <vTaskDelayUntil+0x2e>
    564a:	b672      	cpsid	i
    564c:	e7fe      	b.n	564c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    564e:	4b21      	ldr	r3, [pc, #132]	; (56d4 <vTaskDelayUntil+0xb4>)
    5650:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    5652:	4b21      	ldr	r3, [pc, #132]	; (56d8 <vTaskDelayUntil+0xb8>)
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	681a      	ldr	r2, [r3, #0]
    565c:	683b      	ldr	r3, [r7, #0]
    565e:	18d3      	adds	r3, r2, r3
    5660:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	681a      	ldr	r2, [r3, #0]
    5666:	693b      	ldr	r3, [r7, #16]
    5668:	429a      	cmp	r2, r3
    566a:	d90b      	bls.n	5684 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	681a      	ldr	r2, [r3, #0]
    5670:	68fb      	ldr	r3, [r7, #12]
    5672:	429a      	cmp	r2, r3
    5674:	d911      	bls.n	569a <vTaskDelayUntil+0x7a>
    5676:	68fa      	ldr	r2, [r7, #12]
    5678:	693b      	ldr	r3, [r7, #16]
    567a:	429a      	cmp	r2, r3
    567c:	d90d      	bls.n	569a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    567e:	2301      	movs	r3, #1
    5680:	617b      	str	r3, [r7, #20]
    5682:	e00a      	b.n	569a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	681a      	ldr	r2, [r3, #0]
    5688:	68fb      	ldr	r3, [r7, #12]
    568a:	429a      	cmp	r2, r3
    568c:	d803      	bhi.n	5696 <vTaskDelayUntil+0x76>
    568e:	68fa      	ldr	r2, [r7, #12]
    5690:	693b      	ldr	r3, [r7, #16]
    5692:	429a      	cmp	r2, r3
    5694:	d901      	bls.n	569a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    5696:	2301      	movs	r3, #1
    5698:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	68fa      	ldr	r2, [r7, #12]
    569e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    56a0:	697b      	ldr	r3, [r7, #20]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d006      	beq.n	56b4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    56a6:	68fa      	ldr	r2, [r7, #12]
    56a8:	693b      	ldr	r3, [r7, #16]
    56aa:	1ad3      	subs	r3, r2, r3
    56ac:	2100      	movs	r1, #0
    56ae:	0018      	movs	r0, r3
    56b0:	4b0a      	ldr	r3, [pc, #40]	; (56dc <vTaskDelayUntil+0xbc>)
    56b2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    56b4:	4b0a      	ldr	r3, [pc, #40]	; (56e0 <vTaskDelayUntil+0xc0>)
    56b6:	4798      	blx	r3
    56b8:	0003      	movs	r3, r0
    56ba:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    56bc:	68bb      	ldr	r3, [r7, #8]
    56be:	2b00      	cmp	r3, #0
    56c0:	d101      	bne.n	56c6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    56c2:	4b08      	ldr	r3, [pc, #32]	; (56e4 <vTaskDelayUntil+0xc4>)
    56c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	46bd      	mov	sp, r7
    56ca:	b006      	add	sp, #24
    56cc:	bd80      	pop	{r7, pc}
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	2000525c 	.word	0x2000525c
    56d4:	000059e1 	.word	0x000059e1
    56d8:	20005238 	.word	0x20005238
    56dc:	00006299 	.word	0x00006299
    56e0:	000059f9 	.word	0x000059f9
    56e4:	00001f31 	.word	0x00001f31

000056e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    56e8:	b580      	push	{r7, lr}
    56ea:	b084      	sub	sp, #16
    56ec:	af00      	add	r7, sp, #0
    56ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    56f0:	2300      	movs	r3, #0
    56f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	2b00      	cmp	r3, #0
    56f8:	d010      	beq.n	571c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    56fa:	4b0d      	ldr	r3, [pc, #52]	; (5730 <vTaskDelay+0x48>)
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	2b00      	cmp	r3, #0
    5700:	d001      	beq.n	5706 <vTaskDelay+0x1e>
    5702:	b672      	cpsid	i
    5704:	e7fe      	b.n	5704 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    5706:	4b0b      	ldr	r3, [pc, #44]	; (5734 <vTaskDelay+0x4c>)
    5708:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	2100      	movs	r1, #0
    570e:	0018      	movs	r0, r3
    5710:	4b09      	ldr	r3, [pc, #36]	; (5738 <vTaskDelay+0x50>)
    5712:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    5714:	4b09      	ldr	r3, [pc, #36]	; (573c <vTaskDelay+0x54>)
    5716:	4798      	blx	r3
    5718:	0003      	movs	r3, r0
    571a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    571c:	68fb      	ldr	r3, [r7, #12]
    571e:	2b00      	cmp	r3, #0
    5720:	d101      	bne.n	5726 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    5722:	4b07      	ldr	r3, [pc, #28]	; (5740 <vTaskDelay+0x58>)
    5724:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5726:	46c0      	nop			; (mov r8, r8)
    5728:	46bd      	mov	sp, r7
    572a:	b004      	add	sp, #16
    572c:	bd80      	pop	{r7, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	2000525c 	.word	0x2000525c
    5734:	000059e1 	.word	0x000059e1
    5738:	00006299 	.word	0x00006299
    573c:	000059f9 	.word	0x000059f9
    5740:	00001f31 	.word	0x00001f31

00005744 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    5744:	b580      	push	{r7, lr}
    5746:	b084      	sub	sp, #16
    5748:	af00      	add	r7, sp, #0
    574a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    574c:	4b2b      	ldr	r3, [pc, #172]	; (57fc <vTaskSuspend+0xb8>)
    574e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	2b00      	cmp	r3, #0
    5754:	d102      	bne.n	575c <vTaskSuspend+0x18>
    5756:	4b2a      	ldr	r3, [pc, #168]	; (5800 <vTaskSuspend+0xbc>)
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	e000      	b.n	575e <vTaskSuspend+0x1a>
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5760:	68fb      	ldr	r3, [r7, #12]
    5762:	3304      	adds	r3, #4
    5764:	0018      	movs	r0, r3
    5766:	4b27      	ldr	r3, [pc, #156]	; (5804 <vTaskSuspend+0xc0>)
    5768:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    576a:	68fb      	ldr	r3, [r7, #12]
    576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    576e:	2b00      	cmp	r3, #0
    5770:	d004      	beq.n	577c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5772:	68fb      	ldr	r3, [r7, #12]
    5774:	3318      	adds	r3, #24
    5776:	0018      	movs	r0, r3
    5778:	4b22      	ldr	r3, [pc, #136]	; (5804 <vTaskSuspend+0xc0>)
    577a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    577c:	68fb      	ldr	r3, [r7, #12]
    577e:	1d1a      	adds	r2, r3, #4
    5780:	4b21      	ldr	r3, [pc, #132]	; (5808 <vTaskSuspend+0xc4>)
    5782:	0011      	movs	r1, r2
    5784:	0018      	movs	r0, r3
    5786:	4b21      	ldr	r3, [pc, #132]	; (580c <vTaskSuspend+0xc8>)
    5788:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	2254      	movs	r2, #84	; 0x54
    578e:	5c9b      	ldrb	r3, [r3, r2]
    5790:	b2db      	uxtb	r3, r3
    5792:	2b01      	cmp	r3, #1
    5794:	d103      	bne.n	579e <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5796:	68fb      	ldr	r3, [r7, #12]
    5798:	2254      	movs	r2, #84	; 0x54
    579a:	2100      	movs	r1, #0
    579c:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    579e:	4b1c      	ldr	r3, [pc, #112]	; (5810 <vTaskSuspend+0xcc>)
    57a0:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    57a2:	4b1c      	ldr	r3, [pc, #112]	; (5814 <vTaskSuspend+0xd0>)
    57a4:	681b      	ldr	r3, [r3, #0]
    57a6:	2b00      	cmp	r3, #0
    57a8:	d005      	beq.n	57b6 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    57aa:	4b14      	ldr	r3, [pc, #80]	; (57fc <vTaskSuspend+0xb8>)
    57ac:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    57ae:	4b1a      	ldr	r3, [pc, #104]	; (5818 <vTaskSuspend+0xd4>)
    57b0:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    57b2:	4b17      	ldr	r3, [pc, #92]	; (5810 <vTaskSuspend+0xcc>)
    57b4:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    57b6:	4b12      	ldr	r3, [pc, #72]	; (5800 <vTaskSuspend+0xbc>)
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	68fa      	ldr	r2, [r7, #12]
    57bc:	429a      	cmp	r2, r3
    57be:	d118      	bne.n	57f2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
    57c0:	4b14      	ldr	r3, [pc, #80]	; (5814 <vTaskSuspend+0xd0>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d008      	beq.n	57da <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    57c8:	4b14      	ldr	r3, [pc, #80]	; (581c <vTaskSuspend+0xd8>)
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	2b00      	cmp	r3, #0
    57ce:	d001      	beq.n	57d4 <vTaskSuspend+0x90>
    57d0:	b672      	cpsid	i
    57d2:	e7fe      	b.n	57d2 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
    57d4:	4b12      	ldr	r3, [pc, #72]	; (5820 <vTaskSuspend+0xdc>)
    57d6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    57d8:	e00b      	b.n	57f2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    57da:	4b0b      	ldr	r3, [pc, #44]	; (5808 <vTaskSuspend+0xc4>)
    57dc:	681a      	ldr	r2, [r3, #0]
    57de:	4b11      	ldr	r3, [pc, #68]	; (5824 <vTaskSuspend+0xe0>)
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	429a      	cmp	r2, r3
    57e4:	d103      	bne.n	57ee <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
    57e6:	4b06      	ldr	r3, [pc, #24]	; (5800 <vTaskSuspend+0xbc>)
    57e8:	2200      	movs	r2, #0
    57ea:	601a      	str	r2, [r3, #0]
	}
    57ec:	e001      	b.n	57f2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
    57ee:	4b0e      	ldr	r3, [pc, #56]	; (5828 <vTaskSuspend+0xe4>)
    57f0:	4798      	blx	r3
	}
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	46bd      	mov	sp, r7
    57f6:	b004      	add	sp, #16
    57f8:	bd80      	pop	{r7, pc}
    57fa:	46c0      	nop			; (mov r8, r8)
    57fc:	00001f51 	.word	0x00001f51
    5800:	2000515c 	.word	0x2000515c
    5804:	00004923 	.word	0x00004923
    5808:	20005220 	.word	0x20005220
    580c:	00004873 	.word	0x00004873
    5810:	00001f75 	.word	0x00001f75
    5814:	20005240 	.word	0x20005240
    5818:	00006159 	.word	0x00006159
    581c:	2000525c 	.word	0x2000525c
    5820:	00001f31 	.word	0x00001f31
    5824:	20005234 	.word	0x20005234
    5828:	00005cd1 	.word	0x00005cd1

0000582c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    582c:	b580      	push	{r7, lr}
    582e:	b084      	sub	sp, #16
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    5834:	2300      	movs	r3, #0
    5836:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	2b00      	cmp	r3, #0
    5840:	d101      	bne.n	5846 <prvTaskIsTaskSuspended+0x1a>
    5842:	b672      	cpsid	i
    5844:	e7fe      	b.n	5844 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    5846:	68bb      	ldr	r3, [r7, #8]
    5848:	695a      	ldr	r2, [r3, #20]
    584a:	4b0e      	ldr	r3, [pc, #56]	; (5884 <prvTaskIsTaskSuspended+0x58>)
    584c:	429a      	cmp	r2, r3
    584e:	d101      	bne.n	5854 <prvTaskIsTaskSuspended+0x28>
    5850:	2301      	movs	r3, #1
    5852:	e000      	b.n	5856 <prvTaskIsTaskSuspended+0x2a>
    5854:	2300      	movs	r3, #0
    5856:	2b00      	cmp	r3, #0
    5858:	d00f      	beq.n	587a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    585a:	68bb      	ldr	r3, [r7, #8]
    585c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    585e:	4b0a      	ldr	r3, [pc, #40]	; (5888 <prvTaskIsTaskSuspended+0x5c>)
    5860:	429a      	cmp	r2, r3
    5862:	d00a      	beq.n	587a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    5864:	68bb      	ldr	r3, [r7, #8]
    5866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5868:	2b00      	cmp	r3, #0
    586a:	d101      	bne.n	5870 <prvTaskIsTaskSuspended+0x44>
    586c:	2301      	movs	r3, #1
    586e:	e000      	b.n	5872 <prvTaskIsTaskSuspended+0x46>
    5870:	2300      	movs	r3, #0
    5872:	2b00      	cmp	r3, #0
    5874:	d001      	beq.n	587a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
    5876:	2301      	movs	r3, #1
    5878:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    587a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    587c:	0018      	movs	r0, r3
    587e:	46bd      	mov	sp, r7
    5880:	b004      	add	sp, #16
    5882:	bd80      	pop	{r7, pc}
    5884:	20005220 	.word	0x20005220
    5888:	200051f4 	.word	0x200051f4

0000588c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    588c:	b580      	push	{r7, lr}
    588e:	b086      	sub	sp, #24
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    5894:	2300      	movs	r3, #0
    5896:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	2b00      	cmp	r3, #0
    58a0:	d101      	bne.n	58a6 <xTaskResumeFromISR+0x1a>
    58a2:	b672      	cpsid	i
    58a4:	e7fe      	b.n	58a4 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    58a6:	4b23      	ldr	r3, [pc, #140]	; (5934 <xTaskResumeFromISR+0xa8>)
    58a8:	4798      	blx	r3
    58aa:	0003      	movs	r3, r0
    58ac:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    58ae:	693b      	ldr	r3, [r7, #16]
    58b0:	0018      	movs	r0, r3
    58b2:	4b21      	ldr	r3, [pc, #132]	; (5938 <xTaskResumeFromISR+0xac>)
    58b4:	4798      	blx	r3
    58b6:	1e03      	subs	r3, r0, #0
    58b8:	d032      	beq.n	5920 <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    58ba:	4b20      	ldr	r3, [pc, #128]	; (593c <xTaskResumeFromISR+0xb0>)
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	2b00      	cmp	r3, #0
    58c0:	d126      	bne.n	5910 <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    58c2:	693b      	ldr	r3, [r7, #16]
    58c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c6:	4b1e      	ldr	r3, [pc, #120]	; (5940 <xTaskResumeFromISR+0xb4>)
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58cc:	429a      	cmp	r2, r3
    58ce:	d301      	bcc.n	58d4 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
    58d0:	2301      	movs	r3, #1
    58d2:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    58d4:	693b      	ldr	r3, [r7, #16]
    58d6:	3304      	adds	r3, #4
    58d8:	0018      	movs	r0, r3
    58da:	4b1a      	ldr	r3, [pc, #104]	; (5944 <xTaskResumeFromISR+0xb8>)
    58dc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    58de:	693b      	ldr	r3, [r7, #16]
    58e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58e2:	4b19      	ldr	r3, [pc, #100]	; (5948 <xTaskResumeFromISR+0xbc>)
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	429a      	cmp	r2, r3
    58e8:	d903      	bls.n	58f2 <xTaskResumeFromISR+0x66>
    58ea:	693b      	ldr	r3, [r7, #16]
    58ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ee:	4b16      	ldr	r3, [pc, #88]	; (5948 <xTaskResumeFromISR+0xbc>)
    58f0:	601a      	str	r2, [r3, #0]
    58f2:	693b      	ldr	r3, [r7, #16]
    58f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58f6:	0013      	movs	r3, r2
    58f8:	009b      	lsls	r3, r3, #2
    58fa:	189b      	adds	r3, r3, r2
    58fc:	009b      	lsls	r3, r3, #2
    58fe:	4a13      	ldr	r2, [pc, #76]	; (594c <xTaskResumeFromISR+0xc0>)
    5900:	189a      	adds	r2, r3, r2
    5902:	693b      	ldr	r3, [r7, #16]
    5904:	3304      	adds	r3, #4
    5906:	0019      	movs	r1, r3
    5908:	0010      	movs	r0, r2
    590a:	4b11      	ldr	r3, [pc, #68]	; (5950 <xTaskResumeFromISR+0xc4>)
    590c:	4798      	blx	r3
    590e:	e007      	b.n	5920 <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5910:	693b      	ldr	r3, [r7, #16]
    5912:	3318      	adds	r3, #24
    5914:	001a      	movs	r2, r3
    5916:	4b0f      	ldr	r3, [pc, #60]	; (5954 <xTaskResumeFromISR+0xc8>)
    5918:	0011      	movs	r1, r2
    591a:	0018      	movs	r0, r3
    591c:	4b0c      	ldr	r3, [pc, #48]	; (5950 <xTaskResumeFromISR+0xc4>)
    591e:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5920:	68fb      	ldr	r3, [r7, #12]
    5922:	0018      	movs	r0, r3
    5924:	4b0c      	ldr	r3, [pc, #48]	; (5958 <xTaskResumeFromISR+0xcc>)
    5926:	4798      	blx	r3

		return xYieldRequired;
    5928:	697b      	ldr	r3, [r7, #20]
	}
    592a:	0018      	movs	r0, r3
    592c:	46bd      	mov	sp, r7
    592e:	b006      	add	sp, #24
    5930:	bd80      	pop	{r7, pc}
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	00001fa5 	.word	0x00001fa5
    5938:	0000582d 	.word	0x0000582d
    593c:	2000525c 	.word	0x2000525c
    5940:	2000515c 	.word	0x2000515c
    5944:	00004923 	.word	0x00004923
    5948:	2000523c 	.word	0x2000523c
    594c:	20005160 	.word	0x20005160
    5950:	00004873 	.word	0x00004873
    5954:	200051f4 	.word	0x200051f4
    5958:	00001fb1 	.word	0x00001fb1

0000595c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    595c:	b590      	push	{r4, r7, lr}
    595e:	b085      	sub	sp, #20
    5960:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    5962:	4916      	ldr	r1, [pc, #88]	; (59bc <vTaskStartScheduler+0x60>)
    5964:	4816      	ldr	r0, [pc, #88]	; (59c0 <vTaskStartScheduler+0x64>)
    5966:	4b17      	ldr	r3, [pc, #92]	; (59c4 <vTaskStartScheduler+0x68>)
    5968:	9301      	str	r3, [sp, #4]
    596a:	2300      	movs	r3, #0
    596c:	9300      	str	r3, [sp, #0]
    596e:	2300      	movs	r3, #0
    5970:	2282      	movs	r2, #130	; 0x82
    5972:	4c15      	ldr	r4, [pc, #84]	; (59c8 <vTaskStartScheduler+0x6c>)
    5974:	47a0      	blx	r4
    5976:	0003      	movs	r3, r0
    5978:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	2b01      	cmp	r3, #1
    597e:	d103      	bne.n	5988 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    5980:	4b12      	ldr	r3, [pc, #72]	; (59cc <vTaskStartScheduler+0x70>)
    5982:	4798      	blx	r3
    5984:	0003      	movs	r3, r0
    5986:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	2b01      	cmp	r3, #1
    598c:	d10d      	bne.n	59aa <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    598e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    5990:	4b0f      	ldr	r3, [pc, #60]	; (59d0 <vTaskStartScheduler+0x74>)
    5992:	2201      	movs	r2, #1
    5994:	4252      	negs	r2, r2
    5996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    5998:	4b0e      	ldr	r3, [pc, #56]	; (59d4 <vTaskStartScheduler+0x78>)
    599a:	2201      	movs	r2, #1
    599c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    599e:	4b0e      	ldr	r3, [pc, #56]	; (59d8 <vTaskStartScheduler+0x7c>)
    59a0:	2200      	movs	r2, #0
    59a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    59a4:	4b0d      	ldr	r3, [pc, #52]	; (59dc <vTaskStartScheduler+0x80>)
    59a6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    59a8:	e004      	b.n	59b4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    59aa:	687b      	ldr	r3, [r7, #4]
    59ac:	3301      	adds	r3, #1
    59ae:	d101      	bne.n	59b4 <vTaskStartScheduler+0x58>
    59b0:	b672      	cpsid	i
    59b2:	e7fe      	b.n	59b2 <vTaskStartScheduler+0x56>
}
    59b4:	46c0      	nop			; (mov r8, r8)
    59b6:	46bd      	mov	sp, r7
    59b8:	b003      	add	sp, #12
    59ba:	bd90      	pop	{r4, r7, pc}
    59bc:	0000bed4 	.word	0x0000bed4
    59c0:	00006009 	.word	0x00006009
    59c4:	20005258 	.word	0x20005258
    59c8:	0000538d 	.word	0x0000538d
    59cc:	0000634d 	.word	0x0000634d
    59d0:	20005254 	.word	0x20005254
    59d4:	20005240 	.word	0x20005240
    59d8:	20005238 	.word	0x20005238
    59dc:	00001ed9 	.word	0x00001ed9

000059e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    59e0:	b580      	push	{r7, lr}
    59e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    59e4:	4b03      	ldr	r3, [pc, #12]	; (59f4 <vTaskSuspendAll+0x14>)
    59e6:	681b      	ldr	r3, [r3, #0]
    59e8:	1c5a      	adds	r2, r3, #1
    59ea:	4b02      	ldr	r3, [pc, #8]	; (59f4 <vTaskSuspendAll+0x14>)
    59ec:	601a      	str	r2, [r3, #0]
}
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	46bd      	mov	sp, r7
    59f2:	bd80      	pop	{r7, pc}
    59f4:	2000525c 	.word	0x2000525c

000059f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b084      	sub	sp, #16
    59fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    59fe:	2300      	movs	r3, #0
    5a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    5a02:	2300      	movs	r3, #0
    5a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    5a06:	4b3a      	ldr	r3, [pc, #232]	; (5af0 <xTaskResumeAll+0xf8>)
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d101      	bne.n	5a12 <xTaskResumeAll+0x1a>
    5a0e:	b672      	cpsid	i
    5a10:	e7fe      	b.n	5a10 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5a12:	4b38      	ldr	r3, [pc, #224]	; (5af4 <xTaskResumeAll+0xfc>)
    5a14:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    5a16:	4b36      	ldr	r3, [pc, #216]	; (5af0 <xTaskResumeAll+0xf8>)
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	1e5a      	subs	r2, r3, #1
    5a1c:	4b34      	ldr	r3, [pc, #208]	; (5af0 <xTaskResumeAll+0xf8>)
    5a1e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5a20:	4b33      	ldr	r3, [pc, #204]	; (5af0 <xTaskResumeAll+0xf8>)
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	2b00      	cmp	r3, #0
    5a26:	d15b      	bne.n	5ae0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    5a28:	4b33      	ldr	r3, [pc, #204]	; (5af8 <xTaskResumeAll+0x100>)
    5a2a:	681b      	ldr	r3, [r3, #0]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d057      	beq.n	5ae0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5a30:	e02f      	b.n	5a92 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5a32:	4b32      	ldr	r3, [pc, #200]	; (5afc <xTaskResumeAll+0x104>)
    5a34:	68db      	ldr	r3, [r3, #12]
    5a36:	68db      	ldr	r3, [r3, #12]
    5a38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	3318      	adds	r3, #24
    5a3e:	0018      	movs	r0, r3
    5a40:	4b2f      	ldr	r3, [pc, #188]	; (5b00 <xTaskResumeAll+0x108>)
    5a42:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	3304      	adds	r3, #4
    5a48:	0018      	movs	r0, r3
    5a4a:	4b2d      	ldr	r3, [pc, #180]	; (5b00 <xTaskResumeAll+0x108>)
    5a4c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a52:	4b2c      	ldr	r3, [pc, #176]	; (5b04 <xTaskResumeAll+0x10c>)
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	429a      	cmp	r2, r3
    5a58:	d903      	bls.n	5a62 <xTaskResumeAll+0x6a>
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a5e:	4b29      	ldr	r3, [pc, #164]	; (5b04 <xTaskResumeAll+0x10c>)
    5a60:	601a      	str	r2, [r3, #0]
    5a62:	68fb      	ldr	r3, [r7, #12]
    5a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a66:	0013      	movs	r3, r2
    5a68:	009b      	lsls	r3, r3, #2
    5a6a:	189b      	adds	r3, r3, r2
    5a6c:	009b      	lsls	r3, r3, #2
    5a6e:	4a26      	ldr	r2, [pc, #152]	; (5b08 <xTaskResumeAll+0x110>)
    5a70:	189a      	adds	r2, r3, r2
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	3304      	adds	r3, #4
    5a76:	0019      	movs	r1, r3
    5a78:	0010      	movs	r0, r2
    5a7a:	4b24      	ldr	r3, [pc, #144]	; (5b0c <xTaskResumeAll+0x114>)
    5a7c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5a7e:	68fb      	ldr	r3, [r7, #12]
    5a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a82:	4b23      	ldr	r3, [pc, #140]	; (5b10 <xTaskResumeAll+0x118>)
    5a84:	681b      	ldr	r3, [r3, #0]
    5a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a88:	429a      	cmp	r2, r3
    5a8a:	d302      	bcc.n	5a92 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    5a8c:	4b21      	ldr	r3, [pc, #132]	; (5b14 <xTaskResumeAll+0x11c>)
    5a8e:	2201      	movs	r2, #1
    5a90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5a92:	4b1a      	ldr	r3, [pc, #104]	; (5afc <xTaskResumeAll+0x104>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d1cb      	bne.n	5a32 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d001      	beq.n	5aa4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    5aa0:	4b1d      	ldr	r3, [pc, #116]	; (5b18 <xTaskResumeAll+0x120>)
    5aa2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5aa4:	4b1d      	ldr	r3, [pc, #116]	; (5b1c <xTaskResumeAll+0x124>)
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	2b00      	cmp	r3, #0
    5aae:	d00f      	beq.n	5ad0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    5ab0:	4b1b      	ldr	r3, [pc, #108]	; (5b20 <xTaskResumeAll+0x128>)
    5ab2:	4798      	blx	r3
    5ab4:	1e03      	subs	r3, r0, #0
    5ab6:	d002      	beq.n	5abe <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    5ab8:	4b16      	ldr	r3, [pc, #88]	; (5b14 <xTaskResumeAll+0x11c>)
    5aba:	2201      	movs	r2, #1
    5abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	3b01      	subs	r3, #1
    5ac2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d1f2      	bne.n	5ab0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    5aca:	4b14      	ldr	r3, [pc, #80]	; (5b1c <xTaskResumeAll+0x124>)
    5acc:	2200      	movs	r2, #0
    5ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    5ad0:	4b10      	ldr	r3, [pc, #64]	; (5b14 <xTaskResumeAll+0x11c>)
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d003      	beq.n	5ae0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    5ad8:	2301      	movs	r3, #1
    5ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    5adc:	4b11      	ldr	r3, [pc, #68]	; (5b24 <xTaskResumeAll+0x12c>)
    5ade:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5ae0:	4b11      	ldr	r3, [pc, #68]	; (5b28 <xTaskResumeAll+0x130>)
    5ae2:	4798      	blx	r3

	return xAlreadyYielded;
    5ae4:	68bb      	ldr	r3, [r7, #8]
}
    5ae6:	0018      	movs	r0, r3
    5ae8:	46bd      	mov	sp, r7
    5aea:	b004      	add	sp, #16
    5aec:	bd80      	pop	{r7, pc}
    5aee:	46c0      	nop			; (mov r8, r8)
    5af0:	2000525c 	.word	0x2000525c
    5af4:	00001f51 	.word	0x00001f51
    5af8:	20005234 	.word	0x20005234
    5afc:	200051f4 	.word	0x200051f4
    5b00:	00004923 	.word	0x00004923
    5b04:	2000523c 	.word	0x2000523c
    5b08:	20005160 	.word	0x20005160
    5b0c:	00004873 	.word	0x00004873
    5b10:	2000515c 	.word	0x2000515c
    5b14:	20005248 	.word	0x20005248
    5b18:	00006159 	.word	0x00006159
    5b1c:	20005244 	.word	0x20005244
    5b20:	00005b49 	.word	0x00005b49
    5b24:	00001f31 	.word	0x00001f31
    5b28:	00001f75 	.word	0x00001f75

00005b2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    5b2c:	b580      	push	{r7, lr}
    5b2e:	b082      	sub	sp, #8
    5b30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    5b32:	4b04      	ldr	r3, [pc, #16]	; (5b44 <xTaskGetTickCount+0x18>)
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    5b38:	687b      	ldr	r3, [r7, #4]
}
    5b3a:	0018      	movs	r0, r3
    5b3c:	46bd      	mov	sp, r7
    5b3e:	b002      	add	sp, #8
    5b40:	bd80      	pop	{r7, pc}
    5b42:	46c0      	nop			; (mov r8, r8)
    5b44:	20005238 	.word	0x20005238

00005b48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b086      	sub	sp, #24
    5b4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    5b4e:	2300      	movs	r3, #0
    5b50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5b52:	4b50      	ldr	r3, [pc, #320]	; (5c94 <xTaskIncrementTick+0x14c>)
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d000      	beq.n	5b5c <xTaskIncrementTick+0x14>
    5b5a:	e089      	b.n	5c70 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    5b5c:	4b4e      	ldr	r3, [pc, #312]	; (5c98 <xTaskIncrementTick+0x150>)
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	3301      	adds	r3, #1
    5b62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    5b64:	4b4c      	ldr	r3, [pc, #304]	; (5c98 <xTaskIncrementTick+0x150>)
    5b66:	693a      	ldr	r2, [r7, #16]
    5b68:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    5b6a:	693b      	ldr	r3, [r7, #16]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d117      	bne.n	5ba0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    5b70:	4b4a      	ldr	r3, [pc, #296]	; (5c9c <xTaskIncrementTick+0x154>)
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	681b      	ldr	r3, [r3, #0]
    5b76:	2b00      	cmp	r3, #0
    5b78:	d001      	beq.n	5b7e <xTaskIncrementTick+0x36>
    5b7a:	b672      	cpsid	i
    5b7c:	e7fe      	b.n	5b7c <xTaskIncrementTick+0x34>
    5b7e:	4b47      	ldr	r3, [pc, #284]	; (5c9c <xTaskIncrementTick+0x154>)
    5b80:	681b      	ldr	r3, [r3, #0]
    5b82:	60fb      	str	r3, [r7, #12]
    5b84:	4b46      	ldr	r3, [pc, #280]	; (5ca0 <xTaskIncrementTick+0x158>)
    5b86:	681a      	ldr	r2, [r3, #0]
    5b88:	4b44      	ldr	r3, [pc, #272]	; (5c9c <xTaskIncrementTick+0x154>)
    5b8a:	601a      	str	r2, [r3, #0]
    5b8c:	4b44      	ldr	r3, [pc, #272]	; (5ca0 <xTaskIncrementTick+0x158>)
    5b8e:	68fa      	ldr	r2, [r7, #12]
    5b90:	601a      	str	r2, [r3, #0]
    5b92:	4b44      	ldr	r3, [pc, #272]	; (5ca4 <xTaskIncrementTick+0x15c>)
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	1c5a      	adds	r2, r3, #1
    5b98:	4b42      	ldr	r3, [pc, #264]	; (5ca4 <xTaskIncrementTick+0x15c>)
    5b9a:	601a      	str	r2, [r3, #0]
    5b9c:	4b42      	ldr	r3, [pc, #264]	; (5ca8 <xTaskIncrementTick+0x160>)
    5b9e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    5ba0:	4b42      	ldr	r3, [pc, #264]	; (5cac <xTaskIncrementTick+0x164>)
    5ba2:	681b      	ldr	r3, [r3, #0]
    5ba4:	693a      	ldr	r2, [r7, #16]
    5ba6:	429a      	cmp	r2, r3
    5ba8:	d34e      	bcc.n	5c48 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5baa:	4b3c      	ldr	r3, [pc, #240]	; (5c9c <xTaskIncrementTick+0x154>)
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	2b00      	cmp	r3, #0
    5bb2:	d101      	bne.n	5bb8 <xTaskIncrementTick+0x70>
    5bb4:	2301      	movs	r3, #1
    5bb6:	e000      	b.n	5bba <xTaskIncrementTick+0x72>
    5bb8:	2300      	movs	r3, #0
    5bba:	2b00      	cmp	r3, #0
    5bbc:	d004      	beq.n	5bc8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5bbe:	4b3b      	ldr	r3, [pc, #236]	; (5cac <xTaskIncrementTick+0x164>)
    5bc0:	2201      	movs	r2, #1
    5bc2:	4252      	negs	r2, r2
    5bc4:	601a      	str	r2, [r3, #0]
					break;
    5bc6:	e03f      	b.n	5c48 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5bc8:	4b34      	ldr	r3, [pc, #208]	; (5c9c <xTaskIncrementTick+0x154>)
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	68db      	ldr	r3, [r3, #12]
    5bce:	68db      	ldr	r3, [r3, #12]
    5bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5bd2:	68bb      	ldr	r3, [r7, #8]
    5bd4:	685b      	ldr	r3, [r3, #4]
    5bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    5bd8:	693a      	ldr	r2, [r7, #16]
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	429a      	cmp	r2, r3
    5bde:	d203      	bcs.n	5be8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    5be0:	4b32      	ldr	r3, [pc, #200]	; (5cac <xTaskIncrementTick+0x164>)
    5be2:	687a      	ldr	r2, [r7, #4]
    5be4:	601a      	str	r2, [r3, #0]
						break;
    5be6:	e02f      	b.n	5c48 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5be8:	68bb      	ldr	r3, [r7, #8]
    5bea:	3304      	adds	r3, #4
    5bec:	0018      	movs	r0, r3
    5bee:	4b30      	ldr	r3, [pc, #192]	; (5cb0 <xTaskIncrementTick+0x168>)
    5bf0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5bf2:	68bb      	ldr	r3, [r7, #8]
    5bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d004      	beq.n	5c04 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5bfa:	68bb      	ldr	r3, [r7, #8]
    5bfc:	3318      	adds	r3, #24
    5bfe:	0018      	movs	r0, r3
    5c00:	4b2b      	ldr	r3, [pc, #172]	; (5cb0 <xTaskIncrementTick+0x168>)
    5c02:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c08:	4b2a      	ldr	r3, [pc, #168]	; (5cb4 <xTaskIncrementTick+0x16c>)
    5c0a:	681b      	ldr	r3, [r3, #0]
    5c0c:	429a      	cmp	r2, r3
    5c0e:	d903      	bls.n	5c18 <xTaskIncrementTick+0xd0>
    5c10:	68bb      	ldr	r3, [r7, #8]
    5c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c14:	4b27      	ldr	r3, [pc, #156]	; (5cb4 <xTaskIncrementTick+0x16c>)
    5c16:	601a      	str	r2, [r3, #0]
    5c18:	68bb      	ldr	r3, [r7, #8]
    5c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c1c:	0013      	movs	r3, r2
    5c1e:	009b      	lsls	r3, r3, #2
    5c20:	189b      	adds	r3, r3, r2
    5c22:	009b      	lsls	r3, r3, #2
    5c24:	4a24      	ldr	r2, [pc, #144]	; (5cb8 <xTaskIncrementTick+0x170>)
    5c26:	189a      	adds	r2, r3, r2
    5c28:	68bb      	ldr	r3, [r7, #8]
    5c2a:	3304      	adds	r3, #4
    5c2c:	0019      	movs	r1, r3
    5c2e:	0010      	movs	r0, r2
    5c30:	4b22      	ldr	r3, [pc, #136]	; (5cbc <xTaskIncrementTick+0x174>)
    5c32:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5c34:	68bb      	ldr	r3, [r7, #8]
    5c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c38:	4b21      	ldr	r3, [pc, #132]	; (5cc0 <xTaskIncrementTick+0x178>)
    5c3a:	681b      	ldr	r3, [r3, #0]
    5c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c3e:	429a      	cmp	r2, r3
    5c40:	d3b3      	bcc.n	5baa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    5c42:	2301      	movs	r3, #1
    5c44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5c46:	e7b0      	b.n	5baa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    5c48:	4b1d      	ldr	r3, [pc, #116]	; (5cc0 <xTaskIncrementTick+0x178>)
    5c4a:	681b      	ldr	r3, [r3, #0]
    5c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c4e:	491a      	ldr	r1, [pc, #104]	; (5cb8 <xTaskIncrementTick+0x170>)
    5c50:	0013      	movs	r3, r2
    5c52:	009b      	lsls	r3, r3, #2
    5c54:	189b      	adds	r3, r3, r2
    5c56:	009b      	lsls	r3, r3, #2
    5c58:	585b      	ldr	r3, [r3, r1]
    5c5a:	2b01      	cmp	r3, #1
    5c5c:	d901      	bls.n	5c62 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
    5c5e:	2301      	movs	r3, #1
    5c60:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    5c62:	4b18      	ldr	r3, [pc, #96]	; (5cc4 <xTaskIncrementTick+0x17c>)
    5c64:	681b      	ldr	r3, [r3, #0]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d109      	bne.n	5c7e <xTaskIncrementTick+0x136>
			{
				vApplicationTickHook();
    5c6a:	4b17      	ldr	r3, [pc, #92]	; (5cc8 <xTaskIncrementTick+0x180>)
    5c6c:	4798      	blx	r3
    5c6e:	e006      	b.n	5c7e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    5c70:	4b14      	ldr	r3, [pc, #80]	; (5cc4 <xTaskIncrementTick+0x17c>)
    5c72:	681b      	ldr	r3, [r3, #0]
    5c74:	1c5a      	adds	r2, r3, #1
    5c76:	4b13      	ldr	r3, [pc, #76]	; (5cc4 <xTaskIncrementTick+0x17c>)
    5c78:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    5c7a:	4b13      	ldr	r3, [pc, #76]	; (5cc8 <xTaskIncrementTick+0x180>)
    5c7c:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    5c7e:	4b13      	ldr	r3, [pc, #76]	; (5ccc <xTaskIncrementTick+0x184>)
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d001      	beq.n	5c8a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
    5c86:	2301      	movs	r3, #1
    5c88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5c8a:	697b      	ldr	r3, [r7, #20]
}
    5c8c:	0018      	movs	r0, r3
    5c8e:	46bd      	mov	sp, r7
    5c90:	b006      	add	sp, #24
    5c92:	bd80      	pop	{r7, pc}
    5c94:	2000525c 	.word	0x2000525c
    5c98:	20005238 	.word	0x20005238
    5c9c:	200051ec 	.word	0x200051ec
    5ca0:	200051f0 	.word	0x200051f0
    5ca4:	2000524c 	.word	0x2000524c
    5ca8:	00006159 	.word	0x00006159
    5cac:	20005254 	.word	0x20005254
    5cb0:	00004923 	.word	0x00004923
    5cb4:	2000523c 	.word	0x2000523c
    5cb8:	20005160 	.word	0x20005160
    5cbc:	00004873 	.word	0x00004873
    5cc0:	2000515c 	.word	0x2000515c
    5cc4:	20005244 	.word	0x20005244
    5cc8:	0000867d 	.word	0x0000867d
    5ccc:	20005248 	.word	0x20005248

00005cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5cd0:	b580      	push	{r7, lr}
    5cd2:	b084      	sub	sp, #16
    5cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5cd6:	4b35      	ldr	r3, [pc, #212]	; (5dac <vTaskSwitchContext+0xdc>)
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d003      	beq.n	5ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5cde:	4b34      	ldr	r3, [pc, #208]	; (5db0 <vTaskSwitchContext+0xe0>)
    5ce0:	2201      	movs	r2, #1
    5ce2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5ce4:	e05d      	b.n	5da2 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
    5ce6:	4b32      	ldr	r3, [pc, #200]	; (5db0 <vTaskSwitchContext+0xe0>)
    5ce8:	2200      	movs	r2, #0
    5cea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    5cec:	4b31      	ldr	r3, [pc, #196]	; (5db4 <vTaskSwitchContext+0xe4>)
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5cf2:	60bb      	str	r3, [r7, #8]
    5cf4:	4b30      	ldr	r3, [pc, #192]	; (5db8 <vTaskSwitchContext+0xe8>)
    5cf6:	607b      	str	r3, [r7, #4]
    5cf8:	68bb      	ldr	r3, [r7, #8]
    5cfa:	681a      	ldr	r2, [r3, #0]
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	429a      	cmp	r2, r3
    5d00:	d111      	bne.n	5d26 <vTaskSwitchContext+0x56>
    5d02:	68bb      	ldr	r3, [r7, #8]
    5d04:	3304      	adds	r3, #4
    5d06:	681a      	ldr	r2, [r3, #0]
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	429a      	cmp	r2, r3
    5d0c:	d10b      	bne.n	5d26 <vTaskSwitchContext+0x56>
    5d0e:	68bb      	ldr	r3, [r7, #8]
    5d10:	3308      	adds	r3, #8
    5d12:	681a      	ldr	r2, [r3, #0]
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	429a      	cmp	r2, r3
    5d18:	d105      	bne.n	5d26 <vTaskSwitchContext+0x56>
    5d1a:	68bb      	ldr	r3, [r7, #8]
    5d1c:	330c      	adds	r3, #12
    5d1e:	681a      	ldr	r2, [r3, #0]
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	429a      	cmp	r2, r3
    5d24:	d008      	beq.n	5d38 <vTaskSwitchContext+0x68>
    5d26:	4b23      	ldr	r3, [pc, #140]	; (5db4 <vTaskSwitchContext+0xe4>)
    5d28:	681a      	ldr	r2, [r3, #0]
    5d2a:	4b22      	ldr	r3, [pc, #136]	; (5db4 <vTaskSwitchContext+0xe4>)
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	3334      	adds	r3, #52	; 0x34
    5d30:	0019      	movs	r1, r3
    5d32:	0010      	movs	r0, r2
    5d34:	4b21      	ldr	r3, [pc, #132]	; (5dbc <vTaskSwitchContext+0xec>)
    5d36:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5d38:	4b21      	ldr	r3, [pc, #132]	; (5dc0 <vTaskSwitchContext+0xf0>)
    5d3a:	681b      	ldr	r3, [r3, #0]
    5d3c:	60fb      	str	r3, [r7, #12]
    5d3e:	e007      	b.n	5d50 <vTaskSwitchContext+0x80>
    5d40:	68fb      	ldr	r3, [r7, #12]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d101      	bne.n	5d4a <vTaskSwitchContext+0x7a>
    5d46:	b672      	cpsid	i
    5d48:	e7fe      	b.n	5d48 <vTaskSwitchContext+0x78>
    5d4a:	68fb      	ldr	r3, [r7, #12]
    5d4c:	3b01      	subs	r3, #1
    5d4e:	60fb      	str	r3, [r7, #12]
    5d50:	491c      	ldr	r1, [pc, #112]	; (5dc4 <vTaskSwitchContext+0xf4>)
    5d52:	68fa      	ldr	r2, [r7, #12]
    5d54:	0013      	movs	r3, r2
    5d56:	009b      	lsls	r3, r3, #2
    5d58:	189b      	adds	r3, r3, r2
    5d5a:	009b      	lsls	r3, r3, #2
    5d5c:	585b      	ldr	r3, [r3, r1]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d0ee      	beq.n	5d40 <vTaskSwitchContext+0x70>
    5d62:	68fa      	ldr	r2, [r7, #12]
    5d64:	0013      	movs	r3, r2
    5d66:	009b      	lsls	r3, r3, #2
    5d68:	189b      	adds	r3, r3, r2
    5d6a:	009b      	lsls	r3, r3, #2
    5d6c:	4a15      	ldr	r2, [pc, #84]	; (5dc4 <vTaskSwitchContext+0xf4>)
    5d6e:	189b      	adds	r3, r3, r2
    5d70:	603b      	str	r3, [r7, #0]
    5d72:	683b      	ldr	r3, [r7, #0]
    5d74:	685b      	ldr	r3, [r3, #4]
    5d76:	685a      	ldr	r2, [r3, #4]
    5d78:	683b      	ldr	r3, [r7, #0]
    5d7a:	605a      	str	r2, [r3, #4]
    5d7c:	683b      	ldr	r3, [r7, #0]
    5d7e:	685a      	ldr	r2, [r3, #4]
    5d80:	683b      	ldr	r3, [r7, #0]
    5d82:	3308      	adds	r3, #8
    5d84:	429a      	cmp	r2, r3
    5d86:	d104      	bne.n	5d92 <vTaskSwitchContext+0xc2>
    5d88:	683b      	ldr	r3, [r7, #0]
    5d8a:	685b      	ldr	r3, [r3, #4]
    5d8c:	685a      	ldr	r2, [r3, #4]
    5d8e:	683b      	ldr	r3, [r7, #0]
    5d90:	605a      	str	r2, [r3, #4]
    5d92:	683b      	ldr	r3, [r7, #0]
    5d94:	685b      	ldr	r3, [r3, #4]
    5d96:	68da      	ldr	r2, [r3, #12]
    5d98:	4b06      	ldr	r3, [pc, #24]	; (5db4 <vTaskSwitchContext+0xe4>)
    5d9a:	601a      	str	r2, [r3, #0]
    5d9c:	4b08      	ldr	r3, [pc, #32]	; (5dc0 <vTaskSwitchContext+0xf0>)
    5d9e:	68fa      	ldr	r2, [r7, #12]
    5da0:	601a      	str	r2, [r3, #0]
}
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	46bd      	mov	sp, r7
    5da6:	b004      	add	sp, #16
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	2000525c 	.word	0x2000525c
    5db0:	20005248 	.word	0x20005248
    5db4:	2000515c 	.word	0x2000515c
    5db8:	a5a5a5a5 	.word	0xa5a5a5a5
    5dbc:	00008687 	.word	0x00008687
    5dc0:	2000523c 	.word	0x2000523c
    5dc4:	20005160 	.word	0x20005160

00005dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b082      	sub	sp, #8
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d101      	bne.n	5ddc <vTaskPlaceOnEventList+0x14>
    5dd8:	b672      	cpsid	i
    5dda:	e7fe      	b.n	5dda <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5ddc:	4b08      	ldr	r3, [pc, #32]	; (5e00 <vTaskPlaceOnEventList+0x38>)
    5dde:	681b      	ldr	r3, [r3, #0]
    5de0:	3318      	adds	r3, #24
    5de2:	001a      	movs	r2, r3
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	0011      	movs	r1, r2
    5de8:	0018      	movs	r0, r3
    5dea:	4b06      	ldr	r3, [pc, #24]	; (5e04 <vTaskPlaceOnEventList+0x3c>)
    5dec:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5dee:	683b      	ldr	r3, [r7, #0]
    5df0:	2101      	movs	r1, #1
    5df2:	0018      	movs	r0, r3
    5df4:	4b04      	ldr	r3, [pc, #16]	; (5e08 <vTaskPlaceOnEventList+0x40>)
    5df6:	4798      	blx	r3
}
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	46bd      	mov	sp, r7
    5dfc:	b002      	add	sp, #8
    5dfe:	bd80      	pop	{r7, pc}
    5e00:	2000515c 	.word	0x2000515c
    5e04:	000048b7 	.word	0x000048b7
    5e08:	00006299 	.word	0x00006299

00005e0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b084      	sub	sp, #16
    5e10:	af00      	add	r7, sp, #0
    5e12:	60f8      	str	r0, [r7, #12]
    5e14:	60b9      	str	r1, [r7, #8]
    5e16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    5e18:	68fb      	ldr	r3, [r7, #12]
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	d101      	bne.n	5e22 <vTaskPlaceOnEventListRestricted+0x16>
    5e1e:	b672      	cpsid	i
    5e20:	e7fe      	b.n	5e20 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5e22:	4b0c      	ldr	r3, [pc, #48]	; (5e54 <vTaskPlaceOnEventListRestricted+0x48>)
    5e24:	681b      	ldr	r3, [r3, #0]
    5e26:	3318      	adds	r3, #24
    5e28:	001a      	movs	r2, r3
    5e2a:	68fb      	ldr	r3, [r7, #12]
    5e2c:	0011      	movs	r1, r2
    5e2e:	0018      	movs	r0, r3
    5e30:	4b09      	ldr	r3, [pc, #36]	; (5e58 <vTaskPlaceOnEventListRestricted+0x4c>)
    5e32:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	2b00      	cmp	r3, #0
    5e38:	d002      	beq.n	5e40 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    5e3a:	2301      	movs	r3, #1
    5e3c:	425b      	negs	r3, r3
    5e3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    5e40:	687a      	ldr	r2, [r7, #4]
    5e42:	68bb      	ldr	r3, [r7, #8]
    5e44:	0011      	movs	r1, r2
    5e46:	0018      	movs	r0, r3
    5e48:	4b04      	ldr	r3, [pc, #16]	; (5e5c <vTaskPlaceOnEventListRestricted+0x50>)
    5e4a:	4798      	blx	r3
	}
    5e4c:	46c0      	nop			; (mov r8, r8)
    5e4e:	46bd      	mov	sp, r7
    5e50:	b004      	add	sp, #16
    5e52:	bd80      	pop	{r7, pc}
    5e54:	2000515c 	.word	0x2000515c
    5e58:	00004873 	.word	0x00004873
    5e5c:	00006299 	.word	0x00006299

00005e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    5e60:	b580      	push	{r7, lr}
    5e62:	b084      	sub	sp, #16
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	68db      	ldr	r3, [r3, #12]
    5e6c:	68db      	ldr	r3, [r3, #12]
    5e6e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    5e70:	68bb      	ldr	r3, [r7, #8]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d101      	bne.n	5e7a <xTaskRemoveFromEventList+0x1a>
    5e76:	b672      	cpsid	i
    5e78:	e7fe      	b.n	5e78 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5e7a:	68bb      	ldr	r3, [r7, #8]
    5e7c:	3318      	adds	r3, #24
    5e7e:	0018      	movs	r0, r3
    5e80:	4b1f      	ldr	r3, [pc, #124]	; (5f00 <xTaskRemoveFromEventList+0xa0>)
    5e82:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5e84:	4b1f      	ldr	r3, [pc, #124]	; (5f04 <xTaskRemoveFromEventList+0xa4>)
    5e86:	681b      	ldr	r3, [r3, #0]
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d11d      	bne.n	5ec8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5e8c:	68bb      	ldr	r3, [r7, #8]
    5e8e:	3304      	adds	r3, #4
    5e90:	0018      	movs	r0, r3
    5e92:	4b1b      	ldr	r3, [pc, #108]	; (5f00 <xTaskRemoveFromEventList+0xa0>)
    5e94:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    5e96:	68bb      	ldr	r3, [r7, #8]
    5e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e9a:	4b1b      	ldr	r3, [pc, #108]	; (5f08 <xTaskRemoveFromEventList+0xa8>)
    5e9c:	681b      	ldr	r3, [r3, #0]
    5e9e:	429a      	cmp	r2, r3
    5ea0:	d903      	bls.n	5eaa <xTaskRemoveFromEventList+0x4a>
    5ea2:	68bb      	ldr	r3, [r7, #8]
    5ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ea6:	4b18      	ldr	r3, [pc, #96]	; (5f08 <xTaskRemoveFromEventList+0xa8>)
    5ea8:	601a      	str	r2, [r3, #0]
    5eaa:	68bb      	ldr	r3, [r7, #8]
    5eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5eae:	0013      	movs	r3, r2
    5eb0:	009b      	lsls	r3, r3, #2
    5eb2:	189b      	adds	r3, r3, r2
    5eb4:	009b      	lsls	r3, r3, #2
    5eb6:	4a15      	ldr	r2, [pc, #84]	; (5f0c <xTaskRemoveFromEventList+0xac>)
    5eb8:	189a      	adds	r2, r3, r2
    5eba:	68bb      	ldr	r3, [r7, #8]
    5ebc:	3304      	adds	r3, #4
    5ebe:	0019      	movs	r1, r3
    5ec0:	0010      	movs	r0, r2
    5ec2:	4b13      	ldr	r3, [pc, #76]	; (5f10 <xTaskRemoveFromEventList+0xb0>)
    5ec4:	4798      	blx	r3
    5ec6:	e007      	b.n	5ed8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5ec8:	68bb      	ldr	r3, [r7, #8]
    5eca:	3318      	adds	r3, #24
    5ecc:	001a      	movs	r2, r3
    5ece:	4b11      	ldr	r3, [pc, #68]	; (5f14 <xTaskRemoveFromEventList+0xb4>)
    5ed0:	0011      	movs	r1, r2
    5ed2:	0018      	movs	r0, r3
    5ed4:	4b0e      	ldr	r3, [pc, #56]	; (5f10 <xTaskRemoveFromEventList+0xb0>)
    5ed6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5ed8:	68bb      	ldr	r3, [r7, #8]
    5eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5edc:	4b0e      	ldr	r3, [pc, #56]	; (5f18 <xTaskRemoveFromEventList+0xb8>)
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ee2:	429a      	cmp	r2, r3
    5ee4:	d905      	bls.n	5ef2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5ee6:	2301      	movs	r3, #1
    5ee8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5eea:	4b0c      	ldr	r3, [pc, #48]	; (5f1c <xTaskRemoveFromEventList+0xbc>)
    5eec:	2201      	movs	r2, #1
    5eee:	601a      	str	r2, [r3, #0]
    5ef0:	e001      	b.n	5ef6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    5ef2:	2300      	movs	r3, #0
    5ef4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    5ef6:	68fb      	ldr	r3, [r7, #12]
}
    5ef8:	0018      	movs	r0, r3
    5efa:	46bd      	mov	sp, r7
    5efc:	b004      	add	sp, #16
    5efe:	bd80      	pop	{r7, pc}
    5f00:	00004923 	.word	0x00004923
    5f04:	2000525c 	.word	0x2000525c
    5f08:	2000523c 	.word	0x2000523c
    5f0c:	20005160 	.word	0x20005160
    5f10:	00004873 	.word	0x00004873
    5f14:	200051f4 	.word	0x200051f4
    5f18:	2000515c 	.word	0x2000515c
    5f1c:	20005248 	.word	0x20005248

00005f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5f28:	4b05      	ldr	r3, [pc, #20]	; (5f40 <vTaskInternalSetTimeOutState+0x20>)
    5f2a:	681a      	ldr	r2, [r3, #0]
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5f30:	4b04      	ldr	r3, [pc, #16]	; (5f44 <vTaskInternalSetTimeOutState+0x24>)
    5f32:	681a      	ldr	r2, [r3, #0]
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	605a      	str	r2, [r3, #4]
}
    5f38:	46c0      	nop			; (mov r8, r8)
    5f3a:	46bd      	mov	sp, r7
    5f3c:	b002      	add	sp, #8
    5f3e:	bd80      	pop	{r7, pc}
    5f40:	2000524c 	.word	0x2000524c
    5f44:	20005238 	.word	0x20005238

00005f48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b086      	sub	sp, #24
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
    5f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	2b00      	cmp	r3, #0
    5f56:	d101      	bne.n	5f5c <xTaskCheckForTimeOut+0x14>
    5f58:	b672      	cpsid	i
    5f5a:	e7fe      	b.n	5f5a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    5f5c:	683b      	ldr	r3, [r7, #0]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d101      	bne.n	5f66 <xTaskCheckForTimeOut+0x1e>
    5f62:	b672      	cpsid	i
    5f64:	e7fe      	b.n	5f64 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    5f66:	4b1e      	ldr	r3, [pc, #120]	; (5fe0 <xTaskCheckForTimeOut+0x98>)
    5f68:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5f6a:	4b1e      	ldr	r3, [pc, #120]	; (5fe4 <xTaskCheckForTimeOut+0x9c>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	685b      	ldr	r3, [r3, #4]
    5f74:	693a      	ldr	r2, [r7, #16]
    5f76:	1ad3      	subs	r3, r2, r3
    5f78:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    5f7a:	683b      	ldr	r3, [r7, #0]
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	3301      	adds	r3, #1
    5f80:	d102      	bne.n	5f88 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    5f82:	2300      	movs	r3, #0
    5f84:	617b      	str	r3, [r7, #20]
    5f86:	e024      	b.n	5fd2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	681a      	ldr	r2, [r3, #0]
    5f8c:	4b16      	ldr	r3, [pc, #88]	; (5fe8 <xTaskCheckForTimeOut+0xa0>)
    5f8e:	681b      	ldr	r3, [r3, #0]
    5f90:	429a      	cmp	r2, r3
    5f92:	d007      	beq.n	5fa4 <xTaskCheckForTimeOut+0x5c>
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	685a      	ldr	r2, [r3, #4]
    5f98:	693b      	ldr	r3, [r7, #16]
    5f9a:	429a      	cmp	r2, r3
    5f9c:	d802      	bhi.n	5fa4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5f9e:	2301      	movs	r3, #1
    5fa0:	617b      	str	r3, [r7, #20]
    5fa2:	e016      	b.n	5fd2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5fa4:	683b      	ldr	r3, [r7, #0]
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	68fb      	ldr	r3, [r7, #12]
    5faa:	429a      	cmp	r2, r3
    5fac:	d90c      	bls.n	5fc8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5fae:	683b      	ldr	r3, [r7, #0]
    5fb0:	681a      	ldr	r2, [r3, #0]
    5fb2:	68fb      	ldr	r3, [r7, #12]
    5fb4:	1ad2      	subs	r2, r2, r3
    5fb6:	683b      	ldr	r3, [r7, #0]
    5fb8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	0018      	movs	r0, r3
    5fbe:	4b0b      	ldr	r3, [pc, #44]	; (5fec <xTaskCheckForTimeOut+0xa4>)
    5fc0:	4798      	blx	r3
			xReturn = pdFALSE;
    5fc2:	2300      	movs	r3, #0
    5fc4:	617b      	str	r3, [r7, #20]
    5fc6:	e004      	b.n	5fd2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    5fc8:	683b      	ldr	r3, [r7, #0]
    5fca:	2200      	movs	r2, #0
    5fcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    5fce:	2301      	movs	r3, #1
    5fd0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    5fd2:	4b07      	ldr	r3, [pc, #28]	; (5ff0 <xTaskCheckForTimeOut+0xa8>)
    5fd4:	4798      	blx	r3

	return xReturn;
    5fd6:	697b      	ldr	r3, [r7, #20]
}
    5fd8:	0018      	movs	r0, r3
    5fda:	46bd      	mov	sp, r7
    5fdc:	b006      	add	sp, #24
    5fde:	bd80      	pop	{r7, pc}
    5fe0:	00001f51 	.word	0x00001f51
    5fe4:	20005238 	.word	0x20005238
    5fe8:	2000524c 	.word	0x2000524c
    5fec:	00005f21 	.word	0x00005f21
    5ff0:	00001f75 	.word	0x00001f75

00005ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    5ff8:	4b02      	ldr	r3, [pc, #8]	; (6004 <vTaskMissedYield+0x10>)
    5ffa:	2201      	movs	r2, #1
    5ffc:	601a      	str	r2, [r3, #0]
}
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	46bd      	mov	sp, r7
    6002:	bd80      	pop	{r7, pc}
    6004:	20005248 	.word	0x20005248

00006008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    6010:	4b05      	ldr	r3, [pc, #20]	; (6028 <prvIdleTask+0x20>)
    6012:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    6014:	4b05      	ldr	r3, [pc, #20]	; (602c <prvIdleTask+0x24>)
    6016:	681b      	ldr	r3, [r3, #0]
    6018:	2b01      	cmp	r3, #1
    601a:	d901      	bls.n	6020 <prvIdleTask+0x18>
			{
				taskYIELD();
    601c:	4b04      	ldr	r3, [pc, #16]	; (6030 <prvIdleTask+0x28>)
    601e:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    6020:	4b04      	ldr	r3, [pc, #16]	; (6034 <prvIdleTask+0x2c>)
    6022:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    6024:	e7f4      	b.n	6010 <prvIdleTask+0x8>
    6026:	46c0      	nop			; (mov r8, r8)
    6028:	000060c5 	.word	0x000060c5
    602c:	20005160 	.word	0x20005160
    6030:	00001f31 	.word	0x00001f31
    6034:	00008669 	.word	0x00008669

00006038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    6038:	b580      	push	{r7, lr}
    603a:	b082      	sub	sp, #8
    603c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    603e:	2300      	movs	r3, #0
    6040:	607b      	str	r3, [r7, #4]
    6042:	e00c      	b.n	605e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    6044:	687a      	ldr	r2, [r7, #4]
    6046:	0013      	movs	r3, r2
    6048:	009b      	lsls	r3, r3, #2
    604a:	189b      	adds	r3, r3, r2
    604c:	009b      	lsls	r3, r3, #2
    604e:	4a14      	ldr	r2, [pc, #80]	; (60a0 <prvInitialiseTaskLists+0x68>)
    6050:	189b      	adds	r3, r3, r2
    6052:	0018      	movs	r0, r3
    6054:	4b13      	ldr	r3, [pc, #76]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    6056:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	3301      	adds	r3, #1
    605c:	607b      	str	r3, [r7, #4]
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	2b04      	cmp	r3, #4
    6062:	d9ef      	bls.n	6044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    6064:	4b10      	ldr	r3, [pc, #64]	; (60a8 <prvInitialiseTaskLists+0x70>)
    6066:	0018      	movs	r0, r3
    6068:	4b0e      	ldr	r3, [pc, #56]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    606a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    606c:	4b0f      	ldr	r3, [pc, #60]	; (60ac <prvInitialiseTaskLists+0x74>)
    606e:	0018      	movs	r0, r3
    6070:	4b0c      	ldr	r3, [pc, #48]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    6072:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    6074:	4b0e      	ldr	r3, [pc, #56]	; (60b0 <prvInitialiseTaskLists+0x78>)
    6076:	0018      	movs	r0, r3
    6078:	4b0a      	ldr	r3, [pc, #40]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    607a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    607c:	4b0d      	ldr	r3, [pc, #52]	; (60b4 <prvInitialiseTaskLists+0x7c>)
    607e:	0018      	movs	r0, r3
    6080:	4b08      	ldr	r3, [pc, #32]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    6082:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    6084:	4b0c      	ldr	r3, [pc, #48]	; (60b8 <prvInitialiseTaskLists+0x80>)
    6086:	0018      	movs	r0, r3
    6088:	4b06      	ldr	r3, [pc, #24]	; (60a4 <prvInitialiseTaskLists+0x6c>)
    608a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    608c:	4b0b      	ldr	r3, [pc, #44]	; (60bc <prvInitialiseTaskLists+0x84>)
    608e:	4a06      	ldr	r2, [pc, #24]	; (60a8 <prvInitialiseTaskLists+0x70>)
    6090:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    6092:	4b0b      	ldr	r3, [pc, #44]	; (60c0 <prvInitialiseTaskLists+0x88>)
    6094:	4a05      	ldr	r2, [pc, #20]	; (60ac <prvInitialiseTaskLists+0x74>)
    6096:	601a      	str	r2, [r3, #0]
}
    6098:	46c0      	nop			; (mov r8, r8)
    609a:	46bd      	mov	sp, r7
    609c:	b002      	add	sp, #8
    609e:	bd80      	pop	{r7, pc}
    60a0:	20005160 	.word	0x20005160
    60a4:	00004821 	.word	0x00004821
    60a8:	200051c4 	.word	0x200051c4
    60ac:	200051d8 	.word	0x200051d8
    60b0:	200051f4 	.word	0x200051f4
    60b4:	20005208 	.word	0x20005208
    60b8:	20005220 	.word	0x20005220
    60bc:	200051ec 	.word	0x200051ec
    60c0:	200051f0 	.word	0x200051f0

000060c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    60c4:	b580      	push	{r7, lr}
    60c6:	b082      	sub	sp, #8
    60c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    60ca:	e01a      	b.n	6102 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    60cc:	4b11      	ldr	r3, [pc, #68]	; (6114 <prvCheckTasksWaitingTermination+0x50>)
    60ce:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    60d0:	4b11      	ldr	r3, [pc, #68]	; (6118 <prvCheckTasksWaitingTermination+0x54>)
    60d2:	68db      	ldr	r3, [r3, #12]
    60d4:	68db      	ldr	r3, [r3, #12]
    60d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	3304      	adds	r3, #4
    60dc:	0018      	movs	r0, r3
    60de:	4b0f      	ldr	r3, [pc, #60]	; (611c <prvCheckTasksWaitingTermination+0x58>)
    60e0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    60e2:	4b0f      	ldr	r3, [pc, #60]	; (6120 <prvCheckTasksWaitingTermination+0x5c>)
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	1e5a      	subs	r2, r3, #1
    60e8:	4b0d      	ldr	r3, [pc, #52]	; (6120 <prvCheckTasksWaitingTermination+0x5c>)
    60ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    60ec:	4b0d      	ldr	r3, [pc, #52]	; (6124 <prvCheckTasksWaitingTermination+0x60>)
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	1e5a      	subs	r2, r3, #1
    60f2:	4b0c      	ldr	r3, [pc, #48]	; (6124 <prvCheckTasksWaitingTermination+0x60>)
    60f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    60f6:	4b0c      	ldr	r3, [pc, #48]	; (6128 <prvCheckTasksWaitingTermination+0x64>)
    60f8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    60fa:	687b      	ldr	r3, [r7, #4]
    60fc:	0018      	movs	r0, r3
    60fe:	4b0b      	ldr	r3, [pc, #44]	; (612c <prvCheckTasksWaitingTermination+0x68>)
    6100:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    6102:	4b08      	ldr	r3, [pc, #32]	; (6124 <prvCheckTasksWaitingTermination+0x60>)
    6104:	681b      	ldr	r3, [r3, #0]
    6106:	2b00      	cmp	r3, #0
    6108:	d1e0      	bne.n	60cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    610a:	46c0      	nop			; (mov r8, r8)
    610c:	46bd      	mov	sp, r7
    610e:	b002      	add	sp, #8
    6110:	bd80      	pop	{r7, pc}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	00001f51 	.word	0x00001f51
    6118:	20005208 	.word	0x20005208
    611c:	00004923 	.word	0x00004923
    6120:	20005234 	.word	0x20005234
    6124:	2000521c 	.word	0x2000521c
    6128:	00001f75 	.word	0x00001f75
    612c:	00006131 	.word	0x00006131

00006130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    6130:	b580      	push	{r7, lr}
    6132:	b082      	sub	sp, #8
    6134:	af00      	add	r7, sp, #0
    6136:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    613c:	0018      	movs	r0, r3
    613e:	4b05      	ldr	r3, [pc, #20]	; (6154 <prvDeleteTCB+0x24>)
    6140:	4798      	blx	r3
			vPortFree( pxTCB );
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	0018      	movs	r0, r3
    6146:	4b03      	ldr	r3, [pc, #12]	; (6154 <prvDeleteTCB+0x24>)
    6148:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    614a:	46c0      	nop			; (mov r8, r8)
    614c:	46bd      	mov	sp, r7
    614e:	b002      	add	sp, #8
    6150:	bd80      	pop	{r7, pc}
    6152:	46c0      	nop			; (mov r8, r8)
    6154:	000021e5 	.word	0x000021e5

00006158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    6158:	b580      	push	{r7, lr}
    615a:	b082      	sub	sp, #8
    615c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    615e:	4b0e      	ldr	r3, [pc, #56]	; (6198 <prvResetNextTaskUnblockTime+0x40>)
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	2b00      	cmp	r3, #0
    6166:	d101      	bne.n	616c <prvResetNextTaskUnblockTime+0x14>
    6168:	2301      	movs	r3, #1
    616a:	e000      	b.n	616e <prvResetNextTaskUnblockTime+0x16>
    616c:	2300      	movs	r3, #0
    616e:	2b00      	cmp	r3, #0
    6170:	d004      	beq.n	617c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    6172:	4b0a      	ldr	r3, [pc, #40]	; (619c <prvResetNextTaskUnblockTime+0x44>)
    6174:	2201      	movs	r2, #1
    6176:	4252      	negs	r2, r2
    6178:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    617a:	e008      	b.n	618e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    617c:	4b06      	ldr	r3, [pc, #24]	; (6198 <prvResetNextTaskUnblockTime+0x40>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	68db      	ldr	r3, [r3, #12]
    6182:	68db      	ldr	r3, [r3, #12]
    6184:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    6186:	687b      	ldr	r3, [r7, #4]
    6188:	685a      	ldr	r2, [r3, #4]
    618a:	4b04      	ldr	r3, [pc, #16]	; (619c <prvResetNextTaskUnblockTime+0x44>)
    618c:	601a      	str	r2, [r3, #0]
}
    618e:	46c0      	nop			; (mov r8, r8)
    6190:	46bd      	mov	sp, r7
    6192:	b002      	add	sp, #8
    6194:	bd80      	pop	{r7, pc}
    6196:	46c0      	nop			; (mov r8, r8)
    6198:	200051ec 	.word	0x200051ec
    619c:	20005254 	.word	0x20005254

000061a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    61a6:	4b0a      	ldr	r3, [pc, #40]	; (61d0 <xTaskGetSchedulerState+0x30>)
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	2b00      	cmp	r3, #0
    61ac:	d102      	bne.n	61b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    61ae:	2301      	movs	r3, #1
    61b0:	607b      	str	r3, [r7, #4]
    61b2:	e008      	b.n	61c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    61b4:	4b07      	ldr	r3, [pc, #28]	; (61d4 <xTaskGetSchedulerState+0x34>)
    61b6:	681b      	ldr	r3, [r3, #0]
    61b8:	2b00      	cmp	r3, #0
    61ba:	d102      	bne.n	61c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    61bc:	2302      	movs	r3, #2
    61be:	607b      	str	r3, [r7, #4]
    61c0:	e001      	b.n	61c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    61c2:	2300      	movs	r3, #0
    61c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    61c6:	687b      	ldr	r3, [r7, #4]
	}
    61c8:	0018      	movs	r0, r3
    61ca:	46bd      	mov	sp, r7
    61cc:	b002      	add	sp, #8
    61ce:	bd80      	pop	{r7, pc}
    61d0:	20005240 	.word	0x20005240
    61d4:	2000525c 	.word	0x2000525c

000061d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    61d8:	b580      	push	{r7, lr}
    61da:	b084      	sub	sp, #16
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    61e4:	2300      	movs	r3, #0
    61e6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d044      	beq.n	6278 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    61ee:	4b25      	ldr	r3, [pc, #148]	; (6284 <xTaskPriorityDisinherit+0xac>)
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	68ba      	ldr	r2, [r7, #8]
    61f4:	429a      	cmp	r2, r3
    61f6:	d001      	beq.n	61fc <xTaskPriorityDisinherit+0x24>
    61f8:	b672      	cpsid	i
    61fa:	e7fe      	b.n	61fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    61fc:	68bb      	ldr	r3, [r7, #8]
    61fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6200:	2b00      	cmp	r3, #0
    6202:	d101      	bne.n	6208 <xTaskPriorityDisinherit+0x30>
    6204:	b672      	cpsid	i
    6206:	e7fe      	b.n	6206 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    6208:	68bb      	ldr	r3, [r7, #8]
    620a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    620c:	1e5a      	subs	r2, r3, #1
    620e:	68bb      	ldr	r3, [r7, #8]
    6210:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    6212:	68bb      	ldr	r3, [r7, #8]
    6214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6216:	68bb      	ldr	r3, [r7, #8]
    6218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    621a:	429a      	cmp	r2, r3
    621c:	d02c      	beq.n	6278 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    621e:	68bb      	ldr	r3, [r7, #8]
    6220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6222:	2b00      	cmp	r3, #0
    6224:	d128      	bne.n	6278 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6226:	68bb      	ldr	r3, [r7, #8]
    6228:	3304      	adds	r3, #4
    622a:	0018      	movs	r0, r3
    622c:	4b16      	ldr	r3, [pc, #88]	; (6288 <xTaskPriorityDisinherit+0xb0>)
    622e:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    6230:	68bb      	ldr	r3, [r7, #8]
    6232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    6234:	68bb      	ldr	r3, [r7, #8]
    6236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6238:	68bb      	ldr	r3, [r7, #8]
    623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    623c:	2205      	movs	r2, #5
    623e:	1ad2      	subs	r2, r2, r3
    6240:	68bb      	ldr	r3, [r7, #8]
    6242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    6244:	68bb      	ldr	r3, [r7, #8]
    6246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6248:	4b10      	ldr	r3, [pc, #64]	; (628c <xTaskPriorityDisinherit+0xb4>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	429a      	cmp	r2, r3
    624e:	d903      	bls.n	6258 <xTaskPriorityDisinherit+0x80>
    6250:	68bb      	ldr	r3, [r7, #8]
    6252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6254:	4b0d      	ldr	r3, [pc, #52]	; (628c <xTaskPriorityDisinherit+0xb4>)
    6256:	601a      	str	r2, [r3, #0]
    6258:	68bb      	ldr	r3, [r7, #8]
    625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    625c:	0013      	movs	r3, r2
    625e:	009b      	lsls	r3, r3, #2
    6260:	189b      	adds	r3, r3, r2
    6262:	009b      	lsls	r3, r3, #2
    6264:	4a0a      	ldr	r2, [pc, #40]	; (6290 <xTaskPriorityDisinherit+0xb8>)
    6266:	189a      	adds	r2, r3, r2
    6268:	68bb      	ldr	r3, [r7, #8]
    626a:	3304      	adds	r3, #4
    626c:	0019      	movs	r1, r3
    626e:	0010      	movs	r0, r2
    6270:	4b08      	ldr	r3, [pc, #32]	; (6294 <xTaskPriorityDisinherit+0xbc>)
    6272:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    6274:	2301      	movs	r3, #1
    6276:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    6278:	68fb      	ldr	r3, [r7, #12]
	}
    627a:	0018      	movs	r0, r3
    627c:	46bd      	mov	sp, r7
    627e:	b004      	add	sp, #16
    6280:	bd80      	pop	{r7, pc}
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	2000515c 	.word	0x2000515c
    6288:	00004923 	.word	0x00004923
    628c:	2000523c 	.word	0x2000523c
    6290:	20005160 	.word	0x20005160
    6294:	00004873 	.word	0x00004873

00006298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6298:	b580      	push	{r7, lr}
    629a:	b084      	sub	sp, #16
    629c:	af00      	add	r7, sp, #0
    629e:	6078      	str	r0, [r7, #4]
    62a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    62a2:	4b21      	ldr	r3, [pc, #132]	; (6328 <prvAddCurrentTaskToDelayedList+0x90>)
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    62a8:	4b20      	ldr	r3, [pc, #128]	; (632c <prvAddCurrentTaskToDelayedList+0x94>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	3304      	adds	r3, #4
    62ae:	0018      	movs	r0, r3
    62b0:	4b1f      	ldr	r3, [pc, #124]	; (6330 <prvAddCurrentTaskToDelayedList+0x98>)
    62b2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	3301      	adds	r3, #1
    62b8:	d10b      	bne.n	62d2 <prvAddCurrentTaskToDelayedList+0x3a>
    62ba:	683b      	ldr	r3, [r7, #0]
    62bc:	2b00      	cmp	r3, #0
    62be:	d008      	beq.n	62d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    62c0:	4b1a      	ldr	r3, [pc, #104]	; (632c <prvAddCurrentTaskToDelayedList+0x94>)
    62c2:	681b      	ldr	r3, [r3, #0]
    62c4:	1d1a      	adds	r2, r3, #4
    62c6:	4b1b      	ldr	r3, [pc, #108]	; (6334 <prvAddCurrentTaskToDelayedList+0x9c>)
    62c8:	0011      	movs	r1, r2
    62ca:	0018      	movs	r0, r3
    62cc:	4b1a      	ldr	r3, [pc, #104]	; (6338 <prvAddCurrentTaskToDelayedList+0xa0>)
    62ce:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    62d0:	e026      	b.n	6320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    62d2:	68fa      	ldr	r2, [r7, #12]
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	18d3      	adds	r3, r2, r3
    62d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    62da:	4b14      	ldr	r3, [pc, #80]	; (632c <prvAddCurrentTaskToDelayedList+0x94>)
    62dc:	681b      	ldr	r3, [r3, #0]
    62de:	68ba      	ldr	r2, [r7, #8]
    62e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    62e2:	68ba      	ldr	r2, [r7, #8]
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	429a      	cmp	r2, r3
    62e8:	d209      	bcs.n	62fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    62ea:	4b14      	ldr	r3, [pc, #80]	; (633c <prvAddCurrentTaskToDelayedList+0xa4>)
    62ec:	681a      	ldr	r2, [r3, #0]
    62ee:	4b0f      	ldr	r3, [pc, #60]	; (632c <prvAddCurrentTaskToDelayedList+0x94>)
    62f0:	681b      	ldr	r3, [r3, #0]
    62f2:	3304      	adds	r3, #4
    62f4:	0019      	movs	r1, r3
    62f6:	0010      	movs	r0, r2
    62f8:	4b11      	ldr	r3, [pc, #68]	; (6340 <prvAddCurrentTaskToDelayedList+0xa8>)
    62fa:	4798      	blx	r3
}
    62fc:	e010      	b.n	6320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    62fe:	4b11      	ldr	r3, [pc, #68]	; (6344 <prvAddCurrentTaskToDelayedList+0xac>)
    6300:	681a      	ldr	r2, [r3, #0]
    6302:	4b0a      	ldr	r3, [pc, #40]	; (632c <prvAddCurrentTaskToDelayedList+0x94>)
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	3304      	adds	r3, #4
    6308:	0019      	movs	r1, r3
    630a:	0010      	movs	r0, r2
    630c:	4b0c      	ldr	r3, [pc, #48]	; (6340 <prvAddCurrentTaskToDelayedList+0xa8>)
    630e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    6310:	4b0d      	ldr	r3, [pc, #52]	; (6348 <prvAddCurrentTaskToDelayedList+0xb0>)
    6312:	681b      	ldr	r3, [r3, #0]
    6314:	68ba      	ldr	r2, [r7, #8]
    6316:	429a      	cmp	r2, r3
    6318:	d202      	bcs.n	6320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    631a:	4b0b      	ldr	r3, [pc, #44]	; (6348 <prvAddCurrentTaskToDelayedList+0xb0>)
    631c:	68ba      	ldr	r2, [r7, #8]
    631e:	601a      	str	r2, [r3, #0]
}
    6320:	46c0      	nop			; (mov r8, r8)
    6322:	46bd      	mov	sp, r7
    6324:	b004      	add	sp, #16
    6326:	bd80      	pop	{r7, pc}
    6328:	20005238 	.word	0x20005238
    632c:	2000515c 	.word	0x2000515c
    6330:	00004923 	.word	0x00004923
    6334:	20005220 	.word	0x20005220
    6338:	00004873 	.word	0x00004873
    633c:	200051f0 	.word	0x200051f0
    6340:	000048b7 	.word	0x000048b7
    6344:	200051ec 	.word	0x200051ec
    6348:	20005254 	.word	0x20005254

0000634c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    634c:	b590      	push	{r4, r7, lr}
    634e:	b085      	sub	sp, #20
    6350:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    6352:	2300      	movs	r3, #0
    6354:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    6356:	4b0e      	ldr	r3, [pc, #56]	; (6390 <xTimerCreateTimerTask+0x44>)
    6358:	4798      	blx	r3

	if( xTimerQueue != NULL )
    635a:	4b0e      	ldr	r3, [pc, #56]	; (6394 <xTimerCreateTimerTask+0x48>)
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	2b00      	cmp	r3, #0
    6360:	d00c      	beq.n	637c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    6362:	2382      	movs	r3, #130	; 0x82
    6364:	005a      	lsls	r2, r3, #1
    6366:	490c      	ldr	r1, [pc, #48]	; (6398 <xTimerCreateTimerTask+0x4c>)
    6368:	480c      	ldr	r0, [pc, #48]	; (639c <xTimerCreateTimerTask+0x50>)
    636a:	4b0d      	ldr	r3, [pc, #52]	; (63a0 <xTimerCreateTimerTask+0x54>)
    636c:	9301      	str	r3, [sp, #4]
    636e:	2304      	movs	r3, #4
    6370:	9300      	str	r3, [sp, #0]
    6372:	2300      	movs	r3, #0
    6374:	4c0b      	ldr	r4, [pc, #44]	; (63a4 <xTimerCreateTimerTask+0x58>)
    6376:	47a0      	blx	r4
    6378:	0003      	movs	r3, r0
    637a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	2b00      	cmp	r3, #0
    6380:	d101      	bne.n	6386 <xTimerCreateTimerTask+0x3a>
    6382:	b672      	cpsid	i
    6384:	e7fe      	b.n	6384 <xTimerCreateTimerTask+0x38>
	return xReturn;
    6386:	687b      	ldr	r3, [r7, #4]
}
    6388:	0018      	movs	r0, r3
    638a:	46bd      	mov	sp, r7
    638c:	b003      	add	sp, #12
    638e:	bd90      	pop	{r4, r7, pc}
    6390:	0000695d 	.word	0x0000695d
    6394:	20005290 	.word	0x20005290
    6398:	0000beec 	.word	0x0000beec
    639c:	00006571 	.word	0x00006571
    63a0:	20005294 	.word	0x20005294
    63a4:	0000538d 	.word	0x0000538d

000063a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    63a8:	b590      	push	{r4, r7, lr}
    63aa:	b089      	sub	sp, #36	; 0x24
    63ac:	af02      	add	r7, sp, #8
    63ae:	60f8      	str	r0, [r7, #12]
    63b0:	60b9      	str	r1, [r7, #8]
    63b2:	607a      	str	r2, [r7, #4]
    63b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    63b6:	202c      	movs	r0, #44	; 0x2c
    63b8:	4b0b      	ldr	r3, [pc, #44]	; (63e8 <xTimerCreate+0x40>)
    63ba:	4798      	blx	r3
    63bc:	0003      	movs	r3, r0
    63be:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    63c0:	697b      	ldr	r3, [r7, #20]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d00a      	beq.n	63dc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    63c6:	683c      	ldr	r4, [r7, #0]
    63c8:	687a      	ldr	r2, [r7, #4]
    63ca:	68b9      	ldr	r1, [r7, #8]
    63cc:	68f8      	ldr	r0, [r7, #12]
    63ce:	697b      	ldr	r3, [r7, #20]
    63d0:	9301      	str	r3, [sp, #4]
    63d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    63d4:	9300      	str	r3, [sp, #0]
    63d6:	0023      	movs	r3, r4
    63d8:	4c04      	ldr	r4, [pc, #16]	; (63ec <xTimerCreate+0x44>)
    63da:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    63dc:	697b      	ldr	r3, [r7, #20]
	}
    63de:	0018      	movs	r0, r3
    63e0:	46bd      	mov	sp, r7
    63e2:	b007      	add	sp, #28
    63e4:	bd90      	pop	{r4, r7, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	0000207d 	.word	0x0000207d
    63ec:	000063f1 	.word	0x000063f1

000063f0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b084      	sub	sp, #16
    63f4:	af00      	add	r7, sp, #0
    63f6:	60f8      	str	r0, [r7, #12]
    63f8:	60b9      	str	r1, [r7, #8]
    63fa:	607a      	str	r2, [r7, #4]
    63fc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    63fe:	68bb      	ldr	r3, [r7, #8]
    6400:	2b00      	cmp	r3, #0
    6402:	d101      	bne.n	6408 <prvInitialiseNewTimer+0x18>
    6404:	b672      	cpsid	i
    6406:	e7fe      	b.n	6406 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    6408:	69fb      	ldr	r3, [r7, #28]
    640a:	2b00      	cmp	r3, #0
    640c:	d015      	beq.n	643a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    640e:	4b0d      	ldr	r3, [pc, #52]	; (6444 <prvInitialiseNewTimer+0x54>)
    6410:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    6412:	69fb      	ldr	r3, [r7, #28]
    6414:	68fa      	ldr	r2, [r7, #12]
    6416:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    6418:	69fb      	ldr	r3, [r7, #28]
    641a:	68ba      	ldr	r2, [r7, #8]
    641c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    641e:	69fb      	ldr	r3, [r7, #28]
    6420:	687a      	ldr	r2, [r7, #4]
    6422:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    6424:	69fb      	ldr	r3, [r7, #28]
    6426:	683a      	ldr	r2, [r7, #0]
    6428:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    642a:	69fb      	ldr	r3, [r7, #28]
    642c:	69ba      	ldr	r2, [r7, #24]
    642e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    6430:	69fb      	ldr	r3, [r7, #28]
    6432:	3304      	adds	r3, #4
    6434:	0018      	movs	r0, r3
    6436:	4b04      	ldr	r3, [pc, #16]	; (6448 <prvInitialiseNewTimer+0x58>)
    6438:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	46bd      	mov	sp, r7
    643e:	b004      	add	sp, #16
    6440:	bd80      	pop	{r7, pc}
    6442:	46c0      	nop			; (mov r8, r8)
    6444:	0000695d 	.word	0x0000695d
    6448:	0000485d 	.word	0x0000485d

0000644c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    644c:	b590      	push	{r4, r7, lr}
    644e:	b08b      	sub	sp, #44	; 0x2c
    6450:	af00      	add	r7, sp, #0
    6452:	60f8      	str	r0, [r7, #12]
    6454:	60b9      	str	r1, [r7, #8]
    6456:	607a      	str	r2, [r7, #4]
    6458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    645a:	2300      	movs	r3, #0
    645c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    645e:	68fb      	ldr	r3, [r7, #12]
    6460:	2b00      	cmp	r3, #0
    6462:	d101      	bne.n	6468 <xTimerGenericCommand+0x1c>
    6464:	b672      	cpsid	i
    6466:	e7fe      	b.n	6466 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    6468:	4b1e      	ldr	r3, [pc, #120]	; (64e4 <xTimerGenericCommand+0x98>)
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	2b00      	cmp	r3, #0
    646e:	d033      	beq.n	64d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    6470:	2314      	movs	r3, #20
    6472:	18fb      	adds	r3, r7, r3
    6474:	68ba      	ldr	r2, [r7, #8]
    6476:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6478:	2314      	movs	r3, #20
    647a:	18fb      	adds	r3, r7, r3
    647c:	687a      	ldr	r2, [r7, #4]
    647e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    6480:	2314      	movs	r3, #20
    6482:	18fb      	adds	r3, r7, r3
    6484:	68fa      	ldr	r2, [r7, #12]
    6486:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    6488:	68bb      	ldr	r3, [r7, #8]
    648a:	2b05      	cmp	r3, #5
    648c:	dc1a      	bgt.n	64c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    648e:	4b16      	ldr	r3, [pc, #88]	; (64e8 <xTimerGenericCommand+0x9c>)
    6490:	4798      	blx	r3
    6492:	0003      	movs	r3, r0
    6494:	2b02      	cmp	r3, #2
    6496:	d10a      	bne.n	64ae <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    6498:	4b12      	ldr	r3, [pc, #72]	; (64e4 <xTimerGenericCommand+0x98>)
    649a:	6818      	ldr	r0, [r3, #0]
    649c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    649e:	2314      	movs	r3, #20
    64a0:	18f9      	adds	r1, r7, r3
    64a2:	2300      	movs	r3, #0
    64a4:	4c11      	ldr	r4, [pc, #68]	; (64ec <xTimerGenericCommand+0xa0>)
    64a6:	47a0      	blx	r4
    64a8:	0003      	movs	r3, r0
    64aa:	627b      	str	r3, [r7, #36]	; 0x24
    64ac:	e014      	b.n	64d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    64ae:	4b0d      	ldr	r3, [pc, #52]	; (64e4 <xTimerGenericCommand+0x98>)
    64b0:	6818      	ldr	r0, [r3, #0]
    64b2:	2314      	movs	r3, #20
    64b4:	18f9      	adds	r1, r7, r3
    64b6:	2300      	movs	r3, #0
    64b8:	2200      	movs	r2, #0
    64ba:	4c0c      	ldr	r4, [pc, #48]	; (64ec <xTimerGenericCommand+0xa0>)
    64bc:	47a0      	blx	r4
    64be:	0003      	movs	r3, r0
    64c0:	627b      	str	r3, [r7, #36]	; 0x24
    64c2:	e009      	b.n	64d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    64c4:	4b07      	ldr	r3, [pc, #28]	; (64e4 <xTimerGenericCommand+0x98>)
    64c6:	6818      	ldr	r0, [r3, #0]
    64c8:	683a      	ldr	r2, [r7, #0]
    64ca:	2314      	movs	r3, #20
    64cc:	18f9      	adds	r1, r7, r3
    64ce:	2300      	movs	r3, #0
    64d0:	4c07      	ldr	r4, [pc, #28]	; (64f0 <xTimerGenericCommand+0xa4>)
    64d2:	47a0      	blx	r4
    64d4:	0003      	movs	r3, r0
    64d6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    64d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    64da:	0018      	movs	r0, r3
    64dc:	46bd      	mov	sp, r7
    64de:	b00b      	add	sp, #44	; 0x2c
    64e0:	bd90      	pop	{r4, r7, pc}
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	20005290 	.word	0x20005290
    64e8:	000061a1 	.word	0x000061a1
    64ec:	00004af5 	.word	0x00004af5
    64f0:	00004cd5 	.word	0x00004cd5

000064f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    64f4:	b590      	push	{r4, r7, lr}
    64f6:	b087      	sub	sp, #28
    64f8:	af02      	add	r7, sp, #8
    64fa:	6078      	str	r0, [r7, #4]
    64fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    64fe:	4b18      	ldr	r3, [pc, #96]	; (6560 <prvProcessExpiredTimer+0x6c>)
    6500:	681b      	ldr	r3, [r3, #0]
    6502:	68db      	ldr	r3, [r3, #12]
    6504:	68db      	ldr	r3, [r3, #12]
    6506:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	3304      	adds	r3, #4
    650c:	0018      	movs	r0, r3
    650e:	4b15      	ldr	r3, [pc, #84]	; (6564 <prvProcessExpiredTimer+0x70>)
    6510:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6512:	68fb      	ldr	r3, [r7, #12]
    6514:	69db      	ldr	r3, [r3, #28]
    6516:	2b01      	cmp	r3, #1
    6518:	d119      	bne.n	654e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    651a:	68fb      	ldr	r3, [r7, #12]
    651c:	699a      	ldr	r2, [r3, #24]
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	18d1      	adds	r1, r2, r3
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	683a      	ldr	r2, [r7, #0]
    6526:	68f8      	ldr	r0, [r7, #12]
    6528:	4c0f      	ldr	r4, [pc, #60]	; (6568 <prvProcessExpiredTimer+0x74>)
    652a:	47a0      	blx	r4
    652c:	1e03      	subs	r3, r0, #0
    652e:	d00e      	beq.n	654e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6530:	687a      	ldr	r2, [r7, #4]
    6532:	68f8      	ldr	r0, [r7, #12]
    6534:	2300      	movs	r3, #0
    6536:	9300      	str	r3, [sp, #0]
    6538:	2300      	movs	r3, #0
    653a:	2100      	movs	r1, #0
    653c:	4c0b      	ldr	r4, [pc, #44]	; (656c <prvProcessExpiredTimer+0x78>)
    653e:	47a0      	blx	r4
    6540:	0003      	movs	r3, r0
    6542:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    6544:	68bb      	ldr	r3, [r7, #8]
    6546:	2b00      	cmp	r3, #0
    6548:	d101      	bne.n	654e <prvProcessExpiredTimer+0x5a>
    654a:	b672      	cpsid	i
    654c:	e7fe      	b.n	654c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    654e:	68fb      	ldr	r3, [r7, #12]
    6550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6552:	68fa      	ldr	r2, [r7, #12]
    6554:	0010      	movs	r0, r2
    6556:	4798      	blx	r3
}
    6558:	46c0      	nop			; (mov r8, r8)
    655a:	46bd      	mov	sp, r7
    655c:	b005      	add	sp, #20
    655e:	bd90      	pop	{r4, r7, pc}
    6560:	20005288 	.word	0x20005288
    6564:	00004923 	.word	0x00004923
    6568:	000066d1 	.word	0x000066d1
    656c:	0000644d 	.word	0x0000644d

00006570 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    6570:	b580      	push	{r7, lr}
    6572:	b084      	sub	sp, #16
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    6578:	2308      	movs	r3, #8
    657a:	18fb      	adds	r3, r7, r3
    657c:	0018      	movs	r0, r3
    657e:	4b06      	ldr	r3, [pc, #24]	; (6598 <prvTimerTask+0x28>)
    6580:	4798      	blx	r3
    6582:	0003      	movs	r3, r0
    6584:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    6586:	68ba      	ldr	r2, [r7, #8]
    6588:	68fb      	ldr	r3, [r7, #12]
    658a:	0011      	movs	r1, r2
    658c:	0018      	movs	r0, r3
    658e:	4b03      	ldr	r3, [pc, #12]	; (659c <prvTimerTask+0x2c>)
    6590:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    6592:	4b03      	ldr	r3, [pc, #12]	; (65a0 <prvTimerTask+0x30>)
    6594:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    6596:	e7ef      	b.n	6578 <prvTimerTask+0x8>
    6598:	00006649 	.word	0x00006649
    659c:	000065a5 	.word	0x000065a5
    65a0:	00006759 	.word	0x00006759

000065a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    65a4:	b580      	push	{r7, lr}
    65a6:	b084      	sub	sp, #16
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
    65ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    65ae:	4b1e      	ldr	r3, [pc, #120]	; (6628 <prvProcessTimerOrBlockTask+0x84>)
    65b0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    65b2:	2308      	movs	r3, #8
    65b4:	18fb      	adds	r3, r7, r3
    65b6:	0018      	movs	r0, r3
    65b8:	4b1c      	ldr	r3, [pc, #112]	; (662c <prvProcessTimerOrBlockTask+0x88>)
    65ba:	4798      	blx	r3
    65bc:	0003      	movs	r3, r0
    65be:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    65c0:	68bb      	ldr	r3, [r7, #8]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d129      	bne.n	661a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	2b00      	cmp	r3, #0
    65ca:	d10c      	bne.n	65e6 <prvProcessTimerOrBlockTask+0x42>
    65cc:	687a      	ldr	r2, [r7, #4]
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	429a      	cmp	r2, r3
    65d2:	d808      	bhi.n	65e6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    65d4:	4b16      	ldr	r3, [pc, #88]	; (6630 <prvProcessTimerOrBlockTask+0x8c>)
    65d6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    65d8:	68fa      	ldr	r2, [r7, #12]
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	0011      	movs	r1, r2
    65de:	0018      	movs	r0, r3
    65e0:	4b14      	ldr	r3, [pc, #80]	; (6634 <prvProcessTimerOrBlockTask+0x90>)
    65e2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    65e4:	e01b      	b.n	661e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	2b00      	cmp	r3, #0
    65ea:	d006      	beq.n	65fa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    65ec:	4b12      	ldr	r3, [pc, #72]	; (6638 <prvProcessTimerOrBlockTask+0x94>)
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	425a      	negs	r2, r3
    65f4:	4153      	adcs	r3, r2
    65f6:	b2db      	uxtb	r3, r3
    65f8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    65fa:	4b10      	ldr	r3, [pc, #64]	; (663c <prvProcessTimerOrBlockTask+0x98>)
    65fc:	6818      	ldr	r0, [r3, #0]
    65fe:	687a      	ldr	r2, [r7, #4]
    6600:	68fb      	ldr	r3, [r7, #12]
    6602:	1ad3      	subs	r3, r2, r3
    6604:	683a      	ldr	r2, [r7, #0]
    6606:	0019      	movs	r1, r3
    6608:	4b0d      	ldr	r3, [pc, #52]	; (6640 <prvProcessTimerOrBlockTask+0x9c>)
    660a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    660c:	4b08      	ldr	r3, [pc, #32]	; (6630 <prvProcessTimerOrBlockTask+0x8c>)
    660e:	4798      	blx	r3
    6610:	1e03      	subs	r3, r0, #0
    6612:	d104      	bne.n	661e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    6614:	4b0b      	ldr	r3, [pc, #44]	; (6644 <prvProcessTimerOrBlockTask+0xa0>)
    6616:	4798      	blx	r3
}
    6618:	e001      	b.n	661e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    661a:	4b05      	ldr	r3, [pc, #20]	; (6630 <prvProcessTimerOrBlockTask+0x8c>)
    661c:	4798      	blx	r3
}
    661e:	46c0      	nop			; (mov r8, r8)
    6620:	46bd      	mov	sp, r7
    6622:	b004      	add	sp, #16
    6624:	bd80      	pop	{r7, pc}
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	000059e1 	.word	0x000059e1
    662c:	00006689 	.word	0x00006689
    6630:	000059f9 	.word	0x000059f9
    6634:	000064f5 	.word	0x000064f5
    6638:	2000528c 	.word	0x2000528c
    663c:	20005290 	.word	0x20005290
    6640:	00005271 	.word	0x00005271
    6644:	00001f31 	.word	0x00001f31

00006648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    6648:	b580      	push	{r7, lr}
    664a:	b084      	sub	sp, #16
    664c:	af00      	add	r7, sp, #0
    664e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    6650:	4b0c      	ldr	r3, [pc, #48]	; (6684 <prvGetNextExpireTime+0x3c>)
    6652:	681b      	ldr	r3, [r3, #0]
    6654:	681b      	ldr	r3, [r3, #0]
    6656:	425a      	negs	r2, r3
    6658:	4153      	adcs	r3, r2
    665a:	b2db      	uxtb	r3, r3
    665c:	001a      	movs	r2, r3
    665e:	687b      	ldr	r3, [r7, #4]
    6660:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	681b      	ldr	r3, [r3, #0]
    6666:	2b00      	cmp	r3, #0
    6668:	d105      	bne.n	6676 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    666a:	4b06      	ldr	r3, [pc, #24]	; (6684 <prvGetNextExpireTime+0x3c>)
    666c:	681b      	ldr	r3, [r3, #0]
    666e:	68db      	ldr	r3, [r3, #12]
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	60fb      	str	r3, [r7, #12]
    6674:	e001      	b.n	667a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    6676:	2300      	movs	r3, #0
    6678:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    667a:	68fb      	ldr	r3, [r7, #12]
}
    667c:	0018      	movs	r0, r3
    667e:	46bd      	mov	sp, r7
    6680:	b004      	add	sp, #16
    6682:	bd80      	pop	{r7, pc}
    6684:	20005288 	.word	0x20005288

00006688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    6688:	b580      	push	{r7, lr}
    668a:	b084      	sub	sp, #16
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    6690:	4b0c      	ldr	r3, [pc, #48]	; (66c4 <prvSampleTimeNow+0x3c>)
    6692:	4798      	blx	r3
    6694:	0003      	movs	r3, r0
    6696:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    6698:	4b0b      	ldr	r3, [pc, #44]	; (66c8 <prvSampleTimeNow+0x40>)
    669a:	681b      	ldr	r3, [r3, #0]
    669c:	68fa      	ldr	r2, [r7, #12]
    669e:	429a      	cmp	r2, r3
    66a0:	d205      	bcs.n	66ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    66a2:	4b0a      	ldr	r3, [pc, #40]	; (66cc <prvSampleTimeNow+0x44>)
    66a4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	2201      	movs	r2, #1
    66aa:	601a      	str	r2, [r3, #0]
    66ac:	e002      	b.n	66b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	2200      	movs	r2, #0
    66b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    66b4:	4b04      	ldr	r3, [pc, #16]	; (66c8 <prvSampleTimeNow+0x40>)
    66b6:	68fa      	ldr	r2, [r7, #12]
    66b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    66ba:	68fb      	ldr	r3, [r7, #12]
}
    66bc:	0018      	movs	r0, r3
    66be:	46bd      	mov	sp, r7
    66c0:	b004      	add	sp, #16
    66c2:	bd80      	pop	{r7, pc}
    66c4:	00005b2d 	.word	0x00005b2d
    66c8:	20005298 	.word	0x20005298
    66cc:	0000689d 	.word	0x0000689d

000066d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b086      	sub	sp, #24
    66d4:	af00      	add	r7, sp, #0
    66d6:	60f8      	str	r0, [r7, #12]
    66d8:	60b9      	str	r1, [r7, #8]
    66da:	607a      	str	r2, [r7, #4]
    66dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    66de:	2300      	movs	r3, #0
    66e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	68ba      	ldr	r2, [r7, #8]
    66e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    66e8:	68fb      	ldr	r3, [r7, #12]
    66ea:	68fa      	ldr	r2, [r7, #12]
    66ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    66ee:	68ba      	ldr	r2, [r7, #8]
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	429a      	cmp	r2, r3
    66f4:	d812      	bhi.n	671c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    66f6:	687a      	ldr	r2, [r7, #4]
    66f8:	683b      	ldr	r3, [r7, #0]
    66fa:	1ad2      	subs	r2, r2, r3
    66fc:	68fb      	ldr	r3, [r7, #12]
    66fe:	699b      	ldr	r3, [r3, #24]
    6700:	429a      	cmp	r2, r3
    6702:	d302      	bcc.n	670a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6704:	2301      	movs	r3, #1
    6706:	617b      	str	r3, [r7, #20]
    6708:	e01b      	b.n	6742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    670a:	4b10      	ldr	r3, [pc, #64]	; (674c <prvInsertTimerInActiveList+0x7c>)
    670c:	681a      	ldr	r2, [r3, #0]
    670e:	68fb      	ldr	r3, [r7, #12]
    6710:	3304      	adds	r3, #4
    6712:	0019      	movs	r1, r3
    6714:	0010      	movs	r0, r2
    6716:	4b0e      	ldr	r3, [pc, #56]	; (6750 <prvInsertTimerInActiveList+0x80>)
    6718:	4798      	blx	r3
    671a:	e012      	b.n	6742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    671c:	687a      	ldr	r2, [r7, #4]
    671e:	683b      	ldr	r3, [r7, #0]
    6720:	429a      	cmp	r2, r3
    6722:	d206      	bcs.n	6732 <prvInsertTimerInActiveList+0x62>
    6724:	68ba      	ldr	r2, [r7, #8]
    6726:	683b      	ldr	r3, [r7, #0]
    6728:	429a      	cmp	r2, r3
    672a:	d302      	bcc.n	6732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    672c:	2301      	movs	r3, #1
    672e:	617b      	str	r3, [r7, #20]
    6730:	e007      	b.n	6742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6732:	4b08      	ldr	r3, [pc, #32]	; (6754 <prvInsertTimerInActiveList+0x84>)
    6734:	681a      	ldr	r2, [r3, #0]
    6736:	68fb      	ldr	r3, [r7, #12]
    6738:	3304      	adds	r3, #4
    673a:	0019      	movs	r1, r3
    673c:	0010      	movs	r0, r2
    673e:	4b04      	ldr	r3, [pc, #16]	; (6750 <prvInsertTimerInActiveList+0x80>)
    6740:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    6742:	697b      	ldr	r3, [r7, #20]
}
    6744:	0018      	movs	r0, r3
    6746:	46bd      	mov	sp, r7
    6748:	b006      	add	sp, #24
    674a:	bd80      	pop	{r7, pc}
    674c:	2000528c 	.word	0x2000528c
    6750:	000048b7 	.word	0x000048b7
    6754:	20005288 	.word	0x20005288

00006758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    6758:	b590      	push	{r4, r7, lr}
    675a:	b08d      	sub	sp, #52	; 0x34
    675c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    675e:	e07e      	b.n	685e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    6760:	2308      	movs	r3, #8
    6762:	18fb      	adds	r3, r7, r3
    6764:	681b      	ldr	r3, [r3, #0]
    6766:	2b00      	cmp	r3, #0
    6768:	da10      	bge.n	678c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    676a:	2308      	movs	r3, #8
    676c:	18fb      	adds	r3, r7, r3
    676e:	3304      	adds	r3, #4
    6770:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    6772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6774:	2b00      	cmp	r3, #0
    6776:	d101      	bne.n	677c <prvProcessReceivedCommands+0x24>
    6778:	b672      	cpsid	i
    677a:	e7fe      	b.n	677a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6782:	6858      	ldr	r0, [r3, #4]
    6784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6786:	689b      	ldr	r3, [r3, #8]
    6788:	0019      	movs	r1, r3
    678a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    678c:	2308      	movs	r3, #8
    678e:	18fb      	adds	r3, r7, r3
    6790:	681b      	ldr	r3, [r3, #0]
    6792:	2b00      	cmp	r3, #0
    6794:	db63      	blt.n	685e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6796:	2308      	movs	r3, #8
    6798:	18fb      	adds	r3, r7, r3
    679a:	689b      	ldr	r3, [r3, #8]
    679c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    679e:	6a3b      	ldr	r3, [r7, #32]
    67a0:	695b      	ldr	r3, [r3, #20]
    67a2:	2b00      	cmp	r3, #0
    67a4:	d004      	beq.n	67b0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    67a6:	6a3b      	ldr	r3, [r7, #32]
    67a8:	3304      	adds	r3, #4
    67aa:	0018      	movs	r0, r3
    67ac:	4b33      	ldr	r3, [pc, #204]	; (687c <prvProcessReceivedCommands+0x124>)
    67ae:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    67b0:	1d3b      	adds	r3, r7, #4
    67b2:	0018      	movs	r0, r3
    67b4:	4b32      	ldr	r3, [pc, #200]	; (6880 <prvProcessReceivedCommands+0x128>)
    67b6:	4798      	blx	r3
    67b8:	0003      	movs	r3, r0
    67ba:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
    67bc:	2308      	movs	r3, #8
    67be:	18fb      	adds	r3, r7, r3
    67c0:	681b      	ldr	r3, [r3, #0]
    67c2:	2b09      	cmp	r3, #9
    67c4:	d84a      	bhi.n	685c <prvProcessReceivedCommands+0x104>
    67c6:	009a      	lsls	r2, r3, #2
    67c8:	4b2e      	ldr	r3, [pc, #184]	; (6884 <prvProcessReceivedCommands+0x12c>)
    67ca:	18d3      	adds	r3, r2, r3
    67cc:	681b      	ldr	r3, [r3, #0]
    67ce:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    67d0:	2308      	movs	r3, #8
    67d2:	18fb      	adds	r3, r7, r3
    67d4:	685a      	ldr	r2, [r3, #4]
    67d6:	6a3b      	ldr	r3, [r7, #32]
    67d8:	699b      	ldr	r3, [r3, #24]
    67da:	18d1      	adds	r1, r2, r3
    67dc:	2308      	movs	r3, #8
    67de:	18fb      	adds	r3, r7, r3
    67e0:	685b      	ldr	r3, [r3, #4]
    67e2:	69fa      	ldr	r2, [r7, #28]
    67e4:	6a38      	ldr	r0, [r7, #32]
    67e6:	4c28      	ldr	r4, [pc, #160]	; (6888 <prvProcessReceivedCommands+0x130>)
    67e8:	47a0      	blx	r4
    67ea:	1e03      	subs	r3, r0, #0
    67ec:	d037      	beq.n	685e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    67ee:	6a3b      	ldr	r3, [r7, #32]
    67f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67f2:	6a3a      	ldr	r2, [r7, #32]
    67f4:	0010      	movs	r0, r2
    67f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    67f8:	6a3b      	ldr	r3, [r7, #32]
    67fa:	69db      	ldr	r3, [r3, #28]
    67fc:	2b01      	cmp	r3, #1
    67fe:	d12e      	bne.n	685e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    6800:	2308      	movs	r3, #8
    6802:	18fb      	adds	r3, r7, r3
    6804:	685a      	ldr	r2, [r3, #4]
    6806:	6a3b      	ldr	r3, [r7, #32]
    6808:	699b      	ldr	r3, [r3, #24]
    680a:	18d2      	adds	r2, r2, r3
    680c:	6a38      	ldr	r0, [r7, #32]
    680e:	2300      	movs	r3, #0
    6810:	9300      	str	r3, [sp, #0]
    6812:	2300      	movs	r3, #0
    6814:	2100      	movs	r1, #0
    6816:	4c1d      	ldr	r4, [pc, #116]	; (688c <prvProcessReceivedCommands+0x134>)
    6818:	47a0      	blx	r4
    681a:	0003      	movs	r3, r0
    681c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
    681e:	69bb      	ldr	r3, [r7, #24]
    6820:	2b00      	cmp	r3, #0
    6822:	d11c      	bne.n	685e <prvProcessReceivedCommands+0x106>
    6824:	b672      	cpsid	i
    6826:	e7fe      	b.n	6826 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6828:	2308      	movs	r3, #8
    682a:	18fb      	adds	r3, r7, r3
    682c:	685a      	ldr	r2, [r3, #4]
    682e:	6a3b      	ldr	r3, [r7, #32]
    6830:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    6832:	6a3b      	ldr	r3, [r7, #32]
    6834:	699b      	ldr	r3, [r3, #24]
    6836:	2b00      	cmp	r3, #0
    6838:	d101      	bne.n	683e <prvProcessReceivedCommands+0xe6>
    683a:	b672      	cpsid	i
    683c:	e7fe      	b.n	683c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    683e:	6a3b      	ldr	r3, [r7, #32]
    6840:	699a      	ldr	r2, [r3, #24]
    6842:	69fb      	ldr	r3, [r7, #28]
    6844:	18d1      	adds	r1, r2, r3
    6846:	69fb      	ldr	r3, [r7, #28]
    6848:	69fa      	ldr	r2, [r7, #28]
    684a:	6a38      	ldr	r0, [r7, #32]
    684c:	4c0e      	ldr	r4, [pc, #56]	; (6888 <prvProcessReceivedCommands+0x130>)
    684e:	47a0      	blx	r4
					break;
    6850:	e005      	b.n	685e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    6852:	6a3b      	ldr	r3, [r7, #32]
    6854:	0018      	movs	r0, r3
    6856:	4b0e      	ldr	r3, [pc, #56]	; (6890 <prvProcessReceivedCommands+0x138>)
    6858:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    685a:	e000      	b.n	685e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
    685c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    685e:	4b0d      	ldr	r3, [pc, #52]	; (6894 <prvProcessReceivedCommands+0x13c>)
    6860:	681b      	ldr	r3, [r3, #0]
    6862:	2208      	movs	r2, #8
    6864:	18b9      	adds	r1, r7, r2
    6866:	2200      	movs	r2, #0
    6868:	0018      	movs	r0, r3
    686a:	4b0b      	ldr	r3, [pc, #44]	; (6898 <prvProcessReceivedCommands+0x140>)
    686c:	4798      	blx	r3
    686e:	1e03      	subs	r3, r0, #0
    6870:	d000      	beq.n	6874 <prvProcessReceivedCommands+0x11c>
    6872:	e775      	b.n	6760 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    6874:	46c0      	nop			; (mov r8, r8)
    6876:	46bd      	mov	sp, r7
    6878:	b00b      	add	sp, #44	; 0x2c
    687a:	bd90      	pop	{r4, r7, pc}
    687c:	00004923 	.word	0x00004923
    6880:	00006689 	.word	0x00006689
    6884:	0000befc 	.word	0x0000befc
    6888:	000066d1 	.word	0x000066d1
    688c:	0000644d 	.word	0x0000644d
    6890:	000021e5 	.word	0x000021e5
    6894:	20005290 	.word	0x20005290
    6898:	00004df5 	.word	0x00004df5

0000689c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    689c:	b590      	push	{r4, r7, lr}
    689e:	b089      	sub	sp, #36	; 0x24
    68a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    68a2:	e03e      	b.n	6922 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    68a4:	4b28      	ldr	r3, [pc, #160]	; (6948 <prvSwitchTimerLists+0xac>)
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	68db      	ldr	r3, [r3, #12]
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    68ae:	4b26      	ldr	r3, [pc, #152]	; (6948 <prvSwitchTimerLists+0xac>)
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	68db      	ldr	r3, [r3, #12]
    68b4:	68db      	ldr	r3, [r3, #12]
    68b6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    68b8:	693b      	ldr	r3, [r7, #16]
    68ba:	3304      	adds	r3, #4
    68bc:	0018      	movs	r0, r3
    68be:	4b23      	ldr	r3, [pc, #140]	; (694c <prvSwitchTimerLists+0xb0>)
    68c0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    68c2:	693b      	ldr	r3, [r7, #16]
    68c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68c6:	693a      	ldr	r2, [r7, #16]
    68c8:	0010      	movs	r0, r2
    68ca:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    68cc:	693b      	ldr	r3, [r7, #16]
    68ce:	69db      	ldr	r3, [r3, #28]
    68d0:	2b01      	cmp	r3, #1
    68d2:	d126      	bne.n	6922 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    68d4:	693b      	ldr	r3, [r7, #16]
    68d6:	699a      	ldr	r2, [r3, #24]
    68d8:	697b      	ldr	r3, [r7, #20]
    68da:	18d3      	adds	r3, r2, r3
    68dc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    68de:	68fa      	ldr	r2, [r7, #12]
    68e0:	697b      	ldr	r3, [r7, #20]
    68e2:	429a      	cmp	r2, r3
    68e4:	d90e      	bls.n	6904 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    68e6:	693b      	ldr	r3, [r7, #16]
    68e8:	68fa      	ldr	r2, [r7, #12]
    68ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    68ec:	693b      	ldr	r3, [r7, #16]
    68ee:	693a      	ldr	r2, [r7, #16]
    68f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    68f2:	4b15      	ldr	r3, [pc, #84]	; (6948 <prvSwitchTimerLists+0xac>)
    68f4:	681a      	ldr	r2, [r3, #0]
    68f6:	693b      	ldr	r3, [r7, #16]
    68f8:	3304      	adds	r3, #4
    68fa:	0019      	movs	r1, r3
    68fc:	0010      	movs	r0, r2
    68fe:	4b14      	ldr	r3, [pc, #80]	; (6950 <prvSwitchTimerLists+0xb4>)
    6900:	4798      	blx	r3
    6902:	e00e      	b.n	6922 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6904:	697a      	ldr	r2, [r7, #20]
    6906:	6938      	ldr	r0, [r7, #16]
    6908:	2300      	movs	r3, #0
    690a:	9300      	str	r3, [sp, #0]
    690c:	2300      	movs	r3, #0
    690e:	2100      	movs	r1, #0
    6910:	4c10      	ldr	r4, [pc, #64]	; (6954 <prvSwitchTimerLists+0xb8>)
    6912:	47a0      	blx	r4
    6914:	0003      	movs	r3, r0
    6916:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    6918:	68bb      	ldr	r3, [r7, #8]
    691a:	2b00      	cmp	r3, #0
    691c:	d101      	bne.n	6922 <prvSwitchTimerLists+0x86>
    691e:	b672      	cpsid	i
    6920:	e7fe      	b.n	6920 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6922:	4b09      	ldr	r3, [pc, #36]	; (6948 <prvSwitchTimerLists+0xac>)
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	681b      	ldr	r3, [r3, #0]
    6928:	2b00      	cmp	r3, #0
    692a:	d1bb      	bne.n	68a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    692c:	4b06      	ldr	r3, [pc, #24]	; (6948 <prvSwitchTimerLists+0xac>)
    692e:	681b      	ldr	r3, [r3, #0]
    6930:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    6932:	4b09      	ldr	r3, [pc, #36]	; (6958 <prvSwitchTimerLists+0xbc>)
    6934:	681a      	ldr	r2, [r3, #0]
    6936:	4b04      	ldr	r3, [pc, #16]	; (6948 <prvSwitchTimerLists+0xac>)
    6938:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    693a:	4b07      	ldr	r3, [pc, #28]	; (6958 <prvSwitchTimerLists+0xbc>)
    693c:	687a      	ldr	r2, [r7, #4]
    693e:	601a      	str	r2, [r3, #0]
}
    6940:	46c0      	nop			; (mov r8, r8)
    6942:	46bd      	mov	sp, r7
    6944:	b007      	add	sp, #28
    6946:	bd90      	pop	{r4, r7, pc}
    6948:	20005288 	.word	0x20005288
    694c:	00004923 	.word	0x00004923
    6950:	000048b7 	.word	0x000048b7
    6954:	0000644d 	.word	0x0000644d
    6958:	2000528c 	.word	0x2000528c

0000695c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    695c:	b580      	push	{r7, lr}
    695e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    6960:	4b15      	ldr	r3, [pc, #84]	; (69b8 <prvCheckForValidListAndQueue+0x5c>)
    6962:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    6964:	4b15      	ldr	r3, [pc, #84]	; (69bc <prvCheckForValidListAndQueue+0x60>)
    6966:	681b      	ldr	r3, [r3, #0]
    6968:	2b00      	cmp	r3, #0
    696a:	d120      	bne.n	69ae <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    696c:	4b14      	ldr	r3, [pc, #80]	; (69c0 <prvCheckForValidListAndQueue+0x64>)
    696e:	0018      	movs	r0, r3
    6970:	4b14      	ldr	r3, [pc, #80]	; (69c4 <prvCheckForValidListAndQueue+0x68>)
    6972:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    6974:	4b14      	ldr	r3, [pc, #80]	; (69c8 <prvCheckForValidListAndQueue+0x6c>)
    6976:	0018      	movs	r0, r3
    6978:	4b12      	ldr	r3, [pc, #72]	; (69c4 <prvCheckForValidListAndQueue+0x68>)
    697a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    697c:	4b13      	ldr	r3, [pc, #76]	; (69cc <prvCheckForValidListAndQueue+0x70>)
    697e:	4a10      	ldr	r2, [pc, #64]	; (69c0 <prvCheckForValidListAndQueue+0x64>)
    6980:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    6982:	4b13      	ldr	r3, [pc, #76]	; (69d0 <prvCheckForValidListAndQueue+0x74>)
    6984:	4a10      	ldr	r2, [pc, #64]	; (69c8 <prvCheckForValidListAndQueue+0x6c>)
    6986:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6988:	2200      	movs	r2, #0
    698a:	2110      	movs	r1, #16
    698c:	2005      	movs	r0, #5
    698e:	4b11      	ldr	r3, [pc, #68]	; (69d4 <prvCheckForValidListAndQueue+0x78>)
    6990:	4798      	blx	r3
    6992:	0002      	movs	r2, r0
    6994:	4b09      	ldr	r3, [pc, #36]	; (69bc <prvCheckForValidListAndQueue+0x60>)
    6996:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    6998:	4b08      	ldr	r3, [pc, #32]	; (69bc <prvCheckForValidListAndQueue+0x60>)
    699a:	681b      	ldr	r3, [r3, #0]
    699c:	2b00      	cmp	r3, #0
    699e:	d006      	beq.n	69ae <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    69a0:	4b06      	ldr	r3, [pc, #24]	; (69bc <prvCheckForValidListAndQueue+0x60>)
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	4a0c      	ldr	r2, [pc, #48]	; (69d8 <prvCheckForValidListAndQueue+0x7c>)
    69a6:	0011      	movs	r1, r2
    69a8:	0018      	movs	r0, r3
    69aa:	4b0c      	ldr	r3, [pc, #48]	; (69dc <prvCheckForValidListAndQueue+0x80>)
    69ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    69ae:	4b0c      	ldr	r3, [pc, #48]	; (69e0 <prvCheckForValidListAndQueue+0x84>)
    69b0:	4798      	blx	r3
}
    69b2:	46c0      	nop			; (mov r8, r8)
    69b4:	46bd      	mov	sp, r7
    69b6:	bd80      	pop	{r7, pc}
    69b8:	00001f51 	.word	0x00001f51
    69bc:	20005290 	.word	0x20005290
    69c0:	20005260 	.word	0x20005260
    69c4:	00004821 	.word	0x00004821
    69c8:	20005274 	.word	0x20005274
    69cc:	20005288 	.word	0x20005288
    69d0:	2000528c 	.word	0x2000528c
    69d4:	00004a31 	.word	0x00004a31
    69d8:	0000bef4 	.word	0x0000bef4
    69dc:	00005221 	.word	0x00005221
    69e0:	00001f75 	.word	0x00001f75

000069e4 <system_apb_clock_set_mask>:
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b082      	sub	sp, #8
    69e8:	af00      	add	r7, sp, #0
    69ea:	0002      	movs	r2, r0
    69ec:	6039      	str	r1, [r7, #0]
    69ee:	1dfb      	adds	r3, r7, #7
    69f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    69f2:	1dfb      	adds	r3, r7, #7
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	2b01      	cmp	r3, #1
    69f8:	d00a      	beq.n	6a10 <system_apb_clock_set_mask+0x2c>
    69fa:	2b02      	cmp	r3, #2
    69fc:	d00f      	beq.n	6a1e <system_apb_clock_set_mask+0x3a>
    69fe:	2b00      	cmp	r3, #0
    6a00:	d114      	bne.n	6a2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6a02:	4b0e      	ldr	r3, [pc, #56]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a04:	4a0d      	ldr	r2, [pc, #52]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a06:	6991      	ldr	r1, [r2, #24]
    6a08:	683a      	ldr	r2, [r7, #0]
    6a0a:	430a      	orrs	r2, r1
    6a0c:	619a      	str	r2, [r3, #24]
			break;
    6a0e:	e00f      	b.n	6a30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6a10:	4b0a      	ldr	r3, [pc, #40]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a12:	4a0a      	ldr	r2, [pc, #40]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a14:	69d1      	ldr	r1, [r2, #28]
    6a16:	683a      	ldr	r2, [r7, #0]
    6a18:	430a      	orrs	r2, r1
    6a1a:	61da      	str	r2, [r3, #28]
			break;
    6a1c:	e008      	b.n	6a30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6a1e:	4b07      	ldr	r3, [pc, #28]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a20:	4a06      	ldr	r2, [pc, #24]	; (6a3c <system_apb_clock_set_mask+0x58>)
    6a22:	6a11      	ldr	r1, [r2, #32]
    6a24:	683a      	ldr	r2, [r7, #0]
    6a26:	430a      	orrs	r2, r1
    6a28:	621a      	str	r2, [r3, #32]
			break;
    6a2a:	e001      	b.n	6a30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6a2c:	2317      	movs	r3, #23
    6a2e:	e000      	b.n	6a32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6a30:	2300      	movs	r3, #0
}
    6a32:	0018      	movs	r0, r3
    6a34:	46bd      	mov	sp, r7
    6a36:	b002      	add	sp, #8
    6a38:	bd80      	pop	{r7, pc}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	40000400 	.word	0x40000400

00006a40 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	b082      	sub	sp, #8
    6a44:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6a46:	4b07      	ldr	r3, [pc, #28]	; (6a64 <wdt_is_syncing+0x24>)
    6a48:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	79db      	ldrb	r3, [r3, #7]
    6a4e:	b2db      	uxtb	r3, r3
    6a50:	b25b      	sxtb	r3, r3
    6a52:	2b00      	cmp	r3, #0
    6a54:	da01      	bge.n	6a5a <wdt_is_syncing+0x1a>
#endif
		return true;
    6a56:	2301      	movs	r3, #1
    6a58:	e000      	b.n	6a5c <wdt_is_syncing+0x1c>
	}

	return false;
    6a5a:	2300      	movs	r3, #0
}
    6a5c:	0018      	movs	r0, r3
    6a5e:	46bd      	mov	sp, r7
    6a60:	b002      	add	sp, #8
    6a62:	bd80      	pop	{r7, pc}
    6a64:	40001000 	.word	0x40001000

00006a68 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    6a68:	b580      	push	{r7, lr}
    6a6a:	b082      	sub	sp, #8
    6a6c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6a6e:	4b07      	ldr	r3, [pc, #28]	; (6a8c <wdt_is_locked+0x24>)
    6a70:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	b2db      	uxtb	r3, r3
    6a78:	001a      	movs	r2, r3
    6a7a:	2380      	movs	r3, #128	; 0x80
    6a7c:	4013      	ands	r3, r2
    6a7e:	1e5a      	subs	r2, r3, #1
    6a80:	4193      	sbcs	r3, r2
    6a82:	b2db      	uxtb	r3, r3
#endif
}
    6a84:	0018      	movs	r0, r3
    6a86:	46bd      	mov	sp, r7
    6a88:	b002      	add	sp, #8
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	40001000 	.word	0x40001000

00006a90 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    6a90:	b580      	push	{r7, lr}
    6a92:	b086      	sub	sp, #24
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    6a98:	4b54      	ldr	r3, [pc, #336]	; (6bec <wdt_set_config+0x15c>)
    6a9a:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    6a9c:	2110      	movs	r1, #16
    6a9e:	2000      	movs	r0, #0
    6aa0:	4b53      	ldr	r3, [pc, #332]	; (6bf0 <wdt_set_config+0x160>)
    6aa2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    6aa4:	4b53      	ldr	r3, [pc, #332]	; (6bf4 <wdt_set_config+0x164>)
    6aa6:	4798      	blx	r3
    6aa8:	1e03      	subs	r3, r0, #0
    6aaa:	d001      	beq.n	6ab0 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    6aac:	2310      	movs	r3, #16
    6aae:	e098      	b.n	6be2 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	78db      	ldrb	r3, [r3, #3]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d101      	bne.n	6abc <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    6ab8:	2317      	movs	r3, #23
    6aba:	e092      	b.n	6be2 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	78da      	ldrb	r2, [r3, #3]
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	791b      	ldrb	r3, [r3, #4]
    6ac4:	429a      	cmp	r2, r3
    6ac6:	d305      	bcc.n	6ad4 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	78da      	ldrb	r2, [r3, #3]
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    6ad0:	429a      	cmp	r2, r3
    6ad2:	d201      	bcs.n	6ad8 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    6ad4:	2317      	movs	r3, #23
    6ad6:	e084      	b.n	6be2 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    6ad8:	693b      	ldr	r3, [r7, #16]
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	b2db      	uxtb	r3, r3
    6ade:	2202      	movs	r2, #2
    6ae0:	4393      	bics	r3, r2
    6ae2:	b2da      	uxtb	r2, r3
    6ae4:	693b      	ldr	r3, [r7, #16]
    6ae6:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    6ae8:	46c0      	nop			; (mov r8, r8)
    6aea:	4b43      	ldr	r3, [pc, #268]	; (6bf8 <wdt_set_config+0x168>)
    6aec:	4798      	blx	r3
    6aee:	1e03      	subs	r3, r0, #0
    6af0:	d1fb      	bne.n	6aea <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    6af2:	687b      	ldr	r3, [r7, #4]
    6af4:	785b      	ldrb	r3, [r3, #1]
    6af6:	2201      	movs	r2, #1
    6af8:	4053      	eors	r3, r2
    6afa:	b2db      	uxtb	r3, r3
    6afc:	2b00      	cmp	r3, #0
    6afe:	d001      	beq.n	6b04 <wdt_set_config+0x74>
		return STATUS_OK;
    6b00:	2300      	movs	r3, #0
    6b02:	e06e      	b.n	6be2 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	789a      	ldrb	r2, [r3, #2]
    6b08:	230c      	movs	r3, #12
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    6b0e:	230c      	movs	r3, #12
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	0019      	movs	r1, r3
    6b14:	2003      	movs	r0, #3
    6b16:	4b39      	ldr	r3, [pc, #228]	; (6bfc <wdt_set_config+0x16c>)
    6b18:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    6b1a:	2003      	movs	r0, #3
    6b1c:	4b38      	ldr	r3, [pc, #224]	; (6c00 <wdt_set_config+0x170>)
    6b1e:	4798      	blx	r3
	if (config->always_on) {
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	2b00      	cmp	r3, #0
    6b26:	d002      	beq.n	6b2e <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    6b28:	2003      	movs	r0, #3
    6b2a:	4b36      	ldr	r3, [pc, #216]	; (6c04 <wdt_set_config+0x174>)
    6b2c:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    6b2e:	2300      	movs	r3, #0
    6b30:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	78db      	ldrb	r3, [r3, #3]
    6b36:	3b01      	subs	r3, #1
    6b38:	001a      	movs	r2, r3
    6b3a:	697b      	ldr	r3, [r7, #20]
    6b3c:	4313      	orrs	r3, r2
    6b3e:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	791b      	ldrb	r3, [r3, #4]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d010      	beq.n	6b6a <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    6b48:	693b      	ldr	r3, [r7, #16]
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	b2db      	uxtb	r3, r3
    6b4e:	2204      	movs	r2, #4
    6b50:	4313      	orrs	r3, r2
    6b52:	b2da      	uxtb	r2, r3
    6b54:	693b      	ldr	r3, [r7, #16]
    6b56:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	791b      	ldrb	r3, [r3, #4]
    6b5c:	3b01      	subs	r3, #1
    6b5e:	011b      	lsls	r3, r3, #4
    6b60:	001a      	movs	r2, r3
    6b62:	697b      	ldr	r3, [r7, #20]
    6b64:	4313      	orrs	r3, r2
    6b66:	617b      	str	r3, [r7, #20]
    6b68:	e007      	b.n	6b7a <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    6b6a:	693b      	ldr	r3, [r7, #16]
    6b6c:	781b      	ldrb	r3, [r3, #0]
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	2204      	movs	r2, #4
    6b72:	4393      	bics	r3, r2
    6b74:	b2da      	uxtb	r2, r3
    6b76:	693b      	ldr	r3, [r7, #16]
    6b78:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	4b1e      	ldr	r3, [pc, #120]	; (6bf8 <wdt_set_config+0x168>)
    6b7e:	4798      	blx	r3
    6b80:	1e03      	subs	r3, r0, #0
    6b82:	d1fb      	bne.n	6b7c <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    6b84:	697b      	ldr	r3, [r7, #20]
    6b86:	b2da      	uxtb	r2, r3
    6b88:	693b      	ldr	r3, [r7, #16]
    6b8a:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    6b8c:	687b      	ldr	r3, [r7, #4]
    6b8e:	795b      	ldrb	r3, [r3, #5]
    6b90:	2b00      	cmp	r3, #0
    6b92:	d00a      	beq.n	6baa <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    6b94:	46c0      	nop			; (mov r8, r8)
    6b96:	4b18      	ldr	r3, [pc, #96]	; (6bf8 <wdt_set_config+0x168>)
    6b98:	4798      	blx	r3
    6b9a:	1e03      	subs	r3, r0, #0
    6b9c:	d1fb      	bne.n	6b96 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    6b9e:	687b      	ldr	r3, [r7, #4]
    6ba0:	795b      	ldrb	r3, [r3, #5]
    6ba2:	3b01      	subs	r3, #1
    6ba4:	b2da      	uxtb	r2, r3
    6ba6:	693b      	ldr	r3, [r7, #16]
    6ba8:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d009      	beq.n	6bc6 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    6bb2:	693b      	ldr	r3, [r7, #16]
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	b2db      	uxtb	r3, r3
    6bb8:	2280      	movs	r2, #128	; 0x80
    6bba:	4252      	negs	r2, r2
    6bbc:	4313      	orrs	r3, r2
    6bbe:	b2da      	uxtb	r2, r3
    6bc0:	693b      	ldr	r3, [r7, #16]
    6bc2:	701a      	strb	r2, [r3, #0]
    6bc4:	e007      	b.n	6bd6 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    6bc6:	693b      	ldr	r3, [r7, #16]
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	b2db      	uxtb	r3, r3
    6bcc:	2202      	movs	r2, #2
    6bce:	4313      	orrs	r3, r2
    6bd0:	b2da      	uxtb	r2, r3
    6bd2:	693b      	ldr	r3, [r7, #16]
    6bd4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	4b07      	ldr	r3, [pc, #28]	; (6bf8 <wdt_set_config+0x168>)
    6bda:	4798      	blx	r3
    6bdc:	1e03      	subs	r3, r0, #0
    6bde:	d1fb      	bne.n	6bd8 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    6be0:	2300      	movs	r3, #0
}
    6be2:	0018      	movs	r0, r3
    6be4:	46bd      	mov	sp, r7
    6be6:	b006      	add	sp, #24
    6be8:	bd80      	pop	{r7, pc}
    6bea:	46c0      	nop			; (mov r8, r8)
    6bec:	40001000 	.word	0x40001000
    6bf0:	000069e5 	.word	0x000069e5
    6bf4:	00006a69 	.word	0x00006a69
    6bf8:	00006a41 	.word	0x00006a41
    6bfc:	00008095 	.word	0x00008095
    6c00:	000080d9 	.word	0x000080d9
    6c04:	000081b9 	.word	0x000081b9

00006c08 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b082      	sub	sp, #8
    6c0c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6c0e:	4b07      	ldr	r3, [pc, #28]	; (6c2c <wdt_reset_count+0x24>)
    6c10:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	22a5      	movs	r2, #165	; 0xa5
    6c16:	721a      	strb	r2, [r3, #8]

	while (wdt_is_syncing()) {
    6c18:	46c0      	nop			; (mov r8, r8)
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <wdt_reset_count+0x28>)
    6c1c:	4798      	blx	r3
    6c1e:	1e03      	subs	r3, r0, #0
    6c20:	d1fb      	bne.n	6c1a <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6c22:	46c0      	nop			; (mov r8, r8)
    6c24:	46bd      	mov	sp, r7
    6c26:	b002      	add	sp, #8
    6c28:	bd80      	pop	{r7, pc}
    6c2a:	46c0      	nop			; (mov r8, r8)
    6c2c:	40001000 	.word	0x40001000
    6c30:	00006a41 	.word	0x00006a41

00006c34 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b082      	sub	sp, #8
    6c38:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    6c3a:	4b04      	ldr	r3, [pc, #16]	; (6c4c <wdt_clear_early_warning+0x18>)
    6c3c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	2201      	movs	r2, #1
    6c42:	719a      	strb	r2, [r3, #6]
}
    6c44:	46c0      	nop			; (mov r8, r8)
    6c46:	46bd      	mov	sp, r7
    6c48:	b002      	add	sp, #8
    6c4a:	bd80      	pop	{r7, pc}
    6c4c:	40001000 	.word	0x40001000

00006c50 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    6c54:	4b05      	ldr	r3, [pc, #20]	; (6c6c <WDT_Handler+0x1c>)
    6c56:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    6c58:	4b05      	ldr	r3, [pc, #20]	; (6c70 <WDT_Handler+0x20>)
    6c5a:	681b      	ldr	r3, [r3, #0]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d002      	beq.n	6c66 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    6c60:	4b03      	ldr	r3, [pc, #12]	; (6c70 <WDT_Handler+0x20>)
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	4798      	blx	r3
	}
}
    6c66:	46c0      	nop			; (mov r8, r8)
    6c68:	46bd      	mov	sp, r7
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	00006c35 	.word	0x00006c35
    6c70:	2000532c 	.word	0x2000532c

00006c74 <system_gclk_chan_get_config_defaults>:
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	2200      	movs	r2, #0
    6c80:	701a      	strb	r2, [r3, #0]
}
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	46bd      	mov	sp, r7
    6c86:	b002      	add	sp, #8
    6c88:	bd80      	pop	{r7, pc}
	...

00006c8c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6c8c:	b580      	push	{r7, lr}
    6c8e:	b084      	sub	sp, #16
    6c90:	af00      	add	r7, sp, #0
    6c92:	0002      	movs	r2, r0
    6c94:	1dfb      	adds	r3, r7, #7
    6c96:	701a      	strb	r2, [r3, #0]
    6c98:	1dbb      	adds	r3, r7, #6
    6c9a:	1c0a      	adds	r2, r1, #0
    6c9c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6c9e:	4b1a      	ldr	r3, [pc, #104]	; (6d08 <sercom_set_gclk_generator+0x7c>)
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	2201      	movs	r2, #1
    6ca4:	4053      	eors	r3, r2
    6ca6:	b2db      	uxtb	r3, r3
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d103      	bne.n	6cb4 <sercom_set_gclk_generator+0x28>
    6cac:	1dbb      	adds	r3, r7, #6
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	d01b      	beq.n	6cec <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6cb4:	230c      	movs	r3, #12
    6cb6:	18fb      	adds	r3, r7, r3
    6cb8:	0018      	movs	r0, r3
    6cba:	4b14      	ldr	r3, [pc, #80]	; (6d0c <sercom_set_gclk_generator+0x80>)
    6cbc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6cbe:	230c      	movs	r3, #12
    6cc0:	18fb      	adds	r3, r7, r3
    6cc2:	1dfa      	adds	r2, r7, #7
    6cc4:	7812      	ldrb	r2, [r2, #0]
    6cc6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6cc8:	230c      	movs	r3, #12
    6cca:	18fb      	adds	r3, r7, r3
    6ccc:	0019      	movs	r1, r3
    6cce:	2013      	movs	r0, #19
    6cd0:	4b0f      	ldr	r3, [pc, #60]	; (6d10 <sercom_set_gclk_generator+0x84>)
    6cd2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6cd4:	2013      	movs	r0, #19
    6cd6:	4b0f      	ldr	r3, [pc, #60]	; (6d14 <sercom_set_gclk_generator+0x88>)
    6cd8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6cda:	4b0b      	ldr	r3, [pc, #44]	; (6d08 <sercom_set_gclk_generator+0x7c>)
    6cdc:	1dfa      	adds	r2, r7, #7
    6cde:	7812      	ldrb	r2, [r2, #0]
    6ce0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6ce2:	4b09      	ldr	r3, [pc, #36]	; (6d08 <sercom_set_gclk_generator+0x7c>)
    6ce4:	2201      	movs	r2, #1
    6ce6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6ce8:	2300      	movs	r3, #0
    6cea:	e008      	b.n	6cfe <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6cec:	4b06      	ldr	r3, [pc, #24]	; (6d08 <sercom_set_gclk_generator+0x7c>)
    6cee:	785b      	ldrb	r3, [r3, #1]
    6cf0:	1dfa      	adds	r2, r7, #7
    6cf2:	7812      	ldrb	r2, [r2, #0]
    6cf4:	429a      	cmp	r2, r3
    6cf6:	d101      	bne.n	6cfc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6cf8:	2300      	movs	r3, #0
    6cfa:	e000      	b.n	6cfe <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6cfc:	231d      	movs	r3, #29
}
    6cfe:	0018      	movs	r0, r3
    6d00:	46bd      	mov	sp, r7
    6d02:	b004      	add	sp, #16
    6d04:	bd80      	pop	{r7, pc}
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	2000529c 	.word	0x2000529c
    6d0c:	00006c75 	.word	0x00006c75
    6d10:	00008095 	.word	0x00008095
    6d14:	000080d9 	.word	0x000080d9

00006d18 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b082      	sub	sp, #8
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
    6d20:	000a      	movs	r2, r1
    6d22:	1cfb      	adds	r3, r7, #3
    6d24:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	4a4d      	ldr	r2, [pc, #308]	; (6e60 <_sercom_get_default_pad+0x148>)
    6d2a:	4293      	cmp	r3, r2
    6d2c:	d03f      	beq.n	6dae <_sercom_get_default_pad+0x96>
    6d2e:	4a4c      	ldr	r2, [pc, #304]	; (6e60 <_sercom_get_default_pad+0x148>)
    6d30:	4293      	cmp	r3, r2
    6d32:	d806      	bhi.n	6d42 <_sercom_get_default_pad+0x2a>
    6d34:	4a4b      	ldr	r2, [pc, #300]	; (6e64 <_sercom_get_default_pad+0x14c>)
    6d36:	4293      	cmp	r3, r2
    6d38:	d00f      	beq.n	6d5a <_sercom_get_default_pad+0x42>
    6d3a:	4a4b      	ldr	r2, [pc, #300]	; (6e68 <_sercom_get_default_pad+0x150>)
    6d3c:	4293      	cmp	r3, r2
    6d3e:	d021      	beq.n	6d84 <_sercom_get_default_pad+0x6c>
    6d40:	e089      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6d42:	4a4a      	ldr	r2, [pc, #296]	; (6e6c <_sercom_get_default_pad+0x154>)
    6d44:	4293      	cmp	r3, r2
    6d46:	d100      	bne.n	6d4a <_sercom_get_default_pad+0x32>
    6d48:	e05b      	b.n	6e02 <_sercom_get_default_pad+0xea>
    6d4a:	4a49      	ldr	r2, [pc, #292]	; (6e70 <_sercom_get_default_pad+0x158>)
    6d4c:	4293      	cmp	r3, r2
    6d4e:	d100      	bne.n	6d52 <_sercom_get_default_pad+0x3a>
    6d50:	e06c      	b.n	6e2c <_sercom_get_default_pad+0x114>
    6d52:	4a48      	ldr	r2, [pc, #288]	; (6e74 <_sercom_get_default_pad+0x15c>)
    6d54:	4293      	cmp	r3, r2
    6d56:	d03f      	beq.n	6dd8 <_sercom_get_default_pad+0xc0>
    6d58:	e07d      	b.n	6e56 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6d5a:	1cfb      	adds	r3, r7, #3
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	2b01      	cmp	r3, #1
    6d60:	d00a      	beq.n	6d78 <_sercom_get_default_pad+0x60>
    6d62:	dc02      	bgt.n	6d6a <_sercom_get_default_pad+0x52>
    6d64:	2b00      	cmp	r3, #0
    6d66:	d005      	beq.n	6d74 <_sercom_get_default_pad+0x5c>
    6d68:	e075      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6d6a:	2b02      	cmp	r3, #2
    6d6c:	d006      	beq.n	6d7c <_sercom_get_default_pad+0x64>
    6d6e:	2b03      	cmp	r3, #3
    6d70:	d006      	beq.n	6d80 <_sercom_get_default_pad+0x68>
    6d72:	e070      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6d74:	4b40      	ldr	r3, [pc, #256]	; (6e78 <_sercom_get_default_pad+0x160>)
    6d76:	e06f      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6d78:	4b40      	ldr	r3, [pc, #256]	; (6e7c <_sercom_get_default_pad+0x164>)
    6d7a:	e06d      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6d7c:	4b40      	ldr	r3, [pc, #256]	; (6e80 <_sercom_get_default_pad+0x168>)
    6d7e:	e06b      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6d80:	4b40      	ldr	r3, [pc, #256]	; (6e84 <_sercom_get_default_pad+0x16c>)
    6d82:	e069      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6d84:	1cfb      	adds	r3, r7, #3
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	2b01      	cmp	r3, #1
    6d8a:	d00a      	beq.n	6da2 <_sercom_get_default_pad+0x8a>
    6d8c:	dc02      	bgt.n	6d94 <_sercom_get_default_pad+0x7c>
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d005      	beq.n	6d9e <_sercom_get_default_pad+0x86>
    6d92:	e060      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6d94:	2b02      	cmp	r3, #2
    6d96:	d006      	beq.n	6da6 <_sercom_get_default_pad+0x8e>
    6d98:	2b03      	cmp	r3, #3
    6d9a:	d006      	beq.n	6daa <_sercom_get_default_pad+0x92>
    6d9c:	e05b      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6d9e:	2303      	movs	r3, #3
    6da0:	e05a      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6da2:	4b39      	ldr	r3, [pc, #228]	; (6e88 <_sercom_get_default_pad+0x170>)
    6da4:	e058      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6da6:	4b39      	ldr	r3, [pc, #228]	; (6e8c <_sercom_get_default_pad+0x174>)
    6da8:	e056      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6daa:	4b39      	ldr	r3, [pc, #228]	; (6e90 <_sercom_get_default_pad+0x178>)
    6dac:	e054      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dae:	1cfb      	adds	r3, r7, #3
    6db0:	781b      	ldrb	r3, [r3, #0]
    6db2:	2b01      	cmp	r3, #1
    6db4:	d00a      	beq.n	6dcc <_sercom_get_default_pad+0xb4>
    6db6:	dc02      	bgt.n	6dbe <_sercom_get_default_pad+0xa6>
    6db8:	2b00      	cmp	r3, #0
    6dba:	d005      	beq.n	6dc8 <_sercom_get_default_pad+0xb0>
    6dbc:	e04b      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6dbe:	2b02      	cmp	r3, #2
    6dc0:	d006      	beq.n	6dd0 <_sercom_get_default_pad+0xb8>
    6dc2:	2b03      	cmp	r3, #3
    6dc4:	d006      	beq.n	6dd4 <_sercom_get_default_pad+0xbc>
    6dc6:	e046      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6dc8:	4b32      	ldr	r3, [pc, #200]	; (6e94 <_sercom_get_default_pad+0x17c>)
    6dca:	e045      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dcc:	4b32      	ldr	r3, [pc, #200]	; (6e98 <_sercom_get_default_pad+0x180>)
    6dce:	e043      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dd0:	4b32      	ldr	r3, [pc, #200]	; (6e9c <_sercom_get_default_pad+0x184>)
    6dd2:	e041      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dd4:	4b32      	ldr	r3, [pc, #200]	; (6ea0 <_sercom_get_default_pad+0x188>)
    6dd6:	e03f      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dd8:	1cfb      	adds	r3, r7, #3
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	2b01      	cmp	r3, #1
    6dde:	d00a      	beq.n	6df6 <_sercom_get_default_pad+0xde>
    6de0:	dc02      	bgt.n	6de8 <_sercom_get_default_pad+0xd0>
    6de2:	2b00      	cmp	r3, #0
    6de4:	d005      	beq.n	6df2 <_sercom_get_default_pad+0xda>
    6de6:	e036      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6de8:	2b02      	cmp	r3, #2
    6dea:	d006      	beq.n	6dfa <_sercom_get_default_pad+0xe2>
    6dec:	2b03      	cmp	r3, #3
    6dee:	d006      	beq.n	6dfe <_sercom_get_default_pad+0xe6>
    6df0:	e031      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6df2:	4b2c      	ldr	r3, [pc, #176]	; (6ea4 <_sercom_get_default_pad+0x18c>)
    6df4:	e030      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6df6:	4b2c      	ldr	r3, [pc, #176]	; (6ea8 <_sercom_get_default_pad+0x190>)
    6df8:	e02e      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dfa:	4b2c      	ldr	r3, [pc, #176]	; (6eac <_sercom_get_default_pad+0x194>)
    6dfc:	e02c      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6dfe:	4b2c      	ldr	r3, [pc, #176]	; (6eb0 <_sercom_get_default_pad+0x198>)
    6e00:	e02a      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e02:	1cfb      	adds	r3, r7, #3
    6e04:	781b      	ldrb	r3, [r3, #0]
    6e06:	2b01      	cmp	r3, #1
    6e08:	d00a      	beq.n	6e20 <_sercom_get_default_pad+0x108>
    6e0a:	dc02      	bgt.n	6e12 <_sercom_get_default_pad+0xfa>
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	d005      	beq.n	6e1c <_sercom_get_default_pad+0x104>
    6e10:	e021      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6e12:	2b02      	cmp	r3, #2
    6e14:	d006      	beq.n	6e24 <_sercom_get_default_pad+0x10c>
    6e16:	2b03      	cmp	r3, #3
    6e18:	d006      	beq.n	6e28 <_sercom_get_default_pad+0x110>
    6e1a:	e01c      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6e1c:	4b25      	ldr	r3, [pc, #148]	; (6eb4 <_sercom_get_default_pad+0x19c>)
    6e1e:	e01b      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e20:	4b25      	ldr	r3, [pc, #148]	; (6eb8 <_sercom_get_default_pad+0x1a0>)
    6e22:	e019      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e24:	4b25      	ldr	r3, [pc, #148]	; (6ebc <_sercom_get_default_pad+0x1a4>)
    6e26:	e017      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e28:	4b25      	ldr	r3, [pc, #148]	; (6ec0 <_sercom_get_default_pad+0x1a8>)
    6e2a:	e015      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e2c:	1cfb      	adds	r3, r7, #3
    6e2e:	781b      	ldrb	r3, [r3, #0]
    6e30:	2b01      	cmp	r3, #1
    6e32:	d00a      	beq.n	6e4a <_sercom_get_default_pad+0x132>
    6e34:	dc02      	bgt.n	6e3c <_sercom_get_default_pad+0x124>
    6e36:	2b00      	cmp	r3, #0
    6e38:	d005      	beq.n	6e46 <_sercom_get_default_pad+0x12e>
    6e3a:	e00c      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6e3c:	2b02      	cmp	r3, #2
    6e3e:	d006      	beq.n	6e4e <_sercom_get_default_pad+0x136>
    6e40:	2b03      	cmp	r3, #3
    6e42:	d006      	beq.n	6e52 <_sercom_get_default_pad+0x13a>
    6e44:	e007      	b.n	6e56 <_sercom_get_default_pad+0x13e>
    6e46:	4b1f      	ldr	r3, [pc, #124]	; (6ec4 <_sercom_get_default_pad+0x1ac>)
    6e48:	e006      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e4a:	4b1f      	ldr	r3, [pc, #124]	; (6ec8 <_sercom_get_default_pad+0x1b0>)
    6e4c:	e004      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e4e:	4b1f      	ldr	r3, [pc, #124]	; (6ecc <_sercom_get_default_pad+0x1b4>)
    6e50:	e002      	b.n	6e58 <_sercom_get_default_pad+0x140>
    6e52:	4b1f      	ldr	r3, [pc, #124]	; (6ed0 <_sercom_get_default_pad+0x1b8>)
    6e54:	e000      	b.n	6e58 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6e56:	2300      	movs	r3, #0
}
    6e58:	0018      	movs	r0, r3
    6e5a:	46bd      	mov	sp, r7
    6e5c:	b002      	add	sp, #8
    6e5e:	bd80      	pop	{r7, pc}
    6e60:	42001000 	.word	0x42001000
    6e64:	42000800 	.word	0x42000800
    6e68:	42000c00 	.word	0x42000c00
    6e6c:	42001800 	.word	0x42001800
    6e70:	42001c00 	.word	0x42001c00
    6e74:	42001400 	.word	0x42001400
    6e78:	00040003 	.word	0x00040003
    6e7c:	00050003 	.word	0x00050003
    6e80:	00060003 	.word	0x00060003
    6e84:	00070003 	.word	0x00070003
    6e88:	00010003 	.word	0x00010003
    6e8c:	001e0003 	.word	0x001e0003
    6e90:	001f0003 	.word	0x001f0003
    6e94:	00080003 	.word	0x00080003
    6e98:	00090003 	.word	0x00090003
    6e9c:	000a0003 	.word	0x000a0003
    6ea0:	000b0003 	.word	0x000b0003
    6ea4:	00100003 	.word	0x00100003
    6ea8:	00110003 	.word	0x00110003
    6eac:	00120003 	.word	0x00120003
    6eb0:	00130003 	.word	0x00130003
    6eb4:	000c0003 	.word	0x000c0003
    6eb8:	000d0003 	.word	0x000d0003
    6ebc:	000e0003 	.word	0x000e0003
    6ec0:	000f0003 	.word	0x000f0003
    6ec4:	00160003 	.word	0x00160003
    6ec8:	00170003 	.word	0x00170003
    6ecc:	00180003 	.word	0x00180003
    6ed0:	00190003 	.word	0x00190003

00006ed4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6ed4:	b590      	push	{r4, r7, lr}
    6ed6:	b08b      	sub	sp, #44	; 0x2c
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6edc:	230c      	movs	r3, #12
    6ede:	18fb      	adds	r3, r7, r3
    6ee0:	4a0f      	ldr	r2, [pc, #60]	; (6f20 <_sercom_get_sercom_inst_index+0x4c>)
    6ee2:	ca13      	ldmia	r2!, {r0, r1, r4}
    6ee4:	c313      	stmia	r3!, {r0, r1, r4}
    6ee6:	ca13      	ldmia	r2!, {r0, r1, r4}
    6ee8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6eea:	2300      	movs	r3, #0
    6eec:	627b      	str	r3, [r7, #36]	; 0x24
    6eee:	e00e      	b.n	6f0e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6ef0:	230c      	movs	r3, #12
    6ef2:	18fb      	adds	r3, r7, r3
    6ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6ef6:	0092      	lsls	r2, r2, #2
    6ef8:	58d3      	ldr	r3, [r2, r3]
    6efa:	001a      	movs	r2, r3
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	429a      	cmp	r2, r3
    6f00:	d102      	bne.n	6f08 <_sercom_get_sercom_inst_index+0x34>
			return i;
    6f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f04:	b2db      	uxtb	r3, r3
    6f06:	e006      	b.n	6f16 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f0a:	3301      	adds	r3, #1
    6f0c:	627b      	str	r3, [r7, #36]	; 0x24
    6f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f10:	2b05      	cmp	r3, #5
    6f12:	d9ed      	bls.n	6ef0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6f14:	2300      	movs	r3, #0
}
    6f16:	0018      	movs	r0, r3
    6f18:	46bd      	mov	sp, r7
    6f1a:	b00b      	add	sp, #44	; 0x2c
    6f1c:	bd90      	pop	{r4, r7, pc}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	0000bf24 	.word	0x0000bf24

00006f24 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	0002      	movs	r2, r0
    6f2c:	1dfb      	adds	r3, r7, #7
    6f2e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6f30:	46c0      	nop			; (mov r8, r8)
    6f32:	46bd      	mov	sp, r7
    6f34:	b002      	add	sp, #8
    6f36:	bd80      	pop	{r7, pc}

00006f38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b084      	sub	sp, #16
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	0002      	movs	r2, r0
    6f40:	6039      	str	r1, [r7, #0]
    6f42:	1dfb      	adds	r3, r7, #7
    6f44:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6f46:	4b13      	ldr	r3, [pc, #76]	; (6f94 <_sercom_set_handler+0x5c>)
    6f48:	781b      	ldrb	r3, [r3, #0]
    6f4a:	2201      	movs	r2, #1
    6f4c:	4053      	eors	r3, r2
    6f4e:	b2db      	uxtb	r3, r3
    6f50:	2b00      	cmp	r3, #0
    6f52:	d015      	beq.n	6f80 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f54:	2300      	movs	r3, #0
    6f56:	60fb      	str	r3, [r7, #12]
    6f58:	e00c      	b.n	6f74 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6f5a:	4b0f      	ldr	r3, [pc, #60]	; (6f98 <_sercom_set_handler+0x60>)
    6f5c:	68fa      	ldr	r2, [r7, #12]
    6f5e:	0092      	lsls	r2, r2, #2
    6f60:	490e      	ldr	r1, [pc, #56]	; (6f9c <_sercom_set_handler+0x64>)
    6f62:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6f64:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <_sercom_set_handler+0x68>)
    6f66:	68fa      	ldr	r2, [r7, #12]
    6f68:	0092      	lsls	r2, r2, #2
    6f6a:	2100      	movs	r1, #0
    6f6c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f6e:	68fb      	ldr	r3, [r7, #12]
    6f70:	3301      	adds	r3, #1
    6f72:	60fb      	str	r3, [r7, #12]
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	2b05      	cmp	r3, #5
    6f78:	d9ef      	bls.n	6f5a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    6f7a:	4b06      	ldr	r3, [pc, #24]	; (6f94 <_sercom_set_handler+0x5c>)
    6f7c:	2201      	movs	r2, #1
    6f7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6f80:	1dfb      	adds	r3, r7, #7
    6f82:	781a      	ldrb	r2, [r3, #0]
    6f84:	4b04      	ldr	r3, [pc, #16]	; (6f98 <_sercom_set_handler+0x60>)
    6f86:	0092      	lsls	r2, r2, #2
    6f88:	6839      	ldr	r1, [r7, #0]
    6f8a:	50d1      	str	r1, [r2, r3]
}
    6f8c:	46c0      	nop			; (mov r8, r8)
    6f8e:	46bd      	mov	sp, r7
    6f90:	b004      	add	sp, #16
    6f92:	bd80      	pop	{r7, pc}
    6f94:	2000529e 	.word	0x2000529e
    6f98:	200052a0 	.word	0x200052a0
    6f9c:	00006f25 	.word	0x00006f25
    6fa0:	20005330 	.word	0x20005330

00006fa4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6fa4:	b590      	push	{r4, r7, lr}
    6fa6:	b085      	sub	sp, #20
    6fa8:	af00      	add	r7, sp, #0
    6faa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6fac:	2308      	movs	r3, #8
    6fae:	18fb      	adds	r3, r7, r3
    6fb0:	4a0b      	ldr	r2, [pc, #44]	; (6fe0 <_sercom_get_interrupt_vector+0x3c>)
    6fb2:	6811      	ldr	r1, [r2, #0]
    6fb4:	6019      	str	r1, [r3, #0]
    6fb6:	8892      	ldrh	r2, [r2, #4]
    6fb8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6fba:	230f      	movs	r3, #15
    6fbc:	18fc      	adds	r4, r7, r3
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	0018      	movs	r0, r3
    6fc2:	4b08      	ldr	r3, [pc, #32]	; (6fe4 <_sercom_get_interrupt_vector+0x40>)
    6fc4:	4798      	blx	r3
    6fc6:	0003      	movs	r3, r0
    6fc8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6fca:	230f      	movs	r3, #15
    6fcc:	18fb      	adds	r3, r7, r3
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	2208      	movs	r2, #8
    6fd2:	18ba      	adds	r2, r7, r2
    6fd4:	5cd3      	ldrb	r3, [r2, r3]
    6fd6:	b25b      	sxtb	r3, r3
}
    6fd8:	0018      	movs	r0, r3
    6fda:	46bd      	mov	sp, r7
    6fdc:	b005      	add	sp, #20
    6fde:	bd90      	pop	{r4, r7, pc}
    6fe0:	0000bf3c 	.word	0x0000bf3c
    6fe4:	00006ed5 	.word	0x00006ed5

00006fe8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6fe8:	b580      	push	{r7, lr}
    6fea:	af00      	add	r7, sp, #0
    6fec:	4b03      	ldr	r3, [pc, #12]	; (6ffc <SERCOM0_Handler+0x14>)
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	2000      	movs	r0, #0
    6ff2:	4798      	blx	r3
    6ff4:	46c0      	nop			; (mov r8, r8)
    6ff6:	46bd      	mov	sp, r7
    6ff8:	bd80      	pop	{r7, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	200052a0 	.word	0x200052a0

00007000 <SERCOM1_Handler>:
    7000:	b580      	push	{r7, lr}
    7002:	af00      	add	r7, sp, #0
    7004:	4b03      	ldr	r3, [pc, #12]	; (7014 <SERCOM1_Handler+0x14>)
    7006:	685b      	ldr	r3, [r3, #4]
    7008:	2001      	movs	r0, #1
    700a:	4798      	blx	r3
    700c:	46c0      	nop			; (mov r8, r8)
    700e:	46bd      	mov	sp, r7
    7010:	bd80      	pop	{r7, pc}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	200052a0 	.word	0x200052a0

00007018 <SERCOM2_Handler>:
    7018:	b580      	push	{r7, lr}
    701a:	af00      	add	r7, sp, #0
    701c:	4b03      	ldr	r3, [pc, #12]	; (702c <SERCOM2_Handler+0x14>)
    701e:	689b      	ldr	r3, [r3, #8]
    7020:	2002      	movs	r0, #2
    7022:	4798      	blx	r3
    7024:	46c0      	nop			; (mov r8, r8)
    7026:	46bd      	mov	sp, r7
    7028:	bd80      	pop	{r7, pc}
    702a:	46c0      	nop			; (mov r8, r8)
    702c:	200052a0 	.word	0x200052a0

00007030 <SERCOM3_Handler>:
    7030:	b580      	push	{r7, lr}
    7032:	af00      	add	r7, sp, #0
    7034:	4b03      	ldr	r3, [pc, #12]	; (7044 <SERCOM3_Handler+0x14>)
    7036:	68db      	ldr	r3, [r3, #12]
    7038:	2003      	movs	r0, #3
    703a:	4798      	blx	r3
    703c:	46c0      	nop			; (mov r8, r8)
    703e:	46bd      	mov	sp, r7
    7040:	bd80      	pop	{r7, pc}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	200052a0 	.word	0x200052a0

00007048 <SERCOM4_Handler>:
    7048:	b580      	push	{r7, lr}
    704a:	af00      	add	r7, sp, #0
    704c:	4b03      	ldr	r3, [pc, #12]	; (705c <SERCOM4_Handler+0x14>)
    704e:	691b      	ldr	r3, [r3, #16]
    7050:	2004      	movs	r0, #4
    7052:	4798      	blx	r3
    7054:	46c0      	nop			; (mov r8, r8)
    7056:	46bd      	mov	sp, r7
    7058:	bd80      	pop	{r7, pc}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	200052a0 	.word	0x200052a0

00007060 <SERCOM5_Handler>:
    7060:	b580      	push	{r7, lr}
    7062:	af00      	add	r7, sp, #0
    7064:	4b03      	ldr	r3, [pc, #12]	; (7074 <SERCOM5_Handler+0x14>)
    7066:	695b      	ldr	r3, [r3, #20]
    7068:	2005      	movs	r0, #5
    706a:	4798      	blx	r3
    706c:	46c0      	nop			; (mov r8, r8)
    706e:	46bd      	mov	sp, r7
    7070:	bd80      	pop	{r7, pc}
    7072:	46c0      	nop			; (mov r8, r8)
    7074:	200052a0 	.word	0x200052a0

00007078 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    7078:	b580      	push	{r7, lr}
    707a:	af00      	add	r7, sp, #0
}
    707c:	46c0      	nop			; (mov r8, r8)
    707e:	46bd      	mov	sp, r7
    7080:	bd80      	pop	{r7, pc}

00007082 <arch_ioport_pin_to_port_id>:
{
    7082:	b580      	push	{r7, lr}
    7084:	b082      	sub	sp, #8
    7086:	af00      	add	r7, sp, #0
    7088:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	095b      	lsrs	r3, r3, #5
}
    708e:	0018      	movs	r0, r3
    7090:	46bd      	mov	sp, r7
    7092:	b002      	add	sp, #8
    7094:	bd80      	pop	{r7, pc}
	...

00007098 <arch_ioport_port_to_base>:
{
    7098:	b580      	push	{r7, lr}
    709a:	b082      	sub	sp, #8
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	01db      	lsls	r3, r3, #7
    70a4:	4a03      	ldr	r2, [pc, #12]	; (70b4 <arch_ioport_port_to_base+0x1c>)
    70a6:	4694      	mov	ip, r2
    70a8:	4463      	add	r3, ip
}
    70aa:	0018      	movs	r0, r3
    70ac:	46bd      	mov	sp, r7
    70ae:	b002      	add	sp, #8
    70b0:	bd80      	pop	{r7, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	41004400 	.word	0x41004400

000070b8 <arch_ioport_pin_to_base>:
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b082      	sub	sp, #8
    70bc:	af00      	add	r7, sp, #0
    70be:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	0018      	movs	r0, r3
    70c4:	4b05      	ldr	r3, [pc, #20]	; (70dc <arch_ioport_pin_to_base+0x24>)
    70c6:	4798      	blx	r3
    70c8:	0003      	movs	r3, r0
    70ca:	0018      	movs	r0, r3
    70cc:	4b04      	ldr	r3, [pc, #16]	; (70e0 <arch_ioport_pin_to_base+0x28>)
    70ce:	4798      	blx	r3
    70d0:	0003      	movs	r3, r0
}
    70d2:	0018      	movs	r0, r3
    70d4:	46bd      	mov	sp, r7
    70d6:	b002      	add	sp, #8
    70d8:	bd80      	pop	{r7, pc}
    70da:	46c0      	nop			; (mov r8, r8)
    70dc:	00007083 	.word	0x00007083
    70e0:	00007099 	.word	0x00007099

000070e4 <arch_ioport_pin_to_mask>:
{
    70e4:	b580      	push	{r7, lr}
    70e6:	b082      	sub	sp, #8
    70e8:	af00      	add	r7, sp, #0
    70ea:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	221f      	movs	r2, #31
    70f0:	4013      	ands	r3, r2
    70f2:	2201      	movs	r2, #1
    70f4:	409a      	lsls	r2, r3
    70f6:	0013      	movs	r3, r2
}
    70f8:	0018      	movs	r0, r3
    70fa:	46bd      	mov	sp, r7
    70fc:	b002      	add	sp, #8
    70fe:	bd80      	pop	{r7, pc}

00007100 <arch_ioport_init>:
{
    7100:	b580      	push	{r7, lr}
    7102:	af00      	add	r7, sp, #0
}
    7104:	46c0      	nop			; (mov r8, r8)
    7106:	46bd      	mov	sp, r7
    7108:	bd80      	pop	{r7, pc}
	...

0000710c <arch_ioport_disable_port>:
{
    710c:	b580      	push	{r7, lr}
    710e:	b084      	sub	sp, #16
    7110:	af00      	add	r7, sp, #0
    7112:	6078      	str	r0, [r7, #4]
    7114:	6039      	str	r1, [r7, #0]
	volatile PortGroup *base = arch_ioport_port_to_base(port);
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	0018      	movs	r0, r3
    711a:	4b15      	ldr	r3, [pc, #84]	; (7170 <arch_ioport_disable_port+0x64>)
    711c:	4798      	blx	r3
    711e:	0003      	movs	r3, r0
    7120:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < 32; i++) {
    7122:	2300      	movs	r3, #0
    7124:	60fb      	str	r3, [r7, #12]
    7126:	e01b      	b.n	7160 <arch_ioport_disable_port+0x54>
		if (mask & (1 << i)) {
    7128:	2201      	movs	r2, #1
    712a:	68fb      	ldr	r3, [r7, #12]
    712c:	409a      	lsls	r2, r3
    712e:	0013      	movs	r3, r2
    7130:	001a      	movs	r2, r3
    7132:	683b      	ldr	r3, [r7, #0]
    7134:	4013      	ands	r3, r2
    7136:	d010      	beq.n	715a <arch_ioport_disable_port+0x4e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    7138:	68ba      	ldr	r2, [r7, #8]
    713a:	2140      	movs	r1, #64	; 0x40
    713c:	68fb      	ldr	r3, [r7, #12]
    713e:	18d3      	adds	r3, r2, r3
    7140:	185b      	adds	r3, r3, r1
    7142:	781b      	ldrb	r3, [r3, #0]
    7144:	b2db      	uxtb	r3, r3
    7146:	2201      	movs	r2, #1
    7148:	4313      	orrs	r3, r2
    714a:	b2d8      	uxtb	r0, r3
    714c:	68ba      	ldr	r2, [r7, #8]
    714e:	2140      	movs	r1, #64	; 0x40
    7150:	68fb      	ldr	r3, [r7, #12]
    7152:	18d3      	adds	r3, r2, r3
    7154:	185b      	adds	r3, r3, r1
    7156:	1c02      	adds	r2, r0, #0
    7158:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 32; i++) {
    715a:	68fb      	ldr	r3, [r7, #12]
    715c:	3301      	adds	r3, #1
    715e:	60fb      	str	r3, [r7, #12]
    7160:	68fb      	ldr	r3, [r7, #12]
    7162:	2b1f      	cmp	r3, #31
    7164:	d9e0      	bls.n	7128 <arch_ioport_disable_port+0x1c>
}
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	46bd      	mov	sp, r7
    716a:	b004      	add	sp, #16
    716c:	bd80      	pop	{r7, pc}
    716e:	46c0      	nop			; (mov r8, r8)
    7170:	00007099 	.word	0x00007099

00007174 <arch_ioport_disable_pin>:
{
    7174:	b590      	push	{r4, r7, lr}
    7176:	b083      	sub	sp, #12
    7178:	af00      	add	r7, sp, #0
    717a:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	0018      	movs	r0, r3
    7180:	4b07      	ldr	r3, [pc, #28]	; (71a0 <arch_ioport_disable_pin+0x2c>)
    7182:	4798      	blx	r3
    7184:	0004      	movs	r4, r0
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	0018      	movs	r0, r3
    718a:	4b06      	ldr	r3, [pc, #24]	; (71a4 <arch_ioport_disable_pin+0x30>)
    718c:	4798      	blx	r3
    718e:	0003      	movs	r3, r0
    7190:	0019      	movs	r1, r3
    7192:	0020      	movs	r0, r4
    7194:	4b04      	ldr	r3, [pc, #16]	; (71a8 <arch_ioport_disable_pin+0x34>)
    7196:	4798      	blx	r3
}
    7198:	46c0      	nop			; (mov r8, r8)
    719a:	46bd      	mov	sp, r7
    719c:	b003      	add	sp, #12
    719e:	bd90      	pop	{r4, r7, pc}
    71a0:	00007083 	.word	0x00007083
    71a4:	000070e5 	.word	0x000070e5
    71a8:	0000710d 	.word	0x0000710d

000071ac <arch_ioport_set_port_mode>:
{
    71ac:	b580      	push	{r7, lr}
    71ae:	b08a      	sub	sp, #40	; 0x28
    71b0:	af00      	add	r7, sp, #0
    71b2:	60f8      	str	r0, [r7, #12]
    71b4:	60b9      	str	r1, [r7, #8]
    71b6:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    71b8:	68fb      	ldr	r3, [r7, #12]
    71ba:	0018      	movs	r0, r3
    71bc:	4b2b      	ldr	r3, [pc, #172]	; (726c <arch_ioport_set_port_mode+0xc0>)
    71be:	4798      	blx	r3
    71c0:	0003      	movs	r3, r0
    71c2:	623b      	str	r3, [r7, #32]
	uint32_t config_mask = 0;
    71c4:	2300      	movs	r3, #0
    71c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    71c8:	2300      	movs	r3, #0
    71ca:	61fb      	str	r3, [r7, #28]
	config_mask |= PORT_WRCONFIG_INEN;
    71cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    71ce:	2280      	movs	r2, #128	; 0x80
    71d0:	0292      	lsls	r2, r2, #10
    71d2:	4313      	orrs	r3, r2
    71d4:	627b      	str	r3, [r7, #36]	; 0x24
	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    71d6:	687b      	ldr	r3, [r7, #4]
    71d8:	2220      	movs	r2, #32
    71da:	4013      	ands	r3, r2
    71dc:	d103      	bne.n	71e6 <arch_ioport_set_port_mode+0x3a>
    71de:	687b      	ldr	r3, [r7, #4]
    71e0:	2210      	movs	r2, #16
    71e2:	4013      	ands	r3, r2
    71e4:	d004      	beq.n	71f0 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    71e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    71e8:	2280      	movs	r2, #128	; 0x80
    71ea:	02d2      	lsls	r2, r2, #11
    71ec:	4313      	orrs	r3, r2
    71ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	2280      	movs	r2, #128	; 0x80
    71f4:	4013      	ands	r3, r2
    71f6:	d004      	beq.n	7202 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    71f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    71fa:	2280      	movs	r2, #128	; 0x80
    71fc:	03d2      	lsls	r2, r2, #15
    71fe:	4313      	orrs	r3, r2
    7200:	627b      	str	r3, [r7, #36]	; 0x24
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	061a      	lsls	r2, r3, #24
    7206:	23f0      	movs	r3, #240	; 0xf0
    7208:	051b      	lsls	r3, r3, #20
    720a:	4013      	ands	r3, r2
    720c:	61fb      	str	r3, [r7, #28]
	uint32_t lower_pin_mask = (mask & 0xFFFF);
    720e:	68bb      	ldr	r3, [r7, #8]
    7210:	041b      	lsls	r3, r3, #16
    7212:	0c1b      	lsrs	r3, r3, #16
    7214:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    7216:	68bb      	ldr	r3, [r7, #8]
    7218:	0c1b      	lsrs	r3, r3, #16
    721a:	617b      	str	r3, [r7, #20]
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    721c:	69ba      	ldr	r2, [r7, #24]
    721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7220:	431a      	orrs	r2, r3
			config_mask | config_mux |
    7222:	69fb      	ldr	r3, [r7, #28]
    7224:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7226:	22a0      	movs	r2, #160	; 0xa0
    7228:	05d2      	lsls	r2, r2, #23
    722a:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    722c:	6a3b      	ldr	r3, [r7, #32]
    722e:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7230:	697a      	ldr	r2, [r7, #20]
    7232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7234:	431a      	orrs	r2, r3
			config_mask | config_mux |
    7236:	69fb      	ldr	r3, [r7, #28]
    7238:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    723a:	22d0      	movs	r2, #208	; 0xd0
    723c:	0612      	lsls	r2, r2, #24
    723e:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    7240:	6a3b      	ldr	r3, [r7, #32]
    7242:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_PULLDOWN) {
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	2220      	movs	r2, #32
    7248:	4013      	ands	r3, r2
    724a:	d003      	beq.n	7254 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    724c:	6a3b      	ldr	r3, [r7, #32]
    724e:	68ba      	ldr	r2, [r7, #8]
    7250:	615a      	str	r2, [r3, #20]
}
    7252:	e006      	b.n	7262 <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	2210      	movs	r2, #16
    7258:	4013      	ands	r3, r2
    725a:	d002      	beq.n	7262 <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    725c:	6a3b      	ldr	r3, [r7, #32]
    725e:	68ba      	ldr	r2, [r7, #8]
    7260:	619a      	str	r2, [r3, #24]
}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	46bd      	mov	sp, r7
    7266:	b00a      	add	sp, #40	; 0x28
    7268:	bd80      	pop	{r7, pc}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	00007099 	.word	0x00007099

00007270 <arch_ioport_set_pin_mode>:
{
    7270:	b590      	push	{r4, r7, lr}
    7272:	b083      	sub	sp, #12
    7274:	af00      	add	r7, sp, #0
    7276:	6078      	str	r0, [r7, #4]
    7278:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	0018      	movs	r0, r3
    727e:	4b08      	ldr	r3, [pc, #32]	; (72a0 <arch_ioport_set_pin_mode+0x30>)
    7280:	4798      	blx	r3
    7282:	0004      	movs	r4, r0
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	0018      	movs	r0, r3
    7288:	4b06      	ldr	r3, [pc, #24]	; (72a4 <arch_ioport_set_pin_mode+0x34>)
    728a:	4798      	blx	r3
    728c:	0001      	movs	r1, r0
    728e:	683b      	ldr	r3, [r7, #0]
    7290:	001a      	movs	r2, r3
    7292:	0020      	movs	r0, r4
    7294:	4b04      	ldr	r3, [pc, #16]	; (72a8 <arch_ioport_set_pin_mode+0x38>)
    7296:	4798      	blx	r3
}
    7298:	46c0      	nop			; (mov r8, r8)
    729a:	46bd      	mov	sp, r7
    729c:	b003      	add	sp, #12
    729e:	bd90      	pop	{r4, r7, pc}
    72a0:	00007083 	.word	0x00007083
    72a4:	000070e5 	.word	0x000070e5
    72a8:	000071ad 	.word	0x000071ad

000072ac <arch_ioport_set_pin_dir>:
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b084      	sub	sp, #16
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
    72b4:	000a      	movs	r2, r1
    72b6:	1cfb      	adds	r3, r7, #3
    72b8:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	0018      	movs	r0, r3
    72be:	4b18      	ldr	r3, [pc, #96]	; (7320 <arch_ioport_set_pin_dir+0x74>)
    72c0:	4798      	blx	r3
    72c2:	0003      	movs	r3, r0
    72c4:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
    72c6:	1cfb      	adds	r3, r7, #3
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b01      	cmp	r3, #1
    72cc:	d107      	bne.n	72de <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    72ce:	687b      	ldr	r3, [r7, #4]
    72d0:	0018      	movs	r0, r3
    72d2:	4b14      	ldr	r3, [pc, #80]	; (7324 <arch_ioport_set_pin_dir+0x78>)
    72d4:	4798      	blx	r3
    72d6:	0002      	movs	r2, r0
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	609a      	str	r2, [r3, #8]
    72dc:	e00a      	b.n	72f4 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    72de:	1cfb      	adds	r3, r7, #3
    72e0:	781b      	ldrb	r3, [r3, #0]
    72e2:	2b00      	cmp	r3, #0
    72e4:	d106      	bne.n	72f4 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    72e6:	687b      	ldr	r3, [r7, #4]
    72e8:	0018      	movs	r0, r3
    72ea:	4b0e      	ldr	r3, [pc, #56]	; (7324 <arch_ioport_set_pin_dir+0x78>)
    72ec:	4798      	blx	r3
    72ee:	0002      	movs	r2, r0
    72f0:	68fb      	ldr	r3, [r7, #12]
    72f2:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    72f4:	68fa      	ldr	r2, [r7, #12]
    72f6:	2140      	movs	r1, #64	; 0x40
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	18d3      	adds	r3, r2, r3
    72fc:	185b      	adds	r3, r3, r1
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	b2db      	uxtb	r3, r3
    7302:	2202      	movs	r2, #2
    7304:	4313      	orrs	r3, r2
    7306:	b2d8      	uxtb	r0, r3
    7308:	68fa      	ldr	r2, [r7, #12]
    730a:	2140      	movs	r1, #64	; 0x40
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	18d3      	adds	r3, r2, r3
    7310:	185b      	adds	r3, r3, r1
    7312:	1c02      	adds	r2, r0, #0
    7314:	701a      	strb	r2, [r3, #0]
}
    7316:	46c0      	nop			; (mov r8, r8)
    7318:	46bd      	mov	sp, r7
    731a:	b004      	add	sp, #16
    731c:	bd80      	pop	{r7, pc}
    731e:	46c0      	nop			; (mov r8, r8)
    7320:	000070b9 	.word	0x000070b9
    7324:	000070e5 	.word	0x000070e5

00007328 <arch_ioport_set_pin_level>:
{
    7328:	b590      	push	{r4, r7, lr}
    732a:	b083      	sub	sp, #12
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
    7330:	000a      	movs	r2, r1
    7332:	1cfb      	adds	r3, r7, #3
    7334:	701a      	strb	r2, [r3, #0]
	if (level) {
    7336:	1cfb      	adds	r3, r7, #3
    7338:	781b      	ldrb	r3, [r3, #0]
    733a:	2b00      	cmp	r3, #0
    733c:	d00b      	beq.n	7356 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	0018      	movs	r0, r3
    7342:	4b0c      	ldr	r3, [pc, #48]	; (7374 <arch_ioport_set_pin_level+0x4c>)
    7344:	4798      	blx	r3
    7346:	0004      	movs	r4, r0
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	0018      	movs	r0, r3
    734c:	4b0a      	ldr	r3, [pc, #40]	; (7378 <arch_ioport_set_pin_level+0x50>)
    734e:	4798      	blx	r3
    7350:	0003      	movs	r3, r0
    7352:	61a3      	str	r3, [r4, #24]
}
    7354:	e00a      	b.n	736c <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    7356:	687b      	ldr	r3, [r7, #4]
    7358:	0018      	movs	r0, r3
    735a:	4b06      	ldr	r3, [pc, #24]	; (7374 <arch_ioport_set_pin_level+0x4c>)
    735c:	4798      	blx	r3
    735e:	0004      	movs	r4, r0
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	0018      	movs	r0, r3
    7364:	4b04      	ldr	r3, [pc, #16]	; (7378 <arch_ioport_set_pin_level+0x50>)
    7366:	4798      	blx	r3
    7368:	0003      	movs	r3, r0
    736a:	6163      	str	r3, [r4, #20]
}
    736c:	46c0      	nop			; (mov r8, r8)
    736e:	46bd      	mov	sp, r7
    7370:	b003      	add	sp, #12
    7372:	bd90      	pop	{r4, r7, pc}
    7374:	000070b9 	.word	0x000070b9
    7378:	000070e5 	.word	0x000070e5

0000737c <ioport_init>:
{
    737c:	b580      	push	{r7, lr}
    737e:	af00      	add	r7, sp, #0
	arch_ioport_init();
    7380:	4b02      	ldr	r3, [pc, #8]	; (738c <ioport_init+0x10>)
    7382:	4798      	blx	r3
}
    7384:	46c0      	nop			; (mov r8, r8)
    7386:	46bd      	mov	sp, r7
    7388:	bd80      	pop	{r7, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	00007101 	.word	0x00007101

00007390 <ioport_disable_pin>:
{
    7390:	b580      	push	{r7, lr}
    7392:	b082      	sub	sp, #8
    7394:	af00      	add	r7, sp, #0
    7396:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_pin(pin);
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	0018      	movs	r0, r3
    739c:	4b02      	ldr	r3, [pc, #8]	; (73a8 <ioport_disable_pin+0x18>)
    739e:	4798      	blx	r3
}
    73a0:	46c0      	nop			; (mov r8, r8)
    73a2:	46bd      	mov	sp, r7
    73a4:	b002      	add	sp, #8
    73a6:	bd80      	pop	{r7, pc}
    73a8:	00007175 	.word	0x00007175

000073ac <ioport_set_pin_mode>:
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b082      	sub	sp, #8
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
    73b4:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    73b6:	683a      	ldr	r2, [r7, #0]
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	0011      	movs	r1, r2
    73bc:	0018      	movs	r0, r3
    73be:	4b03      	ldr	r3, [pc, #12]	; (73cc <ioport_set_pin_mode+0x20>)
    73c0:	4798      	blx	r3
}
    73c2:	46c0      	nop			; (mov r8, r8)
    73c4:	46bd      	mov	sp, r7
    73c6:	b002      	add	sp, #8
    73c8:	bd80      	pop	{r7, pc}
    73ca:	46c0      	nop			; (mov r8, r8)
    73cc:	00007271 	.word	0x00007271

000073d0 <ioport_set_pin_dir>:
{
    73d0:	b580      	push	{r7, lr}
    73d2:	b082      	sub	sp, #8
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
    73d8:	000a      	movs	r2, r1
    73da:	1cfb      	adds	r3, r7, #3
    73dc:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    73de:	1cfb      	adds	r3, r7, #3
    73e0:	781a      	ldrb	r2, [r3, #0]
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	0011      	movs	r1, r2
    73e6:	0018      	movs	r0, r3
    73e8:	4b02      	ldr	r3, [pc, #8]	; (73f4 <ioport_set_pin_dir+0x24>)
    73ea:	4798      	blx	r3
}
    73ec:	46c0      	nop			; (mov r8, r8)
    73ee:	46bd      	mov	sp, r7
    73f0:	b002      	add	sp, #8
    73f2:	bd80      	pop	{r7, pc}
    73f4:	000072ad 	.word	0x000072ad

000073f8 <ioport_set_pin_level>:
{
    73f8:	b580      	push	{r7, lr}
    73fa:	b082      	sub	sp, #8
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]
    7400:	000a      	movs	r2, r1
    7402:	1cfb      	adds	r3, r7, #3
    7404:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    7406:	1cfb      	adds	r3, r7, #3
    7408:	781a      	ldrb	r2, [r3, #0]
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	0011      	movs	r1, r2
    740e:	0018      	movs	r0, r3
    7410:	4b02      	ldr	r3, [pc, #8]	; (741c <ioport_set_pin_level+0x24>)
    7412:	4798      	blx	r3
}
    7414:	46c0      	nop			; (mov r8, r8)
    7416:	46bd      	mov	sp, r7
    7418:	b002      	add	sp, #8
    741a:	bd80      	pop	{r7, pc}
    741c:	00007329 	.word	0x00007329

00007420 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7420:	b580      	push	{r7, lr}
    7422:	af00      	add	r7, sp, #0
	ioport_init();
    7424:	4b5e      	ldr	r3, [pc, #376]	; (75a0 <system_board_init+0x180>)
    7426:	4798      	blx	r3
	
	// Set up motor
	ioport_set_pin_dir(MOTOR_ENABLE_GPIO, IOPORT_DIR_OUTPUT);
    7428:	2101      	movs	r1, #1
    742a:	2000      	movs	r0, #0
    742c:	4b5d      	ldr	r3, [pc, #372]	; (75a4 <system_board_init+0x184>)
    742e:	4798      	blx	r3
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    7430:	2100      	movs	r1, #0
    7432:	2000      	movs	r0, #0
    7434:	4b5c      	ldr	r3, [pc, #368]	; (75a8 <system_board_init+0x188>)
    7436:	4798      	blx	r3
	ioport_set_pin_dir(MOTOR_READY_GPIO, IOPORT_DIR_INPUT);
    7438:	2100      	movs	r1, #0
    743a:	2001      	movs	r0, #1
    743c:	4b59      	ldr	r3, [pc, #356]	; (75a4 <system_board_init+0x184>)
    743e:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_READY_GPIO, IOPORT_MODE_PULLDOWN);
    7440:	2120      	movs	r1, #32
    7442:	2001      	movs	r0, #1
    7444:	4b59      	ldr	r3, [pc, #356]	; (75ac <system_board_init+0x18c>)
    7446:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_SPEED_GPIO, MOTOR_SPEED_GPIO_FLAGS);
    7448:	2101      	movs	r1, #1
    744a:	2002      	movs	r0, #2
    744c:	4b57      	ldr	r3, [pc, #348]	; (75ac <system_board_init+0x18c>)
    744e:	4798      	blx	r3
	ioport_disable_pin(MOTOR_SPEED_GPIO);
    7450:	2002      	movs	r0, #2
    7452:	4b57      	ldr	r3, [pc, #348]	; (75b0 <system_board_init+0x190>)
    7454:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_NTC_GPIO, MOTOR_NTC_GPIO_FLAGS);
    7456:	2101      	movs	r1, #1
    7458:	2028      	movs	r0, #40	; 0x28
    745a:	4b54      	ldr	r3, [pc, #336]	; (75ac <system_board_init+0x18c>)
    745c:	4798      	blx	r3
	ioport_disable_pin(MOTOR_NTC_GPIO);
    745e:	2028      	movs	r0, #40	; 0x28
    7460:	4b53      	ldr	r3, [pc, #332]	; (75b0 <system_board_init+0x190>)
    7462:	4798      	blx	r3
	
	// Control inputs
	ioport_set_pin_mode(INPUT_POTENTIOMETER_GPIO, INPUT_POTENTIOMETER_GPIO_FLAGS);
    7464:	2101      	movs	r1, #1
    7466:	2029      	movs	r0, #41	; 0x29
    7468:	4b50      	ldr	r3, [pc, #320]	; (75ac <system_board_init+0x18c>)
    746a:	4798      	blx	r3
	ioport_disable_pin(INPUT_POTENTIOMETER_GPIO);
    746c:	2029      	movs	r0, #41	; 0x29
    746e:	4b50      	ldr	r3, [pc, #320]	; (75b0 <system_board_init+0x190>)
    7470:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_PUSHBUTTON_GPIO, IOPORT_DIR_INPUT);
    7472:	2100      	movs	r1, #0
    7474:	200c      	movs	r0, #12
    7476:	4b4b      	ldr	r3, [pc, #300]	; (75a4 <system_board_init+0x184>)
    7478:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_PUSHBUTTON_GPIO, IOPORT_MODE_PULLDOWN);
    747a:	2120      	movs	r1, #32
    747c:	200c      	movs	r0, #12
    747e:	4b4b      	ldr	r3, [pc, #300]	; (75ac <system_board_init+0x18c>)
    7480:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_ENABLE_GPIO, IOPORT_DIR_INPUT);
    7482:	2100      	movs	r1, #0
    7484:	202b      	movs	r0, #43	; 0x2b
    7486:	4b47      	ldr	r3, [pc, #284]	; (75a4 <system_board_init+0x184>)
    7488:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_ENABLE_GPIO, IOPORT_MODE_PULLDOWN);
    748a:	2120      	movs	r1, #32
    748c:	202b      	movs	r0, #43	; 0x2b
    748e:	4b47      	ldr	r3, [pc, #284]	; (75ac <system_board_init+0x18c>)
    7490:	4798      	blx	r3
	
	// Pressure sensors
	ioport_set_pin_mode(PRESSURE_SENSOR_0_GPIO, PRESSURE_SENSOR_0_GPIO_FLAGS);
    7492:	2101      	movs	r1, #1
    7494:	2004      	movs	r0, #4
    7496:	4b45      	ldr	r3, [pc, #276]	; (75ac <system_board_init+0x18c>)
    7498:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_0_GPIO);
    749a:	2004      	movs	r0, #4
    749c:	4b44      	ldr	r3, [pc, #272]	; (75b0 <system_board_init+0x190>)
    749e:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_1_GPIO, PRESSURE_SENSOR_1_GPIO_FLAGS);
    74a0:	2101      	movs	r1, #1
    74a2:	2005      	movs	r0, #5
    74a4:	4b41      	ldr	r3, [pc, #260]	; (75ac <system_board_init+0x18c>)
    74a6:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_1_GPIO);
    74a8:	2005      	movs	r0, #5
    74aa:	4b41      	ldr	r3, [pc, #260]	; (75b0 <system_board_init+0x190>)
    74ac:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_2_GPIO, PRESSURE_SENSOR_2_GPIO_FLAGS);
    74ae:	2101      	movs	r1, #1
    74b0:	2006      	movs	r0, #6
    74b2:	4b3e      	ldr	r3, [pc, #248]	; (75ac <system_board_init+0x18c>)
    74b4:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_2_GPIO);
    74b6:	2006      	movs	r0, #6
    74b8:	4b3d      	ldr	r3, [pc, #244]	; (75b0 <system_board_init+0x190>)
    74ba:	4798      	blx	r3
	
	// Flow meter
	ioport_set_pin_dir(FLOW_SENSOR_POWER_GPIO, IOPORT_DIR_OUTPUT);
    74bc:	2101      	movs	r1, #1
    74be:	2037      	movs	r0, #55	; 0x37
    74c0:	4b38      	ldr	r3, [pc, #224]	; (75a4 <system_board_init+0x184>)
    74c2:	4798      	blx	r3
	ioport_set_pin_level(FLOW_SENSOR_POWER_GPIO, !FLOW_SENSOR_POWER_ACTIVE_LEVEL);
    74c4:	2100      	movs	r1, #0
    74c6:	2037      	movs	r0, #55	; 0x37
    74c8:	4b37      	ldr	r3, [pc, #220]	; (75a8 <system_board_init+0x188>)
    74ca:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_SDA_GPIO, FLOW_SENSOR_SDA_GPIO_FLAGS);
    74cc:	2102      	movs	r1, #2
    74ce:	2016      	movs	r0, #22
    74d0:	4b36      	ldr	r3, [pc, #216]	; (75ac <system_board_init+0x18c>)
    74d2:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SDA_GPIO);
    74d4:	2016      	movs	r0, #22
    74d6:	4b36      	ldr	r3, [pc, #216]	; (75b0 <system_board_init+0x190>)
    74d8:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_SCL_GPIO, FLOW_SENSOR_SCL_GPIO_FLAGS);
    74da:	2102      	movs	r1, #2
    74dc:	2017      	movs	r0, #23
    74de:	4b33      	ldr	r3, [pc, #204]	; (75ac <system_board_init+0x18c>)
    74e0:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SCL_GPIO);
    74e2:	2017      	movs	r0, #23
    74e4:	4b32      	ldr	r3, [pc, #200]	; (75b0 <system_board_init+0x190>)
    74e6:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_ANALOG_GPIO, FLOW_SENSOR_ANALOG_GPIO_FLAGS);
    74e8:	2101      	movs	r1, #1
    74ea:	2022      	movs	r0, #34	; 0x22
    74ec:	4b2f      	ldr	r3, [pc, #188]	; (75ac <system_board_init+0x18c>)
    74ee:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_ANALOG_GPIO);
    74f0:	2022      	movs	r0, #34	; 0x22
    74f2:	4b2f      	ldr	r3, [pc, #188]	; (75b0 <system_board_init+0x190>)
    74f4:	4798      	blx	r3
	
	// Screen
	ioport_set_pin_dir(LCD_POWER_GPIO, IOPORT_DIR_OUTPUT);
    74f6:	2101      	movs	r1, #1
    74f8:	201b      	movs	r0, #27
    74fa:	4b2a      	ldr	r3, [pc, #168]	; (75a4 <system_board_init+0x184>)
    74fc:	4798      	blx	r3
	ioport_set_pin_level(LCD_POWER_GPIO, !LCD_POWER_ACTIVE_LEVEL);
    74fe:	2100      	movs	r1, #0
    7500:	201b      	movs	r0, #27
    7502:	4b29      	ldr	r3, [pc, #164]	; (75a8 <system_board_init+0x188>)
    7504:	4798      	blx	r3
	ioport_set_pin_mode(LCD_SDA_GPIO, LCD_SDA_GPIO_FLAGS);
    7506:	2102      	movs	r1, #2
    7508:	2010      	movs	r0, #16
    750a:	4b28      	ldr	r3, [pc, #160]	; (75ac <system_board_init+0x18c>)
    750c:	4798      	blx	r3
	ioport_disable_pin(LCD_SDA_GPIO);
    750e:	2010      	movs	r0, #16
    7510:	4b27      	ldr	r3, [pc, #156]	; (75b0 <system_board_init+0x190>)
    7512:	4798      	blx	r3
	ioport_set_pin_mode(LCD_SCL_GPIO, LCD_SCL_GPIO_FLAGS);
    7514:	2102      	movs	r1, #2
    7516:	2011      	movs	r0, #17
    7518:	4b24      	ldr	r3, [pc, #144]	; (75ac <system_board_init+0x18c>)
    751a:	4798      	blx	r3
	ioport_disable_pin(LCD_SCL_GPIO);
    751c:	2011      	movs	r0, #17
    751e:	4b24      	ldr	r3, [pc, #144]	; (75b0 <system_board_init+0x190>)
    7520:	4798      	blx	r3
	
	// FRAM interface
	ioport_set_pin_dir(FRAM_CS_GPIO, IOPORT_DIR_OUTPUT);
    7522:	2101      	movs	r1, #1
    7524:	200b      	movs	r0, #11
    7526:	4b1f      	ldr	r3, [pc, #124]	; (75a4 <system_board_init+0x184>)
    7528:	4798      	blx	r3
	ioport_set_pin_level(FRAM_CS_GPIO, !FRAM_CS_SELECT_LEVEL);
    752a:	2101      	movs	r1, #1
    752c:	200b      	movs	r0, #11
    752e:	4b1e      	ldr	r3, [pc, #120]	; (75a8 <system_board_init+0x188>)
    7530:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_SCK_GPIO, FRAM_SCK_GPIO_FLAGS);
    7532:	2102      	movs	r1, #2
    7534:	2009      	movs	r0, #9
    7536:	4b1d      	ldr	r3, [pc, #116]	; (75ac <system_board_init+0x18c>)
    7538:	4798      	blx	r3
	ioport_disable_pin(FRAM_SCK_GPIO);
    753a:	2009      	movs	r0, #9
    753c:	4b1c      	ldr	r3, [pc, #112]	; (75b0 <system_board_init+0x190>)
    753e:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MISO_GPIO, FRAM_MISO_GPIO_FLAGS);
    7540:	2102      	movs	r1, #2
    7542:	200a      	movs	r0, #10
    7544:	4b19      	ldr	r3, [pc, #100]	; (75ac <system_board_init+0x18c>)
    7546:	4798      	blx	r3
	ioport_disable_pin(FRAM_MISO_GPIO);
    7548:	200a      	movs	r0, #10
    754a:	4b19      	ldr	r3, [pc, #100]	; (75b0 <system_board_init+0x190>)
    754c:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MOSI_GPIO, FRAM_MOSI_GPIO_FLAGS);
    754e:	2102      	movs	r1, #2
    7550:	2008      	movs	r0, #8
    7552:	4b16      	ldr	r3, [pc, #88]	; (75ac <system_board_init+0x18c>)
    7554:	4798      	blx	r3
	ioport_disable_pin(FRAM_MOSI_GPIO);
    7556:	2008      	movs	r0, #8
    7558:	4b15      	ldr	r3, [pc, #84]	; (75b0 <system_board_init+0x190>)
    755a:	4798      	blx	r3
	
	// Alarm pins
	ioport_set_pin_dir(BUZZER_GPIO, IOPORT_DIR_OUTPUT);
    755c:	2101      	movs	r1, #1
    755e:	2036      	movs	r0, #54	; 0x36
    7560:	4b10      	ldr	r3, [pc, #64]	; (75a4 <system_board_init+0x184>)
    7562:	4798      	blx	r3
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    7564:	2100      	movs	r1, #0
    7566:	2036      	movs	r0, #54	; 0x36
    7568:	4b0f      	ldr	r3, [pc, #60]	; (75a8 <system_board_init+0x188>)
    756a:	4798      	blx	r3
	ioport_set_pin_dir(WATCHDOG_GPIO, IOPORT_DIR_OUTPUT);
    756c:	2101      	movs	r1, #1
    756e:	2015      	movs	r0, #21
    7570:	4b0c      	ldr	r3, [pc, #48]	; (75a4 <system_board_init+0x184>)
    7572:	4798      	blx	r3
	ioport_set_pin_level(WATCHDOG_GPIO, !WATCHDOG_GPIO_ACTIVE_LEVEL);
    7574:	2100      	movs	r1, #0
    7576:	2015      	movs	r0, #21
    7578:	4b0b      	ldr	r3, [pc, #44]	; (75a8 <system_board_init+0x188>)
    757a:	4798      	blx	r3

	// Power monitoring
	ioport_set_pin_dir(POWER_MONITOR_GPIO, IOPORT_DIR_INPUT);
    757c:	2100      	movs	r1, #0
    757e:	201c      	movs	r0, #28
    7580:	4b08      	ldr	r3, [pc, #32]	; (75a4 <system_board_init+0x184>)
    7582:	4798      	blx	r3
	ioport_set_pin_mode(POWER_MONITOR_GPIO, IOPORT_MODE_PULLDOWN);
    7584:	2120      	movs	r1, #32
    7586:	201c      	movs	r0, #28
    7588:	4b08      	ldr	r3, [pc, #32]	; (75ac <system_board_init+0x18c>)
    758a:	4798      	blx	r3
	
	// Vref
	ioport_set_pin_mode(VREFA_GPIO, VREFA_GPIO_FLAGS);
    758c:	2102      	movs	r1, #2
    758e:	2003      	movs	r0, #3
    7590:	4b06      	ldr	r3, [pc, #24]	; (75ac <system_board_init+0x18c>)
    7592:	4798      	blx	r3
	ioport_disable_pin(VREFA_GPIO);
    7594:	2003      	movs	r0, #3
    7596:	4b06      	ldr	r3, [pc, #24]	; (75b0 <system_board_init+0x190>)
    7598:	4798      	blx	r3
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	46bd      	mov	sp, r7
    759e:	bd80      	pop	{r7, pc}
    75a0:	0000737d 	.word	0x0000737d
    75a4:	000073d1 	.word	0x000073d1
    75a8:	000073f9 	.word	0x000073f9
    75ac:	000073ad 	.word	0x000073ad
    75b0:	00007391 	.word	0x00007391

000075b4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    75ba:	4b10      	ldr	r3, [pc, #64]	; (75fc <cpu_irq_enter_critical+0x48>)
    75bc:	681b      	ldr	r3, [r3, #0]
    75be:	2b00      	cmp	r3, #0
    75c0:	d112      	bne.n	75e8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    75c2:	f3ef 8310 	mrs	r3, PRIMASK
    75c6:	607b      	str	r3, [r7, #4]
  return(result);
    75c8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    75ca:	2b00      	cmp	r3, #0
    75cc:	d109      	bne.n	75e2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    75ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    75d0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    75d4:	4b0a      	ldr	r3, [pc, #40]	; (7600 <cpu_irq_enter_critical+0x4c>)
    75d6:	2200      	movs	r2, #0
    75d8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    75da:	4b0a      	ldr	r3, [pc, #40]	; (7604 <cpu_irq_enter_critical+0x50>)
    75dc:	2201      	movs	r2, #1
    75de:	701a      	strb	r2, [r3, #0]
    75e0:	e002      	b.n	75e8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    75e2:	4b08      	ldr	r3, [pc, #32]	; (7604 <cpu_irq_enter_critical+0x50>)
    75e4:	2200      	movs	r2, #0
    75e6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    75e8:	4b04      	ldr	r3, [pc, #16]	; (75fc <cpu_irq_enter_critical+0x48>)
    75ea:	681b      	ldr	r3, [r3, #0]
    75ec:	1c5a      	adds	r2, r3, #1
    75ee:	4b03      	ldr	r3, [pc, #12]	; (75fc <cpu_irq_enter_critical+0x48>)
    75f0:	601a      	str	r2, [r3, #0]
}
    75f2:	46c0      	nop			; (mov r8, r8)
    75f4:	46bd      	mov	sp, r7
    75f6:	b002      	add	sp, #8
    75f8:	bd80      	pop	{r7, pc}
    75fa:	46c0      	nop			; (mov r8, r8)
    75fc:	200052b8 	.word	0x200052b8
    7600:	20000010 	.word	0x20000010
    7604:	200052bc 	.word	0x200052bc

00007608 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7608:	b580      	push	{r7, lr}
    760a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    760c:	4b0b      	ldr	r3, [pc, #44]	; (763c <cpu_irq_leave_critical+0x34>)
    760e:	681b      	ldr	r3, [r3, #0]
    7610:	1e5a      	subs	r2, r3, #1
    7612:	4b0a      	ldr	r3, [pc, #40]	; (763c <cpu_irq_leave_critical+0x34>)
    7614:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7616:	4b09      	ldr	r3, [pc, #36]	; (763c <cpu_irq_leave_critical+0x34>)
    7618:	681b      	ldr	r3, [r3, #0]
    761a:	2b00      	cmp	r3, #0
    761c:	d10a      	bne.n	7634 <cpu_irq_leave_critical+0x2c>
    761e:	4b08      	ldr	r3, [pc, #32]	; (7640 <cpu_irq_leave_critical+0x38>)
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	b2db      	uxtb	r3, r3
    7624:	2b00      	cmp	r3, #0
    7626:	d005      	beq.n	7634 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7628:	4b06      	ldr	r3, [pc, #24]	; (7644 <cpu_irq_leave_critical+0x3c>)
    762a:	2201      	movs	r2, #1
    762c:	701a      	strb	r2, [r3, #0]
    762e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7632:	b662      	cpsie	i
	}
}
    7634:	46c0      	nop			; (mov r8, r8)
    7636:	46bd      	mov	sp, r7
    7638:	bd80      	pop	{r7, pc}
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	200052b8 	.word	0x200052b8
    7640:	200052bc 	.word	0x200052bc
    7644:	20000010 	.word	0x20000010

00007648 <system_gclk_gen_get_config_defaults>:
{
    7648:	b580      	push	{r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	2201      	movs	r2, #1
    7654:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	2200      	movs	r2, #0
    765a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	2206      	movs	r2, #6
    7660:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	2200      	movs	r2, #0
    7666:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	2200      	movs	r2, #0
    766c:	725a      	strb	r2, [r3, #9]
}
    766e:	46c0      	nop			; (mov r8, r8)
    7670:	46bd      	mov	sp, r7
    7672:	b002      	add	sp, #8
    7674:	bd80      	pop	{r7, pc}

00007676 <system_clock_source_osc8m_get_config_defaults>:
{
    7676:	b580      	push	{r7, lr}
    7678:	b082      	sub	sp, #8
    767a:	af00      	add	r7, sp, #0
    767c:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	2203      	movs	r2, #3
    7682:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	2200      	movs	r2, #0
    7688:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	2201      	movs	r2, #1
    768e:	709a      	strb	r2, [r3, #2]
}
    7690:	46c0      	nop			; (mov r8, r8)
    7692:	46bd      	mov	sp, r7
    7694:	b002      	add	sp, #8
    7696:	bd80      	pop	{r7, pc}

00007698 <system_clock_source_dfll_get_config_defaults>:
{
    7698:	b580      	push	{r7, lr}
    769a:	b082      	sub	sp, #8
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	2200      	movs	r2, #0
    76a4:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    76a6:	687b      	ldr	r3, [r7, #4]
    76a8:	2200      	movs	r2, #0
    76aa:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	2200      	movs	r2, #0
    76b0:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	2200      	movs	r2, #0
    76b6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	2200      	movs	r2, #0
    76bc:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	2201      	movs	r2, #1
    76c2:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	2207      	movs	r2, #7
    76c8:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	223f      	movs	r2, #63	; 0x3f
    76ce:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	2201      	movs	r2, #1
    76d4:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    76d6:	687b      	ldr	r3, [r7, #4]
    76d8:	2201      	movs	r2, #1
    76da:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	2206      	movs	r2, #6
    76e0:	821a      	strh	r2, [r3, #16]
}
    76e2:	46c0      	nop			; (mov r8, r8)
    76e4:	46bd      	mov	sp, r7
    76e6:	b002      	add	sp, #8
    76e8:	bd80      	pop	{r7, pc}
	...

000076ec <system_cpu_clock_set_divider>:
{
    76ec:	b580      	push	{r7, lr}
    76ee:	b082      	sub	sp, #8
    76f0:	af00      	add	r7, sp, #0
    76f2:	0002      	movs	r2, r0
    76f4:	1dfb      	adds	r3, r7, #7
    76f6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    76f8:	4a03      	ldr	r2, [pc, #12]	; (7708 <system_cpu_clock_set_divider+0x1c>)
    76fa:	1dfb      	adds	r3, r7, #7
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	7213      	strb	r3, [r2, #8]
}
    7700:	46c0      	nop			; (mov r8, r8)
    7702:	46bd      	mov	sp, r7
    7704:	b002      	add	sp, #8
    7706:	bd80      	pop	{r7, pc}
    7708:	40000400 	.word	0x40000400

0000770c <system_apb_clock_set_divider>:
{
    770c:	b580      	push	{r7, lr}
    770e:	b082      	sub	sp, #8
    7710:	af00      	add	r7, sp, #0
    7712:	0002      	movs	r2, r0
    7714:	1dfb      	adds	r3, r7, #7
    7716:	701a      	strb	r2, [r3, #0]
    7718:	1dbb      	adds	r3, r7, #6
    771a:	1c0a      	adds	r2, r1, #0
    771c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    771e:	1dfb      	adds	r3, r7, #7
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	2b01      	cmp	r3, #1
    7724:	d008      	beq.n	7738 <system_apb_clock_set_divider+0x2c>
    7726:	2b02      	cmp	r3, #2
    7728:	d00b      	beq.n	7742 <system_apb_clock_set_divider+0x36>
    772a:	2b00      	cmp	r3, #0
    772c:	d10e      	bne.n	774c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    772e:	4a0b      	ldr	r2, [pc, #44]	; (775c <system_apb_clock_set_divider+0x50>)
    7730:	1dbb      	adds	r3, r7, #6
    7732:	781b      	ldrb	r3, [r3, #0]
    7734:	7253      	strb	r3, [r2, #9]
			break;
    7736:	e00b      	b.n	7750 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    7738:	4a08      	ldr	r2, [pc, #32]	; (775c <system_apb_clock_set_divider+0x50>)
    773a:	1dbb      	adds	r3, r7, #6
    773c:	781b      	ldrb	r3, [r3, #0]
    773e:	7293      	strb	r3, [r2, #10]
			break;
    7740:	e006      	b.n	7750 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    7742:	4a06      	ldr	r2, [pc, #24]	; (775c <system_apb_clock_set_divider+0x50>)
    7744:	1dbb      	adds	r3, r7, #6
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	72d3      	strb	r3, [r2, #11]
			break;
    774a:	e001      	b.n	7750 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    774c:	2317      	movs	r3, #23
    774e:	e000      	b.n	7752 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    7750:	2300      	movs	r3, #0
}
    7752:	0018      	movs	r0, r3
    7754:	46bd      	mov	sp, r7
    7756:	b002      	add	sp, #8
    7758:	bd80      	pop	{r7, pc}
    775a:	46c0      	nop			; (mov r8, r8)
    775c:	40000400 	.word	0x40000400

00007760 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7760:	b580      	push	{r7, lr}
    7762:	b082      	sub	sp, #8
    7764:	af00      	add	r7, sp, #0
    7766:	0002      	movs	r2, r0
    7768:	1dfb      	adds	r3, r7, #7
    776a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    776c:	4a08      	ldr	r2, [pc, #32]	; (7790 <system_flash_set_waitstates+0x30>)
    776e:	1dfb      	adds	r3, r7, #7
    7770:	781b      	ldrb	r3, [r3, #0]
    7772:	210f      	movs	r1, #15
    7774:	400b      	ands	r3, r1
    7776:	b2d9      	uxtb	r1, r3
    7778:	6853      	ldr	r3, [r2, #4]
    777a:	200f      	movs	r0, #15
    777c:	4001      	ands	r1, r0
    777e:	0049      	lsls	r1, r1, #1
    7780:	201e      	movs	r0, #30
    7782:	4383      	bics	r3, r0
    7784:	430b      	orrs	r3, r1
    7786:	6053      	str	r3, [r2, #4]
}
    7788:	46c0      	nop			; (mov r8, r8)
    778a:	46bd      	mov	sp, r7
    778c:	b002      	add	sp, #8
    778e:	bd80      	pop	{r7, pc}
    7790:	41004000 	.word	0x41004000

00007794 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    7794:	b580      	push	{r7, lr}
    7796:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7798:	46c0      	nop			; (mov r8, r8)
    779a:	4b04      	ldr	r3, [pc, #16]	; (77ac <_system_dfll_wait_for_sync+0x18>)
    779c:	68db      	ldr	r3, [r3, #12]
    779e:	2210      	movs	r2, #16
    77a0:	4013      	ands	r3, r2
    77a2:	d0fa      	beq.n	779a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    77a4:	46c0      	nop			; (mov r8, r8)
    77a6:	46bd      	mov	sp, r7
    77a8:	bd80      	pop	{r7, pc}
    77aa:	46c0      	nop			; (mov r8, r8)
    77ac:	40000800 	.word	0x40000800

000077b0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    77b0:	b580      	push	{r7, lr}
    77b2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    77b4:	4b0c      	ldr	r3, [pc, #48]	; (77e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    77b6:	2202      	movs	r2, #2
    77b8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    77ba:	4b0c      	ldr	r3, [pc, #48]	; (77ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    77bc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    77be:	4a0a      	ldr	r2, [pc, #40]	; (77e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    77c0:	4b0b      	ldr	r3, [pc, #44]	; (77f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    77c2:	689b      	ldr	r3, [r3, #8]
    77c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    77c6:	4a08      	ldr	r2, [pc, #32]	; (77e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    77c8:	4b09      	ldr	r3, [pc, #36]	; (77f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    77ca:	685b      	ldr	r3, [r3, #4]
    77cc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    77ce:	4b06      	ldr	r3, [pc, #24]	; (77e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    77d0:	2200      	movs	r2, #0
    77d2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    77d4:	4b05      	ldr	r3, [pc, #20]	; (77ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    77d6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    77d8:	4a03      	ldr	r2, [pc, #12]	; (77e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    77da:	4b05      	ldr	r3, [pc, #20]	; (77f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    77dc:	681b      	ldr	r3, [r3, #0]
    77de:	b29b      	uxth	r3, r3
    77e0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    77e2:	46c0      	nop			; (mov r8, r8)
    77e4:	46bd      	mov	sp, r7
    77e6:	bd80      	pop	{r7, pc}
    77e8:	40000800 	.word	0x40000800
    77ec:	00007795 	.word	0x00007795
    77f0:	200052c0 	.word	0x200052c0

000077f4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    77f4:	b580      	push	{r7, lr}
    77f6:	b082      	sub	sp, #8
    77f8:	af00      	add	r7, sp, #0
    77fa:	0002      	movs	r2, r0
    77fc:	1dfb      	adds	r3, r7, #7
    77fe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7800:	1dfb      	adds	r3, r7, #7
    7802:	781b      	ldrb	r3, [r3, #0]
    7804:	2b08      	cmp	r3, #8
    7806:	d841      	bhi.n	788c <system_clock_source_get_hz+0x98>
    7808:	009a      	lsls	r2, r3, #2
    780a:	4b23      	ldr	r3, [pc, #140]	; (7898 <system_clock_source_get_hz+0xa4>)
    780c:	18d3      	adds	r3, r2, r3
    780e:	681b      	ldr	r3, [r3, #0]
    7810:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    7812:	4b22      	ldr	r3, [pc, #136]	; (789c <system_clock_source_get_hz+0xa8>)
    7814:	691b      	ldr	r3, [r3, #16]
    7816:	e03a      	b.n	788e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7818:	4b21      	ldr	r3, [pc, #132]	; (78a0 <system_clock_source_get_hz+0xac>)
    781a:	6a1b      	ldr	r3, [r3, #32]
    781c:	059b      	lsls	r3, r3, #22
    781e:	0f9b      	lsrs	r3, r3, #30
    7820:	b2db      	uxtb	r3, r3
    7822:	001a      	movs	r2, r3
    7824:	4b1f      	ldr	r3, [pc, #124]	; (78a4 <system_clock_source_get_hz+0xb0>)
    7826:	40d3      	lsrs	r3, r2
    7828:	e031      	b.n	788e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    782a:	2380      	movs	r3, #128	; 0x80
    782c:	021b      	lsls	r3, r3, #8
    782e:	e02e      	b.n	788e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    7830:	2380      	movs	r3, #128	; 0x80
    7832:	021b      	lsls	r3, r3, #8
    7834:	e02b      	b.n	788e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    7836:	4b19      	ldr	r3, [pc, #100]	; (789c <system_clock_source_get_hz+0xa8>)
    7838:	695b      	ldr	r3, [r3, #20]
    783a:	e028      	b.n	788e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    783c:	4b17      	ldr	r3, [pc, #92]	; (789c <system_clock_source_get_hz+0xa8>)
    783e:	681b      	ldr	r3, [r3, #0]
    7840:	2202      	movs	r2, #2
    7842:	4013      	ands	r3, r2
    7844:	d101      	bne.n	784a <system_clock_source_get_hz+0x56>
			return 0;
    7846:	2300      	movs	r3, #0
    7848:	e021      	b.n	788e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    784a:	4b17      	ldr	r3, [pc, #92]	; (78a8 <system_clock_source_get_hz+0xb4>)
    784c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    784e:	4b13      	ldr	r3, [pc, #76]	; (789c <system_clock_source_get_hz+0xa8>)
    7850:	681b      	ldr	r3, [r3, #0]
    7852:	2224      	movs	r2, #36	; 0x24
    7854:	4013      	ands	r3, r2
    7856:	2b04      	cmp	r3, #4
    7858:	d109      	bne.n	786e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    785a:	2000      	movs	r0, #0
    785c:	4b13      	ldr	r3, [pc, #76]	; (78ac <system_clock_source_get_hz+0xb8>)
    785e:	4798      	blx	r3
    7860:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7862:	4b0e      	ldr	r3, [pc, #56]	; (789c <system_clock_source_get_hz+0xa8>)
    7864:	689b      	ldr	r3, [r3, #8]
    7866:	041b      	lsls	r3, r3, #16
    7868:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    786a:	4353      	muls	r3, r2
    786c:	e00f      	b.n	788e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    786e:	4b10      	ldr	r3, [pc, #64]	; (78b0 <system_clock_source_get_hz+0xbc>)
    7870:	e00d      	b.n	788e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7872:	4a0b      	ldr	r2, [pc, #44]	; (78a0 <system_clock_source_get_hz+0xac>)
    7874:	2350      	movs	r3, #80	; 0x50
    7876:	5cd3      	ldrb	r3, [r2, r3]
    7878:	b2db      	uxtb	r3, r3
    787a:	001a      	movs	r2, r3
    787c:	2304      	movs	r3, #4
    787e:	4013      	ands	r3, r2
    7880:	d101      	bne.n	7886 <system_clock_source_get_hz+0x92>
			return 0;
    7882:	2300      	movs	r3, #0
    7884:	e003      	b.n	788e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    7886:	4b05      	ldr	r3, [pc, #20]	; (789c <system_clock_source_get_hz+0xa8>)
    7888:	68db      	ldr	r3, [r3, #12]
    788a:	e000      	b.n	788e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    788c:	2300      	movs	r3, #0
	}
}
    788e:	0018      	movs	r0, r3
    7890:	46bd      	mov	sp, r7
    7892:	b002      	add	sp, #8
    7894:	bd80      	pop	{r7, pc}
    7896:	46c0      	nop			; (mov r8, r8)
    7898:	0000bf44 	.word	0x0000bf44
    789c:	200052c0 	.word	0x200052c0
    78a0:	40000800 	.word	0x40000800
    78a4:	007a1200 	.word	0x007a1200
    78a8:	00007795 	.word	0x00007795
    78ac:	00008201 	.word	0x00008201
    78b0:	02dc6c00 	.word	0x02dc6c00

000078b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    78b4:	b580      	push	{r7, lr}
    78b6:	b084      	sub	sp, #16
    78b8:	af00      	add	r7, sp, #0
    78ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    78bc:	4b1a      	ldr	r3, [pc, #104]	; (7928 <system_clock_source_osc8m_set_config+0x74>)
    78be:	6a1b      	ldr	r3, [r3, #32]
    78c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    78c2:	687b      	ldr	r3, [r7, #4]
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	1c1a      	adds	r2, r3, #0
    78c8:	2303      	movs	r3, #3
    78ca:	4013      	ands	r3, r2
    78cc:	b2da      	uxtb	r2, r3
    78ce:	230d      	movs	r3, #13
    78d0:	18fb      	adds	r3, r7, r3
    78d2:	2103      	movs	r1, #3
    78d4:	400a      	ands	r2, r1
    78d6:	0010      	movs	r0, r2
    78d8:	781a      	ldrb	r2, [r3, #0]
    78da:	2103      	movs	r1, #3
    78dc:	438a      	bics	r2, r1
    78de:	1c11      	adds	r1, r2, #0
    78e0:	1c02      	adds	r2, r0, #0
    78e2:	430a      	orrs	r2, r1
    78e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	789a      	ldrb	r2, [r3, #2]
    78ea:	230c      	movs	r3, #12
    78ec:	18fb      	adds	r3, r7, r3
    78ee:	01d0      	lsls	r0, r2, #7
    78f0:	781a      	ldrb	r2, [r3, #0]
    78f2:	217f      	movs	r1, #127	; 0x7f
    78f4:	400a      	ands	r2, r1
    78f6:	1c11      	adds	r1, r2, #0
    78f8:	1c02      	adds	r2, r0, #0
    78fa:	430a      	orrs	r2, r1
    78fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    78fe:	687b      	ldr	r3, [r7, #4]
    7900:	785a      	ldrb	r2, [r3, #1]
    7902:	230c      	movs	r3, #12
    7904:	18fb      	adds	r3, r7, r3
    7906:	2101      	movs	r1, #1
    7908:	400a      	ands	r2, r1
    790a:	0190      	lsls	r0, r2, #6
    790c:	781a      	ldrb	r2, [r3, #0]
    790e:	2140      	movs	r1, #64	; 0x40
    7910:	438a      	bics	r2, r1
    7912:	1c11      	adds	r1, r2, #0
    7914:	1c02      	adds	r2, r0, #0
    7916:	430a      	orrs	r2, r1
    7918:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    791a:	4b03      	ldr	r3, [pc, #12]	; (7928 <system_clock_source_osc8m_set_config+0x74>)
    791c:	68fa      	ldr	r2, [r7, #12]
    791e:	621a      	str	r2, [r3, #32]
}
    7920:	46c0      	nop			; (mov r8, r8)
    7922:	46bd      	mov	sp, r7
    7924:	b004      	add	sp, #16
    7926:	bd80      	pop	{r7, pc}
    7928:	40000800 	.word	0x40000800

0000792c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    792c:	b580      	push	{r7, lr}
    792e:	b082      	sub	sp, #8
    7930:	af00      	add	r7, sp, #0
    7932:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	7a1b      	ldrb	r3, [r3, #8]
    7938:	029b      	lsls	r3, r3, #10
    793a:	041b      	lsls	r3, r3, #16
    793c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	895b      	ldrh	r3, [r3, #10]
    7942:	059b      	lsls	r3, r3, #22
    7944:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7946:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    7948:	4b2a      	ldr	r3, [pc, #168]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    794a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    7954:	4313      	orrs	r3, r2
    7956:	b2db      	uxtb	r3, r3
    7958:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    795e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    7960:	687a      	ldr	r2, [r7, #4]
    7962:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    7964:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	785b      	ldrb	r3, [r3, #1]
    796a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    796c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    796e:	4b21      	ldr	r3, [pc, #132]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    7970:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	2b04      	cmp	r3, #4
    7978:	d116      	bne.n	79a8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	7b1b      	ldrb	r3, [r3, #12]
    797e:	069b      	lsls	r3, r3, #26
    7980:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	89db      	ldrh	r3, [r3, #14]
    7986:	041b      	lsls	r3, r3, #16
    7988:	0019      	movs	r1, r3
    798a:	4b1b      	ldr	r3, [pc, #108]	; (79f8 <system_clock_source_dfll_set_config+0xcc>)
    798c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    798e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    7990:	687a      	ldr	r2, [r7, #4]
    7992:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7994:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    7996:	4b17      	ldr	r3, [pc, #92]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    7998:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    799a:	4b16      	ldr	r3, [pc, #88]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	687a      	ldr	r2, [r7, #4]
    79a0:	7812      	ldrb	r2, [r2, #0]
    79a2:	431a      	orrs	r2, r3
    79a4:	4b13      	ldr	r3, [pc, #76]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    79a6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	2b20      	cmp	r3, #32
    79ae:	d11c      	bne.n	79ea <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	7b1b      	ldrb	r3, [r3, #12]
    79b4:	069b      	lsls	r3, r3, #26
    79b6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	89db      	ldrh	r3, [r3, #14]
    79bc:	041b      	lsls	r3, r3, #16
    79be:	0019      	movs	r1, r3
    79c0:	4b0d      	ldr	r3, [pc, #52]	; (79f8 <system_clock_source_dfll_set_config+0xcc>)
    79c2:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    79c4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    79c6:	687a      	ldr	r2, [r7, #4]
    79c8:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    79ca:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    79cc:	4b09      	ldr	r3, [pc, #36]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    79ce:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    79d0:	4b08      	ldr	r3, [pc, #32]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    79d2:	681b      	ldr	r3, [r3, #0]
    79d4:	687a      	ldr	r2, [r7, #4]
    79d6:	7812      	ldrb	r2, [r2, #0]
    79d8:	2104      	movs	r1, #4
    79da:	430a      	orrs	r2, r1
    79dc:	b2d2      	uxtb	r2, r2
    79de:	4313      	orrs	r3, r2
    79e0:	2280      	movs	r2, #128	; 0x80
    79e2:	00d2      	lsls	r2, r2, #3
    79e4:	431a      	orrs	r2, r3
    79e6:	4b03      	ldr	r3, [pc, #12]	; (79f4 <system_clock_source_dfll_set_config+0xc8>)
    79e8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    79ea:	46c0      	nop			; (mov r8, r8)
    79ec:	46bd      	mov	sp, r7
    79ee:	b002      	add	sp, #8
    79f0:	bd80      	pop	{r7, pc}
    79f2:	46c0      	nop			; (mov r8, r8)
    79f4:	200052c0 	.word	0x200052c0
    79f8:	03ff0000 	.word	0x03ff0000

000079fc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	0002      	movs	r2, r0
    7a04:	1dfb      	adds	r3, r7, #7
    7a06:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7a08:	1dfb      	adds	r3, r7, #7
    7a0a:	781b      	ldrb	r3, [r3, #0]
    7a0c:	2b08      	cmp	r3, #8
    7a0e:	d83b      	bhi.n	7a88 <system_clock_source_enable+0x8c>
    7a10:	009a      	lsls	r2, r3, #2
    7a12:	4b21      	ldr	r3, [pc, #132]	; (7a98 <system_clock_source_enable+0x9c>)
    7a14:	18d3      	adds	r3, r2, r3
    7a16:	681b      	ldr	r3, [r3, #0]
    7a18:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7a1a:	4b20      	ldr	r3, [pc, #128]	; (7a9c <system_clock_source_enable+0xa0>)
    7a1c:	4a1f      	ldr	r2, [pc, #124]	; (7a9c <system_clock_source_enable+0xa0>)
    7a1e:	6a12      	ldr	r2, [r2, #32]
    7a20:	2102      	movs	r1, #2
    7a22:	430a      	orrs	r2, r1
    7a24:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    7a26:	2300      	movs	r3, #0
    7a28:	e031      	b.n	7a8e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7a2a:	4b1c      	ldr	r3, [pc, #112]	; (7a9c <system_clock_source_enable+0xa0>)
    7a2c:	4a1b      	ldr	r2, [pc, #108]	; (7a9c <system_clock_source_enable+0xa0>)
    7a2e:	6992      	ldr	r2, [r2, #24]
    7a30:	2102      	movs	r1, #2
    7a32:	430a      	orrs	r2, r1
    7a34:	619a      	str	r2, [r3, #24]
		break;
    7a36:	e029      	b.n	7a8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7a38:	4a18      	ldr	r2, [pc, #96]	; (7a9c <system_clock_source_enable+0xa0>)
    7a3a:	4b18      	ldr	r3, [pc, #96]	; (7a9c <system_clock_source_enable+0xa0>)
    7a3c:	8a1b      	ldrh	r3, [r3, #16]
    7a3e:	b29b      	uxth	r3, r3
    7a40:	2102      	movs	r1, #2
    7a42:	430b      	orrs	r3, r1
    7a44:	b29b      	uxth	r3, r3
    7a46:	8213      	strh	r3, [r2, #16]
		break;
    7a48:	e020      	b.n	7a8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7a4a:	4a14      	ldr	r2, [pc, #80]	; (7a9c <system_clock_source_enable+0xa0>)
    7a4c:	4b13      	ldr	r3, [pc, #76]	; (7a9c <system_clock_source_enable+0xa0>)
    7a4e:	8a9b      	ldrh	r3, [r3, #20]
    7a50:	b29b      	uxth	r3, r3
    7a52:	2102      	movs	r1, #2
    7a54:	430b      	orrs	r3, r1
    7a56:	b29b      	uxth	r3, r3
    7a58:	8293      	strh	r3, [r2, #20]
		break;
    7a5a:	e017      	b.n	7a8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7a5c:	4b10      	ldr	r3, [pc, #64]	; (7aa0 <system_clock_source_enable+0xa4>)
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	2202      	movs	r2, #2
    7a62:	431a      	orrs	r2, r3
    7a64:	4b0e      	ldr	r3, [pc, #56]	; (7aa0 <system_clock_source_enable+0xa4>)
    7a66:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    7a68:	4b0e      	ldr	r3, [pc, #56]	; (7aa4 <system_clock_source_enable+0xa8>)
    7a6a:	4798      	blx	r3
		break;
    7a6c:	e00e      	b.n	7a8c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7a6e:	4a0b      	ldr	r2, [pc, #44]	; (7a9c <system_clock_source_enable+0xa0>)
    7a70:	490a      	ldr	r1, [pc, #40]	; (7a9c <system_clock_source_enable+0xa0>)
    7a72:	2344      	movs	r3, #68	; 0x44
    7a74:	5ccb      	ldrb	r3, [r1, r3]
    7a76:	b2db      	uxtb	r3, r3
    7a78:	2102      	movs	r1, #2
    7a7a:	430b      	orrs	r3, r1
    7a7c:	b2d9      	uxtb	r1, r3
    7a7e:	2344      	movs	r3, #68	; 0x44
    7a80:	54d1      	strb	r1, [r2, r3]
		break;
    7a82:	e003      	b.n	7a8c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    7a84:	2300      	movs	r3, #0
    7a86:	e002      	b.n	7a8e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7a88:	2317      	movs	r3, #23
    7a8a:	e000      	b.n	7a8e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    7a8c:	2300      	movs	r3, #0
}
    7a8e:	0018      	movs	r0, r3
    7a90:	46bd      	mov	sp, r7
    7a92:	b002      	add	sp, #8
    7a94:	bd80      	pop	{r7, pc}
    7a96:	46c0      	nop			; (mov r8, r8)
    7a98:	0000bf68 	.word	0x0000bf68
    7a9c:	40000800 	.word	0x40000800
    7aa0:	200052c0 	.word	0x200052c0
    7aa4:	000077b1 	.word	0x000077b1

00007aa8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    7aa8:	b580      	push	{r7, lr}
    7aaa:	b084      	sub	sp, #16
    7aac:	af00      	add	r7, sp, #0
    7aae:	0002      	movs	r2, r0
    7ab0:	1dfb      	adds	r3, r7, #7
    7ab2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    7ab4:	2300      	movs	r3, #0
    7ab6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    7ab8:	1dfb      	adds	r3, r7, #7
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	2b08      	cmp	r3, #8
    7abe:	d821      	bhi.n	7b04 <system_clock_source_is_ready+0x5c>
    7ac0:	009a      	lsls	r2, r3, #2
    7ac2:	4b18      	ldr	r3, [pc, #96]	; (7b24 <system_clock_source_is_ready+0x7c>)
    7ac4:	18d3      	adds	r3, r2, r3
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    7aca:	2308      	movs	r3, #8
    7acc:	60fb      	str	r3, [r7, #12]
		break;
    7ace:	e01b      	b.n	7b08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    7ad0:	2304      	movs	r3, #4
    7ad2:	60fb      	str	r3, [r7, #12]
		break;
    7ad4:	e018      	b.n	7b08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    7ad6:	2301      	movs	r3, #1
    7ad8:	60fb      	str	r3, [r7, #12]
		break;
    7ada:	e015      	b.n	7b08 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    7adc:	2302      	movs	r3, #2
    7ade:	60fb      	str	r3, [r7, #12]
		break;
    7ae0:	e012      	b.n	7b08 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    7ae2:	2310      	movs	r3, #16
    7ae4:	60fb      	str	r3, [r7, #12]
		}
		break;
    7ae6:	e00f      	b.n	7b08 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    7ae8:	4a0f      	ldr	r2, [pc, #60]	; (7b28 <system_clock_source_is_ready+0x80>)
    7aea:	2350      	movs	r3, #80	; 0x50
    7aec:	5cd3      	ldrb	r3, [r2, r3]
    7aee:	b2db      	uxtb	r3, r3
    7af0:	001a      	movs	r2, r3
    7af2:	2303      	movs	r3, #3
    7af4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    7af6:	3b03      	subs	r3, #3
    7af8:	425a      	negs	r2, r3
    7afa:	4153      	adcs	r3, r2
    7afc:	b2db      	uxtb	r3, r3
    7afe:	e00c      	b.n	7b1a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    7b00:	2301      	movs	r3, #1
    7b02:	e00a      	b.n	7b1a <system_clock_source_is_ready+0x72>

	default:
		return false;
    7b04:	2300      	movs	r3, #0
    7b06:	e008      	b.n	7b1a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    7b08:	4b07      	ldr	r3, [pc, #28]	; (7b28 <system_clock_source_is_ready+0x80>)
    7b0a:	68db      	ldr	r3, [r3, #12]
    7b0c:	68fa      	ldr	r2, [r7, #12]
    7b0e:	401a      	ands	r2, r3
    7b10:	68fb      	ldr	r3, [r7, #12]
    7b12:	1ad3      	subs	r3, r2, r3
    7b14:	425a      	negs	r2, r3
    7b16:	4153      	adcs	r3, r2
    7b18:	b2db      	uxtb	r3, r3
}
    7b1a:	0018      	movs	r0, r3
    7b1c:	46bd      	mov	sp, r7
    7b1e:	b004      	add	sp, #16
    7b20:	bd80      	pop	{r7, pc}
    7b22:	46c0      	nop			; (mov r8, r8)
    7b24:	0000bf8c 	.word	0x0000bf8c
    7b28:	40000800 	.word	0x40000800

00007b2c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    7b2c:	b580      	push	{r7, lr}
    7b2e:	b082      	sub	sp, #8
    7b30:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    7b32:	003b      	movs	r3, r7
    7b34:	2202      	movs	r2, #2
    7b36:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7b38:	2300      	movs	r3, #0
    7b3a:	607b      	str	r3, [r7, #4]
    7b3c:	e009      	b.n	7b52 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	b2db      	uxtb	r3, r3
    7b42:	003a      	movs	r2, r7
    7b44:	0011      	movs	r1, r2
    7b46:	0018      	movs	r0, r3
    7b48:	4b05      	ldr	r3, [pc, #20]	; (7b60 <_switch_peripheral_gclk+0x34>)
    7b4a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	3301      	adds	r3, #1
    7b50:	607b      	str	r3, [r7, #4]
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	2b24      	cmp	r3, #36	; 0x24
    7b56:	d9f2      	bls.n	7b3e <_switch_peripheral_gclk+0x12>
	}
}
    7b58:	46c0      	nop			; (mov r8, r8)
    7b5a:	46bd      	mov	sp, r7
    7b5c:	b002      	add	sp, #8
    7b5e:	bd80      	pop	{r7, pc}
    7b60:	00008095 	.word	0x00008095

00007b64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7b64:	b580      	push	{r7, lr}
    7b66:	b0a6      	sub	sp, #152	; 0x98
    7b68:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7b6a:	4b6f      	ldr	r3, [pc, #444]	; (7d28 <system_clock_init+0x1c4>)
    7b6c:	22c2      	movs	r2, #194	; 0xc2
    7b6e:	00d2      	lsls	r2, r2, #3
    7b70:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    7b72:	2001      	movs	r0, #1
    7b74:	4b6d      	ldr	r3, [pc, #436]	; (7d2c <system_clock_init+0x1c8>)
    7b76:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    7b78:	4b6d      	ldr	r3, [pc, #436]	; (7d30 <system_clock_init+0x1cc>)
    7b7a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    7b7c:	2380      	movs	r3, #128	; 0x80
    7b7e:	18fb      	adds	r3, r7, r3
    7b80:	0018      	movs	r0, r3
    7b82:	4b6c      	ldr	r3, [pc, #432]	; (7d34 <system_clock_init+0x1d0>)
    7b84:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    7b86:	2380      	movs	r3, #128	; 0x80
    7b88:	18fb      	adds	r3, r7, r3
    7b8a:	2200      	movs	r2, #0
    7b8c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    7b8e:	2380      	movs	r3, #128	; 0x80
    7b90:	18fb      	adds	r3, r7, r3
    7b92:	2200      	movs	r2, #0
    7b94:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    7b96:	4b68      	ldr	r3, [pc, #416]	; (7d38 <system_clock_init+0x1d4>)
    7b98:	681b      	ldr	r3, [r3, #0]
    7b9a:	0e9b      	lsrs	r3, r3, #26
    7b9c:	2294      	movs	r2, #148	; 0x94
    7b9e:	18ba      	adds	r2, r7, r2
    7ba0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    7ba2:	2394      	movs	r3, #148	; 0x94
    7ba4:	18fb      	adds	r3, r7, r3
    7ba6:	681b      	ldr	r3, [r3, #0]
    7ba8:	2b3f      	cmp	r3, #63	; 0x3f
    7baa:	d103      	bne.n	7bb4 <system_clock_init+0x50>
		coarse = 0x1f;
    7bac:	231f      	movs	r3, #31
    7bae:	2294      	movs	r2, #148	; 0x94
    7bb0:	18ba      	adds	r2, r7, r2
    7bb2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    7bb4:	2394      	movs	r3, #148	; 0x94
    7bb6:	18fb      	adds	r3, r7, r3
    7bb8:	681b      	ldr	r3, [r3, #0]
    7bba:	b2da      	uxtb	r2, r3
    7bbc:	2380      	movs	r3, #128	; 0x80
    7bbe:	18fb      	adds	r3, r7, r3
    7bc0:	721a      	strb	r2, [r3, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    7bc2:	2380      	movs	r3, #128	; 0x80
    7bc4:	18fb      	adds	r3, r7, r3
    7bc6:	2280      	movs	r2, #128	; 0x80
    7bc8:	0092      	lsls	r2, r2, #2
    7bca:	815a      	strh	r2, [r3, #10]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    7bcc:	2380      	movs	r3, #128	; 0x80
    7bce:	18fb      	adds	r3, r7, r3
    7bd0:	2200      	movs	r2, #0
    7bd2:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    7bd4:	2380      	movs	r3, #128	; 0x80
    7bd6:	18fb      	adds	r3, r7, r3
    7bd8:	2200      	movs	r2, #0
    7bda:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7bdc:	2380      	movs	r3, #128	; 0x80
    7bde:	18fb      	adds	r3, r7, r3
    7be0:	2200      	movs	r2, #0
    7be2:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    7be4:	2380      	movs	r3, #128	; 0x80
    7be6:	18fb      	adds	r3, r7, r3
    7be8:	2200      	movs	r2, #0
    7bea:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    7bec:	2380      	movs	r3, #128	; 0x80
    7bee:	18fb      	adds	r3, r7, r3
    7bf0:	2207      	movs	r2, #7
    7bf2:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    7bf4:	2380      	movs	r3, #128	; 0x80
    7bf6:	18fb      	adds	r3, r7, r3
    7bf8:	223f      	movs	r2, #63	; 0x3f
    7bfa:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    7bfc:	2380      	movs	r3, #128	; 0x80
    7bfe:	18fb      	adds	r3, r7, r3
    7c00:	0018      	movs	r0, r3
    7c02:	4b4e      	ldr	r3, [pc, #312]	; (7d3c <system_clock_init+0x1d8>)
    7c04:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    7c06:	237c      	movs	r3, #124	; 0x7c
    7c08:	18fb      	adds	r3, r7, r3
    7c0a:	0018      	movs	r0, r3
    7c0c:	4b4c      	ldr	r3, [pc, #304]	; (7d40 <system_clock_init+0x1dc>)
    7c0e:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7c10:	237c      	movs	r3, #124	; 0x7c
    7c12:	18fb      	adds	r3, r7, r3
    7c14:	2200      	movs	r2, #0
    7c16:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    7c18:	237c      	movs	r3, #124	; 0x7c
    7c1a:	18fb      	adds	r3, r7, r3
    7c1c:	2201      	movs	r2, #1
    7c1e:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    7c20:	237c      	movs	r3, #124	; 0x7c
    7c22:	18fb      	adds	r3, r7, r3
    7c24:	2200      	movs	r2, #0
    7c26:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7c28:	237c      	movs	r3, #124	; 0x7c
    7c2a:	18fb      	adds	r3, r7, r3
    7c2c:	0018      	movs	r0, r3
    7c2e:	4b45      	ldr	r3, [pc, #276]	; (7d44 <system_clock_init+0x1e0>)
    7c30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7c32:	2006      	movs	r0, #6
    7c34:	4b44      	ldr	r3, [pc, #272]	; (7d48 <system_clock_init+0x1e4>)
    7c36:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7c38:	4b44      	ldr	r3, [pc, #272]	; (7d4c <system_clock_init+0x1e8>)
    7c3a:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7c3c:	2364      	movs	r3, #100	; 0x64
    7c3e:	18fb      	adds	r3, r7, r3
    7c40:	0018      	movs	r0, r3
    7c42:	4b43      	ldr	r3, [pc, #268]	; (7d50 <system_clock_init+0x1ec>)
    7c44:	4798      	blx	r3
    7c46:	2364      	movs	r3, #100	; 0x64
    7c48:	18fb      	adds	r3, r7, r3
    7c4a:	2206      	movs	r2, #6
    7c4c:	701a      	strb	r2, [r3, #0]
    7c4e:	2364      	movs	r3, #100	; 0x64
    7c50:	18fb      	adds	r3, r7, r3
    7c52:	2201      	movs	r2, #1
    7c54:	605a      	str	r2, [r3, #4]
    7c56:	2364      	movs	r3, #100	; 0x64
    7c58:	18fb      	adds	r3, r7, r3
    7c5a:	2200      	movs	r2, #0
    7c5c:	721a      	strb	r2, [r3, #8]
    7c5e:	2364      	movs	r3, #100	; 0x64
    7c60:	18fb      	adds	r3, r7, r3
    7c62:	2200      	movs	r2, #0
    7c64:	725a      	strb	r2, [r3, #9]
    7c66:	2364      	movs	r3, #100	; 0x64
    7c68:	18fb      	adds	r3, r7, r3
    7c6a:	0019      	movs	r1, r3
    7c6c:	2001      	movs	r0, #1
    7c6e:	4b39      	ldr	r3, [pc, #228]	; (7d54 <system_clock_init+0x1f0>)
    7c70:	4798      	blx	r3
    7c72:	2001      	movs	r0, #1
    7c74:	4b38      	ldr	r3, [pc, #224]	; (7d58 <system_clock_init+0x1f4>)
    7c76:	4798      	blx	r3
    7c78:	2340      	movs	r3, #64	; 0x40
    7c7a:	18fb      	adds	r3, r7, r3
    7c7c:	0018      	movs	r0, r3
    7c7e:	4b34      	ldr	r3, [pc, #208]	; (7d50 <system_clock_init+0x1ec>)
    7c80:	4798      	blx	r3
    7c82:	2340      	movs	r3, #64	; 0x40
    7c84:	18fb      	adds	r3, r7, r3
    7c86:	2206      	movs	r2, #6
    7c88:	701a      	strb	r2, [r3, #0]
    7c8a:	2340      	movs	r3, #64	; 0x40
    7c8c:	18fb      	adds	r3, r7, r3
    7c8e:	22ff      	movs	r2, #255	; 0xff
    7c90:	605a      	str	r2, [r3, #4]
    7c92:	2340      	movs	r3, #64	; 0x40
    7c94:	18fb      	adds	r3, r7, r3
    7c96:	2200      	movs	r2, #0
    7c98:	721a      	strb	r2, [r3, #8]
    7c9a:	2340      	movs	r3, #64	; 0x40
    7c9c:	18fb      	adds	r3, r7, r3
    7c9e:	2200      	movs	r2, #0
    7ca0:	725a      	strb	r2, [r3, #9]
    7ca2:	2340      	movs	r3, #64	; 0x40
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	0019      	movs	r1, r3
    7ca8:	2004      	movs	r0, #4
    7caa:	4b2a      	ldr	r3, [pc, #168]	; (7d54 <system_clock_init+0x1f0>)
    7cac:	4798      	blx	r3
    7cae:	2004      	movs	r0, #4
    7cb0:	4b29      	ldr	r3, [pc, #164]	; (7d58 <system_clock_init+0x1f4>)
    7cb2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    7cb4:	2007      	movs	r0, #7
    7cb6:	4b24      	ldr	r3, [pc, #144]	; (7d48 <system_clock_init+0x1e4>)
    7cb8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    7cba:	46c0      	nop			; (mov r8, r8)
    7cbc:	2007      	movs	r0, #7
    7cbe:	4b27      	ldr	r3, [pc, #156]	; (7d5c <system_clock_init+0x1f8>)
    7cc0:	4798      	blx	r3
    7cc2:	0003      	movs	r3, r0
    7cc4:	001a      	movs	r2, r3
    7cc6:	2301      	movs	r3, #1
    7cc8:	4053      	eors	r3, r2
    7cca:	b2db      	uxtb	r3, r3
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d1f5      	bne.n	7cbc <system_clock_init+0x158>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    7cd0:	2000      	movs	r0, #0
    7cd2:	4b23      	ldr	r3, [pc, #140]	; (7d60 <system_clock_init+0x1fc>)
    7cd4:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    7cd6:	2100      	movs	r1, #0
    7cd8:	2000      	movs	r0, #0
    7cda:	4b22      	ldr	r3, [pc, #136]	; (7d64 <system_clock_init+0x200>)
    7cdc:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    7cde:	2100      	movs	r1, #0
    7ce0:	2001      	movs	r0, #1
    7ce2:	4b20      	ldr	r3, [pc, #128]	; (7d64 <system_clock_init+0x200>)
    7ce4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    7ce6:	2100      	movs	r1, #0
    7ce8:	2002      	movs	r0, #2
    7cea:	4b1e      	ldr	r3, [pc, #120]	; (7d64 <system_clock_init+0x200>)
    7cec:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7cee:	003b      	movs	r3, r7
    7cf0:	0018      	movs	r0, r3
    7cf2:	4b17      	ldr	r3, [pc, #92]	; (7d50 <system_clock_init+0x1ec>)
    7cf4:	4798      	blx	r3
    7cf6:	003b      	movs	r3, r7
    7cf8:	2207      	movs	r2, #7
    7cfa:	701a      	strb	r2, [r3, #0]
    7cfc:	003b      	movs	r3, r7
    7cfe:	2201      	movs	r2, #1
    7d00:	605a      	str	r2, [r3, #4]
    7d02:	003b      	movs	r3, r7
    7d04:	2200      	movs	r2, #0
    7d06:	721a      	strb	r2, [r3, #8]
    7d08:	003b      	movs	r3, r7
    7d0a:	2200      	movs	r2, #0
    7d0c:	725a      	strb	r2, [r3, #9]
    7d0e:	003b      	movs	r3, r7
    7d10:	0019      	movs	r1, r3
    7d12:	2000      	movs	r0, #0
    7d14:	4b0f      	ldr	r3, [pc, #60]	; (7d54 <system_clock_init+0x1f0>)
    7d16:	4798      	blx	r3
    7d18:	2000      	movs	r0, #0
    7d1a:	4b0f      	ldr	r3, [pc, #60]	; (7d58 <system_clock_init+0x1f4>)
    7d1c:	4798      	blx	r3
#endif
}
    7d1e:	46c0      	nop			; (mov r8, r8)
    7d20:	46bd      	mov	sp, r7
    7d22:	b026      	add	sp, #152	; 0x98
    7d24:	bd80      	pop	{r7, pc}
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	40000800 	.word	0x40000800
    7d2c:	00007761 	.word	0x00007761
    7d30:	00007b2d 	.word	0x00007b2d
    7d34:	00007699 	.word	0x00007699
    7d38:	00806024 	.word	0x00806024
    7d3c:	0000792d 	.word	0x0000792d
    7d40:	00007677 	.word	0x00007677
    7d44:	000078b5 	.word	0x000078b5
    7d48:	000079fd 	.word	0x000079fd
    7d4c:	00007e0d 	.word	0x00007e0d
    7d50:	00007649 	.word	0x00007649
    7d54:	00007e3d 	.word	0x00007e3d
    7d58:	00007f61 	.word	0x00007f61
    7d5c:	00007aa9 	.word	0x00007aa9
    7d60:	000076ed 	.word	0x000076ed
    7d64:	0000770d 	.word	0x0000770d

00007d68 <system_apb_clock_set_mask>:
{
    7d68:	b580      	push	{r7, lr}
    7d6a:	b082      	sub	sp, #8
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	0002      	movs	r2, r0
    7d70:	6039      	str	r1, [r7, #0]
    7d72:	1dfb      	adds	r3, r7, #7
    7d74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7d76:	1dfb      	adds	r3, r7, #7
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	2b01      	cmp	r3, #1
    7d7c:	d00a      	beq.n	7d94 <system_apb_clock_set_mask+0x2c>
    7d7e:	2b02      	cmp	r3, #2
    7d80:	d00f      	beq.n	7da2 <system_apb_clock_set_mask+0x3a>
    7d82:	2b00      	cmp	r3, #0
    7d84:	d114      	bne.n	7db0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7d86:	4b0e      	ldr	r3, [pc, #56]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7d88:	4a0d      	ldr	r2, [pc, #52]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7d8a:	6991      	ldr	r1, [r2, #24]
    7d8c:	683a      	ldr	r2, [r7, #0]
    7d8e:	430a      	orrs	r2, r1
    7d90:	619a      	str	r2, [r3, #24]
			break;
    7d92:	e00f      	b.n	7db4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7d94:	4b0a      	ldr	r3, [pc, #40]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7d96:	4a0a      	ldr	r2, [pc, #40]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7d98:	69d1      	ldr	r1, [r2, #28]
    7d9a:	683a      	ldr	r2, [r7, #0]
    7d9c:	430a      	orrs	r2, r1
    7d9e:	61da      	str	r2, [r3, #28]
			break;
    7da0:	e008      	b.n	7db4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7da2:	4b07      	ldr	r3, [pc, #28]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7da4:	4a06      	ldr	r2, [pc, #24]	; (7dc0 <system_apb_clock_set_mask+0x58>)
    7da6:	6a11      	ldr	r1, [r2, #32]
    7da8:	683a      	ldr	r2, [r7, #0]
    7daa:	430a      	orrs	r2, r1
    7dac:	621a      	str	r2, [r3, #32]
			break;
    7dae:	e001      	b.n	7db4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7db0:	2317      	movs	r3, #23
    7db2:	e000      	b.n	7db6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7db4:	2300      	movs	r3, #0
}
    7db6:	0018      	movs	r0, r3
    7db8:	46bd      	mov	sp, r7
    7dba:	b002      	add	sp, #8
    7dbc:	bd80      	pop	{r7, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	40000400 	.word	0x40000400

00007dc4 <system_interrupt_enter_critical_section>:
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7dc8:	4b02      	ldr	r3, [pc, #8]	; (7dd4 <system_interrupt_enter_critical_section+0x10>)
    7dca:	4798      	blx	r3
}
    7dcc:	46c0      	nop			; (mov r8, r8)
    7dce:	46bd      	mov	sp, r7
    7dd0:	bd80      	pop	{r7, pc}
    7dd2:	46c0      	nop			; (mov r8, r8)
    7dd4:	000075b5 	.word	0x000075b5

00007dd8 <system_interrupt_leave_critical_section>:
{
    7dd8:	b580      	push	{r7, lr}
    7dda:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7ddc:	4b02      	ldr	r3, [pc, #8]	; (7de8 <system_interrupt_leave_critical_section+0x10>)
    7dde:	4798      	blx	r3
}
    7de0:	46c0      	nop			; (mov r8, r8)
    7de2:	46bd      	mov	sp, r7
    7de4:	bd80      	pop	{r7, pc}
    7de6:	46c0      	nop			; (mov r8, r8)
    7de8:	00007609 	.word	0x00007609

00007dec <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    7dec:	b580      	push	{r7, lr}
    7dee:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7df0:	4b05      	ldr	r3, [pc, #20]	; (7e08 <system_gclk_is_syncing+0x1c>)
    7df2:	785b      	ldrb	r3, [r3, #1]
    7df4:	b2db      	uxtb	r3, r3
    7df6:	b25b      	sxtb	r3, r3
    7df8:	2b00      	cmp	r3, #0
    7dfa:	da01      	bge.n	7e00 <system_gclk_is_syncing+0x14>
		return true;
    7dfc:	2301      	movs	r3, #1
    7dfe:	e000      	b.n	7e02 <system_gclk_is_syncing+0x16>
	}

	return false;
    7e00:	2300      	movs	r3, #0
}
    7e02:	0018      	movs	r0, r3
    7e04:	46bd      	mov	sp, r7
    7e06:	bd80      	pop	{r7, pc}
    7e08:	40000c00 	.word	0x40000c00

00007e0c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    7e0c:	b580      	push	{r7, lr}
    7e0e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    7e10:	2108      	movs	r1, #8
    7e12:	2000      	movs	r0, #0
    7e14:	4b07      	ldr	r3, [pc, #28]	; (7e34 <system_gclk_init+0x28>)
    7e16:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    7e18:	4b07      	ldr	r3, [pc, #28]	; (7e38 <system_gclk_init+0x2c>)
    7e1a:	2201      	movs	r2, #1
    7e1c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    7e1e:	46c0      	nop			; (mov r8, r8)
    7e20:	4b05      	ldr	r3, [pc, #20]	; (7e38 <system_gclk_init+0x2c>)
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	b2db      	uxtb	r3, r3
    7e26:	001a      	movs	r2, r3
    7e28:	2301      	movs	r3, #1
    7e2a:	4013      	ands	r3, r2
    7e2c:	d1f8      	bne.n	7e20 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    7e2e:	46c0      	nop			; (mov r8, r8)
    7e30:	46bd      	mov	sp, r7
    7e32:	bd80      	pop	{r7, pc}
    7e34:	00007d69 	.word	0x00007d69
    7e38:	40000c00 	.word	0x40000c00

00007e3c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7e3c:	b580      	push	{r7, lr}
    7e3e:	b086      	sub	sp, #24
    7e40:	af00      	add	r7, sp, #0
    7e42:	0002      	movs	r2, r0
    7e44:	6039      	str	r1, [r7, #0]
    7e46:	1dfb      	adds	r3, r7, #7
    7e48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    7e4a:	1dfb      	adds	r3, r7, #7
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    7e50:	1dfb      	adds	r3, r7, #7
    7e52:	781b      	ldrb	r3, [r3, #0]
    7e54:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7e56:	683b      	ldr	r3, [r7, #0]
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	021b      	lsls	r3, r3, #8
    7e5c:	001a      	movs	r2, r3
    7e5e:	697b      	ldr	r3, [r7, #20]
    7e60:	4313      	orrs	r3, r2
    7e62:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7e64:	683b      	ldr	r3, [r7, #0]
    7e66:	785b      	ldrb	r3, [r3, #1]
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d004      	beq.n	7e76 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7e6c:	697b      	ldr	r3, [r7, #20]
    7e6e:	2280      	movs	r2, #128	; 0x80
    7e70:	02d2      	lsls	r2, r2, #11
    7e72:	4313      	orrs	r3, r2
    7e74:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7e76:	683b      	ldr	r3, [r7, #0]
    7e78:	7a5b      	ldrb	r3, [r3, #9]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d004      	beq.n	7e88 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7e7e:	697b      	ldr	r3, [r7, #20]
    7e80:	2280      	movs	r2, #128	; 0x80
    7e82:	0312      	lsls	r2, r2, #12
    7e84:	4313      	orrs	r3, r2
    7e86:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7e88:	683b      	ldr	r3, [r7, #0]
    7e8a:	685b      	ldr	r3, [r3, #4]
    7e8c:	2b01      	cmp	r3, #1
    7e8e:	d92c      	bls.n	7eea <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7e90:	683b      	ldr	r3, [r7, #0]
    7e92:	685a      	ldr	r2, [r3, #4]
    7e94:	683b      	ldr	r3, [r7, #0]
    7e96:	685b      	ldr	r3, [r3, #4]
    7e98:	3b01      	subs	r3, #1
    7e9a:	4013      	ands	r3, r2
    7e9c:	d11a      	bne.n	7ed4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    7e9e:	2300      	movs	r3, #0
    7ea0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7ea2:	2302      	movs	r3, #2
    7ea4:	60bb      	str	r3, [r7, #8]
    7ea6:	e005      	b.n	7eb4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	3301      	adds	r3, #1
    7eac:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    7eae:	68bb      	ldr	r3, [r7, #8]
    7eb0:	005b      	lsls	r3, r3, #1
    7eb2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    7eb4:	683b      	ldr	r3, [r7, #0]
    7eb6:	685a      	ldr	r2, [r3, #4]
    7eb8:	68bb      	ldr	r3, [r7, #8]
    7eba:	429a      	cmp	r2, r3
    7ebc:	d8f4      	bhi.n	7ea8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    7ebe:	68fb      	ldr	r3, [r7, #12]
    7ec0:	021b      	lsls	r3, r3, #8
    7ec2:	693a      	ldr	r2, [r7, #16]
    7ec4:	4313      	orrs	r3, r2
    7ec6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7ec8:	697b      	ldr	r3, [r7, #20]
    7eca:	2280      	movs	r2, #128	; 0x80
    7ecc:	0352      	lsls	r2, r2, #13
    7ece:	4313      	orrs	r3, r2
    7ed0:	617b      	str	r3, [r7, #20]
    7ed2:	e00a      	b.n	7eea <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7ed4:	683b      	ldr	r3, [r7, #0]
    7ed6:	685b      	ldr	r3, [r3, #4]
    7ed8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    7eda:	693a      	ldr	r2, [r7, #16]
    7edc:	4313      	orrs	r3, r2
    7ede:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7ee0:	697b      	ldr	r3, [r7, #20]
    7ee2:	2280      	movs	r2, #128	; 0x80
    7ee4:	0292      	lsls	r2, r2, #10
    7ee6:	4313      	orrs	r3, r2
    7ee8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7eea:	683b      	ldr	r3, [r7, #0]
    7eec:	7a1b      	ldrb	r3, [r3, #8]
    7eee:	2b00      	cmp	r3, #0
    7ef0:	d004      	beq.n	7efc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7ef2:	697b      	ldr	r3, [r7, #20]
    7ef4:	2280      	movs	r2, #128	; 0x80
    7ef6:	0392      	lsls	r2, r2, #14
    7ef8:	4313      	orrs	r3, r2
    7efa:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7efc:	46c0      	nop			; (mov r8, r8)
    7efe:	4b13      	ldr	r3, [pc, #76]	; (7f4c <system_gclk_gen_set_config+0x110>)
    7f00:	4798      	blx	r3
    7f02:	1e03      	subs	r3, r0, #0
    7f04:	d1fb      	bne.n	7efe <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7f06:	4b12      	ldr	r3, [pc, #72]	; (7f50 <system_gclk_gen_set_config+0x114>)
    7f08:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7f0a:	4a12      	ldr	r2, [pc, #72]	; (7f54 <system_gclk_gen_set_config+0x118>)
    7f0c:	1dfb      	adds	r3, r7, #7
    7f0e:	781b      	ldrb	r3, [r3, #0]
    7f10:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    7f12:	46c0      	nop			; (mov r8, r8)
    7f14:	4b0d      	ldr	r3, [pc, #52]	; (7f4c <system_gclk_gen_set_config+0x110>)
    7f16:	4798      	blx	r3
    7f18:	1e03      	subs	r3, r0, #0
    7f1a:	d1fb      	bne.n	7f14 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7f1c:	4b0e      	ldr	r3, [pc, #56]	; (7f58 <system_gclk_gen_set_config+0x11c>)
    7f1e:	693a      	ldr	r2, [r7, #16]
    7f20:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	4b09      	ldr	r3, [pc, #36]	; (7f4c <system_gclk_gen_set_config+0x110>)
    7f26:	4798      	blx	r3
    7f28:	1e03      	subs	r3, r0, #0
    7f2a:	d1fb      	bne.n	7f24 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7f2c:	4b0a      	ldr	r3, [pc, #40]	; (7f58 <system_gclk_gen_set_config+0x11c>)
    7f2e:	4a0a      	ldr	r2, [pc, #40]	; (7f58 <system_gclk_gen_set_config+0x11c>)
    7f30:	6851      	ldr	r1, [r2, #4]
    7f32:	2280      	movs	r2, #128	; 0x80
    7f34:	0252      	lsls	r2, r2, #9
    7f36:	4011      	ands	r1, r2
    7f38:	697a      	ldr	r2, [r7, #20]
    7f3a:	430a      	orrs	r2, r1
    7f3c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7f3e:	4b07      	ldr	r3, [pc, #28]	; (7f5c <system_gclk_gen_set_config+0x120>)
    7f40:	4798      	blx	r3
}
    7f42:	46c0      	nop			; (mov r8, r8)
    7f44:	46bd      	mov	sp, r7
    7f46:	b006      	add	sp, #24
    7f48:	bd80      	pop	{r7, pc}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	00007ded 	.word	0x00007ded
    7f50:	00007dc5 	.word	0x00007dc5
    7f54:	40000c08 	.word	0x40000c08
    7f58:	40000c00 	.word	0x40000c00
    7f5c:	00007dd9 	.word	0x00007dd9

00007f60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7f60:	b580      	push	{r7, lr}
    7f62:	b082      	sub	sp, #8
    7f64:	af00      	add	r7, sp, #0
    7f66:	0002      	movs	r2, r0
    7f68:	1dfb      	adds	r3, r7, #7
    7f6a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7f6c:	46c0      	nop			; (mov r8, r8)
    7f6e:	4b0e      	ldr	r3, [pc, #56]	; (7fa8 <system_gclk_gen_enable+0x48>)
    7f70:	4798      	blx	r3
    7f72:	1e03      	subs	r3, r0, #0
    7f74:	d1fb      	bne.n	7f6e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7f76:	4b0d      	ldr	r3, [pc, #52]	; (7fac <system_gclk_gen_enable+0x4c>)
    7f78:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7f7a:	4a0d      	ldr	r2, [pc, #52]	; (7fb0 <system_gclk_gen_enable+0x50>)
    7f7c:	1dfb      	adds	r3, r7, #7
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7f82:	46c0      	nop			; (mov r8, r8)
    7f84:	4b08      	ldr	r3, [pc, #32]	; (7fa8 <system_gclk_gen_enable+0x48>)
    7f86:	4798      	blx	r3
    7f88:	1e03      	subs	r3, r0, #0
    7f8a:	d1fb      	bne.n	7f84 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7f8c:	4b09      	ldr	r3, [pc, #36]	; (7fb4 <system_gclk_gen_enable+0x54>)
    7f8e:	4a09      	ldr	r2, [pc, #36]	; (7fb4 <system_gclk_gen_enable+0x54>)
    7f90:	6852      	ldr	r2, [r2, #4]
    7f92:	2180      	movs	r1, #128	; 0x80
    7f94:	0249      	lsls	r1, r1, #9
    7f96:	430a      	orrs	r2, r1
    7f98:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7f9a:	4b07      	ldr	r3, [pc, #28]	; (7fb8 <system_gclk_gen_enable+0x58>)
    7f9c:	4798      	blx	r3
}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	46bd      	mov	sp, r7
    7fa2:	b002      	add	sp, #8
    7fa4:	bd80      	pop	{r7, pc}
    7fa6:	46c0      	nop			; (mov r8, r8)
    7fa8:	00007ded 	.word	0x00007ded
    7fac:	00007dc5 	.word	0x00007dc5
    7fb0:	40000c04 	.word	0x40000c04
    7fb4:	40000c00 	.word	0x40000c00
    7fb8:	00007dd9 	.word	0x00007dd9

00007fbc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b086      	sub	sp, #24
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	0002      	movs	r2, r0
    7fc4:	1dfb      	adds	r3, r7, #7
    7fc6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7fc8:	46c0      	nop			; (mov r8, r8)
    7fca:	4b2a      	ldr	r3, [pc, #168]	; (8074 <system_gclk_gen_get_hz+0xb8>)
    7fcc:	4798      	blx	r3
    7fce:	1e03      	subs	r3, r0, #0
    7fd0:	d1fb      	bne.n	7fca <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7fd2:	4b29      	ldr	r3, [pc, #164]	; (8078 <system_gclk_gen_get_hz+0xbc>)
    7fd4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7fd6:	4a29      	ldr	r2, [pc, #164]	; (807c <system_gclk_gen_get_hz+0xc0>)
    7fd8:	1dfb      	adds	r3, r7, #7
    7fda:	781b      	ldrb	r3, [r3, #0]
    7fdc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7fde:	46c0      	nop			; (mov r8, r8)
    7fe0:	4b24      	ldr	r3, [pc, #144]	; (8074 <system_gclk_gen_get_hz+0xb8>)
    7fe2:	4798      	blx	r3
    7fe4:	1e03      	subs	r3, r0, #0
    7fe6:	d1fb      	bne.n	7fe0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7fe8:	4b25      	ldr	r3, [pc, #148]	; (8080 <system_gclk_gen_get_hz+0xc4>)
    7fea:	685b      	ldr	r3, [r3, #4]
    7fec:	04db      	lsls	r3, r3, #19
    7fee:	0edb      	lsrs	r3, r3, #27
    7ff0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7ff2:	0018      	movs	r0, r3
    7ff4:	4b23      	ldr	r3, [pc, #140]	; (8084 <system_gclk_gen_get_hz+0xc8>)
    7ff6:	4798      	blx	r3
    7ff8:	0003      	movs	r3, r0
    7ffa:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7ffc:	4a1f      	ldr	r2, [pc, #124]	; (807c <system_gclk_gen_get_hz+0xc0>)
    7ffe:	1dfb      	adds	r3, r7, #7
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8004:	4b1e      	ldr	r3, [pc, #120]	; (8080 <system_gclk_gen_get_hz+0xc4>)
    8006:	685b      	ldr	r3, [r3, #4]
    8008:	02db      	lsls	r3, r3, #11
    800a:	0fdb      	lsrs	r3, r3, #31
    800c:	b2da      	uxtb	r2, r3
    800e:	2313      	movs	r3, #19
    8010:	18fb      	adds	r3, r7, r3
    8012:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8014:	4a1c      	ldr	r2, [pc, #112]	; (8088 <system_gclk_gen_get_hz+0xcc>)
    8016:	1dfb      	adds	r3, r7, #7
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    801c:	46c0      	nop			; (mov r8, r8)
    801e:	4b15      	ldr	r3, [pc, #84]	; (8074 <system_gclk_gen_get_hz+0xb8>)
    8020:	4798      	blx	r3
    8022:	1e03      	subs	r3, r0, #0
    8024:	d1fb      	bne.n	801e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8026:	4b16      	ldr	r3, [pc, #88]	; (8080 <system_gclk_gen_get_hz+0xc4>)
    8028:	689b      	ldr	r3, [r3, #8]
    802a:	021b      	lsls	r3, r3, #8
    802c:	0c1b      	lsrs	r3, r3, #16
    802e:	b29b      	uxth	r3, r3
    8030:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    8032:	4b16      	ldr	r3, [pc, #88]	; (808c <system_gclk_gen_get_hz+0xd0>)
    8034:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8036:	2313      	movs	r3, #19
    8038:	18fb      	adds	r3, r7, r3
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	2b00      	cmp	r3, #0
    803e:	d109      	bne.n	8054 <system_gclk_gen_get_hz+0x98>
    8040:	68fb      	ldr	r3, [r7, #12]
    8042:	2b01      	cmp	r3, #1
    8044:	d906      	bls.n	8054 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    8046:	4b12      	ldr	r3, [pc, #72]	; (8090 <system_gclk_gen_get_hz+0xd4>)
    8048:	68f9      	ldr	r1, [r7, #12]
    804a:	6978      	ldr	r0, [r7, #20]
    804c:	4798      	blx	r3
    804e:	0003      	movs	r3, r0
    8050:	617b      	str	r3, [r7, #20]
    8052:	e00a      	b.n	806a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    8054:	2313      	movs	r3, #19
    8056:	18fb      	adds	r3, r7, r3
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	2b00      	cmp	r3, #0
    805c:	d005      	beq.n	806a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    805e:	68fb      	ldr	r3, [r7, #12]
    8060:	3301      	adds	r3, #1
    8062:	697a      	ldr	r2, [r7, #20]
    8064:	40da      	lsrs	r2, r3
    8066:	0013      	movs	r3, r2
    8068:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    806a:	697b      	ldr	r3, [r7, #20]
}
    806c:	0018      	movs	r0, r3
    806e:	46bd      	mov	sp, r7
    8070:	b006      	add	sp, #24
    8072:	bd80      	pop	{r7, pc}
    8074:	00007ded 	.word	0x00007ded
    8078:	00007dc5 	.word	0x00007dc5
    807c:	40000c04 	.word	0x40000c04
    8080:	40000c00 	.word	0x40000c00
    8084:	000077f5 	.word	0x000077f5
    8088:	40000c08 	.word	0x40000c08
    808c:	00007dd9 	.word	0x00007dd9
    8090:	000086a9 	.word	0x000086a9

00008094 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    8094:	b580      	push	{r7, lr}
    8096:	b084      	sub	sp, #16
    8098:	af00      	add	r7, sp, #0
    809a:	0002      	movs	r2, r0
    809c:	6039      	str	r1, [r7, #0]
    809e:	1dfb      	adds	r3, r7, #7
    80a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    80a2:	1dfb      	adds	r3, r7, #7
    80a4:	781b      	ldrb	r3, [r3, #0]
    80a6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    80a8:	683b      	ldr	r3, [r7, #0]
    80aa:	781b      	ldrb	r3, [r3, #0]
    80ac:	021b      	lsls	r3, r3, #8
    80ae:	001a      	movs	r2, r3
    80b0:	68fb      	ldr	r3, [r7, #12]
    80b2:	4313      	orrs	r3, r2
    80b4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    80b6:	1dfb      	adds	r3, r7, #7
    80b8:	781b      	ldrb	r3, [r3, #0]
    80ba:	0018      	movs	r0, r3
    80bc:	4b04      	ldr	r3, [pc, #16]	; (80d0 <system_gclk_chan_set_config+0x3c>)
    80be:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    80c0:	4b04      	ldr	r3, [pc, #16]	; (80d4 <system_gclk_chan_set_config+0x40>)
    80c2:	68fa      	ldr	r2, [r7, #12]
    80c4:	b292      	uxth	r2, r2
    80c6:	805a      	strh	r2, [r3, #2]
}
    80c8:	46c0      	nop			; (mov r8, r8)
    80ca:	46bd      	mov	sp, r7
    80cc:	b004      	add	sp, #16
    80ce:	bd80      	pop	{r7, pc}
    80d0:	00008121 	.word	0x00008121
    80d4:	40000c00 	.word	0x40000c00

000080d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    80d8:	b580      	push	{r7, lr}
    80da:	b082      	sub	sp, #8
    80dc:	af00      	add	r7, sp, #0
    80de:	0002      	movs	r2, r0
    80e0:	1dfb      	adds	r3, r7, #7
    80e2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    80e4:	4b0a      	ldr	r3, [pc, #40]	; (8110 <system_gclk_chan_enable+0x38>)
    80e6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    80e8:	4a0a      	ldr	r2, [pc, #40]	; (8114 <system_gclk_chan_enable+0x3c>)
    80ea:	1dfb      	adds	r3, r7, #7
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    80f0:	4909      	ldr	r1, [pc, #36]	; (8118 <system_gclk_chan_enable+0x40>)
    80f2:	4b09      	ldr	r3, [pc, #36]	; (8118 <system_gclk_chan_enable+0x40>)
    80f4:	885b      	ldrh	r3, [r3, #2]
    80f6:	b29b      	uxth	r3, r3
    80f8:	2280      	movs	r2, #128	; 0x80
    80fa:	01d2      	lsls	r2, r2, #7
    80fc:	4313      	orrs	r3, r2
    80fe:	b29b      	uxth	r3, r3
    8100:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    8102:	4b06      	ldr	r3, [pc, #24]	; (811c <system_gclk_chan_enable+0x44>)
    8104:	4798      	blx	r3
}
    8106:	46c0      	nop			; (mov r8, r8)
    8108:	46bd      	mov	sp, r7
    810a:	b002      	add	sp, #8
    810c:	bd80      	pop	{r7, pc}
    810e:	46c0      	nop			; (mov r8, r8)
    8110:	00007dc5 	.word	0x00007dc5
    8114:	40000c02 	.word	0x40000c02
    8118:	40000c00 	.word	0x40000c00
    811c:	00007dd9 	.word	0x00007dd9

00008120 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8120:	b580      	push	{r7, lr}
    8122:	b084      	sub	sp, #16
    8124:	af00      	add	r7, sp, #0
    8126:	0002      	movs	r2, r0
    8128:	1dfb      	adds	r3, r7, #7
    812a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    812c:	4b1c      	ldr	r3, [pc, #112]	; (81a0 <system_gclk_chan_disable+0x80>)
    812e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8130:	4a1c      	ldr	r2, [pc, #112]	; (81a4 <system_gclk_chan_disable+0x84>)
    8132:	1dfb      	adds	r3, r7, #7
    8134:	781b      	ldrb	r3, [r3, #0]
    8136:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8138:	4b1b      	ldr	r3, [pc, #108]	; (81a8 <system_gclk_chan_disable+0x88>)
    813a:	885b      	ldrh	r3, [r3, #2]
    813c:	051b      	lsls	r3, r3, #20
    813e:	0f1b      	lsrs	r3, r3, #28
    8140:	b2db      	uxtb	r3, r3
    8142:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    8144:	4a18      	ldr	r2, [pc, #96]	; (81a8 <system_gclk_chan_disable+0x88>)
    8146:	8853      	ldrh	r3, [r2, #2]
    8148:	4918      	ldr	r1, [pc, #96]	; (81ac <system_gclk_chan_disable+0x8c>)
    814a:	400b      	ands	r3, r1
    814c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    814e:	4a16      	ldr	r2, [pc, #88]	; (81a8 <system_gclk_chan_disable+0x88>)
    8150:	4b15      	ldr	r3, [pc, #84]	; (81a8 <system_gclk_chan_disable+0x88>)
    8152:	885b      	ldrh	r3, [r3, #2]
    8154:	b29b      	uxth	r3, r3
    8156:	4916      	ldr	r1, [pc, #88]	; (81b0 <system_gclk_chan_disable+0x90>)
    8158:	400b      	ands	r3, r1
    815a:	b29b      	uxth	r3, r3
    815c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    815e:	46c0      	nop			; (mov r8, r8)
    8160:	4b11      	ldr	r3, [pc, #68]	; (81a8 <system_gclk_chan_disable+0x88>)
    8162:	885b      	ldrh	r3, [r3, #2]
    8164:	b29b      	uxth	r3, r3
    8166:	001a      	movs	r2, r3
    8168:	2380      	movs	r3, #128	; 0x80
    816a:	01db      	lsls	r3, r3, #7
    816c:	4013      	ands	r3, r2
    816e:	d1f7      	bne.n	8160 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8170:	4a0d      	ldr	r2, [pc, #52]	; (81a8 <system_gclk_chan_disable+0x88>)
    8172:	68fb      	ldr	r3, [r7, #12]
    8174:	b2db      	uxtb	r3, r3
    8176:	1c19      	adds	r1, r3, #0
    8178:	230f      	movs	r3, #15
    817a:	400b      	ands	r3, r1
    817c:	b2d9      	uxtb	r1, r3
    817e:	8853      	ldrh	r3, [r2, #2]
    8180:	1c08      	adds	r0, r1, #0
    8182:	210f      	movs	r1, #15
    8184:	4001      	ands	r1, r0
    8186:	0208      	lsls	r0, r1, #8
    8188:	4908      	ldr	r1, [pc, #32]	; (81ac <system_gclk_chan_disable+0x8c>)
    818a:	400b      	ands	r3, r1
    818c:	1c19      	adds	r1, r3, #0
    818e:	1c03      	adds	r3, r0, #0
    8190:	430b      	orrs	r3, r1
    8192:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    8194:	4b07      	ldr	r3, [pc, #28]	; (81b4 <system_gclk_chan_disable+0x94>)
    8196:	4798      	blx	r3
}
    8198:	46c0      	nop			; (mov r8, r8)
    819a:	46bd      	mov	sp, r7
    819c:	b004      	add	sp, #16
    819e:	bd80      	pop	{r7, pc}
    81a0:	00007dc5 	.word	0x00007dc5
    81a4:	40000c02 	.word	0x40000c02
    81a8:	40000c00 	.word	0x40000c00
    81ac:	fffff0ff 	.word	0xfffff0ff
    81b0:	ffffbfff 	.word	0xffffbfff
    81b4:	00007dd9 	.word	0x00007dd9

000081b8 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	b082      	sub	sp, #8
    81bc:	af00      	add	r7, sp, #0
    81be:	0002      	movs	r2, r0
    81c0:	1dfb      	adds	r3, r7, #7
    81c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    81c4:	4b09      	ldr	r3, [pc, #36]	; (81ec <system_gclk_chan_lock+0x34>)
    81c6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    81c8:	4a09      	ldr	r2, [pc, #36]	; (81f0 <system_gclk_chan_lock+0x38>)
    81ca:	1dfb      	adds	r3, r7, #7
    81cc:	781b      	ldrb	r3, [r3, #0]
    81ce:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    81d0:	4a08      	ldr	r2, [pc, #32]	; (81f4 <system_gclk_chan_lock+0x3c>)
    81d2:	4b08      	ldr	r3, [pc, #32]	; (81f4 <system_gclk_chan_lock+0x3c>)
    81d4:	885b      	ldrh	r3, [r3, #2]
    81d6:	b29b      	uxth	r3, r3
    81d8:	4907      	ldr	r1, [pc, #28]	; (81f8 <system_gclk_chan_lock+0x40>)
    81da:	430b      	orrs	r3, r1
    81dc:	b29b      	uxth	r3, r3
    81de:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    81e0:	4b06      	ldr	r3, [pc, #24]	; (81fc <system_gclk_chan_lock+0x44>)
    81e2:	4798      	blx	r3
}
    81e4:	46c0      	nop			; (mov r8, r8)
    81e6:	46bd      	mov	sp, r7
    81e8:	b002      	add	sp, #8
    81ea:	bd80      	pop	{r7, pc}
    81ec:	00007dc5 	.word	0x00007dc5
    81f0:	40000c02 	.word	0x40000c02
    81f4:	40000c00 	.word	0x40000c00
    81f8:	ffffc000 	.word	0xffffc000
    81fc:	00007dd9 	.word	0x00007dd9

00008200 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8200:	b580      	push	{r7, lr}
    8202:	b084      	sub	sp, #16
    8204:	af00      	add	r7, sp, #0
    8206:	0002      	movs	r2, r0
    8208:	1dfb      	adds	r3, r7, #7
    820a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    820c:	4b0d      	ldr	r3, [pc, #52]	; (8244 <system_gclk_chan_get_hz+0x44>)
    820e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8210:	4a0d      	ldr	r2, [pc, #52]	; (8248 <system_gclk_chan_get_hz+0x48>)
    8212:	1dfb      	adds	r3, r7, #7
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8218:	4b0c      	ldr	r3, [pc, #48]	; (824c <system_gclk_chan_get_hz+0x4c>)
    821a:	885b      	ldrh	r3, [r3, #2]
    821c:	051b      	lsls	r3, r3, #20
    821e:	0f1b      	lsrs	r3, r3, #28
    8220:	b2da      	uxtb	r2, r3
    8222:	230f      	movs	r3, #15
    8224:	18fb      	adds	r3, r7, r3
    8226:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    8228:	4b09      	ldr	r3, [pc, #36]	; (8250 <system_gclk_chan_get_hz+0x50>)
    822a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    822c:	230f      	movs	r3, #15
    822e:	18fb      	adds	r3, r7, r3
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	0018      	movs	r0, r3
    8234:	4b07      	ldr	r3, [pc, #28]	; (8254 <system_gclk_chan_get_hz+0x54>)
    8236:	4798      	blx	r3
    8238:	0003      	movs	r3, r0
}
    823a:	0018      	movs	r0, r3
    823c:	46bd      	mov	sp, r7
    823e:	b004      	add	sp, #16
    8240:	bd80      	pop	{r7, pc}
    8242:	46c0      	nop			; (mov r8, r8)
    8244:	00007dc5 	.word	0x00007dc5
    8248:	40000c02 	.word	0x40000c02
    824c:	40000c00 	.word	0x40000c00
    8250:	00007dd9 	.word	0x00007dd9
    8254:	00007fbd 	.word	0x00007fbd

00008258 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8258:	b580      	push	{r7, lr}
    825a:	b084      	sub	sp, #16
    825c:	af00      	add	r7, sp, #0
    825e:	0002      	movs	r2, r0
    8260:	1dfb      	adds	r3, r7, #7
    8262:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8264:	230f      	movs	r3, #15
    8266:	18fb      	adds	r3, r7, r3
    8268:	1dfa      	adds	r2, r7, #7
    826a:	7812      	ldrb	r2, [r2, #0]
    826c:	09d2      	lsrs	r2, r2, #7
    826e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8270:	230e      	movs	r3, #14
    8272:	18fb      	adds	r3, r7, r3
    8274:	1dfa      	adds	r2, r7, #7
    8276:	7812      	ldrb	r2, [r2, #0]
    8278:	0952      	lsrs	r2, r2, #5
    827a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    827c:	4b0d      	ldr	r3, [pc, #52]	; (82b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    827e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8280:	230f      	movs	r3, #15
    8282:	18fb      	adds	r3, r7, r3
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	2b00      	cmp	r3, #0
    8288:	d10f      	bne.n	82aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    828a:	230f      	movs	r3, #15
    828c:	18fb      	adds	r3, r7, r3
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	009b      	lsls	r3, r3, #2
    8292:	2210      	movs	r2, #16
    8294:	4694      	mov	ip, r2
    8296:	44bc      	add	ip, r7
    8298:	4463      	add	r3, ip
    829a:	3b08      	subs	r3, #8
    829c:	681a      	ldr	r2, [r3, #0]
    829e:	230e      	movs	r3, #14
    82a0:	18fb      	adds	r3, r7, r3
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	01db      	lsls	r3, r3, #7
    82a6:	18d3      	adds	r3, r2, r3
    82a8:	e000      	b.n	82ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    82aa:	2300      	movs	r3, #0
	}
}
    82ac:	0018      	movs	r0, r3
    82ae:	46bd      	mov	sp, r7
    82b0:	b004      	add	sp, #16
    82b2:	bd80      	pop	{r7, pc}
    82b4:	41004400 	.word	0x41004400

000082b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b088      	sub	sp, #32
    82bc:	af00      	add	r7, sp, #0
    82be:	60f8      	str	r0, [r7, #12]
    82c0:	60b9      	str	r1, [r7, #8]
    82c2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    82c4:	2300      	movs	r3, #0
    82c6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	78db      	ldrb	r3, [r3, #3]
    82cc:	2201      	movs	r2, #1
    82ce:	4053      	eors	r3, r2
    82d0:	b2db      	uxtb	r3, r3
    82d2:	2b00      	cmp	r3, #0
    82d4:	d035      	beq.n	8342 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    82d6:	687b      	ldr	r3, [r7, #4]
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	2b80      	cmp	r3, #128	; 0x80
    82dc:	d00b      	beq.n	82f6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    82de:	69fb      	ldr	r3, [r7, #28]
    82e0:	2280      	movs	r2, #128	; 0x80
    82e2:	0252      	lsls	r2, r2, #9
    82e4:	4313      	orrs	r3, r2
    82e6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    82e8:	687b      	ldr	r3, [r7, #4]
    82ea:	781b      	ldrb	r3, [r3, #0]
    82ec:	061b      	lsls	r3, r3, #24
    82ee:	001a      	movs	r2, r3
    82f0:	69fb      	ldr	r3, [r7, #28]
    82f2:	4313      	orrs	r3, r2
    82f4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	785b      	ldrb	r3, [r3, #1]
    82fa:	2b00      	cmp	r3, #0
    82fc:	d003      	beq.n	8306 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    82fe:	687b      	ldr	r3, [r7, #4]
    8300:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8302:	2b02      	cmp	r3, #2
    8304:	d110      	bne.n	8328 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    8306:	69fb      	ldr	r3, [r7, #28]
    8308:	2280      	movs	r2, #128	; 0x80
    830a:	0292      	lsls	r2, r2, #10
    830c:	4313      	orrs	r3, r2
    830e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8310:	687b      	ldr	r3, [r7, #4]
    8312:	789b      	ldrb	r3, [r3, #2]
    8314:	2b00      	cmp	r3, #0
    8316:	d004      	beq.n	8322 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8318:	69fb      	ldr	r3, [r7, #28]
    831a:	2280      	movs	r2, #128	; 0x80
    831c:	02d2      	lsls	r2, r2, #11
    831e:	4313      	orrs	r3, r2
    8320:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8322:	68fb      	ldr	r3, [r7, #12]
    8324:	68ba      	ldr	r2, [r7, #8]
    8326:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	785b      	ldrb	r3, [r3, #1]
    832c:	2b01      	cmp	r3, #1
    832e:	d003      	beq.n	8338 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    8330:	687b      	ldr	r3, [r7, #4]
    8332:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8334:	2b02      	cmp	r3, #2
    8336:	d107      	bne.n	8348 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8338:	69fb      	ldr	r3, [r7, #28]
    833a:	4a22      	ldr	r2, [pc, #136]	; (83c4 <_system_pinmux_config+0x10c>)
    833c:	4013      	ands	r3, r2
    833e:	61fb      	str	r3, [r7, #28]
    8340:	e002      	b.n	8348 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    8342:	68fb      	ldr	r3, [r7, #12]
    8344:	68ba      	ldr	r2, [r7, #8]
    8346:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8348:	68bb      	ldr	r3, [r7, #8]
    834a:	041b      	lsls	r3, r3, #16
    834c:	0c1b      	lsrs	r3, r3, #16
    834e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8350:	68bb      	ldr	r3, [r7, #8]
    8352:	0c1b      	lsrs	r3, r3, #16
    8354:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8356:	69ba      	ldr	r2, [r7, #24]
    8358:	69fb      	ldr	r3, [r7, #28]
    835a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    835c:	22a0      	movs	r2, #160	; 0xa0
    835e:	05d2      	lsls	r2, r2, #23
    8360:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8362:	68fb      	ldr	r3, [r7, #12]
    8364:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8366:	697a      	ldr	r2, [r7, #20]
    8368:	69fb      	ldr	r3, [r7, #28]
    836a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    836c:	22d0      	movs	r2, #208	; 0xd0
    836e:	0612      	lsls	r2, r2, #24
    8370:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8372:	68fb      	ldr	r3, [r7, #12]
    8374:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8376:	687b      	ldr	r3, [r7, #4]
    8378:	78db      	ldrb	r3, [r3, #3]
    837a:	2201      	movs	r2, #1
    837c:	4053      	eors	r3, r2
    837e:	b2db      	uxtb	r3, r3
    8380:	2b00      	cmp	r3, #0
    8382:	d01a      	beq.n	83ba <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8384:	69fa      	ldr	r2, [r7, #28]
    8386:	2380      	movs	r3, #128	; 0x80
    8388:	02db      	lsls	r3, r3, #11
    838a:	4013      	ands	r3, r2
    838c:	d00a      	beq.n	83a4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	789b      	ldrb	r3, [r3, #2]
    8392:	2b01      	cmp	r3, #1
    8394:	d103      	bne.n	839e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    8396:	68fb      	ldr	r3, [r7, #12]
    8398:	68ba      	ldr	r2, [r7, #8]
    839a:	619a      	str	r2, [r3, #24]
    839c:	e002      	b.n	83a4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    839e:	68fb      	ldr	r3, [r7, #12]
    83a0:	68ba      	ldr	r2, [r7, #8]
    83a2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    83a4:	687b      	ldr	r3, [r7, #4]
    83a6:	785b      	ldrb	r3, [r3, #1]
    83a8:	2b01      	cmp	r3, #1
    83aa:	d003      	beq.n	83b4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    83b0:	2b02      	cmp	r3, #2
    83b2:	d102      	bne.n	83ba <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    83b4:	68fb      	ldr	r3, [r7, #12]
    83b6:	68ba      	ldr	r2, [r7, #8]
    83b8:	609a      	str	r2, [r3, #8]
		}
	}
}
    83ba:	46c0      	nop			; (mov r8, r8)
    83bc:	46bd      	mov	sp, r7
    83be:	b008      	add	sp, #32
    83c0:	bd80      	pop	{r7, pc}
    83c2:	46c0      	nop			; (mov r8, r8)
    83c4:	fffbffff 	.word	0xfffbffff

000083c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b084      	sub	sp, #16
    83cc:	af00      	add	r7, sp, #0
    83ce:	0002      	movs	r2, r0
    83d0:	6039      	str	r1, [r7, #0]
    83d2:	1dfb      	adds	r3, r7, #7
    83d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    83d6:	1dfb      	adds	r3, r7, #7
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	0018      	movs	r0, r3
    83dc:	4b0a      	ldr	r3, [pc, #40]	; (8408 <system_pinmux_pin_set_config+0x40>)
    83de:	4798      	blx	r3
    83e0:	0003      	movs	r3, r0
    83e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    83e4:	1dfb      	adds	r3, r7, #7
    83e6:	781b      	ldrb	r3, [r3, #0]
    83e8:	221f      	movs	r2, #31
    83ea:	4013      	ands	r3, r2
    83ec:	2201      	movs	r2, #1
    83ee:	409a      	lsls	r2, r3
    83f0:	0013      	movs	r3, r2
    83f2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    83f4:	683a      	ldr	r2, [r7, #0]
    83f6:	68b9      	ldr	r1, [r7, #8]
    83f8:	68fb      	ldr	r3, [r7, #12]
    83fa:	0018      	movs	r0, r3
    83fc:	4b03      	ldr	r3, [pc, #12]	; (840c <system_pinmux_pin_set_config+0x44>)
    83fe:	4798      	blx	r3
}
    8400:	46c0      	nop			; (mov r8, r8)
    8402:	46bd      	mov	sp, r7
    8404:	b004      	add	sp, #16
    8406:	bd80      	pop	{r7, pc}
    8408:	00008259 	.word	0x00008259
    840c:	000082b9 	.word	0x000082b9

00008410 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    8410:	b580      	push	{r7, lr}
    8412:	af00      	add	r7, sp, #0
	return;
    8414:	46c0      	nop			; (mov r8, r8)
}
    8416:	46bd      	mov	sp, r7
    8418:	bd80      	pop	{r7, pc}
	...

0000841c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    841c:	b580      	push	{r7, lr}
    841e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8420:	4b06      	ldr	r3, [pc, #24]	; (843c <system_init+0x20>)
    8422:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8424:	4b06      	ldr	r3, [pc, #24]	; (8440 <system_init+0x24>)
    8426:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8428:	4b06      	ldr	r3, [pc, #24]	; (8444 <system_init+0x28>)
    842a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    842c:	4b06      	ldr	r3, [pc, #24]	; (8448 <system_init+0x2c>)
    842e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8430:	4b06      	ldr	r3, [pc, #24]	; (844c <system_init+0x30>)
    8432:	4798      	blx	r3
}
    8434:	46c0      	nop			; (mov r8, r8)
    8436:	46bd      	mov	sp, r7
    8438:	bd80      	pop	{r7, pc}
    843a:	46c0      	nop			; (mov r8, r8)
    843c:	00007b65 	.word	0x00007b65
    8440:	00007421 	.word	0x00007421
    8444:	00008411 	.word	0x00008411
    8448:	00008411 	.word	0x00008411
    844c:	00008411 	.word	0x00008411

00008450 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8450:	b580      	push	{r7, lr}
    8452:	b082      	sub	sp, #8
    8454:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    8456:	4b2f      	ldr	r3, [pc, #188]	; (8514 <Reset_Handler+0xc4>)
    8458:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    845a:	4b2f      	ldr	r3, [pc, #188]	; (8518 <Reset_Handler+0xc8>)
    845c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    845e:	687a      	ldr	r2, [r7, #4]
    8460:	683b      	ldr	r3, [r7, #0]
    8462:	429a      	cmp	r2, r3
    8464:	d00c      	beq.n	8480 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    8466:	e007      	b.n	8478 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8468:	683b      	ldr	r3, [r7, #0]
    846a:	1d1a      	adds	r2, r3, #4
    846c:	603a      	str	r2, [r7, #0]
    846e:	687a      	ldr	r2, [r7, #4]
    8470:	1d11      	adds	r1, r2, #4
    8472:	6079      	str	r1, [r7, #4]
    8474:	6812      	ldr	r2, [r2, #0]
    8476:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    8478:	683a      	ldr	r2, [r7, #0]
    847a:	4b28      	ldr	r3, [pc, #160]	; (851c <Reset_Handler+0xcc>)
    847c:	429a      	cmp	r2, r3
    847e:	d3f3      	bcc.n	8468 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8480:	4b27      	ldr	r3, [pc, #156]	; (8520 <Reset_Handler+0xd0>)
    8482:	603b      	str	r3, [r7, #0]
    8484:	e004      	b.n	8490 <Reset_Handler+0x40>
                *pDest++ = 0;
    8486:	683b      	ldr	r3, [r7, #0]
    8488:	1d1a      	adds	r2, r3, #4
    848a:	603a      	str	r2, [r7, #0]
    848c:	2200      	movs	r2, #0
    848e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    8490:	683a      	ldr	r2, [r7, #0]
    8492:	4b24      	ldr	r3, [pc, #144]	; (8524 <Reset_Handler+0xd4>)
    8494:	429a      	cmp	r2, r3
    8496:	d3f6      	bcc.n	8486 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8498:	4b23      	ldr	r3, [pc, #140]	; (8528 <Reset_Handler+0xd8>)
    849a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    849c:	4b23      	ldr	r3, [pc, #140]	; (852c <Reset_Handler+0xdc>)
    849e:	687a      	ldr	r2, [r7, #4]
    84a0:	21ff      	movs	r1, #255	; 0xff
    84a2:	438a      	bics	r2, r1
    84a4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    84a6:	4a22      	ldr	r2, [pc, #136]	; (8530 <Reset_Handler+0xe0>)
    84a8:	2390      	movs	r3, #144	; 0x90
    84aa:	005b      	lsls	r3, r3, #1
    84ac:	2102      	movs	r1, #2
    84ae:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    84b0:	4a20      	ldr	r2, [pc, #128]	; (8534 <Reset_Handler+0xe4>)
    84b2:	78d3      	ldrb	r3, [r2, #3]
    84b4:	2103      	movs	r1, #3
    84b6:	438b      	bics	r3, r1
    84b8:	1c19      	adds	r1, r3, #0
    84ba:	2302      	movs	r3, #2
    84bc:	430b      	orrs	r3, r1
    84be:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    84c0:	4a1c      	ldr	r2, [pc, #112]	; (8534 <Reset_Handler+0xe4>)
    84c2:	78d3      	ldrb	r3, [r2, #3]
    84c4:	210c      	movs	r1, #12
    84c6:	438b      	bics	r3, r1
    84c8:	1c19      	adds	r1, r3, #0
    84ca:	2308      	movs	r3, #8
    84cc:	430b      	orrs	r3, r1
    84ce:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    84d0:	4a19      	ldr	r2, [pc, #100]	; (8538 <Reset_Handler+0xe8>)
    84d2:	7b93      	ldrb	r3, [r2, #14]
    84d4:	2130      	movs	r1, #48	; 0x30
    84d6:	438b      	bics	r3, r1
    84d8:	1c19      	adds	r1, r3, #0
    84da:	2320      	movs	r3, #32
    84dc:	430b      	orrs	r3, r1
    84de:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    84e0:	4a15      	ldr	r2, [pc, #84]	; (8538 <Reset_Handler+0xe8>)
    84e2:	7b93      	ldrb	r3, [r2, #14]
    84e4:	210c      	movs	r1, #12
    84e6:	438b      	bics	r3, r1
    84e8:	1c19      	adds	r1, r3, #0
    84ea:	2308      	movs	r3, #8
    84ec:	430b      	orrs	r3, r1
    84ee:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    84f0:	4a11      	ldr	r2, [pc, #68]	; (8538 <Reset_Handler+0xe8>)
    84f2:	7b93      	ldrb	r3, [r2, #14]
    84f4:	2103      	movs	r1, #3
    84f6:	438b      	bics	r3, r1
    84f8:	1c19      	adds	r1, r3, #0
    84fa:	2302      	movs	r3, #2
    84fc:	430b      	orrs	r3, r1
    84fe:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    8500:	4a0e      	ldr	r2, [pc, #56]	; (853c <Reset_Handler+0xec>)
    8502:	6853      	ldr	r3, [r2, #4]
    8504:	2180      	movs	r1, #128	; 0x80
    8506:	430b      	orrs	r3, r1
    8508:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    850a:	4b0d      	ldr	r3, [pc, #52]	; (8540 <Reset_Handler+0xf0>)
    850c:	4798      	blx	r3

        /* Branch to main function */
        main();
    850e:	4b0d      	ldr	r3, [pc, #52]	; (8544 <Reset_Handler+0xf4>)
    8510:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    8512:	e7fe      	b.n	8512 <Reset_Handler+0xc2>
    8514:	0000c144 	.word	0x0000c144
    8518:	20000000 	.word	0x20000000
    851c:	20000078 	.word	0x20000078
    8520:	20000078 	.word	0x20000078
    8524:	2000534c 	.word	0x2000534c
    8528:	00000000 	.word	0x00000000
    852c:	e000ed00 	.word	0xe000ed00
    8530:	41007000 	.word	0x41007000
    8534:	41005000 	.word	0x41005000
    8538:	41004800 	.word	0x41004800
    853c:	41004000 	.word	0x41004000
    8540:	0000b341 	.word	0x0000b341
    8544:	000085f9 	.word	0x000085f9

00008548 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8548:	b580      	push	{r7, lr}
    854a:	af00      	add	r7, sp, #0
        while (1) {
    854c:	e7fe      	b.n	854c <Dummy_Handler+0x4>
	...

00008550 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8550:	b580      	push	{r7, lr}
    8552:	b084      	sub	sp, #16
    8554:	af00      	add	r7, sp, #0
    8556:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8558:	4b0a      	ldr	r3, [pc, #40]	; (8584 <_sbrk+0x34>)
    855a:	681b      	ldr	r3, [r3, #0]
    855c:	2b00      	cmp	r3, #0
    855e:	d102      	bne.n	8566 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    8560:	4b08      	ldr	r3, [pc, #32]	; (8584 <_sbrk+0x34>)
    8562:	4a09      	ldr	r2, [pc, #36]	; (8588 <_sbrk+0x38>)
    8564:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    8566:	4b07      	ldr	r3, [pc, #28]	; (8584 <_sbrk+0x34>)
    8568:	681b      	ldr	r3, [r3, #0]
    856a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    856c:	4b05      	ldr	r3, [pc, #20]	; (8584 <_sbrk+0x34>)
    856e:	681a      	ldr	r2, [r3, #0]
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	18d2      	adds	r2, r2, r3
    8574:	4b03      	ldr	r3, [pc, #12]	; (8584 <_sbrk+0x34>)
    8576:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    8578:	68fb      	ldr	r3, [r7, #12]
}
    857a:	0018      	movs	r0, r3
    857c:	46bd      	mov	sp, r7
    857e:	b004      	add	sp, #16
    8580:	bd80      	pop	{r7, pc}
    8582:	46c0      	nop			; (mov r8, r8)
    8584:	200052d8 	.word	0x200052d8
    8588:	20007350 	.word	0x20007350

0000858c <wdt_get_config_defaults>:
{
    858c:	b580      	push	{r7, lr}
    858e:	b082      	sub	sp, #8
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    8594:	687b      	ldr	r3, [r7, #4]
    8596:	2200      	movs	r2, #0
    8598:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	2201      	movs	r2, #1
    859e:	705a      	strb	r2, [r3, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	2204      	movs	r2, #4
    85a4:	709a      	strb	r2, [r3, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	220c      	movs	r2, #12
    85aa:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	2200      	movs	r2, #0
    85b0:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	2200      	movs	r2, #0
    85b6:	715a      	strb	r2, [r3, #5]
}
    85b8:	46c0      	nop			; (mov r8, r8)
    85ba:	46bd      	mov	sp, r7
    85bc:	b002      	add	sp, #8
    85be:	bd80      	pop	{r7, pc}

000085c0 <configure_wdt>:

#include <asf.h>
#include "task_monitor.h"

static void configure_wdt(void)
{
    85c0:	b580      	push	{r7, lr}
    85c2:	b082      	sub	sp, #8
    85c4:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
    85c6:	003b      	movs	r3, r7
    85c8:	0018      	movs	r0, r3
    85ca:	4b09      	ldr	r3, [pc, #36]	; (85f0 <configure_wdt+0x30>)
    85cc:	4798      	blx	r3
	config_wdt.always_on = false; // Can be disabled TODO in final, maybe lock this in, but makes debugging difficult
    85ce:	003b      	movs	r3, r7
    85d0:	2200      	movs	r2, #0
    85d2:	701a      	strb	r2, [r3, #0]
	config_wdt.clock_source = GCLK_GENERATOR_4; // 8MHz / 255 = 32.372 kHz
    85d4:	003b      	movs	r3, r7
    85d6:	2204      	movs	r2, #4
    85d8:	709a      	strb	r2, [r3, #2]
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
    85da:	003b      	movs	r3, r7
    85dc:	220c      	movs	r2, #12
    85de:	70da      	strb	r2, [r3, #3]
	wdt_set_config(&config_wdt);
    85e0:	003b      	movs	r3, r7
    85e2:	0018      	movs	r0, r3
    85e4:	4b03      	ldr	r3, [pc, #12]	; (85f4 <configure_wdt+0x34>)
    85e6:	4798      	blx	r3
}
    85e8:	46c0      	nop			; (mov r8, r8)
    85ea:	46bd      	mov	sp, r7
    85ec:	b002      	add	sp, #8
    85ee:	bd80      	pop	{r7, pc}
    85f0:	0000858d 	.word	0x0000858d
    85f4:	00006a91 	.word	0x00006a91

000085f8 <main>:

int main (void)
{
    85f8:	b580      	push	{r7, lr}
    85fa:	af00      	add	r7, sp, #0
	system_init();
    85fc:	4b10      	ldr	r3, [pc, #64]	; (8640 <main+0x48>)
    85fe:	4798      	blx	r3
	delay_init();
    8600:	4b10      	ldr	r3, [pc, #64]	; (8644 <main+0x4c>)
    8602:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();
    8604:	4b10      	ldr	r3, [pc, #64]	; (8648 <main+0x50>)
    8606:	4798      	blx	r3
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    8608:	2380      	movs	r3, #128	; 0x80
    860a:	005b      	lsls	r3, r3, #1
    860c:	2103      	movs	r1, #3
    860e:	0018      	movs	r0, r3
    8610:	4b0e      	ldr	r3, [pc, #56]	; (864c <main+0x54>)
    8612:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    8614:	2380      	movs	r3, #128	; 0x80
    8616:	009b      	lsls	r3, r3, #2
    8618:	2102      	movs	r1, #2
    861a:	0018      	movs	r0, r3
    861c:	4b0c      	ldr	r3, [pc, #48]	; (8650 <main+0x58>)
    861e:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    8620:	2380      	movs	r3, #128	; 0x80
    8622:	009b      	lsls	r3, r3, #2
    8624:	2102      	movs	r1, #2
    8626:	0018      	movs	r0, r3
    8628:	4b0a      	ldr	r3, [pc, #40]	; (8654 <main+0x5c>)
    862a:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    862c:	2380      	movs	r3, #128	; 0x80
    862e:	009b      	lsls	r3, r3, #2
    8630:	2101      	movs	r1, #1
    8632:	0018      	movs	r0, r3
    8634:	4b08      	ldr	r3, [pc, #32]	; (8658 <main+0x60>)
    8636:	4798      	blx	r3

	vTaskStartScheduler();
    8638:	4b08      	ldr	r3, [pc, #32]	; (865c <main+0x64>)
    863a:	4798      	blx	r3
	
	// Should never get here, FreeRTOS tasks should have begun
	for (;;)
    863c:	e7fe      	b.n	863c <main+0x44>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	0000841d 	.word	0x0000841d
    8644:	00007079 	.word	0x00007079
    8648:	000085c1 	.word	0x000085c1
    864c:	000045b5 	.word	0x000045b5
    8650:	00003bd5 	.word	0x00003bd5
    8654:	000047e5 	.word	0x000047e5
    8658:	000044c1 	.word	0x000044c1
    865c:	0000595d 	.word	0x0000595d

00008660 <vApplicationMallocFailedHook>:
/******* FreeRTOS User-Defined Hooks *******/

void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
    8660:	b580      	push	{r7, lr}
    8662:	af00      	add	r7, sp, #0
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    8664:	b672      	cpsid	i
	for (;;)
    8666:	e7fe      	b.n	8666 <vApplicationMallocFailedHook+0x6>

00008668 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    8668:	b580      	push	{r7, lr}
    866a:	af00      	add	r7, sp, #0
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    866c:	4b02      	ldr	r3, [pc, #8]	; (8678 <vApplicationIdleHook+0x10>)
    866e:	4798      	blx	r3
}
    8670:	46c0      	nop			; (mov r8, r8)
    8672:	46bd      	mov	sp, r7
    8674:	bd80      	pop	{r7, pc}
    8676:	46c0      	nop			; (mov r8, r8)
    8678:	00006c09 	.word	0x00006c09

0000867c <vApplicationTickHook>:

void vApplicationTickHook(void);

void vApplicationTickHook(void)
{
    867c:	b580      	push	{r7, lr}
    867e:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    8680:	46c0      	nop			; (mov r8, r8)
    8682:	46bd      	mov	sp, r7
    8684:	bd80      	pop	{r7, pc}

00008686 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
    8686:	b580      	push	{r7, lr}
    8688:	af00      	add	r7, sp, #0
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    868a:	b672      	cpsid	i
	for (;;)
    868c:	e7fe      	b.n	868c <vApplicationStackOverflowHook+0x6>

0000868e <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    868e:	b580      	push	{r7, lr}
    8690:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	for (;;)
    8692:	e7fe      	b.n	8692 <HardFault_Handler+0x4>

00008694 <NMI_Handler>:
	{
	}
}

ISR(NMI_Handler)
{
    8694:	b580      	push	{r7, lr}
    8696:	b082      	sub	sp, #8
    8698:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	volatile int a = 0;
    869a:	2300      	movs	r3, #0
    869c:	607b      	str	r3, [r7, #4]
}
    869e:	46c0      	nop			; (mov r8, r8)
    86a0:	46bd      	mov	sp, r7
    86a2:	b002      	add	sp, #8
    86a4:	bd80      	pop	{r7, pc}
	...

000086a8 <__udivsi3>:
    86a8:	2200      	movs	r2, #0
    86aa:	0843      	lsrs	r3, r0, #1
    86ac:	428b      	cmp	r3, r1
    86ae:	d374      	bcc.n	879a <__udivsi3+0xf2>
    86b0:	0903      	lsrs	r3, r0, #4
    86b2:	428b      	cmp	r3, r1
    86b4:	d35f      	bcc.n	8776 <__udivsi3+0xce>
    86b6:	0a03      	lsrs	r3, r0, #8
    86b8:	428b      	cmp	r3, r1
    86ba:	d344      	bcc.n	8746 <__udivsi3+0x9e>
    86bc:	0b03      	lsrs	r3, r0, #12
    86be:	428b      	cmp	r3, r1
    86c0:	d328      	bcc.n	8714 <__udivsi3+0x6c>
    86c2:	0c03      	lsrs	r3, r0, #16
    86c4:	428b      	cmp	r3, r1
    86c6:	d30d      	bcc.n	86e4 <__udivsi3+0x3c>
    86c8:	22ff      	movs	r2, #255	; 0xff
    86ca:	0209      	lsls	r1, r1, #8
    86cc:	ba12      	rev	r2, r2
    86ce:	0c03      	lsrs	r3, r0, #16
    86d0:	428b      	cmp	r3, r1
    86d2:	d302      	bcc.n	86da <__udivsi3+0x32>
    86d4:	1212      	asrs	r2, r2, #8
    86d6:	0209      	lsls	r1, r1, #8
    86d8:	d065      	beq.n	87a6 <__udivsi3+0xfe>
    86da:	0b03      	lsrs	r3, r0, #12
    86dc:	428b      	cmp	r3, r1
    86de:	d319      	bcc.n	8714 <__udivsi3+0x6c>
    86e0:	e000      	b.n	86e4 <__udivsi3+0x3c>
    86e2:	0a09      	lsrs	r1, r1, #8
    86e4:	0bc3      	lsrs	r3, r0, #15
    86e6:	428b      	cmp	r3, r1
    86e8:	d301      	bcc.n	86ee <__udivsi3+0x46>
    86ea:	03cb      	lsls	r3, r1, #15
    86ec:	1ac0      	subs	r0, r0, r3
    86ee:	4152      	adcs	r2, r2
    86f0:	0b83      	lsrs	r3, r0, #14
    86f2:	428b      	cmp	r3, r1
    86f4:	d301      	bcc.n	86fa <__udivsi3+0x52>
    86f6:	038b      	lsls	r3, r1, #14
    86f8:	1ac0      	subs	r0, r0, r3
    86fa:	4152      	adcs	r2, r2
    86fc:	0b43      	lsrs	r3, r0, #13
    86fe:	428b      	cmp	r3, r1
    8700:	d301      	bcc.n	8706 <__udivsi3+0x5e>
    8702:	034b      	lsls	r3, r1, #13
    8704:	1ac0      	subs	r0, r0, r3
    8706:	4152      	adcs	r2, r2
    8708:	0b03      	lsrs	r3, r0, #12
    870a:	428b      	cmp	r3, r1
    870c:	d301      	bcc.n	8712 <__udivsi3+0x6a>
    870e:	030b      	lsls	r3, r1, #12
    8710:	1ac0      	subs	r0, r0, r3
    8712:	4152      	adcs	r2, r2
    8714:	0ac3      	lsrs	r3, r0, #11
    8716:	428b      	cmp	r3, r1
    8718:	d301      	bcc.n	871e <__udivsi3+0x76>
    871a:	02cb      	lsls	r3, r1, #11
    871c:	1ac0      	subs	r0, r0, r3
    871e:	4152      	adcs	r2, r2
    8720:	0a83      	lsrs	r3, r0, #10
    8722:	428b      	cmp	r3, r1
    8724:	d301      	bcc.n	872a <__udivsi3+0x82>
    8726:	028b      	lsls	r3, r1, #10
    8728:	1ac0      	subs	r0, r0, r3
    872a:	4152      	adcs	r2, r2
    872c:	0a43      	lsrs	r3, r0, #9
    872e:	428b      	cmp	r3, r1
    8730:	d301      	bcc.n	8736 <__udivsi3+0x8e>
    8732:	024b      	lsls	r3, r1, #9
    8734:	1ac0      	subs	r0, r0, r3
    8736:	4152      	adcs	r2, r2
    8738:	0a03      	lsrs	r3, r0, #8
    873a:	428b      	cmp	r3, r1
    873c:	d301      	bcc.n	8742 <__udivsi3+0x9a>
    873e:	020b      	lsls	r3, r1, #8
    8740:	1ac0      	subs	r0, r0, r3
    8742:	4152      	adcs	r2, r2
    8744:	d2cd      	bcs.n	86e2 <__udivsi3+0x3a>
    8746:	09c3      	lsrs	r3, r0, #7
    8748:	428b      	cmp	r3, r1
    874a:	d301      	bcc.n	8750 <__udivsi3+0xa8>
    874c:	01cb      	lsls	r3, r1, #7
    874e:	1ac0      	subs	r0, r0, r3
    8750:	4152      	adcs	r2, r2
    8752:	0983      	lsrs	r3, r0, #6
    8754:	428b      	cmp	r3, r1
    8756:	d301      	bcc.n	875c <__udivsi3+0xb4>
    8758:	018b      	lsls	r3, r1, #6
    875a:	1ac0      	subs	r0, r0, r3
    875c:	4152      	adcs	r2, r2
    875e:	0943      	lsrs	r3, r0, #5
    8760:	428b      	cmp	r3, r1
    8762:	d301      	bcc.n	8768 <__udivsi3+0xc0>
    8764:	014b      	lsls	r3, r1, #5
    8766:	1ac0      	subs	r0, r0, r3
    8768:	4152      	adcs	r2, r2
    876a:	0903      	lsrs	r3, r0, #4
    876c:	428b      	cmp	r3, r1
    876e:	d301      	bcc.n	8774 <__udivsi3+0xcc>
    8770:	010b      	lsls	r3, r1, #4
    8772:	1ac0      	subs	r0, r0, r3
    8774:	4152      	adcs	r2, r2
    8776:	08c3      	lsrs	r3, r0, #3
    8778:	428b      	cmp	r3, r1
    877a:	d301      	bcc.n	8780 <__udivsi3+0xd8>
    877c:	00cb      	lsls	r3, r1, #3
    877e:	1ac0      	subs	r0, r0, r3
    8780:	4152      	adcs	r2, r2
    8782:	0883      	lsrs	r3, r0, #2
    8784:	428b      	cmp	r3, r1
    8786:	d301      	bcc.n	878c <__udivsi3+0xe4>
    8788:	008b      	lsls	r3, r1, #2
    878a:	1ac0      	subs	r0, r0, r3
    878c:	4152      	adcs	r2, r2
    878e:	0843      	lsrs	r3, r0, #1
    8790:	428b      	cmp	r3, r1
    8792:	d301      	bcc.n	8798 <__udivsi3+0xf0>
    8794:	004b      	lsls	r3, r1, #1
    8796:	1ac0      	subs	r0, r0, r3
    8798:	4152      	adcs	r2, r2
    879a:	1a41      	subs	r1, r0, r1
    879c:	d200      	bcs.n	87a0 <__udivsi3+0xf8>
    879e:	4601      	mov	r1, r0
    87a0:	4152      	adcs	r2, r2
    87a2:	4610      	mov	r0, r2
    87a4:	4770      	bx	lr
    87a6:	e7ff      	b.n	87a8 <__udivsi3+0x100>
    87a8:	b501      	push	{r0, lr}
    87aa:	2000      	movs	r0, #0
    87ac:	f000 f806 	bl	87bc <__aeabi_idiv0>
    87b0:	bd02      	pop	{r1, pc}
    87b2:	46c0      	nop			; (mov r8, r8)

000087b4 <__aeabi_uidivmod>:
    87b4:	2900      	cmp	r1, #0
    87b6:	d0f7      	beq.n	87a8 <__udivsi3+0x100>
    87b8:	e776      	b.n	86a8 <__udivsi3>
    87ba:	4770      	bx	lr

000087bc <__aeabi_idiv0>:
    87bc:	4770      	bx	lr
    87be:	46c0      	nop			; (mov r8, r8)

000087c0 <__aeabi_cdrcmple>:
    87c0:	4684      	mov	ip, r0
    87c2:	1c10      	adds	r0, r2, #0
    87c4:	4662      	mov	r2, ip
    87c6:	468c      	mov	ip, r1
    87c8:	1c19      	adds	r1, r3, #0
    87ca:	4663      	mov	r3, ip
    87cc:	e000      	b.n	87d0 <__aeabi_cdcmpeq>
    87ce:	46c0      	nop			; (mov r8, r8)

000087d0 <__aeabi_cdcmpeq>:
    87d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    87d2:	f001 fe15 	bl	a400 <__ledf2>
    87d6:	2800      	cmp	r0, #0
    87d8:	d401      	bmi.n	87de <__aeabi_cdcmpeq+0xe>
    87da:	2100      	movs	r1, #0
    87dc:	42c8      	cmn	r0, r1
    87de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000087e0 <__aeabi_dcmpeq>:
    87e0:	b510      	push	{r4, lr}
    87e2:	f001 fd6f 	bl	a2c4 <__eqdf2>
    87e6:	4240      	negs	r0, r0
    87e8:	3001      	adds	r0, #1
    87ea:	bd10      	pop	{r4, pc}

000087ec <__aeabi_dcmplt>:
    87ec:	b510      	push	{r4, lr}
    87ee:	f001 fe07 	bl	a400 <__ledf2>
    87f2:	2800      	cmp	r0, #0
    87f4:	db01      	blt.n	87fa <__aeabi_dcmplt+0xe>
    87f6:	2000      	movs	r0, #0
    87f8:	bd10      	pop	{r4, pc}
    87fa:	2001      	movs	r0, #1
    87fc:	bd10      	pop	{r4, pc}
    87fe:	46c0      	nop			; (mov r8, r8)

00008800 <__aeabi_dcmple>:
    8800:	b510      	push	{r4, lr}
    8802:	f001 fdfd 	bl	a400 <__ledf2>
    8806:	2800      	cmp	r0, #0
    8808:	dd01      	ble.n	880e <__aeabi_dcmple+0xe>
    880a:	2000      	movs	r0, #0
    880c:	bd10      	pop	{r4, pc}
    880e:	2001      	movs	r0, #1
    8810:	bd10      	pop	{r4, pc}
    8812:	46c0      	nop			; (mov r8, r8)

00008814 <__aeabi_dcmpgt>:
    8814:	b510      	push	{r4, lr}
    8816:	f001 fd8f 	bl	a338 <__gedf2>
    881a:	2800      	cmp	r0, #0
    881c:	dc01      	bgt.n	8822 <__aeabi_dcmpgt+0xe>
    881e:	2000      	movs	r0, #0
    8820:	bd10      	pop	{r4, pc}
    8822:	2001      	movs	r0, #1
    8824:	bd10      	pop	{r4, pc}
    8826:	46c0      	nop			; (mov r8, r8)

00008828 <__aeabi_dcmpge>:
    8828:	b510      	push	{r4, lr}
    882a:	f001 fd85 	bl	a338 <__gedf2>
    882e:	2800      	cmp	r0, #0
    8830:	da01      	bge.n	8836 <__aeabi_dcmpge+0xe>
    8832:	2000      	movs	r0, #0
    8834:	bd10      	pop	{r4, pc}
    8836:	2001      	movs	r0, #1
    8838:	bd10      	pop	{r4, pc}
    883a:	46c0      	nop			; (mov r8, r8)

0000883c <__aeabi_cfrcmple>:
    883c:	4684      	mov	ip, r0
    883e:	1c08      	adds	r0, r1, #0
    8840:	4661      	mov	r1, ip
    8842:	e7ff      	b.n	8844 <__aeabi_cfcmpeq>

00008844 <__aeabi_cfcmpeq>:
    8844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8846:	f000 fb8b 	bl	8f60 <__lesf2>
    884a:	2800      	cmp	r0, #0
    884c:	d401      	bmi.n	8852 <__aeabi_cfcmpeq+0xe>
    884e:	2100      	movs	r1, #0
    8850:	42c8      	cmn	r0, r1
    8852:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008854 <__aeabi_fcmpeq>:
    8854:	b510      	push	{r4, lr}
    8856:	f000 fb1d 	bl	8e94 <__eqsf2>
    885a:	4240      	negs	r0, r0
    885c:	3001      	adds	r0, #1
    885e:	bd10      	pop	{r4, pc}

00008860 <__aeabi_fcmplt>:
    8860:	b510      	push	{r4, lr}
    8862:	f000 fb7d 	bl	8f60 <__lesf2>
    8866:	2800      	cmp	r0, #0
    8868:	db01      	blt.n	886e <__aeabi_fcmplt+0xe>
    886a:	2000      	movs	r0, #0
    886c:	bd10      	pop	{r4, pc}
    886e:	2001      	movs	r0, #1
    8870:	bd10      	pop	{r4, pc}
    8872:	46c0      	nop			; (mov r8, r8)

00008874 <__aeabi_fcmple>:
    8874:	b510      	push	{r4, lr}
    8876:	f000 fb73 	bl	8f60 <__lesf2>
    887a:	2800      	cmp	r0, #0
    887c:	dd01      	ble.n	8882 <__aeabi_fcmple+0xe>
    887e:	2000      	movs	r0, #0
    8880:	bd10      	pop	{r4, pc}
    8882:	2001      	movs	r0, #1
    8884:	bd10      	pop	{r4, pc}
    8886:	46c0      	nop			; (mov r8, r8)

00008888 <__aeabi_fcmpgt>:
    8888:	b510      	push	{r4, lr}
    888a:	f000 fb29 	bl	8ee0 <__gesf2>
    888e:	2800      	cmp	r0, #0
    8890:	dc01      	bgt.n	8896 <__aeabi_fcmpgt+0xe>
    8892:	2000      	movs	r0, #0
    8894:	bd10      	pop	{r4, pc}
    8896:	2001      	movs	r0, #1
    8898:	bd10      	pop	{r4, pc}
    889a:	46c0      	nop			; (mov r8, r8)

0000889c <__aeabi_fcmpge>:
    889c:	b510      	push	{r4, lr}
    889e:	f000 fb1f 	bl	8ee0 <__gesf2>
    88a2:	2800      	cmp	r0, #0
    88a4:	da01      	bge.n	88aa <__aeabi_fcmpge+0xe>
    88a6:	2000      	movs	r0, #0
    88a8:	bd10      	pop	{r4, pc}
    88aa:	2001      	movs	r0, #1
    88ac:	bd10      	pop	{r4, pc}
    88ae:	46c0      	nop			; (mov r8, r8)

000088b0 <__aeabi_f2uiz>:
    88b0:	219e      	movs	r1, #158	; 0x9e
    88b2:	b510      	push	{r4, lr}
    88b4:	05c9      	lsls	r1, r1, #23
    88b6:	1c04      	adds	r4, r0, #0
    88b8:	f7ff fff0 	bl	889c <__aeabi_fcmpge>
    88bc:	2800      	cmp	r0, #0
    88be:	d103      	bne.n	88c8 <__aeabi_f2uiz+0x18>
    88c0:	1c20      	adds	r0, r4, #0
    88c2:	f000 fe4b 	bl	955c <__aeabi_f2iz>
    88c6:	bd10      	pop	{r4, pc}
    88c8:	219e      	movs	r1, #158	; 0x9e
    88ca:	1c20      	adds	r0, r4, #0
    88cc:	05c9      	lsls	r1, r1, #23
    88ce:	f000 fca9 	bl	9224 <__aeabi_fsub>
    88d2:	f000 fe43 	bl	955c <__aeabi_f2iz>
    88d6:	2380      	movs	r3, #128	; 0x80
    88d8:	061b      	lsls	r3, r3, #24
    88da:	469c      	mov	ip, r3
    88dc:	4460      	add	r0, ip
    88de:	e7f2      	b.n	88c6 <__aeabi_f2uiz+0x16>

000088e0 <__aeabi_fadd>:
    88e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    88e2:	46c6      	mov	lr, r8
    88e4:	024e      	lsls	r6, r1, #9
    88e6:	0247      	lsls	r7, r0, #9
    88e8:	0a76      	lsrs	r6, r6, #9
    88ea:	0a7b      	lsrs	r3, r7, #9
    88ec:	0044      	lsls	r4, r0, #1
    88ee:	0fc5      	lsrs	r5, r0, #31
    88f0:	00f7      	lsls	r7, r6, #3
    88f2:	0048      	lsls	r0, r1, #1
    88f4:	4698      	mov	r8, r3
    88f6:	b500      	push	{lr}
    88f8:	0e24      	lsrs	r4, r4, #24
    88fa:	002a      	movs	r2, r5
    88fc:	00db      	lsls	r3, r3, #3
    88fe:	0e00      	lsrs	r0, r0, #24
    8900:	0fc9      	lsrs	r1, r1, #31
    8902:	46bc      	mov	ip, r7
    8904:	428d      	cmp	r5, r1
    8906:	d067      	beq.n	89d8 <__aeabi_fadd+0xf8>
    8908:	1a22      	subs	r2, r4, r0
    890a:	2a00      	cmp	r2, #0
    890c:	dc00      	bgt.n	8910 <__aeabi_fadd+0x30>
    890e:	e0a5      	b.n	8a5c <__aeabi_fadd+0x17c>
    8910:	2800      	cmp	r0, #0
    8912:	d13a      	bne.n	898a <__aeabi_fadd+0xaa>
    8914:	2f00      	cmp	r7, #0
    8916:	d100      	bne.n	891a <__aeabi_fadd+0x3a>
    8918:	e093      	b.n	8a42 <__aeabi_fadd+0x162>
    891a:	1e51      	subs	r1, r2, #1
    891c:	2900      	cmp	r1, #0
    891e:	d000      	beq.n	8922 <__aeabi_fadd+0x42>
    8920:	e0bc      	b.n	8a9c <__aeabi_fadd+0x1bc>
    8922:	2401      	movs	r4, #1
    8924:	1bdb      	subs	r3, r3, r7
    8926:	015a      	lsls	r2, r3, #5
    8928:	d546      	bpl.n	89b8 <__aeabi_fadd+0xd8>
    892a:	019b      	lsls	r3, r3, #6
    892c:	099e      	lsrs	r6, r3, #6
    892e:	0030      	movs	r0, r6
    8930:	f002 fce8 	bl	b304 <__clzsi2>
    8934:	3805      	subs	r0, #5
    8936:	4086      	lsls	r6, r0
    8938:	4284      	cmp	r4, r0
    893a:	dd00      	ble.n	893e <__aeabi_fadd+0x5e>
    893c:	e09d      	b.n	8a7a <__aeabi_fadd+0x19a>
    893e:	1b04      	subs	r4, r0, r4
    8940:	0032      	movs	r2, r6
    8942:	2020      	movs	r0, #32
    8944:	3401      	adds	r4, #1
    8946:	40e2      	lsrs	r2, r4
    8948:	1b04      	subs	r4, r0, r4
    894a:	40a6      	lsls	r6, r4
    894c:	0033      	movs	r3, r6
    894e:	1e5e      	subs	r6, r3, #1
    8950:	41b3      	sbcs	r3, r6
    8952:	2400      	movs	r4, #0
    8954:	4313      	orrs	r3, r2
    8956:	075a      	lsls	r2, r3, #29
    8958:	d004      	beq.n	8964 <__aeabi_fadd+0x84>
    895a:	220f      	movs	r2, #15
    895c:	401a      	ands	r2, r3
    895e:	2a04      	cmp	r2, #4
    8960:	d000      	beq.n	8964 <__aeabi_fadd+0x84>
    8962:	3304      	adds	r3, #4
    8964:	015a      	lsls	r2, r3, #5
    8966:	d529      	bpl.n	89bc <__aeabi_fadd+0xdc>
    8968:	3401      	adds	r4, #1
    896a:	2cff      	cmp	r4, #255	; 0xff
    896c:	d100      	bne.n	8970 <__aeabi_fadd+0x90>
    896e:	e081      	b.n	8a74 <__aeabi_fadd+0x194>
    8970:	002a      	movs	r2, r5
    8972:	019b      	lsls	r3, r3, #6
    8974:	0a5b      	lsrs	r3, r3, #9
    8976:	b2e4      	uxtb	r4, r4
    8978:	025b      	lsls	r3, r3, #9
    897a:	05e4      	lsls	r4, r4, #23
    897c:	0a58      	lsrs	r0, r3, #9
    897e:	07d2      	lsls	r2, r2, #31
    8980:	4320      	orrs	r0, r4
    8982:	4310      	orrs	r0, r2
    8984:	bc04      	pop	{r2}
    8986:	4690      	mov	r8, r2
    8988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    898a:	2cff      	cmp	r4, #255	; 0xff
    898c:	d0e3      	beq.n	8956 <__aeabi_fadd+0x76>
    898e:	2180      	movs	r1, #128	; 0x80
    8990:	0038      	movs	r0, r7
    8992:	04c9      	lsls	r1, r1, #19
    8994:	4308      	orrs	r0, r1
    8996:	4684      	mov	ip, r0
    8998:	2a1b      	cmp	r2, #27
    899a:	dd00      	ble.n	899e <__aeabi_fadd+0xbe>
    899c:	e082      	b.n	8aa4 <__aeabi_fadd+0x1c4>
    899e:	2020      	movs	r0, #32
    89a0:	4661      	mov	r1, ip
    89a2:	40d1      	lsrs	r1, r2
    89a4:	1a82      	subs	r2, r0, r2
    89a6:	4660      	mov	r0, ip
    89a8:	4090      	lsls	r0, r2
    89aa:	0002      	movs	r2, r0
    89ac:	1e50      	subs	r0, r2, #1
    89ae:	4182      	sbcs	r2, r0
    89b0:	430a      	orrs	r2, r1
    89b2:	1a9b      	subs	r3, r3, r2
    89b4:	015a      	lsls	r2, r3, #5
    89b6:	d4b8      	bmi.n	892a <__aeabi_fadd+0x4a>
    89b8:	075a      	lsls	r2, r3, #29
    89ba:	d1ce      	bne.n	895a <__aeabi_fadd+0x7a>
    89bc:	08de      	lsrs	r6, r3, #3
    89be:	002a      	movs	r2, r5
    89c0:	2cff      	cmp	r4, #255	; 0xff
    89c2:	d13a      	bne.n	8a3a <__aeabi_fadd+0x15a>
    89c4:	2e00      	cmp	r6, #0
    89c6:	d100      	bne.n	89ca <__aeabi_fadd+0xea>
    89c8:	e0ae      	b.n	8b28 <__aeabi_fadd+0x248>
    89ca:	2380      	movs	r3, #128	; 0x80
    89cc:	03db      	lsls	r3, r3, #15
    89ce:	4333      	orrs	r3, r6
    89d0:	025b      	lsls	r3, r3, #9
    89d2:	0a5b      	lsrs	r3, r3, #9
    89d4:	24ff      	movs	r4, #255	; 0xff
    89d6:	e7cf      	b.n	8978 <__aeabi_fadd+0x98>
    89d8:	1a21      	subs	r1, r4, r0
    89da:	2900      	cmp	r1, #0
    89dc:	dd52      	ble.n	8a84 <__aeabi_fadd+0x1a4>
    89de:	2800      	cmp	r0, #0
    89e0:	d031      	beq.n	8a46 <__aeabi_fadd+0x166>
    89e2:	2cff      	cmp	r4, #255	; 0xff
    89e4:	d0b7      	beq.n	8956 <__aeabi_fadd+0x76>
    89e6:	2080      	movs	r0, #128	; 0x80
    89e8:	003e      	movs	r6, r7
    89ea:	04c0      	lsls	r0, r0, #19
    89ec:	4306      	orrs	r6, r0
    89ee:	46b4      	mov	ip, r6
    89f0:	291b      	cmp	r1, #27
    89f2:	dd00      	ble.n	89f6 <__aeabi_fadd+0x116>
    89f4:	e0aa      	b.n	8b4c <__aeabi_fadd+0x26c>
    89f6:	2620      	movs	r6, #32
    89f8:	4660      	mov	r0, ip
    89fa:	40c8      	lsrs	r0, r1
    89fc:	1a71      	subs	r1, r6, r1
    89fe:	4666      	mov	r6, ip
    8a00:	408e      	lsls	r6, r1
    8a02:	0031      	movs	r1, r6
    8a04:	1e4e      	subs	r6, r1, #1
    8a06:	41b1      	sbcs	r1, r6
    8a08:	4301      	orrs	r1, r0
    8a0a:	185b      	adds	r3, r3, r1
    8a0c:	0159      	lsls	r1, r3, #5
    8a0e:	d5d3      	bpl.n	89b8 <__aeabi_fadd+0xd8>
    8a10:	3401      	adds	r4, #1
    8a12:	2cff      	cmp	r4, #255	; 0xff
    8a14:	d100      	bne.n	8a18 <__aeabi_fadd+0x138>
    8a16:	e087      	b.n	8b28 <__aeabi_fadd+0x248>
    8a18:	2201      	movs	r2, #1
    8a1a:	4978      	ldr	r1, [pc, #480]	; (8bfc <__aeabi_fadd+0x31c>)
    8a1c:	401a      	ands	r2, r3
    8a1e:	085b      	lsrs	r3, r3, #1
    8a20:	400b      	ands	r3, r1
    8a22:	4313      	orrs	r3, r2
    8a24:	e797      	b.n	8956 <__aeabi_fadd+0x76>
    8a26:	2c00      	cmp	r4, #0
    8a28:	d000      	beq.n	8a2c <__aeabi_fadd+0x14c>
    8a2a:	e0a7      	b.n	8b7c <__aeabi_fadd+0x29c>
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d000      	beq.n	8a32 <__aeabi_fadd+0x152>
    8a30:	e0b6      	b.n	8ba0 <__aeabi_fadd+0x2c0>
    8a32:	1e3b      	subs	r3, r7, #0
    8a34:	d162      	bne.n	8afc <__aeabi_fadd+0x21c>
    8a36:	2600      	movs	r6, #0
    8a38:	2200      	movs	r2, #0
    8a3a:	0273      	lsls	r3, r6, #9
    8a3c:	0a5b      	lsrs	r3, r3, #9
    8a3e:	b2e4      	uxtb	r4, r4
    8a40:	e79a      	b.n	8978 <__aeabi_fadd+0x98>
    8a42:	0014      	movs	r4, r2
    8a44:	e787      	b.n	8956 <__aeabi_fadd+0x76>
    8a46:	2f00      	cmp	r7, #0
    8a48:	d04d      	beq.n	8ae6 <__aeabi_fadd+0x206>
    8a4a:	1e48      	subs	r0, r1, #1
    8a4c:	2800      	cmp	r0, #0
    8a4e:	d157      	bne.n	8b00 <__aeabi_fadd+0x220>
    8a50:	4463      	add	r3, ip
    8a52:	2401      	movs	r4, #1
    8a54:	015a      	lsls	r2, r3, #5
    8a56:	d5af      	bpl.n	89b8 <__aeabi_fadd+0xd8>
    8a58:	2402      	movs	r4, #2
    8a5a:	e7dd      	b.n	8a18 <__aeabi_fadd+0x138>
    8a5c:	2a00      	cmp	r2, #0
    8a5e:	d124      	bne.n	8aaa <__aeabi_fadd+0x1ca>
    8a60:	1c62      	adds	r2, r4, #1
    8a62:	b2d2      	uxtb	r2, r2
    8a64:	2a01      	cmp	r2, #1
    8a66:	ddde      	ble.n	8a26 <__aeabi_fadd+0x146>
    8a68:	1bde      	subs	r6, r3, r7
    8a6a:	0172      	lsls	r2, r6, #5
    8a6c:	d535      	bpl.n	8ada <__aeabi_fadd+0x1fa>
    8a6e:	1afe      	subs	r6, r7, r3
    8a70:	000d      	movs	r5, r1
    8a72:	e75c      	b.n	892e <__aeabi_fadd+0x4e>
    8a74:	002a      	movs	r2, r5
    8a76:	2300      	movs	r3, #0
    8a78:	e77e      	b.n	8978 <__aeabi_fadd+0x98>
    8a7a:	0033      	movs	r3, r6
    8a7c:	4a60      	ldr	r2, [pc, #384]	; (8c00 <__aeabi_fadd+0x320>)
    8a7e:	1a24      	subs	r4, r4, r0
    8a80:	4013      	ands	r3, r2
    8a82:	e768      	b.n	8956 <__aeabi_fadd+0x76>
    8a84:	2900      	cmp	r1, #0
    8a86:	d163      	bne.n	8b50 <__aeabi_fadd+0x270>
    8a88:	1c61      	adds	r1, r4, #1
    8a8a:	b2c8      	uxtb	r0, r1
    8a8c:	2801      	cmp	r0, #1
    8a8e:	dd4e      	ble.n	8b2e <__aeabi_fadd+0x24e>
    8a90:	29ff      	cmp	r1, #255	; 0xff
    8a92:	d049      	beq.n	8b28 <__aeabi_fadd+0x248>
    8a94:	4463      	add	r3, ip
    8a96:	085b      	lsrs	r3, r3, #1
    8a98:	000c      	movs	r4, r1
    8a9a:	e75c      	b.n	8956 <__aeabi_fadd+0x76>
    8a9c:	2aff      	cmp	r2, #255	; 0xff
    8a9e:	d041      	beq.n	8b24 <__aeabi_fadd+0x244>
    8aa0:	000a      	movs	r2, r1
    8aa2:	e779      	b.n	8998 <__aeabi_fadd+0xb8>
    8aa4:	2201      	movs	r2, #1
    8aa6:	1a9b      	subs	r3, r3, r2
    8aa8:	e784      	b.n	89b4 <__aeabi_fadd+0xd4>
    8aaa:	2c00      	cmp	r4, #0
    8aac:	d01d      	beq.n	8aea <__aeabi_fadd+0x20a>
    8aae:	28ff      	cmp	r0, #255	; 0xff
    8ab0:	d022      	beq.n	8af8 <__aeabi_fadd+0x218>
    8ab2:	2480      	movs	r4, #128	; 0x80
    8ab4:	04e4      	lsls	r4, r4, #19
    8ab6:	4252      	negs	r2, r2
    8ab8:	4323      	orrs	r3, r4
    8aba:	2a1b      	cmp	r2, #27
    8abc:	dd00      	ble.n	8ac0 <__aeabi_fadd+0x1e0>
    8abe:	e08a      	b.n	8bd6 <__aeabi_fadd+0x2f6>
    8ac0:	001c      	movs	r4, r3
    8ac2:	2520      	movs	r5, #32
    8ac4:	40d4      	lsrs	r4, r2
    8ac6:	1aaa      	subs	r2, r5, r2
    8ac8:	4093      	lsls	r3, r2
    8aca:	1e5a      	subs	r2, r3, #1
    8acc:	4193      	sbcs	r3, r2
    8ace:	4323      	orrs	r3, r4
    8ad0:	4662      	mov	r2, ip
    8ad2:	0004      	movs	r4, r0
    8ad4:	1ad3      	subs	r3, r2, r3
    8ad6:	000d      	movs	r5, r1
    8ad8:	e725      	b.n	8926 <__aeabi_fadd+0x46>
    8ada:	2e00      	cmp	r6, #0
    8adc:	d000      	beq.n	8ae0 <__aeabi_fadd+0x200>
    8ade:	e726      	b.n	892e <__aeabi_fadd+0x4e>
    8ae0:	2200      	movs	r2, #0
    8ae2:	2400      	movs	r4, #0
    8ae4:	e7a9      	b.n	8a3a <__aeabi_fadd+0x15a>
    8ae6:	000c      	movs	r4, r1
    8ae8:	e735      	b.n	8956 <__aeabi_fadd+0x76>
    8aea:	2b00      	cmp	r3, #0
    8aec:	d04d      	beq.n	8b8a <__aeabi_fadd+0x2aa>
    8aee:	43d2      	mvns	r2, r2
    8af0:	2a00      	cmp	r2, #0
    8af2:	d0ed      	beq.n	8ad0 <__aeabi_fadd+0x1f0>
    8af4:	28ff      	cmp	r0, #255	; 0xff
    8af6:	d1e0      	bne.n	8aba <__aeabi_fadd+0x1da>
    8af8:	4663      	mov	r3, ip
    8afa:	24ff      	movs	r4, #255	; 0xff
    8afc:	000d      	movs	r5, r1
    8afe:	e72a      	b.n	8956 <__aeabi_fadd+0x76>
    8b00:	29ff      	cmp	r1, #255	; 0xff
    8b02:	d00f      	beq.n	8b24 <__aeabi_fadd+0x244>
    8b04:	0001      	movs	r1, r0
    8b06:	e773      	b.n	89f0 <__aeabi_fadd+0x110>
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d061      	beq.n	8bd0 <__aeabi_fadd+0x2f0>
    8b0c:	24ff      	movs	r4, #255	; 0xff
    8b0e:	2f00      	cmp	r7, #0
    8b10:	d100      	bne.n	8b14 <__aeabi_fadd+0x234>
    8b12:	e720      	b.n	8956 <__aeabi_fadd+0x76>
    8b14:	2280      	movs	r2, #128	; 0x80
    8b16:	4641      	mov	r1, r8
    8b18:	03d2      	lsls	r2, r2, #15
    8b1a:	4211      	tst	r1, r2
    8b1c:	d002      	beq.n	8b24 <__aeabi_fadd+0x244>
    8b1e:	4216      	tst	r6, r2
    8b20:	d100      	bne.n	8b24 <__aeabi_fadd+0x244>
    8b22:	003b      	movs	r3, r7
    8b24:	24ff      	movs	r4, #255	; 0xff
    8b26:	e716      	b.n	8956 <__aeabi_fadd+0x76>
    8b28:	24ff      	movs	r4, #255	; 0xff
    8b2a:	2300      	movs	r3, #0
    8b2c:	e724      	b.n	8978 <__aeabi_fadd+0x98>
    8b2e:	2c00      	cmp	r4, #0
    8b30:	d1ea      	bne.n	8b08 <__aeabi_fadd+0x228>
    8b32:	2b00      	cmp	r3, #0
    8b34:	d058      	beq.n	8be8 <__aeabi_fadd+0x308>
    8b36:	2f00      	cmp	r7, #0
    8b38:	d100      	bne.n	8b3c <__aeabi_fadd+0x25c>
    8b3a:	e70c      	b.n	8956 <__aeabi_fadd+0x76>
    8b3c:	4463      	add	r3, ip
    8b3e:	015a      	lsls	r2, r3, #5
    8b40:	d400      	bmi.n	8b44 <__aeabi_fadd+0x264>
    8b42:	e739      	b.n	89b8 <__aeabi_fadd+0xd8>
    8b44:	4a2e      	ldr	r2, [pc, #184]	; (8c00 <__aeabi_fadd+0x320>)
    8b46:	000c      	movs	r4, r1
    8b48:	4013      	ands	r3, r2
    8b4a:	e704      	b.n	8956 <__aeabi_fadd+0x76>
    8b4c:	2101      	movs	r1, #1
    8b4e:	e75c      	b.n	8a0a <__aeabi_fadd+0x12a>
    8b50:	2c00      	cmp	r4, #0
    8b52:	d11e      	bne.n	8b92 <__aeabi_fadd+0x2b2>
    8b54:	2b00      	cmp	r3, #0
    8b56:	d040      	beq.n	8bda <__aeabi_fadd+0x2fa>
    8b58:	43c9      	mvns	r1, r1
    8b5a:	2900      	cmp	r1, #0
    8b5c:	d00b      	beq.n	8b76 <__aeabi_fadd+0x296>
    8b5e:	28ff      	cmp	r0, #255	; 0xff
    8b60:	d036      	beq.n	8bd0 <__aeabi_fadd+0x2f0>
    8b62:	291b      	cmp	r1, #27
    8b64:	dc47      	bgt.n	8bf6 <__aeabi_fadd+0x316>
    8b66:	001c      	movs	r4, r3
    8b68:	2620      	movs	r6, #32
    8b6a:	40cc      	lsrs	r4, r1
    8b6c:	1a71      	subs	r1, r6, r1
    8b6e:	408b      	lsls	r3, r1
    8b70:	1e59      	subs	r1, r3, #1
    8b72:	418b      	sbcs	r3, r1
    8b74:	4323      	orrs	r3, r4
    8b76:	4463      	add	r3, ip
    8b78:	0004      	movs	r4, r0
    8b7a:	e747      	b.n	8a0c <__aeabi_fadd+0x12c>
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d118      	bne.n	8bb2 <__aeabi_fadd+0x2d2>
    8b80:	1e3b      	subs	r3, r7, #0
    8b82:	d02d      	beq.n	8be0 <__aeabi_fadd+0x300>
    8b84:	000d      	movs	r5, r1
    8b86:	24ff      	movs	r4, #255	; 0xff
    8b88:	e6e5      	b.n	8956 <__aeabi_fadd+0x76>
    8b8a:	003b      	movs	r3, r7
    8b8c:	0004      	movs	r4, r0
    8b8e:	000d      	movs	r5, r1
    8b90:	e6e1      	b.n	8956 <__aeabi_fadd+0x76>
    8b92:	28ff      	cmp	r0, #255	; 0xff
    8b94:	d01c      	beq.n	8bd0 <__aeabi_fadd+0x2f0>
    8b96:	2480      	movs	r4, #128	; 0x80
    8b98:	04e4      	lsls	r4, r4, #19
    8b9a:	4249      	negs	r1, r1
    8b9c:	4323      	orrs	r3, r4
    8b9e:	e7e0      	b.n	8b62 <__aeabi_fadd+0x282>
    8ba0:	2f00      	cmp	r7, #0
    8ba2:	d100      	bne.n	8ba6 <__aeabi_fadd+0x2c6>
    8ba4:	e6d7      	b.n	8956 <__aeabi_fadd+0x76>
    8ba6:	1bde      	subs	r6, r3, r7
    8ba8:	0172      	lsls	r2, r6, #5
    8baa:	d51f      	bpl.n	8bec <__aeabi_fadd+0x30c>
    8bac:	1afb      	subs	r3, r7, r3
    8bae:	000d      	movs	r5, r1
    8bb0:	e6d1      	b.n	8956 <__aeabi_fadd+0x76>
    8bb2:	24ff      	movs	r4, #255	; 0xff
    8bb4:	2f00      	cmp	r7, #0
    8bb6:	d100      	bne.n	8bba <__aeabi_fadd+0x2da>
    8bb8:	e6cd      	b.n	8956 <__aeabi_fadd+0x76>
    8bba:	2280      	movs	r2, #128	; 0x80
    8bbc:	4640      	mov	r0, r8
    8bbe:	03d2      	lsls	r2, r2, #15
    8bc0:	4210      	tst	r0, r2
    8bc2:	d0af      	beq.n	8b24 <__aeabi_fadd+0x244>
    8bc4:	4216      	tst	r6, r2
    8bc6:	d1ad      	bne.n	8b24 <__aeabi_fadd+0x244>
    8bc8:	003b      	movs	r3, r7
    8bca:	000d      	movs	r5, r1
    8bcc:	24ff      	movs	r4, #255	; 0xff
    8bce:	e6c2      	b.n	8956 <__aeabi_fadd+0x76>
    8bd0:	4663      	mov	r3, ip
    8bd2:	24ff      	movs	r4, #255	; 0xff
    8bd4:	e6bf      	b.n	8956 <__aeabi_fadd+0x76>
    8bd6:	2301      	movs	r3, #1
    8bd8:	e77a      	b.n	8ad0 <__aeabi_fadd+0x1f0>
    8bda:	003b      	movs	r3, r7
    8bdc:	0004      	movs	r4, r0
    8bde:	e6ba      	b.n	8956 <__aeabi_fadd+0x76>
    8be0:	2680      	movs	r6, #128	; 0x80
    8be2:	2200      	movs	r2, #0
    8be4:	03f6      	lsls	r6, r6, #15
    8be6:	e6f0      	b.n	89ca <__aeabi_fadd+0xea>
    8be8:	003b      	movs	r3, r7
    8bea:	e6b4      	b.n	8956 <__aeabi_fadd+0x76>
    8bec:	1e33      	subs	r3, r6, #0
    8bee:	d000      	beq.n	8bf2 <__aeabi_fadd+0x312>
    8bf0:	e6e2      	b.n	89b8 <__aeabi_fadd+0xd8>
    8bf2:	2200      	movs	r2, #0
    8bf4:	e721      	b.n	8a3a <__aeabi_fadd+0x15a>
    8bf6:	2301      	movs	r3, #1
    8bf8:	e7bd      	b.n	8b76 <__aeabi_fadd+0x296>
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	7dffffff 	.word	0x7dffffff
    8c00:	fbffffff 	.word	0xfbffffff

00008c04 <__aeabi_fdiv>:
    8c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c06:	4657      	mov	r7, sl
    8c08:	464e      	mov	r6, r9
    8c0a:	46de      	mov	lr, fp
    8c0c:	4645      	mov	r5, r8
    8c0e:	b5e0      	push	{r5, r6, r7, lr}
    8c10:	0244      	lsls	r4, r0, #9
    8c12:	0043      	lsls	r3, r0, #1
    8c14:	0fc6      	lsrs	r6, r0, #31
    8c16:	b083      	sub	sp, #12
    8c18:	1c0f      	adds	r7, r1, #0
    8c1a:	0a64      	lsrs	r4, r4, #9
    8c1c:	0e1b      	lsrs	r3, r3, #24
    8c1e:	46b2      	mov	sl, r6
    8c20:	d053      	beq.n	8cca <__aeabi_fdiv+0xc6>
    8c22:	2bff      	cmp	r3, #255	; 0xff
    8c24:	d027      	beq.n	8c76 <__aeabi_fdiv+0x72>
    8c26:	2280      	movs	r2, #128	; 0x80
    8c28:	00e4      	lsls	r4, r4, #3
    8c2a:	04d2      	lsls	r2, r2, #19
    8c2c:	4314      	orrs	r4, r2
    8c2e:	227f      	movs	r2, #127	; 0x7f
    8c30:	4252      	negs	r2, r2
    8c32:	4690      	mov	r8, r2
    8c34:	4498      	add	r8, r3
    8c36:	2300      	movs	r3, #0
    8c38:	4699      	mov	r9, r3
    8c3a:	469b      	mov	fp, r3
    8c3c:	027d      	lsls	r5, r7, #9
    8c3e:	0078      	lsls	r0, r7, #1
    8c40:	0ffb      	lsrs	r3, r7, #31
    8c42:	0a6d      	lsrs	r5, r5, #9
    8c44:	0e00      	lsrs	r0, r0, #24
    8c46:	9300      	str	r3, [sp, #0]
    8c48:	d024      	beq.n	8c94 <__aeabi_fdiv+0x90>
    8c4a:	28ff      	cmp	r0, #255	; 0xff
    8c4c:	d046      	beq.n	8cdc <__aeabi_fdiv+0xd8>
    8c4e:	2380      	movs	r3, #128	; 0x80
    8c50:	2100      	movs	r1, #0
    8c52:	00ed      	lsls	r5, r5, #3
    8c54:	04db      	lsls	r3, r3, #19
    8c56:	431d      	orrs	r5, r3
    8c58:	387f      	subs	r0, #127	; 0x7f
    8c5a:	4647      	mov	r7, r8
    8c5c:	1a38      	subs	r0, r7, r0
    8c5e:	464f      	mov	r7, r9
    8c60:	430f      	orrs	r7, r1
    8c62:	00bf      	lsls	r7, r7, #2
    8c64:	46b9      	mov	r9, r7
    8c66:	0033      	movs	r3, r6
    8c68:	9a00      	ldr	r2, [sp, #0]
    8c6a:	4f87      	ldr	r7, [pc, #540]	; (8e88 <__aeabi_fdiv+0x284>)
    8c6c:	4053      	eors	r3, r2
    8c6e:	464a      	mov	r2, r9
    8c70:	58ba      	ldr	r2, [r7, r2]
    8c72:	9301      	str	r3, [sp, #4]
    8c74:	4697      	mov	pc, r2
    8c76:	2c00      	cmp	r4, #0
    8c78:	d14e      	bne.n	8d18 <__aeabi_fdiv+0x114>
    8c7a:	2308      	movs	r3, #8
    8c7c:	4699      	mov	r9, r3
    8c7e:	33f7      	adds	r3, #247	; 0xf7
    8c80:	4698      	mov	r8, r3
    8c82:	3bfd      	subs	r3, #253	; 0xfd
    8c84:	469b      	mov	fp, r3
    8c86:	027d      	lsls	r5, r7, #9
    8c88:	0078      	lsls	r0, r7, #1
    8c8a:	0ffb      	lsrs	r3, r7, #31
    8c8c:	0a6d      	lsrs	r5, r5, #9
    8c8e:	0e00      	lsrs	r0, r0, #24
    8c90:	9300      	str	r3, [sp, #0]
    8c92:	d1da      	bne.n	8c4a <__aeabi_fdiv+0x46>
    8c94:	2d00      	cmp	r5, #0
    8c96:	d126      	bne.n	8ce6 <__aeabi_fdiv+0xe2>
    8c98:	2000      	movs	r0, #0
    8c9a:	2101      	movs	r1, #1
    8c9c:	0033      	movs	r3, r6
    8c9e:	9a00      	ldr	r2, [sp, #0]
    8ca0:	4f7a      	ldr	r7, [pc, #488]	; (8e8c <__aeabi_fdiv+0x288>)
    8ca2:	4053      	eors	r3, r2
    8ca4:	4642      	mov	r2, r8
    8ca6:	1a10      	subs	r0, r2, r0
    8ca8:	464a      	mov	r2, r9
    8caa:	430a      	orrs	r2, r1
    8cac:	0092      	lsls	r2, r2, #2
    8cae:	58ba      	ldr	r2, [r7, r2]
    8cb0:	001d      	movs	r5, r3
    8cb2:	4697      	mov	pc, r2
    8cb4:	9b00      	ldr	r3, [sp, #0]
    8cb6:	002c      	movs	r4, r5
    8cb8:	469a      	mov	sl, r3
    8cba:	468b      	mov	fp, r1
    8cbc:	465b      	mov	r3, fp
    8cbe:	2b02      	cmp	r3, #2
    8cc0:	d131      	bne.n	8d26 <__aeabi_fdiv+0x122>
    8cc2:	4653      	mov	r3, sl
    8cc4:	21ff      	movs	r1, #255	; 0xff
    8cc6:	2400      	movs	r4, #0
    8cc8:	e038      	b.n	8d3c <__aeabi_fdiv+0x138>
    8cca:	2c00      	cmp	r4, #0
    8ccc:	d117      	bne.n	8cfe <__aeabi_fdiv+0xfa>
    8cce:	2304      	movs	r3, #4
    8cd0:	4699      	mov	r9, r3
    8cd2:	2300      	movs	r3, #0
    8cd4:	4698      	mov	r8, r3
    8cd6:	3301      	adds	r3, #1
    8cd8:	469b      	mov	fp, r3
    8cda:	e7af      	b.n	8c3c <__aeabi_fdiv+0x38>
    8cdc:	20ff      	movs	r0, #255	; 0xff
    8cde:	2d00      	cmp	r5, #0
    8ce0:	d10b      	bne.n	8cfa <__aeabi_fdiv+0xf6>
    8ce2:	2102      	movs	r1, #2
    8ce4:	e7da      	b.n	8c9c <__aeabi_fdiv+0x98>
    8ce6:	0028      	movs	r0, r5
    8ce8:	f002 fb0c 	bl	b304 <__clzsi2>
    8cec:	1f43      	subs	r3, r0, #5
    8cee:	409d      	lsls	r5, r3
    8cf0:	2376      	movs	r3, #118	; 0x76
    8cf2:	425b      	negs	r3, r3
    8cf4:	1a18      	subs	r0, r3, r0
    8cf6:	2100      	movs	r1, #0
    8cf8:	e7af      	b.n	8c5a <__aeabi_fdiv+0x56>
    8cfa:	2103      	movs	r1, #3
    8cfc:	e7ad      	b.n	8c5a <__aeabi_fdiv+0x56>
    8cfe:	0020      	movs	r0, r4
    8d00:	f002 fb00 	bl	b304 <__clzsi2>
    8d04:	1f43      	subs	r3, r0, #5
    8d06:	409c      	lsls	r4, r3
    8d08:	2376      	movs	r3, #118	; 0x76
    8d0a:	425b      	negs	r3, r3
    8d0c:	1a1b      	subs	r3, r3, r0
    8d0e:	4698      	mov	r8, r3
    8d10:	2300      	movs	r3, #0
    8d12:	4699      	mov	r9, r3
    8d14:	469b      	mov	fp, r3
    8d16:	e791      	b.n	8c3c <__aeabi_fdiv+0x38>
    8d18:	230c      	movs	r3, #12
    8d1a:	4699      	mov	r9, r3
    8d1c:	33f3      	adds	r3, #243	; 0xf3
    8d1e:	4698      	mov	r8, r3
    8d20:	3bfc      	subs	r3, #252	; 0xfc
    8d22:	469b      	mov	fp, r3
    8d24:	e78a      	b.n	8c3c <__aeabi_fdiv+0x38>
    8d26:	2b03      	cmp	r3, #3
    8d28:	d100      	bne.n	8d2c <__aeabi_fdiv+0x128>
    8d2a:	e0a5      	b.n	8e78 <__aeabi_fdiv+0x274>
    8d2c:	4655      	mov	r5, sl
    8d2e:	2b01      	cmp	r3, #1
    8d30:	d000      	beq.n	8d34 <__aeabi_fdiv+0x130>
    8d32:	e081      	b.n	8e38 <__aeabi_fdiv+0x234>
    8d34:	2301      	movs	r3, #1
    8d36:	2100      	movs	r1, #0
    8d38:	2400      	movs	r4, #0
    8d3a:	402b      	ands	r3, r5
    8d3c:	0264      	lsls	r4, r4, #9
    8d3e:	05c9      	lsls	r1, r1, #23
    8d40:	0a60      	lsrs	r0, r4, #9
    8d42:	07db      	lsls	r3, r3, #31
    8d44:	4308      	orrs	r0, r1
    8d46:	4318      	orrs	r0, r3
    8d48:	b003      	add	sp, #12
    8d4a:	bc3c      	pop	{r2, r3, r4, r5}
    8d4c:	4690      	mov	r8, r2
    8d4e:	4699      	mov	r9, r3
    8d50:	46a2      	mov	sl, r4
    8d52:	46ab      	mov	fp, r5
    8d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d56:	2480      	movs	r4, #128	; 0x80
    8d58:	2300      	movs	r3, #0
    8d5a:	03e4      	lsls	r4, r4, #15
    8d5c:	21ff      	movs	r1, #255	; 0xff
    8d5e:	e7ed      	b.n	8d3c <__aeabi_fdiv+0x138>
    8d60:	21ff      	movs	r1, #255	; 0xff
    8d62:	2400      	movs	r4, #0
    8d64:	e7ea      	b.n	8d3c <__aeabi_fdiv+0x138>
    8d66:	2301      	movs	r3, #1
    8d68:	1a59      	subs	r1, r3, r1
    8d6a:	291b      	cmp	r1, #27
    8d6c:	dd66      	ble.n	8e3c <__aeabi_fdiv+0x238>
    8d6e:	9a01      	ldr	r2, [sp, #4]
    8d70:	4013      	ands	r3, r2
    8d72:	2100      	movs	r1, #0
    8d74:	2400      	movs	r4, #0
    8d76:	e7e1      	b.n	8d3c <__aeabi_fdiv+0x138>
    8d78:	2380      	movs	r3, #128	; 0x80
    8d7a:	03db      	lsls	r3, r3, #15
    8d7c:	421c      	tst	r4, r3
    8d7e:	d038      	beq.n	8df2 <__aeabi_fdiv+0x1ee>
    8d80:	421d      	tst	r5, r3
    8d82:	d051      	beq.n	8e28 <__aeabi_fdiv+0x224>
    8d84:	431c      	orrs	r4, r3
    8d86:	0264      	lsls	r4, r4, #9
    8d88:	0a64      	lsrs	r4, r4, #9
    8d8a:	0033      	movs	r3, r6
    8d8c:	21ff      	movs	r1, #255	; 0xff
    8d8e:	e7d5      	b.n	8d3c <__aeabi_fdiv+0x138>
    8d90:	0163      	lsls	r3, r4, #5
    8d92:	016c      	lsls	r4, r5, #5
    8d94:	42a3      	cmp	r3, r4
    8d96:	d23b      	bcs.n	8e10 <__aeabi_fdiv+0x20c>
    8d98:	261b      	movs	r6, #27
    8d9a:	2100      	movs	r1, #0
    8d9c:	3801      	subs	r0, #1
    8d9e:	2501      	movs	r5, #1
    8da0:	001f      	movs	r7, r3
    8da2:	0049      	lsls	r1, r1, #1
    8da4:	005b      	lsls	r3, r3, #1
    8da6:	2f00      	cmp	r7, #0
    8da8:	db01      	blt.n	8dae <__aeabi_fdiv+0x1aa>
    8daa:	429c      	cmp	r4, r3
    8dac:	d801      	bhi.n	8db2 <__aeabi_fdiv+0x1ae>
    8dae:	1b1b      	subs	r3, r3, r4
    8db0:	4329      	orrs	r1, r5
    8db2:	3e01      	subs	r6, #1
    8db4:	2e00      	cmp	r6, #0
    8db6:	d1f3      	bne.n	8da0 <__aeabi_fdiv+0x19c>
    8db8:	001c      	movs	r4, r3
    8dba:	1e63      	subs	r3, r4, #1
    8dbc:	419c      	sbcs	r4, r3
    8dbe:	430c      	orrs	r4, r1
    8dc0:	0001      	movs	r1, r0
    8dc2:	317f      	adds	r1, #127	; 0x7f
    8dc4:	2900      	cmp	r1, #0
    8dc6:	ddce      	ble.n	8d66 <__aeabi_fdiv+0x162>
    8dc8:	0763      	lsls	r3, r4, #29
    8dca:	d004      	beq.n	8dd6 <__aeabi_fdiv+0x1d2>
    8dcc:	230f      	movs	r3, #15
    8dce:	4023      	ands	r3, r4
    8dd0:	2b04      	cmp	r3, #4
    8dd2:	d000      	beq.n	8dd6 <__aeabi_fdiv+0x1d2>
    8dd4:	3404      	adds	r4, #4
    8dd6:	0123      	lsls	r3, r4, #4
    8dd8:	d503      	bpl.n	8de2 <__aeabi_fdiv+0x1de>
    8dda:	0001      	movs	r1, r0
    8ddc:	4b2c      	ldr	r3, [pc, #176]	; (8e90 <__aeabi_fdiv+0x28c>)
    8dde:	3180      	adds	r1, #128	; 0x80
    8de0:	401c      	ands	r4, r3
    8de2:	29fe      	cmp	r1, #254	; 0xfe
    8de4:	dd0d      	ble.n	8e02 <__aeabi_fdiv+0x1fe>
    8de6:	2301      	movs	r3, #1
    8de8:	9a01      	ldr	r2, [sp, #4]
    8dea:	21ff      	movs	r1, #255	; 0xff
    8dec:	4013      	ands	r3, r2
    8dee:	2400      	movs	r4, #0
    8df0:	e7a4      	b.n	8d3c <__aeabi_fdiv+0x138>
    8df2:	2380      	movs	r3, #128	; 0x80
    8df4:	03db      	lsls	r3, r3, #15
    8df6:	431c      	orrs	r4, r3
    8df8:	0264      	lsls	r4, r4, #9
    8dfa:	0a64      	lsrs	r4, r4, #9
    8dfc:	0033      	movs	r3, r6
    8dfe:	21ff      	movs	r1, #255	; 0xff
    8e00:	e79c      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e02:	2301      	movs	r3, #1
    8e04:	9a01      	ldr	r2, [sp, #4]
    8e06:	01a4      	lsls	r4, r4, #6
    8e08:	0a64      	lsrs	r4, r4, #9
    8e0a:	b2c9      	uxtb	r1, r1
    8e0c:	4013      	ands	r3, r2
    8e0e:	e795      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e10:	1b1b      	subs	r3, r3, r4
    8e12:	261a      	movs	r6, #26
    8e14:	2101      	movs	r1, #1
    8e16:	e7c2      	b.n	8d9e <__aeabi_fdiv+0x19a>
    8e18:	9b00      	ldr	r3, [sp, #0]
    8e1a:	468b      	mov	fp, r1
    8e1c:	469a      	mov	sl, r3
    8e1e:	2400      	movs	r4, #0
    8e20:	e74c      	b.n	8cbc <__aeabi_fdiv+0xb8>
    8e22:	0263      	lsls	r3, r4, #9
    8e24:	d5e5      	bpl.n	8df2 <__aeabi_fdiv+0x1ee>
    8e26:	2500      	movs	r5, #0
    8e28:	2480      	movs	r4, #128	; 0x80
    8e2a:	03e4      	lsls	r4, r4, #15
    8e2c:	432c      	orrs	r4, r5
    8e2e:	0264      	lsls	r4, r4, #9
    8e30:	0a64      	lsrs	r4, r4, #9
    8e32:	9b00      	ldr	r3, [sp, #0]
    8e34:	21ff      	movs	r1, #255	; 0xff
    8e36:	e781      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e38:	9501      	str	r5, [sp, #4]
    8e3a:	e7c1      	b.n	8dc0 <__aeabi_fdiv+0x1bc>
    8e3c:	0023      	movs	r3, r4
    8e3e:	2020      	movs	r0, #32
    8e40:	40cb      	lsrs	r3, r1
    8e42:	1a41      	subs	r1, r0, r1
    8e44:	408c      	lsls	r4, r1
    8e46:	1e61      	subs	r1, r4, #1
    8e48:	418c      	sbcs	r4, r1
    8e4a:	431c      	orrs	r4, r3
    8e4c:	0763      	lsls	r3, r4, #29
    8e4e:	d004      	beq.n	8e5a <__aeabi_fdiv+0x256>
    8e50:	230f      	movs	r3, #15
    8e52:	4023      	ands	r3, r4
    8e54:	2b04      	cmp	r3, #4
    8e56:	d000      	beq.n	8e5a <__aeabi_fdiv+0x256>
    8e58:	3404      	adds	r4, #4
    8e5a:	0163      	lsls	r3, r4, #5
    8e5c:	d505      	bpl.n	8e6a <__aeabi_fdiv+0x266>
    8e5e:	2301      	movs	r3, #1
    8e60:	9a01      	ldr	r2, [sp, #4]
    8e62:	2101      	movs	r1, #1
    8e64:	4013      	ands	r3, r2
    8e66:	2400      	movs	r4, #0
    8e68:	e768      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e6a:	2301      	movs	r3, #1
    8e6c:	9a01      	ldr	r2, [sp, #4]
    8e6e:	01a4      	lsls	r4, r4, #6
    8e70:	0a64      	lsrs	r4, r4, #9
    8e72:	4013      	ands	r3, r2
    8e74:	2100      	movs	r1, #0
    8e76:	e761      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e78:	2380      	movs	r3, #128	; 0x80
    8e7a:	03db      	lsls	r3, r3, #15
    8e7c:	431c      	orrs	r4, r3
    8e7e:	0264      	lsls	r4, r4, #9
    8e80:	0a64      	lsrs	r4, r4, #9
    8e82:	4653      	mov	r3, sl
    8e84:	21ff      	movs	r1, #255	; 0xff
    8e86:	e759      	b.n	8d3c <__aeabi_fdiv+0x138>
    8e88:	0000bfb0 	.word	0x0000bfb0
    8e8c:	0000bff0 	.word	0x0000bff0
    8e90:	f7ffffff 	.word	0xf7ffffff

00008e94 <__eqsf2>:
    8e94:	b570      	push	{r4, r5, r6, lr}
    8e96:	0042      	lsls	r2, r0, #1
    8e98:	0245      	lsls	r5, r0, #9
    8e9a:	024e      	lsls	r6, r1, #9
    8e9c:	004c      	lsls	r4, r1, #1
    8e9e:	0fc3      	lsrs	r3, r0, #31
    8ea0:	0a6d      	lsrs	r5, r5, #9
    8ea2:	0e12      	lsrs	r2, r2, #24
    8ea4:	0a76      	lsrs	r6, r6, #9
    8ea6:	0e24      	lsrs	r4, r4, #24
    8ea8:	0fc9      	lsrs	r1, r1, #31
    8eaa:	2001      	movs	r0, #1
    8eac:	2aff      	cmp	r2, #255	; 0xff
    8eae:	d006      	beq.n	8ebe <__eqsf2+0x2a>
    8eb0:	2cff      	cmp	r4, #255	; 0xff
    8eb2:	d003      	beq.n	8ebc <__eqsf2+0x28>
    8eb4:	42a2      	cmp	r2, r4
    8eb6:	d101      	bne.n	8ebc <__eqsf2+0x28>
    8eb8:	42b5      	cmp	r5, r6
    8eba:	d006      	beq.n	8eca <__eqsf2+0x36>
    8ebc:	bd70      	pop	{r4, r5, r6, pc}
    8ebe:	2d00      	cmp	r5, #0
    8ec0:	d1fc      	bne.n	8ebc <__eqsf2+0x28>
    8ec2:	2cff      	cmp	r4, #255	; 0xff
    8ec4:	d1fa      	bne.n	8ebc <__eqsf2+0x28>
    8ec6:	2e00      	cmp	r6, #0
    8ec8:	d1f8      	bne.n	8ebc <__eqsf2+0x28>
    8eca:	428b      	cmp	r3, r1
    8ecc:	d006      	beq.n	8edc <__eqsf2+0x48>
    8ece:	2001      	movs	r0, #1
    8ed0:	2a00      	cmp	r2, #0
    8ed2:	d1f3      	bne.n	8ebc <__eqsf2+0x28>
    8ed4:	0028      	movs	r0, r5
    8ed6:	1e45      	subs	r5, r0, #1
    8ed8:	41a8      	sbcs	r0, r5
    8eda:	e7ef      	b.n	8ebc <__eqsf2+0x28>
    8edc:	2000      	movs	r0, #0
    8ede:	e7ed      	b.n	8ebc <__eqsf2+0x28>

00008ee0 <__gesf2>:
    8ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ee2:	0042      	lsls	r2, r0, #1
    8ee4:	0245      	lsls	r5, r0, #9
    8ee6:	024c      	lsls	r4, r1, #9
    8ee8:	0fc3      	lsrs	r3, r0, #31
    8eea:	0048      	lsls	r0, r1, #1
    8eec:	0a6d      	lsrs	r5, r5, #9
    8eee:	0e12      	lsrs	r2, r2, #24
    8ef0:	0a64      	lsrs	r4, r4, #9
    8ef2:	0e00      	lsrs	r0, r0, #24
    8ef4:	0fc9      	lsrs	r1, r1, #31
    8ef6:	2aff      	cmp	r2, #255	; 0xff
    8ef8:	d01e      	beq.n	8f38 <__gesf2+0x58>
    8efa:	28ff      	cmp	r0, #255	; 0xff
    8efc:	d021      	beq.n	8f42 <__gesf2+0x62>
    8efe:	2a00      	cmp	r2, #0
    8f00:	d10a      	bne.n	8f18 <__gesf2+0x38>
    8f02:	426e      	negs	r6, r5
    8f04:	416e      	adcs	r6, r5
    8f06:	b2f6      	uxtb	r6, r6
    8f08:	2800      	cmp	r0, #0
    8f0a:	d10f      	bne.n	8f2c <__gesf2+0x4c>
    8f0c:	2c00      	cmp	r4, #0
    8f0e:	d10d      	bne.n	8f2c <__gesf2+0x4c>
    8f10:	2000      	movs	r0, #0
    8f12:	2d00      	cmp	r5, #0
    8f14:	d009      	beq.n	8f2a <__gesf2+0x4a>
    8f16:	e005      	b.n	8f24 <__gesf2+0x44>
    8f18:	2800      	cmp	r0, #0
    8f1a:	d101      	bne.n	8f20 <__gesf2+0x40>
    8f1c:	2c00      	cmp	r4, #0
    8f1e:	d001      	beq.n	8f24 <__gesf2+0x44>
    8f20:	428b      	cmp	r3, r1
    8f22:	d011      	beq.n	8f48 <__gesf2+0x68>
    8f24:	2101      	movs	r1, #1
    8f26:	4258      	negs	r0, r3
    8f28:	4308      	orrs	r0, r1
    8f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f2c:	2e00      	cmp	r6, #0
    8f2e:	d0f7      	beq.n	8f20 <__gesf2+0x40>
    8f30:	2001      	movs	r0, #1
    8f32:	3901      	subs	r1, #1
    8f34:	4308      	orrs	r0, r1
    8f36:	e7f8      	b.n	8f2a <__gesf2+0x4a>
    8f38:	2d00      	cmp	r5, #0
    8f3a:	d0de      	beq.n	8efa <__gesf2+0x1a>
    8f3c:	2002      	movs	r0, #2
    8f3e:	4240      	negs	r0, r0
    8f40:	e7f3      	b.n	8f2a <__gesf2+0x4a>
    8f42:	2c00      	cmp	r4, #0
    8f44:	d0db      	beq.n	8efe <__gesf2+0x1e>
    8f46:	e7f9      	b.n	8f3c <__gesf2+0x5c>
    8f48:	4282      	cmp	r2, r0
    8f4a:	dceb      	bgt.n	8f24 <__gesf2+0x44>
    8f4c:	db04      	blt.n	8f58 <__gesf2+0x78>
    8f4e:	42a5      	cmp	r5, r4
    8f50:	d8e8      	bhi.n	8f24 <__gesf2+0x44>
    8f52:	2000      	movs	r0, #0
    8f54:	42a5      	cmp	r5, r4
    8f56:	d2e8      	bcs.n	8f2a <__gesf2+0x4a>
    8f58:	2101      	movs	r1, #1
    8f5a:	1e58      	subs	r0, r3, #1
    8f5c:	4308      	orrs	r0, r1
    8f5e:	e7e4      	b.n	8f2a <__gesf2+0x4a>

00008f60 <__lesf2>:
    8f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f62:	0042      	lsls	r2, r0, #1
    8f64:	024d      	lsls	r5, r1, #9
    8f66:	004c      	lsls	r4, r1, #1
    8f68:	0246      	lsls	r6, r0, #9
    8f6a:	0a76      	lsrs	r6, r6, #9
    8f6c:	0e12      	lsrs	r2, r2, #24
    8f6e:	0fc3      	lsrs	r3, r0, #31
    8f70:	0a6d      	lsrs	r5, r5, #9
    8f72:	0e24      	lsrs	r4, r4, #24
    8f74:	0fc9      	lsrs	r1, r1, #31
    8f76:	2aff      	cmp	r2, #255	; 0xff
    8f78:	d016      	beq.n	8fa8 <__lesf2+0x48>
    8f7a:	2cff      	cmp	r4, #255	; 0xff
    8f7c:	d018      	beq.n	8fb0 <__lesf2+0x50>
    8f7e:	2a00      	cmp	r2, #0
    8f80:	d10a      	bne.n	8f98 <__lesf2+0x38>
    8f82:	4270      	negs	r0, r6
    8f84:	4170      	adcs	r0, r6
    8f86:	b2c0      	uxtb	r0, r0
    8f88:	2c00      	cmp	r4, #0
    8f8a:	d015      	beq.n	8fb8 <__lesf2+0x58>
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d005      	beq.n	8f9c <__lesf2+0x3c>
    8f90:	2001      	movs	r0, #1
    8f92:	3901      	subs	r1, #1
    8f94:	4308      	orrs	r0, r1
    8f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f98:	2c00      	cmp	r4, #0
    8f9a:	d013      	beq.n	8fc4 <__lesf2+0x64>
    8f9c:	4299      	cmp	r1, r3
    8f9e:	d014      	beq.n	8fca <__lesf2+0x6a>
    8fa0:	2001      	movs	r0, #1
    8fa2:	425b      	negs	r3, r3
    8fa4:	4318      	orrs	r0, r3
    8fa6:	e7f6      	b.n	8f96 <__lesf2+0x36>
    8fa8:	2002      	movs	r0, #2
    8faa:	2e00      	cmp	r6, #0
    8fac:	d1f3      	bne.n	8f96 <__lesf2+0x36>
    8fae:	e7e4      	b.n	8f7a <__lesf2+0x1a>
    8fb0:	2002      	movs	r0, #2
    8fb2:	2d00      	cmp	r5, #0
    8fb4:	d1ef      	bne.n	8f96 <__lesf2+0x36>
    8fb6:	e7e2      	b.n	8f7e <__lesf2+0x1e>
    8fb8:	2d00      	cmp	r5, #0
    8fba:	d1e7      	bne.n	8f8c <__lesf2+0x2c>
    8fbc:	2000      	movs	r0, #0
    8fbe:	2e00      	cmp	r6, #0
    8fc0:	d0e9      	beq.n	8f96 <__lesf2+0x36>
    8fc2:	e7ed      	b.n	8fa0 <__lesf2+0x40>
    8fc4:	2d00      	cmp	r5, #0
    8fc6:	d1e9      	bne.n	8f9c <__lesf2+0x3c>
    8fc8:	e7ea      	b.n	8fa0 <__lesf2+0x40>
    8fca:	42a2      	cmp	r2, r4
    8fcc:	dc06      	bgt.n	8fdc <__lesf2+0x7c>
    8fce:	dbdf      	blt.n	8f90 <__lesf2+0x30>
    8fd0:	42ae      	cmp	r6, r5
    8fd2:	d803      	bhi.n	8fdc <__lesf2+0x7c>
    8fd4:	2000      	movs	r0, #0
    8fd6:	42ae      	cmp	r6, r5
    8fd8:	d3da      	bcc.n	8f90 <__lesf2+0x30>
    8fda:	e7dc      	b.n	8f96 <__lesf2+0x36>
    8fdc:	2001      	movs	r0, #1
    8fde:	4249      	negs	r1, r1
    8fe0:	4308      	orrs	r0, r1
    8fe2:	e7d8      	b.n	8f96 <__lesf2+0x36>

00008fe4 <__aeabi_fmul>:
    8fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fe6:	4657      	mov	r7, sl
    8fe8:	464e      	mov	r6, r9
    8fea:	4645      	mov	r5, r8
    8fec:	46de      	mov	lr, fp
    8fee:	b5e0      	push	{r5, r6, r7, lr}
    8ff0:	0247      	lsls	r7, r0, #9
    8ff2:	0046      	lsls	r6, r0, #1
    8ff4:	4688      	mov	r8, r1
    8ff6:	0a7f      	lsrs	r7, r7, #9
    8ff8:	0e36      	lsrs	r6, r6, #24
    8ffa:	0fc4      	lsrs	r4, r0, #31
    8ffc:	2e00      	cmp	r6, #0
    8ffe:	d047      	beq.n	9090 <__aeabi_fmul+0xac>
    9000:	2eff      	cmp	r6, #255	; 0xff
    9002:	d024      	beq.n	904e <__aeabi_fmul+0x6a>
    9004:	00fb      	lsls	r3, r7, #3
    9006:	2780      	movs	r7, #128	; 0x80
    9008:	04ff      	lsls	r7, r7, #19
    900a:	431f      	orrs	r7, r3
    900c:	2300      	movs	r3, #0
    900e:	4699      	mov	r9, r3
    9010:	469a      	mov	sl, r3
    9012:	3e7f      	subs	r6, #127	; 0x7f
    9014:	4643      	mov	r3, r8
    9016:	025d      	lsls	r5, r3, #9
    9018:	0058      	lsls	r0, r3, #1
    901a:	0fdb      	lsrs	r3, r3, #31
    901c:	0a6d      	lsrs	r5, r5, #9
    901e:	0e00      	lsrs	r0, r0, #24
    9020:	4698      	mov	r8, r3
    9022:	d043      	beq.n	90ac <__aeabi_fmul+0xc8>
    9024:	28ff      	cmp	r0, #255	; 0xff
    9026:	d03b      	beq.n	90a0 <__aeabi_fmul+0xbc>
    9028:	00eb      	lsls	r3, r5, #3
    902a:	2580      	movs	r5, #128	; 0x80
    902c:	2200      	movs	r2, #0
    902e:	04ed      	lsls	r5, r5, #19
    9030:	431d      	orrs	r5, r3
    9032:	387f      	subs	r0, #127	; 0x7f
    9034:	1836      	adds	r6, r6, r0
    9036:	1c73      	adds	r3, r6, #1
    9038:	4641      	mov	r1, r8
    903a:	469b      	mov	fp, r3
    903c:	464b      	mov	r3, r9
    903e:	4061      	eors	r1, r4
    9040:	4313      	orrs	r3, r2
    9042:	2b0f      	cmp	r3, #15
    9044:	d864      	bhi.n	9110 <__aeabi_fmul+0x12c>
    9046:	4875      	ldr	r0, [pc, #468]	; (921c <__aeabi_fmul+0x238>)
    9048:	009b      	lsls	r3, r3, #2
    904a:	58c3      	ldr	r3, [r0, r3]
    904c:	469f      	mov	pc, r3
    904e:	2f00      	cmp	r7, #0
    9050:	d142      	bne.n	90d8 <__aeabi_fmul+0xf4>
    9052:	2308      	movs	r3, #8
    9054:	4699      	mov	r9, r3
    9056:	3b06      	subs	r3, #6
    9058:	26ff      	movs	r6, #255	; 0xff
    905a:	469a      	mov	sl, r3
    905c:	e7da      	b.n	9014 <__aeabi_fmul+0x30>
    905e:	4641      	mov	r1, r8
    9060:	2a02      	cmp	r2, #2
    9062:	d028      	beq.n	90b6 <__aeabi_fmul+0xd2>
    9064:	2a03      	cmp	r2, #3
    9066:	d100      	bne.n	906a <__aeabi_fmul+0x86>
    9068:	e0ce      	b.n	9208 <__aeabi_fmul+0x224>
    906a:	2a01      	cmp	r2, #1
    906c:	d000      	beq.n	9070 <__aeabi_fmul+0x8c>
    906e:	e0ac      	b.n	91ca <__aeabi_fmul+0x1e6>
    9070:	4011      	ands	r1, r2
    9072:	2000      	movs	r0, #0
    9074:	2200      	movs	r2, #0
    9076:	b2cc      	uxtb	r4, r1
    9078:	0240      	lsls	r0, r0, #9
    907a:	05d2      	lsls	r2, r2, #23
    907c:	0a40      	lsrs	r0, r0, #9
    907e:	07e4      	lsls	r4, r4, #31
    9080:	4310      	orrs	r0, r2
    9082:	4320      	orrs	r0, r4
    9084:	bc3c      	pop	{r2, r3, r4, r5}
    9086:	4690      	mov	r8, r2
    9088:	4699      	mov	r9, r3
    908a:	46a2      	mov	sl, r4
    908c:	46ab      	mov	fp, r5
    908e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9090:	2f00      	cmp	r7, #0
    9092:	d115      	bne.n	90c0 <__aeabi_fmul+0xdc>
    9094:	2304      	movs	r3, #4
    9096:	4699      	mov	r9, r3
    9098:	3b03      	subs	r3, #3
    909a:	2600      	movs	r6, #0
    909c:	469a      	mov	sl, r3
    909e:	e7b9      	b.n	9014 <__aeabi_fmul+0x30>
    90a0:	20ff      	movs	r0, #255	; 0xff
    90a2:	2202      	movs	r2, #2
    90a4:	2d00      	cmp	r5, #0
    90a6:	d0c5      	beq.n	9034 <__aeabi_fmul+0x50>
    90a8:	2203      	movs	r2, #3
    90aa:	e7c3      	b.n	9034 <__aeabi_fmul+0x50>
    90ac:	2d00      	cmp	r5, #0
    90ae:	d119      	bne.n	90e4 <__aeabi_fmul+0x100>
    90b0:	2000      	movs	r0, #0
    90b2:	2201      	movs	r2, #1
    90b4:	e7be      	b.n	9034 <__aeabi_fmul+0x50>
    90b6:	2401      	movs	r4, #1
    90b8:	22ff      	movs	r2, #255	; 0xff
    90ba:	400c      	ands	r4, r1
    90bc:	2000      	movs	r0, #0
    90be:	e7db      	b.n	9078 <__aeabi_fmul+0x94>
    90c0:	0038      	movs	r0, r7
    90c2:	f002 f91f 	bl	b304 <__clzsi2>
    90c6:	2676      	movs	r6, #118	; 0x76
    90c8:	1f43      	subs	r3, r0, #5
    90ca:	409f      	lsls	r7, r3
    90cc:	2300      	movs	r3, #0
    90ce:	4276      	negs	r6, r6
    90d0:	1a36      	subs	r6, r6, r0
    90d2:	4699      	mov	r9, r3
    90d4:	469a      	mov	sl, r3
    90d6:	e79d      	b.n	9014 <__aeabi_fmul+0x30>
    90d8:	230c      	movs	r3, #12
    90da:	4699      	mov	r9, r3
    90dc:	3b09      	subs	r3, #9
    90de:	26ff      	movs	r6, #255	; 0xff
    90e0:	469a      	mov	sl, r3
    90e2:	e797      	b.n	9014 <__aeabi_fmul+0x30>
    90e4:	0028      	movs	r0, r5
    90e6:	f002 f90d 	bl	b304 <__clzsi2>
    90ea:	1f43      	subs	r3, r0, #5
    90ec:	409d      	lsls	r5, r3
    90ee:	2376      	movs	r3, #118	; 0x76
    90f0:	425b      	negs	r3, r3
    90f2:	1a18      	subs	r0, r3, r0
    90f4:	2200      	movs	r2, #0
    90f6:	e79d      	b.n	9034 <__aeabi_fmul+0x50>
    90f8:	2080      	movs	r0, #128	; 0x80
    90fa:	2400      	movs	r4, #0
    90fc:	03c0      	lsls	r0, r0, #15
    90fe:	22ff      	movs	r2, #255	; 0xff
    9100:	e7ba      	b.n	9078 <__aeabi_fmul+0x94>
    9102:	003d      	movs	r5, r7
    9104:	4652      	mov	r2, sl
    9106:	e7ab      	b.n	9060 <__aeabi_fmul+0x7c>
    9108:	003d      	movs	r5, r7
    910a:	0021      	movs	r1, r4
    910c:	4652      	mov	r2, sl
    910e:	e7a7      	b.n	9060 <__aeabi_fmul+0x7c>
    9110:	0c3b      	lsrs	r3, r7, #16
    9112:	469c      	mov	ip, r3
    9114:	042a      	lsls	r2, r5, #16
    9116:	0c12      	lsrs	r2, r2, #16
    9118:	0c2b      	lsrs	r3, r5, #16
    911a:	0014      	movs	r4, r2
    911c:	4660      	mov	r0, ip
    911e:	4665      	mov	r5, ip
    9120:	043f      	lsls	r7, r7, #16
    9122:	0c3f      	lsrs	r7, r7, #16
    9124:	437c      	muls	r4, r7
    9126:	4342      	muls	r2, r0
    9128:	435d      	muls	r5, r3
    912a:	437b      	muls	r3, r7
    912c:	0c27      	lsrs	r7, r4, #16
    912e:	189b      	adds	r3, r3, r2
    9130:	18ff      	adds	r7, r7, r3
    9132:	42ba      	cmp	r2, r7
    9134:	d903      	bls.n	913e <__aeabi_fmul+0x15a>
    9136:	2380      	movs	r3, #128	; 0x80
    9138:	025b      	lsls	r3, r3, #9
    913a:	469c      	mov	ip, r3
    913c:	4465      	add	r5, ip
    913e:	0424      	lsls	r4, r4, #16
    9140:	043a      	lsls	r2, r7, #16
    9142:	0c24      	lsrs	r4, r4, #16
    9144:	1912      	adds	r2, r2, r4
    9146:	0193      	lsls	r3, r2, #6
    9148:	1e5c      	subs	r4, r3, #1
    914a:	41a3      	sbcs	r3, r4
    914c:	0c3f      	lsrs	r7, r7, #16
    914e:	0e92      	lsrs	r2, r2, #26
    9150:	197d      	adds	r5, r7, r5
    9152:	431a      	orrs	r2, r3
    9154:	01ad      	lsls	r5, r5, #6
    9156:	4315      	orrs	r5, r2
    9158:	012b      	lsls	r3, r5, #4
    915a:	d504      	bpl.n	9166 <__aeabi_fmul+0x182>
    915c:	2301      	movs	r3, #1
    915e:	465e      	mov	r6, fp
    9160:	086a      	lsrs	r2, r5, #1
    9162:	401d      	ands	r5, r3
    9164:	4315      	orrs	r5, r2
    9166:	0032      	movs	r2, r6
    9168:	327f      	adds	r2, #127	; 0x7f
    916a:	2a00      	cmp	r2, #0
    916c:	dd25      	ble.n	91ba <__aeabi_fmul+0x1d6>
    916e:	076b      	lsls	r3, r5, #29
    9170:	d004      	beq.n	917c <__aeabi_fmul+0x198>
    9172:	230f      	movs	r3, #15
    9174:	402b      	ands	r3, r5
    9176:	2b04      	cmp	r3, #4
    9178:	d000      	beq.n	917c <__aeabi_fmul+0x198>
    917a:	3504      	adds	r5, #4
    917c:	012b      	lsls	r3, r5, #4
    917e:	d503      	bpl.n	9188 <__aeabi_fmul+0x1a4>
    9180:	0032      	movs	r2, r6
    9182:	4b27      	ldr	r3, [pc, #156]	; (9220 <__aeabi_fmul+0x23c>)
    9184:	3280      	adds	r2, #128	; 0x80
    9186:	401d      	ands	r5, r3
    9188:	2afe      	cmp	r2, #254	; 0xfe
    918a:	dc94      	bgt.n	90b6 <__aeabi_fmul+0xd2>
    918c:	2401      	movs	r4, #1
    918e:	01a8      	lsls	r0, r5, #6
    9190:	0a40      	lsrs	r0, r0, #9
    9192:	b2d2      	uxtb	r2, r2
    9194:	400c      	ands	r4, r1
    9196:	e76f      	b.n	9078 <__aeabi_fmul+0x94>
    9198:	2080      	movs	r0, #128	; 0x80
    919a:	03c0      	lsls	r0, r0, #15
    919c:	4207      	tst	r7, r0
    919e:	d007      	beq.n	91b0 <__aeabi_fmul+0x1cc>
    91a0:	4205      	tst	r5, r0
    91a2:	d105      	bne.n	91b0 <__aeabi_fmul+0x1cc>
    91a4:	4328      	orrs	r0, r5
    91a6:	0240      	lsls	r0, r0, #9
    91a8:	0a40      	lsrs	r0, r0, #9
    91aa:	4644      	mov	r4, r8
    91ac:	22ff      	movs	r2, #255	; 0xff
    91ae:	e763      	b.n	9078 <__aeabi_fmul+0x94>
    91b0:	4338      	orrs	r0, r7
    91b2:	0240      	lsls	r0, r0, #9
    91b4:	0a40      	lsrs	r0, r0, #9
    91b6:	22ff      	movs	r2, #255	; 0xff
    91b8:	e75e      	b.n	9078 <__aeabi_fmul+0x94>
    91ba:	2401      	movs	r4, #1
    91bc:	1aa3      	subs	r3, r4, r2
    91be:	2b1b      	cmp	r3, #27
    91c0:	dd05      	ble.n	91ce <__aeabi_fmul+0x1ea>
    91c2:	400c      	ands	r4, r1
    91c4:	2200      	movs	r2, #0
    91c6:	2000      	movs	r0, #0
    91c8:	e756      	b.n	9078 <__aeabi_fmul+0x94>
    91ca:	465e      	mov	r6, fp
    91cc:	e7cb      	b.n	9166 <__aeabi_fmul+0x182>
    91ce:	002a      	movs	r2, r5
    91d0:	2020      	movs	r0, #32
    91d2:	40da      	lsrs	r2, r3
    91d4:	1ac3      	subs	r3, r0, r3
    91d6:	409d      	lsls	r5, r3
    91d8:	002b      	movs	r3, r5
    91da:	1e5d      	subs	r5, r3, #1
    91dc:	41ab      	sbcs	r3, r5
    91de:	4313      	orrs	r3, r2
    91e0:	075a      	lsls	r2, r3, #29
    91e2:	d004      	beq.n	91ee <__aeabi_fmul+0x20a>
    91e4:	220f      	movs	r2, #15
    91e6:	401a      	ands	r2, r3
    91e8:	2a04      	cmp	r2, #4
    91ea:	d000      	beq.n	91ee <__aeabi_fmul+0x20a>
    91ec:	3304      	adds	r3, #4
    91ee:	015a      	lsls	r2, r3, #5
    91f0:	d504      	bpl.n	91fc <__aeabi_fmul+0x218>
    91f2:	2401      	movs	r4, #1
    91f4:	2201      	movs	r2, #1
    91f6:	400c      	ands	r4, r1
    91f8:	2000      	movs	r0, #0
    91fa:	e73d      	b.n	9078 <__aeabi_fmul+0x94>
    91fc:	2401      	movs	r4, #1
    91fe:	019b      	lsls	r3, r3, #6
    9200:	0a58      	lsrs	r0, r3, #9
    9202:	400c      	ands	r4, r1
    9204:	2200      	movs	r2, #0
    9206:	e737      	b.n	9078 <__aeabi_fmul+0x94>
    9208:	2080      	movs	r0, #128	; 0x80
    920a:	2401      	movs	r4, #1
    920c:	03c0      	lsls	r0, r0, #15
    920e:	4328      	orrs	r0, r5
    9210:	0240      	lsls	r0, r0, #9
    9212:	0a40      	lsrs	r0, r0, #9
    9214:	400c      	ands	r4, r1
    9216:	22ff      	movs	r2, #255	; 0xff
    9218:	e72e      	b.n	9078 <__aeabi_fmul+0x94>
    921a:	46c0      	nop			; (mov r8, r8)
    921c:	0000c030 	.word	0x0000c030
    9220:	f7ffffff 	.word	0xf7ffffff

00009224 <__aeabi_fsub>:
    9224:	b5f0      	push	{r4, r5, r6, r7, lr}
    9226:	464f      	mov	r7, r9
    9228:	46d6      	mov	lr, sl
    922a:	4646      	mov	r6, r8
    922c:	0044      	lsls	r4, r0, #1
    922e:	b5c0      	push	{r6, r7, lr}
    9230:	0fc2      	lsrs	r2, r0, #31
    9232:	0247      	lsls	r7, r0, #9
    9234:	0248      	lsls	r0, r1, #9
    9236:	0a40      	lsrs	r0, r0, #9
    9238:	4684      	mov	ip, r0
    923a:	4666      	mov	r6, ip
    923c:	0a7b      	lsrs	r3, r7, #9
    923e:	0048      	lsls	r0, r1, #1
    9240:	0fc9      	lsrs	r1, r1, #31
    9242:	469a      	mov	sl, r3
    9244:	0e24      	lsrs	r4, r4, #24
    9246:	0015      	movs	r5, r2
    9248:	00db      	lsls	r3, r3, #3
    924a:	0e00      	lsrs	r0, r0, #24
    924c:	4689      	mov	r9, r1
    924e:	00f6      	lsls	r6, r6, #3
    9250:	28ff      	cmp	r0, #255	; 0xff
    9252:	d100      	bne.n	9256 <__aeabi_fsub+0x32>
    9254:	e08f      	b.n	9376 <__aeabi_fsub+0x152>
    9256:	2101      	movs	r1, #1
    9258:	464f      	mov	r7, r9
    925a:	404f      	eors	r7, r1
    925c:	0039      	movs	r1, r7
    925e:	4291      	cmp	r1, r2
    9260:	d066      	beq.n	9330 <__aeabi_fsub+0x10c>
    9262:	1a22      	subs	r2, r4, r0
    9264:	2a00      	cmp	r2, #0
    9266:	dc00      	bgt.n	926a <__aeabi_fsub+0x46>
    9268:	e09d      	b.n	93a6 <__aeabi_fsub+0x182>
    926a:	2800      	cmp	r0, #0
    926c:	d13d      	bne.n	92ea <__aeabi_fsub+0xc6>
    926e:	2e00      	cmp	r6, #0
    9270:	d100      	bne.n	9274 <__aeabi_fsub+0x50>
    9272:	e08b      	b.n	938c <__aeabi_fsub+0x168>
    9274:	1e51      	subs	r1, r2, #1
    9276:	2900      	cmp	r1, #0
    9278:	d000      	beq.n	927c <__aeabi_fsub+0x58>
    927a:	e0b5      	b.n	93e8 <__aeabi_fsub+0x1c4>
    927c:	2401      	movs	r4, #1
    927e:	1b9b      	subs	r3, r3, r6
    9280:	015a      	lsls	r2, r3, #5
    9282:	d544      	bpl.n	930e <__aeabi_fsub+0xea>
    9284:	019b      	lsls	r3, r3, #6
    9286:	099f      	lsrs	r7, r3, #6
    9288:	0038      	movs	r0, r7
    928a:	f002 f83b 	bl	b304 <__clzsi2>
    928e:	3805      	subs	r0, #5
    9290:	4087      	lsls	r7, r0
    9292:	4284      	cmp	r4, r0
    9294:	dd00      	ble.n	9298 <__aeabi_fsub+0x74>
    9296:	e096      	b.n	93c6 <__aeabi_fsub+0x1a2>
    9298:	1b04      	subs	r4, r0, r4
    929a:	003a      	movs	r2, r7
    929c:	2020      	movs	r0, #32
    929e:	3401      	adds	r4, #1
    92a0:	40e2      	lsrs	r2, r4
    92a2:	1b04      	subs	r4, r0, r4
    92a4:	40a7      	lsls	r7, r4
    92a6:	003b      	movs	r3, r7
    92a8:	1e5f      	subs	r7, r3, #1
    92aa:	41bb      	sbcs	r3, r7
    92ac:	2400      	movs	r4, #0
    92ae:	4313      	orrs	r3, r2
    92b0:	075a      	lsls	r2, r3, #29
    92b2:	d004      	beq.n	92be <__aeabi_fsub+0x9a>
    92b4:	220f      	movs	r2, #15
    92b6:	401a      	ands	r2, r3
    92b8:	2a04      	cmp	r2, #4
    92ba:	d000      	beq.n	92be <__aeabi_fsub+0x9a>
    92bc:	3304      	adds	r3, #4
    92be:	015a      	lsls	r2, r3, #5
    92c0:	d527      	bpl.n	9312 <__aeabi_fsub+0xee>
    92c2:	3401      	adds	r4, #1
    92c4:	2cff      	cmp	r4, #255	; 0xff
    92c6:	d100      	bne.n	92ca <__aeabi_fsub+0xa6>
    92c8:	e079      	b.n	93be <__aeabi_fsub+0x19a>
    92ca:	2201      	movs	r2, #1
    92cc:	019b      	lsls	r3, r3, #6
    92ce:	0a5b      	lsrs	r3, r3, #9
    92d0:	b2e4      	uxtb	r4, r4
    92d2:	402a      	ands	r2, r5
    92d4:	025b      	lsls	r3, r3, #9
    92d6:	05e4      	lsls	r4, r4, #23
    92d8:	0a58      	lsrs	r0, r3, #9
    92da:	07d2      	lsls	r2, r2, #31
    92dc:	4320      	orrs	r0, r4
    92de:	4310      	orrs	r0, r2
    92e0:	bc1c      	pop	{r2, r3, r4}
    92e2:	4690      	mov	r8, r2
    92e4:	4699      	mov	r9, r3
    92e6:	46a2      	mov	sl, r4
    92e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92ea:	2cff      	cmp	r4, #255	; 0xff
    92ec:	d0e0      	beq.n	92b0 <__aeabi_fsub+0x8c>
    92ee:	2180      	movs	r1, #128	; 0x80
    92f0:	04c9      	lsls	r1, r1, #19
    92f2:	430e      	orrs	r6, r1
    92f4:	2a1b      	cmp	r2, #27
    92f6:	dc7b      	bgt.n	93f0 <__aeabi_fsub+0x1cc>
    92f8:	0031      	movs	r1, r6
    92fa:	2020      	movs	r0, #32
    92fc:	40d1      	lsrs	r1, r2
    92fe:	1a82      	subs	r2, r0, r2
    9300:	4096      	lsls	r6, r2
    9302:	1e72      	subs	r2, r6, #1
    9304:	4196      	sbcs	r6, r2
    9306:	430e      	orrs	r6, r1
    9308:	1b9b      	subs	r3, r3, r6
    930a:	015a      	lsls	r2, r3, #5
    930c:	d4ba      	bmi.n	9284 <__aeabi_fsub+0x60>
    930e:	075a      	lsls	r2, r3, #29
    9310:	d1d0      	bne.n	92b4 <__aeabi_fsub+0x90>
    9312:	2201      	movs	r2, #1
    9314:	08df      	lsrs	r7, r3, #3
    9316:	402a      	ands	r2, r5
    9318:	2cff      	cmp	r4, #255	; 0xff
    931a:	d133      	bne.n	9384 <__aeabi_fsub+0x160>
    931c:	2f00      	cmp	r7, #0
    931e:	d100      	bne.n	9322 <__aeabi_fsub+0xfe>
    9320:	e0a8      	b.n	9474 <__aeabi_fsub+0x250>
    9322:	2380      	movs	r3, #128	; 0x80
    9324:	03db      	lsls	r3, r3, #15
    9326:	433b      	orrs	r3, r7
    9328:	025b      	lsls	r3, r3, #9
    932a:	0a5b      	lsrs	r3, r3, #9
    932c:	24ff      	movs	r4, #255	; 0xff
    932e:	e7d1      	b.n	92d4 <__aeabi_fsub+0xb0>
    9330:	1a21      	subs	r1, r4, r0
    9332:	2900      	cmp	r1, #0
    9334:	dd4c      	ble.n	93d0 <__aeabi_fsub+0x1ac>
    9336:	2800      	cmp	r0, #0
    9338:	d02a      	beq.n	9390 <__aeabi_fsub+0x16c>
    933a:	2cff      	cmp	r4, #255	; 0xff
    933c:	d0b8      	beq.n	92b0 <__aeabi_fsub+0x8c>
    933e:	2080      	movs	r0, #128	; 0x80
    9340:	04c0      	lsls	r0, r0, #19
    9342:	4306      	orrs	r6, r0
    9344:	291b      	cmp	r1, #27
    9346:	dd00      	ble.n	934a <__aeabi_fsub+0x126>
    9348:	e0af      	b.n	94aa <__aeabi_fsub+0x286>
    934a:	0030      	movs	r0, r6
    934c:	2720      	movs	r7, #32
    934e:	40c8      	lsrs	r0, r1
    9350:	1a79      	subs	r1, r7, r1
    9352:	408e      	lsls	r6, r1
    9354:	1e71      	subs	r1, r6, #1
    9356:	418e      	sbcs	r6, r1
    9358:	4306      	orrs	r6, r0
    935a:	199b      	adds	r3, r3, r6
    935c:	0159      	lsls	r1, r3, #5
    935e:	d5d6      	bpl.n	930e <__aeabi_fsub+0xea>
    9360:	3401      	adds	r4, #1
    9362:	2cff      	cmp	r4, #255	; 0xff
    9364:	d100      	bne.n	9368 <__aeabi_fsub+0x144>
    9366:	e085      	b.n	9474 <__aeabi_fsub+0x250>
    9368:	2201      	movs	r2, #1
    936a:	497a      	ldr	r1, [pc, #488]	; (9554 <__aeabi_fsub+0x330>)
    936c:	401a      	ands	r2, r3
    936e:	085b      	lsrs	r3, r3, #1
    9370:	400b      	ands	r3, r1
    9372:	4313      	orrs	r3, r2
    9374:	e79c      	b.n	92b0 <__aeabi_fsub+0x8c>
    9376:	2e00      	cmp	r6, #0
    9378:	d000      	beq.n	937c <__aeabi_fsub+0x158>
    937a:	e770      	b.n	925e <__aeabi_fsub+0x3a>
    937c:	e76b      	b.n	9256 <__aeabi_fsub+0x32>
    937e:	1e3b      	subs	r3, r7, #0
    9380:	d1c5      	bne.n	930e <__aeabi_fsub+0xea>
    9382:	2200      	movs	r2, #0
    9384:	027b      	lsls	r3, r7, #9
    9386:	0a5b      	lsrs	r3, r3, #9
    9388:	b2e4      	uxtb	r4, r4
    938a:	e7a3      	b.n	92d4 <__aeabi_fsub+0xb0>
    938c:	0014      	movs	r4, r2
    938e:	e78f      	b.n	92b0 <__aeabi_fsub+0x8c>
    9390:	2e00      	cmp	r6, #0
    9392:	d04d      	beq.n	9430 <__aeabi_fsub+0x20c>
    9394:	1e48      	subs	r0, r1, #1
    9396:	2800      	cmp	r0, #0
    9398:	d157      	bne.n	944a <__aeabi_fsub+0x226>
    939a:	199b      	adds	r3, r3, r6
    939c:	2401      	movs	r4, #1
    939e:	015a      	lsls	r2, r3, #5
    93a0:	d5b5      	bpl.n	930e <__aeabi_fsub+0xea>
    93a2:	2402      	movs	r4, #2
    93a4:	e7e0      	b.n	9368 <__aeabi_fsub+0x144>
    93a6:	2a00      	cmp	r2, #0
    93a8:	d125      	bne.n	93f6 <__aeabi_fsub+0x1d2>
    93aa:	1c62      	adds	r2, r4, #1
    93ac:	b2d2      	uxtb	r2, r2
    93ae:	2a01      	cmp	r2, #1
    93b0:	dd72      	ble.n	9498 <__aeabi_fsub+0x274>
    93b2:	1b9f      	subs	r7, r3, r6
    93b4:	017a      	lsls	r2, r7, #5
    93b6:	d535      	bpl.n	9424 <__aeabi_fsub+0x200>
    93b8:	1af7      	subs	r7, r6, r3
    93ba:	000d      	movs	r5, r1
    93bc:	e764      	b.n	9288 <__aeabi_fsub+0x64>
    93be:	2201      	movs	r2, #1
    93c0:	2300      	movs	r3, #0
    93c2:	402a      	ands	r2, r5
    93c4:	e786      	b.n	92d4 <__aeabi_fsub+0xb0>
    93c6:	003b      	movs	r3, r7
    93c8:	4a63      	ldr	r2, [pc, #396]	; (9558 <__aeabi_fsub+0x334>)
    93ca:	1a24      	subs	r4, r4, r0
    93cc:	4013      	ands	r3, r2
    93ce:	e76f      	b.n	92b0 <__aeabi_fsub+0x8c>
    93d0:	2900      	cmp	r1, #0
    93d2:	d16c      	bne.n	94ae <__aeabi_fsub+0x28a>
    93d4:	1c61      	adds	r1, r4, #1
    93d6:	b2c8      	uxtb	r0, r1
    93d8:	2801      	cmp	r0, #1
    93da:	dd4e      	ble.n	947a <__aeabi_fsub+0x256>
    93dc:	29ff      	cmp	r1, #255	; 0xff
    93de:	d049      	beq.n	9474 <__aeabi_fsub+0x250>
    93e0:	199b      	adds	r3, r3, r6
    93e2:	085b      	lsrs	r3, r3, #1
    93e4:	000c      	movs	r4, r1
    93e6:	e763      	b.n	92b0 <__aeabi_fsub+0x8c>
    93e8:	2aff      	cmp	r2, #255	; 0xff
    93ea:	d041      	beq.n	9470 <__aeabi_fsub+0x24c>
    93ec:	000a      	movs	r2, r1
    93ee:	e781      	b.n	92f4 <__aeabi_fsub+0xd0>
    93f0:	2601      	movs	r6, #1
    93f2:	1b9b      	subs	r3, r3, r6
    93f4:	e789      	b.n	930a <__aeabi_fsub+0xe6>
    93f6:	2c00      	cmp	r4, #0
    93f8:	d01c      	beq.n	9434 <__aeabi_fsub+0x210>
    93fa:	28ff      	cmp	r0, #255	; 0xff
    93fc:	d021      	beq.n	9442 <__aeabi_fsub+0x21e>
    93fe:	2480      	movs	r4, #128	; 0x80
    9400:	04e4      	lsls	r4, r4, #19
    9402:	4252      	negs	r2, r2
    9404:	4323      	orrs	r3, r4
    9406:	2a1b      	cmp	r2, #27
    9408:	dd00      	ble.n	940c <__aeabi_fsub+0x1e8>
    940a:	e096      	b.n	953a <__aeabi_fsub+0x316>
    940c:	001c      	movs	r4, r3
    940e:	2520      	movs	r5, #32
    9410:	40d4      	lsrs	r4, r2
    9412:	1aaa      	subs	r2, r5, r2
    9414:	4093      	lsls	r3, r2
    9416:	1e5a      	subs	r2, r3, #1
    9418:	4193      	sbcs	r3, r2
    941a:	4323      	orrs	r3, r4
    941c:	1af3      	subs	r3, r6, r3
    941e:	0004      	movs	r4, r0
    9420:	000d      	movs	r5, r1
    9422:	e72d      	b.n	9280 <__aeabi_fsub+0x5c>
    9424:	2f00      	cmp	r7, #0
    9426:	d000      	beq.n	942a <__aeabi_fsub+0x206>
    9428:	e72e      	b.n	9288 <__aeabi_fsub+0x64>
    942a:	2200      	movs	r2, #0
    942c:	2400      	movs	r4, #0
    942e:	e7a9      	b.n	9384 <__aeabi_fsub+0x160>
    9430:	000c      	movs	r4, r1
    9432:	e73d      	b.n	92b0 <__aeabi_fsub+0x8c>
    9434:	2b00      	cmp	r3, #0
    9436:	d058      	beq.n	94ea <__aeabi_fsub+0x2c6>
    9438:	43d2      	mvns	r2, r2
    943a:	2a00      	cmp	r2, #0
    943c:	d0ee      	beq.n	941c <__aeabi_fsub+0x1f8>
    943e:	28ff      	cmp	r0, #255	; 0xff
    9440:	d1e1      	bne.n	9406 <__aeabi_fsub+0x1e2>
    9442:	0033      	movs	r3, r6
    9444:	24ff      	movs	r4, #255	; 0xff
    9446:	000d      	movs	r5, r1
    9448:	e732      	b.n	92b0 <__aeabi_fsub+0x8c>
    944a:	29ff      	cmp	r1, #255	; 0xff
    944c:	d010      	beq.n	9470 <__aeabi_fsub+0x24c>
    944e:	0001      	movs	r1, r0
    9450:	e778      	b.n	9344 <__aeabi_fsub+0x120>
    9452:	2b00      	cmp	r3, #0
    9454:	d06e      	beq.n	9534 <__aeabi_fsub+0x310>
    9456:	24ff      	movs	r4, #255	; 0xff
    9458:	2e00      	cmp	r6, #0
    945a:	d100      	bne.n	945e <__aeabi_fsub+0x23a>
    945c:	e728      	b.n	92b0 <__aeabi_fsub+0x8c>
    945e:	2280      	movs	r2, #128	; 0x80
    9460:	4651      	mov	r1, sl
    9462:	03d2      	lsls	r2, r2, #15
    9464:	4211      	tst	r1, r2
    9466:	d003      	beq.n	9470 <__aeabi_fsub+0x24c>
    9468:	4661      	mov	r1, ip
    946a:	4211      	tst	r1, r2
    946c:	d100      	bne.n	9470 <__aeabi_fsub+0x24c>
    946e:	0033      	movs	r3, r6
    9470:	24ff      	movs	r4, #255	; 0xff
    9472:	e71d      	b.n	92b0 <__aeabi_fsub+0x8c>
    9474:	24ff      	movs	r4, #255	; 0xff
    9476:	2300      	movs	r3, #0
    9478:	e72c      	b.n	92d4 <__aeabi_fsub+0xb0>
    947a:	2c00      	cmp	r4, #0
    947c:	d1e9      	bne.n	9452 <__aeabi_fsub+0x22e>
    947e:	2b00      	cmp	r3, #0
    9480:	d063      	beq.n	954a <__aeabi_fsub+0x326>
    9482:	2e00      	cmp	r6, #0
    9484:	d100      	bne.n	9488 <__aeabi_fsub+0x264>
    9486:	e713      	b.n	92b0 <__aeabi_fsub+0x8c>
    9488:	199b      	adds	r3, r3, r6
    948a:	015a      	lsls	r2, r3, #5
    948c:	d400      	bmi.n	9490 <__aeabi_fsub+0x26c>
    948e:	e73e      	b.n	930e <__aeabi_fsub+0xea>
    9490:	4a31      	ldr	r2, [pc, #196]	; (9558 <__aeabi_fsub+0x334>)
    9492:	000c      	movs	r4, r1
    9494:	4013      	ands	r3, r2
    9496:	e70b      	b.n	92b0 <__aeabi_fsub+0x8c>
    9498:	2c00      	cmp	r4, #0
    949a:	d11e      	bne.n	94da <__aeabi_fsub+0x2b6>
    949c:	2b00      	cmp	r3, #0
    949e:	d12f      	bne.n	9500 <__aeabi_fsub+0x2dc>
    94a0:	2e00      	cmp	r6, #0
    94a2:	d04f      	beq.n	9544 <__aeabi_fsub+0x320>
    94a4:	0033      	movs	r3, r6
    94a6:	000d      	movs	r5, r1
    94a8:	e702      	b.n	92b0 <__aeabi_fsub+0x8c>
    94aa:	2601      	movs	r6, #1
    94ac:	e755      	b.n	935a <__aeabi_fsub+0x136>
    94ae:	2c00      	cmp	r4, #0
    94b0:	d11f      	bne.n	94f2 <__aeabi_fsub+0x2ce>
    94b2:	2b00      	cmp	r3, #0
    94b4:	d043      	beq.n	953e <__aeabi_fsub+0x31a>
    94b6:	43c9      	mvns	r1, r1
    94b8:	2900      	cmp	r1, #0
    94ba:	d00b      	beq.n	94d4 <__aeabi_fsub+0x2b0>
    94bc:	28ff      	cmp	r0, #255	; 0xff
    94be:	d039      	beq.n	9534 <__aeabi_fsub+0x310>
    94c0:	291b      	cmp	r1, #27
    94c2:	dc44      	bgt.n	954e <__aeabi_fsub+0x32a>
    94c4:	001c      	movs	r4, r3
    94c6:	2720      	movs	r7, #32
    94c8:	40cc      	lsrs	r4, r1
    94ca:	1a79      	subs	r1, r7, r1
    94cc:	408b      	lsls	r3, r1
    94ce:	1e59      	subs	r1, r3, #1
    94d0:	418b      	sbcs	r3, r1
    94d2:	4323      	orrs	r3, r4
    94d4:	199b      	adds	r3, r3, r6
    94d6:	0004      	movs	r4, r0
    94d8:	e740      	b.n	935c <__aeabi_fsub+0x138>
    94da:	2b00      	cmp	r3, #0
    94dc:	d11a      	bne.n	9514 <__aeabi_fsub+0x2f0>
    94de:	2e00      	cmp	r6, #0
    94e0:	d124      	bne.n	952c <__aeabi_fsub+0x308>
    94e2:	2780      	movs	r7, #128	; 0x80
    94e4:	2200      	movs	r2, #0
    94e6:	03ff      	lsls	r7, r7, #15
    94e8:	e71b      	b.n	9322 <__aeabi_fsub+0xfe>
    94ea:	0033      	movs	r3, r6
    94ec:	0004      	movs	r4, r0
    94ee:	000d      	movs	r5, r1
    94f0:	e6de      	b.n	92b0 <__aeabi_fsub+0x8c>
    94f2:	28ff      	cmp	r0, #255	; 0xff
    94f4:	d01e      	beq.n	9534 <__aeabi_fsub+0x310>
    94f6:	2480      	movs	r4, #128	; 0x80
    94f8:	04e4      	lsls	r4, r4, #19
    94fa:	4249      	negs	r1, r1
    94fc:	4323      	orrs	r3, r4
    94fe:	e7df      	b.n	94c0 <__aeabi_fsub+0x29c>
    9500:	2e00      	cmp	r6, #0
    9502:	d100      	bne.n	9506 <__aeabi_fsub+0x2e2>
    9504:	e6d4      	b.n	92b0 <__aeabi_fsub+0x8c>
    9506:	1b9f      	subs	r7, r3, r6
    9508:	017a      	lsls	r2, r7, #5
    950a:	d400      	bmi.n	950e <__aeabi_fsub+0x2ea>
    950c:	e737      	b.n	937e <__aeabi_fsub+0x15a>
    950e:	1af3      	subs	r3, r6, r3
    9510:	000d      	movs	r5, r1
    9512:	e6cd      	b.n	92b0 <__aeabi_fsub+0x8c>
    9514:	24ff      	movs	r4, #255	; 0xff
    9516:	2e00      	cmp	r6, #0
    9518:	d100      	bne.n	951c <__aeabi_fsub+0x2f8>
    951a:	e6c9      	b.n	92b0 <__aeabi_fsub+0x8c>
    951c:	2280      	movs	r2, #128	; 0x80
    951e:	4650      	mov	r0, sl
    9520:	03d2      	lsls	r2, r2, #15
    9522:	4210      	tst	r0, r2
    9524:	d0a4      	beq.n	9470 <__aeabi_fsub+0x24c>
    9526:	4660      	mov	r0, ip
    9528:	4210      	tst	r0, r2
    952a:	d1a1      	bne.n	9470 <__aeabi_fsub+0x24c>
    952c:	0033      	movs	r3, r6
    952e:	000d      	movs	r5, r1
    9530:	24ff      	movs	r4, #255	; 0xff
    9532:	e6bd      	b.n	92b0 <__aeabi_fsub+0x8c>
    9534:	0033      	movs	r3, r6
    9536:	24ff      	movs	r4, #255	; 0xff
    9538:	e6ba      	b.n	92b0 <__aeabi_fsub+0x8c>
    953a:	2301      	movs	r3, #1
    953c:	e76e      	b.n	941c <__aeabi_fsub+0x1f8>
    953e:	0033      	movs	r3, r6
    9540:	0004      	movs	r4, r0
    9542:	e6b5      	b.n	92b0 <__aeabi_fsub+0x8c>
    9544:	2700      	movs	r7, #0
    9546:	2200      	movs	r2, #0
    9548:	e71c      	b.n	9384 <__aeabi_fsub+0x160>
    954a:	0033      	movs	r3, r6
    954c:	e6b0      	b.n	92b0 <__aeabi_fsub+0x8c>
    954e:	2301      	movs	r3, #1
    9550:	e7c0      	b.n	94d4 <__aeabi_fsub+0x2b0>
    9552:	46c0      	nop			; (mov r8, r8)
    9554:	7dffffff 	.word	0x7dffffff
    9558:	fbffffff 	.word	0xfbffffff

0000955c <__aeabi_f2iz>:
    955c:	0241      	lsls	r1, r0, #9
    955e:	0043      	lsls	r3, r0, #1
    9560:	0fc2      	lsrs	r2, r0, #31
    9562:	0a49      	lsrs	r1, r1, #9
    9564:	0e1b      	lsrs	r3, r3, #24
    9566:	2000      	movs	r0, #0
    9568:	2b7e      	cmp	r3, #126	; 0x7e
    956a:	dd0d      	ble.n	9588 <__aeabi_f2iz+0x2c>
    956c:	2b9d      	cmp	r3, #157	; 0x9d
    956e:	dc0c      	bgt.n	958a <__aeabi_f2iz+0x2e>
    9570:	2080      	movs	r0, #128	; 0x80
    9572:	0400      	lsls	r0, r0, #16
    9574:	4301      	orrs	r1, r0
    9576:	2b95      	cmp	r3, #149	; 0x95
    9578:	dc0a      	bgt.n	9590 <__aeabi_f2iz+0x34>
    957a:	2096      	movs	r0, #150	; 0x96
    957c:	1ac3      	subs	r3, r0, r3
    957e:	40d9      	lsrs	r1, r3
    9580:	4248      	negs	r0, r1
    9582:	2a00      	cmp	r2, #0
    9584:	d100      	bne.n	9588 <__aeabi_f2iz+0x2c>
    9586:	0008      	movs	r0, r1
    9588:	4770      	bx	lr
    958a:	4b03      	ldr	r3, [pc, #12]	; (9598 <__aeabi_f2iz+0x3c>)
    958c:	18d0      	adds	r0, r2, r3
    958e:	e7fb      	b.n	9588 <__aeabi_f2iz+0x2c>
    9590:	3b96      	subs	r3, #150	; 0x96
    9592:	4099      	lsls	r1, r3
    9594:	e7f4      	b.n	9580 <__aeabi_f2iz+0x24>
    9596:	46c0      	nop			; (mov r8, r8)
    9598:	7fffffff 	.word	0x7fffffff

0000959c <__aeabi_i2f>:
    959c:	b570      	push	{r4, r5, r6, lr}
    959e:	2800      	cmp	r0, #0
    95a0:	d030      	beq.n	9604 <__aeabi_i2f+0x68>
    95a2:	17c3      	asrs	r3, r0, #31
    95a4:	18c4      	adds	r4, r0, r3
    95a6:	405c      	eors	r4, r3
    95a8:	0fc5      	lsrs	r5, r0, #31
    95aa:	0020      	movs	r0, r4
    95ac:	f001 feaa 	bl	b304 <__clzsi2>
    95b0:	239e      	movs	r3, #158	; 0x9e
    95b2:	1a1b      	subs	r3, r3, r0
    95b4:	2b96      	cmp	r3, #150	; 0x96
    95b6:	dc0d      	bgt.n	95d4 <__aeabi_i2f+0x38>
    95b8:	2296      	movs	r2, #150	; 0x96
    95ba:	1ad2      	subs	r2, r2, r3
    95bc:	4094      	lsls	r4, r2
    95be:	002a      	movs	r2, r5
    95c0:	0264      	lsls	r4, r4, #9
    95c2:	0a64      	lsrs	r4, r4, #9
    95c4:	b2db      	uxtb	r3, r3
    95c6:	0264      	lsls	r4, r4, #9
    95c8:	05db      	lsls	r3, r3, #23
    95ca:	0a60      	lsrs	r0, r4, #9
    95cc:	07d2      	lsls	r2, r2, #31
    95ce:	4318      	orrs	r0, r3
    95d0:	4310      	orrs	r0, r2
    95d2:	bd70      	pop	{r4, r5, r6, pc}
    95d4:	2b99      	cmp	r3, #153	; 0x99
    95d6:	dc19      	bgt.n	960c <__aeabi_i2f+0x70>
    95d8:	2299      	movs	r2, #153	; 0x99
    95da:	1ad2      	subs	r2, r2, r3
    95dc:	2a00      	cmp	r2, #0
    95de:	dd29      	ble.n	9634 <__aeabi_i2f+0x98>
    95e0:	4094      	lsls	r4, r2
    95e2:	0022      	movs	r2, r4
    95e4:	4c14      	ldr	r4, [pc, #80]	; (9638 <__aeabi_i2f+0x9c>)
    95e6:	4014      	ands	r4, r2
    95e8:	0751      	lsls	r1, r2, #29
    95ea:	d004      	beq.n	95f6 <__aeabi_i2f+0x5a>
    95ec:	210f      	movs	r1, #15
    95ee:	400a      	ands	r2, r1
    95f0:	2a04      	cmp	r2, #4
    95f2:	d000      	beq.n	95f6 <__aeabi_i2f+0x5a>
    95f4:	3404      	adds	r4, #4
    95f6:	0162      	lsls	r2, r4, #5
    95f8:	d413      	bmi.n	9622 <__aeabi_i2f+0x86>
    95fa:	01a4      	lsls	r4, r4, #6
    95fc:	0a64      	lsrs	r4, r4, #9
    95fe:	b2db      	uxtb	r3, r3
    9600:	002a      	movs	r2, r5
    9602:	e7e0      	b.n	95c6 <__aeabi_i2f+0x2a>
    9604:	2200      	movs	r2, #0
    9606:	2300      	movs	r3, #0
    9608:	2400      	movs	r4, #0
    960a:	e7dc      	b.n	95c6 <__aeabi_i2f+0x2a>
    960c:	2205      	movs	r2, #5
    960e:	0021      	movs	r1, r4
    9610:	1a12      	subs	r2, r2, r0
    9612:	40d1      	lsrs	r1, r2
    9614:	22b9      	movs	r2, #185	; 0xb9
    9616:	1ad2      	subs	r2, r2, r3
    9618:	4094      	lsls	r4, r2
    961a:	1e62      	subs	r2, r4, #1
    961c:	4194      	sbcs	r4, r2
    961e:	430c      	orrs	r4, r1
    9620:	e7da      	b.n	95d8 <__aeabi_i2f+0x3c>
    9622:	4b05      	ldr	r3, [pc, #20]	; (9638 <__aeabi_i2f+0x9c>)
    9624:	002a      	movs	r2, r5
    9626:	401c      	ands	r4, r3
    9628:	239f      	movs	r3, #159	; 0x9f
    962a:	01a4      	lsls	r4, r4, #6
    962c:	1a1b      	subs	r3, r3, r0
    962e:	0a64      	lsrs	r4, r4, #9
    9630:	b2db      	uxtb	r3, r3
    9632:	e7c8      	b.n	95c6 <__aeabi_i2f+0x2a>
    9634:	0022      	movs	r2, r4
    9636:	e7d5      	b.n	95e4 <__aeabi_i2f+0x48>
    9638:	fbffffff 	.word	0xfbffffff

0000963c <__aeabi_dadd>:
    963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    963e:	4645      	mov	r5, r8
    9640:	46de      	mov	lr, fp
    9642:	4657      	mov	r7, sl
    9644:	464e      	mov	r6, r9
    9646:	030c      	lsls	r4, r1, #12
    9648:	b5e0      	push	{r5, r6, r7, lr}
    964a:	004e      	lsls	r6, r1, #1
    964c:	0fc9      	lsrs	r1, r1, #31
    964e:	4688      	mov	r8, r1
    9650:	000d      	movs	r5, r1
    9652:	0a61      	lsrs	r1, r4, #9
    9654:	0f44      	lsrs	r4, r0, #29
    9656:	430c      	orrs	r4, r1
    9658:	00c7      	lsls	r7, r0, #3
    965a:	0319      	lsls	r1, r3, #12
    965c:	0058      	lsls	r0, r3, #1
    965e:	0fdb      	lsrs	r3, r3, #31
    9660:	469b      	mov	fp, r3
    9662:	0a4b      	lsrs	r3, r1, #9
    9664:	0f51      	lsrs	r1, r2, #29
    9666:	430b      	orrs	r3, r1
    9668:	0d76      	lsrs	r6, r6, #21
    966a:	0d40      	lsrs	r0, r0, #21
    966c:	0019      	movs	r1, r3
    966e:	00d2      	lsls	r2, r2, #3
    9670:	45d8      	cmp	r8, fp
    9672:	d100      	bne.n	9676 <__aeabi_dadd+0x3a>
    9674:	e0ae      	b.n	97d4 <__aeabi_dadd+0x198>
    9676:	1a35      	subs	r5, r6, r0
    9678:	2d00      	cmp	r5, #0
    967a:	dc00      	bgt.n	967e <__aeabi_dadd+0x42>
    967c:	e0f6      	b.n	986c <__aeabi_dadd+0x230>
    967e:	2800      	cmp	r0, #0
    9680:	d10f      	bne.n	96a2 <__aeabi_dadd+0x66>
    9682:	4313      	orrs	r3, r2
    9684:	d100      	bne.n	9688 <__aeabi_dadd+0x4c>
    9686:	e0db      	b.n	9840 <__aeabi_dadd+0x204>
    9688:	1e6b      	subs	r3, r5, #1
    968a:	2b00      	cmp	r3, #0
    968c:	d000      	beq.n	9690 <__aeabi_dadd+0x54>
    968e:	e137      	b.n	9900 <__aeabi_dadd+0x2c4>
    9690:	1aba      	subs	r2, r7, r2
    9692:	4297      	cmp	r7, r2
    9694:	41bf      	sbcs	r7, r7
    9696:	1a64      	subs	r4, r4, r1
    9698:	427f      	negs	r7, r7
    969a:	1be4      	subs	r4, r4, r7
    969c:	2601      	movs	r6, #1
    969e:	0017      	movs	r7, r2
    96a0:	e024      	b.n	96ec <__aeabi_dadd+0xb0>
    96a2:	4bc6      	ldr	r3, [pc, #792]	; (99bc <__aeabi_dadd+0x380>)
    96a4:	429e      	cmp	r6, r3
    96a6:	d04d      	beq.n	9744 <__aeabi_dadd+0x108>
    96a8:	2380      	movs	r3, #128	; 0x80
    96aa:	041b      	lsls	r3, r3, #16
    96ac:	4319      	orrs	r1, r3
    96ae:	2d38      	cmp	r5, #56	; 0x38
    96b0:	dd00      	ble.n	96b4 <__aeabi_dadd+0x78>
    96b2:	e107      	b.n	98c4 <__aeabi_dadd+0x288>
    96b4:	2d1f      	cmp	r5, #31
    96b6:	dd00      	ble.n	96ba <__aeabi_dadd+0x7e>
    96b8:	e138      	b.n	992c <__aeabi_dadd+0x2f0>
    96ba:	2020      	movs	r0, #32
    96bc:	1b43      	subs	r3, r0, r5
    96be:	469a      	mov	sl, r3
    96c0:	000b      	movs	r3, r1
    96c2:	4650      	mov	r0, sl
    96c4:	4083      	lsls	r3, r0
    96c6:	4699      	mov	r9, r3
    96c8:	0013      	movs	r3, r2
    96ca:	4648      	mov	r0, r9
    96cc:	40eb      	lsrs	r3, r5
    96ce:	4318      	orrs	r0, r3
    96d0:	0003      	movs	r3, r0
    96d2:	4650      	mov	r0, sl
    96d4:	4082      	lsls	r2, r0
    96d6:	1e50      	subs	r0, r2, #1
    96d8:	4182      	sbcs	r2, r0
    96da:	40e9      	lsrs	r1, r5
    96dc:	431a      	orrs	r2, r3
    96de:	1aba      	subs	r2, r7, r2
    96e0:	1a61      	subs	r1, r4, r1
    96e2:	4297      	cmp	r7, r2
    96e4:	41a4      	sbcs	r4, r4
    96e6:	0017      	movs	r7, r2
    96e8:	4264      	negs	r4, r4
    96ea:	1b0c      	subs	r4, r1, r4
    96ec:	0223      	lsls	r3, r4, #8
    96ee:	d562      	bpl.n	97b6 <__aeabi_dadd+0x17a>
    96f0:	0264      	lsls	r4, r4, #9
    96f2:	0a65      	lsrs	r5, r4, #9
    96f4:	2d00      	cmp	r5, #0
    96f6:	d100      	bne.n	96fa <__aeabi_dadd+0xbe>
    96f8:	e0df      	b.n	98ba <__aeabi_dadd+0x27e>
    96fa:	0028      	movs	r0, r5
    96fc:	f001 fe02 	bl	b304 <__clzsi2>
    9700:	0003      	movs	r3, r0
    9702:	3b08      	subs	r3, #8
    9704:	2b1f      	cmp	r3, #31
    9706:	dd00      	ble.n	970a <__aeabi_dadd+0xce>
    9708:	e0d2      	b.n	98b0 <__aeabi_dadd+0x274>
    970a:	2220      	movs	r2, #32
    970c:	003c      	movs	r4, r7
    970e:	1ad2      	subs	r2, r2, r3
    9710:	409d      	lsls	r5, r3
    9712:	40d4      	lsrs	r4, r2
    9714:	409f      	lsls	r7, r3
    9716:	4325      	orrs	r5, r4
    9718:	429e      	cmp	r6, r3
    971a:	dd00      	ble.n	971e <__aeabi_dadd+0xe2>
    971c:	e0c4      	b.n	98a8 <__aeabi_dadd+0x26c>
    971e:	1b9e      	subs	r6, r3, r6
    9720:	1c73      	adds	r3, r6, #1
    9722:	2b1f      	cmp	r3, #31
    9724:	dd00      	ble.n	9728 <__aeabi_dadd+0xec>
    9726:	e0f1      	b.n	990c <__aeabi_dadd+0x2d0>
    9728:	2220      	movs	r2, #32
    972a:	0038      	movs	r0, r7
    972c:	0029      	movs	r1, r5
    972e:	1ad2      	subs	r2, r2, r3
    9730:	40d8      	lsrs	r0, r3
    9732:	4091      	lsls	r1, r2
    9734:	4097      	lsls	r7, r2
    9736:	002c      	movs	r4, r5
    9738:	4301      	orrs	r1, r0
    973a:	1e78      	subs	r0, r7, #1
    973c:	4187      	sbcs	r7, r0
    973e:	40dc      	lsrs	r4, r3
    9740:	2600      	movs	r6, #0
    9742:	430f      	orrs	r7, r1
    9744:	077b      	lsls	r3, r7, #29
    9746:	d009      	beq.n	975c <__aeabi_dadd+0x120>
    9748:	230f      	movs	r3, #15
    974a:	403b      	ands	r3, r7
    974c:	2b04      	cmp	r3, #4
    974e:	d005      	beq.n	975c <__aeabi_dadd+0x120>
    9750:	1d3b      	adds	r3, r7, #4
    9752:	42bb      	cmp	r3, r7
    9754:	41bf      	sbcs	r7, r7
    9756:	427f      	negs	r7, r7
    9758:	19e4      	adds	r4, r4, r7
    975a:	001f      	movs	r7, r3
    975c:	0223      	lsls	r3, r4, #8
    975e:	d52c      	bpl.n	97ba <__aeabi_dadd+0x17e>
    9760:	4b96      	ldr	r3, [pc, #600]	; (99bc <__aeabi_dadd+0x380>)
    9762:	3601      	adds	r6, #1
    9764:	429e      	cmp	r6, r3
    9766:	d100      	bne.n	976a <__aeabi_dadd+0x12e>
    9768:	e09a      	b.n	98a0 <__aeabi_dadd+0x264>
    976a:	4645      	mov	r5, r8
    976c:	4b94      	ldr	r3, [pc, #592]	; (99c0 <__aeabi_dadd+0x384>)
    976e:	08ff      	lsrs	r7, r7, #3
    9770:	401c      	ands	r4, r3
    9772:	0760      	lsls	r0, r4, #29
    9774:	0576      	lsls	r6, r6, #21
    9776:	0264      	lsls	r4, r4, #9
    9778:	4307      	orrs	r7, r0
    977a:	0b24      	lsrs	r4, r4, #12
    977c:	0d76      	lsrs	r6, r6, #21
    977e:	2100      	movs	r1, #0
    9780:	0324      	lsls	r4, r4, #12
    9782:	0b23      	lsrs	r3, r4, #12
    9784:	0d0c      	lsrs	r4, r1, #20
    9786:	4a8f      	ldr	r2, [pc, #572]	; (99c4 <__aeabi_dadd+0x388>)
    9788:	0524      	lsls	r4, r4, #20
    978a:	431c      	orrs	r4, r3
    978c:	4014      	ands	r4, r2
    978e:	0533      	lsls	r3, r6, #20
    9790:	4323      	orrs	r3, r4
    9792:	005b      	lsls	r3, r3, #1
    9794:	07ed      	lsls	r5, r5, #31
    9796:	085b      	lsrs	r3, r3, #1
    9798:	432b      	orrs	r3, r5
    979a:	0038      	movs	r0, r7
    979c:	0019      	movs	r1, r3
    979e:	bc3c      	pop	{r2, r3, r4, r5}
    97a0:	4690      	mov	r8, r2
    97a2:	4699      	mov	r9, r3
    97a4:	46a2      	mov	sl, r4
    97a6:	46ab      	mov	fp, r5
    97a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97aa:	4664      	mov	r4, ip
    97ac:	4304      	orrs	r4, r0
    97ae:	d100      	bne.n	97b2 <__aeabi_dadd+0x176>
    97b0:	e211      	b.n	9bd6 <__aeabi_dadd+0x59a>
    97b2:	0004      	movs	r4, r0
    97b4:	4667      	mov	r7, ip
    97b6:	077b      	lsls	r3, r7, #29
    97b8:	d1c6      	bne.n	9748 <__aeabi_dadd+0x10c>
    97ba:	4645      	mov	r5, r8
    97bc:	0760      	lsls	r0, r4, #29
    97be:	08ff      	lsrs	r7, r7, #3
    97c0:	4307      	orrs	r7, r0
    97c2:	08e4      	lsrs	r4, r4, #3
    97c4:	4b7d      	ldr	r3, [pc, #500]	; (99bc <__aeabi_dadd+0x380>)
    97c6:	429e      	cmp	r6, r3
    97c8:	d030      	beq.n	982c <__aeabi_dadd+0x1f0>
    97ca:	0324      	lsls	r4, r4, #12
    97cc:	0576      	lsls	r6, r6, #21
    97ce:	0b24      	lsrs	r4, r4, #12
    97d0:	0d76      	lsrs	r6, r6, #21
    97d2:	e7d4      	b.n	977e <__aeabi_dadd+0x142>
    97d4:	1a33      	subs	r3, r6, r0
    97d6:	469a      	mov	sl, r3
    97d8:	2b00      	cmp	r3, #0
    97da:	dd78      	ble.n	98ce <__aeabi_dadd+0x292>
    97dc:	2800      	cmp	r0, #0
    97de:	d031      	beq.n	9844 <__aeabi_dadd+0x208>
    97e0:	4876      	ldr	r0, [pc, #472]	; (99bc <__aeabi_dadd+0x380>)
    97e2:	4286      	cmp	r6, r0
    97e4:	d0ae      	beq.n	9744 <__aeabi_dadd+0x108>
    97e6:	2080      	movs	r0, #128	; 0x80
    97e8:	0400      	lsls	r0, r0, #16
    97ea:	4301      	orrs	r1, r0
    97ec:	4653      	mov	r3, sl
    97ee:	2b38      	cmp	r3, #56	; 0x38
    97f0:	dc00      	bgt.n	97f4 <__aeabi_dadd+0x1b8>
    97f2:	e0e9      	b.n	99c8 <__aeabi_dadd+0x38c>
    97f4:	430a      	orrs	r2, r1
    97f6:	1e51      	subs	r1, r2, #1
    97f8:	418a      	sbcs	r2, r1
    97fa:	2100      	movs	r1, #0
    97fc:	19d2      	adds	r2, r2, r7
    97fe:	42ba      	cmp	r2, r7
    9800:	41bf      	sbcs	r7, r7
    9802:	1909      	adds	r1, r1, r4
    9804:	427c      	negs	r4, r7
    9806:	0017      	movs	r7, r2
    9808:	190c      	adds	r4, r1, r4
    980a:	0223      	lsls	r3, r4, #8
    980c:	d5d3      	bpl.n	97b6 <__aeabi_dadd+0x17a>
    980e:	4b6b      	ldr	r3, [pc, #428]	; (99bc <__aeabi_dadd+0x380>)
    9810:	3601      	adds	r6, #1
    9812:	429e      	cmp	r6, r3
    9814:	d100      	bne.n	9818 <__aeabi_dadd+0x1dc>
    9816:	e13a      	b.n	9a8e <__aeabi_dadd+0x452>
    9818:	2001      	movs	r0, #1
    981a:	4b69      	ldr	r3, [pc, #420]	; (99c0 <__aeabi_dadd+0x384>)
    981c:	401c      	ands	r4, r3
    981e:	087b      	lsrs	r3, r7, #1
    9820:	4007      	ands	r7, r0
    9822:	431f      	orrs	r7, r3
    9824:	07e0      	lsls	r0, r4, #31
    9826:	4307      	orrs	r7, r0
    9828:	0864      	lsrs	r4, r4, #1
    982a:	e78b      	b.n	9744 <__aeabi_dadd+0x108>
    982c:	0023      	movs	r3, r4
    982e:	433b      	orrs	r3, r7
    9830:	d100      	bne.n	9834 <__aeabi_dadd+0x1f8>
    9832:	e1cb      	b.n	9bcc <__aeabi_dadd+0x590>
    9834:	2280      	movs	r2, #128	; 0x80
    9836:	0312      	lsls	r2, r2, #12
    9838:	4314      	orrs	r4, r2
    983a:	0324      	lsls	r4, r4, #12
    983c:	0b24      	lsrs	r4, r4, #12
    983e:	e79e      	b.n	977e <__aeabi_dadd+0x142>
    9840:	002e      	movs	r6, r5
    9842:	e77f      	b.n	9744 <__aeabi_dadd+0x108>
    9844:	0008      	movs	r0, r1
    9846:	4310      	orrs	r0, r2
    9848:	d100      	bne.n	984c <__aeabi_dadd+0x210>
    984a:	e0b4      	b.n	99b6 <__aeabi_dadd+0x37a>
    984c:	1e58      	subs	r0, r3, #1
    984e:	2800      	cmp	r0, #0
    9850:	d000      	beq.n	9854 <__aeabi_dadd+0x218>
    9852:	e0de      	b.n	9a12 <__aeabi_dadd+0x3d6>
    9854:	18ba      	adds	r2, r7, r2
    9856:	42ba      	cmp	r2, r7
    9858:	419b      	sbcs	r3, r3
    985a:	1864      	adds	r4, r4, r1
    985c:	425b      	negs	r3, r3
    985e:	18e4      	adds	r4, r4, r3
    9860:	0017      	movs	r7, r2
    9862:	2601      	movs	r6, #1
    9864:	0223      	lsls	r3, r4, #8
    9866:	d5a6      	bpl.n	97b6 <__aeabi_dadd+0x17a>
    9868:	2602      	movs	r6, #2
    986a:	e7d5      	b.n	9818 <__aeabi_dadd+0x1dc>
    986c:	2d00      	cmp	r5, #0
    986e:	d16e      	bne.n	994e <__aeabi_dadd+0x312>
    9870:	1c70      	adds	r0, r6, #1
    9872:	0540      	lsls	r0, r0, #21
    9874:	0d40      	lsrs	r0, r0, #21
    9876:	2801      	cmp	r0, #1
    9878:	dc00      	bgt.n	987c <__aeabi_dadd+0x240>
    987a:	e0f9      	b.n	9a70 <__aeabi_dadd+0x434>
    987c:	1ab8      	subs	r0, r7, r2
    987e:	4684      	mov	ip, r0
    9880:	4287      	cmp	r7, r0
    9882:	4180      	sbcs	r0, r0
    9884:	1ae5      	subs	r5, r4, r3
    9886:	4240      	negs	r0, r0
    9888:	1a2d      	subs	r5, r5, r0
    988a:	0228      	lsls	r0, r5, #8
    988c:	d400      	bmi.n	9890 <__aeabi_dadd+0x254>
    988e:	e089      	b.n	99a4 <__aeabi_dadd+0x368>
    9890:	1bd7      	subs	r7, r2, r7
    9892:	42ba      	cmp	r2, r7
    9894:	4192      	sbcs	r2, r2
    9896:	1b1c      	subs	r4, r3, r4
    9898:	4252      	negs	r2, r2
    989a:	1aa5      	subs	r5, r4, r2
    989c:	46d8      	mov	r8, fp
    989e:	e729      	b.n	96f4 <__aeabi_dadd+0xb8>
    98a0:	4645      	mov	r5, r8
    98a2:	2400      	movs	r4, #0
    98a4:	2700      	movs	r7, #0
    98a6:	e76a      	b.n	977e <__aeabi_dadd+0x142>
    98a8:	4c45      	ldr	r4, [pc, #276]	; (99c0 <__aeabi_dadd+0x384>)
    98aa:	1af6      	subs	r6, r6, r3
    98ac:	402c      	ands	r4, r5
    98ae:	e749      	b.n	9744 <__aeabi_dadd+0x108>
    98b0:	003d      	movs	r5, r7
    98b2:	3828      	subs	r0, #40	; 0x28
    98b4:	4085      	lsls	r5, r0
    98b6:	2700      	movs	r7, #0
    98b8:	e72e      	b.n	9718 <__aeabi_dadd+0xdc>
    98ba:	0038      	movs	r0, r7
    98bc:	f001 fd22 	bl	b304 <__clzsi2>
    98c0:	3020      	adds	r0, #32
    98c2:	e71d      	b.n	9700 <__aeabi_dadd+0xc4>
    98c4:	430a      	orrs	r2, r1
    98c6:	1e51      	subs	r1, r2, #1
    98c8:	418a      	sbcs	r2, r1
    98ca:	2100      	movs	r1, #0
    98cc:	e707      	b.n	96de <__aeabi_dadd+0xa2>
    98ce:	2b00      	cmp	r3, #0
    98d0:	d000      	beq.n	98d4 <__aeabi_dadd+0x298>
    98d2:	e0f3      	b.n	9abc <__aeabi_dadd+0x480>
    98d4:	1c70      	adds	r0, r6, #1
    98d6:	0543      	lsls	r3, r0, #21
    98d8:	0d5b      	lsrs	r3, r3, #21
    98da:	2b01      	cmp	r3, #1
    98dc:	dc00      	bgt.n	98e0 <__aeabi_dadd+0x2a4>
    98de:	e0ad      	b.n	9a3c <__aeabi_dadd+0x400>
    98e0:	4b36      	ldr	r3, [pc, #216]	; (99bc <__aeabi_dadd+0x380>)
    98e2:	4298      	cmp	r0, r3
    98e4:	d100      	bne.n	98e8 <__aeabi_dadd+0x2ac>
    98e6:	e0d1      	b.n	9a8c <__aeabi_dadd+0x450>
    98e8:	18ba      	adds	r2, r7, r2
    98ea:	42ba      	cmp	r2, r7
    98ec:	41bf      	sbcs	r7, r7
    98ee:	1864      	adds	r4, r4, r1
    98f0:	427f      	negs	r7, r7
    98f2:	19e4      	adds	r4, r4, r7
    98f4:	07e7      	lsls	r7, r4, #31
    98f6:	0852      	lsrs	r2, r2, #1
    98f8:	4317      	orrs	r7, r2
    98fa:	0864      	lsrs	r4, r4, #1
    98fc:	0006      	movs	r6, r0
    98fe:	e721      	b.n	9744 <__aeabi_dadd+0x108>
    9900:	482e      	ldr	r0, [pc, #184]	; (99bc <__aeabi_dadd+0x380>)
    9902:	4285      	cmp	r5, r0
    9904:	d100      	bne.n	9908 <__aeabi_dadd+0x2cc>
    9906:	e093      	b.n	9a30 <__aeabi_dadd+0x3f4>
    9908:	001d      	movs	r5, r3
    990a:	e6d0      	b.n	96ae <__aeabi_dadd+0x72>
    990c:	0029      	movs	r1, r5
    990e:	3e1f      	subs	r6, #31
    9910:	40f1      	lsrs	r1, r6
    9912:	2b20      	cmp	r3, #32
    9914:	d100      	bne.n	9918 <__aeabi_dadd+0x2dc>
    9916:	e08d      	b.n	9a34 <__aeabi_dadd+0x3f8>
    9918:	2240      	movs	r2, #64	; 0x40
    991a:	1ad3      	subs	r3, r2, r3
    991c:	409d      	lsls	r5, r3
    991e:	432f      	orrs	r7, r5
    9920:	1e7d      	subs	r5, r7, #1
    9922:	41af      	sbcs	r7, r5
    9924:	2400      	movs	r4, #0
    9926:	430f      	orrs	r7, r1
    9928:	2600      	movs	r6, #0
    992a:	e744      	b.n	97b6 <__aeabi_dadd+0x17a>
    992c:	002b      	movs	r3, r5
    992e:	0008      	movs	r0, r1
    9930:	3b20      	subs	r3, #32
    9932:	40d8      	lsrs	r0, r3
    9934:	0003      	movs	r3, r0
    9936:	2d20      	cmp	r5, #32
    9938:	d100      	bne.n	993c <__aeabi_dadd+0x300>
    993a:	e07d      	b.n	9a38 <__aeabi_dadd+0x3fc>
    993c:	2040      	movs	r0, #64	; 0x40
    993e:	1b45      	subs	r5, r0, r5
    9940:	40a9      	lsls	r1, r5
    9942:	430a      	orrs	r2, r1
    9944:	1e51      	subs	r1, r2, #1
    9946:	418a      	sbcs	r2, r1
    9948:	2100      	movs	r1, #0
    994a:	431a      	orrs	r2, r3
    994c:	e6c7      	b.n	96de <__aeabi_dadd+0xa2>
    994e:	2e00      	cmp	r6, #0
    9950:	d050      	beq.n	99f4 <__aeabi_dadd+0x3b8>
    9952:	4e1a      	ldr	r6, [pc, #104]	; (99bc <__aeabi_dadd+0x380>)
    9954:	42b0      	cmp	r0, r6
    9956:	d057      	beq.n	9a08 <__aeabi_dadd+0x3cc>
    9958:	2680      	movs	r6, #128	; 0x80
    995a:	426b      	negs	r3, r5
    995c:	4699      	mov	r9, r3
    995e:	0436      	lsls	r6, r6, #16
    9960:	4334      	orrs	r4, r6
    9962:	464b      	mov	r3, r9
    9964:	2b38      	cmp	r3, #56	; 0x38
    9966:	dd00      	ble.n	996a <__aeabi_dadd+0x32e>
    9968:	e0d6      	b.n	9b18 <__aeabi_dadd+0x4dc>
    996a:	2b1f      	cmp	r3, #31
    996c:	dd00      	ble.n	9970 <__aeabi_dadd+0x334>
    996e:	e135      	b.n	9bdc <__aeabi_dadd+0x5a0>
    9970:	2620      	movs	r6, #32
    9972:	1af5      	subs	r5, r6, r3
    9974:	0026      	movs	r6, r4
    9976:	40ae      	lsls	r6, r5
    9978:	46b2      	mov	sl, r6
    997a:	003e      	movs	r6, r7
    997c:	40de      	lsrs	r6, r3
    997e:	46ac      	mov	ip, r5
    9980:	0035      	movs	r5, r6
    9982:	4656      	mov	r6, sl
    9984:	432e      	orrs	r6, r5
    9986:	4665      	mov	r5, ip
    9988:	40af      	lsls	r7, r5
    998a:	1e7d      	subs	r5, r7, #1
    998c:	41af      	sbcs	r7, r5
    998e:	40dc      	lsrs	r4, r3
    9990:	4337      	orrs	r7, r6
    9992:	1bd7      	subs	r7, r2, r7
    9994:	42ba      	cmp	r2, r7
    9996:	4192      	sbcs	r2, r2
    9998:	1b0c      	subs	r4, r1, r4
    999a:	4252      	negs	r2, r2
    999c:	1aa4      	subs	r4, r4, r2
    999e:	0006      	movs	r6, r0
    99a0:	46d8      	mov	r8, fp
    99a2:	e6a3      	b.n	96ec <__aeabi_dadd+0xb0>
    99a4:	4664      	mov	r4, ip
    99a6:	4667      	mov	r7, ip
    99a8:	432c      	orrs	r4, r5
    99aa:	d000      	beq.n	99ae <__aeabi_dadd+0x372>
    99ac:	e6a2      	b.n	96f4 <__aeabi_dadd+0xb8>
    99ae:	2500      	movs	r5, #0
    99b0:	2600      	movs	r6, #0
    99b2:	2700      	movs	r7, #0
    99b4:	e706      	b.n	97c4 <__aeabi_dadd+0x188>
    99b6:	001e      	movs	r6, r3
    99b8:	e6c4      	b.n	9744 <__aeabi_dadd+0x108>
    99ba:	46c0      	nop			; (mov r8, r8)
    99bc:	000007ff 	.word	0x000007ff
    99c0:	ff7fffff 	.word	0xff7fffff
    99c4:	800fffff 	.word	0x800fffff
    99c8:	2b1f      	cmp	r3, #31
    99ca:	dc63      	bgt.n	9a94 <__aeabi_dadd+0x458>
    99cc:	2020      	movs	r0, #32
    99ce:	1ac3      	subs	r3, r0, r3
    99d0:	0008      	movs	r0, r1
    99d2:	4098      	lsls	r0, r3
    99d4:	469c      	mov	ip, r3
    99d6:	4683      	mov	fp, r0
    99d8:	4653      	mov	r3, sl
    99da:	0010      	movs	r0, r2
    99dc:	40d8      	lsrs	r0, r3
    99de:	0003      	movs	r3, r0
    99e0:	4658      	mov	r0, fp
    99e2:	4318      	orrs	r0, r3
    99e4:	4663      	mov	r3, ip
    99e6:	409a      	lsls	r2, r3
    99e8:	1e53      	subs	r3, r2, #1
    99ea:	419a      	sbcs	r2, r3
    99ec:	4653      	mov	r3, sl
    99ee:	4302      	orrs	r2, r0
    99f0:	40d9      	lsrs	r1, r3
    99f2:	e703      	b.n	97fc <__aeabi_dadd+0x1c0>
    99f4:	0026      	movs	r6, r4
    99f6:	433e      	orrs	r6, r7
    99f8:	d006      	beq.n	9a08 <__aeabi_dadd+0x3cc>
    99fa:	43eb      	mvns	r3, r5
    99fc:	4699      	mov	r9, r3
    99fe:	2b00      	cmp	r3, #0
    9a00:	d0c7      	beq.n	9992 <__aeabi_dadd+0x356>
    9a02:	4e94      	ldr	r6, [pc, #592]	; (9c54 <__aeabi_dadd+0x618>)
    9a04:	42b0      	cmp	r0, r6
    9a06:	d1ac      	bne.n	9962 <__aeabi_dadd+0x326>
    9a08:	000c      	movs	r4, r1
    9a0a:	0017      	movs	r7, r2
    9a0c:	0006      	movs	r6, r0
    9a0e:	46d8      	mov	r8, fp
    9a10:	e698      	b.n	9744 <__aeabi_dadd+0x108>
    9a12:	4b90      	ldr	r3, [pc, #576]	; (9c54 <__aeabi_dadd+0x618>)
    9a14:	459a      	cmp	sl, r3
    9a16:	d00b      	beq.n	9a30 <__aeabi_dadd+0x3f4>
    9a18:	4682      	mov	sl, r0
    9a1a:	e6e7      	b.n	97ec <__aeabi_dadd+0x1b0>
    9a1c:	2800      	cmp	r0, #0
    9a1e:	d000      	beq.n	9a22 <__aeabi_dadd+0x3e6>
    9a20:	e09e      	b.n	9b60 <__aeabi_dadd+0x524>
    9a22:	0018      	movs	r0, r3
    9a24:	4310      	orrs	r0, r2
    9a26:	d100      	bne.n	9a2a <__aeabi_dadd+0x3ee>
    9a28:	e0e9      	b.n	9bfe <__aeabi_dadd+0x5c2>
    9a2a:	001c      	movs	r4, r3
    9a2c:	0017      	movs	r7, r2
    9a2e:	46d8      	mov	r8, fp
    9a30:	4e88      	ldr	r6, [pc, #544]	; (9c54 <__aeabi_dadd+0x618>)
    9a32:	e687      	b.n	9744 <__aeabi_dadd+0x108>
    9a34:	2500      	movs	r5, #0
    9a36:	e772      	b.n	991e <__aeabi_dadd+0x2e2>
    9a38:	2100      	movs	r1, #0
    9a3a:	e782      	b.n	9942 <__aeabi_dadd+0x306>
    9a3c:	0023      	movs	r3, r4
    9a3e:	433b      	orrs	r3, r7
    9a40:	2e00      	cmp	r6, #0
    9a42:	d000      	beq.n	9a46 <__aeabi_dadd+0x40a>
    9a44:	e0ab      	b.n	9b9e <__aeabi_dadd+0x562>
    9a46:	2b00      	cmp	r3, #0
    9a48:	d100      	bne.n	9a4c <__aeabi_dadd+0x410>
    9a4a:	e0e7      	b.n	9c1c <__aeabi_dadd+0x5e0>
    9a4c:	000b      	movs	r3, r1
    9a4e:	4313      	orrs	r3, r2
    9a50:	d100      	bne.n	9a54 <__aeabi_dadd+0x418>
    9a52:	e677      	b.n	9744 <__aeabi_dadd+0x108>
    9a54:	18ba      	adds	r2, r7, r2
    9a56:	42ba      	cmp	r2, r7
    9a58:	41bf      	sbcs	r7, r7
    9a5a:	1864      	adds	r4, r4, r1
    9a5c:	427f      	negs	r7, r7
    9a5e:	19e4      	adds	r4, r4, r7
    9a60:	0223      	lsls	r3, r4, #8
    9a62:	d400      	bmi.n	9a66 <__aeabi_dadd+0x42a>
    9a64:	e0f2      	b.n	9c4c <__aeabi_dadd+0x610>
    9a66:	4b7c      	ldr	r3, [pc, #496]	; (9c58 <__aeabi_dadd+0x61c>)
    9a68:	0017      	movs	r7, r2
    9a6a:	401c      	ands	r4, r3
    9a6c:	0006      	movs	r6, r0
    9a6e:	e669      	b.n	9744 <__aeabi_dadd+0x108>
    9a70:	0020      	movs	r0, r4
    9a72:	4338      	orrs	r0, r7
    9a74:	2e00      	cmp	r6, #0
    9a76:	d1d1      	bne.n	9a1c <__aeabi_dadd+0x3e0>
    9a78:	2800      	cmp	r0, #0
    9a7a:	d15b      	bne.n	9b34 <__aeabi_dadd+0x4f8>
    9a7c:	001c      	movs	r4, r3
    9a7e:	4314      	orrs	r4, r2
    9a80:	d100      	bne.n	9a84 <__aeabi_dadd+0x448>
    9a82:	e0a8      	b.n	9bd6 <__aeabi_dadd+0x59a>
    9a84:	001c      	movs	r4, r3
    9a86:	0017      	movs	r7, r2
    9a88:	46d8      	mov	r8, fp
    9a8a:	e65b      	b.n	9744 <__aeabi_dadd+0x108>
    9a8c:	0006      	movs	r6, r0
    9a8e:	2400      	movs	r4, #0
    9a90:	2700      	movs	r7, #0
    9a92:	e697      	b.n	97c4 <__aeabi_dadd+0x188>
    9a94:	4650      	mov	r0, sl
    9a96:	000b      	movs	r3, r1
    9a98:	3820      	subs	r0, #32
    9a9a:	40c3      	lsrs	r3, r0
    9a9c:	4699      	mov	r9, r3
    9a9e:	4653      	mov	r3, sl
    9aa0:	2b20      	cmp	r3, #32
    9aa2:	d100      	bne.n	9aa6 <__aeabi_dadd+0x46a>
    9aa4:	e095      	b.n	9bd2 <__aeabi_dadd+0x596>
    9aa6:	2340      	movs	r3, #64	; 0x40
    9aa8:	4650      	mov	r0, sl
    9aaa:	1a1b      	subs	r3, r3, r0
    9aac:	4099      	lsls	r1, r3
    9aae:	430a      	orrs	r2, r1
    9ab0:	1e51      	subs	r1, r2, #1
    9ab2:	418a      	sbcs	r2, r1
    9ab4:	464b      	mov	r3, r9
    9ab6:	2100      	movs	r1, #0
    9ab8:	431a      	orrs	r2, r3
    9aba:	e69f      	b.n	97fc <__aeabi_dadd+0x1c0>
    9abc:	2e00      	cmp	r6, #0
    9abe:	d130      	bne.n	9b22 <__aeabi_dadd+0x4e6>
    9ac0:	0026      	movs	r6, r4
    9ac2:	433e      	orrs	r6, r7
    9ac4:	d067      	beq.n	9b96 <__aeabi_dadd+0x55a>
    9ac6:	43db      	mvns	r3, r3
    9ac8:	469a      	mov	sl, r3
    9aca:	2b00      	cmp	r3, #0
    9acc:	d01c      	beq.n	9b08 <__aeabi_dadd+0x4cc>
    9ace:	4e61      	ldr	r6, [pc, #388]	; (9c54 <__aeabi_dadd+0x618>)
    9ad0:	42b0      	cmp	r0, r6
    9ad2:	d060      	beq.n	9b96 <__aeabi_dadd+0x55a>
    9ad4:	4653      	mov	r3, sl
    9ad6:	2b38      	cmp	r3, #56	; 0x38
    9ad8:	dd00      	ble.n	9adc <__aeabi_dadd+0x4a0>
    9ada:	e096      	b.n	9c0a <__aeabi_dadd+0x5ce>
    9adc:	2b1f      	cmp	r3, #31
    9ade:	dd00      	ble.n	9ae2 <__aeabi_dadd+0x4a6>
    9ae0:	e09f      	b.n	9c22 <__aeabi_dadd+0x5e6>
    9ae2:	2620      	movs	r6, #32
    9ae4:	1af3      	subs	r3, r6, r3
    9ae6:	0026      	movs	r6, r4
    9ae8:	409e      	lsls	r6, r3
    9aea:	469c      	mov	ip, r3
    9aec:	46b3      	mov	fp, r6
    9aee:	4653      	mov	r3, sl
    9af0:	003e      	movs	r6, r7
    9af2:	40de      	lsrs	r6, r3
    9af4:	0033      	movs	r3, r6
    9af6:	465e      	mov	r6, fp
    9af8:	431e      	orrs	r6, r3
    9afa:	4663      	mov	r3, ip
    9afc:	409f      	lsls	r7, r3
    9afe:	1e7b      	subs	r3, r7, #1
    9b00:	419f      	sbcs	r7, r3
    9b02:	4653      	mov	r3, sl
    9b04:	40dc      	lsrs	r4, r3
    9b06:	4337      	orrs	r7, r6
    9b08:	18bf      	adds	r7, r7, r2
    9b0a:	4297      	cmp	r7, r2
    9b0c:	4192      	sbcs	r2, r2
    9b0e:	1864      	adds	r4, r4, r1
    9b10:	4252      	negs	r2, r2
    9b12:	18a4      	adds	r4, r4, r2
    9b14:	0006      	movs	r6, r0
    9b16:	e678      	b.n	980a <__aeabi_dadd+0x1ce>
    9b18:	4327      	orrs	r7, r4
    9b1a:	1e7c      	subs	r4, r7, #1
    9b1c:	41a7      	sbcs	r7, r4
    9b1e:	2400      	movs	r4, #0
    9b20:	e737      	b.n	9992 <__aeabi_dadd+0x356>
    9b22:	4e4c      	ldr	r6, [pc, #304]	; (9c54 <__aeabi_dadd+0x618>)
    9b24:	42b0      	cmp	r0, r6
    9b26:	d036      	beq.n	9b96 <__aeabi_dadd+0x55a>
    9b28:	2680      	movs	r6, #128	; 0x80
    9b2a:	425b      	negs	r3, r3
    9b2c:	0436      	lsls	r6, r6, #16
    9b2e:	469a      	mov	sl, r3
    9b30:	4334      	orrs	r4, r6
    9b32:	e7cf      	b.n	9ad4 <__aeabi_dadd+0x498>
    9b34:	0018      	movs	r0, r3
    9b36:	4310      	orrs	r0, r2
    9b38:	d100      	bne.n	9b3c <__aeabi_dadd+0x500>
    9b3a:	e603      	b.n	9744 <__aeabi_dadd+0x108>
    9b3c:	1ab8      	subs	r0, r7, r2
    9b3e:	4684      	mov	ip, r0
    9b40:	4567      	cmp	r7, ip
    9b42:	41ad      	sbcs	r5, r5
    9b44:	1ae0      	subs	r0, r4, r3
    9b46:	426d      	negs	r5, r5
    9b48:	1b40      	subs	r0, r0, r5
    9b4a:	0205      	lsls	r5, r0, #8
    9b4c:	d400      	bmi.n	9b50 <__aeabi_dadd+0x514>
    9b4e:	e62c      	b.n	97aa <__aeabi_dadd+0x16e>
    9b50:	1bd7      	subs	r7, r2, r7
    9b52:	42ba      	cmp	r2, r7
    9b54:	4192      	sbcs	r2, r2
    9b56:	1b1c      	subs	r4, r3, r4
    9b58:	4252      	negs	r2, r2
    9b5a:	1aa4      	subs	r4, r4, r2
    9b5c:	46d8      	mov	r8, fp
    9b5e:	e5f1      	b.n	9744 <__aeabi_dadd+0x108>
    9b60:	0018      	movs	r0, r3
    9b62:	4310      	orrs	r0, r2
    9b64:	d100      	bne.n	9b68 <__aeabi_dadd+0x52c>
    9b66:	e763      	b.n	9a30 <__aeabi_dadd+0x3f4>
    9b68:	08f8      	lsrs	r0, r7, #3
    9b6a:	0767      	lsls	r7, r4, #29
    9b6c:	4307      	orrs	r7, r0
    9b6e:	2080      	movs	r0, #128	; 0x80
    9b70:	08e4      	lsrs	r4, r4, #3
    9b72:	0300      	lsls	r0, r0, #12
    9b74:	4204      	tst	r4, r0
    9b76:	d008      	beq.n	9b8a <__aeabi_dadd+0x54e>
    9b78:	08dd      	lsrs	r5, r3, #3
    9b7a:	4205      	tst	r5, r0
    9b7c:	d105      	bne.n	9b8a <__aeabi_dadd+0x54e>
    9b7e:	08d2      	lsrs	r2, r2, #3
    9b80:	0759      	lsls	r1, r3, #29
    9b82:	4311      	orrs	r1, r2
    9b84:	000f      	movs	r7, r1
    9b86:	002c      	movs	r4, r5
    9b88:	46d8      	mov	r8, fp
    9b8a:	0f7b      	lsrs	r3, r7, #29
    9b8c:	00e4      	lsls	r4, r4, #3
    9b8e:	431c      	orrs	r4, r3
    9b90:	00ff      	lsls	r7, r7, #3
    9b92:	4e30      	ldr	r6, [pc, #192]	; (9c54 <__aeabi_dadd+0x618>)
    9b94:	e5d6      	b.n	9744 <__aeabi_dadd+0x108>
    9b96:	000c      	movs	r4, r1
    9b98:	0017      	movs	r7, r2
    9b9a:	0006      	movs	r6, r0
    9b9c:	e5d2      	b.n	9744 <__aeabi_dadd+0x108>
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	d038      	beq.n	9c14 <__aeabi_dadd+0x5d8>
    9ba2:	000b      	movs	r3, r1
    9ba4:	4313      	orrs	r3, r2
    9ba6:	d100      	bne.n	9baa <__aeabi_dadd+0x56e>
    9ba8:	e742      	b.n	9a30 <__aeabi_dadd+0x3f4>
    9baa:	08f8      	lsrs	r0, r7, #3
    9bac:	0767      	lsls	r7, r4, #29
    9bae:	4307      	orrs	r7, r0
    9bb0:	2080      	movs	r0, #128	; 0x80
    9bb2:	08e4      	lsrs	r4, r4, #3
    9bb4:	0300      	lsls	r0, r0, #12
    9bb6:	4204      	tst	r4, r0
    9bb8:	d0e7      	beq.n	9b8a <__aeabi_dadd+0x54e>
    9bba:	08cb      	lsrs	r3, r1, #3
    9bbc:	4203      	tst	r3, r0
    9bbe:	d1e4      	bne.n	9b8a <__aeabi_dadd+0x54e>
    9bc0:	08d2      	lsrs	r2, r2, #3
    9bc2:	0749      	lsls	r1, r1, #29
    9bc4:	4311      	orrs	r1, r2
    9bc6:	000f      	movs	r7, r1
    9bc8:	001c      	movs	r4, r3
    9bca:	e7de      	b.n	9b8a <__aeabi_dadd+0x54e>
    9bcc:	2700      	movs	r7, #0
    9bce:	2400      	movs	r4, #0
    9bd0:	e5d5      	b.n	977e <__aeabi_dadd+0x142>
    9bd2:	2100      	movs	r1, #0
    9bd4:	e76b      	b.n	9aae <__aeabi_dadd+0x472>
    9bd6:	2500      	movs	r5, #0
    9bd8:	2700      	movs	r7, #0
    9bda:	e5f3      	b.n	97c4 <__aeabi_dadd+0x188>
    9bdc:	464e      	mov	r6, r9
    9bde:	0025      	movs	r5, r4
    9be0:	3e20      	subs	r6, #32
    9be2:	40f5      	lsrs	r5, r6
    9be4:	464b      	mov	r3, r9
    9be6:	002e      	movs	r6, r5
    9be8:	2b20      	cmp	r3, #32
    9bea:	d02d      	beq.n	9c48 <__aeabi_dadd+0x60c>
    9bec:	2540      	movs	r5, #64	; 0x40
    9bee:	1aed      	subs	r5, r5, r3
    9bf0:	40ac      	lsls	r4, r5
    9bf2:	4327      	orrs	r7, r4
    9bf4:	1e7c      	subs	r4, r7, #1
    9bf6:	41a7      	sbcs	r7, r4
    9bf8:	2400      	movs	r4, #0
    9bfa:	4337      	orrs	r7, r6
    9bfc:	e6c9      	b.n	9992 <__aeabi_dadd+0x356>
    9bfe:	2480      	movs	r4, #128	; 0x80
    9c00:	2500      	movs	r5, #0
    9c02:	0324      	lsls	r4, r4, #12
    9c04:	4e13      	ldr	r6, [pc, #76]	; (9c54 <__aeabi_dadd+0x618>)
    9c06:	2700      	movs	r7, #0
    9c08:	e5dc      	b.n	97c4 <__aeabi_dadd+0x188>
    9c0a:	4327      	orrs	r7, r4
    9c0c:	1e7c      	subs	r4, r7, #1
    9c0e:	41a7      	sbcs	r7, r4
    9c10:	2400      	movs	r4, #0
    9c12:	e779      	b.n	9b08 <__aeabi_dadd+0x4cc>
    9c14:	000c      	movs	r4, r1
    9c16:	0017      	movs	r7, r2
    9c18:	4e0e      	ldr	r6, [pc, #56]	; (9c54 <__aeabi_dadd+0x618>)
    9c1a:	e593      	b.n	9744 <__aeabi_dadd+0x108>
    9c1c:	000c      	movs	r4, r1
    9c1e:	0017      	movs	r7, r2
    9c20:	e590      	b.n	9744 <__aeabi_dadd+0x108>
    9c22:	4656      	mov	r6, sl
    9c24:	0023      	movs	r3, r4
    9c26:	3e20      	subs	r6, #32
    9c28:	40f3      	lsrs	r3, r6
    9c2a:	4699      	mov	r9, r3
    9c2c:	4653      	mov	r3, sl
    9c2e:	2b20      	cmp	r3, #32
    9c30:	d00e      	beq.n	9c50 <__aeabi_dadd+0x614>
    9c32:	2340      	movs	r3, #64	; 0x40
    9c34:	4656      	mov	r6, sl
    9c36:	1b9b      	subs	r3, r3, r6
    9c38:	409c      	lsls	r4, r3
    9c3a:	4327      	orrs	r7, r4
    9c3c:	1e7c      	subs	r4, r7, #1
    9c3e:	41a7      	sbcs	r7, r4
    9c40:	464b      	mov	r3, r9
    9c42:	2400      	movs	r4, #0
    9c44:	431f      	orrs	r7, r3
    9c46:	e75f      	b.n	9b08 <__aeabi_dadd+0x4cc>
    9c48:	2400      	movs	r4, #0
    9c4a:	e7d2      	b.n	9bf2 <__aeabi_dadd+0x5b6>
    9c4c:	0017      	movs	r7, r2
    9c4e:	e5b2      	b.n	97b6 <__aeabi_dadd+0x17a>
    9c50:	2400      	movs	r4, #0
    9c52:	e7f2      	b.n	9c3a <__aeabi_dadd+0x5fe>
    9c54:	000007ff 	.word	0x000007ff
    9c58:	ff7fffff 	.word	0xff7fffff

00009c5c <__aeabi_ddiv>:
    9c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c5e:	4657      	mov	r7, sl
    9c60:	4645      	mov	r5, r8
    9c62:	46de      	mov	lr, fp
    9c64:	464e      	mov	r6, r9
    9c66:	b5e0      	push	{r5, r6, r7, lr}
    9c68:	004c      	lsls	r4, r1, #1
    9c6a:	030e      	lsls	r6, r1, #12
    9c6c:	b087      	sub	sp, #28
    9c6e:	4683      	mov	fp, r0
    9c70:	4692      	mov	sl, r2
    9c72:	001d      	movs	r5, r3
    9c74:	4680      	mov	r8, r0
    9c76:	0b36      	lsrs	r6, r6, #12
    9c78:	0d64      	lsrs	r4, r4, #21
    9c7a:	0fcf      	lsrs	r7, r1, #31
    9c7c:	2c00      	cmp	r4, #0
    9c7e:	d04f      	beq.n	9d20 <__aeabi_ddiv+0xc4>
    9c80:	4b6f      	ldr	r3, [pc, #444]	; (9e40 <__aeabi_ddiv+0x1e4>)
    9c82:	429c      	cmp	r4, r3
    9c84:	d035      	beq.n	9cf2 <__aeabi_ddiv+0x96>
    9c86:	2380      	movs	r3, #128	; 0x80
    9c88:	0f42      	lsrs	r2, r0, #29
    9c8a:	041b      	lsls	r3, r3, #16
    9c8c:	00f6      	lsls	r6, r6, #3
    9c8e:	4313      	orrs	r3, r2
    9c90:	4333      	orrs	r3, r6
    9c92:	4699      	mov	r9, r3
    9c94:	00c3      	lsls	r3, r0, #3
    9c96:	4698      	mov	r8, r3
    9c98:	4b6a      	ldr	r3, [pc, #424]	; (9e44 <__aeabi_ddiv+0x1e8>)
    9c9a:	2600      	movs	r6, #0
    9c9c:	469c      	mov	ip, r3
    9c9e:	2300      	movs	r3, #0
    9ca0:	4464      	add	r4, ip
    9ca2:	9303      	str	r3, [sp, #12]
    9ca4:	032b      	lsls	r3, r5, #12
    9ca6:	0b1b      	lsrs	r3, r3, #12
    9ca8:	469b      	mov	fp, r3
    9caa:	006b      	lsls	r3, r5, #1
    9cac:	0fed      	lsrs	r5, r5, #31
    9cae:	4650      	mov	r0, sl
    9cb0:	0d5b      	lsrs	r3, r3, #21
    9cb2:	9501      	str	r5, [sp, #4]
    9cb4:	d05e      	beq.n	9d74 <__aeabi_ddiv+0x118>
    9cb6:	4a62      	ldr	r2, [pc, #392]	; (9e40 <__aeabi_ddiv+0x1e4>)
    9cb8:	4293      	cmp	r3, r2
    9cba:	d053      	beq.n	9d64 <__aeabi_ddiv+0x108>
    9cbc:	465a      	mov	r2, fp
    9cbe:	00d1      	lsls	r1, r2, #3
    9cc0:	2280      	movs	r2, #128	; 0x80
    9cc2:	0f40      	lsrs	r0, r0, #29
    9cc4:	0412      	lsls	r2, r2, #16
    9cc6:	4302      	orrs	r2, r0
    9cc8:	430a      	orrs	r2, r1
    9cca:	4693      	mov	fp, r2
    9ccc:	4652      	mov	r2, sl
    9cce:	00d1      	lsls	r1, r2, #3
    9cd0:	4a5c      	ldr	r2, [pc, #368]	; (9e44 <__aeabi_ddiv+0x1e8>)
    9cd2:	4694      	mov	ip, r2
    9cd4:	2200      	movs	r2, #0
    9cd6:	4463      	add	r3, ip
    9cd8:	0038      	movs	r0, r7
    9cda:	4068      	eors	r0, r5
    9cdc:	4684      	mov	ip, r0
    9cde:	9002      	str	r0, [sp, #8]
    9ce0:	1ae4      	subs	r4, r4, r3
    9ce2:	4316      	orrs	r6, r2
    9ce4:	2e0f      	cmp	r6, #15
    9ce6:	d900      	bls.n	9cea <__aeabi_ddiv+0x8e>
    9ce8:	e0b4      	b.n	9e54 <__aeabi_ddiv+0x1f8>
    9cea:	4b57      	ldr	r3, [pc, #348]	; (9e48 <__aeabi_ddiv+0x1ec>)
    9cec:	00b6      	lsls	r6, r6, #2
    9cee:	599b      	ldr	r3, [r3, r6]
    9cf0:	469f      	mov	pc, r3
    9cf2:	0003      	movs	r3, r0
    9cf4:	4333      	orrs	r3, r6
    9cf6:	4699      	mov	r9, r3
    9cf8:	d16c      	bne.n	9dd4 <__aeabi_ddiv+0x178>
    9cfa:	2300      	movs	r3, #0
    9cfc:	4698      	mov	r8, r3
    9cfe:	3302      	adds	r3, #2
    9d00:	2608      	movs	r6, #8
    9d02:	9303      	str	r3, [sp, #12]
    9d04:	e7ce      	b.n	9ca4 <__aeabi_ddiv+0x48>
    9d06:	46cb      	mov	fp, r9
    9d08:	4641      	mov	r1, r8
    9d0a:	9a03      	ldr	r2, [sp, #12]
    9d0c:	9701      	str	r7, [sp, #4]
    9d0e:	2a02      	cmp	r2, #2
    9d10:	d165      	bne.n	9dde <__aeabi_ddiv+0x182>
    9d12:	9b01      	ldr	r3, [sp, #4]
    9d14:	4c4a      	ldr	r4, [pc, #296]	; (9e40 <__aeabi_ddiv+0x1e4>)
    9d16:	469c      	mov	ip, r3
    9d18:	2300      	movs	r3, #0
    9d1a:	2200      	movs	r2, #0
    9d1c:	4698      	mov	r8, r3
    9d1e:	e06b      	b.n	9df8 <__aeabi_ddiv+0x19c>
    9d20:	0003      	movs	r3, r0
    9d22:	4333      	orrs	r3, r6
    9d24:	4699      	mov	r9, r3
    9d26:	d04e      	beq.n	9dc6 <__aeabi_ddiv+0x16a>
    9d28:	2e00      	cmp	r6, #0
    9d2a:	d100      	bne.n	9d2e <__aeabi_ddiv+0xd2>
    9d2c:	e1bc      	b.n	a0a8 <__aeabi_ddiv+0x44c>
    9d2e:	0030      	movs	r0, r6
    9d30:	f001 fae8 	bl	b304 <__clzsi2>
    9d34:	0003      	movs	r3, r0
    9d36:	3b0b      	subs	r3, #11
    9d38:	2b1c      	cmp	r3, #28
    9d3a:	dd00      	ble.n	9d3e <__aeabi_ddiv+0xe2>
    9d3c:	e1ac      	b.n	a098 <__aeabi_ddiv+0x43c>
    9d3e:	221d      	movs	r2, #29
    9d40:	1ad3      	subs	r3, r2, r3
    9d42:	465a      	mov	r2, fp
    9d44:	0001      	movs	r1, r0
    9d46:	40da      	lsrs	r2, r3
    9d48:	3908      	subs	r1, #8
    9d4a:	408e      	lsls	r6, r1
    9d4c:	0013      	movs	r3, r2
    9d4e:	4333      	orrs	r3, r6
    9d50:	4699      	mov	r9, r3
    9d52:	465b      	mov	r3, fp
    9d54:	408b      	lsls	r3, r1
    9d56:	4698      	mov	r8, r3
    9d58:	2300      	movs	r3, #0
    9d5a:	4c3c      	ldr	r4, [pc, #240]	; (9e4c <__aeabi_ddiv+0x1f0>)
    9d5c:	2600      	movs	r6, #0
    9d5e:	1a24      	subs	r4, r4, r0
    9d60:	9303      	str	r3, [sp, #12]
    9d62:	e79f      	b.n	9ca4 <__aeabi_ddiv+0x48>
    9d64:	4651      	mov	r1, sl
    9d66:	465a      	mov	r2, fp
    9d68:	4311      	orrs	r1, r2
    9d6a:	d129      	bne.n	9dc0 <__aeabi_ddiv+0x164>
    9d6c:	2200      	movs	r2, #0
    9d6e:	4693      	mov	fp, r2
    9d70:	3202      	adds	r2, #2
    9d72:	e7b1      	b.n	9cd8 <__aeabi_ddiv+0x7c>
    9d74:	4659      	mov	r1, fp
    9d76:	4301      	orrs	r1, r0
    9d78:	d01e      	beq.n	9db8 <__aeabi_ddiv+0x15c>
    9d7a:	465b      	mov	r3, fp
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d100      	bne.n	9d82 <__aeabi_ddiv+0x126>
    9d80:	e19e      	b.n	a0c0 <__aeabi_ddiv+0x464>
    9d82:	4658      	mov	r0, fp
    9d84:	f001 fabe 	bl	b304 <__clzsi2>
    9d88:	0003      	movs	r3, r0
    9d8a:	3b0b      	subs	r3, #11
    9d8c:	2b1c      	cmp	r3, #28
    9d8e:	dd00      	ble.n	9d92 <__aeabi_ddiv+0x136>
    9d90:	e18f      	b.n	a0b2 <__aeabi_ddiv+0x456>
    9d92:	0002      	movs	r2, r0
    9d94:	4659      	mov	r1, fp
    9d96:	3a08      	subs	r2, #8
    9d98:	4091      	lsls	r1, r2
    9d9a:	468b      	mov	fp, r1
    9d9c:	211d      	movs	r1, #29
    9d9e:	1acb      	subs	r3, r1, r3
    9da0:	4651      	mov	r1, sl
    9da2:	40d9      	lsrs	r1, r3
    9da4:	000b      	movs	r3, r1
    9da6:	4659      	mov	r1, fp
    9da8:	430b      	orrs	r3, r1
    9daa:	4651      	mov	r1, sl
    9dac:	469b      	mov	fp, r3
    9dae:	4091      	lsls	r1, r2
    9db0:	4b26      	ldr	r3, [pc, #152]	; (9e4c <__aeabi_ddiv+0x1f0>)
    9db2:	2200      	movs	r2, #0
    9db4:	1a1b      	subs	r3, r3, r0
    9db6:	e78f      	b.n	9cd8 <__aeabi_ddiv+0x7c>
    9db8:	2300      	movs	r3, #0
    9dba:	2201      	movs	r2, #1
    9dbc:	469b      	mov	fp, r3
    9dbe:	e78b      	b.n	9cd8 <__aeabi_ddiv+0x7c>
    9dc0:	4651      	mov	r1, sl
    9dc2:	2203      	movs	r2, #3
    9dc4:	e788      	b.n	9cd8 <__aeabi_ddiv+0x7c>
    9dc6:	2300      	movs	r3, #0
    9dc8:	4698      	mov	r8, r3
    9dca:	3301      	adds	r3, #1
    9dcc:	2604      	movs	r6, #4
    9dce:	2400      	movs	r4, #0
    9dd0:	9303      	str	r3, [sp, #12]
    9dd2:	e767      	b.n	9ca4 <__aeabi_ddiv+0x48>
    9dd4:	2303      	movs	r3, #3
    9dd6:	46b1      	mov	r9, r6
    9dd8:	9303      	str	r3, [sp, #12]
    9dda:	260c      	movs	r6, #12
    9ddc:	e762      	b.n	9ca4 <__aeabi_ddiv+0x48>
    9dde:	2a03      	cmp	r2, #3
    9de0:	d100      	bne.n	9de4 <__aeabi_ddiv+0x188>
    9de2:	e25c      	b.n	a29e <__aeabi_ddiv+0x642>
    9de4:	9b01      	ldr	r3, [sp, #4]
    9de6:	2a01      	cmp	r2, #1
    9de8:	d000      	beq.n	9dec <__aeabi_ddiv+0x190>
    9dea:	e1e4      	b.n	a1b6 <__aeabi_ddiv+0x55a>
    9dec:	4013      	ands	r3, r2
    9dee:	469c      	mov	ip, r3
    9df0:	2300      	movs	r3, #0
    9df2:	2400      	movs	r4, #0
    9df4:	2200      	movs	r2, #0
    9df6:	4698      	mov	r8, r3
    9df8:	2100      	movs	r1, #0
    9dfa:	0312      	lsls	r2, r2, #12
    9dfc:	0b13      	lsrs	r3, r2, #12
    9dfe:	0d0a      	lsrs	r2, r1, #20
    9e00:	0512      	lsls	r2, r2, #20
    9e02:	431a      	orrs	r2, r3
    9e04:	0523      	lsls	r3, r4, #20
    9e06:	4c12      	ldr	r4, [pc, #72]	; (9e50 <__aeabi_ddiv+0x1f4>)
    9e08:	4640      	mov	r0, r8
    9e0a:	4022      	ands	r2, r4
    9e0c:	4313      	orrs	r3, r2
    9e0e:	4662      	mov	r2, ip
    9e10:	005b      	lsls	r3, r3, #1
    9e12:	07d2      	lsls	r2, r2, #31
    9e14:	085b      	lsrs	r3, r3, #1
    9e16:	4313      	orrs	r3, r2
    9e18:	0019      	movs	r1, r3
    9e1a:	b007      	add	sp, #28
    9e1c:	bc3c      	pop	{r2, r3, r4, r5}
    9e1e:	4690      	mov	r8, r2
    9e20:	4699      	mov	r9, r3
    9e22:	46a2      	mov	sl, r4
    9e24:	46ab      	mov	fp, r5
    9e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e28:	2300      	movs	r3, #0
    9e2a:	2280      	movs	r2, #128	; 0x80
    9e2c:	469c      	mov	ip, r3
    9e2e:	0312      	lsls	r2, r2, #12
    9e30:	4698      	mov	r8, r3
    9e32:	4c03      	ldr	r4, [pc, #12]	; (9e40 <__aeabi_ddiv+0x1e4>)
    9e34:	e7e0      	b.n	9df8 <__aeabi_ddiv+0x19c>
    9e36:	2300      	movs	r3, #0
    9e38:	4c01      	ldr	r4, [pc, #4]	; (9e40 <__aeabi_ddiv+0x1e4>)
    9e3a:	2200      	movs	r2, #0
    9e3c:	4698      	mov	r8, r3
    9e3e:	e7db      	b.n	9df8 <__aeabi_ddiv+0x19c>
    9e40:	000007ff 	.word	0x000007ff
    9e44:	fffffc01 	.word	0xfffffc01
    9e48:	0000c070 	.word	0x0000c070
    9e4c:	fffffc0d 	.word	0xfffffc0d
    9e50:	800fffff 	.word	0x800fffff
    9e54:	45d9      	cmp	r9, fp
    9e56:	d900      	bls.n	9e5a <__aeabi_ddiv+0x1fe>
    9e58:	e139      	b.n	a0ce <__aeabi_ddiv+0x472>
    9e5a:	d100      	bne.n	9e5e <__aeabi_ddiv+0x202>
    9e5c:	e134      	b.n	a0c8 <__aeabi_ddiv+0x46c>
    9e5e:	2300      	movs	r3, #0
    9e60:	4646      	mov	r6, r8
    9e62:	464d      	mov	r5, r9
    9e64:	469a      	mov	sl, r3
    9e66:	3c01      	subs	r4, #1
    9e68:	465b      	mov	r3, fp
    9e6a:	0e0a      	lsrs	r2, r1, #24
    9e6c:	021b      	lsls	r3, r3, #8
    9e6e:	431a      	orrs	r2, r3
    9e70:	020b      	lsls	r3, r1, #8
    9e72:	0c17      	lsrs	r7, r2, #16
    9e74:	9303      	str	r3, [sp, #12]
    9e76:	0413      	lsls	r3, r2, #16
    9e78:	0c1b      	lsrs	r3, r3, #16
    9e7a:	0039      	movs	r1, r7
    9e7c:	0028      	movs	r0, r5
    9e7e:	4690      	mov	r8, r2
    9e80:	9301      	str	r3, [sp, #4]
    9e82:	f7fe fc11 	bl	86a8 <__udivsi3>
    9e86:	0002      	movs	r2, r0
    9e88:	9b01      	ldr	r3, [sp, #4]
    9e8a:	4683      	mov	fp, r0
    9e8c:	435a      	muls	r2, r3
    9e8e:	0028      	movs	r0, r5
    9e90:	0039      	movs	r1, r7
    9e92:	4691      	mov	r9, r2
    9e94:	f7fe fc8e 	bl	87b4 <__aeabi_uidivmod>
    9e98:	0c35      	lsrs	r5, r6, #16
    9e9a:	0409      	lsls	r1, r1, #16
    9e9c:	430d      	orrs	r5, r1
    9e9e:	45a9      	cmp	r9, r5
    9ea0:	d90d      	bls.n	9ebe <__aeabi_ddiv+0x262>
    9ea2:	465b      	mov	r3, fp
    9ea4:	4445      	add	r5, r8
    9ea6:	3b01      	subs	r3, #1
    9ea8:	45a8      	cmp	r8, r5
    9eaa:	d900      	bls.n	9eae <__aeabi_ddiv+0x252>
    9eac:	e13a      	b.n	a124 <__aeabi_ddiv+0x4c8>
    9eae:	45a9      	cmp	r9, r5
    9eb0:	d800      	bhi.n	9eb4 <__aeabi_ddiv+0x258>
    9eb2:	e137      	b.n	a124 <__aeabi_ddiv+0x4c8>
    9eb4:	2302      	movs	r3, #2
    9eb6:	425b      	negs	r3, r3
    9eb8:	469c      	mov	ip, r3
    9eba:	4445      	add	r5, r8
    9ebc:	44e3      	add	fp, ip
    9ebe:	464b      	mov	r3, r9
    9ec0:	1aeb      	subs	r3, r5, r3
    9ec2:	0039      	movs	r1, r7
    9ec4:	0018      	movs	r0, r3
    9ec6:	9304      	str	r3, [sp, #16]
    9ec8:	f7fe fbee 	bl	86a8 <__udivsi3>
    9ecc:	9b01      	ldr	r3, [sp, #4]
    9ece:	0005      	movs	r5, r0
    9ed0:	4343      	muls	r3, r0
    9ed2:	0039      	movs	r1, r7
    9ed4:	9804      	ldr	r0, [sp, #16]
    9ed6:	4699      	mov	r9, r3
    9ed8:	f7fe fc6c 	bl	87b4 <__aeabi_uidivmod>
    9edc:	0433      	lsls	r3, r6, #16
    9ede:	0409      	lsls	r1, r1, #16
    9ee0:	0c1b      	lsrs	r3, r3, #16
    9ee2:	430b      	orrs	r3, r1
    9ee4:	4599      	cmp	r9, r3
    9ee6:	d909      	bls.n	9efc <__aeabi_ddiv+0x2a0>
    9ee8:	4443      	add	r3, r8
    9eea:	1e6a      	subs	r2, r5, #1
    9eec:	4598      	cmp	r8, r3
    9eee:	d900      	bls.n	9ef2 <__aeabi_ddiv+0x296>
    9ef0:	e11a      	b.n	a128 <__aeabi_ddiv+0x4cc>
    9ef2:	4599      	cmp	r9, r3
    9ef4:	d800      	bhi.n	9ef8 <__aeabi_ddiv+0x29c>
    9ef6:	e117      	b.n	a128 <__aeabi_ddiv+0x4cc>
    9ef8:	3d02      	subs	r5, #2
    9efa:	4443      	add	r3, r8
    9efc:	464a      	mov	r2, r9
    9efe:	1a9b      	subs	r3, r3, r2
    9f00:	465a      	mov	r2, fp
    9f02:	0412      	lsls	r2, r2, #16
    9f04:	432a      	orrs	r2, r5
    9f06:	9903      	ldr	r1, [sp, #12]
    9f08:	4693      	mov	fp, r2
    9f0a:	0c10      	lsrs	r0, r2, #16
    9f0c:	0c0a      	lsrs	r2, r1, #16
    9f0e:	4691      	mov	r9, r2
    9f10:	0409      	lsls	r1, r1, #16
    9f12:	465a      	mov	r2, fp
    9f14:	0c09      	lsrs	r1, r1, #16
    9f16:	464e      	mov	r6, r9
    9f18:	000d      	movs	r5, r1
    9f1a:	0412      	lsls	r2, r2, #16
    9f1c:	0c12      	lsrs	r2, r2, #16
    9f1e:	4345      	muls	r5, r0
    9f20:	9105      	str	r1, [sp, #20]
    9f22:	4351      	muls	r1, r2
    9f24:	4372      	muls	r2, r6
    9f26:	4370      	muls	r0, r6
    9f28:	1952      	adds	r2, r2, r5
    9f2a:	0c0e      	lsrs	r6, r1, #16
    9f2c:	18b2      	adds	r2, r6, r2
    9f2e:	4295      	cmp	r5, r2
    9f30:	d903      	bls.n	9f3a <__aeabi_ddiv+0x2de>
    9f32:	2580      	movs	r5, #128	; 0x80
    9f34:	026d      	lsls	r5, r5, #9
    9f36:	46ac      	mov	ip, r5
    9f38:	4460      	add	r0, ip
    9f3a:	0c15      	lsrs	r5, r2, #16
    9f3c:	0409      	lsls	r1, r1, #16
    9f3e:	0412      	lsls	r2, r2, #16
    9f40:	0c09      	lsrs	r1, r1, #16
    9f42:	1828      	adds	r0, r5, r0
    9f44:	1852      	adds	r2, r2, r1
    9f46:	4283      	cmp	r3, r0
    9f48:	d200      	bcs.n	9f4c <__aeabi_ddiv+0x2f0>
    9f4a:	e0ce      	b.n	a0ea <__aeabi_ddiv+0x48e>
    9f4c:	d100      	bne.n	9f50 <__aeabi_ddiv+0x2f4>
    9f4e:	e0c8      	b.n	a0e2 <__aeabi_ddiv+0x486>
    9f50:	1a1d      	subs	r5, r3, r0
    9f52:	4653      	mov	r3, sl
    9f54:	1a9e      	subs	r6, r3, r2
    9f56:	45b2      	cmp	sl, r6
    9f58:	4192      	sbcs	r2, r2
    9f5a:	4252      	negs	r2, r2
    9f5c:	1aab      	subs	r3, r5, r2
    9f5e:	469a      	mov	sl, r3
    9f60:	4598      	cmp	r8, r3
    9f62:	d100      	bne.n	9f66 <__aeabi_ddiv+0x30a>
    9f64:	e117      	b.n	a196 <__aeabi_ddiv+0x53a>
    9f66:	0039      	movs	r1, r7
    9f68:	0018      	movs	r0, r3
    9f6a:	f7fe fb9d 	bl	86a8 <__udivsi3>
    9f6e:	9b01      	ldr	r3, [sp, #4]
    9f70:	0005      	movs	r5, r0
    9f72:	4343      	muls	r3, r0
    9f74:	0039      	movs	r1, r7
    9f76:	4650      	mov	r0, sl
    9f78:	9304      	str	r3, [sp, #16]
    9f7a:	f7fe fc1b 	bl	87b4 <__aeabi_uidivmod>
    9f7e:	9804      	ldr	r0, [sp, #16]
    9f80:	040b      	lsls	r3, r1, #16
    9f82:	0c31      	lsrs	r1, r6, #16
    9f84:	4319      	orrs	r1, r3
    9f86:	4288      	cmp	r0, r1
    9f88:	d909      	bls.n	9f9e <__aeabi_ddiv+0x342>
    9f8a:	4441      	add	r1, r8
    9f8c:	1e6b      	subs	r3, r5, #1
    9f8e:	4588      	cmp	r8, r1
    9f90:	d900      	bls.n	9f94 <__aeabi_ddiv+0x338>
    9f92:	e107      	b.n	a1a4 <__aeabi_ddiv+0x548>
    9f94:	4288      	cmp	r0, r1
    9f96:	d800      	bhi.n	9f9a <__aeabi_ddiv+0x33e>
    9f98:	e104      	b.n	a1a4 <__aeabi_ddiv+0x548>
    9f9a:	3d02      	subs	r5, #2
    9f9c:	4441      	add	r1, r8
    9f9e:	9b04      	ldr	r3, [sp, #16]
    9fa0:	1acb      	subs	r3, r1, r3
    9fa2:	0018      	movs	r0, r3
    9fa4:	0039      	movs	r1, r7
    9fa6:	9304      	str	r3, [sp, #16]
    9fa8:	f7fe fb7e 	bl	86a8 <__udivsi3>
    9fac:	9b01      	ldr	r3, [sp, #4]
    9fae:	4682      	mov	sl, r0
    9fb0:	4343      	muls	r3, r0
    9fb2:	0039      	movs	r1, r7
    9fb4:	9804      	ldr	r0, [sp, #16]
    9fb6:	9301      	str	r3, [sp, #4]
    9fb8:	f7fe fbfc 	bl	87b4 <__aeabi_uidivmod>
    9fbc:	9801      	ldr	r0, [sp, #4]
    9fbe:	040b      	lsls	r3, r1, #16
    9fc0:	0431      	lsls	r1, r6, #16
    9fc2:	0c09      	lsrs	r1, r1, #16
    9fc4:	4319      	orrs	r1, r3
    9fc6:	4288      	cmp	r0, r1
    9fc8:	d90d      	bls.n	9fe6 <__aeabi_ddiv+0x38a>
    9fca:	4653      	mov	r3, sl
    9fcc:	4441      	add	r1, r8
    9fce:	3b01      	subs	r3, #1
    9fd0:	4588      	cmp	r8, r1
    9fd2:	d900      	bls.n	9fd6 <__aeabi_ddiv+0x37a>
    9fd4:	e0e8      	b.n	a1a8 <__aeabi_ddiv+0x54c>
    9fd6:	4288      	cmp	r0, r1
    9fd8:	d800      	bhi.n	9fdc <__aeabi_ddiv+0x380>
    9fda:	e0e5      	b.n	a1a8 <__aeabi_ddiv+0x54c>
    9fdc:	2302      	movs	r3, #2
    9fde:	425b      	negs	r3, r3
    9fe0:	469c      	mov	ip, r3
    9fe2:	4441      	add	r1, r8
    9fe4:	44e2      	add	sl, ip
    9fe6:	9b01      	ldr	r3, [sp, #4]
    9fe8:	042d      	lsls	r5, r5, #16
    9fea:	1ace      	subs	r6, r1, r3
    9fec:	4651      	mov	r1, sl
    9fee:	4329      	orrs	r1, r5
    9ff0:	9d05      	ldr	r5, [sp, #20]
    9ff2:	464f      	mov	r7, r9
    9ff4:	002a      	movs	r2, r5
    9ff6:	040b      	lsls	r3, r1, #16
    9ff8:	0c08      	lsrs	r0, r1, #16
    9ffa:	0c1b      	lsrs	r3, r3, #16
    9ffc:	435a      	muls	r2, r3
    9ffe:	4345      	muls	r5, r0
    a000:	437b      	muls	r3, r7
    a002:	4378      	muls	r0, r7
    a004:	195b      	adds	r3, r3, r5
    a006:	0c17      	lsrs	r7, r2, #16
    a008:	18fb      	adds	r3, r7, r3
    a00a:	429d      	cmp	r5, r3
    a00c:	d903      	bls.n	a016 <__aeabi_ddiv+0x3ba>
    a00e:	2580      	movs	r5, #128	; 0x80
    a010:	026d      	lsls	r5, r5, #9
    a012:	46ac      	mov	ip, r5
    a014:	4460      	add	r0, ip
    a016:	0c1d      	lsrs	r5, r3, #16
    a018:	0412      	lsls	r2, r2, #16
    a01a:	041b      	lsls	r3, r3, #16
    a01c:	0c12      	lsrs	r2, r2, #16
    a01e:	1828      	adds	r0, r5, r0
    a020:	189b      	adds	r3, r3, r2
    a022:	4286      	cmp	r6, r0
    a024:	d200      	bcs.n	a028 <__aeabi_ddiv+0x3cc>
    a026:	e093      	b.n	a150 <__aeabi_ddiv+0x4f4>
    a028:	d100      	bne.n	a02c <__aeabi_ddiv+0x3d0>
    a02a:	e08e      	b.n	a14a <__aeabi_ddiv+0x4ee>
    a02c:	2301      	movs	r3, #1
    a02e:	4319      	orrs	r1, r3
    a030:	4ba0      	ldr	r3, [pc, #640]	; (a2b4 <__aeabi_ddiv+0x658>)
    a032:	18e3      	adds	r3, r4, r3
    a034:	2b00      	cmp	r3, #0
    a036:	dc00      	bgt.n	a03a <__aeabi_ddiv+0x3de>
    a038:	e099      	b.n	a16e <__aeabi_ddiv+0x512>
    a03a:	074a      	lsls	r2, r1, #29
    a03c:	d000      	beq.n	a040 <__aeabi_ddiv+0x3e4>
    a03e:	e09e      	b.n	a17e <__aeabi_ddiv+0x522>
    a040:	465a      	mov	r2, fp
    a042:	01d2      	lsls	r2, r2, #7
    a044:	d506      	bpl.n	a054 <__aeabi_ddiv+0x3f8>
    a046:	465a      	mov	r2, fp
    a048:	4b9b      	ldr	r3, [pc, #620]	; (a2b8 <__aeabi_ddiv+0x65c>)
    a04a:	401a      	ands	r2, r3
    a04c:	2380      	movs	r3, #128	; 0x80
    a04e:	4693      	mov	fp, r2
    a050:	00db      	lsls	r3, r3, #3
    a052:	18e3      	adds	r3, r4, r3
    a054:	4a99      	ldr	r2, [pc, #612]	; (a2bc <__aeabi_ddiv+0x660>)
    a056:	4293      	cmp	r3, r2
    a058:	dd68      	ble.n	a12c <__aeabi_ddiv+0x4d0>
    a05a:	2301      	movs	r3, #1
    a05c:	9a02      	ldr	r2, [sp, #8]
    a05e:	4c98      	ldr	r4, [pc, #608]	; (a2c0 <__aeabi_ddiv+0x664>)
    a060:	401a      	ands	r2, r3
    a062:	2300      	movs	r3, #0
    a064:	4694      	mov	ip, r2
    a066:	4698      	mov	r8, r3
    a068:	2200      	movs	r2, #0
    a06a:	e6c5      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a06c:	2280      	movs	r2, #128	; 0x80
    a06e:	464b      	mov	r3, r9
    a070:	0312      	lsls	r2, r2, #12
    a072:	4213      	tst	r3, r2
    a074:	d00a      	beq.n	a08c <__aeabi_ddiv+0x430>
    a076:	465b      	mov	r3, fp
    a078:	4213      	tst	r3, r2
    a07a:	d106      	bne.n	a08a <__aeabi_ddiv+0x42e>
    a07c:	431a      	orrs	r2, r3
    a07e:	0312      	lsls	r2, r2, #12
    a080:	0b12      	lsrs	r2, r2, #12
    a082:	46ac      	mov	ip, r5
    a084:	4688      	mov	r8, r1
    a086:	4c8e      	ldr	r4, [pc, #568]	; (a2c0 <__aeabi_ddiv+0x664>)
    a088:	e6b6      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a08a:	464b      	mov	r3, r9
    a08c:	431a      	orrs	r2, r3
    a08e:	0312      	lsls	r2, r2, #12
    a090:	0b12      	lsrs	r2, r2, #12
    a092:	46bc      	mov	ip, r7
    a094:	4c8a      	ldr	r4, [pc, #552]	; (a2c0 <__aeabi_ddiv+0x664>)
    a096:	e6af      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a098:	0003      	movs	r3, r0
    a09a:	465a      	mov	r2, fp
    a09c:	3b28      	subs	r3, #40	; 0x28
    a09e:	409a      	lsls	r2, r3
    a0a0:	2300      	movs	r3, #0
    a0a2:	4691      	mov	r9, r2
    a0a4:	4698      	mov	r8, r3
    a0a6:	e657      	b.n	9d58 <__aeabi_ddiv+0xfc>
    a0a8:	4658      	mov	r0, fp
    a0aa:	f001 f92b 	bl	b304 <__clzsi2>
    a0ae:	3020      	adds	r0, #32
    a0b0:	e640      	b.n	9d34 <__aeabi_ddiv+0xd8>
    a0b2:	0003      	movs	r3, r0
    a0b4:	4652      	mov	r2, sl
    a0b6:	3b28      	subs	r3, #40	; 0x28
    a0b8:	409a      	lsls	r2, r3
    a0ba:	2100      	movs	r1, #0
    a0bc:	4693      	mov	fp, r2
    a0be:	e677      	b.n	9db0 <__aeabi_ddiv+0x154>
    a0c0:	f001 f920 	bl	b304 <__clzsi2>
    a0c4:	3020      	adds	r0, #32
    a0c6:	e65f      	b.n	9d88 <__aeabi_ddiv+0x12c>
    a0c8:	4588      	cmp	r8, r1
    a0ca:	d200      	bcs.n	a0ce <__aeabi_ddiv+0x472>
    a0cc:	e6c7      	b.n	9e5e <__aeabi_ddiv+0x202>
    a0ce:	464b      	mov	r3, r9
    a0d0:	07de      	lsls	r6, r3, #31
    a0d2:	085d      	lsrs	r5, r3, #1
    a0d4:	4643      	mov	r3, r8
    a0d6:	085b      	lsrs	r3, r3, #1
    a0d8:	431e      	orrs	r6, r3
    a0da:	4643      	mov	r3, r8
    a0dc:	07db      	lsls	r3, r3, #31
    a0de:	469a      	mov	sl, r3
    a0e0:	e6c2      	b.n	9e68 <__aeabi_ddiv+0x20c>
    a0e2:	2500      	movs	r5, #0
    a0e4:	4592      	cmp	sl, r2
    a0e6:	d300      	bcc.n	a0ea <__aeabi_ddiv+0x48e>
    a0e8:	e733      	b.n	9f52 <__aeabi_ddiv+0x2f6>
    a0ea:	9e03      	ldr	r6, [sp, #12]
    a0ec:	4659      	mov	r1, fp
    a0ee:	46b4      	mov	ip, r6
    a0f0:	44e2      	add	sl, ip
    a0f2:	45b2      	cmp	sl, r6
    a0f4:	41ad      	sbcs	r5, r5
    a0f6:	426d      	negs	r5, r5
    a0f8:	4445      	add	r5, r8
    a0fa:	18eb      	adds	r3, r5, r3
    a0fc:	3901      	subs	r1, #1
    a0fe:	4598      	cmp	r8, r3
    a100:	d207      	bcs.n	a112 <__aeabi_ddiv+0x4b6>
    a102:	4298      	cmp	r0, r3
    a104:	d900      	bls.n	a108 <__aeabi_ddiv+0x4ac>
    a106:	e07f      	b.n	a208 <__aeabi_ddiv+0x5ac>
    a108:	d100      	bne.n	a10c <__aeabi_ddiv+0x4b0>
    a10a:	e0bc      	b.n	a286 <__aeabi_ddiv+0x62a>
    a10c:	1a1d      	subs	r5, r3, r0
    a10e:	468b      	mov	fp, r1
    a110:	e71f      	b.n	9f52 <__aeabi_ddiv+0x2f6>
    a112:	4598      	cmp	r8, r3
    a114:	d1fa      	bne.n	a10c <__aeabi_ddiv+0x4b0>
    a116:	9d03      	ldr	r5, [sp, #12]
    a118:	4555      	cmp	r5, sl
    a11a:	d9f2      	bls.n	a102 <__aeabi_ddiv+0x4a6>
    a11c:	4643      	mov	r3, r8
    a11e:	468b      	mov	fp, r1
    a120:	1a1d      	subs	r5, r3, r0
    a122:	e716      	b.n	9f52 <__aeabi_ddiv+0x2f6>
    a124:	469b      	mov	fp, r3
    a126:	e6ca      	b.n	9ebe <__aeabi_ddiv+0x262>
    a128:	0015      	movs	r5, r2
    a12a:	e6e7      	b.n	9efc <__aeabi_ddiv+0x2a0>
    a12c:	465a      	mov	r2, fp
    a12e:	08c9      	lsrs	r1, r1, #3
    a130:	0752      	lsls	r2, r2, #29
    a132:	430a      	orrs	r2, r1
    a134:	055b      	lsls	r3, r3, #21
    a136:	4690      	mov	r8, r2
    a138:	0d5c      	lsrs	r4, r3, #21
    a13a:	465a      	mov	r2, fp
    a13c:	2301      	movs	r3, #1
    a13e:	9902      	ldr	r1, [sp, #8]
    a140:	0252      	lsls	r2, r2, #9
    a142:	4019      	ands	r1, r3
    a144:	0b12      	lsrs	r2, r2, #12
    a146:	468c      	mov	ip, r1
    a148:	e656      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a14a:	2b00      	cmp	r3, #0
    a14c:	d100      	bne.n	a150 <__aeabi_ddiv+0x4f4>
    a14e:	e76f      	b.n	a030 <__aeabi_ddiv+0x3d4>
    a150:	4446      	add	r6, r8
    a152:	1e4a      	subs	r2, r1, #1
    a154:	45b0      	cmp	r8, r6
    a156:	d929      	bls.n	a1ac <__aeabi_ddiv+0x550>
    a158:	0011      	movs	r1, r2
    a15a:	4286      	cmp	r6, r0
    a15c:	d000      	beq.n	a160 <__aeabi_ddiv+0x504>
    a15e:	e765      	b.n	a02c <__aeabi_ddiv+0x3d0>
    a160:	9a03      	ldr	r2, [sp, #12]
    a162:	4293      	cmp	r3, r2
    a164:	d000      	beq.n	a168 <__aeabi_ddiv+0x50c>
    a166:	e761      	b.n	a02c <__aeabi_ddiv+0x3d0>
    a168:	e762      	b.n	a030 <__aeabi_ddiv+0x3d4>
    a16a:	2101      	movs	r1, #1
    a16c:	4249      	negs	r1, r1
    a16e:	2001      	movs	r0, #1
    a170:	1ac2      	subs	r2, r0, r3
    a172:	2a38      	cmp	r2, #56	; 0x38
    a174:	dd21      	ble.n	a1ba <__aeabi_ddiv+0x55e>
    a176:	9b02      	ldr	r3, [sp, #8]
    a178:	4003      	ands	r3, r0
    a17a:	469c      	mov	ip, r3
    a17c:	e638      	b.n	9df0 <__aeabi_ddiv+0x194>
    a17e:	220f      	movs	r2, #15
    a180:	400a      	ands	r2, r1
    a182:	2a04      	cmp	r2, #4
    a184:	d100      	bne.n	a188 <__aeabi_ddiv+0x52c>
    a186:	e75b      	b.n	a040 <__aeabi_ddiv+0x3e4>
    a188:	000a      	movs	r2, r1
    a18a:	1d11      	adds	r1, r2, #4
    a18c:	4291      	cmp	r1, r2
    a18e:	4192      	sbcs	r2, r2
    a190:	4252      	negs	r2, r2
    a192:	4493      	add	fp, r2
    a194:	e754      	b.n	a040 <__aeabi_ddiv+0x3e4>
    a196:	4b47      	ldr	r3, [pc, #284]	; (a2b4 <__aeabi_ddiv+0x658>)
    a198:	18e3      	adds	r3, r4, r3
    a19a:	2b00      	cmp	r3, #0
    a19c:	dde5      	ble.n	a16a <__aeabi_ddiv+0x50e>
    a19e:	2201      	movs	r2, #1
    a1a0:	4252      	negs	r2, r2
    a1a2:	e7f2      	b.n	a18a <__aeabi_ddiv+0x52e>
    a1a4:	001d      	movs	r5, r3
    a1a6:	e6fa      	b.n	9f9e <__aeabi_ddiv+0x342>
    a1a8:	469a      	mov	sl, r3
    a1aa:	e71c      	b.n	9fe6 <__aeabi_ddiv+0x38a>
    a1ac:	42b0      	cmp	r0, r6
    a1ae:	d839      	bhi.n	a224 <__aeabi_ddiv+0x5c8>
    a1b0:	d06e      	beq.n	a290 <__aeabi_ddiv+0x634>
    a1b2:	0011      	movs	r1, r2
    a1b4:	e73a      	b.n	a02c <__aeabi_ddiv+0x3d0>
    a1b6:	9302      	str	r3, [sp, #8]
    a1b8:	e73a      	b.n	a030 <__aeabi_ddiv+0x3d4>
    a1ba:	2a1f      	cmp	r2, #31
    a1bc:	dc3c      	bgt.n	a238 <__aeabi_ddiv+0x5dc>
    a1be:	2320      	movs	r3, #32
    a1c0:	1a9b      	subs	r3, r3, r2
    a1c2:	000c      	movs	r4, r1
    a1c4:	4658      	mov	r0, fp
    a1c6:	4099      	lsls	r1, r3
    a1c8:	4098      	lsls	r0, r3
    a1ca:	1e4b      	subs	r3, r1, #1
    a1cc:	4199      	sbcs	r1, r3
    a1ce:	465b      	mov	r3, fp
    a1d0:	40d4      	lsrs	r4, r2
    a1d2:	40d3      	lsrs	r3, r2
    a1d4:	4320      	orrs	r0, r4
    a1d6:	4308      	orrs	r0, r1
    a1d8:	001a      	movs	r2, r3
    a1da:	0743      	lsls	r3, r0, #29
    a1dc:	d009      	beq.n	a1f2 <__aeabi_ddiv+0x596>
    a1de:	230f      	movs	r3, #15
    a1e0:	4003      	ands	r3, r0
    a1e2:	2b04      	cmp	r3, #4
    a1e4:	d005      	beq.n	a1f2 <__aeabi_ddiv+0x596>
    a1e6:	0001      	movs	r1, r0
    a1e8:	1d08      	adds	r0, r1, #4
    a1ea:	4288      	cmp	r0, r1
    a1ec:	419b      	sbcs	r3, r3
    a1ee:	425b      	negs	r3, r3
    a1f0:	18d2      	adds	r2, r2, r3
    a1f2:	0213      	lsls	r3, r2, #8
    a1f4:	d53a      	bpl.n	a26c <__aeabi_ddiv+0x610>
    a1f6:	2301      	movs	r3, #1
    a1f8:	9a02      	ldr	r2, [sp, #8]
    a1fa:	2401      	movs	r4, #1
    a1fc:	401a      	ands	r2, r3
    a1fe:	2300      	movs	r3, #0
    a200:	4694      	mov	ip, r2
    a202:	4698      	mov	r8, r3
    a204:	2200      	movs	r2, #0
    a206:	e5f7      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a208:	2102      	movs	r1, #2
    a20a:	4249      	negs	r1, r1
    a20c:	468c      	mov	ip, r1
    a20e:	9d03      	ldr	r5, [sp, #12]
    a210:	44e3      	add	fp, ip
    a212:	46ac      	mov	ip, r5
    a214:	44e2      	add	sl, ip
    a216:	45aa      	cmp	sl, r5
    a218:	41ad      	sbcs	r5, r5
    a21a:	426d      	negs	r5, r5
    a21c:	4445      	add	r5, r8
    a21e:	18ed      	adds	r5, r5, r3
    a220:	1a2d      	subs	r5, r5, r0
    a222:	e696      	b.n	9f52 <__aeabi_ddiv+0x2f6>
    a224:	1e8a      	subs	r2, r1, #2
    a226:	9903      	ldr	r1, [sp, #12]
    a228:	004d      	lsls	r5, r1, #1
    a22a:	428d      	cmp	r5, r1
    a22c:	4189      	sbcs	r1, r1
    a22e:	4249      	negs	r1, r1
    a230:	4441      	add	r1, r8
    a232:	1876      	adds	r6, r6, r1
    a234:	9503      	str	r5, [sp, #12]
    a236:	e78f      	b.n	a158 <__aeabi_ddiv+0x4fc>
    a238:	201f      	movs	r0, #31
    a23a:	4240      	negs	r0, r0
    a23c:	1ac3      	subs	r3, r0, r3
    a23e:	4658      	mov	r0, fp
    a240:	40d8      	lsrs	r0, r3
    a242:	0003      	movs	r3, r0
    a244:	2a20      	cmp	r2, #32
    a246:	d028      	beq.n	a29a <__aeabi_ddiv+0x63e>
    a248:	2040      	movs	r0, #64	; 0x40
    a24a:	465d      	mov	r5, fp
    a24c:	1a82      	subs	r2, r0, r2
    a24e:	4095      	lsls	r5, r2
    a250:	4329      	orrs	r1, r5
    a252:	1e4a      	subs	r2, r1, #1
    a254:	4191      	sbcs	r1, r2
    a256:	4319      	orrs	r1, r3
    a258:	2307      	movs	r3, #7
    a25a:	2200      	movs	r2, #0
    a25c:	400b      	ands	r3, r1
    a25e:	d009      	beq.n	a274 <__aeabi_ddiv+0x618>
    a260:	230f      	movs	r3, #15
    a262:	2200      	movs	r2, #0
    a264:	400b      	ands	r3, r1
    a266:	0008      	movs	r0, r1
    a268:	2b04      	cmp	r3, #4
    a26a:	d1bd      	bne.n	a1e8 <__aeabi_ddiv+0x58c>
    a26c:	0001      	movs	r1, r0
    a26e:	0753      	lsls	r3, r2, #29
    a270:	0252      	lsls	r2, r2, #9
    a272:	0b12      	lsrs	r2, r2, #12
    a274:	08c9      	lsrs	r1, r1, #3
    a276:	4319      	orrs	r1, r3
    a278:	2301      	movs	r3, #1
    a27a:	4688      	mov	r8, r1
    a27c:	9902      	ldr	r1, [sp, #8]
    a27e:	2400      	movs	r4, #0
    a280:	4019      	ands	r1, r3
    a282:	468c      	mov	ip, r1
    a284:	e5b8      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a286:	4552      	cmp	r2, sl
    a288:	d8be      	bhi.n	a208 <__aeabi_ddiv+0x5ac>
    a28a:	468b      	mov	fp, r1
    a28c:	2500      	movs	r5, #0
    a28e:	e660      	b.n	9f52 <__aeabi_ddiv+0x2f6>
    a290:	9d03      	ldr	r5, [sp, #12]
    a292:	429d      	cmp	r5, r3
    a294:	d3c6      	bcc.n	a224 <__aeabi_ddiv+0x5c8>
    a296:	0011      	movs	r1, r2
    a298:	e762      	b.n	a160 <__aeabi_ddiv+0x504>
    a29a:	2500      	movs	r5, #0
    a29c:	e7d8      	b.n	a250 <__aeabi_ddiv+0x5f4>
    a29e:	2280      	movs	r2, #128	; 0x80
    a2a0:	465b      	mov	r3, fp
    a2a2:	0312      	lsls	r2, r2, #12
    a2a4:	431a      	orrs	r2, r3
    a2a6:	9b01      	ldr	r3, [sp, #4]
    a2a8:	0312      	lsls	r2, r2, #12
    a2aa:	0b12      	lsrs	r2, r2, #12
    a2ac:	469c      	mov	ip, r3
    a2ae:	4688      	mov	r8, r1
    a2b0:	4c03      	ldr	r4, [pc, #12]	; (a2c0 <__aeabi_ddiv+0x664>)
    a2b2:	e5a1      	b.n	9df8 <__aeabi_ddiv+0x19c>
    a2b4:	000003ff 	.word	0x000003ff
    a2b8:	feffffff 	.word	0xfeffffff
    a2bc:	000007fe 	.word	0x000007fe
    a2c0:	000007ff 	.word	0x000007ff

0000a2c4 <__eqdf2>:
    a2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2c6:	464f      	mov	r7, r9
    a2c8:	4646      	mov	r6, r8
    a2ca:	46d6      	mov	lr, sl
    a2cc:	005c      	lsls	r4, r3, #1
    a2ce:	b5c0      	push	{r6, r7, lr}
    a2d0:	031f      	lsls	r7, r3, #12
    a2d2:	0fdb      	lsrs	r3, r3, #31
    a2d4:	469a      	mov	sl, r3
    a2d6:	4b17      	ldr	r3, [pc, #92]	; (a334 <__eqdf2+0x70>)
    a2d8:	030e      	lsls	r6, r1, #12
    a2da:	004d      	lsls	r5, r1, #1
    a2dc:	4684      	mov	ip, r0
    a2de:	4680      	mov	r8, r0
    a2e0:	0b36      	lsrs	r6, r6, #12
    a2e2:	0d6d      	lsrs	r5, r5, #21
    a2e4:	0fc9      	lsrs	r1, r1, #31
    a2e6:	4691      	mov	r9, r2
    a2e8:	0b3f      	lsrs	r7, r7, #12
    a2ea:	0d64      	lsrs	r4, r4, #21
    a2ec:	2001      	movs	r0, #1
    a2ee:	429d      	cmp	r5, r3
    a2f0:	d008      	beq.n	a304 <__eqdf2+0x40>
    a2f2:	429c      	cmp	r4, r3
    a2f4:	d001      	beq.n	a2fa <__eqdf2+0x36>
    a2f6:	42a5      	cmp	r5, r4
    a2f8:	d00b      	beq.n	a312 <__eqdf2+0x4e>
    a2fa:	bc1c      	pop	{r2, r3, r4}
    a2fc:	4690      	mov	r8, r2
    a2fe:	4699      	mov	r9, r3
    a300:	46a2      	mov	sl, r4
    a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a304:	4663      	mov	r3, ip
    a306:	4333      	orrs	r3, r6
    a308:	d1f7      	bne.n	a2fa <__eqdf2+0x36>
    a30a:	42ac      	cmp	r4, r5
    a30c:	d1f5      	bne.n	a2fa <__eqdf2+0x36>
    a30e:	433a      	orrs	r2, r7
    a310:	d1f3      	bne.n	a2fa <__eqdf2+0x36>
    a312:	2001      	movs	r0, #1
    a314:	42be      	cmp	r6, r7
    a316:	d1f0      	bne.n	a2fa <__eqdf2+0x36>
    a318:	45c8      	cmp	r8, r9
    a31a:	d1ee      	bne.n	a2fa <__eqdf2+0x36>
    a31c:	4551      	cmp	r1, sl
    a31e:	d007      	beq.n	a330 <__eqdf2+0x6c>
    a320:	2d00      	cmp	r5, #0
    a322:	d1ea      	bne.n	a2fa <__eqdf2+0x36>
    a324:	4663      	mov	r3, ip
    a326:	431e      	orrs	r6, r3
    a328:	0030      	movs	r0, r6
    a32a:	1e46      	subs	r6, r0, #1
    a32c:	41b0      	sbcs	r0, r6
    a32e:	e7e4      	b.n	a2fa <__eqdf2+0x36>
    a330:	2000      	movs	r0, #0
    a332:	e7e2      	b.n	a2fa <__eqdf2+0x36>
    a334:	000007ff 	.word	0x000007ff

0000a338 <__gedf2>:
    a338:	b5f0      	push	{r4, r5, r6, r7, lr}
    a33a:	4645      	mov	r5, r8
    a33c:	46de      	mov	lr, fp
    a33e:	4657      	mov	r7, sl
    a340:	464e      	mov	r6, r9
    a342:	b5e0      	push	{r5, r6, r7, lr}
    a344:	031f      	lsls	r7, r3, #12
    a346:	0b3d      	lsrs	r5, r7, #12
    a348:	4f2c      	ldr	r7, [pc, #176]	; (a3fc <__gedf2+0xc4>)
    a34a:	030e      	lsls	r6, r1, #12
    a34c:	004c      	lsls	r4, r1, #1
    a34e:	46ab      	mov	fp, r5
    a350:	005d      	lsls	r5, r3, #1
    a352:	4684      	mov	ip, r0
    a354:	0b36      	lsrs	r6, r6, #12
    a356:	0d64      	lsrs	r4, r4, #21
    a358:	0fc9      	lsrs	r1, r1, #31
    a35a:	4690      	mov	r8, r2
    a35c:	0d6d      	lsrs	r5, r5, #21
    a35e:	0fdb      	lsrs	r3, r3, #31
    a360:	42bc      	cmp	r4, r7
    a362:	d02a      	beq.n	a3ba <__gedf2+0x82>
    a364:	4f25      	ldr	r7, [pc, #148]	; (a3fc <__gedf2+0xc4>)
    a366:	42bd      	cmp	r5, r7
    a368:	d02d      	beq.n	a3c6 <__gedf2+0x8e>
    a36a:	2c00      	cmp	r4, #0
    a36c:	d10f      	bne.n	a38e <__gedf2+0x56>
    a36e:	4330      	orrs	r0, r6
    a370:	0007      	movs	r7, r0
    a372:	4681      	mov	r9, r0
    a374:	4278      	negs	r0, r7
    a376:	4178      	adcs	r0, r7
    a378:	b2c0      	uxtb	r0, r0
    a37a:	2d00      	cmp	r5, #0
    a37c:	d117      	bne.n	a3ae <__gedf2+0x76>
    a37e:	465f      	mov	r7, fp
    a380:	433a      	orrs	r2, r7
    a382:	d114      	bne.n	a3ae <__gedf2+0x76>
    a384:	464b      	mov	r3, r9
    a386:	2000      	movs	r0, #0
    a388:	2b00      	cmp	r3, #0
    a38a:	d00a      	beq.n	a3a2 <__gedf2+0x6a>
    a38c:	e006      	b.n	a39c <__gedf2+0x64>
    a38e:	2d00      	cmp	r5, #0
    a390:	d102      	bne.n	a398 <__gedf2+0x60>
    a392:	4658      	mov	r0, fp
    a394:	4302      	orrs	r2, r0
    a396:	d001      	beq.n	a39c <__gedf2+0x64>
    a398:	4299      	cmp	r1, r3
    a39a:	d018      	beq.n	a3ce <__gedf2+0x96>
    a39c:	4248      	negs	r0, r1
    a39e:	2101      	movs	r1, #1
    a3a0:	4308      	orrs	r0, r1
    a3a2:	bc3c      	pop	{r2, r3, r4, r5}
    a3a4:	4690      	mov	r8, r2
    a3a6:	4699      	mov	r9, r3
    a3a8:	46a2      	mov	sl, r4
    a3aa:	46ab      	mov	fp, r5
    a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3ae:	2800      	cmp	r0, #0
    a3b0:	d0f2      	beq.n	a398 <__gedf2+0x60>
    a3b2:	2001      	movs	r0, #1
    a3b4:	3b01      	subs	r3, #1
    a3b6:	4318      	orrs	r0, r3
    a3b8:	e7f3      	b.n	a3a2 <__gedf2+0x6a>
    a3ba:	0037      	movs	r7, r6
    a3bc:	4307      	orrs	r7, r0
    a3be:	d0d1      	beq.n	a364 <__gedf2+0x2c>
    a3c0:	2002      	movs	r0, #2
    a3c2:	4240      	negs	r0, r0
    a3c4:	e7ed      	b.n	a3a2 <__gedf2+0x6a>
    a3c6:	465f      	mov	r7, fp
    a3c8:	4317      	orrs	r7, r2
    a3ca:	d0ce      	beq.n	a36a <__gedf2+0x32>
    a3cc:	e7f8      	b.n	a3c0 <__gedf2+0x88>
    a3ce:	42ac      	cmp	r4, r5
    a3d0:	dce4      	bgt.n	a39c <__gedf2+0x64>
    a3d2:	da03      	bge.n	a3dc <__gedf2+0xa4>
    a3d4:	1e48      	subs	r0, r1, #1
    a3d6:	2101      	movs	r1, #1
    a3d8:	4308      	orrs	r0, r1
    a3da:	e7e2      	b.n	a3a2 <__gedf2+0x6a>
    a3dc:	455e      	cmp	r6, fp
    a3de:	d8dd      	bhi.n	a39c <__gedf2+0x64>
    a3e0:	d006      	beq.n	a3f0 <__gedf2+0xb8>
    a3e2:	2000      	movs	r0, #0
    a3e4:	455e      	cmp	r6, fp
    a3e6:	d2dc      	bcs.n	a3a2 <__gedf2+0x6a>
    a3e8:	2301      	movs	r3, #1
    a3ea:	1e48      	subs	r0, r1, #1
    a3ec:	4318      	orrs	r0, r3
    a3ee:	e7d8      	b.n	a3a2 <__gedf2+0x6a>
    a3f0:	45c4      	cmp	ip, r8
    a3f2:	d8d3      	bhi.n	a39c <__gedf2+0x64>
    a3f4:	2000      	movs	r0, #0
    a3f6:	45c4      	cmp	ip, r8
    a3f8:	d3f6      	bcc.n	a3e8 <__gedf2+0xb0>
    a3fa:	e7d2      	b.n	a3a2 <__gedf2+0x6a>
    a3fc:	000007ff 	.word	0x000007ff

0000a400 <__ledf2>:
    a400:	b5f0      	push	{r4, r5, r6, r7, lr}
    a402:	464e      	mov	r6, r9
    a404:	4645      	mov	r5, r8
    a406:	46de      	mov	lr, fp
    a408:	4657      	mov	r7, sl
    a40a:	005c      	lsls	r4, r3, #1
    a40c:	b5e0      	push	{r5, r6, r7, lr}
    a40e:	031f      	lsls	r7, r3, #12
    a410:	0fdb      	lsrs	r3, r3, #31
    a412:	4699      	mov	r9, r3
    a414:	4b2a      	ldr	r3, [pc, #168]	; (a4c0 <__ledf2+0xc0>)
    a416:	030e      	lsls	r6, r1, #12
    a418:	004d      	lsls	r5, r1, #1
    a41a:	0fc9      	lsrs	r1, r1, #31
    a41c:	4684      	mov	ip, r0
    a41e:	0b36      	lsrs	r6, r6, #12
    a420:	0d6d      	lsrs	r5, r5, #21
    a422:	468b      	mov	fp, r1
    a424:	4690      	mov	r8, r2
    a426:	0b3f      	lsrs	r7, r7, #12
    a428:	0d64      	lsrs	r4, r4, #21
    a42a:	429d      	cmp	r5, r3
    a42c:	d020      	beq.n	a470 <__ledf2+0x70>
    a42e:	4b24      	ldr	r3, [pc, #144]	; (a4c0 <__ledf2+0xc0>)
    a430:	429c      	cmp	r4, r3
    a432:	d022      	beq.n	a47a <__ledf2+0x7a>
    a434:	2d00      	cmp	r5, #0
    a436:	d112      	bne.n	a45e <__ledf2+0x5e>
    a438:	4330      	orrs	r0, r6
    a43a:	4243      	negs	r3, r0
    a43c:	4143      	adcs	r3, r0
    a43e:	b2db      	uxtb	r3, r3
    a440:	2c00      	cmp	r4, #0
    a442:	d01f      	beq.n	a484 <__ledf2+0x84>
    a444:	2b00      	cmp	r3, #0
    a446:	d00c      	beq.n	a462 <__ledf2+0x62>
    a448:	464b      	mov	r3, r9
    a44a:	2001      	movs	r0, #1
    a44c:	3b01      	subs	r3, #1
    a44e:	4303      	orrs	r3, r0
    a450:	0018      	movs	r0, r3
    a452:	bc3c      	pop	{r2, r3, r4, r5}
    a454:	4690      	mov	r8, r2
    a456:	4699      	mov	r9, r3
    a458:	46a2      	mov	sl, r4
    a45a:	46ab      	mov	fp, r5
    a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a45e:	2c00      	cmp	r4, #0
    a460:	d016      	beq.n	a490 <__ledf2+0x90>
    a462:	45cb      	cmp	fp, r9
    a464:	d017      	beq.n	a496 <__ledf2+0x96>
    a466:	465b      	mov	r3, fp
    a468:	4259      	negs	r1, r3
    a46a:	2301      	movs	r3, #1
    a46c:	430b      	orrs	r3, r1
    a46e:	e7ef      	b.n	a450 <__ledf2+0x50>
    a470:	0031      	movs	r1, r6
    a472:	2302      	movs	r3, #2
    a474:	4301      	orrs	r1, r0
    a476:	d1eb      	bne.n	a450 <__ledf2+0x50>
    a478:	e7d9      	b.n	a42e <__ledf2+0x2e>
    a47a:	0039      	movs	r1, r7
    a47c:	2302      	movs	r3, #2
    a47e:	4311      	orrs	r1, r2
    a480:	d1e6      	bne.n	a450 <__ledf2+0x50>
    a482:	e7d7      	b.n	a434 <__ledf2+0x34>
    a484:	433a      	orrs	r2, r7
    a486:	d1dd      	bne.n	a444 <__ledf2+0x44>
    a488:	2300      	movs	r3, #0
    a48a:	2800      	cmp	r0, #0
    a48c:	d0e0      	beq.n	a450 <__ledf2+0x50>
    a48e:	e7ea      	b.n	a466 <__ledf2+0x66>
    a490:	433a      	orrs	r2, r7
    a492:	d1e6      	bne.n	a462 <__ledf2+0x62>
    a494:	e7e7      	b.n	a466 <__ledf2+0x66>
    a496:	42a5      	cmp	r5, r4
    a498:	dce5      	bgt.n	a466 <__ledf2+0x66>
    a49a:	db05      	blt.n	a4a8 <__ledf2+0xa8>
    a49c:	42be      	cmp	r6, r7
    a49e:	d8e2      	bhi.n	a466 <__ledf2+0x66>
    a4a0:	d007      	beq.n	a4b2 <__ledf2+0xb2>
    a4a2:	2300      	movs	r3, #0
    a4a4:	42be      	cmp	r6, r7
    a4a6:	d2d3      	bcs.n	a450 <__ledf2+0x50>
    a4a8:	4659      	mov	r1, fp
    a4aa:	2301      	movs	r3, #1
    a4ac:	3901      	subs	r1, #1
    a4ae:	430b      	orrs	r3, r1
    a4b0:	e7ce      	b.n	a450 <__ledf2+0x50>
    a4b2:	45c4      	cmp	ip, r8
    a4b4:	d8d7      	bhi.n	a466 <__ledf2+0x66>
    a4b6:	2300      	movs	r3, #0
    a4b8:	45c4      	cmp	ip, r8
    a4ba:	d3f5      	bcc.n	a4a8 <__ledf2+0xa8>
    a4bc:	e7c8      	b.n	a450 <__ledf2+0x50>
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	000007ff 	.word	0x000007ff

0000a4c4 <__aeabi_dmul>:
    a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4c6:	4657      	mov	r7, sl
    a4c8:	4645      	mov	r5, r8
    a4ca:	46de      	mov	lr, fp
    a4cc:	464e      	mov	r6, r9
    a4ce:	b5e0      	push	{r5, r6, r7, lr}
    a4d0:	030c      	lsls	r4, r1, #12
    a4d2:	4698      	mov	r8, r3
    a4d4:	004e      	lsls	r6, r1, #1
    a4d6:	0b23      	lsrs	r3, r4, #12
    a4d8:	b087      	sub	sp, #28
    a4da:	0007      	movs	r7, r0
    a4dc:	4692      	mov	sl, r2
    a4de:	469b      	mov	fp, r3
    a4e0:	0d76      	lsrs	r6, r6, #21
    a4e2:	0fcd      	lsrs	r5, r1, #31
    a4e4:	2e00      	cmp	r6, #0
    a4e6:	d06b      	beq.n	a5c0 <__aeabi_dmul+0xfc>
    a4e8:	4b6d      	ldr	r3, [pc, #436]	; (a6a0 <__aeabi_dmul+0x1dc>)
    a4ea:	429e      	cmp	r6, r3
    a4ec:	d035      	beq.n	a55a <__aeabi_dmul+0x96>
    a4ee:	2480      	movs	r4, #128	; 0x80
    a4f0:	465b      	mov	r3, fp
    a4f2:	0f42      	lsrs	r2, r0, #29
    a4f4:	0424      	lsls	r4, r4, #16
    a4f6:	00db      	lsls	r3, r3, #3
    a4f8:	4314      	orrs	r4, r2
    a4fa:	431c      	orrs	r4, r3
    a4fc:	00c3      	lsls	r3, r0, #3
    a4fe:	4699      	mov	r9, r3
    a500:	4b68      	ldr	r3, [pc, #416]	; (a6a4 <__aeabi_dmul+0x1e0>)
    a502:	46a3      	mov	fp, r4
    a504:	469c      	mov	ip, r3
    a506:	2300      	movs	r3, #0
    a508:	2700      	movs	r7, #0
    a50a:	4466      	add	r6, ip
    a50c:	9302      	str	r3, [sp, #8]
    a50e:	4643      	mov	r3, r8
    a510:	031c      	lsls	r4, r3, #12
    a512:	005a      	lsls	r2, r3, #1
    a514:	0fdb      	lsrs	r3, r3, #31
    a516:	4650      	mov	r0, sl
    a518:	0b24      	lsrs	r4, r4, #12
    a51a:	0d52      	lsrs	r2, r2, #21
    a51c:	4698      	mov	r8, r3
    a51e:	d100      	bne.n	a522 <__aeabi_dmul+0x5e>
    a520:	e076      	b.n	a610 <__aeabi_dmul+0x14c>
    a522:	4b5f      	ldr	r3, [pc, #380]	; (a6a0 <__aeabi_dmul+0x1dc>)
    a524:	429a      	cmp	r2, r3
    a526:	d06d      	beq.n	a604 <__aeabi_dmul+0x140>
    a528:	2380      	movs	r3, #128	; 0x80
    a52a:	0f41      	lsrs	r1, r0, #29
    a52c:	041b      	lsls	r3, r3, #16
    a52e:	430b      	orrs	r3, r1
    a530:	495c      	ldr	r1, [pc, #368]	; (a6a4 <__aeabi_dmul+0x1e0>)
    a532:	00e4      	lsls	r4, r4, #3
    a534:	468c      	mov	ip, r1
    a536:	431c      	orrs	r4, r3
    a538:	00c3      	lsls	r3, r0, #3
    a53a:	2000      	movs	r0, #0
    a53c:	4462      	add	r2, ip
    a53e:	4641      	mov	r1, r8
    a540:	18b6      	adds	r6, r6, r2
    a542:	4069      	eors	r1, r5
    a544:	1c72      	adds	r2, r6, #1
    a546:	9101      	str	r1, [sp, #4]
    a548:	4694      	mov	ip, r2
    a54a:	4307      	orrs	r7, r0
    a54c:	2f0f      	cmp	r7, #15
    a54e:	d900      	bls.n	a552 <__aeabi_dmul+0x8e>
    a550:	e0b0      	b.n	a6b4 <__aeabi_dmul+0x1f0>
    a552:	4a55      	ldr	r2, [pc, #340]	; (a6a8 <__aeabi_dmul+0x1e4>)
    a554:	00bf      	lsls	r7, r7, #2
    a556:	59d2      	ldr	r2, [r2, r7]
    a558:	4697      	mov	pc, r2
    a55a:	465b      	mov	r3, fp
    a55c:	4303      	orrs	r3, r0
    a55e:	4699      	mov	r9, r3
    a560:	d000      	beq.n	a564 <__aeabi_dmul+0xa0>
    a562:	e087      	b.n	a674 <__aeabi_dmul+0x1b0>
    a564:	2300      	movs	r3, #0
    a566:	469b      	mov	fp, r3
    a568:	3302      	adds	r3, #2
    a56a:	2708      	movs	r7, #8
    a56c:	9302      	str	r3, [sp, #8]
    a56e:	e7ce      	b.n	a50e <__aeabi_dmul+0x4a>
    a570:	4642      	mov	r2, r8
    a572:	9201      	str	r2, [sp, #4]
    a574:	2802      	cmp	r0, #2
    a576:	d067      	beq.n	a648 <__aeabi_dmul+0x184>
    a578:	2803      	cmp	r0, #3
    a57a:	d100      	bne.n	a57e <__aeabi_dmul+0xba>
    a57c:	e20e      	b.n	a99c <__aeabi_dmul+0x4d8>
    a57e:	2801      	cmp	r0, #1
    a580:	d000      	beq.n	a584 <__aeabi_dmul+0xc0>
    a582:	e162      	b.n	a84a <__aeabi_dmul+0x386>
    a584:	2300      	movs	r3, #0
    a586:	2400      	movs	r4, #0
    a588:	2200      	movs	r2, #0
    a58a:	4699      	mov	r9, r3
    a58c:	9901      	ldr	r1, [sp, #4]
    a58e:	4001      	ands	r1, r0
    a590:	b2cd      	uxtb	r5, r1
    a592:	2100      	movs	r1, #0
    a594:	0312      	lsls	r2, r2, #12
    a596:	0d0b      	lsrs	r3, r1, #20
    a598:	0b12      	lsrs	r2, r2, #12
    a59a:	051b      	lsls	r3, r3, #20
    a59c:	4313      	orrs	r3, r2
    a59e:	4a43      	ldr	r2, [pc, #268]	; (a6ac <__aeabi_dmul+0x1e8>)
    a5a0:	0524      	lsls	r4, r4, #20
    a5a2:	4013      	ands	r3, r2
    a5a4:	431c      	orrs	r4, r3
    a5a6:	0064      	lsls	r4, r4, #1
    a5a8:	07ed      	lsls	r5, r5, #31
    a5aa:	0864      	lsrs	r4, r4, #1
    a5ac:	432c      	orrs	r4, r5
    a5ae:	4648      	mov	r0, r9
    a5b0:	0021      	movs	r1, r4
    a5b2:	b007      	add	sp, #28
    a5b4:	bc3c      	pop	{r2, r3, r4, r5}
    a5b6:	4690      	mov	r8, r2
    a5b8:	4699      	mov	r9, r3
    a5ba:	46a2      	mov	sl, r4
    a5bc:	46ab      	mov	fp, r5
    a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5c0:	4303      	orrs	r3, r0
    a5c2:	4699      	mov	r9, r3
    a5c4:	d04f      	beq.n	a666 <__aeabi_dmul+0x1a2>
    a5c6:	465b      	mov	r3, fp
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d100      	bne.n	a5ce <__aeabi_dmul+0x10a>
    a5cc:	e189      	b.n	a8e2 <__aeabi_dmul+0x41e>
    a5ce:	4658      	mov	r0, fp
    a5d0:	f000 fe98 	bl	b304 <__clzsi2>
    a5d4:	0003      	movs	r3, r0
    a5d6:	3b0b      	subs	r3, #11
    a5d8:	2b1c      	cmp	r3, #28
    a5da:	dd00      	ble.n	a5de <__aeabi_dmul+0x11a>
    a5dc:	e17a      	b.n	a8d4 <__aeabi_dmul+0x410>
    a5de:	221d      	movs	r2, #29
    a5e0:	1ad3      	subs	r3, r2, r3
    a5e2:	003a      	movs	r2, r7
    a5e4:	0001      	movs	r1, r0
    a5e6:	465c      	mov	r4, fp
    a5e8:	40da      	lsrs	r2, r3
    a5ea:	3908      	subs	r1, #8
    a5ec:	408c      	lsls	r4, r1
    a5ee:	0013      	movs	r3, r2
    a5f0:	408f      	lsls	r7, r1
    a5f2:	4323      	orrs	r3, r4
    a5f4:	469b      	mov	fp, r3
    a5f6:	46b9      	mov	r9, r7
    a5f8:	2300      	movs	r3, #0
    a5fa:	4e2d      	ldr	r6, [pc, #180]	; (a6b0 <__aeabi_dmul+0x1ec>)
    a5fc:	2700      	movs	r7, #0
    a5fe:	1a36      	subs	r6, r6, r0
    a600:	9302      	str	r3, [sp, #8]
    a602:	e784      	b.n	a50e <__aeabi_dmul+0x4a>
    a604:	4653      	mov	r3, sl
    a606:	4323      	orrs	r3, r4
    a608:	d12a      	bne.n	a660 <__aeabi_dmul+0x19c>
    a60a:	2400      	movs	r4, #0
    a60c:	2002      	movs	r0, #2
    a60e:	e796      	b.n	a53e <__aeabi_dmul+0x7a>
    a610:	4653      	mov	r3, sl
    a612:	4323      	orrs	r3, r4
    a614:	d020      	beq.n	a658 <__aeabi_dmul+0x194>
    a616:	2c00      	cmp	r4, #0
    a618:	d100      	bne.n	a61c <__aeabi_dmul+0x158>
    a61a:	e157      	b.n	a8cc <__aeabi_dmul+0x408>
    a61c:	0020      	movs	r0, r4
    a61e:	f000 fe71 	bl	b304 <__clzsi2>
    a622:	0003      	movs	r3, r0
    a624:	3b0b      	subs	r3, #11
    a626:	2b1c      	cmp	r3, #28
    a628:	dd00      	ble.n	a62c <__aeabi_dmul+0x168>
    a62a:	e149      	b.n	a8c0 <__aeabi_dmul+0x3fc>
    a62c:	211d      	movs	r1, #29
    a62e:	1acb      	subs	r3, r1, r3
    a630:	4651      	mov	r1, sl
    a632:	0002      	movs	r2, r0
    a634:	40d9      	lsrs	r1, r3
    a636:	4653      	mov	r3, sl
    a638:	3a08      	subs	r2, #8
    a63a:	4094      	lsls	r4, r2
    a63c:	4093      	lsls	r3, r2
    a63e:	430c      	orrs	r4, r1
    a640:	4a1b      	ldr	r2, [pc, #108]	; (a6b0 <__aeabi_dmul+0x1ec>)
    a642:	1a12      	subs	r2, r2, r0
    a644:	2000      	movs	r0, #0
    a646:	e77a      	b.n	a53e <__aeabi_dmul+0x7a>
    a648:	2501      	movs	r5, #1
    a64a:	9b01      	ldr	r3, [sp, #4]
    a64c:	4c14      	ldr	r4, [pc, #80]	; (a6a0 <__aeabi_dmul+0x1dc>)
    a64e:	401d      	ands	r5, r3
    a650:	2300      	movs	r3, #0
    a652:	2200      	movs	r2, #0
    a654:	4699      	mov	r9, r3
    a656:	e79c      	b.n	a592 <__aeabi_dmul+0xce>
    a658:	2400      	movs	r4, #0
    a65a:	2200      	movs	r2, #0
    a65c:	2001      	movs	r0, #1
    a65e:	e76e      	b.n	a53e <__aeabi_dmul+0x7a>
    a660:	4653      	mov	r3, sl
    a662:	2003      	movs	r0, #3
    a664:	e76b      	b.n	a53e <__aeabi_dmul+0x7a>
    a666:	2300      	movs	r3, #0
    a668:	469b      	mov	fp, r3
    a66a:	3301      	adds	r3, #1
    a66c:	2704      	movs	r7, #4
    a66e:	2600      	movs	r6, #0
    a670:	9302      	str	r3, [sp, #8]
    a672:	e74c      	b.n	a50e <__aeabi_dmul+0x4a>
    a674:	2303      	movs	r3, #3
    a676:	4681      	mov	r9, r0
    a678:	270c      	movs	r7, #12
    a67a:	9302      	str	r3, [sp, #8]
    a67c:	e747      	b.n	a50e <__aeabi_dmul+0x4a>
    a67e:	2280      	movs	r2, #128	; 0x80
    a680:	2300      	movs	r3, #0
    a682:	2500      	movs	r5, #0
    a684:	0312      	lsls	r2, r2, #12
    a686:	4699      	mov	r9, r3
    a688:	4c05      	ldr	r4, [pc, #20]	; (a6a0 <__aeabi_dmul+0x1dc>)
    a68a:	e782      	b.n	a592 <__aeabi_dmul+0xce>
    a68c:	465c      	mov	r4, fp
    a68e:	464b      	mov	r3, r9
    a690:	9802      	ldr	r0, [sp, #8]
    a692:	e76f      	b.n	a574 <__aeabi_dmul+0xb0>
    a694:	465c      	mov	r4, fp
    a696:	464b      	mov	r3, r9
    a698:	9501      	str	r5, [sp, #4]
    a69a:	9802      	ldr	r0, [sp, #8]
    a69c:	e76a      	b.n	a574 <__aeabi_dmul+0xb0>
    a69e:	46c0      	nop			; (mov r8, r8)
    a6a0:	000007ff 	.word	0x000007ff
    a6a4:	fffffc01 	.word	0xfffffc01
    a6a8:	0000c0b0 	.word	0x0000c0b0
    a6ac:	800fffff 	.word	0x800fffff
    a6b0:	fffffc0d 	.word	0xfffffc0d
    a6b4:	464a      	mov	r2, r9
    a6b6:	4649      	mov	r1, r9
    a6b8:	0c17      	lsrs	r7, r2, #16
    a6ba:	0c1a      	lsrs	r2, r3, #16
    a6bc:	041b      	lsls	r3, r3, #16
    a6be:	0c1b      	lsrs	r3, r3, #16
    a6c0:	0408      	lsls	r0, r1, #16
    a6c2:	0019      	movs	r1, r3
    a6c4:	0c00      	lsrs	r0, r0, #16
    a6c6:	4341      	muls	r1, r0
    a6c8:	0015      	movs	r5, r2
    a6ca:	4688      	mov	r8, r1
    a6cc:	0019      	movs	r1, r3
    a6ce:	437d      	muls	r5, r7
    a6d0:	4379      	muls	r1, r7
    a6d2:	9503      	str	r5, [sp, #12]
    a6d4:	4689      	mov	r9, r1
    a6d6:	0029      	movs	r1, r5
    a6d8:	0015      	movs	r5, r2
    a6da:	4345      	muls	r5, r0
    a6dc:	444d      	add	r5, r9
    a6de:	9502      	str	r5, [sp, #8]
    a6e0:	4645      	mov	r5, r8
    a6e2:	0c2d      	lsrs	r5, r5, #16
    a6e4:	46aa      	mov	sl, r5
    a6e6:	9d02      	ldr	r5, [sp, #8]
    a6e8:	4455      	add	r5, sl
    a6ea:	45a9      	cmp	r9, r5
    a6ec:	d906      	bls.n	a6fc <__aeabi_dmul+0x238>
    a6ee:	468a      	mov	sl, r1
    a6f0:	2180      	movs	r1, #128	; 0x80
    a6f2:	0249      	lsls	r1, r1, #9
    a6f4:	4689      	mov	r9, r1
    a6f6:	44ca      	add	sl, r9
    a6f8:	4651      	mov	r1, sl
    a6fa:	9103      	str	r1, [sp, #12]
    a6fc:	0c29      	lsrs	r1, r5, #16
    a6fe:	9104      	str	r1, [sp, #16]
    a700:	4641      	mov	r1, r8
    a702:	0409      	lsls	r1, r1, #16
    a704:	042d      	lsls	r5, r5, #16
    a706:	0c09      	lsrs	r1, r1, #16
    a708:	4688      	mov	r8, r1
    a70a:	0029      	movs	r1, r5
    a70c:	0c25      	lsrs	r5, r4, #16
    a70e:	0424      	lsls	r4, r4, #16
    a710:	4441      	add	r1, r8
    a712:	0c24      	lsrs	r4, r4, #16
    a714:	9105      	str	r1, [sp, #20]
    a716:	0021      	movs	r1, r4
    a718:	4341      	muls	r1, r0
    a71a:	4688      	mov	r8, r1
    a71c:	0021      	movs	r1, r4
    a71e:	4379      	muls	r1, r7
    a720:	468a      	mov	sl, r1
    a722:	4368      	muls	r0, r5
    a724:	4641      	mov	r1, r8
    a726:	4450      	add	r0, sl
    a728:	4681      	mov	r9, r0
    a72a:	0c08      	lsrs	r0, r1, #16
    a72c:	4448      	add	r0, r9
    a72e:	436f      	muls	r7, r5
    a730:	4582      	cmp	sl, r0
    a732:	d903      	bls.n	a73c <__aeabi_dmul+0x278>
    a734:	2180      	movs	r1, #128	; 0x80
    a736:	0249      	lsls	r1, r1, #9
    a738:	4689      	mov	r9, r1
    a73a:	444f      	add	r7, r9
    a73c:	0c01      	lsrs	r1, r0, #16
    a73e:	4689      	mov	r9, r1
    a740:	0039      	movs	r1, r7
    a742:	4449      	add	r1, r9
    a744:	9102      	str	r1, [sp, #8]
    a746:	4641      	mov	r1, r8
    a748:	040f      	lsls	r7, r1, #16
    a74a:	9904      	ldr	r1, [sp, #16]
    a74c:	0c3f      	lsrs	r7, r7, #16
    a74e:	4688      	mov	r8, r1
    a750:	0400      	lsls	r0, r0, #16
    a752:	19c0      	adds	r0, r0, r7
    a754:	4480      	add	r8, r0
    a756:	4641      	mov	r1, r8
    a758:	9104      	str	r1, [sp, #16]
    a75a:	4659      	mov	r1, fp
    a75c:	0c0f      	lsrs	r7, r1, #16
    a75e:	0409      	lsls	r1, r1, #16
    a760:	0c09      	lsrs	r1, r1, #16
    a762:	4688      	mov	r8, r1
    a764:	4359      	muls	r1, r3
    a766:	468a      	mov	sl, r1
    a768:	0039      	movs	r1, r7
    a76a:	4351      	muls	r1, r2
    a76c:	4689      	mov	r9, r1
    a76e:	4641      	mov	r1, r8
    a770:	434a      	muls	r2, r1
    a772:	4651      	mov	r1, sl
    a774:	0c09      	lsrs	r1, r1, #16
    a776:	468b      	mov	fp, r1
    a778:	437b      	muls	r3, r7
    a77a:	18d2      	adds	r2, r2, r3
    a77c:	445a      	add	r2, fp
    a77e:	4293      	cmp	r3, r2
    a780:	d903      	bls.n	a78a <__aeabi_dmul+0x2c6>
    a782:	2380      	movs	r3, #128	; 0x80
    a784:	025b      	lsls	r3, r3, #9
    a786:	469b      	mov	fp, r3
    a788:	44d9      	add	r9, fp
    a78a:	4651      	mov	r1, sl
    a78c:	0409      	lsls	r1, r1, #16
    a78e:	0c09      	lsrs	r1, r1, #16
    a790:	468a      	mov	sl, r1
    a792:	4641      	mov	r1, r8
    a794:	4361      	muls	r1, r4
    a796:	437c      	muls	r4, r7
    a798:	0c13      	lsrs	r3, r2, #16
    a79a:	0412      	lsls	r2, r2, #16
    a79c:	444b      	add	r3, r9
    a79e:	4452      	add	r2, sl
    a7a0:	46a1      	mov	r9, r4
    a7a2:	468a      	mov	sl, r1
    a7a4:	003c      	movs	r4, r7
    a7a6:	4641      	mov	r1, r8
    a7a8:	436c      	muls	r4, r5
    a7aa:	434d      	muls	r5, r1
    a7ac:	4651      	mov	r1, sl
    a7ae:	444d      	add	r5, r9
    a7b0:	0c0f      	lsrs	r7, r1, #16
    a7b2:	197d      	adds	r5, r7, r5
    a7b4:	45a9      	cmp	r9, r5
    a7b6:	d903      	bls.n	a7c0 <__aeabi_dmul+0x2fc>
    a7b8:	2180      	movs	r1, #128	; 0x80
    a7ba:	0249      	lsls	r1, r1, #9
    a7bc:	4688      	mov	r8, r1
    a7be:	4444      	add	r4, r8
    a7c0:	9f04      	ldr	r7, [sp, #16]
    a7c2:	9903      	ldr	r1, [sp, #12]
    a7c4:	46b8      	mov	r8, r7
    a7c6:	4441      	add	r1, r8
    a7c8:	468b      	mov	fp, r1
    a7ca:	4583      	cmp	fp, r0
    a7cc:	4180      	sbcs	r0, r0
    a7ce:	4241      	negs	r1, r0
    a7d0:	4688      	mov	r8, r1
    a7d2:	4651      	mov	r1, sl
    a7d4:	0408      	lsls	r0, r1, #16
    a7d6:	042f      	lsls	r7, r5, #16
    a7d8:	0c00      	lsrs	r0, r0, #16
    a7da:	183f      	adds	r7, r7, r0
    a7dc:	4658      	mov	r0, fp
    a7de:	9902      	ldr	r1, [sp, #8]
    a7e0:	1810      	adds	r0, r2, r0
    a7e2:	4689      	mov	r9, r1
    a7e4:	4290      	cmp	r0, r2
    a7e6:	4192      	sbcs	r2, r2
    a7e8:	444f      	add	r7, r9
    a7ea:	46ba      	mov	sl, r7
    a7ec:	4252      	negs	r2, r2
    a7ee:	4699      	mov	r9, r3
    a7f0:	4693      	mov	fp, r2
    a7f2:	44c2      	add	sl, r8
    a7f4:	44d1      	add	r9, sl
    a7f6:	44cb      	add	fp, r9
    a7f8:	428f      	cmp	r7, r1
    a7fa:	41bf      	sbcs	r7, r7
    a7fc:	45c2      	cmp	sl, r8
    a7fe:	4189      	sbcs	r1, r1
    a800:	4599      	cmp	r9, r3
    a802:	419b      	sbcs	r3, r3
    a804:	4593      	cmp	fp, r2
    a806:	4192      	sbcs	r2, r2
    a808:	427f      	negs	r7, r7
    a80a:	4249      	negs	r1, r1
    a80c:	0c2d      	lsrs	r5, r5, #16
    a80e:	4252      	negs	r2, r2
    a810:	430f      	orrs	r7, r1
    a812:	425b      	negs	r3, r3
    a814:	4313      	orrs	r3, r2
    a816:	197f      	adds	r7, r7, r5
    a818:	18ff      	adds	r7, r7, r3
    a81a:	465b      	mov	r3, fp
    a81c:	193c      	adds	r4, r7, r4
    a81e:	0ddb      	lsrs	r3, r3, #23
    a820:	9a05      	ldr	r2, [sp, #20]
    a822:	0264      	lsls	r4, r4, #9
    a824:	431c      	orrs	r4, r3
    a826:	0243      	lsls	r3, r0, #9
    a828:	4313      	orrs	r3, r2
    a82a:	1e5d      	subs	r5, r3, #1
    a82c:	41ab      	sbcs	r3, r5
    a82e:	465a      	mov	r2, fp
    a830:	0dc0      	lsrs	r0, r0, #23
    a832:	4303      	orrs	r3, r0
    a834:	0252      	lsls	r2, r2, #9
    a836:	4313      	orrs	r3, r2
    a838:	01e2      	lsls	r2, r4, #7
    a83a:	d556      	bpl.n	a8ea <__aeabi_dmul+0x426>
    a83c:	2001      	movs	r0, #1
    a83e:	085a      	lsrs	r2, r3, #1
    a840:	4003      	ands	r3, r0
    a842:	4313      	orrs	r3, r2
    a844:	07e2      	lsls	r2, r4, #31
    a846:	4313      	orrs	r3, r2
    a848:	0864      	lsrs	r4, r4, #1
    a84a:	485a      	ldr	r0, [pc, #360]	; (a9b4 <__aeabi_dmul+0x4f0>)
    a84c:	4460      	add	r0, ip
    a84e:	2800      	cmp	r0, #0
    a850:	dd4d      	ble.n	a8ee <__aeabi_dmul+0x42a>
    a852:	075a      	lsls	r2, r3, #29
    a854:	d009      	beq.n	a86a <__aeabi_dmul+0x3a6>
    a856:	220f      	movs	r2, #15
    a858:	401a      	ands	r2, r3
    a85a:	2a04      	cmp	r2, #4
    a85c:	d005      	beq.n	a86a <__aeabi_dmul+0x3a6>
    a85e:	1d1a      	adds	r2, r3, #4
    a860:	429a      	cmp	r2, r3
    a862:	419b      	sbcs	r3, r3
    a864:	425b      	negs	r3, r3
    a866:	18e4      	adds	r4, r4, r3
    a868:	0013      	movs	r3, r2
    a86a:	01e2      	lsls	r2, r4, #7
    a86c:	d504      	bpl.n	a878 <__aeabi_dmul+0x3b4>
    a86e:	2080      	movs	r0, #128	; 0x80
    a870:	4a51      	ldr	r2, [pc, #324]	; (a9b8 <__aeabi_dmul+0x4f4>)
    a872:	00c0      	lsls	r0, r0, #3
    a874:	4014      	ands	r4, r2
    a876:	4460      	add	r0, ip
    a878:	4a50      	ldr	r2, [pc, #320]	; (a9bc <__aeabi_dmul+0x4f8>)
    a87a:	4290      	cmp	r0, r2
    a87c:	dd00      	ble.n	a880 <__aeabi_dmul+0x3bc>
    a87e:	e6e3      	b.n	a648 <__aeabi_dmul+0x184>
    a880:	2501      	movs	r5, #1
    a882:	08db      	lsrs	r3, r3, #3
    a884:	0762      	lsls	r2, r4, #29
    a886:	431a      	orrs	r2, r3
    a888:	0264      	lsls	r4, r4, #9
    a88a:	9b01      	ldr	r3, [sp, #4]
    a88c:	4691      	mov	r9, r2
    a88e:	0b22      	lsrs	r2, r4, #12
    a890:	0544      	lsls	r4, r0, #21
    a892:	0d64      	lsrs	r4, r4, #21
    a894:	401d      	ands	r5, r3
    a896:	e67c      	b.n	a592 <__aeabi_dmul+0xce>
    a898:	2280      	movs	r2, #128	; 0x80
    a89a:	4659      	mov	r1, fp
    a89c:	0312      	lsls	r2, r2, #12
    a89e:	4211      	tst	r1, r2
    a8a0:	d008      	beq.n	a8b4 <__aeabi_dmul+0x3f0>
    a8a2:	4214      	tst	r4, r2
    a8a4:	d106      	bne.n	a8b4 <__aeabi_dmul+0x3f0>
    a8a6:	4322      	orrs	r2, r4
    a8a8:	0312      	lsls	r2, r2, #12
    a8aa:	0b12      	lsrs	r2, r2, #12
    a8ac:	4645      	mov	r5, r8
    a8ae:	4699      	mov	r9, r3
    a8b0:	4c43      	ldr	r4, [pc, #268]	; (a9c0 <__aeabi_dmul+0x4fc>)
    a8b2:	e66e      	b.n	a592 <__aeabi_dmul+0xce>
    a8b4:	465b      	mov	r3, fp
    a8b6:	431a      	orrs	r2, r3
    a8b8:	0312      	lsls	r2, r2, #12
    a8ba:	0b12      	lsrs	r2, r2, #12
    a8bc:	4c40      	ldr	r4, [pc, #256]	; (a9c0 <__aeabi_dmul+0x4fc>)
    a8be:	e668      	b.n	a592 <__aeabi_dmul+0xce>
    a8c0:	0003      	movs	r3, r0
    a8c2:	4654      	mov	r4, sl
    a8c4:	3b28      	subs	r3, #40	; 0x28
    a8c6:	409c      	lsls	r4, r3
    a8c8:	2300      	movs	r3, #0
    a8ca:	e6b9      	b.n	a640 <__aeabi_dmul+0x17c>
    a8cc:	f000 fd1a 	bl	b304 <__clzsi2>
    a8d0:	3020      	adds	r0, #32
    a8d2:	e6a6      	b.n	a622 <__aeabi_dmul+0x15e>
    a8d4:	0003      	movs	r3, r0
    a8d6:	3b28      	subs	r3, #40	; 0x28
    a8d8:	409f      	lsls	r7, r3
    a8da:	2300      	movs	r3, #0
    a8dc:	46bb      	mov	fp, r7
    a8de:	4699      	mov	r9, r3
    a8e0:	e68a      	b.n	a5f8 <__aeabi_dmul+0x134>
    a8e2:	f000 fd0f 	bl	b304 <__clzsi2>
    a8e6:	3020      	adds	r0, #32
    a8e8:	e674      	b.n	a5d4 <__aeabi_dmul+0x110>
    a8ea:	46b4      	mov	ip, r6
    a8ec:	e7ad      	b.n	a84a <__aeabi_dmul+0x386>
    a8ee:	2501      	movs	r5, #1
    a8f0:	1a2a      	subs	r2, r5, r0
    a8f2:	2a38      	cmp	r2, #56	; 0x38
    a8f4:	dd06      	ble.n	a904 <__aeabi_dmul+0x440>
    a8f6:	9b01      	ldr	r3, [sp, #4]
    a8f8:	2400      	movs	r4, #0
    a8fa:	401d      	ands	r5, r3
    a8fc:	2300      	movs	r3, #0
    a8fe:	2200      	movs	r2, #0
    a900:	4699      	mov	r9, r3
    a902:	e646      	b.n	a592 <__aeabi_dmul+0xce>
    a904:	2a1f      	cmp	r2, #31
    a906:	dc21      	bgt.n	a94c <__aeabi_dmul+0x488>
    a908:	2520      	movs	r5, #32
    a90a:	0020      	movs	r0, r4
    a90c:	1aad      	subs	r5, r5, r2
    a90e:	001e      	movs	r6, r3
    a910:	40ab      	lsls	r3, r5
    a912:	40a8      	lsls	r0, r5
    a914:	40d6      	lsrs	r6, r2
    a916:	1e5d      	subs	r5, r3, #1
    a918:	41ab      	sbcs	r3, r5
    a91a:	4330      	orrs	r0, r6
    a91c:	4318      	orrs	r0, r3
    a91e:	40d4      	lsrs	r4, r2
    a920:	0743      	lsls	r3, r0, #29
    a922:	d009      	beq.n	a938 <__aeabi_dmul+0x474>
    a924:	230f      	movs	r3, #15
    a926:	4003      	ands	r3, r0
    a928:	2b04      	cmp	r3, #4
    a92a:	d005      	beq.n	a938 <__aeabi_dmul+0x474>
    a92c:	0003      	movs	r3, r0
    a92e:	1d18      	adds	r0, r3, #4
    a930:	4298      	cmp	r0, r3
    a932:	419b      	sbcs	r3, r3
    a934:	425b      	negs	r3, r3
    a936:	18e4      	adds	r4, r4, r3
    a938:	0223      	lsls	r3, r4, #8
    a93a:	d521      	bpl.n	a980 <__aeabi_dmul+0x4bc>
    a93c:	2501      	movs	r5, #1
    a93e:	9b01      	ldr	r3, [sp, #4]
    a940:	2401      	movs	r4, #1
    a942:	401d      	ands	r5, r3
    a944:	2300      	movs	r3, #0
    a946:	2200      	movs	r2, #0
    a948:	4699      	mov	r9, r3
    a94a:	e622      	b.n	a592 <__aeabi_dmul+0xce>
    a94c:	251f      	movs	r5, #31
    a94e:	0021      	movs	r1, r4
    a950:	426d      	negs	r5, r5
    a952:	1a28      	subs	r0, r5, r0
    a954:	40c1      	lsrs	r1, r0
    a956:	0008      	movs	r0, r1
    a958:	2a20      	cmp	r2, #32
    a95a:	d01d      	beq.n	a998 <__aeabi_dmul+0x4d4>
    a95c:	355f      	adds	r5, #95	; 0x5f
    a95e:	1aaa      	subs	r2, r5, r2
    a960:	4094      	lsls	r4, r2
    a962:	4323      	orrs	r3, r4
    a964:	1e5c      	subs	r4, r3, #1
    a966:	41a3      	sbcs	r3, r4
    a968:	2507      	movs	r5, #7
    a96a:	4303      	orrs	r3, r0
    a96c:	401d      	ands	r5, r3
    a96e:	2200      	movs	r2, #0
    a970:	2d00      	cmp	r5, #0
    a972:	d009      	beq.n	a988 <__aeabi_dmul+0x4c4>
    a974:	220f      	movs	r2, #15
    a976:	2400      	movs	r4, #0
    a978:	401a      	ands	r2, r3
    a97a:	0018      	movs	r0, r3
    a97c:	2a04      	cmp	r2, #4
    a97e:	d1d6      	bne.n	a92e <__aeabi_dmul+0x46a>
    a980:	0003      	movs	r3, r0
    a982:	0765      	lsls	r5, r4, #29
    a984:	0264      	lsls	r4, r4, #9
    a986:	0b22      	lsrs	r2, r4, #12
    a988:	08db      	lsrs	r3, r3, #3
    a98a:	432b      	orrs	r3, r5
    a98c:	2501      	movs	r5, #1
    a98e:	4699      	mov	r9, r3
    a990:	9b01      	ldr	r3, [sp, #4]
    a992:	2400      	movs	r4, #0
    a994:	401d      	ands	r5, r3
    a996:	e5fc      	b.n	a592 <__aeabi_dmul+0xce>
    a998:	2400      	movs	r4, #0
    a99a:	e7e2      	b.n	a962 <__aeabi_dmul+0x49e>
    a99c:	2280      	movs	r2, #128	; 0x80
    a99e:	2501      	movs	r5, #1
    a9a0:	0312      	lsls	r2, r2, #12
    a9a2:	4322      	orrs	r2, r4
    a9a4:	9901      	ldr	r1, [sp, #4]
    a9a6:	0312      	lsls	r2, r2, #12
    a9a8:	0b12      	lsrs	r2, r2, #12
    a9aa:	400d      	ands	r5, r1
    a9ac:	4699      	mov	r9, r3
    a9ae:	4c04      	ldr	r4, [pc, #16]	; (a9c0 <__aeabi_dmul+0x4fc>)
    a9b0:	e5ef      	b.n	a592 <__aeabi_dmul+0xce>
    a9b2:	46c0      	nop			; (mov r8, r8)
    a9b4:	000003ff 	.word	0x000003ff
    a9b8:	feffffff 	.word	0xfeffffff
    a9bc:	000007fe 	.word	0x000007fe
    a9c0:	000007ff 	.word	0x000007ff

0000a9c4 <__aeabi_dsub>:
    a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9c6:	4646      	mov	r6, r8
    a9c8:	46d6      	mov	lr, sl
    a9ca:	464f      	mov	r7, r9
    a9cc:	030c      	lsls	r4, r1, #12
    a9ce:	b5c0      	push	{r6, r7, lr}
    a9d0:	0fcd      	lsrs	r5, r1, #31
    a9d2:	004e      	lsls	r6, r1, #1
    a9d4:	0a61      	lsrs	r1, r4, #9
    a9d6:	0f44      	lsrs	r4, r0, #29
    a9d8:	430c      	orrs	r4, r1
    a9da:	00c1      	lsls	r1, r0, #3
    a9dc:	0058      	lsls	r0, r3, #1
    a9de:	0d40      	lsrs	r0, r0, #21
    a9e0:	4684      	mov	ip, r0
    a9e2:	468a      	mov	sl, r1
    a9e4:	000f      	movs	r7, r1
    a9e6:	0319      	lsls	r1, r3, #12
    a9e8:	0f50      	lsrs	r0, r2, #29
    a9ea:	0a49      	lsrs	r1, r1, #9
    a9ec:	4301      	orrs	r1, r0
    a9ee:	48c6      	ldr	r0, [pc, #792]	; (ad08 <__aeabi_dsub+0x344>)
    a9f0:	0d76      	lsrs	r6, r6, #21
    a9f2:	46a8      	mov	r8, r5
    a9f4:	0fdb      	lsrs	r3, r3, #31
    a9f6:	00d2      	lsls	r2, r2, #3
    a9f8:	4584      	cmp	ip, r0
    a9fa:	d100      	bne.n	a9fe <__aeabi_dsub+0x3a>
    a9fc:	e0d8      	b.n	abb0 <__aeabi_dsub+0x1ec>
    a9fe:	2001      	movs	r0, #1
    aa00:	4043      	eors	r3, r0
    aa02:	42ab      	cmp	r3, r5
    aa04:	d100      	bne.n	aa08 <__aeabi_dsub+0x44>
    aa06:	e0a6      	b.n	ab56 <__aeabi_dsub+0x192>
    aa08:	4660      	mov	r0, ip
    aa0a:	1a35      	subs	r5, r6, r0
    aa0c:	2d00      	cmp	r5, #0
    aa0e:	dc00      	bgt.n	aa12 <__aeabi_dsub+0x4e>
    aa10:	e105      	b.n	ac1e <__aeabi_dsub+0x25a>
    aa12:	2800      	cmp	r0, #0
    aa14:	d110      	bne.n	aa38 <__aeabi_dsub+0x74>
    aa16:	000b      	movs	r3, r1
    aa18:	4313      	orrs	r3, r2
    aa1a:	d100      	bne.n	aa1e <__aeabi_dsub+0x5a>
    aa1c:	e0d7      	b.n	abce <__aeabi_dsub+0x20a>
    aa1e:	1e6b      	subs	r3, r5, #1
    aa20:	2b00      	cmp	r3, #0
    aa22:	d000      	beq.n	aa26 <__aeabi_dsub+0x62>
    aa24:	e14b      	b.n	acbe <__aeabi_dsub+0x2fa>
    aa26:	4653      	mov	r3, sl
    aa28:	1a9f      	subs	r7, r3, r2
    aa2a:	45ba      	cmp	sl, r7
    aa2c:	4180      	sbcs	r0, r0
    aa2e:	1a64      	subs	r4, r4, r1
    aa30:	4240      	negs	r0, r0
    aa32:	1a24      	subs	r4, r4, r0
    aa34:	2601      	movs	r6, #1
    aa36:	e01e      	b.n	aa76 <__aeabi_dsub+0xb2>
    aa38:	4bb3      	ldr	r3, [pc, #716]	; (ad08 <__aeabi_dsub+0x344>)
    aa3a:	429e      	cmp	r6, r3
    aa3c:	d048      	beq.n	aad0 <__aeabi_dsub+0x10c>
    aa3e:	2380      	movs	r3, #128	; 0x80
    aa40:	041b      	lsls	r3, r3, #16
    aa42:	4319      	orrs	r1, r3
    aa44:	2d38      	cmp	r5, #56	; 0x38
    aa46:	dd00      	ble.n	aa4a <__aeabi_dsub+0x86>
    aa48:	e119      	b.n	ac7e <__aeabi_dsub+0x2ba>
    aa4a:	2d1f      	cmp	r5, #31
    aa4c:	dd00      	ble.n	aa50 <__aeabi_dsub+0x8c>
    aa4e:	e14c      	b.n	acea <__aeabi_dsub+0x326>
    aa50:	2320      	movs	r3, #32
    aa52:	000f      	movs	r7, r1
    aa54:	1b5b      	subs	r3, r3, r5
    aa56:	0010      	movs	r0, r2
    aa58:	409a      	lsls	r2, r3
    aa5a:	409f      	lsls	r7, r3
    aa5c:	40e8      	lsrs	r0, r5
    aa5e:	1e53      	subs	r3, r2, #1
    aa60:	419a      	sbcs	r2, r3
    aa62:	40e9      	lsrs	r1, r5
    aa64:	4307      	orrs	r7, r0
    aa66:	4317      	orrs	r7, r2
    aa68:	4653      	mov	r3, sl
    aa6a:	1bdf      	subs	r7, r3, r7
    aa6c:	1a61      	subs	r1, r4, r1
    aa6e:	45ba      	cmp	sl, r7
    aa70:	41a4      	sbcs	r4, r4
    aa72:	4264      	negs	r4, r4
    aa74:	1b0c      	subs	r4, r1, r4
    aa76:	0223      	lsls	r3, r4, #8
    aa78:	d400      	bmi.n	aa7c <__aeabi_dsub+0xb8>
    aa7a:	e0c5      	b.n	ac08 <__aeabi_dsub+0x244>
    aa7c:	0264      	lsls	r4, r4, #9
    aa7e:	0a65      	lsrs	r5, r4, #9
    aa80:	2d00      	cmp	r5, #0
    aa82:	d100      	bne.n	aa86 <__aeabi_dsub+0xc2>
    aa84:	e0f6      	b.n	ac74 <__aeabi_dsub+0x2b0>
    aa86:	0028      	movs	r0, r5
    aa88:	f000 fc3c 	bl	b304 <__clzsi2>
    aa8c:	0003      	movs	r3, r0
    aa8e:	3b08      	subs	r3, #8
    aa90:	2b1f      	cmp	r3, #31
    aa92:	dd00      	ble.n	aa96 <__aeabi_dsub+0xd2>
    aa94:	e0e9      	b.n	ac6a <__aeabi_dsub+0x2a6>
    aa96:	2220      	movs	r2, #32
    aa98:	003c      	movs	r4, r7
    aa9a:	1ad2      	subs	r2, r2, r3
    aa9c:	409d      	lsls	r5, r3
    aa9e:	40d4      	lsrs	r4, r2
    aaa0:	409f      	lsls	r7, r3
    aaa2:	4325      	orrs	r5, r4
    aaa4:	429e      	cmp	r6, r3
    aaa6:	dd00      	ble.n	aaaa <__aeabi_dsub+0xe6>
    aaa8:	e0db      	b.n	ac62 <__aeabi_dsub+0x29e>
    aaaa:	1b9e      	subs	r6, r3, r6
    aaac:	1c73      	adds	r3, r6, #1
    aaae:	2b1f      	cmp	r3, #31
    aab0:	dd00      	ble.n	aab4 <__aeabi_dsub+0xf0>
    aab2:	e10a      	b.n	acca <__aeabi_dsub+0x306>
    aab4:	2220      	movs	r2, #32
    aab6:	0038      	movs	r0, r7
    aab8:	1ad2      	subs	r2, r2, r3
    aaba:	0029      	movs	r1, r5
    aabc:	4097      	lsls	r7, r2
    aabe:	002c      	movs	r4, r5
    aac0:	4091      	lsls	r1, r2
    aac2:	40d8      	lsrs	r0, r3
    aac4:	1e7a      	subs	r2, r7, #1
    aac6:	4197      	sbcs	r7, r2
    aac8:	40dc      	lsrs	r4, r3
    aaca:	2600      	movs	r6, #0
    aacc:	4301      	orrs	r1, r0
    aace:	430f      	orrs	r7, r1
    aad0:	077b      	lsls	r3, r7, #29
    aad2:	d009      	beq.n	aae8 <__aeabi_dsub+0x124>
    aad4:	230f      	movs	r3, #15
    aad6:	403b      	ands	r3, r7
    aad8:	2b04      	cmp	r3, #4
    aada:	d005      	beq.n	aae8 <__aeabi_dsub+0x124>
    aadc:	1d3b      	adds	r3, r7, #4
    aade:	42bb      	cmp	r3, r7
    aae0:	41bf      	sbcs	r7, r7
    aae2:	427f      	negs	r7, r7
    aae4:	19e4      	adds	r4, r4, r7
    aae6:	001f      	movs	r7, r3
    aae8:	0223      	lsls	r3, r4, #8
    aaea:	d525      	bpl.n	ab38 <__aeabi_dsub+0x174>
    aaec:	4b86      	ldr	r3, [pc, #536]	; (ad08 <__aeabi_dsub+0x344>)
    aaee:	3601      	adds	r6, #1
    aaf0:	429e      	cmp	r6, r3
    aaf2:	d100      	bne.n	aaf6 <__aeabi_dsub+0x132>
    aaf4:	e0af      	b.n	ac56 <__aeabi_dsub+0x292>
    aaf6:	4b85      	ldr	r3, [pc, #532]	; (ad0c <__aeabi_dsub+0x348>)
    aaf8:	2501      	movs	r5, #1
    aafa:	401c      	ands	r4, r3
    aafc:	4643      	mov	r3, r8
    aafe:	0762      	lsls	r2, r4, #29
    ab00:	08ff      	lsrs	r7, r7, #3
    ab02:	0264      	lsls	r4, r4, #9
    ab04:	0576      	lsls	r6, r6, #21
    ab06:	4317      	orrs	r7, r2
    ab08:	0b24      	lsrs	r4, r4, #12
    ab0a:	0d76      	lsrs	r6, r6, #21
    ab0c:	401d      	ands	r5, r3
    ab0e:	2100      	movs	r1, #0
    ab10:	0324      	lsls	r4, r4, #12
    ab12:	0b23      	lsrs	r3, r4, #12
    ab14:	0d0c      	lsrs	r4, r1, #20
    ab16:	4a7e      	ldr	r2, [pc, #504]	; (ad10 <__aeabi_dsub+0x34c>)
    ab18:	0524      	lsls	r4, r4, #20
    ab1a:	431c      	orrs	r4, r3
    ab1c:	4014      	ands	r4, r2
    ab1e:	0533      	lsls	r3, r6, #20
    ab20:	4323      	orrs	r3, r4
    ab22:	005b      	lsls	r3, r3, #1
    ab24:	07ed      	lsls	r5, r5, #31
    ab26:	085b      	lsrs	r3, r3, #1
    ab28:	432b      	orrs	r3, r5
    ab2a:	0038      	movs	r0, r7
    ab2c:	0019      	movs	r1, r3
    ab2e:	bc1c      	pop	{r2, r3, r4}
    ab30:	4690      	mov	r8, r2
    ab32:	4699      	mov	r9, r3
    ab34:	46a2      	mov	sl, r4
    ab36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab38:	2501      	movs	r5, #1
    ab3a:	4643      	mov	r3, r8
    ab3c:	0762      	lsls	r2, r4, #29
    ab3e:	08ff      	lsrs	r7, r7, #3
    ab40:	4317      	orrs	r7, r2
    ab42:	08e4      	lsrs	r4, r4, #3
    ab44:	401d      	ands	r5, r3
    ab46:	4b70      	ldr	r3, [pc, #448]	; (ad08 <__aeabi_dsub+0x344>)
    ab48:	429e      	cmp	r6, r3
    ab4a:	d036      	beq.n	abba <__aeabi_dsub+0x1f6>
    ab4c:	0324      	lsls	r4, r4, #12
    ab4e:	0576      	lsls	r6, r6, #21
    ab50:	0b24      	lsrs	r4, r4, #12
    ab52:	0d76      	lsrs	r6, r6, #21
    ab54:	e7db      	b.n	ab0e <__aeabi_dsub+0x14a>
    ab56:	4663      	mov	r3, ip
    ab58:	1af3      	subs	r3, r6, r3
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	dc00      	bgt.n	ab60 <__aeabi_dsub+0x19c>
    ab5e:	e094      	b.n	ac8a <__aeabi_dsub+0x2c6>
    ab60:	4660      	mov	r0, ip
    ab62:	2800      	cmp	r0, #0
    ab64:	d035      	beq.n	abd2 <__aeabi_dsub+0x20e>
    ab66:	4868      	ldr	r0, [pc, #416]	; (ad08 <__aeabi_dsub+0x344>)
    ab68:	4286      	cmp	r6, r0
    ab6a:	d0b1      	beq.n	aad0 <__aeabi_dsub+0x10c>
    ab6c:	2780      	movs	r7, #128	; 0x80
    ab6e:	043f      	lsls	r7, r7, #16
    ab70:	4339      	orrs	r1, r7
    ab72:	2b38      	cmp	r3, #56	; 0x38
    ab74:	dc00      	bgt.n	ab78 <__aeabi_dsub+0x1b4>
    ab76:	e0fd      	b.n	ad74 <__aeabi_dsub+0x3b0>
    ab78:	430a      	orrs	r2, r1
    ab7a:	0017      	movs	r7, r2
    ab7c:	2100      	movs	r1, #0
    ab7e:	1e7a      	subs	r2, r7, #1
    ab80:	4197      	sbcs	r7, r2
    ab82:	4457      	add	r7, sl
    ab84:	4557      	cmp	r7, sl
    ab86:	4180      	sbcs	r0, r0
    ab88:	1909      	adds	r1, r1, r4
    ab8a:	4244      	negs	r4, r0
    ab8c:	190c      	adds	r4, r1, r4
    ab8e:	0223      	lsls	r3, r4, #8
    ab90:	d53a      	bpl.n	ac08 <__aeabi_dsub+0x244>
    ab92:	4b5d      	ldr	r3, [pc, #372]	; (ad08 <__aeabi_dsub+0x344>)
    ab94:	3601      	adds	r6, #1
    ab96:	429e      	cmp	r6, r3
    ab98:	d100      	bne.n	ab9c <__aeabi_dsub+0x1d8>
    ab9a:	e14b      	b.n	ae34 <__aeabi_dsub+0x470>
    ab9c:	2201      	movs	r2, #1
    ab9e:	4b5b      	ldr	r3, [pc, #364]	; (ad0c <__aeabi_dsub+0x348>)
    aba0:	401c      	ands	r4, r3
    aba2:	087b      	lsrs	r3, r7, #1
    aba4:	4017      	ands	r7, r2
    aba6:	431f      	orrs	r7, r3
    aba8:	07e2      	lsls	r2, r4, #31
    abaa:	4317      	orrs	r7, r2
    abac:	0864      	lsrs	r4, r4, #1
    abae:	e78f      	b.n	aad0 <__aeabi_dsub+0x10c>
    abb0:	0008      	movs	r0, r1
    abb2:	4310      	orrs	r0, r2
    abb4:	d000      	beq.n	abb8 <__aeabi_dsub+0x1f4>
    abb6:	e724      	b.n	aa02 <__aeabi_dsub+0x3e>
    abb8:	e721      	b.n	a9fe <__aeabi_dsub+0x3a>
    abba:	0023      	movs	r3, r4
    abbc:	433b      	orrs	r3, r7
    abbe:	d100      	bne.n	abc2 <__aeabi_dsub+0x1fe>
    abc0:	e1b9      	b.n	af36 <__aeabi_dsub+0x572>
    abc2:	2280      	movs	r2, #128	; 0x80
    abc4:	0312      	lsls	r2, r2, #12
    abc6:	4314      	orrs	r4, r2
    abc8:	0324      	lsls	r4, r4, #12
    abca:	0b24      	lsrs	r4, r4, #12
    abcc:	e79f      	b.n	ab0e <__aeabi_dsub+0x14a>
    abce:	002e      	movs	r6, r5
    abd0:	e77e      	b.n	aad0 <__aeabi_dsub+0x10c>
    abd2:	0008      	movs	r0, r1
    abd4:	4310      	orrs	r0, r2
    abd6:	d100      	bne.n	abda <__aeabi_dsub+0x216>
    abd8:	e0ca      	b.n	ad70 <__aeabi_dsub+0x3ac>
    abda:	1e58      	subs	r0, r3, #1
    abdc:	4684      	mov	ip, r0
    abde:	2800      	cmp	r0, #0
    abe0:	d000      	beq.n	abe4 <__aeabi_dsub+0x220>
    abe2:	e0e7      	b.n	adb4 <__aeabi_dsub+0x3f0>
    abe4:	4452      	add	r2, sl
    abe6:	4552      	cmp	r2, sl
    abe8:	4180      	sbcs	r0, r0
    abea:	1864      	adds	r4, r4, r1
    abec:	4240      	negs	r0, r0
    abee:	1824      	adds	r4, r4, r0
    abf0:	0017      	movs	r7, r2
    abf2:	2601      	movs	r6, #1
    abf4:	0223      	lsls	r3, r4, #8
    abf6:	d507      	bpl.n	ac08 <__aeabi_dsub+0x244>
    abf8:	2602      	movs	r6, #2
    abfa:	e7cf      	b.n	ab9c <__aeabi_dsub+0x1d8>
    abfc:	4664      	mov	r4, ip
    abfe:	432c      	orrs	r4, r5
    ac00:	d100      	bne.n	ac04 <__aeabi_dsub+0x240>
    ac02:	e1b3      	b.n	af6c <__aeabi_dsub+0x5a8>
    ac04:	002c      	movs	r4, r5
    ac06:	4667      	mov	r7, ip
    ac08:	077b      	lsls	r3, r7, #29
    ac0a:	d000      	beq.n	ac0e <__aeabi_dsub+0x24a>
    ac0c:	e762      	b.n	aad4 <__aeabi_dsub+0x110>
    ac0e:	0763      	lsls	r3, r4, #29
    ac10:	08ff      	lsrs	r7, r7, #3
    ac12:	431f      	orrs	r7, r3
    ac14:	2501      	movs	r5, #1
    ac16:	4643      	mov	r3, r8
    ac18:	08e4      	lsrs	r4, r4, #3
    ac1a:	401d      	ands	r5, r3
    ac1c:	e793      	b.n	ab46 <__aeabi_dsub+0x182>
    ac1e:	2d00      	cmp	r5, #0
    ac20:	d178      	bne.n	ad14 <__aeabi_dsub+0x350>
    ac22:	1c75      	adds	r5, r6, #1
    ac24:	056d      	lsls	r5, r5, #21
    ac26:	0d6d      	lsrs	r5, r5, #21
    ac28:	2d01      	cmp	r5, #1
    ac2a:	dc00      	bgt.n	ac2e <__aeabi_dsub+0x26a>
    ac2c:	e0f2      	b.n	ae14 <__aeabi_dsub+0x450>
    ac2e:	4650      	mov	r0, sl
    ac30:	1a80      	subs	r0, r0, r2
    ac32:	4582      	cmp	sl, r0
    ac34:	41bf      	sbcs	r7, r7
    ac36:	1a65      	subs	r5, r4, r1
    ac38:	427f      	negs	r7, r7
    ac3a:	1bed      	subs	r5, r5, r7
    ac3c:	4684      	mov	ip, r0
    ac3e:	0228      	lsls	r0, r5, #8
    ac40:	d400      	bmi.n	ac44 <__aeabi_dsub+0x280>
    ac42:	e08c      	b.n	ad5e <__aeabi_dsub+0x39a>
    ac44:	4650      	mov	r0, sl
    ac46:	1a17      	subs	r7, r2, r0
    ac48:	42ba      	cmp	r2, r7
    ac4a:	4192      	sbcs	r2, r2
    ac4c:	1b0c      	subs	r4, r1, r4
    ac4e:	4255      	negs	r5, r2
    ac50:	1b65      	subs	r5, r4, r5
    ac52:	4698      	mov	r8, r3
    ac54:	e714      	b.n	aa80 <__aeabi_dsub+0xbc>
    ac56:	2501      	movs	r5, #1
    ac58:	4643      	mov	r3, r8
    ac5a:	2400      	movs	r4, #0
    ac5c:	401d      	ands	r5, r3
    ac5e:	2700      	movs	r7, #0
    ac60:	e755      	b.n	ab0e <__aeabi_dsub+0x14a>
    ac62:	4c2a      	ldr	r4, [pc, #168]	; (ad0c <__aeabi_dsub+0x348>)
    ac64:	1af6      	subs	r6, r6, r3
    ac66:	402c      	ands	r4, r5
    ac68:	e732      	b.n	aad0 <__aeabi_dsub+0x10c>
    ac6a:	003d      	movs	r5, r7
    ac6c:	3828      	subs	r0, #40	; 0x28
    ac6e:	4085      	lsls	r5, r0
    ac70:	2700      	movs	r7, #0
    ac72:	e717      	b.n	aaa4 <__aeabi_dsub+0xe0>
    ac74:	0038      	movs	r0, r7
    ac76:	f000 fb45 	bl	b304 <__clzsi2>
    ac7a:	3020      	adds	r0, #32
    ac7c:	e706      	b.n	aa8c <__aeabi_dsub+0xc8>
    ac7e:	430a      	orrs	r2, r1
    ac80:	0017      	movs	r7, r2
    ac82:	2100      	movs	r1, #0
    ac84:	1e7a      	subs	r2, r7, #1
    ac86:	4197      	sbcs	r7, r2
    ac88:	e6ee      	b.n	aa68 <__aeabi_dsub+0xa4>
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d000      	beq.n	ac90 <__aeabi_dsub+0x2cc>
    ac8e:	e0e5      	b.n	ae5c <__aeabi_dsub+0x498>
    ac90:	1c73      	adds	r3, r6, #1
    ac92:	469c      	mov	ip, r3
    ac94:	055b      	lsls	r3, r3, #21
    ac96:	0d5b      	lsrs	r3, r3, #21
    ac98:	2b01      	cmp	r3, #1
    ac9a:	dc00      	bgt.n	ac9e <__aeabi_dsub+0x2da>
    ac9c:	e09f      	b.n	adde <__aeabi_dsub+0x41a>
    ac9e:	4b1a      	ldr	r3, [pc, #104]	; (ad08 <__aeabi_dsub+0x344>)
    aca0:	459c      	cmp	ip, r3
    aca2:	d100      	bne.n	aca6 <__aeabi_dsub+0x2e2>
    aca4:	e0c5      	b.n	ae32 <__aeabi_dsub+0x46e>
    aca6:	4452      	add	r2, sl
    aca8:	4552      	cmp	r2, sl
    acaa:	4180      	sbcs	r0, r0
    acac:	1864      	adds	r4, r4, r1
    acae:	4240      	negs	r0, r0
    acb0:	1824      	adds	r4, r4, r0
    acb2:	07e7      	lsls	r7, r4, #31
    acb4:	0852      	lsrs	r2, r2, #1
    acb6:	4317      	orrs	r7, r2
    acb8:	0864      	lsrs	r4, r4, #1
    acba:	4666      	mov	r6, ip
    acbc:	e708      	b.n	aad0 <__aeabi_dsub+0x10c>
    acbe:	4812      	ldr	r0, [pc, #72]	; (ad08 <__aeabi_dsub+0x344>)
    acc0:	4285      	cmp	r5, r0
    acc2:	d100      	bne.n	acc6 <__aeabi_dsub+0x302>
    acc4:	e085      	b.n	add2 <__aeabi_dsub+0x40e>
    acc6:	001d      	movs	r5, r3
    acc8:	e6bc      	b.n	aa44 <__aeabi_dsub+0x80>
    acca:	0029      	movs	r1, r5
    accc:	3e1f      	subs	r6, #31
    acce:	40f1      	lsrs	r1, r6
    acd0:	2b20      	cmp	r3, #32
    acd2:	d100      	bne.n	acd6 <__aeabi_dsub+0x312>
    acd4:	e07f      	b.n	add6 <__aeabi_dsub+0x412>
    acd6:	2240      	movs	r2, #64	; 0x40
    acd8:	1ad3      	subs	r3, r2, r3
    acda:	409d      	lsls	r5, r3
    acdc:	432f      	orrs	r7, r5
    acde:	1e7d      	subs	r5, r7, #1
    ace0:	41af      	sbcs	r7, r5
    ace2:	2400      	movs	r4, #0
    ace4:	430f      	orrs	r7, r1
    ace6:	2600      	movs	r6, #0
    ace8:	e78e      	b.n	ac08 <__aeabi_dsub+0x244>
    acea:	002b      	movs	r3, r5
    acec:	000f      	movs	r7, r1
    acee:	3b20      	subs	r3, #32
    acf0:	40df      	lsrs	r7, r3
    acf2:	2d20      	cmp	r5, #32
    acf4:	d071      	beq.n	adda <__aeabi_dsub+0x416>
    acf6:	2340      	movs	r3, #64	; 0x40
    acf8:	1b5d      	subs	r5, r3, r5
    acfa:	40a9      	lsls	r1, r5
    acfc:	430a      	orrs	r2, r1
    acfe:	1e51      	subs	r1, r2, #1
    ad00:	418a      	sbcs	r2, r1
    ad02:	2100      	movs	r1, #0
    ad04:	4317      	orrs	r7, r2
    ad06:	e6af      	b.n	aa68 <__aeabi_dsub+0xa4>
    ad08:	000007ff 	.word	0x000007ff
    ad0c:	ff7fffff 	.word	0xff7fffff
    ad10:	800fffff 	.word	0x800fffff
    ad14:	2e00      	cmp	r6, #0
    ad16:	d03e      	beq.n	ad96 <__aeabi_dsub+0x3d2>
    ad18:	4eb3      	ldr	r6, [pc, #716]	; (afe8 <__aeabi_dsub+0x624>)
    ad1a:	45b4      	cmp	ip, r6
    ad1c:	d045      	beq.n	adaa <__aeabi_dsub+0x3e6>
    ad1e:	2680      	movs	r6, #128	; 0x80
    ad20:	0436      	lsls	r6, r6, #16
    ad22:	426d      	negs	r5, r5
    ad24:	4334      	orrs	r4, r6
    ad26:	2d38      	cmp	r5, #56	; 0x38
    ad28:	dd00      	ble.n	ad2c <__aeabi_dsub+0x368>
    ad2a:	e0a8      	b.n	ae7e <__aeabi_dsub+0x4ba>
    ad2c:	2d1f      	cmp	r5, #31
    ad2e:	dd00      	ble.n	ad32 <__aeabi_dsub+0x36e>
    ad30:	e11f      	b.n	af72 <__aeabi_dsub+0x5ae>
    ad32:	2620      	movs	r6, #32
    ad34:	0027      	movs	r7, r4
    ad36:	4650      	mov	r0, sl
    ad38:	1b76      	subs	r6, r6, r5
    ad3a:	40b7      	lsls	r7, r6
    ad3c:	40e8      	lsrs	r0, r5
    ad3e:	4307      	orrs	r7, r0
    ad40:	4650      	mov	r0, sl
    ad42:	40b0      	lsls	r0, r6
    ad44:	1e46      	subs	r6, r0, #1
    ad46:	41b0      	sbcs	r0, r6
    ad48:	40ec      	lsrs	r4, r5
    ad4a:	4338      	orrs	r0, r7
    ad4c:	1a17      	subs	r7, r2, r0
    ad4e:	42ba      	cmp	r2, r7
    ad50:	4192      	sbcs	r2, r2
    ad52:	1b0c      	subs	r4, r1, r4
    ad54:	4252      	negs	r2, r2
    ad56:	1aa4      	subs	r4, r4, r2
    ad58:	4666      	mov	r6, ip
    ad5a:	4698      	mov	r8, r3
    ad5c:	e68b      	b.n	aa76 <__aeabi_dsub+0xb2>
    ad5e:	4664      	mov	r4, ip
    ad60:	4667      	mov	r7, ip
    ad62:	432c      	orrs	r4, r5
    ad64:	d000      	beq.n	ad68 <__aeabi_dsub+0x3a4>
    ad66:	e68b      	b.n	aa80 <__aeabi_dsub+0xbc>
    ad68:	2500      	movs	r5, #0
    ad6a:	2600      	movs	r6, #0
    ad6c:	2700      	movs	r7, #0
    ad6e:	e6ea      	b.n	ab46 <__aeabi_dsub+0x182>
    ad70:	001e      	movs	r6, r3
    ad72:	e6ad      	b.n	aad0 <__aeabi_dsub+0x10c>
    ad74:	2b1f      	cmp	r3, #31
    ad76:	dc60      	bgt.n	ae3a <__aeabi_dsub+0x476>
    ad78:	2720      	movs	r7, #32
    ad7a:	1af8      	subs	r0, r7, r3
    ad7c:	000f      	movs	r7, r1
    ad7e:	4684      	mov	ip, r0
    ad80:	4087      	lsls	r7, r0
    ad82:	0010      	movs	r0, r2
    ad84:	40d8      	lsrs	r0, r3
    ad86:	4307      	orrs	r7, r0
    ad88:	4660      	mov	r0, ip
    ad8a:	4082      	lsls	r2, r0
    ad8c:	1e50      	subs	r0, r2, #1
    ad8e:	4182      	sbcs	r2, r0
    ad90:	40d9      	lsrs	r1, r3
    ad92:	4317      	orrs	r7, r2
    ad94:	e6f5      	b.n	ab82 <__aeabi_dsub+0x1be>
    ad96:	0026      	movs	r6, r4
    ad98:	4650      	mov	r0, sl
    ad9a:	4306      	orrs	r6, r0
    ad9c:	d005      	beq.n	adaa <__aeabi_dsub+0x3e6>
    ad9e:	43ed      	mvns	r5, r5
    ada0:	2d00      	cmp	r5, #0
    ada2:	d0d3      	beq.n	ad4c <__aeabi_dsub+0x388>
    ada4:	4e90      	ldr	r6, [pc, #576]	; (afe8 <__aeabi_dsub+0x624>)
    ada6:	45b4      	cmp	ip, r6
    ada8:	d1bd      	bne.n	ad26 <__aeabi_dsub+0x362>
    adaa:	000c      	movs	r4, r1
    adac:	0017      	movs	r7, r2
    adae:	4666      	mov	r6, ip
    adb0:	4698      	mov	r8, r3
    adb2:	e68d      	b.n	aad0 <__aeabi_dsub+0x10c>
    adb4:	488c      	ldr	r0, [pc, #560]	; (afe8 <__aeabi_dsub+0x624>)
    adb6:	4283      	cmp	r3, r0
    adb8:	d00b      	beq.n	add2 <__aeabi_dsub+0x40e>
    adba:	4663      	mov	r3, ip
    adbc:	e6d9      	b.n	ab72 <__aeabi_dsub+0x1ae>
    adbe:	2d00      	cmp	r5, #0
    adc0:	d000      	beq.n	adc4 <__aeabi_dsub+0x400>
    adc2:	e096      	b.n	aef2 <__aeabi_dsub+0x52e>
    adc4:	0008      	movs	r0, r1
    adc6:	4310      	orrs	r0, r2
    adc8:	d100      	bne.n	adcc <__aeabi_dsub+0x408>
    adca:	e0e2      	b.n	af92 <__aeabi_dsub+0x5ce>
    adcc:	000c      	movs	r4, r1
    adce:	0017      	movs	r7, r2
    add0:	4698      	mov	r8, r3
    add2:	4e85      	ldr	r6, [pc, #532]	; (afe8 <__aeabi_dsub+0x624>)
    add4:	e67c      	b.n	aad0 <__aeabi_dsub+0x10c>
    add6:	2500      	movs	r5, #0
    add8:	e780      	b.n	acdc <__aeabi_dsub+0x318>
    adda:	2100      	movs	r1, #0
    addc:	e78e      	b.n	acfc <__aeabi_dsub+0x338>
    adde:	0023      	movs	r3, r4
    ade0:	4650      	mov	r0, sl
    ade2:	4303      	orrs	r3, r0
    ade4:	2e00      	cmp	r6, #0
    ade6:	d000      	beq.n	adea <__aeabi_dsub+0x426>
    ade8:	e0a8      	b.n	af3c <__aeabi_dsub+0x578>
    adea:	2b00      	cmp	r3, #0
    adec:	d100      	bne.n	adf0 <__aeabi_dsub+0x42c>
    adee:	e0de      	b.n	afae <__aeabi_dsub+0x5ea>
    adf0:	000b      	movs	r3, r1
    adf2:	4313      	orrs	r3, r2
    adf4:	d100      	bne.n	adf8 <__aeabi_dsub+0x434>
    adf6:	e66b      	b.n	aad0 <__aeabi_dsub+0x10c>
    adf8:	4452      	add	r2, sl
    adfa:	4552      	cmp	r2, sl
    adfc:	4180      	sbcs	r0, r0
    adfe:	1864      	adds	r4, r4, r1
    ae00:	4240      	negs	r0, r0
    ae02:	1824      	adds	r4, r4, r0
    ae04:	0017      	movs	r7, r2
    ae06:	0223      	lsls	r3, r4, #8
    ae08:	d400      	bmi.n	ae0c <__aeabi_dsub+0x448>
    ae0a:	e6fd      	b.n	ac08 <__aeabi_dsub+0x244>
    ae0c:	4b77      	ldr	r3, [pc, #476]	; (afec <__aeabi_dsub+0x628>)
    ae0e:	4666      	mov	r6, ip
    ae10:	401c      	ands	r4, r3
    ae12:	e65d      	b.n	aad0 <__aeabi_dsub+0x10c>
    ae14:	0025      	movs	r5, r4
    ae16:	4650      	mov	r0, sl
    ae18:	4305      	orrs	r5, r0
    ae1a:	2e00      	cmp	r6, #0
    ae1c:	d1cf      	bne.n	adbe <__aeabi_dsub+0x3fa>
    ae1e:	2d00      	cmp	r5, #0
    ae20:	d14f      	bne.n	aec2 <__aeabi_dsub+0x4fe>
    ae22:	000c      	movs	r4, r1
    ae24:	4314      	orrs	r4, r2
    ae26:	d100      	bne.n	ae2a <__aeabi_dsub+0x466>
    ae28:	e0a0      	b.n	af6c <__aeabi_dsub+0x5a8>
    ae2a:	000c      	movs	r4, r1
    ae2c:	0017      	movs	r7, r2
    ae2e:	4698      	mov	r8, r3
    ae30:	e64e      	b.n	aad0 <__aeabi_dsub+0x10c>
    ae32:	4666      	mov	r6, ip
    ae34:	2400      	movs	r4, #0
    ae36:	2700      	movs	r7, #0
    ae38:	e685      	b.n	ab46 <__aeabi_dsub+0x182>
    ae3a:	001f      	movs	r7, r3
    ae3c:	0008      	movs	r0, r1
    ae3e:	3f20      	subs	r7, #32
    ae40:	40f8      	lsrs	r0, r7
    ae42:	0007      	movs	r7, r0
    ae44:	2b20      	cmp	r3, #32
    ae46:	d100      	bne.n	ae4a <__aeabi_dsub+0x486>
    ae48:	e08e      	b.n	af68 <__aeabi_dsub+0x5a4>
    ae4a:	2040      	movs	r0, #64	; 0x40
    ae4c:	1ac3      	subs	r3, r0, r3
    ae4e:	4099      	lsls	r1, r3
    ae50:	430a      	orrs	r2, r1
    ae52:	1e51      	subs	r1, r2, #1
    ae54:	418a      	sbcs	r2, r1
    ae56:	2100      	movs	r1, #0
    ae58:	4317      	orrs	r7, r2
    ae5a:	e692      	b.n	ab82 <__aeabi_dsub+0x1be>
    ae5c:	2e00      	cmp	r6, #0
    ae5e:	d114      	bne.n	ae8a <__aeabi_dsub+0x4c6>
    ae60:	0026      	movs	r6, r4
    ae62:	4650      	mov	r0, sl
    ae64:	4306      	orrs	r6, r0
    ae66:	d062      	beq.n	af2e <__aeabi_dsub+0x56a>
    ae68:	43db      	mvns	r3, r3
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d15c      	bne.n	af28 <__aeabi_dsub+0x564>
    ae6e:	1887      	adds	r7, r0, r2
    ae70:	4297      	cmp	r7, r2
    ae72:	4192      	sbcs	r2, r2
    ae74:	1864      	adds	r4, r4, r1
    ae76:	4252      	negs	r2, r2
    ae78:	18a4      	adds	r4, r4, r2
    ae7a:	4666      	mov	r6, ip
    ae7c:	e687      	b.n	ab8e <__aeabi_dsub+0x1ca>
    ae7e:	4650      	mov	r0, sl
    ae80:	4320      	orrs	r0, r4
    ae82:	1e44      	subs	r4, r0, #1
    ae84:	41a0      	sbcs	r0, r4
    ae86:	2400      	movs	r4, #0
    ae88:	e760      	b.n	ad4c <__aeabi_dsub+0x388>
    ae8a:	4e57      	ldr	r6, [pc, #348]	; (afe8 <__aeabi_dsub+0x624>)
    ae8c:	45b4      	cmp	ip, r6
    ae8e:	d04e      	beq.n	af2e <__aeabi_dsub+0x56a>
    ae90:	2680      	movs	r6, #128	; 0x80
    ae92:	0436      	lsls	r6, r6, #16
    ae94:	425b      	negs	r3, r3
    ae96:	4334      	orrs	r4, r6
    ae98:	2b38      	cmp	r3, #56	; 0x38
    ae9a:	dd00      	ble.n	ae9e <__aeabi_dsub+0x4da>
    ae9c:	e07f      	b.n	af9e <__aeabi_dsub+0x5da>
    ae9e:	2b1f      	cmp	r3, #31
    aea0:	dd00      	ble.n	aea4 <__aeabi_dsub+0x4e0>
    aea2:	e08b      	b.n	afbc <__aeabi_dsub+0x5f8>
    aea4:	2620      	movs	r6, #32
    aea6:	0027      	movs	r7, r4
    aea8:	4650      	mov	r0, sl
    aeaa:	1af6      	subs	r6, r6, r3
    aeac:	40b7      	lsls	r7, r6
    aeae:	40d8      	lsrs	r0, r3
    aeb0:	4307      	orrs	r7, r0
    aeb2:	4650      	mov	r0, sl
    aeb4:	40b0      	lsls	r0, r6
    aeb6:	1e46      	subs	r6, r0, #1
    aeb8:	41b0      	sbcs	r0, r6
    aeba:	4307      	orrs	r7, r0
    aebc:	40dc      	lsrs	r4, r3
    aebe:	18bf      	adds	r7, r7, r2
    aec0:	e7d6      	b.n	ae70 <__aeabi_dsub+0x4ac>
    aec2:	000d      	movs	r5, r1
    aec4:	4315      	orrs	r5, r2
    aec6:	d100      	bne.n	aeca <__aeabi_dsub+0x506>
    aec8:	e602      	b.n	aad0 <__aeabi_dsub+0x10c>
    aeca:	4650      	mov	r0, sl
    aecc:	1a80      	subs	r0, r0, r2
    aece:	4582      	cmp	sl, r0
    aed0:	41bf      	sbcs	r7, r7
    aed2:	1a65      	subs	r5, r4, r1
    aed4:	427f      	negs	r7, r7
    aed6:	1bed      	subs	r5, r5, r7
    aed8:	4684      	mov	ip, r0
    aeda:	0228      	lsls	r0, r5, #8
    aedc:	d400      	bmi.n	aee0 <__aeabi_dsub+0x51c>
    aede:	e68d      	b.n	abfc <__aeabi_dsub+0x238>
    aee0:	4650      	mov	r0, sl
    aee2:	1a17      	subs	r7, r2, r0
    aee4:	42ba      	cmp	r2, r7
    aee6:	4192      	sbcs	r2, r2
    aee8:	1b0c      	subs	r4, r1, r4
    aeea:	4252      	negs	r2, r2
    aeec:	1aa4      	subs	r4, r4, r2
    aeee:	4698      	mov	r8, r3
    aef0:	e5ee      	b.n	aad0 <__aeabi_dsub+0x10c>
    aef2:	000d      	movs	r5, r1
    aef4:	4315      	orrs	r5, r2
    aef6:	d100      	bne.n	aefa <__aeabi_dsub+0x536>
    aef8:	e76b      	b.n	add2 <__aeabi_dsub+0x40e>
    aefa:	4650      	mov	r0, sl
    aefc:	0767      	lsls	r7, r4, #29
    aefe:	08c0      	lsrs	r0, r0, #3
    af00:	4307      	orrs	r7, r0
    af02:	2080      	movs	r0, #128	; 0x80
    af04:	08e4      	lsrs	r4, r4, #3
    af06:	0300      	lsls	r0, r0, #12
    af08:	4204      	tst	r4, r0
    af0a:	d007      	beq.n	af1c <__aeabi_dsub+0x558>
    af0c:	08cd      	lsrs	r5, r1, #3
    af0e:	4205      	tst	r5, r0
    af10:	d104      	bne.n	af1c <__aeabi_dsub+0x558>
    af12:	002c      	movs	r4, r5
    af14:	4698      	mov	r8, r3
    af16:	08d7      	lsrs	r7, r2, #3
    af18:	0749      	lsls	r1, r1, #29
    af1a:	430f      	orrs	r7, r1
    af1c:	0f7b      	lsrs	r3, r7, #29
    af1e:	00e4      	lsls	r4, r4, #3
    af20:	431c      	orrs	r4, r3
    af22:	00ff      	lsls	r7, r7, #3
    af24:	4e30      	ldr	r6, [pc, #192]	; (afe8 <__aeabi_dsub+0x624>)
    af26:	e5d3      	b.n	aad0 <__aeabi_dsub+0x10c>
    af28:	4e2f      	ldr	r6, [pc, #188]	; (afe8 <__aeabi_dsub+0x624>)
    af2a:	45b4      	cmp	ip, r6
    af2c:	d1b4      	bne.n	ae98 <__aeabi_dsub+0x4d4>
    af2e:	000c      	movs	r4, r1
    af30:	0017      	movs	r7, r2
    af32:	4666      	mov	r6, ip
    af34:	e5cc      	b.n	aad0 <__aeabi_dsub+0x10c>
    af36:	2700      	movs	r7, #0
    af38:	2400      	movs	r4, #0
    af3a:	e5e8      	b.n	ab0e <__aeabi_dsub+0x14a>
    af3c:	2b00      	cmp	r3, #0
    af3e:	d039      	beq.n	afb4 <__aeabi_dsub+0x5f0>
    af40:	000b      	movs	r3, r1
    af42:	4313      	orrs	r3, r2
    af44:	d100      	bne.n	af48 <__aeabi_dsub+0x584>
    af46:	e744      	b.n	add2 <__aeabi_dsub+0x40e>
    af48:	08c0      	lsrs	r0, r0, #3
    af4a:	0767      	lsls	r7, r4, #29
    af4c:	4307      	orrs	r7, r0
    af4e:	2080      	movs	r0, #128	; 0x80
    af50:	08e4      	lsrs	r4, r4, #3
    af52:	0300      	lsls	r0, r0, #12
    af54:	4204      	tst	r4, r0
    af56:	d0e1      	beq.n	af1c <__aeabi_dsub+0x558>
    af58:	08cb      	lsrs	r3, r1, #3
    af5a:	4203      	tst	r3, r0
    af5c:	d1de      	bne.n	af1c <__aeabi_dsub+0x558>
    af5e:	08d7      	lsrs	r7, r2, #3
    af60:	0749      	lsls	r1, r1, #29
    af62:	430f      	orrs	r7, r1
    af64:	001c      	movs	r4, r3
    af66:	e7d9      	b.n	af1c <__aeabi_dsub+0x558>
    af68:	2100      	movs	r1, #0
    af6a:	e771      	b.n	ae50 <__aeabi_dsub+0x48c>
    af6c:	2500      	movs	r5, #0
    af6e:	2700      	movs	r7, #0
    af70:	e5e9      	b.n	ab46 <__aeabi_dsub+0x182>
    af72:	002e      	movs	r6, r5
    af74:	0027      	movs	r7, r4
    af76:	3e20      	subs	r6, #32
    af78:	40f7      	lsrs	r7, r6
    af7a:	2d20      	cmp	r5, #32
    af7c:	d02f      	beq.n	afde <__aeabi_dsub+0x61a>
    af7e:	2640      	movs	r6, #64	; 0x40
    af80:	1b75      	subs	r5, r6, r5
    af82:	40ac      	lsls	r4, r5
    af84:	4650      	mov	r0, sl
    af86:	4320      	orrs	r0, r4
    af88:	1e44      	subs	r4, r0, #1
    af8a:	41a0      	sbcs	r0, r4
    af8c:	2400      	movs	r4, #0
    af8e:	4338      	orrs	r0, r7
    af90:	e6dc      	b.n	ad4c <__aeabi_dsub+0x388>
    af92:	2480      	movs	r4, #128	; 0x80
    af94:	2500      	movs	r5, #0
    af96:	0324      	lsls	r4, r4, #12
    af98:	4e13      	ldr	r6, [pc, #76]	; (afe8 <__aeabi_dsub+0x624>)
    af9a:	2700      	movs	r7, #0
    af9c:	e5d3      	b.n	ab46 <__aeabi_dsub+0x182>
    af9e:	4650      	mov	r0, sl
    afa0:	4320      	orrs	r0, r4
    afa2:	0007      	movs	r7, r0
    afa4:	1e78      	subs	r0, r7, #1
    afa6:	4187      	sbcs	r7, r0
    afa8:	2400      	movs	r4, #0
    afaa:	18bf      	adds	r7, r7, r2
    afac:	e760      	b.n	ae70 <__aeabi_dsub+0x4ac>
    afae:	000c      	movs	r4, r1
    afb0:	0017      	movs	r7, r2
    afb2:	e58d      	b.n	aad0 <__aeabi_dsub+0x10c>
    afb4:	000c      	movs	r4, r1
    afb6:	0017      	movs	r7, r2
    afb8:	4e0b      	ldr	r6, [pc, #44]	; (afe8 <__aeabi_dsub+0x624>)
    afba:	e589      	b.n	aad0 <__aeabi_dsub+0x10c>
    afbc:	001e      	movs	r6, r3
    afbe:	0027      	movs	r7, r4
    afc0:	3e20      	subs	r6, #32
    afc2:	40f7      	lsrs	r7, r6
    afc4:	2b20      	cmp	r3, #32
    afc6:	d00c      	beq.n	afe2 <__aeabi_dsub+0x61e>
    afc8:	2640      	movs	r6, #64	; 0x40
    afca:	1af3      	subs	r3, r6, r3
    afcc:	409c      	lsls	r4, r3
    afce:	4650      	mov	r0, sl
    afd0:	4320      	orrs	r0, r4
    afd2:	1e44      	subs	r4, r0, #1
    afd4:	41a0      	sbcs	r0, r4
    afd6:	4307      	orrs	r7, r0
    afd8:	2400      	movs	r4, #0
    afda:	18bf      	adds	r7, r7, r2
    afdc:	e748      	b.n	ae70 <__aeabi_dsub+0x4ac>
    afde:	2400      	movs	r4, #0
    afe0:	e7d0      	b.n	af84 <__aeabi_dsub+0x5c0>
    afe2:	2400      	movs	r4, #0
    afe4:	e7f3      	b.n	afce <__aeabi_dsub+0x60a>
    afe6:	46c0      	nop			; (mov r8, r8)
    afe8:	000007ff 	.word	0x000007ff
    afec:	ff7fffff 	.word	0xff7fffff

0000aff0 <__aeabi_d2iz>:
    aff0:	b530      	push	{r4, r5, lr}
    aff2:	4d13      	ldr	r5, [pc, #76]	; (b040 <__aeabi_d2iz+0x50>)
    aff4:	030a      	lsls	r2, r1, #12
    aff6:	004b      	lsls	r3, r1, #1
    aff8:	0b12      	lsrs	r2, r2, #12
    affa:	0d5b      	lsrs	r3, r3, #21
    affc:	0fc9      	lsrs	r1, r1, #31
    affe:	2400      	movs	r4, #0
    b000:	42ab      	cmp	r3, r5
    b002:	dd10      	ble.n	b026 <__aeabi_d2iz+0x36>
    b004:	4c0f      	ldr	r4, [pc, #60]	; (b044 <__aeabi_d2iz+0x54>)
    b006:	42a3      	cmp	r3, r4
    b008:	dc0f      	bgt.n	b02a <__aeabi_d2iz+0x3a>
    b00a:	2480      	movs	r4, #128	; 0x80
    b00c:	4d0e      	ldr	r5, [pc, #56]	; (b048 <__aeabi_d2iz+0x58>)
    b00e:	0364      	lsls	r4, r4, #13
    b010:	4322      	orrs	r2, r4
    b012:	1aed      	subs	r5, r5, r3
    b014:	2d1f      	cmp	r5, #31
    b016:	dd0b      	ble.n	b030 <__aeabi_d2iz+0x40>
    b018:	480c      	ldr	r0, [pc, #48]	; (b04c <__aeabi_d2iz+0x5c>)
    b01a:	1ac3      	subs	r3, r0, r3
    b01c:	40da      	lsrs	r2, r3
    b01e:	4254      	negs	r4, r2
    b020:	2900      	cmp	r1, #0
    b022:	d100      	bne.n	b026 <__aeabi_d2iz+0x36>
    b024:	0014      	movs	r4, r2
    b026:	0020      	movs	r0, r4
    b028:	bd30      	pop	{r4, r5, pc}
    b02a:	4b09      	ldr	r3, [pc, #36]	; (b050 <__aeabi_d2iz+0x60>)
    b02c:	18cc      	adds	r4, r1, r3
    b02e:	e7fa      	b.n	b026 <__aeabi_d2iz+0x36>
    b030:	4c08      	ldr	r4, [pc, #32]	; (b054 <__aeabi_d2iz+0x64>)
    b032:	40e8      	lsrs	r0, r5
    b034:	46a4      	mov	ip, r4
    b036:	4463      	add	r3, ip
    b038:	409a      	lsls	r2, r3
    b03a:	4302      	orrs	r2, r0
    b03c:	e7ef      	b.n	b01e <__aeabi_d2iz+0x2e>
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	000003fe 	.word	0x000003fe
    b044:	0000041d 	.word	0x0000041d
    b048:	00000433 	.word	0x00000433
    b04c:	00000413 	.word	0x00000413
    b050:	7fffffff 	.word	0x7fffffff
    b054:	fffffbed 	.word	0xfffffbed

0000b058 <__aeabi_i2d>:
    b058:	b570      	push	{r4, r5, r6, lr}
    b05a:	2800      	cmp	r0, #0
    b05c:	d030      	beq.n	b0c0 <__aeabi_i2d+0x68>
    b05e:	17c3      	asrs	r3, r0, #31
    b060:	18c4      	adds	r4, r0, r3
    b062:	405c      	eors	r4, r3
    b064:	0fc5      	lsrs	r5, r0, #31
    b066:	0020      	movs	r0, r4
    b068:	f000 f94c 	bl	b304 <__clzsi2>
    b06c:	4b17      	ldr	r3, [pc, #92]	; (b0cc <__aeabi_i2d+0x74>)
    b06e:	4a18      	ldr	r2, [pc, #96]	; (b0d0 <__aeabi_i2d+0x78>)
    b070:	1a1b      	subs	r3, r3, r0
    b072:	1ad2      	subs	r2, r2, r3
    b074:	2a1f      	cmp	r2, #31
    b076:	dd18      	ble.n	b0aa <__aeabi_i2d+0x52>
    b078:	4a16      	ldr	r2, [pc, #88]	; (b0d4 <__aeabi_i2d+0x7c>)
    b07a:	1ad2      	subs	r2, r2, r3
    b07c:	4094      	lsls	r4, r2
    b07e:	2200      	movs	r2, #0
    b080:	0324      	lsls	r4, r4, #12
    b082:	055b      	lsls	r3, r3, #21
    b084:	0b24      	lsrs	r4, r4, #12
    b086:	0d5b      	lsrs	r3, r3, #21
    b088:	2100      	movs	r1, #0
    b08a:	0010      	movs	r0, r2
    b08c:	0324      	lsls	r4, r4, #12
    b08e:	0d0a      	lsrs	r2, r1, #20
    b090:	0b24      	lsrs	r4, r4, #12
    b092:	0512      	lsls	r2, r2, #20
    b094:	4322      	orrs	r2, r4
    b096:	4c10      	ldr	r4, [pc, #64]	; (b0d8 <__aeabi_i2d+0x80>)
    b098:	051b      	lsls	r3, r3, #20
    b09a:	4022      	ands	r2, r4
    b09c:	4313      	orrs	r3, r2
    b09e:	005b      	lsls	r3, r3, #1
    b0a0:	07ed      	lsls	r5, r5, #31
    b0a2:	085b      	lsrs	r3, r3, #1
    b0a4:	432b      	orrs	r3, r5
    b0a6:	0019      	movs	r1, r3
    b0a8:	bd70      	pop	{r4, r5, r6, pc}
    b0aa:	0021      	movs	r1, r4
    b0ac:	4091      	lsls	r1, r2
    b0ae:	000a      	movs	r2, r1
    b0b0:	210b      	movs	r1, #11
    b0b2:	1a08      	subs	r0, r1, r0
    b0b4:	40c4      	lsrs	r4, r0
    b0b6:	055b      	lsls	r3, r3, #21
    b0b8:	0324      	lsls	r4, r4, #12
    b0ba:	0b24      	lsrs	r4, r4, #12
    b0bc:	0d5b      	lsrs	r3, r3, #21
    b0be:	e7e3      	b.n	b088 <__aeabi_i2d+0x30>
    b0c0:	2500      	movs	r5, #0
    b0c2:	2300      	movs	r3, #0
    b0c4:	2400      	movs	r4, #0
    b0c6:	2200      	movs	r2, #0
    b0c8:	e7de      	b.n	b088 <__aeabi_i2d+0x30>
    b0ca:	46c0      	nop			; (mov r8, r8)
    b0cc:	0000041e 	.word	0x0000041e
    b0d0:	00000433 	.word	0x00000433
    b0d4:	00000413 	.word	0x00000413
    b0d8:	800fffff 	.word	0x800fffff

0000b0dc <__aeabi_ui2d>:
    b0dc:	b510      	push	{r4, lr}
    b0de:	1e04      	subs	r4, r0, #0
    b0e0:	d028      	beq.n	b134 <__aeabi_ui2d+0x58>
    b0e2:	f000 f90f 	bl	b304 <__clzsi2>
    b0e6:	4b15      	ldr	r3, [pc, #84]	; (b13c <__aeabi_ui2d+0x60>)
    b0e8:	4a15      	ldr	r2, [pc, #84]	; (b140 <__aeabi_ui2d+0x64>)
    b0ea:	1a1b      	subs	r3, r3, r0
    b0ec:	1ad2      	subs	r2, r2, r3
    b0ee:	2a1f      	cmp	r2, #31
    b0f0:	dd15      	ble.n	b11e <__aeabi_ui2d+0x42>
    b0f2:	4a14      	ldr	r2, [pc, #80]	; (b144 <__aeabi_ui2d+0x68>)
    b0f4:	1ad2      	subs	r2, r2, r3
    b0f6:	4094      	lsls	r4, r2
    b0f8:	2200      	movs	r2, #0
    b0fa:	0324      	lsls	r4, r4, #12
    b0fc:	055b      	lsls	r3, r3, #21
    b0fe:	0b24      	lsrs	r4, r4, #12
    b100:	0d5b      	lsrs	r3, r3, #21
    b102:	2100      	movs	r1, #0
    b104:	0010      	movs	r0, r2
    b106:	0324      	lsls	r4, r4, #12
    b108:	0d0a      	lsrs	r2, r1, #20
    b10a:	0b24      	lsrs	r4, r4, #12
    b10c:	0512      	lsls	r2, r2, #20
    b10e:	4322      	orrs	r2, r4
    b110:	4c0d      	ldr	r4, [pc, #52]	; (b148 <__aeabi_ui2d+0x6c>)
    b112:	051b      	lsls	r3, r3, #20
    b114:	4022      	ands	r2, r4
    b116:	4313      	orrs	r3, r2
    b118:	005b      	lsls	r3, r3, #1
    b11a:	0859      	lsrs	r1, r3, #1
    b11c:	bd10      	pop	{r4, pc}
    b11e:	0021      	movs	r1, r4
    b120:	4091      	lsls	r1, r2
    b122:	000a      	movs	r2, r1
    b124:	210b      	movs	r1, #11
    b126:	1a08      	subs	r0, r1, r0
    b128:	40c4      	lsrs	r4, r0
    b12a:	055b      	lsls	r3, r3, #21
    b12c:	0324      	lsls	r4, r4, #12
    b12e:	0b24      	lsrs	r4, r4, #12
    b130:	0d5b      	lsrs	r3, r3, #21
    b132:	e7e6      	b.n	b102 <__aeabi_ui2d+0x26>
    b134:	2300      	movs	r3, #0
    b136:	2400      	movs	r4, #0
    b138:	2200      	movs	r2, #0
    b13a:	e7e2      	b.n	b102 <__aeabi_ui2d+0x26>
    b13c:	0000041e 	.word	0x0000041e
    b140:	00000433 	.word	0x00000433
    b144:	00000413 	.word	0x00000413
    b148:	800fffff 	.word	0x800fffff

0000b14c <__aeabi_f2d>:
    b14c:	0041      	lsls	r1, r0, #1
    b14e:	0e09      	lsrs	r1, r1, #24
    b150:	1c4b      	adds	r3, r1, #1
    b152:	b570      	push	{r4, r5, r6, lr}
    b154:	b2db      	uxtb	r3, r3
    b156:	0246      	lsls	r6, r0, #9
    b158:	0a75      	lsrs	r5, r6, #9
    b15a:	0fc4      	lsrs	r4, r0, #31
    b15c:	2b01      	cmp	r3, #1
    b15e:	dd14      	ble.n	b18a <__aeabi_f2d+0x3e>
    b160:	23e0      	movs	r3, #224	; 0xe0
    b162:	009b      	lsls	r3, r3, #2
    b164:	076d      	lsls	r5, r5, #29
    b166:	0b36      	lsrs	r6, r6, #12
    b168:	18cb      	adds	r3, r1, r3
    b16a:	2100      	movs	r1, #0
    b16c:	0d0a      	lsrs	r2, r1, #20
    b16e:	0028      	movs	r0, r5
    b170:	0512      	lsls	r2, r2, #20
    b172:	4d1c      	ldr	r5, [pc, #112]	; (b1e4 <__aeabi_f2d+0x98>)
    b174:	4332      	orrs	r2, r6
    b176:	055b      	lsls	r3, r3, #21
    b178:	402a      	ands	r2, r5
    b17a:	085b      	lsrs	r3, r3, #1
    b17c:	4313      	orrs	r3, r2
    b17e:	005b      	lsls	r3, r3, #1
    b180:	07e4      	lsls	r4, r4, #31
    b182:	085b      	lsrs	r3, r3, #1
    b184:	4323      	orrs	r3, r4
    b186:	0019      	movs	r1, r3
    b188:	bd70      	pop	{r4, r5, r6, pc}
    b18a:	2900      	cmp	r1, #0
    b18c:	d114      	bne.n	b1b8 <__aeabi_f2d+0x6c>
    b18e:	2d00      	cmp	r5, #0
    b190:	d01e      	beq.n	b1d0 <__aeabi_f2d+0x84>
    b192:	0028      	movs	r0, r5
    b194:	f000 f8b6 	bl	b304 <__clzsi2>
    b198:	280a      	cmp	r0, #10
    b19a:	dc1c      	bgt.n	b1d6 <__aeabi_f2d+0x8a>
    b19c:	230b      	movs	r3, #11
    b19e:	002a      	movs	r2, r5
    b1a0:	1a1b      	subs	r3, r3, r0
    b1a2:	40da      	lsrs	r2, r3
    b1a4:	0003      	movs	r3, r0
    b1a6:	3315      	adds	r3, #21
    b1a8:	409d      	lsls	r5, r3
    b1aa:	4b0f      	ldr	r3, [pc, #60]	; (b1e8 <__aeabi_f2d+0x9c>)
    b1ac:	0312      	lsls	r2, r2, #12
    b1ae:	1a1b      	subs	r3, r3, r0
    b1b0:	055b      	lsls	r3, r3, #21
    b1b2:	0b16      	lsrs	r6, r2, #12
    b1b4:	0d5b      	lsrs	r3, r3, #21
    b1b6:	e7d8      	b.n	b16a <__aeabi_f2d+0x1e>
    b1b8:	2d00      	cmp	r5, #0
    b1ba:	d006      	beq.n	b1ca <__aeabi_f2d+0x7e>
    b1bc:	0b32      	lsrs	r2, r6, #12
    b1be:	2680      	movs	r6, #128	; 0x80
    b1c0:	0336      	lsls	r6, r6, #12
    b1c2:	076d      	lsls	r5, r5, #29
    b1c4:	4316      	orrs	r6, r2
    b1c6:	4b09      	ldr	r3, [pc, #36]	; (b1ec <__aeabi_f2d+0xa0>)
    b1c8:	e7cf      	b.n	b16a <__aeabi_f2d+0x1e>
    b1ca:	4b08      	ldr	r3, [pc, #32]	; (b1ec <__aeabi_f2d+0xa0>)
    b1cc:	2600      	movs	r6, #0
    b1ce:	e7cc      	b.n	b16a <__aeabi_f2d+0x1e>
    b1d0:	2300      	movs	r3, #0
    b1d2:	2600      	movs	r6, #0
    b1d4:	e7c9      	b.n	b16a <__aeabi_f2d+0x1e>
    b1d6:	0003      	movs	r3, r0
    b1d8:	002a      	movs	r2, r5
    b1da:	3b0b      	subs	r3, #11
    b1dc:	409a      	lsls	r2, r3
    b1de:	2500      	movs	r5, #0
    b1e0:	e7e3      	b.n	b1aa <__aeabi_f2d+0x5e>
    b1e2:	46c0      	nop			; (mov r8, r8)
    b1e4:	800fffff 	.word	0x800fffff
    b1e8:	00000389 	.word	0x00000389
    b1ec:	000007ff 	.word	0x000007ff

0000b1f0 <__aeabi_d2f>:
    b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1f2:	004c      	lsls	r4, r1, #1
    b1f4:	0d64      	lsrs	r4, r4, #21
    b1f6:	030b      	lsls	r3, r1, #12
    b1f8:	1c62      	adds	r2, r4, #1
    b1fa:	0f45      	lsrs	r5, r0, #29
    b1fc:	0a5b      	lsrs	r3, r3, #9
    b1fe:	0552      	lsls	r2, r2, #21
    b200:	432b      	orrs	r3, r5
    b202:	0fc9      	lsrs	r1, r1, #31
    b204:	00c5      	lsls	r5, r0, #3
    b206:	0d52      	lsrs	r2, r2, #21
    b208:	2a01      	cmp	r2, #1
    b20a:	dd28      	ble.n	b25e <__aeabi_d2f+0x6e>
    b20c:	4a3a      	ldr	r2, [pc, #232]	; (b2f8 <__aeabi_d2f+0x108>)
    b20e:	18a6      	adds	r6, r4, r2
    b210:	2efe      	cmp	r6, #254	; 0xfe
    b212:	dc1b      	bgt.n	b24c <__aeabi_d2f+0x5c>
    b214:	2e00      	cmp	r6, #0
    b216:	dd3e      	ble.n	b296 <__aeabi_d2f+0xa6>
    b218:	0180      	lsls	r0, r0, #6
    b21a:	0002      	movs	r2, r0
    b21c:	1e50      	subs	r0, r2, #1
    b21e:	4182      	sbcs	r2, r0
    b220:	0f6d      	lsrs	r5, r5, #29
    b222:	432a      	orrs	r2, r5
    b224:	00db      	lsls	r3, r3, #3
    b226:	4313      	orrs	r3, r2
    b228:	075a      	lsls	r2, r3, #29
    b22a:	d004      	beq.n	b236 <__aeabi_d2f+0x46>
    b22c:	220f      	movs	r2, #15
    b22e:	401a      	ands	r2, r3
    b230:	2a04      	cmp	r2, #4
    b232:	d000      	beq.n	b236 <__aeabi_d2f+0x46>
    b234:	3304      	adds	r3, #4
    b236:	2280      	movs	r2, #128	; 0x80
    b238:	04d2      	lsls	r2, r2, #19
    b23a:	401a      	ands	r2, r3
    b23c:	d05a      	beq.n	b2f4 <__aeabi_d2f+0x104>
    b23e:	3601      	adds	r6, #1
    b240:	2eff      	cmp	r6, #255	; 0xff
    b242:	d003      	beq.n	b24c <__aeabi_d2f+0x5c>
    b244:	019b      	lsls	r3, r3, #6
    b246:	0a5b      	lsrs	r3, r3, #9
    b248:	b2f4      	uxtb	r4, r6
    b24a:	e001      	b.n	b250 <__aeabi_d2f+0x60>
    b24c:	24ff      	movs	r4, #255	; 0xff
    b24e:	2300      	movs	r3, #0
    b250:	0258      	lsls	r0, r3, #9
    b252:	05e4      	lsls	r4, r4, #23
    b254:	0a40      	lsrs	r0, r0, #9
    b256:	07c9      	lsls	r1, r1, #31
    b258:	4320      	orrs	r0, r4
    b25a:	4308      	orrs	r0, r1
    b25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b25e:	2c00      	cmp	r4, #0
    b260:	d007      	beq.n	b272 <__aeabi_d2f+0x82>
    b262:	431d      	orrs	r5, r3
    b264:	d0f2      	beq.n	b24c <__aeabi_d2f+0x5c>
    b266:	2080      	movs	r0, #128	; 0x80
    b268:	00db      	lsls	r3, r3, #3
    b26a:	0480      	lsls	r0, r0, #18
    b26c:	4303      	orrs	r3, r0
    b26e:	26ff      	movs	r6, #255	; 0xff
    b270:	e7da      	b.n	b228 <__aeabi_d2f+0x38>
    b272:	432b      	orrs	r3, r5
    b274:	d003      	beq.n	b27e <__aeabi_d2f+0x8e>
    b276:	2305      	movs	r3, #5
    b278:	08db      	lsrs	r3, r3, #3
    b27a:	2cff      	cmp	r4, #255	; 0xff
    b27c:	d003      	beq.n	b286 <__aeabi_d2f+0x96>
    b27e:	025b      	lsls	r3, r3, #9
    b280:	0a5b      	lsrs	r3, r3, #9
    b282:	b2e4      	uxtb	r4, r4
    b284:	e7e4      	b.n	b250 <__aeabi_d2f+0x60>
    b286:	2b00      	cmp	r3, #0
    b288:	d032      	beq.n	b2f0 <__aeabi_d2f+0x100>
    b28a:	2080      	movs	r0, #128	; 0x80
    b28c:	03c0      	lsls	r0, r0, #15
    b28e:	4303      	orrs	r3, r0
    b290:	025b      	lsls	r3, r3, #9
    b292:	0a5b      	lsrs	r3, r3, #9
    b294:	e7dc      	b.n	b250 <__aeabi_d2f+0x60>
    b296:	0032      	movs	r2, r6
    b298:	3217      	adds	r2, #23
    b29a:	db14      	blt.n	b2c6 <__aeabi_d2f+0xd6>
    b29c:	2280      	movs	r2, #128	; 0x80
    b29e:	271e      	movs	r7, #30
    b2a0:	0412      	lsls	r2, r2, #16
    b2a2:	4313      	orrs	r3, r2
    b2a4:	1bbf      	subs	r7, r7, r6
    b2a6:	2f1f      	cmp	r7, #31
    b2a8:	dc0f      	bgt.n	b2ca <__aeabi_d2f+0xda>
    b2aa:	4a14      	ldr	r2, [pc, #80]	; (b2fc <__aeabi_d2f+0x10c>)
    b2ac:	4694      	mov	ip, r2
    b2ae:	4464      	add	r4, ip
    b2b0:	002a      	movs	r2, r5
    b2b2:	40a5      	lsls	r5, r4
    b2b4:	002e      	movs	r6, r5
    b2b6:	40a3      	lsls	r3, r4
    b2b8:	1e75      	subs	r5, r6, #1
    b2ba:	41ae      	sbcs	r6, r5
    b2bc:	40fa      	lsrs	r2, r7
    b2be:	4333      	orrs	r3, r6
    b2c0:	4313      	orrs	r3, r2
    b2c2:	2600      	movs	r6, #0
    b2c4:	e7b0      	b.n	b228 <__aeabi_d2f+0x38>
    b2c6:	2400      	movs	r4, #0
    b2c8:	e7d5      	b.n	b276 <__aeabi_d2f+0x86>
    b2ca:	2202      	movs	r2, #2
    b2cc:	4252      	negs	r2, r2
    b2ce:	1b96      	subs	r6, r2, r6
    b2d0:	001a      	movs	r2, r3
    b2d2:	40f2      	lsrs	r2, r6
    b2d4:	2f20      	cmp	r7, #32
    b2d6:	d009      	beq.n	b2ec <__aeabi_d2f+0xfc>
    b2d8:	4809      	ldr	r0, [pc, #36]	; (b300 <__aeabi_d2f+0x110>)
    b2da:	4684      	mov	ip, r0
    b2dc:	4464      	add	r4, ip
    b2de:	40a3      	lsls	r3, r4
    b2e0:	432b      	orrs	r3, r5
    b2e2:	1e5d      	subs	r5, r3, #1
    b2e4:	41ab      	sbcs	r3, r5
    b2e6:	2600      	movs	r6, #0
    b2e8:	4313      	orrs	r3, r2
    b2ea:	e79d      	b.n	b228 <__aeabi_d2f+0x38>
    b2ec:	2300      	movs	r3, #0
    b2ee:	e7f7      	b.n	b2e0 <__aeabi_d2f+0xf0>
    b2f0:	2300      	movs	r3, #0
    b2f2:	e7ad      	b.n	b250 <__aeabi_d2f+0x60>
    b2f4:	0034      	movs	r4, r6
    b2f6:	e7bf      	b.n	b278 <__aeabi_d2f+0x88>
    b2f8:	fffffc80 	.word	0xfffffc80
    b2fc:	fffffc82 	.word	0xfffffc82
    b300:	fffffca2 	.word	0xfffffca2

0000b304 <__clzsi2>:
    b304:	211c      	movs	r1, #28
    b306:	2301      	movs	r3, #1
    b308:	041b      	lsls	r3, r3, #16
    b30a:	4298      	cmp	r0, r3
    b30c:	d301      	bcc.n	b312 <__clzsi2+0xe>
    b30e:	0c00      	lsrs	r0, r0, #16
    b310:	3910      	subs	r1, #16
    b312:	0a1b      	lsrs	r3, r3, #8
    b314:	4298      	cmp	r0, r3
    b316:	d301      	bcc.n	b31c <__clzsi2+0x18>
    b318:	0a00      	lsrs	r0, r0, #8
    b31a:	3908      	subs	r1, #8
    b31c:	091b      	lsrs	r3, r3, #4
    b31e:	4298      	cmp	r0, r3
    b320:	d301      	bcc.n	b326 <__clzsi2+0x22>
    b322:	0900      	lsrs	r0, r0, #4
    b324:	3904      	subs	r1, #4
    b326:	a202      	add	r2, pc, #8	; (adr r2, b330 <__clzsi2+0x2c>)
    b328:	5c10      	ldrb	r0, [r2, r0]
    b32a:	1840      	adds	r0, r0, r1
    b32c:	4770      	bx	lr
    b32e:	46c0      	nop			; (mov r8, r8)
    b330:	02020304 	.word	0x02020304
    b334:	01010101 	.word	0x01010101
	...

0000b340 <__libc_init_array>:
    b340:	b570      	push	{r4, r5, r6, lr}
    b342:	2600      	movs	r6, #0
    b344:	4d0c      	ldr	r5, [pc, #48]	; (b378 <__libc_init_array+0x38>)
    b346:	4c0d      	ldr	r4, [pc, #52]	; (b37c <__libc_init_array+0x3c>)
    b348:	1b64      	subs	r4, r4, r5
    b34a:	10a4      	asrs	r4, r4, #2
    b34c:	42a6      	cmp	r6, r4
    b34e:	d109      	bne.n	b364 <__libc_init_array+0x24>
    b350:	2600      	movs	r6, #0
    b352:	f000 fee7 	bl	c124 <_init>
    b356:	4d0a      	ldr	r5, [pc, #40]	; (b380 <__libc_init_array+0x40>)
    b358:	4c0a      	ldr	r4, [pc, #40]	; (b384 <__libc_init_array+0x44>)
    b35a:	1b64      	subs	r4, r4, r5
    b35c:	10a4      	asrs	r4, r4, #2
    b35e:	42a6      	cmp	r6, r4
    b360:	d105      	bne.n	b36e <__libc_init_array+0x2e>
    b362:	bd70      	pop	{r4, r5, r6, pc}
    b364:	00b3      	lsls	r3, r6, #2
    b366:	58eb      	ldr	r3, [r5, r3]
    b368:	4798      	blx	r3
    b36a:	3601      	adds	r6, #1
    b36c:	e7ee      	b.n	b34c <__libc_init_array+0xc>
    b36e:	00b3      	lsls	r3, r6, #2
    b370:	58eb      	ldr	r3, [r5, r3]
    b372:	4798      	blx	r3
    b374:	3601      	adds	r6, #1
    b376:	e7f2      	b.n	b35e <__libc_init_array+0x1e>
    b378:	0000c130 	.word	0x0000c130
    b37c:	0000c130 	.word	0x0000c130
    b380:	0000c130 	.word	0x0000c130
    b384:	0000c134 	.word	0x0000c134

0000b388 <memcpy>:
    b388:	2300      	movs	r3, #0
    b38a:	b510      	push	{r4, lr}
    b38c:	429a      	cmp	r2, r3
    b38e:	d100      	bne.n	b392 <memcpy+0xa>
    b390:	bd10      	pop	{r4, pc}
    b392:	5ccc      	ldrb	r4, [r1, r3]
    b394:	54c4      	strb	r4, [r0, r3]
    b396:	3301      	adds	r3, #1
    b398:	e7f8      	b.n	b38c <memcpy+0x4>

0000b39a <memset>:
    b39a:	0003      	movs	r3, r0
    b39c:	1882      	adds	r2, r0, r2
    b39e:	4293      	cmp	r3, r2
    b3a0:	d100      	bne.n	b3a4 <memset+0xa>
    b3a2:	4770      	bx	lr
    b3a4:	7019      	strb	r1, [r3, #0]
    b3a6:	3301      	adds	r3, #1
    b3a8:	e7f9      	b.n	b39e <memset+0x4>
	...

0000b3ac <sniprintf>:
    b3ac:	b40c      	push	{r2, r3}
    b3ae:	b530      	push	{r4, r5, lr}
    b3b0:	4b16      	ldr	r3, [pc, #88]	; (b40c <sniprintf+0x60>)
    b3b2:	b09d      	sub	sp, #116	; 0x74
    b3b4:	1e0c      	subs	r4, r1, #0
    b3b6:	681d      	ldr	r5, [r3, #0]
    b3b8:	da08      	bge.n	b3cc <sniprintf+0x20>
    b3ba:	238b      	movs	r3, #139	; 0x8b
    b3bc:	2001      	movs	r0, #1
    b3be:	602b      	str	r3, [r5, #0]
    b3c0:	4240      	negs	r0, r0
    b3c2:	b01d      	add	sp, #116	; 0x74
    b3c4:	bc30      	pop	{r4, r5}
    b3c6:	bc08      	pop	{r3}
    b3c8:	b002      	add	sp, #8
    b3ca:	4718      	bx	r3
    b3cc:	2382      	movs	r3, #130	; 0x82
    b3ce:	a902      	add	r1, sp, #8
    b3d0:	009b      	lsls	r3, r3, #2
    b3d2:	818b      	strh	r3, [r1, #12]
    b3d4:	2300      	movs	r3, #0
    b3d6:	9002      	str	r0, [sp, #8]
    b3d8:	6108      	str	r0, [r1, #16]
    b3da:	429c      	cmp	r4, r3
    b3dc:	d000      	beq.n	b3e0 <sniprintf+0x34>
    b3de:	1e63      	subs	r3, r4, #1
    b3e0:	608b      	str	r3, [r1, #8]
    b3e2:	614b      	str	r3, [r1, #20]
    b3e4:	2301      	movs	r3, #1
    b3e6:	425b      	negs	r3, r3
    b3e8:	81cb      	strh	r3, [r1, #14]
    b3ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b3ec:	ab21      	add	r3, sp, #132	; 0x84
    b3ee:	0028      	movs	r0, r5
    b3f0:	9301      	str	r3, [sp, #4]
    b3f2:	f000 f899 	bl	b528 <_svfiprintf_r>
    b3f6:	1c43      	adds	r3, r0, #1
    b3f8:	da01      	bge.n	b3fe <sniprintf+0x52>
    b3fa:	238b      	movs	r3, #139	; 0x8b
    b3fc:	602b      	str	r3, [r5, #0]
    b3fe:	2c00      	cmp	r4, #0
    b400:	d0df      	beq.n	b3c2 <sniprintf+0x16>
    b402:	2300      	movs	r3, #0
    b404:	9a02      	ldr	r2, [sp, #8]
    b406:	7013      	strb	r3, [r2, #0]
    b408:	e7db      	b.n	b3c2 <sniprintf+0x16>
    b40a:	46c0      	nop			; (mov r8, r8)
    b40c:	20000014 	.word	0x20000014

0000b410 <siprintf>:
    b410:	b40e      	push	{r1, r2, r3}
    b412:	b510      	push	{r4, lr}
    b414:	b09d      	sub	sp, #116	; 0x74
    b416:	a902      	add	r1, sp, #8
    b418:	9002      	str	r0, [sp, #8]
    b41a:	6108      	str	r0, [r1, #16]
    b41c:	480b      	ldr	r0, [pc, #44]	; (b44c <siprintf+0x3c>)
    b41e:	2482      	movs	r4, #130	; 0x82
    b420:	6088      	str	r0, [r1, #8]
    b422:	6148      	str	r0, [r1, #20]
    b424:	2001      	movs	r0, #1
    b426:	4240      	negs	r0, r0
    b428:	ab1f      	add	r3, sp, #124	; 0x7c
    b42a:	81c8      	strh	r0, [r1, #14]
    b42c:	4808      	ldr	r0, [pc, #32]	; (b450 <siprintf+0x40>)
    b42e:	cb04      	ldmia	r3!, {r2}
    b430:	00a4      	lsls	r4, r4, #2
    b432:	6800      	ldr	r0, [r0, #0]
    b434:	9301      	str	r3, [sp, #4]
    b436:	818c      	strh	r4, [r1, #12]
    b438:	f000 f876 	bl	b528 <_svfiprintf_r>
    b43c:	2300      	movs	r3, #0
    b43e:	9a02      	ldr	r2, [sp, #8]
    b440:	7013      	strb	r3, [r2, #0]
    b442:	b01d      	add	sp, #116	; 0x74
    b444:	bc10      	pop	{r4}
    b446:	bc08      	pop	{r3}
    b448:	b003      	add	sp, #12
    b44a:	4718      	bx	r3
    b44c:	7fffffff 	.word	0x7fffffff
    b450:	20000014 	.word	0x20000014

0000b454 <strlen>:
    b454:	2300      	movs	r3, #0
    b456:	5cc2      	ldrb	r2, [r0, r3]
    b458:	3301      	adds	r3, #1
    b45a:	2a00      	cmp	r2, #0
    b45c:	d1fb      	bne.n	b456 <strlen+0x2>
    b45e:	1e58      	subs	r0, r3, #1
    b460:	4770      	bx	lr
	...

0000b464 <__ssputs_r>:
    b464:	b5f0      	push	{r4, r5, r6, r7, lr}
    b466:	688e      	ldr	r6, [r1, #8]
    b468:	b085      	sub	sp, #20
    b46a:	0007      	movs	r7, r0
    b46c:	000c      	movs	r4, r1
    b46e:	9203      	str	r2, [sp, #12]
    b470:	9301      	str	r3, [sp, #4]
    b472:	429e      	cmp	r6, r3
    b474:	d839      	bhi.n	b4ea <__ssputs_r+0x86>
    b476:	2390      	movs	r3, #144	; 0x90
    b478:	898a      	ldrh	r2, [r1, #12]
    b47a:	00db      	lsls	r3, r3, #3
    b47c:	421a      	tst	r2, r3
    b47e:	d034      	beq.n	b4ea <__ssputs_r+0x86>
    b480:	2503      	movs	r5, #3
    b482:	6909      	ldr	r1, [r1, #16]
    b484:	6823      	ldr	r3, [r4, #0]
    b486:	1a5b      	subs	r3, r3, r1
    b488:	9302      	str	r3, [sp, #8]
    b48a:	6963      	ldr	r3, [r4, #20]
    b48c:	9802      	ldr	r0, [sp, #8]
    b48e:	435d      	muls	r5, r3
    b490:	0feb      	lsrs	r3, r5, #31
    b492:	195d      	adds	r5, r3, r5
    b494:	9b01      	ldr	r3, [sp, #4]
    b496:	106d      	asrs	r5, r5, #1
    b498:	3301      	adds	r3, #1
    b49a:	181b      	adds	r3, r3, r0
    b49c:	42ab      	cmp	r3, r5
    b49e:	d900      	bls.n	b4a2 <__ssputs_r+0x3e>
    b4a0:	001d      	movs	r5, r3
    b4a2:	0553      	lsls	r3, r2, #21
    b4a4:	d532      	bpl.n	b50c <__ssputs_r+0xa8>
    b4a6:	0029      	movs	r1, r5
    b4a8:	0038      	movs	r0, r7
    b4aa:	f000 fb31 	bl	bb10 <_malloc_r>
    b4ae:	1e06      	subs	r6, r0, #0
    b4b0:	d109      	bne.n	b4c6 <__ssputs_r+0x62>
    b4b2:	230c      	movs	r3, #12
    b4b4:	603b      	str	r3, [r7, #0]
    b4b6:	2340      	movs	r3, #64	; 0x40
    b4b8:	2001      	movs	r0, #1
    b4ba:	89a2      	ldrh	r2, [r4, #12]
    b4bc:	4240      	negs	r0, r0
    b4be:	4313      	orrs	r3, r2
    b4c0:	81a3      	strh	r3, [r4, #12]
    b4c2:	b005      	add	sp, #20
    b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4c6:	9a02      	ldr	r2, [sp, #8]
    b4c8:	6921      	ldr	r1, [r4, #16]
    b4ca:	f7ff ff5d 	bl	b388 <memcpy>
    b4ce:	89a3      	ldrh	r3, [r4, #12]
    b4d0:	4a14      	ldr	r2, [pc, #80]	; (b524 <__ssputs_r+0xc0>)
    b4d2:	401a      	ands	r2, r3
    b4d4:	2380      	movs	r3, #128	; 0x80
    b4d6:	4313      	orrs	r3, r2
    b4d8:	81a3      	strh	r3, [r4, #12]
    b4da:	9b02      	ldr	r3, [sp, #8]
    b4dc:	6126      	str	r6, [r4, #16]
    b4de:	18f6      	adds	r6, r6, r3
    b4e0:	6026      	str	r6, [r4, #0]
    b4e2:	6165      	str	r5, [r4, #20]
    b4e4:	9e01      	ldr	r6, [sp, #4]
    b4e6:	1aed      	subs	r5, r5, r3
    b4e8:	60a5      	str	r5, [r4, #8]
    b4ea:	9b01      	ldr	r3, [sp, #4]
    b4ec:	42b3      	cmp	r3, r6
    b4ee:	d200      	bcs.n	b4f2 <__ssputs_r+0x8e>
    b4f0:	001e      	movs	r6, r3
    b4f2:	0032      	movs	r2, r6
    b4f4:	9903      	ldr	r1, [sp, #12]
    b4f6:	6820      	ldr	r0, [r4, #0]
    b4f8:	f000 faad 	bl	ba56 <memmove>
    b4fc:	68a3      	ldr	r3, [r4, #8]
    b4fe:	2000      	movs	r0, #0
    b500:	1b9b      	subs	r3, r3, r6
    b502:	60a3      	str	r3, [r4, #8]
    b504:	6823      	ldr	r3, [r4, #0]
    b506:	199e      	adds	r6, r3, r6
    b508:	6026      	str	r6, [r4, #0]
    b50a:	e7da      	b.n	b4c2 <__ssputs_r+0x5e>
    b50c:	002a      	movs	r2, r5
    b50e:	0038      	movs	r0, r7
    b510:	f000 fb5c 	bl	bbcc <_realloc_r>
    b514:	1e06      	subs	r6, r0, #0
    b516:	d1e0      	bne.n	b4da <__ssputs_r+0x76>
    b518:	6921      	ldr	r1, [r4, #16]
    b51a:	0038      	movs	r0, r7
    b51c:	f000 faae 	bl	ba7c <_free_r>
    b520:	e7c7      	b.n	b4b2 <__ssputs_r+0x4e>
    b522:	46c0      	nop			; (mov r8, r8)
    b524:	fffffb7f 	.word	0xfffffb7f

0000b528 <_svfiprintf_r>:
    b528:	b5f0      	push	{r4, r5, r6, r7, lr}
    b52a:	b09f      	sub	sp, #124	; 0x7c
    b52c:	9002      	str	r0, [sp, #8]
    b52e:	9305      	str	r3, [sp, #20]
    b530:	898b      	ldrh	r3, [r1, #12]
    b532:	000f      	movs	r7, r1
    b534:	0016      	movs	r6, r2
    b536:	061b      	lsls	r3, r3, #24
    b538:	d511      	bpl.n	b55e <_svfiprintf_r+0x36>
    b53a:	690b      	ldr	r3, [r1, #16]
    b53c:	2b00      	cmp	r3, #0
    b53e:	d10e      	bne.n	b55e <_svfiprintf_r+0x36>
    b540:	2140      	movs	r1, #64	; 0x40
    b542:	f000 fae5 	bl	bb10 <_malloc_r>
    b546:	6038      	str	r0, [r7, #0]
    b548:	6138      	str	r0, [r7, #16]
    b54a:	2800      	cmp	r0, #0
    b54c:	d105      	bne.n	b55a <_svfiprintf_r+0x32>
    b54e:	230c      	movs	r3, #12
    b550:	9a02      	ldr	r2, [sp, #8]
    b552:	3801      	subs	r0, #1
    b554:	6013      	str	r3, [r2, #0]
    b556:	b01f      	add	sp, #124	; 0x7c
    b558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b55a:	2340      	movs	r3, #64	; 0x40
    b55c:	617b      	str	r3, [r7, #20]
    b55e:	2300      	movs	r3, #0
    b560:	ad06      	add	r5, sp, #24
    b562:	616b      	str	r3, [r5, #20]
    b564:	3320      	adds	r3, #32
    b566:	766b      	strb	r3, [r5, #25]
    b568:	3310      	adds	r3, #16
    b56a:	76ab      	strb	r3, [r5, #26]
    b56c:	0034      	movs	r4, r6
    b56e:	7823      	ldrb	r3, [r4, #0]
    b570:	2b00      	cmp	r3, #0
    b572:	d147      	bne.n	b604 <_svfiprintf_r+0xdc>
    b574:	1ba3      	subs	r3, r4, r6
    b576:	9304      	str	r3, [sp, #16]
    b578:	d00d      	beq.n	b596 <_svfiprintf_r+0x6e>
    b57a:	1ba3      	subs	r3, r4, r6
    b57c:	0032      	movs	r2, r6
    b57e:	0039      	movs	r1, r7
    b580:	9802      	ldr	r0, [sp, #8]
    b582:	f7ff ff6f 	bl	b464 <__ssputs_r>
    b586:	1c43      	adds	r3, r0, #1
    b588:	d100      	bne.n	b58c <_svfiprintf_r+0x64>
    b58a:	e0b5      	b.n	b6f8 <_svfiprintf_r+0x1d0>
    b58c:	696a      	ldr	r2, [r5, #20]
    b58e:	9b04      	ldr	r3, [sp, #16]
    b590:	4694      	mov	ip, r2
    b592:	4463      	add	r3, ip
    b594:	616b      	str	r3, [r5, #20]
    b596:	7823      	ldrb	r3, [r4, #0]
    b598:	2b00      	cmp	r3, #0
    b59a:	d100      	bne.n	b59e <_svfiprintf_r+0x76>
    b59c:	e0ac      	b.n	b6f8 <_svfiprintf_r+0x1d0>
    b59e:	2201      	movs	r2, #1
    b5a0:	2300      	movs	r3, #0
    b5a2:	4252      	negs	r2, r2
    b5a4:	606a      	str	r2, [r5, #4]
    b5a6:	a902      	add	r1, sp, #8
    b5a8:	3254      	adds	r2, #84	; 0x54
    b5aa:	1852      	adds	r2, r2, r1
    b5ac:	3401      	adds	r4, #1
    b5ae:	602b      	str	r3, [r5, #0]
    b5b0:	60eb      	str	r3, [r5, #12]
    b5b2:	60ab      	str	r3, [r5, #8]
    b5b4:	7013      	strb	r3, [r2, #0]
    b5b6:	65ab      	str	r3, [r5, #88]	; 0x58
    b5b8:	4e58      	ldr	r6, [pc, #352]	; (b71c <_svfiprintf_r+0x1f4>)
    b5ba:	2205      	movs	r2, #5
    b5bc:	7821      	ldrb	r1, [r4, #0]
    b5be:	0030      	movs	r0, r6
    b5c0:	f000 fa3e 	bl	ba40 <memchr>
    b5c4:	1c62      	adds	r2, r4, #1
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d120      	bne.n	b60c <_svfiprintf_r+0xe4>
    b5ca:	6829      	ldr	r1, [r5, #0]
    b5cc:	06cb      	lsls	r3, r1, #27
    b5ce:	d504      	bpl.n	b5da <_svfiprintf_r+0xb2>
    b5d0:	2353      	movs	r3, #83	; 0x53
    b5d2:	ae02      	add	r6, sp, #8
    b5d4:	3020      	adds	r0, #32
    b5d6:	199b      	adds	r3, r3, r6
    b5d8:	7018      	strb	r0, [r3, #0]
    b5da:	070b      	lsls	r3, r1, #28
    b5dc:	d504      	bpl.n	b5e8 <_svfiprintf_r+0xc0>
    b5de:	2353      	movs	r3, #83	; 0x53
    b5e0:	202b      	movs	r0, #43	; 0x2b
    b5e2:	ae02      	add	r6, sp, #8
    b5e4:	199b      	adds	r3, r3, r6
    b5e6:	7018      	strb	r0, [r3, #0]
    b5e8:	7823      	ldrb	r3, [r4, #0]
    b5ea:	2b2a      	cmp	r3, #42	; 0x2a
    b5ec:	d016      	beq.n	b61c <_svfiprintf_r+0xf4>
    b5ee:	2000      	movs	r0, #0
    b5f0:	210a      	movs	r1, #10
    b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5f4:	7822      	ldrb	r2, [r4, #0]
    b5f6:	3a30      	subs	r2, #48	; 0x30
    b5f8:	2a09      	cmp	r2, #9
    b5fa:	d955      	bls.n	b6a8 <_svfiprintf_r+0x180>
    b5fc:	2800      	cmp	r0, #0
    b5fe:	d015      	beq.n	b62c <_svfiprintf_r+0x104>
    b600:	9309      	str	r3, [sp, #36]	; 0x24
    b602:	e013      	b.n	b62c <_svfiprintf_r+0x104>
    b604:	2b25      	cmp	r3, #37	; 0x25
    b606:	d0b5      	beq.n	b574 <_svfiprintf_r+0x4c>
    b608:	3401      	adds	r4, #1
    b60a:	e7b0      	b.n	b56e <_svfiprintf_r+0x46>
    b60c:	2301      	movs	r3, #1
    b60e:	1b80      	subs	r0, r0, r6
    b610:	4083      	lsls	r3, r0
    b612:	6829      	ldr	r1, [r5, #0]
    b614:	0014      	movs	r4, r2
    b616:	430b      	orrs	r3, r1
    b618:	602b      	str	r3, [r5, #0]
    b61a:	e7cd      	b.n	b5b8 <_svfiprintf_r+0x90>
    b61c:	9b05      	ldr	r3, [sp, #20]
    b61e:	1d18      	adds	r0, r3, #4
    b620:	681b      	ldr	r3, [r3, #0]
    b622:	9005      	str	r0, [sp, #20]
    b624:	2b00      	cmp	r3, #0
    b626:	db39      	blt.n	b69c <_svfiprintf_r+0x174>
    b628:	9309      	str	r3, [sp, #36]	; 0x24
    b62a:	0014      	movs	r4, r2
    b62c:	7823      	ldrb	r3, [r4, #0]
    b62e:	2b2e      	cmp	r3, #46	; 0x2e
    b630:	d10b      	bne.n	b64a <_svfiprintf_r+0x122>
    b632:	7863      	ldrb	r3, [r4, #1]
    b634:	1c62      	adds	r2, r4, #1
    b636:	2b2a      	cmp	r3, #42	; 0x2a
    b638:	d13e      	bne.n	b6b8 <_svfiprintf_r+0x190>
    b63a:	9b05      	ldr	r3, [sp, #20]
    b63c:	3402      	adds	r4, #2
    b63e:	1d1a      	adds	r2, r3, #4
    b640:	681b      	ldr	r3, [r3, #0]
    b642:	9205      	str	r2, [sp, #20]
    b644:	2b00      	cmp	r3, #0
    b646:	db34      	blt.n	b6b2 <_svfiprintf_r+0x18a>
    b648:	9307      	str	r3, [sp, #28]
    b64a:	4e35      	ldr	r6, [pc, #212]	; (b720 <_svfiprintf_r+0x1f8>)
    b64c:	7821      	ldrb	r1, [r4, #0]
    b64e:	2203      	movs	r2, #3
    b650:	0030      	movs	r0, r6
    b652:	f000 f9f5 	bl	ba40 <memchr>
    b656:	2800      	cmp	r0, #0
    b658:	d006      	beq.n	b668 <_svfiprintf_r+0x140>
    b65a:	2340      	movs	r3, #64	; 0x40
    b65c:	1b80      	subs	r0, r0, r6
    b65e:	4083      	lsls	r3, r0
    b660:	682a      	ldr	r2, [r5, #0]
    b662:	3401      	adds	r4, #1
    b664:	4313      	orrs	r3, r2
    b666:	602b      	str	r3, [r5, #0]
    b668:	7821      	ldrb	r1, [r4, #0]
    b66a:	2206      	movs	r2, #6
    b66c:	482d      	ldr	r0, [pc, #180]	; (b724 <_svfiprintf_r+0x1fc>)
    b66e:	1c66      	adds	r6, r4, #1
    b670:	7629      	strb	r1, [r5, #24]
    b672:	f000 f9e5 	bl	ba40 <memchr>
    b676:	2800      	cmp	r0, #0
    b678:	d046      	beq.n	b708 <_svfiprintf_r+0x1e0>
    b67a:	4b2b      	ldr	r3, [pc, #172]	; (b728 <_svfiprintf_r+0x200>)
    b67c:	2b00      	cmp	r3, #0
    b67e:	d12f      	bne.n	b6e0 <_svfiprintf_r+0x1b8>
    b680:	6829      	ldr	r1, [r5, #0]
    b682:	9b05      	ldr	r3, [sp, #20]
    b684:	2207      	movs	r2, #7
    b686:	05c9      	lsls	r1, r1, #23
    b688:	d528      	bpl.n	b6dc <_svfiprintf_r+0x1b4>
    b68a:	189b      	adds	r3, r3, r2
    b68c:	4393      	bics	r3, r2
    b68e:	3308      	adds	r3, #8
    b690:	9305      	str	r3, [sp, #20]
    b692:	696b      	ldr	r3, [r5, #20]
    b694:	9a03      	ldr	r2, [sp, #12]
    b696:	189b      	adds	r3, r3, r2
    b698:	616b      	str	r3, [r5, #20]
    b69a:	e767      	b.n	b56c <_svfiprintf_r+0x44>
    b69c:	425b      	negs	r3, r3
    b69e:	60eb      	str	r3, [r5, #12]
    b6a0:	2302      	movs	r3, #2
    b6a2:	430b      	orrs	r3, r1
    b6a4:	602b      	str	r3, [r5, #0]
    b6a6:	e7c0      	b.n	b62a <_svfiprintf_r+0x102>
    b6a8:	434b      	muls	r3, r1
    b6aa:	3401      	adds	r4, #1
    b6ac:	189b      	adds	r3, r3, r2
    b6ae:	2001      	movs	r0, #1
    b6b0:	e7a0      	b.n	b5f4 <_svfiprintf_r+0xcc>
    b6b2:	2301      	movs	r3, #1
    b6b4:	425b      	negs	r3, r3
    b6b6:	e7c7      	b.n	b648 <_svfiprintf_r+0x120>
    b6b8:	2300      	movs	r3, #0
    b6ba:	0014      	movs	r4, r2
    b6bc:	200a      	movs	r0, #10
    b6be:	001a      	movs	r2, r3
    b6c0:	606b      	str	r3, [r5, #4]
    b6c2:	7821      	ldrb	r1, [r4, #0]
    b6c4:	3930      	subs	r1, #48	; 0x30
    b6c6:	2909      	cmp	r1, #9
    b6c8:	d903      	bls.n	b6d2 <_svfiprintf_r+0x1aa>
    b6ca:	2b00      	cmp	r3, #0
    b6cc:	d0bd      	beq.n	b64a <_svfiprintf_r+0x122>
    b6ce:	9207      	str	r2, [sp, #28]
    b6d0:	e7bb      	b.n	b64a <_svfiprintf_r+0x122>
    b6d2:	4342      	muls	r2, r0
    b6d4:	3401      	adds	r4, #1
    b6d6:	1852      	adds	r2, r2, r1
    b6d8:	2301      	movs	r3, #1
    b6da:	e7f2      	b.n	b6c2 <_svfiprintf_r+0x19a>
    b6dc:	3307      	adds	r3, #7
    b6de:	e7d5      	b.n	b68c <_svfiprintf_r+0x164>
    b6e0:	ab05      	add	r3, sp, #20
    b6e2:	9300      	str	r3, [sp, #0]
    b6e4:	003a      	movs	r2, r7
    b6e6:	4b11      	ldr	r3, [pc, #68]	; (b72c <_svfiprintf_r+0x204>)
    b6e8:	0029      	movs	r1, r5
    b6ea:	9802      	ldr	r0, [sp, #8]
    b6ec:	e000      	b.n	b6f0 <_svfiprintf_r+0x1c8>
    b6ee:	bf00      	nop
    b6f0:	9003      	str	r0, [sp, #12]
    b6f2:	9b03      	ldr	r3, [sp, #12]
    b6f4:	3301      	adds	r3, #1
    b6f6:	d1cc      	bne.n	b692 <_svfiprintf_r+0x16a>
    b6f8:	89bb      	ldrh	r3, [r7, #12]
    b6fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b6fc:	065b      	lsls	r3, r3, #25
    b6fe:	d400      	bmi.n	b702 <_svfiprintf_r+0x1da>
    b700:	e729      	b.n	b556 <_svfiprintf_r+0x2e>
    b702:	2001      	movs	r0, #1
    b704:	4240      	negs	r0, r0
    b706:	e726      	b.n	b556 <_svfiprintf_r+0x2e>
    b708:	ab05      	add	r3, sp, #20
    b70a:	9300      	str	r3, [sp, #0]
    b70c:	003a      	movs	r2, r7
    b70e:	4b07      	ldr	r3, [pc, #28]	; (b72c <_svfiprintf_r+0x204>)
    b710:	0029      	movs	r1, r5
    b712:	9802      	ldr	r0, [sp, #8]
    b714:	f000 f87a 	bl	b80c <_printf_i>
    b718:	e7ea      	b.n	b6f0 <_svfiprintf_r+0x1c8>
    b71a:	46c0      	nop			; (mov r8, r8)
    b71c:	0000c0f0 	.word	0x0000c0f0
    b720:	0000c0f6 	.word	0x0000c0f6
    b724:	0000c0fa 	.word	0x0000c0fa
    b728:	00000000 	.word	0x00000000
    b72c:	0000b465 	.word	0x0000b465

0000b730 <_printf_common>:
    b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b732:	0015      	movs	r5, r2
    b734:	9301      	str	r3, [sp, #4]
    b736:	688a      	ldr	r2, [r1, #8]
    b738:	690b      	ldr	r3, [r1, #16]
    b73a:	9000      	str	r0, [sp, #0]
    b73c:	000c      	movs	r4, r1
    b73e:	4293      	cmp	r3, r2
    b740:	da00      	bge.n	b744 <_printf_common+0x14>
    b742:	0013      	movs	r3, r2
    b744:	0022      	movs	r2, r4
    b746:	602b      	str	r3, [r5, #0]
    b748:	3243      	adds	r2, #67	; 0x43
    b74a:	7812      	ldrb	r2, [r2, #0]
    b74c:	2a00      	cmp	r2, #0
    b74e:	d001      	beq.n	b754 <_printf_common+0x24>
    b750:	3301      	adds	r3, #1
    b752:	602b      	str	r3, [r5, #0]
    b754:	6823      	ldr	r3, [r4, #0]
    b756:	069b      	lsls	r3, r3, #26
    b758:	d502      	bpl.n	b760 <_printf_common+0x30>
    b75a:	682b      	ldr	r3, [r5, #0]
    b75c:	3302      	adds	r3, #2
    b75e:	602b      	str	r3, [r5, #0]
    b760:	2706      	movs	r7, #6
    b762:	6823      	ldr	r3, [r4, #0]
    b764:	401f      	ands	r7, r3
    b766:	d027      	beq.n	b7b8 <_printf_common+0x88>
    b768:	0023      	movs	r3, r4
    b76a:	3343      	adds	r3, #67	; 0x43
    b76c:	781b      	ldrb	r3, [r3, #0]
    b76e:	1e5a      	subs	r2, r3, #1
    b770:	4193      	sbcs	r3, r2
    b772:	6822      	ldr	r2, [r4, #0]
    b774:	0692      	lsls	r2, r2, #26
    b776:	d430      	bmi.n	b7da <_printf_common+0xaa>
    b778:	0022      	movs	r2, r4
    b77a:	9901      	ldr	r1, [sp, #4]
    b77c:	3243      	adds	r2, #67	; 0x43
    b77e:	9800      	ldr	r0, [sp, #0]
    b780:	9e08      	ldr	r6, [sp, #32]
    b782:	47b0      	blx	r6
    b784:	1c43      	adds	r3, r0, #1
    b786:	d025      	beq.n	b7d4 <_printf_common+0xa4>
    b788:	2306      	movs	r3, #6
    b78a:	6820      	ldr	r0, [r4, #0]
    b78c:	682a      	ldr	r2, [r5, #0]
    b78e:	68e1      	ldr	r1, [r4, #12]
    b790:	4003      	ands	r3, r0
    b792:	2500      	movs	r5, #0
    b794:	2b04      	cmp	r3, #4
    b796:	d103      	bne.n	b7a0 <_printf_common+0x70>
    b798:	1a8d      	subs	r5, r1, r2
    b79a:	43eb      	mvns	r3, r5
    b79c:	17db      	asrs	r3, r3, #31
    b79e:	401d      	ands	r5, r3
    b7a0:	68a3      	ldr	r3, [r4, #8]
    b7a2:	6922      	ldr	r2, [r4, #16]
    b7a4:	4293      	cmp	r3, r2
    b7a6:	dd01      	ble.n	b7ac <_printf_common+0x7c>
    b7a8:	1a9b      	subs	r3, r3, r2
    b7aa:	18ed      	adds	r5, r5, r3
    b7ac:	2700      	movs	r7, #0
    b7ae:	42bd      	cmp	r5, r7
    b7b0:	d120      	bne.n	b7f4 <_printf_common+0xc4>
    b7b2:	2000      	movs	r0, #0
    b7b4:	e010      	b.n	b7d8 <_printf_common+0xa8>
    b7b6:	3701      	adds	r7, #1
    b7b8:	68e3      	ldr	r3, [r4, #12]
    b7ba:	682a      	ldr	r2, [r5, #0]
    b7bc:	1a9b      	subs	r3, r3, r2
    b7be:	429f      	cmp	r7, r3
    b7c0:	dad2      	bge.n	b768 <_printf_common+0x38>
    b7c2:	0022      	movs	r2, r4
    b7c4:	2301      	movs	r3, #1
    b7c6:	3219      	adds	r2, #25
    b7c8:	9901      	ldr	r1, [sp, #4]
    b7ca:	9800      	ldr	r0, [sp, #0]
    b7cc:	9e08      	ldr	r6, [sp, #32]
    b7ce:	47b0      	blx	r6
    b7d0:	1c43      	adds	r3, r0, #1
    b7d2:	d1f0      	bne.n	b7b6 <_printf_common+0x86>
    b7d4:	2001      	movs	r0, #1
    b7d6:	4240      	negs	r0, r0
    b7d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b7da:	2030      	movs	r0, #48	; 0x30
    b7dc:	18e1      	adds	r1, r4, r3
    b7de:	3143      	adds	r1, #67	; 0x43
    b7e0:	7008      	strb	r0, [r1, #0]
    b7e2:	0021      	movs	r1, r4
    b7e4:	1c5a      	adds	r2, r3, #1
    b7e6:	3145      	adds	r1, #69	; 0x45
    b7e8:	7809      	ldrb	r1, [r1, #0]
    b7ea:	18a2      	adds	r2, r4, r2
    b7ec:	3243      	adds	r2, #67	; 0x43
    b7ee:	3302      	adds	r3, #2
    b7f0:	7011      	strb	r1, [r2, #0]
    b7f2:	e7c1      	b.n	b778 <_printf_common+0x48>
    b7f4:	0022      	movs	r2, r4
    b7f6:	2301      	movs	r3, #1
    b7f8:	321a      	adds	r2, #26
    b7fa:	9901      	ldr	r1, [sp, #4]
    b7fc:	9800      	ldr	r0, [sp, #0]
    b7fe:	9e08      	ldr	r6, [sp, #32]
    b800:	47b0      	blx	r6
    b802:	1c43      	adds	r3, r0, #1
    b804:	d0e6      	beq.n	b7d4 <_printf_common+0xa4>
    b806:	3701      	adds	r7, #1
    b808:	e7d1      	b.n	b7ae <_printf_common+0x7e>
	...

0000b80c <_printf_i>:
    b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b80e:	b08b      	sub	sp, #44	; 0x2c
    b810:	9206      	str	r2, [sp, #24]
    b812:	000a      	movs	r2, r1
    b814:	3243      	adds	r2, #67	; 0x43
    b816:	9307      	str	r3, [sp, #28]
    b818:	9005      	str	r0, [sp, #20]
    b81a:	9204      	str	r2, [sp, #16]
    b81c:	7e0a      	ldrb	r2, [r1, #24]
    b81e:	000c      	movs	r4, r1
    b820:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b822:	2a6e      	cmp	r2, #110	; 0x6e
    b824:	d100      	bne.n	b828 <_printf_i+0x1c>
    b826:	e08f      	b.n	b948 <_printf_i+0x13c>
    b828:	d817      	bhi.n	b85a <_printf_i+0x4e>
    b82a:	2a63      	cmp	r2, #99	; 0x63
    b82c:	d02c      	beq.n	b888 <_printf_i+0x7c>
    b82e:	d808      	bhi.n	b842 <_printf_i+0x36>
    b830:	2a00      	cmp	r2, #0
    b832:	d100      	bne.n	b836 <_printf_i+0x2a>
    b834:	e099      	b.n	b96a <_printf_i+0x15e>
    b836:	2a58      	cmp	r2, #88	; 0x58
    b838:	d054      	beq.n	b8e4 <_printf_i+0xd8>
    b83a:	0026      	movs	r6, r4
    b83c:	3642      	adds	r6, #66	; 0x42
    b83e:	7032      	strb	r2, [r6, #0]
    b840:	e029      	b.n	b896 <_printf_i+0x8a>
    b842:	2a64      	cmp	r2, #100	; 0x64
    b844:	d001      	beq.n	b84a <_printf_i+0x3e>
    b846:	2a69      	cmp	r2, #105	; 0x69
    b848:	d1f7      	bne.n	b83a <_printf_i+0x2e>
    b84a:	6821      	ldr	r1, [r4, #0]
    b84c:	681a      	ldr	r2, [r3, #0]
    b84e:	0608      	lsls	r0, r1, #24
    b850:	d523      	bpl.n	b89a <_printf_i+0x8e>
    b852:	1d11      	adds	r1, r2, #4
    b854:	6019      	str	r1, [r3, #0]
    b856:	6815      	ldr	r5, [r2, #0]
    b858:	e025      	b.n	b8a6 <_printf_i+0x9a>
    b85a:	2a73      	cmp	r2, #115	; 0x73
    b85c:	d100      	bne.n	b860 <_printf_i+0x54>
    b85e:	e088      	b.n	b972 <_printf_i+0x166>
    b860:	d808      	bhi.n	b874 <_printf_i+0x68>
    b862:	2a6f      	cmp	r2, #111	; 0x6f
    b864:	d029      	beq.n	b8ba <_printf_i+0xae>
    b866:	2a70      	cmp	r2, #112	; 0x70
    b868:	d1e7      	bne.n	b83a <_printf_i+0x2e>
    b86a:	2220      	movs	r2, #32
    b86c:	6809      	ldr	r1, [r1, #0]
    b86e:	430a      	orrs	r2, r1
    b870:	6022      	str	r2, [r4, #0]
    b872:	e003      	b.n	b87c <_printf_i+0x70>
    b874:	2a75      	cmp	r2, #117	; 0x75
    b876:	d020      	beq.n	b8ba <_printf_i+0xae>
    b878:	2a78      	cmp	r2, #120	; 0x78
    b87a:	d1de      	bne.n	b83a <_printf_i+0x2e>
    b87c:	0022      	movs	r2, r4
    b87e:	2178      	movs	r1, #120	; 0x78
    b880:	3245      	adds	r2, #69	; 0x45
    b882:	7011      	strb	r1, [r2, #0]
    b884:	4a6c      	ldr	r2, [pc, #432]	; (ba38 <_printf_i+0x22c>)
    b886:	e030      	b.n	b8ea <_printf_i+0xde>
    b888:	000e      	movs	r6, r1
    b88a:	681a      	ldr	r2, [r3, #0]
    b88c:	3642      	adds	r6, #66	; 0x42
    b88e:	1d11      	adds	r1, r2, #4
    b890:	6019      	str	r1, [r3, #0]
    b892:	6813      	ldr	r3, [r2, #0]
    b894:	7033      	strb	r3, [r6, #0]
    b896:	2301      	movs	r3, #1
    b898:	e079      	b.n	b98e <_printf_i+0x182>
    b89a:	0649      	lsls	r1, r1, #25
    b89c:	d5d9      	bpl.n	b852 <_printf_i+0x46>
    b89e:	1d11      	adds	r1, r2, #4
    b8a0:	6019      	str	r1, [r3, #0]
    b8a2:	2300      	movs	r3, #0
    b8a4:	5ed5      	ldrsh	r5, [r2, r3]
    b8a6:	2d00      	cmp	r5, #0
    b8a8:	da03      	bge.n	b8b2 <_printf_i+0xa6>
    b8aa:	232d      	movs	r3, #45	; 0x2d
    b8ac:	9a04      	ldr	r2, [sp, #16]
    b8ae:	426d      	negs	r5, r5
    b8b0:	7013      	strb	r3, [r2, #0]
    b8b2:	4b62      	ldr	r3, [pc, #392]	; (ba3c <_printf_i+0x230>)
    b8b4:	270a      	movs	r7, #10
    b8b6:	9303      	str	r3, [sp, #12]
    b8b8:	e02f      	b.n	b91a <_printf_i+0x10e>
    b8ba:	6820      	ldr	r0, [r4, #0]
    b8bc:	6819      	ldr	r1, [r3, #0]
    b8be:	0605      	lsls	r5, r0, #24
    b8c0:	d503      	bpl.n	b8ca <_printf_i+0xbe>
    b8c2:	1d08      	adds	r0, r1, #4
    b8c4:	6018      	str	r0, [r3, #0]
    b8c6:	680d      	ldr	r5, [r1, #0]
    b8c8:	e005      	b.n	b8d6 <_printf_i+0xca>
    b8ca:	0640      	lsls	r0, r0, #25
    b8cc:	d5f9      	bpl.n	b8c2 <_printf_i+0xb6>
    b8ce:	680d      	ldr	r5, [r1, #0]
    b8d0:	1d08      	adds	r0, r1, #4
    b8d2:	6018      	str	r0, [r3, #0]
    b8d4:	b2ad      	uxth	r5, r5
    b8d6:	4b59      	ldr	r3, [pc, #356]	; (ba3c <_printf_i+0x230>)
    b8d8:	2708      	movs	r7, #8
    b8da:	9303      	str	r3, [sp, #12]
    b8dc:	2a6f      	cmp	r2, #111	; 0x6f
    b8de:	d018      	beq.n	b912 <_printf_i+0x106>
    b8e0:	270a      	movs	r7, #10
    b8e2:	e016      	b.n	b912 <_printf_i+0x106>
    b8e4:	3145      	adds	r1, #69	; 0x45
    b8e6:	700a      	strb	r2, [r1, #0]
    b8e8:	4a54      	ldr	r2, [pc, #336]	; (ba3c <_printf_i+0x230>)
    b8ea:	9203      	str	r2, [sp, #12]
    b8ec:	681a      	ldr	r2, [r3, #0]
    b8ee:	6821      	ldr	r1, [r4, #0]
    b8f0:	1d10      	adds	r0, r2, #4
    b8f2:	6018      	str	r0, [r3, #0]
    b8f4:	6815      	ldr	r5, [r2, #0]
    b8f6:	0608      	lsls	r0, r1, #24
    b8f8:	d522      	bpl.n	b940 <_printf_i+0x134>
    b8fa:	07cb      	lsls	r3, r1, #31
    b8fc:	d502      	bpl.n	b904 <_printf_i+0xf8>
    b8fe:	2320      	movs	r3, #32
    b900:	4319      	orrs	r1, r3
    b902:	6021      	str	r1, [r4, #0]
    b904:	2710      	movs	r7, #16
    b906:	2d00      	cmp	r5, #0
    b908:	d103      	bne.n	b912 <_printf_i+0x106>
    b90a:	2320      	movs	r3, #32
    b90c:	6822      	ldr	r2, [r4, #0]
    b90e:	439a      	bics	r2, r3
    b910:	6022      	str	r2, [r4, #0]
    b912:	0023      	movs	r3, r4
    b914:	2200      	movs	r2, #0
    b916:	3343      	adds	r3, #67	; 0x43
    b918:	701a      	strb	r2, [r3, #0]
    b91a:	6863      	ldr	r3, [r4, #4]
    b91c:	60a3      	str	r3, [r4, #8]
    b91e:	2b00      	cmp	r3, #0
    b920:	db5c      	blt.n	b9dc <_printf_i+0x1d0>
    b922:	2204      	movs	r2, #4
    b924:	6821      	ldr	r1, [r4, #0]
    b926:	4391      	bics	r1, r2
    b928:	6021      	str	r1, [r4, #0]
    b92a:	2d00      	cmp	r5, #0
    b92c:	d158      	bne.n	b9e0 <_printf_i+0x1d4>
    b92e:	9e04      	ldr	r6, [sp, #16]
    b930:	2b00      	cmp	r3, #0
    b932:	d064      	beq.n	b9fe <_printf_i+0x1f2>
    b934:	0026      	movs	r6, r4
    b936:	9b03      	ldr	r3, [sp, #12]
    b938:	3642      	adds	r6, #66	; 0x42
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	7033      	strb	r3, [r6, #0]
    b93e:	e05e      	b.n	b9fe <_printf_i+0x1f2>
    b940:	0648      	lsls	r0, r1, #25
    b942:	d5da      	bpl.n	b8fa <_printf_i+0xee>
    b944:	b2ad      	uxth	r5, r5
    b946:	e7d8      	b.n	b8fa <_printf_i+0xee>
    b948:	6809      	ldr	r1, [r1, #0]
    b94a:	681a      	ldr	r2, [r3, #0]
    b94c:	0608      	lsls	r0, r1, #24
    b94e:	d505      	bpl.n	b95c <_printf_i+0x150>
    b950:	1d11      	adds	r1, r2, #4
    b952:	6019      	str	r1, [r3, #0]
    b954:	6813      	ldr	r3, [r2, #0]
    b956:	6962      	ldr	r2, [r4, #20]
    b958:	601a      	str	r2, [r3, #0]
    b95a:	e006      	b.n	b96a <_printf_i+0x15e>
    b95c:	0649      	lsls	r1, r1, #25
    b95e:	d5f7      	bpl.n	b950 <_printf_i+0x144>
    b960:	1d11      	adds	r1, r2, #4
    b962:	6019      	str	r1, [r3, #0]
    b964:	6813      	ldr	r3, [r2, #0]
    b966:	8aa2      	ldrh	r2, [r4, #20]
    b968:	801a      	strh	r2, [r3, #0]
    b96a:	2300      	movs	r3, #0
    b96c:	9e04      	ldr	r6, [sp, #16]
    b96e:	6123      	str	r3, [r4, #16]
    b970:	e054      	b.n	ba1c <_printf_i+0x210>
    b972:	681a      	ldr	r2, [r3, #0]
    b974:	1d11      	adds	r1, r2, #4
    b976:	6019      	str	r1, [r3, #0]
    b978:	6816      	ldr	r6, [r2, #0]
    b97a:	2100      	movs	r1, #0
    b97c:	6862      	ldr	r2, [r4, #4]
    b97e:	0030      	movs	r0, r6
    b980:	f000 f85e 	bl	ba40 <memchr>
    b984:	2800      	cmp	r0, #0
    b986:	d001      	beq.n	b98c <_printf_i+0x180>
    b988:	1b80      	subs	r0, r0, r6
    b98a:	6060      	str	r0, [r4, #4]
    b98c:	6863      	ldr	r3, [r4, #4]
    b98e:	6123      	str	r3, [r4, #16]
    b990:	2300      	movs	r3, #0
    b992:	9a04      	ldr	r2, [sp, #16]
    b994:	7013      	strb	r3, [r2, #0]
    b996:	e041      	b.n	ba1c <_printf_i+0x210>
    b998:	6923      	ldr	r3, [r4, #16]
    b99a:	0032      	movs	r2, r6
    b99c:	9906      	ldr	r1, [sp, #24]
    b99e:	9805      	ldr	r0, [sp, #20]
    b9a0:	9d07      	ldr	r5, [sp, #28]
    b9a2:	47a8      	blx	r5
    b9a4:	1c43      	adds	r3, r0, #1
    b9a6:	d043      	beq.n	ba30 <_printf_i+0x224>
    b9a8:	6823      	ldr	r3, [r4, #0]
    b9aa:	2500      	movs	r5, #0
    b9ac:	079b      	lsls	r3, r3, #30
    b9ae:	d40f      	bmi.n	b9d0 <_printf_i+0x1c4>
    b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9b2:	68e0      	ldr	r0, [r4, #12]
    b9b4:	4298      	cmp	r0, r3
    b9b6:	da3d      	bge.n	ba34 <_printf_i+0x228>
    b9b8:	0018      	movs	r0, r3
    b9ba:	e03b      	b.n	ba34 <_printf_i+0x228>
    b9bc:	0022      	movs	r2, r4
    b9be:	2301      	movs	r3, #1
    b9c0:	3219      	adds	r2, #25
    b9c2:	9906      	ldr	r1, [sp, #24]
    b9c4:	9805      	ldr	r0, [sp, #20]
    b9c6:	9e07      	ldr	r6, [sp, #28]
    b9c8:	47b0      	blx	r6
    b9ca:	1c43      	adds	r3, r0, #1
    b9cc:	d030      	beq.n	ba30 <_printf_i+0x224>
    b9ce:	3501      	adds	r5, #1
    b9d0:	68e3      	ldr	r3, [r4, #12]
    b9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b9d4:	1a9b      	subs	r3, r3, r2
    b9d6:	429d      	cmp	r5, r3
    b9d8:	dbf0      	blt.n	b9bc <_printf_i+0x1b0>
    b9da:	e7e9      	b.n	b9b0 <_printf_i+0x1a4>
    b9dc:	2d00      	cmp	r5, #0
    b9de:	d0a9      	beq.n	b934 <_printf_i+0x128>
    b9e0:	9e04      	ldr	r6, [sp, #16]
    b9e2:	0028      	movs	r0, r5
    b9e4:	0039      	movs	r1, r7
    b9e6:	f7fc fee5 	bl	87b4 <__aeabi_uidivmod>
    b9ea:	9b03      	ldr	r3, [sp, #12]
    b9ec:	3e01      	subs	r6, #1
    b9ee:	5c5b      	ldrb	r3, [r3, r1]
    b9f0:	0028      	movs	r0, r5
    b9f2:	7033      	strb	r3, [r6, #0]
    b9f4:	0039      	movs	r1, r7
    b9f6:	f7fc fe57 	bl	86a8 <__udivsi3>
    b9fa:	1e05      	subs	r5, r0, #0
    b9fc:	d1f1      	bne.n	b9e2 <_printf_i+0x1d6>
    b9fe:	2f08      	cmp	r7, #8
    ba00:	d109      	bne.n	ba16 <_printf_i+0x20a>
    ba02:	6823      	ldr	r3, [r4, #0]
    ba04:	07db      	lsls	r3, r3, #31
    ba06:	d506      	bpl.n	ba16 <_printf_i+0x20a>
    ba08:	6863      	ldr	r3, [r4, #4]
    ba0a:	6922      	ldr	r2, [r4, #16]
    ba0c:	4293      	cmp	r3, r2
    ba0e:	dc02      	bgt.n	ba16 <_printf_i+0x20a>
    ba10:	2330      	movs	r3, #48	; 0x30
    ba12:	3e01      	subs	r6, #1
    ba14:	7033      	strb	r3, [r6, #0]
    ba16:	9b04      	ldr	r3, [sp, #16]
    ba18:	1b9b      	subs	r3, r3, r6
    ba1a:	6123      	str	r3, [r4, #16]
    ba1c:	9b07      	ldr	r3, [sp, #28]
    ba1e:	aa09      	add	r2, sp, #36	; 0x24
    ba20:	9300      	str	r3, [sp, #0]
    ba22:	0021      	movs	r1, r4
    ba24:	9b06      	ldr	r3, [sp, #24]
    ba26:	9805      	ldr	r0, [sp, #20]
    ba28:	f7ff fe82 	bl	b730 <_printf_common>
    ba2c:	1c43      	adds	r3, r0, #1
    ba2e:	d1b3      	bne.n	b998 <_printf_i+0x18c>
    ba30:	2001      	movs	r0, #1
    ba32:	4240      	negs	r0, r0
    ba34:	b00b      	add	sp, #44	; 0x2c
    ba36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba38:	0000c112 	.word	0x0000c112
    ba3c:	0000c101 	.word	0x0000c101

0000ba40 <memchr>:
    ba40:	b2c9      	uxtb	r1, r1
    ba42:	1882      	adds	r2, r0, r2
    ba44:	4290      	cmp	r0, r2
    ba46:	d101      	bne.n	ba4c <memchr+0xc>
    ba48:	2000      	movs	r0, #0
    ba4a:	4770      	bx	lr
    ba4c:	7803      	ldrb	r3, [r0, #0]
    ba4e:	428b      	cmp	r3, r1
    ba50:	d0fb      	beq.n	ba4a <memchr+0xa>
    ba52:	3001      	adds	r0, #1
    ba54:	e7f6      	b.n	ba44 <memchr+0x4>

0000ba56 <memmove>:
    ba56:	b510      	push	{r4, lr}
    ba58:	4288      	cmp	r0, r1
    ba5a:	d902      	bls.n	ba62 <memmove+0xc>
    ba5c:	188b      	adds	r3, r1, r2
    ba5e:	4298      	cmp	r0, r3
    ba60:	d308      	bcc.n	ba74 <memmove+0x1e>
    ba62:	2300      	movs	r3, #0
    ba64:	429a      	cmp	r2, r3
    ba66:	d007      	beq.n	ba78 <memmove+0x22>
    ba68:	5ccc      	ldrb	r4, [r1, r3]
    ba6a:	54c4      	strb	r4, [r0, r3]
    ba6c:	3301      	adds	r3, #1
    ba6e:	e7f9      	b.n	ba64 <memmove+0xe>
    ba70:	5c8b      	ldrb	r3, [r1, r2]
    ba72:	5483      	strb	r3, [r0, r2]
    ba74:	3a01      	subs	r2, #1
    ba76:	d2fb      	bcs.n	ba70 <memmove+0x1a>
    ba78:	bd10      	pop	{r4, pc}
	...

0000ba7c <_free_r>:
    ba7c:	b570      	push	{r4, r5, r6, lr}
    ba7e:	0005      	movs	r5, r0
    ba80:	2900      	cmp	r1, #0
    ba82:	d010      	beq.n	baa6 <_free_r+0x2a>
    ba84:	1f0c      	subs	r4, r1, #4
    ba86:	6823      	ldr	r3, [r4, #0]
    ba88:	2b00      	cmp	r3, #0
    ba8a:	da00      	bge.n	ba8e <_free_r+0x12>
    ba8c:	18e4      	adds	r4, r4, r3
    ba8e:	0028      	movs	r0, r5
    ba90:	f000 f8d4 	bl	bc3c <__malloc_lock>
    ba94:	4a1d      	ldr	r2, [pc, #116]	; (bb0c <_free_r+0x90>)
    ba96:	6813      	ldr	r3, [r2, #0]
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d105      	bne.n	baa8 <_free_r+0x2c>
    ba9c:	6063      	str	r3, [r4, #4]
    ba9e:	6014      	str	r4, [r2, #0]
    baa0:	0028      	movs	r0, r5
    baa2:	f000 f8cc 	bl	bc3e <__malloc_unlock>
    baa6:	bd70      	pop	{r4, r5, r6, pc}
    baa8:	42a3      	cmp	r3, r4
    baaa:	d909      	bls.n	bac0 <_free_r+0x44>
    baac:	6821      	ldr	r1, [r4, #0]
    baae:	1860      	adds	r0, r4, r1
    bab0:	4283      	cmp	r3, r0
    bab2:	d1f3      	bne.n	ba9c <_free_r+0x20>
    bab4:	6818      	ldr	r0, [r3, #0]
    bab6:	685b      	ldr	r3, [r3, #4]
    bab8:	1841      	adds	r1, r0, r1
    baba:	6021      	str	r1, [r4, #0]
    babc:	e7ee      	b.n	ba9c <_free_r+0x20>
    babe:	0013      	movs	r3, r2
    bac0:	685a      	ldr	r2, [r3, #4]
    bac2:	2a00      	cmp	r2, #0
    bac4:	d001      	beq.n	baca <_free_r+0x4e>
    bac6:	42a2      	cmp	r2, r4
    bac8:	d9f9      	bls.n	babe <_free_r+0x42>
    baca:	6819      	ldr	r1, [r3, #0]
    bacc:	1858      	adds	r0, r3, r1
    bace:	42a0      	cmp	r0, r4
    bad0:	d10b      	bne.n	baea <_free_r+0x6e>
    bad2:	6820      	ldr	r0, [r4, #0]
    bad4:	1809      	adds	r1, r1, r0
    bad6:	1858      	adds	r0, r3, r1
    bad8:	6019      	str	r1, [r3, #0]
    bada:	4282      	cmp	r2, r0
    badc:	d1e0      	bne.n	baa0 <_free_r+0x24>
    bade:	6810      	ldr	r0, [r2, #0]
    bae0:	6852      	ldr	r2, [r2, #4]
    bae2:	1841      	adds	r1, r0, r1
    bae4:	6019      	str	r1, [r3, #0]
    bae6:	605a      	str	r2, [r3, #4]
    bae8:	e7da      	b.n	baa0 <_free_r+0x24>
    baea:	42a0      	cmp	r0, r4
    baec:	d902      	bls.n	baf4 <_free_r+0x78>
    baee:	230c      	movs	r3, #12
    baf0:	602b      	str	r3, [r5, #0]
    baf2:	e7d5      	b.n	baa0 <_free_r+0x24>
    baf4:	6821      	ldr	r1, [r4, #0]
    baf6:	1860      	adds	r0, r4, r1
    baf8:	4282      	cmp	r2, r0
    bafa:	d103      	bne.n	bb04 <_free_r+0x88>
    bafc:	6810      	ldr	r0, [r2, #0]
    bafe:	6852      	ldr	r2, [r2, #4]
    bb00:	1841      	adds	r1, r0, r1
    bb02:	6021      	str	r1, [r4, #0]
    bb04:	6062      	str	r2, [r4, #4]
    bb06:	605c      	str	r4, [r3, #4]
    bb08:	e7ca      	b.n	baa0 <_free_r+0x24>
    bb0a:	46c0      	nop			; (mov r8, r8)
    bb0c:	200052dc 	.word	0x200052dc

0000bb10 <_malloc_r>:
    bb10:	2303      	movs	r3, #3
    bb12:	b570      	push	{r4, r5, r6, lr}
    bb14:	1ccd      	adds	r5, r1, #3
    bb16:	439d      	bics	r5, r3
    bb18:	3508      	adds	r5, #8
    bb1a:	0006      	movs	r6, r0
    bb1c:	2d0c      	cmp	r5, #12
    bb1e:	d21e      	bcs.n	bb5e <_malloc_r+0x4e>
    bb20:	250c      	movs	r5, #12
    bb22:	42a9      	cmp	r1, r5
    bb24:	d81d      	bhi.n	bb62 <_malloc_r+0x52>
    bb26:	0030      	movs	r0, r6
    bb28:	f000 f888 	bl	bc3c <__malloc_lock>
    bb2c:	4a25      	ldr	r2, [pc, #148]	; (bbc4 <_malloc_r+0xb4>)
    bb2e:	6814      	ldr	r4, [r2, #0]
    bb30:	0021      	movs	r1, r4
    bb32:	2900      	cmp	r1, #0
    bb34:	d119      	bne.n	bb6a <_malloc_r+0x5a>
    bb36:	4c24      	ldr	r4, [pc, #144]	; (bbc8 <_malloc_r+0xb8>)
    bb38:	6823      	ldr	r3, [r4, #0]
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	d103      	bne.n	bb46 <_malloc_r+0x36>
    bb3e:	0030      	movs	r0, r6
    bb40:	f000 f86a 	bl	bc18 <_sbrk_r>
    bb44:	6020      	str	r0, [r4, #0]
    bb46:	0029      	movs	r1, r5
    bb48:	0030      	movs	r0, r6
    bb4a:	f000 f865 	bl	bc18 <_sbrk_r>
    bb4e:	1c43      	adds	r3, r0, #1
    bb50:	d12c      	bne.n	bbac <_malloc_r+0x9c>
    bb52:	230c      	movs	r3, #12
    bb54:	0030      	movs	r0, r6
    bb56:	6033      	str	r3, [r6, #0]
    bb58:	f000 f871 	bl	bc3e <__malloc_unlock>
    bb5c:	e003      	b.n	bb66 <_malloc_r+0x56>
    bb5e:	2d00      	cmp	r5, #0
    bb60:	dadf      	bge.n	bb22 <_malloc_r+0x12>
    bb62:	230c      	movs	r3, #12
    bb64:	6033      	str	r3, [r6, #0]
    bb66:	2000      	movs	r0, #0
    bb68:	bd70      	pop	{r4, r5, r6, pc}
    bb6a:	680b      	ldr	r3, [r1, #0]
    bb6c:	1b5b      	subs	r3, r3, r5
    bb6e:	d41a      	bmi.n	bba6 <_malloc_r+0x96>
    bb70:	2b0b      	cmp	r3, #11
    bb72:	d903      	bls.n	bb7c <_malloc_r+0x6c>
    bb74:	600b      	str	r3, [r1, #0]
    bb76:	18cc      	adds	r4, r1, r3
    bb78:	6025      	str	r5, [r4, #0]
    bb7a:	e003      	b.n	bb84 <_malloc_r+0x74>
    bb7c:	428c      	cmp	r4, r1
    bb7e:	d10e      	bne.n	bb9e <_malloc_r+0x8e>
    bb80:	6863      	ldr	r3, [r4, #4]
    bb82:	6013      	str	r3, [r2, #0]
    bb84:	0030      	movs	r0, r6
    bb86:	f000 f85a 	bl	bc3e <__malloc_unlock>
    bb8a:	0020      	movs	r0, r4
    bb8c:	2207      	movs	r2, #7
    bb8e:	300b      	adds	r0, #11
    bb90:	1d23      	adds	r3, r4, #4
    bb92:	4390      	bics	r0, r2
    bb94:	1ac3      	subs	r3, r0, r3
    bb96:	d0e7      	beq.n	bb68 <_malloc_r+0x58>
    bb98:	425a      	negs	r2, r3
    bb9a:	50e2      	str	r2, [r4, r3]
    bb9c:	e7e4      	b.n	bb68 <_malloc_r+0x58>
    bb9e:	684b      	ldr	r3, [r1, #4]
    bba0:	6063      	str	r3, [r4, #4]
    bba2:	000c      	movs	r4, r1
    bba4:	e7ee      	b.n	bb84 <_malloc_r+0x74>
    bba6:	000c      	movs	r4, r1
    bba8:	6849      	ldr	r1, [r1, #4]
    bbaa:	e7c2      	b.n	bb32 <_malloc_r+0x22>
    bbac:	2303      	movs	r3, #3
    bbae:	1cc4      	adds	r4, r0, #3
    bbb0:	439c      	bics	r4, r3
    bbb2:	42a0      	cmp	r0, r4
    bbb4:	d0e0      	beq.n	bb78 <_malloc_r+0x68>
    bbb6:	1a21      	subs	r1, r4, r0
    bbb8:	0030      	movs	r0, r6
    bbba:	f000 f82d 	bl	bc18 <_sbrk_r>
    bbbe:	1c43      	adds	r3, r0, #1
    bbc0:	d1da      	bne.n	bb78 <_malloc_r+0x68>
    bbc2:	e7c6      	b.n	bb52 <_malloc_r+0x42>
    bbc4:	200052dc 	.word	0x200052dc
    bbc8:	200052e0 	.word	0x200052e0

0000bbcc <_realloc_r>:
    bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbce:	0007      	movs	r7, r0
    bbd0:	000d      	movs	r5, r1
    bbd2:	0016      	movs	r6, r2
    bbd4:	2900      	cmp	r1, #0
    bbd6:	d105      	bne.n	bbe4 <_realloc_r+0x18>
    bbd8:	0011      	movs	r1, r2
    bbda:	f7ff ff99 	bl	bb10 <_malloc_r>
    bbde:	0004      	movs	r4, r0
    bbe0:	0020      	movs	r0, r4
    bbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bbe4:	2a00      	cmp	r2, #0
    bbe6:	d103      	bne.n	bbf0 <_realloc_r+0x24>
    bbe8:	f7ff ff48 	bl	ba7c <_free_r>
    bbec:	0034      	movs	r4, r6
    bbee:	e7f7      	b.n	bbe0 <_realloc_r+0x14>
    bbf0:	f000 f826 	bl	bc40 <_malloc_usable_size_r>
    bbf4:	002c      	movs	r4, r5
    bbf6:	4286      	cmp	r6, r0
    bbf8:	d9f2      	bls.n	bbe0 <_realloc_r+0x14>
    bbfa:	0031      	movs	r1, r6
    bbfc:	0038      	movs	r0, r7
    bbfe:	f7ff ff87 	bl	bb10 <_malloc_r>
    bc02:	1e04      	subs	r4, r0, #0
    bc04:	d0ec      	beq.n	bbe0 <_realloc_r+0x14>
    bc06:	0029      	movs	r1, r5
    bc08:	0032      	movs	r2, r6
    bc0a:	f7ff fbbd 	bl	b388 <memcpy>
    bc0e:	0029      	movs	r1, r5
    bc10:	0038      	movs	r0, r7
    bc12:	f7ff ff33 	bl	ba7c <_free_r>
    bc16:	e7e3      	b.n	bbe0 <_realloc_r+0x14>

0000bc18 <_sbrk_r>:
    bc18:	2300      	movs	r3, #0
    bc1a:	b570      	push	{r4, r5, r6, lr}
    bc1c:	4c06      	ldr	r4, [pc, #24]	; (bc38 <_sbrk_r+0x20>)
    bc1e:	0005      	movs	r5, r0
    bc20:	0008      	movs	r0, r1
    bc22:	6023      	str	r3, [r4, #0]
    bc24:	f7fc fc94 	bl	8550 <_sbrk>
    bc28:	1c43      	adds	r3, r0, #1
    bc2a:	d103      	bne.n	bc34 <_sbrk_r+0x1c>
    bc2c:	6823      	ldr	r3, [r4, #0]
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d000      	beq.n	bc34 <_sbrk_r+0x1c>
    bc32:	602b      	str	r3, [r5, #0]
    bc34:	bd70      	pop	{r4, r5, r6, pc}
    bc36:	46c0      	nop			; (mov r8, r8)
    bc38:	20005348 	.word	0x20005348

0000bc3c <__malloc_lock>:
    bc3c:	4770      	bx	lr

0000bc3e <__malloc_unlock>:
    bc3e:	4770      	bx	lr

0000bc40 <_malloc_usable_size_r>:
    bc40:	1f0b      	subs	r3, r1, #4
    bc42:	681b      	ldr	r3, [r3, #0]
    bc44:	1f18      	subs	r0, r3, #4
    bc46:	2b00      	cmp	r3, #0
    bc48:	da01      	bge.n	bc4e <_malloc_usable_size_r+0xe>
    bc4a:	580b      	ldr	r3, [r1, r0]
    bc4c:	18c0      	adds	r0, r0, r3
    bc4e:	4770      	bx	lr
    bc50:	00000002 	.word	0x00000002
    bc54:	00000003 	.word	0x00000003
    bc58:	00000028 	.word	0x00000028
    bc5c:	00000029 	.word	0x00000029
    bc60:	00000004 	.word	0x00000004
    bc64:	00000005 	.word	0x00000005
    bc68:	00000006 	.word	0x00000006
    bc6c:	00000007 	.word	0x00000007
    bc70:	00000020 	.word	0x00000020
    bc74:	00000021 	.word	0x00000021
    bc78:	00000022 	.word	0x00000022
    bc7c:	00000023 	.word	0x00000023
    bc80:	00000024 	.word	0x00000024
    bc84:	00000025 	.word	0x00000025
    bc88:	00000026 	.word	0x00000026
    bc8c:	00000027 	.word	0x00000027
    bc90:	00000008 	.word	0x00000008
    bc94:	00000009 	.word	0x00000009
    bc98:	0000000a 	.word	0x0000000a
    bc9c:	0000000b 	.word	0x0000000b
    bca0:	000004da 	.word	0x000004da
    bca4:	000004e0 	.word	0x000004e0
    bca8:	000004e0 	.word	0x000004e0
    bcac:	000004e0 	.word	0x000004e0
    bcb0:	000004e0 	.word	0x000004e0
    bcb4:	000004e0 	.word	0x000004e0
    bcb8:	000004e0 	.word	0x000004e0
    bcbc:	000004e0 	.word	0x000004e0
    bcc0:	000004e0 	.word	0x000004e0
    bcc4:	000004e0 	.word	0x000004e0
    bcc8:	000004e0 	.word	0x000004e0
    bccc:	000004e0 	.word	0x000004e0
    bcd0:	000004e0 	.word	0x000004e0
    bcd4:	000004e0 	.word	0x000004e0
    bcd8:	000004e0 	.word	0x000004e0
    bcdc:	000004e0 	.word	0x000004e0
    bce0:	000004b8 	.word	0x000004b8
    bce4:	000004e0 	.word	0x000004e0
    bce8:	000004e0 	.word	0x000004e0
    bcec:	000004e0 	.word	0x000004e0
    bcf0:	000004e0 	.word	0x000004e0
    bcf4:	000004e0 	.word	0x000004e0
    bcf8:	000004e0 	.word	0x000004e0
    bcfc:	000004e0 	.word	0x000004e0
    bd00:	000004e0 	.word	0x000004e0
    bd04:	000004e0 	.word	0x000004e0
    bd08:	000004e0 	.word	0x000004e0
    bd0c:	000004e0 	.word	0x000004e0
    bd10:	000004e0 	.word	0x000004e0
    bd14:	000004e0 	.word	0x000004e0
    bd18:	000004e0 	.word	0x000004e0
    bd1c:	000004e0 	.word	0x000004e0
    bd20:	000004d4 	.word	0x000004d4
    bd24:	000004e0 	.word	0x000004e0
    bd28:	000004e0 	.word	0x000004e0
    bd2c:	000004e0 	.word	0x000004e0
    bd30:	000004e0 	.word	0x000004e0
    bd34:	000004e0 	.word	0x000004e0
    bd38:	000004e0 	.word	0x000004e0
    bd3c:	000004e0 	.word	0x000004e0
    bd40:	000004e0 	.word	0x000004e0
    bd44:	000004e0 	.word	0x000004e0
    bd48:	000004e0 	.word	0x000004e0
    bd4c:	000004e0 	.word	0x000004e0
    bd50:	000004e0 	.word	0x000004e0
    bd54:	000004e0 	.word	0x000004e0
    bd58:	000004e0 	.word	0x000004e0
    bd5c:	000004e0 	.word	0x000004e0
    bd60:	000004ce 	.word	0x000004ce
    bd64:	00000476 	.word	0x00000476
    bd68:	0000048c 	.word	0x0000048c
    bd6c:	000004a2 	.word	0x000004a2
    bd70:	0000045c 	.word	0x0000045c
    bd74:	20776f4c 	.word	0x20776f4c
    bd78:	74736f43 	.word	0x74736f43
    bd7c:	6e655620 	.word	0x6e655620
    bd80:	616c6974 	.word	0x616c6974
    bd84:	00726f74 	.word	0x00726f74
    bd88:	544e4556 	.word	0x544e4556
    bd8c:	004e4f3a 	.word	0x004e4f3a
    bd90:	544e4556 	.word	0x544e4556
    bd94:	46464f3a 	.word	0x46464f3a
    bd98:	00000000 	.word	0x00000000
    bd9c:	69253a56 	.word	0x69253a56
    bda0:	00006c6d 	.word	0x00006c6d
    bda4:	50454550 	.word	0x50454550
    bda8:	6369253a 	.word	0x6369253a
    bdac:	3032486d 	.word	0x3032486d
    bdb0:	00000000 	.word	0x00000000
    bdb4:	253a4549 	.word	0x253a4549
    bdb8:	69252e69 	.word	0x69252e69
    bdbc:	0000313a 	.word	0x0000313a
    bdc0:	3a504950 	.word	0x3a504950
    bdc4:	6d636925 	.word	0x6d636925
    bdc8:	00303248 	.word	0x00303248
    bdcc:	3a4d5042 	.word	0x3a4d5042
    bdd0:	00006925 	.word	0x00006925
    bdd4:	20544553 	.word	0x20544553
    bdd8:	3a4d5042 	.word	0x3a4d5042
    bddc:	00006925 	.word	0x00006925
    bde0:	20544553 	.word	0x20544553
    bde4:	50454550 	.word	0x50454550
    bde8:	6369253a 	.word	0x6369253a
    bdec:	3032486d 	.word	0x3032486d
    bdf0:	00000000 	.word	0x00000000
    bdf4:	20544553 	.word	0x20544553
    bdf8:	3a504950 	.word	0x3a504950
    bdfc:	6d636925 	.word	0x6d636925
    be00:	00303248 	.word	0x00303248
    be04:	20544553 	.word	0x20544553
    be08:	3a453a49 	.word	0x3a453a49
    be0c:	2e692520 	.word	0x2e692520
    be10:	313a6925 	.word	0x313a6925
    be14:	00000000 	.word	0x00000000
    be18:	4f525245 	.word	0x4f525245
    be1c:	003a5352 	.word	0x003a5352
    be20:	574f4c46 	.word	0x574f4c46
    be24:	00000000 	.word	0x00000000
    be28:	53455250 	.word	0x53455250
    be2c:	534e5320 	.word	0x534e5320
    be30:	00000000 	.word	0x00000000
    be34:	20544f4d 	.word	0x20544f4d
    be38:	4c494146 	.word	0x4c494146
    be3c:	00000000 	.word	0x00000000
    be40:	20544f4d 	.word	0x20544f4d
    be44:	504d4554 	.word	0x504d4554
    be48:	00000000 	.word	0x00000000
    be4c:	54544553 	.word	0x54544553
    be50:	414f4c20 	.word	0x414f4c20
    be54:	00000044 	.word	0x00000044
    be58:	49522050 	.word	0x49522050
    be5c:	00004553 	.word	0x00004553
    be60:	000035ec 	.word	0x000035ec
    be64:	000035a2 	.word	0x000035a2
    be68:	000035b2 	.word	0x000035b2
    be6c:	000035c2 	.word	0x000035c2
    be70:	000035d2 	.word	0x000035d2
    be74:	544e4f43 	.word	0x544e4f43
    be78:	004c4f52 	.word	0x004c4f52
    be7c:	00004078 	.word	0x00004078
    be80:	00004080 	.word	0x00004080
    be84:	00004088 	.word	0x00004088
    be88:	00004090 	.word	0x00004090
    be8c:	00004098 	.word	0x00004098
    be90:	000041d2 	.word	0x000041d2
    be94:	000040cc 	.word	0x000040cc
    be98:	0000410a 	.word	0x0000410a
    be9c:	00004148 	.word	0x00004148
    bea0:	00004186 	.word	0x00004186
    bea4:	45524353 	.word	0x45524353
    bea8:	545f4e45 	.word	0x545f4e45
    beac:	00004d49 	.word	0x00004d49
    beb0:	45524353 	.word	0x45524353
    beb4:	435f4e45 	.word	0x435f4e45
    beb8:	00004748 	.word	0x00004748
    bebc:	00494d48 	.word	0x00494d48
    bec0:	00433249 	.word	0x00433249
    bec4:	494e4f4d 	.word	0x494e4f4d
    bec8:	00524f54 	.word	0x00524f54
    becc:	534e4553 	.word	0x534e4553
    bed0:	0000524f 	.word	0x0000524f
    bed4:	454c4449 	.word	0x454c4449
    bed8:	00000000 	.word	0x00000000
    bedc:	09632509 	.word	0x09632509
    bee0:	25097525 	.word	0x25097525
    bee4:	75250975 	.word	0x75250975
    bee8:	00000a0d 	.word	0x00000a0d
    beec:	20726d54 	.word	0x20726d54
    bef0:	00637653 	.word	0x00637653
    bef4:	51726d54 	.word	0x51726d54
    bef8:	00000000 	.word	0x00000000
    befc:	000067d0 	.word	0x000067d0
    bf00:	000067d0 	.word	0x000067d0
    bf04:	000067d0 	.word	0x000067d0
    bf08:	0000685e 	.word	0x0000685e
    bf0c:	00006828 	.word	0x00006828
    bf10:	00006852 	.word	0x00006852
    bf14:	000067d0 	.word	0x000067d0
    bf18:	000067d0 	.word	0x000067d0
    bf1c:	0000685e 	.word	0x0000685e
    bf20:	00006828 	.word	0x00006828
    bf24:	42000800 	.word	0x42000800
    bf28:	42000c00 	.word	0x42000c00
    bf2c:	42001000 	.word	0x42001000
    bf30:	42001400 	.word	0x42001400
    bf34:	42001800 	.word	0x42001800
    bf38:	42001c00 	.word	0x42001c00
    bf3c:	0c0b0a09 	.word	0x0c0b0a09
    bf40:	00000e0d 	.word	0x00000e0d
    bf44:	00007812 	.word	0x00007812
    bf48:	0000788c 	.word	0x0000788c
    bf4c:	0000788c 	.word	0x0000788c
    bf50:	00007830 	.word	0x00007830
    bf54:	0000782a 	.word	0x0000782a
    bf58:	00007836 	.word	0x00007836
    bf5c:	00007818 	.word	0x00007818
    bf60:	0000783c 	.word	0x0000783c
    bf64:	00007872 	.word	0x00007872
    bf68:	00007a38 	.word	0x00007a38
    bf6c:	00007a88 	.word	0x00007a88
    bf70:	00007a88 	.word	0x00007a88
    bf74:	00007a84 	.word	0x00007a84
    bf78:	00007a2a 	.word	0x00007a2a
    bf7c:	00007a4a 	.word	0x00007a4a
    bf80:	00007a1a 	.word	0x00007a1a
    bf84:	00007a5c 	.word	0x00007a5c
    bf88:	00007a6e 	.word	0x00007a6e
    bf8c:	00007ad6 	.word	0x00007ad6
    bf90:	00007b04 	.word	0x00007b04
    bf94:	00007b04 	.word	0x00007b04
    bf98:	00007b00 	.word	0x00007b00
    bf9c:	00007ad0 	.word	0x00007ad0
    bfa0:	00007adc 	.word	0x00007adc
    bfa4:	00007aca 	.word	0x00007aca
    bfa8:	00007ae2 	.word	0x00007ae2
    bfac:	00007ae8 	.word	0x00007ae8
    bfb0:	00008d90 	.word	0x00008d90
    bfb4:	00008d60 	.word	0x00008d60
    bfb8:	00008d72 	.word	0x00008d72
    bfbc:	00008cb4 	.word	0x00008cb4
    bfc0:	00008d72 	.word	0x00008d72
    bfc4:	00008d56 	.word	0x00008d56
    bfc8:	00008d72 	.word	0x00008d72
    bfcc:	00008cb4 	.word	0x00008cb4
    bfd0:	00008d60 	.word	0x00008d60
    bfd4:	00008d60 	.word	0x00008d60
    bfd8:	00008d56 	.word	0x00008d56
    bfdc:	00008cb4 	.word	0x00008cb4
    bfe0:	00008cbc 	.word	0x00008cbc
    bfe4:	00008cbc 	.word	0x00008cbc
    bfe8:	00008cbc 	.word	0x00008cbc
    bfec:	00008d78 	.word	0x00008d78
    bff0:	00008d60 	.word	0x00008d60
    bff4:	00008d60 	.word	0x00008d60
    bff8:	00008d34 	.word	0x00008d34
    bffc:	00008e18 	.word	0x00008e18
    c000:	00008d34 	.word	0x00008d34
    c004:	00008d56 	.word	0x00008d56
    c008:	00008d34 	.word	0x00008d34
    c00c:	00008e18 	.word	0x00008e18
    c010:	00008d60 	.word	0x00008d60
    c014:	00008d60 	.word	0x00008d60
    c018:	00008d56 	.word	0x00008d56
    c01c:	00008e18 	.word	0x00008e18
    c020:	00008cbc 	.word	0x00008cbc
    c024:	00008cbc 	.word	0x00008cbc
    c028:	00008cbc 	.word	0x00008cbc
    c02c:	00008e22 	.word	0x00008e22
    c030:	00009110 	.word	0x00009110
    c034:	00009060 	.word	0x00009060
    c038:	00009060 	.word	0x00009060
    c03c:	0000905e 	.word	0x0000905e
    c040:	00009102 	.word	0x00009102
    c044:	00009102 	.word	0x00009102
    c048:	000090f8 	.word	0x000090f8
    c04c:	0000905e 	.word	0x0000905e
    c050:	00009102 	.word	0x00009102
    c054:	000090f8 	.word	0x000090f8
    c058:	00009102 	.word	0x00009102
    c05c:	0000905e 	.word	0x0000905e
    c060:	00009108 	.word	0x00009108
    c064:	00009108 	.word	0x00009108
    c068:	00009108 	.word	0x00009108
    c06c:	00009198 	.word	0x00009198
    c070:	00009e54 	.word	0x00009e54
    c074:	00009e36 	.word	0x00009e36
    c078:	00009df0 	.word	0x00009df0
    c07c:	00009d0e 	.word	0x00009d0e
    c080:	00009df0 	.word	0x00009df0
    c084:	00009e28 	.word	0x00009e28
    c088:	00009df0 	.word	0x00009df0
    c08c:	00009d0e 	.word	0x00009d0e
    c090:	00009e36 	.word	0x00009e36
    c094:	00009e36 	.word	0x00009e36
    c098:	00009e28 	.word	0x00009e28
    c09c:	00009d0e 	.word	0x00009d0e
    c0a0:	00009d06 	.word	0x00009d06
    c0a4:	00009d06 	.word	0x00009d06
    c0a8:	00009d06 	.word	0x00009d06
    c0ac:	0000a06c 	.word	0x0000a06c
    c0b0:	0000a6b4 	.word	0x0000a6b4
    c0b4:	0000a574 	.word	0x0000a574
    c0b8:	0000a574 	.word	0x0000a574
    c0bc:	0000a570 	.word	0x0000a570
    c0c0:	0000a68c 	.word	0x0000a68c
    c0c4:	0000a68c 	.word	0x0000a68c
    c0c8:	0000a67e 	.word	0x0000a67e
    c0cc:	0000a570 	.word	0x0000a570
    c0d0:	0000a68c 	.word	0x0000a68c
    c0d4:	0000a67e 	.word	0x0000a67e
    c0d8:	0000a68c 	.word	0x0000a68c
    c0dc:	0000a570 	.word	0x0000a570
    c0e0:	0000a694 	.word	0x0000a694
    c0e4:	0000a694 	.word	0x0000a694
    c0e8:	0000a694 	.word	0x0000a694
    c0ec:	0000a898 	.word	0x0000a898
    c0f0:	2b302d23 	.word	0x2b302d23
    c0f4:	6c680020 	.word	0x6c680020
    c0f8:	6665004c 	.word	0x6665004c
    c0fc:	47464567 	.word	0x47464567
    c100:	00          	.byte	0x00
    c101:	30          	.byte	0x30
    c102:	3231      	.short	0x3231
    c104:	36353433 	.word	0x36353433
    c108:	41393837 	.word	0x41393837
    c10c:	45444342 	.word	0x45444342
    c110:	31300046 	.word	0x31300046
    c114:	35343332 	.word	0x35343332
    c118:	39383736 	.word	0x39383736
    c11c:	64636261 	.word	0x64636261
    c120:	00006665 	.word	0x00006665

0000c124 <_init>:
    c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c126:	46c0      	nop			; (mov r8, r8)
    c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c12a:	bc08      	pop	{r3}
    c12c:	469e      	mov	lr, r3
    c12e:	4770      	bx	lr

0000c130 <__init_array_start>:
    c130:	000000dd 	.word	0x000000dd

0000c134 <_fini>:
    c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c136:	46c0      	nop			; (mov r8, r8)
    c138:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c13a:	bc08      	pop	{r3}
    c13c:	469e      	mov	lr, r3
    c13e:	4770      	bx	lr

0000c140 <__fini_array_start>:
    c140:	000000b5 	.word	0x000000b5
