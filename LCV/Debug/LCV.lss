
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005750  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000050c8  20000008  00005758  00020008  2**2
                  ALLOC
  3 .stack        00002000  200050d0  0000a820  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   00043fd7  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006486  00000000  00000000  00064060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b386  00000000  00000000  0006a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b30  00000000  00000000  0007586c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ce8  00000000  00000000  0007639c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f646  00000000  00000000  00077084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018964  00000000  00000000  000966ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000924dc  00000000  00000000  000af02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d58  00000000  00000000  0014150c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 70 00 20 11 39 00 00 0d 39 00 00 83 3a 00 00     .p. .9...9...:..
	...
      2c:	0d 39 00 00 00 00 00 00 00 00 00 00 0d 39 00 00     .9...........9..
      3c:	0d 39 00 00 0d 39 00 00 0d 39 00 00 65 2b 00 00     .9...9...9..e+..
      4c:	0d 39 00 00 0d 39 00 00 0d 39 00 00 0d 39 00 00     .9...9...9...9..
      5c:	0d 39 00 00 0d 39 00 00 ed 2d 00 00 fd 2d 00 00     .9...9...-...-..
      6c:	0d 2e 00 00 1d 2e 00 00 2d 2e 00 00 3d 2e 00 00     ........-...=...
      7c:	0d 39 00 00 0d 39 00 00 0d 39 00 00 0d 39 00 00     .9...9...9...9..
      8c:	0d 39 00 00 0d 39 00 00 00 00 00 00 00 00 00 00     .9...9..........
      9c:	85 05 00 00 0d 39 00 00 b9 06 00 00 0d 39 00 00     .....9.......9..
      ac:	0d 39 00 00 00 00 00 00                             .9......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00005750 	.word	0x00005750

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	00005750 	.word	0x00005750
     10c:	00005750 	.word	0x00005750
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	2000506c 	.word	0x2000506c
     494:	00003785 	.word	0x00003785
     498:	000036f9 	.word	0x000036f9
     49c:	000054ad 	.word	0x000054ad
     4a0:	000055a4 	.word	0x000055a4
     4a4:	000038ad 	.word	0x000038ad
     4a8:	000054d0 	.word	0x000054d0
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2f      	ldr	r3, [pc, #188]	; (644 <ADC_Handler+0xc0>)
     588:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	7e1a      	ldrb	r2, [r3, #24]
     58e:	7ddc      	ldrb	r4, [r3, #23]
     590:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     592:	07e2      	lsls	r2, r4, #31
     594:	d416      	bmi.n	5c4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     596:	0763      	lsls	r3, r4, #29
     598:	d508      	bpl.n	5ac <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     59a:	2304      	movs	r3, #4
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5a0:	7eeb      	ldrb	r3, [r5, #27]
     5a2:	079b      	lsls	r3, r3, #30
     5a4:	d502      	bpl.n	5ac <ADC_Handler+0x28>
     5a6:	7eab      	ldrb	r3, [r5, #26]
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d442      	bmi.n	632 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5ac:	07a3      	lsls	r3, r4, #30
     5ae:	d508      	bpl.n	5c2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5b0:	2302      	movs	r3, #2
     5b2:	682a      	ldr	r2, [r5, #0]
     5b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5b6:	7eeb      	ldrb	r3, [r5, #27]
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	d502      	bpl.n	5c2 <ADC_Handler+0x3e>
     5bc:	7eab      	ldrb	r3, [r5, #26]
     5be:	075b      	lsls	r3, r3, #29
     5c0:	d43b      	bmi.n	63a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5c4:	2201      	movs	r2, #1
     5c6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5c8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ca:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     5cc:	b25b      	sxtb	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	dbfb      	blt.n	5ca <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     5d2:	6969      	ldr	r1, [r5, #20]
     5d4:	1c8b      	adds	r3, r1, #2
     5d6:	616b      	str	r3, [r5, #20]
     5d8:	8b53      	ldrh	r3, [r2, #26]
     5da:	b29b      	uxth	r3, r3
     5dc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     5de:	8b2b      	ldrh	r3, [r5, #24]
     5e0:	3b01      	subs	r3, #1
     5e2:	b29b      	uxth	r3, r3
     5e4:	832b      	strh	r3, [r5, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d011      	beq.n	60e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     5ea:	7f6b      	ldrb	r3, [r5, #29]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0d2      	beq.n	596 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5f0:	682a      	ldr	r2, [r5, #0]
     5f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5f4:	b25b      	sxtb	r3, r3
     5f6:	2b00      	cmp	r3, #0
     5f8:	dbfb      	blt.n	5f2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5fa:	7b13      	ldrb	r3, [r2, #12]
     5fc:	2102      	movs	r1, #2
     5fe:	430b      	orrs	r3, r1
     600:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     602:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     604:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	dbfb      	blt.n	604 <ADC_Handler+0x80>
     60c:	e7c3      	b.n	596 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     60e:	2301      	movs	r3, #1
     610:	682a      	ldr	r2, [r5, #0]
     612:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     614:	7f2b      	ldrb	r3, [r5, #28]
     616:	2b05      	cmp	r3, #5
     618:	d1bd      	bne.n	596 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     61a:	2300      	movs	r3, #0
     61c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     61e:	7eeb      	ldrb	r3, [r5, #27]
     620:	07db      	lsls	r3, r3, #31
     622:	d5b8      	bpl.n	596 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     624:	7eab      	ldrb	r3, [r5, #26]
     626:	07db      	lsls	r3, r3, #31
     628:	d5b5      	bpl.n	596 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     62a:	0028      	movs	r0, r5
     62c:	68ab      	ldr	r3, [r5, #8]
     62e:	4798      	blx	r3
     630:	e7b1      	b.n	596 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     632:	0028      	movs	r0, r5
     634:	68eb      	ldr	r3, [r5, #12]
     636:	4798      	blx	r3
     638:	e7b8      	b.n	5ac <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     63a:	692b      	ldr	r3, [r5, #16]
     63c:	0028      	movs	r0, r5
     63e:	4798      	blx	r3
}
     640:	e7bf      	b.n	5c2 <ADC_Handler+0x3e>
     642:	46c0      	nop			; (mov r8, r8)
     644:	2000506c 	.word	0x2000506c

00000648 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     648:	1c93      	adds	r3, r2, #2
     64a:	009b      	lsls	r3, r3, #2
     64c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     64e:	2301      	movs	r3, #1
     650:	4093      	lsls	r3, r2
     652:	001a      	movs	r2, r3
     654:	7e83      	ldrb	r3, [r0, #26]
     656:	4313      	orrs	r3, r2
     658:	7683      	strb	r3, [r0, #26]
}
     65a:	4770      	bx	lr

0000065c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     65c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     65e:	8b03      	ldrh	r3, [r0, #24]
     660:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     662:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     664:	2b00      	cmp	r3, #0
     666:	d001      	beq.n	66c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     668:	0020      	movs	r0, r4
     66a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     66c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     66e:	2b05      	cmp	r3, #5
     670:	d0fa      	beq.n	668 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     672:	2305      	movs	r3, #5
     674:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     676:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     678:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     67a:	3b04      	subs	r3, #4
     67c:	6802      	ldr	r2, [r0, #0]
     67e:	75d3      	strb	r3, [r2, #23]
	if(module_inst->software_trigger == true) {
     680:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     682:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     684:	2b00      	cmp	r3, #0
     686:	d0ef      	beq.n	668 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     688:	6802      	ldr	r2, [r0, #0]
     68a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     68c:	b25b      	sxtb	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	dbfb      	blt.n	68a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     692:	7b13      	ldrb	r3, [r2, #12]
     694:	2102      	movs	r1, #2
     696:	430b      	orrs	r3, r1
     698:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     69a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     69c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     69e:	b25b      	sxtb	r3, r3
     6a0:	2b00      	cmp	r3, #0
     6a2:	dbfb      	blt.n	69c <adc_read_buffer_job+0x40>
	return STATUS_OK;
     6a4:	2400      	movs	r4, #0
     6a6:	e7df      	b.n	668 <adc_read_buffer_job+0xc>

000006a8 <adc_get_job_status>:
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
		return module_inst->job_status;
	} else {
		return STATUS_ERR_INVALID_ARG;
     6a8:	2317      	movs	r3, #23
	if (type == ADC_JOB_READ_BUFFER ) {
     6aa:	2900      	cmp	r1, #0
     6ac:	d001      	beq.n	6b2 <adc_get_job_status+0xa>
	}
}
     6ae:	0018      	movs	r0, r3
     6b0:	4770      	bx	lr
		return module_inst->job_status;
     6b2:	7f03      	ldrb	r3, [r0, #28]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	e7fa      	b.n	6ae <adc_get_job_status+0x6>

000006b8 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     6ba:	4b27      	ldr	r3, [pc, #156]	; (758 <DAC_Handler+0xa0>)
     6bc:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     6be:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     6c0:	79ab      	ldrb	r3, [r5, #6]
     6c2:	07db      	lsls	r3, r3, #31
     6c4:	d507      	bpl.n	6d6 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     6c6:	2301      	movs	r3, #1
     6c8:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     6ca:	0023      	movs	r3, r4
     6cc:	3314      	adds	r3, #20
     6ce:	d002      	beq.n	6d6 <DAC_Handler+0x1e>
     6d0:	7c63      	ldrb	r3, [r4, #17]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d131      	bne.n	73a <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     6d6:	79ab      	ldrb	r3, [r5, #6]
     6d8:	079b      	lsls	r3, r3, #30
     6da:	d538      	bpl.n	74e <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     6dc:	2302      	movs	r3, #2
     6de:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     6e0:	89a3      	ldrh	r3, [r4, #12]
     6e2:	b29b      	uxth	r3, r3
     6e4:	2b00      	cmp	r3, #0
     6e6:	d02c      	beq.n	742 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     6e8:	89e3      	ldrh	r3, [r4, #14]
     6ea:	b29b      	uxth	r3, r3
     6ec:	1c5a      	adds	r2, r3, #1
     6ee:	b292      	uxth	r2, r2
     6f0:	81e2      	strh	r2, [r4, #14]
     6f2:	005b      	lsls	r3, r3, #1
     6f4:	68a2      	ldr	r2, [r4, #8]
     6f6:	4694      	mov	ip, r2
     6f8:	4463      	add	r3, ip
     6fa:	881b      	ldrh	r3, [r3, #0]
     6fc:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     6fe:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     700:	89a3      	ldrh	r3, [r4, #12]
     702:	3b01      	subs	r3, #1
     704:	b29b      	uxth	r3, r3
     706:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     708:	89a3      	ldrh	r3, [r4, #12]
     70a:	b29b      	uxth	r3, r3
     70c:	2b00      	cmp	r3, #0
     70e:	d118      	bne.n	742 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     710:	2200      	movs	r2, #0
     712:	3320      	adds	r3, #32
     714:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     716:	3b1e      	subs	r3, #30
     718:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     71a:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     71c:	2180      	movs	r1, #128	; 0x80
     71e:	0489      	lsls	r1, r1, #18
     720:	337e      	adds	r3, #126	; 0x7e
     722:	4a0e      	ldr	r2, [pc, #56]	; (75c <DAC_Handler+0xa4>)
     724:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     726:	0023      	movs	r3, r4
     728:	3314      	adds	r3, #20
     72a:	d010      	beq.n	74e <DAC_Handler+0x96>
     72c:	7ca3      	ldrb	r3, [r4, #18]
     72e:	2b00      	cmp	r3, #0
     730:	d00a      	beq.n	748 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     732:	2000      	movs	r0, #0
     734:	69e3      	ldr	r3, [r4, #28]
     736:	4798      	blx	r3
     738:	e006      	b.n	748 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     73a:	2000      	movs	r0, #0
     73c:	69a3      	ldr	r3, [r4, #24]
     73e:	4798      	blx	r3
     740:	e7c9      	b.n	6d6 <DAC_Handler+0x1e>
		if ((module->callback) &&
     742:	0023      	movs	r3, r4
     744:	3314      	adds	r3, #20
     746:	d002      	beq.n	74e <DAC_Handler+0x96>
     748:	7c23      	ldrb	r3, [r4, #16]
     74a:	2b00      	cmp	r3, #0
     74c:	d100      	bne.n	750 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     750:	6963      	ldr	r3, [r4, #20]
     752:	2000      	movs	r0, #0
     754:	4798      	blx	r3
}
     756:	e7fa      	b.n	74e <DAC_Handler+0x96>
     758:	20005070 	.word	0x20005070
     75c:	e000e100 	.word	0xe000e100

00000760 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     760:	b5f0      	push	{r4, r5, r6, r7, lr}
     762:	46d6      	mov	lr, sl
     764:	464f      	mov	r7, r9
     766:	4646      	mov	r6, r8
     768:	b5c0      	push	{r6, r7, lr}
     76a:	b08a      	sub	sp, #40	; 0x28
     76c:	0006      	movs	r6, r0
     76e:	000f      	movs	r7, r1
     770:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     772:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     774:	0008      	movs	r0, r1
     776:	4ba0      	ldr	r3, [pc, #640]	; (9f8 <i2c_master_init+0x298>)
     778:	4798      	blx	r3
     77a:	4aa0      	ldr	r2, [pc, #640]	; (9fc <i2c_master_init+0x29c>)
     77c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     77e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     780:	2301      	movs	r3, #1
     782:	40ab      	lsls	r3, r5
     784:	430b      	orrs	r3, r1
     786:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     788:	a909      	add	r1, sp, #36	; 0x24
     78a:	7b23      	ldrb	r3, [r4, #12]
     78c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     78e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     790:	b2c5      	uxtb	r5, r0
     792:	0028      	movs	r0, r5
     794:	4b9a      	ldr	r3, [pc, #616]	; (a00 <i2c_master_init+0x2a0>)
     796:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     798:	0028      	movs	r0, r5
     79a:	4b9a      	ldr	r3, [pc, #616]	; (a04 <i2c_master_init+0x2a4>)
     79c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     79e:	7b20      	ldrb	r0, [r4, #12]
     7a0:	2100      	movs	r1, #0
     7a2:	4b99      	ldr	r3, [pc, #612]	; (a08 <i2c_master_init+0x2a8>)
     7a4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7a6:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     7a8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7aa:	079b      	lsls	r3, r3, #30
     7ac:	d505      	bpl.n	7ba <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     7ae:	b00a      	add	sp, #40	; 0x28
     7b0:	bc1c      	pop	{r2, r3, r4}
     7b2:	4690      	mov	r8, r2
     7b4:	4699      	mov	r9, r3
     7b6:	46a2      	mov	sl, r4
     7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7ba:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     7bc:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7be:	07db      	lsls	r3, r3, #31
     7c0:	d4f5      	bmi.n	7ae <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     7c2:	6830      	ldr	r0, [r6, #0]
     7c4:	4b8c      	ldr	r3, [pc, #560]	; (9f8 <i2c_master_init+0x298>)
     7c6:	4699      	mov	r9, r3
     7c8:	4798      	blx	r3
     7ca:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     7cc:	498f      	ldr	r1, [pc, #572]	; (a0c <i2c_master_init+0x2ac>)
     7ce:	4b90      	ldr	r3, [pc, #576]	; (a10 <i2c_master_init+0x2b0>)
     7d0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     7d2:	00ad      	lsls	r5, r5, #2
     7d4:	4b8f      	ldr	r3, [pc, #572]	; (a14 <i2c_master_init+0x2b4>)
     7d6:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     7d8:	2300      	movs	r3, #0
     7da:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     7dc:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     7de:	2500      	movs	r5, #0
     7e0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     7e2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     7e4:	2225      	movs	r2, #37	; 0x25
     7e6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     7e8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     7ea:	3314      	adds	r3, #20
     7ec:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7ee:	6833      	ldr	r3, [r6, #0]
     7f0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     7f2:	0018      	movs	r0, r3
     7f4:	47c8      	blx	r9
     7f6:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7f8:	2380      	movs	r3, #128	; 0x80
     7fa:	aa08      	add	r2, sp, #32
     7fc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7fe:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     800:	2301      	movs	r3, #1
     802:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     804:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     806:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     808:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     80a:	2800      	cmp	r0, #0
     80c:	d100      	bne.n	810 <i2c_master_init+0xb0>
     80e:	e0af      	b.n	970 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     810:	ab08      	add	r3, sp, #32
     812:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     814:	2302      	movs	r3, #2
     816:	aa08      	add	r2, sp, #32
     818:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     81a:	0c00      	lsrs	r0, r0, #16
     81c:	b2c0      	uxtb	r0, r0
     81e:	0011      	movs	r1, r2
     820:	4b7d      	ldr	r3, [pc, #500]	; (a18 <i2c_master_init+0x2b8>)
     822:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     824:	2f00      	cmp	r7, #0
     826:	d100      	bne.n	82a <i2c_master_init+0xca>
     828:	e0a7      	b.n	97a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     82a:	ab08      	add	r3, sp, #32
     82c:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     82e:	2302      	movs	r3, #2
     830:	aa08      	add	r2, sp, #32
     832:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     834:	0c3f      	lsrs	r7, r7, #16
     836:	b2f8      	uxtb	r0, r7
     838:	0011      	movs	r1, r2
     83a:	4b77      	ldr	r3, [pc, #476]	; (a18 <i2c_master_init+0x2b8>)
     83c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     83e:	8aa3      	ldrh	r3, [r4, #20]
     840:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     842:	8ae3      	ldrh	r3, [r4, #22]
     844:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     846:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     848:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     84a:	2b00      	cmp	r3, #0
     84c:	d104      	bne.n	858 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     84e:	4b73      	ldr	r3, [pc, #460]	; (a1c <i2c_master_init+0x2bc>)
     850:	789b      	ldrb	r3, [r3, #2]
     852:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     854:	0fdb      	lsrs	r3, r3, #31
     856:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     858:	68a1      	ldr	r1, [r4, #8]
     85a:	6923      	ldr	r3, [r4, #16]
     85c:	430b      	orrs	r3, r1
     85e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     860:	2224      	movs	r2, #36	; 0x24
     862:	5ca2      	ldrb	r2, [r4, r2]
     864:	2a00      	cmp	r2, #0
     866:	d002      	beq.n	86e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     868:	2280      	movs	r2, #128	; 0x80
     86a:	05d2      	lsls	r2, r2, #23
     86c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     86e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     870:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     872:	222c      	movs	r2, #44	; 0x2c
     874:	5ca2      	ldrb	r2, [r4, r2]
     876:	2a00      	cmp	r2, #0
     878:	d103      	bne.n	882 <i2c_master_init+0x122>
     87a:	2280      	movs	r2, #128	; 0x80
     87c:	0492      	lsls	r2, r2, #18
     87e:	4291      	cmp	r1, r2
     880:	d102      	bne.n	888 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     882:	2280      	movs	r2, #128	; 0x80
     884:	0512      	lsls	r2, r2, #20
     886:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     888:	222d      	movs	r2, #45	; 0x2d
     88a:	5ca2      	ldrb	r2, [r4, r2]
     88c:	2a00      	cmp	r2, #0
     88e:	d002      	beq.n	896 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     890:	2280      	movs	r2, #128	; 0x80
     892:	0412      	lsls	r2, r2, #16
     894:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     896:	222e      	movs	r2, #46	; 0x2e
     898:	5ca2      	ldrb	r2, [r4, r2]
     89a:	2a00      	cmp	r2, #0
     89c:	d002      	beq.n	8a4 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     89e:	2280      	movs	r2, #128	; 0x80
     8a0:	03d2      	lsls	r2, r2, #15
     8a2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     8a4:	4642      	mov	r2, r8
     8a6:	6812      	ldr	r2, [r2, #0]
     8a8:	4313      	orrs	r3, r2
     8aa:	4642      	mov	r2, r8
     8ac:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     8ae:	2380      	movs	r3, #128	; 0x80
     8b0:	005b      	lsls	r3, r3, #1
     8b2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     8b4:	4648      	mov	r0, r9
     8b6:	3014      	adds	r0, #20
     8b8:	b2c0      	uxtb	r0, r0
     8ba:	4b59      	ldr	r3, [pc, #356]	; (a20 <i2c_master_init+0x2c0>)
     8bc:	4798      	blx	r3
     8be:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     8c0:	23fa      	movs	r3, #250	; 0xfa
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	6822      	ldr	r2, [r4, #0]
     8c6:	435a      	muls	r2, r3
     8c8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     8ca:	6863      	ldr	r3, [r4, #4]
     8cc:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     8ce:	4d55      	ldr	r5, [pc, #340]	; (a24 <i2c_master_init+0x2c4>)
     8d0:	47a8      	blx	r5
     8d2:	9000      	str	r0, [sp, #0]
     8d4:	9101      	str	r1, [sp, #4]
     8d6:	464b      	mov	r3, r9
     8d8:	0058      	lsls	r0, r3, #1
     8da:	47a8      	blx	r5
     8dc:	9002      	str	r0, [sp, #8]
     8de:	9103      	str	r1, [sp, #12]
     8e0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     8e2:	47a8      	blx	r5
     8e4:	9004      	str	r0, [sp, #16]
     8e6:	9105      	str	r1, [sp, #20]
     8e8:	4f4f      	ldr	r7, [pc, #316]	; (a28 <i2c_master_init+0x2c8>)
     8ea:	4a50      	ldr	r2, [pc, #320]	; (a2c <i2c_master_init+0x2cc>)
     8ec:	4b50      	ldr	r3, [pc, #320]	; (a30 <i2c_master_init+0x2d0>)
     8ee:	9800      	ldr	r0, [sp, #0]
     8f0:	9901      	ldr	r1, [sp, #4]
     8f2:	47b8      	blx	r7
     8f4:	0002      	movs	r2, r0
     8f6:	000b      	movs	r3, r1
     8f8:	9804      	ldr	r0, [sp, #16]
     8fa:	9905      	ldr	r1, [sp, #20]
     8fc:	47b8      	blx	r7
     8fe:	4e4d      	ldr	r6, [pc, #308]	; (a34 <i2c_master_init+0x2d4>)
     900:	2200      	movs	r2, #0
     902:	4b4d      	ldr	r3, [pc, #308]	; (a38 <i2c_master_init+0x2d8>)
     904:	47b0      	blx	r6
     906:	9004      	str	r0, [sp, #16]
     908:	9105      	str	r1, [sp, #20]
     90a:	4648      	mov	r0, r9
     90c:	47a8      	blx	r5
     90e:	0002      	movs	r2, r0
     910:	000b      	movs	r3, r1
     912:	9804      	ldr	r0, [sp, #16]
     914:	9905      	ldr	r1, [sp, #20]
     916:	47b8      	blx	r7
     918:	0002      	movs	r2, r0
     91a:	000b      	movs	r3, r1
     91c:	4d47      	ldr	r5, [pc, #284]	; (a3c <i2c_master_init+0x2dc>)
     91e:	9800      	ldr	r0, [sp, #0]
     920:	9901      	ldr	r1, [sp, #4]
     922:	47a8      	blx	r5
     924:	9a02      	ldr	r2, [sp, #8]
     926:	9b03      	ldr	r3, [sp, #12]
     928:	47b0      	blx	r6
     92a:	2200      	movs	r2, #0
     92c:	4b44      	ldr	r3, [pc, #272]	; (a40 <i2c_master_init+0x2e0>)
     92e:	47a8      	blx	r5
     930:	9a02      	ldr	r2, [sp, #8]
     932:	9b03      	ldr	r3, [sp, #12]
     934:	4d43      	ldr	r5, [pc, #268]	; (a44 <i2c_master_init+0x2e4>)
     936:	47a8      	blx	r5
     938:	4b43      	ldr	r3, [pc, #268]	; (a48 <i2c_master_init+0x2e8>)
     93a:	4798      	blx	r3
     93c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     93e:	2380      	movs	r3, #128	; 0x80
     940:	049b      	lsls	r3, r3, #18
     942:	68a2      	ldr	r2, [r4, #8]
     944:	429a      	cmp	r2, r3
     946:	d01e      	beq.n	986 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     948:	0003      	movs	r3, r0
     94a:	2040      	movs	r0, #64	; 0x40
     94c:	2dff      	cmp	r5, #255	; 0xff
     94e:	d900      	bls.n	952 <i2c_master_init+0x1f2>
     950:	e72d      	b.n	7ae <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     952:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     954:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     956:	25ff      	movs	r5, #255	; 0xff
     958:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     95a:	0624      	lsls	r4, r4, #24
     95c:	4325      	orrs	r5, r4
     95e:	0400      	lsls	r0, r0, #16
     960:	23ff      	movs	r3, #255	; 0xff
     962:	041b      	lsls	r3, r3, #16
     964:	4018      	ands	r0, r3
     966:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     968:	4643      	mov	r3, r8
     96a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     96c:	2000      	movs	r0, #0
     96e:	e71e      	b.n	7ae <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     970:	2100      	movs	r1, #0
     972:	4640      	mov	r0, r8
     974:	4b35      	ldr	r3, [pc, #212]	; (a4c <i2c_master_init+0x2ec>)
     976:	4798      	blx	r3
     978:	e74a      	b.n	810 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     97a:	2101      	movs	r1, #1
     97c:	4640      	mov	r0, r8
     97e:	4b33      	ldr	r3, [pc, #204]	; (a4c <i2c_master_init+0x2ec>)
     980:	4798      	blx	r3
     982:	0007      	movs	r7, r0
     984:	e751      	b.n	82a <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     986:	26fa      	movs	r6, #250	; 0xfa
     988:	00b6      	lsls	r6, r6, #2
     98a:	4653      	mov	r3, sl
     98c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     98e:	9800      	ldr	r0, [sp, #0]
     990:	9901      	ldr	r1, [sp, #4]
     992:	0002      	movs	r2, r0
     994:	000b      	movs	r3, r1
     996:	4c27      	ldr	r4, [pc, #156]	; (a34 <i2c_master_init+0x2d4>)
     998:	47a0      	blx	r4
     99a:	9000      	str	r0, [sp, #0]
     99c:	9101      	str	r1, [sp, #4]
     99e:	0030      	movs	r0, r6
     9a0:	4b20      	ldr	r3, [pc, #128]	; (a24 <i2c_master_init+0x2c4>)
     9a2:	4798      	blx	r3
     9a4:	2200      	movs	r2, #0
     9a6:	4b2a      	ldr	r3, [pc, #168]	; (a50 <i2c_master_init+0x2f0>)
     9a8:	47b8      	blx	r7
     9aa:	0002      	movs	r2, r0
     9ac:	000b      	movs	r3, r1
     9ae:	9800      	ldr	r0, [sp, #0]
     9b0:	9901      	ldr	r1, [sp, #4]
     9b2:	4c24      	ldr	r4, [pc, #144]	; (a44 <i2c_master_init+0x2e4>)
     9b4:	47a0      	blx	r4
     9b6:	2200      	movs	r2, #0
     9b8:	4b21      	ldr	r3, [pc, #132]	; (a40 <i2c_master_init+0x2e0>)
     9ba:	4c20      	ldr	r4, [pc, #128]	; (a3c <i2c_master_init+0x2dc>)
     9bc:	47a0      	blx	r4
     9be:	4b22      	ldr	r3, [pc, #136]	; (a48 <i2c_master_init+0x2e8>)
     9c0:	4798      	blx	r3
     9c2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     9c4:	d00c      	beq.n	9e0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     9c6:	0031      	movs	r1, r6
     9c8:	9807      	ldr	r0, [sp, #28]
     9ca:	4b22      	ldr	r3, [pc, #136]	; (a54 <i2c_master_init+0x2f4>)
     9cc:	4798      	blx	r3
     9ce:	3802      	subs	r0, #2
     9d0:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     9d2:	002b      	movs	r3, r5
     9d4:	2dff      	cmp	r5, #255	; 0xff
     9d6:	d80c      	bhi.n	9f2 <i2c_master_init+0x292>
     9d8:	28ff      	cmp	r0, #255	; 0xff
     9da:	d9bc      	bls.n	956 <i2c_master_init+0x1f6>
     9dc:	2040      	movs	r0, #64	; 0x40
     9de:	e6e6      	b.n	7ae <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     9e0:	0071      	lsls	r1, r6, #1
     9e2:	1e48      	subs	r0, r1, #1
     9e4:	9b07      	ldr	r3, [sp, #28]
     9e6:	469c      	mov	ip, r3
     9e8:	4460      	add	r0, ip
     9ea:	4b1a      	ldr	r3, [pc, #104]	; (a54 <i2c_master_init+0x2f4>)
     9ec:	4798      	blx	r3
     9ee:	3801      	subs	r0, #1
     9f0:	e7ef      	b.n	9d2 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     9f2:	2040      	movs	r0, #64	; 0x40
     9f4:	e6db      	b.n	7ae <i2c_master_init+0x4e>
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	00002d45 	.word	0x00002d45
     9fc:	40000400 	.word	0x40000400
     a00:	00003785 	.word	0x00003785
     a04:	000036f9 	.word	0x000036f9
     a08:	00002b81 	.word	0x00002b81
     a0c:	00000d35 	.word	0x00000d35
     a10:	00002d81 	.word	0x00002d81
     a14:	200050b8 	.word	0x200050b8
     a18:	000038ad 	.word	0x000038ad
     a1c:	41002000 	.word	0x41002000
     a20:	000037d1 	.word	0x000037d1
     a24:	000053b9 	.word	0x000053b9
     a28:	00004825 	.word	0x00004825
     a2c:	e826d695 	.word	0xe826d695
     a30:	3e112e0b 	.word	0x3e112e0b
     a34:	00003b9d 	.word	0x00003b9d
     a38:	40240000 	.word	0x40240000
     a3c:	00004d25 	.word	0x00004d25
     a40:	3ff00000 	.word	0x3ff00000
     a44:	000041bd 	.word	0x000041bd
     a48:	00005351 	.word	0x00005351
     a4c:	00002bcd 	.word	0x00002bcd
     a50:	40080000 	.word	0x40080000
     a54:	00003a85 	.word	0x00003a85

00000a58 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a58:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a5a:	7e1a      	ldrb	r2, [r3, #24]
     a5c:	0792      	lsls	r2, r2, #30
     a5e:	d507      	bpl.n	a70 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a60:	2202      	movs	r2, #2
     a62:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a64:	8b5b      	ldrh	r3, [r3, #26]
     a66:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     a68:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     a6a:	17db      	asrs	r3, r3, #31
     a6c:	4018      	ands	r0, r3
}
     a6e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a70:	8b5a      	ldrh	r2, [r3, #26]
     a72:	0752      	lsls	r2, r2, #29
     a74:	d506      	bpl.n	a84 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a76:	6859      	ldr	r1, [r3, #4]
     a78:	22c0      	movs	r2, #192	; 0xc0
     a7a:	0292      	lsls	r2, r2, #10
     a7c:	430a      	orrs	r2, r1
     a7e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     a80:	2018      	movs	r0, #24
     a82:	e7f4      	b.n	a6e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     a84:	2000      	movs	r0, #0
     a86:	e7f2      	b.n	a6e <_i2c_master_address_response+0x16>

00000a88 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     a88:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a8a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     a8c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a8e:	2401      	movs	r4, #1
     a90:	2502      	movs	r5, #2
     a92:	7e11      	ldrb	r1, [r2, #24]
     a94:	4221      	tst	r1, r4
     a96:	d10b      	bne.n	ab0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     a98:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a9a:	4229      	tst	r1, r5
     a9c:	d106      	bne.n	aac <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     a9e:	3301      	adds	r3, #1
     aa0:	b29b      	uxth	r3, r3
     aa2:	8901      	ldrh	r1, [r0, #8]
     aa4:	4299      	cmp	r1, r3
     aa6:	d8f4      	bhi.n	a92 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     aa8:	2012      	movs	r0, #18
     aaa:	e002      	b.n	ab2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     aac:	2000      	movs	r0, #0
     aae:	e000      	b.n	ab2 <_i2c_master_wait_for_bus+0x2a>
     ab0:	2000      	movs	r0, #0
}
     ab2:	bd30      	pop	{r4, r5, pc}

00000ab4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     ab4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ab6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ab8:	6862      	ldr	r2, [r4, #4]
     aba:	2380      	movs	r3, #128	; 0x80
     abc:	02db      	lsls	r3, r3, #11
     abe:	4313      	orrs	r3, r2
     ac0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     ac2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     ac4:	4b02      	ldr	r3, [pc, #8]	; (ad0 <_i2c_master_send_hs_master_code+0x1c>)
     ac6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     ac8:	2301      	movs	r3, #1
     aca:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     acc:	bd10      	pop	{r4, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00000a89 	.word	0x00000a89

00000ad4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     ad4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ad6:	2207      	movs	r2, #7
     ad8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     ada:	421a      	tst	r2, r3
     adc:	d1fc      	bne.n	ad8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     ade:	4770      	bx	lr

00000ae0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ae4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     ae6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     ae8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     aea:	8b83      	ldrh	r3, [r0, #28]
     aec:	1aed      	subs	r5, r5, r3
     aee:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     af0:	8b83      	ldrh	r3, [r0, #28]
     af2:	3b01      	subs	r3, #1
     af4:	b29b      	uxth	r3, r3
     af6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     af8:	0113      	lsls	r3, r2, #4
     afa:	d51d      	bpl.n	b38 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     afc:	7ac3      	ldrb	r3, [r0, #11]
     afe:	2b00      	cmp	r3, #0
     b00:	d003      	beq.n	b0a <_i2c_master_read+0x2a>
     b02:	8b83      	ldrh	r3, [r0, #28]
     b04:	b29b      	uxth	r3, r3
     b06:	2b01      	cmp	r3, #1
     b08:	d010      	beq.n	b2c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     b0a:	8ba3      	ldrh	r3, [r4, #28]
     b0c:	b29b      	uxth	r3, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	d102      	bne.n	b18 <_i2c_master_read+0x38>
		if (module->send_stop) {
     b12:	7aa3      	ldrb	r3, [r4, #10]
     b14:	2b00      	cmp	r3, #0
     b16:	d11c      	bne.n	b52 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     b18:	0020      	movs	r0, r4
     b1a:	4b12      	ldr	r3, [pc, #72]	; (b64 <_i2c_master_read+0x84>)
     b1c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     b1e:	6a23      	ldr	r3, [r4, #32]
     b20:	195d      	adds	r5, r3, r5
     b22:	2328      	movs	r3, #40	; 0x28
     b24:	5cf3      	ldrb	r3, [r6, r3]
     b26:	b2db      	uxtb	r3, r3
     b28:	702b      	strb	r3, [r5, #0]
}
     b2a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b2c:	6872      	ldr	r2, [r6, #4]
     b2e:	2380      	movs	r3, #128	; 0x80
     b30:	02db      	lsls	r3, r3, #11
     b32:	4313      	orrs	r3, r2
     b34:	6073      	str	r3, [r6, #4]
     b36:	e7e8      	b.n	b0a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     b38:	7ac3      	ldrb	r3, [r0, #11]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d0e5      	beq.n	b0a <_i2c_master_read+0x2a>
     b3e:	8b83      	ldrh	r3, [r0, #28]
     b40:	b29b      	uxth	r3, r3
     b42:	2b00      	cmp	r3, #0
     b44:	d1e1      	bne.n	b0a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b46:	6872      	ldr	r2, [r6, #4]
     b48:	2380      	movs	r3, #128	; 0x80
     b4a:	02db      	lsls	r3, r3, #11
     b4c:	4313      	orrs	r3, r2
     b4e:	6073      	str	r3, [r6, #4]
     b50:	e7db      	b.n	b0a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     b52:	0020      	movs	r0, r4
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <_i2c_master_read+0x84>)
     b56:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b58:	6872      	ldr	r2, [r6, #4]
     b5a:	23c0      	movs	r3, #192	; 0xc0
     b5c:	029b      	lsls	r3, r3, #10
     b5e:	4313      	orrs	r3, r2
     b60:	6073      	str	r3, [r6, #4]
     b62:	e7d9      	b.n	b18 <_i2c_master_read+0x38>
     b64:	00000ad5 	.word	0x00000ad5

00000b68 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b6c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     b6e:	8b6b      	ldrh	r3, [r5, #26]
     b70:	075b      	lsls	r3, r3, #29
     b72:	d503      	bpl.n	b7c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     b74:	221e      	movs	r2, #30
     b76:	2325      	movs	r3, #37	; 0x25
     b78:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     b7a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     b7c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     b7e:	8b83      	ldrh	r3, [r0, #28]
     b80:	1af6      	subs	r6, r6, r3
     b82:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     b84:	8b83      	ldrh	r3, [r0, #28]
     b86:	3b01      	subs	r3, #1
     b88:	b29b      	uxth	r3, r3
     b8a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <_i2c_master_write+0x38>)
     b8e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     b90:	6a23      	ldr	r3, [r4, #32]
     b92:	199e      	adds	r6, r3, r6
     b94:	7833      	ldrb	r3, [r6, #0]
     b96:	b2db      	uxtb	r3, r3
     b98:	2228      	movs	r2, #40	; 0x28
     b9a:	54ab      	strb	r3, [r5, r2]
     b9c:	e7ed      	b.n	b7a <_i2c_master_write+0x12>
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00000ad5 	.word	0x00000ad5

00000ba4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ba4:	b570      	push	{r4, r5, r6, lr}
     ba6:	0005      	movs	r5, r0
     ba8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     baa:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     bac:	7a4b      	ldrb	r3, [r1, #9]
     bae:	2b00      	cmp	r3, #0
     bb0:	d11a      	bne.n	be8 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     bb2:	6873      	ldr	r3, [r6, #4]
     bb4:	4a13      	ldr	r2, [pc, #76]	; (c04 <_i2c_master_write_packet+0x60>)
     bb6:	4013      	ands	r3, r2
     bb8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     bba:	6863      	ldr	r3, [r4, #4]
     bbc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     bbe:	8863      	ldrh	r3, [r4, #2]
     bc0:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     bc2:	2200      	movs	r2, #0
     bc4:	2324      	movs	r3, #36	; 0x24
     bc6:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     bc8:	3205      	adds	r2, #5
     bca:	3301      	adds	r3, #1
     bcc:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     bce:	3b22      	subs	r3, #34	; 0x22
     bd0:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     bd2:	7a23      	ldrb	r3, [r4, #8]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d10b      	bne.n	bf0 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bd8:	8823      	ldrh	r3, [r4, #0]
     bda:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     bdc:	7a62      	ldrb	r2, [r4, #9]
     bde:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     be0:	4313      	orrs	r3, r2
     be2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     be4:	2000      	movs	r0, #0
     be6:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     be8:	7a89      	ldrb	r1, [r1, #10]
     bea:	4b07      	ldr	r3, [pc, #28]	; (c08 <_i2c_master_write_packet+0x64>)
     bec:	4798      	blx	r3
     bee:	e7e0      	b.n	bb2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bf0:	8823      	ldrh	r3, [r4, #0]
     bf2:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bf4:	7a62      	ldrb	r2, [r4, #9]
     bf6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bf8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bfa:	2280      	movs	r2, #128	; 0x80
     bfc:	0212      	lsls	r2, r2, #8
     bfe:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     c00:	6273      	str	r3, [r6, #36]	; 0x24
     c02:	e7ef      	b.n	be4 <_i2c_master_write_packet+0x40>
     c04:	fffbffff 	.word	0xfffbffff
     c08:	00000ab5 	.word	0x00000ab5

00000c0c <_i2c_master_read_packet>:
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	0005      	movs	r5, r0
     c10:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c12:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     c14:	684b      	ldr	r3, [r1, #4]
     c16:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     c18:	884b      	ldrh	r3, [r1, #2]
     c1a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     c1c:	2201      	movs	r2, #1
     c1e:	2324      	movs	r3, #36	; 0x24
     c20:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     c22:	3204      	adds	r2, #4
     c24:	3301      	adds	r3, #1
     c26:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c28:	6837      	ldr	r7, [r6, #0]
     c2a:	013f      	lsls	r7, r7, #4
     c2c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     c2e:	7a4b      	ldrb	r3, [r1, #9]
     c30:	2b00      	cmp	r3, #0
     c32:	d117      	bne.n	c64 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     c34:	2f00      	cmp	r7, #0
     c36:	d002      	beq.n	c3e <_i2c_master_read_packet+0x32>
     c38:	8863      	ldrh	r3, [r4, #2]
     c3a:	2b01      	cmp	r3, #1
     c3c:	d016      	beq.n	c6c <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c3e:	6873      	ldr	r3, [r6, #4]
     c40:	4a20      	ldr	r2, [pc, #128]	; (cc4 <_i2c_master_read_packet+0xb8>)
     c42:	4013      	ands	r3, r2
     c44:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     c46:	7a23      	ldrb	r3, [r4, #8]
     c48:	2b00      	cmp	r3, #0
     c4a:	d115      	bne.n	c78 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     c4c:	2303      	movs	r3, #3
     c4e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c50:	8823      	ldrh	r3, [r4, #0]
     c52:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c54:	7a62      	ldrb	r2, [r4, #9]
     c56:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c58:	4313      	orrs	r3, r2
     c5a:	2201      	movs	r2, #1
     c5c:	4313      	orrs	r3, r2
     c5e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     c60:	2000      	movs	r0, #0
}
     c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c64:	7a89      	ldrb	r1, [r1, #10]
     c66:	4b18      	ldr	r3, [pc, #96]	; (cc8 <_i2c_master_read_packet+0xbc>)
     c68:	4798      	blx	r3
     c6a:	e7e3      	b.n	c34 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c6c:	6872      	ldr	r2, [r6, #4]
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	02db      	lsls	r3, r3, #11
     c72:	4313      	orrs	r3, r2
     c74:	6073      	str	r3, [r6, #4]
     c76:	e7e6      	b.n	c46 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     c78:	8823      	ldrh	r3, [r4, #0]
     c7a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c7c:	7a62      	ldrb	r2, [r4, #9]
     c7e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c80:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c82:	2280      	movs	r2, #128	; 0x80
     c84:	0212      	lsls	r2, r2, #8
     c86:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     c88:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     c8a:	0028      	movs	r0, r5
     c8c:	4b0f      	ldr	r3, [pc, #60]	; (ccc <_i2c_master_read_packet+0xc0>)
     c8e:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c90:	6873      	ldr	r3, [r6, #4]
     c92:	4a0c      	ldr	r2, [pc, #48]	; (cc4 <_i2c_master_read_packet+0xb8>)
     c94:	4013      	ands	r3, r2
     c96:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     c98:	2800      	cmp	r0, #0
     c9a:	d1e2      	bne.n	c62 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     c9c:	0028      	movs	r0, r5
     c9e:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <_i2c_master_read_packet+0xc4>)
     ca0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     ca2:	2800      	cmp	r0, #0
     ca4:	d1dd      	bne.n	c62 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     ca6:	2303      	movs	r3, #3
     ca8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     caa:	8823      	ldrh	r3, [r4, #0]
     cac:	0a1b      	lsrs	r3, r3, #8
     cae:	2278      	movs	r2, #120	; 0x78
     cb0:	4313      	orrs	r3, r2
     cb2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cb4:	7a62      	ldrb	r2, [r4, #9]
     cb6:	0392      	lsls	r2, r2, #14
     cb8:	2101      	movs	r1, #1
     cba:	430a      	orrs	r2, r1
     cbc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cbe:	6273      	str	r3, [r6, #36]	; 0x24
     cc0:	e7cf      	b.n	c62 <_i2c_master_read_packet+0x56>
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	fffbffff 	.word	0xfffbffff
     cc8:	00000ab5 	.word	0x00000ab5
     ccc:	00000a89 	.word	0x00000a89
     cd0:	00000a59 	.word	0x00000a59

00000cd4 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     cd4:	1c93      	adds	r3, r2, #2
     cd6:	009b      	lsls	r3, r3, #2
     cd8:	18c3      	adds	r3, r0, r3
     cda:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     cdc:	7e03      	ldrb	r3, [r0, #24]
     cde:	2101      	movs	r1, #1
     ce0:	4091      	lsls	r1, r2
     ce2:	430b      	orrs	r3, r1
     ce4:	b2db      	uxtb	r3, r3
     ce6:	7603      	strb	r3, [r0, #24]
}
     ce8:	4770      	bx	lr
	...

00000cec <i2c_master_read_packet_job>:
{
     cec:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     cee:	8b83      	ldrh	r3, [r0, #28]
     cf0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     cf2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     cf4:	2b00      	cmp	r3, #0
     cf6:	d001      	beq.n	cfc <i2c_master_read_packet_job+0x10>
}
     cf8:	0010      	movs	r0, r2
     cfa:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     cfc:	3301      	adds	r3, #1
     cfe:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     d00:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     d02:	4b02      	ldr	r3, [pc, #8]	; (d0c <i2c_master_read_packet_job+0x20>)
     d04:	4798      	blx	r3
     d06:	0002      	movs	r2, r0
     d08:	e7f6      	b.n	cf8 <i2c_master_read_packet_job+0xc>
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	00000c0d 	.word	0x00000c0d

00000d10 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d10:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     d12:	8b83      	ldrh	r3, [r0, #28]
     d14:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d16:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     d18:	2b00      	cmp	r3, #0
     d1a:	d001      	beq.n	d20 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     d1c:	0010      	movs	r0, r2
     d1e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     d20:	3301      	adds	r3, #1
     d22:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     d24:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     d26:	4b02      	ldr	r3, [pc, #8]	; (d30 <i2c_master_write_packet_job+0x20>)
     d28:	4798      	blx	r3
     d2a:	0002      	movs	r2, r0
     d2c:	e7f6      	b.n	d1c <i2c_master_write_packet_job+0xc>
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000ba5 	.word	0x00000ba5

00000d34 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     d34:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     d36:	0080      	lsls	r0, r0, #2
     d38:	4b75      	ldr	r3, [pc, #468]	; (f10 <_i2c_master_interrupt_handler+0x1dc>)
     d3a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d3c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d3e:	682b      	ldr	r3, [r5, #0]
     d40:	011b      	lsls	r3, r3, #4
     d42:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     d44:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     d46:	7e26      	ldrb	r6, [r4, #24]
     d48:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     d4a:	8b63      	ldrh	r3, [r4, #26]
     d4c:	b29b      	uxth	r3, r3
     d4e:	2b00      	cmp	r3, #0
     d50:	d103      	bne.n	d5a <_i2c_master_interrupt_handler+0x26>
     d52:	8ba3      	ldrh	r3, [r4, #28]
     d54:	b29b      	uxth	r3, r3
     d56:	2b00      	cmp	r3, #0
     d58:	d123      	bne.n	da2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d5a:	8b63      	ldrh	r3, [r4, #26]
     d5c:	b29b      	uxth	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	d008      	beq.n	d74 <_i2c_master_interrupt_handler+0x40>
     d62:	8ba3      	ldrh	r3, [r4, #28]
     d64:	b29b      	uxth	r3, r3
     d66:	2b00      	cmp	r3, #0
     d68:	d104      	bne.n	d74 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d6a:	3325      	adds	r3, #37	; 0x25
     d6c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d6e:	2b05      	cmp	r3, #5
     d70:	d100      	bne.n	d74 <_i2c_master_interrupt_handler+0x40>
     d72:	e06d      	b.n	e50 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d74:	8b63      	ldrh	r3, [r4, #26]
     d76:	b29b      	uxth	r3, r3
     d78:	2b00      	cmp	r3, #0
     d7a:	d024      	beq.n	dc6 <_i2c_master_interrupt_handler+0x92>
     d7c:	8ba3      	ldrh	r3, [r4, #28]
     d7e:	b29b      	uxth	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d020      	beq.n	dc6 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d84:	8b6b      	ldrh	r3, [r5, #26]
     d86:	069b      	lsls	r3, r3, #26
     d88:	d500      	bpl.n	d8c <_i2c_master_interrupt_handler+0x58>
     d8a:	e081      	b.n	e90 <_i2c_master_interrupt_handler+0x15c>
     d8c:	2a00      	cmp	r2, #0
     d8e:	d004      	beq.n	d9a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d90:	8ba3      	ldrh	r3, [r4, #28]
     d92:	b29b      	uxth	r3, r3
     d94:	2b01      	cmp	r3, #1
     d96:	d100      	bne.n	d9a <_i2c_master_interrupt_handler+0x66>
     d98:	e07a      	b.n	e90 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d9a:	2241      	movs	r2, #65	; 0x41
     d9c:	2325      	movs	r3, #37	; 0x25
     d9e:	54e2      	strb	r2, [r4, r3]
     da0:	e011      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     da2:	7e2b      	ldrb	r3, [r5, #24]
     da4:	07db      	lsls	r3, r3, #31
     da6:	d507      	bpl.n	db8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     da8:	2301      	movs	r3, #1
     daa:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     dac:	8b6b      	ldrh	r3, [r5, #26]
     dae:	079b      	lsls	r3, r3, #30
     db0:	d52e      	bpl.n	e10 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     db2:	2241      	movs	r2, #65	; 0x41
     db4:	2325      	movs	r3, #37	; 0x25
     db6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     db8:	8ba3      	ldrh	r3, [r4, #28]
     dba:	b29b      	uxth	r3, r3
     dbc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     dbe:	2325      	movs	r3, #37	; 0x25
     dc0:	5ce3      	ldrb	r3, [r4, r3]
     dc2:	2b05      	cmp	r3, #5
     dc4:	d038      	beq.n	e38 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dc6:	8b63      	ldrh	r3, [r4, #26]
     dc8:	b29b      	uxth	r3, r3
     dca:	2b00      	cmp	r3, #0
     dcc:	d007      	beq.n	dde <_i2c_master_interrupt_handler+0xaa>
     dce:	8ba3      	ldrh	r3, [r4, #28]
     dd0:	b29b      	uxth	r3, r3
     dd2:	2b00      	cmp	r3, #0
     dd4:	d103      	bne.n	dde <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     dd6:	3325      	adds	r3, #37	; 0x25
     dd8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dda:	2b05      	cmp	r3, #5
     ddc:	d064      	beq.n	ea8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     dde:	2325      	movs	r3, #37	; 0x25
     de0:	5ce3      	ldrb	r3, [r4, r3]
     de2:	2b05      	cmp	r3, #5
     de4:	d013      	beq.n	e0e <_i2c_master_interrupt_handler+0xda>
     de6:	2325      	movs	r3, #37	; 0x25
     de8:	5ce3      	ldrb	r3, [r4, r3]
     dea:	2b00      	cmp	r3, #0
     dec:	d00f      	beq.n	e0e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dee:	2303      	movs	r3, #3
     df0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     df2:	2300      	movs	r3, #0
     df4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     df6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     df8:	3325      	adds	r3, #37	; 0x25
     dfa:	5ce3      	ldrb	r3, [r4, r3]
     dfc:	2b41      	cmp	r3, #65	; 0x41
     dfe:	d003      	beq.n	e08 <_i2c_master_interrupt_handler+0xd4>
     e00:	7aa3      	ldrb	r3, [r4, #10]
     e02:	2b00      	cmp	r3, #0
     e04:	d000      	beq.n	e08 <_i2c_master_interrupt_handler+0xd4>
     e06:	e075      	b.n	ef4 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e08:	0773      	lsls	r3, r6, #29
     e0a:	d500      	bpl.n	e0e <_i2c_master_interrupt_handler+0xda>
     e0c:	e07b      	b.n	f06 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     e0e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e10:	8b6b      	ldrh	r3, [r5, #26]
     e12:	075b      	lsls	r3, r3, #29
     e14:	d5d0      	bpl.n	db8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e16:	2218      	movs	r2, #24
     e18:	2325      	movs	r3, #37	; 0x25
     e1a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     e1c:	2300      	movs	r3, #0
     e1e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e20:	7aa3      	ldrb	r3, [r4, #10]
     e22:	2b00      	cmp	r3, #0
     e24:	d0c8      	beq.n	db8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     e26:	0020      	movs	r0, r4
     e28:	4b3a      	ldr	r3, [pc, #232]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     e2a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e2c:	686a      	ldr	r2, [r5, #4]
     e2e:	23c0      	movs	r3, #192	; 0xc0
     e30:	029b      	lsls	r3, r3, #10
     e32:	4313      	orrs	r3, r2
     e34:	606b      	str	r3, [r5, #4]
     e36:	e7bf      	b.n	db8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e38:	331f      	adds	r3, #31
     e3a:	5ce3      	ldrb	r3, [r4, r3]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d003      	beq.n	e48 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     e40:	0020      	movs	r0, r4
     e42:	4b35      	ldr	r3, [pc, #212]	; (f18 <_i2c_master_interrupt_handler+0x1e4>)
     e44:	4798      	blx	r3
     e46:	e7be      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     e48:	0020      	movs	r0, r4
     e4a:	4b34      	ldr	r3, [pc, #208]	; (f1c <_i2c_master_interrupt_handler+0x1e8>)
     e4c:	4798      	blx	r3
     e4e:	e7ba      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e50:	331f      	adds	r3, #31
     e52:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e54:	2b00      	cmp	r3, #0
     e56:	d000      	beq.n	e5a <_i2c_master_interrupt_handler+0x126>
     e58:	e78c      	b.n	d74 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e5a:	3303      	adds	r3, #3
     e5c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e5e:	2300      	movs	r3, #0
     e60:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e62:	3325      	adds	r3, #37	; 0x25
     e64:	2200      	movs	r2, #0
     e66:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e68:	7aa3      	ldrb	r3, [r4, #10]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d107      	bne.n	e7e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e6e:	2301      	movs	r3, #1
     e70:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e72:	07f3      	lsls	r3, r6, #31
     e74:	d5a7      	bpl.n	dc6 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e76:	68e3      	ldr	r3, [r4, #12]
     e78:	0020      	movs	r0, r4
     e7a:	4798      	blx	r3
     e7c:	e7a3      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e7e:	0020      	movs	r0, r4
     e80:	4b24      	ldr	r3, [pc, #144]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     e82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e84:	686a      	ldr	r2, [r5, #4]
     e86:	23c0      	movs	r3, #192	; 0xc0
     e88:	029b      	lsls	r3, r3, #10
     e8a:	4313      	orrs	r3, r2
     e8c:	606b      	str	r3, [r5, #4]
     e8e:	e7f0      	b.n	e72 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e90:	2324      	movs	r3, #36	; 0x24
     e92:	5ce3      	ldrb	r3, [r4, r3]
     e94:	2b00      	cmp	r3, #0
     e96:	d103      	bne.n	ea0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e98:	0020      	movs	r0, r4
     e9a:	4b20      	ldr	r3, [pc, #128]	; (f1c <_i2c_master_interrupt_handler+0x1e8>)
     e9c:	4798      	blx	r3
     e9e:	e792      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     ea0:	0020      	movs	r0, r4
     ea2:	4b1d      	ldr	r3, [pc, #116]	; (f18 <_i2c_master_interrupt_handler+0x1e4>)
     ea4:	4798      	blx	r3
     ea6:	e78e      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ea8:	331f      	adds	r3, #31
     eaa:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     eac:	2b01      	cmp	r3, #1
     eae:	d196      	bne.n	dde <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     eb0:	7e2b      	ldrb	r3, [r5, #24]
     eb2:	079b      	lsls	r3, r3, #30
     eb4:	d501      	bpl.n	eba <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     eb6:	2302      	movs	r3, #2
     eb8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     eba:	2303      	movs	r3, #3
     ebc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     ebe:	2300      	movs	r3, #0
     ec0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ec2:	3325      	adds	r3, #37	; 0x25
     ec4:	2200      	movs	r2, #0
     ec6:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ec8:	07b3      	lsls	r3, r6, #30
     eca:	d503      	bpl.n	ed4 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ecc:	2324      	movs	r3, #36	; 0x24
     ece:	5ce3      	ldrb	r3, [r4, r3]
     ed0:	2b01      	cmp	r3, #1
     ed2:	d00b      	beq.n	eec <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ed4:	07f3      	lsls	r3, r6, #31
     ed6:	d400      	bmi.n	eda <_i2c_master_interrupt_handler+0x1a6>
     ed8:	e781      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     eda:	2324      	movs	r3, #36	; 0x24
     edc:	5ce3      	ldrb	r3, [r4, r3]
     ede:	2b00      	cmp	r3, #0
     ee0:	d000      	beq.n	ee4 <_i2c_master_interrupt_handler+0x1b0>
     ee2:	e77c      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ee4:	68e3      	ldr	r3, [r4, #12]
     ee6:	0020      	movs	r0, r4
     ee8:	4798      	blx	r3
     eea:	e778      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     eec:	6923      	ldr	r3, [r4, #16]
     eee:	0020      	movs	r0, r4
     ef0:	4798      	blx	r3
     ef2:	e774      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ef4:	0020      	movs	r0, r4
     ef6:	4b07      	ldr	r3, [pc, #28]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     ef8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     efa:	686a      	ldr	r2, [r5, #4]
     efc:	23e0      	movs	r3, #224	; 0xe0
     efe:	02db      	lsls	r3, r3, #11
     f00:	4313      	orrs	r3, r2
     f02:	606b      	str	r3, [r5, #4]
     f04:	e780      	b.n	e08 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     f06:	6963      	ldr	r3, [r4, #20]
     f08:	0020      	movs	r0, r4
     f0a:	4798      	blx	r3
}
     f0c:	e77f      	b.n	e0e <_i2c_master_interrupt_handler+0xda>
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	200050b8 	.word	0x200050b8
     f14:	00000ad5 	.word	0x00000ad5
     f18:	00000ae1 	.word	0x00000ae1
     f1c:	00000b69 	.word	0x00000b69

00000f20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     f20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     f22:	2300      	movs	r3, #0
     f24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <prvTaskExitError+0x20>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	3301      	adds	r3, #1
     f2c:	d001      	beq.n	f32 <prvTaskExitError+0x12>
     f2e:	b672      	cpsid	i
     f30:	e7fe      	b.n	f30 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     f32:	b672      	cpsid	i
	while( ulDummy == 0 )
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	2b00      	cmp	r3, #0
     f38:	d0fc      	beq.n	f34 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     f3a:	b002      	add	sp, #8
     f3c:	4770      	bx	lr
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	20000000 	.word	0x20000000
	...

00000f50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     f50:	4a0b      	ldr	r2, [pc, #44]	; (f80 <pxCurrentTCBConst2>)
     f52:	6813      	ldr	r3, [r2, #0]
     f54:	6818      	ldr	r0, [r3, #0]
     f56:	3020      	adds	r0, #32
     f58:	f380 8809 	msr	PSP, r0
     f5c:	2002      	movs	r0, #2
     f5e:	f380 8814 	msr	CONTROL, r0
     f62:	f3bf 8f6f 	isb	sy
     f66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     f68:	46ae      	mov	lr, r5
     f6a:	bc08      	pop	{r3}
     f6c:	bc04      	pop	{r2}
     f6e:	b662      	cpsie	i
     f70:	4718      	bx	r3
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	46c0      	nop			; (mov r8, r8)
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	46c0      	nop			; (mov r8, r8)
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	46c0      	nop			; (mov r8, r8)
     f7e:	46c0      	nop			; (mov r8, r8)

00000f80 <pxCurrentTCBConst2>:
     f80:	20004ef0 	.word	0x20004ef0

00000f84 <pxPortInitialiseStack>:
{
     f84:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     f86:	1f03      	subs	r3, r0, #4
     f88:	2480      	movs	r4, #128	; 0x80
     f8a:	0464      	lsls	r4, r4, #17
     f8c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     f8e:	3b04      	subs	r3, #4
     f90:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     f92:	3b04      	subs	r3, #4
     f94:	4902      	ldr	r1, [pc, #8]	; (fa0 <pxPortInitialiseStack+0x1c>)
     f96:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     f98:	3b14      	subs	r3, #20
     f9a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     f9c:	3840      	subs	r0, #64	; 0x40
}
     f9e:	bd10      	pop	{r4, pc}
     fa0:	00000f21 	.word	0x00000f21

00000fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     fa4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <xPortStartScheduler+0x40>)
     fa8:	6819      	ldr	r1, [r3, #0]
     faa:	22ff      	movs	r2, #255	; 0xff
     fac:	0412      	lsls	r2, r2, #16
     fae:	430a      	orrs	r2, r1
     fb0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     fb2:	6819      	ldr	r1, [r3, #0]
     fb4:	22ff      	movs	r2, #255	; 0xff
     fb6:	0612      	lsls	r2, r2, #24
     fb8:	430a      	orrs	r2, r1
     fba:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     fbc:	4a0a      	ldr	r2, [pc, #40]	; (fe8 <xPortStartScheduler+0x44>)
     fbe:	2300      	movs	r3, #0
     fc0:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     fc2:	490a      	ldr	r1, [pc, #40]	; (fec <xPortStartScheduler+0x48>)
     fc4:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     fc6:	480a      	ldr	r0, [pc, #40]	; (ff0 <xPortStartScheduler+0x4c>)
     fc8:	490a      	ldr	r1, [pc, #40]	; (ff4 <xPortStartScheduler+0x50>)
     fca:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     fcc:	2107      	movs	r1, #7
     fce:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
     fd0:	4a09      	ldr	r2, [pc, #36]	; (ff8 <xPortStartScheduler+0x54>)
     fd2:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
     fd4:	4b09      	ldr	r3, [pc, #36]	; (ffc <xPortStartScheduler+0x58>)
     fd6:	4798      	blx	r3
	vTaskSwitchContext();
     fd8:	4b09      	ldr	r3, [pc, #36]	; (1000 <xPortStartScheduler+0x5c>)
     fda:	4798      	blx	r3
	prvTaskExitError();
     fdc:	4b09      	ldr	r3, [pc, #36]	; (1004 <xPortStartScheduler+0x60>)
     fde:	4798      	blx	r3
}
     fe0:	2000      	movs	r0, #0
     fe2:	bd10      	pop	{r4, pc}
     fe4:	e000ed20 	.word	0xe000ed20
     fe8:	e000e010 	.word	0xe000e010
     fec:	e000e018 	.word	0xe000e018
     ff0:	0000bb7f 	.word	0x0000bb7f
     ff4:	e000e014 	.word	0xe000e014
     ff8:	20000000 	.word	0x20000000
     ffc:	00000f51 	.word	0x00000f51
    1000:	00002391 	.word	0x00002391
    1004:	00000f21 	.word	0x00000f21

00001008 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1008:	2280      	movs	r2, #128	; 0x80
    100a:	0552      	lsls	r2, r2, #21
    100c:	4b03      	ldr	r3, [pc, #12]	; (101c <vPortYield+0x14>)
    100e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1010:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1014:	f3bf 8f6f 	isb	sy
}
    1018:	4770      	bx	lr
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	e000ed04 	.word	0xe000ed04

00001020 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    1020:	b672      	cpsid	i
    uxCriticalNesting++;
    1022:	4a04      	ldr	r2, [pc, #16]	; (1034 <vPortEnterCritical+0x14>)
    1024:	6813      	ldr	r3, [r2, #0]
    1026:	3301      	adds	r3, #1
    1028:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    102a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    102e:	f3bf 8f6f 	isb	sy
}
    1032:	4770      	bx	lr
    1034:	20000000 	.word	0x20000000

00001038 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    1038:	4b06      	ldr	r3, [pc, #24]	; (1054 <vPortExitCritical+0x1c>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	2b00      	cmp	r3, #0
    103e:	d101      	bne.n	1044 <vPortExitCritical+0xc>
    1040:	b672      	cpsid	i
    1042:	e7fe      	b.n	1042 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1044:	3b01      	subs	r3, #1
    1046:	4a03      	ldr	r2, [pc, #12]	; (1054 <vPortExitCritical+0x1c>)
    1048:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    104a:	2b00      	cmp	r3, #0
    104c:	d100      	bne.n	1050 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    104e:	b662      	cpsie	i
}
    1050:	4770      	bx	lr
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	20000000 	.word	0x20000000

00001058 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    1058:	f3ef 8010 	mrs	r0, PRIMASK
    105c:	b672      	cpsid	i
    105e:	4770      	bx	lr

00001060 <vClearInterruptMaskFromISR>:
	__asm volatile(
    1060:	f380 8810 	msr	PRIMASK, r0
    1064:	4770      	bx	lr
	...

00001068 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1068:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    106a:	4b12      	ldr	r3, [pc, #72]	; (10b4 <prvInsertBlockIntoFreeList+0x4c>)
    106c:	681a      	ldr	r2, [r3, #0]
    106e:	4282      	cmp	r2, r0
    1070:	d319      	bcc.n	10a6 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1072:	685c      	ldr	r4, [r3, #4]
    1074:	1919      	adds	r1, r3, r4
    1076:	4288      	cmp	r0, r1
    1078:	d103      	bne.n	1082 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    107a:	6841      	ldr	r1, [r0, #4]
    107c:	1909      	adds	r1, r1, r4
    107e:	6059      	str	r1, [r3, #4]
    1080:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1082:	6841      	ldr	r1, [r0, #4]
    1084:	1844      	adds	r4, r0, r1
    1086:	42a2      	cmp	r2, r4
    1088:	d111      	bne.n	10ae <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    108a:	4c0b      	ldr	r4, [pc, #44]	; (10b8 <prvInsertBlockIntoFreeList+0x50>)
    108c:	6824      	ldr	r4, [r4, #0]
    108e:	42a2      	cmp	r2, r4
    1090:	d00b      	beq.n	10aa <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1092:	6852      	ldr	r2, [r2, #4]
    1094:	1852      	adds	r2, r2, r1
    1096:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1098:	681a      	ldr	r2, [r3, #0]
    109a:	6812      	ldr	r2, [r2, #0]
    109c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    109e:	4298      	cmp	r0, r3
    10a0:	d000      	beq.n	10a4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    10a2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    10a4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    10a6:	0013      	movs	r3, r2
    10a8:	e7e0      	b.n	106c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    10aa:	6002      	str	r2, [r0, #0]
    10ac:	e7f7      	b.n	109e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    10ae:	6002      	str	r2, [r0, #0]
    10b0:	e7f5      	b.n	109e <prvInsertBlockIntoFreeList+0x36>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	20004e54 	.word	0x20004e54
    10b8:	20000024 	.word	0x20000024

000010bc <pvPortMalloc>:
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	0004      	movs	r4, r0
	vTaskSuspendAll();
    10c0:	4b3e      	ldr	r3, [pc, #248]	; (11bc <pvPortMalloc+0x100>)
    10c2:	4798      	blx	r3
		if( pxEnd == NULL )
    10c4:	4b3e      	ldr	r3, [pc, #248]	; (11c0 <pvPortMalloc+0x104>)
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d015      	beq.n	10f8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10cc:	4b3d      	ldr	r3, [pc, #244]	; (11c4 <pvPortMalloc+0x108>)
    10ce:	681f      	ldr	r7, [r3, #0]
    10d0:	423c      	tst	r4, r7
    10d2:	d168      	bne.n	11a6 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
    10d4:	2c00      	cmp	r4, #0
    10d6:	d069      	beq.n	11ac <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
    10d8:	0023      	movs	r3, r4
    10da:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    10dc:	075a      	lsls	r2, r3, #29
    10de:	d002      	beq.n	10e6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    10e0:	2207      	movs	r2, #7
    10e2:	4393      	bics	r3, r2
    10e4:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10e6:	2b00      	cmp	r3, #0
    10e8:	d05d      	beq.n	11a6 <pvPortMalloc+0xea>
    10ea:	4a37      	ldr	r2, [pc, #220]	; (11c8 <pvPortMalloc+0x10c>)
    10ec:	6816      	ldr	r6, [r2, #0]
    10ee:	42b3      	cmp	r3, r6
    10f0:	d859      	bhi.n	11a6 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
    10f2:	4a36      	ldr	r2, [pc, #216]	; (11cc <pvPortMalloc+0x110>)
    10f4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10f6:	e025      	b.n	1144 <pvPortMalloc+0x88>
	uxAddress = ( size_t ) ucHeap;
    10f8:	4a35      	ldr	r2, [pc, #212]	; (11d0 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    10fa:	0753      	lsls	r3, r2, #29
    10fc:	d01e      	beq.n	113c <pvPortMalloc+0x80>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    10fe:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    1100:	2307      	movs	r3, #7
    1102:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    1104:	4b33      	ldr	r3, [pc, #204]	; (11d4 <pvPortMalloc+0x118>)
    1106:	18d3      	adds	r3, r2, r3
    1108:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    110a:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    110c:	482f      	ldr	r0, [pc, #188]	; (11cc <pvPortMalloc+0x110>)
    110e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
    1110:	2100      	movs	r1, #0
    1112:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    1114:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
    1116:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    1118:	2007      	movs	r0, #7
    111a:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
    111c:	4828      	ldr	r0, [pc, #160]	; (11c0 <pvPortMalloc+0x104>)
    111e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
    1120:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    1122:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1124:	1a99      	subs	r1, r3, r2
    1126:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1128:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112a:	4b2b      	ldr	r3, [pc, #172]	; (11d8 <pvPortMalloc+0x11c>)
    112c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112e:	4b26      	ldr	r3, [pc, #152]	; (11c8 <pvPortMalloc+0x10c>)
    1130:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1132:	2280      	movs	r2, #128	; 0x80
    1134:	0612      	lsls	r2, r2, #24
    1136:	4b23      	ldr	r3, [pc, #140]	; (11c4 <pvPortMalloc+0x108>)
    1138:	601a      	str	r2, [r3, #0]
    113a:	e7c7      	b.n	10cc <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    113c:	4b25      	ldr	r3, [pc, #148]	; (11d4 <pvPortMalloc+0x118>)
    113e:	e7e5      	b.n	110c <pvPortMalloc+0x50>
    1140:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
    1142:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1144:	6861      	ldr	r1, [r4, #4]
    1146:	428b      	cmp	r3, r1
    1148:	d902      	bls.n	1150 <pvPortMalloc+0x94>
    114a:	6821      	ldr	r1, [r4, #0]
    114c:	2900      	cmp	r1, #0
    114e:	d1f7      	bne.n	1140 <pvPortMalloc+0x84>
				if( pxBlock != pxEnd )
    1150:	491b      	ldr	r1, [pc, #108]	; (11c0 <pvPortMalloc+0x104>)
    1152:	6809      	ldr	r1, [r1, #0]
    1154:	428c      	cmp	r4, r1
    1156:	d026      	beq.n	11a6 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1158:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    115a:	6821      	ldr	r1, [r4, #0]
    115c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    115e:	6862      	ldr	r2, [r4, #4]
    1160:	1ad2      	subs	r2, r2, r3
    1162:	2a10      	cmp	r2, #16
    1164:	d908      	bls.n	1178 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1166:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    1168:	0741      	lsls	r1, r0, #29
    116a:	d001      	beq.n	1170 <pvPortMalloc+0xb4>
    116c:	b672      	cpsid	i
    116e:	e7fe      	b.n	116e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1170:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    1172:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1174:	4b19      	ldr	r3, [pc, #100]	; (11dc <pvPortMalloc+0x120>)
    1176:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1178:	6862      	ldr	r2, [r4, #4]
    117a:	1ab6      	subs	r6, r6, r2
    117c:	4912      	ldr	r1, [pc, #72]	; (11c8 <pvPortMalloc+0x10c>)
    117e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1180:	4915      	ldr	r1, [pc, #84]	; (11d8 <pvPortMalloc+0x11c>)
    1182:	6809      	ldr	r1, [r1, #0]
    1184:	428e      	cmp	r6, r1
    1186:	d201      	bcs.n	118c <pvPortMalloc+0xd0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1188:	4913      	ldr	r1, [pc, #76]	; (11d8 <pvPortMalloc+0x11c>)
    118a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    118c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    118e:	4317      	orrs	r7, r2
    1190:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
    1192:	2300      	movs	r3, #0
    1194:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
    1196:	4b12      	ldr	r3, [pc, #72]	; (11e0 <pvPortMalloc+0x124>)
    1198:	4798      	blx	r3
		if( pvReturn == NULL )
    119a:	2d00      	cmp	r5, #0
    119c:	d008      	beq.n	11b0 <pvPortMalloc+0xf4>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    119e:	076b      	lsls	r3, r5, #29
    11a0:	d009      	beq.n	11b6 <pvPortMalloc+0xfa>
    11a2:	b672      	cpsid	i
    11a4:	e7fe      	b.n	11a4 <pvPortMalloc+0xe8>
	( void ) xTaskResumeAll();
    11a6:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <pvPortMalloc+0x124>)
    11a8:	4798      	blx	r3
    11aa:	e001      	b.n	11b0 <pvPortMalloc+0xf4>
    11ac:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <pvPortMalloc+0x124>)
    11ae:	4798      	blx	r3
			vApplicationMallocFailedHook();
    11b0:	4b0c      	ldr	r3, [pc, #48]	; (11e4 <pvPortMalloc+0x128>)
    11b2:	4798      	blx	r3
    11b4:	2500      	movs	r5, #0
}
    11b6:	0028      	movs	r0, r5
    11b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	000020fd 	.word	0x000020fd
    11c0:	20000024 	.word	0x20000024
    11c4:	20004e48 	.word	0x20004e48
    11c8:	20004e4c 	.word	0x20004e4c
    11cc:	20004e54 	.word	0x20004e54
    11d0:	20000028 	.word	0x20000028
    11d4:	00004e20 	.word	0x00004e20
    11d8:	20004e50 	.word	0x20004e50
    11dc:	00001069 	.word	0x00001069
    11e0:	00002251 	.word	0x00002251
    11e4:	00003a6d 	.word	0x00003a6d

000011e8 <vPortFree>:
{
    11e8:	b510      	push	{r4, lr}
	if( pv != NULL )
    11ea:	2800      	cmp	r0, #0
    11ec:	d020      	beq.n	1230 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    11ee:	0003      	movs	r3, r0
    11f0:	3b08      	subs	r3, #8
    11f2:	685b      	ldr	r3, [r3, #4]
    11f4:	4a0f      	ldr	r2, [pc, #60]	; (1234 <vPortFree+0x4c>)
    11f6:	6812      	ldr	r2, [r2, #0]
    11f8:	421a      	tst	r2, r3
    11fa:	d101      	bne.n	1200 <vPortFree+0x18>
    11fc:	b672      	cpsid	i
    11fe:	e7fe      	b.n	11fe <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    1200:	0001      	movs	r1, r0
    1202:	3908      	subs	r1, #8
    1204:	6809      	ldr	r1, [r1, #0]
    1206:	2900      	cmp	r1, #0
    1208:	d001      	beq.n	120e <vPortFree+0x26>
    120a:	b672      	cpsid	i
    120c:	e7fe      	b.n	120c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    120e:	3808      	subs	r0, #8
    1210:	0004      	movs	r4, r0
    1212:	4393      	bics	r3, r2
    1214:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
    1216:	4b08      	ldr	r3, [pc, #32]	; (1238 <vPortFree+0x50>)
    1218:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    121a:	4a08      	ldr	r2, [pc, #32]	; (123c <vPortFree+0x54>)
    121c:	6863      	ldr	r3, [r4, #4]
    121e:	6811      	ldr	r1, [r2, #0]
    1220:	468c      	mov	ip, r1
    1222:	4463      	add	r3, ip
    1224:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1226:	0020      	movs	r0, r4
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <vPortFree+0x58>)
    122a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    122c:	4b05      	ldr	r3, [pc, #20]	; (1244 <vPortFree+0x5c>)
    122e:	4798      	blx	r3
}
    1230:	bd10      	pop	{r4, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	20004e48 	.word	0x20004e48
    1238:	000020fd 	.word	0x000020fd
    123c:	20004e4c 	.word	0x20004e4c
    1240:	00001069 	.word	0x00001069
    1244:	00002251 	.word	0x00002251

00001248 <adc_cb>:
 static uint16_t pressure_raw_int[3];
 static uint16_t potentiometer_meas_raw;
 static uint16_t motor_temp_meas_raw;

 static void adc_cb(struct adc_module *const module)
 {
    1248:	b510      	push	{r4, lr}
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    124a:	2100      	movs	r1, #0
    124c:	4b0a      	ldr	r3, [pc, #40]	; (1278 <adc_cb+0x30>)
    124e:	4798      	blx	r3
    1250:	2800      	cmp	r0, #0
    1252:	d10b      	bne.n	126c <adc_cb+0x24>
	{
		// Motor first
		memcpy(&motor_temp_meas_raw, &adc_buffer[0], 2);
    1254:	4b09      	ldr	r3, [pc, #36]	; (127c <adc_cb+0x34>)
    1256:	881a      	ldrh	r2, [r3, #0]
		// Control potentiometer
		memcpy(&potentiometer_meas_raw, &adc_buffer[2], 2);
    1258:	8899      	ldrh	r1, [r3, #4]
    125a:	4a09      	ldr	r2, [pc, #36]	; (1280 <adc_cb+0x38>)
    125c:	8011      	strh	r1, [r2, #0]
		// Three pressure sensors in a raw
		// TODO be sure indexing is correct
		memcpy(&pressure_raw_int[0], &adc_buffer[4], 2);
    125e:	8919      	ldrh	r1, [r3, #8]
    1260:	4a08      	ldr	r2, [pc, #32]	; (1284 <adc_cb+0x3c>)
    1262:	8011      	strh	r1, [r2, #0]
		memcpy(&pressure_raw_int[1], &adc_buffer[6], 2);
    1264:	8999      	ldrh	r1, [r3, #12]
    1266:	8051      	strh	r1, [r2, #2]
		memcpy(&pressure_raw_int[2], &adc_buffer[8], 2);
    1268:	8a1b      	ldrh	r3, [r3, #16]
    126a:	8093      	strh	r3, [r2, #4]
	}
	// Trigger new measurement
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    126c:	220a      	movs	r2, #10
    126e:	4903      	ldr	r1, [pc, #12]	; (127c <adc_cb+0x34>)
    1270:	4805      	ldr	r0, [pc, #20]	; (1288 <adc_cb+0x40>)
    1272:	4b06      	ldr	r3, [pc, #24]	; (128c <adc_cb+0x44>)
    1274:	4798      	blx	r3
 }
    1276:	bd10      	pop	{r4, pc}
    1278:	000006a9 	.word	0x000006a9
    127c:	20004e5c 	.word	0x20004e5c
    1280:	20004e90 	.word	0x20004e90
    1284:	20004e94 	.word	0x20004e94
    1288:	20004e70 	.word	0x20004e70
    128c:	0000065d 	.word	0x0000065d

00001290 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    1290:	b510      	push	{r4, lr}
    1292:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config;

	adc_module_instance.reference = ADC_REFERENCE_AREFA; // 3.3V
    1294:	4c23      	ldr	r4, [pc, #140]	; (1324 <adc_interface_init+0x94>)
    1296:	2303      	movs	r3, #3
    1298:	7123      	strb	r3, [r4, #4]

	adc_get_config_defaults(&config);
    129a:	4668      	mov	r0, sp
    129c:	4b22      	ldr	r3, [pc, #136]	; (1328 <adc_interface_init+0x98>)
    129e:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    12a0:	2202      	movs	r2, #2
    12a2:	466b      	mov	r3, sp
    12a4:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    12a6:	23c0      	movs	r3, #192	; 0xc0
    12a8:	015b      	lsls	r3, r3, #5
    12aa:	4669      	mov	r1, sp
    12ac:	81cb      	strh	r3, [r1, #14]
	config.differential_mode = false;
    12ae:	2300      	movs	r3, #0
    12b0:	74cb      	strb	r3, [r1, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock
    12b2:	2101      	movs	r1, #1
    12b4:	4668      	mov	r0, sp
    12b6:	7001      	strb	r1, [r0, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    12b8:	8043      	strh	r3, [r0, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    12ba:	9302      	str	r3, [sp, #8]
	config.resolution = ADC_RESOLUTION_16BIT;
    12bc:	3310      	adds	r3, #16
    12be:	7103      	strb	r3, [r0, #4]

	// Scan from 2 through 6
	config.pin_scan.offset_start_scan = 2;
    12c0:	331b      	adds	r3, #27
    12c2:	54c2      	strb	r2, [r0, r3]
	config.pin_scan.inputs_to_scan = 5;
    12c4:	3203      	adds	r2, #3
    12c6:	3301      	adds	r3, #1
    12c8:	54c2      	strb	r2, [r0, r3]

	adc_init(&adc_module_instance, ADC, &config);
    12ca:	466a      	mov	r2, sp
    12cc:	4917      	ldr	r1, [pc, #92]	; (132c <adc_interface_init+0x9c>)
    12ce:	0020      	movs	r0, r4
    12d0:	4b17      	ldr	r3, [pc, #92]	; (1330 <adc_interface_init+0xa0>)
    12d2:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    12d4:	6822      	ldr	r2, [r4, #0]
    12d6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12d8:	b25b      	sxtb	r3, r3
    12da:	2b00      	cmp	r3, #0
    12dc:	dbfb      	blt.n	12d6 <adc_interface_init+0x46>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12de:	2180      	movs	r1, #128	; 0x80
    12e0:	0409      	lsls	r1, r1, #16
    12e2:	4b14      	ldr	r3, [pc, #80]	; (1334 <adc_interface_init+0xa4>)
    12e4:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    12e6:	230f      	movs	r3, #15
    12e8:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    12ea:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    12ec:	7813      	ldrb	r3, [r2, #0]
    12ee:	2102      	movs	r1, #2
    12f0:	430b      	orrs	r3, r1
    12f2:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    12f4:	4b0b      	ldr	r3, [pc, #44]	; (1324 <adc_interface_init+0x94>)
    12f6:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12f8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12fa:	b25b      	sxtb	r3, r3
    12fc:	2b00      	cmp	r3, #0
    12fe:	dbfb      	blt.n	12f8 <adc_interface_init+0x68>
	adc_enable(&adc_module_instance);

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    1300:	4c08      	ldr	r4, [pc, #32]	; (1324 <adc_interface_init+0x94>)
    1302:	2200      	movs	r2, #0
    1304:	490c      	ldr	r1, [pc, #48]	; (1338 <adc_interface_init+0xa8>)
    1306:	0020      	movs	r0, r4
    1308:	4b0c      	ldr	r3, [pc, #48]	; (133c <adc_interface_init+0xac>)
    130a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    130c:	7ee3      	ldrb	r3, [r4, #27]
    130e:	2201      	movs	r2, #1
    1310:	4313      	orrs	r3, r2
    1312:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);

	// Start the conversion
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    1314:	220a      	movs	r2, #10
    1316:	490a      	ldr	r1, [pc, #40]	; (1340 <adc_interface_init+0xb0>)
    1318:	0020      	movs	r0, r4
    131a:	4b0a      	ldr	r3, [pc, #40]	; (1344 <adc_interface_init+0xb4>)
    131c:	4798      	blx	r3
 }
    131e:	b00c      	add	sp, #48	; 0x30
    1320:	bd10      	pop	{r4, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20004e70 	.word	0x20004e70
    1328:	00000115 	.word	0x00000115
    132c:	42004000 	.word	0x42004000
    1330:	0000015d 	.word	0x0000015d
    1334:	e000e100 	.word	0xe000e100
    1338:	00001249 	.word	0x00001249
    133c:	00000649 	.word	0x00000649
    1340:	20004e5c 	.word	0x20004e5c
    1344:	0000065d 	.word	0x0000065d

00001348 <flow_sensor_slm_callback>:
*	\brief Callback to handle the measurements from the flow sensor
*
*	\param module Pointer to I2C master module
*/
static void flow_sensor_slm_callback(struct i2c_master_module *const module)
{
    1348:	b510      	push	{r4, lr}
	// WARNING: ISR context
	uint8_t read_crc = read_slm_buffer[2];
    134a:	4b16      	ldr	r3, [pc, #88]	; (13a4 <flow_sensor_slm_callback+0x5c>)
    134c:	7899      	ldrb	r1, [r3, #2]
    134e:	b2c9      	uxtb	r1, r1
	 { crc ^= *(data+byteCtr);
    1350:	781b      	ldrb	r3, [r3, #0]
    1352:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1354:	2431      	movs	r4, #49	; 0x31
    1356:	e006      	b.n	1366 <flow_sensor_slm_callback+0x1e>
    1358:	005b      	lsls	r3, r3, #1
    135a:	4063      	eors	r3, r4
    135c:	b2db      	uxtb	r3, r3
    135e:	3a01      	subs	r2, #1
    1360:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1362:	2a00      	cmp	r2, #0
    1364:	d005      	beq.n	1372 <flow_sensor_slm_callback+0x2a>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1366:	b258      	sxtb	r0, r3
    1368:	2800      	cmp	r0, #0
    136a:	dbf5      	blt.n	1358 <flow_sensor_slm_callback+0x10>
			 else crc = (crc << 1);
    136c:	005b      	lsls	r3, r3, #1
    136e:	b2db      	uxtb	r3, r3
    1370:	e7f5      	b.n	135e <flow_sensor_slm_callback+0x16>
	 { crc ^= *(data+byteCtr);
    1372:	4a0c      	ldr	r2, [pc, #48]	; (13a4 <flow_sensor_slm_callback+0x5c>)
    1374:	7852      	ldrb	r2, [r2, #1]
    1376:	4053      	eors	r3, r2
    1378:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    137a:	2431      	movs	r4, #49	; 0x31
    137c:	e006      	b.n	138c <flow_sensor_slm_callback+0x44>
    137e:	005b      	lsls	r3, r3, #1
    1380:	4063      	eors	r3, r4
    1382:	b2db      	uxtb	r3, r3
    1384:	3a01      	subs	r2, #1
    1386:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1388:	2a00      	cmp	r2, #0
    138a:	d005      	beq.n	1398 <flow_sensor_slm_callback+0x50>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    138c:	b258      	sxtb	r0, r3
    138e:	2800      	cmp	r0, #0
    1390:	dbf5      	blt.n	137e <flow_sensor_slm_callback+0x36>
			 else crc = (crc << 1);
    1392:	005b      	lsls	r3, r3, #1
    1394:	b2db      	uxtb	r3, r3
    1396:	e7f5      	b.n	1384 <flow_sensor_slm_callback+0x3c>
	if(!flow_sensor_crc(read_slm_buffer, 2, read_crc))
    1398:	4299      	cmp	r1, r3
    139a:	d102      	bne.n	13a2 <flow_sensor_slm_callback+0x5a>
	{
		return;
	}

	uint32_t raw_rate = read_slm_buffer[1] | (read_slm_buffer[0] << 8);
    139c:	4b01      	ldr	r3, [pc, #4]	; (13a4 <flow_sensor_slm_callback+0x5c>)
    139e:	785a      	ldrb	r2, [r3, #1]
    13a0:	781b      	ldrb	r3, [r3, #0]
	float flow_rate = (float) ((int32_t) raw_rate - (int32_t) SFM3300_OFFSET_FLOW) / SFM3300_SCALE_FACTOR_FLOW;
	// TODO do something with it
}
    13a2:	bd10      	pop	{r4, pc}
    13a4:	20004e9c 	.word	0x20004e9c

000013a8 <flow_sensor_init>:
*	\brief Sets up callback handler for flow sensor measurements
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_init(struct i2c_master_module * i2c_mod)
{
    13a8:	b510      	push	{r4, lr}
    13aa:	0004      	movs	r4, r0
	// Set up I2C callback
	i2c_master_register_callback(i2c_mod, flow_sensor_slm_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
    13ac:	2201      	movs	r2, #1
    13ae:	4904      	ldr	r1, [pc, #16]	; (13c0 <flow_sensor_init+0x18>)
    13b0:	4b04      	ldr	r3, [pc, #16]	; (13c4 <flow_sensor_init+0x1c>)
    13b2:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    13b4:	7e63      	ldrb	r3, [r4, #25]
    13b6:	2202      	movs	r2, #2
    13b8:	4313      	orrs	r3, r2
    13ba:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(i2c_mod, I2C_MASTER_CALLBACK_READ_COMPLETE);
	// TODO set priority to be FreeRTOS compatible?
}
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	00001349 	.word	0x00001349
    13c4:	00000cd5 	.word	0x00000cd5

000013c8 <flow_sensor_power_on>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    13c8:	2280      	movs	r2, #128	; 0x80
    13ca:	4b01      	ldr	r3, [pc, #4]	; (13d0 <flow_sensor_power_on+0x8>)
    13cc:	619a      	str	r2, [r3, #24]
*	\brief Powers on the flow sensor
*/
void flow_sensor_power_on(void)
{
	ioport_set_pin_level(FLOW_SENSOR_POWER_GPIO, FLOW_SENSOR_POWER_ACTIVE_LEVEL);
}
    13ce:	4770      	bx	lr
    13d0:	41004400 	.word	0x41004400

000013d4 <flow_sensor_request_flow_slm>:
*	\brief Requests a measurement from the flow sensor and triggers another measurement
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_request_flow_slm(struct i2c_master_module * i2c_mod)
{
    13d4:	b570      	push	{r4, r5, r6, lr}
    13d6:	0005      	movs	r5, r0
	// Note: Delay is inherent between these, so must not call faster than 500Hz

	slm_read_packet.address = SFM3300_I2C_ADDRESS;
    13d8:	490b      	ldr	r1, [pc, #44]	; (1408 <flow_sensor_request_flow_slm+0x34>)
    13da:	2640      	movs	r6, #64	; 0x40
    13dc:	800e      	strh	r6, [r1, #0]
	slm_read_packet.data = read_slm_buffer;
    13de:	4b0b      	ldr	r3, [pc, #44]	; (140c <flow_sensor_request_flow_slm+0x38>)
    13e0:	604b      	str	r3, [r1, #4]
	slm_read_packet.data_length = 3;
    13e2:	2303      	movs	r3, #3
    13e4:	804b      	strh	r3, [r1, #2]
	slm_read_packet.high_speed = false;
    13e6:	2400      	movs	r4, #0
    13e8:	724c      	strb	r4, [r1, #9]
	slm_read_packet.ten_bit_address = false;
    13ea:	720c      	strb	r4, [r1, #8]
	i2c_master_read_packet_job(i2c_mod, &slm_read_packet);
    13ec:	4b08      	ldr	r3, [pc, #32]	; (1410 <flow_sensor_request_flow_slm+0x3c>)
    13ee:	4798      	blx	r3

	static uint8_t flow_request_to_send[2] = {SFM3300_MEAS_CMD_BYTE_1, SFM3300_MEAS_CMD_BYTE_2};
	// First have to request read, delay 2ms, and then read
	slm_write_packet.address = SFM3300_I2C_ADDRESS;
    13f0:	4908      	ldr	r1, [pc, #32]	; (1414 <flow_sensor_request_flow_slm+0x40>)
    13f2:	800e      	strh	r6, [r1, #0]
	slm_write_packet.data = &flow_request_to_send[0];
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <flow_sensor_request_flow_slm+0x44>)
    13f6:	604b      	str	r3, [r1, #4]
	slm_write_packet.data_length = 2;
    13f8:	2302      	movs	r3, #2
    13fa:	804b      	strh	r3, [r1, #2]
	slm_write_packet.high_speed = false;
    13fc:	724c      	strb	r4, [r1, #9]
	slm_write_packet.ten_bit_address = false;
    13fe:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(i2c_mod, &slm_write_packet);
    1400:	0028      	movs	r0, r5
    1402:	4b06      	ldr	r3, [pc, #24]	; (141c <flow_sensor_request_flow_slm+0x48>)
    1404:	4798      	blx	r3
    1406:	bd70      	pop	{r4, r5, r6, pc}
    1408:	20004ea0 	.word	0x20004ea0
    140c:	20004e9c 	.word	0x20004e9c
    1410:	00000ced 	.word	0x00000ced
    1414:	20004eac 	.word	0x20004eac
    1418:	20000004 	.word	0x20000004
    141c:	00000d11 	.word	0x00000d11

00001420 <control_task>:

// Task handle
static TaskHandle_t control_task_handle = NULL;

static void control_task(void * pvParameters)
{
    1420:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    1422:	25fa      	movs	r5, #250	; 0xfa
    1424:	00ad      	lsls	r5, r5, #2
    1426:	4c02      	ldr	r4, [pc, #8]	; (1430 <control_task+0x10>)
    1428:	0028      	movs	r0, r5
    142a:	47a0      	blx	r4
    142c:	e7fc      	b.n	1428 <control_task+0x8>
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	00002351 	.word	0x00002351

00001434 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1434:	b510      	push	{r4, lr}
    1436:	b082      	sub	sp, #8
    1438:	0002      	movs	r2, r0
	xTaskCreate(control_task, (const char * const) "CONTROL",
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <create_control_task+0x1c>)
    143c:	9301      	str	r3, [sp, #4]
    143e:	9100      	str	r1, [sp, #0]
    1440:	2300      	movs	r3, #0
    1442:	4904      	ldr	r1, [pc, #16]	; (1454 <create_control_task+0x20>)
    1444:	4804      	ldr	r0, [pc, #16]	; (1458 <create_control_task+0x24>)
    1446:	4c05      	ldr	r4, [pc, #20]	; (145c <create_control_task+0x28>)
    1448:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
    144a:	b002      	add	sp, #8
    144c:	bd10      	pop	{r4, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	20004eb8 	.word	0x20004eb8
    1454:	000055f4 	.word	0x000055f4
    1458:	00001421 	.word	0x00001421
    145c:	00001ea1 	.word	0x00001ea1

00001460 <hmi_task>:

// Task handle
static TaskHandle_t hmi_task_handle = NULL;

static void hmi_task(void * pvParameters)
{
    1460:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    1462:	25fa      	movs	r5, #250	; 0xfa
    1464:	00ad      	lsls	r5, r5, #2
    1466:	4c02      	ldr	r4, [pc, #8]	; (1470 <hmi_task+0x10>)
    1468:	0028      	movs	r0, r5
    146a:	47a0      	blx	r4
    146c:	e7fc      	b.n	1468 <hmi_task+0x8>
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	00002351 	.word	0x00002351

00001474 <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1474:	b510      	push	{r4, lr}
    1476:	b082      	sub	sp, #8
    1478:	0002      	movs	r2, r0
	xTaskCreate(hmi_task, (const char * const) "HMI",
    147a:	4b05      	ldr	r3, [pc, #20]	; (1490 <create_hmi_task+0x1c>)
    147c:	9301      	str	r3, [sp, #4]
    147e:	9100      	str	r1, [sp, #0]
    1480:	2300      	movs	r3, #0
    1482:	4904      	ldr	r1, [pc, #16]	; (1494 <create_hmi_task+0x20>)
    1484:	4804      	ldr	r0, [pc, #16]	; (1498 <create_hmi_task+0x24>)
    1486:	4c05      	ldr	r4, [pc, #20]	; (149c <create_hmi_task+0x28>)
    1488:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);
    148a:	b002      	add	sp, #8
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20004ebc 	.word	0x20004ebc
    1494:	000055fc 	.word	0x000055fc
    1498:	00001461 	.word	0x00001461
    149c:	00001ea1 	.word	0x00001ea1

000014a0 <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    14a0:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    14a2:	25fa      	movs	r5, #250	; 0xfa
    14a4:	00ad      	lsls	r5, r5, #2
    14a6:	4c02      	ldr	r4, [pc, #8]	; (14b0 <monitor_task+0x10>)
    14a8:	0028      	movs	r0, r5
    14aa:	47a0      	blx	r4
    14ac:	e7fc      	b.n	14a8 <monitor_task+0x8>
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	00002351 	.word	0x00002351

000014b4 <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    14b4:	b510      	push	{r4, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	0002      	movs	r2, r0
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    14ba:	4b05      	ldr	r3, [pc, #20]	; (14d0 <create_monitor_task+0x1c>)
    14bc:	9301      	str	r3, [sp, #4]
    14be:	9100      	str	r1, [sp, #0]
    14c0:	2300      	movs	r3, #0
    14c2:	4904      	ldr	r1, [pc, #16]	; (14d4 <create_monitor_task+0x20>)
    14c4:	4804      	ldr	r0, [pc, #16]	; (14d8 <create_monitor_task+0x24>)
    14c6:	4c05      	ldr	r4, [pc, #20]	; (14dc <create_monitor_task+0x28>)
    14c8:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    14ca:	b002      	add	sp, #8
    14cc:	bd10      	pop	{r4, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	20004ec0 	.word	0x20004ec0
    14d4:	00005600 	.word	0x00005600
    14d8:	000014a1 	.word	0x000014a1
    14dc:	00001ea1 	.word	0x00001ea1

000014e0 <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    14e0:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);

	vTaskDelay(pdMS_TO_TICKS(10));
    14e2:	200a      	movs	r0, #10
    14e4:	4b05      	ldr	r3, [pc, #20]	; (14fc <sensor_task+0x1c>)
    14e6:	4798      	blx	r3
	flow_sensor_request_flow_slm(&i2c_master_instance); // first read is invalid
    14e8:	4805      	ldr	r0, [pc, #20]	; (1500 <sensor_task+0x20>)
    14ea:	4b06      	ldr	r3, [pc, #24]	; (1504 <sensor_task+0x24>)
    14ec:	4798      	blx	r3
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    14ee:	25fa      	movs	r5, #250	; 0xfa
    14f0:	00ad      	lsls	r5, r5, #2
    14f2:	4c02      	ldr	r4, [pc, #8]	; (14fc <sensor_task+0x1c>)
    14f4:	0028      	movs	r0, r5
    14f6:	47a0      	blx	r4
    14f8:	e7fc      	b.n	14f4 <sensor_task+0x14>
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	00002351 	.word	0x00002351
    1500:	20004ec4 	.word	0x20004ec4
    1504:	000013d5 	.word	0x000013d5

00001508 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1508:	b5f0      	push	{r4, r5, r6, r7, lr}
    150a:	b091      	sub	sp, #68	; 0x44
    150c:	0005      	movs	r5, r0
    150e:	000e      	movs	r6, r1
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1510:	ab03      	add	r3, sp, #12
    1512:	2264      	movs	r2, #100	; 0x64
    1514:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1516:	4a2a      	ldr	r2, [pc, #168]	; (15c0 <create_sensor_task+0xb8>)
    1518:	9204      	str	r2, [sp, #16]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    151a:	2200      	movs	r2, #0
    151c:	9205      	str	r2, [sp, #20]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    151e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1520:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1522:	2180      	movs	r1, #128	; 0x80
    1524:	0389      	lsls	r1, r1, #14
    1526:	9107      	str	r1, [sp, #28]
	config->buffer_timeout   = 65535;
    1528:	2101      	movs	r1, #1
    152a:	4249      	negs	r1, r1
    152c:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    152e:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1530:	3125      	adds	r1, #37	; 0x25
    1532:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1534:	920d      	str	r2, [sp, #52]	; 0x34
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1536:	3108      	adds	r1, #8
    1538:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    153a:	3101      	adds	r1, #1
    153c:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    153e:	3101      	adds	r1, #1
    1540:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1542:	32d7      	adds	r2, #215	; 0xd7
    1544:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    1546:	3ac1      	subs	r2, #193	; 0xc1
    1548:	920a      	str	r2, [sp, #40]	; 0x28
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    154a:	3201      	adds	r2, #1
    154c:	920b      	str	r2, [sp, #44]	; 0x2c
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    154e:	4c1d      	ldr	r4, [pc, #116]	; (15c4 <create_sensor_task+0xbc>)
    1550:	4f1d      	ldr	r7, [pc, #116]	; (15c8 <create_sensor_task+0xc0>)
    1552:	aa03      	add	r2, sp, #12
    1554:	491d      	ldr	r1, [pc, #116]	; (15cc <create_sensor_task+0xc4>)
    1556:	0020      	movs	r0, r4
    1558:	47b8      	blx	r7
    155a:	2800      	cmp	r0, #0
    155c:	d1f9      	bne.n	1552 <create_sensor_task+0x4a>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    155e:	4b19      	ldr	r3, [pc, #100]	; (15c4 <create_sensor_task+0xbc>)
    1560:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1562:	2207      	movs	r2, #7
    1564:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1566:	421a      	tst	r2, r3
    1568:	d1fc      	bne.n	1564 <create_sensor_task+0x5c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    156a:	6823      	ldr	r3, [r4, #0]
    156c:	2202      	movs	r2, #2
    156e:	4313      	orrs	r3, r2
    1570:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1572:	4f14      	ldr	r7, [pc, #80]	; (15c4 <create_sensor_task+0xbc>)
    1574:	6838      	ldr	r0, [r7, #0]
    1576:	4b16      	ldr	r3, [pc, #88]	; (15d0 <create_sensor_task+0xc8>)
    1578:	4798      	blx	r3
    157a:	231f      	movs	r3, #31
    157c:	4018      	ands	r0, r3
    157e:	3b1e      	subs	r3, #30
    1580:	4083      	lsls	r3, r0
    1582:	4a14      	ldr	r2, [pc, #80]	; (15d4 <create_sensor_task+0xcc>)
    1584:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1586:	88f8      	ldrh	r0, [r7, #6]
	uint32_t timeout_counter = 0;
    1588:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    158a:	2110      	movs	r1, #16
    158c:	8b62      	ldrh	r2, [r4, #26]
    158e:	420a      	tst	r2, r1
    1590:	d104      	bne.n	159c <create_sensor_task+0x94>
		timeout_counter++;
    1592:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1594:	4283      	cmp	r3, r0
    1596:	d3f9      	bcc.n	158c <create_sensor_task+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1598:	2310      	movs	r3, #16
    159a:	8363      	strh	r3, [r4, #26]
	flow_sensor_power_on();
    159c:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <create_sensor_task+0xd0>)
    159e:	4798      	blx	r3
	flow_sensor_init(&i2c_master_instance);
    15a0:	4808      	ldr	r0, [pc, #32]	; (15c4 <create_sensor_task+0xbc>)
    15a2:	4b0e      	ldr	r3, [pc, #56]	; (15dc <create_sensor_task+0xd4>)
    15a4:	4798      	blx	r3
	adc_interface_init();
    15a6:	4b0e      	ldr	r3, [pc, #56]	; (15e0 <create_sensor_task+0xd8>)
    15a8:	4798      	blx	r3
	sensor_hw_init();
	
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    15aa:	4b0e      	ldr	r3, [pc, #56]	; (15e4 <create_sensor_task+0xdc>)
    15ac:	9301      	str	r3, [sp, #4]
    15ae:	9600      	str	r6, [sp, #0]
    15b0:	2300      	movs	r3, #0
    15b2:	002a      	movs	r2, r5
    15b4:	490c      	ldr	r1, [pc, #48]	; (15e8 <create_sensor_task+0xe0>)
    15b6:	480d      	ldr	r0, [pc, #52]	; (15ec <create_sensor_task+0xe4>)
    15b8:	4c0d      	ldr	r4, [pc, #52]	; (15f0 <create_sensor_task+0xe8>)
    15ba:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
    15bc:	b011      	add	sp, #68	; 0x44
    15be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c0:	00000d48 	.word	0x00000d48
    15c4:	20004ec4 	.word	0x20004ec4
    15c8:	00000761 	.word	0x00000761
    15cc:	42001400 	.word	0x42001400
    15d0:	00002dbd 	.word	0x00002dbd
    15d4:	e000e100 	.word	0xe000e100
    15d8:	000013c9 	.word	0x000013c9
    15dc:	000013a9 	.word	0x000013a9
    15e0:	00001291 	.word	0x00001291
    15e4:	20004eec 	.word	0x20004eec
    15e8:	00005608 	.word	0x00005608
    15ec:	000014e1 	.word	0x000014e1
    15f0:	00001ea1 	.word	0x00001ea1

000015f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    15f4:	0003      	movs	r3, r0
    15f6:	3308      	adds	r3, #8
    15f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    15fa:	2201      	movs	r2, #1
    15fc:	4252      	negs	r2, r2
    15fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1600:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1602:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1604:	2300      	movs	r3, #0
    1606:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1608:	4770      	bx	lr

0000160a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    160a:	2300      	movs	r3, #0
    160c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    160e:	4770      	bx	lr

00001610 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1610:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1612:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1614:	689a      	ldr	r2, [r3, #8]
    1616:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1618:	689a      	ldr	r2, [r3, #8]
    161a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    161c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    161e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1620:	6803      	ldr	r3, [r0, #0]
    1622:	3301      	adds	r3, #1
    1624:	6003      	str	r3, [r0, #0]
}
    1626:	4770      	bx	lr

00001628 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1628:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    162a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    162c:	0002      	movs	r2, r0
    162e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1630:	1c63      	adds	r3, r4, #1
    1632:	d102      	bne.n	163a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1634:	6902      	ldr	r2, [r0, #16]
    1636:	e004      	b.n	1642 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1638:	001a      	movs	r2, r3
    163a:	6853      	ldr	r3, [r2, #4]
    163c:	681d      	ldr	r5, [r3, #0]
    163e:	42ac      	cmp	r4, r5
    1640:	d2fa      	bcs.n	1638 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1642:	6853      	ldr	r3, [r2, #4]
    1644:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1646:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1648:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    164a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    164c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    164e:	6803      	ldr	r3, [r0, #0]
    1650:	3301      	adds	r3, #1
    1652:	6003      	str	r3, [r0, #0]
}
    1654:	bd30      	pop	{r4, r5, pc}

00001656 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1656:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1658:	6842      	ldr	r2, [r0, #4]
    165a:	6881      	ldr	r1, [r0, #8]
    165c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    165e:	6882      	ldr	r2, [r0, #8]
    1660:	6841      	ldr	r1, [r0, #4]
    1662:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1664:	685a      	ldr	r2, [r3, #4]
    1666:	4290      	cmp	r0, r2
    1668:	d006      	beq.n	1678 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    166a:	2200      	movs	r2, #0
    166c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    166e:	681a      	ldr	r2, [r3, #0]
    1670:	3a01      	subs	r2, #1
    1672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1674:	6818      	ldr	r0, [r3, #0]
}
    1676:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1678:	6882      	ldr	r2, [r0, #8]
    167a:	605a      	str	r2, [r3, #4]
    167c:	e7f5      	b.n	166a <uxListRemove+0x14>
	...

00001680 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1680:	b510      	push	{r4, lr}
    1682:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1684:	4b03      	ldr	r3, [pc, #12]	; (1694 <prvIsQueueEmpty+0x14>)
    1686:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1688:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    168a:	4b03      	ldr	r3, [pc, #12]	; (1698 <prvIsQueueEmpty+0x18>)
    168c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    168e:	4260      	negs	r0, r4
    1690:	4160      	adcs	r0, r4

	return xReturn;
}
    1692:	bd10      	pop	{r4, pc}
    1694:	00001021 	.word	0x00001021
    1698:	00001039 	.word	0x00001039

0000169c <prvCopyDataToQueue>:
{
    169c:	b570      	push	{r4, r5, r6, lr}
    169e:	0004      	movs	r4, r0
    16a0:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    16a2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    16a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    16a6:	2a00      	cmp	r2, #0
    16a8:	d10b      	bne.n	16c2 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    16aa:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    16ac:	6823      	ldr	r3, [r4, #0]
    16ae:	4283      	cmp	r3, r0
    16b0:	d104      	bne.n	16bc <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    16b2:	6860      	ldr	r0, [r4, #4]
    16b4:	4b16      	ldr	r3, [pc, #88]	; (1710 <prvCopyDataToQueue+0x74>)
    16b6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    16b8:	2300      	movs	r3, #0
    16ba:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    16bc:	3501      	adds	r5, #1
    16be:	63a5      	str	r5, [r4, #56]	; 0x38
}
    16c0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    16c2:	2e00      	cmp	r6, #0
    16c4:	d10e      	bne.n	16e4 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    16c6:	6880      	ldr	r0, [r0, #8]
    16c8:	4b12      	ldr	r3, [pc, #72]	; (1714 <prvCopyDataToQueue+0x78>)
    16ca:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    16cc:	68a3      	ldr	r3, [r4, #8]
    16ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
    16d0:	4694      	mov	ip, r2
    16d2:	4463      	add	r3, ip
    16d4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    16d6:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    16d8:	6862      	ldr	r2, [r4, #4]
    16da:	4293      	cmp	r3, r2
    16dc:	d3ee      	bcc.n	16bc <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    16de:	6823      	ldr	r3, [r4, #0]
    16e0:	60a3      	str	r3, [r4, #8]
    16e2:	e7eb      	b.n	16bc <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    16e4:	68c0      	ldr	r0, [r0, #12]
    16e6:	4b0b      	ldr	r3, [pc, #44]	; (1714 <prvCopyDataToQueue+0x78>)
    16e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    16ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    16ec:	425b      	negs	r3, r3
    16ee:	68e2      	ldr	r2, [r4, #12]
    16f0:	18d2      	adds	r2, r2, r3
    16f2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    16f4:	6821      	ldr	r1, [r4, #0]
    16f6:	428a      	cmp	r2, r1
    16f8:	d203      	bcs.n	1702 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    16fa:	6862      	ldr	r2, [r4, #4]
    16fc:	4694      	mov	ip, r2
    16fe:	4463      	add	r3, ip
    1700:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    1702:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    1704:	2e02      	cmp	r6, #2
    1706:	d1d9      	bne.n	16bc <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1708:	4285      	cmp	r5, r0
    170a:	d0d7      	beq.n	16bc <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    170c:	3d01      	subs	r5, #1
    170e:	e7d5      	b.n	16bc <prvCopyDataToQueue+0x20>
    1710:	00002605 	.word	0x00002605
    1714:	000054ad 	.word	0x000054ad

00001718 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1718:	b570      	push	{r4, r5, r6, lr}
    171a:	b082      	sub	sp, #8
    171c:	9001      	str	r0, [sp, #4]
    171e:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1720:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1722:	2c00      	cmp	r4, #0
    1724:	d005      	beq.n	1732 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    172a:	4299      	cmp	r1, r3
    172c:	d303      	bcc.n	1736 <prvNotifyQueueSetContainer+0x1e>
    172e:	b672      	cpsid	i
    1730:	e7fe      	b.n	1730 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    1732:	b672      	cpsid	i
    1734:	e7fe      	b.n	1734 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    1738:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    173a:	428b      	cmp	r3, r1
    173c:	d802      	bhi.n	1744 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    173e:	0030      	movs	r0, r6
    1740:	b002      	add	sp, #8
    1742:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1744:	2345      	movs	r3, #69	; 0x45
    1746:	5ce5      	ldrb	r5, [r4, r3]
    1748:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    174a:	a901      	add	r1, sp, #4
    174c:	0020      	movs	r0, r4
    174e:	4b0a      	ldr	r3, [pc, #40]	; (1778 <prvNotifyQueueSetContainer+0x60>)
    1750:	4798      	blx	r3
    1752:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    1754:	1c6b      	adds	r3, r5, #1
    1756:	d10a      	bne.n	176e <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1758:	6a63      	ldr	r3, [r4, #36]	; 0x24
    175a:	2b00      	cmp	r3, #0
    175c:	d0ef      	beq.n	173e <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    175e:	0020      	movs	r0, r4
    1760:	3024      	adds	r0, #36	; 0x24
    1762:	4b06      	ldr	r3, [pc, #24]	; (177c <prvNotifyQueueSetContainer+0x64>)
    1764:	4798      	blx	r3
    1766:	2800      	cmp	r0, #0
    1768:	d0e9      	beq.n	173e <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    176a:	2601      	movs	r6, #1
    176c:	e7e7      	b.n	173e <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    176e:	3501      	adds	r5, #1
    1770:	b26d      	sxtb	r5, r5
    1772:	2345      	movs	r3, #69	; 0x45
    1774:	54e5      	strb	r5, [r4, r3]
    1776:	e7e2      	b.n	173e <prvNotifyQueueSetContainer+0x26>
    1778:	0000169d 	.word	0x0000169d
    177c:	000024c9 	.word	0x000024c9

00001780 <prvCopyDataFromQueue>:
{
    1780:	b510      	push	{r4, lr}
    1782:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1784:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1786:	2a00      	cmp	r2, #0
    1788:	d00b      	beq.n	17a2 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    178a:	68c3      	ldr	r3, [r0, #12]
    178c:	189b      	adds	r3, r3, r2
    178e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1790:	6841      	ldr	r1, [r0, #4]
    1792:	428b      	cmp	r3, r1
    1794:	d301      	bcc.n	179a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1796:	6803      	ldr	r3, [r0, #0]
    1798:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    179a:	68c1      	ldr	r1, [r0, #12]
    179c:	0020      	movs	r0, r4
    179e:	4b01      	ldr	r3, [pc, #4]	; (17a4 <prvCopyDataFromQueue+0x24>)
    17a0:	4798      	blx	r3
}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	000054ad 	.word	0x000054ad

000017a8 <prvUnlockQueue>:
{
    17a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17aa:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    17ac:	4b25      	ldr	r3, [pc, #148]	; (1844 <prvUnlockQueue+0x9c>)
    17ae:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    17b0:	2345      	movs	r3, #69	; 0x45
    17b2:	5cfc      	ldrb	r4, [r7, r3]
    17b4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    17b6:	2c00      	cmp	r4, #0
    17b8:	dd1c      	ble.n	17f4 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    17ba:	4e23      	ldr	r6, [pc, #140]	; (1848 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17bc:	4d23      	ldr	r5, [pc, #140]	; (184c <prvUnlockQueue+0xa4>)
    17be:	e00b      	b.n	17d8 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17c2:	2b00      	cmp	r3, #0
    17c4:	d016      	beq.n	17f4 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17c6:	0038      	movs	r0, r7
    17c8:	3024      	adds	r0, #36	; 0x24
    17ca:	47a8      	blx	r5
    17cc:	2800      	cmp	r0, #0
    17ce:	d10e      	bne.n	17ee <prvUnlockQueue+0x46>
    17d0:	3c01      	subs	r4, #1
    17d2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    17d4:	2c00      	cmp	r4, #0
    17d6:	d00d      	beq.n	17f4 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    17d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    17da:	2b00      	cmp	r3, #0
    17dc:	d0f0      	beq.n	17c0 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    17de:	2100      	movs	r1, #0
    17e0:	0038      	movs	r0, r7
    17e2:	47b0      	blx	r6
    17e4:	2800      	cmp	r0, #0
    17e6:	d0f3      	beq.n	17d0 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    17e8:	4b19      	ldr	r3, [pc, #100]	; (1850 <prvUnlockQueue+0xa8>)
    17ea:	4798      	blx	r3
    17ec:	e7f0      	b.n	17d0 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    17ee:	4b18      	ldr	r3, [pc, #96]	; (1850 <prvUnlockQueue+0xa8>)
    17f0:	4798      	blx	r3
    17f2:	e7ed      	b.n	17d0 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    17f4:	22ff      	movs	r2, #255	; 0xff
    17f6:	2345      	movs	r3, #69	; 0x45
    17f8:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    17fa:	4b16      	ldr	r3, [pc, #88]	; (1854 <prvUnlockQueue+0xac>)
    17fc:	4798      	blx	r3
	taskENTER_CRITICAL();
    17fe:	4b11      	ldr	r3, [pc, #68]	; (1844 <prvUnlockQueue+0x9c>)
    1800:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    1802:	2344      	movs	r3, #68	; 0x44
    1804:	5cfc      	ldrb	r4, [r7, r3]
    1806:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1808:	2c00      	cmp	r4, #0
    180a:	dd14      	ble.n	1836 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    180c:	693b      	ldr	r3, [r7, #16]
    180e:	2b00      	cmp	r3, #0
    1810:	d011      	beq.n	1836 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1812:	003d      	movs	r5, r7
    1814:	3510      	adds	r5, #16
    1816:	4e0d      	ldr	r6, [pc, #52]	; (184c <prvUnlockQueue+0xa4>)
    1818:	e006      	b.n	1828 <prvUnlockQueue+0x80>
    181a:	3c01      	subs	r4, #1
    181c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    181e:	2c00      	cmp	r4, #0
    1820:	d009      	beq.n	1836 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1822:	693b      	ldr	r3, [r7, #16]
    1824:	2b00      	cmp	r3, #0
    1826:	d006      	beq.n	1836 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1828:	0028      	movs	r0, r5
    182a:	47b0      	blx	r6
    182c:	2800      	cmp	r0, #0
    182e:	d0f4      	beq.n	181a <prvUnlockQueue+0x72>
					vTaskMissedYield();
    1830:	4b07      	ldr	r3, [pc, #28]	; (1850 <prvUnlockQueue+0xa8>)
    1832:	4798      	blx	r3
    1834:	e7f1      	b.n	181a <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    1836:	22ff      	movs	r2, #255	; 0xff
    1838:	2344      	movs	r3, #68	; 0x44
    183a:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <prvUnlockQueue+0xac>)
    183e:	4798      	blx	r3
}
    1840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00001021 	.word	0x00001021
    1848:	00001719 	.word	0x00001719
    184c:	000024c9 	.word	0x000024c9
    1850:	000025d9 	.word	0x000025d9
    1854:	00001039 	.word	0x00001039

00001858 <xQueueGenericReset>:
{
    1858:	b570      	push	{r4, r5, r6, lr}
    185a:	0004      	movs	r4, r0
    185c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    185e:	2800      	cmp	r0, #0
    1860:	d021      	beq.n	18a6 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    1862:	4b17      	ldr	r3, [pc, #92]	; (18c0 <xQueueGenericReset+0x68>)
    1864:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1866:	6822      	ldr	r2, [r4, #0]
    1868:	6c21      	ldr	r1, [r4, #64]	; 0x40
    186a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    186c:	434b      	muls	r3, r1
    186e:	18d0      	adds	r0, r2, r3
    1870:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1872:	2000      	movs	r0, #0
    1874:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1876:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1878:	1a5b      	subs	r3, r3, r1
    187a:	18d3      	adds	r3, r2, r3
    187c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    187e:	23ff      	movs	r3, #255	; 0xff
    1880:	2244      	movs	r2, #68	; 0x44
    1882:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    1884:	3201      	adds	r2, #1
    1886:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    1888:	2d00      	cmp	r5, #0
    188a:	d111      	bne.n	18b0 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    188c:	6923      	ldr	r3, [r4, #16]
    188e:	2b00      	cmp	r3, #0
    1890:	d005      	beq.n	189e <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1892:	0020      	movs	r0, r4
    1894:	3010      	adds	r0, #16
    1896:	4b0b      	ldr	r3, [pc, #44]	; (18c4 <xQueueGenericReset+0x6c>)
    1898:	4798      	blx	r3
    189a:	2800      	cmp	r0, #0
    189c:	d105      	bne.n	18aa <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    189e:	4b0a      	ldr	r3, [pc, #40]	; (18c8 <xQueueGenericReset+0x70>)
    18a0:	4798      	blx	r3
}
    18a2:	2001      	movs	r0, #1
    18a4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    18a6:	b672      	cpsid	i
    18a8:	e7fe      	b.n	18a8 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    18aa:	4b08      	ldr	r3, [pc, #32]	; (18cc <xQueueGenericReset+0x74>)
    18ac:	4798      	blx	r3
    18ae:	e7f6      	b.n	189e <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    18b0:	0020      	movs	r0, r4
    18b2:	3010      	adds	r0, #16
    18b4:	4d06      	ldr	r5, [pc, #24]	; (18d0 <xQueueGenericReset+0x78>)
    18b6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    18b8:	0020      	movs	r0, r4
    18ba:	3024      	adds	r0, #36	; 0x24
    18bc:	47a8      	blx	r5
    18be:	e7ee      	b.n	189e <xQueueGenericReset+0x46>
    18c0:	00001021 	.word	0x00001021
    18c4:	000024c9 	.word	0x000024c9
    18c8:	00001039 	.word	0x00001039
    18cc:	00001009 	.word	0x00001009
    18d0:	000015f5 	.word	0x000015f5

000018d4 <xQueueGenericCreate>:
	{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d6:	0006      	movs	r6, r0
    18d8:	000d      	movs	r5, r1
    18da:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    18dc:	2800      	cmp	r0, #0
    18de:	d101      	bne.n	18e4 <xQueueGenericCreate+0x10>
    18e0:	b672      	cpsid	i
    18e2:	e7fe      	b.n	18e2 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18e4:	0008      	movs	r0, r1
    18e6:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    18e8:	3054      	adds	r0, #84	; 0x54
    18ea:	4b0b      	ldr	r3, [pc, #44]	; (1918 <xQueueGenericCreate+0x44>)
    18ec:	4798      	blx	r3
    18ee:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    18f0:	d010      	beq.n	1914 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    18f2:	2d00      	cmp	r5, #0
    18f4:	d003      	beq.n	18fe <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    18f6:	0003      	movs	r3, r0
    18f8:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    18fa:	6003      	str	r3, [r0, #0]
    18fc:	e000      	b.n	1900 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    18fe:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    1900:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    1902:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1904:	2101      	movs	r1, #1
    1906:	0020      	movs	r0, r4
    1908:	4b04      	ldr	r3, [pc, #16]	; (191c <xQueueGenericCreate+0x48>)
    190a:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    190c:	2350      	movs	r3, #80	; 0x50
    190e:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    1910:	2300      	movs	r3, #0
    1912:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    1914:	0020      	movs	r0, r4
    1916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1918:	000010bd 	.word	0x000010bd
    191c:	00001859 	.word	0x00001859

00001920 <xQueueGenericSend>:
{
    1920:	b5f0      	push	{r4, r5, r6, r7, lr}
    1922:	46ce      	mov	lr, r9
    1924:	4647      	mov	r7, r8
    1926:	b580      	push	{r7, lr}
    1928:	b085      	sub	sp, #20
    192a:	0004      	movs	r4, r0
    192c:	000f      	movs	r7, r1
    192e:	9201      	str	r2, [sp, #4]
    1930:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1932:	2800      	cmp	r0, #0
    1934:	d00c      	beq.n	1950 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1936:	2900      	cmp	r1, #0
    1938:	d00c      	beq.n	1954 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    193a:	2d02      	cmp	r5, #2
    193c:	d00f      	beq.n	195e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    193e:	4b4e      	ldr	r3, [pc, #312]	; (1a78 <xQueueGenericSend+0x158>)
    1940:	4798      	blx	r3
    1942:	2800      	cmp	r0, #0
    1944:	d110      	bne.n	1968 <xQueueGenericSend+0x48>
    1946:	9b01      	ldr	r3, [sp, #4]
    1948:	2b00      	cmp	r3, #0
    194a:	d011      	beq.n	1970 <xQueueGenericSend+0x50>
    194c:	b672      	cpsid	i
    194e:	e7fe      	b.n	194e <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    1950:	b672      	cpsid	i
    1952:	e7fe      	b.n	1952 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1954:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1956:	2b00      	cmp	r3, #0
    1958:	d0ef      	beq.n	193a <xQueueGenericSend+0x1a>
    195a:	b672      	cpsid	i
    195c:	e7fe      	b.n	195c <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    195e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1960:	2b01      	cmp	r3, #1
    1962:	d0ec      	beq.n	193e <xQueueGenericSend+0x1e>
    1964:	b672      	cpsid	i
    1966:	e7fe      	b.n	1966 <xQueueGenericSend+0x46>
    1968:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    196a:	4b44      	ldr	r3, [pc, #272]	; (1a7c <xQueueGenericSend+0x15c>)
    196c:	4698      	mov	r8, r3
    196e:	e04c      	b.n	1a0a <xQueueGenericSend+0xea>
    1970:	2600      	movs	r6, #0
    1972:	e7fa      	b.n	196a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1974:	002a      	movs	r2, r5
    1976:	0039      	movs	r1, r7
    1978:	0020      	movs	r0, r4
    197a:	4b41      	ldr	r3, [pc, #260]	; (1a80 <xQueueGenericSend+0x160>)
    197c:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    197e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1980:	2b00      	cmp	r3, #0
    1982:	d00f      	beq.n	19a4 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1984:	0029      	movs	r1, r5
    1986:	0020      	movs	r0, r4
    1988:	4b3e      	ldr	r3, [pc, #248]	; (1a84 <xQueueGenericSend+0x164>)
    198a:	4798      	blx	r3
    198c:	2800      	cmp	r0, #0
    198e:	d001      	beq.n	1994 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    1990:	4b3d      	ldr	r3, [pc, #244]	; (1a88 <xQueueGenericSend+0x168>)
    1992:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1994:	4b3d      	ldr	r3, [pc, #244]	; (1a8c <xQueueGenericSend+0x16c>)
    1996:	4798      	blx	r3
				return pdPASS;
    1998:	2001      	movs	r0, #1
}
    199a:	b005      	add	sp, #20
    199c:	bc0c      	pop	{r2, r3}
    199e:	4690      	mov	r8, r2
    19a0:	4699      	mov	r9, r3
    19a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    19a6:	2b00      	cmp	r3, #0
    19a8:	d008      	beq.n	19bc <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19aa:	0020      	movs	r0, r4
    19ac:	3024      	adds	r0, #36	; 0x24
    19ae:	4b38      	ldr	r3, [pc, #224]	; (1a90 <xQueueGenericSend+0x170>)
    19b0:	4798      	blx	r3
    19b2:	2800      	cmp	r0, #0
    19b4:	d0ee      	beq.n	1994 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    19b6:	4b34      	ldr	r3, [pc, #208]	; (1a88 <xQueueGenericSend+0x168>)
    19b8:	4798      	blx	r3
    19ba:	e7eb      	b.n	1994 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    19bc:	2800      	cmp	r0, #0
    19be:	d0e9      	beq.n	1994 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    19c0:	4b31      	ldr	r3, [pc, #196]	; (1a88 <xQueueGenericSend+0x168>)
    19c2:	4798      	blx	r3
    19c4:	e7e6      	b.n	1994 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    19c6:	4b31      	ldr	r3, [pc, #196]	; (1a8c <xQueueGenericSend+0x16c>)
    19c8:	4798      	blx	r3
					return errQUEUE_FULL;
    19ca:	2000      	movs	r0, #0
    19cc:	e7e5      	b.n	199a <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    19ce:	4b2f      	ldr	r3, [pc, #188]	; (1a8c <xQueueGenericSend+0x16c>)
    19d0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    19d2:	a901      	add	r1, sp, #4
    19d4:	a802      	add	r0, sp, #8
    19d6:	4b2f      	ldr	r3, [pc, #188]	; (1a94 <xQueueGenericSend+0x174>)
    19d8:	4798      	blx	r3
    19da:	2800      	cmp	r0, #0
    19dc:	d144      	bne.n	1a68 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    19de:	4b27      	ldr	r3, [pc, #156]	; (1a7c <xQueueGenericSend+0x15c>)
    19e0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    19e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    19e4:	4699      	mov	r9, r3
    19e6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    19e8:	4b28      	ldr	r3, [pc, #160]	; (1a8c <xQueueGenericSend+0x16c>)
    19ea:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    19ec:	45b1      	cmp	r9, r6
    19ee:	d135      	bne.n	1a5c <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    19f0:	0020      	movs	r0, r4
    19f2:	3010      	adds	r0, #16
    19f4:	9901      	ldr	r1, [sp, #4]
    19f6:	4b28      	ldr	r3, [pc, #160]	; (1a98 <xQueueGenericSend+0x178>)
    19f8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    19fa:	0020      	movs	r0, r4
    19fc:	4b27      	ldr	r3, [pc, #156]	; (1a9c <xQueueGenericSend+0x17c>)
    19fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1a00:	4b27      	ldr	r3, [pc, #156]	; (1aa0 <xQueueGenericSend+0x180>)
    1a02:	4798      	blx	r3
    1a04:	2800      	cmp	r0, #0
    1a06:	d026      	beq.n	1a56 <xQueueGenericSend+0x136>
    1a08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    1a0a:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1a0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1a10:	4293      	cmp	r3, r2
    1a12:	d3af      	bcc.n	1974 <xQueueGenericSend+0x54>
    1a14:	2d02      	cmp	r5, #2
    1a16:	d0ad      	beq.n	1974 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    1a18:	9b01      	ldr	r3, [sp, #4]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d0d3      	beq.n	19c6 <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    1a1e:	2e00      	cmp	r6, #0
    1a20:	d102      	bne.n	1a28 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1a22:	a802      	add	r0, sp, #8
    1a24:	4b1f      	ldr	r3, [pc, #124]	; (1aa4 <xQueueGenericSend+0x184>)
    1a26:	4798      	blx	r3
		taskEXIT_CRITICAL();
    1a28:	4b18      	ldr	r3, [pc, #96]	; (1a8c <xQueueGenericSend+0x16c>)
    1a2a:	4798      	blx	r3
		vTaskSuspendAll();
    1a2c:	4b1e      	ldr	r3, [pc, #120]	; (1aa8 <xQueueGenericSend+0x188>)
    1a2e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1a30:	4b12      	ldr	r3, [pc, #72]	; (1a7c <xQueueGenericSend+0x15c>)
    1a32:	4798      	blx	r3
    1a34:	2344      	movs	r3, #68	; 0x44
    1a36:	5ce3      	ldrb	r3, [r4, r3]
    1a38:	b25b      	sxtb	r3, r3
    1a3a:	3301      	adds	r3, #1
    1a3c:	d102      	bne.n	1a44 <xQueueGenericSend+0x124>
    1a3e:	2200      	movs	r2, #0
    1a40:	2344      	movs	r3, #68	; 0x44
    1a42:	54e2      	strb	r2, [r4, r3]
    1a44:	2345      	movs	r3, #69	; 0x45
    1a46:	5ce3      	ldrb	r3, [r4, r3]
    1a48:	b25b      	sxtb	r3, r3
    1a4a:	3301      	adds	r3, #1
    1a4c:	d1bf      	bne.n	19ce <xQueueGenericSend+0xae>
    1a4e:	2200      	movs	r2, #0
    1a50:	2345      	movs	r3, #69	; 0x45
    1a52:	54e2      	strb	r2, [r4, r3]
    1a54:	e7bb      	b.n	19ce <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    1a56:	4b0c      	ldr	r3, [pc, #48]	; (1a88 <xQueueGenericSend+0x168>)
    1a58:	4798      	blx	r3
    1a5a:	e7d5      	b.n	1a08 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    1a5c:	0020      	movs	r0, r4
    1a5e:	4b0f      	ldr	r3, [pc, #60]	; (1a9c <xQueueGenericSend+0x17c>)
    1a60:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1a62:	4b0f      	ldr	r3, [pc, #60]	; (1aa0 <xQueueGenericSend+0x180>)
    1a64:	4798      	blx	r3
    1a66:	e7cf      	b.n	1a08 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    1a68:	0020      	movs	r0, r4
    1a6a:	4b0c      	ldr	r3, [pc, #48]	; (1a9c <xQueueGenericSend+0x17c>)
    1a6c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1a6e:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <xQueueGenericSend+0x180>)
    1a70:	4798      	blx	r3
			return errQUEUE_FULL;
    1a72:	2000      	movs	r0, #0
    1a74:	e791      	b.n	199a <xQueueGenericSend+0x7a>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	000025e5 	.word	0x000025e5
    1a7c:	00001021 	.word	0x00001021
    1a80:	0000169d 	.word	0x0000169d
    1a84:	00001719 	.word	0x00001719
    1a88:	00001009 	.word	0x00001009
    1a8c:	00001039 	.word	0x00001039
    1a90:	000024c9 	.word	0x000024c9
    1a94:	00002569 	.word	0x00002569
    1a98:	00002465 	.word	0x00002465
    1a9c:	000017a9 	.word	0x000017a9
    1aa0:	00002251 	.word	0x00002251
    1aa4:	00002551 	.word	0x00002551
    1aa8:	000020fd 	.word	0x000020fd

00001aac <xQueueGenericSendFromISR>:
{
    1aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aae:	b083      	sub	sp, #12
    1ab0:	0004      	movs	r4, r0
    1ab2:	9101      	str	r1, [sp, #4]
    1ab4:	0016      	movs	r6, r2
    1ab6:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    1ab8:	2800      	cmp	r0, #0
    1aba:	d012      	beq.n	1ae2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1abc:	9b01      	ldr	r3, [sp, #4]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d011      	beq.n	1ae6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1ac2:	2d02      	cmp	r5, #2
    1ac4:	d014      	beq.n	1af0 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ac6:	4b28      	ldr	r3, [pc, #160]	; (1b68 <xQueueGenericSendFromISR+0xbc>)
    1ac8:	4798      	blx	r3
    1aca:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1ace:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1ad0:	429a      	cmp	r2, r3
    1ad2:	d82f      	bhi.n	1b34 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    1ad4:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1ad6:	9800      	ldr	r0, [sp, #0]
    1ad8:	4b24      	ldr	r3, [pc, #144]	; (1b6c <xQueueGenericSendFromISR+0xc0>)
    1ada:	4798      	blx	r3
}
    1adc:	0028      	movs	r0, r5
    1ade:	b003      	add	sp, #12
    1ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    1ae2:	b672      	cpsid	i
    1ae4:	e7fe      	b.n	1ae4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1ae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d0ea      	beq.n	1ac2 <xQueueGenericSendFromISR+0x16>
    1aec:	b672      	cpsid	i
    1aee:	e7fe      	b.n	1aee <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1af0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1af2:	2b01      	cmp	r3, #1
    1af4:	d01a      	beq.n	1b2c <xQueueGenericSendFromISR+0x80>
    1af6:	b672      	cpsid	i
    1af8:	e7fe      	b.n	1af8 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    1afc:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1afe:	2b00      	cmp	r3, #0
    1b00:	d0e9      	beq.n	1ad6 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1b02:	0020      	movs	r0, r4
    1b04:	3024      	adds	r0, #36	; 0x24
    1b06:	4b1a      	ldr	r3, [pc, #104]	; (1b70 <xQueueGenericSendFromISR+0xc4>)
    1b08:	4798      	blx	r3
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0e3      	beq.n	1ad6 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    1b0e:	2e00      	cmp	r6, #0
    1b10:	d00a      	beq.n	1b28 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    1b12:	2301      	movs	r3, #1
    1b14:	6033      	str	r3, [r6, #0]
    1b16:	e7de      	b.n	1ad6 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1b18:	1c7b      	adds	r3, r7, #1
    1b1a:	b25b      	sxtb	r3, r3
    1b1c:	2245      	movs	r2, #69	; 0x45
    1b1e:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    1b20:	2501      	movs	r5, #1
    1b22:	e7d8      	b.n	1ad6 <xQueueGenericSendFromISR+0x2a>
    1b24:	2501      	movs	r5, #1
    1b26:	e7d6      	b.n	1ad6 <xQueueGenericSendFromISR+0x2a>
    1b28:	2501      	movs	r5, #1
    1b2a:	e7d4      	b.n	1ad6 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1b2c:	4b0e      	ldr	r3, [pc, #56]	; (1b68 <xQueueGenericSendFromISR+0xbc>)
    1b2e:	4798      	blx	r3
    1b30:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1b32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    1b34:	2345      	movs	r3, #69	; 0x45
    1b36:	5ce7      	ldrb	r7, [r4, r3]
    1b38:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b3a:	002a      	movs	r2, r5
    1b3c:	9901      	ldr	r1, [sp, #4]
    1b3e:	0020      	movs	r0, r4
    1b40:	4b0c      	ldr	r3, [pc, #48]	; (1b74 <xQueueGenericSendFromISR+0xc8>)
    1b42:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    1b44:	1c7b      	adds	r3, r7, #1
    1b46:	d1e7      	bne.n	1b18 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    1b48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d0d5      	beq.n	1afa <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1b4e:	0029      	movs	r1, r5
    1b50:	0020      	movs	r0, r4
    1b52:	4b09      	ldr	r3, [pc, #36]	; (1b78 <xQueueGenericSendFromISR+0xcc>)
    1b54:	4798      	blx	r3
			xReturn = pdPASS;
    1b56:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    1b58:	2800      	cmp	r0, #0
    1b5a:	d0bc      	beq.n	1ad6 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    1b5c:	2e00      	cmp	r6, #0
    1b5e:	d0e1      	beq.n	1b24 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    1b60:	2301      	movs	r3, #1
    1b62:	6033      	str	r3, [r6, #0]
    1b64:	e7b7      	b.n	1ad6 <xQueueGenericSendFromISR+0x2a>
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	00001059 	.word	0x00001059
    1b6c:	00001061 	.word	0x00001061
    1b70:	000024c9 	.word	0x000024c9
    1b74:	0000169d 	.word	0x0000169d
    1b78:	00001719 	.word	0x00001719

00001b7c <xQueueReceive>:
{
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	46c6      	mov	lr, r8
    1b80:	b500      	push	{lr}
    1b82:	b084      	sub	sp, #16
    1b84:	0004      	movs	r4, r0
    1b86:	000f      	movs	r7, r1
    1b88:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d00a      	beq.n	1ba4 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1b8e:	2900      	cmp	r1, #0
    1b90:	d00a      	beq.n	1ba8 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1b92:	4b42      	ldr	r3, [pc, #264]	; (1c9c <xQueueReceive+0x120>)
    1b94:	4798      	blx	r3
    1b96:	2800      	cmp	r0, #0
    1b98:	d10b      	bne.n	1bb2 <xQueueReceive+0x36>
    1b9a:	9b01      	ldr	r3, [sp, #4]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d00c      	beq.n	1bba <xQueueReceive+0x3e>
    1ba0:	b672      	cpsid	i
    1ba2:	e7fe      	b.n	1ba2 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    1ba4:	b672      	cpsid	i
    1ba6:	e7fe      	b.n	1ba6 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1ba8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1baa:	2b00      	cmp	r3, #0
    1bac:	d0f1      	beq.n	1b92 <xQueueReceive+0x16>
    1bae:	b672      	cpsid	i
    1bb0:	e7fe      	b.n	1bb0 <xQueueReceive+0x34>
    1bb2:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    1bb4:	4b3a      	ldr	r3, [pc, #232]	; (1ca0 <xQueueReceive+0x124>)
    1bb6:	4698      	mov	r8, r3
    1bb8:	e02f      	b.n	1c1a <xQueueReceive+0x9e>
    1bba:	2600      	movs	r6, #0
    1bbc:	e7fa      	b.n	1bb4 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1bbe:	0039      	movs	r1, r7
    1bc0:	0020      	movs	r0, r4
    1bc2:	4b38      	ldr	r3, [pc, #224]	; (1ca4 <xQueueReceive+0x128>)
    1bc4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1bc6:	3d01      	subs	r5, #1
    1bc8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1bca:	6923      	ldr	r3, [r4, #16]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d007      	beq.n	1be0 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1bd0:	0020      	movs	r0, r4
    1bd2:	3010      	adds	r0, #16
    1bd4:	4b34      	ldr	r3, [pc, #208]	; (1ca8 <xQueueReceive+0x12c>)
    1bd6:	4798      	blx	r3
    1bd8:	2800      	cmp	r0, #0
    1bda:	d001      	beq.n	1be0 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    1bdc:	4b33      	ldr	r3, [pc, #204]	; (1cac <xQueueReceive+0x130>)
    1bde:	4798      	blx	r3
				taskEXIT_CRITICAL();
    1be0:	4b33      	ldr	r3, [pc, #204]	; (1cb0 <xQueueReceive+0x134>)
    1be2:	4798      	blx	r3
				return pdPASS;
    1be4:	2001      	movs	r0, #1
}
    1be6:	b004      	add	sp, #16
    1be8:	bc04      	pop	{r2}
    1bea:	4690      	mov	r8, r2
    1bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    1bee:	4b30      	ldr	r3, [pc, #192]	; (1cb0 <xQueueReceive+0x134>)
    1bf0:	4798      	blx	r3
					return errQUEUE_EMPTY;
    1bf2:	2000      	movs	r0, #0
    1bf4:	e7f7      	b.n	1be6 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    1bf6:	a802      	add	r0, sp, #8
    1bf8:	4b2e      	ldr	r3, [pc, #184]	; (1cb4 <xQueueReceive+0x138>)
    1bfa:	4798      	blx	r3
    1bfc:	e016      	b.n	1c2c <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    1bfe:	2200      	movs	r2, #0
    1c00:	2344      	movs	r3, #68	; 0x44
    1c02:	54e2      	strb	r2, [r4, r3]
    1c04:	e01d      	b.n	1c42 <xQueueReceive+0xc6>
    1c06:	2200      	movs	r2, #0
    1c08:	2345      	movs	r3, #69	; 0x45
    1c0a:	54e2      	strb	r2, [r4, r3]
    1c0c:	e01e      	b.n	1c4c <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    1c0e:	0020      	movs	r0, r4
    1c10:	4b29      	ldr	r3, [pc, #164]	; (1cb8 <xQueueReceive+0x13c>)
    1c12:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1c14:	4b29      	ldr	r3, [pc, #164]	; (1cbc <xQueueReceive+0x140>)
    1c16:	4798      	blx	r3
    1c18:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    1c1a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1c1c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1c1e:	2d00      	cmp	r5, #0
    1c20:	d1cd      	bne.n	1bbe <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    1c22:	9b01      	ldr	r3, [sp, #4]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d0e2      	beq.n	1bee <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    1c28:	2e00      	cmp	r6, #0
    1c2a:	d0e4      	beq.n	1bf6 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    1c2c:	4b20      	ldr	r3, [pc, #128]	; (1cb0 <xQueueReceive+0x134>)
    1c2e:	4798      	blx	r3
		vTaskSuspendAll();
    1c30:	4b23      	ldr	r3, [pc, #140]	; (1cc0 <xQueueReceive+0x144>)
    1c32:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1c34:	4b1a      	ldr	r3, [pc, #104]	; (1ca0 <xQueueReceive+0x124>)
    1c36:	4798      	blx	r3
    1c38:	2344      	movs	r3, #68	; 0x44
    1c3a:	5ce3      	ldrb	r3, [r4, r3]
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	3301      	adds	r3, #1
    1c40:	d0dd      	beq.n	1bfe <xQueueReceive+0x82>
    1c42:	2345      	movs	r3, #69	; 0x45
    1c44:	5ce3      	ldrb	r3, [r4, r3]
    1c46:	b25b      	sxtb	r3, r3
    1c48:	3301      	adds	r3, #1
    1c4a:	d0dc      	beq.n	1c06 <xQueueReceive+0x8a>
    1c4c:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <xQueueReceive+0x134>)
    1c4e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c50:	a901      	add	r1, sp, #4
    1c52:	a802      	add	r0, sp, #8
    1c54:	4b1b      	ldr	r3, [pc, #108]	; (1cc4 <xQueueReceive+0x148>)
    1c56:	4798      	blx	r3
    1c58:	2800      	cmp	r0, #0
    1c5a:	d113      	bne.n	1c84 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c5c:	0020      	movs	r0, r4
    1c5e:	4b1a      	ldr	r3, [pc, #104]	; (1cc8 <xQueueReceive+0x14c>)
    1c60:	4798      	blx	r3
    1c62:	2800      	cmp	r0, #0
    1c64:	d0d3      	beq.n	1c0e <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1c66:	0020      	movs	r0, r4
    1c68:	3024      	adds	r0, #36	; 0x24
    1c6a:	9901      	ldr	r1, [sp, #4]
    1c6c:	4b17      	ldr	r3, [pc, #92]	; (1ccc <xQueueReceive+0x150>)
    1c6e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1c70:	0020      	movs	r0, r4
    1c72:	4b11      	ldr	r3, [pc, #68]	; (1cb8 <xQueueReceive+0x13c>)
    1c74:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1c76:	4b11      	ldr	r3, [pc, #68]	; (1cbc <xQueueReceive+0x140>)
    1c78:	4798      	blx	r3
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d1cc      	bne.n	1c18 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    1c7e:	4b0b      	ldr	r3, [pc, #44]	; (1cac <xQueueReceive+0x130>)
    1c80:	4798      	blx	r3
    1c82:	e7c9      	b.n	1c18 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    1c84:	0020      	movs	r0, r4
    1c86:	4b0c      	ldr	r3, [pc, #48]	; (1cb8 <xQueueReceive+0x13c>)
    1c88:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1c8a:	4b0c      	ldr	r3, [pc, #48]	; (1cbc <xQueueReceive+0x140>)
    1c8c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1c8e:	0020      	movs	r0, r4
    1c90:	4b0d      	ldr	r3, [pc, #52]	; (1cc8 <xQueueReceive+0x14c>)
    1c92:	4798      	blx	r3
    1c94:	2800      	cmp	r0, #0
    1c96:	d0bf      	beq.n	1c18 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    1c98:	2000      	movs	r0, #0
    1c9a:	e7a4      	b.n	1be6 <xQueueReceive+0x6a>
    1c9c:	000025e5 	.word	0x000025e5
    1ca0:	00001021 	.word	0x00001021
    1ca4:	00001781 	.word	0x00001781
    1ca8:	000024c9 	.word	0x000024c9
    1cac:	00001009 	.word	0x00001009
    1cb0:	00001039 	.word	0x00001039
    1cb4:	00002551 	.word	0x00002551
    1cb8:	000017a9 	.word	0x000017a9
    1cbc:	00002251 	.word	0x00002251
    1cc0:	000020fd 	.word	0x000020fd
    1cc4:	00002569 	.word	0x00002569
    1cc8:	00001681 	.word	0x00001681
    1ccc:	00002465 	.word	0x00002465

00001cd0 <vQueueAddToRegistry>:
	{
    1cd0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    1cd2:	4b0a      	ldr	r3, [pc, #40]	; (1cfc <vQueueAddToRegistry+0x2c>)
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d009      	beq.n	1cee <vQueueAddToRegistry+0x1e>
    1cda:	2301      	movs	r3, #1
    1cdc:	4c07      	ldr	r4, [pc, #28]	; (1cfc <vQueueAddToRegistry+0x2c>)
    1cde:	00da      	lsls	r2, r3, #3
    1ce0:	58a2      	ldr	r2, [r4, r2]
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	d004      	beq.n	1cf0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1ce6:	3301      	adds	r3, #1
    1ce8:	2b08      	cmp	r3, #8
    1cea:	d1f8      	bne.n	1cde <vQueueAddToRegistry+0xe>
	}
    1cec:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1cee:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    1cf0:	4a02      	ldr	r2, [pc, #8]	; (1cfc <vQueueAddToRegistry+0x2c>)
    1cf2:	00db      	lsls	r3, r3, #3
    1cf4:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
    1cf6:	18d3      	adds	r3, r2, r3
    1cf8:	6058      	str	r0, [r3, #4]
				break;
    1cfa:	e7f7      	b.n	1cec <vQueueAddToRegistry+0x1c>
    1cfc:	20005074 	.word	0x20005074

00001d00 <vQueueWaitForMessageRestricted>:
	{
    1d00:	b570      	push	{r4, r5, r6, lr}
    1d02:	0004      	movs	r4, r0
    1d04:	000d      	movs	r5, r1
    1d06:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    1d08:	4b11      	ldr	r3, [pc, #68]	; (1d50 <vQueueWaitForMessageRestricted+0x50>)
    1d0a:	4798      	blx	r3
    1d0c:	2344      	movs	r3, #68	; 0x44
    1d0e:	5ce3      	ldrb	r3, [r4, r3]
    1d10:	b25b      	sxtb	r3, r3
    1d12:	3301      	adds	r3, #1
    1d14:	d00d      	beq.n	1d32 <vQueueWaitForMessageRestricted+0x32>
    1d16:	2345      	movs	r3, #69	; 0x45
    1d18:	5ce3      	ldrb	r3, [r4, r3]
    1d1a:	b25b      	sxtb	r3, r3
    1d1c:	3301      	adds	r3, #1
    1d1e:	d00c      	beq.n	1d3a <vQueueWaitForMessageRestricted+0x3a>
    1d20:	4b0c      	ldr	r3, [pc, #48]	; (1d54 <vQueueWaitForMessageRestricted+0x54>)
    1d22:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d26:	2b00      	cmp	r3, #0
    1d28:	d00b      	beq.n	1d42 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    1d2a:	0020      	movs	r0, r4
    1d2c:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <vQueueWaitForMessageRestricted+0x58>)
    1d2e:	4798      	blx	r3
	}
    1d30:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    1d32:	2200      	movs	r2, #0
    1d34:	2344      	movs	r3, #68	; 0x44
    1d36:	54e2      	strb	r2, [r4, r3]
    1d38:	e7ed      	b.n	1d16 <vQueueWaitForMessageRestricted+0x16>
    1d3a:	2200      	movs	r2, #0
    1d3c:	2345      	movs	r3, #69	; 0x45
    1d3e:	54e2      	strb	r2, [r4, r3]
    1d40:	e7ee      	b.n	1d20 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1d42:	0020      	movs	r0, r4
    1d44:	3024      	adds	r0, #36	; 0x24
    1d46:	0032      	movs	r2, r6
    1d48:	0029      	movs	r1, r5
    1d4a:	4b04      	ldr	r3, [pc, #16]	; (1d5c <vQueueWaitForMessageRestricted+0x5c>)
    1d4c:	4798      	blx	r3
    1d4e:	e7ec      	b.n	1d2a <vQueueWaitForMessageRestricted+0x2a>
    1d50:	00001021 	.word	0x00001021
    1d54:	00001039 	.word	0x00001039
    1d58:	000017a9 	.word	0x000017a9
    1d5c:	00002491 	.word	0x00002491

00001d60 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1d60:	4b08      	ldr	r3, [pc, #32]	; (1d84 <prvResetNextTaskUnblockTime+0x24>)
    1d62:	681b      	ldr	r3, [r3, #0]
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d007      	beq.n	1d7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1d6a:	4b06      	ldr	r3, [pc, #24]	; (1d84 <prvResetNextTaskUnblockTime+0x24>)
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1d70:	68db      	ldr	r3, [r3, #12]
    1d72:	685a      	ldr	r2, [r3, #4]
    1d74:	4b04      	ldr	r3, [pc, #16]	; (1d88 <prvResetNextTaskUnblockTime+0x28>)
    1d76:	601a      	str	r2, [r3, #0]
	}
}
    1d78:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    1d7a:	2201      	movs	r2, #1
    1d7c:	4252      	negs	r2, r2
    1d7e:	4b02      	ldr	r3, [pc, #8]	; (1d88 <prvResetNextTaskUnblockTime+0x28>)
    1d80:	601a      	str	r2, [r3, #0]
    1d82:	e7f9      	b.n	1d78 <prvResetNextTaskUnblockTime+0x18>
    1d84:	20004ef4 	.word	0x20004ef4
    1d88:	20004fa4 	.word	0x20004fa4

00001d8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	0004      	movs	r4, r0
    1d90:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1d92:	4b17      	ldr	r3, [pc, #92]	; (1df0 <prvAddCurrentTaskToDelayedList+0x64>)
    1d94:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1d96:	4b17      	ldr	r3, [pc, #92]	; (1df4 <prvAddCurrentTaskToDelayedList+0x68>)
    1d98:	6818      	ldr	r0, [r3, #0]
    1d9a:	3004      	adds	r0, #4
    1d9c:	4b16      	ldr	r3, [pc, #88]	; (1df8 <prvAddCurrentTaskToDelayedList+0x6c>)
    1d9e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1da0:	1c63      	adds	r3, r4, #1
    1da2:	d013      	beq.n	1dcc <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1da4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1da6:	4b13      	ldr	r3, [pc, #76]	; (1df4 <prvAddCurrentTaskToDelayedList+0x68>)
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    1dac:	42a6      	cmp	r6, r4
    1dae:	d816      	bhi.n	1dde <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1db0:	4b12      	ldr	r3, [pc, #72]	; (1dfc <prvAddCurrentTaskToDelayedList+0x70>)
    1db2:	6818      	ldr	r0, [r3, #0]
    1db4:	4b0f      	ldr	r3, [pc, #60]	; (1df4 <prvAddCurrentTaskToDelayedList+0x68>)
    1db6:	6819      	ldr	r1, [r3, #0]
    1db8:	3104      	adds	r1, #4
    1dba:	4b11      	ldr	r3, [pc, #68]	; (1e00 <prvAddCurrentTaskToDelayedList+0x74>)
    1dbc:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    1dbe:	4b11      	ldr	r3, [pc, #68]	; (1e04 <prvAddCurrentTaskToDelayedList+0x78>)
    1dc0:	681b      	ldr	r3, [r3, #0]
    1dc2:	429c      	cmp	r4, r3
    1dc4:	d212      	bcs.n	1dec <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    1dc6:	4b0f      	ldr	r3, [pc, #60]	; (1e04 <prvAddCurrentTaskToDelayedList+0x78>)
    1dc8:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1dca:	e00f      	b.n	1dec <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1dcc:	2d00      	cmp	r5, #0
    1dce:	d0e9      	beq.n	1da4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1dd0:	4b08      	ldr	r3, [pc, #32]	; (1df4 <prvAddCurrentTaskToDelayedList+0x68>)
    1dd2:	6819      	ldr	r1, [r3, #0]
    1dd4:	3104      	adds	r1, #4
    1dd6:	480c      	ldr	r0, [pc, #48]	; (1e08 <prvAddCurrentTaskToDelayedList+0x7c>)
    1dd8:	4b0c      	ldr	r3, [pc, #48]	; (1e0c <prvAddCurrentTaskToDelayedList+0x80>)
    1dda:	4798      	blx	r3
    1ddc:	e006      	b.n	1dec <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1dde:	4b0c      	ldr	r3, [pc, #48]	; (1e10 <prvAddCurrentTaskToDelayedList+0x84>)
    1de0:	6818      	ldr	r0, [r3, #0]
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <prvAddCurrentTaskToDelayedList+0x68>)
    1de4:	6819      	ldr	r1, [r3, #0]
    1de6:	3104      	adds	r1, #4
    1de8:	4b05      	ldr	r3, [pc, #20]	; (1e00 <prvAddCurrentTaskToDelayedList+0x74>)
    1dea:	4798      	blx	r3
}
    1dec:	bd70      	pop	{r4, r5, r6, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	20004fec 	.word	0x20004fec
    1df4:	20004ef0 	.word	0x20004ef0
    1df8:	00001657 	.word	0x00001657
    1dfc:	20004ef4 	.word	0x20004ef4
    1e00:	00001629 	.word	0x00001629
    1e04:	20004fa4 	.word	0x20004fa4
    1e08:	20004fc4 	.word	0x20004fc4
    1e0c:	00001611 	.word	0x00001611
    1e10:	20004ef8 	.word	0x20004ef8

00001e14 <prvIdleTask>:
{
    1e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e16:	46d6      	mov	lr, sl
    1e18:	464f      	mov	r7, r9
    1e1a:	4646      	mov	r6, r8
    1e1c:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1e1e:	4b16      	ldr	r3, [pc, #88]	; (1e78 <prvIdleTask+0x64>)
    1e20:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    1e22:	4b16      	ldr	r3, [pc, #88]	; (1e7c <prvIdleTask+0x68>)
    1e24:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1e26:	4f16      	ldr	r7, [pc, #88]	; (1e80 <prvIdleTask+0x6c>)
    1e28:	e001      	b.n	1e2e <prvIdleTask+0x1a>
			vApplicationIdleHook();
    1e2a:	4b16      	ldr	r3, [pc, #88]	; (1e84 <prvIdleTask+0x70>)
    1e2c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1e2e:	464b      	mov	r3, r9
    1e30:	681b      	ldr	r3, [r3, #0]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d018      	beq.n	1e68 <prvIdleTask+0x54>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e36:	4b14      	ldr	r3, [pc, #80]	; (1e88 <prvIdleTask+0x74>)
    1e38:	469a      	mov	sl, r3
			taskENTER_CRITICAL();
    1e3a:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1e3c:	68fb      	ldr	r3, [r7, #12]
    1e3e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e40:	1d28      	adds	r0, r5, #4
    1e42:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    1e44:	4a11      	ldr	r2, [pc, #68]	; (1e8c <prvIdleTask+0x78>)
    1e46:	6813      	ldr	r3, [r2, #0]
    1e48:	3b01      	subs	r3, #1
    1e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    1e4c:	4c0a      	ldr	r4, [pc, #40]	; (1e78 <prvIdleTask+0x64>)
    1e4e:	6823      	ldr	r3, [r4, #0]
    1e50:	3b01      	subs	r3, #1
    1e52:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    1e54:	4b0e      	ldr	r3, [pc, #56]	; (1e90 <prvIdleTask+0x7c>)
    1e56:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    1e58:	6b28      	ldr	r0, [r5, #48]	; 0x30
    1e5a:	4e0e      	ldr	r6, [pc, #56]	; (1e94 <prvIdleTask+0x80>)
    1e5c:	47b0      	blx	r6
			vPortFree( pxTCB );
    1e5e:	0028      	movs	r0, r5
    1e60:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1e62:	6823      	ldr	r3, [r4, #0]
    1e64:	2b00      	cmp	r3, #0
    1e66:	d1e8      	bne.n	1e3a <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1e68:	4b0b      	ldr	r3, [pc, #44]	; (1e98 <prvIdleTask+0x84>)
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	2b01      	cmp	r3, #1
    1e6e:	d9dc      	bls.n	1e2a <prvIdleTask+0x16>
				taskYIELD();
    1e70:	4b0a      	ldr	r3, [pc, #40]	; (1e9c <prvIdleTask+0x88>)
    1e72:	4798      	blx	r3
    1e74:	e7d9      	b.n	1e2a <prvIdleTask+0x16>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	20004f64 	.word	0x20004f64
    1e7c:	00001021 	.word	0x00001021
    1e80:	20004fd8 	.word	0x20004fd8
    1e84:	00003a71 	.word	0x00003a71
    1e88:	00001657 	.word	0x00001657
    1e8c:	20004f60 	.word	0x20004f60
    1e90:	00001039 	.word	0x00001039
    1e94:	000011e9 	.word	0x000011e9
    1e98:	20004efc 	.word	0x20004efc
    1e9c:	00001009 	.word	0x00001009

00001ea0 <xTaskCreate>:
	{
    1ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea2:	46c6      	mov	lr, r8
    1ea4:	b500      	push	{lr}
    1ea6:	b084      	sub	sp, #16
    1ea8:	9001      	str	r0, [sp, #4]
    1eaa:	000d      	movs	r5, r1
    1eac:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1eae:	0097      	lsls	r7, r2, #2
    1eb0:	0038      	movs	r0, r7
    1eb2:	4b5f      	ldr	r3, [pc, #380]	; (2030 <STACK_SIZE+0x30>)
    1eb4:	4798      	blx	r3
    1eb6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    1eb8:	d100      	bne.n	1ebc <xTaskCreate+0x1c>
    1eba:	e089      	b.n	1fd0 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1ebc:	2058      	movs	r0, #88	; 0x58
    1ebe:	4b5c      	ldr	r3, [pc, #368]	; (2030 <STACK_SIZE+0x30>)
    1ec0:	4798      	blx	r3
    1ec2:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    1ec4:	d100      	bne.n	1ec8 <xTaskCreate+0x28>
    1ec6:	e080      	b.n	1fca <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
    1ec8:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1eca:	003a      	movs	r2, r7
    1ecc:	21a5      	movs	r1, #165	; 0xa5
    1ece:	0030      	movs	r0, r6
    1ed0:	4b58      	ldr	r3, [pc, #352]	; (2034 <STACK_SIZE+0x34>)
    1ed2:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1ed4:	1f3a      	subs	r2, r7, #4
    1ed6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1ed8:	469c      	mov	ip, r3
    1eda:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1edc:	2307      	movs	r3, #7
    1ede:	439a      	bics	r2, r3
    1ee0:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1ee2:	782a      	ldrb	r2, [r5, #0]
    1ee4:	332d      	adds	r3, #45	; 0x2d
    1ee6:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    1ee8:	782b      	ldrb	r3, [r5, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d00d      	beq.n	1f0a <xTaskCreate+0x6a>
    1eee:	3501      	adds	r5, #1
    1ef0:	0023      	movs	r3, r4
    1ef2:	3335      	adds	r3, #53	; 0x35
    1ef4:	0020      	movs	r0, r4
    1ef6:	303e      	adds	r0, #62	; 0x3e
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1ef8:	782a      	ldrb	r2, [r5, #0]
    1efa:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    1efc:	782a      	ldrb	r2, [r5, #0]
    1efe:	2a00      	cmp	r2, #0
    1f00:	d003      	beq.n	1f0a <xTaskCreate+0x6a>
    1f02:	3501      	adds	r5, #1
    1f04:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1f06:	4283      	cmp	r3, r0
    1f08:	d1f6      	bne.n	1ef8 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1f0a:	2200      	movs	r2, #0
    1f0c:	233d      	movs	r3, #61	; 0x3d
    1f0e:	54e2      	strb	r2, [r4, r3]
    1f10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    1f12:	2f04      	cmp	r7, #4
    1f14:	d900      	bls.n	1f18 <xTaskCreate+0x78>
    1f16:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    1f18:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    1f1a:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    1f1c:	2600      	movs	r6, #0
    1f1e:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1f20:	1d23      	adds	r3, r4, #4
    1f22:	9303      	str	r3, [sp, #12]
    1f24:	0018      	movs	r0, r3
    1f26:	4d44      	ldr	r5, [pc, #272]	; (2038 <STACK_SIZE+0x38>)
    1f28:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1f2a:	0020      	movs	r0, r4
    1f2c:	3018      	adds	r0, #24
    1f2e:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1f30:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f32:	2305      	movs	r3, #5
    1f34:	1bdb      	subs	r3, r3, r7
    1f36:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1f38:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    1f3a:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1f3c:	2354      	movs	r3, #84	; 0x54
    1f3e:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f40:	9a02      	ldr	r2, [sp, #8]
    1f42:	9901      	ldr	r1, [sp, #4]
    1f44:	4640      	mov	r0, r8
    1f46:	4b3d      	ldr	r3, [pc, #244]	; (203c <STACK_SIZE+0x3c>)
    1f48:	4798      	blx	r3
    1f4a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d000      	beq.n	1f54 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1f52:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    1f54:	4b3a      	ldr	r3, [pc, #232]	; (2040 <STACK_SIZE+0x40>)
    1f56:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    1f58:	4a3a      	ldr	r2, [pc, #232]	; (2044 <STACK_SIZE+0x44>)
    1f5a:	6813      	ldr	r3, [r2, #0]
    1f5c:	3301      	adds	r3, #1
    1f5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1f60:	4b39      	ldr	r3, [pc, #228]	; (2048 <STACK_SIZE+0x48>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d036      	beq.n	1fd6 <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    1f68:	4b38      	ldr	r3, [pc, #224]	; (204c <STACK_SIZE+0x4c>)
    1f6a:	681b      	ldr	r3, [r3, #0]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d107      	bne.n	1f80 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1f70:	4b35      	ldr	r3, [pc, #212]	; (2048 <STACK_SIZE+0x48>)
    1f72:	681b      	ldr	r3, [r3, #0]
    1f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1f78:	4293      	cmp	r3, r2
    1f7a:	d801      	bhi.n	1f80 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    1f7c:	4b32      	ldr	r3, [pc, #200]	; (2048 <STACK_SIZE+0x48>)
    1f7e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    1f80:	4a33      	ldr	r2, [pc, #204]	; (2050 <STACK_SIZE+0x50>)
    1f82:	6813      	ldr	r3, [r2, #0]
    1f84:	3301      	adds	r3, #1
    1f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1f88:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
    1f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f8c:	4a31      	ldr	r2, [pc, #196]	; (2054 <STACK_SIZE+0x54>)
    1f8e:	6812      	ldr	r2, [r2, #0]
    1f90:	4293      	cmp	r3, r2
    1f92:	d901      	bls.n	1f98 <xTaskCreate+0xf8>
    1f94:	4a2f      	ldr	r2, [pc, #188]	; (2054 <STACK_SIZE+0x54>)
    1f96:	6013      	str	r3, [r2, #0]
    1f98:	0098      	lsls	r0, r3, #2
    1f9a:	18c0      	adds	r0, r0, r3
    1f9c:	0080      	lsls	r0, r0, #2
    1f9e:	4b2e      	ldr	r3, [pc, #184]	; (2058 <STACK_SIZE+0x58>)
    1fa0:	1818      	adds	r0, r3, r0
    1fa2:	9903      	ldr	r1, [sp, #12]
    1fa4:	4b2d      	ldr	r3, [pc, #180]	; (205c <STACK_SIZE+0x5c>)
    1fa6:	4798      	blx	r3
	taskEXIT_CRITICAL();
    1fa8:	4b2d      	ldr	r3, [pc, #180]	; (2060 <STACK_SIZE+0x60>)
    1faa:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    1fac:	4b27      	ldr	r3, [pc, #156]	; (204c <STACK_SIZE+0x4c>)
    1fae:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    1fb0:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d005      	beq.n	1fc2 <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1fb6:	4b24      	ldr	r3, [pc, #144]	; (2048 <STACK_SIZE+0x48>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1fbe:	429a      	cmp	r2, r3
    1fc0:	d331      	bcc.n	2026 <STACK_SIZE+0x26>
	}
    1fc2:	b004      	add	sp, #16
    1fc4:	bc04      	pop	{r2}
    1fc6:	4690      	mov	r8, r2
    1fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    1fca:	0030      	movs	r0, r6
    1fcc:	4b25      	ldr	r3, [pc, #148]	; (2064 <STACK_SIZE+0x64>)
    1fce:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1fd0:	2001      	movs	r0, #1
    1fd2:	4240      	negs	r0, r0
    1fd4:	e7f5      	b.n	1fc2 <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    1fd6:	4b1c      	ldr	r3, [pc, #112]	; (2048 <STACK_SIZE+0x48>)
    1fd8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1fda:	6813      	ldr	r3, [r2, #0]
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d1cf      	bne.n	1f80 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1fe0:	4f1d      	ldr	r7, [pc, #116]	; (2058 <STACK_SIZE+0x58>)
    1fe2:	0038      	movs	r0, r7
    1fe4:	4e20      	ldr	r6, [pc, #128]	; (2068 <STACK_SIZE+0x68>)
    1fe6:	47b0      	blx	r6
    1fe8:	0038      	movs	r0, r7
    1fea:	3014      	adds	r0, #20
    1fec:	47b0      	blx	r6
    1fee:	0038      	movs	r0, r7
    1ff0:	3028      	adds	r0, #40	; 0x28
    1ff2:	47b0      	blx	r6
    1ff4:	0038      	movs	r0, r7
    1ff6:	303c      	adds	r0, #60	; 0x3c
    1ff8:	47b0      	blx	r6
    1ffa:	0038      	movs	r0, r7
    1ffc:	3050      	adds	r0, #80	; 0x50
    1ffe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2000:	4b1a      	ldr	r3, [pc, #104]	; (206c <STACK_SIZE+0x6c>)
    2002:	4698      	mov	r8, r3
    2004:	0018      	movs	r0, r3
    2006:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2008:	4f19      	ldr	r7, [pc, #100]	; (2070 <STACK_SIZE+0x70>)
    200a:	0038      	movs	r0, r7
    200c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    200e:	4819      	ldr	r0, [pc, #100]	; (2074 <STACK_SIZE+0x74>)
    2010:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    2012:	4819      	ldr	r0, [pc, #100]	; (2078 <STACK_SIZE+0x78>)
    2014:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    2016:	4819      	ldr	r0, [pc, #100]	; (207c <STACK_SIZE+0x7c>)
    2018:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    201a:	4b19      	ldr	r3, [pc, #100]	; (2080 <STACK_SIZE+0x80>)
    201c:	4642      	mov	r2, r8
    201e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2020:	4b18      	ldr	r3, [pc, #96]	; (2084 <STACK_SIZE+0x84>)
    2022:	601f      	str	r7, [r3, #0]
    2024:	e7ac      	b.n	1f80 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    2026:	4b18      	ldr	r3, [pc, #96]	; (2088 <STACK_SIZE+0x88>)
    2028:	4798      	blx	r3
			xReturn = pdPASS;
    202a:	2001      	movs	r0, #1
    202c:	e7c9      	b.n	1fc2 <xTaskCreate+0x122>
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	000010bd 	.word	0x000010bd
    2034:	000054bf 	.word	0x000054bf
    2038:	0000160b 	.word	0x0000160b
    203c:	00000f85 	.word	0x00000f85
    2040:	00001021 	.word	0x00001021
    2044:	20004f60 	.word	0x20004f60
    2048:	20004ef0 	.word	0x20004ef0
    204c:	20004fc0 	.word	0x20004fc0
    2050:	20004f70 	.word	0x20004f70
    2054:	20004f74 	.word	0x20004f74
    2058:	20004efc 	.word	0x20004efc
    205c:	00001611 	.word	0x00001611
    2060:	00001039 	.word	0x00001039
    2064:	000011e9 	.word	0x000011e9
    2068:	000015f5 	.word	0x000015f5
    206c:	20004f78 	.word	0x20004f78
    2070:	20004f8c 	.word	0x20004f8c
    2074:	20004fac 	.word	0x20004fac
    2078:	20004fd8 	.word	0x20004fd8
    207c:	20004fc4 	.word	0x20004fc4
    2080:	20004ef4 	.word	0x20004ef4
    2084:	20004ef8 	.word	0x20004ef8
    2088:	00001009 	.word	0x00001009

0000208c <vTaskStartScheduler>:
{
    208c:	b510      	push	{r4, lr}
    208e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    2090:	4b11      	ldr	r3, [pc, #68]	; (20d8 <vTaskStartScheduler+0x4c>)
    2092:	9301      	str	r3, [sp, #4]
    2094:	2300      	movs	r3, #0
    2096:	9300      	str	r3, [sp, #0]
    2098:	2282      	movs	r2, #130	; 0x82
    209a:	4910      	ldr	r1, [pc, #64]	; (20dc <vTaskStartScheduler+0x50>)
    209c:	4810      	ldr	r0, [pc, #64]	; (20e0 <vTaskStartScheduler+0x54>)
    209e:	4c11      	ldr	r4, [pc, #68]	; (20e4 <vTaskStartScheduler+0x58>)
    20a0:	47a0      	blx	r4
		if( xReturn == pdPASS )
    20a2:	2801      	cmp	r0, #1
    20a4:	d003      	beq.n	20ae <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    20a6:	1c43      	adds	r3, r0, #1
    20a8:	d013      	beq.n	20d2 <vTaskStartScheduler+0x46>
}
    20aa:	b002      	add	sp, #8
    20ac:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    20ae:	4b0e      	ldr	r3, [pc, #56]	; (20e8 <vTaskStartScheduler+0x5c>)
    20b0:	4798      	blx	r3
	if( xReturn == pdPASS )
    20b2:	2801      	cmp	r0, #1
    20b4:	d1f7      	bne.n	20a6 <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    20b6:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    20b8:	2201      	movs	r2, #1
    20ba:	4252      	negs	r2, r2
    20bc:	4b0b      	ldr	r3, [pc, #44]	; (20ec <vTaskStartScheduler+0x60>)
    20be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    20c0:	3202      	adds	r2, #2
    20c2:	4b0b      	ldr	r3, [pc, #44]	; (20f0 <vTaskStartScheduler+0x64>)
    20c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    20c6:	2200      	movs	r2, #0
    20c8:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <vTaskStartScheduler+0x68>)
    20ca:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    20cc:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <vTaskStartScheduler+0x6c>)
    20ce:	4798      	blx	r3
    20d0:	e7eb      	b.n	20aa <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    20d2:	b672      	cpsid	i
    20d4:	e7fe      	b.n	20d4 <vTaskStartScheduler+0x48>
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	20004fa0 	.word	0x20004fa0
    20dc:	00005610 	.word	0x00005610
    20e0:	00001e15 	.word	0x00001e15
    20e4:	00001ea1 	.word	0x00001ea1
    20e8:	00002739 	.word	0x00002739
    20ec:	20004fa4 	.word	0x20004fa4
    20f0:	20004fc0 	.word	0x20004fc0
    20f4:	20004fec 	.word	0x20004fec
    20f8:	00000fa5 	.word	0x00000fa5

000020fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    20fc:	4a02      	ldr	r2, [pc, #8]	; (2108 <vTaskSuspendAll+0xc>)
    20fe:	6813      	ldr	r3, [r2, #0]
    2100:	3301      	adds	r3, #1
    2102:	6013      	str	r3, [r2, #0]
}
    2104:	4770      	bx	lr
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	20004f6c 	.word	0x20004f6c

0000210c <xTaskGetTickCount>:
		xTicks = xTickCount;
    210c:	4b01      	ldr	r3, [pc, #4]	; (2114 <xTaskGetTickCount+0x8>)
    210e:	6818      	ldr	r0, [r3, #0]
}
    2110:	4770      	bx	lr
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	20004fec 	.word	0x20004fec

00002118 <xTaskIncrementTick>:
{
    2118:	b5f0      	push	{r4, r5, r6, r7, lr}
    211a:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    211c:	4b3d      	ldr	r3, [pc, #244]	; (2214 <xTaskIncrementTick+0xfc>)
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	2b00      	cmp	r3, #0
    2122:	d000      	beq.n	2126 <xTaskIncrementTick+0xe>
    2124:	e06d      	b.n	2202 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    2126:	4b3c      	ldr	r3, [pc, #240]	; (2218 <xTaskIncrementTick+0x100>)
    2128:	681d      	ldr	r5, [r3, #0]
    212a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    212c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    212e:	2d00      	cmp	r5, #0
    2130:	d112      	bne.n	2158 <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    2132:	4b3a      	ldr	r3, [pc, #232]	; (221c <xTaskIncrementTick+0x104>)
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	2b00      	cmp	r3, #0
    213a:	d001      	beq.n	2140 <xTaskIncrementTick+0x28>
    213c:	b672      	cpsid	i
    213e:	e7fe      	b.n	213e <xTaskIncrementTick+0x26>
    2140:	4a36      	ldr	r2, [pc, #216]	; (221c <xTaskIncrementTick+0x104>)
    2142:	6811      	ldr	r1, [r2, #0]
    2144:	4b36      	ldr	r3, [pc, #216]	; (2220 <xTaskIncrementTick+0x108>)
    2146:	6818      	ldr	r0, [r3, #0]
    2148:	6010      	str	r0, [r2, #0]
    214a:	6019      	str	r1, [r3, #0]
    214c:	4a35      	ldr	r2, [pc, #212]	; (2224 <xTaskIncrementTick+0x10c>)
    214e:	6813      	ldr	r3, [r2, #0]
    2150:	3301      	adds	r3, #1
    2152:	6013      	str	r3, [r2, #0]
    2154:	4b34      	ldr	r3, [pc, #208]	; (2228 <xTaskIncrementTick+0x110>)
    2156:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    2158:	4b34      	ldr	r3, [pc, #208]	; (222c <xTaskIncrementTick+0x114>)
    215a:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    215c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    215e:	429d      	cmp	r5, r3
    2160:	d333      	bcc.n	21ca <xTaskIncrementTick+0xb2>
    2162:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2164:	4f2d      	ldr	r7, [pc, #180]	; (221c <xTaskIncrementTick+0x104>)
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d029      	beq.n	21c2 <xTaskIncrementTick+0xaa>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    216e:	4b2b      	ldr	r3, [pc, #172]	; (221c <xTaskIncrementTick+0x104>)
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	68db      	ldr	r3, [r3, #12]
    2174:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    2176:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    2178:	429d      	cmp	r5, r3
    217a:	d33f      	bcc.n	21fc <xTaskIncrementTick+0xe4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    217c:	1d33      	adds	r3, r6, #4
    217e:	9301      	str	r3, [sp, #4]
    2180:	0018      	movs	r0, r3
    2182:	4b2b      	ldr	r3, [pc, #172]	; (2230 <xTaskIncrementTick+0x118>)
    2184:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2186:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2188:	2b00      	cmp	r3, #0
    218a:	d003      	beq.n	2194 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    218c:	0030      	movs	r0, r6
    218e:	3018      	adds	r0, #24
    2190:	4b27      	ldr	r3, [pc, #156]	; (2230 <xTaskIncrementTick+0x118>)
    2192:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2194:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2196:	4a27      	ldr	r2, [pc, #156]	; (2234 <xTaskIncrementTick+0x11c>)
    2198:	6812      	ldr	r2, [r2, #0]
    219a:	4293      	cmp	r3, r2
    219c:	d901      	bls.n	21a2 <xTaskIncrementTick+0x8a>
    219e:	4a25      	ldr	r2, [pc, #148]	; (2234 <xTaskIncrementTick+0x11c>)
    21a0:	6013      	str	r3, [r2, #0]
    21a2:	0098      	lsls	r0, r3, #2
    21a4:	18c0      	adds	r0, r0, r3
    21a6:	0080      	lsls	r0, r0, #2
    21a8:	4b23      	ldr	r3, [pc, #140]	; (2238 <xTaskIncrementTick+0x120>)
    21aa:	1818      	adds	r0, r3, r0
    21ac:	9901      	ldr	r1, [sp, #4]
    21ae:	4b23      	ldr	r3, [pc, #140]	; (223c <xTaskIncrementTick+0x124>)
    21b0:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    21b2:	4b23      	ldr	r3, [pc, #140]	; (2240 <xTaskIncrementTick+0x128>)
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    21b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21ba:	429a      	cmp	r2, r3
    21bc:	d3d3      	bcc.n	2166 <xTaskIncrementTick+0x4e>
							xSwitchRequired = pdTRUE;
    21be:	2401      	movs	r4, #1
    21c0:	e7d1      	b.n	2166 <xTaskIncrementTick+0x4e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21c2:	2201      	movs	r2, #1
    21c4:	4252      	negs	r2, r2
    21c6:	4b19      	ldr	r3, [pc, #100]	; (222c <xTaskIncrementTick+0x114>)
    21c8:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    21ca:	4b1d      	ldr	r3, [pc, #116]	; (2240 <xTaskIncrementTick+0x128>)
    21cc:	681b      	ldr	r3, [r3, #0]
    21ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    21d0:	0093      	lsls	r3, r2, #2
    21d2:	189b      	adds	r3, r3, r2
    21d4:	009b      	lsls	r3, r3, #2
    21d6:	4a18      	ldr	r2, [pc, #96]	; (2238 <xTaskIncrementTick+0x120>)
    21d8:	589b      	ldr	r3, [r3, r2]
    21da:	2b01      	cmp	r3, #1
    21dc:	d900      	bls.n	21e0 <xTaskIncrementTick+0xc8>
				xSwitchRequired = pdTRUE;
    21de:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    21e0:	4b18      	ldr	r3, [pc, #96]	; (2244 <xTaskIncrementTick+0x12c>)
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d101      	bne.n	21ec <xTaskIncrementTick+0xd4>
				vApplicationTickHook();
    21e8:	4b17      	ldr	r3, [pc, #92]	; (2248 <xTaskIncrementTick+0x130>)
    21ea:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
    21ec:	4b17      	ldr	r3, [pc, #92]	; (224c <xTaskIncrementTick+0x134>)
    21ee:	681b      	ldr	r3, [r3, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d000      	beq.n	21f6 <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
    21f4:	2401      	movs	r4, #1
}
    21f6:	0020      	movs	r0, r4
    21f8:	b003      	add	sp, #12
    21fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xNextTaskUnblockTime = xItemValue;
    21fc:	4a0b      	ldr	r2, [pc, #44]	; (222c <xTaskIncrementTick+0x114>)
    21fe:	6013      	str	r3, [r2, #0]
						break;
    2200:	e7e3      	b.n	21ca <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    2202:	4a10      	ldr	r2, [pc, #64]	; (2244 <xTaskIncrementTick+0x12c>)
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	3301      	adds	r3, #1
    2208:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
    220a:	4b0f      	ldr	r3, [pc, #60]	; (2248 <xTaskIncrementTick+0x130>)
    220c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
    220e:	2400      	movs	r4, #0
    2210:	e7ec      	b.n	21ec <xTaskIncrementTick+0xd4>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	20004f6c 	.word	0x20004f6c
    2218:	20004fec 	.word	0x20004fec
    221c:	20004ef4 	.word	0x20004ef4
    2220:	20004ef8 	.word	0x20004ef8
    2224:	20004fa8 	.word	0x20004fa8
    2228:	00001d61 	.word	0x00001d61
    222c:	20004fa4 	.word	0x20004fa4
    2230:	00001657 	.word	0x00001657
    2234:	20004f74 	.word	0x20004f74
    2238:	20004efc 	.word	0x20004efc
    223c:	00001611 	.word	0x00001611
    2240:	20004ef0 	.word	0x20004ef0
    2244:	20004f68 	.word	0x20004f68
    2248:	00003a7d 	.word	0x00003a7d
    224c:	20004ff0 	.word	0x20004ff0

00002250 <xTaskResumeAll>:
{
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    2252:	4b30      	ldr	r3, [pc, #192]	; (2314 <xTaskResumeAll+0xc4>)
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d101      	bne.n	225e <xTaskResumeAll+0xe>
    225a:	b672      	cpsid	i
    225c:	e7fe      	b.n	225c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    225e:	4b2e      	ldr	r3, [pc, #184]	; (2318 <xTaskResumeAll+0xc8>)
    2260:	4798      	blx	r3
		--uxSchedulerSuspended;
    2262:	4b2c      	ldr	r3, [pc, #176]	; (2314 <xTaskResumeAll+0xc4>)
    2264:	681a      	ldr	r2, [r3, #0]
    2266:	3a01      	subs	r2, #1
    2268:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    226a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    226c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    226e:	2b00      	cmp	r3, #0
    2270:	d103      	bne.n	227a <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2272:	4b2a      	ldr	r3, [pc, #168]	; (231c <xTaskResumeAll+0xcc>)
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	2b00      	cmp	r3, #0
    2278:	d103      	bne.n	2282 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    227a:	4b29      	ldr	r3, [pc, #164]	; (2320 <xTaskResumeAll+0xd0>)
    227c:	4798      	blx	r3
}
    227e:	0020      	movs	r0, r4
    2280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2282:	4d28      	ldr	r5, [pc, #160]	; (2324 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2284:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2286:	682b      	ldr	r3, [r5, #0]
    2288:	2b00      	cmp	r3, #0
    228a:	d022      	beq.n	22d2 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2290:	0020      	movs	r0, r4
    2292:	3018      	adds	r0, #24
    2294:	4b24      	ldr	r3, [pc, #144]	; (2328 <xTaskResumeAll+0xd8>)
    2296:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2298:	1d26      	adds	r6, r4, #4
    229a:	0030      	movs	r0, r6
    229c:	4b22      	ldr	r3, [pc, #136]	; (2328 <xTaskResumeAll+0xd8>)
    229e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    22a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    22a2:	4a22      	ldr	r2, [pc, #136]	; (232c <xTaskResumeAll+0xdc>)
    22a4:	6812      	ldr	r2, [r2, #0]
    22a6:	4293      	cmp	r3, r2
    22a8:	d901      	bls.n	22ae <xTaskResumeAll+0x5e>
    22aa:	4a20      	ldr	r2, [pc, #128]	; (232c <xTaskResumeAll+0xdc>)
    22ac:	6013      	str	r3, [r2, #0]
    22ae:	0098      	lsls	r0, r3, #2
    22b0:	18c0      	adds	r0, r0, r3
    22b2:	0080      	lsls	r0, r0, #2
    22b4:	4b1e      	ldr	r3, [pc, #120]	; (2330 <xTaskResumeAll+0xe0>)
    22b6:	1818      	adds	r0, r3, r0
    22b8:	0031      	movs	r1, r6
    22ba:	4b1e      	ldr	r3, [pc, #120]	; (2334 <xTaskResumeAll+0xe4>)
    22bc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    22be:	4b1e      	ldr	r3, [pc, #120]	; (2338 <xTaskResumeAll+0xe8>)
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    22c6:	429a      	cmp	r2, r3
    22c8:	d3dd      	bcc.n	2286 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    22ca:	2201      	movs	r2, #1
    22cc:	4b1b      	ldr	r3, [pc, #108]	; (233c <xTaskResumeAll+0xec>)
    22ce:	601a      	str	r2, [r3, #0]
    22d0:	e7d9      	b.n	2286 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    22d2:	2c00      	cmp	r4, #0
    22d4:	d001      	beq.n	22da <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    22d6:	4b1a      	ldr	r3, [pc, #104]	; (2340 <xTaskResumeAll+0xf0>)
    22d8:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    22da:	4b1a      	ldr	r3, [pc, #104]	; (2344 <xTaskResumeAll+0xf4>)
    22dc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    22de:	2c00      	cmp	r4, #0
    22e0:	d00e      	beq.n	2300 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    22e2:	4f19      	ldr	r7, [pc, #100]	; (2348 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    22e4:	4e15      	ldr	r6, [pc, #84]	; (233c <xTaskResumeAll+0xec>)
    22e6:	2501      	movs	r5, #1
    22e8:	e002      	b.n	22f0 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    22ea:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    22ec:	2c00      	cmp	r4, #0
    22ee:	d004      	beq.n	22fa <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    22f0:	47b8      	blx	r7
    22f2:	2800      	cmp	r0, #0
    22f4:	d0f9      	beq.n	22ea <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    22f6:	6035      	str	r5, [r6, #0]
    22f8:	e7f7      	b.n	22ea <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    22fa:	2200      	movs	r2, #0
    22fc:	4b11      	ldr	r3, [pc, #68]	; (2344 <xTaskResumeAll+0xf4>)
    22fe:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    2300:	4b0e      	ldr	r3, [pc, #56]	; (233c <xTaskResumeAll+0xec>)
    2302:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2304:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    2306:	2b00      	cmp	r3, #0
    2308:	d0b7      	beq.n	227a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    230a:	4b10      	ldr	r3, [pc, #64]	; (234c <xTaskResumeAll+0xfc>)
    230c:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    230e:	3401      	adds	r4, #1
    2310:	e7b3      	b.n	227a <xTaskResumeAll+0x2a>
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	20004f6c 	.word	0x20004f6c
    2318:	00001021 	.word	0x00001021
    231c:	20004f60 	.word	0x20004f60
    2320:	00001039 	.word	0x00001039
    2324:	20004fac 	.word	0x20004fac
    2328:	00001657 	.word	0x00001657
    232c:	20004f74 	.word	0x20004f74
    2330:	20004efc 	.word	0x20004efc
    2334:	00001611 	.word	0x00001611
    2338:	20004ef0 	.word	0x20004ef0
    233c:	20004ff0 	.word	0x20004ff0
    2340:	00001d61 	.word	0x00001d61
    2344:	20004f68 	.word	0x20004f68
    2348:	00002119 	.word	0x00002119
    234c:	00001009 	.word	0x00001009

00002350 <vTaskDelay>:
	{
    2350:	b510      	push	{r4, lr}
    2352:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    2354:	d00f      	beq.n	2376 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    2356:	4b09      	ldr	r3, [pc, #36]	; (237c <vTaskDelay+0x2c>)
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d001      	beq.n	2362 <vTaskDelay+0x12>
    235e:	b672      	cpsid	i
    2360:	e7fe      	b.n	2360 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2362:	4b07      	ldr	r3, [pc, #28]	; (2380 <vTaskDelay+0x30>)
    2364:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2366:	2100      	movs	r1, #0
    2368:	0020      	movs	r0, r4
    236a:	4b06      	ldr	r3, [pc, #24]	; (2384 <vTaskDelay+0x34>)
    236c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    236e:	4b06      	ldr	r3, [pc, #24]	; (2388 <vTaskDelay+0x38>)
    2370:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    2372:	2800      	cmp	r0, #0
    2374:	d101      	bne.n	237a <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    2376:	4b05      	ldr	r3, [pc, #20]	; (238c <vTaskDelay+0x3c>)
    2378:	4798      	blx	r3
	}
    237a:	bd10      	pop	{r4, pc}
    237c:	20004f6c 	.word	0x20004f6c
    2380:	000020fd 	.word	0x000020fd
    2384:	00001d8d 	.word	0x00001d8d
    2388:	00002251 	.word	0x00002251
    238c:	00001009 	.word	0x00001009

00002390 <vTaskSwitchContext>:
{
    2390:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2392:	4b2d      	ldr	r3, [pc, #180]	; (2448 <vTaskSwitchContext+0xb8>)
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	2b00      	cmp	r3, #0
    2398:	d128      	bne.n	23ec <vTaskSwitchContext+0x5c>
		xYieldPending = pdFALSE;
    239a:	2200      	movs	r2, #0
    239c:	4b2b      	ldr	r3, [pc, #172]	; (244c <vTaskSwitchContext+0xbc>)
    239e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    23a0:	4b2b      	ldr	r3, [pc, #172]	; (2450 <vTaskSwitchContext+0xc0>)
    23a2:	681b      	ldr	r3, [r3, #0]
    23a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    23a6:	4a2b      	ldr	r2, [pc, #172]	; (2454 <vTaskSwitchContext+0xc4>)
    23a8:	6819      	ldr	r1, [r3, #0]
    23aa:	4291      	cmp	r1, r2
    23ac:	d102      	bne.n	23b4 <vTaskSwitchContext+0x24>
    23ae:	6859      	ldr	r1, [r3, #4]
    23b0:	4291      	cmp	r1, r2
    23b2:	d01f      	beq.n	23f4 <vTaskSwitchContext+0x64>
    23b4:	4b26      	ldr	r3, [pc, #152]	; (2450 <vTaskSwitchContext+0xc0>)
    23b6:	6818      	ldr	r0, [r3, #0]
    23b8:	6819      	ldr	r1, [r3, #0]
    23ba:	3134      	adds	r1, #52	; 0x34
    23bc:	4b26      	ldr	r3, [pc, #152]	; (2458 <vTaskSwitchContext+0xc8>)
    23be:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    23c0:	4b26      	ldr	r3, [pc, #152]	; (245c <vTaskSwitchContext+0xcc>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	009a      	lsls	r2, r3, #2
    23c6:	18d2      	adds	r2, r2, r3
    23c8:	0092      	lsls	r2, r2, #2
    23ca:	4925      	ldr	r1, [pc, #148]	; (2460 <vTaskSwitchContext+0xd0>)
    23cc:	5852      	ldr	r2, [r2, r1]
    23ce:	2a00      	cmp	r2, #0
    23d0:	d117      	bne.n	2402 <vTaskSwitchContext+0x72>
    23d2:	2b00      	cmp	r3, #0
    23d4:	d008      	beq.n	23e8 <vTaskSwitchContext+0x58>
    23d6:	3b01      	subs	r3, #1
    23d8:	009a      	lsls	r2, r3, #2
    23da:	18d2      	adds	r2, r2, r3
    23dc:	0092      	lsls	r2, r2, #2
    23de:	5852      	ldr	r2, [r2, r1]
    23e0:	2a00      	cmp	r2, #0
    23e2:	d10e      	bne.n	2402 <vTaskSwitchContext+0x72>
    23e4:	2b00      	cmp	r3, #0
    23e6:	d1f6      	bne.n	23d6 <vTaskSwitchContext+0x46>
    23e8:	b672      	cpsid	i
    23ea:	e7fe      	b.n	23ea <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
    23ec:	2201      	movs	r2, #1
    23ee:	4b17      	ldr	r3, [pc, #92]	; (244c <vTaskSwitchContext+0xbc>)
    23f0:	601a      	str	r2, [r3, #0]
}
    23f2:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    23f4:	6899      	ldr	r1, [r3, #8]
    23f6:	4291      	cmp	r1, r2
    23f8:	d1dc      	bne.n	23b4 <vTaskSwitchContext+0x24>
    23fa:	68db      	ldr	r3, [r3, #12]
    23fc:	4293      	cmp	r3, r2
    23fe:	d1d9      	bne.n	23b4 <vTaskSwitchContext+0x24>
    2400:	e7de      	b.n	23c0 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2402:	4817      	ldr	r0, [pc, #92]	; (2460 <vTaskSwitchContext+0xd0>)
    2404:	009a      	lsls	r2, r3, #2
    2406:	18d1      	adds	r1, r2, r3
    2408:	0089      	lsls	r1, r1, #2
    240a:	1841      	adds	r1, r0, r1
    240c:	684c      	ldr	r4, [r1, #4]
    240e:	6864      	ldr	r4, [r4, #4]
    2410:	604c      	str	r4, [r1, #4]
    2412:	18d2      	adds	r2, r2, r3
    2414:	0092      	lsls	r2, r2, #2
    2416:	3208      	adds	r2, #8
    2418:	1882      	adds	r2, r0, r2
    241a:	4294      	cmp	r4, r2
    241c:	d00b      	beq.n	2436 <vTaskSwitchContext+0xa6>
    241e:	009a      	lsls	r2, r3, #2
    2420:	18d2      	adds	r2, r2, r3
    2422:	0092      	lsls	r2, r2, #2
    2424:	490e      	ldr	r1, [pc, #56]	; (2460 <vTaskSwitchContext+0xd0>)
    2426:	188a      	adds	r2, r1, r2
    2428:	6852      	ldr	r2, [r2, #4]
    242a:	68d1      	ldr	r1, [r2, #12]
    242c:	4a08      	ldr	r2, [pc, #32]	; (2450 <vTaskSwitchContext+0xc0>)
    242e:	6011      	str	r1, [r2, #0]
    2430:	4a0a      	ldr	r2, [pc, #40]	; (245c <vTaskSwitchContext+0xcc>)
    2432:	6013      	str	r3, [r2, #0]
}
    2434:	e7dd      	b.n	23f2 <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2436:	6860      	ldr	r0, [r4, #4]
    2438:	009a      	lsls	r2, r3, #2
    243a:	18d2      	adds	r2, r2, r3
    243c:	0092      	lsls	r2, r2, #2
    243e:	4908      	ldr	r1, [pc, #32]	; (2460 <vTaskSwitchContext+0xd0>)
    2440:	188a      	adds	r2, r1, r2
    2442:	6050      	str	r0, [r2, #4]
    2444:	e7eb      	b.n	241e <vTaskSwitchContext+0x8e>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	20004f6c 	.word	0x20004f6c
    244c:	20004ff0 	.word	0x20004ff0
    2450:	20004ef0 	.word	0x20004ef0
    2454:	a5a5a5a5 	.word	0xa5a5a5a5
    2458:	00003a7f 	.word	0x00003a7f
    245c:	20004f74 	.word	0x20004f74
    2460:	20004efc 	.word	0x20004efc

00002464 <vTaskPlaceOnEventList>:
{
    2464:	b510      	push	{r4, lr}
    2466:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    2468:	2800      	cmp	r0, #0
    246a:	d101      	bne.n	2470 <vTaskPlaceOnEventList+0xc>
    246c:	b672      	cpsid	i
    246e:	e7fe      	b.n	246e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2470:	4b04      	ldr	r3, [pc, #16]	; (2484 <vTaskPlaceOnEventList+0x20>)
    2472:	6819      	ldr	r1, [r3, #0]
    2474:	3118      	adds	r1, #24
    2476:	4b04      	ldr	r3, [pc, #16]	; (2488 <vTaskPlaceOnEventList+0x24>)
    2478:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    247a:	2101      	movs	r1, #1
    247c:	0020      	movs	r0, r4
    247e:	4b03      	ldr	r3, [pc, #12]	; (248c <vTaskPlaceOnEventList+0x28>)
    2480:	4798      	blx	r3
}
    2482:	bd10      	pop	{r4, pc}
    2484:	20004ef0 	.word	0x20004ef0
    2488:	00001629 	.word	0x00001629
    248c:	00001d8d 	.word	0x00001d8d

00002490 <vTaskPlaceOnEventListRestricted>:
	{
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	000c      	movs	r4, r1
    2494:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    2496:	2800      	cmp	r0, #0
    2498:	d00d      	beq.n	24b6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    249a:	4b08      	ldr	r3, [pc, #32]	; (24bc <vTaskPlaceOnEventListRestricted+0x2c>)
    249c:	6819      	ldr	r1, [r3, #0]
    249e:	3118      	adds	r1, #24
    24a0:	4b07      	ldr	r3, [pc, #28]	; (24c0 <vTaskPlaceOnEventListRestricted+0x30>)
    24a2:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    24a4:	2d00      	cmp	r5, #0
    24a6:	d001      	beq.n	24ac <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    24a8:	2401      	movs	r4, #1
    24aa:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    24ac:	0029      	movs	r1, r5
    24ae:	0020      	movs	r0, r4
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <vTaskPlaceOnEventListRestricted+0x34>)
    24b2:	4798      	blx	r3
	}
    24b4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    24b6:	b672      	cpsid	i
    24b8:	e7fe      	b.n	24b8 <vTaskPlaceOnEventListRestricted+0x28>
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	20004ef0 	.word	0x20004ef0
    24c0:	00001611 	.word	0x00001611
    24c4:	00001d8d 	.word	0x00001d8d

000024c8 <xTaskRemoveFromEventList>:
{
    24c8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    24ca:	68c3      	ldr	r3, [r0, #12]
    24cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    24ce:	2c00      	cmp	r4, #0
    24d0:	d027      	beq.n	2522 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    24d2:	0025      	movs	r5, r4
    24d4:	3518      	adds	r5, #24
    24d6:	0028      	movs	r0, r5
    24d8:	4b15      	ldr	r3, [pc, #84]	; (2530 <xTaskRemoveFromEventList+0x68>)
    24da:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    24dc:	4b15      	ldr	r3, [pc, #84]	; (2534 <xTaskRemoveFromEventList+0x6c>)
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d120      	bne.n	2526 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    24e4:	1d25      	adds	r5, r4, #4
    24e6:	0028      	movs	r0, r5
    24e8:	4b11      	ldr	r3, [pc, #68]	; (2530 <xTaskRemoveFromEventList+0x68>)
    24ea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    24ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    24ee:	4a12      	ldr	r2, [pc, #72]	; (2538 <xTaskRemoveFromEventList+0x70>)
    24f0:	6812      	ldr	r2, [r2, #0]
    24f2:	4293      	cmp	r3, r2
    24f4:	d901      	bls.n	24fa <xTaskRemoveFromEventList+0x32>
    24f6:	4a10      	ldr	r2, [pc, #64]	; (2538 <xTaskRemoveFromEventList+0x70>)
    24f8:	6013      	str	r3, [r2, #0]
    24fa:	0098      	lsls	r0, r3, #2
    24fc:	18c0      	adds	r0, r0, r3
    24fe:	0080      	lsls	r0, r0, #2
    2500:	4b0e      	ldr	r3, [pc, #56]	; (253c <xTaskRemoveFromEventList+0x74>)
    2502:	1818      	adds	r0, r3, r0
    2504:	0029      	movs	r1, r5
    2506:	4b0e      	ldr	r3, [pc, #56]	; (2540 <xTaskRemoveFromEventList+0x78>)
    2508:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    250a:	4b0e      	ldr	r3, [pc, #56]	; (2544 <xTaskRemoveFromEventList+0x7c>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    2512:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2514:	429a      	cmp	r2, r3
    2516:	d903      	bls.n	2520 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    2518:	2201      	movs	r2, #1
    251a:	4b0b      	ldr	r3, [pc, #44]	; (2548 <xTaskRemoveFromEventList+0x80>)
    251c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    251e:	3001      	adds	r0, #1
}
    2520:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    2522:	b672      	cpsid	i
    2524:	e7fe      	b.n	2524 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2526:	0029      	movs	r1, r5
    2528:	4808      	ldr	r0, [pc, #32]	; (254c <xTaskRemoveFromEventList+0x84>)
    252a:	4b05      	ldr	r3, [pc, #20]	; (2540 <xTaskRemoveFromEventList+0x78>)
    252c:	4798      	blx	r3
    252e:	e7ec      	b.n	250a <xTaskRemoveFromEventList+0x42>
    2530:	00001657 	.word	0x00001657
    2534:	20004f6c 	.word	0x20004f6c
    2538:	20004f74 	.word	0x20004f74
    253c:	20004efc 	.word	0x20004efc
    2540:	00001611 	.word	0x00001611
    2544:	20004ef0 	.word	0x20004ef0
    2548:	20004ff0 	.word	0x20004ff0
    254c:	20004fac 	.word	0x20004fac

00002550 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <vTaskInternalSetTimeOutState+0x10>)
    2552:	681b      	ldr	r3, [r3, #0]
    2554:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2556:	4b03      	ldr	r3, [pc, #12]	; (2564 <vTaskInternalSetTimeOutState+0x14>)
    2558:	681b      	ldr	r3, [r3, #0]
    255a:	6043      	str	r3, [r0, #4]
}
    255c:	4770      	bx	lr
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	20004fa8 	.word	0x20004fa8
    2564:	20004fec 	.word	0x20004fec

00002568 <xTaskCheckForTimeOut>:
{
    2568:	b570      	push	{r4, r5, r6, lr}
    256a:	0006      	movs	r6, r0
    256c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    256e:	2800      	cmp	r0, #0
    2570:	d01b      	beq.n	25aa <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    2572:	2900      	cmp	r1, #0
    2574:	d01b      	beq.n	25ae <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    2576:	4b13      	ldr	r3, [pc, #76]	; (25c4 <xTaskCheckForTimeOut+0x5c>)
    2578:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    257a:	4b13      	ldr	r3, [pc, #76]	; (25c8 <xTaskCheckForTimeOut+0x60>)
    257c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    257e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    2580:	682b      	ldr	r3, [r5, #0]
    2582:	1c58      	adds	r0, r3, #1
    2584:	d01c      	beq.n	25c0 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2586:	4811      	ldr	r0, [pc, #68]	; (25cc <xTaskCheckForTimeOut+0x64>)
    2588:	6800      	ldr	r0, [r0, #0]
    258a:	6834      	ldr	r4, [r6, #0]
    258c:	4284      	cmp	r4, r0
    258e:	d002      	beq.n	2596 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    2590:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2592:	428a      	cmp	r2, r1
    2594:	d205      	bcs.n	25a2 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2596:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2598:	429a      	cmp	r2, r3
    259a:	d30a      	bcc.n	25b2 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    259c:	2300      	movs	r3, #0
    259e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    25a0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    25a2:	4b0b      	ldr	r3, [pc, #44]	; (25d0 <xTaskCheckForTimeOut+0x68>)
    25a4:	4798      	blx	r3
}
    25a6:	0020      	movs	r0, r4
    25a8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    25aa:	b672      	cpsid	i
    25ac:	e7fe      	b.n	25ac <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    25ae:	b672      	cpsid	i
    25b0:	e7fe      	b.n	25b0 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    25b2:	1a9b      	subs	r3, r3, r2
    25b4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    25b6:	0030      	movs	r0, r6
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <xTaskCheckForTimeOut+0x6c>)
    25ba:	4798      	blx	r3
			xReturn = pdFALSE;
    25bc:	2400      	movs	r4, #0
    25be:	e7f0      	b.n	25a2 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    25c0:	2400      	movs	r4, #0
    25c2:	e7ee      	b.n	25a2 <xTaskCheckForTimeOut+0x3a>
    25c4:	00001021 	.word	0x00001021
    25c8:	20004fec 	.word	0x20004fec
    25cc:	20004fa8 	.word	0x20004fa8
    25d0:	00001039 	.word	0x00001039
    25d4:	00002551 	.word	0x00002551

000025d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    25d8:	2201      	movs	r2, #1
    25da:	4b01      	ldr	r3, [pc, #4]	; (25e0 <vTaskMissedYield+0x8>)
    25dc:	601a      	str	r2, [r3, #0]
}
    25de:	4770      	bx	lr
    25e0:	20004ff0 	.word	0x20004ff0

000025e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    25e4:	4b05      	ldr	r3, [pc, #20]	; (25fc <xTaskGetSchedulerState+0x18>)
    25e6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    25e8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    25ea:	2b00      	cmp	r3, #0
    25ec:	d004      	beq.n	25f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    25ee:	4b04      	ldr	r3, [pc, #16]	; (2600 <xTaskGetSchedulerState+0x1c>)
    25f0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    25f2:	4243      	negs	r3, r0
    25f4:	4158      	adcs	r0, r3
    25f6:	0040      	lsls	r0, r0, #1
	}
    25f8:	4770      	bx	lr
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	20004fc0 	.word	0x20004fc0
    2600:	20004f6c 	.word	0x20004f6c

00002604 <xTaskPriorityDisinherit>:
	{
    2604:	b570      	push	{r4, r5, r6, lr}
    2606:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    2608:	d02c      	beq.n	2664 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    260a:	4b18      	ldr	r3, [pc, #96]	; (266c <xTaskPriorityDisinherit+0x68>)
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	4298      	cmp	r0, r3
    2610:	d001      	beq.n	2616 <xTaskPriorityDisinherit+0x12>
    2612:	b672      	cpsid	i
    2614:	e7fe      	b.n	2614 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    2616:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    2618:	2b00      	cmp	r3, #0
    261a:	d101      	bne.n	2620 <xTaskPriorityDisinherit+0x1c>
    261c:	b672      	cpsid	i
    261e:	e7fe      	b.n	261e <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    2620:	3b01      	subs	r3, #1
    2622:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2624:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2626:	6c81      	ldr	r1, [r0, #72]	; 0x48
    2628:	428a      	cmp	r2, r1
    262a:	d01d      	beq.n	2668 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    262c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    262e:	2b00      	cmp	r3, #0
    2630:	d117      	bne.n	2662 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2632:	1d25      	adds	r5, r4, #4
    2634:	0028      	movs	r0, r5
    2636:	4b0e      	ldr	r3, [pc, #56]	; (2670 <xTaskPriorityDisinherit+0x6c>)
    2638:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    263a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    263c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    263e:	2205      	movs	r2, #5
    2640:	1ad2      	subs	r2, r2, r3
    2642:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    2644:	4a0b      	ldr	r2, [pc, #44]	; (2674 <xTaskPriorityDisinherit+0x70>)
    2646:	6812      	ldr	r2, [r2, #0]
    2648:	4293      	cmp	r3, r2
    264a:	d901      	bls.n	2650 <xTaskPriorityDisinherit+0x4c>
    264c:	4a09      	ldr	r2, [pc, #36]	; (2674 <xTaskPriorityDisinherit+0x70>)
    264e:	6013      	str	r3, [r2, #0]
    2650:	009a      	lsls	r2, r3, #2
    2652:	18d3      	adds	r3, r2, r3
    2654:	009b      	lsls	r3, r3, #2
    2656:	4808      	ldr	r0, [pc, #32]	; (2678 <xTaskPriorityDisinherit+0x74>)
    2658:	18c0      	adds	r0, r0, r3
    265a:	0029      	movs	r1, r5
    265c:	4b07      	ldr	r3, [pc, #28]	; (267c <xTaskPriorityDisinherit+0x78>)
    265e:	4798      	blx	r3
					xReturn = pdTRUE;
    2660:	2001      	movs	r0, #1
	}
    2662:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    2664:	2000      	movs	r0, #0
    2666:	e7fc      	b.n	2662 <xTaskPriorityDisinherit+0x5e>
    2668:	2000      	movs	r0, #0
    266a:	e7fa      	b.n	2662 <xTaskPriorityDisinherit+0x5e>
    266c:	20004ef0 	.word	0x20004ef0
    2670:	00001657 	.word	0x00001657
    2674:	20004f74 	.word	0x20004f74
    2678:	20004efc 	.word	0x20004efc
    267c:	00001611 	.word	0x00001611

00002680 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2680:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2682:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2684:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2686:	4291      	cmp	r1, r2
    2688:	d80b      	bhi.n	26a2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    268a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    268c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    268e:	6983      	ldr	r3, [r0, #24]
    2690:	429a      	cmp	r2, r3
    2692:	d211      	bcs.n	26b8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2694:	1d01      	adds	r1, r0, #4
    2696:	4b09      	ldr	r3, [pc, #36]	; (26bc <prvInsertTimerInActiveList+0x3c>)
    2698:	6818      	ldr	r0, [r3, #0]
    269a:	4b09      	ldr	r3, [pc, #36]	; (26c0 <prvInsertTimerInActiveList+0x40>)
    269c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    269e:	2400      	movs	r4, #0
    26a0:	e00a      	b.n	26b8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    26a2:	429a      	cmp	r2, r3
    26a4:	d202      	bcs.n	26ac <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    26a6:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    26a8:	4299      	cmp	r1, r3
    26aa:	d205      	bcs.n	26b8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    26ac:	1d01      	adds	r1, r0, #4
    26ae:	4b05      	ldr	r3, [pc, #20]	; (26c4 <prvInsertTimerInActiveList+0x44>)
    26b0:	6818      	ldr	r0, [r3, #0]
    26b2:	4b03      	ldr	r3, [pc, #12]	; (26c0 <prvInsertTimerInActiveList+0x40>)
    26b4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    26b6:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    26b8:	0020      	movs	r0, r4
    26ba:	bd10      	pop	{r4, pc}
    26bc:	20004ff8 	.word	0x20004ff8
    26c0:	00001629 	.word	0x00001629
    26c4:	20004ff4 	.word	0x20004ff4

000026c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    26c8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    26ca:	4b10      	ldr	r3, [pc, #64]	; (270c <prvCheckForValidListAndQueue+0x44>)
    26cc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    26ce:	4b10      	ldr	r3, [pc, #64]	; (2710 <prvCheckForValidListAndQueue+0x48>)
    26d0:	681b      	ldr	r3, [r3, #0]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d002      	beq.n	26dc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    26d6:	4b0f      	ldr	r3, [pc, #60]	; (2714 <prvCheckForValidListAndQueue+0x4c>)
    26d8:	4798      	blx	r3
}
    26da:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    26dc:	4d0e      	ldr	r5, [pc, #56]	; (2718 <prvCheckForValidListAndQueue+0x50>)
    26de:	0028      	movs	r0, r5
    26e0:	4e0e      	ldr	r6, [pc, #56]	; (271c <prvCheckForValidListAndQueue+0x54>)
    26e2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    26e4:	4c0e      	ldr	r4, [pc, #56]	; (2720 <prvCheckForValidListAndQueue+0x58>)
    26e6:	0020      	movs	r0, r4
    26e8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    26ea:	4b0e      	ldr	r3, [pc, #56]	; (2724 <prvCheckForValidListAndQueue+0x5c>)
    26ec:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    26ee:	4b0e      	ldr	r3, [pc, #56]	; (2728 <prvCheckForValidListAndQueue+0x60>)
    26f0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    26f2:	2200      	movs	r2, #0
    26f4:	2110      	movs	r1, #16
    26f6:	2005      	movs	r0, #5
    26f8:	4b0c      	ldr	r3, [pc, #48]	; (272c <prvCheckForValidListAndQueue+0x64>)
    26fa:	4798      	blx	r3
    26fc:	4b04      	ldr	r3, [pc, #16]	; (2710 <prvCheckForValidListAndQueue+0x48>)
    26fe:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
    2700:	2800      	cmp	r0, #0
    2702:	d0e8      	beq.n	26d6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    2704:	490a      	ldr	r1, [pc, #40]	; (2730 <prvCheckForValidListAndQueue+0x68>)
    2706:	4b0b      	ldr	r3, [pc, #44]	; (2734 <prvCheckForValidListAndQueue+0x6c>)
    2708:	4798      	blx	r3
    270a:	e7e4      	b.n	26d6 <prvCheckForValidListAndQueue+0xe>
    270c:	00001021 	.word	0x00001021
    2710:	20005028 	.word	0x20005028
    2714:	00001039 	.word	0x00001039
    2718:	20004ffc 	.word	0x20004ffc
    271c:	000015f5 	.word	0x000015f5
    2720:	20005010 	.word	0x20005010
    2724:	20004ff4 	.word	0x20004ff4
    2728:	20004ff8 	.word	0x20004ff8
    272c:	000018d5 	.word	0x000018d5
    2730:	00005640 	.word	0x00005640
    2734:	00001cd1 	.word	0x00001cd1

00002738 <xTimerCreateTimerTask>:
{
    2738:	b510      	push	{r4, lr}
    273a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    273c:	4b0b      	ldr	r3, [pc, #44]	; (276c <xTimerCreateTimerTask+0x34>)
    273e:	4798      	blx	r3
	if( xTimerQueue != NULL )
    2740:	4b0b      	ldr	r3, [pc, #44]	; (2770 <xTimerCreateTimerTask+0x38>)
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	2b00      	cmp	r3, #0
    2746:	d00e      	beq.n	2766 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
    2748:	4b0a      	ldr	r3, [pc, #40]	; (2774 <xTimerCreateTimerTask+0x3c>)
    274a:	9301      	str	r3, [sp, #4]
    274c:	2304      	movs	r3, #4
    274e:	9300      	str	r3, [sp, #0]
    2750:	2300      	movs	r3, #0
    2752:	2282      	movs	r2, #130	; 0x82
    2754:	0052      	lsls	r2, r2, #1
    2756:	4908      	ldr	r1, [pc, #32]	; (2778 <xTimerCreateTimerTask+0x40>)
    2758:	4808      	ldr	r0, [pc, #32]	; (277c <xTimerCreateTimerTask+0x44>)
    275a:	4c09      	ldr	r4, [pc, #36]	; (2780 <xTimerCreateTimerTask+0x48>)
    275c:	47a0      	blx	r4
	configASSERT( xReturn );
    275e:	2800      	cmp	r0, #0
    2760:	d001      	beq.n	2766 <xTimerCreateTimerTask+0x2e>
}
    2762:	b002      	add	sp, #8
    2764:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    2766:	b672      	cpsid	i
    2768:	e7fe      	b.n	2768 <xTimerCreateTimerTask+0x30>
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	000026c9 	.word	0x000026c9
    2770:	20005028 	.word	0x20005028
    2774:	2000502c 	.word	0x2000502c
    2778:	00005648 	.word	0x00005648
    277c:	000028a9 	.word	0x000028a9
    2780:	00001ea1 	.word	0x00001ea1

00002784 <xTimerGenericCommand>:
{
    2784:	b530      	push	{r4, r5, lr}
    2786:	b085      	sub	sp, #20
    2788:	0004      	movs	r4, r0
    278a:	001d      	movs	r5, r3
	configASSERT( xTimer );
    278c:	2800      	cmp	r0, #0
    278e:	d014      	beq.n	27ba <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    2790:	4b13      	ldr	r3, [pc, #76]	; (27e0 <xTimerGenericCommand+0x5c>)
    2792:	6818      	ldr	r0, [r3, #0]
    2794:	2800      	cmp	r0, #0
    2796:	d021      	beq.n	27dc <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    2798:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    279a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    279c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    279e:	2905      	cmp	r1, #5
    27a0:	dc15      	bgt.n	27ce <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    27a2:	4b10      	ldr	r3, [pc, #64]	; (27e4 <xTimerGenericCommand+0x60>)
    27a4:	4798      	blx	r3
    27a6:	2802      	cmp	r0, #2
    27a8:	d009      	beq.n	27be <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    27aa:	4b0d      	ldr	r3, [pc, #52]	; (27e0 <xTimerGenericCommand+0x5c>)
    27ac:	6818      	ldr	r0, [r3, #0]
    27ae:	2300      	movs	r3, #0
    27b0:	2200      	movs	r2, #0
    27b2:	4669      	mov	r1, sp
    27b4:	4c0c      	ldr	r4, [pc, #48]	; (27e8 <xTimerGenericCommand+0x64>)
    27b6:	47a0      	blx	r4
    27b8:	e00e      	b.n	27d8 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    27ba:	b672      	cpsid	i
    27bc:	e7fe      	b.n	27bc <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    27be:	4b08      	ldr	r3, [pc, #32]	; (27e0 <xTimerGenericCommand+0x5c>)
    27c0:	6818      	ldr	r0, [r3, #0]
    27c2:	2300      	movs	r3, #0
    27c4:	9a08      	ldr	r2, [sp, #32]
    27c6:	4669      	mov	r1, sp
    27c8:	4c07      	ldr	r4, [pc, #28]	; (27e8 <xTimerGenericCommand+0x64>)
    27ca:	47a0      	blx	r4
    27cc:	e004      	b.n	27d8 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    27ce:	2300      	movs	r3, #0
    27d0:	002a      	movs	r2, r5
    27d2:	4669      	mov	r1, sp
    27d4:	4c05      	ldr	r4, [pc, #20]	; (27ec <xTimerGenericCommand+0x68>)
    27d6:	47a0      	blx	r4
}
    27d8:	b005      	add	sp, #20
    27da:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    27dc:	2000      	movs	r0, #0
	return xReturn;
    27de:	e7fb      	b.n	27d8 <xTimerGenericCommand+0x54>
    27e0:	20005028 	.word	0x20005028
    27e4:	000025e5 	.word	0x000025e5
    27e8:	00001921 	.word	0x00001921
    27ec:	00001aad 	.word	0x00001aad

000027f0 <prvSampleTimeNow>:
{
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f2:	46d6      	mov	lr, sl
    27f4:	464f      	mov	r7, r9
    27f6:	4646      	mov	r6, r8
    27f8:	b5c0      	push	{r6, r7, lr}
    27fa:	b082      	sub	sp, #8
    27fc:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    27fe:	4b23      	ldr	r3, [pc, #140]	; (288c <prvSampleTimeNow+0x9c>)
    2800:	4798      	blx	r3
    2802:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    2804:	4b22      	ldr	r3, [pc, #136]	; (2890 <prvSampleTimeNow+0xa0>)
    2806:	681b      	ldr	r3, [r3, #0]
    2808:	4298      	cmp	r0, r3
    280a:	d317      	bcc.n	283c <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    280c:	2300      	movs	r3, #0
    280e:	4642      	mov	r2, r8
    2810:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    2812:	4b1f      	ldr	r3, [pc, #124]	; (2890 <prvSampleTimeNow+0xa0>)
    2814:	4652      	mov	r2, sl
    2816:	601a      	str	r2, [r3, #0]
}
    2818:	4650      	mov	r0, sl
    281a:	b002      	add	sp, #8
    281c:	bc1c      	pop	{r2, r3, r4}
    281e:	4690      	mov	r8, r2
    2820:	4699      	mov	r9, r3
    2822:	46a2      	mov	sl, r4
    2824:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2826:	2300      	movs	r3, #0
    2828:	9300      	str	r3, [sp, #0]
    282a:	003a      	movs	r2, r7
    282c:	2100      	movs	r1, #0
    282e:	0020      	movs	r0, r4
    2830:	4c18      	ldr	r4, [pc, #96]	; (2894 <prvSampleTimeNow+0xa4>)
    2832:	47a0      	blx	r4
				configASSERT( xResult );
    2834:	2800      	cmp	r0, #0
    2836:	d104      	bne.n	2842 <prvSampleTimeNow+0x52>
    2838:	b672      	cpsid	i
    283a:	e7fe      	b.n	283a <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    283c:	4d16      	ldr	r5, [pc, #88]	; (2898 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    283e:	4b17      	ldr	r3, [pc, #92]	; (289c <prvSampleTimeNow+0xac>)
    2840:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2842:	682b      	ldr	r3, [r5, #0]
    2844:	681a      	ldr	r2, [r3, #0]
    2846:	2a00      	cmp	r2, #0
    2848:	d017      	beq.n	287a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    284a:	68db      	ldr	r3, [r3, #12]
    284c:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    284e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2850:	1d26      	adds	r6, r4, #4
    2852:	0030      	movs	r0, r6
    2854:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2856:	0020      	movs	r0, r4
    2858:	6a63      	ldr	r3, [r4, #36]	; 0x24
    285a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    285c:	69e3      	ldr	r3, [r4, #28]
    285e:	2b01      	cmp	r3, #1
    2860:	d1ef      	bne.n	2842 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2862:	69a3      	ldr	r3, [r4, #24]
    2864:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    2866:	429f      	cmp	r7, r3
    2868:	d2dd      	bcs.n	2826 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    286a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    286c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    286e:	4b0a      	ldr	r3, [pc, #40]	; (2898 <prvSampleTimeNow+0xa8>)
    2870:	6818      	ldr	r0, [r3, #0]
    2872:	0031      	movs	r1, r6
    2874:	4b0a      	ldr	r3, [pc, #40]	; (28a0 <prvSampleTimeNow+0xb0>)
    2876:	4798      	blx	r3
    2878:	e7e3      	b.n	2842 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    287a:	4a0a      	ldr	r2, [pc, #40]	; (28a4 <prvSampleTimeNow+0xb4>)
    287c:	4906      	ldr	r1, [pc, #24]	; (2898 <prvSampleTimeNow+0xa8>)
    287e:	6810      	ldr	r0, [r2, #0]
    2880:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2882:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    2884:	2301      	movs	r3, #1
    2886:	4642      	mov	r2, r8
    2888:	6013      	str	r3, [r2, #0]
    288a:	e7c2      	b.n	2812 <prvSampleTimeNow+0x22>
    288c:	0000210d 	.word	0x0000210d
    2890:	20005024 	.word	0x20005024
    2894:	00002785 	.word	0x00002785
    2898:	20004ff4 	.word	0x20004ff4
    289c:	00001657 	.word	0x00001657
    28a0:	00001629 	.word	0x00001629
    28a4:	20004ff8 	.word	0x20004ff8

000028a8 <prvTimerTask>:
{
    28a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28aa:	b08d      	sub	sp, #52	; 0x34
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28ac:	4f59      	ldr	r7, [pc, #356]	; (2a14 <prvTimerTask+0x16c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    28ae:	4b5a      	ldr	r3, [pc, #360]	; (2a18 <prvTimerTask+0x170>)
    28b0:	681b      	ldr	r3, [r3, #0]
    28b2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    28b4:	2a00      	cmp	r2, #0
    28b6:	d00e      	beq.n	28d6 <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    28b8:	68db      	ldr	r3, [r3, #12]
    28ba:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    28bc:	4b57      	ldr	r3, [pc, #348]	; (2a1c <prvTimerTask+0x174>)
    28be:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28c0:	a808      	add	r0, sp, #32
    28c2:	4b57      	ldr	r3, [pc, #348]	; (2a20 <prvTimerTask+0x178>)
    28c4:	4798      	blx	r3
    28c6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    28c8:	9b08      	ldr	r3, [sp, #32]
    28ca:	2b00      	cmp	r3, #0
    28cc:	d146      	bne.n	295c <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    28ce:	42a0      	cmp	r0, r4
    28d0:	d21d      	bcs.n	290e <prvTimerTask+0x66>
    28d2:	2200      	movs	r2, #0
    28d4:	e00f      	b.n	28f6 <prvTimerTask+0x4e>
	vTaskSuspendAll();
    28d6:	4b51      	ldr	r3, [pc, #324]	; (2a1c <prvTimerTask+0x174>)
    28d8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28da:	a808      	add	r0, sp, #32
    28dc:	4b50      	ldr	r3, [pc, #320]	; (2a20 <prvTimerTask+0x178>)
    28de:	4798      	blx	r3
    28e0:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    28e2:	9b08      	ldr	r3, [sp, #32]
    28e4:	2b00      	cmp	r3, #0
    28e6:	d139      	bne.n	295c <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    28e8:	4b4e      	ldr	r3, [pc, #312]	; (2a24 <prvTimerTask+0x17c>)
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	425a      	negs	r2, r3
    28f0:	415a      	adcs	r2, r3
    28f2:	b2d2      	uxtb	r2, r2
    28f4:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    28f6:	1b61      	subs	r1, r4, r5
    28f8:	4b4b      	ldr	r3, [pc, #300]	; (2a28 <prvTimerTask+0x180>)
    28fa:	6818      	ldr	r0, [r3, #0]
    28fc:	4b4b      	ldr	r3, [pc, #300]	; (2a2c <prvTimerTask+0x184>)
    28fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2900:	4b4b      	ldr	r3, [pc, #300]	; (2a30 <prvTimerTask+0x188>)
    2902:	4798      	blx	r3
    2904:	2800      	cmp	r0, #0
    2906:	d026      	beq.n	2956 <prvTimerTask+0xae>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2908:	4d47      	ldr	r5, [pc, #284]	; (2a28 <prvTimerTask+0x180>)
    290a:	4c4a      	ldr	r4, [pc, #296]	; (2a34 <prvTimerTask+0x18c>)
    290c:	e036      	b.n	297c <prvTimerTask+0xd4>
				( void ) xTaskResumeAll();
    290e:	4b48      	ldr	r3, [pc, #288]	; (2a30 <prvTimerTask+0x188>)
    2910:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2912:	4b41      	ldr	r3, [pc, #260]	; (2a18 <prvTimerTask+0x170>)
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	68db      	ldr	r3, [r3, #12]
    2918:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    291a:	1d30      	adds	r0, r6, #4
    291c:	4b3d      	ldr	r3, [pc, #244]	; (2a14 <prvTimerTask+0x16c>)
    291e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2920:	69f3      	ldr	r3, [r6, #28]
    2922:	2b01      	cmp	r3, #1
    2924:	d003      	beq.n	292e <prvTimerTask+0x86>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2926:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2928:	0030      	movs	r0, r6
    292a:	4798      	blx	r3
    292c:	e7ec      	b.n	2908 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    292e:	69b3      	ldr	r3, [r6, #24]
    2930:	18e1      	adds	r1, r4, r3
    2932:	0023      	movs	r3, r4
    2934:	002a      	movs	r2, r5
    2936:	0030      	movs	r0, r6
    2938:	4d3f      	ldr	r5, [pc, #252]	; (2a38 <prvTimerTask+0x190>)
    293a:	47a8      	blx	r5
    293c:	2800      	cmp	r0, #0
    293e:	d0f2      	beq.n	2926 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2940:	2300      	movs	r3, #0
    2942:	9300      	str	r3, [sp, #0]
    2944:	0022      	movs	r2, r4
    2946:	2100      	movs	r1, #0
    2948:	0030      	movs	r0, r6
    294a:	4c3c      	ldr	r4, [pc, #240]	; (2a3c <prvTimerTask+0x194>)
    294c:	47a0      	blx	r4
			configASSERT( xResult );
    294e:	2800      	cmp	r0, #0
    2950:	d1e9      	bne.n	2926 <prvTimerTask+0x7e>
    2952:	b672      	cpsid	i
    2954:	e7fe      	b.n	2954 <prvTimerTask+0xac>
					portYIELD_WITHIN_API();
    2956:	4b3a      	ldr	r3, [pc, #232]	; (2a40 <prvTimerTask+0x198>)
    2958:	4798      	blx	r3
    295a:	e7d5      	b.n	2908 <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    295c:	4b34      	ldr	r3, [pc, #208]	; (2a30 <prvTimerTask+0x188>)
    295e:	4798      	blx	r3
    2960:	e7d2      	b.n	2908 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    2962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2964:	9303      	str	r3, [sp, #12]
    2966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2968:	9304      	str	r3, [sp, #16]
    296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    296c:	9305      	str	r3, [sp, #20]
    296e:	9903      	ldr	r1, [sp, #12]
    2970:	9804      	ldr	r0, [sp, #16]
    2972:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2974:	9b08      	ldr	r3, [sp, #32]
    2976:	9303      	str	r3, [sp, #12]
    2978:	2b00      	cmp	r3, #0
    297a:	da09      	bge.n	2990 <prvTimerTask+0xe8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    297c:	2200      	movs	r2, #0
    297e:	a908      	add	r1, sp, #32
    2980:	6828      	ldr	r0, [r5, #0]
    2982:	47a0      	blx	r4
    2984:	2800      	cmp	r0, #0
    2986:	d092      	beq.n	28ae <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    2988:	9b08      	ldr	r3, [sp, #32]
    298a:	9303      	str	r3, [sp, #12]
    298c:	2b00      	cmp	r3, #0
    298e:	dbe8      	blt.n	2962 <prvTimerTask+0xba>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2990:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2992:	6973      	ldr	r3, [r6, #20]
    2994:	2b00      	cmp	r3, #0
    2996:	d001      	beq.n	299c <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2998:	1d30      	adds	r0, r6, #4
    299a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    299c:	a807      	add	r0, sp, #28
    299e:	4b20      	ldr	r3, [pc, #128]	; (2a20 <prvTimerTask+0x178>)
    29a0:	4798      	blx	r3
			switch( xMessage.xMessageID )
    29a2:	9b08      	ldr	r3, [sp, #32]
    29a4:	2b09      	cmp	r3, #9
    29a6:	d8e9      	bhi.n	297c <prvTimerTask+0xd4>
    29a8:	009b      	lsls	r3, r3, #2
    29aa:	4a26      	ldr	r2, [pc, #152]	; (2a44 <prvTimerTask+0x19c>)
    29ac:	58d3      	ldr	r3, [r2, r3]
    29ae:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    29b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29b2:	69b2      	ldr	r2, [r6, #24]
    29b4:	4694      	mov	ip, r2
    29b6:	4463      	add	r3, ip
    29b8:	0019      	movs	r1, r3
    29ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29bc:	0002      	movs	r2, r0
    29be:	0030      	movs	r0, r6
    29c0:	4c1d      	ldr	r4, [pc, #116]	; (2a38 <prvTimerTask+0x190>)
    29c2:	47a0      	blx	r4
    29c4:	2800      	cmp	r0, #0
    29c6:	d0a0      	beq.n	290a <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29c8:	0030      	movs	r0, r6
    29ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
    29cc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    29ce:	69f3      	ldr	r3, [r6, #28]
    29d0:	2b01      	cmp	r3, #1
    29d2:	d19a      	bne.n	290a <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    29d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29d6:	69b1      	ldr	r1, [r6, #24]
    29d8:	468c      	mov	ip, r1
    29da:	4463      	add	r3, ip
    29dc:	001a      	movs	r2, r3
    29de:	2300      	movs	r3, #0
    29e0:	9300      	str	r3, [sp, #0]
    29e2:	2100      	movs	r1, #0
    29e4:	0030      	movs	r0, r6
    29e6:	4c15      	ldr	r4, [pc, #84]	; (2a3c <prvTimerTask+0x194>)
    29e8:	47a0      	blx	r4
							configASSERT( xResult );
    29ea:	2800      	cmp	r0, #0
    29ec:	d18d      	bne.n	290a <prvTimerTask+0x62>
    29ee:	b672      	cpsid	i
    29f0:	e7fe      	b.n	29f0 <prvTimerTask+0x148>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    29f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    29f4:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    29f6:	2900      	cmp	r1, #0
    29f8:	d006      	beq.n	2a08 <prvTimerTask+0x160>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    29fa:	1841      	adds	r1, r0, r1
    29fc:	0003      	movs	r3, r0
    29fe:	0002      	movs	r2, r0
    2a00:	0030      	movs	r0, r6
    2a02:	4c0d      	ldr	r4, [pc, #52]	; (2a38 <prvTimerTask+0x190>)
    2a04:	47a0      	blx	r4
    2a06:	e780      	b.n	290a <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2a08:	b672      	cpsid	i
    2a0a:	e7fe      	b.n	2a0a <prvTimerTask+0x162>
						vPortFree( pxTimer );
    2a0c:	0030      	movs	r0, r6
    2a0e:	4b0e      	ldr	r3, [pc, #56]	; (2a48 <prvTimerTask+0x1a0>)
    2a10:	4798      	blx	r3
    2a12:	e77a      	b.n	290a <prvTimerTask+0x62>
    2a14:	00001657 	.word	0x00001657
    2a18:	20004ff4 	.word	0x20004ff4
    2a1c:	000020fd 	.word	0x000020fd
    2a20:	000027f1 	.word	0x000027f1
    2a24:	20004ff8 	.word	0x20004ff8
    2a28:	20005028 	.word	0x20005028
    2a2c:	00001d01 	.word	0x00001d01
    2a30:	00002251 	.word	0x00002251
    2a34:	00001b7d 	.word	0x00001b7d
    2a38:	00002681 	.word	0x00002681
    2a3c:	00002785 	.word	0x00002785
    2a40:	00001009 	.word	0x00001009
    2a44:	00005618 	.word	0x00005618
    2a48:	000011e9 	.word	0x000011e9

00002a4c <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	b082      	sub	sp, #8
    2a50:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
    2a52:	4a39      	ldr	r2, [pc, #228]	; (2b38 <wdt_set_config+0xec>)
    2a54:	6993      	ldr	r3, [r2, #24]
    2a56:	2110      	movs	r1, #16
    2a58:	430b      	orrs	r3, r1
    2a5a:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    2a5c:	4b37      	ldr	r3, [pc, #220]	; (2b3c <wdt_set_config+0xf0>)
    2a5e:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    2a60:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
    2a62:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
    2a64:	2b00      	cmp	r3, #0
    2a66:	db03      	blt.n	2a70 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    2a68:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
    2a6a:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d101      	bne.n	2a74 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    2a70:	b002      	add	sp, #8
    2a72:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    2a74:	7922      	ldrb	r2, [r4, #4]
    2a76:	429a      	cmp	r2, r3
    2a78:	d8fa      	bhi.n	2a70 <wdt_set_config+0x24>
    2a7a:	7962      	ldrb	r2, [r4, #5]
    2a7c:	429a      	cmp	r2, r3
    2a7e:	d8f7      	bhi.n	2a70 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    2a80:	4a2e      	ldr	r2, [pc, #184]	; (2b3c <wdt_set_config+0xf0>)
    2a82:	7813      	ldrb	r3, [r2, #0]
    2a84:	390e      	subs	r1, #14
    2a86:	438b      	bics	r3, r1
    2a88:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    2a8a:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    2a8c:	b25b      	sxtb	r3, r3
    2a8e:	2b00      	cmp	r3, #0
    2a90:	dbfb      	blt.n	2a8a <wdt_set_config+0x3e>
	if(config->enable == false) {
    2a92:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    2a94:	2000      	movs	r0, #0
	if(config->enable == false) {
    2a96:	2b00      	cmp	r3, #0
    2a98:	d0ea      	beq.n	2a70 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
    2a9a:	a901      	add	r1, sp, #4
    2a9c:	78a3      	ldrb	r3, [r4, #2]
    2a9e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    2aa0:	3003      	adds	r0, #3
    2aa2:	4b27      	ldr	r3, [pc, #156]	; (2b40 <wdt_set_config+0xf4>)
    2aa4:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    2aa6:	2003      	movs	r0, #3
    2aa8:	4b26      	ldr	r3, [pc, #152]	; (2b44 <wdt_set_config+0xf8>)
    2aaa:	4798      	blx	r3
	if (config->always_on) {
    2aac:	7823      	ldrb	r3, [r4, #0]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d127      	bne.n	2b02 <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    2ab2:	78e3      	ldrb	r3, [r4, #3]
    2ab4:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    2ab6:	7922      	ldrb	r2, [r4, #4]
    2ab8:	2a00      	cmp	r2, #0
    2aba:	d026      	beq.n	2b0a <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    2abc:	491f      	ldr	r1, [pc, #124]	; (2b3c <wdt_set_config+0xf0>)
    2abe:	780a      	ldrb	r2, [r1, #0]
    2ac0:	2004      	movs	r0, #4
    2ac2:	4302      	orrs	r2, r0
    2ac4:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    2ac6:	7922      	ldrb	r2, [r4, #4]
    2ac8:	3a01      	subs	r2, #1
    2aca:	4082      	lsls	r2, r0
    2acc:	4313      	orrs	r3, r2
    2ace:	491b      	ldr	r1, [pc, #108]	; (2b3c <wdt_set_config+0xf0>)
    2ad0:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
    2ad2:	b252      	sxtb	r2, r2
    2ad4:	2a00      	cmp	r2, #0
    2ad6:	dbfb      	blt.n	2ad0 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	4a18      	ldr	r2, [pc, #96]	; (2b3c <wdt_set_config+0xf0>)
    2adc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    2ade:	7963      	ldrb	r3, [r4, #5]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d118      	bne.n	2b16 <wdt_set_config+0xca>
	if (config->always_on) {
    2ae4:	7823      	ldrb	r3, [r4, #0]
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d01f      	beq.n	2b2a <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    2aea:	4a14      	ldr	r2, [pc, #80]	; (2b3c <wdt_set_config+0xf0>)
    2aec:	7813      	ldrb	r3, [r2, #0]
    2aee:	2180      	movs	r1, #128	; 0x80
    2af0:	430b      	orrs	r3, r1
    2af2:	7013      	strb	r3, [r2, #0]
    2af4:	4a11      	ldr	r2, [pc, #68]	; (2b3c <wdt_set_config+0xf0>)
    2af6:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    2af8:	b25b      	sxtb	r3, r3
    2afa:	2b00      	cmp	r3, #0
    2afc:	dbfb      	blt.n	2af6 <wdt_set_config+0xaa>
	return STATUS_OK;
    2afe:	2000      	movs	r0, #0
    2b00:	e7b6      	b.n	2a70 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
    2b02:	2003      	movs	r0, #3
    2b04:	4b10      	ldr	r3, [pc, #64]	; (2b48 <wdt_set_config+0xfc>)
    2b06:	4798      	blx	r3
    2b08:	e7d3      	b.n	2ab2 <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    2b0a:	490c      	ldr	r1, [pc, #48]	; (2b3c <wdt_set_config+0xf0>)
    2b0c:	780a      	ldrb	r2, [r1, #0]
    2b0e:	2004      	movs	r0, #4
    2b10:	4382      	bics	r2, r0
    2b12:	700a      	strb	r2, [r1, #0]
    2b14:	e7db      	b.n	2ace <wdt_set_config+0x82>
    2b16:	0011      	movs	r1, r2
    2b18:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    2b1a:	b252      	sxtb	r2, r2
    2b1c:	2a00      	cmp	r2, #0
    2b1e:	dbfb      	blt.n	2b18 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    2b20:	3b01      	subs	r3, #1
    2b22:	b2db      	uxtb	r3, r3
    2b24:	4a05      	ldr	r2, [pc, #20]	; (2b3c <wdt_set_config+0xf0>)
    2b26:	7093      	strb	r3, [r2, #2]
    2b28:	e7dc      	b.n	2ae4 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    2b2a:	4a04      	ldr	r2, [pc, #16]	; (2b3c <wdt_set_config+0xf0>)
    2b2c:	7813      	ldrb	r3, [r2, #0]
    2b2e:	2102      	movs	r1, #2
    2b30:	430b      	orrs	r3, r1
    2b32:	7013      	strb	r3, [r2, #0]
    2b34:	e7de      	b.n	2af4 <wdt_set_config+0xa8>
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	40000400 	.word	0x40000400
    2b3c:	40001000 	.word	0x40001000
    2b40:	00003785 	.word	0x00003785
    2b44:	000036f9 	.word	0x000036f9
    2b48:	000037a1 	.word	0x000037a1

00002b4c <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    2b4c:	22a5      	movs	r2, #165	; 0xa5
    2b4e:	4b04      	ldr	r3, [pc, #16]	; (2b60 <wdt_reset_count+0x14>)
    2b50:	721a      	strb	r2, [r3, #8]
    2b52:	001a      	movs	r2, r3
    2b54:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    2b56:	b25b      	sxtb	r3, r3
    2b58:	2b00      	cmp	r3, #0
    2b5a:	dbfb      	blt.n	2b54 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2b5c:	4770      	bx	lr
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	40001000 	.word	0x40001000

00002b64 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2b64:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2b66:	2201      	movs	r2, #1
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <WDT_Handler+0x14>)
    2b6a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    2b6c:	4b03      	ldr	r3, [pc, #12]	; (2b7c <WDT_Handler+0x18>)
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d000      	beq.n	2b76 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    2b74:	4798      	blx	r3
	}
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	40001000 	.word	0x40001000
    2b7c:	200050b4 	.word	0x200050b4

00002b80 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2b80:	b510      	push	{r4, lr}
    2b82:	b082      	sub	sp, #8
    2b84:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2b86:	4b0e      	ldr	r3, [pc, #56]	; (2bc0 <sercom_set_gclk_generator+0x40>)
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d007      	beq.n	2b9e <sercom_set_gclk_generator+0x1e>
    2b8e:	2900      	cmp	r1, #0
    2b90:	d105      	bne.n	2b9e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2b92:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <sercom_set_gclk_generator+0x40>)
    2b94:	785b      	ldrb	r3, [r3, #1]
    2b96:	4283      	cmp	r3, r0
    2b98:	d010      	beq.n	2bbc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2b9a:	201d      	movs	r0, #29
    2b9c:	e00c      	b.n	2bb8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2b9e:	a901      	add	r1, sp, #4
    2ba0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2ba2:	2013      	movs	r0, #19
    2ba4:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <sercom_set_gclk_generator+0x44>)
    2ba6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2ba8:	2013      	movs	r0, #19
    2baa:	4b07      	ldr	r3, [pc, #28]	; (2bc8 <sercom_set_gclk_generator+0x48>)
    2bac:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2bae:	4b04      	ldr	r3, [pc, #16]	; (2bc0 <sercom_set_gclk_generator+0x40>)
    2bb0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2bb2:	2201      	movs	r2, #1
    2bb4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2bb6:	2000      	movs	r0, #0
}
    2bb8:	b002      	add	sp, #8
    2bba:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2bbc:	2000      	movs	r0, #0
    2bbe:	e7fb      	b.n	2bb8 <sercom_set_gclk_generator+0x38>
    2bc0:	20005030 	.word	0x20005030
    2bc4:	00003785 	.word	0x00003785
    2bc8:	000036f9 	.word	0x000036f9

00002bcc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2bcc:	4b40      	ldr	r3, [pc, #256]	; (2cd0 <_sercom_get_default_pad+0x104>)
    2bce:	4298      	cmp	r0, r3
    2bd0:	d031      	beq.n	2c36 <_sercom_get_default_pad+0x6a>
    2bd2:	d90a      	bls.n	2bea <_sercom_get_default_pad+0x1e>
    2bd4:	4b3f      	ldr	r3, [pc, #252]	; (2cd4 <_sercom_get_default_pad+0x108>)
    2bd6:	4298      	cmp	r0, r3
    2bd8:	d04d      	beq.n	2c76 <_sercom_get_default_pad+0xaa>
    2bda:	4b3f      	ldr	r3, [pc, #252]	; (2cd8 <_sercom_get_default_pad+0x10c>)
    2bdc:	4298      	cmp	r0, r3
    2bde:	d05a      	beq.n	2c96 <_sercom_get_default_pad+0xca>
    2be0:	4b3e      	ldr	r3, [pc, #248]	; (2cdc <_sercom_get_default_pad+0x110>)
    2be2:	4298      	cmp	r0, r3
    2be4:	d037      	beq.n	2c56 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2be6:	2000      	movs	r0, #0
}
    2be8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2bea:	4b3d      	ldr	r3, [pc, #244]	; (2ce0 <_sercom_get_default_pad+0x114>)
    2bec:	4298      	cmp	r0, r3
    2bee:	d00c      	beq.n	2c0a <_sercom_get_default_pad+0x3e>
    2bf0:	4b3c      	ldr	r3, [pc, #240]	; (2ce4 <_sercom_get_default_pad+0x118>)
    2bf2:	4298      	cmp	r0, r3
    2bf4:	d1f7      	bne.n	2be6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2bf6:	2901      	cmp	r1, #1
    2bf8:	d017      	beq.n	2c2a <_sercom_get_default_pad+0x5e>
    2bfa:	2900      	cmp	r1, #0
    2bfc:	d05d      	beq.n	2cba <_sercom_get_default_pad+0xee>
    2bfe:	2902      	cmp	r1, #2
    2c00:	d015      	beq.n	2c2e <_sercom_get_default_pad+0x62>
    2c02:	2903      	cmp	r1, #3
    2c04:	d015      	beq.n	2c32 <_sercom_get_default_pad+0x66>
	return 0;
    2c06:	2000      	movs	r0, #0
    2c08:	e7ee      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c0a:	2901      	cmp	r1, #1
    2c0c:	d007      	beq.n	2c1e <_sercom_get_default_pad+0x52>
    2c0e:	2900      	cmp	r1, #0
    2c10:	d051      	beq.n	2cb6 <_sercom_get_default_pad+0xea>
    2c12:	2902      	cmp	r1, #2
    2c14:	d005      	beq.n	2c22 <_sercom_get_default_pad+0x56>
    2c16:	2903      	cmp	r1, #3
    2c18:	d005      	beq.n	2c26 <_sercom_get_default_pad+0x5a>
	return 0;
    2c1a:	2000      	movs	r0, #0
    2c1c:	e7e4      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c1e:	4832      	ldr	r0, [pc, #200]	; (2ce8 <_sercom_get_default_pad+0x11c>)
    2c20:	e7e2      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c22:	4832      	ldr	r0, [pc, #200]	; (2cec <_sercom_get_default_pad+0x120>)
    2c24:	e7e0      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c26:	4832      	ldr	r0, [pc, #200]	; (2cf0 <_sercom_get_default_pad+0x124>)
    2c28:	e7de      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c2a:	4832      	ldr	r0, [pc, #200]	; (2cf4 <_sercom_get_default_pad+0x128>)
    2c2c:	e7dc      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c2e:	4832      	ldr	r0, [pc, #200]	; (2cf8 <_sercom_get_default_pad+0x12c>)
    2c30:	e7da      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c32:	4832      	ldr	r0, [pc, #200]	; (2cfc <_sercom_get_default_pad+0x130>)
    2c34:	e7d8      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c36:	2901      	cmp	r1, #1
    2c38:	d007      	beq.n	2c4a <_sercom_get_default_pad+0x7e>
    2c3a:	2900      	cmp	r1, #0
    2c3c:	d03f      	beq.n	2cbe <_sercom_get_default_pad+0xf2>
    2c3e:	2902      	cmp	r1, #2
    2c40:	d005      	beq.n	2c4e <_sercom_get_default_pad+0x82>
    2c42:	2903      	cmp	r1, #3
    2c44:	d005      	beq.n	2c52 <_sercom_get_default_pad+0x86>
	return 0;
    2c46:	2000      	movs	r0, #0
    2c48:	e7ce      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c4a:	482d      	ldr	r0, [pc, #180]	; (2d00 <_sercom_get_default_pad+0x134>)
    2c4c:	e7cc      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c4e:	482d      	ldr	r0, [pc, #180]	; (2d04 <_sercom_get_default_pad+0x138>)
    2c50:	e7ca      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c52:	482d      	ldr	r0, [pc, #180]	; (2d08 <_sercom_get_default_pad+0x13c>)
    2c54:	e7c8      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c56:	2901      	cmp	r1, #1
    2c58:	d007      	beq.n	2c6a <_sercom_get_default_pad+0x9e>
    2c5a:	2900      	cmp	r1, #0
    2c5c:	d031      	beq.n	2cc2 <_sercom_get_default_pad+0xf6>
    2c5e:	2902      	cmp	r1, #2
    2c60:	d005      	beq.n	2c6e <_sercom_get_default_pad+0xa2>
    2c62:	2903      	cmp	r1, #3
    2c64:	d005      	beq.n	2c72 <_sercom_get_default_pad+0xa6>
	return 0;
    2c66:	2000      	movs	r0, #0
    2c68:	e7be      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c6a:	4828      	ldr	r0, [pc, #160]	; (2d0c <_sercom_get_default_pad+0x140>)
    2c6c:	e7bc      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c6e:	4828      	ldr	r0, [pc, #160]	; (2d10 <_sercom_get_default_pad+0x144>)
    2c70:	e7ba      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c72:	4828      	ldr	r0, [pc, #160]	; (2d14 <_sercom_get_default_pad+0x148>)
    2c74:	e7b8      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c76:	2901      	cmp	r1, #1
    2c78:	d007      	beq.n	2c8a <_sercom_get_default_pad+0xbe>
    2c7a:	2900      	cmp	r1, #0
    2c7c:	d023      	beq.n	2cc6 <_sercom_get_default_pad+0xfa>
    2c7e:	2902      	cmp	r1, #2
    2c80:	d005      	beq.n	2c8e <_sercom_get_default_pad+0xc2>
    2c82:	2903      	cmp	r1, #3
    2c84:	d005      	beq.n	2c92 <_sercom_get_default_pad+0xc6>
	return 0;
    2c86:	2000      	movs	r0, #0
    2c88:	e7ae      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2c8a:	4823      	ldr	r0, [pc, #140]	; (2d18 <_sercom_get_default_pad+0x14c>)
    2c8c:	e7ac      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c8e:	4823      	ldr	r0, [pc, #140]	; (2d1c <_sercom_get_default_pad+0x150>)
    2c90:	e7aa      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c92:	4823      	ldr	r0, [pc, #140]	; (2d20 <_sercom_get_default_pad+0x154>)
    2c94:	e7a8      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2c96:	2901      	cmp	r1, #1
    2c98:	d007      	beq.n	2caa <_sercom_get_default_pad+0xde>
    2c9a:	2900      	cmp	r1, #0
    2c9c:	d015      	beq.n	2cca <_sercom_get_default_pad+0xfe>
    2c9e:	2902      	cmp	r1, #2
    2ca0:	d005      	beq.n	2cae <_sercom_get_default_pad+0xe2>
    2ca2:	2903      	cmp	r1, #3
    2ca4:	d005      	beq.n	2cb2 <_sercom_get_default_pad+0xe6>
	return 0;
    2ca6:	2000      	movs	r0, #0
    2ca8:	e79e      	b.n	2be8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2caa:	481e      	ldr	r0, [pc, #120]	; (2d24 <_sercom_get_default_pad+0x158>)
    2cac:	e79c      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cae:	481e      	ldr	r0, [pc, #120]	; (2d28 <_sercom_get_default_pad+0x15c>)
    2cb0:	e79a      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cb2:	481e      	ldr	r0, [pc, #120]	; (2d2c <_sercom_get_default_pad+0x160>)
    2cb4:	e798      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cb6:	481e      	ldr	r0, [pc, #120]	; (2d30 <_sercom_get_default_pad+0x164>)
    2cb8:	e796      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cba:	2003      	movs	r0, #3
    2cbc:	e794      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cbe:	481d      	ldr	r0, [pc, #116]	; (2d34 <_sercom_get_default_pad+0x168>)
    2cc0:	e792      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cc2:	481d      	ldr	r0, [pc, #116]	; (2d38 <_sercom_get_default_pad+0x16c>)
    2cc4:	e790      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cc6:	481d      	ldr	r0, [pc, #116]	; (2d3c <_sercom_get_default_pad+0x170>)
    2cc8:	e78e      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cca:	481d      	ldr	r0, [pc, #116]	; (2d40 <_sercom_get_default_pad+0x174>)
    2ccc:	e78c      	b.n	2be8 <_sercom_get_default_pad+0x1c>
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	42001000 	.word	0x42001000
    2cd4:	42001800 	.word	0x42001800
    2cd8:	42001c00 	.word	0x42001c00
    2cdc:	42001400 	.word	0x42001400
    2ce0:	42000800 	.word	0x42000800
    2ce4:	42000c00 	.word	0x42000c00
    2ce8:	00050003 	.word	0x00050003
    2cec:	00060003 	.word	0x00060003
    2cf0:	00070003 	.word	0x00070003
    2cf4:	00010003 	.word	0x00010003
    2cf8:	001e0003 	.word	0x001e0003
    2cfc:	001f0003 	.word	0x001f0003
    2d00:	00090003 	.word	0x00090003
    2d04:	000a0003 	.word	0x000a0003
    2d08:	000b0003 	.word	0x000b0003
    2d0c:	00110003 	.word	0x00110003
    2d10:	00120003 	.word	0x00120003
    2d14:	00130003 	.word	0x00130003
    2d18:	000d0003 	.word	0x000d0003
    2d1c:	000e0003 	.word	0x000e0003
    2d20:	000f0003 	.word	0x000f0003
    2d24:	00170003 	.word	0x00170003
    2d28:	00180003 	.word	0x00180003
    2d2c:	00190003 	.word	0x00190003
    2d30:	00040003 	.word	0x00040003
    2d34:	00080003 	.word	0x00080003
    2d38:	00100003 	.word	0x00100003
    2d3c:	000c0003 	.word	0x000c0003
    2d40:	00160003 	.word	0x00160003

00002d44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2d44:	b530      	push	{r4, r5, lr}
    2d46:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2d48:	4b0b      	ldr	r3, [pc, #44]	; (2d78 <_sercom_get_sercom_inst_index+0x34>)
    2d4a:	466a      	mov	r2, sp
    2d4c:	cb32      	ldmia	r3!, {r1, r4, r5}
    2d4e:	c232      	stmia	r2!, {r1, r4, r5}
    2d50:	cb32      	ldmia	r3!, {r1, r4, r5}
    2d52:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2d54:	9b00      	ldr	r3, [sp, #0]
    2d56:	4283      	cmp	r3, r0
    2d58:	d00b      	beq.n	2d72 <_sercom_get_sercom_inst_index+0x2e>
    2d5a:	2301      	movs	r3, #1
    2d5c:	009a      	lsls	r2, r3, #2
    2d5e:	4669      	mov	r1, sp
    2d60:	5852      	ldr	r2, [r2, r1]
    2d62:	4282      	cmp	r2, r0
    2d64:	d006      	beq.n	2d74 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d66:	3301      	adds	r3, #1
    2d68:	2b06      	cmp	r3, #6
    2d6a:	d1f7      	bne.n	2d5c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2d6c:	2000      	movs	r0, #0
}
    2d6e:	b007      	add	sp, #28
    2d70:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d72:	2300      	movs	r3, #0
			return i;
    2d74:	b2d8      	uxtb	r0, r3
    2d76:	e7fa      	b.n	2d6e <_sercom_get_sercom_inst_index+0x2a>
    2d78:	00005650 	.word	0x00005650

00002d7c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2d7c:	4770      	bx	lr
	...

00002d80 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2d82:	4b0a      	ldr	r3, [pc, #40]	; (2dac <_sercom_set_handler+0x2c>)
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d10c      	bne.n	2da4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2d8a:	4f09      	ldr	r7, [pc, #36]	; (2db0 <_sercom_set_handler+0x30>)
    2d8c:	4e09      	ldr	r6, [pc, #36]	; (2db4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2d8e:	4d0a      	ldr	r5, [pc, #40]	; (2db8 <_sercom_set_handler+0x38>)
    2d90:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2d92:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2d94:	195a      	adds	r2, r3, r5
    2d96:	6014      	str	r4, [r2, #0]
    2d98:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2d9a:	2b18      	cmp	r3, #24
    2d9c:	d1f9      	bne.n	2d92 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2d9e:	2201      	movs	r2, #1
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <_sercom_set_handler+0x2c>)
    2da2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2da4:	0080      	lsls	r0, r0, #2
    2da6:	4b02      	ldr	r3, [pc, #8]	; (2db0 <_sercom_set_handler+0x30>)
    2da8:	50c1      	str	r1, [r0, r3]
}
    2daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dac:	20005032 	.word	0x20005032
    2db0:	20005034 	.word	0x20005034
    2db4:	00002d7d 	.word	0x00002d7d
    2db8:	200050b8 	.word	0x200050b8

00002dbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2dbc:	b500      	push	{lr}
    2dbe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2dc0:	2309      	movs	r3, #9
    2dc2:	466a      	mov	r2, sp
    2dc4:	7013      	strb	r3, [r2, #0]
    2dc6:	3301      	adds	r3, #1
    2dc8:	7053      	strb	r3, [r2, #1]
    2dca:	3301      	adds	r3, #1
    2dcc:	7093      	strb	r3, [r2, #2]
    2dce:	3301      	adds	r3, #1
    2dd0:	70d3      	strb	r3, [r2, #3]
    2dd2:	3301      	adds	r3, #1
    2dd4:	7113      	strb	r3, [r2, #4]
    2dd6:	3301      	adds	r3, #1
    2dd8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2dda:	4b03      	ldr	r3, [pc, #12]	; (2de8 <_sercom_get_interrupt_vector+0x2c>)
    2ddc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2dde:	466b      	mov	r3, sp
    2de0:	5618      	ldrsb	r0, [r3, r0]
}
    2de2:	b003      	add	sp, #12
    2de4:	bd00      	pop	{pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	00002d45 	.word	0x00002d45

00002dec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2dec:	b510      	push	{r4, lr}
    2dee:	4b02      	ldr	r3, [pc, #8]	; (2df8 <SERCOM0_Handler+0xc>)
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	2000      	movs	r0, #0
    2df4:	4798      	blx	r3
    2df6:	bd10      	pop	{r4, pc}
    2df8:	20005034 	.word	0x20005034

00002dfc <SERCOM1_Handler>:
    2dfc:	b510      	push	{r4, lr}
    2dfe:	4b02      	ldr	r3, [pc, #8]	; (2e08 <SERCOM1_Handler+0xc>)
    2e00:	685b      	ldr	r3, [r3, #4]
    2e02:	2001      	movs	r0, #1
    2e04:	4798      	blx	r3
    2e06:	bd10      	pop	{r4, pc}
    2e08:	20005034 	.word	0x20005034

00002e0c <SERCOM2_Handler>:
    2e0c:	b510      	push	{r4, lr}
    2e0e:	4b02      	ldr	r3, [pc, #8]	; (2e18 <SERCOM2_Handler+0xc>)
    2e10:	689b      	ldr	r3, [r3, #8]
    2e12:	2002      	movs	r0, #2
    2e14:	4798      	blx	r3
    2e16:	bd10      	pop	{r4, pc}
    2e18:	20005034 	.word	0x20005034

00002e1c <SERCOM3_Handler>:
    2e1c:	b510      	push	{r4, lr}
    2e1e:	4b02      	ldr	r3, [pc, #8]	; (2e28 <SERCOM3_Handler+0xc>)
    2e20:	68db      	ldr	r3, [r3, #12]
    2e22:	2003      	movs	r0, #3
    2e24:	4798      	blx	r3
    2e26:	bd10      	pop	{r4, pc}
    2e28:	20005034 	.word	0x20005034

00002e2c <SERCOM4_Handler>:
    2e2c:	b510      	push	{r4, lr}
    2e2e:	4b02      	ldr	r3, [pc, #8]	; (2e38 <SERCOM4_Handler+0xc>)
    2e30:	691b      	ldr	r3, [r3, #16]
    2e32:	2004      	movs	r0, #4
    2e34:	4798      	blx	r3
    2e36:	bd10      	pop	{r4, pc}
    2e38:	20005034 	.word	0x20005034

00002e3c <SERCOM5_Handler>:
    2e3c:	b510      	push	{r4, lr}
    2e3e:	4b02      	ldr	r3, [pc, #8]	; (2e48 <SERCOM5_Handler+0xc>)
    2e40:	695b      	ldr	r3, [r3, #20]
    2e42:	2005      	movs	r0, #5
    2e44:	4798      	blx	r3
    2e46:	bd10      	pop	{r4, pc}
    2e48:	20005034 	.word	0x20005034

00002e4c <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    2e4c:	4770      	bx	lr
	...

00002e50 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2e50:	b570      	push	{r4, r5, r6, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    2e52:	4bc3      	ldr	r3, [pc, #780]	; (3160 <system_board_init+0x310>)
    2e54:	2080      	movs	r0, #128	; 0x80
    2e56:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2e58:	2447      	movs	r4, #71	; 0x47
    2e5a:	5d19      	ldrb	r1, [r3, r4]
    2e5c:	2502      	movs	r5, #2
    2e5e:	4329      	orrs	r1, r5
    2e60:	b2c9      	uxtb	r1, r1
    2e62:	5519      	strb	r1, [r3, r4]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    2e64:	6158      	str	r0, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    2e66:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2e68:	5d1a      	ldrb	r2, [r3, r4]
    2e6a:	432a      	orrs	r2, r5
    2e6c:	b2d2      	uxtb	r2, r2
    2e6e:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    2e70:	4abc      	ldr	r2, [pc, #752]	; (3164 <system_board_init+0x314>)
    2e72:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2e74:	4abc      	ldr	r2, [pc, #752]	; (3168 <system_board_init+0x318>)
    2e76:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    2e78:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    2e7a:	4abc      	ldr	r2, [pc, #752]	; (316c <system_board_init+0x31c>)
    2e7c:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2e7e:	4abc      	ldr	r2, [pc, #752]	; (3170 <system_board_init+0x320>)
    2e80:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2e82:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2e84:	3c46      	subs	r4, #70	; 0x46
    2e86:	387c      	subs	r0, #124	; 0x7c
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2e88:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2e8a:	3301      	adds	r3, #1
    2e8c:	2b20      	cmp	r3, #32
    2e8e:	d00a      	beq.n	2ea6 <system_board_init+0x56>
		if (mask & (1 << i)) {
    2e90:	0022      	movs	r2, r4
    2e92:	409a      	lsls	r2, r3
    2e94:	4210      	tst	r0, r2
    2e96:	d0f8      	beq.n	2e8a <system_board_init+0x3a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2e98:	4ab6      	ldr	r2, [pc, #728]	; (3174 <system_board_init+0x324>)
    2e9a:	1899      	adds	r1, r3, r2
    2e9c:	780a      	ldrb	r2, [r1, #0]
    2e9e:	432a      	orrs	r2, r5
    2ea0:	b2d2      	uxtb	r2, r2
    2ea2:	700a      	strb	r2, [r1, #0]
    2ea4:	e7f1      	b.n	2e8a <system_board_init+0x3a>
	base->WRCONFIG.reg =
    2ea6:	4bb4      	ldr	r3, [pc, #720]	; (3178 <system_board_init+0x328>)
    2ea8:	4ab4      	ldr	r2, [pc, #720]	; (317c <system_board_init+0x32c>)
    2eaa:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2eac:	4ab0      	ldr	r2, [pc, #704]	; (3170 <system_board_init+0x320>)
    2eae:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2eb0:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2eb2:	2401      	movs	r4, #1
    2eb4:	2080      	movs	r0, #128	; 0x80
    2eb6:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2eb8:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2eba:	3301      	adds	r3, #1
    2ebc:	2b20      	cmp	r3, #32
    2ebe:	d00a      	beq.n	2ed6 <system_board_init+0x86>
		if (mask & (1 << i)) {
    2ec0:	0022      	movs	r2, r4
    2ec2:	409a      	lsls	r2, r3
    2ec4:	4202      	tst	r2, r0
    2ec6:	d0f8      	beq.n	2eba <system_board_init+0x6a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2ec8:	4aad      	ldr	r2, [pc, #692]	; (3180 <system_board_init+0x330>)
    2eca:	1899      	adds	r1, r3, r2
    2ecc:	780a      	ldrb	r2, [r1, #0]
    2ece:	432a      	orrs	r2, r5
    2ed0:	b2d2      	uxtb	r2, r2
    2ed2:	700a      	strb	r2, [r1, #0]
    2ed4:	e7f1      	b.n	2eba <system_board_init+0x6a>
	base->WRCONFIG.reg =
    2ed6:	4ba8      	ldr	r3, [pc, #672]	; (3178 <system_board_init+0x328>)
    2ed8:	4aaa      	ldr	r2, [pc, #680]	; (3184 <system_board_init+0x334>)
    2eda:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2edc:	4aa4      	ldr	r2, [pc, #656]	; (3170 <system_board_init+0x320>)
    2ede:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2ee0:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2ee2:	2401      	movs	r4, #1
    2ee4:	2080      	movs	r0, #128	; 0x80
    2ee6:	0080      	lsls	r0, r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2ee8:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2eea:	3301      	adds	r3, #1
    2eec:	2b20      	cmp	r3, #32
    2eee:	d00a      	beq.n	2f06 <system_board_init+0xb6>
		if (mask & (1 << i)) {
    2ef0:	0022      	movs	r2, r4
    2ef2:	409a      	lsls	r2, r3
    2ef4:	4202      	tst	r2, r0
    2ef6:	d0f8      	beq.n	2eea <system_board_init+0x9a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2ef8:	4aa1      	ldr	r2, [pc, #644]	; (3180 <system_board_init+0x330>)
    2efa:	1899      	adds	r1, r3, r2
    2efc:	780a      	ldrb	r2, [r1, #0]
    2efe:	432a      	orrs	r2, r5
    2f00:	b2d2      	uxtb	r2, r2
    2f02:	700a      	strb	r2, [r1, #0]
    2f04:	e7f1      	b.n	2eea <system_board_init+0x9a>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    2f06:	4b96      	ldr	r3, [pc, #600]	; (3160 <system_board_init+0x310>)
    2f08:	2080      	movs	r0, #128	; 0x80
    2f0a:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2f0c:	2447      	movs	r4, #71	; 0x47
    2f0e:	5d19      	ldrb	r1, [r3, r4]
    2f10:	2602      	movs	r6, #2
    2f12:	4331      	orrs	r1, r6
    2f14:	b2c9      	uxtb	r1, r1
    2f16:	5519      	strb	r1, [r3, r4]
	base->WRCONFIG.reg =
    2f18:	4d92      	ldr	r5, [pc, #584]	; (3164 <system_board_init+0x314>)
    2f1a:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2f1c:	4992      	ldr	r1, [pc, #584]	; (3168 <system_board_init+0x318>)
    2f1e:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    2f20:	6158      	str	r0, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    2f22:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2f24:	5d1a      	ldrb	r2, [r3, r4]
    2f26:	4332      	orrs	r2, r6
    2f28:	b2d2      	uxtb	r2, r2
    2f2a:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    2f2c:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2f2e:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    2f30:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    2f32:	4a95      	ldr	r2, [pc, #596]	; (3188 <system_board_init+0x338>)
    2f34:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2f36:	4a8e      	ldr	r2, [pc, #568]	; (3170 <system_board_init+0x320>)
    2f38:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2f3a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2f3c:	3c46      	subs	r4, #70	; 0x46
    2f3e:	3870      	subs	r0, #112	; 0x70
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2f40:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2f42:	3301      	adds	r3, #1
    2f44:	2b20      	cmp	r3, #32
    2f46:	d00a      	beq.n	2f5e <system_board_init+0x10e>
		if (mask & (1 << i)) {
    2f48:	0022      	movs	r2, r4
    2f4a:	409a      	lsls	r2, r3
    2f4c:	4210      	tst	r0, r2
    2f4e:	d0f8      	beq.n	2f42 <system_board_init+0xf2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2f50:	4a88      	ldr	r2, [pc, #544]	; (3174 <system_board_init+0x324>)
    2f52:	1899      	adds	r1, r3, r2
    2f54:	780a      	ldrb	r2, [r1, #0]
    2f56:	432a      	orrs	r2, r5
    2f58:	b2d2      	uxtb	r2, r2
    2f5a:	700a      	strb	r2, [r1, #0]
    2f5c:	e7f1      	b.n	2f42 <system_board_init+0xf2>
	base->WRCONFIG.reg =
    2f5e:	4b80      	ldr	r3, [pc, #512]	; (3160 <system_board_init+0x310>)
    2f60:	4a8a      	ldr	r2, [pc, #552]	; (318c <system_board_init+0x33c>)
    2f62:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2f64:	4a82      	ldr	r2, [pc, #520]	; (3170 <system_board_init+0x320>)
    2f66:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2f68:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2f6a:	2401      	movs	r4, #1
    2f6c:	2020      	movs	r0, #32
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2f6e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2f70:	3301      	adds	r3, #1
    2f72:	2b20      	cmp	r3, #32
    2f74:	d00a      	beq.n	2f8c <system_board_init+0x13c>
		if (mask & (1 << i)) {
    2f76:	0022      	movs	r2, r4
    2f78:	409a      	lsls	r2, r3
    2f7a:	4210      	tst	r0, r2
    2f7c:	d0f8      	beq.n	2f70 <system_board_init+0x120>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2f7e:	4a7d      	ldr	r2, [pc, #500]	; (3174 <system_board_init+0x324>)
    2f80:	1899      	adds	r1, r3, r2
    2f82:	780a      	ldrb	r2, [r1, #0]
    2f84:	432a      	orrs	r2, r5
    2f86:	b2d2      	uxtb	r2, r2
    2f88:	700a      	strb	r2, [r1, #0]
    2f8a:	e7f1      	b.n	2f70 <system_board_init+0x120>
	base->WRCONFIG.reg =
    2f8c:	4b74      	ldr	r3, [pc, #464]	; (3160 <system_board_init+0x310>)
    2f8e:	4a80      	ldr	r2, [pc, #512]	; (3190 <system_board_init+0x340>)
    2f90:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2f92:	4a77      	ldr	r2, [pc, #476]	; (3170 <system_board_init+0x320>)
    2f94:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2f96:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2f98:	2401      	movs	r4, #1
    2f9a:	2040      	movs	r0, #64	; 0x40
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2f9c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2f9e:	3301      	adds	r3, #1
    2fa0:	2b20      	cmp	r3, #32
    2fa2:	d00a      	beq.n	2fba <system_board_init+0x16a>
		if (mask & (1 << i)) {
    2fa4:	0022      	movs	r2, r4
    2fa6:	409a      	lsls	r2, r3
    2fa8:	4210      	tst	r0, r2
    2faa:	d0f8      	beq.n	2f9e <system_board_init+0x14e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2fac:	4a71      	ldr	r2, [pc, #452]	; (3174 <system_board_init+0x324>)
    2fae:	1899      	adds	r1, r3, r2
    2fb0:	780a      	ldrb	r2, [r1, #0]
    2fb2:	432a      	orrs	r2, r5
    2fb4:	b2d2      	uxtb	r2, r2
    2fb6:	700a      	strb	r2, [r1, #0]
    2fb8:	e7f1      	b.n	2f9e <system_board_init+0x14e>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    2fba:	4b69      	ldr	r3, [pc, #420]	; (3160 <system_board_init+0x310>)
    2fbc:	2180      	movs	r1, #128	; 0x80
    2fbe:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2fc0:	2047      	movs	r0, #71	; 0x47
    2fc2:	5c1a      	ldrb	r2, [r3, r0]
    2fc4:	2402      	movs	r4, #2
    2fc6:	4322      	orrs	r2, r4
    2fc8:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    2fca:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    2fcc:	4a71      	ldr	r2, [pc, #452]	; (3194 <system_board_init+0x344>)
    2fce:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    2fd0:	4a71      	ldr	r2, [pc, #452]	; (3198 <system_board_init+0x348>)
    2fd2:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    2fd4:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    2fd6:	3c01      	subs	r4, #1
    2fd8:	2080      	movs	r0, #128	; 0x80
    2fda:	03c0      	lsls	r0, r0, #15
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2fdc:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    2fde:	3301      	adds	r3, #1
    2fe0:	2b20      	cmp	r3, #32
    2fe2:	d00a      	beq.n	2ffa <system_board_init+0x1aa>
		if (mask & (1 << i)) {
    2fe4:	0022      	movs	r2, r4
    2fe6:	409a      	lsls	r2, r3
    2fe8:	4202      	tst	r2, r0
    2fea:	d0f8      	beq.n	2fde <system_board_init+0x18e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    2fec:	4a61      	ldr	r2, [pc, #388]	; (3174 <system_board_init+0x324>)
    2fee:	1899      	adds	r1, r3, r2
    2ff0:	780a      	ldrb	r2, [r1, #0]
    2ff2:	432a      	orrs	r2, r5
    2ff4:	b2d2      	uxtb	r2, r2
    2ff6:	700a      	strb	r2, [r1, #0]
    2ff8:	e7f1      	b.n	2fde <system_board_init+0x18e>
	base->WRCONFIG.reg =
    2ffa:	4b59      	ldr	r3, [pc, #356]	; (3160 <system_board_init+0x310>)
    2ffc:	4a65      	ldr	r2, [pc, #404]	; (3194 <system_board_init+0x344>)
    2ffe:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3000:	4a66      	ldr	r2, [pc, #408]	; (319c <system_board_init+0x34c>)
    3002:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3004:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3006:	2401      	movs	r4, #1
    3008:	2080      	movs	r0, #128	; 0x80
    300a:	0400      	lsls	r0, r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    300c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    300e:	3301      	adds	r3, #1
    3010:	2b20      	cmp	r3, #32
    3012:	d00a      	beq.n	302a <system_board_init+0x1da>
		if (mask & (1 << i)) {
    3014:	0022      	movs	r2, r4
    3016:	409a      	lsls	r2, r3
    3018:	4202      	tst	r2, r0
    301a:	d0f8      	beq.n	300e <system_board_init+0x1be>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    301c:	4a55      	ldr	r2, [pc, #340]	; (3174 <system_board_init+0x324>)
    301e:	1899      	adds	r1, r3, r2
    3020:	780a      	ldrb	r2, [r1, #0]
    3022:	432a      	orrs	r2, r5
    3024:	b2d2      	uxtb	r2, r2
    3026:	700a      	strb	r2, [r1, #0]
    3028:	e7f1      	b.n	300e <system_board_init+0x1be>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    302a:	4b4d      	ldr	r3, [pc, #308]	; (3160 <system_board_init+0x310>)
    302c:	2180      	movs	r1, #128	; 0x80
    302e:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3030:	2047      	movs	r0, #71	; 0x47
    3032:	5c1a      	ldrb	r2, [r3, r0]
    3034:	2402      	movs	r4, #2
    3036:	4322      	orrs	r2, r4
    3038:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    303a:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    303c:	4a55      	ldr	r2, [pc, #340]	; (3194 <system_board_init+0x344>)
    303e:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3040:	4a57      	ldr	r2, [pc, #348]	; (31a0 <system_board_init+0x350>)
    3042:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3044:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3046:	3c01      	subs	r4, #1
    3048:	2080      	movs	r0, #128	; 0x80
    304a:	0240      	lsls	r0, r0, #9
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    304c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    304e:	3301      	adds	r3, #1
    3050:	2b20      	cmp	r3, #32
    3052:	d00a      	beq.n	306a <system_board_init+0x21a>
		if (mask & (1 << i)) {
    3054:	0022      	movs	r2, r4
    3056:	409a      	lsls	r2, r3
    3058:	4202      	tst	r2, r0
    305a:	d0f8      	beq.n	304e <system_board_init+0x1fe>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    305c:	4a45      	ldr	r2, [pc, #276]	; (3174 <system_board_init+0x324>)
    305e:	1899      	adds	r1, r3, r2
    3060:	780a      	ldrb	r2, [r1, #0]
    3062:	432a      	orrs	r2, r5
    3064:	b2d2      	uxtb	r2, r2
    3066:	700a      	strb	r2, [r1, #0]
    3068:	e7f1      	b.n	304e <system_board_init+0x1fe>
	base->WRCONFIG.reg =
    306a:	4b3d      	ldr	r3, [pc, #244]	; (3160 <system_board_init+0x310>)
    306c:	4a49      	ldr	r2, [pc, #292]	; (3194 <system_board_init+0x344>)
    306e:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3070:	4a4c      	ldr	r2, [pc, #304]	; (31a4 <system_board_init+0x354>)
    3072:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3074:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3076:	2401      	movs	r4, #1
    3078:	2080      	movs	r0, #128	; 0x80
    307a:	0280      	lsls	r0, r0, #10
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    307c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    307e:	3301      	adds	r3, #1
    3080:	2b20      	cmp	r3, #32
    3082:	d00a      	beq.n	309a <system_board_init+0x24a>
		if (mask & (1 << i)) {
    3084:	0022      	movs	r2, r4
    3086:	409a      	lsls	r2, r3
    3088:	4202      	tst	r2, r0
    308a:	d0f8      	beq.n	307e <system_board_init+0x22e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    308c:	4a39      	ldr	r2, [pc, #228]	; (3174 <system_board_init+0x324>)
    308e:	1899      	adds	r1, r3, r2
    3090:	780a      	ldrb	r2, [r1, #0]
    3092:	432a      	orrs	r2, r5
    3094:	b2d2      	uxtb	r2, r2
    3096:	700a      	strb	r2, [r1, #0]
    3098:	e7f1      	b.n	307e <system_board_init+0x22e>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    309a:	4b31      	ldr	r3, [pc, #196]	; (3160 <system_board_init+0x310>)
    309c:	2180      	movs	r1, #128	; 0x80
    309e:	0109      	lsls	r1, r1, #4
    30a0:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    30a2:	204b      	movs	r0, #75	; 0x4b
    30a4:	5c1a      	ldrb	r2, [r3, r0]
    30a6:	2402      	movs	r4, #2
    30a8:	4322      	orrs	r2, r4
    30aa:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    30ac:	6199      	str	r1, [r3, #24]
	base->WRCONFIG.reg =
    30ae:	4a3e      	ldr	r2, [pc, #248]	; (31a8 <system_board_init+0x358>)
    30b0:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    30b2:	4a3e      	ldr	r2, [pc, #248]	; (31ac <system_board_init+0x35c>)
    30b4:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    30b6:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    30b8:	3c01      	subs	r4, #1
    30ba:	30b6      	adds	r0, #182	; 0xb6
    30bc:	30ff      	adds	r0, #255	; 0xff
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    30be:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    30c0:	3301      	adds	r3, #1
    30c2:	2b20      	cmp	r3, #32
    30c4:	d00a      	beq.n	30dc <system_board_init+0x28c>
		if (mask & (1 << i)) {
    30c6:	0022      	movs	r2, r4
    30c8:	409a      	lsls	r2, r3
    30ca:	4202      	tst	r2, r0
    30cc:	d0f8      	beq.n	30c0 <system_board_init+0x270>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    30ce:	4a29      	ldr	r2, [pc, #164]	; (3174 <system_board_init+0x324>)
    30d0:	1899      	adds	r1, r3, r2
    30d2:	780a      	ldrb	r2, [r1, #0]
    30d4:	432a      	orrs	r2, r5
    30d6:	b2d2      	uxtb	r2, r2
    30d8:	700a      	strb	r2, [r1, #0]
    30da:	e7f1      	b.n	30c0 <system_board_init+0x270>
	base->WRCONFIG.reg =
    30dc:	4b20      	ldr	r3, [pc, #128]	; (3160 <system_board_init+0x310>)
    30de:	4a34      	ldr	r2, [pc, #208]	; (31b0 <system_board_init+0x360>)
    30e0:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    30e2:	4a32      	ldr	r2, [pc, #200]	; (31ac <system_board_init+0x35c>)
    30e4:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    30e6:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    30e8:	2401      	movs	r4, #1
    30ea:	2080      	movs	r0, #128	; 0x80
    30ec:	00c0      	lsls	r0, r0, #3
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    30ee:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    30f0:	3301      	adds	r3, #1
    30f2:	2b20      	cmp	r3, #32
    30f4:	d00a      	beq.n	310c <system_board_init+0x2bc>
		if (mask & (1 << i)) {
    30f6:	0022      	movs	r2, r4
    30f8:	409a      	lsls	r2, r3
    30fa:	4202      	tst	r2, r0
    30fc:	d0f8      	beq.n	30f0 <system_board_init+0x2a0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    30fe:	4a1d      	ldr	r2, [pc, #116]	; (3174 <system_board_init+0x324>)
    3100:	1899      	adds	r1, r3, r2
    3102:	780a      	ldrb	r2, [r1, #0]
    3104:	432a      	orrs	r2, r5
    3106:	b2d2      	uxtb	r2, r2
    3108:	700a      	strb	r2, [r1, #0]
    310a:	e7f1      	b.n	30f0 <system_board_init+0x2a0>
	base->WRCONFIG.reg =
    310c:	4b14      	ldr	r3, [pc, #80]	; (3160 <system_board_init+0x310>)
    310e:	4a29      	ldr	r2, [pc, #164]	; (31b4 <system_board_init+0x364>)
    3110:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3112:	4a26      	ldr	r2, [pc, #152]	; (31ac <system_board_init+0x35c>)
    3114:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3116:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3118:	2401      	movs	r4, #1
    311a:	2080      	movs	r0, #128	; 0x80
    311c:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    311e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3120:	3301      	adds	r3, #1
    3122:	2b20      	cmp	r3, #32
    3124:	d00a      	beq.n	313c <system_board_init+0x2ec>
		if (mask & (1 << i)) {
    3126:	0022      	movs	r2, r4
    3128:	409a      	lsls	r2, r3
    312a:	4202      	tst	r2, r0
    312c:	d0f8      	beq.n	3120 <system_board_init+0x2d0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    312e:	4a11      	ldr	r2, [pc, #68]	; (3174 <system_board_init+0x324>)
    3130:	1899      	adds	r1, r3, r2
    3132:	780a      	ldrb	r2, [r1, #0]
    3134:	432a      	orrs	r2, r5
    3136:	b2d2      	uxtb	r2, r2
    3138:	700a      	strb	r2, [r1, #0]
    313a:	e7f1      	b.n	3120 <system_board_init+0x2d0>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    313c:	4b08      	ldr	r3, [pc, #32]	; (3160 <system_board_init+0x310>)
    313e:	2080      	movs	r0, #128	; 0x80
    3140:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3142:	2447      	movs	r4, #71	; 0x47
    3144:	5d19      	ldrb	r1, [r3, r4]
    3146:	2502      	movs	r5, #2
    3148:	4329      	orrs	r1, r5
    314a:	b2c9      	uxtb	r1, r1
    314c:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    314e:	6158      	str	r0, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3150:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3152:	5d1a      	ldrb	r2, [r3, r4]
    3154:	432a      	orrs	r2, r5
    3156:	b2d2      	uxtb	r2, r2
    3158:	551a      	strb	r2, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    315a:	6158      	str	r0, [r3, #20]
	ioport_set_pin_dir(BUZZER_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
	ioport_set_pin_dir(WATCHDOG_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(WATCHDOG_GPIO, !WATCHDOG_GPIO_ACTIVE_LEVEL);
	
    315c:	bd70      	pop	{r4, r5, r6, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	41004400 	.word	0x41004400
    3164:	50060080 	.word	0x50060080
    3168:	d0060000 	.word	0xd0060000
    316c:	51020004 	.word	0x51020004
    3170:	d1020000 	.word	0xd1020000
    3174:	41004440 	.word	0x41004440
    3178:	41004480 	.word	0x41004480
    317c:	51020100 	.word	0x51020100
    3180:	410044c0 	.word	0x410044c0
    3184:	51020200 	.word	0x51020200
    3188:	51020010 	.word	0x51020010
    318c:	51020020 	.word	0x51020020
    3190:	51020040 	.word	0x51020040
    3194:	52020000 	.word	0x52020000
    3198:	d2020040 	.word	0xd2020040
    319c:	d2020080 	.word	0xd2020080
    31a0:	d2020001 	.word	0xd2020001
    31a4:	d2020002 	.word	0xd2020002
    31a8:	52020200 	.word	0x52020200
    31ac:	d2020000 	.word	0xd2020000
    31b0:	52020400 	.word	0x52020400
    31b4:	52020100 	.word	0x52020100

000031b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    31b8:	4b0c      	ldr	r3, [pc, #48]	; (31ec <cpu_irq_enter_critical+0x34>)
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2b00      	cmp	r3, #0
    31be:	d106      	bne.n	31ce <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31c0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    31c4:	2b00      	cmp	r3, #0
    31c6:	d007      	beq.n	31d8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    31c8:	2200      	movs	r2, #0
    31ca:	4b09      	ldr	r3, [pc, #36]	; (31f0 <cpu_irq_enter_critical+0x38>)
    31cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    31ce:	4a07      	ldr	r2, [pc, #28]	; (31ec <cpu_irq_enter_critical+0x34>)
    31d0:	6813      	ldr	r3, [r2, #0]
    31d2:	3301      	adds	r3, #1
    31d4:	6013      	str	r3, [r2, #0]
}
    31d6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    31d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    31da:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    31de:	2200      	movs	r2, #0
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <cpu_irq_enter_critical+0x3c>)
    31e2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    31e4:	3201      	adds	r2, #1
    31e6:	4b02      	ldr	r3, [pc, #8]	; (31f0 <cpu_irq_enter_critical+0x38>)
    31e8:	701a      	strb	r2, [r3, #0]
    31ea:	e7f0      	b.n	31ce <cpu_irq_enter_critical+0x16>
    31ec:	2000504c 	.word	0x2000504c
    31f0:	20005050 	.word	0x20005050
    31f4:	20000006 	.word	0x20000006

000031f8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    31f8:	4b08      	ldr	r3, [pc, #32]	; (321c <cpu_irq_leave_critical+0x24>)
    31fa:	681a      	ldr	r2, [r3, #0]
    31fc:	3a01      	subs	r2, #1
    31fe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	2b00      	cmp	r3, #0
    3204:	d109      	bne.n	321a <cpu_irq_leave_critical+0x22>
    3206:	4b06      	ldr	r3, [pc, #24]	; (3220 <cpu_irq_leave_critical+0x28>)
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	2b00      	cmp	r3, #0
    320c:	d005      	beq.n	321a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    320e:	2201      	movs	r2, #1
    3210:	4b04      	ldr	r3, [pc, #16]	; (3224 <cpu_irq_leave_critical+0x2c>)
    3212:	701a      	strb	r2, [r3, #0]
    3214:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3218:	b662      	cpsie	i
	}
}
    321a:	4770      	bx	lr
    321c:	2000504c 	.word	0x2000504c
    3220:	20005050 	.word	0x20005050
    3224:	20000006 	.word	0x20000006

00003228 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3228:	b510      	push	{r4, lr}
	switch (clock_source) {
    322a:	2808      	cmp	r0, #8
    322c:	d803      	bhi.n	3236 <system_clock_source_get_hz+0xe>
    322e:	0080      	lsls	r0, r0, #2
    3230:	4b1c      	ldr	r3, [pc, #112]	; (32a4 <system_clock_source_get_hz+0x7c>)
    3232:	581b      	ldr	r3, [r3, r0]
    3234:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3236:	2000      	movs	r0, #0
    3238:	e032      	b.n	32a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    323a:	4b1b      	ldr	r3, [pc, #108]	; (32a8 <system_clock_source_get_hz+0x80>)
    323c:	6918      	ldr	r0, [r3, #16]
    323e:	e02f      	b.n	32a0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3240:	4b1a      	ldr	r3, [pc, #104]	; (32ac <system_clock_source_get_hz+0x84>)
    3242:	6a1b      	ldr	r3, [r3, #32]
    3244:	059b      	lsls	r3, r3, #22
    3246:	0f9b      	lsrs	r3, r3, #30
    3248:	4819      	ldr	r0, [pc, #100]	; (32b0 <system_clock_source_get_hz+0x88>)
    324a:	40d8      	lsrs	r0, r3
    324c:	e028      	b.n	32a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    324e:	4b16      	ldr	r3, [pc, #88]	; (32a8 <system_clock_source_get_hz+0x80>)
    3250:	6958      	ldr	r0, [r3, #20]
    3252:	e025      	b.n	32a0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3254:	4b14      	ldr	r3, [pc, #80]	; (32a8 <system_clock_source_get_hz+0x80>)
    3256:	681b      	ldr	r3, [r3, #0]
			return 0;
    3258:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    325a:	079b      	lsls	r3, r3, #30
    325c:	d520      	bpl.n	32a0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    325e:	4913      	ldr	r1, [pc, #76]	; (32ac <system_clock_source_get_hz+0x84>)
    3260:	2210      	movs	r2, #16
    3262:	68cb      	ldr	r3, [r1, #12]
    3264:	421a      	tst	r2, r3
    3266:	d0fc      	beq.n	3262 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    3268:	4b0f      	ldr	r3, [pc, #60]	; (32a8 <system_clock_source_get_hz+0x80>)
    326a:	681a      	ldr	r2, [r3, #0]
    326c:	2324      	movs	r3, #36	; 0x24
    326e:	4013      	ands	r3, r2
    3270:	2b04      	cmp	r3, #4
    3272:	d001      	beq.n	3278 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    3274:	480f      	ldr	r0, [pc, #60]	; (32b4 <system_clock_source_get_hz+0x8c>)
    3276:	e013      	b.n	32a0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3278:	2000      	movs	r0, #0
    327a:	4b0f      	ldr	r3, [pc, #60]	; (32b8 <system_clock_source_get_hz+0x90>)
    327c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    327e:	4b0a      	ldr	r3, [pc, #40]	; (32a8 <system_clock_source_get_hz+0x80>)
    3280:	689b      	ldr	r3, [r3, #8]
    3282:	041b      	lsls	r3, r3, #16
    3284:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3286:	4358      	muls	r0, r3
    3288:	e00a      	b.n	32a0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    328a:	2350      	movs	r3, #80	; 0x50
    328c:	4a07      	ldr	r2, [pc, #28]	; (32ac <system_clock_source_get_hz+0x84>)
    328e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3290:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3292:	075b      	lsls	r3, r3, #29
    3294:	d504      	bpl.n	32a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    3296:	4b04      	ldr	r3, [pc, #16]	; (32a8 <system_clock_source_get_hz+0x80>)
    3298:	68d8      	ldr	r0, [r3, #12]
    329a:	e001      	b.n	32a0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    329c:	2080      	movs	r0, #128	; 0x80
    329e:	0200      	lsls	r0, r0, #8
	}
}
    32a0:	bd10      	pop	{r4, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	00005668 	.word	0x00005668
    32a8:	20005054 	.word	0x20005054
    32ac:	40000800 	.word	0x40000800
    32b0:	007a1200 	.word	0x007a1200
    32b4:	02dc6c00 	.word	0x02dc6c00
    32b8:	000037d1 	.word	0x000037d1

000032bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    32bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    32be:	490c      	ldr	r1, [pc, #48]	; (32f0 <system_clock_source_osc8m_set_config+0x34>)
    32c0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    32c2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    32c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    32c6:	7840      	ldrb	r0, [r0, #1]
    32c8:	2201      	movs	r2, #1
    32ca:	4010      	ands	r0, r2
    32cc:	0180      	lsls	r0, r0, #6
    32ce:	2640      	movs	r6, #64	; 0x40
    32d0:	43b3      	bics	r3, r6
    32d2:	4303      	orrs	r3, r0
    32d4:	402a      	ands	r2, r5
    32d6:	01d2      	lsls	r2, r2, #7
    32d8:	2080      	movs	r0, #128	; 0x80
    32da:	4383      	bics	r3, r0
    32dc:	4313      	orrs	r3, r2
    32de:	2203      	movs	r2, #3
    32e0:	4022      	ands	r2, r4
    32e2:	0212      	lsls	r2, r2, #8
    32e4:	4803      	ldr	r0, [pc, #12]	; (32f4 <system_clock_source_osc8m_set_config+0x38>)
    32e6:	4003      	ands	r3, r0
    32e8:	4313      	orrs	r3, r2
    32ea:	620b      	str	r3, [r1, #32]
}
    32ec:	bd70      	pop	{r4, r5, r6, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	40000800 	.word	0x40000800
    32f4:	fffffcff 	.word	0xfffffcff

000032f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    32f8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    32fa:	7a03      	ldrb	r3, [r0, #8]
    32fc:	069b      	lsls	r3, r3, #26
    32fe:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3300:	8942      	ldrh	r2, [r0, #10]
    3302:	0592      	lsls	r2, r2, #22
    3304:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3306:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3308:	4918      	ldr	r1, [pc, #96]	; (336c <system_clock_source_dfll_set_config+0x74>)
    330a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    330c:	7983      	ldrb	r3, [r0, #6]
    330e:	79c2      	ldrb	r2, [r0, #7]
    3310:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3312:	8842      	ldrh	r2, [r0, #2]
    3314:	8884      	ldrh	r4, [r0, #4]
    3316:	4322      	orrs	r2, r4
    3318:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    331a:	7842      	ldrb	r2, [r0, #1]
    331c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    331e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3320:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3322:	7803      	ldrb	r3, [r0, #0]
    3324:	2b04      	cmp	r3, #4
    3326:	d011      	beq.n	334c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3328:	2b20      	cmp	r3, #32
    332a:	d10e      	bne.n	334a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    332c:	7b03      	ldrb	r3, [r0, #12]
    332e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3330:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3332:	4313      	orrs	r3, r2
    3334:	89c2      	ldrh	r2, [r0, #14]
    3336:	0412      	lsls	r2, r2, #16
    3338:	490d      	ldr	r1, [pc, #52]	; (3370 <system_clock_source_dfll_set_config+0x78>)
    333a:	400a      	ands	r2, r1
    333c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    333e:	4a0b      	ldr	r2, [pc, #44]	; (336c <system_clock_source_dfll_set_config+0x74>)
    3340:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3342:	6811      	ldr	r1, [r2, #0]
    3344:	4b0b      	ldr	r3, [pc, #44]	; (3374 <system_clock_source_dfll_set_config+0x7c>)
    3346:	430b      	orrs	r3, r1
    3348:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    334a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    334c:	7b03      	ldrb	r3, [r0, #12]
    334e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3350:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3352:	4313      	orrs	r3, r2
    3354:	89c2      	ldrh	r2, [r0, #14]
    3356:	0412      	lsls	r2, r2, #16
    3358:	4905      	ldr	r1, [pc, #20]	; (3370 <system_clock_source_dfll_set_config+0x78>)
    335a:	400a      	ands	r2, r1
    335c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    335e:	4a03      	ldr	r2, [pc, #12]	; (336c <system_clock_source_dfll_set_config+0x74>)
    3360:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3362:	6813      	ldr	r3, [r2, #0]
    3364:	2104      	movs	r1, #4
    3366:	430b      	orrs	r3, r1
    3368:	6013      	str	r3, [r2, #0]
    336a:	e7ee      	b.n	334a <system_clock_source_dfll_set_config+0x52>
    336c:	20005054 	.word	0x20005054
    3370:	03ff0000 	.word	0x03ff0000
    3374:	00000424 	.word	0x00000424

00003378 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3378:	2808      	cmp	r0, #8
    337a:	d803      	bhi.n	3384 <system_clock_source_enable+0xc>
    337c:	0080      	lsls	r0, r0, #2
    337e:	4b25      	ldr	r3, [pc, #148]	; (3414 <system_clock_source_enable+0x9c>)
    3380:	581b      	ldr	r3, [r3, r0]
    3382:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3384:	2017      	movs	r0, #23
    3386:	e044      	b.n	3412 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3388:	4a23      	ldr	r2, [pc, #140]	; (3418 <system_clock_source_enable+0xa0>)
    338a:	6a13      	ldr	r3, [r2, #32]
    338c:	2102      	movs	r1, #2
    338e:	430b      	orrs	r3, r1
    3390:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3392:	2000      	movs	r0, #0
    3394:	e03d      	b.n	3412 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3396:	4a20      	ldr	r2, [pc, #128]	; (3418 <system_clock_source_enable+0xa0>)
    3398:	6993      	ldr	r3, [r2, #24]
    339a:	2102      	movs	r1, #2
    339c:	430b      	orrs	r3, r1
    339e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    33a0:	2000      	movs	r0, #0
		break;
    33a2:	e036      	b.n	3412 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    33a4:	4a1c      	ldr	r2, [pc, #112]	; (3418 <system_clock_source_enable+0xa0>)
    33a6:	8a13      	ldrh	r3, [r2, #16]
    33a8:	2102      	movs	r1, #2
    33aa:	430b      	orrs	r3, r1
    33ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    33ae:	2000      	movs	r0, #0
		break;
    33b0:	e02f      	b.n	3412 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    33b2:	4a19      	ldr	r2, [pc, #100]	; (3418 <system_clock_source_enable+0xa0>)
    33b4:	8a93      	ldrh	r3, [r2, #20]
    33b6:	2102      	movs	r1, #2
    33b8:	430b      	orrs	r3, r1
    33ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    33bc:	2000      	movs	r0, #0
		break;
    33be:	e028      	b.n	3412 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    33c0:	4916      	ldr	r1, [pc, #88]	; (341c <system_clock_source_enable+0xa4>)
    33c2:	680b      	ldr	r3, [r1, #0]
    33c4:	2202      	movs	r2, #2
    33c6:	4313      	orrs	r3, r2
    33c8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    33ca:	4b13      	ldr	r3, [pc, #76]	; (3418 <system_clock_source_enable+0xa0>)
    33cc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    33ce:	0019      	movs	r1, r3
    33d0:	320e      	adds	r2, #14
    33d2:	68cb      	ldr	r3, [r1, #12]
    33d4:	421a      	tst	r2, r3
    33d6:	d0fc      	beq.n	33d2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    33d8:	4a10      	ldr	r2, [pc, #64]	; (341c <system_clock_source_enable+0xa4>)
    33da:	6891      	ldr	r1, [r2, #8]
    33dc:	4b0e      	ldr	r3, [pc, #56]	; (3418 <system_clock_source_enable+0xa0>)
    33de:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    33e0:	6852      	ldr	r2, [r2, #4]
    33e2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    33e4:	2200      	movs	r2, #0
    33e6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    33e8:	0019      	movs	r1, r3
    33ea:	3210      	adds	r2, #16
    33ec:	68cb      	ldr	r3, [r1, #12]
    33ee:	421a      	tst	r2, r3
    33f0:	d0fc      	beq.n	33ec <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    33f2:	4b0a      	ldr	r3, [pc, #40]	; (341c <system_clock_source_enable+0xa4>)
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	b29b      	uxth	r3, r3
    33f8:	4a07      	ldr	r2, [pc, #28]	; (3418 <system_clock_source_enable+0xa0>)
    33fa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    33fc:	2000      	movs	r0, #0
    33fe:	e008      	b.n	3412 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3400:	4905      	ldr	r1, [pc, #20]	; (3418 <system_clock_source_enable+0xa0>)
    3402:	2244      	movs	r2, #68	; 0x44
    3404:	5c8b      	ldrb	r3, [r1, r2]
    3406:	2002      	movs	r0, #2
    3408:	4303      	orrs	r3, r0
    340a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    340c:	2000      	movs	r0, #0
		break;
    340e:	e000      	b.n	3412 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3410:	2000      	movs	r0, #0
}
    3412:	4770      	bx	lr
    3414:	0000568c 	.word	0x0000568c
    3418:	40000800 	.word	0x40000800
    341c:	20005054 	.word	0x20005054

00003420 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3420:	b5f0      	push	{r4, r5, r6, r7, lr}
    3422:	46ce      	mov	lr, r9
    3424:	4647      	mov	r7, r8
    3426:	b580      	push	{r7, lr}
    3428:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    342a:	22c2      	movs	r2, #194	; 0xc2
    342c:	00d2      	lsls	r2, r2, #3
    342e:	4b3c      	ldr	r3, [pc, #240]	; (3520 <system_clock_init+0x100>)
    3430:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3432:	4a3c      	ldr	r2, [pc, #240]	; (3524 <system_clock_init+0x104>)
    3434:	6853      	ldr	r3, [r2, #4]
    3436:	211e      	movs	r1, #30
    3438:	438b      	bics	r3, r1
    343a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    343c:	2202      	movs	r2, #2
    343e:	ab01      	add	r3, sp, #4
    3440:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3442:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3444:	4d38      	ldr	r5, [pc, #224]	; (3528 <system_clock_init+0x108>)
    3446:	b2e0      	uxtb	r0, r4
    3448:	a901      	add	r1, sp, #4
    344a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    344c:	3401      	adds	r4, #1
    344e:	2c25      	cmp	r4, #37	; 0x25
    3450:	d1f9      	bne.n	3446 <system_clock_init+0x26>
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3452:	ab05      	add	r3, sp, #20
    3454:	2100      	movs	r1, #0
    3456:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3458:	2200      	movs	r2, #0
    345a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    345c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    345e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3460:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    3462:	3106      	adds	r1, #6
    3464:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    3466:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3468:	4b30      	ldr	r3, [pc, #192]	; (352c <system_clock_init+0x10c>)
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    346e:	2b3f      	cmp	r3, #63	; 0x3f
    3470:	d054      	beq.n	351c <system_clock_init+0xfc>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3472:	a805      	add	r0, sp, #20
    3474:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    3476:	2380      	movs	r3, #128	; 0x80
    3478:	009b      	lsls	r3, r3, #2
    347a:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    347c:	3bfa      	subs	r3, #250	; 0xfa
    347e:	3bff      	subs	r3, #255	; 0xff
    3480:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3482:	3338      	adds	r3, #56	; 0x38
    3484:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3486:	4b2a      	ldr	r3, [pc, #168]	; (3530 <system_clock_init+0x110>)
    3488:	4798      	blx	r3
	config->run_in_standby  = false;
    348a:	a804      	add	r0, sp, #16
    348c:	2500      	movs	r5, #0
    348e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3490:	2701      	movs	r7, #1
    3492:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3494:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3496:	4b27      	ldr	r3, [pc, #156]	; (3534 <system_clock_init+0x114>)
    3498:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    349a:	2006      	movs	r0, #6
    349c:	4e26      	ldr	r6, [pc, #152]	; (3538 <system_clock_init+0x118>)
    349e:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    34a0:	4b26      	ldr	r3, [pc, #152]	; (353c <system_clock_init+0x11c>)
    34a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    34a4:	ac01      	add	r4, sp, #4
    34a6:	9702      	str	r7, [sp, #8]
	config->high_when_disabled = false;
    34a8:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    34aa:	2306      	movs	r3, #6
    34ac:	4699      	mov	r9, r3
    34ae:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    34b0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    34b2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    34b4:	0021      	movs	r1, r4
    34b6:	2001      	movs	r0, #1
    34b8:	4b21      	ldr	r3, [pc, #132]	; (3540 <system_clock_init+0x120>)
    34ba:	4698      	mov	r8, r3
    34bc:	4798      	blx	r3
    34be:	2001      	movs	r0, #1
    34c0:	4f20      	ldr	r7, [pc, #128]	; (3544 <system_clock_init+0x124>)
    34c2:	47b8      	blx	r7
	config->high_when_disabled = false;
    34c4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    34c6:	464b      	mov	r3, r9
    34c8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    34ca:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    34cc:	7265      	strb	r5, [r4, #9]
    34ce:	23ff      	movs	r3, #255	; 0xff
    34d0:	6063      	str	r3, [r4, #4]
    34d2:	0021      	movs	r1, r4
    34d4:	2004      	movs	r0, #4
    34d6:	47c0      	blx	r8
    34d8:	2004      	movs	r0, #4
    34da:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    34dc:	2007      	movs	r0, #7
    34de:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    34e0:	490f      	ldr	r1, [pc, #60]	; (3520 <system_clock_init+0x100>)
    34e2:	2210      	movs	r2, #16
    34e4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    34e6:	421a      	tst	r2, r3
    34e8:	d0fc      	beq.n	34e4 <system_clock_init+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    34ea:	4a17      	ldr	r2, [pc, #92]	; (3548 <system_clock_init+0x128>)
    34ec:	2300      	movs	r3, #0
    34ee:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    34f0:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    34f2:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    34f4:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    34f6:	a901      	add	r1, sp, #4
    34f8:	2201      	movs	r2, #1
    34fa:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    34fc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    34fe:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3500:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3502:	3307      	adds	r3, #7
    3504:	700b      	strb	r3, [r1, #0]
    3506:	2000      	movs	r0, #0
    3508:	4b0d      	ldr	r3, [pc, #52]	; (3540 <system_clock_init+0x120>)
    350a:	4798      	blx	r3
    350c:	2000      	movs	r0, #0
    350e:	4b0d      	ldr	r3, [pc, #52]	; (3544 <system_clock_init+0x124>)
    3510:	4798      	blx	r3
#endif
}
    3512:	b00b      	add	sp, #44	; 0x2c
    3514:	bc0c      	pop	{r2, r3}
    3516:	4690      	mov	r8, r2
    3518:	4699      	mov	r9, r3
    351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    351c:	3b20      	subs	r3, #32
    351e:	e7a8      	b.n	3472 <system_clock_init+0x52>
    3520:	40000800 	.word	0x40000800
    3524:	41004000 	.word	0x41004000
    3528:	00003785 	.word	0x00003785
    352c:	00806024 	.word	0x00806024
    3530:	000032f9 	.word	0x000032f9
    3534:	000032bd 	.word	0x000032bd
    3538:	00003379 	.word	0x00003379
    353c:	0000354d 	.word	0x0000354d
    3540:	00003571 	.word	0x00003571
    3544:	00003629 	.word	0x00003629
    3548:	40000400 	.word	0x40000400

0000354c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    354c:	4a06      	ldr	r2, [pc, #24]	; (3568 <system_gclk_init+0x1c>)
    354e:	6993      	ldr	r3, [r2, #24]
    3550:	2108      	movs	r1, #8
    3552:	430b      	orrs	r3, r1
    3554:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3556:	2201      	movs	r2, #1
    3558:	4b04      	ldr	r3, [pc, #16]	; (356c <system_gclk_init+0x20>)
    355a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    355c:	0019      	movs	r1, r3
    355e:	780b      	ldrb	r3, [r1, #0]
    3560:	4213      	tst	r3, r2
    3562:	d1fc      	bne.n	355e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3564:	4770      	bx	lr
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	40000400 	.word	0x40000400
    356c:	40000c00 	.word	0x40000c00

00003570 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3570:	b570      	push	{r4, r5, r6, lr}
    3572:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3574:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3576:	780d      	ldrb	r5, [r1, #0]
    3578:	022d      	lsls	r5, r5, #8
    357a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    357c:	784b      	ldrb	r3, [r1, #1]
    357e:	2b00      	cmp	r3, #0
    3580:	d002      	beq.n	3588 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3582:	2380      	movs	r3, #128	; 0x80
    3584:	02db      	lsls	r3, r3, #11
    3586:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3588:	7a4b      	ldrb	r3, [r1, #9]
    358a:	2b00      	cmp	r3, #0
    358c:	d002      	beq.n	3594 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    358e:	2380      	movs	r3, #128	; 0x80
    3590:	031b      	lsls	r3, r3, #12
    3592:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3594:	6848      	ldr	r0, [r1, #4]
    3596:	2801      	cmp	r0, #1
    3598:	d910      	bls.n	35bc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    359a:	1e43      	subs	r3, r0, #1
    359c:	4218      	tst	r0, r3
    359e:	d134      	bne.n	360a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    35a0:	2802      	cmp	r0, #2
    35a2:	d930      	bls.n	3606 <system_gclk_gen_set_config+0x96>
    35a4:	2302      	movs	r3, #2
    35a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    35a8:	3201      	adds	r2, #1
						mask <<= 1) {
    35aa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    35ac:	4298      	cmp	r0, r3
    35ae:	d8fb      	bhi.n	35a8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    35b0:	0212      	lsls	r2, r2, #8
    35b2:	4332      	orrs	r2, r6
    35b4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    35b6:	2380      	movs	r3, #128	; 0x80
    35b8:	035b      	lsls	r3, r3, #13
    35ba:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    35bc:	7a0b      	ldrb	r3, [r1, #8]
    35be:	2b00      	cmp	r3, #0
    35c0:	d002      	beq.n	35c8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    35c2:	2380      	movs	r3, #128	; 0x80
    35c4:	039b      	lsls	r3, r3, #14
    35c6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    35c8:	4a13      	ldr	r2, [pc, #76]	; (3618 <system_gclk_gen_set_config+0xa8>)
    35ca:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    35cc:	b25b      	sxtb	r3, r3
    35ce:	2b00      	cmp	r3, #0
    35d0:	dbfb      	blt.n	35ca <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    35d2:	4b12      	ldr	r3, [pc, #72]	; (361c <system_gclk_gen_set_config+0xac>)
    35d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    35d6:	4b12      	ldr	r3, [pc, #72]	; (3620 <system_gclk_gen_set_config+0xb0>)
    35d8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    35da:	4a0f      	ldr	r2, [pc, #60]	; (3618 <system_gclk_gen_set_config+0xa8>)
    35dc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    35de:	b25b      	sxtb	r3, r3
    35e0:	2b00      	cmp	r3, #0
    35e2:	dbfb      	blt.n	35dc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    35e4:	4b0c      	ldr	r3, [pc, #48]	; (3618 <system_gclk_gen_set_config+0xa8>)
    35e6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    35e8:	001a      	movs	r2, r3
    35ea:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    35ec:	b25b      	sxtb	r3, r3
    35ee:	2b00      	cmp	r3, #0
    35f0:	dbfb      	blt.n	35ea <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    35f2:	4a09      	ldr	r2, [pc, #36]	; (3618 <system_gclk_gen_set_config+0xa8>)
    35f4:	6853      	ldr	r3, [r2, #4]
    35f6:	2180      	movs	r1, #128	; 0x80
    35f8:	0249      	lsls	r1, r1, #9
    35fa:	400b      	ands	r3, r1
    35fc:	431d      	orrs	r5, r3
    35fe:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3600:	4b08      	ldr	r3, [pc, #32]	; (3624 <system_gclk_gen_set_config+0xb4>)
    3602:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3604:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3606:	2200      	movs	r2, #0
    3608:	e7d2      	b.n	35b0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    360a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    360c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    360e:	2380      	movs	r3, #128	; 0x80
    3610:	029b      	lsls	r3, r3, #10
    3612:	431d      	orrs	r5, r3
    3614:	e7d2      	b.n	35bc <system_gclk_gen_set_config+0x4c>
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	40000c00 	.word	0x40000c00
    361c:	000031b9 	.word	0x000031b9
    3620:	40000c08 	.word	0x40000c08
    3624:	000031f9 	.word	0x000031f9

00003628 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3628:	b510      	push	{r4, lr}
    362a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    362c:	4a0b      	ldr	r2, [pc, #44]	; (365c <system_gclk_gen_enable+0x34>)
    362e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3630:	b25b      	sxtb	r3, r3
    3632:	2b00      	cmp	r3, #0
    3634:	dbfb      	blt.n	362e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3636:	4b0a      	ldr	r3, [pc, #40]	; (3660 <system_gclk_gen_enable+0x38>)
    3638:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    363a:	4b0a      	ldr	r3, [pc, #40]	; (3664 <system_gclk_gen_enable+0x3c>)
    363c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    363e:	4a07      	ldr	r2, [pc, #28]	; (365c <system_gclk_gen_enable+0x34>)
    3640:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3642:	b25b      	sxtb	r3, r3
    3644:	2b00      	cmp	r3, #0
    3646:	dbfb      	blt.n	3640 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3648:	4a04      	ldr	r2, [pc, #16]	; (365c <system_gclk_gen_enable+0x34>)
    364a:	6851      	ldr	r1, [r2, #4]
    364c:	2380      	movs	r3, #128	; 0x80
    364e:	025b      	lsls	r3, r3, #9
    3650:	430b      	orrs	r3, r1
    3652:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3654:	4b04      	ldr	r3, [pc, #16]	; (3668 <system_gclk_gen_enable+0x40>)
    3656:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3658:	bd10      	pop	{r4, pc}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	40000c00 	.word	0x40000c00
    3660:	000031b9 	.word	0x000031b9
    3664:	40000c04 	.word	0x40000c04
    3668:	000031f9 	.word	0x000031f9

0000366c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    366c:	b570      	push	{r4, r5, r6, lr}
    366e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3670:	4a1a      	ldr	r2, [pc, #104]	; (36dc <system_gclk_gen_get_hz+0x70>)
    3672:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3674:	b25b      	sxtb	r3, r3
    3676:	2b00      	cmp	r3, #0
    3678:	dbfb      	blt.n	3672 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    367a:	4b19      	ldr	r3, [pc, #100]	; (36e0 <system_gclk_gen_get_hz+0x74>)
    367c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    367e:	4b19      	ldr	r3, [pc, #100]	; (36e4 <system_gclk_gen_get_hz+0x78>)
    3680:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3682:	4a16      	ldr	r2, [pc, #88]	; (36dc <system_gclk_gen_get_hz+0x70>)
    3684:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3686:	b25b      	sxtb	r3, r3
    3688:	2b00      	cmp	r3, #0
    368a:	dbfb      	blt.n	3684 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    368c:	4e13      	ldr	r6, [pc, #76]	; (36dc <system_gclk_gen_get_hz+0x70>)
    368e:	6870      	ldr	r0, [r6, #4]
    3690:	04c0      	lsls	r0, r0, #19
    3692:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3694:	4b14      	ldr	r3, [pc, #80]	; (36e8 <system_gclk_gen_get_hz+0x7c>)
    3696:	4798      	blx	r3
    3698:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    369a:	4b12      	ldr	r3, [pc, #72]	; (36e4 <system_gclk_gen_get_hz+0x78>)
    369c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    369e:	6876      	ldr	r6, [r6, #4]
    36a0:	02f6      	lsls	r6, r6, #11
    36a2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    36a4:	4b11      	ldr	r3, [pc, #68]	; (36ec <system_gclk_gen_get_hz+0x80>)
    36a6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    36a8:	4a0c      	ldr	r2, [pc, #48]	; (36dc <system_gclk_gen_get_hz+0x70>)
    36aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    36ac:	b25b      	sxtb	r3, r3
    36ae:	2b00      	cmp	r3, #0
    36b0:	dbfb      	blt.n	36aa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <system_gclk_gen_get_hz+0x70>)
    36b4:	689c      	ldr	r4, [r3, #8]
    36b6:	0224      	lsls	r4, r4, #8
    36b8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    36ba:	4b0d      	ldr	r3, [pc, #52]	; (36f0 <system_gclk_gen_get_hz+0x84>)
    36bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    36be:	2e00      	cmp	r6, #0
    36c0:	d107      	bne.n	36d2 <system_gclk_gen_get_hz+0x66>
    36c2:	2c01      	cmp	r4, #1
    36c4:	d907      	bls.n	36d6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    36c6:	0021      	movs	r1, r4
    36c8:	0028      	movs	r0, r5
    36ca:	4b0a      	ldr	r3, [pc, #40]	; (36f4 <system_gclk_gen_get_hz+0x88>)
    36cc:	4798      	blx	r3
    36ce:	0005      	movs	r5, r0
    36d0:	e001      	b.n	36d6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    36d2:	3401      	adds	r4, #1
    36d4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    36d6:	0028      	movs	r0, r5
    36d8:	bd70      	pop	{r4, r5, r6, pc}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	40000c00 	.word	0x40000c00
    36e0:	000031b9 	.word	0x000031b9
    36e4:	40000c04 	.word	0x40000c04
    36e8:	00003229 	.word	0x00003229
    36ec:	40000c08 	.word	0x40000c08
    36f0:	000031f9 	.word	0x000031f9
    36f4:	00003a85 	.word	0x00003a85

000036f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    36f8:	b510      	push	{r4, lr}
    36fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    36fc:	4b06      	ldr	r3, [pc, #24]	; (3718 <system_gclk_chan_enable+0x20>)
    36fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3700:	4b06      	ldr	r3, [pc, #24]	; (371c <system_gclk_chan_enable+0x24>)
    3702:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3704:	4a06      	ldr	r2, [pc, #24]	; (3720 <system_gclk_chan_enable+0x28>)
    3706:	8853      	ldrh	r3, [r2, #2]
    3708:	2180      	movs	r1, #128	; 0x80
    370a:	01c9      	lsls	r1, r1, #7
    370c:	430b      	orrs	r3, r1
    370e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3710:	4b04      	ldr	r3, [pc, #16]	; (3724 <system_gclk_chan_enable+0x2c>)
    3712:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3714:	bd10      	pop	{r4, pc}
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	000031b9 	.word	0x000031b9
    371c:	40000c02 	.word	0x40000c02
    3720:	40000c00 	.word	0x40000c00
    3724:	000031f9 	.word	0x000031f9

00003728 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3728:	b510      	push	{r4, lr}
    372a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    372c:	4b0f      	ldr	r3, [pc, #60]	; (376c <system_gclk_chan_disable+0x44>)
    372e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3730:	4b0f      	ldr	r3, [pc, #60]	; (3770 <system_gclk_chan_disable+0x48>)
    3732:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3734:	4a0f      	ldr	r2, [pc, #60]	; (3774 <system_gclk_chan_disable+0x4c>)
    3736:	8853      	ldrh	r3, [r2, #2]
    3738:	051b      	lsls	r3, r3, #20
    373a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    373c:	8853      	ldrh	r3, [r2, #2]
    373e:	490e      	ldr	r1, [pc, #56]	; (3778 <system_gclk_chan_disable+0x50>)
    3740:	400b      	ands	r3, r1
    3742:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3744:	8853      	ldrh	r3, [r2, #2]
    3746:	490d      	ldr	r1, [pc, #52]	; (377c <system_gclk_chan_disable+0x54>)
    3748:	400b      	ands	r3, r1
    374a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    374c:	0011      	movs	r1, r2
    374e:	2280      	movs	r2, #128	; 0x80
    3750:	01d2      	lsls	r2, r2, #7
    3752:	884b      	ldrh	r3, [r1, #2]
    3754:	4213      	tst	r3, r2
    3756:	d1fc      	bne.n	3752 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3758:	4906      	ldr	r1, [pc, #24]	; (3774 <system_gclk_chan_disable+0x4c>)
    375a:	884a      	ldrh	r2, [r1, #2]
    375c:	0203      	lsls	r3, r0, #8
    375e:	4806      	ldr	r0, [pc, #24]	; (3778 <system_gclk_chan_disable+0x50>)
    3760:	4002      	ands	r2, r0
    3762:	4313      	orrs	r3, r2
    3764:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <system_gclk_chan_disable+0x58>)
    3768:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    376a:	bd10      	pop	{r4, pc}
    376c:	000031b9 	.word	0x000031b9
    3770:	40000c02 	.word	0x40000c02
    3774:	40000c00 	.word	0x40000c00
    3778:	fffff0ff 	.word	0xfffff0ff
    377c:	ffffbfff 	.word	0xffffbfff
    3780:	000031f9 	.word	0x000031f9

00003784 <system_gclk_chan_set_config>:
{
    3784:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3786:	780c      	ldrb	r4, [r1, #0]
    3788:	0224      	lsls	r4, r4, #8
    378a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    378c:	4b02      	ldr	r3, [pc, #8]	; (3798 <system_gclk_chan_set_config+0x14>)
    378e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3790:	b2a4      	uxth	r4, r4
    3792:	4b02      	ldr	r3, [pc, #8]	; (379c <system_gclk_chan_set_config+0x18>)
    3794:	805c      	strh	r4, [r3, #2]
}
    3796:	bd10      	pop	{r4, pc}
    3798:	00003729 	.word	0x00003729
    379c:	40000c00 	.word	0x40000c00

000037a0 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    37a0:	b510      	push	{r4, lr}
    37a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    37a4:	4b06      	ldr	r3, [pc, #24]	; (37c0 <system_gclk_chan_lock+0x20>)
    37a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    37a8:	4b06      	ldr	r3, [pc, #24]	; (37c4 <system_gclk_chan_lock+0x24>)
    37aa:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    37ac:	4a06      	ldr	r2, [pc, #24]	; (37c8 <system_gclk_chan_lock+0x28>)
    37ae:	8853      	ldrh	r3, [r2, #2]
    37b0:	21c0      	movs	r1, #192	; 0xc0
    37b2:	0209      	lsls	r1, r1, #8
    37b4:	430b      	orrs	r3, r1
    37b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <system_gclk_chan_lock+0x2c>)
    37ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    37bc:	bd10      	pop	{r4, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	000031b9 	.word	0x000031b9
    37c4:	40000c02 	.word	0x40000c02
    37c8:	40000c00 	.word	0x40000c00
    37cc:	000031f9 	.word	0x000031f9

000037d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    37d0:	b510      	push	{r4, lr}
    37d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    37d4:	4b06      	ldr	r3, [pc, #24]	; (37f0 <system_gclk_chan_get_hz+0x20>)
    37d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    37d8:	4b06      	ldr	r3, [pc, #24]	; (37f4 <system_gclk_chan_get_hz+0x24>)
    37da:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    37dc:	4b06      	ldr	r3, [pc, #24]	; (37f8 <system_gclk_chan_get_hz+0x28>)
    37de:	885c      	ldrh	r4, [r3, #2]
    37e0:	0524      	lsls	r4, r4, #20
    37e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    37e4:	4b05      	ldr	r3, [pc, #20]	; (37fc <system_gclk_chan_get_hz+0x2c>)
    37e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    37e8:	0020      	movs	r0, r4
    37ea:	4b05      	ldr	r3, [pc, #20]	; (3800 <system_gclk_chan_get_hz+0x30>)
    37ec:	4798      	blx	r3
}
    37ee:	bd10      	pop	{r4, pc}
    37f0:	000031b9 	.word	0x000031b9
    37f4:	40000c02 	.word	0x40000c02
    37f8:	40000c00 	.word	0x40000c00
    37fc:	000031f9 	.word	0x000031f9
    3800:	0000366d 	.word	0x0000366d

00003804 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3804:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3806:	78d3      	ldrb	r3, [r2, #3]
    3808:	2b00      	cmp	r3, #0
    380a:	d135      	bne.n	3878 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    380c:	7813      	ldrb	r3, [r2, #0]
    380e:	2b80      	cmp	r3, #128	; 0x80
    3810:	d029      	beq.n	3866 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3812:	061b      	lsls	r3, r3, #24
    3814:	2480      	movs	r4, #128	; 0x80
    3816:	0264      	lsls	r4, r4, #9
    3818:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    381a:	7854      	ldrb	r4, [r2, #1]
    381c:	2502      	movs	r5, #2
    381e:	43ac      	bics	r4, r5
    3820:	d106      	bne.n	3830 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3822:	7894      	ldrb	r4, [r2, #2]
    3824:	2c00      	cmp	r4, #0
    3826:	d120      	bne.n	386a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3828:	2480      	movs	r4, #128	; 0x80
    382a:	02a4      	lsls	r4, r4, #10
    382c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    382e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3830:	7854      	ldrb	r4, [r2, #1]
    3832:	3c01      	subs	r4, #1
    3834:	2c01      	cmp	r4, #1
    3836:	d91c      	bls.n	3872 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3838:	040d      	lsls	r5, r1, #16
    383a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    383c:	24a0      	movs	r4, #160	; 0xa0
    383e:	05e4      	lsls	r4, r4, #23
    3840:	432c      	orrs	r4, r5
    3842:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3844:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3846:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3848:	24d0      	movs	r4, #208	; 0xd0
    384a:	0624      	lsls	r4, r4, #24
    384c:	432c      	orrs	r4, r5
    384e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3850:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3852:	78d4      	ldrb	r4, [r2, #3]
    3854:	2c00      	cmp	r4, #0
    3856:	d122      	bne.n	389e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3858:	035b      	lsls	r3, r3, #13
    385a:	d51c      	bpl.n	3896 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    385c:	7893      	ldrb	r3, [r2, #2]
    385e:	2b01      	cmp	r3, #1
    3860:	d01e      	beq.n	38a0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3862:	6141      	str	r1, [r0, #20]
    3864:	e017      	b.n	3896 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3866:	2300      	movs	r3, #0
    3868:	e7d7      	b.n	381a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    386a:	24c0      	movs	r4, #192	; 0xc0
    386c:	02e4      	lsls	r4, r4, #11
    386e:	4323      	orrs	r3, r4
    3870:	e7dd      	b.n	382e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3872:	4c0d      	ldr	r4, [pc, #52]	; (38a8 <_system_pinmux_config+0xa4>)
    3874:	4023      	ands	r3, r4
    3876:	e7df      	b.n	3838 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3878:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    387a:	040c      	lsls	r4, r1, #16
    387c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    387e:	23a0      	movs	r3, #160	; 0xa0
    3880:	05db      	lsls	r3, r3, #23
    3882:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3884:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3886:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3888:	23d0      	movs	r3, #208	; 0xd0
    388a:	061b      	lsls	r3, r3, #24
    388c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    388e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3890:	78d3      	ldrb	r3, [r2, #3]
    3892:	2b00      	cmp	r3, #0
    3894:	d103      	bne.n	389e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3896:	7853      	ldrb	r3, [r2, #1]
    3898:	3b01      	subs	r3, #1
    389a:	2b01      	cmp	r3, #1
    389c:	d902      	bls.n	38a4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    389e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    38a0:	6181      	str	r1, [r0, #24]
    38a2:	e7f8      	b.n	3896 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    38a4:	6081      	str	r1, [r0, #8]
}
    38a6:	e7fa      	b.n	389e <_system_pinmux_config+0x9a>
    38a8:	fffbffff 	.word	0xfffbffff

000038ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    38ac:	b510      	push	{r4, lr}
    38ae:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    38b0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    38b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    38b4:	2900      	cmp	r1, #0
    38b6:	d104      	bne.n	38c2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    38b8:	0943      	lsrs	r3, r0, #5
    38ba:	01db      	lsls	r3, r3, #7
    38bc:	4905      	ldr	r1, [pc, #20]	; (38d4 <system_pinmux_pin_set_config+0x28>)
    38be:	468c      	mov	ip, r1
    38c0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    38c2:	241f      	movs	r4, #31
    38c4:	4020      	ands	r0, r4
    38c6:	2101      	movs	r1, #1
    38c8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    38ca:	0018      	movs	r0, r3
    38cc:	4b02      	ldr	r3, [pc, #8]	; (38d8 <system_pinmux_pin_set_config+0x2c>)
    38ce:	4798      	blx	r3
}
    38d0:	bd10      	pop	{r4, pc}
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	41004400 	.word	0x41004400
    38d8:	00003805 	.word	0x00003805

000038dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    38dc:	4770      	bx	lr
	...

000038e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    38e0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    38e2:	4b05      	ldr	r3, [pc, #20]	; (38f8 <system_init+0x18>)
    38e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    38e6:	4b05      	ldr	r3, [pc, #20]	; (38fc <system_init+0x1c>)
    38e8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    38ea:	4b05      	ldr	r3, [pc, #20]	; (3900 <system_init+0x20>)
    38ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    38ee:	4b05      	ldr	r3, [pc, #20]	; (3904 <system_init+0x24>)
    38f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    38f2:	4b05      	ldr	r3, [pc, #20]	; (3908 <system_init+0x28>)
    38f4:	4798      	blx	r3
}
    38f6:	bd10      	pop	{r4, pc}
    38f8:	00003421 	.word	0x00003421
    38fc:	00002e51 	.word	0x00002e51
    3900:	000038dd 	.word	0x000038dd
    3904:	000038dd 	.word	0x000038dd
    3908:	000038dd 	.word	0x000038dd

0000390c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    390c:	e7fe      	b.n	390c <Dummy_Handler>
	...

00003910 <Reset_Handler>:
{
    3910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3912:	4a2a      	ldr	r2, [pc, #168]	; (39bc <Reset_Handler+0xac>)
    3914:	4b2a      	ldr	r3, [pc, #168]	; (39c0 <Reset_Handler+0xb0>)
    3916:	429a      	cmp	r2, r3
    3918:	d011      	beq.n	393e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    391a:	001a      	movs	r2, r3
    391c:	4b29      	ldr	r3, [pc, #164]	; (39c4 <Reset_Handler+0xb4>)
    391e:	429a      	cmp	r2, r3
    3920:	d20d      	bcs.n	393e <Reset_Handler+0x2e>
    3922:	4a29      	ldr	r2, [pc, #164]	; (39c8 <Reset_Handler+0xb8>)
    3924:	3303      	adds	r3, #3
    3926:	1a9b      	subs	r3, r3, r2
    3928:	089b      	lsrs	r3, r3, #2
    392a:	3301      	adds	r3, #1
    392c:	009b      	lsls	r3, r3, #2
    392e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3930:	4823      	ldr	r0, [pc, #140]	; (39c0 <Reset_Handler+0xb0>)
    3932:	4922      	ldr	r1, [pc, #136]	; (39bc <Reset_Handler+0xac>)
    3934:	588c      	ldr	r4, [r1, r2]
    3936:	5084      	str	r4, [r0, r2]
    3938:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    393a:	429a      	cmp	r2, r3
    393c:	d1fa      	bne.n	3934 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    393e:	4a23      	ldr	r2, [pc, #140]	; (39cc <Reset_Handler+0xbc>)
    3940:	4b23      	ldr	r3, [pc, #140]	; (39d0 <Reset_Handler+0xc0>)
    3942:	429a      	cmp	r2, r3
    3944:	d20a      	bcs.n	395c <Reset_Handler+0x4c>
    3946:	43d3      	mvns	r3, r2
    3948:	4921      	ldr	r1, [pc, #132]	; (39d0 <Reset_Handler+0xc0>)
    394a:	185b      	adds	r3, r3, r1
    394c:	2103      	movs	r1, #3
    394e:	438b      	bics	r3, r1
    3950:	3304      	adds	r3, #4
    3952:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3954:	2100      	movs	r1, #0
    3956:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3958:	4293      	cmp	r3, r2
    395a:	d1fc      	bne.n	3956 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    395c:	4a1d      	ldr	r2, [pc, #116]	; (39d4 <Reset_Handler+0xc4>)
    395e:	21ff      	movs	r1, #255	; 0xff
    3960:	4b1d      	ldr	r3, [pc, #116]	; (39d8 <Reset_Handler+0xc8>)
    3962:	438b      	bics	r3, r1
    3964:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3966:	39fd      	subs	r1, #253	; 0xfd
    3968:	2390      	movs	r3, #144	; 0x90
    396a:	005b      	lsls	r3, r3, #1
    396c:	4a1b      	ldr	r2, [pc, #108]	; (39dc <Reset_Handler+0xcc>)
    396e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3970:	4a1b      	ldr	r2, [pc, #108]	; (39e0 <Reset_Handler+0xd0>)
    3972:	78d3      	ldrb	r3, [r2, #3]
    3974:	2503      	movs	r5, #3
    3976:	43ab      	bics	r3, r5
    3978:	2402      	movs	r4, #2
    397a:	4323      	orrs	r3, r4
    397c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    397e:	78d3      	ldrb	r3, [r2, #3]
    3980:	270c      	movs	r7, #12
    3982:	43bb      	bics	r3, r7
    3984:	2608      	movs	r6, #8
    3986:	4333      	orrs	r3, r6
    3988:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    398a:	4b16      	ldr	r3, [pc, #88]	; (39e4 <Reset_Handler+0xd4>)
    398c:	7b98      	ldrb	r0, [r3, #14]
    398e:	2230      	movs	r2, #48	; 0x30
    3990:	4390      	bics	r0, r2
    3992:	2220      	movs	r2, #32
    3994:	4310      	orrs	r0, r2
    3996:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3998:	7b99      	ldrb	r1, [r3, #14]
    399a:	43b9      	bics	r1, r7
    399c:	4331      	orrs	r1, r6
    399e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    39a0:	7b9a      	ldrb	r2, [r3, #14]
    39a2:	43aa      	bics	r2, r5
    39a4:	4322      	orrs	r2, r4
    39a6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    39a8:	4a0f      	ldr	r2, [pc, #60]	; (39e8 <Reset_Handler+0xd8>)
    39aa:	6853      	ldr	r3, [r2, #4]
    39ac:	2180      	movs	r1, #128	; 0x80
    39ae:	430b      	orrs	r3, r1
    39b0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    39b2:	4b0e      	ldr	r3, [pc, #56]	; (39ec <Reset_Handler+0xdc>)
    39b4:	4798      	blx	r3
        main();
    39b6:	4b0e      	ldr	r3, [pc, #56]	; (39f0 <Reset_Handler+0xe0>)
    39b8:	4798      	blx	r3
    39ba:	e7fe      	b.n	39ba <Reset_Handler+0xaa>
    39bc:	00005750 	.word	0x00005750
    39c0:	20000000 	.word	0x20000000
    39c4:	20000008 	.word	0x20000008
    39c8:	20000004 	.word	0x20000004
    39cc:	20000008 	.word	0x20000008
    39d0:	200050d0 	.word	0x200050d0
    39d4:	e000ed00 	.word	0xe000ed00
    39d8:	00000000 	.word	0x00000000
    39dc:	41007000 	.word	0x41007000
    39e0:	41005000 	.word	0x41005000
    39e4:	41004800 	.word	0x41004800
    39e8:	41004000 	.word	0x41004000
    39ec:	00005465 	.word	0x00005465
    39f0:	000039f5 	.word	0x000039f5

000039f4 <main>:
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
	wdt_set_config(&config_wdt);
}

int main (void)
{
    39f4:	b510      	push	{r4, lr}
    39f6:	b082      	sub	sp, #8
	system_init();
    39f8:	4b14      	ldr	r3, [pc, #80]	; (3a4c <main+0x58>)
    39fa:	4798      	blx	r3
	delay_init();
    39fc:	4b14      	ldr	r3, [pc, #80]	; (3a50 <main+0x5c>)
    39fe:	4798      	blx	r3
	config->enable               = true;
    3a00:	2301      	movs	r3, #1
    3a02:	466a      	mov	r2, sp
    3a04:	7053      	strb	r3, [r2, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    3a06:	2204      	movs	r2, #4
    3a08:	4669      	mov	r1, sp
    3a0a:	708a      	strb	r2, [r1, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    3a0c:	3208      	adds	r2, #8
    3a0e:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    3a10:	2200      	movs	r2, #0
    3a12:	710a      	strb	r2, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    3a14:	714a      	strb	r2, [r1, #5]
	config_wdt.always_on = true; // Cannot be turned off
    3a16:	700b      	strb	r3, [r1, #0]
	wdt_set_config(&config_wdt);
    3a18:	4668      	mov	r0, sp
    3a1a:	4b0e      	ldr	r3, [pc, #56]	; (3a54 <main+0x60>)
    3a1c:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    3a1e:	2103      	movs	r1, #3
    3a20:	2080      	movs	r0, #128	; 0x80
    3a22:	0040      	lsls	r0, r0, #1
    3a24:	4b0c      	ldr	r3, [pc, #48]	; (3a58 <main+0x64>)
    3a26:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    3a28:	2480      	movs	r4, #128	; 0x80
    3a2a:	00a4      	lsls	r4, r4, #2
    3a2c:	2102      	movs	r1, #2
    3a2e:	0020      	movs	r0, r4
    3a30:	4b0a      	ldr	r3, [pc, #40]	; (3a5c <main+0x68>)
    3a32:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    3a34:	2102      	movs	r1, #2
    3a36:	0020      	movs	r0, r4
    3a38:	4b09      	ldr	r3, [pc, #36]	; (3a60 <main+0x6c>)
    3a3a:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    3a3c:	2101      	movs	r1, #1
    3a3e:	0020      	movs	r0, r4
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <main+0x70>)
    3a42:	4798      	blx	r3

	vTaskStartScheduler();
    3a44:	4b08      	ldr	r3, [pc, #32]	; (3a68 <main+0x74>)
    3a46:	4798      	blx	r3
    3a48:	e7fe      	b.n	3a48 <main+0x54>
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	000038e1 	.word	0x000038e1
    3a50:	00002e4d 	.word	0x00002e4d
    3a54:	00002a4d 	.word	0x00002a4d
    3a58:	000014b5 	.word	0x000014b5
    3a5c:	00001435 	.word	0x00001435
    3a60:	00001509 	.word	0x00001509
    3a64:	00001475 	.word	0x00001475
    3a68:	0000208d 	.word	0x0000208d

00003a6c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    3a6c:	b672      	cpsid	i
    3a6e:	e7fe      	b.n	3a6e <vApplicationMallocFailedHook+0x2>

00003a70 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    3a70:	b510      	push	{r4, lr}
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    3a72:	4b01      	ldr	r3, [pc, #4]	; (3a78 <vApplicationIdleHook+0x8>)
    3a74:	4798      	blx	r3
}
    3a76:	bd10      	pop	{r4, pc}
    3a78:	00002b4d 	.word	0x00002b4d

00003a7c <vApplicationTickHook>:

void vApplicationTickHook(void)
{
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    3a7c:	4770      	bx	lr

00003a7e <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    3a7e:	b672      	cpsid	i
    3a80:	e7fe      	b.n	3a80 <vApplicationStackOverflowHook+0x2>

00003a82 <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    3a82:	e7fe      	b.n	3a82 <HardFault_Handler>

00003a84 <__udivsi3>:
    3a84:	2200      	movs	r2, #0
    3a86:	0843      	lsrs	r3, r0, #1
    3a88:	428b      	cmp	r3, r1
    3a8a:	d374      	bcc.n	3b76 <__udivsi3+0xf2>
    3a8c:	0903      	lsrs	r3, r0, #4
    3a8e:	428b      	cmp	r3, r1
    3a90:	d35f      	bcc.n	3b52 <__udivsi3+0xce>
    3a92:	0a03      	lsrs	r3, r0, #8
    3a94:	428b      	cmp	r3, r1
    3a96:	d344      	bcc.n	3b22 <__udivsi3+0x9e>
    3a98:	0b03      	lsrs	r3, r0, #12
    3a9a:	428b      	cmp	r3, r1
    3a9c:	d328      	bcc.n	3af0 <__udivsi3+0x6c>
    3a9e:	0c03      	lsrs	r3, r0, #16
    3aa0:	428b      	cmp	r3, r1
    3aa2:	d30d      	bcc.n	3ac0 <__udivsi3+0x3c>
    3aa4:	22ff      	movs	r2, #255	; 0xff
    3aa6:	0209      	lsls	r1, r1, #8
    3aa8:	ba12      	rev	r2, r2
    3aaa:	0c03      	lsrs	r3, r0, #16
    3aac:	428b      	cmp	r3, r1
    3aae:	d302      	bcc.n	3ab6 <__udivsi3+0x32>
    3ab0:	1212      	asrs	r2, r2, #8
    3ab2:	0209      	lsls	r1, r1, #8
    3ab4:	d065      	beq.n	3b82 <__udivsi3+0xfe>
    3ab6:	0b03      	lsrs	r3, r0, #12
    3ab8:	428b      	cmp	r3, r1
    3aba:	d319      	bcc.n	3af0 <__udivsi3+0x6c>
    3abc:	e000      	b.n	3ac0 <__udivsi3+0x3c>
    3abe:	0a09      	lsrs	r1, r1, #8
    3ac0:	0bc3      	lsrs	r3, r0, #15
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d301      	bcc.n	3aca <__udivsi3+0x46>
    3ac6:	03cb      	lsls	r3, r1, #15
    3ac8:	1ac0      	subs	r0, r0, r3
    3aca:	4152      	adcs	r2, r2
    3acc:	0b83      	lsrs	r3, r0, #14
    3ace:	428b      	cmp	r3, r1
    3ad0:	d301      	bcc.n	3ad6 <__udivsi3+0x52>
    3ad2:	038b      	lsls	r3, r1, #14
    3ad4:	1ac0      	subs	r0, r0, r3
    3ad6:	4152      	adcs	r2, r2
    3ad8:	0b43      	lsrs	r3, r0, #13
    3ada:	428b      	cmp	r3, r1
    3adc:	d301      	bcc.n	3ae2 <__udivsi3+0x5e>
    3ade:	034b      	lsls	r3, r1, #13
    3ae0:	1ac0      	subs	r0, r0, r3
    3ae2:	4152      	adcs	r2, r2
    3ae4:	0b03      	lsrs	r3, r0, #12
    3ae6:	428b      	cmp	r3, r1
    3ae8:	d301      	bcc.n	3aee <__udivsi3+0x6a>
    3aea:	030b      	lsls	r3, r1, #12
    3aec:	1ac0      	subs	r0, r0, r3
    3aee:	4152      	adcs	r2, r2
    3af0:	0ac3      	lsrs	r3, r0, #11
    3af2:	428b      	cmp	r3, r1
    3af4:	d301      	bcc.n	3afa <__udivsi3+0x76>
    3af6:	02cb      	lsls	r3, r1, #11
    3af8:	1ac0      	subs	r0, r0, r3
    3afa:	4152      	adcs	r2, r2
    3afc:	0a83      	lsrs	r3, r0, #10
    3afe:	428b      	cmp	r3, r1
    3b00:	d301      	bcc.n	3b06 <__udivsi3+0x82>
    3b02:	028b      	lsls	r3, r1, #10
    3b04:	1ac0      	subs	r0, r0, r3
    3b06:	4152      	adcs	r2, r2
    3b08:	0a43      	lsrs	r3, r0, #9
    3b0a:	428b      	cmp	r3, r1
    3b0c:	d301      	bcc.n	3b12 <__udivsi3+0x8e>
    3b0e:	024b      	lsls	r3, r1, #9
    3b10:	1ac0      	subs	r0, r0, r3
    3b12:	4152      	adcs	r2, r2
    3b14:	0a03      	lsrs	r3, r0, #8
    3b16:	428b      	cmp	r3, r1
    3b18:	d301      	bcc.n	3b1e <__udivsi3+0x9a>
    3b1a:	020b      	lsls	r3, r1, #8
    3b1c:	1ac0      	subs	r0, r0, r3
    3b1e:	4152      	adcs	r2, r2
    3b20:	d2cd      	bcs.n	3abe <__udivsi3+0x3a>
    3b22:	09c3      	lsrs	r3, r0, #7
    3b24:	428b      	cmp	r3, r1
    3b26:	d301      	bcc.n	3b2c <__udivsi3+0xa8>
    3b28:	01cb      	lsls	r3, r1, #7
    3b2a:	1ac0      	subs	r0, r0, r3
    3b2c:	4152      	adcs	r2, r2
    3b2e:	0983      	lsrs	r3, r0, #6
    3b30:	428b      	cmp	r3, r1
    3b32:	d301      	bcc.n	3b38 <__udivsi3+0xb4>
    3b34:	018b      	lsls	r3, r1, #6
    3b36:	1ac0      	subs	r0, r0, r3
    3b38:	4152      	adcs	r2, r2
    3b3a:	0943      	lsrs	r3, r0, #5
    3b3c:	428b      	cmp	r3, r1
    3b3e:	d301      	bcc.n	3b44 <__udivsi3+0xc0>
    3b40:	014b      	lsls	r3, r1, #5
    3b42:	1ac0      	subs	r0, r0, r3
    3b44:	4152      	adcs	r2, r2
    3b46:	0903      	lsrs	r3, r0, #4
    3b48:	428b      	cmp	r3, r1
    3b4a:	d301      	bcc.n	3b50 <__udivsi3+0xcc>
    3b4c:	010b      	lsls	r3, r1, #4
    3b4e:	1ac0      	subs	r0, r0, r3
    3b50:	4152      	adcs	r2, r2
    3b52:	08c3      	lsrs	r3, r0, #3
    3b54:	428b      	cmp	r3, r1
    3b56:	d301      	bcc.n	3b5c <__udivsi3+0xd8>
    3b58:	00cb      	lsls	r3, r1, #3
    3b5a:	1ac0      	subs	r0, r0, r3
    3b5c:	4152      	adcs	r2, r2
    3b5e:	0883      	lsrs	r3, r0, #2
    3b60:	428b      	cmp	r3, r1
    3b62:	d301      	bcc.n	3b68 <__udivsi3+0xe4>
    3b64:	008b      	lsls	r3, r1, #2
    3b66:	1ac0      	subs	r0, r0, r3
    3b68:	4152      	adcs	r2, r2
    3b6a:	0843      	lsrs	r3, r0, #1
    3b6c:	428b      	cmp	r3, r1
    3b6e:	d301      	bcc.n	3b74 <__udivsi3+0xf0>
    3b70:	004b      	lsls	r3, r1, #1
    3b72:	1ac0      	subs	r0, r0, r3
    3b74:	4152      	adcs	r2, r2
    3b76:	1a41      	subs	r1, r0, r1
    3b78:	d200      	bcs.n	3b7c <__udivsi3+0xf8>
    3b7a:	4601      	mov	r1, r0
    3b7c:	4152      	adcs	r2, r2
    3b7e:	4610      	mov	r0, r2
    3b80:	4770      	bx	lr
    3b82:	e7ff      	b.n	3b84 <__udivsi3+0x100>
    3b84:	b501      	push	{r0, lr}
    3b86:	2000      	movs	r0, #0
    3b88:	f000 f806 	bl	3b98 <__aeabi_idiv0>
    3b8c:	bd02      	pop	{r1, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)

00003b90 <__aeabi_uidivmod>:
    3b90:	2900      	cmp	r1, #0
    3b92:	d0f7      	beq.n	3b84 <__udivsi3+0x100>
    3b94:	e776      	b.n	3a84 <__udivsi3>
    3b96:	4770      	bx	lr

00003b98 <__aeabi_idiv0>:
    3b98:	4770      	bx	lr
    3b9a:	46c0      	nop			; (mov r8, r8)

00003b9c <__aeabi_dadd>:
    3b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b9e:	4645      	mov	r5, r8
    3ba0:	46de      	mov	lr, fp
    3ba2:	4657      	mov	r7, sl
    3ba4:	464e      	mov	r6, r9
    3ba6:	030c      	lsls	r4, r1, #12
    3ba8:	b5e0      	push	{r5, r6, r7, lr}
    3baa:	004e      	lsls	r6, r1, #1
    3bac:	0fc9      	lsrs	r1, r1, #31
    3bae:	4688      	mov	r8, r1
    3bb0:	000d      	movs	r5, r1
    3bb2:	0a61      	lsrs	r1, r4, #9
    3bb4:	0f44      	lsrs	r4, r0, #29
    3bb6:	430c      	orrs	r4, r1
    3bb8:	00c7      	lsls	r7, r0, #3
    3bba:	0319      	lsls	r1, r3, #12
    3bbc:	0058      	lsls	r0, r3, #1
    3bbe:	0fdb      	lsrs	r3, r3, #31
    3bc0:	469b      	mov	fp, r3
    3bc2:	0a4b      	lsrs	r3, r1, #9
    3bc4:	0f51      	lsrs	r1, r2, #29
    3bc6:	430b      	orrs	r3, r1
    3bc8:	0d76      	lsrs	r6, r6, #21
    3bca:	0d40      	lsrs	r0, r0, #21
    3bcc:	0019      	movs	r1, r3
    3bce:	00d2      	lsls	r2, r2, #3
    3bd0:	45d8      	cmp	r8, fp
    3bd2:	d100      	bne.n	3bd6 <__aeabi_dadd+0x3a>
    3bd4:	e0ae      	b.n	3d34 <__aeabi_dadd+0x198>
    3bd6:	1a35      	subs	r5, r6, r0
    3bd8:	2d00      	cmp	r5, #0
    3bda:	dc00      	bgt.n	3bde <__aeabi_dadd+0x42>
    3bdc:	e0f6      	b.n	3dcc <__aeabi_dadd+0x230>
    3bde:	2800      	cmp	r0, #0
    3be0:	d10f      	bne.n	3c02 <__aeabi_dadd+0x66>
    3be2:	4313      	orrs	r3, r2
    3be4:	d100      	bne.n	3be8 <__aeabi_dadd+0x4c>
    3be6:	e0db      	b.n	3da0 <__aeabi_dadd+0x204>
    3be8:	1e6b      	subs	r3, r5, #1
    3bea:	2b00      	cmp	r3, #0
    3bec:	d000      	beq.n	3bf0 <__aeabi_dadd+0x54>
    3bee:	e137      	b.n	3e60 <__aeabi_dadd+0x2c4>
    3bf0:	1aba      	subs	r2, r7, r2
    3bf2:	4297      	cmp	r7, r2
    3bf4:	41bf      	sbcs	r7, r7
    3bf6:	1a64      	subs	r4, r4, r1
    3bf8:	427f      	negs	r7, r7
    3bfa:	1be4      	subs	r4, r4, r7
    3bfc:	2601      	movs	r6, #1
    3bfe:	0017      	movs	r7, r2
    3c00:	e024      	b.n	3c4c <__aeabi_dadd+0xb0>
    3c02:	4bc6      	ldr	r3, [pc, #792]	; (3f1c <__aeabi_dadd+0x380>)
    3c04:	429e      	cmp	r6, r3
    3c06:	d04d      	beq.n	3ca4 <__aeabi_dadd+0x108>
    3c08:	2380      	movs	r3, #128	; 0x80
    3c0a:	041b      	lsls	r3, r3, #16
    3c0c:	4319      	orrs	r1, r3
    3c0e:	2d38      	cmp	r5, #56	; 0x38
    3c10:	dd00      	ble.n	3c14 <__aeabi_dadd+0x78>
    3c12:	e107      	b.n	3e24 <__aeabi_dadd+0x288>
    3c14:	2d1f      	cmp	r5, #31
    3c16:	dd00      	ble.n	3c1a <__aeabi_dadd+0x7e>
    3c18:	e138      	b.n	3e8c <__aeabi_dadd+0x2f0>
    3c1a:	2020      	movs	r0, #32
    3c1c:	1b43      	subs	r3, r0, r5
    3c1e:	469a      	mov	sl, r3
    3c20:	000b      	movs	r3, r1
    3c22:	4650      	mov	r0, sl
    3c24:	4083      	lsls	r3, r0
    3c26:	4699      	mov	r9, r3
    3c28:	0013      	movs	r3, r2
    3c2a:	4648      	mov	r0, r9
    3c2c:	40eb      	lsrs	r3, r5
    3c2e:	4318      	orrs	r0, r3
    3c30:	0003      	movs	r3, r0
    3c32:	4650      	mov	r0, sl
    3c34:	4082      	lsls	r2, r0
    3c36:	1e50      	subs	r0, r2, #1
    3c38:	4182      	sbcs	r2, r0
    3c3a:	40e9      	lsrs	r1, r5
    3c3c:	431a      	orrs	r2, r3
    3c3e:	1aba      	subs	r2, r7, r2
    3c40:	1a61      	subs	r1, r4, r1
    3c42:	4297      	cmp	r7, r2
    3c44:	41a4      	sbcs	r4, r4
    3c46:	0017      	movs	r7, r2
    3c48:	4264      	negs	r4, r4
    3c4a:	1b0c      	subs	r4, r1, r4
    3c4c:	0223      	lsls	r3, r4, #8
    3c4e:	d562      	bpl.n	3d16 <__aeabi_dadd+0x17a>
    3c50:	0264      	lsls	r4, r4, #9
    3c52:	0a65      	lsrs	r5, r4, #9
    3c54:	2d00      	cmp	r5, #0
    3c56:	d100      	bne.n	3c5a <__aeabi_dadd+0xbe>
    3c58:	e0df      	b.n	3e1a <__aeabi_dadd+0x27e>
    3c5a:	0028      	movs	r0, r5
    3c5c:	f001 fbe4 	bl	5428 <__clzsi2>
    3c60:	0003      	movs	r3, r0
    3c62:	3b08      	subs	r3, #8
    3c64:	2b1f      	cmp	r3, #31
    3c66:	dd00      	ble.n	3c6a <__aeabi_dadd+0xce>
    3c68:	e0d2      	b.n	3e10 <__aeabi_dadd+0x274>
    3c6a:	2220      	movs	r2, #32
    3c6c:	003c      	movs	r4, r7
    3c6e:	1ad2      	subs	r2, r2, r3
    3c70:	409d      	lsls	r5, r3
    3c72:	40d4      	lsrs	r4, r2
    3c74:	409f      	lsls	r7, r3
    3c76:	4325      	orrs	r5, r4
    3c78:	429e      	cmp	r6, r3
    3c7a:	dd00      	ble.n	3c7e <__aeabi_dadd+0xe2>
    3c7c:	e0c4      	b.n	3e08 <__aeabi_dadd+0x26c>
    3c7e:	1b9e      	subs	r6, r3, r6
    3c80:	1c73      	adds	r3, r6, #1
    3c82:	2b1f      	cmp	r3, #31
    3c84:	dd00      	ble.n	3c88 <__aeabi_dadd+0xec>
    3c86:	e0f1      	b.n	3e6c <__aeabi_dadd+0x2d0>
    3c88:	2220      	movs	r2, #32
    3c8a:	0038      	movs	r0, r7
    3c8c:	0029      	movs	r1, r5
    3c8e:	1ad2      	subs	r2, r2, r3
    3c90:	40d8      	lsrs	r0, r3
    3c92:	4091      	lsls	r1, r2
    3c94:	4097      	lsls	r7, r2
    3c96:	002c      	movs	r4, r5
    3c98:	4301      	orrs	r1, r0
    3c9a:	1e78      	subs	r0, r7, #1
    3c9c:	4187      	sbcs	r7, r0
    3c9e:	40dc      	lsrs	r4, r3
    3ca0:	2600      	movs	r6, #0
    3ca2:	430f      	orrs	r7, r1
    3ca4:	077b      	lsls	r3, r7, #29
    3ca6:	d009      	beq.n	3cbc <__aeabi_dadd+0x120>
    3ca8:	230f      	movs	r3, #15
    3caa:	403b      	ands	r3, r7
    3cac:	2b04      	cmp	r3, #4
    3cae:	d005      	beq.n	3cbc <__aeabi_dadd+0x120>
    3cb0:	1d3b      	adds	r3, r7, #4
    3cb2:	42bb      	cmp	r3, r7
    3cb4:	41bf      	sbcs	r7, r7
    3cb6:	427f      	negs	r7, r7
    3cb8:	19e4      	adds	r4, r4, r7
    3cba:	001f      	movs	r7, r3
    3cbc:	0223      	lsls	r3, r4, #8
    3cbe:	d52c      	bpl.n	3d1a <__aeabi_dadd+0x17e>
    3cc0:	4b96      	ldr	r3, [pc, #600]	; (3f1c <__aeabi_dadd+0x380>)
    3cc2:	3601      	adds	r6, #1
    3cc4:	429e      	cmp	r6, r3
    3cc6:	d100      	bne.n	3cca <__aeabi_dadd+0x12e>
    3cc8:	e09a      	b.n	3e00 <__aeabi_dadd+0x264>
    3cca:	4645      	mov	r5, r8
    3ccc:	4b94      	ldr	r3, [pc, #592]	; (3f20 <__aeabi_dadd+0x384>)
    3cce:	08ff      	lsrs	r7, r7, #3
    3cd0:	401c      	ands	r4, r3
    3cd2:	0760      	lsls	r0, r4, #29
    3cd4:	0576      	lsls	r6, r6, #21
    3cd6:	0264      	lsls	r4, r4, #9
    3cd8:	4307      	orrs	r7, r0
    3cda:	0b24      	lsrs	r4, r4, #12
    3cdc:	0d76      	lsrs	r6, r6, #21
    3cde:	2100      	movs	r1, #0
    3ce0:	0324      	lsls	r4, r4, #12
    3ce2:	0b23      	lsrs	r3, r4, #12
    3ce4:	0d0c      	lsrs	r4, r1, #20
    3ce6:	4a8f      	ldr	r2, [pc, #572]	; (3f24 <__aeabi_dadd+0x388>)
    3ce8:	0524      	lsls	r4, r4, #20
    3cea:	431c      	orrs	r4, r3
    3cec:	4014      	ands	r4, r2
    3cee:	0533      	lsls	r3, r6, #20
    3cf0:	4323      	orrs	r3, r4
    3cf2:	005b      	lsls	r3, r3, #1
    3cf4:	07ed      	lsls	r5, r5, #31
    3cf6:	085b      	lsrs	r3, r3, #1
    3cf8:	432b      	orrs	r3, r5
    3cfa:	0038      	movs	r0, r7
    3cfc:	0019      	movs	r1, r3
    3cfe:	bc3c      	pop	{r2, r3, r4, r5}
    3d00:	4690      	mov	r8, r2
    3d02:	4699      	mov	r9, r3
    3d04:	46a2      	mov	sl, r4
    3d06:	46ab      	mov	fp, r5
    3d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d0a:	4664      	mov	r4, ip
    3d0c:	4304      	orrs	r4, r0
    3d0e:	d100      	bne.n	3d12 <__aeabi_dadd+0x176>
    3d10:	e211      	b.n	4136 <__aeabi_dadd+0x59a>
    3d12:	0004      	movs	r4, r0
    3d14:	4667      	mov	r7, ip
    3d16:	077b      	lsls	r3, r7, #29
    3d18:	d1c6      	bne.n	3ca8 <__aeabi_dadd+0x10c>
    3d1a:	4645      	mov	r5, r8
    3d1c:	0760      	lsls	r0, r4, #29
    3d1e:	08ff      	lsrs	r7, r7, #3
    3d20:	4307      	orrs	r7, r0
    3d22:	08e4      	lsrs	r4, r4, #3
    3d24:	4b7d      	ldr	r3, [pc, #500]	; (3f1c <__aeabi_dadd+0x380>)
    3d26:	429e      	cmp	r6, r3
    3d28:	d030      	beq.n	3d8c <__aeabi_dadd+0x1f0>
    3d2a:	0324      	lsls	r4, r4, #12
    3d2c:	0576      	lsls	r6, r6, #21
    3d2e:	0b24      	lsrs	r4, r4, #12
    3d30:	0d76      	lsrs	r6, r6, #21
    3d32:	e7d4      	b.n	3cde <__aeabi_dadd+0x142>
    3d34:	1a33      	subs	r3, r6, r0
    3d36:	469a      	mov	sl, r3
    3d38:	2b00      	cmp	r3, #0
    3d3a:	dd78      	ble.n	3e2e <__aeabi_dadd+0x292>
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d031      	beq.n	3da4 <__aeabi_dadd+0x208>
    3d40:	4876      	ldr	r0, [pc, #472]	; (3f1c <__aeabi_dadd+0x380>)
    3d42:	4286      	cmp	r6, r0
    3d44:	d0ae      	beq.n	3ca4 <__aeabi_dadd+0x108>
    3d46:	2080      	movs	r0, #128	; 0x80
    3d48:	0400      	lsls	r0, r0, #16
    3d4a:	4301      	orrs	r1, r0
    3d4c:	4653      	mov	r3, sl
    3d4e:	2b38      	cmp	r3, #56	; 0x38
    3d50:	dc00      	bgt.n	3d54 <__aeabi_dadd+0x1b8>
    3d52:	e0e9      	b.n	3f28 <__aeabi_dadd+0x38c>
    3d54:	430a      	orrs	r2, r1
    3d56:	1e51      	subs	r1, r2, #1
    3d58:	418a      	sbcs	r2, r1
    3d5a:	2100      	movs	r1, #0
    3d5c:	19d2      	adds	r2, r2, r7
    3d5e:	42ba      	cmp	r2, r7
    3d60:	41bf      	sbcs	r7, r7
    3d62:	1909      	adds	r1, r1, r4
    3d64:	427c      	negs	r4, r7
    3d66:	0017      	movs	r7, r2
    3d68:	190c      	adds	r4, r1, r4
    3d6a:	0223      	lsls	r3, r4, #8
    3d6c:	d5d3      	bpl.n	3d16 <__aeabi_dadd+0x17a>
    3d6e:	4b6b      	ldr	r3, [pc, #428]	; (3f1c <__aeabi_dadd+0x380>)
    3d70:	3601      	adds	r6, #1
    3d72:	429e      	cmp	r6, r3
    3d74:	d100      	bne.n	3d78 <__aeabi_dadd+0x1dc>
    3d76:	e13a      	b.n	3fee <__aeabi_dadd+0x452>
    3d78:	2001      	movs	r0, #1
    3d7a:	4b69      	ldr	r3, [pc, #420]	; (3f20 <__aeabi_dadd+0x384>)
    3d7c:	401c      	ands	r4, r3
    3d7e:	087b      	lsrs	r3, r7, #1
    3d80:	4007      	ands	r7, r0
    3d82:	431f      	orrs	r7, r3
    3d84:	07e0      	lsls	r0, r4, #31
    3d86:	4307      	orrs	r7, r0
    3d88:	0864      	lsrs	r4, r4, #1
    3d8a:	e78b      	b.n	3ca4 <__aeabi_dadd+0x108>
    3d8c:	0023      	movs	r3, r4
    3d8e:	433b      	orrs	r3, r7
    3d90:	d100      	bne.n	3d94 <__aeabi_dadd+0x1f8>
    3d92:	e1cb      	b.n	412c <__aeabi_dadd+0x590>
    3d94:	2280      	movs	r2, #128	; 0x80
    3d96:	0312      	lsls	r2, r2, #12
    3d98:	4314      	orrs	r4, r2
    3d9a:	0324      	lsls	r4, r4, #12
    3d9c:	0b24      	lsrs	r4, r4, #12
    3d9e:	e79e      	b.n	3cde <__aeabi_dadd+0x142>
    3da0:	002e      	movs	r6, r5
    3da2:	e77f      	b.n	3ca4 <__aeabi_dadd+0x108>
    3da4:	0008      	movs	r0, r1
    3da6:	4310      	orrs	r0, r2
    3da8:	d100      	bne.n	3dac <__aeabi_dadd+0x210>
    3daa:	e0b4      	b.n	3f16 <__aeabi_dadd+0x37a>
    3dac:	1e58      	subs	r0, r3, #1
    3dae:	2800      	cmp	r0, #0
    3db0:	d000      	beq.n	3db4 <__aeabi_dadd+0x218>
    3db2:	e0de      	b.n	3f72 <__aeabi_dadd+0x3d6>
    3db4:	18ba      	adds	r2, r7, r2
    3db6:	42ba      	cmp	r2, r7
    3db8:	419b      	sbcs	r3, r3
    3dba:	1864      	adds	r4, r4, r1
    3dbc:	425b      	negs	r3, r3
    3dbe:	18e4      	adds	r4, r4, r3
    3dc0:	0017      	movs	r7, r2
    3dc2:	2601      	movs	r6, #1
    3dc4:	0223      	lsls	r3, r4, #8
    3dc6:	d5a6      	bpl.n	3d16 <__aeabi_dadd+0x17a>
    3dc8:	2602      	movs	r6, #2
    3dca:	e7d5      	b.n	3d78 <__aeabi_dadd+0x1dc>
    3dcc:	2d00      	cmp	r5, #0
    3dce:	d16e      	bne.n	3eae <__aeabi_dadd+0x312>
    3dd0:	1c70      	adds	r0, r6, #1
    3dd2:	0540      	lsls	r0, r0, #21
    3dd4:	0d40      	lsrs	r0, r0, #21
    3dd6:	2801      	cmp	r0, #1
    3dd8:	dc00      	bgt.n	3ddc <__aeabi_dadd+0x240>
    3dda:	e0f9      	b.n	3fd0 <__aeabi_dadd+0x434>
    3ddc:	1ab8      	subs	r0, r7, r2
    3dde:	4684      	mov	ip, r0
    3de0:	4287      	cmp	r7, r0
    3de2:	4180      	sbcs	r0, r0
    3de4:	1ae5      	subs	r5, r4, r3
    3de6:	4240      	negs	r0, r0
    3de8:	1a2d      	subs	r5, r5, r0
    3dea:	0228      	lsls	r0, r5, #8
    3dec:	d400      	bmi.n	3df0 <__aeabi_dadd+0x254>
    3dee:	e089      	b.n	3f04 <__aeabi_dadd+0x368>
    3df0:	1bd7      	subs	r7, r2, r7
    3df2:	42ba      	cmp	r2, r7
    3df4:	4192      	sbcs	r2, r2
    3df6:	1b1c      	subs	r4, r3, r4
    3df8:	4252      	negs	r2, r2
    3dfa:	1aa5      	subs	r5, r4, r2
    3dfc:	46d8      	mov	r8, fp
    3dfe:	e729      	b.n	3c54 <__aeabi_dadd+0xb8>
    3e00:	4645      	mov	r5, r8
    3e02:	2400      	movs	r4, #0
    3e04:	2700      	movs	r7, #0
    3e06:	e76a      	b.n	3cde <__aeabi_dadd+0x142>
    3e08:	4c45      	ldr	r4, [pc, #276]	; (3f20 <__aeabi_dadd+0x384>)
    3e0a:	1af6      	subs	r6, r6, r3
    3e0c:	402c      	ands	r4, r5
    3e0e:	e749      	b.n	3ca4 <__aeabi_dadd+0x108>
    3e10:	003d      	movs	r5, r7
    3e12:	3828      	subs	r0, #40	; 0x28
    3e14:	4085      	lsls	r5, r0
    3e16:	2700      	movs	r7, #0
    3e18:	e72e      	b.n	3c78 <__aeabi_dadd+0xdc>
    3e1a:	0038      	movs	r0, r7
    3e1c:	f001 fb04 	bl	5428 <__clzsi2>
    3e20:	3020      	adds	r0, #32
    3e22:	e71d      	b.n	3c60 <__aeabi_dadd+0xc4>
    3e24:	430a      	orrs	r2, r1
    3e26:	1e51      	subs	r1, r2, #1
    3e28:	418a      	sbcs	r2, r1
    3e2a:	2100      	movs	r1, #0
    3e2c:	e707      	b.n	3c3e <__aeabi_dadd+0xa2>
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d000      	beq.n	3e34 <__aeabi_dadd+0x298>
    3e32:	e0f3      	b.n	401c <__aeabi_dadd+0x480>
    3e34:	1c70      	adds	r0, r6, #1
    3e36:	0543      	lsls	r3, r0, #21
    3e38:	0d5b      	lsrs	r3, r3, #21
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	dc00      	bgt.n	3e40 <__aeabi_dadd+0x2a4>
    3e3e:	e0ad      	b.n	3f9c <__aeabi_dadd+0x400>
    3e40:	4b36      	ldr	r3, [pc, #216]	; (3f1c <__aeabi_dadd+0x380>)
    3e42:	4298      	cmp	r0, r3
    3e44:	d100      	bne.n	3e48 <__aeabi_dadd+0x2ac>
    3e46:	e0d1      	b.n	3fec <__aeabi_dadd+0x450>
    3e48:	18ba      	adds	r2, r7, r2
    3e4a:	42ba      	cmp	r2, r7
    3e4c:	41bf      	sbcs	r7, r7
    3e4e:	1864      	adds	r4, r4, r1
    3e50:	427f      	negs	r7, r7
    3e52:	19e4      	adds	r4, r4, r7
    3e54:	07e7      	lsls	r7, r4, #31
    3e56:	0852      	lsrs	r2, r2, #1
    3e58:	4317      	orrs	r7, r2
    3e5a:	0864      	lsrs	r4, r4, #1
    3e5c:	0006      	movs	r6, r0
    3e5e:	e721      	b.n	3ca4 <__aeabi_dadd+0x108>
    3e60:	482e      	ldr	r0, [pc, #184]	; (3f1c <__aeabi_dadd+0x380>)
    3e62:	4285      	cmp	r5, r0
    3e64:	d100      	bne.n	3e68 <__aeabi_dadd+0x2cc>
    3e66:	e093      	b.n	3f90 <__aeabi_dadd+0x3f4>
    3e68:	001d      	movs	r5, r3
    3e6a:	e6d0      	b.n	3c0e <__aeabi_dadd+0x72>
    3e6c:	0029      	movs	r1, r5
    3e6e:	3e1f      	subs	r6, #31
    3e70:	40f1      	lsrs	r1, r6
    3e72:	2b20      	cmp	r3, #32
    3e74:	d100      	bne.n	3e78 <__aeabi_dadd+0x2dc>
    3e76:	e08d      	b.n	3f94 <__aeabi_dadd+0x3f8>
    3e78:	2240      	movs	r2, #64	; 0x40
    3e7a:	1ad3      	subs	r3, r2, r3
    3e7c:	409d      	lsls	r5, r3
    3e7e:	432f      	orrs	r7, r5
    3e80:	1e7d      	subs	r5, r7, #1
    3e82:	41af      	sbcs	r7, r5
    3e84:	2400      	movs	r4, #0
    3e86:	430f      	orrs	r7, r1
    3e88:	2600      	movs	r6, #0
    3e8a:	e744      	b.n	3d16 <__aeabi_dadd+0x17a>
    3e8c:	002b      	movs	r3, r5
    3e8e:	0008      	movs	r0, r1
    3e90:	3b20      	subs	r3, #32
    3e92:	40d8      	lsrs	r0, r3
    3e94:	0003      	movs	r3, r0
    3e96:	2d20      	cmp	r5, #32
    3e98:	d100      	bne.n	3e9c <__aeabi_dadd+0x300>
    3e9a:	e07d      	b.n	3f98 <__aeabi_dadd+0x3fc>
    3e9c:	2040      	movs	r0, #64	; 0x40
    3e9e:	1b45      	subs	r5, r0, r5
    3ea0:	40a9      	lsls	r1, r5
    3ea2:	430a      	orrs	r2, r1
    3ea4:	1e51      	subs	r1, r2, #1
    3ea6:	418a      	sbcs	r2, r1
    3ea8:	2100      	movs	r1, #0
    3eaa:	431a      	orrs	r2, r3
    3eac:	e6c7      	b.n	3c3e <__aeabi_dadd+0xa2>
    3eae:	2e00      	cmp	r6, #0
    3eb0:	d050      	beq.n	3f54 <__aeabi_dadd+0x3b8>
    3eb2:	4e1a      	ldr	r6, [pc, #104]	; (3f1c <__aeabi_dadd+0x380>)
    3eb4:	42b0      	cmp	r0, r6
    3eb6:	d057      	beq.n	3f68 <__aeabi_dadd+0x3cc>
    3eb8:	2680      	movs	r6, #128	; 0x80
    3eba:	426b      	negs	r3, r5
    3ebc:	4699      	mov	r9, r3
    3ebe:	0436      	lsls	r6, r6, #16
    3ec0:	4334      	orrs	r4, r6
    3ec2:	464b      	mov	r3, r9
    3ec4:	2b38      	cmp	r3, #56	; 0x38
    3ec6:	dd00      	ble.n	3eca <__aeabi_dadd+0x32e>
    3ec8:	e0d6      	b.n	4078 <__aeabi_dadd+0x4dc>
    3eca:	2b1f      	cmp	r3, #31
    3ecc:	dd00      	ble.n	3ed0 <__aeabi_dadd+0x334>
    3ece:	e135      	b.n	413c <__aeabi_dadd+0x5a0>
    3ed0:	2620      	movs	r6, #32
    3ed2:	1af5      	subs	r5, r6, r3
    3ed4:	0026      	movs	r6, r4
    3ed6:	40ae      	lsls	r6, r5
    3ed8:	46b2      	mov	sl, r6
    3eda:	003e      	movs	r6, r7
    3edc:	40de      	lsrs	r6, r3
    3ede:	46ac      	mov	ip, r5
    3ee0:	0035      	movs	r5, r6
    3ee2:	4656      	mov	r6, sl
    3ee4:	432e      	orrs	r6, r5
    3ee6:	4665      	mov	r5, ip
    3ee8:	40af      	lsls	r7, r5
    3eea:	1e7d      	subs	r5, r7, #1
    3eec:	41af      	sbcs	r7, r5
    3eee:	40dc      	lsrs	r4, r3
    3ef0:	4337      	orrs	r7, r6
    3ef2:	1bd7      	subs	r7, r2, r7
    3ef4:	42ba      	cmp	r2, r7
    3ef6:	4192      	sbcs	r2, r2
    3ef8:	1b0c      	subs	r4, r1, r4
    3efa:	4252      	negs	r2, r2
    3efc:	1aa4      	subs	r4, r4, r2
    3efe:	0006      	movs	r6, r0
    3f00:	46d8      	mov	r8, fp
    3f02:	e6a3      	b.n	3c4c <__aeabi_dadd+0xb0>
    3f04:	4664      	mov	r4, ip
    3f06:	4667      	mov	r7, ip
    3f08:	432c      	orrs	r4, r5
    3f0a:	d000      	beq.n	3f0e <__aeabi_dadd+0x372>
    3f0c:	e6a2      	b.n	3c54 <__aeabi_dadd+0xb8>
    3f0e:	2500      	movs	r5, #0
    3f10:	2600      	movs	r6, #0
    3f12:	2700      	movs	r7, #0
    3f14:	e706      	b.n	3d24 <__aeabi_dadd+0x188>
    3f16:	001e      	movs	r6, r3
    3f18:	e6c4      	b.n	3ca4 <__aeabi_dadd+0x108>
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	000007ff 	.word	0x000007ff
    3f20:	ff7fffff 	.word	0xff7fffff
    3f24:	800fffff 	.word	0x800fffff
    3f28:	2b1f      	cmp	r3, #31
    3f2a:	dc63      	bgt.n	3ff4 <__aeabi_dadd+0x458>
    3f2c:	2020      	movs	r0, #32
    3f2e:	1ac3      	subs	r3, r0, r3
    3f30:	0008      	movs	r0, r1
    3f32:	4098      	lsls	r0, r3
    3f34:	469c      	mov	ip, r3
    3f36:	4683      	mov	fp, r0
    3f38:	4653      	mov	r3, sl
    3f3a:	0010      	movs	r0, r2
    3f3c:	40d8      	lsrs	r0, r3
    3f3e:	0003      	movs	r3, r0
    3f40:	4658      	mov	r0, fp
    3f42:	4318      	orrs	r0, r3
    3f44:	4663      	mov	r3, ip
    3f46:	409a      	lsls	r2, r3
    3f48:	1e53      	subs	r3, r2, #1
    3f4a:	419a      	sbcs	r2, r3
    3f4c:	4653      	mov	r3, sl
    3f4e:	4302      	orrs	r2, r0
    3f50:	40d9      	lsrs	r1, r3
    3f52:	e703      	b.n	3d5c <__aeabi_dadd+0x1c0>
    3f54:	0026      	movs	r6, r4
    3f56:	433e      	orrs	r6, r7
    3f58:	d006      	beq.n	3f68 <__aeabi_dadd+0x3cc>
    3f5a:	43eb      	mvns	r3, r5
    3f5c:	4699      	mov	r9, r3
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d0c7      	beq.n	3ef2 <__aeabi_dadd+0x356>
    3f62:	4e94      	ldr	r6, [pc, #592]	; (41b4 <__aeabi_dadd+0x618>)
    3f64:	42b0      	cmp	r0, r6
    3f66:	d1ac      	bne.n	3ec2 <__aeabi_dadd+0x326>
    3f68:	000c      	movs	r4, r1
    3f6a:	0017      	movs	r7, r2
    3f6c:	0006      	movs	r6, r0
    3f6e:	46d8      	mov	r8, fp
    3f70:	e698      	b.n	3ca4 <__aeabi_dadd+0x108>
    3f72:	4b90      	ldr	r3, [pc, #576]	; (41b4 <__aeabi_dadd+0x618>)
    3f74:	459a      	cmp	sl, r3
    3f76:	d00b      	beq.n	3f90 <__aeabi_dadd+0x3f4>
    3f78:	4682      	mov	sl, r0
    3f7a:	e6e7      	b.n	3d4c <__aeabi_dadd+0x1b0>
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d000      	beq.n	3f82 <__aeabi_dadd+0x3e6>
    3f80:	e09e      	b.n	40c0 <__aeabi_dadd+0x524>
    3f82:	0018      	movs	r0, r3
    3f84:	4310      	orrs	r0, r2
    3f86:	d100      	bne.n	3f8a <__aeabi_dadd+0x3ee>
    3f88:	e0e9      	b.n	415e <__aeabi_dadd+0x5c2>
    3f8a:	001c      	movs	r4, r3
    3f8c:	0017      	movs	r7, r2
    3f8e:	46d8      	mov	r8, fp
    3f90:	4e88      	ldr	r6, [pc, #544]	; (41b4 <__aeabi_dadd+0x618>)
    3f92:	e687      	b.n	3ca4 <__aeabi_dadd+0x108>
    3f94:	2500      	movs	r5, #0
    3f96:	e772      	b.n	3e7e <__aeabi_dadd+0x2e2>
    3f98:	2100      	movs	r1, #0
    3f9a:	e782      	b.n	3ea2 <__aeabi_dadd+0x306>
    3f9c:	0023      	movs	r3, r4
    3f9e:	433b      	orrs	r3, r7
    3fa0:	2e00      	cmp	r6, #0
    3fa2:	d000      	beq.n	3fa6 <__aeabi_dadd+0x40a>
    3fa4:	e0ab      	b.n	40fe <__aeabi_dadd+0x562>
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d100      	bne.n	3fac <__aeabi_dadd+0x410>
    3faa:	e0e7      	b.n	417c <__aeabi_dadd+0x5e0>
    3fac:	000b      	movs	r3, r1
    3fae:	4313      	orrs	r3, r2
    3fb0:	d100      	bne.n	3fb4 <__aeabi_dadd+0x418>
    3fb2:	e677      	b.n	3ca4 <__aeabi_dadd+0x108>
    3fb4:	18ba      	adds	r2, r7, r2
    3fb6:	42ba      	cmp	r2, r7
    3fb8:	41bf      	sbcs	r7, r7
    3fba:	1864      	adds	r4, r4, r1
    3fbc:	427f      	negs	r7, r7
    3fbe:	19e4      	adds	r4, r4, r7
    3fc0:	0223      	lsls	r3, r4, #8
    3fc2:	d400      	bmi.n	3fc6 <__aeabi_dadd+0x42a>
    3fc4:	e0f2      	b.n	41ac <__aeabi_dadd+0x610>
    3fc6:	4b7c      	ldr	r3, [pc, #496]	; (41b8 <__aeabi_dadd+0x61c>)
    3fc8:	0017      	movs	r7, r2
    3fca:	401c      	ands	r4, r3
    3fcc:	0006      	movs	r6, r0
    3fce:	e669      	b.n	3ca4 <__aeabi_dadd+0x108>
    3fd0:	0020      	movs	r0, r4
    3fd2:	4338      	orrs	r0, r7
    3fd4:	2e00      	cmp	r6, #0
    3fd6:	d1d1      	bne.n	3f7c <__aeabi_dadd+0x3e0>
    3fd8:	2800      	cmp	r0, #0
    3fda:	d15b      	bne.n	4094 <__aeabi_dadd+0x4f8>
    3fdc:	001c      	movs	r4, r3
    3fde:	4314      	orrs	r4, r2
    3fe0:	d100      	bne.n	3fe4 <__aeabi_dadd+0x448>
    3fe2:	e0a8      	b.n	4136 <__aeabi_dadd+0x59a>
    3fe4:	001c      	movs	r4, r3
    3fe6:	0017      	movs	r7, r2
    3fe8:	46d8      	mov	r8, fp
    3fea:	e65b      	b.n	3ca4 <__aeabi_dadd+0x108>
    3fec:	0006      	movs	r6, r0
    3fee:	2400      	movs	r4, #0
    3ff0:	2700      	movs	r7, #0
    3ff2:	e697      	b.n	3d24 <__aeabi_dadd+0x188>
    3ff4:	4650      	mov	r0, sl
    3ff6:	000b      	movs	r3, r1
    3ff8:	3820      	subs	r0, #32
    3ffa:	40c3      	lsrs	r3, r0
    3ffc:	4699      	mov	r9, r3
    3ffe:	4653      	mov	r3, sl
    4000:	2b20      	cmp	r3, #32
    4002:	d100      	bne.n	4006 <__aeabi_dadd+0x46a>
    4004:	e095      	b.n	4132 <__aeabi_dadd+0x596>
    4006:	2340      	movs	r3, #64	; 0x40
    4008:	4650      	mov	r0, sl
    400a:	1a1b      	subs	r3, r3, r0
    400c:	4099      	lsls	r1, r3
    400e:	430a      	orrs	r2, r1
    4010:	1e51      	subs	r1, r2, #1
    4012:	418a      	sbcs	r2, r1
    4014:	464b      	mov	r3, r9
    4016:	2100      	movs	r1, #0
    4018:	431a      	orrs	r2, r3
    401a:	e69f      	b.n	3d5c <__aeabi_dadd+0x1c0>
    401c:	2e00      	cmp	r6, #0
    401e:	d130      	bne.n	4082 <__aeabi_dadd+0x4e6>
    4020:	0026      	movs	r6, r4
    4022:	433e      	orrs	r6, r7
    4024:	d067      	beq.n	40f6 <__aeabi_dadd+0x55a>
    4026:	43db      	mvns	r3, r3
    4028:	469a      	mov	sl, r3
    402a:	2b00      	cmp	r3, #0
    402c:	d01c      	beq.n	4068 <__aeabi_dadd+0x4cc>
    402e:	4e61      	ldr	r6, [pc, #388]	; (41b4 <__aeabi_dadd+0x618>)
    4030:	42b0      	cmp	r0, r6
    4032:	d060      	beq.n	40f6 <__aeabi_dadd+0x55a>
    4034:	4653      	mov	r3, sl
    4036:	2b38      	cmp	r3, #56	; 0x38
    4038:	dd00      	ble.n	403c <__aeabi_dadd+0x4a0>
    403a:	e096      	b.n	416a <__aeabi_dadd+0x5ce>
    403c:	2b1f      	cmp	r3, #31
    403e:	dd00      	ble.n	4042 <__aeabi_dadd+0x4a6>
    4040:	e09f      	b.n	4182 <__aeabi_dadd+0x5e6>
    4042:	2620      	movs	r6, #32
    4044:	1af3      	subs	r3, r6, r3
    4046:	0026      	movs	r6, r4
    4048:	409e      	lsls	r6, r3
    404a:	469c      	mov	ip, r3
    404c:	46b3      	mov	fp, r6
    404e:	4653      	mov	r3, sl
    4050:	003e      	movs	r6, r7
    4052:	40de      	lsrs	r6, r3
    4054:	0033      	movs	r3, r6
    4056:	465e      	mov	r6, fp
    4058:	431e      	orrs	r6, r3
    405a:	4663      	mov	r3, ip
    405c:	409f      	lsls	r7, r3
    405e:	1e7b      	subs	r3, r7, #1
    4060:	419f      	sbcs	r7, r3
    4062:	4653      	mov	r3, sl
    4064:	40dc      	lsrs	r4, r3
    4066:	4337      	orrs	r7, r6
    4068:	18bf      	adds	r7, r7, r2
    406a:	4297      	cmp	r7, r2
    406c:	4192      	sbcs	r2, r2
    406e:	1864      	adds	r4, r4, r1
    4070:	4252      	negs	r2, r2
    4072:	18a4      	adds	r4, r4, r2
    4074:	0006      	movs	r6, r0
    4076:	e678      	b.n	3d6a <__aeabi_dadd+0x1ce>
    4078:	4327      	orrs	r7, r4
    407a:	1e7c      	subs	r4, r7, #1
    407c:	41a7      	sbcs	r7, r4
    407e:	2400      	movs	r4, #0
    4080:	e737      	b.n	3ef2 <__aeabi_dadd+0x356>
    4082:	4e4c      	ldr	r6, [pc, #304]	; (41b4 <__aeabi_dadd+0x618>)
    4084:	42b0      	cmp	r0, r6
    4086:	d036      	beq.n	40f6 <__aeabi_dadd+0x55a>
    4088:	2680      	movs	r6, #128	; 0x80
    408a:	425b      	negs	r3, r3
    408c:	0436      	lsls	r6, r6, #16
    408e:	469a      	mov	sl, r3
    4090:	4334      	orrs	r4, r6
    4092:	e7cf      	b.n	4034 <__aeabi_dadd+0x498>
    4094:	0018      	movs	r0, r3
    4096:	4310      	orrs	r0, r2
    4098:	d100      	bne.n	409c <__aeabi_dadd+0x500>
    409a:	e603      	b.n	3ca4 <__aeabi_dadd+0x108>
    409c:	1ab8      	subs	r0, r7, r2
    409e:	4684      	mov	ip, r0
    40a0:	4567      	cmp	r7, ip
    40a2:	41ad      	sbcs	r5, r5
    40a4:	1ae0      	subs	r0, r4, r3
    40a6:	426d      	negs	r5, r5
    40a8:	1b40      	subs	r0, r0, r5
    40aa:	0205      	lsls	r5, r0, #8
    40ac:	d400      	bmi.n	40b0 <__aeabi_dadd+0x514>
    40ae:	e62c      	b.n	3d0a <__aeabi_dadd+0x16e>
    40b0:	1bd7      	subs	r7, r2, r7
    40b2:	42ba      	cmp	r2, r7
    40b4:	4192      	sbcs	r2, r2
    40b6:	1b1c      	subs	r4, r3, r4
    40b8:	4252      	negs	r2, r2
    40ba:	1aa4      	subs	r4, r4, r2
    40bc:	46d8      	mov	r8, fp
    40be:	e5f1      	b.n	3ca4 <__aeabi_dadd+0x108>
    40c0:	0018      	movs	r0, r3
    40c2:	4310      	orrs	r0, r2
    40c4:	d100      	bne.n	40c8 <__aeabi_dadd+0x52c>
    40c6:	e763      	b.n	3f90 <__aeabi_dadd+0x3f4>
    40c8:	08f8      	lsrs	r0, r7, #3
    40ca:	0767      	lsls	r7, r4, #29
    40cc:	4307      	orrs	r7, r0
    40ce:	2080      	movs	r0, #128	; 0x80
    40d0:	08e4      	lsrs	r4, r4, #3
    40d2:	0300      	lsls	r0, r0, #12
    40d4:	4204      	tst	r4, r0
    40d6:	d008      	beq.n	40ea <__aeabi_dadd+0x54e>
    40d8:	08dd      	lsrs	r5, r3, #3
    40da:	4205      	tst	r5, r0
    40dc:	d105      	bne.n	40ea <__aeabi_dadd+0x54e>
    40de:	08d2      	lsrs	r2, r2, #3
    40e0:	0759      	lsls	r1, r3, #29
    40e2:	4311      	orrs	r1, r2
    40e4:	000f      	movs	r7, r1
    40e6:	002c      	movs	r4, r5
    40e8:	46d8      	mov	r8, fp
    40ea:	0f7b      	lsrs	r3, r7, #29
    40ec:	00e4      	lsls	r4, r4, #3
    40ee:	431c      	orrs	r4, r3
    40f0:	00ff      	lsls	r7, r7, #3
    40f2:	4e30      	ldr	r6, [pc, #192]	; (41b4 <__aeabi_dadd+0x618>)
    40f4:	e5d6      	b.n	3ca4 <__aeabi_dadd+0x108>
    40f6:	000c      	movs	r4, r1
    40f8:	0017      	movs	r7, r2
    40fa:	0006      	movs	r6, r0
    40fc:	e5d2      	b.n	3ca4 <__aeabi_dadd+0x108>
    40fe:	2b00      	cmp	r3, #0
    4100:	d038      	beq.n	4174 <__aeabi_dadd+0x5d8>
    4102:	000b      	movs	r3, r1
    4104:	4313      	orrs	r3, r2
    4106:	d100      	bne.n	410a <__aeabi_dadd+0x56e>
    4108:	e742      	b.n	3f90 <__aeabi_dadd+0x3f4>
    410a:	08f8      	lsrs	r0, r7, #3
    410c:	0767      	lsls	r7, r4, #29
    410e:	4307      	orrs	r7, r0
    4110:	2080      	movs	r0, #128	; 0x80
    4112:	08e4      	lsrs	r4, r4, #3
    4114:	0300      	lsls	r0, r0, #12
    4116:	4204      	tst	r4, r0
    4118:	d0e7      	beq.n	40ea <__aeabi_dadd+0x54e>
    411a:	08cb      	lsrs	r3, r1, #3
    411c:	4203      	tst	r3, r0
    411e:	d1e4      	bne.n	40ea <__aeabi_dadd+0x54e>
    4120:	08d2      	lsrs	r2, r2, #3
    4122:	0749      	lsls	r1, r1, #29
    4124:	4311      	orrs	r1, r2
    4126:	000f      	movs	r7, r1
    4128:	001c      	movs	r4, r3
    412a:	e7de      	b.n	40ea <__aeabi_dadd+0x54e>
    412c:	2700      	movs	r7, #0
    412e:	2400      	movs	r4, #0
    4130:	e5d5      	b.n	3cde <__aeabi_dadd+0x142>
    4132:	2100      	movs	r1, #0
    4134:	e76b      	b.n	400e <__aeabi_dadd+0x472>
    4136:	2500      	movs	r5, #0
    4138:	2700      	movs	r7, #0
    413a:	e5f3      	b.n	3d24 <__aeabi_dadd+0x188>
    413c:	464e      	mov	r6, r9
    413e:	0025      	movs	r5, r4
    4140:	3e20      	subs	r6, #32
    4142:	40f5      	lsrs	r5, r6
    4144:	464b      	mov	r3, r9
    4146:	002e      	movs	r6, r5
    4148:	2b20      	cmp	r3, #32
    414a:	d02d      	beq.n	41a8 <__aeabi_dadd+0x60c>
    414c:	2540      	movs	r5, #64	; 0x40
    414e:	1aed      	subs	r5, r5, r3
    4150:	40ac      	lsls	r4, r5
    4152:	4327      	orrs	r7, r4
    4154:	1e7c      	subs	r4, r7, #1
    4156:	41a7      	sbcs	r7, r4
    4158:	2400      	movs	r4, #0
    415a:	4337      	orrs	r7, r6
    415c:	e6c9      	b.n	3ef2 <__aeabi_dadd+0x356>
    415e:	2480      	movs	r4, #128	; 0x80
    4160:	2500      	movs	r5, #0
    4162:	0324      	lsls	r4, r4, #12
    4164:	4e13      	ldr	r6, [pc, #76]	; (41b4 <__aeabi_dadd+0x618>)
    4166:	2700      	movs	r7, #0
    4168:	e5dc      	b.n	3d24 <__aeabi_dadd+0x188>
    416a:	4327      	orrs	r7, r4
    416c:	1e7c      	subs	r4, r7, #1
    416e:	41a7      	sbcs	r7, r4
    4170:	2400      	movs	r4, #0
    4172:	e779      	b.n	4068 <__aeabi_dadd+0x4cc>
    4174:	000c      	movs	r4, r1
    4176:	0017      	movs	r7, r2
    4178:	4e0e      	ldr	r6, [pc, #56]	; (41b4 <__aeabi_dadd+0x618>)
    417a:	e593      	b.n	3ca4 <__aeabi_dadd+0x108>
    417c:	000c      	movs	r4, r1
    417e:	0017      	movs	r7, r2
    4180:	e590      	b.n	3ca4 <__aeabi_dadd+0x108>
    4182:	4656      	mov	r6, sl
    4184:	0023      	movs	r3, r4
    4186:	3e20      	subs	r6, #32
    4188:	40f3      	lsrs	r3, r6
    418a:	4699      	mov	r9, r3
    418c:	4653      	mov	r3, sl
    418e:	2b20      	cmp	r3, #32
    4190:	d00e      	beq.n	41b0 <__aeabi_dadd+0x614>
    4192:	2340      	movs	r3, #64	; 0x40
    4194:	4656      	mov	r6, sl
    4196:	1b9b      	subs	r3, r3, r6
    4198:	409c      	lsls	r4, r3
    419a:	4327      	orrs	r7, r4
    419c:	1e7c      	subs	r4, r7, #1
    419e:	41a7      	sbcs	r7, r4
    41a0:	464b      	mov	r3, r9
    41a2:	2400      	movs	r4, #0
    41a4:	431f      	orrs	r7, r3
    41a6:	e75f      	b.n	4068 <__aeabi_dadd+0x4cc>
    41a8:	2400      	movs	r4, #0
    41aa:	e7d2      	b.n	4152 <__aeabi_dadd+0x5b6>
    41ac:	0017      	movs	r7, r2
    41ae:	e5b2      	b.n	3d16 <__aeabi_dadd+0x17a>
    41b0:	2400      	movs	r4, #0
    41b2:	e7f2      	b.n	419a <__aeabi_dadd+0x5fe>
    41b4:	000007ff 	.word	0x000007ff
    41b8:	ff7fffff 	.word	0xff7fffff

000041bc <__aeabi_ddiv>:
    41bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41be:	4657      	mov	r7, sl
    41c0:	4645      	mov	r5, r8
    41c2:	46de      	mov	lr, fp
    41c4:	464e      	mov	r6, r9
    41c6:	b5e0      	push	{r5, r6, r7, lr}
    41c8:	004c      	lsls	r4, r1, #1
    41ca:	030e      	lsls	r6, r1, #12
    41cc:	b087      	sub	sp, #28
    41ce:	4683      	mov	fp, r0
    41d0:	4692      	mov	sl, r2
    41d2:	001d      	movs	r5, r3
    41d4:	4680      	mov	r8, r0
    41d6:	0b36      	lsrs	r6, r6, #12
    41d8:	0d64      	lsrs	r4, r4, #21
    41da:	0fcf      	lsrs	r7, r1, #31
    41dc:	2c00      	cmp	r4, #0
    41de:	d04f      	beq.n	4280 <__aeabi_ddiv+0xc4>
    41e0:	4b6f      	ldr	r3, [pc, #444]	; (43a0 <__aeabi_ddiv+0x1e4>)
    41e2:	429c      	cmp	r4, r3
    41e4:	d035      	beq.n	4252 <__aeabi_ddiv+0x96>
    41e6:	2380      	movs	r3, #128	; 0x80
    41e8:	0f42      	lsrs	r2, r0, #29
    41ea:	041b      	lsls	r3, r3, #16
    41ec:	00f6      	lsls	r6, r6, #3
    41ee:	4313      	orrs	r3, r2
    41f0:	4333      	orrs	r3, r6
    41f2:	4699      	mov	r9, r3
    41f4:	00c3      	lsls	r3, r0, #3
    41f6:	4698      	mov	r8, r3
    41f8:	4b6a      	ldr	r3, [pc, #424]	; (43a4 <__aeabi_ddiv+0x1e8>)
    41fa:	2600      	movs	r6, #0
    41fc:	469c      	mov	ip, r3
    41fe:	2300      	movs	r3, #0
    4200:	4464      	add	r4, ip
    4202:	9303      	str	r3, [sp, #12]
    4204:	032b      	lsls	r3, r5, #12
    4206:	0b1b      	lsrs	r3, r3, #12
    4208:	469b      	mov	fp, r3
    420a:	006b      	lsls	r3, r5, #1
    420c:	0fed      	lsrs	r5, r5, #31
    420e:	4650      	mov	r0, sl
    4210:	0d5b      	lsrs	r3, r3, #21
    4212:	9501      	str	r5, [sp, #4]
    4214:	d05e      	beq.n	42d4 <__aeabi_ddiv+0x118>
    4216:	4a62      	ldr	r2, [pc, #392]	; (43a0 <__aeabi_ddiv+0x1e4>)
    4218:	4293      	cmp	r3, r2
    421a:	d053      	beq.n	42c4 <__aeabi_ddiv+0x108>
    421c:	465a      	mov	r2, fp
    421e:	00d1      	lsls	r1, r2, #3
    4220:	2280      	movs	r2, #128	; 0x80
    4222:	0f40      	lsrs	r0, r0, #29
    4224:	0412      	lsls	r2, r2, #16
    4226:	4302      	orrs	r2, r0
    4228:	430a      	orrs	r2, r1
    422a:	4693      	mov	fp, r2
    422c:	4652      	mov	r2, sl
    422e:	00d1      	lsls	r1, r2, #3
    4230:	4a5c      	ldr	r2, [pc, #368]	; (43a4 <__aeabi_ddiv+0x1e8>)
    4232:	4694      	mov	ip, r2
    4234:	2200      	movs	r2, #0
    4236:	4463      	add	r3, ip
    4238:	0038      	movs	r0, r7
    423a:	4068      	eors	r0, r5
    423c:	4684      	mov	ip, r0
    423e:	9002      	str	r0, [sp, #8]
    4240:	1ae4      	subs	r4, r4, r3
    4242:	4316      	orrs	r6, r2
    4244:	2e0f      	cmp	r6, #15
    4246:	d900      	bls.n	424a <__aeabi_ddiv+0x8e>
    4248:	e0b4      	b.n	43b4 <__aeabi_ddiv+0x1f8>
    424a:	4b57      	ldr	r3, [pc, #348]	; (43a8 <__aeabi_ddiv+0x1ec>)
    424c:	00b6      	lsls	r6, r6, #2
    424e:	599b      	ldr	r3, [r3, r6]
    4250:	469f      	mov	pc, r3
    4252:	0003      	movs	r3, r0
    4254:	4333      	orrs	r3, r6
    4256:	4699      	mov	r9, r3
    4258:	d16c      	bne.n	4334 <__aeabi_ddiv+0x178>
    425a:	2300      	movs	r3, #0
    425c:	4698      	mov	r8, r3
    425e:	3302      	adds	r3, #2
    4260:	2608      	movs	r6, #8
    4262:	9303      	str	r3, [sp, #12]
    4264:	e7ce      	b.n	4204 <__aeabi_ddiv+0x48>
    4266:	46cb      	mov	fp, r9
    4268:	4641      	mov	r1, r8
    426a:	9a03      	ldr	r2, [sp, #12]
    426c:	9701      	str	r7, [sp, #4]
    426e:	2a02      	cmp	r2, #2
    4270:	d165      	bne.n	433e <__aeabi_ddiv+0x182>
    4272:	9b01      	ldr	r3, [sp, #4]
    4274:	4c4a      	ldr	r4, [pc, #296]	; (43a0 <__aeabi_ddiv+0x1e4>)
    4276:	469c      	mov	ip, r3
    4278:	2300      	movs	r3, #0
    427a:	2200      	movs	r2, #0
    427c:	4698      	mov	r8, r3
    427e:	e06b      	b.n	4358 <__aeabi_ddiv+0x19c>
    4280:	0003      	movs	r3, r0
    4282:	4333      	orrs	r3, r6
    4284:	4699      	mov	r9, r3
    4286:	d04e      	beq.n	4326 <__aeabi_ddiv+0x16a>
    4288:	2e00      	cmp	r6, #0
    428a:	d100      	bne.n	428e <__aeabi_ddiv+0xd2>
    428c:	e1bc      	b.n	4608 <__aeabi_ddiv+0x44c>
    428e:	0030      	movs	r0, r6
    4290:	f001 f8ca 	bl	5428 <__clzsi2>
    4294:	0003      	movs	r3, r0
    4296:	3b0b      	subs	r3, #11
    4298:	2b1c      	cmp	r3, #28
    429a:	dd00      	ble.n	429e <__aeabi_ddiv+0xe2>
    429c:	e1ac      	b.n	45f8 <__aeabi_ddiv+0x43c>
    429e:	221d      	movs	r2, #29
    42a0:	1ad3      	subs	r3, r2, r3
    42a2:	465a      	mov	r2, fp
    42a4:	0001      	movs	r1, r0
    42a6:	40da      	lsrs	r2, r3
    42a8:	3908      	subs	r1, #8
    42aa:	408e      	lsls	r6, r1
    42ac:	0013      	movs	r3, r2
    42ae:	4333      	orrs	r3, r6
    42b0:	4699      	mov	r9, r3
    42b2:	465b      	mov	r3, fp
    42b4:	408b      	lsls	r3, r1
    42b6:	4698      	mov	r8, r3
    42b8:	2300      	movs	r3, #0
    42ba:	4c3c      	ldr	r4, [pc, #240]	; (43ac <__aeabi_ddiv+0x1f0>)
    42bc:	2600      	movs	r6, #0
    42be:	1a24      	subs	r4, r4, r0
    42c0:	9303      	str	r3, [sp, #12]
    42c2:	e79f      	b.n	4204 <__aeabi_ddiv+0x48>
    42c4:	4651      	mov	r1, sl
    42c6:	465a      	mov	r2, fp
    42c8:	4311      	orrs	r1, r2
    42ca:	d129      	bne.n	4320 <__aeabi_ddiv+0x164>
    42cc:	2200      	movs	r2, #0
    42ce:	4693      	mov	fp, r2
    42d0:	3202      	adds	r2, #2
    42d2:	e7b1      	b.n	4238 <__aeabi_ddiv+0x7c>
    42d4:	4659      	mov	r1, fp
    42d6:	4301      	orrs	r1, r0
    42d8:	d01e      	beq.n	4318 <__aeabi_ddiv+0x15c>
    42da:	465b      	mov	r3, fp
    42dc:	2b00      	cmp	r3, #0
    42de:	d100      	bne.n	42e2 <__aeabi_ddiv+0x126>
    42e0:	e19e      	b.n	4620 <__aeabi_ddiv+0x464>
    42e2:	4658      	mov	r0, fp
    42e4:	f001 f8a0 	bl	5428 <__clzsi2>
    42e8:	0003      	movs	r3, r0
    42ea:	3b0b      	subs	r3, #11
    42ec:	2b1c      	cmp	r3, #28
    42ee:	dd00      	ble.n	42f2 <__aeabi_ddiv+0x136>
    42f0:	e18f      	b.n	4612 <__aeabi_ddiv+0x456>
    42f2:	0002      	movs	r2, r0
    42f4:	4659      	mov	r1, fp
    42f6:	3a08      	subs	r2, #8
    42f8:	4091      	lsls	r1, r2
    42fa:	468b      	mov	fp, r1
    42fc:	211d      	movs	r1, #29
    42fe:	1acb      	subs	r3, r1, r3
    4300:	4651      	mov	r1, sl
    4302:	40d9      	lsrs	r1, r3
    4304:	000b      	movs	r3, r1
    4306:	4659      	mov	r1, fp
    4308:	430b      	orrs	r3, r1
    430a:	4651      	mov	r1, sl
    430c:	469b      	mov	fp, r3
    430e:	4091      	lsls	r1, r2
    4310:	4b26      	ldr	r3, [pc, #152]	; (43ac <__aeabi_ddiv+0x1f0>)
    4312:	2200      	movs	r2, #0
    4314:	1a1b      	subs	r3, r3, r0
    4316:	e78f      	b.n	4238 <__aeabi_ddiv+0x7c>
    4318:	2300      	movs	r3, #0
    431a:	2201      	movs	r2, #1
    431c:	469b      	mov	fp, r3
    431e:	e78b      	b.n	4238 <__aeabi_ddiv+0x7c>
    4320:	4651      	mov	r1, sl
    4322:	2203      	movs	r2, #3
    4324:	e788      	b.n	4238 <__aeabi_ddiv+0x7c>
    4326:	2300      	movs	r3, #0
    4328:	4698      	mov	r8, r3
    432a:	3301      	adds	r3, #1
    432c:	2604      	movs	r6, #4
    432e:	2400      	movs	r4, #0
    4330:	9303      	str	r3, [sp, #12]
    4332:	e767      	b.n	4204 <__aeabi_ddiv+0x48>
    4334:	2303      	movs	r3, #3
    4336:	46b1      	mov	r9, r6
    4338:	9303      	str	r3, [sp, #12]
    433a:	260c      	movs	r6, #12
    433c:	e762      	b.n	4204 <__aeabi_ddiv+0x48>
    433e:	2a03      	cmp	r2, #3
    4340:	d100      	bne.n	4344 <__aeabi_ddiv+0x188>
    4342:	e25c      	b.n	47fe <__aeabi_ddiv+0x642>
    4344:	9b01      	ldr	r3, [sp, #4]
    4346:	2a01      	cmp	r2, #1
    4348:	d000      	beq.n	434c <__aeabi_ddiv+0x190>
    434a:	e1e4      	b.n	4716 <__aeabi_ddiv+0x55a>
    434c:	4013      	ands	r3, r2
    434e:	469c      	mov	ip, r3
    4350:	2300      	movs	r3, #0
    4352:	2400      	movs	r4, #0
    4354:	2200      	movs	r2, #0
    4356:	4698      	mov	r8, r3
    4358:	2100      	movs	r1, #0
    435a:	0312      	lsls	r2, r2, #12
    435c:	0b13      	lsrs	r3, r2, #12
    435e:	0d0a      	lsrs	r2, r1, #20
    4360:	0512      	lsls	r2, r2, #20
    4362:	431a      	orrs	r2, r3
    4364:	0523      	lsls	r3, r4, #20
    4366:	4c12      	ldr	r4, [pc, #72]	; (43b0 <__aeabi_ddiv+0x1f4>)
    4368:	4640      	mov	r0, r8
    436a:	4022      	ands	r2, r4
    436c:	4313      	orrs	r3, r2
    436e:	4662      	mov	r2, ip
    4370:	005b      	lsls	r3, r3, #1
    4372:	07d2      	lsls	r2, r2, #31
    4374:	085b      	lsrs	r3, r3, #1
    4376:	4313      	orrs	r3, r2
    4378:	0019      	movs	r1, r3
    437a:	b007      	add	sp, #28
    437c:	bc3c      	pop	{r2, r3, r4, r5}
    437e:	4690      	mov	r8, r2
    4380:	4699      	mov	r9, r3
    4382:	46a2      	mov	sl, r4
    4384:	46ab      	mov	fp, r5
    4386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4388:	2300      	movs	r3, #0
    438a:	2280      	movs	r2, #128	; 0x80
    438c:	469c      	mov	ip, r3
    438e:	0312      	lsls	r2, r2, #12
    4390:	4698      	mov	r8, r3
    4392:	4c03      	ldr	r4, [pc, #12]	; (43a0 <__aeabi_ddiv+0x1e4>)
    4394:	e7e0      	b.n	4358 <__aeabi_ddiv+0x19c>
    4396:	2300      	movs	r3, #0
    4398:	4c01      	ldr	r4, [pc, #4]	; (43a0 <__aeabi_ddiv+0x1e4>)
    439a:	2200      	movs	r2, #0
    439c:	4698      	mov	r8, r3
    439e:	e7db      	b.n	4358 <__aeabi_ddiv+0x19c>
    43a0:	000007ff 	.word	0x000007ff
    43a4:	fffffc01 	.word	0xfffffc01
    43a8:	000056b0 	.word	0x000056b0
    43ac:	fffffc0d 	.word	0xfffffc0d
    43b0:	800fffff 	.word	0x800fffff
    43b4:	45d9      	cmp	r9, fp
    43b6:	d900      	bls.n	43ba <__aeabi_ddiv+0x1fe>
    43b8:	e139      	b.n	462e <__aeabi_ddiv+0x472>
    43ba:	d100      	bne.n	43be <__aeabi_ddiv+0x202>
    43bc:	e134      	b.n	4628 <__aeabi_ddiv+0x46c>
    43be:	2300      	movs	r3, #0
    43c0:	4646      	mov	r6, r8
    43c2:	464d      	mov	r5, r9
    43c4:	469a      	mov	sl, r3
    43c6:	3c01      	subs	r4, #1
    43c8:	465b      	mov	r3, fp
    43ca:	0e0a      	lsrs	r2, r1, #24
    43cc:	021b      	lsls	r3, r3, #8
    43ce:	431a      	orrs	r2, r3
    43d0:	020b      	lsls	r3, r1, #8
    43d2:	0c17      	lsrs	r7, r2, #16
    43d4:	9303      	str	r3, [sp, #12]
    43d6:	0413      	lsls	r3, r2, #16
    43d8:	0c1b      	lsrs	r3, r3, #16
    43da:	0039      	movs	r1, r7
    43dc:	0028      	movs	r0, r5
    43de:	4690      	mov	r8, r2
    43e0:	9301      	str	r3, [sp, #4]
    43e2:	f7ff fb4f 	bl	3a84 <__udivsi3>
    43e6:	0002      	movs	r2, r0
    43e8:	9b01      	ldr	r3, [sp, #4]
    43ea:	4683      	mov	fp, r0
    43ec:	435a      	muls	r2, r3
    43ee:	0028      	movs	r0, r5
    43f0:	0039      	movs	r1, r7
    43f2:	4691      	mov	r9, r2
    43f4:	f7ff fbcc 	bl	3b90 <__aeabi_uidivmod>
    43f8:	0c35      	lsrs	r5, r6, #16
    43fa:	0409      	lsls	r1, r1, #16
    43fc:	430d      	orrs	r5, r1
    43fe:	45a9      	cmp	r9, r5
    4400:	d90d      	bls.n	441e <__aeabi_ddiv+0x262>
    4402:	465b      	mov	r3, fp
    4404:	4445      	add	r5, r8
    4406:	3b01      	subs	r3, #1
    4408:	45a8      	cmp	r8, r5
    440a:	d900      	bls.n	440e <__aeabi_ddiv+0x252>
    440c:	e13a      	b.n	4684 <__aeabi_ddiv+0x4c8>
    440e:	45a9      	cmp	r9, r5
    4410:	d800      	bhi.n	4414 <__aeabi_ddiv+0x258>
    4412:	e137      	b.n	4684 <__aeabi_ddiv+0x4c8>
    4414:	2302      	movs	r3, #2
    4416:	425b      	negs	r3, r3
    4418:	469c      	mov	ip, r3
    441a:	4445      	add	r5, r8
    441c:	44e3      	add	fp, ip
    441e:	464b      	mov	r3, r9
    4420:	1aeb      	subs	r3, r5, r3
    4422:	0039      	movs	r1, r7
    4424:	0018      	movs	r0, r3
    4426:	9304      	str	r3, [sp, #16]
    4428:	f7ff fb2c 	bl	3a84 <__udivsi3>
    442c:	9b01      	ldr	r3, [sp, #4]
    442e:	0005      	movs	r5, r0
    4430:	4343      	muls	r3, r0
    4432:	0039      	movs	r1, r7
    4434:	9804      	ldr	r0, [sp, #16]
    4436:	4699      	mov	r9, r3
    4438:	f7ff fbaa 	bl	3b90 <__aeabi_uidivmod>
    443c:	0433      	lsls	r3, r6, #16
    443e:	0409      	lsls	r1, r1, #16
    4440:	0c1b      	lsrs	r3, r3, #16
    4442:	430b      	orrs	r3, r1
    4444:	4599      	cmp	r9, r3
    4446:	d909      	bls.n	445c <__aeabi_ddiv+0x2a0>
    4448:	4443      	add	r3, r8
    444a:	1e6a      	subs	r2, r5, #1
    444c:	4598      	cmp	r8, r3
    444e:	d900      	bls.n	4452 <__aeabi_ddiv+0x296>
    4450:	e11a      	b.n	4688 <__aeabi_ddiv+0x4cc>
    4452:	4599      	cmp	r9, r3
    4454:	d800      	bhi.n	4458 <__aeabi_ddiv+0x29c>
    4456:	e117      	b.n	4688 <__aeabi_ddiv+0x4cc>
    4458:	3d02      	subs	r5, #2
    445a:	4443      	add	r3, r8
    445c:	464a      	mov	r2, r9
    445e:	1a9b      	subs	r3, r3, r2
    4460:	465a      	mov	r2, fp
    4462:	0412      	lsls	r2, r2, #16
    4464:	432a      	orrs	r2, r5
    4466:	9903      	ldr	r1, [sp, #12]
    4468:	4693      	mov	fp, r2
    446a:	0c10      	lsrs	r0, r2, #16
    446c:	0c0a      	lsrs	r2, r1, #16
    446e:	4691      	mov	r9, r2
    4470:	0409      	lsls	r1, r1, #16
    4472:	465a      	mov	r2, fp
    4474:	0c09      	lsrs	r1, r1, #16
    4476:	464e      	mov	r6, r9
    4478:	000d      	movs	r5, r1
    447a:	0412      	lsls	r2, r2, #16
    447c:	0c12      	lsrs	r2, r2, #16
    447e:	4345      	muls	r5, r0
    4480:	9105      	str	r1, [sp, #20]
    4482:	4351      	muls	r1, r2
    4484:	4372      	muls	r2, r6
    4486:	4370      	muls	r0, r6
    4488:	1952      	adds	r2, r2, r5
    448a:	0c0e      	lsrs	r6, r1, #16
    448c:	18b2      	adds	r2, r6, r2
    448e:	4295      	cmp	r5, r2
    4490:	d903      	bls.n	449a <__aeabi_ddiv+0x2de>
    4492:	2580      	movs	r5, #128	; 0x80
    4494:	026d      	lsls	r5, r5, #9
    4496:	46ac      	mov	ip, r5
    4498:	4460      	add	r0, ip
    449a:	0c15      	lsrs	r5, r2, #16
    449c:	0409      	lsls	r1, r1, #16
    449e:	0412      	lsls	r2, r2, #16
    44a0:	0c09      	lsrs	r1, r1, #16
    44a2:	1828      	adds	r0, r5, r0
    44a4:	1852      	adds	r2, r2, r1
    44a6:	4283      	cmp	r3, r0
    44a8:	d200      	bcs.n	44ac <__aeabi_ddiv+0x2f0>
    44aa:	e0ce      	b.n	464a <__aeabi_ddiv+0x48e>
    44ac:	d100      	bne.n	44b0 <__aeabi_ddiv+0x2f4>
    44ae:	e0c8      	b.n	4642 <__aeabi_ddiv+0x486>
    44b0:	1a1d      	subs	r5, r3, r0
    44b2:	4653      	mov	r3, sl
    44b4:	1a9e      	subs	r6, r3, r2
    44b6:	45b2      	cmp	sl, r6
    44b8:	4192      	sbcs	r2, r2
    44ba:	4252      	negs	r2, r2
    44bc:	1aab      	subs	r3, r5, r2
    44be:	469a      	mov	sl, r3
    44c0:	4598      	cmp	r8, r3
    44c2:	d100      	bne.n	44c6 <__aeabi_ddiv+0x30a>
    44c4:	e117      	b.n	46f6 <__aeabi_ddiv+0x53a>
    44c6:	0039      	movs	r1, r7
    44c8:	0018      	movs	r0, r3
    44ca:	f7ff fadb 	bl	3a84 <__udivsi3>
    44ce:	9b01      	ldr	r3, [sp, #4]
    44d0:	0005      	movs	r5, r0
    44d2:	4343      	muls	r3, r0
    44d4:	0039      	movs	r1, r7
    44d6:	4650      	mov	r0, sl
    44d8:	9304      	str	r3, [sp, #16]
    44da:	f7ff fb59 	bl	3b90 <__aeabi_uidivmod>
    44de:	9804      	ldr	r0, [sp, #16]
    44e0:	040b      	lsls	r3, r1, #16
    44e2:	0c31      	lsrs	r1, r6, #16
    44e4:	4319      	orrs	r1, r3
    44e6:	4288      	cmp	r0, r1
    44e8:	d909      	bls.n	44fe <__aeabi_ddiv+0x342>
    44ea:	4441      	add	r1, r8
    44ec:	1e6b      	subs	r3, r5, #1
    44ee:	4588      	cmp	r8, r1
    44f0:	d900      	bls.n	44f4 <__aeabi_ddiv+0x338>
    44f2:	e107      	b.n	4704 <__aeabi_ddiv+0x548>
    44f4:	4288      	cmp	r0, r1
    44f6:	d800      	bhi.n	44fa <__aeabi_ddiv+0x33e>
    44f8:	e104      	b.n	4704 <__aeabi_ddiv+0x548>
    44fa:	3d02      	subs	r5, #2
    44fc:	4441      	add	r1, r8
    44fe:	9b04      	ldr	r3, [sp, #16]
    4500:	1acb      	subs	r3, r1, r3
    4502:	0018      	movs	r0, r3
    4504:	0039      	movs	r1, r7
    4506:	9304      	str	r3, [sp, #16]
    4508:	f7ff fabc 	bl	3a84 <__udivsi3>
    450c:	9b01      	ldr	r3, [sp, #4]
    450e:	4682      	mov	sl, r0
    4510:	4343      	muls	r3, r0
    4512:	0039      	movs	r1, r7
    4514:	9804      	ldr	r0, [sp, #16]
    4516:	9301      	str	r3, [sp, #4]
    4518:	f7ff fb3a 	bl	3b90 <__aeabi_uidivmod>
    451c:	9801      	ldr	r0, [sp, #4]
    451e:	040b      	lsls	r3, r1, #16
    4520:	0431      	lsls	r1, r6, #16
    4522:	0c09      	lsrs	r1, r1, #16
    4524:	4319      	orrs	r1, r3
    4526:	4288      	cmp	r0, r1
    4528:	d90d      	bls.n	4546 <__aeabi_ddiv+0x38a>
    452a:	4653      	mov	r3, sl
    452c:	4441      	add	r1, r8
    452e:	3b01      	subs	r3, #1
    4530:	4588      	cmp	r8, r1
    4532:	d900      	bls.n	4536 <__aeabi_ddiv+0x37a>
    4534:	e0e8      	b.n	4708 <__aeabi_ddiv+0x54c>
    4536:	4288      	cmp	r0, r1
    4538:	d800      	bhi.n	453c <__aeabi_ddiv+0x380>
    453a:	e0e5      	b.n	4708 <__aeabi_ddiv+0x54c>
    453c:	2302      	movs	r3, #2
    453e:	425b      	negs	r3, r3
    4540:	469c      	mov	ip, r3
    4542:	4441      	add	r1, r8
    4544:	44e2      	add	sl, ip
    4546:	9b01      	ldr	r3, [sp, #4]
    4548:	042d      	lsls	r5, r5, #16
    454a:	1ace      	subs	r6, r1, r3
    454c:	4651      	mov	r1, sl
    454e:	4329      	orrs	r1, r5
    4550:	9d05      	ldr	r5, [sp, #20]
    4552:	464f      	mov	r7, r9
    4554:	002a      	movs	r2, r5
    4556:	040b      	lsls	r3, r1, #16
    4558:	0c08      	lsrs	r0, r1, #16
    455a:	0c1b      	lsrs	r3, r3, #16
    455c:	435a      	muls	r2, r3
    455e:	4345      	muls	r5, r0
    4560:	437b      	muls	r3, r7
    4562:	4378      	muls	r0, r7
    4564:	195b      	adds	r3, r3, r5
    4566:	0c17      	lsrs	r7, r2, #16
    4568:	18fb      	adds	r3, r7, r3
    456a:	429d      	cmp	r5, r3
    456c:	d903      	bls.n	4576 <__aeabi_ddiv+0x3ba>
    456e:	2580      	movs	r5, #128	; 0x80
    4570:	026d      	lsls	r5, r5, #9
    4572:	46ac      	mov	ip, r5
    4574:	4460      	add	r0, ip
    4576:	0c1d      	lsrs	r5, r3, #16
    4578:	0412      	lsls	r2, r2, #16
    457a:	041b      	lsls	r3, r3, #16
    457c:	0c12      	lsrs	r2, r2, #16
    457e:	1828      	adds	r0, r5, r0
    4580:	189b      	adds	r3, r3, r2
    4582:	4286      	cmp	r6, r0
    4584:	d200      	bcs.n	4588 <__aeabi_ddiv+0x3cc>
    4586:	e093      	b.n	46b0 <__aeabi_ddiv+0x4f4>
    4588:	d100      	bne.n	458c <__aeabi_ddiv+0x3d0>
    458a:	e08e      	b.n	46aa <__aeabi_ddiv+0x4ee>
    458c:	2301      	movs	r3, #1
    458e:	4319      	orrs	r1, r3
    4590:	4ba0      	ldr	r3, [pc, #640]	; (4814 <__aeabi_ddiv+0x658>)
    4592:	18e3      	adds	r3, r4, r3
    4594:	2b00      	cmp	r3, #0
    4596:	dc00      	bgt.n	459a <__aeabi_ddiv+0x3de>
    4598:	e099      	b.n	46ce <__aeabi_ddiv+0x512>
    459a:	074a      	lsls	r2, r1, #29
    459c:	d000      	beq.n	45a0 <__aeabi_ddiv+0x3e4>
    459e:	e09e      	b.n	46de <__aeabi_ddiv+0x522>
    45a0:	465a      	mov	r2, fp
    45a2:	01d2      	lsls	r2, r2, #7
    45a4:	d506      	bpl.n	45b4 <__aeabi_ddiv+0x3f8>
    45a6:	465a      	mov	r2, fp
    45a8:	4b9b      	ldr	r3, [pc, #620]	; (4818 <__aeabi_ddiv+0x65c>)
    45aa:	401a      	ands	r2, r3
    45ac:	2380      	movs	r3, #128	; 0x80
    45ae:	4693      	mov	fp, r2
    45b0:	00db      	lsls	r3, r3, #3
    45b2:	18e3      	adds	r3, r4, r3
    45b4:	4a99      	ldr	r2, [pc, #612]	; (481c <__aeabi_ddiv+0x660>)
    45b6:	4293      	cmp	r3, r2
    45b8:	dd68      	ble.n	468c <__aeabi_ddiv+0x4d0>
    45ba:	2301      	movs	r3, #1
    45bc:	9a02      	ldr	r2, [sp, #8]
    45be:	4c98      	ldr	r4, [pc, #608]	; (4820 <__aeabi_ddiv+0x664>)
    45c0:	401a      	ands	r2, r3
    45c2:	2300      	movs	r3, #0
    45c4:	4694      	mov	ip, r2
    45c6:	4698      	mov	r8, r3
    45c8:	2200      	movs	r2, #0
    45ca:	e6c5      	b.n	4358 <__aeabi_ddiv+0x19c>
    45cc:	2280      	movs	r2, #128	; 0x80
    45ce:	464b      	mov	r3, r9
    45d0:	0312      	lsls	r2, r2, #12
    45d2:	4213      	tst	r3, r2
    45d4:	d00a      	beq.n	45ec <__aeabi_ddiv+0x430>
    45d6:	465b      	mov	r3, fp
    45d8:	4213      	tst	r3, r2
    45da:	d106      	bne.n	45ea <__aeabi_ddiv+0x42e>
    45dc:	431a      	orrs	r2, r3
    45de:	0312      	lsls	r2, r2, #12
    45e0:	0b12      	lsrs	r2, r2, #12
    45e2:	46ac      	mov	ip, r5
    45e4:	4688      	mov	r8, r1
    45e6:	4c8e      	ldr	r4, [pc, #568]	; (4820 <__aeabi_ddiv+0x664>)
    45e8:	e6b6      	b.n	4358 <__aeabi_ddiv+0x19c>
    45ea:	464b      	mov	r3, r9
    45ec:	431a      	orrs	r2, r3
    45ee:	0312      	lsls	r2, r2, #12
    45f0:	0b12      	lsrs	r2, r2, #12
    45f2:	46bc      	mov	ip, r7
    45f4:	4c8a      	ldr	r4, [pc, #552]	; (4820 <__aeabi_ddiv+0x664>)
    45f6:	e6af      	b.n	4358 <__aeabi_ddiv+0x19c>
    45f8:	0003      	movs	r3, r0
    45fa:	465a      	mov	r2, fp
    45fc:	3b28      	subs	r3, #40	; 0x28
    45fe:	409a      	lsls	r2, r3
    4600:	2300      	movs	r3, #0
    4602:	4691      	mov	r9, r2
    4604:	4698      	mov	r8, r3
    4606:	e657      	b.n	42b8 <__aeabi_ddiv+0xfc>
    4608:	4658      	mov	r0, fp
    460a:	f000 ff0d 	bl	5428 <__clzsi2>
    460e:	3020      	adds	r0, #32
    4610:	e640      	b.n	4294 <__aeabi_ddiv+0xd8>
    4612:	0003      	movs	r3, r0
    4614:	4652      	mov	r2, sl
    4616:	3b28      	subs	r3, #40	; 0x28
    4618:	409a      	lsls	r2, r3
    461a:	2100      	movs	r1, #0
    461c:	4693      	mov	fp, r2
    461e:	e677      	b.n	4310 <__aeabi_ddiv+0x154>
    4620:	f000 ff02 	bl	5428 <__clzsi2>
    4624:	3020      	adds	r0, #32
    4626:	e65f      	b.n	42e8 <__aeabi_ddiv+0x12c>
    4628:	4588      	cmp	r8, r1
    462a:	d200      	bcs.n	462e <__aeabi_ddiv+0x472>
    462c:	e6c7      	b.n	43be <__aeabi_ddiv+0x202>
    462e:	464b      	mov	r3, r9
    4630:	07de      	lsls	r6, r3, #31
    4632:	085d      	lsrs	r5, r3, #1
    4634:	4643      	mov	r3, r8
    4636:	085b      	lsrs	r3, r3, #1
    4638:	431e      	orrs	r6, r3
    463a:	4643      	mov	r3, r8
    463c:	07db      	lsls	r3, r3, #31
    463e:	469a      	mov	sl, r3
    4640:	e6c2      	b.n	43c8 <__aeabi_ddiv+0x20c>
    4642:	2500      	movs	r5, #0
    4644:	4592      	cmp	sl, r2
    4646:	d300      	bcc.n	464a <__aeabi_ddiv+0x48e>
    4648:	e733      	b.n	44b2 <__aeabi_ddiv+0x2f6>
    464a:	9e03      	ldr	r6, [sp, #12]
    464c:	4659      	mov	r1, fp
    464e:	46b4      	mov	ip, r6
    4650:	44e2      	add	sl, ip
    4652:	45b2      	cmp	sl, r6
    4654:	41ad      	sbcs	r5, r5
    4656:	426d      	negs	r5, r5
    4658:	4445      	add	r5, r8
    465a:	18eb      	adds	r3, r5, r3
    465c:	3901      	subs	r1, #1
    465e:	4598      	cmp	r8, r3
    4660:	d207      	bcs.n	4672 <__aeabi_ddiv+0x4b6>
    4662:	4298      	cmp	r0, r3
    4664:	d900      	bls.n	4668 <__aeabi_ddiv+0x4ac>
    4666:	e07f      	b.n	4768 <__aeabi_ddiv+0x5ac>
    4668:	d100      	bne.n	466c <__aeabi_ddiv+0x4b0>
    466a:	e0bc      	b.n	47e6 <__aeabi_ddiv+0x62a>
    466c:	1a1d      	subs	r5, r3, r0
    466e:	468b      	mov	fp, r1
    4670:	e71f      	b.n	44b2 <__aeabi_ddiv+0x2f6>
    4672:	4598      	cmp	r8, r3
    4674:	d1fa      	bne.n	466c <__aeabi_ddiv+0x4b0>
    4676:	9d03      	ldr	r5, [sp, #12]
    4678:	4555      	cmp	r5, sl
    467a:	d9f2      	bls.n	4662 <__aeabi_ddiv+0x4a6>
    467c:	4643      	mov	r3, r8
    467e:	468b      	mov	fp, r1
    4680:	1a1d      	subs	r5, r3, r0
    4682:	e716      	b.n	44b2 <__aeabi_ddiv+0x2f6>
    4684:	469b      	mov	fp, r3
    4686:	e6ca      	b.n	441e <__aeabi_ddiv+0x262>
    4688:	0015      	movs	r5, r2
    468a:	e6e7      	b.n	445c <__aeabi_ddiv+0x2a0>
    468c:	465a      	mov	r2, fp
    468e:	08c9      	lsrs	r1, r1, #3
    4690:	0752      	lsls	r2, r2, #29
    4692:	430a      	orrs	r2, r1
    4694:	055b      	lsls	r3, r3, #21
    4696:	4690      	mov	r8, r2
    4698:	0d5c      	lsrs	r4, r3, #21
    469a:	465a      	mov	r2, fp
    469c:	2301      	movs	r3, #1
    469e:	9902      	ldr	r1, [sp, #8]
    46a0:	0252      	lsls	r2, r2, #9
    46a2:	4019      	ands	r1, r3
    46a4:	0b12      	lsrs	r2, r2, #12
    46a6:	468c      	mov	ip, r1
    46a8:	e656      	b.n	4358 <__aeabi_ddiv+0x19c>
    46aa:	2b00      	cmp	r3, #0
    46ac:	d100      	bne.n	46b0 <__aeabi_ddiv+0x4f4>
    46ae:	e76f      	b.n	4590 <__aeabi_ddiv+0x3d4>
    46b0:	4446      	add	r6, r8
    46b2:	1e4a      	subs	r2, r1, #1
    46b4:	45b0      	cmp	r8, r6
    46b6:	d929      	bls.n	470c <__aeabi_ddiv+0x550>
    46b8:	0011      	movs	r1, r2
    46ba:	4286      	cmp	r6, r0
    46bc:	d000      	beq.n	46c0 <__aeabi_ddiv+0x504>
    46be:	e765      	b.n	458c <__aeabi_ddiv+0x3d0>
    46c0:	9a03      	ldr	r2, [sp, #12]
    46c2:	4293      	cmp	r3, r2
    46c4:	d000      	beq.n	46c8 <__aeabi_ddiv+0x50c>
    46c6:	e761      	b.n	458c <__aeabi_ddiv+0x3d0>
    46c8:	e762      	b.n	4590 <__aeabi_ddiv+0x3d4>
    46ca:	2101      	movs	r1, #1
    46cc:	4249      	negs	r1, r1
    46ce:	2001      	movs	r0, #1
    46d0:	1ac2      	subs	r2, r0, r3
    46d2:	2a38      	cmp	r2, #56	; 0x38
    46d4:	dd21      	ble.n	471a <__aeabi_ddiv+0x55e>
    46d6:	9b02      	ldr	r3, [sp, #8]
    46d8:	4003      	ands	r3, r0
    46da:	469c      	mov	ip, r3
    46dc:	e638      	b.n	4350 <__aeabi_ddiv+0x194>
    46de:	220f      	movs	r2, #15
    46e0:	400a      	ands	r2, r1
    46e2:	2a04      	cmp	r2, #4
    46e4:	d100      	bne.n	46e8 <__aeabi_ddiv+0x52c>
    46e6:	e75b      	b.n	45a0 <__aeabi_ddiv+0x3e4>
    46e8:	000a      	movs	r2, r1
    46ea:	1d11      	adds	r1, r2, #4
    46ec:	4291      	cmp	r1, r2
    46ee:	4192      	sbcs	r2, r2
    46f0:	4252      	negs	r2, r2
    46f2:	4493      	add	fp, r2
    46f4:	e754      	b.n	45a0 <__aeabi_ddiv+0x3e4>
    46f6:	4b47      	ldr	r3, [pc, #284]	; (4814 <__aeabi_ddiv+0x658>)
    46f8:	18e3      	adds	r3, r4, r3
    46fa:	2b00      	cmp	r3, #0
    46fc:	dde5      	ble.n	46ca <__aeabi_ddiv+0x50e>
    46fe:	2201      	movs	r2, #1
    4700:	4252      	negs	r2, r2
    4702:	e7f2      	b.n	46ea <__aeabi_ddiv+0x52e>
    4704:	001d      	movs	r5, r3
    4706:	e6fa      	b.n	44fe <__aeabi_ddiv+0x342>
    4708:	469a      	mov	sl, r3
    470a:	e71c      	b.n	4546 <__aeabi_ddiv+0x38a>
    470c:	42b0      	cmp	r0, r6
    470e:	d839      	bhi.n	4784 <__aeabi_ddiv+0x5c8>
    4710:	d06e      	beq.n	47f0 <__aeabi_ddiv+0x634>
    4712:	0011      	movs	r1, r2
    4714:	e73a      	b.n	458c <__aeabi_ddiv+0x3d0>
    4716:	9302      	str	r3, [sp, #8]
    4718:	e73a      	b.n	4590 <__aeabi_ddiv+0x3d4>
    471a:	2a1f      	cmp	r2, #31
    471c:	dc3c      	bgt.n	4798 <__aeabi_ddiv+0x5dc>
    471e:	2320      	movs	r3, #32
    4720:	1a9b      	subs	r3, r3, r2
    4722:	000c      	movs	r4, r1
    4724:	4658      	mov	r0, fp
    4726:	4099      	lsls	r1, r3
    4728:	4098      	lsls	r0, r3
    472a:	1e4b      	subs	r3, r1, #1
    472c:	4199      	sbcs	r1, r3
    472e:	465b      	mov	r3, fp
    4730:	40d4      	lsrs	r4, r2
    4732:	40d3      	lsrs	r3, r2
    4734:	4320      	orrs	r0, r4
    4736:	4308      	orrs	r0, r1
    4738:	001a      	movs	r2, r3
    473a:	0743      	lsls	r3, r0, #29
    473c:	d009      	beq.n	4752 <__aeabi_ddiv+0x596>
    473e:	230f      	movs	r3, #15
    4740:	4003      	ands	r3, r0
    4742:	2b04      	cmp	r3, #4
    4744:	d005      	beq.n	4752 <__aeabi_ddiv+0x596>
    4746:	0001      	movs	r1, r0
    4748:	1d08      	adds	r0, r1, #4
    474a:	4288      	cmp	r0, r1
    474c:	419b      	sbcs	r3, r3
    474e:	425b      	negs	r3, r3
    4750:	18d2      	adds	r2, r2, r3
    4752:	0213      	lsls	r3, r2, #8
    4754:	d53a      	bpl.n	47cc <__aeabi_ddiv+0x610>
    4756:	2301      	movs	r3, #1
    4758:	9a02      	ldr	r2, [sp, #8]
    475a:	2401      	movs	r4, #1
    475c:	401a      	ands	r2, r3
    475e:	2300      	movs	r3, #0
    4760:	4694      	mov	ip, r2
    4762:	4698      	mov	r8, r3
    4764:	2200      	movs	r2, #0
    4766:	e5f7      	b.n	4358 <__aeabi_ddiv+0x19c>
    4768:	2102      	movs	r1, #2
    476a:	4249      	negs	r1, r1
    476c:	468c      	mov	ip, r1
    476e:	9d03      	ldr	r5, [sp, #12]
    4770:	44e3      	add	fp, ip
    4772:	46ac      	mov	ip, r5
    4774:	44e2      	add	sl, ip
    4776:	45aa      	cmp	sl, r5
    4778:	41ad      	sbcs	r5, r5
    477a:	426d      	negs	r5, r5
    477c:	4445      	add	r5, r8
    477e:	18ed      	adds	r5, r5, r3
    4780:	1a2d      	subs	r5, r5, r0
    4782:	e696      	b.n	44b2 <__aeabi_ddiv+0x2f6>
    4784:	1e8a      	subs	r2, r1, #2
    4786:	9903      	ldr	r1, [sp, #12]
    4788:	004d      	lsls	r5, r1, #1
    478a:	428d      	cmp	r5, r1
    478c:	4189      	sbcs	r1, r1
    478e:	4249      	negs	r1, r1
    4790:	4441      	add	r1, r8
    4792:	1876      	adds	r6, r6, r1
    4794:	9503      	str	r5, [sp, #12]
    4796:	e78f      	b.n	46b8 <__aeabi_ddiv+0x4fc>
    4798:	201f      	movs	r0, #31
    479a:	4240      	negs	r0, r0
    479c:	1ac3      	subs	r3, r0, r3
    479e:	4658      	mov	r0, fp
    47a0:	40d8      	lsrs	r0, r3
    47a2:	0003      	movs	r3, r0
    47a4:	2a20      	cmp	r2, #32
    47a6:	d028      	beq.n	47fa <__aeabi_ddiv+0x63e>
    47a8:	2040      	movs	r0, #64	; 0x40
    47aa:	465d      	mov	r5, fp
    47ac:	1a82      	subs	r2, r0, r2
    47ae:	4095      	lsls	r5, r2
    47b0:	4329      	orrs	r1, r5
    47b2:	1e4a      	subs	r2, r1, #1
    47b4:	4191      	sbcs	r1, r2
    47b6:	4319      	orrs	r1, r3
    47b8:	2307      	movs	r3, #7
    47ba:	2200      	movs	r2, #0
    47bc:	400b      	ands	r3, r1
    47be:	d009      	beq.n	47d4 <__aeabi_ddiv+0x618>
    47c0:	230f      	movs	r3, #15
    47c2:	2200      	movs	r2, #0
    47c4:	400b      	ands	r3, r1
    47c6:	0008      	movs	r0, r1
    47c8:	2b04      	cmp	r3, #4
    47ca:	d1bd      	bne.n	4748 <__aeabi_ddiv+0x58c>
    47cc:	0001      	movs	r1, r0
    47ce:	0753      	lsls	r3, r2, #29
    47d0:	0252      	lsls	r2, r2, #9
    47d2:	0b12      	lsrs	r2, r2, #12
    47d4:	08c9      	lsrs	r1, r1, #3
    47d6:	4319      	orrs	r1, r3
    47d8:	2301      	movs	r3, #1
    47da:	4688      	mov	r8, r1
    47dc:	9902      	ldr	r1, [sp, #8]
    47de:	2400      	movs	r4, #0
    47e0:	4019      	ands	r1, r3
    47e2:	468c      	mov	ip, r1
    47e4:	e5b8      	b.n	4358 <__aeabi_ddiv+0x19c>
    47e6:	4552      	cmp	r2, sl
    47e8:	d8be      	bhi.n	4768 <__aeabi_ddiv+0x5ac>
    47ea:	468b      	mov	fp, r1
    47ec:	2500      	movs	r5, #0
    47ee:	e660      	b.n	44b2 <__aeabi_ddiv+0x2f6>
    47f0:	9d03      	ldr	r5, [sp, #12]
    47f2:	429d      	cmp	r5, r3
    47f4:	d3c6      	bcc.n	4784 <__aeabi_ddiv+0x5c8>
    47f6:	0011      	movs	r1, r2
    47f8:	e762      	b.n	46c0 <__aeabi_ddiv+0x504>
    47fa:	2500      	movs	r5, #0
    47fc:	e7d8      	b.n	47b0 <__aeabi_ddiv+0x5f4>
    47fe:	2280      	movs	r2, #128	; 0x80
    4800:	465b      	mov	r3, fp
    4802:	0312      	lsls	r2, r2, #12
    4804:	431a      	orrs	r2, r3
    4806:	9b01      	ldr	r3, [sp, #4]
    4808:	0312      	lsls	r2, r2, #12
    480a:	0b12      	lsrs	r2, r2, #12
    480c:	469c      	mov	ip, r3
    480e:	4688      	mov	r8, r1
    4810:	4c03      	ldr	r4, [pc, #12]	; (4820 <__aeabi_ddiv+0x664>)
    4812:	e5a1      	b.n	4358 <__aeabi_ddiv+0x19c>
    4814:	000003ff 	.word	0x000003ff
    4818:	feffffff 	.word	0xfeffffff
    481c:	000007fe 	.word	0x000007fe
    4820:	000007ff 	.word	0x000007ff

00004824 <__aeabi_dmul>:
    4824:	b5f0      	push	{r4, r5, r6, r7, lr}
    4826:	4657      	mov	r7, sl
    4828:	4645      	mov	r5, r8
    482a:	46de      	mov	lr, fp
    482c:	464e      	mov	r6, r9
    482e:	b5e0      	push	{r5, r6, r7, lr}
    4830:	030c      	lsls	r4, r1, #12
    4832:	4698      	mov	r8, r3
    4834:	004e      	lsls	r6, r1, #1
    4836:	0b23      	lsrs	r3, r4, #12
    4838:	b087      	sub	sp, #28
    483a:	0007      	movs	r7, r0
    483c:	4692      	mov	sl, r2
    483e:	469b      	mov	fp, r3
    4840:	0d76      	lsrs	r6, r6, #21
    4842:	0fcd      	lsrs	r5, r1, #31
    4844:	2e00      	cmp	r6, #0
    4846:	d06b      	beq.n	4920 <__aeabi_dmul+0xfc>
    4848:	4b6d      	ldr	r3, [pc, #436]	; (4a00 <__aeabi_dmul+0x1dc>)
    484a:	429e      	cmp	r6, r3
    484c:	d035      	beq.n	48ba <__aeabi_dmul+0x96>
    484e:	2480      	movs	r4, #128	; 0x80
    4850:	465b      	mov	r3, fp
    4852:	0f42      	lsrs	r2, r0, #29
    4854:	0424      	lsls	r4, r4, #16
    4856:	00db      	lsls	r3, r3, #3
    4858:	4314      	orrs	r4, r2
    485a:	431c      	orrs	r4, r3
    485c:	00c3      	lsls	r3, r0, #3
    485e:	4699      	mov	r9, r3
    4860:	4b68      	ldr	r3, [pc, #416]	; (4a04 <__aeabi_dmul+0x1e0>)
    4862:	46a3      	mov	fp, r4
    4864:	469c      	mov	ip, r3
    4866:	2300      	movs	r3, #0
    4868:	2700      	movs	r7, #0
    486a:	4466      	add	r6, ip
    486c:	9302      	str	r3, [sp, #8]
    486e:	4643      	mov	r3, r8
    4870:	031c      	lsls	r4, r3, #12
    4872:	005a      	lsls	r2, r3, #1
    4874:	0fdb      	lsrs	r3, r3, #31
    4876:	4650      	mov	r0, sl
    4878:	0b24      	lsrs	r4, r4, #12
    487a:	0d52      	lsrs	r2, r2, #21
    487c:	4698      	mov	r8, r3
    487e:	d100      	bne.n	4882 <__aeabi_dmul+0x5e>
    4880:	e076      	b.n	4970 <__aeabi_dmul+0x14c>
    4882:	4b5f      	ldr	r3, [pc, #380]	; (4a00 <__aeabi_dmul+0x1dc>)
    4884:	429a      	cmp	r2, r3
    4886:	d06d      	beq.n	4964 <__aeabi_dmul+0x140>
    4888:	2380      	movs	r3, #128	; 0x80
    488a:	0f41      	lsrs	r1, r0, #29
    488c:	041b      	lsls	r3, r3, #16
    488e:	430b      	orrs	r3, r1
    4890:	495c      	ldr	r1, [pc, #368]	; (4a04 <__aeabi_dmul+0x1e0>)
    4892:	00e4      	lsls	r4, r4, #3
    4894:	468c      	mov	ip, r1
    4896:	431c      	orrs	r4, r3
    4898:	00c3      	lsls	r3, r0, #3
    489a:	2000      	movs	r0, #0
    489c:	4462      	add	r2, ip
    489e:	4641      	mov	r1, r8
    48a0:	18b6      	adds	r6, r6, r2
    48a2:	4069      	eors	r1, r5
    48a4:	1c72      	adds	r2, r6, #1
    48a6:	9101      	str	r1, [sp, #4]
    48a8:	4694      	mov	ip, r2
    48aa:	4307      	orrs	r7, r0
    48ac:	2f0f      	cmp	r7, #15
    48ae:	d900      	bls.n	48b2 <__aeabi_dmul+0x8e>
    48b0:	e0b0      	b.n	4a14 <__aeabi_dmul+0x1f0>
    48b2:	4a55      	ldr	r2, [pc, #340]	; (4a08 <__aeabi_dmul+0x1e4>)
    48b4:	00bf      	lsls	r7, r7, #2
    48b6:	59d2      	ldr	r2, [r2, r7]
    48b8:	4697      	mov	pc, r2
    48ba:	465b      	mov	r3, fp
    48bc:	4303      	orrs	r3, r0
    48be:	4699      	mov	r9, r3
    48c0:	d000      	beq.n	48c4 <__aeabi_dmul+0xa0>
    48c2:	e087      	b.n	49d4 <__aeabi_dmul+0x1b0>
    48c4:	2300      	movs	r3, #0
    48c6:	469b      	mov	fp, r3
    48c8:	3302      	adds	r3, #2
    48ca:	2708      	movs	r7, #8
    48cc:	9302      	str	r3, [sp, #8]
    48ce:	e7ce      	b.n	486e <__aeabi_dmul+0x4a>
    48d0:	4642      	mov	r2, r8
    48d2:	9201      	str	r2, [sp, #4]
    48d4:	2802      	cmp	r0, #2
    48d6:	d067      	beq.n	49a8 <__aeabi_dmul+0x184>
    48d8:	2803      	cmp	r0, #3
    48da:	d100      	bne.n	48de <__aeabi_dmul+0xba>
    48dc:	e20e      	b.n	4cfc <__aeabi_dmul+0x4d8>
    48de:	2801      	cmp	r0, #1
    48e0:	d000      	beq.n	48e4 <__aeabi_dmul+0xc0>
    48e2:	e162      	b.n	4baa <__aeabi_dmul+0x386>
    48e4:	2300      	movs	r3, #0
    48e6:	2400      	movs	r4, #0
    48e8:	2200      	movs	r2, #0
    48ea:	4699      	mov	r9, r3
    48ec:	9901      	ldr	r1, [sp, #4]
    48ee:	4001      	ands	r1, r0
    48f0:	b2cd      	uxtb	r5, r1
    48f2:	2100      	movs	r1, #0
    48f4:	0312      	lsls	r2, r2, #12
    48f6:	0d0b      	lsrs	r3, r1, #20
    48f8:	0b12      	lsrs	r2, r2, #12
    48fa:	051b      	lsls	r3, r3, #20
    48fc:	4313      	orrs	r3, r2
    48fe:	4a43      	ldr	r2, [pc, #268]	; (4a0c <__aeabi_dmul+0x1e8>)
    4900:	0524      	lsls	r4, r4, #20
    4902:	4013      	ands	r3, r2
    4904:	431c      	orrs	r4, r3
    4906:	0064      	lsls	r4, r4, #1
    4908:	07ed      	lsls	r5, r5, #31
    490a:	0864      	lsrs	r4, r4, #1
    490c:	432c      	orrs	r4, r5
    490e:	4648      	mov	r0, r9
    4910:	0021      	movs	r1, r4
    4912:	b007      	add	sp, #28
    4914:	bc3c      	pop	{r2, r3, r4, r5}
    4916:	4690      	mov	r8, r2
    4918:	4699      	mov	r9, r3
    491a:	46a2      	mov	sl, r4
    491c:	46ab      	mov	fp, r5
    491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4920:	4303      	orrs	r3, r0
    4922:	4699      	mov	r9, r3
    4924:	d04f      	beq.n	49c6 <__aeabi_dmul+0x1a2>
    4926:	465b      	mov	r3, fp
    4928:	2b00      	cmp	r3, #0
    492a:	d100      	bne.n	492e <__aeabi_dmul+0x10a>
    492c:	e189      	b.n	4c42 <__aeabi_dmul+0x41e>
    492e:	4658      	mov	r0, fp
    4930:	f000 fd7a 	bl	5428 <__clzsi2>
    4934:	0003      	movs	r3, r0
    4936:	3b0b      	subs	r3, #11
    4938:	2b1c      	cmp	r3, #28
    493a:	dd00      	ble.n	493e <__aeabi_dmul+0x11a>
    493c:	e17a      	b.n	4c34 <__aeabi_dmul+0x410>
    493e:	221d      	movs	r2, #29
    4940:	1ad3      	subs	r3, r2, r3
    4942:	003a      	movs	r2, r7
    4944:	0001      	movs	r1, r0
    4946:	465c      	mov	r4, fp
    4948:	40da      	lsrs	r2, r3
    494a:	3908      	subs	r1, #8
    494c:	408c      	lsls	r4, r1
    494e:	0013      	movs	r3, r2
    4950:	408f      	lsls	r7, r1
    4952:	4323      	orrs	r3, r4
    4954:	469b      	mov	fp, r3
    4956:	46b9      	mov	r9, r7
    4958:	2300      	movs	r3, #0
    495a:	4e2d      	ldr	r6, [pc, #180]	; (4a10 <__aeabi_dmul+0x1ec>)
    495c:	2700      	movs	r7, #0
    495e:	1a36      	subs	r6, r6, r0
    4960:	9302      	str	r3, [sp, #8]
    4962:	e784      	b.n	486e <__aeabi_dmul+0x4a>
    4964:	4653      	mov	r3, sl
    4966:	4323      	orrs	r3, r4
    4968:	d12a      	bne.n	49c0 <__aeabi_dmul+0x19c>
    496a:	2400      	movs	r4, #0
    496c:	2002      	movs	r0, #2
    496e:	e796      	b.n	489e <__aeabi_dmul+0x7a>
    4970:	4653      	mov	r3, sl
    4972:	4323      	orrs	r3, r4
    4974:	d020      	beq.n	49b8 <__aeabi_dmul+0x194>
    4976:	2c00      	cmp	r4, #0
    4978:	d100      	bne.n	497c <__aeabi_dmul+0x158>
    497a:	e157      	b.n	4c2c <__aeabi_dmul+0x408>
    497c:	0020      	movs	r0, r4
    497e:	f000 fd53 	bl	5428 <__clzsi2>
    4982:	0003      	movs	r3, r0
    4984:	3b0b      	subs	r3, #11
    4986:	2b1c      	cmp	r3, #28
    4988:	dd00      	ble.n	498c <__aeabi_dmul+0x168>
    498a:	e149      	b.n	4c20 <__aeabi_dmul+0x3fc>
    498c:	211d      	movs	r1, #29
    498e:	1acb      	subs	r3, r1, r3
    4990:	4651      	mov	r1, sl
    4992:	0002      	movs	r2, r0
    4994:	40d9      	lsrs	r1, r3
    4996:	4653      	mov	r3, sl
    4998:	3a08      	subs	r2, #8
    499a:	4094      	lsls	r4, r2
    499c:	4093      	lsls	r3, r2
    499e:	430c      	orrs	r4, r1
    49a0:	4a1b      	ldr	r2, [pc, #108]	; (4a10 <__aeabi_dmul+0x1ec>)
    49a2:	1a12      	subs	r2, r2, r0
    49a4:	2000      	movs	r0, #0
    49a6:	e77a      	b.n	489e <__aeabi_dmul+0x7a>
    49a8:	2501      	movs	r5, #1
    49aa:	9b01      	ldr	r3, [sp, #4]
    49ac:	4c14      	ldr	r4, [pc, #80]	; (4a00 <__aeabi_dmul+0x1dc>)
    49ae:	401d      	ands	r5, r3
    49b0:	2300      	movs	r3, #0
    49b2:	2200      	movs	r2, #0
    49b4:	4699      	mov	r9, r3
    49b6:	e79c      	b.n	48f2 <__aeabi_dmul+0xce>
    49b8:	2400      	movs	r4, #0
    49ba:	2200      	movs	r2, #0
    49bc:	2001      	movs	r0, #1
    49be:	e76e      	b.n	489e <__aeabi_dmul+0x7a>
    49c0:	4653      	mov	r3, sl
    49c2:	2003      	movs	r0, #3
    49c4:	e76b      	b.n	489e <__aeabi_dmul+0x7a>
    49c6:	2300      	movs	r3, #0
    49c8:	469b      	mov	fp, r3
    49ca:	3301      	adds	r3, #1
    49cc:	2704      	movs	r7, #4
    49ce:	2600      	movs	r6, #0
    49d0:	9302      	str	r3, [sp, #8]
    49d2:	e74c      	b.n	486e <__aeabi_dmul+0x4a>
    49d4:	2303      	movs	r3, #3
    49d6:	4681      	mov	r9, r0
    49d8:	270c      	movs	r7, #12
    49da:	9302      	str	r3, [sp, #8]
    49dc:	e747      	b.n	486e <__aeabi_dmul+0x4a>
    49de:	2280      	movs	r2, #128	; 0x80
    49e0:	2300      	movs	r3, #0
    49e2:	2500      	movs	r5, #0
    49e4:	0312      	lsls	r2, r2, #12
    49e6:	4699      	mov	r9, r3
    49e8:	4c05      	ldr	r4, [pc, #20]	; (4a00 <__aeabi_dmul+0x1dc>)
    49ea:	e782      	b.n	48f2 <__aeabi_dmul+0xce>
    49ec:	465c      	mov	r4, fp
    49ee:	464b      	mov	r3, r9
    49f0:	9802      	ldr	r0, [sp, #8]
    49f2:	e76f      	b.n	48d4 <__aeabi_dmul+0xb0>
    49f4:	465c      	mov	r4, fp
    49f6:	464b      	mov	r3, r9
    49f8:	9501      	str	r5, [sp, #4]
    49fa:	9802      	ldr	r0, [sp, #8]
    49fc:	e76a      	b.n	48d4 <__aeabi_dmul+0xb0>
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	000007ff 	.word	0x000007ff
    4a04:	fffffc01 	.word	0xfffffc01
    4a08:	000056f0 	.word	0x000056f0
    4a0c:	800fffff 	.word	0x800fffff
    4a10:	fffffc0d 	.word	0xfffffc0d
    4a14:	464a      	mov	r2, r9
    4a16:	4649      	mov	r1, r9
    4a18:	0c17      	lsrs	r7, r2, #16
    4a1a:	0c1a      	lsrs	r2, r3, #16
    4a1c:	041b      	lsls	r3, r3, #16
    4a1e:	0c1b      	lsrs	r3, r3, #16
    4a20:	0408      	lsls	r0, r1, #16
    4a22:	0019      	movs	r1, r3
    4a24:	0c00      	lsrs	r0, r0, #16
    4a26:	4341      	muls	r1, r0
    4a28:	0015      	movs	r5, r2
    4a2a:	4688      	mov	r8, r1
    4a2c:	0019      	movs	r1, r3
    4a2e:	437d      	muls	r5, r7
    4a30:	4379      	muls	r1, r7
    4a32:	9503      	str	r5, [sp, #12]
    4a34:	4689      	mov	r9, r1
    4a36:	0029      	movs	r1, r5
    4a38:	0015      	movs	r5, r2
    4a3a:	4345      	muls	r5, r0
    4a3c:	444d      	add	r5, r9
    4a3e:	9502      	str	r5, [sp, #8]
    4a40:	4645      	mov	r5, r8
    4a42:	0c2d      	lsrs	r5, r5, #16
    4a44:	46aa      	mov	sl, r5
    4a46:	9d02      	ldr	r5, [sp, #8]
    4a48:	4455      	add	r5, sl
    4a4a:	45a9      	cmp	r9, r5
    4a4c:	d906      	bls.n	4a5c <__aeabi_dmul+0x238>
    4a4e:	468a      	mov	sl, r1
    4a50:	2180      	movs	r1, #128	; 0x80
    4a52:	0249      	lsls	r1, r1, #9
    4a54:	4689      	mov	r9, r1
    4a56:	44ca      	add	sl, r9
    4a58:	4651      	mov	r1, sl
    4a5a:	9103      	str	r1, [sp, #12]
    4a5c:	0c29      	lsrs	r1, r5, #16
    4a5e:	9104      	str	r1, [sp, #16]
    4a60:	4641      	mov	r1, r8
    4a62:	0409      	lsls	r1, r1, #16
    4a64:	042d      	lsls	r5, r5, #16
    4a66:	0c09      	lsrs	r1, r1, #16
    4a68:	4688      	mov	r8, r1
    4a6a:	0029      	movs	r1, r5
    4a6c:	0c25      	lsrs	r5, r4, #16
    4a6e:	0424      	lsls	r4, r4, #16
    4a70:	4441      	add	r1, r8
    4a72:	0c24      	lsrs	r4, r4, #16
    4a74:	9105      	str	r1, [sp, #20]
    4a76:	0021      	movs	r1, r4
    4a78:	4341      	muls	r1, r0
    4a7a:	4688      	mov	r8, r1
    4a7c:	0021      	movs	r1, r4
    4a7e:	4379      	muls	r1, r7
    4a80:	468a      	mov	sl, r1
    4a82:	4368      	muls	r0, r5
    4a84:	4641      	mov	r1, r8
    4a86:	4450      	add	r0, sl
    4a88:	4681      	mov	r9, r0
    4a8a:	0c08      	lsrs	r0, r1, #16
    4a8c:	4448      	add	r0, r9
    4a8e:	436f      	muls	r7, r5
    4a90:	4582      	cmp	sl, r0
    4a92:	d903      	bls.n	4a9c <__aeabi_dmul+0x278>
    4a94:	2180      	movs	r1, #128	; 0x80
    4a96:	0249      	lsls	r1, r1, #9
    4a98:	4689      	mov	r9, r1
    4a9a:	444f      	add	r7, r9
    4a9c:	0c01      	lsrs	r1, r0, #16
    4a9e:	4689      	mov	r9, r1
    4aa0:	0039      	movs	r1, r7
    4aa2:	4449      	add	r1, r9
    4aa4:	9102      	str	r1, [sp, #8]
    4aa6:	4641      	mov	r1, r8
    4aa8:	040f      	lsls	r7, r1, #16
    4aaa:	9904      	ldr	r1, [sp, #16]
    4aac:	0c3f      	lsrs	r7, r7, #16
    4aae:	4688      	mov	r8, r1
    4ab0:	0400      	lsls	r0, r0, #16
    4ab2:	19c0      	adds	r0, r0, r7
    4ab4:	4480      	add	r8, r0
    4ab6:	4641      	mov	r1, r8
    4ab8:	9104      	str	r1, [sp, #16]
    4aba:	4659      	mov	r1, fp
    4abc:	0c0f      	lsrs	r7, r1, #16
    4abe:	0409      	lsls	r1, r1, #16
    4ac0:	0c09      	lsrs	r1, r1, #16
    4ac2:	4688      	mov	r8, r1
    4ac4:	4359      	muls	r1, r3
    4ac6:	468a      	mov	sl, r1
    4ac8:	0039      	movs	r1, r7
    4aca:	4351      	muls	r1, r2
    4acc:	4689      	mov	r9, r1
    4ace:	4641      	mov	r1, r8
    4ad0:	434a      	muls	r2, r1
    4ad2:	4651      	mov	r1, sl
    4ad4:	0c09      	lsrs	r1, r1, #16
    4ad6:	468b      	mov	fp, r1
    4ad8:	437b      	muls	r3, r7
    4ada:	18d2      	adds	r2, r2, r3
    4adc:	445a      	add	r2, fp
    4ade:	4293      	cmp	r3, r2
    4ae0:	d903      	bls.n	4aea <__aeabi_dmul+0x2c6>
    4ae2:	2380      	movs	r3, #128	; 0x80
    4ae4:	025b      	lsls	r3, r3, #9
    4ae6:	469b      	mov	fp, r3
    4ae8:	44d9      	add	r9, fp
    4aea:	4651      	mov	r1, sl
    4aec:	0409      	lsls	r1, r1, #16
    4aee:	0c09      	lsrs	r1, r1, #16
    4af0:	468a      	mov	sl, r1
    4af2:	4641      	mov	r1, r8
    4af4:	4361      	muls	r1, r4
    4af6:	437c      	muls	r4, r7
    4af8:	0c13      	lsrs	r3, r2, #16
    4afa:	0412      	lsls	r2, r2, #16
    4afc:	444b      	add	r3, r9
    4afe:	4452      	add	r2, sl
    4b00:	46a1      	mov	r9, r4
    4b02:	468a      	mov	sl, r1
    4b04:	003c      	movs	r4, r7
    4b06:	4641      	mov	r1, r8
    4b08:	436c      	muls	r4, r5
    4b0a:	434d      	muls	r5, r1
    4b0c:	4651      	mov	r1, sl
    4b0e:	444d      	add	r5, r9
    4b10:	0c0f      	lsrs	r7, r1, #16
    4b12:	197d      	adds	r5, r7, r5
    4b14:	45a9      	cmp	r9, r5
    4b16:	d903      	bls.n	4b20 <__aeabi_dmul+0x2fc>
    4b18:	2180      	movs	r1, #128	; 0x80
    4b1a:	0249      	lsls	r1, r1, #9
    4b1c:	4688      	mov	r8, r1
    4b1e:	4444      	add	r4, r8
    4b20:	9f04      	ldr	r7, [sp, #16]
    4b22:	9903      	ldr	r1, [sp, #12]
    4b24:	46b8      	mov	r8, r7
    4b26:	4441      	add	r1, r8
    4b28:	468b      	mov	fp, r1
    4b2a:	4583      	cmp	fp, r0
    4b2c:	4180      	sbcs	r0, r0
    4b2e:	4241      	negs	r1, r0
    4b30:	4688      	mov	r8, r1
    4b32:	4651      	mov	r1, sl
    4b34:	0408      	lsls	r0, r1, #16
    4b36:	042f      	lsls	r7, r5, #16
    4b38:	0c00      	lsrs	r0, r0, #16
    4b3a:	183f      	adds	r7, r7, r0
    4b3c:	4658      	mov	r0, fp
    4b3e:	9902      	ldr	r1, [sp, #8]
    4b40:	1810      	adds	r0, r2, r0
    4b42:	4689      	mov	r9, r1
    4b44:	4290      	cmp	r0, r2
    4b46:	4192      	sbcs	r2, r2
    4b48:	444f      	add	r7, r9
    4b4a:	46ba      	mov	sl, r7
    4b4c:	4252      	negs	r2, r2
    4b4e:	4699      	mov	r9, r3
    4b50:	4693      	mov	fp, r2
    4b52:	44c2      	add	sl, r8
    4b54:	44d1      	add	r9, sl
    4b56:	44cb      	add	fp, r9
    4b58:	428f      	cmp	r7, r1
    4b5a:	41bf      	sbcs	r7, r7
    4b5c:	45c2      	cmp	sl, r8
    4b5e:	4189      	sbcs	r1, r1
    4b60:	4599      	cmp	r9, r3
    4b62:	419b      	sbcs	r3, r3
    4b64:	4593      	cmp	fp, r2
    4b66:	4192      	sbcs	r2, r2
    4b68:	427f      	negs	r7, r7
    4b6a:	4249      	negs	r1, r1
    4b6c:	0c2d      	lsrs	r5, r5, #16
    4b6e:	4252      	negs	r2, r2
    4b70:	430f      	orrs	r7, r1
    4b72:	425b      	negs	r3, r3
    4b74:	4313      	orrs	r3, r2
    4b76:	197f      	adds	r7, r7, r5
    4b78:	18ff      	adds	r7, r7, r3
    4b7a:	465b      	mov	r3, fp
    4b7c:	193c      	adds	r4, r7, r4
    4b7e:	0ddb      	lsrs	r3, r3, #23
    4b80:	9a05      	ldr	r2, [sp, #20]
    4b82:	0264      	lsls	r4, r4, #9
    4b84:	431c      	orrs	r4, r3
    4b86:	0243      	lsls	r3, r0, #9
    4b88:	4313      	orrs	r3, r2
    4b8a:	1e5d      	subs	r5, r3, #1
    4b8c:	41ab      	sbcs	r3, r5
    4b8e:	465a      	mov	r2, fp
    4b90:	0dc0      	lsrs	r0, r0, #23
    4b92:	4303      	orrs	r3, r0
    4b94:	0252      	lsls	r2, r2, #9
    4b96:	4313      	orrs	r3, r2
    4b98:	01e2      	lsls	r2, r4, #7
    4b9a:	d556      	bpl.n	4c4a <__aeabi_dmul+0x426>
    4b9c:	2001      	movs	r0, #1
    4b9e:	085a      	lsrs	r2, r3, #1
    4ba0:	4003      	ands	r3, r0
    4ba2:	4313      	orrs	r3, r2
    4ba4:	07e2      	lsls	r2, r4, #31
    4ba6:	4313      	orrs	r3, r2
    4ba8:	0864      	lsrs	r4, r4, #1
    4baa:	485a      	ldr	r0, [pc, #360]	; (4d14 <__aeabi_dmul+0x4f0>)
    4bac:	4460      	add	r0, ip
    4bae:	2800      	cmp	r0, #0
    4bb0:	dd4d      	ble.n	4c4e <__aeabi_dmul+0x42a>
    4bb2:	075a      	lsls	r2, r3, #29
    4bb4:	d009      	beq.n	4bca <__aeabi_dmul+0x3a6>
    4bb6:	220f      	movs	r2, #15
    4bb8:	401a      	ands	r2, r3
    4bba:	2a04      	cmp	r2, #4
    4bbc:	d005      	beq.n	4bca <__aeabi_dmul+0x3a6>
    4bbe:	1d1a      	adds	r2, r3, #4
    4bc0:	429a      	cmp	r2, r3
    4bc2:	419b      	sbcs	r3, r3
    4bc4:	425b      	negs	r3, r3
    4bc6:	18e4      	adds	r4, r4, r3
    4bc8:	0013      	movs	r3, r2
    4bca:	01e2      	lsls	r2, r4, #7
    4bcc:	d504      	bpl.n	4bd8 <__aeabi_dmul+0x3b4>
    4bce:	2080      	movs	r0, #128	; 0x80
    4bd0:	4a51      	ldr	r2, [pc, #324]	; (4d18 <__aeabi_dmul+0x4f4>)
    4bd2:	00c0      	lsls	r0, r0, #3
    4bd4:	4014      	ands	r4, r2
    4bd6:	4460      	add	r0, ip
    4bd8:	4a50      	ldr	r2, [pc, #320]	; (4d1c <__aeabi_dmul+0x4f8>)
    4bda:	4290      	cmp	r0, r2
    4bdc:	dd00      	ble.n	4be0 <__aeabi_dmul+0x3bc>
    4bde:	e6e3      	b.n	49a8 <__aeabi_dmul+0x184>
    4be0:	2501      	movs	r5, #1
    4be2:	08db      	lsrs	r3, r3, #3
    4be4:	0762      	lsls	r2, r4, #29
    4be6:	431a      	orrs	r2, r3
    4be8:	0264      	lsls	r4, r4, #9
    4bea:	9b01      	ldr	r3, [sp, #4]
    4bec:	4691      	mov	r9, r2
    4bee:	0b22      	lsrs	r2, r4, #12
    4bf0:	0544      	lsls	r4, r0, #21
    4bf2:	0d64      	lsrs	r4, r4, #21
    4bf4:	401d      	ands	r5, r3
    4bf6:	e67c      	b.n	48f2 <__aeabi_dmul+0xce>
    4bf8:	2280      	movs	r2, #128	; 0x80
    4bfa:	4659      	mov	r1, fp
    4bfc:	0312      	lsls	r2, r2, #12
    4bfe:	4211      	tst	r1, r2
    4c00:	d008      	beq.n	4c14 <__aeabi_dmul+0x3f0>
    4c02:	4214      	tst	r4, r2
    4c04:	d106      	bne.n	4c14 <__aeabi_dmul+0x3f0>
    4c06:	4322      	orrs	r2, r4
    4c08:	0312      	lsls	r2, r2, #12
    4c0a:	0b12      	lsrs	r2, r2, #12
    4c0c:	4645      	mov	r5, r8
    4c0e:	4699      	mov	r9, r3
    4c10:	4c43      	ldr	r4, [pc, #268]	; (4d20 <__aeabi_dmul+0x4fc>)
    4c12:	e66e      	b.n	48f2 <__aeabi_dmul+0xce>
    4c14:	465b      	mov	r3, fp
    4c16:	431a      	orrs	r2, r3
    4c18:	0312      	lsls	r2, r2, #12
    4c1a:	0b12      	lsrs	r2, r2, #12
    4c1c:	4c40      	ldr	r4, [pc, #256]	; (4d20 <__aeabi_dmul+0x4fc>)
    4c1e:	e668      	b.n	48f2 <__aeabi_dmul+0xce>
    4c20:	0003      	movs	r3, r0
    4c22:	4654      	mov	r4, sl
    4c24:	3b28      	subs	r3, #40	; 0x28
    4c26:	409c      	lsls	r4, r3
    4c28:	2300      	movs	r3, #0
    4c2a:	e6b9      	b.n	49a0 <__aeabi_dmul+0x17c>
    4c2c:	f000 fbfc 	bl	5428 <__clzsi2>
    4c30:	3020      	adds	r0, #32
    4c32:	e6a6      	b.n	4982 <__aeabi_dmul+0x15e>
    4c34:	0003      	movs	r3, r0
    4c36:	3b28      	subs	r3, #40	; 0x28
    4c38:	409f      	lsls	r7, r3
    4c3a:	2300      	movs	r3, #0
    4c3c:	46bb      	mov	fp, r7
    4c3e:	4699      	mov	r9, r3
    4c40:	e68a      	b.n	4958 <__aeabi_dmul+0x134>
    4c42:	f000 fbf1 	bl	5428 <__clzsi2>
    4c46:	3020      	adds	r0, #32
    4c48:	e674      	b.n	4934 <__aeabi_dmul+0x110>
    4c4a:	46b4      	mov	ip, r6
    4c4c:	e7ad      	b.n	4baa <__aeabi_dmul+0x386>
    4c4e:	2501      	movs	r5, #1
    4c50:	1a2a      	subs	r2, r5, r0
    4c52:	2a38      	cmp	r2, #56	; 0x38
    4c54:	dd06      	ble.n	4c64 <__aeabi_dmul+0x440>
    4c56:	9b01      	ldr	r3, [sp, #4]
    4c58:	2400      	movs	r4, #0
    4c5a:	401d      	ands	r5, r3
    4c5c:	2300      	movs	r3, #0
    4c5e:	2200      	movs	r2, #0
    4c60:	4699      	mov	r9, r3
    4c62:	e646      	b.n	48f2 <__aeabi_dmul+0xce>
    4c64:	2a1f      	cmp	r2, #31
    4c66:	dc21      	bgt.n	4cac <__aeabi_dmul+0x488>
    4c68:	2520      	movs	r5, #32
    4c6a:	0020      	movs	r0, r4
    4c6c:	1aad      	subs	r5, r5, r2
    4c6e:	001e      	movs	r6, r3
    4c70:	40ab      	lsls	r3, r5
    4c72:	40a8      	lsls	r0, r5
    4c74:	40d6      	lsrs	r6, r2
    4c76:	1e5d      	subs	r5, r3, #1
    4c78:	41ab      	sbcs	r3, r5
    4c7a:	4330      	orrs	r0, r6
    4c7c:	4318      	orrs	r0, r3
    4c7e:	40d4      	lsrs	r4, r2
    4c80:	0743      	lsls	r3, r0, #29
    4c82:	d009      	beq.n	4c98 <__aeabi_dmul+0x474>
    4c84:	230f      	movs	r3, #15
    4c86:	4003      	ands	r3, r0
    4c88:	2b04      	cmp	r3, #4
    4c8a:	d005      	beq.n	4c98 <__aeabi_dmul+0x474>
    4c8c:	0003      	movs	r3, r0
    4c8e:	1d18      	adds	r0, r3, #4
    4c90:	4298      	cmp	r0, r3
    4c92:	419b      	sbcs	r3, r3
    4c94:	425b      	negs	r3, r3
    4c96:	18e4      	adds	r4, r4, r3
    4c98:	0223      	lsls	r3, r4, #8
    4c9a:	d521      	bpl.n	4ce0 <__aeabi_dmul+0x4bc>
    4c9c:	2501      	movs	r5, #1
    4c9e:	9b01      	ldr	r3, [sp, #4]
    4ca0:	2401      	movs	r4, #1
    4ca2:	401d      	ands	r5, r3
    4ca4:	2300      	movs	r3, #0
    4ca6:	2200      	movs	r2, #0
    4ca8:	4699      	mov	r9, r3
    4caa:	e622      	b.n	48f2 <__aeabi_dmul+0xce>
    4cac:	251f      	movs	r5, #31
    4cae:	0021      	movs	r1, r4
    4cb0:	426d      	negs	r5, r5
    4cb2:	1a28      	subs	r0, r5, r0
    4cb4:	40c1      	lsrs	r1, r0
    4cb6:	0008      	movs	r0, r1
    4cb8:	2a20      	cmp	r2, #32
    4cba:	d01d      	beq.n	4cf8 <__aeabi_dmul+0x4d4>
    4cbc:	355f      	adds	r5, #95	; 0x5f
    4cbe:	1aaa      	subs	r2, r5, r2
    4cc0:	4094      	lsls	r4, r2
    4cc2:	4323      	orrs	r3, r4
    4cc4:	1e5c      	subs	r4, r3, #1
    4cc6:	41a3      	sbcs	r3, r4
    4cc8:	2507      	movs	r5, #7
    4cca:	4303      	orrs	r3, r0
    4ccc:	401d      	ands	r5, r3
    4cce:	2200      	movs	r2, #0
    4cd0:	2d00      	cmp	r5, #0
    4cd2:	d009      	beq.n	4ce8 <__aeabi_dmul+0x4c4>
    4cd4:	220f      	movs	r2, #15
    4cd6:	2400      	movs	r4, #0
    4cd8:	401a      	ands	r2, r3
    4cda:	0018      	movs	r0, r3
    4cdc:	2a04      	cmp	r2, #4
    4cde:	d1d6      	bne.n	4c8e <__aeabi_dmul+0x46a>
    4ce0:	0003      	movs	r3, r0
    4ce2:	0765      	lsls	r5, r4, #29
    4ce4:	0264      	lsls	r4, r4, #9
    4ce6:	0b22      	lsrs	r2, r4, #12
    4ce8:	08db      	lsrs	r3, r3, #3
    4cea:	432b      	orrs	r3, r5
    4cec:	2501      	movs	r5, #1
    4cee:	4699      	mov	r9, r3
    4cf0:	9b01      	ldr	r3, [sp, #4]
    4cf2:	2400      	movs	r4, #0
    4cf4:	401d      	ands	r5, r3
    4cf6:	e5fc      	b.n	48f2 <__aeabi_dmul+0xce>
    4cf8:	2400      	movs	r4, #0
    4cfa:	e7e2      	b.n	4cc2 <__aeabi_dmul+0x49e>
    4cfc:	2280      	movs	r2, #128	; 0x80
    4cfe:	2501      	movs	r5, #1
    4d00:	0312      	lsls	r2, r2, #12
    4d02:	4322      	orrs	r2, r4
    4d04:	9901      	ldr	r1, [sp, #4]
    4d06:	0312      	lsls	r2, r2, #12
    4d08:	0b12      	lsrs	r2, r2, #12
    4d0a:	400d      	ands	r5, r1
    4d0c:	4699      	mov	r9, r3
    4d0e:	4c04      	ldr	r4, [pc, #16]	; (4d20 <__aeabi_dmul+0x4fc>)
    4d10:	e5ef      	b.n	48f2 <__aeabi_dmul+0xce>
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	000003ff 	.word	0x000003ff
    4d18:	feffffff 	.word	0xfeffffff
    4d1c:	000007fe 	.word	0x000007fe
    4d20:	000007ff 	.word	0x000007ff

00004d24 <__aeabi_dsub>:
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	4646      	mov	r6, r8
    4d28:	46d6      	mov	lr, sl
    4d2a:	464f      	mov	r7, r9
    4d2c:	030c      	lsls	r4, r1, #12
    4d2e:	b5c0      	push	{r6, r7, lr}
    4d30:	0fcd      	lsrs	r5, r1, #31
    4d32:	004e      	lsls	r6, r1, #1
    4d34:	0a61      	lsrs	r1, r4, #9
    4d36:	0f44      	lsrs	r4, r0, #29
    4d38:	430c      	orrs	r4, r1
    4d3a:	00c1      	lsls	r1, r0, #3
    4d3c:	0058      	lsls	r0, r3, #1
    4d3e:	0d40      	lsrs	r0, r0, #21
    4d40:	4684      	mov	ip, r0
    4d42:	468a      	mov	sl, r1
    4d44:	000f      	movs	r7, r1
    4d46:	0319      	lsls	r1, r3, #12
    4d48:	0f50      	lsrs	r0, r2, #29
    4d4a:	0a49      	lsrs	r1, r1, #9
    4d4c:	4301      	orrs	r1, r0
    4d4e:	48c6      	ldr	r0, [pc, #792]	; (5068 <__aeabi_dsub+0x344>)
    4d50:	0d76      	lsrs	r6, r6, #21
    4d52:	46a8      	mov	r8, r5
    4d54:	0fdb      	lsrs	r3, r3, #31
    4d56:	00d2      	lsls	r2, r2, #3
    4d58:	4584      	cmp	ip, r0
    4d5a:	d100      	bne.n	4d5e <__aeabi_dsub+0x3a>
    4d5c:	e0d8      	b.n	4f10 <__aeabi_dsub+0x1ec>
    4d5e:	2001      	movs	r0, #1
    4d60:	4043      	eors	r3, r0
    4d62:	42ab      	cmp	r3, r5
    4d64:	d100      	bne.n	4d68 <__aeabi_dsub+0x44>
    4d66:	e0a6      	b.n	4eb6 <__aeabi_dsub+0x192>
    4d68:	4660      	mov	r0, ip
    4d6a:	1a35      	subs	r5, r6, r0
    4d6c:	2d00      	cmp	r5, #0
    4d6e:	dc00      	bgt.n	4d72 <__aeabi_dsub+0x4e>
    4d70:	e105      	b.n	4f7e <__aeabi_dsub+0x25a>
    4d72:	2800      	cmp	r0, #0
    4d74:	d110      	bne.n	4d98 <__aeabi_dsub+0x74>
    4d76:	000b      	movs	r3, r1
    4d78:	4313      	orrs	r3, r2
    4d7a:	d100      	bne.n	4d7e <__aeabi_dsub+0x5a>
    4d7c:	e0d7      	b.n	4f2e <__aeabi_dsub+0x20a>
    4d7e:	1e6b      	subs	r3, r5, #1
    4d80:	2b00      	cmp	r3, #0
    4d82:	d000      	beq.n	4d86 <__aeabi_dsub+0x62>
    4d84:	e14b      	b.n	501e <__aeabi_dsub+0x2fa>
    4d86:	4653      	mov	r3, sl
    4d88:	1a9f      	subs	r7, r3, r2
    4d8a:	45ba      	cmp	sl, r7
    4d8c:	4180      	sbcs	r0, r0
    4d8e:	1a64      	subs	r4, r4, r1
    4d90:	4240      	negs	r0, r0
    4d92:	1a24      	subs	r4, r4, r0
    4d94:	2601      	movs	r6, #1
    4d96:	e01e      	b.n	4dd6 <__aeabi_dsub+0xb2>
    4d98:	4bb3      	ldr	r3, [pc, #716]	; (5068 <__aeabi_dsub+0x344>)
    4d9a:	429e      	cmp	r6, r3
    4d9c:	d048      	beq.n	4e30 <__aeabi_dsub+0x10c>
    4d9e:	2380      	movs	r3, #128	; 0x80
    4da0:	041b      	lsls	r3, r3, #16
    4da2:	4319      	orrs	r1, r3
    4da4:	2d38      	cmp	r5, #56	; 0x38
    4da6:	dd00      	ble.n	4daa <__aeabi_dsub+0x86>
    4da8:	e119      	b.n	4fde <__aeabi_dsub+0x2ba>
    4daa:	2d1f      	cmp	r5, #31
    4dac:	dd00      	ble.n	4db0 <__aeabi_dsub+0x8c>
    4dae:	e14c      	b.n	504a <__aeabi_dsub+0x326>
    4db0:	2320      	movs	r3, #32
    4db2:	000f      	movs	r7, r1
    4db4:	1b5b      	subs	r3, r3, r5
    4db6:	0010      	movs	r0, r2
    4db8:	409a      	lsls	r2, r3
    4dba:	409f      	lsls	r7, r3
    4dbc:	40e8      	lsrs	r0, r5
    4dbe:	1e53      	subs	r3, r2, #1
    4dc0:	419a      	sbcs	r2, r3
    4dc2:	40e9      	lsrs	r1, r5
    4dc4:	4307      	orrs	r7, r0
    4dc6:	4317      	orrs	r7, r2
    4dc8:	4653      	mov	r3, sl
    4dca:	1bdf      	subs	r7, r3, r7
    4dcc:	1a61      	subs	r1, r4, r1
    4dce:	45ba      	cmp	sl, r7
    4dd0:	41a4      	sbcs	r4, r4
    4dd2:	4264      	negs	r4, r4
    4dd4:	1b0c      	subs	r4, r1, r4
    4dd6:	0223      	lsls	r3, r4, #8
    4dd8:	d400      	bmi.n	4ddc <__aeabi_dsub+0xb8>
    4dda:	e0c5      	b.n	4f68 <__aeabi_dsub+0x244>
    4ddc:	0264      	lsls	r4, r4, #9
    4dde:	0a65      	lsrs	r5, r4, #9
    4de0:	2d00      	cmp	r5, #0
    4de2:	d100      	bne.n	4de6 <__aeabi_dsub+0xc2>
    4de4:	e0f6      	b.n	4fd4 <__aeabi_dsub+0x2b0>
    4de6:	0028      	movs	r0, r5
    4de8:	f000 fb1e 	bl	5428 <__clzsi2>
    4dec:	0003      	movs	r3, r0
    4dee:	3b08      	subs	r3, #8
    4df0:	2b1f      	cmp	r3, #31
    4df2:	dd00      	ble.n	4df6 <__aeabi_dsub+0xd2>
    4df4:	e0e9      	b.n	4fca <__aeabi_dsub+0x2a6>
    4df6:	2220      	movs	r2, #32
    4df8:	003c      	movs	r4, r7
    4dfa:	1ad2      	subs	r2, r2, r3
    4dfc:	409d      	lsls	r5, r3
    4dfe:	40d4      	lsrs	r4, r2
    4e00:	409f      	lsls	r7, r3
    4e02:	4325      	orrs	r5, r4
    4e04:	429e      	cmp	r6, r3
    4e06:	dd00      	ble.n	4e0a <__aeabi_dsub+0xe6>
    4e08:	e0db      	b.n	4fc2 <__aeabi_dsub+0x29e>
    4e0a:	1b9e      	subs	r6, r3, r6
    4e0c:	1c73      	adds	r3, r6, #1
    4e0e:	2b1f      	cmp	r3, #31
    4e10:	dd00      	ble.n	4e14 <__aeabi_dsub+0xf0>
    4e12:	e10a      	b.n	502a <__aeabi_dsub+0x306>
    4e14:	2220      	movs	r2, #32
    4e16:	0038      	movs	r0, r7
    4e18:	1ad2      	subs	r2, r2, r3
    4e1a:	0029      	movs	r1, r5
    4e1c:	4097      	lsls	r7, r2
    4e1e:	002c      	movs	r4, r5
    4e20:	4091      	lsls	r1, r2
    4e22:	40d8      	lsrs	r0, r3
    4e24:	1e7a      	subs	r2, r7, #1
    4e26:	4197      	sbcs	r7, r2
    4e28:	40dc      	lsrs	r4, r3
    4e2a:	2600      	movs	r6, #0
    4e2c:	4301      	orrs	r1, r0
    4e2e:	430f      	orrs	r7, r1
    4e30:	077b      	lsls	r3, r7, #29
    4e32:	d009      	beq.n	4e48 <__aeabi_dsub+0x124>
    4e34:	230f      	movs	r3, #15
    4e36:	403b      	ands	r3, r7
    4e38:	2b04      	cmp	r3, #4
    4e3a:	d005      	beq.n	4e48 <__aeabi_dsub+0x124>
    4e3c:	1d3b      	adds	r3, r7, #4
    4e3e:	42bb      	cmp	r3, r7
    4e40:	41bf      	sbcs	r7, r7
    4e42:	427f      	negs	r7, r7
    4e44:	19e4      	adds	r4, r4, r7
    4e46:	001f      	movs	r7, r3
    4e48:	0223      	lsls	r3, r4, #8
    4e4a:	d525      	bpl.n	4e98 <__aeabi_dsub+0x174>
    4e4c:	4b86      	ldr	r3, [pc, #536]	; (5068 <__aeabi_dsub+0x344>)
    4e4e:	3601      	adds	r6, #1
    4e50:	429e      	cmp	r6, r3
    4e52:	d100      	bne.n	4e56 <__aeabi_dsub+0x132>
    4e54:	e0af      	b.n	4fb6 <__aeabi_dsub+0x292>
    4e56:	4b85      	ldr	r3, [pc, #532]	; (506c <__aeabi_dsub+0x348>)
    4e58:	2501      	movs	r5, #1
    4e5a:	401c      	ands	r4, r3
    4e5c:	4643      	mov	r3, r8
    4e5e:	0762      	lsls	r2, r4, #29
    4e60:	08ff      	lsrs	r7, r7, #3
    4e62:	0264      	lsls	r4, r4, #9
    4e64:	0576      	lsls	r6, r6, #21
    4e66:	4317      	orrs	r7, r2
    4e68:	0b24      	lsrs	r4, r4, #12
    4e6a:	0d76      	lsrs	r6, r6, #21
    4e6c:	401d      	ands	r5, r3
    4e6e:	2100      	movs	r1, #0
    4e70:	0324      	lsls	r4, r4, #12
    4e72:	0b23      	lsrs	r3, r4, #12
    4e74:	0d0c      	lsrs	r4, r1, #20
    4e76:	4a7e      	ldr	r2, [pc, #504]	; (5070 <__aeabi_dsub+0x34c>)
    4e78:	0524      	lsls	r4, r4, #20
    4e7a:	431c      	orrs	r4, r3
    4e7c:	4014      	ands	r4, r2
    4e7e:	0533      	lsls	r3, r6, #20
    4e80:	4323      	orrs	r3, r4
    4e82:	005b      	lsls	r3, r3, #1
    4e84:	07ed      	lsls	r5, r5, #31
    4e86:	085b      	lsrs	r3, r3, #1
    4e88:	432b      	orrs	r3, r5
    4e8a:	0038      	movs	r0, r7
    4e8c:	0019      	movs	r1, r3
    4e8e:	bc1c      	pop	{r2, r3, r4}
    4e90:	4690      	mov	r8, r2
    4e92:	4699      	mov	r9, r3
    4e94:	46a2      	mov	sl, r4
    4e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e98:	2501      	movs	r5, #1
    4e9a:	4643      	mov	r3, r8
    4e9c:	0762      	lsls	r2, r4, #29
    4e9e:	08ff      	lsrs	r7, r7, #3
    4ea0:	4317      	orrs	r7, r2
    4ea2:	08e4      	lsrs	r4, r4, #3
    4ea4:	401d      	ands	r5, r3
    4ea6:	4b70      	ldr	r3, [pc, #448]	; (5068 <__aeabi_dsub+0x344>)
    4ea8:	429e      	cmp	r6, r3
    4eaa:	d036      	beq.n	4f1a <__aeabi_dsub+0x1f6>
    4eac:	0324      	lsls	r4, r4, #12
    4eae:	0576      	lsls	r6, r6, #21
    4eb0:	0b24      	lsrs	r4, r4, #12
    4eb2:	0d76      	lsrs	r6, r6, #21
    4eb4:	e7db      	b.n	4e6e <__aeabi_dsub+0x14a>
    4eb6:	4663      	mov	r3, ip
    4eb8:	1af3      	subs	r3, r6, r3
    4eba:	2b00      	cmp	r3, #0
    4ebc:	dc00      	bgt.n	4ec0 <__aeabi_dsub+0x19c>
    4ebe:	e094      	b.n	4fea <__aeabi_dsub+0x2c6>
    4ec0:	4660      	mov	r0, ip
    4ec2:	2800      	cmp	r0, #0
    4ec4:	d035      	beq.n	4f32 <__aeabi_dsub+0x20e>
    4ec6:	4868      	ldr	r0, [pc, #416]	; (5068 <__aeabi_dsub+0x344>)
    4ec8:	4286      	cmp	r6, r0
    4eca:	d0b1      	beq.n	4e30 <__aeabi_dsub+0x10c>
    4ecc:	2780      	movs	r7, #128	; 0x80
    4ece:	043f      	lsls	r7, r7, #16
    4ed0:	4339      	orrs	r1, r7
    4ed2:	2b38      	cmp	r3, #56	; 0x38
    4ed4:	dc00      	bgt.n	4ed8 <__aeabi_dsub+0x1b4>
    4ed6:	e0fd      	b.n	50d4 <__aeabi_dsub+0x3b0>
    4ed8:	430a      	orrs	r2, r1
    4eda:	0017      	movs	r7, r2
    4edc:	2100      	movs	r1, #0
    4ede:	1e7a      	subs	r2, r7, #1
    4ee0:	4197      	sbcs	r7, r2
    4ee2:	4457      	add	r7, sl
    4ee4:	4557      	cmp	r7, sl
    4ee6:	4180      	sbcs	r0, r0
    4ee8:	1909      	adds	r1, r1, r4
    4eea:	4244      	negs	r4, r0
    4eec:	190c      	adds	r4, r1, r4
    4eee:	0223      	lsls	r3, r4, #8
    4ef0:	d53a      	bpl.n	4f68 <__aeabi_dsub+0x244>
    4ef2:	4b5d      	ldr	r3, [pc, #372]	; (5068 <__aeabi_dsub+0x344>)
    4ef4:	3601      	adds	r6, #1
    4ef6:	429e      	cmp	r6, r3
    4ef8:	d100      	bne.n	4efc <__aeabi_dsub+0x1d8>
    4efa:	e14b      	b.n	5194 <__aeabi_dsub+0x470>
    4efc:	2201      	movs	r2, #1
    4efe:	4b5b      	ldr	r3, [pc, #364]	; (506c <__aeabi_dsub+0x348>)
    4f00:	401c      	ands	r4, r3
    4f02:	087b      	lsrs	r3, r7, #1
    4f04:	4017      	ands	r7, r2
    4f06:	431f      	orrs	r7, r3
    4f08:	07e2      	lsls	r2, r4, #31
    4f0a:	4317      	orrs	r7, r2
    4f0c:	0864      	lsrs	r4, r4, #1
    4f0e:	e78f      	b.n	4e30 <__aeabi_dsub+0x10c>
    4f10:	0008      	movs	r0, r1
    4f12:	4310      	orrs	r0, r2
    4f14:	d000      	beq.n	4f18 <__aeabi_dsub+0x1f4>
    4f16:	e724      	b.n	4d62 <__aeabi_dsub+0x3e>
    4f18:	e721      	b.n	4d5e <__aeabi_dsub+0x3a>
    4f1a:	0023      	movs	r3, r4
    4f1c:	433b      	orrs	r3, r7
    4f1e:	d100      	bne.n	4f22 <__aeabi_dsub+0x1fe>
    4f20:	e1b9      	b.n	5296 <__aeabi_dsub+0x572>
    4f22:	2280      	movs	r2, #128	; 0x80
    4f24:	0312      	lsls	r2, r2, #12
    4f26:	4314      	orrs	r4, r2
    4f28:	0324      	lsls	r4, r4, #12
    4f2a:	0b24      	lsrs	r4, r4, #12
    4f2c:	e79f      	b.n	4e6e <__aeabi_dsub+0x14a>
    4f2e:	002e      	movs	r6, r5
    4f30:	e77e      	b.n	4e30 <__aeabi_dsub+0x10c>
    4f32:	0008      	movs	r0, r1
    4f34:	4310      	orrs	r0, r2
    4f36:	d100      	bne.n	4f3a <__aeabi_dsub+0x216>
    4f38:	e0ca      	b.n	50d0 <__aeabi_dsub+0x3ac>
    4f3a:	1e58      	subs	r0, r3, #1
    4f3c:	4684      	mov	ip, r0
    4f3e:	2800      	cmp	r0, #0
    4f40:	d000      	beq.n	4f44 <__aeabi_dsub+0x220>
    4f42:	e0e7      	b.n	5114 <__aeabi_dsub+0x3f0>
    4f44:	4452      	add	r2, sl
    4f46:	4552      	cmp	r2, sl
    4f48:	4180      	sbcs	r0, r0
    4f4a:	1864      	adds	r4, r4, r1
    4f4c:	4240      	negs	r0, r0
    4f4e:	1824      	adds	r4, r4, r0
    4f50:	0017      	movs	r7, r2
    4f52:	2601      	movs	r6, #1
    4f54:	0223      	lsls	r3, r4, #8
    4f56:	d507      	bpl.n	4f68 <__aeabi_dsub+0x244>
    4f58:	2602      	movs	r6, #2
    4f5a:	e7cf      	b.n	4efc <__aeabi_dsub+0x1d8>
    4f5c:	4664      	mov	r4, ip
    4f5e:	432c      	orrs	r4, r5
    4f60:	d100      	bne.n	4f64 <__aeabi_dsub+0x240>
    4f62:	e1b3      	b.n	52cc <__aeabi_dsub+0x5a8>
    4f64:	002c      	movs	r4, r5
    4f66:	4667      	mov	r7, ip
    4f68:	077b      	lsls	r3, r7, #29
    4f6a:	d000      	beq.n	4f6e <__aeabi_dsub+0x24a>
    4f6c:	e762      	b.n	4e34 <__aeabi_dsub+0x110>
    4f6e:	0763      	lsls	r3, r4, #29
    4f70:	08ff      	lsrs	r7, r7, #3
    4f72:	431f      	orrs	r7, r3
    4f74:	2501      	movs	r5, #1
    4f76:	4643      	mov	r3, r8
    4f78:	08e4      	lsrs	r4, r4, #3
    4f7a:	401d      	ands	r5, r3
    4f7c:	e793      	b.n	4ea6 <__aeabi_dsub+0x182>
    4f7e:	2d00      	cmp	r5, #0
    4f80:	d178      	bne.n	5074 <__aeabi_dsub+0x350>
    4f82:	1c75      	adds	r5, r6, #1
    4f84:	056d      	lsls	r5, r5, #21
    4f86:	0d6d      	lsrs	r5, r5, #21
    4f88:	2d01      	cmp	r5, #1
    4f8a:	dc00      	bgt.n	4f8e <__aeabi_dsub+0x26a>
    4f8c:	e0f2      	b.n	5174 <__aeabi_dsub+0x450>
    4f8e:	4650      	mov	r0, sl
    4f90:	1a80      	subs	r0, r0, r2
    4f92:	4582      	cmp	sl, r0
    4f94:	41bf      	sbcs	r7, r7
    4f96:	1a65      	subs	r5, r4, r1
    4f98:	427f      	negs	r7, r7
    4f9a:	1bed      	subs	r5, r5, r7
    4f9c:	4684      	mov	ip, r0
    4f9e:	0228      	lsls	r0, r5, #8
    4fa0:	d400      	bmi.n	4fa4 <__aeabi_dsub+0x280>
    4fa2:	e08c      	b.n	50be <__aeabi_dsub+0x39a>
    4fa4:	4650      	mov	r0, sl
    4fa6:	1a17      	subs	r7, r2, r0
    4fa8:	42ba      	cmp	r2, r7
    4faa:	4192      	sbcs	r2, r2
    4fac:	1b0c      	subs	r4, r1, r4
    4fae:	4255      	negs	r5, r2
    4fb0:	1b65      	subs	r5, r4, r5
    4fb2:	4698      	mov	r8, r3
    4fb4:	e714      	b.n	4de0 <__aeabi_dsub+0xbc>
    4fb6:	2501      	movs	r5, #1
    4fb8:	4643      	mov	r3, r8
    4fba:	2400      	movs	r4, #0
    4fbc:	401d      	ands	r5, r3
    4fbe:	2700      	movs	r7, #0
    4fc0:	e755      	b.n	4e6e <__aeabi_dsub+0x14a>
    4fc2:	4c2a      	ldr	r4, [pc, #168]	; (506c <__aeabi_dsub+0x348>)
    4fc4:	1af6      	subs	r6, r6, r3
    4fc6:	402c      	ands	r4, r5
    4fc8:	e732      	b.n	4e30 <__aeabi_dsub+0x10c>
    4fca:	003d      	movs	r5, r7
    4fcc:	3828      	subs	r0, #40	; 0x28
    4fce:	4085      	lsls	r5, r0
    4fd0:	2700      	movs	r7, #0
    4fd2:	e717      	b.n	4e04 <__aeabi_dsub+0xe0>
    4fd4:	0038      	movs	r0, r7
    4fd6:	f000 fa27 	bl	5428 <__clzsi2>
    4fda:	3020      	adds	r0, #32
    4fdc:	e706      	b.n	4dec <__aeabi_dsub+0xc8>
    4fde:	430a      	orrs	r2, r1
    4fe0:	0017      	movs	r7, r2
    4fe2:	2100      	movs	r1, #0
    4fe4:	1e7a      	subs	r2, r7, #1
    4fe6:	4197      	sbcs	r7, r2
    4fe8:	e6ee      	b.n	4dc8 <__aeabi_dsub+0xa4>
    4fea:	2b00      	cmp	r3, #0
    4fec:	d000      	beq.n	4ff0 <__aeabi_dsub+0x2cc>
    4fee:	e0e5      	b.n	51bc <__aeabi_dsub+0x498>
    4ff0:	1c73      	adds	r3, r6, #1
    4ff2:	469c      	mov	ip, r3
    4ff4:	055b      	lsls	r3, r3, #21
    4ff6:	0d5b      	lsrs	r3, r3, #21
    4ff8:	2b01      	cmp	r3, #1
    4ffa:	dc00      	bgt.n	4ffe <__aeabi_dsub+0x2da>
    4ffc:	e09f      	b.n	513e <__aeabi_dsub+0x41a>
    4ffe:	4b1a      	ldr	r3, [pc, #104]	; (5068 <__aeabi_dsub+0x344>)
    5000:	459c      	cmp	ip, r3
    5002:	d100      	bne.n	5006 <__aeabi_dsub+0x2e2>
    5004:	e0c5      	b.n	5192 <__aeabi_dsub+0x46e>
    5006:	4452      	add	r2, sl
    5008:	4552      	cmp	r2, sl
    500a:	4180      	sbcs	r0, r0
    500c:	1864      	adds	r4, r4, r1
    500e:	4240      	negs	r0, r0
    5010:	1824      	adds	r4, r4, r0
    5012:	07e7      	lsls	r7, r4, #31
    5014:	0852      	lsrs	r2, r2, #1
    5016:	4317      	orrs	r7, r2
    5018:	0864      	lsrs	r4, r4, #1
    501a:	4666      	mov	r6, ip
    501c:	e708      	b.n	4e30 <__aeabi_dsub+0x10c>
    501e:	4812      	ldr	r0, [pc, #72]	; (5068 <__aeabi_dsub+0x344>)
    5020:	4285      	cmp	r5, r0
    5022:	d100      	bne.n	5026 <__aeabi_dsub+0x302>
    5024:	e085      	b.n	5132 <__aeabi_dsub+0x40e>
    5026:	001d      	movs	r5, r3
    5028:	e6bc      	b.n	4da4 <__aeabi_dsub+0x80>
    502a:	0029      	movs	r1, r5
    502c:	3e1f      	subs	r6, #31
    502e:	40f1      	lsrs	r1, r6
    5030:	2b20      	cmp	r3, #32
    5032:	d100      	bne.n	5036 <__aeabi_dsub+0x312>
    5034:	e07f      	b.n	5136 <__aeabi_dsub+0x412>
    5036:	2240      	movs	r2, #64	; 0x40
    5038:	1ad3      	subs	r3, r2, r3
    503a:	409d      	lsls	r5, r3
    503c:	432f      	orrs	r7, r5
    503e:	1e7d      	subs	r5, r7, #1
    5040:	41af      	sbcs	r7, r5
    5042:	2400      	movs	r4, #0
    5044:	430f      	orrs	r7, r1
    5046:	2600      	movs	r6, #0
    5048:	e78e      	b.n	4f68 <__aeabi_dsub+0x244>
    504a:	002b      	movs	r3, r5
    504c:	000f      	movs	r7, r1
    504e:	3b20      	subs	r3, #32
    5050:	40df      	lsrs	r7, r3
    5052:	2d20      	cmp	r5, #32
    5054:	d071      	beq.n	513a <__aeabi_dsub+0x416>
    5056:	2340      	movs	r3, #64	; 0x40
    5058:	1b5d      	subs	r5, r3, r5
    505a:	40a9      	lsls	r1, r5
    505c:	430a      	orrs	r2, r1
    505e:	1e51      	subs	r1, r2, #1
    5060:	418a      	sbcs	r2, r1
    5062:	2100      	movs	r1, #0
    5064:	4317      	orrs	r7, r2
    5066:	e6af      	b.n	4dc8 <__aeabi_dsub+0xa4>
    5068:	000007ff 	.word	0x000007ff
    506c:	ff7fffff 	.word	0xff7fffff
    5070:	800fffff 	.word	0x800fffff
    5074:	2e00      	cmp	r6, #0
    5076:	d03e      	beq.n	50f6 <__aeabi_dsub+0x3d2>
    5078:	4eb3      	ldr	r6, [pc, #716]	; (5348 <__aeabi_dsub+0x624>)
    507a:	45b4      	cmp	ip, r6
    507c:	d045      	beq.n	510a <__aeabi_dsub+0x3e6>
    507e:	2680      	movs	r6, #128	; 0x80
    5080:	0436      	lsls	r6, r6, #16
    5082:	426d      	negs	r5, r5
    5084:	4334      	orrs	r4, r6
    5086:	2d38      	cmp	r5, #56	; 0x38
    5088:	dd00      	ble.n	508c <__aeabi_dsub+0x368>
    508a:	e0a8      	b.n	51de <__aeabi_dsub+0x4ba>
    508c:	2d1f      	cmp	r5, #31
    508e:	dd00      	ble.n	5092 <__aeabi_dsub+0x36e>
    5090:	e11f      	b.n	52d2 <__aeabi_dsub+0x5ae>
    5092:	2620      	movs	r6, #32
    5094:	0027      	movs	r7, r4
    5096:	4650      	mov	r0, sl
    5098:	1b76      	subs	r6, r6, r5
    509a:	40b7      	lsls	r7, r6
    509c:	40e8      	lsrs	r0, r5
    509e:	4307      	orrs	r7, r0
    50a0:	4650      	mov	r0, sl
    50a2:	40b0      	lsls	r0, r6
    50a4:	1e46      	subs	r6, r0, #1
    50a6:	41b0      	sbcs	r0, r6
    50a8:	40ec      	lsrs	r4, r5
    50aa:	4338      	orrs	r0, r7
    50ac:	1a17      	subs	r7, r2, r0
    50ae:	42ba      	cmp	r2, r7
    50b0:	4192      	sbcs	r2, r2
    50b2:	1b0c      	subs	r4, r1, r4
    50b4:	4252      	negs	r2, r2
    50b6:	1aa4      	subs	r4, r4, r2
    50b8:	4666      	mov	r6, ip
    50ba:	4698      	mov	r8, r3
    50bc:	e68b      	b.n	4dd6 <__aeabi_dsub+0xb2>
    50be:	4664      	mov	r4, ip
    50c0:	4667      	mov	r7, ip
    50c2:	432c      	orrs	r4, r5
    50c4:	d000      	beq.n	50c8 <__aeabi_dsub+0x3a4>
    50c6:	e68b      	b.n	4de0 <__aeabi_dsub+0xbc>
    50c8:	2500      	movs	r5, #0
    50ca:	2600      	movs	r6, #0
    50cc:	2700      	movs	r7, #0
    50ce:	e6ea      	b.n	4ea6 <__aeabi_dsub+0x182>
    50d0:	001e      	movs	r6, r3
    50d2:	e6ad      	b.n	4e30 <__aeabi_dsub+0x10c>
    50d4:	2b1f      	cmp	r3, #31
    50d6:	dc60      	bgt.n	519a <__aeabi_dsub+0x476>
    50d8:	2720      	movs	r7, #32
    50da:	1af8      	subs	r0, r7, r3
    50dc:	000f      	movs	r7, r1
    50de:	4684      	mov	ip, r0
    50e0:	4087      	lsls	r7, r0
    50e2:	0010      	movs	r0, r2
    50e4:	40d8      	lsrs	r0, r3
    50e6:	4307      	orrs	r7, r0
    50e8:	4660      	mov	r0, ip
    50ea:	4082      	lsls	r2, r0
    50ec:	1e50      	subs	r0, r2, #1
    50ee:	4182      	sbcs	r2, r0
    50f0:	40d9      	lsrs	r1, r3
    50f2:	4317      	orrs	r7, r2
    50f4:	e6f5      	b.n	4ee2 <__aeabi_dsub+0x1be>
    50f6:	0026      	movs	r6, r4
    50f8:	4650      	mov	r0, sl
    50fa:	4306      	orrs	r6, r0
    50fc:	d005      	beq.n	510a <__aeabi_dsub+0x3e6>
    50fe:	43ed      	mvns	r5, r5
    5100:	2d00      	cmp	r5, #0
    5102:	d0d3      	beq.n	50ac <__aeabi_dsub+0x388>
    5104:	4e90      	ldr	r6, [pc, #576]	; (5348 <__aeabi_dsub+0x624>)
    5106:	45b4      	cmp	ip, r6
    5108:	d1bd      	bne.n	5086 <__aeabi_dsub+0x362>
    510a:	000c      	movs	r4, r1
    510c:	0017      	movs	r7, r2
    510e:	4666      	mov	r6, ip
    5110:	4698      	mov	r8, r3
    5112:	e68d      	b.n	4e30 <__aeabi_dsub+0x10c>
    5114:	488c      	ldr	r0, [pc, #560]	; (5348 <__aeabi_dsub+0x624>)
    5116:	4283      	cmp	r3, r0
    5118:	d00b      	beq.n	5132 <__aeabi_dsub+0x40e>
    511a:	4663      	mov	r3, ip
    511c:	e6d9      	b.n	4ed2 <__aeabi_dsub+0x1ae>
    511e:	2d00      	cmp	r5, #0
    5120:	d000      	beq.n	5124 <__aeabi_dsub+0x400>
    5122:	e096      	b.n	5252 <__aeabi_dsub+0x52e>
    5124:	0008      	movs	r0, r1
    5126:	4310      	orrs	r0, r2
    5128:	d100      	bne.n	512c <__aeabi_dsub+0x408>
    512a:	e0e2      	b.n	52f2 <__aeabi_dsub+0x5ce>
    512c:	000c      	movs	r4, r1
    512e:	0017      	movs	r7, r2
    5130:	4698      	mov	r8, r3
    5132:	4e85      	ldr	r6, [pc, #532]	; (5348 <__aeabi_dsub+0x624>)
    5134:	e67c      	b.n	4e30 <__aeabi_dsub+0x10c>
    5136:	2500      	movs	r5, #0
    5138:	e780      	b.n	503c <__aeabi_dsub+0x318>
    513a:	2100      	movs	r1, #0
    513c:	e78e      	b.n	505c <__aeabi_dsub+0x338>
    513e:	0023      	movs	r3, r4
    5140:	4650      	mov	r0, sl
    5142:	4303      	orrs	r3, r0
    5144:	2e00      	cmp	r6, #0
    5146:	d000      	beq.n	514a <__aeabi_dsub+0x426>
    5148:	e0a8      	b.n	529c <__aeabi_dsub+0x578>
    514a:	2b00      	cmp	r3, #0
    514c:	d100      	bne.n	5150 <__aeabi_dsub+0x42c>
    514e:	e0de      	b.n	530e <__aeabi_dsub+0x5ea>
    5150:	000b      	movs	r3, r1
    5152:	4313      	orrs	r3, r2
    5154:	d100      	bne.n	5158 <__aeabi_dsub+0x434>
    5156:	e66b      	b.n	4e30 <__aeabi_dsub+0x10c>
    5158:	4452      	add	r2, sl
    515a:	4552      	cmp	r2, sl
    515c:	4180      	sbcs	r0, r0
    515e:	1864      	adds	r4, r4, r1
    5160:	4240      	negs	r0, r0
    5162:	1824      	adds	r4, r4, r0
    5164:	0017      	movs	r7, r2
    5166:	0223      	lsls	r3, r4, #8
    5168:	d400      	bmi.n	516c <__aeabi_dsub+0x448>
    516a:	e6fd      	b.n	4f68 <__aeabi_dsub+0x244>
    516c:	4b77      	ldr	r3, [pc, #476]	; (534c <__aeabi_dsub+0x628>)
    516e:	4666      	mov	r6, ip
    5170:	401c      	ands	r4, r3
    5172:	e65d      	b.n	4e30 <__aeabi_dsub+0x10c>
    5174:	0025      	movs	r5, r4
    5176:	4650      	mov	r0, sl
    5178:	4305      	orrs	r5, r0
    517a:	2e00      	cmp	r6, #0
    517c:	d1cf      	bne.n	511e <__aeabi_dsub+0x3fa>
    517e:	2d00      	cmp	r5, #0
    5180:	d14f      	bne.n	5222 <__aeabi_dsub+0x4fe>
    5182:	000c      	movs	r4, r1
    5184:	4314      	orrs	r4, r2
    5186:	d100      	bne.n	518a <__aeabi_dsub+0x466>
    5188:	e0a0      	b.n	52cc <__aeabi_dsub+0x5a8>
    518a:	000c      	movs	r4, r1
    518c:	0017      	movs	r7, r2
    518e:	4698      	mov	r8, r3
    5190:	e64e      	b.n	4e30 <__aeabi_dsub+0x10c>
    5192:	4666      	mov	r6, ip
    5194:	2400      	movs	r4, #0
    5196:	2700      	movs	r7, #0
    5198:	e685      	b.n	4ea6 <__aeabi_dsub+0x182>
    519a:	001f      	movs	r7, r3
    519c:	0008      	movs	r0, r1
    519e:	3f20      	subs	r7, #32
    51a0:	40f8      	lsrs	r0, r7
    51a2:	0007      	movs	r7, r0
    51a4:	2b20      	cmp	r3, #32
    51a6:	d100      	bne.n	51aa <__aeabi_dsub+0x486>
    51a8:	e08e      	b.n	52c8 <__aeabi_dsub+0x5a4>
    51aa:	2040      	movs	r0, #64	; 0x40
    51ac:	1ac3      	subs	r3, r0, r3
    51ae:	4099      	lsls	r1, r3
    51b0:	430a      	orrs	r2, r1
    51b2:	1e51      	subs	r1, r2, #1
    51b4:	418a      	sbcs	r2, r1
    51b6:	2100      	movs	r1, #0
    51b8:	4317      	orrs	r7, r2
    51ba:	e692      	b.n	4ee2 <__aeabi_dsub+0x1be>
    51bc:	2e00      	cmp	r6, #0
    51be:	d114      	bne.n	51ea <__aeabi_dsub+0x4c6>
    51c0:	0026      	movs	r6, r4
    51c2:	4650      	mov	r0, sl
    51c4:	4306      	orrs	r6, r0
    51c6:	d062      	beq.n	528e <__aeabi_dsub+0x56a>
    51c8:	43db      	mvns	r3, r3
    51ca:	2b00      	cmp	r3, #0
    51cc:	d15c      	bne.n	5288 <__aeabi_dsub+0x564>
    51ce:	1887      	adds	r7, r0, r2
    51d0:	4297      	cmp	r7, r2
    51d2:	4192      	sbcs	r2, r2
    51d4:	1864      	adds	r4, r4, r1
    51d6:	4252      	negs	r2, r2
    51d8:	18a4      	adds	r4, r4, r2
    51da:	4666      	mov	r6, ip
    51dc:	e687      	b.n	4eee <__aeabi_dsub+0x1ca>
    51de:	4650      	mov	r0, sl
    51e0:	4320      	orrs	r0, r4
    51e2:	1e44      	subs	r4, r0, #1
    51e4:	41a0      	sbcs	r0, r4
    51e6:	2400      	movs	r4, #0
    51e8:	e760      	b.n	50ac <__aeabi_dsub+0x388>
    51ea:	4e57      	ldr	r6, [pc, #348]	; (5348 <__aeabi_dsub+0x624>)
    51ec:	45b4      	cmp	ip, r6
    51ee:	d04e      	beq.n	528e <__aeabi_dsub+0x56a>
    51f0:	2680      	movs	r6, #128	; 0x80
    51f2:	0436      	lsls	r6, r6, #16
    51f4:	425b      	negs	r3, r3
    51f6:	4334      	orrs	r4, r6
    51f8:	2b38      	cmp	r3, #56	; 0x38
    51fa:	dd00      	ble.n	51fe <__aeabi_dsub+0x4da>
    51fc:	e07f      	b.n	52fe <__aeabi_dsub+0x5da>
    51fe:	2b1f      	cmp	r3, #31
    5200:	dd00      	ble.n	5204 <__aeabi_dsub+0x4e0>
    5202:	e08b      	b.n	531c <__aeabi_dsub+0x5f8>
    5204:	2620      	movs	r6, #32
    5206:	0027      	movs	r7, r4
    5208:	4650      	mov	r0, sl
    520a:	1af6      	subs	r6, r6, r3
    520c:	40b7      	lsls	r7, r6
    520e:	40d8      	lsrs	r0, r3
    5210:	4307      	orrs	r7, r0
    5212:	4650      	mov	r0, sl
    5214:	40b0      	lsls	r0, r6
    5216:	1e46      	subs	r6, r0, #1
    5218:	41b0      	sbcs	r0, r6
    521a:	4307      	orrs	r7, r0
    521c:	40dc      	lsrs	r4, r3
    521e:	18bf      	adds	r7, r7, r2
    5220:	e7d6      	b.n	51d0 <__aeabi_dsub+0x4ac>
    5222:	000d      	movs	r5, r1
    5224:	4315      	orrs	r5, r2
    5226:	d100      	bne.n	522a <__aeabi_dsub+0x506>
    5228:	e602      	b.n	4e30 <__aeabi_dsub+0x10c>
    522a:	4650      	mov	r0, sl
    522c:	1a80      	subs	r0, r0, r2
    522e:	4582      	cmp	sl, r0
    5230:	41bf      	sbcs	r7, r7
    5232:	1a65      	subs	r5, r4, r1
    5234:	427f      	negs	r7, r7
    5236:	1bed      	subs	r5, r5, r7
    5238:	4684      	mov	ip, r0
    523a:	0228      	lsls	r0, r5, #8
    523c:	d400      	bmi.n	5240 <__aeabi_dsub+0x51c>
    523e:	e68d      	b.n	4f5c <__aeabi_dsub+0x238>
    5240:	4650      	mov	r0, sl
    5242:	1a17      	subs	r7, r2, r0
    5244:	42ba      	cmp	r2, r7
    5246:	4192      	sbcs	r2, r2
    5248:	1b0c      	subs	r4, r1, r4
    524a:	4252      	negs	r2, r2
    524c:	1aa4      	subs	r4, r4, r2
    524e:	4698      	mov	r8, r3
    5250:	e5ee      	b.n	4e30 <__aeabi_dsub+0x10c>
    5252:	000d      	movs	r5, r1
    5254:	4315      	orrs	r5, r2
    5256:	d100      	bne.n	525a <__aeabi_dsub+0x536>
    5258:	e76b      	b.n	5132 <__aeabi_dsub+0x40e>
    525a:	4650      	mov	r0, sl
    525c:	0767      	lsls	r7, r4, #29
    525e:	08c0      	lsrs	r0, r0, #3
    5260:	4307      	orrs	r7, r0
    5262:	2080      	movs	r0, #128	; 0x80
    5264:	08e4      	lsrs	r4, r4, #3
    5266:	0300      	lsls	r0, r0, #12
    5268:	4204      	tst	r4, r0
    526a:	d007      	beq.n	527c <__aeabi_dsub+0x558>
    526c:	08cd      	lsrs	r5, r1, #3
    526e:	4205      	tst	r5, r0
    5270:	d104      	bne.n	527c <__aeabi_dsub+0x558>
    5272:	002c      	movs	r4, r5
    5274:	4698      	mov	r8, r3
    5276:	08d7      	lsrs	r7, r2, #3
    5278:	0749      	lsls	r1, r1, #29
    527a:	430f      	orrs	r7, r1
    527c:	0f7b      	lsrs	r3, r7, #29
    527e:	00e4      	lsls	r4, r4, #3
    5280:	431c      	orrs	r4, r3
    5282:	00ff      	lsls	r7, r7, #3
    5284:	4e30      	ldr	r6, [pc, #192]	; (5348 <__aeabi_dsub+0x624>)
    5286:	e5d3      	b.n	4e30 <__aeabi_dsub+0x10c>
    5288:	4e2f      	ldr	r6, [pc, #188]	; (5348 <__aeabi_dsub+0x624>)
    528a:	45b4      	cmp	ip, r6
    528c:	d1b4      	bne.n	51f8 <__aeabi_dsub+0x4d4>
    528e:	000c      	movs	r4, r1
    5290:	0017      	movs	r7, r2
    5292:	4666      	mov	r6, ip
    5294:	e5cc      	b.n	4e30 <__aeabi_dsub+0x10c>
    5296:	2700      	movs	r7, #0
    5298:	2400      	movs	r4, #0
    529a:	e5e8      	b.n	4e6e <__aeabi_dsub+0x14a>
    529c:	2b00      	cmp	r3, #0
    529e:	d039      	beq.n	5314 <__aeabi_dsub+0x5f0>
    52a0:	000b      	movs	r3, r1
    52a2:	4313      	orrs	r3, r2
    52a4:	d100      	bne.n	52a8 <__aeabi_dsub+0x584>
    52a6:	e744      	b.n	5132 <__aeabi_dsub+0x40e>
    52a8:	08c0      	lsrs	r0, r0, #3
    52aa:	0767      	lsls	r7, r4, #29
    52ac:	4307      	orrs	r7, r0
    52ae:	2080      	movs	r0, #128	; 0x80
    52b0:	08e4      	lsrs	r4, r4, #3
    52b2:	0300      	lsls	r0, r0, #12
    52b4:	4204      	tst	r4, r0
    52b6:	d0e1      	beq.n	527c <__aeabi_dsub+0x558>
    52b8:	08cb      	lsrs	r3, r1, #3
    52ba:	4203      	tst	r3, r0
    52bc:	d1de      	bne.n	527c <__aeabi_dsub+0x558>
    52be:	08d7      	lsrs	r7, r2, #3
    52c0:	0749      	lsls	r1, r1, #29
    52c2:	430f      	orrs	r7, r1
    52c4:	001c      	movs	r4, r3
    52c6:	e7d9      	b.n	527c <__aeabi_dsub+0x558>
    52c8:	2100      	movs	r1, #0
    52ca:	e771      	b.n	51b0 <__aeabi_dsub+0x48c>
    52cc:	2500      	movs	r5, #0
    52ce:	2700      	movs	r7, #0
    52d0:	e5e9      	b.n	4ea6 <__aeabi_dsub+0x182>
    52d2:	002e      	movs	r6, r5
    52d4:	0027      	movs	r7, r4
    52d6:	3e20      	subs	r6, #32
    52d8:	40f7      	lsrs	r7, r6
    52da:	2d20      	cmp	r5, #32
    52dc:	d02f      	beq.n	533e <__aeabi_dsub+0x61a>
    52de:	2640      	movs	r6, #64	; 0x40
    52e0:	1b75      	subs	r5, r6, r5
    52e2:	40ac      	lsls	r4, r5
    52e4:	4650      	mov	r0, sl
    52e6:	4320      	orrs	r0, r4
    52e8:	1e44      	subs	r4, r0, #1
    52ea:	41a0      	sbcs	r0, r4
    52ec:	2400      	movs	r4, #0
    52ee:	4338      	orrs	r0, r7
    52f0:	e6dc      	b.n	50ac <__aeabi_dsub+0x388>
    52f2:	2480      	movs	r4, #128	; 0x80
    52f4:	2500      	movs	r5, #0
    52f6:	0324      	lsls	r4, r4, #12
    52f8:	4e13      	ldr	r6, [pc, #76]	; (5348 <__aeabi_dsub+0x624>)
    52fa:	2700      	movs	r7, #0
    52fc:	e5d3      	b.n	4ea6 <__aeabi_dsub+0x182>
    52fe:	4650      	mov	r0, sl
    5300:	4320      	orrs	r0, r4
    5302:	0007      	movs	r7, r0
    5304:	1e78      	subs	r0, r7, #1
    5306:	4187      	sbcs	r7, r0
    5308:	2400      	movs	r4, #0
    530a:	18bf      	adds	r7, r7, r2
    530c:	e760      	b.n	51d0 <__aeabi_dsub+0x4ac>
    530e:	000c      	movs	r4, r1
    5310:	0017      	movs	r7, r2
    5312:	e58d      	b.n	4e30 <__aeabi_dsub+0x10c>
    5314:	000c      	movs	r4, r1
    5316:	0017      	movs	r7, r2
    5318:	4e0b      	ldr	r6, [pc, #44]	; (5348 <__aeabi_dsub+0x624>)
    531a:	e589      	b.n	4e30 <__aeabi_dsub+0x10c>
    531c:	001e      	movs	r6, r3
    531e:	0027      	movs	r7, r4
    5320:	3e20      	subs	r6, #32
    5322:	40f7      	lsrs	r7, r6
    5324:	2b20      	cmp	r3, #32
    5326:	d00c      	beq.n	5342 <__aeabi_dsub+0x61e>
    5328:	2640      	movs	r6, #64	; 0x40
    532a:	1af3      	subs	r3, r6, r3
    532c:	409c      	lsls	r4, r3
    532e:	4650      	mov	r0, sl
    5330:	4320      	orrs	r0, r4
    5332:	1e44      	subs	r4, r0, #1
    5334:	41a0      	sbcs	r0, r4
    5336:	4307      	orrs	r7, r0
    5338:	2400      	movs	r4, #0
    533a:	18bf      	adds	r7, r7, r2
    533c:	e748      	b.n	51d0 <__aeabi_dsub+0x4ac>
    533e:	2400      	movs	r4, #0
    5340:	e7d0      	b.n	52e4 <__aeabi_dsub+0x5c0>
    5342:	2400      	movs	r4, #0
    5344:	e7f3      	b.n	532e <__aeabi_dsub+0x60a>
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	000007ff 	.word	0x000007ff
    534c:	ff7fffff 	.word	0xff7fffff

00005350 <__aeabi_d2iz>:
    5350:	b530      	push	{r4, r5, lr}
    5352:	4d13      	ldr	r5, [pc, #76]	; (53a0 <__aeabi_d2iz+0x50>)
    5354:	030a      	lsls	r2, r1, #12
    5356:	004b      	lsls	r3, r1, #1
    5358:	0b12      	lsrs	r2, r2, #12
    535a:	0d5b      	lsrs	r3, r3, #21
    535c:	0fc9      	lsrs	r1, r1, #31
    535e:	2400      	movs	r4, #0
    5360:	42ab      	cmp	r3, r5
    5362:	dd10      	ble.n	5386 <__aeabi_d2iz+0x36>
    5364:	4c0f      	ldr	r4, [pc, #60]	; (53a4 <__aeabi_d2iz+0x54>)
    5366:	42a3      	cmp	r3, r4
    5368:	dc0f      	bgt.n	538a <__aeabi_d2iz+0x3a>
    536a:	2480      	movs	r4, #128	; 0x80
    536c:	4d0e      	ldr	r5, [pc, #56]	; (53a8 <__aeabi_d2iz+0x58>)
    536e:	0364      	lsls	r4, r4, #13
    5370:	4322      	orrs	r2, r4
    5372:	1aed      	subs	r5, r5, r3
    5374:	2d1f      	cmp	r5, #31
    5376:	dd0b      	ble.n	5390 <__aeabi_d2iz+0x40>
    5378:	480c      	ldr	r0, [pc, #48]	; (53ac <__aeabi_d2iz+0x5c>)
    537a:	1ac3      	subs	r3, r0, r3
    537c:	40da      	lsrs	r2, r3
    537e:	4254      	negs	r4, r2
    5380:	2900      	cmp	r1, #0
    5382:	d100      	bne.n	5386 <__aeabi_d2iz+0x36>
    5384:	0014      	movs	r4, r2
    5386:	0020      	movs	r0, r4
    5388:	bd30      	pop	{r4, r5, pc}
    538a:	4b09      	ldr	r3, [pc, #36]	; (53b0 <__aeabi_d2iz+0x60>)
    538c:	18cc      	adds	r4, r1, r3
    538e:	e7fa      	b.n	5386 <__aeabi_d2iz+0x36>
    5390:	4c08      	ldr	r4, [pc, #32]	; (53b4 <__aeabi_d2iz+0x64>)
    5392:	40e8      	lsrs	r0, r5
    5394:	46a4      	mov	ip, r4
    5396:	4463      	add	r3, ip
    5398:	409a      	lsls	r2, r3
    539a:	4302      	orrs	r2, r0
    539c:	e7ef      	b.n	537e <__aeabi_d2iz+0x2e>
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	000003fe 	.word	0x000003fe
    53a4:	0000041d 	.word	0x0000041d
    53a8:	00000433 	.word	0x00000433
    53ac:	00000413 	.word	0x00000413
    53b0:	7fffffff 	.word	0x7fffffff
    53b4:	fffffbed 	.word	0xfffffbed

000053b8 <__aeabi_ui2d>:
    53b8:	b510      	push	{r4, lr}
    53ba:	1e04      	subs	r4, r0, #0
    53bc:	d028      	beq.n	5410 <__aeabi_ui2d+0x58>
    53be:	f000 f833 	bl	5428 <__clzsi2>
    53c2:	4b15      	ldr	r3, [pc, #84]	; (5418 <__aeabi_ui2d+0x60>)
    53c4:	4a15      	ldr	r2, [pc, #84]	; (541c <__aeabi_ui2d+0x64>)
    53c6:	1a1b      	subs	r3, r3, r0
    53c8:	1ad2      	subs	r2, r2, r3
    53ca:	2a1f      	cmp	r2, #31
    53cc:	dd15      	ble.n	53fa <__aeabi_ui2d+0x42>
    53ce:	4a14      	ldr	r2, [pc, #80]	; (5420 <__aeabi_ui2d+0x68>)
    53d0:	1ad2      	subs	r2, r2, r3
    53d2:	4094      	lsls	r4, r2
    53d4:	2200      	movs	r2, #0
    53d6:	0324      	lsls	r4, r4, #12
    53d8:	055b      	lsls	r3, r3, #21
    53da:	0b24      	lsrs	r4, r4, #12
    53dc:	0d5b      	lsrs	r3, r3, #21
    53de:	2100      	movs	r1, #0
    53e0:	0010      	movs	r0, r2
    53e2:	0324      	lsls	r4, r4, #12
    53e4:	0d0a      	lsrs	r2, r1, #20
    53e6:	0b24      	lsrs	r4, r4, #12
    53e8:	0512      	lsls	r2, r2, #20
    53ea:	4322      	orrs	r2, r4
    53ec:	4c0d      	ldr	r4, [pc, #52]	; (5424 <__aeabi_ui2d+0x6c>)
    53ee:	051b      	lsls	r3, r3, #20
    53f0:	4022      	ands	r2, r4
    53f2:	4313      	orrs	r3, r2
    53f4:	005b      	lsls	r3, r3, #1
    53f6:	0859      	lsrs	r1, r3, #1
    53f8:	bd10      	pop	{r4, pc}
    53fa:	0021      	movs	r1, r4
    53fc:	4091      	lsls	r1, r2
    53fe:	000a      	movs	r2, r1
    5400:	210b      	movs	r1, #11
    5402:	1a08      	subs	r0, r1, r0
    5404:	40c4      	lsrs	r4, r0
    5406:	055b      	lsls	r3, r3, #21
    5408:	0324      	lsls	r4, r4, #12
    540a:	0b24      	lsrs	r4, r4, #12
    540c:	0d5b      	lsrs	r3, r3, #21
    540e:	e7e6      	b.n	53de <__aeabi_ui2d+0x26>
    5410:	2300      	movs	r3, #0
    5412:	2400      	movs	r4, #0
    5414:	2200      	movs	r2, #0
    5416:	e7e2      	b.n	53de <__aeabi_ui2d+0x26>
    5418:	0000041e 	.word	0x0000041e
    541c:	00000433 	.word	0x00000433
    5420:	00000413 	.word	0x00000413
    5424:	800fffff 	.word	0x800fffff

00005428 <__clzsi2>:
    5428:	211c      	movs	r1, #28
    542a:	2301      	movs	r3, #1
    542c:	041b      	lsls	r3, r3, #16
    542e:	4298      	cmp	r0, r3
    5430:	d301      	bcc.n	5436 <__clzsi2+0xe>
    5432:	0c00      	lsrs	r0, r0, #16
    5434:	3910      	subs	r1, #16
    5436:	0a1b      	lsrs	r3, r3, #8
    5438:	4298      	cmp	r0, r3
    543a:	d301      	bcc.n	5440 <__clzsi2+0x18>
    543c:	0a00      	lsrs	r0, r0, #8
    543e:	3908      	subs	r1, #8
    5440:	091b      	lsrs	r3, r3, #4
    5442:	4298      	cmp	r0, r3
    5444:	d301      	bcc.n	544a <__clzsi2+0x22>
    5446:	0900      	lsrs	r0, r0, #4
    5448:	3904      	subs	r1, #4
    544a:	a202      	add	r2, pc, #8	; (adr r2, 5454 <__clzsi2+0x2c>)
    544c:	5c10      	ldrb	r0, [r2, r0]
    544e:	1840      	adds	r0, r0, r1
    5450:	4770      	bx	lr
    5452:	46c0      	nop			; (mov r8, r8)
    5454:	02020304 	.word	0x02020304
    5458:	01010101 	.word	0x01010101
	...

00005464 <__libc_init_array>:
    5464:	b570      	push	{r4, r5, r6, lr}
    5466:	2600      	movs	r6, #0
    5468:	4d0c      	ldr	r5, [pc, #48]	; (549c <__libc_init_array+0x38>)
    546a:	4c0d      	ldr	r4, [pc, #52]	; (54a0 <__libc_init_array+0x3c>)
    546c:	1b64      	subs	r4, r4, r5
    546e:	10a4      	asrs	r4, r4, #2
    5470:	42a6      	cmp	r6, r4
    5472:	d109      	bne.n	5488 <__libc_init_array+0x24>
    5474:	2600      	movs	r6, #0
    5476:	f000 f95b 	bl	5730 <_init>
    547a:	4d0a      	ldr	r5, [pc, #40]	; (54a4 <__libc_init_array+0x40>)
    547c:	4c0a      	ldr	r4, [pc, #40]	; (54a8 <__libc_init_array+0x44>)
    547e:	1b64      	subs	r4, r4, r5
    5480:	10a4      	asrs	r4, r4, #2
    5482:	42a6      	cmp	r6, r4
    5484:	d105      	bne.n	5492 <__libc_init_array+0x2e>
    5486:	bd70      	pop	{r4, r5, r6, pc}
    5488:	00b3      	lsls	r3, r6, #2
    548a:	58eb      	ldr	r3, [r5, r3]
    548c:	4798      	blx	r3
    548e:	3601      	adds	r6, #1
    5490:	e7ee      	b.n	5470 <__libc_init_array+0xc>
    5492:	00b3      	lsls	r3, r6, #2
    5494:	58eb      	ldr	r3, [r5, r3]
    5496:	4798      	blx	r3
    5498:	3601      	adds	r6, #1
    549a:	e7f2      	b.n	5482 <__libc_init_array+0x1e>
    549c:	0000573c 	.word	0x0000573c
    54a0:	0000573c 	.word	0x0000573c
    54a4:	0000573c 	.word	0x0000573c
    54a8:	00005740 	.word	0x00005740

000054ac <memcpy>:
    54ac:	2300      	movs	r3, #0
    54ae:	b510      	push	{r4, lr}
    54b0:	429a      	cmp	r2, r3
    54b2:	d100      	bne.n	54b6 <memcpy+0xa>
    54b4:	bd10      	pop	{r4, pc}
    54b6:	5ccc      	ldrb	r4, [r1, r3]
    54b8:	54c4      	strb	r4, [r0, r3]
    54ba:	3301      	adds	r3, #1
    54bc:	e7f8      	b.n	54b0 <memcpy+0x4>

000054be <memset>:
    54be:	0003      	movs	r3, r0
    54c0:	1882      	adds	r2, r0, r2
    54c2:	4293      	cmp	r3, r2
    54c4:	d100      	bne.n	54c8 <memset+0xa>
    54c6:	4770      	bx	lr
    54c8:	7019      	strb	r1, [r3, #0]
    54ca:	3301      	adds	r3, #1
    54cc:	e7f9      	b.n	54c2 <memset+0x4>
    54ce:	0000      	movs	r0, r0
    54d0:	00000326 	.word	0x00000326
    54d4:	00000572 	.word	0x00000572
    54d8:	00000572 	.word	0x00000572
    54dc:	00000572 	.word	0x00000572
    54e0:	00000572 	.word	0x00000572
    54e4:	00000572 	.word	0x00000572
    54e8:	00000572 	.word	0x00000572
    54ec:	00000572 	.word	0x00000572
    54f0:	00000572 	.word	0x00000572
    54f4:	00000572 	.word	0x00000572
    54f8:	00000572 	.word	0x00000572
    54fc:	00000572 	.word	0x00000572
    5500:	00000572 	.word	0x00000572
    5504:	00000572 	.word	0x00000572
    5508:	00000572 	.word	0x00000572
    550c:	00000572 	.word	0x00000572
    5510:	0000030e 	.word	0x0000030e
    5514:	00000572 	.word	0x00000572
    5518:	00000572 	.word	0x00000572
    551c:	00000572 	.word	0x00000572
    5520:	00000572 	.word	0x00000572
    5524:	00000572 	.word	0x00000572
    5528:	00000572 	.word	0x00000572
    552c:	00000572 	.word	0x00000572
    5530:	00000572 	.word	0x00000572
    5534:	00000572 	.word	0x00000572
    5538:	00000572 	.word	0x00000572
    553c:	00000572 	.word	0x00000572
    5540:	00000572 	.word	0x00000572
    5544:	00000572 	.word	0x00000572
    5548:	00000572 	.word	0x00000572
    554c:	00000572 	.word	0x00000572
    5550:	0000031e 	.word	0x0000031e
    5554:	00000572 	.word	0x00000572
    5558:	00000572 	.word	0x00000572
    555c:	00000572 	.word	0x00000572
    5560:	00000572 	.word	0x00000572
    5564:	00000572 	.word	0x00000572
    5568:	00000572 	.word	0x00000572
    556c:	00000572 	.word	0x00000572
    5570:	00000572 	.word	0x00000572
    5574:	00000572 	.word	0x00000572
    5578:	00000572 	.word	0x00000572
    557c:	00000572 	.word	0x00000572
    5580:	00000572 	.word	0x00000572
    5584:	00000572 	.word	0x00000572
    5588:	00000572 	.word	0x00000572
    558c:	00000572 	.word	0x00000572
    5590:	00000316 	.word	0x00000316
    5594:	0000032e 	.word	0x0000032e
    5598:	000002f6 	.word	0x000002f6
    559c:	00000306 	.word	0x00000306
    55a0:	000002fe 	.word	0x000002fe
    55a4:	00000002 	.word	0x00000002
    55a8:	00000003 	.word	0x00000003
    55ac:	00000028 	.word	0x00000028
    55b0:	00000029 	.word	0x00000029
    55b4:	00000004 	.word	0x00000004
    55b8:	00000005 	.word	0x00000005
    55bc:	00000006 	.word	0x00000006
    55c0:	00000007 	.word	0x00000007
    55c4:	0000ffff 	.word	0x0000ffff
    55c8:	0000ffff 	.word	0x0000ffff
    55cc:	00000022 	.word	0x00000022
    55d0:	00000023 	.word	0x00000023
    55d4:	0000ffff 	.word	0x0000ffff
    55d8:	0000ffff 	.word	0x0000ffff
    55dc:	0000ffff 	.word	0x0000ffff
    55e0:	0000ffff 	.word	0x0000ffff
    55e4:	00000008 	.word	0x00000008
    55e8:	00000009 	.word	0x00000009
    55ec:	0000000a 	.word	0x0000000a
    55f0:	0000000b 	.word	0x0000000b
    55f4:	544e4f43 	.word	0x544e4f43
    55f8:	004c4f52 	.word	0x004c4f52
    55fc:	00494d48 	.word	0x00494d48
    5600:	494e4f4d 	.word	0x494e4f4d
    5604:	00524f54 	.word	0x00524f54
    5608:	534e4553 	.word	0x534e4553
    560c:	0000524f 	.word	0x0000524f
    5610:	454c4449 	.word	0x454c4449
    5614:	00000000 	.word	0x00000000
    5618:	000029b0 	.word	0x000029b0
    561c:	000029b0 	.word	0x000029b0
    5620:	000029b0 	.word	0x000029b0
    5624:	0000297c 	.word	0x0000297c
    5628:	000029f2 	.word	0x000029f2
    562c:	00002a0c 	.word	0x00002a0c
    5630:	000029b0 	.word	0x000029b0
    5634:	000029b0 	.word	0x000029b0
    5638:	0000297c 	.word	0x0000297c
    563c:	000029f2 	.word	0x000029f2
    5640:	51726d54 	.word	0x51726d54
    5644:	00000000 	.word	0x00000000
    5648:	20726d54 	.word	0x20726d54
    564c:	00637653 	.word	0x00637653
    5650:	42000800 	.word	0x42000800
    5654:	42000c00 	.word	0x42000c00
    5658:	42001000 	.word	0x42001000
    565c:	42001400 	.word	0x42001400
    5660:	42001800 	.word	0x42001800
    5664:	42001c00 	.word	0x42001c00
    5668:	0000323a 	.word	0x0000323a
    566c:	00003236 	.word	0x00003236
    5670:	00003236 	.word	0x00003236
    5674:	0000329c 	.word	0x0000329c
    5678:	0000329c 	.word	0x0000329c
    567c:	0000324e 	.word	0x0000324e
    5680:	00003240 	.word	0x00003240
    5684:	00003254 	.word	0x00003254
    5688:	0000328a 	.word	0x0000328a
    568c:	000033a4 	.word	0x000033a4
    5690:	00003384 	.word	0x00003384
    5694:	00003384 	.word	0x00003384
    5698:	00003410 	.word	0x00003410
    569c:	00003396 	.word	0x00003396
    56a0:	000033b2 	.word	0x000033b2
    56a4:	00003388 	.word	0x00003388
    56a8:	000033c0 	.word	0x000033c0
    56ac:	00003400 	.word	0x00003400
    56b0:	000043b4 	.word	0x000043b4
    56b4:	00004396 	.word	0x00004396
    56b8:	00004350 	.word	0x00004350
    56bc:	0000426e 	.word	0x0000426e
    56c0:	00004350 	.word	0x00004350
    56c4:	00004388 	.word	0x00004388
    56c8:	00004350 	.word	0x00004350
    56cc:	0000426e 	.word	0x0000426e
    56d0:	00004396 	.word	0x00004396
    56d4:	00004396 	.word	0x00004396
    56d8:	00004388 	.word	0x00004388
    56dc:	0000426e 	.word	0x0000426e
    56e0:	00004266 	.word	0x00004266
    56e4:	00004266 	.word	0x00004266
    56e8:	00004266 	.word	0x00004266
    56ec:	000045cc 	.word	0x000045cc
    56f0:	00004a14 	.word	0x00004a14
    56f4:	000048d4 	.word	0x000048d4
    56f8:	000048d4 	.word	0x000048d4
    56fc:	000048d0 	.word	0x000048d0
    5700:	000049ec 	.word	0x000049ec
    5704:	000049ec 	.word	0x000049ec
    5708:	000049de 	.word	0x000049de
    570c:	000048d0 	.word	0x000048d0
    5710:	000049ec 	.word	0x000049ec
    5714:	000049de 	.word	0x000049de
    5718:	000049ec 	.word	0x000049ec
    571c:	000048d0 	.word	0x000048d0
    5720:	000049f4 	.word	0x000049f4
    5724:	000049f4 	.word	0x000049f4
    5728:	000049f4 	.word	0x000049f4
    572c:	00004bf8 	.word	0x00004bf8

00005730 <_init>:
    5730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5736:	bc08      	pop	{r3}
    5738:	469e      	mov	lr, r3
    573a:	4770      	bx	lr

0000573c <__init_array_start>:
    573c:	000000dd 	.word	0x000000dd

00005740 <_fini>:
    5740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5746:	bc08      	pop	{r3}
    5748:	469e      	mov	lr, r3
    574a:	4770      	bx	lr

0000574c <__fini_array_start>:
    574c:	000000b5 	.word	0x000000b5
