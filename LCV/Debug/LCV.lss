
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013cfc  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013cfc  00013cfc  00023cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000238  20000000  00013d04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003e78  20000238  00013f3c  00030238  2**2
                  ALLOC
  4 .stack        00002000  200040b0  00017db4  00030238  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
  7 .debug_info   00094499  00000000  00000000  000302b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009c8c  00000000  00000000  000c4752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001d38  00000000  00000000  000ce3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000296af  00000000  00000000  000d0116  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002d843  00000000  00000000  000f97c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009c655  00000000  00000000  00127008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a4e1  00000000  00000000  001c365d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019f8  00000000  00000000  001cdb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006bb0  00000000  00000000  001cf538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 60 00 20 b9 f9 00 00 6f fd 00 00 69 fd 00 00     .`. ....o...i...
	...
      2c:	5d 72 00 00 00 00 00 00 00 00 00 00 91 73 00 00     ]r...........s..
      3c:	d9 73 00 00 b1 fa 00 00 b1 fa 00 00 51 d1 00 00     .s..........Q...
      4c:	b1 fa 00 00 25 2b 00 00 b1 fa 00 00 b1 fa 00 00     ....%+..........
      5c:	25 6e 00 00 b1 fa 00 00 69 e2 00 00 81 e2 00 00     %n......i.......
      6c:	99 e2 00 00 b1 e2 00 00 c9 e2 00 00 e1 e2 00 00     ................
      7c:	b1 fa 00 00 b1 fa 00 00 b1 fa 00 00 b1 fa 00 00     ................
      8c:	b1 fa 00 00 b1 fa 00 00 00 00 00 00 00 00 00 00     ................
      9c:	5d 24 00 00 b1 fa 00 00 45 2a 00 00 b1 fa 00 00     ]$......E*......
      ac:	b1 fa 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000238 	.word	0x20000238
      d4:	00000000 	.word	0x00000000
      d8:	00013d04 	.word	0x00013d04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000023c 	.word	0x2000023c
     108:	00013d04 	.word	0x00013d04
     10c:	00013d04 	.word	0x00013d04
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_save>:
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
	udi_cdc_rx_pos[port] += copy_nb;
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	f3ef 8310 	mrs	r3, PRIMASK
     11e:	607b      	str	r3, [r7, #4]
	ptr_buf += copy_nb;
     120:	687b      	ldr	r3, [r7, #4]
     122:	425a      	negs	r2, r3
     124:	4153      	adcs	r3, r2
     126:	b2db      	uxtb	r3, r3
	size -= copy_nb;
     128:	603b      	str	r3, [r7, #0]
     12a:	b672      	cpsid	i
     12c:	f3bf 8f5f 	dmb	sy
	udi_cdc_rx_start(port);
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <cpu_irq_save+0x2c>)
     132:	2200      	movs	r2, #0
     134:	701a      	strb	r2, [r3, #0]
     136:	683b      	ldr	r3, [r7, #0]
     138:	0018      	movs	r0, r3
     13a:	46bd      	mov	sp, r7

	if (size) {
     13c:	b002      	add	sp, #8
     13e:	bd80      	pop	{r7, pc}
     140:	200001d2 	.word	0x200001d2

00000144 <cpu_irq_is_enabled_flags>:
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
     144:	b580      	push	{r7, lr}
}
     146:	b082      	sub	sp, #8
     148:	af00      	add	r7, sp, #0
     14a:	6078      	str	r0, [r7, #4]
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	1e5a      	subs	r2, r3, #1
     150:	4193      	sbcs	r3, r2
     152:	b2db      	uxtb	r3, r3
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b002      	add	sp, #8
     15a:	bd80      	pop	{r7, pc}

0000015c <cpu_irq_restore>:
     15c:	b580      	push	{r7, lr}
     15e:	b082      	sub	sp, #8
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
     164:	687b      	ldr	r3, [r7, #4]
     166:	0018      	movs	r0, r3
     168:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_restore+0x28>)
     16a:	4798      	blx	r3
     16c:	1e03      	subs	r3, r0, #0
     16e:	d005      	beq.n	17c <cpu_irq_restore+0x20>
     170:	4b05      	ldr	r3, [pc, #20]	; (188 <cpu_irq_restore+0x2c>)
     172:	2201      	movs	r2, #1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
		cpu_irq_enable();
     174:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     176:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     17a:	b662      	cpsie	i
}
     17c:	46c0      	nop			; (mov r8, r8)
     17e:	46bd      	mov	sp, r7
     180:	b002      	add	sp, #8
     182:	bd80      	pop	{r7, pc}
     184:	00000145 	.word	0x00000145
     188:	200001d2 	.word	0x200001d2

0000018c <udi_cdc_comm_enable>:
{
     18c:	b590      	push	{r4, r7, lr}
     18e:	b083      	sub	sp, #12
     190:	af00      	add	r7, sp, #0
	port = 0;
     192:	1dbb      	adds	r3, r7, #6
     194:	2200      	movs	r2, #0
     196:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
     198:	4b56      	ldr	r3, [pc, #344]	; (2f4 <udi_cdc_comm_enable+0x168>)
     19a:	2200      	movs	r2, #0
     19c:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     19e:	1dbb      	adds	r3, r7, #6
     1a0:	781a      	ldrb	r2, [r3, #0]
     1a2:	4b55      	ldr	r3, [pc, #340]	; (2f8 <udi_cdc_comm_enable+0x16c>)
     1a4:	0052      	lsls	r2, r2, #1
     1a6:	2100      	movs	r1, #0
     1a8:	52d1      	strh	r1, [r2, r3]
	uid_cdc_state_msg[port].header.bmRequestType =
     1aa:	1dbb      	adds	r3, r7, #6
     1ac:	781a      	ldrb	r2, [r3, #0]
     1ae:	4953      	ldr	r1, [pc, #332]	; (2fc <udi_cdc_comm_enable+0x170>)
     1b0:	0013      	movs	r3, r2
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	189b      	adds	r3, r3, r2
     1b6:	005b      	lsls	r3, r3, #1
     1b8:	22a1      	movs	r2, #161	; 0xa1
     1ba:	545a      	strb	r2, [r3, r1]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     1bc:	1dbb      	adds	r3, r7, #6
     1be:	781a      	ldrb	r2, [r3, #0]
     1c0:	494e      	ldr	r1, [pc, #312]	; (2fc <udi_cdc_comm_enable+0x170>)
     1c2:	0013      	movs	r3, r2
     1c4:	009b      	lsls	r3, r3, #2
     1c6:	189b      	adds	r3, r3, r2
     1c8:	005b      	lsls	r3, r3, #1
     1ca:	18cb      	adds	r3, r1, r3
     1cc:	3301      	adds	r3, #1
     1ce:	2220      	movs	r2, #32
     1d0:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     1d2:	1dbb      	adds	r3, r7, #6
     1d4:	781a      	ldrb	r2, [r3, #0]
     1d6:	4949      	ldr	r1, [pc, #292]	; (2fc <udi_cdc_comm_enable+0x170>)
     1d8:	0013      	movs	r3, r2
     1da:	009b      	lsls	r3, r3, #2
     1dc:	189b      	adds	r3, r3, r2
     1de:	005b      	lsls	r3, r3, #1
     1e0:	18cb      	adds	r3, r1, r3
     1e2:	3302      	adds	r3, #2
     1e4:	2200      	movs	r2, #0
     1e6:	801a      	strh	r2, [r3, #0]
	switch (port) {
     1e8:	1dbb      	adds	r3, r7, #6
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d103      	bne.n	1f8 <udi_cdc_comm_enable+0x6c>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
     1f0:	1dfb      	adds	r3, r7, #7
     1f2:	2200      	movs	r2, #0
     1f4:	701a      	strb	r2, [r3, #0]
     1f6:	e003      	b.n	200 <udi_cdc_comm_enable+0x74>
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	2200      	movs	r2, #0
     1fc:	701a      	strb	r2, [r3, #0]
		break;
     1fe:	46c0      	nop			; (mov r8, r8)
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     200:	1dbb      	adds	r3, r7, #6
     202:	781a      	ldrb	r2, [r3, #0]
     204:	1dfb      	adds	r3, r7, #7
     206:	781b      	ldrb	r3, [r3, #0]
     208:	b298      	uxth	r0, r3
     20a:	493c      	ldr	r1, [pc, #240]	; (2fc <udi_cdc_comm_enable+0x170>)
     20c:	0013      	movs	r3, r2
     20e:	009b      	lsls	r3, r3, #2
     210:	189b      	adds	r3, r3, r2
     212:	005b      	lsls	r3, r3, #1
     214:	18cb      	adds	r3, r1, r3
     216:	3304      	adds	r3, #4
     218:	1c02      	adds	r2, r0, #0
     21a:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     21c:	1dbb      	adds	r3, r7, #6
     21e:	781a      	ldrb	r2, [r3, #0]
     220:	4936      	ldr	r1, [pc, #216]	; (2fc <udi_cdc_comm_enable+0x170>)
     222:	0013      	movs	r3, r2
     224:	009b      	lsls	r3, r3, #2
     226:	189b      	adds	r3, r3, r2
     228:	005b      	lsls	r3, r3, #1
     22a:	18cb      	adds	r3, r1, r3
     22c:	3306      	adds	r3, #6
     22e:	2202      	movs	r2, #2
     230:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     232:	1dbb      	adds	r3, r7, #6
     234:	781a      	ldrb	r2, [r3, #0]
     236:	4931      	ldr	r1, [pc, #196]	; (2fc <udi_cdc_comm_enable+0x170>)
     238:	0013      	movs	r3, r2
     23a:	009b      	lsls	r3, r3, #2
     23c:	189b      	adds	r3, r3, r2
     23e:	005b      	lsls	r3, r3, #1
     240:	18cb      	adds	r3, r1, r3
     242:	3308      	adds	r3, #8
     244:	2200      	movs	r2, #0
     246:	801a      	strh	r2, [r3, #0]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     248:	1dbb      	adds	r3, r7, #6
     24a:	7819      	ldrb	r1, [r3, #0]
     24c:	4a2c      	ldr	r2, [pc, #176]	; (300 <udi_cdc_comm_enable+0x174>)
     24e:	000b      	movs	r3, r1
     250:	00db      	lsls	r3, r3, #3
     252:	1a5b      	subs	r3, r3, r1
     254:	5c99      	ldrb	r1, [r3, r2]
     256:	2000      	movs	r0, #0
     258:	4001      	ands	r1, r0
     25a:	5499      	strb	r1, [r3, r2]
     25c:	18d1      	adds	r1, r2, r3
     25e:	7848      	ldrb	r0, [r1, #1]
     260:	2400      	movs	r4, #0
     262:	4020      	ands	r0, r4
     264:	1c04      	adds	r4, r0, #0
     266:	2030      	movs	r0, #48	; 0x30
     268:	4240      	negs	r0, r0
     26a:	4320      	orrs	r0, r4
     26c:	7048      	strb	r0, [r1, #1]
     26e:	18d1      	adds	r1, r2, r3
     270:	7888      	ldrb	r0, [r1, #2]
     272:	2400      	movs	r4, #0
     274:	4020      	ands	r0, r4
     276:	1c04      	adds	r4, r0, #0
     278:	2007      	movs	r0, #7
     27a:	4320      	orrs	r0, r4
     27c:	7088      	strb	r0, [r1, #2]
     27e:	18d3      	adds	r3, r2, r3
     280:	78da      	ldrb	r2, [r3, #3]
     282:	2100      	movs	r1, #0
     284:	400a      	ands	r2, r1
     286:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     288:	1dbb      	adds	r3, r7, #6
     28a:	781a      	ldrb	r2, [r3, #0]
     28c:	491c      	ldr	r1, [pc, #112]	; (300 <udi_cdc_comm_enable+0x174>)
     28e:	0013      	movs	r3, r2
     290:	00db      	lsls	r3, r3, #3
     292:	1a9b      	subs	r3, r3, r2
     294:	18cb      	adds	r3, r1, r3
     296:	3304      	adds	r3, #4
     298:	2200      	movs	r2, #0
     29a:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     29c:	1dbb      	adds	r3, r7, #6
     29e:	781a      	ldrb	r2, [r3, #0]
     2a0:	4917      	ldr	r1, [pc, #92]	; (300 <udi_cdc_comm_enable+0x174>)
     2a2:	0013      	movs	r3, r2
     2a4:	00db      	lsls	r3, r3, #3
     2a6:	1a9b      	subs	r3, r3, r2
     2a8:	18cb      	adds	r3, r1, r3
     2aa:	3305      	adds	r3, #5
     2ac:	2200      	movs	r2, #0
     2ae:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	781a      	ldrb	r2, [r3, #0]
     2b4:	4912      	ldr	r1, [pc, #72]	; (300 <udi_cdc_comm_enable+0x174>)
     2b6:	0013      	movs	r3, r2
     2b8:	00db      	lsls	r3, r3, #3
     2ba:	1a9b      	subs	r3, r3, r2
     2bc:	18cb      	adds	r3, r1, r3
     2be:	3306      	adds	r3, #6
     2c0:	2208      	movs	r2, #8
     2c2:	701a      	strb	r2, [r3, #0]
	if (!UDI_CDC_ENABLE_EXT(port)) {
     2c4:	4b0f      	ldr	r3, [pc, #60]	; (304 <udi_cdc_comm_enable+0x178>)
     2c6:	4798      	blx	r3
     2c8:	0003      	movs	r3, r0
     2ca:	001a      	movs	r2, r3
     2cc:	2301      	movs	r3, #1
     2ce:	4053      	eors	r3, r2
     2d0:	b2db      	uxtb	r3, r3
     2d2:	2b00      	cmp	r3, #0
     2d4:	d001      	beq.n	2da <udi_cdc_comm_enable+0x14e>
		return false;
     2d6:	2300      	movs	r3, #0
     2d8:	e007      	b.n	2ea <udi_cdc_comm_enable+0x15e>
	udi_cdc_nb_comm_enabled++;
     2da:	4b06      	ldr	r3, [pc, #24]	; (2f4 <udi_cdc_comm_enable+0x168>)
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	b2db      	uxtb	r3, r3
     2e0:	3301      	adds	r3, #1
     2e2:	b2da      	uxtb	r2, r3
     2e4:	4b03      	ldr	r3, [pc, #12]	; (2f4 <udi_cdc_comm_enable+0x168>)
     2e6:	701a      	strb	r2, [r3, #0]
	return true;
     2e8:	2301      	movs	r3, #1
}
     2ea:	0018      	movs	r0, r3
     2ec:	46bd      	mov	sp, r7
     2ee:	b003      	add	sp, #12
     2f0:	bd90      	pop	{r4, r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	2000026a 	.word	0x2000026a
     2f8:	2000025c 	.word	0x2000025c
     2fc:	20000260 	.word	0x20000260
     300:	20000254 	.word	0x20000254
     304:	000098dd 	.word	0x000098dd

00000308 <udi_cdc_data_enable>:
{
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
	port = 0;
     30e:	1dfb      	adds	r3, r7, #7
     310:	2200      	movs	r2, #0
     312:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
     314:	4b35      	ldr	r3, [pc, #212]	; (3ec <udi_cdc_data_enable+0xe4>)
     316:	2200      	movs	r2, #0
     318:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     31a:	1dfb      	adds	r3, r7, #7
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	4a34      	ldr	r2, [pc, #208]	; (3f0 <udi_cdc_data_enable+0xe8>)
     320:	2100      	movs	r1, #0
     322:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
     324:	1dfb      	adds	r3, r7, #7
     326:	781b      	ldrb	r3, [r3, #0]
     328:	4a32      	ldr	r2, [pc, #200]	; (3f4 <udi_cdc_data_enable+0xec>)
     32a:	2100      	movs	r1, #0
     32c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
     32e:	1dfb      	adds	r3, r7, #7
     330:	781b      	ldrb	r3, [r3, #0]
     332:	4a31      	ldr	r2, [pc, #196]	; (3f8 <udi_cdc_data_enable+0xf0>)
     334:	2100      	movs	r1, #0
     336:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
     338:	1dfb      	adds	r3, r7, #7
     33a:	781a      	ldrb	r2, [r3, #0]
     33c:	4b2f      	ldr	r3, [pc, #188]	; (3fc <udi_cdc_data_enable+0xf4>)
     33e:	0092      	lsls	r2, r2, #2
     340:	2100      	movs	r1, #0
     342:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
     344:	1dfb      	adds	r3, r7, #7
     346:	781b      	ldrb	r3, [r3, #0]
     348:	4a2c      	ldr	r2, [pc, #176]	; (3fc <udi_cdc_data_enable+0xf4>)
     34a:	009b      	lsls	r3, r3, #2
     34c:	18d3      	adds	r3, r2, r3
     34e:	3302      	adds	r3, #2
     350:	2200      	movs	r2, #0
     352:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
     354:	1dfb      	adds	r3, r7, #7
     356:	781a      	ldrb	r2, [r3, #0]
     358:	4b29      	ldr	r3, [pc, #164]	; (400 <udi_cdc_data_enable+0xf8>)
     35a:	0052      	lsls	r2, r2, #1
     35c:	2100      	movs	r1, #0
     35e:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
     360:	1dfb      	adds	r3, r7, #7
     362:	781b      	ldrb	r3, [r3, #0]
     364:	0018      	movs	r0, r3
     366:	4b27      	ldr	r3, [pc, #156]	; (404 <udi_cdc_data_enable+0xfc>)
     368:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     36a:	1dfb      	adds	r3, r7, #7
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	4a26      	ldr	r2, [pc, #152]	; (408 <udi_cdc_data_enable+0x100>)
     370:	2100      	movs	r1, #0
     372:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
     374:	1dfb      	adds	r3, r7, #7
     376:	781b      	ldrb	r3, [r3, #0]
     378:	4a24      	ldr	r2, [pc, #144]	; (40c <udi_cdc_data_enable+0x104>)
     37a:	2100      	movs	r1, #0
     37c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
     37e:	1dfb      	adds	r3, r7, #7
     380:	781a      	ldrb	r2, [r3, #0]
     382:	4b23      	ldr	r3, [pc, #140]	; (410 <udi_cdc_data_enable+0x108>)
     384:	0092      	lsls	r2, r2, #2
     386:	2100      	movs	r1, #0
     388:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][1] = 0;
     38a:	1dfb      	adds	r3, r7, #7
     38c:	781b      	ldrb	r3, [r3, #0]
     38e:	4a20      	ldr	r2, [pc, #128]	; (410 <udi_cdc_data_enable+0x108>)
     390:	009b      	lsls	r3, r3, #2
     392:	18d3      	adds	r3, r2, r3
     394:	3302      	adds	r3, #2
     396:	2200      	movs	r2, #0
     398:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
     39a:	1dfb      	adds	r3, r7, #7
     39c:	781a      	ldrb	r2, [r3, #0]
     39e:	4b1d      	ldr	r3, [pc, #116]	; (414 <udi_cdc_data_enable+0x10c>)
     3a0:	0052      	lsls	r2, r2, #1
     3a2:	2100      	movs	r1, #0
     3a4:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
     3a6:	1dfb      	adds	r3, r7, #7
     3a8:	781b      	ldrb	r3, [r3, #0]
     3aa:	0018      	movs	r0, r3
     3ac:	4b1a      	ldr	r3, [pc, #104]	; (418 <udi_cdc_data_enable+0x110>)
     3ae:	4798      	blx	r3
     3b0:	0003      	movs	r3, r0
     3b2:	001a      	movs	r2, r3
     3b4:	2301      	movs	r3, #1
     3b6:	4053      	eors	r3, r2
     3b8:	b2db      	uxtb	r3, r3
     3ba:	2b00      	cmp	r3, #0
     3bc:	d001      	beq.n	3c2 <udi_cdc_data_enable+0xba>
		return false;
     3be:	2300      	movs	r3, #0
     3c0:	e00f      	b.n	3e2 <udi_cdc_data_enable+0xda>
	udi_cdc_nb_data_enabled++;
     3c2:	4b0a      	ldr	r3, [pc, #40]	; (3ec <udi_cdc_data_enable+0xe4>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	b2db      	uxtb	r3, r3
     3c8:	3301      	adds	r3, #1
     3ca:	b2da      	uxtb	r2, r3
     3cc:	4b07      	ldr	r3, [pc, #28]	; (3ec <udi_cdc_data_enable+0xe4>)
     3ce:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <udi_cdc_data_enable+0xe4>)
     3d2:	781b      	ldrb	r3, [r3, #0]
     3d4:	b2db      	uxtb	r3, r3
     3d6:	2b01      	cmp	r3, #1
     3d8:	d102      	bne.n	3e0 <udi_cdc_data_enable+0xd8>
		udi_cdc_data_running = true;
     3da:	4b10      	ldr	r3, [pc, #64]	; (41c <udi_cdc_data_enable+0x114>)
     3dc:	2201      	movs	r2, #1
     3de:	701a      	strb	r2, [r3, #0]
	return true;
     3e0:	2301      	movs	r3, #1
}
     3e2:	0018      	movs	r0, r3
     3e4:	46bd      	mov	sp, r7
     3e6:	b002      	add	sp, #8
     3e8:	bd80      	pop	{r7, pc}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	2000026b 	.word	0x2000026b
     3f0:	2000078c 	.word	0x2000078c
     3f4:	20000790 	.word	0x20000790
     3f8:	20000784 	.word	0x20000784
     3fc:	20000780 	.word	0x20000780
     400:	20000788 	.word	0x20000788
     404:	00000885 	.word	0x00000885
     408:	200004fc 	.word	0x200004fc
     40c:	200004f4 	.word	0x200004f4
     410:	200004f0 	.word	0x200004f0
     414:	200004f8 	.word	0x200004f8
     418:	000005c9 	.word	0x000005c9
     41c:	2000026c 	.word	0x2000026c

00000420 <udi_cdc_comm_disable>:
{
     420:	b580      	push	{r7, lr}
     422:	af00      	add	r7, sp, #0
	udi_cdc_nb_comm_enabled--;
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <udi_cdc_comm_disable+0x18>)
     426:	781b      	ldrb	r3, [r3, #0]
     428:	b2db      	uxtb	r3, r3
     42a:	3b01      	subs	r3, #1
     42c:	b2da      	uxtb	r2, r3
     42e:	4b02      	ldr	r3, [pc, #8]	; (438 <udi_cdc_comm_disable+0x18>)
     430:	701a      	strb	r2, [r3, #0]
}
     432:	46c0      	nop			; (mov r8, r8)
     434:	46bd      	mov	sp, r7
     436:	bd80      	pop	{r7, pc}
     438:	2000026a 	.word	0x2000026a

0000043c <udi_cdc_data_disable>:
{
     43c:	b580      	push	{r7, lr}
     43e:	b082      	sub	sp, #8
     440:	af00      	add	r7, sp, #0
	udi_cdc_nb_data_enabled--;
     442:	4b0a      	ldr	r3, [pc, #40]	; (46c <udi_cdc_data_disable+0x30>)
     444:	781b      	ldrb	r3, [r3, #0]
     446:	b2db      	uxtb	r3, r3
     448:	3b01      	subs	r3, #1
     44a:	b2da      	uxtb	r2, r3
     44c:	4b07      	ldr	r3, [pc, #28]	; (46c <udi_cdc_data_disable+0x30>)
     44e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
     450:	1dfb      	adds	r3, r7, #7
     452:	4a06      	ldr	r2, [pc, #24]	; (46c <udi_cdc_data_disable+0x30>)
     454:	7812      	ldrb	r2, [r2, #0]
     456:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
     458:	4b05      	ldr	r3, [pc, #20]	; (470 <udi_cdc_data_disable+0x34>)
     45a:	4798      	blx	r3
	udi_cdc_data_running = false;
     45c:	4b05      	ldr	r3, [pc, #20]	; (474 <udi_cdc_data_disable+0x38>)
     45e:	2200      	movs	r2, #0
     460:	701a      	strb	r2, [r3, #0]
}
     462:	46c0      	nop			; (mov r8, r8)
     464:	46bd      	mov	sp, r7
     466:	b002      	add	sp, #8
     468:	bd80      	pop	{r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	2000026b 	.word	0x2000026b
     470:	000098f5 	.word	0x000098f5
     474:	2000026c 	.word	0x2000026c

00000478 <udi_cdc_comm_setup>:
{
     478:	b590      	push	{r4, r7, lr}
     47a:	b083      	sub	sp, #12
     47c:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
     47e:	1dfc      	adds	r4, r7, #7
     480:	4b2c      	ldr	r3, [pc, #176]	; (534 <udi_cdc_comm_setup+0xbc>)
     482:	4798      	blx	r3
     484:	0003      	movs	r3, r0
     486:	7023      	strb	r3, [r4, #0]
	if (Udd_setup_is_in()) {
     488:	4b2b      	ldr	r3, [pc, #172]	; (538 <udi_cdc_comm_setup+0xc0>)
     48a:	781b      	ldrb	r3, [r3, #0]
     48c:	b25b      	sxtb	r3, r3
     48e:	2b00      	cmp	r3, #0
     490:	da1e      	bge.n	4d0 <udi_cdc_comm_setup+0x58>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     492:	4b29      	ldr	r3, [pc, #164]	; (538 <udi_cdc_comm_setup+0xc0>)
     494:	781b      	ldrb	r3, [r3, #0]
     496:	001a      	movs	r2, r3
     498:	2360      	movs	r3, #96	; 0x60
     49a:	4013      	ands	r3, r2
     49c:	2b20      	cmp	r3, #32
     49e:	d117      	bne.n	4d0 <udi_cdc_comm_setup+0x58>
			switch (udd_g_ctrlreq.req.bRequest) {
     4a0:	4b25      	ldr	r3, [pc, #148]	; (538 <udi_cdc_comm_setup+0xc0>)
     4a2:	785b      	ldrb	r3, [r3, #1]
     4a4:	2b21      	cmp	r3, #33	; 0x21
     4a6:	d113      	bne.n	4d0 <udi_cdc_comm_setup+0x58>
						udd_g_ctrlreq.req.wLength)
     4a8:	4b23      	ldr	r3, [pc, #140]	; (538 <udi_cdc_comm_setup+0xc0>)
     4aa:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
     4ac:	2b07      	cmp	r3, #7
     4ae:	d001      	beq.n	4b4 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
     4b0:	2300      	movs	r3, #0
     4b2:	e03a      	b.n	52a <udi_cdc_comm_setup+0xb2>
						udi_cdc_line_coding[port];
     4b4:	1dfb      	adds	r3, r7, #7
     4b6:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
     4b8:	0013      	movs	r3, r2
     4ba:	00db      	lsls	r3, r3, #3
     4bc:	1a9b      	subs	r3, r3, r2
     4be:	4a1f      	ldr	r2, [pc, #124]	; (53c <udi_cdc_comm_setup+0xc4>)
     4c0:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
     4c2:	4b1d      	ldr	r3, [pc, #116]	; (538 <udi_cdc_comm_setup+0xc0>)
     4c4:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     4c6:	4b1c      	ldr	r3, [pc, #112]	; (538 <udi_cdc_comm_setup+0xc0>)
     4c8:	2207      	movs	r2, #7
     4ca:	819a      	strh	r2, [r3, #12]
				return true;
     4cc:	2301      	movs	r3, #1
     4ce:	e02c      	b.n	52a <udi_cdc_comm_setup+0xb2>
	if (Udd_setup_is_out()) {
     4d0:	4b19      	ldr	r3, [pc, #100]	; (538 <udi_cdc_comm_setup+0xc0>)
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	b25b      	sxtb	r3, r3
     4d6:	2b00      	cmp	r3, #0
     4d8:	db26      	blt.n	528 <udi_cdc_comm_setup+0xb0>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4da:	4b17      	ldr	r3, [pc, #92]	; (538 <udi_cdc_comm_setup+0xc0>)
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	001a      	movs	r2, r3
     4e0:	2360      	movs	r3, #96	; 0x60
     4e2:	4013      	ands	r3, r2
     4e4:	2b20      	cmp	r3, #32
     4e6:	d11f      	bne.n	528 <udi_cdc_comm_setup+0xb0>
			switch (udd_g_ctrlreq.req.bRequest) {
     4e8:	4b13      	ldr	r3, [pc, #76]	; (538 <udi_cdc_comm_setup+0xc0>)
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	2b20      	cmp	r3, #32
     4ee:	d002      	beq.n	4f6 <udi_cdc_comm_setup+0x7e>
     4f0:	2b22      	cmp	r3, #34	; 0x22
     4f2:	d017      	beq.n	524 <udi_cdc_comm_setup+0xac>
     4f4:	e018      	b.n	528 <udi_cdc_comm_setup+0xb0>
						udd_g_ctrlreq.req.wLength)
     4f6:	4b10      	ldr	r3, [pc, #64]	; (538 <udi_cdc_comm_setup+0xc0>)
     4f8:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
     4fa:	2b07      	cmp	r3, #7
     4fc:	d001      	beq.n	502 <udi_cdc_comm_setup+0x8a>
					return false; // Error for USB host
     4fe:	2300      	movs	r3, #0
     500:	e013      	b.n	52a <udi_cdc_comm_setup+0xb2>
				udd_g_ctrlreq.callback =
     502:	4b0d      	ldr	r3, [pc, #52]	; (538 <udi_cdc_comm_setup+0xc0>)
     504:	4a0e      	ldr	r2, [pc, #56]	; (540 <udi_cdc_comm_setup+0xc8>)
     506:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding[port];
     508:	1dfb      	adds	r3, r7, #7
     50a:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
     50c:	0013      	movs	r3, r2
     50e:	00db      	lsls	r3, r3, #3
     510:	1a9b      	subs	r3, r3, r2
     512:	4a0a      	ldr	r2, [pc, #40]	; (53c <udi_cdc_comm_setup+0xc4>)
     514:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
     516:	4b08      	ldr	r3, [pc, #32]	; (538 <udi_cdc_comm_setup+0xc0>)
     518:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     51a:	4b07      	ldr	r3, [pc, #28]	; (538 <udi_cdc_comm_setup+0xc0>)
     51c:	2207      	movs	r2, #7
     51e:	819a      	strh	r2, [r3, #12]
				return true;
     520:	2301      	movs	r3, #1
     522:	e002      	b.n	52a <udi_cdc_comm_setup+0xb2>
				return true;
     524:	2301      	movs	r3, #1
     526:	e000      	b.n	52a <udi_cdc_comm_setup+0xb2>
	return false;  // request Not supported
     528:	2300      	movs	r3, #0
}
     52a:	0018      	movs	r0, r3
     52c:	46bd      	mov	sp, r7
     52e:	b003      	add	sp, #12
     530:	bd90      	pop	{r4, r7, pc}
     532:	46c0      	nop			; (mov r8, r8)
     534:	00000579 	.word	0x00000579
     538:	20003ef4 	.word	0x20003ef4
     53c:	20000254 	.word	0x20000254
     540:	000005ad 	.word	0x000005ad

00000544 <udi_cdc_data_setup>:
{
     544:	b580      	push	{r7, lr}
     546:	af00      	add	r7, sp, #0
	return false;  // request Not supported
     548:	2300      	movs	r3, #0
}
     54a:	0018      	movs	r0, r3
     54c:	46bd      	mov	sp, r7
     54e:	bd80      	pop	{r7, pc}

00000550 <udi_cdc_getsetting>:
{
     550:	b580      	push	{r7, lr}
     552:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
     554:	2300      	movs	r3, #0
}
     556:	0018      	movs	r0, r3
     558:	46bd      	mov	sp, r7
     55a:	bd80      	pop	{r7, pc}

0000055c <udi_cdc_data_sof_notify>:
{
     55c:	b580      	push	{r7, lr}
     55e:	af00      	add	r7, sp, #0
	udi_cdc_tx_send(port_notify);
     560:	4b03      	ldr	r3, [pc, #12]	; (570 <udi_cdc_data_sof_notify+0x14>)
     562:	781b      	ldrb	r3, [r3, #0]
     564:	0018      	movs	r0, r3
     566:	4b03      	ldr	r3, [pc, #12]	; (574 <udi_cdc_data_sof_notify+0x18>)
     568:	4798      	blx	r3
}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	46bd      	mov	sp, r7
     56e:	bd80      	pop	{r7, pc}
     570:	20000791 	.word	0x20000791
     574:	00000885 	.word	0x00000885

00000578 <udi_cdc_setup_to_port>:
{
     578:	b580      	push	{r7, lr}
     57a:	b082      	sub	sp, #8
     57c:	af00      	add	r7, sp, #0
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
     57e:	4b0a      	ldr	r3, [pc, #40]	; (5a8 <udi_cdc_setup_to_port+0x30>)
     580:	889b      	ldrh	r3, [r3, #4]
     582:	001a      	movs	r2, r3
     584:	23ff      	movs	r3, #255	; 0xff
     586:	4013      	ands	r3, r2
     588:	d103      	bne.n	592 <udi_cdc_setup_to_port+0x1a>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
     58a:	1dfb      	adds	r3, r7, #7
     58c:	2200      	movs	r2, #0
     58e:	701a      	strb	r2, [r3, #0]
     590:	e003      	b.n	59a <udi_cdc_setup_to_port+0x22>
		port = 0;
     592:	1dfb      	adds	r3, r7, #7
     594:	2200      	movs	r2, #0
     596:	701a      	strb	r2, [r3, #0]
		break;
     598:	46c0      	nop			; (mov r8, r8)
	return port;
     59a:	1dfb      	adds	r3, r7, #7
     59c:	781b      	ldrb	r3, [r3, #0]
}
     59e:	0018      	movs	r0, r3
     5a0:	46bd      	mov	sp, r7
     5a2:	b002      	add	sp, #8
     5a4:	bd80      	pop	{r7, pc}
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	20003ef4 	.word	0x20003ef4

000005ac <udi_cdc_line_coding_received>:
{
     5ac:	b590      	push	{r4, r7, lr}
     5ae:	b083      	sub	sp, #12
     5b0:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
     5b2:	1dfc      	adds	r4, r7, #7
     5b4:	4b03      	ldr	r3, [pc, #12]	; (5c4 <udi_cdc_line_coding_received+0x18>)
     5b6:	4798      	blx	r3
     5b8:	0003      	movs	r3, r0
     5ba:	7023      	strb	r3, [r4, #0]
}
     5bc:	46c0      	nop			; (mov r8, r8)
     5be:	46bd      	mov	sp, r7
     5c0:	b003      	add	sp, #12
     5c2:	bd90      	pop	{r4, r7, pc}
     5c4:	00000579 	.word	0x00000579

000005c8 <udi_cdc_rx_start>:
{
     5c8:	b590      	push	{r4, r7, lr}
     5ca:	b089      	sub	sp, #36	; 0x24
     5cc:	af02      	add	r7, sp, #8
     5ce:	0002      	movs	r2, r0
     5d0:	1dfb      	adds	r3, r7, #7
     5d2:	701a      	strb	r2, [r3, #0]
	port = 0;
     5d4:	1dfb      	adds	r3, r7, #7
     5d6:	2200      	movs	r2, #0
     5d8:	701a      	strb	r2, [r3, #0]
	flags = cpu_irq_save();
     5da:	4b3c      	ldr	r3, [pc, #240]	; (6cc <udi_cdc_rx_start+0x104>)
     5dc:	4798      	blx	r3
     5de:	0003      	movs	r3, r0
     5e0:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     5e2:	1dfb      	adds	r3, r7, #7
     5e4:	781a      	ldrb	r2, [r3, #0]
     5e6:	230f      	movs	r3, #15
     5e8:	18fb      	adds	r3, r7, r3
     5ea:	4939      	ldr	r1, [pc, #228]	; (6d0 <udi_cdc_rx_start+0x108>)
     5ec:	5c8a      	ldrb	r2, [r1, r2]
     5ee:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	4a37      	ldr	r2, [pc, #220]	; (6d4 <udi_cdc_rx_start+0x10c>)
     5f6:	5cd3      	ldrb	r3, [r2, r3]
     5f8:	b2db      	uxtb	r3, r3
     5fa:	2b00      	cmp	r3, #0
     5fc:	d112      	bne.n	624 <udi_cdc_rx_start+0x5c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     5fe:	1dfb      	adds	r3, r7, #7
     600:	781a      	ldrb	r2, [r3, #0]
     602:	4b35      	ldr	r3, [pc, #212]	; (6d8 <udi_cdc_rx_start+0x110>)
     604:	0052      	lsls	r2, r2, #1
     606:	5ad3      	ldrh	r3, [r2, r3]
     608:	b29a      	uxth	r2, r3
     60a:	1dfb      	adds	r3, r7, #7
     60c:	7818      	ldrb	r0, [r3, #0]
     60e:	230f      	movs	r3, #15
     610:	18fb      	adds	r3, r7, r3
     612:	7819      	ldrb	r1, [r3, #0]
     614:	4b31      	ldr	r3, [pc, #196]	; (6dc <udi_cdc_rx_start+0x114>)
     616:	0040      	lsls	r0, r0, #1
     618:	1841      	adds	r1, r0, r1
     61a:	0049      	lsls	r1, r1, #1
     61c:	5acb      	ldrh	r3, [r1, r3]
     61e:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
     620:	429a      	cmp	r2, r3
     622:	d205      	bcs.n	630 <udi_cdc_rx_start+0x68>
		cpu_irq_restore(flags);
     624:	693b      	ldr	r3, [r7, #16]
     626:	0018      	movs	r0, r3
     628:	4b2d      	ldr	r3, [pc, #180]	; (6e0 <udi_cdc_rx_start+0x118>)
     62a:	4798      	blx	r3
		return false;
     62c:	2300      	movs	r3, #0
     62e:	e049      	b.n	6c4 <udi_cdc_rx_start+0xfc>
	udi_cdc_rx_pos[port] = 0;
     630:	1dfb      	adds	r3, r7, #7
     632:	781a      	ldrb	r2, [r3, #0]
     634:	4b28      	ldr	r3, [pc, #160]	; (6d8 <udi_cdc_rx_start+0x110>)
     636:	0052      	lsls	r2, r2, #1
     638:	2100      	movs	r1, #0
     63a:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     63c:	1dfb      	adds	r3, r7, #7
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	220f      	movs	r2, #15
     642:	18ba      	adds	r2, r7, r2
     644:	7812      	ldrb	r2, [r2, #0]
     646:	4251      	negs	r1, r2
     648:	414a      	adcs	r2, r1
     64a:	b2d2      	uxtb	r2, r2
     64c:	0011      	movs	r1, r2
     64e:	4a20      	ldr	r2, [pc, #128]	; (6d0 <udi_cdc_rx_start+0x108>)
     650:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = true;
     652:	1dfb      	adds	r3, r7, #7
     654:	781b      	ldrb	r3, [r3, #0]
     656:	4a1f      	ldr	r2, [pc, #124]	; (6d4 <udi_cdc_rx_start+0x10c>)
     658:	2101      	movs	r1, #1
     65a:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
     65c:	693b      	ldr	r3, [r7, #16]
     65e:	0018      	movs	r0, r3
     660:	4b1f      	ldr	r3, [pc, #124]	; (6e0 <udi_cdc_rx_start+0x118>)
     662:	4798      	blx	r3
	if (udi_cdc_multi_is_rx_ready(port)) {
     664:	1dfb      	adds	r3, r7, #7
     666:	781b      	ldrb	r3, [r3, #0]
     668:	0018      	movs	r0, r3
     66a:	4b1e      	ldr	r3, [pc, #120]	; (6e4 <udi_cdc_rx_start+0x11c>)
     66c:	4798      	blx	r3
	switch (port) {
     66e:	1dfb      	adds	r3, r7, #7
     670:	781b      	ldrb	r3, [r3, #0]
     672:	2b00      	cmp	r3, #0
     674:	d104      	bne.n	680 <udi_cdc_rx_start+0xb8>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
     676:	2317      	movs	r3, #23
     678:	18fb      	adds	r3, r7, r3
     67a:	2202      	movs	r2, #2
     67c:	701a      	strb	r2, [r3, #0]
     67e:	e004      	b.n	68a <udi_cdc_rx_start+0xc2>
		ep = UDI_CDC_DATA_EP_OUT_0;
     680:	2317      	movs	r3, #23
     682:	18fb      	adds	r3, r7, r3
     684:	2202      	movs	r2, #2
     686:	701a      	strb	r2, [r3, #0]
		break;
     688:	46c0      	nop			; (mov r8, r8)
			udi_cdc_rx_buf[port][buf_sel_trans],
     68a:	1dfb      	adds	r3, r7, #7
     68c:	7819      	ldrb	r1, [r3, #0]
     68e:	230f      	movs	r3, #15
     690:	18fb      	adds	r3, r7, r3
     692:	781b      	ldrb	r3, [r3, #0]
     694:	001a      	movs	r2, r3
     696:	0092      	lsls	r2, r2, #2
     698:	18d2      	adds	r2, r2, r3
     69a:	0193      	lsls	r3, r2, #6
     69c:	001a      	movs	r2, r3
     69e:	000b      	movs	r3, r1
     6a0:	009b      	lsls	r3, r3, #2
     6a2:	185b      	adds	r3, r3, r1
     6a4:	01db      	lsls	r3, r3, #7
     6a6:	18d2      	adds	r2, r2, r3
     6a8:	4b0f      	ldr	r3, [pc, #60]	; (6e8 <udi_cdc_rx_start+0x120>)
     6aa:	18d2      	adds	r2, r2, r3
	return udd_ep_run(ep,
     6ac:	23a0      	movs	r3, #160	; 0xa0
     6ae:	0059      	lsls	r1, r3, #1
     6b0:	2317      	movs	r3, #23
     6b2:	18fb      	adds	r3, r7, r3
     6b4:	7818      	ldrb	r0, [r3, #0]
     6b6:	4b0d      	ldr	r3, [pc, #52]	; (6ec <udi_cdc_rx_start+0x124>)
     6b8:	9300      	str	r3, [sp, #0]
     6ba:	000b      	movs	r3, r1
     6bc:	2101      	movs	r1, #1
     6be:	4c0c      	ldr	r4, [pc, #48]	; (6f0 <udi_cdc_rx_start+0x128>)
     6c0:	47a0      	blx	r4
     6c2:	0003      	movs	r3, r0
}
     6c4:	0018      	movs	r0, r3
     6c6:	46bd      	mov	sp, r7
     6c8:	b007      	add	sp, #28
     6ca:	bd90      	pop	{r4, r7, pc}
     6cc:	00000115 	.word	0x00000115
     6d0:	200004f4 	.word	0x200004f4
     6d4:	200004fc 	.word	0x200004fc
     6d8:	200004f8 	.word	0x200004f8
     6dc:	200004f0 	.word	0x200004f0
     6e0:	0000015d 	.word	0x0000015d
     6e4:	00000b39 	.word	0x00000b39
     6e8:	20000270 	.word	0x20000270
     6ec:	000006f5 	.word	0x000006f5
     6f0:	00004731 	.word	0x00004731

000006f4 <udi_cdc_data_received>:
{
     6f4:	b590      	push	{r4, r7, lr}
     6f6:	b087      	sub	sp, #28
     6f8:	af02      	add	r7, sp, #8
     6fa:	6039      	str	r1, [r7, #0]
     6fc:	0011      	movs	r1, r2
     6fe:	1dfb      	adds	r3, r7, #7
     700:	1c02      	adds	r2, r0, #0
     702:	701a      	strb	r2, [r3, #0]
     704:	1dbb      	adds	r3, r7, #6
     706:	1c0a      	adds	r2, r1, #0
     708:	701a      	strb	r2, [r3, #0]
	switch (ep) {
     70a:	1dbb      	adds	r3, r7, #6
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	2b02      	cmp	r3, #2
     710:	d104      	bne.n	71c <udi_cdc_data_received+0x28>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
     712:	230f      	movs	r3, #15
     714:	18fb      	adds	r3, r7, r3
     716:	2200      	movs	r2, #0
     718:	701a      	strb	r2, [r3, #0]
     71a:	e004      	b.n	726 <udi_cdc_data_received+0x32>
		port = 0;
     71c:	230f      	movs	r3, #15
     71e:	18fb      	adds	r3, r7, r3
     720:	2200      	movs	r2, #0
     722:	701a      	strb	r2, [r3, #0]
		break;
     724:	46c0      	nop			; (mov r8, r8)
	if (UDD_EP_TRANSFER_OK != status) {
     726:	1dfb      	adds	r3, r7, #7
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	2b00      	cmp	r3, #0
     72c:	d146      	bne.n	7bc <udi_cdc_data_received+0xc8>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     72e:	230f      	movs	r3, #15
     730:	18fb      	adds	r3, r7, r3
     732:	781b      	ldrb	r3, [r3, #0]
     734:	4a23      	ldr	r2, [pc, #140]	; (7c4 <udi_cdc_data_received+0xd0>)
     736:	5cd3      	ldrb	r3, [r2, r3]
     738:	b2db      	uxtb	r3, r3
     73a:	425a      	negs	r2, r3
     73c:	4153      	adcs	r3, r2
     73e:	b2da      	uxtb	r2, r3
     740:	230e      	movs	r3, #14
     742:	18fb      	adds	r3, r7, r3
     744:	701a      	strb	r2, [r3, #0]
	if (!n) {
     746:	683b      	ldr	r3, [r7, #0]
     748:	2b00      	cmp	r3, #0
     74a:	d11c      	bne.n	786 <udi_cdc_data_received+0x92>
				udi_cdc_rx_buf[port][buf_sel_trans],
     74c:	230f      	movs	r3, #15
     74e:	18fb      	adds	r3, r7, r3
     750:	7819      	ldrb	r1, [r3, #0]
     752:	230e      	movs	r3, #14
     754:	18fb      	adds	r3, r7, r3
     756:	781b      	ldrb	r3, [r3, #0]
     758:	001a      	movs	r2, r3
     75a:	0092      	lsls	r2, r2, #2
     75c:	18d2      	adds	r2, r2, r3
     75e:	0193      	lsls	r3, r2, #6
     760:	001a      	movs	r2, r3
     762:	000b      	movs	r3, r1
     764:	009b      	lsls	r3, r3, #2
     766:	185b      	adds	r3, r3, r1
     768:	01db      	lsls	r3, r3, #7
     76a:	18d2      	adds	r2, r2, r3
     76c:	4b16      	ldr	r3, [pc, #88]	; (7c8 <udi_cdc_data_received+0xd4>)
     76e:	18d2      	adds	r2, r2, r3
		udd_ep_run( ep,
     770:	23a0      	movs	r3, #160	; 0xa0
     772:	0059      	lsls	r1, r3, #1
     774:	1dbb      	adds	r3, r7, #6
     776:	7818      	ldrb	r0, [r3, #0]
     778:	4b14      	ldr	r3, [pc, #80]	; (7cc <udi_cdc_data_received+0xd8>)
     77a:	9300      	str	r3, [sp, #0]
     77c:	000b      	movs	r3, r1
     77e:	2101      	movs	r1, #1
     780:	4c13      	ldr	r4, [pc, #76]	; (7d0 <udi_cdc_data_received+0xdc>)
     782:	47a0      	blx	r4
		return;
     784:	e01b      	b.n	7be <udi_cdc_data_received+0xca>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     786:	230f      	movs	r3, #15
     788:	18fb      	adds	r3, r7, r3
     78a:	7819      	ldrb	r1, [r3, #0]
     78c:	230e      	movs	r3, #14
     78e:	18fb      	adds	r3, r7, r3
     790:	781a      	ldrb	r2, [r3, #0]
     792:	683b      	ldr	r3, [r7, #0]
     794:	b298      	uxth	r0, r3
     796:	4b0f      	ldr	r3, [pc, #60]	; (7d4 <udi_cdc_data_received+0xe0>)
     798:	0049      	lsls	r1, r1, #1
     79a:	188a      	adds	r2, r1, r2
     79c:	0052      	lsls	r2, r2, #1
     79e:	1c01      	adds	r1, r0, #0
     7a0:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     7a2:	230f      	movs	r3, #15
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	781b      	ldrb	r3, [r3, #0]
     7a8:	4a0b      	ldr	r2, [pc, #44]	; (7d8 <udi_cdc_data_received+0xe4>)
     7aa:	2100      	movs	r1, #0
     7ac:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
     7ae:	230f      	movs	r3, #15
     7b0:	18fb      	adds	r3, r7, r3
     7b2:	781b      	ldrb	r3, [r3, #0]
     7b4:	0018      	movs	r0, r3
     7b6:	4b09      	ldr	r3, [pc, #36]	; (7dc <udi_cdc_data_received+0xe8>)
     7b8:	4798      	blx	r3
     7ba:	e000      	b.n	7be <udi_cdc_data_received+0xca>
		return;
     7bc:	46c0      	nop			; (mov r8, r8)
}
     7be:	46bd      	mov	sp, r7
     7c0:	b005      	add	sp, #20
     7c2:	bd90      	pop	{r4, r7, pc}
     7c4:	200004f4 	.word	0x200004f4
     7c8:	20000270 	.word	0x20000270
     7cc:	000006f5 	.word	0x000006f5
     7d0:	00004731 	.word	0x00004731
     7d4:	200004f0 	.word	0x200004f0
     7d8:	200004fc 	.word	0x200004fc
     7dc:	000005c9 	.word	0x000005c9

000007e0 <udi_cdc_data_sent>:
{
     7e0:	b580      	push	{r7, lr}
     7e2:	b084      	sub	sp, #16
     7e4:	af00      	add	r7, sp, #0
     7e6:	6039      	str	r1, [r7, #0]
     7e8:	0011      	movs	r1, r2
     7ea:	1dfb      	adds	r3, r7, #7
     7ec:	1c02      	adds	r2, r0, #0
     7ee:	701a      	strb	r2, [r3, #0]
     7f0:	1dbb      	adds	r3, r7, #6
     7f2:	1c0a      	adds	r2, r1, #0
     7f4:	701a      	strb	r2, [r3, #0]
	switch (ep) {
     7f6:	1dbb      	adds	r3, r7, #6
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	2b81      	cmp	r3, #129	; 0x81
     7fc:	d104      	bne.n	808 <udi_cdc_data_sent+0x28>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
     7fe:	230f      	movs	r3, #15
     800:	18fb      	adds	r3, r7, r3
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
     806:	e004      	b.n	812 <udi_cdc_data_sent+0x32>
		port = 0;
     808:	230f      	movs	r3, #15
     80a:	18fb      	adds	r3, r7, r3
     80c:	2200      	movs	r2, #0
     80e:	701a      	strb	r2, [r3, #0]
		break;
     810:	46c0      	nop			; (mov r8, r8)
	if (UDD_EP_TRANSFER_OK != status) {
     812:	1dfb      	adds	r3, r7, #7
     814:	781b      	ldrb	r3, [r3, #0]
     816:	2b00      	cmp	r3, #0
     818:	d125      	bne.n	866 <udi_cdc_data_sent+0x86>
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     81a:	230f      	movs	r3, #15
     81c:	18fb      	adds	r3, r7, r3
     81e:	781a      	ldrb	r2, [r3, #0]
     820:	230f      	movs	r3, #15
     822:	18fb      	adds	r3, r7, r3
     824:	781b      	ldrb	r3, [r3, #0]
     826:	4912      	ldr	r1, [pc, #72]	; (870 <udi_cdc_data_sent+0x90>)
     828:	5ccb      	ldrb	r3, [r1, r3]
     82a:	b2db      	uxtb	r3, r3
     82c:	4259      	negs	r1, r3
     82e:	414b      	adcs	r3, r1
     830:	b2db      	uxtb	r3, r3
     832:	0019      	movs	r1, r3
     834:	4b0f      	ldr	r3, [pc, #60]	; (874 <udi_cdc_data_sent+0x94>)
     836:	0052      	lsls	r2, r2, #1
     838:	1852      	adds	r2, r2, r1
     83a:	0052      	lsls	r2, r2, #1
     83c:	2100      	movs	r1, #0
     83e:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
     840:	230f      	movs	r3, #15
     842:	18fb      	adds	r3, r7, r3
     844:	781b      	ldrb	r3, [r3, #0]
     846:	4a0c      	ldr	r2, [pc, #48]	; (878 <udi_cdc_data_sent+0x98>)
     848:	2100      	movs	r1, #0
     84a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
     84c:	230f      	movs	r3, #15
     84e:	18fb      	adds	r3, r7, r3
     850:	781b      	ldrb	r3, [r3, #0]
     852:	4a0a      	ldr	r2, [pc, #40]	; (87c <udi_cdc_data_sent+0x9c>)
     854:	2100      	movs	r1, #0
     856:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_send(port);
     858:	230f      	movs	r3, #15
     85a:	18fb      	adds	r3, r7, r3
     85c:	781b      	ldrb	r3, [r3, #0]
     85e:	0018      	movs	r0, r3
     860:	4b07      	ldr	r3, [pc, #28]	; (880 <udi_cdc_data_sent+0xa0>)
     862:	4798      	blx	r3
     864:	e000      	b.n	868 <udi_cdc_data_sent+0x88>
		return;
     866:	46c0      	nop			; (mov r8, r8)
}
     868:	46bd      	mov	sp, r7
     86a:	b004      	add	sp, #16
     86c:	bd80      	pop	{r7, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	20000784 	.word	0x20000784
     874:	20000780 	.word	0x20000780
     878:	20000790 	.word	0x20000790
     87c:	2000078c 	.word	0x2000078c
     880:	00000885 	.word	0x00000885

00000884 <udi_cdc_tx_send>:
{
     884:	b590      	push	{r4, r7, lr}
     886:	b089      	sub	sp, #36	; 0x24
     888:	af02      	add	r7, sp, #8
     88a:	0002      	movs	r2, r0
     88c:	1dfb      	adds	r3, r7, #7
     88e:	701a      	strb	r2, [r3, #0]
	port = 0;
     890:	1dfb      	adds	r3, r7, #7
     892:	2200      	movs	r2, #0
     894:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_trans_ongoing[port]) {
     896:	1dfb      	adds	r3, r7, #7
     898:	781b      	ldrb	r3, [r3, #0]
     89a:	4a7a      	ldr	r2, [pc, #488]	; (a84 <udi_cdc_tx_send+0x200>)
     89c:	5cd3      	ldrb	r3, [r2, r3]
     89e:	b2db      	uxtb	r3, r3
     8a0:	2b00      	cmp	r3, #0
     8a2:	d000      	beq.n	8a6 <udi_cdc_tx_send+0x22>
     8a4:	e0e7      	b.n	a76 <udi_cdc_tx_send+0x1f2>
	if (udd_is_high_speed()) {
     8a6:	4b78      	ldr	r3, [pc, #480]	; (a88 <udi_cdc_tx_send+0x204>)
     8a8:	4798      	blx	r3
     8aa:	1e03      	subs	r3, r0, #0
     8ac:	d00a      	beq.n	8c4 <udi_cdc_tx_send+0x40>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     8ae:	1dfb      	adds	r3, r7, #7
     8b0:	781a      	ldrb	r2, [r3, #0]
     8b2:	4b76      	ldr	r3, [pc, #472]	; (a8c <udi_cdc_tx_send+0x208>)
     8b4:	0052      	lsls	r2, r2, #1
     8b6:	5ad4      	ldrh	r4, [r2, r3]
     8b8:	4b75      	ldr	r3, [pc, #468]	; (a90 <udi_cdc_tx_send+0x20c>)
     8ba:	4798      	blx	r3
     8bc:	0003      	movs	r3, r0
     8be:	429c      	cmp	r4, r3
     8c0:	d10b      	bne.n	8da <udi_cdc_tx_send+0x56>
			return; // Wait next SOF to send next data
     8c2:	e0db      	b.n	a7c <udi_cdc_tx_send+0x1f8>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     8c4:	1dfb      	adds	r3, r7, #7
     8c6:	781a      	ldrb	r2, [r3, #0]
     8c8:	4b70      	ldr	r3, [pc, #448]	; (a8c <udi_cdc_tx_send+0x208>)
     8ca:	0052      	lsls	r2, r2, #1
     8cc:	5ad4      	ldrh	r4, [r2, r3]
     8ce:	4b71      	ldr	r3, [pc, #452]	; (a94 <udi_cdc_tx_send+0x210>)
     8d0:	4798      	blx	r3
     8d2:	0003      	movs	r3, r0
     8d4:	429c      	cmp	r4, r3
     8d6:	d100      	bne.n	8da <udi_cdc_tx_send+0x56>
     8d8:	e0cf      	b.n	a7a <udi_cdc_tx_send+0x1f6>
	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
     8da:	4b6f      	ldr	r3, [pc, #444]	; (a98 <udi_cdc_tx_send+0x214>)
     8dc:	4798      	blx	r3
     8de:	0003      	movs	r3, r0
     8e0:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     8e2:	1dfb      	adds	r3, r7, #7
     8e4:	781a      	ldrb	r2, [r3, #0]
     8e6:	2317      	movs	r3, #23
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	496c      	ldr	r1, [pc, #432]	; (a9c <udi_cdc_tx_send+0x218>)
     8ec:	5c8a      	ldrb	r2, [r1, r2]
     8ee:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     8f0:	1dfb      	adds	r3, r7, #7
     8f2:	7819      	ldrb	r1, [r3, #0]
     8f4:	2317      	movs	r3, #23
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	781a      	ldrb	r2, [r3, #0]
     8fa:	4b69      	ldr	r3, [pc, #420]	; (aa0 <udi_cdc_tx_send+0x21c>)
     8fc:	0049      	lsls	r1, r1, #1
     8fe:	188a      	adds	r2, r1, r2
     900:	0052      	lsls	r2, r2, #1
     902:	5ad3      	ldrh	r3, [r2, r3]
     904:	2b00      	cmp	r3, #0
     906:	d120      	bne.n	94a <udi_cdc_tx_send+0xc6>
		sof_zlp_counter++;
     908:	4b66      	ldr	r3, [pc, #408]	; (aa4 <udi_cdc_tx_send+0x220>)
     90a:	881b      	ldrh	r3, [r3, #0]
     90c:	3301      	adds	r3, #1
     90e:	b29a      	uxth	r2, r3
     910:	4b64      	ldr	r3, [pc, #400]	; (aa4 <udi_cdc_tx_send+0x220>)
     912:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     914:	4b5c      	ldr	r3, [pc, #368]	; (a88 <udi_cdc_tx_send+0x204>)
     916:	4798      	blx	r3
     918:	0003      	movs	r3, r0
     91a:	001a      	movs	r2, r3
     91c:	2301      	movs	r3, #1
     91e:	4053      	eors	r3, r2
     920:	b2db      	uxtb	r3, r3
     922:	2b00      	cmp	r3, #0
     924:	d003      	beq.n	92e <udi_cdc_tx_send+0xaa>
     926:	4b5f      	ldr	r3, [pc, #380]	; (aa4 <udi_cdc_tx_send+0x220>)
     928:	881b      	ldrh	r3, [r3, #0]
     92a:	2b63      	cmp	r3, #99	; 0x63
     92c:	d908      	bls.n	940 <udi_cdc_tx_send+0xbc>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     92e:	4b56      	ldr	r3, [pc, #344]	; (a88 <udi_cdc_tx_send+0x204>)
     930:	4798      	blx	r3
     932:	1e03      	subs	r3, r0, #0
     934:	d009      	beq.n	94a <udi_cdc_tx_send+0xc6>
     936:	4b5b      	ldr	r3, [pc, #364]	; (aa4 <udi_cdc_tx_send+0x220>)
     938:	881b      	ldrh	r3, [r3, #0]
     93a:	4a5b      	ldr	r2, [pc, #364]	; (aa8 <udi_cdc_tx_send+0x224>)
     93c:	4293      	cmp	r3, r2
     93e:	d804      	bhi.n	94a <udi_cdc_tx_send+0xc6>
			cpu_irq_restore(flags);
     940:	693b      	ldr	r3, [r7, #16]
     942:	0018      	movs	r0, r3
     944:	4b59      	ldr	r3, [pc, #356]	; (aac <udi_cdc_tx_send+0x228>)
     946:	4798      	blx	r3
			return;
     948:	e098      	b.n	a7c <udi_cdc_tx_send+0x1f8>
	sof_zlp_counter = 0;
     94a:	4b56      	ldr	r3, [pc, #344]	; (aa4 <udi_cdc_tx_send+0x220>)
     94c:	2200      	movs	r2, #0
     94e:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     950:	1dfb      	adds	r3, r7, #7
     952:	781b      	ldrb	r3, [r3, #0]
     954:	4a56      	ldr	r2, [pc, #344]	; (ab0 <udi_cdc_tx_send+0x22c>)
     956:	5cd3      	ldrb	r3, [r2, r3]
     958:	b2db      	uxtb	r3, r3
     95a:	2201      	movs	r2, #1
     95c:	4053      	eors	r3, r2
     95e:	b2db      	uxtb	r3, r3
     960:	2b00      	cmp	r3, #0
     962:	d00b      	beq.n	97c <udi_cdc_tx_send+0xf8>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     964:	1dfb      	adds	r3, r7, #7
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2217      	movs	r2, #23
     96a:	18ba      	adds	r2, r7, r2
     96c:	7812      	ldrb	r2, [r2, #0]
     96e:	4251      	negs	r1, r2
     970:	414a      	adcs	r2, r1
     972:	b2d2      	uxtb	r2, r2
     974:	0011      	movs	r1, r2
     976:	4a49      	ldr	r2, [pc, #292]	; (a9c <udi_cdc_tx_send+0x218>)
     978:	54d1      	strb	r1, [r2, r3]
     97a:	e008      	b.n	98e <udi_cdc_tx_send+0x10a>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     97c:	2317      	movs	r3, #23
     97e:	18fb      	adds	r3, r7, r3
     980:	781b      	ldrb	r3, [r3, #0]
     982:	425a      	negs	r2, r3
     984:	4153      	adcs	r3, r2
     986:	b2da      	uxtb	r2, r3
     988:	2317      	movs	r3, #23
     98a:	18fb      	adds	r3, r7, r3
     98c:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     98e:	1dfb      	adds	r3, r7, #7
     990:	781b      	ldrb	r3, [r3, #0]
     992:	4a3c      	ldr	r2, [pc, #240]	; (a84 <udi_cdc_tx_send+0x200>)
     994:	2101      	movs	r1, #1
     996:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
     998:	693b      	ldr	r3, [r7, #16]
     99a:	0018      	movs	r0, r3
     99c:	4b43      	ldr	r3, [pc, #268]	; (aac <udi_cdc_tx_send+0x228>)
     99e:	4798      	blx	r3
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     9a0:	1dfb      	adds	r3, r7, #7
     9a2:	7819      	ldrb	r1, [r3, #0]
     9a4:	2317      	movs	r3, #23
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	781a      	ldrb	r2, [r3, #0]
     9aa:	4b3d      	ldr	r3, [pc, #244]	; (aa0 <udi_cdc_tx_send+0x21c>)
     9ac:	0049      	lsls	r1, r1, #1
     9ae:	188a      	adds	r2, r1, r2
     9b0:	0052      	lsls	r2, r2, #1
     9b2:	5ad2      	ldrh	r2, [r2, r3]
     9b4:	230f      	movs	r3, #15
     9b6:	18fb      	adds	r3, r7, r3
     9b8:	3a41      	subs	r2, #65	; 0x41
     9ba:	3aff      	subs	r2, #255	; 0xff
     9bc:	1e51      	subs	r1, r2, #1
     9be:	418a      	sbcs	r2, r1
     9c0:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
     9c2:	230f      	movs	r3, #15
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	2b00      	cmp	r3, #0
     9ca:	d017      	beq.n	9fc <udi_cdc_tx_send+0x178>
		if (udd_is_high_speed()) {
     9cc:	4b2e      	ldr	r3, [pc, #184]	; (a88 <udi_cdc_tx_send+0x204>)
     9ce:	4798      	blx	r3
     9d0:	1e03      	subs	r3, r0, #0
     9d2:	d009      	beq.n	9e8 <udi_cdc_tx_send+0x164>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     9d4:	1dfb      	adds	r3, r7, #7
     9d6:	781c      	ldrb	r4, [r3, #0]
     9d8:	4b2d      	ldr	r3, [pc, #180]	; (a90 <udi_cdc_tx_send+0x20c>)
     9da:	4798      	blx	r3
     9dc:	0003      	movs	r3, r0
     9de:	0019      	movs	r1, r3
     9e0:	4b2a      	ldr	r3, [pc, #168]	; (a8c <udi_cdc_tx_send+0x208>)
     9e2:	0062      	lsls	r2, r4, #1
     9e4:	52d1      	strh	r1, [r2, r3]
     9e6:	e00f      	b.n	a08 <udi_cdc_tx_send+0x184>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     9e8:	1dfb      	adds	r3, r7, #7
     9ea:	781c      	ldrb	r4, [r3, #0]
     9ec:	4b29      	ldr	r3, [pc, #164]	; (a94 <udi_cdc_tx_send+0x210>)
     9ee:	4798      	blx	r3
     9f0:	0003      	movs	r3, r0
     9f2:	0019      	movs	r1, r3
     9f4:	4b25      	ldr	r3, [pc, #148]	; (a8c <udi_cdc_tx_send+0x208>)
     9f6:	0062      	lsls	r2, r4, #1
     9f8:	52d1      	strh	r1, [r2, r3]
     9fa:	e005      	b.n	a08 <udi_cdc_tx_send+0x184>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     9fc:	1dfb      	adds	r3, r7, #7
     9fe:	781a      	ldrb	r2, [r3, #0]
     a00:	4b22      	ldr	r3, [pc, #136]	; (a8c <udi_cdc_tx_send+0x208>)
     a02:	0052      	lsls	r2, r2, #1
     a04:	2100      	movs	r1, #0
     a06:	52d1      	strh	r1, [r2, r3]
	switch (port) {
     a08:	1dfb      	adds	r3, r7, #7
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d104      	bne.n	a1a <udi_cdc_tx_send+0x196>
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
     a10:	2316      	movs	r3, #22
     a12:	18fb      	adds	r3, r7, r3
     a14:	2281      	movs	r2, #129	; 0x81
     a16:	701a      	strb	r2, [r3, #0]
     a18:	e004      	b.n	a24 <udi_cdc_tx_send+0x1a0>
		ep = UDI_CDC_DATA_EP_IN_0;
     a1a:	2316      	movs	r3, #22
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	2281      	movs	r2, #129	; 0x81
     a20:	701a      	strb	r2, [r3, #0]
		break;
     a22:	46c0      	nop			; (mov r8, r8)
			udi_cdc_tx_buf[port][buf_sel_trans],
     a24:	1dfb      	adds	r3, r7, #7
     a26:	7819      	ldrb	r1, [r3, #0]
     a28:	2317      	movs	r3, #23
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	781b      	ldrb	r3, [r3, #0]
     a2e:	001a      	movs	r2, r3
     a30:	0092      	lsls	r2, r2, #2
     a32:	18d2      	adds	r2, r2, r3
     a34:	0193      	lsls	r3, r2, #6
     a36:	001a      	movs	r2, r3
     a38:	000b      	movs	r3, r1
     a3a:	009b      	lsls	r3, r3, #2
     a3c:	185b      	adds	r3, r3, r1
     a3e:	01db      	lsls	r3, r3, #7
     a40:	18d2      	adds	r2, r2, r3
     a42:	4b1c      	ldr	r3, [pc, #112]	; (ab4 <udi_cdc_tx_send+0x230>)
     a44:	18d4      	adds	r4, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     a46:	1dfb      	adds	r3, r7, #7
     a48:	7819      	ldrb	r1, [r3, #0]
     a4a:	2317      	movs	r3, #23
     a4c:	18fb      	adds	r3, r7, r3
     a4e:	781a      	ldrb	r2, [r3, #0]
     a50:	4b13      	ldr	r3, [pc, #76]	; (aa0 <udi_cdc_tx_send+0x21c>)
     a52:	0049      	lsls	r1, r1, #1
     a54:	188a      	adds	r2, r1, r2
     a56:	0052      	lsls	r2, r2, #1
     a58:	5ad3      	ldrh	r3, [r2, r3]
	udd_ep_run( ep,
     a5a:	001a      	movs	r2, r3
     a5c:	230f      	movs	r3, #15
     a5e:	18fb      	adds	r3, r7, r3
     a60:	7819      	ldrb	r1, [r3, #0]
     a62:	2316      	movs	r3, #22
     a64:	18fb      	adds	r3, r7, r3
     a66:	7818      	ldrb	r0, [r3, #0]
     a68:	4b13      	ldr	r3, [pc, #76]	; (ab8 <udi_cdc_tx_send+0x234>)
     a6a:	9300      	str	r3, [sp, #0]
     a6c:	0013      	movs	r3, r2
     a6e:	0022      	movs	r2, r4
     a70:	4c12      	ldr	r4, [pc, #72]	; (abc <udi_cdc_tx_send+0x238>)
     a72:	47a0      	blx	r4
     a74:	e002      	b.n	a7c <udi_cdc_tx_send+0x1f8>
		return; // Already on going or wait next SOF to send next data
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	e000      	b.n	a7c <udi_cdc_tx_send+0x1f8>
			return; // Wait next SOF to send next data
     a7a:	46c0      	nop			; (mov r8, r8)
}
     a7c:	46bd      	mov	sp, r7
     a7e:	b007      	add	sp, #28
     a80:	bd90      	pop	{r4, r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	2000078c 	.word	0x2000078c
     a88:	00004389 	.word	0x00004389
     a8c:	20000788 	.word	0x20000788
     a90:	000043b1 	.word	0x000043b1
     a94:	00004395 	.word	0x00004395
     a98:	00000115 	.word	0x00000115
     a9c:	20000784 	.word	0x20000784
     aa0:	20000780 	.word	0x20000780
     aa4:	20000792 	.word	0x20000792
     aa8:	0000031f 	.word	0x0000031f
     aac:	0000015d 	.word	0x0000015d
     ab0:	20000790 	.word	0x20000790
     ab4:	20000500 	.word	0x20000500
     ab8:	000007e1 	.word	0x000007e1
     abc:	00004731 	.word	0x00004731

00000ac0 <udi_cdc_multi_get_nb_received_data>:
{
     ac0:	b580      	push	{r7, lr}
     ac2:	b086      	sub	sp, #24
     ac4:	af00      	add	r7, sp, #0
     ac6:	0002      	movs	r2, r0
     ac8:	1dfb      	adds	r3, r7, #7
     aca:	701a      	strb	r2, [r3, #0]
	port = 0;
     acc:	1dfb      	adds	r3, r7, #7
     ace:	2200      	movs	r2, #0
     ad0:	701a      	strb	r2, [r3, #0]
	flags = cpu_irq_save();
     ad2:	4b14      	ldr	r3, [pc, #80]	; (b24 <udi_cdc_multi_get_nb_received_data+0x64>)
     ad4:	4798      	blx	r3
     ad6:	0003      	movs	r3, r0
     ad8:	617b      	str	r3, [r7, #20]
	pos = udi_cdc_rx_pos[port];
     ada:	1dfb      	adds	r3, r7, #7
     adc:	7819      	ldrb	r1, [r3, #0]
     ade:	2312      	movs	r3, #18
     ae0:	18fb      	adds	r3, r7, r3
     ae2:	4a11      	ldr	r2, [pc, #68]	; (b28 <udi_cdc_multi_get_nb_received_data+0x68>)
     ae4:	0049      	lsls	r1, r1, #1
     ae6:	5a8a      	ldrh	r2, [r1, r2]
     ae8:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     aea:	1dfb      	adds	r3, r7, #7
     aec:	781a      	ldrb	r2, [r3, #0]
     aee:	1dfb      	adds	r3, r7, #7
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	490e      	ldr	r1, [pc, #56]	; (b2c <udi_cdc_multi_get_nb_received_data+0x6c>)
     af4:	5ccb      	ldrb	r3, [r1, r3]
     af6:	b2db      	uxtb	r3, r3
     af8:	0019      	movs	r1, r3
     afa:	4b0d      	ldr	r3, [pc, #52]	; (b30 <udi_cdc_multi_get_nb_received_data+0x70>)
     afc:	0052      	lsls	r2, r2, #1
     afe:	1852      	adds	r2, r2, r1
     b00:	0052      	lsls	r2, r2, #1
     b02:	5ad3      	ldrh	r3, [r2, r3]
     b04:	b29b      	uxth	r3, r3
     b06:	001a      	movs	r2, r3
     b08:	2312      	movs	r3, #18
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	881b      	ldrh	r3, [r3, #0]
     b0e:	1ad3      	subs	r3, r2, r3
     b10:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
     b12:	697b      	ldr	r3, [r7, #20]
     b14:	0018      	movs	r0, r3
     b16:	4b07      	ldr	r3, [pc, #28]	; (b34 <udi_cdc_multi_get_nb_received_data+0x74>)
     b18:	4798      	blx	r3
	return nb_received;
     b1a:	68fb      	ldr	r3, [r7, #12]
}
     b1c:	0018      	movs	r0, r3
     b1e:	46bd      	mov	sp, r7
     b20:	b006      	add	sp, #24
     b22:	bd80      	pop	{r7, pc}
     b24:	00000115 	.word	0x00000115
     b28:	200004f8 	.word	0x200004f8
     b2c:	200004f4 	.word	0x200004f4
     b30:	200004f0 	.word	0x200004f0
     b34:	0000015d 	.word	0x0000015d

00000b38 <udi_cdc_multi_is_rx_ready>:
{
     b38:	b580      	push	{r7, lr}
     b3a:	b082      	sub	sp, #8
     b3c:	af00      	add	r7, sp, #0
     b3e:	0002      	movs	r2, r0
     b40:	1dfb      	adds	r3, r7, #7
     b42:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	0018      	movs	r0, r3
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <udi_cdc_multi_is_rx_ready+0x28>)
     b4c:	4798      	blx	r3
     b4e:	0003      	movs	r3, r0
     b50:	1e5a      	subs	r2, r3, #1
     b52:	4193      	sbcs	r3, r2
     b54:	b2db      	uxtb	r3, r3
}
     b56:	0018      	movs	r0, r3
     b58:	46bd      	mov	sp, r7
     b5a:	b002      	add	sp, #8
     b5c:	bd80      	pop	{r7, pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000ac1 	.word	0x00000ac1

00000b64 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     b64:	b580      	push	{r7, lr}
     b66:	b086      	sub	sp, #24
     b68:	af00      	add	r7, sp, #0
     b6a:	0002      	movs	r2, r0
     b6c:	1dfb      	adds	r3, r7, #7
     b6e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
     b70:	1dfb      	adds	r3, r7, #7
     b72:	2200      	movs	r2, #0
     b74:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
     b76:	4b27      	ldr	r3, [pc, #156]	; (c14 <udi_cdc_multi_get_free_tx_buffer+0xb0>)
     b78:	4798      	blx	r3
     b7a:	0003      	movs	r3, r0
     b7c:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
     b7e:	1dfb      	adds	r3, r7, #7
     b80:	781a      	ldrb	r2, [r3, #0]
     b82:	230f      	movs	r3, #15
     b84:	18fb      	adds	r3, r7, r3
     b86:	4924      	ldr	r1, [pc, #144]	; (c18 <udi_cdc_multi_get_free_tx_buffer+0xb4>)
     b88:	5c8a      	ldrb	r2, [r1, r2]
     b8a:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     b8c:	1dfb      	adds	r3, r7, #7
     b8e:	7819      	ldrb	r1, [r3, #0]
     b90:	230f      	movs	r3, #15
     b92:	18fb      	adds	r3, r7, r3
     b94:	781a      	ldrb	r2, [r3, #0]
     b96:	4b21      	ldr	r3, [pc, #132]	; (c1c <udi_cdc_multi_get_free_tx_buffer+0xb8>)
     b98:	0049      	lsls	r1, r1, #1
     b9a:	188a      	adds	r2, r1, r2
     b9c:	0052      	lsls	r2, r2, #1
     b9e:	5ad3      	ldrh	r3, [r2, r3]
     ba0:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     ba2:	697a      	ldr	r2, [r7, #20]
     ba4:	23a0      	movs	r3, #160	; 0xa0
     ba6:	005b      	lsls	r3, r3, #1
     ba8:	429a      	cmp	r2, r3
     baa:	d125      	bne.n	bf8 <udi_cdc_multi_get_free_tx_buffer+0x94>
		if ((!udi_cdc_tx_trans_ongoing[port])
     bac:	1dfb      	adds	r3, r7, #7
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	4a1b      	ldr	r2, [pc, #108]	; (c20 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
     bb2:	5cd3      	ldrb	r3, [r2, r3]
     bb4:	b2db      	uxtb	r3, r3
     bb6:	2201      	movs	r2, #1
     bb8:	4053      	eors	r3, r2
     bba:	b2db      	uxtb	r3, r3
     bbc:	2b00      	cmp	r3, #0
     bbe:	d01b      	beq.n	bf8 <udi_cdc_multi_get_free_tx_buffer+0x94>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     bc0:	1dfb      	adds	r3, r7, #7
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	4a17      	ldr	r2, [pc, #92]	; (c24 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
     bc6:	5cd3      	ldrb	r3, [r2, r3]
     bc8:	b2db      	uxtb	r3, r3
     bca:	2201      	movs	r2, #1
     bcc:	4053      	eors	r3, r2
     bce:	b2db      	uxtb	r3, r3
     bd0:	2b00      	cmp	r3, #0
     bd2:	d011      	beq.n	bf8 <udi_cdc_multi_get_free_tx_buffer+0x94>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
     bd4:	1dfb      	adds	r3, r7, #7
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	4a12      	ldr	r2, [pc, #72]	; (c24 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
     bda:	2101      	movs	r1, #1
     bdc:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     bde:	1dfb      	adds	r3, r7, #7
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	220f      	movs	r2, #15
     be4:	18ba      	adds	r2, r7, r2
     be6:	7812      	ldrb	r2, [r2, #0]
     be8:	4251      	negs	r1, r2
     bea:	414a      	adcs	r2, r1
     bec:	b2d2      	uxtb	r2, r2
     bee:	0011      	movs	r1, r2
     bf0:	4a09      	ldr	r2, [pc, #36]	; (c18 <udi_cdc_multi_get_free_tx_buffer+0xb4>)
     bf2:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
     bf4:	2300      	movs	r3, #0
     bf6:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     bf8:	697b      	ldr	r3, [r7, #20]
     bfa:	22a0      	movs	r2, #160	; 0xa0
     bfc:	0052      	lsls	r2, r2, #1
     bfe:	1ad3      	subs	r3, r2, r3
     c00:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
     c02:	693b      	ldr	r3, [r7, #16]
     c04:	0018      	movs	r0, r3
     c06:	4b08      	ldr	r3, [pc, #32]	; (c28 <udi_cdc_multi_get_free_tx_buffer+0xc4>)
     c08:	4798      	blx	r3
	return retval;
     c0a:	68bb      	ldr	r3, [r7, #8]
}
     c0c:	0018      	movs	r0, r3
     c0e:	46bd      	mov	sp, r7
     c10:	b006      	add	sp, #24
     c12:	bd80      	pop	{r7, pc}
     c14:	00000115 	.word	0x00000115
     c18:	20000784 	.word	0x20000784
     c1c:	20000780 	.word	0x20000780
     c20:	2000078c 	.word	0x2000078c
     c24:	20000790 	.word	0x20000790
     c28:	0000015d 	.word	0x0000015d

00000c2c <udi_cdc_get_free_tx_buffer>:

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
     c2c:	b580      	push	{r7, lr}
     c2e:	af00      	add	r7, sp, #0
	return udi_cdc_multi_get_free_tx_buffer(0);
     c30:	2000      	movs	r0, #0
     c32:	4b03      	ldr	r3, [pc, #12]	; (c40 <udi_cdc_get_free_tx_buffer+0x14>)
     c34:	4798      	blx	r3
     c36:	0003      	movs	r3, r0
}
     c38:	0018      	movs	r0, r3
     c3a:	46bd      	mov	sp, r7
     c3c:	bd80      	pop	{r7, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00000b65 	.word	0x00000b65

00000c44 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     c44:	b580      	push	{r7, lr}
     c46:	b082      	sub	sp, #8
     c48:	af00      	add	r7, sp, #0
     c4a:	0002      	movs	r2, r0
     c4c:	1dfb      	adds	r3, r7, #7
     c4e:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     c50:	1dfb      	adds	r3, r7, #7
     c52:	781b      	ldrb	r3, [r3, #0]
     c54:	0018      	movs	r0, r3
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <udi_cdc_multi_is_tx_ready+0x28>)
     c58:	4798      	blx	r3
     c5a:	0003      	movs	r3, r0
     c5c:	1e5a      	subs	r2, r3, #1
     c5e:	4193      	sbcs	r3, r2
     c60:	b2db      	uxtb	r3, r3
}
     c62:	0018      	movs	r0, r3
     c64:	46bd      	mov	sp, r7
     c66:	b002      	add	sp, #8
     c68:	bd80      	pop	{r7, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00000b65 	.word	0x00000b65

00000c70 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
     c70:	b580      	push	{r7, lr}
     c72:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
     c74:	2000      	movs	r0, #0
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <udi_cdc_is_tx_ready+0x14>)
     c78:	4798      	blx	r3
     c7a:	0003      	movs	r3, r0
}
     c7c:	0018      	movs	r0, r3
     c7e:	46bd      	mov	sp, r7
     c80:	bd80      	pop	{r7, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	00000c45 	.word	0x00000c45

00000c88 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b088      	sub	sp, #32
     c8c:	af00      	add	r7, sp, #0
     c8e:	60b9      	str	r1, [r7, #8]
     c90:	607a      	str	r2, [r7, #4]
     c92:	230f      	movs	r3, #15
     c94:	18fb      	adds	r3, r7, r3
     c96:	1c02      	adds	r2, r0, #0
     c98:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
     c9a:	68bb      	ldr	r3, [r7, #8]
     c9c:	61bb      	str	r3, [r7, #24]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
     c9e:	230f      	movs	r3, #15
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	2200      	movs	r2, #0
     ca4:	701a      	strb	r2, [r3, #0]
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     ca6:	230f      	movs	r3, #15
     ca8:	18fb      	adds	r3, r7, r3
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	4946      	ldr	r1, [pc, #280]	; (dc8 <udi_cdc_multi_write_buf+0x140>)
     cae:	0013      	movs	r3, r2
     cb0:	00db      	lsls	r3, r3, #3
     cb2:	1a9b      	subs	r3, r3, r2
     cb4:	18cb      	adds	r3, r1, r3
     cb6:	3306      	adds	r3, #6
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	2b09      	cmp	r3, #9
     cbc:	d102      	bne.n	cc4 <udi_cdc_multi_write_buf+0x3c>
		size *=2;
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	607b      	str	r3, [r7, #4]
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     cc4:	230f      	movs	r3, #15
     cc6:	18fb      	adds	r3, r7, r3
     cc8:	781b      	ldrb	r3, [r3, #0]
     cca:	0018      	movs	r0, r3
     ccc:	4b3f      	ldr	r3, [pc, #252]	; (dcc <udi_cdc_multi_write_buf+0x144>)
     cce:	4798      	blx	r3
     cd0:	0003      	movs	r3, r0
     cd2:	001a      	movs	r2, r3
     cd4:	2301      	movs	r3, #1
     cd6:	4053      	eors	r3, r2
     cd8:	b2db      	uxtb	r3, r3
     cda:	2b00      	cmp	r3, #0
     cdc:	d009      	beq.n	cf2 <udi_cdc_multi_write_buf+0x6a>
		if (!udi_cdc_data_running) {
     cde:	4b3c      	ldr	r3, [pc, #240]	; (dd0 <udi_cdc_multi_write_buf+0x148>)
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	b2db      	uxtb	r3, r3
     ce4:	2201      	movs	r2, #1
     ce6:	4053      	eors	r3, r2
     ce8:	b2db      	uxtb	r3, r3
     cea:	2b00      	cmp	r3, #0
     cec:	d0ea      	beq.n	cc4 <udi_cdc_multi_write_buf+0x3c>
			return size;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	e065      	b.n	dbe <udi_cdc_multi_write_buf+0x136>
		}
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
     cf2:	4b38      	ldr	r3, [pc, #224]	; (dd4 <udi_cdc_multi_write_buf+0x14c>)
     cf4:	4798      	blx	r3
     cf6:	0003      	movs	r3, r0
     cf8:	617b      	str	r3, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
     cfa:	230f      	movs	r3, #15
     cfc:	18fb      	adds	r3, r7, r3
     cfe:	781a      	ldrb	r2, [r3, #0]
     d00:	2313      	movs	r3, #19
     d02:	18fb      	adds	r3, r7, r3
     d04:	4934      	ldr	r1, [pc, #208]	; (dd8 <udi_cdc_multi_write_buf+0x150>)
     d06:	5c8a      	ldrb	r2, [r1, r2]
     d08:	701a      	strb	r2, [r3, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     d0a:	230f      	movs	r3, #15
     d0c:	18fb      	adds	r3, r7, r3
     d0e:	7818      	ldrb	r0, [r3, #0]
     d10:	2313      	movs	r3, #19
     d12:	18fb      	adds	r3, r7, r3
     d14:	7819      	ldrb	r1, [r3, #0]
     d16:	2310      	movs	r3, #16
     d18:	18fb      	adds	r3, r7, r3
     d1a:	4a30      	ldr	r2, [pc, #192]	; (ddc <udi_cdc_multi_write_buf+0x154>)
     d1c:	0040      	lsls	r0, r0, #1
     d1e:	1841      	adds	r1, r0, r1
     d20:	0049      	lsls	r1, r1, #1
     d22:	5a8a      	ldrh	r2, [r1, r2]
     d24:	801a      	strh	r2, [r3, #0]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     d26:	2310      	movs	r3, #16
     d28:	18fb      	adds	r3, r7, r3
     d2a:	881b      	ldrh	r3, [r3, #0]
     d2c:	22a0      	movs	r2, #160	; 0xa0
     d2e:	0052      	lsls	r2, r2, #1
     d30:	1ad3      	subs	r3, r2, r3
     d32:	61fb      	str	r3, [r7, #28]
	if (copy_nb > size) {
     d34:	69fa      	ldr	r2, [r7, #28]
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	429a      	cmp	r2, r3
     d3a:	d901      	bls.n	d40 <udi_cdc_multi_write_buf+0xb8>
		copy_nb = size;
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     d40:	230f      	movs	r3, #15
     d42:	18fb      	adds	r3, r7, r3
     d44:	7819      	ldrb	r1, [r3, #0]
     d46:	2313      	movs	r3, #19
     d48:	18fb      	adds	r3, r7, r3
     d4a:	781b      	ldrb	r3, [r3, #0]
     d4c:	2210      	movs	r2, #16
     d4e:	18ba      	adds	r2, r7, r2
     d50:	8810      	ldrh	r0, [r2, #0]
     d52:	001a      	movs	r2, r3
     d54:	0092      	lsls	r2, r2, #2
     d56:	18d2      	adds	r2, r2, r3
     d58:	0193      	lsls	r3, r2, #6
     d5a:	001a      	movs	r2, r3
     d5c:	000b      	movs	r3, r1
     d5e:	009b      	lsls	r3, r3, #2
     d60:	185b      	adds	r3, r3, r1
     d62:	01db      	lsls	r3, r3, #7
     d64:	18d3      	adds	r3, r2, r3
     d66:	181a      	adds	r2, r3, r0
     d68:	4b1d      	ldr	r3, [pc, #116]	; (de0 <udi_cdc_multi_write_buf+0x158>)
     d6a:	18d3      	adds	r3, r2, r3
     d6c:	69fa      	ldr	r2, [r7, #28]
     d6e:	69b9      	ldr	r1, [r7, #24]
     d70:	0018      	movs	r0, r3
     d72:	4b1c      	ldr	r3, [pc, #112]	; (de4 <udi_cdc_multi_write_buf+0x15c>)
     d74:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     d76:	230f      	movs	r3, #15
     d78:	18fb      	adds	r3, r7, r3
     d7a:	7819      	ldrb	r1, [r3, #0]
     d7c:	2313      	movs	r3, #19
     d7e:	18fb      	adds	r3, r7, r3
     d80:	781a      	ldrb	r2, [r3, #0]
     d82:	69fb      	ldr	r3, [r7, #28]
     d84:	b298      	uxth	r0, r3
     d86:	2310      	movs	r3, #16
     d88:	18fb      	adds	r3, r7, r3
     d8a:	881b      	ldrh	r3, [r3, #0]
     d8c:	18c3      	adds	r3, r0, r3
     d8e:	b298      	uxth	r0, r3
     d90:	4b12      	ldr	r3, [pc, #72]	; (ddc <udi_cdc_multi_write_buf+0x154>)
     d92:	0049      	lsls	r1, r1, #1
     d94:	188a      	adds	r2, r1, r2
     d96:	0052      	lsls	r2, r2, #1
     d98:	1c01      	adds	r1, r0, #0
     d9a:	52d1      	strh	r1, [r2, r3]
	cpu_irq_restore(flags);
     d9c:	697b      	ldr	r3, [r7, #20]
     d9e:	0018      	movs	r0, r3
     da0:	4b11      	ldr	r3, [pc, #68]	; (de8 <udi_cdc_multi_write_buf+0x160>)
     da2:	4798      	blx	r3

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     da4:	69ba      	ldr	r2, [r7, #24]
     da6:	69fb      	ldr	r3, [r7, #28]
     da8:	18d3      	adds	r3, r2, r3
     daa:	61bb      	str	r3, [r7, #24]
	size -= copy_nb;
     dac:	687a      	ldr	r2, [r7, #4]
     dae:	69fb      	ldr	r3, [r7, #28]
     db0:	1ad3      	subs	r3, r2, r3
     db2:	607b      	str	r3, [r7, #4]

	if (size) {
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	2b00      	cmp	r3, #0
     db8:	d000      	beq.n	dbc <udi_cdc_multi_write_buf+0x134>
		goto udi_cdc_write_buf_loop_wait;
     dba:	e783      	b.n	cc4 <udi_cdc_multi_write_buf+0x3c>
	}

	return 0;
     dbc:	2300      	movs	r3, #0
}
     dbe:	0018      	movs	r0, r3
     dc0:	46bd      	mov	sp, r7
     dc2:	b008      	add	sp, #32
     dc4:	bd80      	pop	{r7, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	20000254 	.word	0x20000254
     dcc:	00000c45 	.word	0x00000c45
     dd0:	2000026c 	.word	0x2000026c
     dd4:	00000115 	.word	0x00000115
     dd8:	20000784 	.word	0x20000784
     ddc:	20000780 	.word	0x20000780
     de0:	20000500 	.word	0x20000500
     de4:	00012ed1 	.word	0x00012ed1
     de8:	0000015d 	.word	0x0000015d

00000dec <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     dec:	b580      	push	{r7, lr}
     dee:	b082      	sub	sp, #8
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
     df4:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_write_buf(0, buf, size);
     df6:	683a      	ldr	r2, [r7, #0]
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	0019      	movs	r1, r3
     dfc:	2000      	movs	r0, #0
     dfe:	4b03      	ldr	r3, [pc, #12]	; (e0c <udi_cdc_write_buf+0x20>)
     e00:	4798      	blx	r3
     e02:	0003      	movs	r3, r0
}
     e04:	0018      	movs	r0, r3
     e06:	46bd      	mov	sp, r7
     e08:	b002      	add	sp, #8
     e0a:	bd80      	pop	{r7, pc}
     e0c:	00000c89 	.word	0x00000c89

00000e10 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
     e10:	b580      	push	{r7, lr}
     e12:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     e14:	4b07      	ldr	r3, [pc, #28]	; (e34 <udc_get_eof_conf+0x24>)
     e16:	681b      	ldr	r3, [r3, #0]
     e18:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     e1a:	4b06      	ldr	r3, [pc, #24]	; (e34 <udc_get_eof_conf+0x24>)
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	7899      	ldrb	r1, [r3, #2]
     e22:	78db      	ldrb	r3, [r3, #3]
     e24:	021b      	lsls	r3, r3, #8
     e26:	430b      	orrs	r3, r1
     e28:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     e2a:	18d3      	adds	r3, r2, r3
}
     e2c:	0018      	movs	r0, r3
     e2e:	46bd      	mov	sp, r7
     e30:	bd80      	pop	{r7, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	200007a0 	.word	0x200007a0

00000e38 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     e38:	b580      	push	{r7, lr}
     e3a:	b084      	sub	sp, #16
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
     e40:	000a      	movs	r2, r1
     e42:	1cfb      	adds	r3, r7, #3
     e44:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     e46:	4b14      	ldr	r3, [pc, #80]	; (e98 <udc_next_desc_in_iface+0x60>)
     e48:	4798      	blx	r3
     e4a:	0003      	movs	r3, r0
     e4c:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     e54:	687b      	ldr	r3, [r7, #4]
     e56:	189b      	adds	r3, r3, r2
     e58:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     e5a:	e011      	b.n	e80 <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	785b      	ldrb	r3, [r3, #1]
     e60:	2b04      	cmp	r3, #4
     e62:	d012      	beq.n	e8a <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	785b      	ldrb	r3, [r3, #1]
     e68:	1cfa      	adds	r2, r7, #3
     e6a:	7812      	ldrb	r2, [r2, #0]
     e6c:	429a      	cmp	r2, r3
     e6e:	d101      	bne.n	e74 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	e00c      	b.n	e8e <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	189b      	adds	r3, r3, r2
     e7e:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
     e80:	68fa      	ldr	r2, [r7, #12]
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	429a      	cmp	r2, r3
     e86:	d8e9      	bhi.n	e5c <udc_next_desc_in_iface+0x24>
     e88:	e000      	b.n	e8c <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
     e8a:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
     e8c:	2300      	movs	r3, #0
}
     e8e:	0018      	movs	r0, r3
     e90:	46bd      	mov	sp, r7
     e92:	b004      	add	sp, #16
     e94:	bd80      	pop	{r7, pc}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	00000e11 	.word	0x00000e11

00000e9c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b084      	sub	sp, #16
     ea0:	af00      	add	r7, sp, #0
     ea2:	0002      	movs	r2, r0
     ea4:	1dfb      	adds	r3, r7, #7
     ea6:	701a      	strb	r2, [r3, #0]
     ea8:	1dbb      	adds	r3, r7, #6
     eaa:	1c0a      	adds	r2, r1, #0
     eac:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     eae:	4b20      	ldr	r3, [pc, #128]	; (f30 <udc_update_iface_desc+0x94>)
     eb0:	781b      	ldrb	r3, [r3, #0]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d101      	bne.n	eba <udc_update_iface_desc+0x1e>
		return false;
     eb6:	2300      	movs	r3, #0
     eb8:	e036      	b.n	f28 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     eba:	4b1e      	ldr	r3, [pc, #120]	; (f34 <udc_update_iface_desc+0x98>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	791b      	ldrb	r3, [r3, #4]
     ec2:	1dfa      	adds	r2, r7, #7
     ec4:	7812      	ldrb	r2, [r2, #0]
     ec6:	429a      	cmp	r2, r3
     ec8:	d301      	bcc.n	ece <udc_update_iface_desc+0x32>
		return false;
     eca:	2300      	movs	r3, #0
     ecc:	e02c      	b.n	f28 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
     ece:	4b19      	ldr	r3, [pc, #100]	; (f34 <udc_update_iface_desc+0x98>)
     ed0:	681b      	ldr	r3, [r3, #0]
     ed2:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     ed4:	4b18      	ldr	r3, [pc, #96]	; (f38 <udc_update_iface_desc+0x9c>)
     ed6:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     ed8:	4b18      	ldr	r3, [pc, #96]	; (f3c <udc_update_iface_desc+0xa0>)
     eda:	4798      	blx	r3
     edc:	0003      	movs	r3, r0
     ede:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
     ee0:	e01c      	b.n	f1c <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     ee2:	4b15      	ldr	r3, [pc, #84]	; (f38 <udc_update_iface_desc+0x9c>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	785b      	ldrb	r3, [r3, #1]
     ee8:	2b04      	cmp	r3, #4
     eea:	d10f      	bne.n	f0c <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     eec:	4b12      	ldr	r3, [pc, #72]	; (f38 <udc_update_iface_desc+0x9c>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	789b      	ldrb	r3, [r3, #2]
     ef2:	1dfa      	adds	r2, r7, #7
     ef4:	7812      	ldrb	r2, [r2, #0]
     ef6:	429a      	cmp	r2, r3
     ef8:	d108      	bne.n	f0c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <udc_update_iface_desc+0x9c>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     f00:	1dba      	adds	r2, r7, #6
     f02:	7812      	ldrb	r2, [r2, #0]
     f04:	429a      	cmp	r2, r3
     f06:	d101      	bne.n	f0c <udc_update_iface_desc+0x70>
				return true; // Interface found
     f08:	2301      	movs	r3, #1
     f0a:	e00d      	b.n	f28 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     f0c:	4b0a      	ldr	r3, [pc, #40]	; (f38 <udc_update_iface_desc+0x9c>)
     f0e:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
     f10:	4b09      	ldr	r3, [pc, #36]	; (f38 <udc_update_iface_desc+0x9c>)
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     f16:	18d2      	adds	r2, r2, r3
     f18:	4b07      	ldr	r3, [pc, #28]	; (f38 <udc_update_iface_desc+0x9c>)
     f1a:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
     f1c:	4b06      	ldr	r3, [pc, #24]	; (f38 <udc_update_iface_desc+0x9c>)
     f1e:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
     f20:	68fa      	ldr	r2, [r7, #12]
     f22:	429a      	cmp	r2, r3
     f24:	d8dd      	bhi.n	ee2 <udc_update_iface_desc+0x46>
	}
	return false; // Interface not found
     f26:	2300      	movs	r3, #0
}
     f28:	0018      	movs	r0, r3
     f2a:	46bd      	mov	sp, r7
     f2c:	b004      	add	sp, #16
     f2e:	bd80      	pop	{r7, pc}
     f30:	2000079c 	.word	0x2000079c
     f34:	200007a0 	.word	0x200007a0
     f38:	200007a4 	.word	0x200007a4
     f3c:	00000e11 	.word	0x00000e11

00000f40 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     f40:	b580      	push	{r7, lr}
     f42:	b084      	sub	sp, #16
     f44:	af00      	add	r7, sp, #0
     f46:	0002      	movs	r2, r0
     f48:	1dfb      	adds	r3, r7, #7
     f4a:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f4c:	1dfb      	adds	r3, r7, #7
     f4e:	781b      	ldrb	r3, [r3, #0]
     f50:	2100      	movs	r1, #0
     f52:	0018      	movs	r0, r3
     f54:	4b21      	ldr	r3, [pc, #132]	; (fdc <udc_iface_disable+0x9c>)
     f56:	4798      	blx	r3
     f58:	0003      	movs	r3, r0
     f5a:	001a      	movs	r2, r3
     f5c:	2301      	movs	r3, #1
     f5e:	4053      	eors	r3, r2
     f60:	b2db      	uxtb	r3, r3
     f62:	2b00      	cmp	r3, #0
     f64:	d001      	beq.n	f6a <udc_iface_disable+0x2a>
		return false;
     f66:	2300      	movs	r3, #0
     f68:	e034      	b.n	fd4 <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f6a:	4b1d      	ldr	r3, [pc, #116]	; (fe0 <udc_iface_disable+0xa0>)
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	685a      	ldr	r2, [r3, #4]
     f70:	1dfb      	adds	r3, r7, #7
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	009b      	lsls	r3, r3, #2
     f76:	18d3      	adds	r3, r2, r3
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f7c:	68bb      	ldr	r3, [r7, #8]
     f7e:	68db      	ldr	r3, [r3, #12]
     f80:	4798      	blx	r3
     f82:	0003      	movs	r3, r0
     f84:	001a      	movs	r2, r3
     f86:	1dfb      	adds	r3, r7, #7
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	0011      	movs	r1, r2
     f8c:	0018      	movs	r0, r3
     f8e:	4b13      	ldr	r3, [pc, #76]	; (fdc <udc_iface_disable+0x9c>)
     f90:	4798      	blx	r3
     f92:	0003      	movs	r3, r0
     f94:	001a      	movs	r2, r3
     f96:	2301      	movs	r3, #1
     f98:	4053      	eors	r3, r2
     f9a:	b2db      	uxtb	r3, r3
     f9c:	2b00      	cmp	r3, #0
     f9e:	d001      	beq.n	fa4 <udc_iface_disable+0x64>
		return false;
     fa0:	2300      	movs	r3, #0
     fa2:	e017      	b.n	fd4 <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     fa4:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <udc_iface_disable+0xa4>)
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	2105      	movs	r1, #5
     fae:	0018      	movs	r0, r3
     fb0:	4b0d      	ldr	r3, [pc, #52]	; (fe8 <udc_iface_disable+0xa8>)
     fb2:	4798      	blx	r3
     fb4:	0003      	movs	r3, r0
     fb6:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     fb8:	68fb      	ldr	r3, [r7, #12]
     fba:	2b00      	cmp	r3, #0
     fbc:	d005      	beq.n	fca <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	789b      	ldrb	r3, [r3, #2]
     fc2:	0018      	movs	r0, r3
     fc4:	4b09      	ldr	r3, [pc, #36]	; (fec <udc_iface_disable+0xac>)
     fc6:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     fc8:	e7ef      	b.n	faa <udc_iface_disable+0x6a>
				break;
     fca:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
     fcc:	68bb      	ldr	r3, [r7, #8]
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	4798      	blx	r3
	return true;
     fd2:	2301      	movs	r3, #1
}
     fd4:	0018      	movs	r0, r3
     fd6:	46bd      	mov	sp, r7
     fd8:	b004      	add	sp, #16
     fda:	bd80      	pop	{r7, pc}
     fdc:	00000e9d 	.word	0x00000e9d
     fe0:	200007a0 	.word	0x200007a0
     fe4:	200007a4 	.word	0x200007a4
     fe8:	00000e39 	.word	0x00000e39
     fec:	000043cd 	.word	0x000043cd

00000ff0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     ff0:	b580      	push	{r7, lr}
     ff2:	b084      	sub	sp, #16
     ff4:	af00      	add	r7, sp, #0
     ff6:	0002      	movs	r2, r0
     ff8:	1dfb      	adds	r3, r7, #7
     ffa:	701a      	strb	r2, [r3, #0]
     ffc:	1dbb      	adds	r3, r7, #6
     ffe:	1c0a      	adds	r2, r1, #0
    1000:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1002:	1dbb      	adds	r3, r7, #6
    1004:	781a      	ldrb	r2, [r3, #0]
    1006:	1dfb      	adds	r3, r7, #7
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	0011      	movs	r1, r2
    100c:	0018      	movs	r0, r3
    100e:	4b1f      	ldr	r3, [pc, #124]	; (108c <udc_iface_enable+0x9c>)
    1010:	4798      	blx	r3
    1012:	0003      	movs	r3, r0
    1014:	001a      	movs	r2, r3
    1016:	2301      	movs	r3, #1
    1018:	4053      	eors	r3, r2
    101a:	b2db      	uxtb	r3, r3
    101c:	2b00      	cmp	r3, #0
    101e:	d001      	beq.n	1024 <udc_iface_enable+0x34>
		return false;
    1020:	2300      	movs	r3, #0
    1022:	e02e      	b.n	1082 <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1024:	4b1a      	ldr	r3, [pc, #104]	; (1090 <udc_iface_enable+0xa0>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    102a:	68fb      	ldr	r3, [r7, #12]
    102c:	2105      	movs	r1, #5
    102e:	0018      	movs	r0, r3
    1030:	4b18      	ldr	r3, [pc, #96]	; (1094 <udc_iface_enable+0xa4>)
    1032:	4798      	blx	r3
    1034:	0003      	movs	r3, r0
    1036:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    1038:	68fb      	ldr	r3, [r7, #12]
    103a:	2b00      	cmp	r3, #0
    103c:	d015      	beq.n	106a <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	7898      	ldrb	r0, [r3, #2]
    1042:	68fb      	ldr	r3, [r7, #12]
    1044:	78d9      	ldrb	r1, [r3, #3]
    1046:	68fb      	ldr	r3, [r7, #12]
    1048:	791a      	ldrb	r2, [r3, #4]
    104a:	795b      	ldrb	r3, [r3, #5]
    104c:	021b      	lsls	r3, r3, #8
    104e:	4313      	orrs	r3, r2
    1050:	b29b      	uxth	r3, r3
    1052:	001a      	movs	r2, r3
    1054:	4b10      	ldr	r3, [pc, #64]	; (1098 <udc_iface_enable+0xa8>)
    1056:	4798      	blx	r3
    1058:	0003      	movs	r3, r0
    105a:	001a      	movs	r2, r3
    105c:	2301      	movs	r3, #1
    105e:	4053      	eors	r3, r2
    1060:	b2db      	uxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	d0e1      	beq.n	102a <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    1066:	2300      	movs	r3, #0
    1068:	e00b      	b.n	1082 <udc_iface_enable+0x92>
			break;
    106a:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    106c:	4b0b      	ldr	r3, [pc, #44]	; (109c <udc_iface_enable+0xac>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	685a      	ldr	r2, [r3, #4]
    1072:	1dfb      	adds	r3, r7, #7
    1074:	781b      	ldrb	r3, [r3, #0]
    1076:	009b      	lsls	r3, r3, #2
    1078:	18d3      	adds	r3, r2, r3
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	4798      	blx	r3
    1080:	0003      	movs	r3, r0
}
    1082:	0018      	movs	r0, r3
    1084:	46bd      	mov	sp, r7
    1086:	b004      	add	sp, #16
    1088:	bd80      	pop	{r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00000e9d 	.word	0x00000e9d
    1090:	200007a4 	.word	0x200007a4
    1094:	00000e39 	.word	0x00000e39
    1098:	00004459 	.word	0x00004459
    109c:	200007a0 	.word	0x200007a0

000010a0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	af00      	add	r7, sp, #0
	udd_enable();
    10a4:	4b02      	ldr	r3, [pc, #8]	; (10b0 <udc_start+0x10>)
    10a6:	4798      	blx	r3
}
    10a8:	46c0      	nop			; (mov r8, r8)
    10aa:	46bd      	mov	sp, r7
    10ac:	bd80      	pop	{r7, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	0000522d 	.word	0x0000522d

000010b4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	b082      	sub	sp, #8
    10b8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    10ba:	4b12      	ldr	r3, [pc, #72]	; (1104 <udc_reset+0x50>)
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	2b00      	cmp	r3, #0
    10c0:	d015      	beq.n	10ee <udc_reset+0x3a>
		for (iface_num = 0;
    10c2:	1dfb      	adds	r3, r7, #7
    10c4:	2200      	movs	r2, #0
    10c6:	701a      	strb	r2, [r3, #0]
    10c8:	e009      	b.n	10de <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    10ca:	1dfb      	adds	r3, r7, #7
    10cc:	781b      	ldrb	r3, [r3, #0]
    10ce:	0018      	movs	r0, r3
    10d0:	4b0d      	ldr	r3, [pc, #52]	; (1108 <udc_reset+0x54>)
    10d2:	4798      	blx	r3
				iface_num++) {
    10d4:	1dfb      	adds	r3, r7, #7
    10d6:	781a      	ldrb	r2, [r3, #0]
    10d8:	1dfb      	adds	r3, r7, #7
    10da:	3201      	adds	r2, #1
    10dc:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10de:	4b0b      	ldr	r3, [pc, #44]	; (110c <udc_reset+0x58>)
    10e0:	681b      	ldr	r3, [r3, #0]
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    10e6:	1dfa      	adds	r2, r7, #7
    10e8:	7812      	ldrb	r2, [r2, #0]
    10ea:	429a      	cmp	r2, r3
    10ec:	d3ed      	bcc.n	10ca <udc_reset+0x16>
		}
	}
	udc_num_configuration = 0;
    10ee:	4b05      	ldr	r3, [pc, #20]	; (1104 <udc_reset+0x50>)
    10f0:	2200      	movs	r2, #0
    10f2:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <udc_reset+0x5c>)
    10f6:	2201      	movs	r2, #1
    10f8:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	46bd      	mov	sp, r7
    10fe:	b002      	add	sp, #8
    1100:	bd80      	pop	{r7, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	2000079c 	.word	0x2000079c
    1108:	00000f41 	.word	0x00000f41
    110c:	200007a0 	.word	0x200007a0
    1110:	20000794 	.word	0x20000794

00001114 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1114:	b580      	push	{r7, lr}
    1116:	b082      	sub	sp, #8
    1118:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    111a:	4b17      	ldr	r3, [pc, #92]	; (1178 <udc_sof_notify+0x64>)
    111c:	781b      	ldrb	r3, [r3, #0]
    111e:	2b00      	cmp	r3, #0
    1120:	d025      	beq.n	116e <udc_sof_notify+0x5a>
		for (iface_num = 0;
    1122:	1dfb      	adds	r3, r7, #7
    1124:	2200      	movs	r2, #0
    1126:	701a      	strb	r2, [r3, #0]
    1128:	e019      	b.n	115e <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    112a:	4b14      	ldr	r3, [pc, #80]	; (117c <udc_sof_notify+0x68>)
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	685a      	ldr	r2, [r3, #4]
    1130:	1dfb      	adds	r3, r7, #7
    1132:	781b      	ldrb	r3, [r3, #0]
    1134:	009b      	lsls	r3, r3, #2
    1136:	18d3      	adds	r3, r2, r3
    1138:	681b      	ldr	r3, [r3, #0]
    113a:	691b      	ldr	r3, [r3, #16]
    113c:	2b00      	cmp	r3, #0
    113e:	d009      	beq.n	1154 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1140:	4b0e      	ldr	r3, [pc, #56]	; (117c <udc_sof_notify+0x68>)
    1142:	681b      	ldr	r3, [r3, #0]
    1144:	685a      	ldr	r2, [r3, #4]
    1146:	1dfb      	adds	r3, r7, #7
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	009b      	lsls	r3, r3, #2
    114c:	18d3      	adds	r3, r2, r3
    114e:	681b      	ldr	r3, [r3, #0]
    1150:	691b      	ldr	r3, [r3, #16]
    1152:	4798      	blx	r3
				iface_num++) {
    1154:	1dfb      	adds	r3, r7, #7
    1156:	781a      	ldrb	r2, [r3, #0]
    1158:	1dfb      	adds	r3, r7, #7
    115a:	3201      	adds	r2, #1
    115c:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    115e:	4b07      	ldr	r3, [pc, #28]	; (117c <udc_sof_notify+0x68>)
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    1166:	1dfa      	adds	r2, r7, #7
    1168:	7812      	ldrb	r2, [r2, #0]
    116a:	429a      	cmp	r2, r3
    116c:	d3dd      	bcc.n	112a <udc_sof_notify+0x16>
			}
		}
	}
}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	46bd      	mov	sp, r7
    1172:	b002      	add	sp, #8
    1174:	bd80      	pop	{r7, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	2000079c 	.word	0x2000079c
    117c:	200007a0 	.word	0x200007a0

00001180 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    1180:	b580      	push	{r7, lr}
    1182:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1184:	4b07      	ldr	r3, [pc, #28]	; (11a4 <udc_req_std_dev_get_status+0x24>)
    1186:	88db      	ldrh	r3, [r3, #6]
    1188:	2b02      	cmp	r3, #2
    118a:	d001      	beq.n	1190 <udc_req_std_dev_get_status+0x10>
		return false;
    118c:	2300      	movs	r3, #0
    118e:	e005      	b.n	119c <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <udc_req_std_dev_get_status+0x28>)
    1192:	2102      	movs	r1, #2
    1194:	0018      	movs	r0, r3
    1196:	4b05      	ldr	r3, [pc, #20]	; (11ac <udc_req_std_dev_get_status+0x2c>)
    1198:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    119a:	2301      	movs	r3, #1
}
    119c:	0018      	movs	r0, r3
    119e:	46bd      	mov	sp, r7
    11a0:	bd80      	pop	{r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	20003ef4 	.word	0x20003ef4
    11a8:	20000794 	.word	0x20000794
    11ac:	00004a61 	.word	0x00004a61

000011b0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    11b4:	4b0c      	ldr	r3, [pc, #48]	; (11e8 <udc_req_std_ep_get_status+0x38>)
    11b6:	88db      	ldrh	r3, [r3, #6]
    11b8:	2b02      	cmp	r3, #2
    11ba:	d001      	beq.n	11c0 <udc_req_std_ep_get_status+0x10>
		return false;
    11bc:	2300      	movs	r3, #0
    11be:	e00f      	b.n	11e0 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    11c0:	4b09      	ldr	r3, [pc, #36]	; (11e8 <udc_req_std_ep_get_status+0x38>)
    11c2:	889b      	ldrh	r3, [r3, #4]
    11c4:	b2db      	uxtb	r3, r3
    11c6:	0018      	movs	r0, r3
    11c8:	4b08      	ldr	r3, [pc, #32]	; (11ec <udc_req_std_ep_get_status+0x3c>)
    11ca:	4798      	blx	r3
    11cc:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    11ce:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    11d0:	4b07      	ldr	r3, [pc, #28]	; (11f0 <udc_req_std_ep_get_status+0x40>)
    11d2:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <udc_req_std_ep_get_status+0x40>)
    11d6:	2102      	movs	r1, #2
    11d8:	0018      	movs	r0, r3
    11da:	4b06      	ldr	r3, [pc, #24]	; (11f4 <udc_req_std_ep_get_status+0x44>)
    11dc:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    11de:	2301      	movs	r3, #1
}
    11e0:	0018      	movs	r0, r3
    11e2:	46bd      	mov	sp, r7
    11e4:	bd80      	pop	{r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	20003ef4 	.word	0x20003ef4
    11ec:	00004601 	.word	0x00004601
    11f0:	200007a8 	.word	0x200007a8
    11f4:	00004a61 	.word	0x00004a61

000011f8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    11fc:	4b0b      	ldr	r3, [pc, #44]	; (122c <udc_req_std_dev_clear_feature+0x34>)
    11fe:	88db      	ldrh	r3, [r3, #6]
    1200:	2b00      	cmp	r3, #0
    1202:	d001      	beq.n	1208 <udc_req_std_dev_clear_feature+0x10>
		return false;
    1204:	2300      	movs	r3, #0
    1206:	e00d      	b.n	1224 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <udc_req_std_dev_clear_feature+0x34>)
    120a:	885b      	ldrh	r3, [r3, #2]
    120c:	2b01      	cmp	r3, #1
    120e:	d108      	bne.n	1222 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <udc_req_std_dev_clear_feature+0x38>)
    1212:	881b      	ldrh	r3, [r3, #0]
    1214:	2202      	movs	r2, #2
    1216:	4393      	bics	r3, r2
    1218:	b29a      	uxth	r2, r3
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <udc_req_std_dev_clear_feature+0x38>)
    121c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    121e:	2301      	movs	r3, #1
    1220:	e000      	b.n	1224 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
    1222:	2300      	movs	r3, #0
}
    1224:	0018      	movs	r0, r3
    1226:	46bd      	mov	sp, r7
    1228:	bd80      	pop	{r7, pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	20003ef4 	.word	0x20003ef4
    1230:	20000794 	.word	0x20000794

00001234 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    1234:	b580      	push	{r7, lr}
    1236:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1238:	4b0a      	ldr	r3, [pc, #40]	; (1264 <udc_req_std_ep_clear_feature+0x30>)
    123a:	88db      	ldrh	r3, [r3, #6]
    123c:	2b00      	cmp	r3, #0
    123e:	d001      	beq.n	1244 <udc_req_std_ep_clear_feature+0x10>
		return false;
    1240:	2300      	movs	r3, #0
    1242:	e00c      	b.n	125e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1244:	4b07      	ldr	r3, [pc, #28]	; (1264 <udc_req_std_ep_clear_feature+0x30>)
    1246:	885b      	ldrh	r3, [r3, #2]
    1248:	2b00      	cmp	r3, #0
    124a:	d107      	bne.n	125c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    124c:	4b05      	ldr	r3, [pc, #20]	; (1264 <udc_req_std_ep_clear_feature+0x30>)
    124e:	889b      	ldrh	r3, [r3, #4]
    1250:	b2db      	uxtb	r3, r3
    1252:	0018      	movs	r0, r3
    1254:	4b04      	ldr	r3, [pc, #16]	; (1268 <udc_req_std_ep_clear_feature+0x34>)
    1256:	4798      	blx	r3
    1258:	0003      	movs	r3, r0
    125a:	e000      	b.n	125e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    125c:	2300      	movs	r3, #0
}
    125e:	0018      	movs	r0, r3
    1260:	46bd      	mov	sp, r7
    1262:	bd80      	pop	{r7, pc}
    1264:	20003ef4 	.word	0x20003ef4
    1268:	00004685 	.word	0x00004685

0000126c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    126c:	b580      	push	{r7, lr}
    126e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1270:	4b08      	ldr	r3, [pc, #32]	; (1294 <udc_req_std_dev_set_feature+0x28>)
    1272:	88db      	ldrh	r3, [r3, #6]
    1274:	2b00      	cmp	r3, #0
    1276:	d001      	beq.n	127c <udc_req_std_dev_set_feature+0x10>
		return false;
    1278:	2300      	movs	r3, #0
    127a:	e007      	b.n	128c <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    127c:	4b05      	ldr	r3, [pc, #20]	; (1294 <udc_req_std_dev_set_feature+0x28>)
    127e:	885b      	ldrh	r3, [r3, #2]
    1280:	2b01      	cmp	r3, #1
    1282:	d002      	beq.n	128a <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    1284:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    1286:	2300      	movs	r3, #0
    1288:	e000      	b.n	128c <udc_req_std_dev_set_feature+0x20>
		return false;
    128a:	2300      	movs	r3, #0
}
    128c:	0018      	movs	r0, r3
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	20003ef4 	.word	0x20003ef4

00001298 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    1298:	b580      	push	{r7, lr}
    129a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    129c:	4b0d      	ldr	r3, [pc, #52]	; (12d4 <udc_req_std_ep_set_feature+0x3c>)
    129e:	88db      	ldrh	r3, [r3, #6]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d001      	beq.n	12a8 <udc_req_std_ep_set_feature+0x10>
		return false;
    12a4:	2300      	movs	r3, #0
    12a6:	e012      	b.n	12ce <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    12a8:	4b0a      	ldr	r3, [pc, #40]	; (12d4 <udc_req_std_ep_set_feature+0x3c>)
    12aa:	885b      	ldrh	r3, [r3, #2]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d10d      	bne.n	12cc <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <udc_req_std_ep_set_feature+0x3c>)
    12b2:	889b      	ldrh	r3, [r3, #4]
    12b4:	b2db      	uxtb	r3, r3
    12b6:	0018      	movs	r0, r3
    12b8:	4b07      	ldr	r3, [pc, #28]	; (12d8 <udc_req_std_ep_set_feature+0x40>)
    12ba:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    12bc:	4b05      	ldr	r3, [pc, #20]	; (12d4 <udc_req_std_ep_set_feature+0x3c>)
    12be:	889b      	ldrh	r3, [r3, #4]
    12c0:	b2db      	uxtb	r3, r3
    12c2:	0018      	movs	r0, r3
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <udc_req_std_ep_set_feature+0x44>)
    12c6:	4798      	blx	r3
    12c8:	0003      	movs	r3, r0
    12ca:	e000      	b.n	12ce <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    12cc:	2300      	movs	r3, #0
}
    12ce:	0018      	movs	r0, r3
    12d0:	46bd      	mov	sp, r7
    12d2:	bd80      	pop	{r7, pc}
    12d4:	20003ef4 	.word	0x20003ef4
    12d8:	00004319 	.word	0x00004319
    12dc:	0000462d 	.word	0x0000462d

000012e0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    12e4:	4b05      	ldr	r3, [pc, #20]	; (12fc <udc_valid_address+0x1c>)
    12e6:	885b      	ldrh	r3, [r3, #2]
    12e8:	b2db      	uxtb	r3, r3
    12ea:	227f      	movs	r2, #127	; 0x7f
    12ec:	4013      	ands	r3, r2
    12ee:	b2db      	uxtb	r3, r3
    12f0:	0018      	movs	r0, r3
    12f2:	4b03      	ldr	r3, [pc, #12]	; (1300 <udc_valid_address+0x20>)
    12f4:	4798      	blx	r3
}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	46bd      	mov	sp, r7
    12fa:	bd80      	pop	{r7, pc}
    12fc:	20003ef4 	.word	0x20003ef4
    1300:	00004a19 	.word	0x00004a19

00001304 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    1304:	b580      	push	{r7, lr}
    1306:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1308:	4b06      	ldr	r3, [pc, #24]	; (1324 <udc_req_std_dev_set_address+0x20>)
    130a:	88db      	ldrh	r3, [r3, #6]
    130c:	2b00      	cmp	r3, #0
    130e:	d001      	beq.n	1314 <udc_req_std_dev_set_address+0x10>
		return false;
    1310:	2300      	movs	r3, #0
    1312:	e003      	b.n	131c <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1314:	4b03      	ldr	r3, [pc, #12]	; (1324 <udc_req_std_dev_set_address+0x20>)
    1316:	4a04      	ldr	r2, [pc, #16]	; (1328 <udc_req_std_dev_set_address+0x24>)
    1318:	611a      	str	r2, [r3, #16]
	return true;
    131a:	2301      	movs	r3, #1
}
    131c:	0018      	movs	r0, r3
    131e:	46bd      	mov	sp, r7
    1320:	bd80      	pop	{r7, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20003ef4 	.word	0x20003ef4
    1328:	000012e1 	.word	0x000012e1

0000132c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    132c:	b580      	push	{r7, lr}
    132e:	b082      	sub	sp, #8
    1330:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    1332:	1dbb      	adds	r3, r7, #6
    1334:	2200      	movs	r2, #0
    1336:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1338:	4b22      	ldr	r3, [pc, #136]	; (13c4 <udc_req_std_dev_get_str_desc+0x98>)
    133a:	885b      	ldrh	r3, [r3, #2]
    133c:	001a      	movs	r2, r3
    133e:	23ff      	movs	r3, #255	; 0xff
    1340:	4013      	ands	r3, r2
    1342:	d10a      	bne.n	135a <udc_req_std_dev_get_str_desc+0x2e>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1344:	4b20      	ldr	r3, [pc, #128]	; (13c8 <udc_req_std_dev_get_str_desc+0x9c>)
    1346:	2104      	movs	r1, #4
    1348:	0018      	movs	r0, r3
    134a:	4b20      	ldr	r3, [pc, #128]	; (13cc <udc_req_std_dev_get_str_desc+0xa0>)
    134c:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    134e:	46c0      	nop			; (mov r8, r8)
		}
#endif
		return false;
	}

	if (str_length) {
    1350:	1dbb      	adds	r3, r7, #6
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	2b00      	cmp	r3, #0
    1356:	d02f      	beq.n	13b8 <udc_req_std_dev_get_str_desc+0x8c>
    1358:	e001      	b.n	135e <udc_req_std_dev_get_str_desc+0x32>
		return false;
    135a:	2300      	movs	r3, #0
    135c:	e02d      	b.n	13ba <udc_req_std_dev_get_str_desc+0x8e>
		for(i = 0; i < str_length; i++) {
    135e:	1dfb      	adds	r3, r7, #7
    1360:	2200      	movs	r2, #0
    1362:	701a      	strb	r2, [r3, #0]
    1364:	e012      	b.n	138c <udc_req_std_dev_get_str_desc+0x60>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1366:	1dfb      	adds	r3, r7, #7
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	1dfa      	adds	r2, r7, #7
    136c:	7812      	ldrb	r2, [r2, #0]
    136e:	6839      	ldr	r1, [r7, #0]
    1370:	188a      	adds	r2, r1, r2
    1372:	7812      	ldrb	r2, [r2, #0]
    1374:	b291      	uxth	r1, r2
    1376:	4a16      	ldr	r2, [pc, #88]	; (13d0 <udc_req_std_dev_get_str_desc+0xa4>)
    1378:	005b      	lsls	r3, r3, #1
    137a:	18d3      	adds	r3, r2, r3
    137c:	3302      	adds	r3, #2
    137e:	1c0a      	adds	r2, r1, #0
    1380:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
    1382:	1dfb      	adds	r3, r7, #7
    1384:	781a      	ldrb	r2, [r3, #0]
    1386:	1dfb      	adds	r3, r7, #7
    1388:	3201      	adds	r2, #1
    138a:	701a      	strb	r2, [r3, #0]
    138c:	1dfa      	adds	r2, r7, #7
    138e:	1dbb      	adds	r3, r7, #6
    1390:	7812      	ldrb	r2, [r2, #0]
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	429a      	cmp	r2, r3
    1396:	d3e6      	bcc.n	1366 <udc_req_std_dev_get_str_desc+0x3a>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1398:	1dbb      	adds	r3, r7, #6
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	3301      	adds	r3, #1
    139e:	b2db      	uxtb	r3, r3
    13a0:	18db      	adds	r3, r3, r3
    13a2:	b2da      	uxtb	r2, r3
    13a4:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <udc_req_std_dev_get_str_desc+0xa4>)
    13a6:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    13a8:	4b09      	ldr	r3, [pc, #36]	; (13d0 <udc_req_std_dev_get_str_desc+0xa4>)
    13aa:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
    13ac:	b29a      	uxth	r2, r3
    13ae:	4b08      	ldr	r3, [pc, #32]	; (13d0 <udc_req_std_dev_get_str_desc+0xa4>)
    13b0:	0011      	movs	r1, r2
    13b2:	0018      	movs	r0, r3
    13b4:	4b05      	ldr	r3, [pc, #20]	; (13cc <udc_req_std_dev_get_str_desc+0xa0>)
    13b6:	4798      	blx	r3
	}

	return true;
    13b8:	2301      	movs	r3, #1
}
    13ba:	0018      	movs	r0, r3
    13bc:	46bd      	mov	sp, r7
    13be:	b002      	add	sp, #8
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	20003ef4 	.word	0x20003ef4
    13c8:	200000b4 	.word	0x200000b4
    13cc:	00004a61 	.word	0x00004a61
    13d0:	200000b8 	.word	0x200000b8

000013d4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	b082      	sub	sp, #8
    13d8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    13da:	4b39      	ldr	r3, [pc, #228]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    13dc:	885a      	ldrh	r2, [r3, #2]
    13de:	1dfb      	adds	r3, r7, #7
    13e0:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    13e2:	4b37      	ldr	r3, [pc, #220]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    13e4:	885b      	ldrh	r3, [r3, #2]
    13e6:	0a1b      	lsrs	r3, r3, #8
    13e8:	b29b      	uxth	r3, r3
    13ea:	b2db      	uxtb	r3, r3
    13ec:	2b02      	cmp	r3, #2
    13ee:	d013      	beq.n	1418 <udc_req_std_dev_get_descriptor+0x44>
    13f0:	dc02      	bgt.n	13f8 <udc_req_std_dev_get_descriptor+0x24>
    13f2:	2b01      	cmp	r3, #1
    13f4:	d005      	beq.n	1402 <udc_req_std_dev_get_descriptor+0x2e>
    13f6:	e051      	b.n	149c <udc_req_std_dev_get_descriptor+0xc8>
    13f8:	2b03      	cmp	r3, #3
    13fa:	d044      	beq.n	1486 <udc_req_std_dev_get_descriptor+0xb2>
    13fc:	2b0f      	cmp	r3, #15
    13fe:	d02f      	beq.n	1460 <udc_req_std_dev_get_descriptor+0x8c>
    1400:	e04c      	b.n	149c <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    1402:	4b30      	ldr	r3, [pc, #192]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    1404:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    1406:	4b2f      	ldr	r3, [pc, #188]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    140c:	b29b      	uxth	r3, r3
    140e:	0019      	movs	r1, r3
    1410:	0010      	movs	r0, r2
    1412:	4b2d      	ldr	r3, [pc, #180]	; (14c8 <udc_req_std_dev_get_descriptor+0xf4>)
    1414:	4798      	blx	r3
		}
		break;
    1416:	e044      	b.n	14a2 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1418:	4b2a      	ldr	r3, [pc, #168]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	7c5b      	ldrb	r3, [r3, #17]
    141e:	1dfa      	adds	r2, r7, #7
    1420:	7812      	ldrb	r2, [r2, #0]
    1422:	429a      	cmp	r2, r3
    1424:	d301      	bcc.n	142a <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    1426:	2300      	movs	r3, #0
    1428:	e046      	b.n	14b8 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    142a:	4b26      	ldr	r3, [pc, #152]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    142c:	685a      	ldr	r2, [r3, #4]
    142e:	1dfb      	adds	r3, r7, #7
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	00db      	lsls	r3, r3, #3
    1434:	18d3      	adds	r3, r2, r3
    1436:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1438:	4b22      	ldr	r3, [pc, #136]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    143a:	685a      	ldr	r2, [r3, #4]
    143c:	1dfb      	adds	r3, r7, #7
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	00db      	lsls	r3, r3, #3
    1442:	18d3      	adds	r3, r2, r3
    1444:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    1446:	789a      	ldrb	r2, [r3, #2]
    1448:	78db      	ldrb	r3, [r3, #3]
    144a:	021b      	lsls	r3, r3, #8
    144c:	4313      	orrs	r3, r2
    144e:	b29b      	uxth	r3, r3
    1450:	0019      	movs	r1, r3
    1452:	4b1d      	ldr	r3, [pc, #116]	; (14c8 <udc_req_std_dev_get_descriptor+0xf4>)
    1454:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1456:	4b1a      	ldr	r3, [pc, #104]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    1458:	689b      	ldr	r3, [r3, #8]
    145a:	2202      	movs	r2, #2
    145c:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    145e:	e020      	b.n	14a2 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1460:	4b18      	ldr	r3, [pc, #96]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    1462:	689b      	ldr	r3, [r3, #8]
    1464:	2b00      	cmp	r3, #0
    1466:	d101      	bne.n	146c <udc_req_std_dev_get_descriptor+0x98>
			return false;
    1468:	2300      	movs	r3, #0
    146a:	e025      	b.n	14b8 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    146c:	4b15      	ldr	r3, [pc, #84]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    146e:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    1470:	4b14      	ldr	r3, [pc, #80]	; (14c4 <udc_req_std_dev_get_descriptor+0xf0>)
    1472:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1474:	789a      	ldrb	r2, [r3, #2]
    1476:	78db      	ldrb	r3, [r3, #3]
    1478:	021b      	lsls	r3, r3, #8
    147a:	4313      	orrs	r3, r2
    147c:	b29b      	uxth	r3, r3
    147e:	0019      	movs	r1, r3
    1480:	4b11      	ldr	r3, [pc, #68]	; (14c8 <udc_req_std_dev_get_descriptor+0xf4>)
    1482:	4798      	blx	r3
		break;
    1484:	e00d      	b.n	14a2 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    1486:	4b11      	ldr	r3, [pc, #68]	; (14cc <udc_req_std_dev_get_descriptor+0xf8>)
    1488:	4798      	blx	r3
    148a:	0003      	movs	r3, r0
    148c:	001a      	movs	r2, r3
    148e:	2301      	movs	r3, #1
    1490:	4053      	eors	r3, r2
    1492:	b2db      	uxtb	r3, r3
    1494:	2b00      	cmp	r3, #0
    1496:	d003      	beq.n	14a0 <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    1498:	2300      	movs	r3, #0
    149a:	e00d      	b.n	14b8 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    149c:	2300      	movs	r3, #0
    149e:	e00b      	b.n	14b8 <udc_req_std_dev_get_descriptor+0xe4>
		break;
    14a0:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    14a2:	4b07      	ldr	r3, [pc, #28]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    14a4:	88da      	ldrh	r2, [r3, #6]
    14a6:	4b06      	ldr	r3, [pc, #24]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    14a8:	899b      	ldrh	r3, [r3, #12]
    14aa:	429a      	cmp	r2, r3
    14ac:	d203      	bcs.n	14b6 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    14ae:	4b04      	ldr	r3, [pc, #16]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    14b0:	88da      	ldrh	r2, [r3, #6]
    14b2:	4b03      	ldr	r3, [pc, #12]	; (14c0 <udc_req_std_dev_get_descriptor+0xec>)
    14b4:	819a      	strh	r2, [r3, #12]
	}
	return true;
    14b6:	2301      	movs	r3, #1
}
    14b8:	0018      	movs	r0, r3
    14ba:	46bd      	mov	sp, r7
    14bc:	b002      	add	sp, #8
    14be:	bd80      	pop	{r7, pc}
    14c0:	20003ef4 	.word	0x20003ef4
    14c4:	200000a8 	.word	0x200000a8
    14c8:	00004a61 	.word	0x00004a61
    14cc:	0000132d 	.word	0x0000132d

000014d0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    14d4:	4b07      	ldr	r3, [pc, #28]	; (14f4 <udc_req_std_dev_get_configuration+0x24>)
    14d6:	88db      	ldrh	r3, [r3, #6]
    14d8:	2b01      	cmp	r3, #1
    14da:	d001      	beq.n	14e0 <udc_req_std_dev_get_configuration+0x10>
		return false;
    14dc:	2300      	movs	r3, #0
    14de:	e005      	b.n	14ec <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    14e0:	4b05      	ldr	r3, [pc, #20]	; (14f8 <udc_req_std_dev_get_configuration+0x28>)
    14e2:	2101      	movs	r1, #1
    14e4:	0018      	movs	r0, r3
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <udc_req_std_dev_get_configuration+0x2c>)
    14e8:	4798      	blx	r3
	return true;
    14ea:	2301      	movs	r3, #1
}
    14ec:	0018      	movs	r0, r3
    14ee:	46bd      	mov	sp, r7
    14f0:	bd80      	pop	{r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	20003ef4 	.word	0x20003ef4
    14f8:	2000079c 	.word	0x2000079c
    14fc:	00004a61 	.word	0x00004a61

00001500 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1506:	4b2a      	ldr	r3, [pc, #168]	; (15b0 <udc_req_std_dev_set_configuration+0xb0>)
    1508:	88db      	ldrh	r3, [r3, #6]
    150a:	2b00      	cmp	r3, #0
    150c:	d001      	beq.n	1512 <udc_req_std_dev_set_configuration+0x12>
		return false;
    150e:	2300      	movs	r3, #0
    1510:	e04a      	b.n	15a8 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1512:	4b28      	ldr	r3, [pc, #160]	; (15b4 <udc_req_std_dev_set_configuration+0xb4>)
    1514:	4798      	blx	r3
    1516:	1e03      	subs	r3, r0, #0
    1518:	d101      	bne.n	151e <udc_req_std_dev_set_configuration+0x1e>
		return false;
    151a:	2300      	movs	r3, #0
    151c:	e044      	b.n	15a8 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    151e:	4b24      	ldr	r3, [pc, #144]	; (15b0 <udc_req_std_dev_set_configuration+0xb0>)
    1520:	885b      	ldrh	r3, [r3, #2]
    1522:	001a      	movs	r2, r3
    1524:	23ff      	movs	r3, #255	; 0xff
    1526:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    1528:	4b23      	ldr	r3, [pc, #140]	; (15b8 <udc_req_std_dev_set_configuration+0xb8>)
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    152e:	429a      	cmp	r2, r3
    1530:	dd01      	ble.n	1536 <udc_req_std_dev_set_configuration+0x36>
			return false;
    1532:	2300      	movs	r3, #0
    1534:	e038      	b.n	15a8 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    1536:	4b21      	ldr	r3, [pc, #132]	; (15bc <udc_req_std_dev_set_configuration+0xbc>)
    1538:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    153a:	4b1d      	ldr	r3, [pc, #116]	; (15b0 <udc_req_std_dev_set_configuration+0xb0>)
    153c:	885b      	ldrh	r3, [r3, #2]
    153e:	b2da      	uxtb	r2, r3
    1540:	4b1f      	ldr	r3, [pc, #124]	; (15c0 <udc_req_std_dev_set_configuration+0xc0>)
    1542:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    1544:	4b1e      	ldr	r3, [pc, #120]	; (15c0 <udc_req_std_dev_set_configuration+0xc0>)
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	2b00      	cmp	r3, #0
    154a:	d101      	bne.n	1550 <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    154c:	2301      	movs	r3, #1
    154e:	e02b      	b.n	15a8 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1550:	4b19      	ldr	r3, [pc, #100]	; (15b8 <udc_req_std_dev_set_configuration+0xb8>)
    1552:	685a      	ldr	r2, [r3, #4]
    1554:	4b1a      	ldr	r3, [pc, #104]	; (15c0 <udc_req_std_dev_set_configuration+0xc0>)
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	491a      	ldr	r1, [pc, #104]	; (15c4 <udc_req_std_dev_set_configuration+0xc4>)
    155a:	468c      	mov	ip, r1
    155c:	4463      	add	r3, ip
    155e:	00db      	lsls	r3, r3, #3
    1560:	18d2      	adds	r2, r2, r3
    1562:	4b19      	ldr	r3, [pc, #100]	; (15c8 <udc_req_std_dev_set_configuration+0xc8>)
    1564:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1566:	1dfb      	adds	r3, r7, #7
    1568:	2200      	movs	r2, #0
    156a:	701a      	strb	r2, [r3, #0]
    156c:	e013      	b.n	1596 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    156e:	1dfb      	adds	r3, r7, #7
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	2100      	movs	r1, #0
    1574:	0018      	movs	r0, r3
    1576:	4b15      	ldr	r3, [pc, #84]	; (15cc <udc_req_std_dev_set_configuration+0xcc>)
    1578:	4798      	blx	r3
    157a:	0003      	movs	r3, r0
    157c:	001a      	movs	r2, r3
    157e:	2301      	movs	r3, #1
    1580:	4053      	eors	r3, r2
    1582:	b2db      	uxtb	r3, r3
    1584:	2b00      	cmp	r3, #0
    1586:	d001      	beq.n	158c <udc_req_std_dev_set_configuration+0x8c>
			return false;
    1588:	2300      	movs	r3, #0
    158a:	e00d      	b.n	15a8 <udc_req_std_dev_set_configuration+0xa8>
			iface_num++) {
    158c:	1dfb      	adds	r3, r7, #7
    158e:	781a      	ldrb	r2, [r3, #0]
    1590:	1dfb      	adds	r3, r7, #7
    1592:	3201      	adds	r2, #1
    1594:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1596:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <udc_req_std_dev_set_configuration+0xc8>)
    1598:	681b      	ldr	r3, [r3, #0]
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	791b      	ldrb	r3, [r3, #4]
    159e:	1dfa      	adds	r2, r7, #7
    15a0:	7812      	ldrb	r2, [r2, #0]
    15a2:	429a      	cmp	r2, r3
    15a4:	d3e3      	bcc.n	156e <udc_req_std_dev_set_configuration+0x6e>
		}
	}
	return true;
    15a6:	2301      	movs	r3, #1
}
    15a8:	0018      	movs	r0, r3
    15aa:	46bd      	mov	sp, r7
    15ac:	b002      	add	sp, #8
    15ae:	bd80      	pop	{r7, pc}
    15b0:	20003ef4 	.word	0x20003ef4
    15b4:	00004a45 	.word	0x00004a45
    15b8:	200000a8 	.word	0x200000a8
    15bc:	000010b5 	.word	0x000010b5
    15c0:	2000079c 	.word	0x2000079c
    15c4:	1fffffff 	.word	0x1fffffff
    15c8:	200007a0 	.word	0x200007a0
    15cc:	00000ff1 	.word	0x00000ff1

000015d0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b082      	sub	sp, #8
    15d4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    15d6:	4b21      	ldr	r3, [pc, #132]	; (165c <udc_req_std_iface_get_setting+0x8c>)
    15d8:	88db      	ldrh	r3, [r3, #6]
    15da:	2b01      	cmp	r3, #1
    15dc:	d001      	beq.n	15e2 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    15de:	2300      	movs	r3, #0
    15e0:	e038      	b.n	1654 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    15e2:	4b1f      	ldr	r3, [pc, #124]	; (1660 <udc_req_std_iface_get_setting+0x90>)
    15e4:	781b      	ldrb	r3, [r3, #0]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d101      	bne.n	15ee <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    15ea:	2300      	movs	r3, #0
    15ec:	e032      	b.n	1654 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    15ee:	4b1b      	ldr	r3, [pc, #108]	; (165c <udc_req_std_iface_get_setting+0x8c>)
    15f0:	889a      	ldrh	r2, [r3, #4]
    15f2:	1dfb      	adds	r3, r7, #7
    15f4:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    15f6:	4b1b      	ldr	r3, [pc, #108]	; (1664 <udc_req_std_iface_get_setting+0x94>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	791b      	ldrb	r3, [r3, #4]
    15fe:	1dfa      	adds	r2, r7, #7
    1600:	7812      	ldrb	r2, [r2, #0]
    1602:	429a      	cmp	r2, r3
    1604:	d301      	bcc.n	160a <udc_req_std_iface_get_setting+0x3a>
		return false;
    1606:	2300      	movs	r3, #0
    1608:	e024      	b.n	1654 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    160a:	1dfb      	adds	r3, r7, #7
    160c:	781b      	ldrb	r3, [r3, #0]
    160e:	2100      	movs	r1, #0
    1610:	0018      	movs	r0, r3
    1612:	4b15      	ldr	r3, [pc, #84]	; (1668 <udc_req_std_iface_get_setting+0x98>)
    1614:	4798      	blx	r3
    1616:	0003      	movs	r3, r0
    1618:	001a      	movs	r2, r3
    161a:	2301      	movs	r3, #1
    161c:	4053      	eors	r3, r2
    161e:	b2db      	uxtb	r3, r3
    1620:	2b00      	cmp	r3, #0
    1622:	d001      	beq.n	1628 <udc_req_std_iface_get_setting+0x58>
		return false;
    1624:	2300      	movs	r3, #0
    1626:	e015      	b.n	1654 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1628:	4b0e      	ldr	r3, [pc, #56]	; (1664 <udc_req_std_iface_get_setting+0x94>)
    162a:	681b      	ldr	r3, [r3, #0]
    162c:	685a      	ldr	r2, [r3, #4]
    162e:	1dfb      	adds	r3, r7, #7
    1630:	781b      	ldrb	r3, [r3, #0]
    1632:	009b      	lsls	r3, r3, #2
    1634:	18d3      	adds	r3, r2, r3
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    163a:	683b      	ldr	r3, [r7, #0]
    163c:	68db      	ldr	r3, [r3, #12]
    163e:	4798      	blx	r3
    1640:	0003      	movs	r3, r0
    1642:	001a      	movs	r2, r3
    1644:	4b09      	ldr	r3, [pc, #36]	; (166c <udc_req_std_iface_get_setting+0x9c>)
    1646:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1648:	4b08      	ldr	r3, [pc, #32]	; (166c <udc_req_std_iface_get_setting+0x9c>)
    164a:	2101      	movs	r1, #1
    164c:	0018      	movs	r0, r3
    164e:	4b08      	ldr	r3, [pc, #32]	; (1670 <udc_req_std_iface_get_setting+0xa0>)
    1650:	4798      	blx	r3
	return true;
    1652:	2301      	movs	r3, #1
}
    1654:	0018      	movs	r0, r3
    1656:	46bd      	mov	sp, r7
    1658:	b002      	add	sp, #8
    165a:	bd80      	pop	{r7, pc}
    165c:	20003ef4 	.word	0x20003ef4
    1660:	2000079c 	.word	0x2000079c
    1664:	200007a0 	.word	0x200007a0
    1668:	00000e9d 	.word	0x00000e9d
    166c:	20000798 	.word	0x20000798
    1670:	00004a61 	.word	0x00004a61

00001674 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    1674:	b580      	push	{r7, lr}
    1676:	b082      	sub	sp, #8
    1678:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    167a:	4b17      	ldr	r3, [pc, #92]	; (16d8 <udc_req_std_iface_set_setting+0x64>)
    167c:	88db      	ldrh	r3, [r3, #6]
    167e:	2b00      	cmp	r3, #0
    1680:	d001      	beq.n	1686 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    1682:	2300      	movs	r3, #0
    1684:	e024      	b.n	16d0 <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    1686:	4b15      	ldr	r3, [pc, #84]	; (16dc <udc_req_std_iface_set_setting+0x68>)
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	2b00      	cmp	r3, #0
    168c:	d101      	bne.n	1692 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    168e:	2300      	movs	r3, #0
    1690:	e01e      	b.n	16d0 <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1692:	4b11      	ldr	r3, [pc, #68]	; (16d8 <udc_req_std_iface_set_setting+0x64>)
    1694:	889a      	ldrh	r2, [r3, #4]
    1696:	1dfb      	adds	r3, r7, #7
    1698:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    169a:	4b0f      	ldr	r3, [pc, #60]	; (16d8 <udc_req_std_iface_set_setting+0x64>)
    169c:	885a      	ldrh	r2, [r3, #2]
    169e:	1dbb      	adds	r3, r7, #6
    16a0:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    16a2:	1dfb      	adds	r3, r7, #7
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	0018      	movs	r0, r3
    16a8:	4b0d      	ldr	r3, [pc, #52]	; (16e0 <udc_req_std_iface_set_setting+0x6c>)
    16aa:	4798      	blx	r3
    16ac:	0003      	movs	r3, r0
    16ae:	001a      	movs	r2, r3
    16b0:	2301      	movs	r3, #1
    16b2:	4053      	eors	r3, r2
    16b4:	b2db      	uxtb	r3, r3
    16b6:	2b00      	cmp	r3, #0
    16b8:	d001      	beq.n	16be <udc_req_std_iface_set_setting+0x4a>
		return false;
    16ba:	2300      	movs	r3, #0
    16bc:	e008      	b.n	16d0 <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    16be:	1dbb      	adds	r3, r7, #6
    16c0:	781a      	ldrb	r2, [r3, #0]
    16c2:	1dfb      	adds	r3, r7, #7
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	0011      	movs	r1, r2
    16c8:	0018      	movs	r0, r3
    16ca:	4b06      	ldr	r3, [pc, #24]	; (16e4 <udc_req_std_iface_set_setting+0x70>)
    16cc:	4798      	blx	r3
    16ce:	0003      	movs	r3, r0
}
    16d0:	0018      	movs	r0, r3
    16d2:	46bd      	mov	sp, r7
    16d4:	b002      	add	sp, #8
    16d6:	bd80      	pop	{r7, pc}
    16d8:	20003ef4 	.word	0x20003ef4
    16dc:	2000079c 	.word	0x2000079c
    16e0:	00000f41 	.word	0x00000f41
    16e4:	00000ff1 	.word	0x00000ff1

000016e8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    16e8:	b580      	push	{r7, lr}
    16ea:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    16ec:	4b47      	ldr	r3, [pc, #284]	; (180c <udc_reqstd+0x124>)
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	b25b      	sxtb	r3, r3
    16f2:	2b00      	cmp	r3, #0
    16f4:	da40      	bge.n	1778 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    16f6:	4b45      	ldr	r3, [pc, #276]	; (180c <udc_reqstd+0x124>)
    16f8:	88db      	ldrh	r3, [r3, #6]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d101      	bne.n	1702 <udc_reqstd+0x1a>
			return false; // Error for USB host
    16fe:	2300      	movs	r3, #0
    1700:	e081      	b.n	1806 <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1702:	4b42      	ldr	r3, [pc, #264]	; (180c <udc_reqstd+0x124>)
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	001a      	movs	r2, r3
    1708:	231f      	movs	r3, #31
    170a:	4013      	ands	r3, r2
    170c:	d114      	bne.n	1738 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    170e:	4b3f      	ldr	r3, [pc, #252]	; (180c <udc_reqstd+0x124>)
    1710:	785b      	ldrb	r3, [r3, #1]
    1712:	2b06      	cmp	r3, #6
    1714:	d008      	beq.n	1728 <udc_reqstd+0x40>
    1716:	2b08      	cmp	r3, #8
    1718:	d00a      	beq.n	1730 <udc_reqstd+0x48>
    171a:	2b00      	cmp	r3, #0
    171c:	d000      	beq.n	1720 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    171e:	e00b      	b.n	1738 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
    1720:	4b3b      	ldr	r3, [pc, #236]	; (1810 <udc_reqstd+0x128>)
    1722:	4798      	blx	r3
    1724:	0003      	movs	r3, r0
    1726:	e06e      	b.n	1806 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_descriptor();
    1728:	4b3a      	ldr	r3, [pc, #232]	; (1814 <udc_reqstd+0x12c>)
    172a:	4798      	blx	r3
    172c:	0003      	movs	r3, r0
    172e:	e06a      	b.n	1806 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_configuration();
    1730:	4b39      	ldr	r3, [pc, #228]	; (1818 <udc_reqstd+0x130>)
    1732:	4798      	blx	r3
    1734:	0003      	movs	r3, r0
    1736:	e066      	b.n	1806 <udc_reqstd+0x11e>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1738:	4b34      	ldr	r3, [pc, #208]	; (180c <udc_reqstd+0x124>)
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	001a      	movs	r2, r3
    173e:	231f      	movs	r3, #31
    1740:	4013      	ands	r3, r2
    1742:	2b01      	cmp	r3, #1
    1744:	d108      	bne.n	1758 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1746:	4b31      	ldr	r3, [pc, #196]	; (180c <udc_reqstd+0x124>)
    1748:	785b      	ldrb	r3, [r3, #1]
    174a:	2b0a      	cmp	r3, #10
    174c:	d000      	beq.n	1750 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    174e:	e003      	b.n	1758 <udc_reqstd+0x70>
				return udc_req_std_iface_get_setting();
    1750:	4b32      	ldr	r3, [pc, #200]	; (181c <udc_reqstd+0x134>)
    1752:	4798      	blx	r3
    1754:	0003      	movs	r3, r0
    1756:	e056      	b.n	1806 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1758:	4b2c      	ldr	r3, [pc, #176]	; (180c <udc_reqstd+0x124>)
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	001a      	movs	r2, r3
    175e:	231f      	movs	r3, #31
    1760:	4013      	ands	r3, r2
    1762:	2b02      	cmp	r3, #2
    1764:	d14e      	bne.n	1804 <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1766:	4b29      	ldr	r3, [pc, #164]	; (180c <udc_reqstd+0x124>)
    1768:	785b      	ldrb	r3, [r3, #1]
    176a:	2b00      	cmp	r3, #0
    176c:	d000      	beq.n	1770 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    176e:	e049      	b.n	1804 <udc_reqstd+0x11c>
				return udc_req_std_ep_get_status();
    1770:	4b2b      	ldr	r3, [pc, #172]	; (1820 <udc_reqstd+0x138>)
    1772:	4798      	blx	r3
    1774:	0003      	movs	r3, r0
    1776:	e046      	b.n	1806 <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1778:	4b24      	ldr	r3, [pc, #144]	; (180c <udc_reqstd+0x124>)
    177a:	781b      	ldrb	r3, [r3, #0]
    177c:	001a      	movs	r2, r3
    177e:	231f      	movs	r3, #31
    1780:	4013      	ands	r3, r2
    1782:	d119      	bne.n	17b8 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1784:	4b21      	ldr	r3, [pc, #132]	; (180c <udc_reqstd+0x124>)
    1786:	785b      	ldrb	r3, [r3, #1]
    1788:	2b09      	cmp	r3, #9
    178a:	d814      	bhi.n	17b6 <udc_reqstd+0xce>
    178c:	009a      	lsls	r2, r3, #2
    178e:	4b25      	ldr	r3, [pc, #148]	; (1824 <udc_reqstd+0x13c>)
    1790:	18d3      	adds	r3, r2, r3
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    1796:	4b24      	ldr	r3, [pc, #144]	; (1828 <udc_reqstd+0x140>)
    1798:	4798      	blx	r3
    179a:	0003      	movs	r3, r0
    179c:	e033      	b.n	1806 <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    179e:	4b23      	ldr	r3, [pc, #140]	; (182c <udc_reqstd+0x144>)
    17a0:	4798      	blx	r3
    17a2:	0003      	movs	r3, r0
    17a4:	e02f      	b.n	1806 <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    17a6:	4b22      	ldr	r3, [pc, #136]	; (1830 <udc_reqstd+0x148>)
    17a8:	4798      	blx	r3
    17aa:	0003      	movs	r3, r0
    17ac:	e02b      	b.n	1806 <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    17ae:	4b21      	ldr	r3, [pc, #132]	; (1834 <udc_reqstd+0x14c>)
    17b0:	4798      	blx	r3
    17b2:	0003      	movs	r3, r0
    17b4:	e027      	b.n	1806 <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    17b6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    17b8:	4b14      	ldr	r3, [pc, #80]	; (180c <udc_reqstd+0x124>)
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	001a      	movs	r2, r3
    17be:	231f      	movs	r3, #31
    17c0:	4013      	ands	r3, r2
    17c2:	2b01      	cmp	r3, #1
    17c4:	d108      	bne.n	17d8 <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    17c6:	4b11      	ldr	r3, [pc, #68]	; (180c <udc_reqstd+0x124>)
    17c8:	785b      	ldrb	r3, [r3, #1]
    17ca:	2b0b      	cmp	r3, #11
    17cc:	d000      	beq.n	17d0 <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    17ce:	e003      	b.n	17d8 <udc_reqstd+0xf0>
				return udc_req_std_iface_set_setting();
    17d0:	4b19      	ldr	r3, [pc, #100]	; (1838 <udc_reqstd+0x150>)
    17d2:	4798      	blx	r3
    17d4:	0003      	movs	r3, r0
    17d6:	e016      	b.n	1806 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17d8:	4b0c      	ldr	r3, [pc, #48]	; (180c <udc_reqstd+0x124>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	001a      	movs	r2, r3
    17de:	231f      	movs	r3, #31
    17e0:	4013      	ands	r3, r2
    17e2:	2b02      	cmp	r3, #2
    17e4:	d10e      	bne.n	1804 <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    17e6:	4b09      	ldr	r3, [pc, #36]	; (180c <udc_reqstd+0x124>)
    17e8:	785b      	ldrb	r3, [r3, #1]
    17ea:	2b01      	cmp	r3, #1
    17ec:	d002      	beq.n	17f4 <udc_reqstd+0x10c>
    17ee:	2b03      	cmp	r3, #3
    17f0:	d004      	beq.n	17fc <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    17f2:	e007      	b.n	1804 <udc_reqstd+0x11c>
				return udc_req_std_ep_clear_feature();
    17f4:	4b11      	ldr	r3, [pc, #68]	; (183c <udc_reqstd+0x154>)
    17f6:	4798      	blx	r3
    17f8:	0003      	movs	r3, r0
    17fa:	e004      	b.n	1806 <udc_reqstd+0x11e>
				return udc_req_std_ep_set_feature();
    17fc:	4b10      	ldr	r3, [pc, #64]	; (1840 <udc_reqstd+0x158>)
    17fe:	4798      	blx	r3
    1800:	0003      	movs	r3, r0
    1802:	e000      	b.n	1806 <udc_reqstd+0x11e>
			}
		}
#endif
	}
	return false;
    1804:	2300      	movs	r3, #0
}
    1806:	0018      	movs	r0, r3
    1808:	46bd      	mov	sp, r7
    180a:	bd80      	pop	{r7, pc}
    180c:	20003ef4 	.word	0x20003ef4
    1810:	00001181 	.word	0x00001181
    1814:	000013d5 	.word	0x000013d5
    1818:	000014d1 	.word	0x000014d1
    181c:	000015d1 	.word	0x000015d1
    1820:	000011b1 	.word	0x000011b1
    1824:	00013798 	.word	0x00013798
    1828:	00001305 	.word	0x00001305
    182c:	000011f9 	.word	0x000011f9
    1830:	0000126d 	.word	0x0000126d
    1834:	00001501 	.word	0x00001501
    1838:	00001675 	.word	0x00001675
    183c:	00001235 	.word	0x00001235
    1840:	00001299 	.word	0x00001299

00001844 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    1844:	b580      	push	{r7, lr}
    1846:	b082      	sub	sp, #8
    1848:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    184a:	4b24      	ldr	r3, [pc, #144]	; (18dc <udc_req_iface+0x98>)
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	2b00      	cmp	r3, #0
    1850:	d101      	bne.n	1856 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    1852:	2300      	movs	r3, #0
    1854:	e03d      	b.n	18d2 <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1856:	4b22      	ldr	r3, [pc, #136]	; (18e0 <udc_req_iface+0x9c>)
    1858:	889a      	ldrh	r2, [r3, #4]
    185a:	1dfb      	adds	r3, r7, #7
    185c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    185e:	4b21      	ldr	r3, [pc, #132]	; (18e4 <udc_req_iface+0xa0>)
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	791b      	ldrb	r3, [r3, #4]
    1866:	1dfa      	adds	r2, r7, #7
    1868:	7812      	ldrb	r2, [r2, #0]
    186a:	429a      	cmp	r2, r3
    186c:	d301      	bcc.n	1872 <udc_req_iface+0x2e>
		return false;
    186e:	2300      	movs	r3, #0
    1870:	e02f      	b.n	18d2 <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1872:	1dfb      	adds	r3, r7, #7
    1874:	781b      	ldrb	r3, [r3, #0]
    1876:	2100      	movs	r1, #0
    1878:	0018      	movs	r0, r3
    187a:	4b1b      	ldr	r3, [pc, #108]	; (18e8 <udc_req_iface+0xa4>)
    187c:	4798      	blx	r3
    187e:	0003      	movs	r3, r0
    1880:	001a      	movs	r2, r3
    1882:	2301      	movs	r3, #1
    1884:	4053      	eors	r3, r2
    1886:	b2db      	uxtb	r3, r3
    1888:	2b00      	cmp	r3, #0
    188a:	d001      	beq.n	1890 <udc_req_iface+0x4c>
		return false;
    188c:	2300      	movs	r3, #0
    188e:	e020      	b.n	18d2 <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1890:	4b14      	ldr	r3, [pc, #80]	; (18e4 <udc_req_iface+0xa0>)
    1892:	681b      	ldr	r3, [r3, #0]
    1894:	685a      	ldr	r2, [r3, #4]
    1896:	1dfb      	adds	r3, r7, #7
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	009b      	lsls	r3, r3, #2
    189c:	18d3      	adds	r3, r2, r3
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18a2:	683b      	ldr	r3, [r7, #0]
    18a4:	68db      	ldr	r3, [r3, #12]
    18a6:	4798      	blx	r3
    18a8:	0003      	movs	r3, r0
    18aa:	001a      	movs	r2, r3
    18ac:	1dfb      	adds	r3, r7, #7
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	0011      	movs	r1, r2
    18b2:	0018      	movs	r0, r3
    18b4:	4b0c      	ldr	r3, [pc, #48]	; (18e8 <udc_req_iface+0xa4>)
    18b6:	4798      	blx	r3
    18b8:	0003      	movs	r3, r0
    18ba:	001a      	movs	r2, r3
    18bc:	2301      	movs	r3, #1
    18be:	4053      	eors	r3, r2
    18c0:	b2db      	uxtb	r3, r3
    18c2:	2b00      	cmp	r3, #0
    18c4:	d001      	beq.n	18ca <udc_req_iface+0x86>
		return false;
    18c6:	2300      	movs	r3, #0
    18c8:	e003      	b.n	18d2 <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    18ca:	683b      	ldr	r3, [r7, #0]
    18cc:	689b      	ldr	r3, [r3, #8]
    18ce:	4798      	blx	r3
    18d0:	0003      	movs	r3, r0
}
    18d2:	0018      	movs	r0, r3
    18d4:	46bd      	mov	sp, r7
    18d6:	b002      	add	sp, #8
    18d8:	bd80      	pop	{r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	2000079c 	.word	0x2000079c
    18e0:	20003ef4 	.word	0x20003ef4
    18e4:	200007a0 	.word	0x200007a0
    18e8:	00000e9d 	.word	0x00000e9d

000018ec <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    18f2:	4b22      	ldr	r3, [pc, #136]	; (197c <udc_req_ep+0x90>)
    18f4:	781b      	ldrb	r3, [r3, #0]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d101      	bne.n	18fe <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    18fa:	2300      	movs	r3, #0
    18fc:	e039      	b.n	1972 <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18fe:	4b20      	ldr	r3, [pc, #128]	; (1980 <udc_req_ep+0x94>)
    1900:	889a      	ldrh	r2, [r3, #4]
    1902:	1dfb      	adds	r3, r7, #7
    1904:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1906:	1dfb      	adds	r3, r7, #7
    1908:	2200      	movs	r2, #0
    190a:	701a      	strb	r2, [r3, #0]
    190c:	e028      	b.n	1960 <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    190e:	4b1d      	ldr	r3, [pc, #116]	; (1984 <udc_req_ep+0x98>)
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	685a      	ldr	r2, [r3, #4]
    1914:	1dfb      	adds	r3, r7, #7
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	009b      	lsls	r3, r3, #2
    191a:	18d3      	adds	r3, r2, r3
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	68db      	ldr	r3, [r3, #12]
    1924:	4798      	blx	r3
    1926:	0003      	movs	r3, r0
    1928:	001a      	movs	r2, r3
    192a:	1dfb      	adds	r3, r7, #7
    192c:	781b      	ldrb	r3, [r3, #0]
    192e:	0011      	movs	r1, r2
    1930:	0018      	movs	r0, r3
    1932:	4b15      	ldr	r3, [pc, #84]	; (1988 <udc_req_ep+0x9c>)
    1934:	4798      	blx	r3
    1936:	0003      	movs	r3, r0
    1938:	001a      	movs	r2, r3
    193a:	2301      	movs	r3, #1
    193c:	4053      	eors	r3, r2
    193e:	b2db      	uxtb	r3, r3
    1940:	2b00      	cmp	r3, #0
    1942:	d001      	beq.n	1948 <udc_req_ep+0x5c>
			return false;
    1944:	2300      	movs	r3, #0
    1946:	e014      	b.n	1972 <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1948:	683b      	ldr	r3, [r7, #0]
    194a:	689b      	ldr	r3, [r3, #8]
    194c:	4798      	blx	r3
    194e:	1e03      	subs	r3, r0, #0
    1950:	d001      	beq.n	1956 <udc_req_ep+0x6a>
			return true;
    1952:	2301      	movs	r3, #1
    1954:	e00d      	b.n	1972 <udc_req_ep+0x86>
			iface_num++) {
    1956:	1dfb      	adds	r3, r7, #7
    1958:	781a      	ldrb	r2, [r3, #0]
    195a:	1dfb      	adds	r3, r7, #7
    195c:	3201      	adds	r2, #1
    195e:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <udc_req_ep+0x98>)
    1962:	681b      	ldr	r3, [r3, #0]
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	791b      	ldrb	r3, [r3, #4]
    1968:	1dfa      	adds	r2, r7, #7
    196a:	7812      	ldrb	r2, [r2, #0]
    196c:	429a      	cmp	r2, r3
    196e:	d3ce      	bcc.n	190e <udc_req_ep+0x22>
		}
	}
	return false;
    1970:	2300      	movs	r3, #0
}
    1972:	0018      	movs	r0, r3
    1974:	46bd      	mov	sp, r7
    1976:	b002      	add	sp, #8
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	2000079c 	.word	0x2000079c
    1980:	20003ef4 	.word	0x20003ef4
    1984:	200007a0 	.word	0x200007a0
    1988:	00000e9d 	.word	0x00000e9d

0000198c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    198c:	b580      	push	{r7, lr}
    198e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1990:	4b1e      	ldr	r3, [pc, #120]	; (1a0c <udc_process_setup+0x80>)
    1992:	2200      	movs	r2, #0
    1994:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1996:	4b1d      	ldr	r3, [pc, #116]	; (1a0c <udc_process_setup+0x80>)
    1998:	2200      	movs	r2, #0
    199a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    199c:	4b1b      	ldr	r3, [pc, #108]	; (1a0c <udc_process_setup+0x80>)
    199e:	2200      	movs	r2, #0
    19a0:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    19a2:	4b1a      	ldr	r3, [pc, #104]	; (1a0c <udc_process_setup+0x80>)
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	b25b      	sxtb	r3, r3
    19a8:	2b00      	cmp	r3, #0
    19aa:	da05      	bge.n	19b8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    19ac:	4b17      	ldr	r3, [pc, #92]	; (1a0c <udc_process_setup+0x80>)
    19ae:	88db      	ldrh	r3, [r3, #6]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d101      	bne.n	19b8 <udc_process_setup+0x2c>
			return false; // Error from USB host
    19b4:	2300      	movs	r3, #0
    19b6:	e026      	b.n	1a06 <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19b8:	4b14      	ldr	r3, [pc, #80]	; (1a0c <udc_process_setup+0x80>)
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	001a      	movs	r2, r3
    19be:	2360      	movs	r3, #96	; 0x60
    19c0:	4013      	ands	r3, r2
    19c2:	d105      	bne.n	19d0 <udc_process_setup+0x44>
		if (udc_reqstd()) {
    19c4:	4b12      	ldr	r3, [pc, #72]	; (1a10 <udc_process_setup+0x84>)
    19c6:	4798      	blx	r3
    19c8:	1e03      	subs	r3, r0, #0
    19ca:	d001      	beq.n	19d0 <udc_process_setup+0x44>
			return true;
    19cc:	2301      	movs	r3, #1
    19ce:	e01a      	b.n	1a06 <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    19d0:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <udc_process_setup+0x80>)
    19d2:	781b      	ldrb	r3, [r3, #0]
    19d4:	001a      	movs	r2, r3
    19d6:	231f      	movs	r3, #31
    19d8:	4013      	ands	r3, r2
    19da:	2b01      	cmp	r3, #1
    19dc:	d105      	bne.n	19ea <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    19de:	4b0d      	ldr	r3, [pc, #52]	; (1a14 <udc_process_setup+0x88>)
    19e0:	4798      	blx	r3
    19e2:	1e03      	subs	r3, r0, #0
    19e4:	d001      	beq.n	19ea <udc_process_setup+0x5e>
			return true;
    19e6:	2301      	movs	r3, #1
    19e8:	e00d      	b.n	1a06 <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    19ea:	4b08      	ldr	r3, [pc, #32]	; (1a0c <udc_process_setup+0x80>)
    19ec:	781b      	ldrb	r3, [r3, #0]
    19ee:	001a      	movs	r2, r3
    19f0:	231f      	movs	r3, #31
    19f2:	4013      	ands	r3, r2
    19f4:	2b02      	cmp	r3, #2
    19f6:	d105      	bne.n	1a04 <udc_process_setup+0x78>
		if (udc_req_ep()) {
    19f8:	4b07      	ldr	r3, [pc, #28]	; (1a18 <udc_process_setup+0x8c>)
    19fa:	4798      	blx	r3
    19fc:	1e03      	subs	r3, r0, #0
    19fe:	d001      	beq.n	1a04 <udc_process_setup+0x78>
			return true;
    1a00:	2301      	movs	r3, #1
    1a02:	e000      	b.n	1a06 <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1a04:	2300      	movs	r3, #0
#endif
}
    1a06:	0018      	movs	r0, r3
    1a08:	46bd      	mov	sp, r7
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	20003ef4 	.word	0x20003ef4
    1a10:	000016e9 	.word	0x000016e9
    1a14:	00001845 	.word	0x00001845
    1a18:	000018ed 	.word	0x000018ed

00001a1c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	2200      	movs	r2, #0
    1a28:	701a      	strb	r2, [r3, #0]
}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	46bd      	mov	sp, r7
    1a2e:	b002      	add	sp, #8
    1a30:	bd80      	pop	{r7, pc}
	...

00001a34 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	b082      	sub	sp, #8
    1a38:	af00      	add	r7, sp, #0
    1a3a:	0002      	movs	r2, r0
    1a3c:	6039      	str	r1, [r7, #0]
    1a3e:	1dfb      	adds	r3, r7, #7
    1a40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a42:	1dfb      	adds	r3, r7, #7
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	2b01      	cmp	r3, #1
    1a48:	d00a      	beq.n	1a60 <system_apb_clock_set_mask+0x2c>
    1a4a:	2b02      	cmp	r3, #2
    1a4c:	d00f      	beq.n	1a6e <system_apb_clock_set_mask+0x3a>
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d114      	bne.n	1a7c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1a52:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a54:	4a0d      	ldr	r2, [pc, #52]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a56:	6991      	ldr	r1, [r2, #24]
    1a58:	683a      	ldr	r2, [r7, #0]
    1a5a:	430a      	orrs	r2, r1
    1a5c:	619a      	str	r2, [r3, #24]
			break;
    1a5e:	e00f      	b.n	1a80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1a60:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a62:	4a0a      	ldr	r2, [pc, #40]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a64:	69d1      	ldr	r1, [r2, #28]
    1a66:	683a      	ldr	r2, [r7, #0]
    1a68:	430a      	orrs	r2, r1
    1a6a:	61da      	str	r2, [r3, #28]
			break;
    1a6c:	e008      	b.n	1a80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1a6e:	4b07      	ldr	r3, [pc, #28]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a70:	4a06      	ldr	r2, [pc, #24]	; (1a8c <system_apb_clock_set_mask+0x58>)
    1a72:	6a11      	ldr	r1, [r2, #32]
    1a74:	683a      	ldr	r2, [r7, #0]
    1a76:	430a      	orrs	r2, r1
    1a78:	621a      	str	r2, [r3, #32]
			break;
    1a7a:	e001      	b.n	1a80 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1a7c:	2317      	movs	r3, #23
    1a7e:	e000      	b.n	1a82 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1a80:	2300      	movs	r3, #0
}
    1a82:	0018      	movs	r0, r3
    1a84:	46bd      	mov	sp, r7
    1a86:	b002      	add	sp, #8
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	40000400 	.word	0x40000400

00001a90 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b082      	sub	sp, #8
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	2280      	movs	r2, #128	; 0x80
    1a9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	2200      	movs	r2, #0
    1aa2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	2201      	movs	r2, #1
    1aa8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	2200      	movs	r2, #0
    1aae:	70da      	strb	r2, [r3, #3]
}
    1ab0:	46c0      	nop			; (mov r8, r8)
    1ab2:	46bd      	mov	sp, r7
    1ab4:	b002      	add	sp, #8
    1ab6:	bd80      	pop	{r7, pc}

00001ab8 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b082      	sub	sp, #8
    1abc:	af00      	add	r7, sp, #0
    1abe:	0002      	movs	r2, r0
    1ac0:	1dfb      	adds	r3, r7, #7
    1ac2:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    1ac4:	1dfb      	adds	r3, r7, #7
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d002      	beq.n	1ad2 <system_voltage_reference_enable+0x1a>
    1acc:	2b01      	cmp	r3, #1
    1ace:	d007      	beq.n	1ae0 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    1ad0:	e00d      	b.n	1aee <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <system_voltage_reference_enable+0x3c>)
    1ad4:	4a07      	ldr	r2, [pc, #28]	; (1af4 <system_voltage_reference_enable+0x3c>)
    1ad6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1ad8:	2102      	movs	r1, #2
    1ada:	430a      	orrs	r2, r1
    1adc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    1ade:	e006      	b.n	1aee <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1ae0:	4b04      	ldr	r3, [pc, #16]	; (1af4 <system_voltage_reference_enable+0x3c>)
    1ae2:	4a04      	ldr	r2, [pc, #16]	; (1af4 <system_voltage_reference_enable+0x3c>)
    1ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1ae6:	2104      	movs	r1, #4
    1ae8:	430a      	orrs	r2, r1
    1aea:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    1aec:	46c0      	nop			; (mov r8, r8)
	}
}
    1aee:	46bd      	mov	sp, r7
    1af0:	b002      	add	sp, #8
    1af2:	bd80      	pop	{r7, pc}
    1af4:	40000800 	.word	0x40000800

00001af8 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b084      	sub	sp, #16
    1afc:	af00      	add	r7, sp, #0
    1afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b06:	68fb      	ldr	r3, [r7, #12]
    1b08:	7e5b      	ldrb	r3, [r3, #25]
    1b0a:	b2db      	uxtb	r3, r3
    1b0c:	b25b      	sxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	da01      	bge.n	1b16 <adc_is_syncing+0x1e>
		return true;
    1b12:	2301      	movs	r3, #1
    1b14:	e000      	b.n	1b18 <adc_is_syncing+0x20>
	}

	return false;
    1b16:	2300      	movs	r3, #0
}
    1b18:	0018      	movs	r0, r3
    1b1a:	46bd      	mov	sp, r7
    1b1c:	b004      	add	sp, #16
    1b1e:	bd80      	pop	{r7, pc}

00001b20 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	2200      	movs	r2, #0
    1b2c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	2200      	movs	r2, #0
    1b32:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	2200      	movs	r2, #0
    1b38:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	2200      	movs	r2, #0
    1b3e:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1b40:	687b      	ldr	r3, [r7, #4]
    1b42:	2200      	movs	r2, #0
    1b44:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	2200      	movs	r2, #0
    1b4a:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	2200      	movs	r2, #0
    1b50:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	2200      	movs	r2, #0
    1b56:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	2200      	movs	r2, #0
    1b5c:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	22c0      	movs	r2, #192	; 0xc0
    1b62:	0152      	lsls	r2, r2, #5
    1b64:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	2200      	movs	r2, #0
    1b6a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	2200      	movs	r2, #0
    1b70:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	2200      	movs	r2, #0
    1b76:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	2200      	movs	r2, #0
    1b7c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	2200      	movs	r2, #0
    1b82:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	222a      	movs	r2, #42	; 0x2a
    1b88:	2100      	movs	r1, #0
    1b8a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	2200      	movs	r2, #0
    1b90:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	2200      	movs	r2, #0
    1b96:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	2224      	movs	r2, #36	; 0x24
    1b9c:	2100      	movs	r1, #0
    1b9e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	2200      	movs	r2, #0
    1ba4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	2200      	movs	r2, #0
    1baa:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    1bac:	687b      	ldr	r3, [r7, #4]
    1bae:	2200      	movs	r2, #0
    1bb0:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	222b      	movs	r2, #43	; 0x2b
    1bb6:	2100      	movs	r1, #0
    1bb8:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	222c      	movs	r2, #44	; 0x2c
    1bbe:	2100      	movs	r1, #0
    1bc0:	5499      	strb	r1, [r3, r2]
}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	46bd      	mov	sp, r7
    1bc6:	b002      	add	sp, #8
    1bc8:	bd80      	pop	{r7, pc}
	...

00001bcc <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b098      	sub	sp, #96	; 0x60
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1bd4:	230c      	movs	r3, #12
    1bd6:	18fa      	adds	r2, r7, r3
    1bd8:	4b15      	ldr	r3, [pc, #84]	; (1c30 <_adc_configure_ain_pin+0x64>)
    1bda:	0010      	movs	r0, r2
    1bdc:	0019      	movs	r1, r3
    1bde:	2350      	movs	r3, #80	; 0x50
    1be0:	001a      	movs	r2, r3
    1be2:	4b14      	ldr	r3, [pc, #80]	; (1c34 <_adc_configure_ain_pin+0x68>)
    1be4:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    1be6:	4b14      	ldr	r3, [pc, #80]	; (1c38 <_adc_configure_ain_pin+0x6c>)
    1be8:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2b13      	cmp	r3, #19
    1bee:	d81a      	bhi.n	1c26 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1bf0:	230c      	movs	r3, #12
    1bf2:	18fb      	adds	r3, r7, r3
    1bf4:	687a      	ldr	r2, [r7, #4]
    1bf6:	0092      	lsls	r2, r2, #2
    1bf8:	58d3      	ldr	r3, [r2, r3]
    1bfa:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    1bfc:	2308      	movs	r3, #8
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	0018      	movs	r0, r3
    1c02:	4b0e      	ldr	r3, [pc, #56]	; (1c3c <_adc_configure_ain_pin+0x70>)
    1c04:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1c06:	2308      	movs	r3, #8
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	2200      	movs	r2, #0
    1c0c:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    1c0e:	2308      	movs	r3, #8
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	2201      	movs	r2, #1
    1c14:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	2208      	movs	r2, #8
    1c1c:	18ba      	adds	r2, r7, r2
    1c1e:	0011      	movs	r1, r2
    1c20:	0018      	movs	r0, r3
    1c22:	4b07      	ldr	r3, [pc, #28]	; (1c40 <_adc_configure_ain_pin+0x74>)
    1c24:	4798      	blx	r3
	}
}
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	46bd      	mov	sp, r7
    1c2a:	b018      	add	sp, #96	; 0x60
    1c2c:	bd80      	pop	{r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	000137c0 	.word	0x000137c0
    1c34:	00012ed1 	.word	0x00012ed1
    1c38:	0000ffff 	.word	0x0000ffff
    1c3c:	00001a91 	.word	0x00001a91
    1c40:	0000f931 	.word	0x0000f931

00001c44 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    1c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c46:	b089      	sub	sp, #36	; 0x24
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
    1c4c:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    1c4e:	231f      	movs	r3, #31
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	2200      	movs	r2, #0
    1c54:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    1c56:	2310      	movs	r3, #16
    1c58:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1c5a:	2317      	movs	r3, #23
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	2200      	movs	r2, #0
    1c60:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1c68:	230c      	movs	r3, #12
    1c6a:	18fb      	adds	r3, r7, r3
    1c6c:	0018      	movs	r0, r3
    1c6e:	4bce      	ldr	r3, [pc, #824]	; (1fa8 <_adc_set_config+0x364>)
    1c70:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    1c72:	683b      	ldr	r3, [r7, #0]
    1c74:	781a      	ldrb	r2, [r3, #0]
    1c76:	230c      	movs	r3, #12
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1c7c:	230c      	movs	r3, #12
    1c7e:	18fb      	adds	r3, r7, r3
    1c80:	0019      	movs	r1, r3
    1c82:	201e      	movs	r0, #30
    1c84:	4bc9      	ldr	r3, [pc, #804]	; (1fac <_adc_set_config+0x368>)
    1c86:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1c88:	201e      	movs	r0, #30
    1c8a:	4bc9      	ldr	r3, [pc, #804]	; (1fb0 <_adc_set_config+0x36c>)
    1c8c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    1c8e:	683b      	ldr	r3, [r7, #0]
    1c90:	222c      	movs	r2, #44	; 0x2c
    1c92:	5c9b      	ldrb	r3, [r3, r2]
    1c94:	2b00      	cmp	r3, #0
    1c96:	d040      	beq.n	1d1a <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1c98:	2316      	movs	r3, #22
    1c9a:	18fb      	adds	r3, r7, r3
    1c9c:	683a      	ldr	r2, [r7, #0]
    1c9e:	212b      	movs	r1, #43	; 0x2b
    1ca0:	5c52      	ldrb	r2, [r2, r1]
    1ca2:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    1ca8:	2315      	movs	r3, #21
    1caa:	18fb      	adds	r3, r7, r3
    1cac:	2216      	movs	r2, #22
    1cae:	18ba      	adds	r2, r7, r2
    1cb0:	7812      	ldrb	r2, [r2, #0]
    1cb2:	188a      	adds	r2, r1, r2
    1cb4:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	222c      	movs	r2, #44	; 0x2c
    1cba:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    1cbc:	230f      	movs	r3, #15
    1cbe:	18fb      	adds	r3, r7, r3
    1cc0:	2215      	movs	r2, #21
    1cc2:	18ba      	adds	r2, r7, r2
    1cc4:	7812      	ldrb	r2, [r2, #0]
    1cc6:	188a      	adds	r2, r1, r2
    1cc8:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    1cca:	e018      	b.n	1cfe <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1ccc:	2316      	movs	r3, #22
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	781b      	ldrb	r3, [r3, #0]
    1cd2:	220f      	movs	r2, #15
    1cd4:	4013      	ands	r3, r2
    1cd6:	683a      	ldr	r2, [r7, #0]
    1cd8:	7b12      	ldrb	r2, [r2, #12]
    1cda:	189b      	adds	r3, r3, r2
    1cdc:	0018      	movs	r0, r3
    1cde:	4bb5      	ldr	r3, [pc, #724]	; (1fb4 <_adc_set_config+0x370>)
    1ce0:	4798      	blx	r3
			start_pin++;
    1ce2:	2315      	movs	r3, #21
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	781a      	ldrb	r2, [r3, #0]
    1ce8:	2315      	movs	r3, #21
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	3201      	adds	r2, #1
    1cee:	701a      	strb	r2, [r3, #0]
			offset++;
    1cf0:	2316      	movs	r3, #22
    1cf2:	18fb      	adds	r3, r7, r3
    1cf4:	781a      	ldrb	r2, [r3, #0]
    1cf6:	2316      	movs	r3, #22
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	3201      	adds	r2, #1
    1cfc:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    1cfe:	2315      	movs	r3, #21
    1d00:	18fa      	adds	r2, r7, r3
    1d02:	230f      	movs	r3, #15
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	7812      	ldrb	r2, [r2, #0]
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d3de      	bcc.n	1ccc <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    1d0e:	683b      	ldr	r3, [r7, #0]
    1d10:	89db      	ldrh	r3, [r3, #14]
    1d12:	0018      	movs	r0, r3
    1d14:	4ba7      	ldr	r3, [pc, #668]	; (1fb4 <_adc_set_config+0x370>)
    1d16:	4798      	blx	r3
    1d18:	e009      	b.n	1d2e <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	7b1b      	ldrb	r3, [r3, #12]
    1d1e:	0018      	movs	r0, r3
    1d20:	4ba4      	ldr	r3, [pc, #656]	; (1fb4 <_adc_set_config+0x370>)
    1d22:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    1d24:	683b      	ldr	r3, [r7, #0]
    1d26:	89db      	ldrh	r3, [r3, #14]
    1d28:	0018      	movs	r0, r3
    1d2a:	4ba2      	ldr	r3, [pc, #648]	; (1fb4 <_adc_set_config+0x370>)
    1d2c:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1d2e:	683b      	ldr	r3, [r7, #0]
    1d30:	7d5b      	ldrb	r3, [r3, #21]
    1d32:	009b      	lsls	r3, r3, #2
    1d34:	b2da      	uxtb	r2, r3
    1d36:	693b      	ldr	r3, [r7, #16]
    1d38:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1d3a:	683b      	ldr	r3, [r7, #0]
    1d3c:	7d9b      	ldrb	r3, [r3, #22]
    1d3e:	01db      	lsls	r3, r3, #7
    1d40:	b25a      	sxtb	r2, r3
			(config->reference);
    1d42:	683b      	ldr	r3, [r7, #0]
    1d44:	785b      	ldrb	r3, [r3, #1]
    1d46:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1d48:	4313      	orrs	r3, r2
    1d4a:	b25b      	sxtb	r3, r3
    1d4c:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    1d4e:	693b      	ldr	r3, [r7, #16]
    1d50:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    1d52:	683b      	ldr	r3, [r7, #0]
    1d54:	791b      	ldrb	r3, [r3, #4]
    1d56:	2b34      	cmp	r3, #52	; 0x34
    1d58:	d846      	bhi.n	1de8 <_adc_set_config+0x1a4>
    1d5a:	009a      	lsls	r2, r3, #2
    1d5c:	4b96      	ldr	r3, [pc, #600]	; (1fb8 <_adc_set_config+0x374>)
    1d5e:	18d3      	adds	r3, r2, r3
    1d60:	681b      	ldr	r3, [r3, #0]
    1d62:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    1d64:	231f      	movs	r3, #31
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	683a      	ldr	r2, [r7, #0]
    1d6a:	7c52      	ldrb	r2, [r2, #17]
    1d6c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    1d6e:	2317      	movs	r3, #23
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	683a      	ldr	r2, [r7, #0]
    1d74:	7c12      	ldrb	r2, [r2, #16]
    1d76:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1d78:	2310      	movs	r3, #16
    1d7a:	61bb      	str	r3, [r7, #24]
		break;
    1d7c:	e036      	b.n	1dec <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    1d7e:	231f      	movs	r3, #31
    1d80:	18fb      	adds	r3, r7, r3
    1d82:	2201      	movs	r2, #1
    1d84:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1d86:	2317      	movs	r3, #23
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	2202      	movs	r2, #2
    1d8c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1d8e:	2310      	movs	r3, #16
    1d90:	61bb      	str	r3, [r7, #24]
		break;
    1d92:	e02b      	b.n	1dec <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    1d94:	231f      	movs	r3, #31
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	2202      	movs	r2, #2
    1d9a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1d9c:	2317      	movs	r3, #23
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	2204      	movs	r2, #4
    1da2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1da4:	2310      	movs	r3, #16
    1da6:	61bb      	str	r3, [r7, #24]
		break;
    1da8:	e020      	b.n	1dec <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    1daa:	231f      	movs	r3, #31
    1dac:	18fb      	adds	r3, r7, r3
    1dae:	2201      	movs	r2, #1
    1db0:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1db2:	2317      	movs	r3, #23
    1db4:	18fb      	adds	r3, r7, r3
    1db6:	2206      	movs	r2, #6
    1db8:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1dba:	2310      	movs	r3, #16
    1dbc:	61bb      	str	r3, [r7, #24]
		break;
    1dbe:	e015      	b.n	1dec <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1dc0:	231f      	movs	r3, #31
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	2200      	movs	r2, #0
    1dc6:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1dc8:	2317      	movs	r3, #23
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	2208      	movs	r2, #8
    1dce:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1dd0:	2310      	movs	r3, #16
    1dd2:	61bb      	str	r3, [r7, #24]
		break;
    1dd4:	e00a      	b.n	1dec <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    1dd6:	2330      	movs	r3, #48	; 0x30
    1dd8:	61bb      	str	r3, [r7, #24]
		break;
    1dda:	e007      	b.n	1dec <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    1ddc:	2320      	movs	r3, #32
    1dde:	61bb      	str	r3, [r7, #24]
		break;
    1de0:	e004      	b.n	1dec <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    1de2:	2300      	movs	r3, #0
    1de4:	61bb      	str	r3, [r7, #24]
		break;
    1de6:	e001      	b.n	1dec <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1de8:	2317      	movs	r3, #23
    1dea:	e1ae      	b.n	214a <STACK_SIZE+0x14a>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1dec:	231f      	movs	r3, #31
    1dee:	18fb      	adds	r3, r7, r3
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	011b      	lsls	r3, r3, #4
    1df4:	b2db      	uxtb	r3, r3
    1df6:	2270      	movs	r2, #112	; 0x70
    1df8:	4013      	ands	r3, r2
    1dfa:	b2da      	uxtb	r2, r3
    1dfc:	2317      	movs	r3, #23
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	781b      	ldrb	r3, [r3, #0]
    1e02:	4313      	orrs	r3, r2
    1e04:	b2da      	uxtb	r2, r3
    1e06:	693b      	ldr	r3, [r7, #16]
    1e08:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1e0a:	683b      	ldr	r3, [r7, #0]
    1e0c:	7ddb      	ldrb	r3, [r3, #23]
    1e0e:	2b3f      	cmp	r3, #63	; 0x3f
    1e10:	d901      	bls.n	1e16 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    1e12:	2317      	movs	r3, #23
    1e14:	e199      	b.n	214a <STACK_SIZE+0x14a>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    1e16:	683b      	ldr	r3, [r7, #0]
    1e18:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    1e1a:	693b      	ldr	r3, [r7, #16]
    1e1c:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	0018      	movs	r0, r3
    1e24:	4b65      	ldr	r3, [pc, #404]	; (1fbc <_adc_set_config+0x378>)
    1e26:	4798      	blx	r3
    1e28:	1e03      	subs	r3, r0, #0
    1e2a:	d1f9      	bne.n	1e20 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    1e2c:	683b      	ldr	r3, [r7, #0]
    1e2e:	885a      	ldrh	r2, [r3, #2]
    1e30:	69bb      	ldr	r3, [r7, #24]
    1e32:	b29b      	uxth	r3, r3
    1e34:	4313      	orrs	r3, r2
    1e36:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1e38:	683b      	ldr	r3, [r7, #0]
    1e3a:	2124      	movs	r1, #36	; 0x24
    1e3c:	5c5b      	ldrb	r3, [r3, r1]
    1e3e:	b29b      	uxth	r3, r3
    1e40:	00db      	lsls	r3, r3, #3
    1e42:	b29b      	uxth	r3, r3
			resolution |
    1e44:	4313      	orrs	r3, r2
    1e46:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1e48:	683b      	ldr	r3, [r7, #0]
    1e4a:	7d1b      	ldrb	r3, [r3, #20]
    1e4c:	b29b      	uxth	r3, r3
    1e4e:	009b      	lsls	r3, r3, #2
    1e50:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1e52:	4313      	orrs	r3, r2
    1e54:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1e56:	683b      	ldr	r3, [r7, #0]
    1e58:	7c9b      	ldrb	r3, [r3, #18]
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	18db      	adds	r3, r3, r3
    1e5e:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1e60:	4313      	orrs	r3, r2
    1e62:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1e64:	683b      	ldr	r3, [r7, #0]
    1e66:	7cdb      	ldrb	r3, [r3, #19]
    1e68:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1e6a:	4313      	orrs	r3, r2
    1e6c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    1e6e:	693b      	ldr	r3, [r7, #16]
    1e70:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1e72:	683b      	ldr	r3, [r7, #0]
    1e74:	7e1b      	ldrb	r3, [r3, #24]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d100      	bne.n	1e7c <_adc_set_config+0x238>
    1e7a:	e0c4      	b.n	2006 <STACK_SIZE+0x6>
		switch (resolution) {
    1e7c:	69bb      	ldr	r3, [r7, #24]
    1e7e:	2b10      	cmp	r3, #16
    1e80:	d100      	bne.n	1e84 <_adc_set_config+0x240>
    1e82:	e076      	b.n	1f72 <_adc_set_config+0x32e>
    1e84:	d802      	bhi.n	1e8c <_adc_set_config+0x248>
    1e86:	2b00      	cmp	r3, #0
    1e88:	d04d      	beq.n	1f26 <_adc_set_config+0x2e2>
    1e8a:	e0bc      	b.n	2006 <STACK_SIZE+0x6>
    1e8c:	2b20      	cmp	r3, #32
    1e8e:	d023      	beq.n	1ed8 <_adc_set_config+0x294>
    1e90:	2b30      	cmp	r3, #48	; 0x30
    1e92:	d000      	beq.n	1e96 <_adc_set_config+0x252>
    1e94:	e0b7      	b.n	2006 <STACK_SIZE+0x6>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	7cdb      	ldrb	r3, [r3, #19]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d011      	beq.n	1ec2 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    1e9e:	683b      	ldr	r3, [r7, #0]
    1ea0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    1ea2:	2b7f      	cmp	r3, #127	; 0x7f
    1ea4:	dc0b      	bgt.n	1ebe <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    1ea6:	683b      	ldr	r3, [r7, #0]
    1ea8:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    1eaa:	3380      	adds	r3, #128	; 0x80
    1eac:	db07      	blt.n	1ebe <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    1eae:	683b      	ldr	r3, [r7, #0]
    1eb0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    1eb2:	2b7f      	cmp	r3, #127	; 0x7f
    1eb4:	dc03      	bgt.n	1ebe <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    1eb6:	683b      	ldr	r3, [r7, #0]
    1eb8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    1eba:	3380      	adds	r3, #128	; 0x80
    1ebc:	da01      	bge.n	1ec2 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1ebe:	2317      	movs	r3, #23
    1ec0:	e143      	b.n	214a <STACK_SIZE+0x14a>
			} else if (config->window.window_lower_value > 255 ||
    1ec2:	683b      	ldr	r3, [r7, #0]
    1ec4:	69db      	ldr	r3, [r3, #28]
    1ec6:	2bff      	cmp	r3, #255	; 0xff
    1ec8:	dc04      	bgt.n	1ed4 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    1eca:	683b      	ldr	r3, [r7, #0]
    1ecc:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    1ece:	2bff      	cmp	r3, #255	; 0xff
    1ed0:	dc00      	bgt.n	1ed4 <_adc_set_config+0x290>
    1ed2:	e091      	b.n	1ff8 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1ed4:	2317      	movs	r3, #23
    1ed6:	e138      	b.n	214a <STACK_SIZE+0x14a>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1ed8:	683b      	ldr	r3, [r7, #0]
    1eda:	7cdb      	ldrb	r3, [r3, #19]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d015      	beq.n	1f0c <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    1ee0:	683b      	ldr	r3, [r7, #0]
    1ee2:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    1ee4:	4a36      	ldr	r2, [pc, #216]	; (1fc0 <_adc_set_config+0x37c>)
    1ee6:	4293      	cmp	r3, r2
    1ee8:	dc0e      	bgt.n	1f08 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    1eea:	683b      	ldr	r3, [r7, #0]
    1eec:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    1eee:	4a35      	ldr	r2, [pc, #212]	; (1fc4 <_adc_set_config+0x380>)
    1ef0:	4293      	cmp	r3, r2
    1ef2:	db09      	blt.n	1f08 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    1ef4:	683b      	ldr	r3, [r7, #0]
    1ef6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    1ef8:	4a31      	ldr	r2, [pc, #196]	; (1fc0 <_adc_set_config+0x37c>)
    1efa:	4293      	cmp	r3, r2
    1efc:	dc04      	bgt.n	1f08 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    1efe:	683b      	ldr	r3, [r7, #0]
    1f00:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    1f02:	4a30      	ldr	r2, [pc, #192]	; (1fc4 <_adc_set_config+0x380>)
    1f04:	4293      	cmp	r3, r2
    1f06:	da01      	bge.n	1f0c <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1f08:	2317      	movs	r3, #23
    1f0a:	e11e      	b.n	214a <STACK_SIZE+0x14a>
			} else if (config->window.window_lower_value > 1023 ||
    1f0c:	683b      	ldr	r3, [r7, #0]
    1f0e:	69db      	ldr	r3, [r3, #28]
    1f10:	4a2d      	ldr	r2, [pc, #180]	; (1fc8 <_adc_set_config+0x384>)
    1f12:	4293      	cmp	r3, r2
    1f14:	dc05      	bgt.n	1f22 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    1f16:	683b      	ldr	r3, [r7, #0]
    1f18:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    1f1a:	4a2b      	ldr	r2, [pc, #172]	; (1fc8 <_adc_set_config+0x384>)
    1f1c:	4293      	cmp	r3, r2
    1f1e:	dc00      	bgt.n	1f22 <_adc_set_config+0x2de>
    1f20:	e06c      	b.n	1ffc <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1f22:	2317      	movs	r3, #23
    1f24:	e111      	b.n	214a <STACK_SIZE+0x14a>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1f26:	683b      	ldr	r3, [r7, #0]
    1f28:	7cdb      	ldrb	r3, [r3, #19]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d015      	beq.n	1f5a <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    1f2e:	683b      	ldr	r3, [r7, #0]
    1f30:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    1f32:	4a26      	ldr	r2, [pc, #152]	; (1fcc <_adc_set_config+0x388>)
    1f34:	4293      	cmp	r3, r2
    1f36:	dc0e      	bgt.n	1f56 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    1f38:	683b      	ldr	r3, [r7, #0]
    1f3a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    1f3c:	4a24      	ldr	r2, [pc, #144]	; (1fd0 <_adc_set_config+0x38c>)
    1f3e:	4293      	cmp	r3, r2
    1f40:	db09      	blt.n	1f56 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    1f42:	683b      	ldr	r3, [r7, #0]
    1f44:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    1f46:	4a21      	ldr	r2, [pc, #132]	; (1fcc <_adc_set_config+0x388>)
    1f48:	4293      	cmp	r3, r2
    1f4a:	dc04      	bgt.n	1f56 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    1f50:	4a1f      	ldr	r2, [pc, #124]	; (1fd0 <_adc_set_config+0x38c>)
    1f52:	4293      	cmp	r3, r2
    1f54:	da01      	bge.n	1f5a <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1f56:	2317      	movs	r3, #23
    1f58:	e0f7      	b.n	214a <STACK_SIZE+0x14a>
			} else if (config->window.window_lower_value > 4095 ||
    1f5a:	683b      	ldr	r3, [r7, #0]
    1f5c:	69db      	ldr	r3, [r3, #28]
    1f5e:	4a1d      	ldr	r2, [pc, #116]	; (1fd4 <_adc_set_config+0x390>)
    1f60:	4293      	cmp	r3, r2
    1f62:	dc04      	bgt.n	1f6e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    1f64:	683b      	ldr	r3, [r7, #0]
    1f66:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    1f68:	4a1a      	ldr	r2, [pc, #104]	; (1fd4 <_adc_set_config+0x390>)
    1f6a:	4293      	cmp	r3, r2
    1f6c:	dd48      	ble.n	2000 <STACK_SIZE>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1f6e:	2317      	movs	r3, #23
    1f70:	e0eb      	b.n	214a <STACK_SIZE+0x14a>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    1f72:	683b      	ldr	r3, [r7, #0]
    1f74:	7cdb      	ldrb	r3, [r3, #19]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d032      	beq.n	1fe0 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    1f7a:	683b      	ldr	r3, [r7, #0]
    1f7c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    1f7e:	4a16      	ldr	r2, [pc, #88]	; (1fd8 <_adc_set_config+0x394>)
    1f80:	4293      	cmp	r3, r2
    1f82:	dc0e      	bgt.n	1fa2 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    1f84:	683b      	ldr	r3, [r7, #0]
    1f86:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    1f88:	4a14      	ldr	r2, [pc, #80]	; (1fdc <_adc_set_config+0x398>)
    1f8a:	4293      	cmp	r3, r2
    1f8c:	db09      	blt.n	1fa2 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    1f8e:	683b      	ldr	r3, [r7, #0]
    1f90:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    1f92:	4a11      	ldr	r2, [pc, #68]	; (1fd8 <_adc_set_config+0x394>)
    1f94:	4293      	cmp	r3, r2
    1f96:	dc04      	bgt.n	1fa2 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    1f98:	683b      	ldr	r3, [r7, #0]
    1f9a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    1f9c:	4a0f      	ldr	r2, [pc, #60]	; (1fdc <_adc_set_config+0x398>)
    1f9e:	4293      	cmp	r3, r2
    1fa0:	da1e      	bge.n	1fe0 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1fa2:	2317      	movs	r3, #23
    1fa4:	e0d1      	b.n	214a <STACK_SIZE+0x14a>
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	00001a1d 	.word	0x00001a1d
    1fac:	0000f5fd 	.word	0x0000f5fd
    1fb0:	0000f641 	.word	0x0000f641
    1fb4:	00001bcd 	.word	0x00001bcd
    1fb8:	00013810 	.word	0x00013810
    1fbc:	00001af9 	.word	0x00001af9
    1fc0:	000001ff 	.word	0x000001ff
    1fc4:	fffffe00 	.word	0xfffffe00
    1fc8:	000003ff 	.word	0x000003ff
    1fcc:	000007ff 	.word	0x000007ff
    1fd0:	fffff800 	.word	0xfffff800
    1fd4:	00000fff 	.word	0x00000fff
    1fd8:	00007fff 	.word	0x00007fff
    1fdc:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    1fe0:	683b      	ldr	r3, [r7, #0]
    1fe2:	69db      	ldr	r3, [r3, #28]
    1fe4:	4a5b      	ldr	r2, [pc, #364]	; (2154 <STACK_SIZE+0x154>)
    1fe6:	4293      	cmp	r3, r2
    1fe8:	dc04      	bgt.n	1ff4 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    1fea:	683b      	ldr	r3, [r7, #0]
    1fec:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    1fee:	4a59      	ldr	r2, [pc, #356]	; (2154 <STACK_SIZE+0x154>)
    1ff0:	4293      	cmp	r3, r2
    1ff2:	dd07      	ble.n	2004 <STACK_SIZE+0x4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1ff4:	2317      	movs	r3, #23
    1ff6:	e0a8      	b.n	214a <STACK_SIZE+0x14a>
			break;
    1ff8:	46c0      	nop			; (mov r8, r8)
    1ffa:	e004      	b.n	2006 <STACK_SIZE+0x6>
			break;
    1ffc:	46c0      	nop			; (mov r8, r8)
    1ffe:	e002      	b.n	2006 <STACK_SIZE+0x6>
			break;
    2000:	46c0      	nop			; (mov r8, r8)
    2002:	e000      	b.n	2006 <STACK_SIZE+0x6>
			}
			break;
    2004:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	0018      	movs	r0, r3
    200c:	4b52      	ldr	r3, [pc, #328]	; (2158 <STACK_SIZE+0x158>)
    200e:	4798      	blx	r3
    2010:	1e03      	subs	r3, r0, #0
    2012:	d1f9      	bne.n	2008 <STACK_SIZE+0x8>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    2014:	683b      	ldr	r3, [r7, #0]
    2016:	7e1a      	ldrb	r2, [r3, #24]
    2018:	693b      	ldr	r3, [r7, #16]
    201a:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    201c:	46c0      	nop			; (mov r8, r8)
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	0018      	movs	r0, r3
    2022:	4b4d      	ldr	r3, [pc, #308]	; (2158 <STACK_SIZE+0x158>)
    2024:	4798      	blx	r3
    2026:	1e03      	subs	r3, r0, #0
    2028:	d1f9      	bne.n	201e <STACK_SIZE+0x1e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    202a:	683b      	ldr	r3, [r7, #0]
    202c:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    202e:	b29a      	uxth	r2, r3
    2030:	693b      	ldr	r3, [r7, #16]
    2032:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    2034:	46c0      	nop			; (mov r8, r8)
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	0018      	movs	r0, r3
    203a:	4b47      	ldr	r3, [pc, #284]	; (2158 <STACK_SIZE+0x158>)
    203c:	4798      	blx	r3
    203e:	1e03      	subs	r3, r0, #0
    2040:	d1f9      	bne.n	2036 <STACK_SIZE+0x36>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2042:	683b      	ldr	r3, [r7, #0]
    2044:	6a1b      	ldr	r3, [r3, #32]
    2046:	b29a      	uxth	r2, r3
    2048:	693b      	ldr	r3, [r7, #16]
    204a:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    204c:	2314      	movs	r3, #20
    204e:	18fb      	adds	r3, r7, r3
    2050:	683a      	ldr	r2, [r7, #0]
    2052:	212c      	movs	r1, #44	; 0x2c
    2054:	5c52      	ldrb	r2, [r2, r1]
    2056:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2058:	2314      	movs	r3, #20
    205a:	18fb      	adds	r3, r7, r3
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	2b00      	cmp	r3, #0
    2060:	d006      	beq.n	2070 <STACK_SIZE+0x70>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    2062:	2314      	movs	r3, #20
    2064:	18fb      	adds	r3, r7, r3
    2066:	781a      	ldrb	r2, [r3, #0]
    2068:	2314      	movs	r3, #20
    206a:	18fb      	adds	r3, r7, r3
    206c:	3a01      	subs	r2, #1
    206e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2070:	2314      	movs	r3, #20
    2072:	18fb      	adds	r3, r7, r3
    2074:	781b      	ldrb	r3, [r3, #0]
    2076:	2b0f      	cmp	r3, #15
    2078:	d804      	bhi.n	2084 <STACK_SIZE+0x84>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    207a:	683b      	ldr	r3, [r7, #0]
    207c:	222b      	movs	r2, #43	; 0x2b
    207e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2080:	2b0f      	cmp	r3, #15
    2082:	d901      	bls.n	2088 <STACK_SIZE+0x88>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    2084:	2317      	movs	r3, #23
    2086:	e060      	b.n	214a <STACK_SIZE+0x14a>
	}

	while (adc_is_syncing(module_inst)) {
    2088:	46c0      	nop			; (mov r8, r8)
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	0018      	movs	r0, r3
    208e:	4b32      	ldr	r3, [pc, #200]	; (2158 <STACK_SIZE+0x158>)
    2090:	4798      	blx	r3
    2092:	1e03      	subs	r3, r0, #0
    2094:	d1f9      	bne.n	208a <STACK_SIZE+0x8a>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    2096:	683b      	ldr	r3, [r7, #0]
    2098:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    209a:	683a      	ldr	r2, [r7, #0]
    209c:	212b      	movs	r1, #43	; 0x2b
    209e:	5c52      	ldrb	r2, [r2, r1]
    20a0:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    20a2:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    20a4:	2214      	movs	r2, #20
    20a6:	18ba      	adds	r2, r7, r2
    20a8:	7812      	ldrb	r2, [r2, #0]
    20aa:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    20ac:	4313      	orrs	r3, r2
			config->negative_input |
    20ae:	683a      	ldr	r2, [r7, #0]
    20b0:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    20b2:	4313      	orrs	r3, r2
			config->positive_input;
    20b4:	683a      	ldr	r2, [r7, #0]
    20b6:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    20b8:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    20ba:	693b      	ldr	r3, [r7, #16]
    20bc:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    20be:	683b      	ldr	r3, [r7, #0]
    20c0:	222a      	movs	r2, #42	; 0x2a
    20c2:	5c9a      	ldrb	r2, [r3, r2]
    20c4:	693b      	ldr	r3, [r7, #16]
    20c6:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    20c8:	693b      	ldr	r3, [r7, #16]
    20ca:	220f      	movs	r2, #15
    20cc:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    20ce:	683b      	ldr	r3, [r7, #0]
    20d0:	2224      	movs	r2, #36	; 0x24
    20d2:	5c9b      	ldrb	r3, [r3, r2]
    20d4:	2b00      	cmp	r3, #0
    20d6:	d01e      	beq.n	2116 <STACK_SIZE+0x116>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    20d8:	683b      	ldr	r3, [r7, #0]
    20da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    20dc:	4a1f      	ldr	r2, [pc, #124]	; (215c <STACK_SIZE+0x15c>)
    20de:	4293      	cmp	r3, r2
    20e0:	d901      	bls.n	20e6 <STACK_SIZE+0xe6>
			return STATUS_ERR_INVALID_ARG;
    20e2:	2317      	movs	r3, #23
    20e4:	e031      	b.n	214a <STACK_SIZE+0x14a>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    20e6:	683b      	ldr	r3, [r7, #0]
    20e8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    20ea:	693b      	ldr	r3, [r7, #16]
    20ec:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    20ee:	683b      	ldr	r3, [r7, #0]
    20f0:	2228      	movs	r2, #40	; 0x28
    20f2:	5e9b      	ldrsh	r3, [r3, r2]
    20f4:	4a1a      	ldr	r2, [pc, #104]	; (2160 <STACK_SIZE+0x160>)
    20f6:	4293      	cmp	r3, r2
    20f8:	dc05      	bgt.n	2106 <STACK_SIZE+0x106>
				config->correction.offset_correction < -2048) {
    20fa:	683b      	ldr	r3, [r7, #0]
    20fc:	2228      	movs	r2, #40	; 0x28
    20fe:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    2100:	4a18      	ldr	r2, [pc, #96]	; (2164 <STACK_SIZE+0x164>)
    2102:	4293      	cmp	r3, r2
    2104:	da01      	bge.n	210a <STACK_SIZE+0x10a>
			return STATUS_ERR_INVALID_ARG;
    2106:	2317      	movs	r3, #23
    2108:	e01f      	b.n	214a <STACK_SIZE+0x14a>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    210a:	683b      	ldr	r3, [r7, #0]
    210c:	2228      	movs	r2, #40	; 0x28
    210e:	5e9b      	ldrsh	r3, [r3, r2]
    2110:	b29a      	uxth	r2, r3
    2112:	693b      	ldr	r3, [r7, #16]
    2114:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    2116:	4b14      	ldr	r3, [pc, #80]	; (2168 <STACK_SIZE+0x168>)
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	08db      	lsrs	r3, r3, #3
    211c:	b29b      	uxth	r3, r3
    211e:	021b      	lsls	r3, r3, #8
    2120:	b29a      	uxth	r2, r3
    2122:	23e0      	movs	r3, #224	; 0xe0
    2124:	00db      	lsls	r3, r3, #3
    2126:	4013      	ands	r3, r2
    2128:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    212a:	4b10      	ldr	r3, [pc, #64]	; (216c <STACK_SIZE+0x16c>)
    212c:	685c      	ldr	r4, [r3, #4]
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	0161      	lsls	r1, r4, #5
    2132:	0edd      	lsrs	r5, r3, #27
    2134:	430d      	orrs	r5, r1
    2136:	0ee6      	lsrs	r6, r4, #27
    2138:	b2ab      	uxth	r3, r5
    213a:	21ff      	movs	r1, #255	; 0xff
    213c:	400b      	ands	r3, r1
    213e:	b29b      	uxth	r3, r3
			) |
    2140:	4313      	orrs	r3, r2
    2142:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    2144:	693b      	ldr	r3, [r7, #16]
    2146:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2148:	2300      	movs	r3, #0
}
    214a:	0018      	movs	r0, r3
    214c:	46bd      	mov	sp, r7
    214e:	b009      	add	sp, #36	; 0x24
    2150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	0000ffff 	.word	0x0000ffff
    2158:	00001af9 	.word	0x00001af9
    215c:	00000fff 	.word	0x00000fff
    2160:	000007ff 	.word	0x000007ff
    2164:	fffff800 	.word	0xfffff800
    2168:	00806024 	.word	0x00806024
    216c:	00806020 	.word	0x00806020

00002170 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2170:	b580      	push	{r7, lr}
    2172:	b086      	sub	sp, #24
    2174:	af00      	add	r7, sp, #0
    2176:	60f8      	str	r0, [r7, #12]
    2178:	60b9      	str	r1, [r7, #8]
    217a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	68ba      	ldr	r2, [r7, #8]
    2180:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    2182:	2380      	movs	r3, #128	; 0x80
    2184:	025b      	lsls	r3, r3, #9
    2186:	0019      	movs	r1, r3
    2188:	2002      	movs	r0, #2
    218a:	4b32      	ldr	r3, [pc, #200]	; (2254 <adc_init+0xe4>)
    218c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    218e:	68bb      	ldr	r3, [r7, #8]
    2190:	781b      	ldrb	r3, [r3, #0]
    2192:	b2db      	uxtb	r3, r3
    2194:	001a      	movs	r2, r3
    2196:	2301      	movs	r3, #1
    2198:	4013      	ands	r3, r2
    219a:	d001      	beq.n	21a0 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    219c:	2305      	movs	r3, #5
    219e:	e055      	b.n	224c <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    21a0:	68bb      	ldr	r3, [r7, #8]
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	b2db      	uxtb	r3, r3
    21a6:	001a      	movs	r2, r3
    21a8:	2302      	movs	r3, #2
    21aa:	4013      	ands	r3, r2
    21ac:	d001      	beq.n	21b2 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    21ae:	231c      	movs	r3, #28
    21b0:	e04c      	b.n	224c <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	785a      	ldrb	r2, [r3, #1]
    21b6:	68fb      	ldr	r3, [r7, #12]
    21b8:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    21ba:	68fb      	ldr	r3, [r7, #12]
    21bc:	791b      	ldrb	r3, [r3, #4]
    21be:	2b00      	cmp	r3, #0
    21c0:	d102      	bne.n	21c8 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    21c2:	2001      	movs	r0, #1
    21c4:	4b24      	ldr	r3, [pc, #144]	; (2258 <adc_init+0xe8>)
    21c6:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    21c8:	2317      	movs	r3, #23
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	2200      	movs	r2, #0
    21ce:	701a      	strb	r2, [r3, #0]
    21d0:	e00e      	b.n	21f0 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    21d2:	2317      	movs	r3, #23
    21d4:	18fb      	adds	r3, r7, r3
    21d6:	781a      	ldrb	r2, [r3, #0]
    21d8:	68fb      	ldr	r3, [r7, #12]
    21da:	3202      	adds	r2, #2
    21dc:	0092      	lsls	r2, r2, #2
    21de:	2100      	movs	r1, #0
    21e0:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    21e2:	2317      	movs	r3, #23
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	781a      	ldrb	r2, [r3, #0]
    21e8:	2317      	movs	r3, #23
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	3201      	adds	r2, #1
    21ee:	701a      	strb	r2, [r3, #0]
    21f0:	2317      	movs	r3, #23
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	2b02      	cmp	r3, #2
    21f8:	d9eb      	bls.n	21d2 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	2200      	movs	r2, #0
    21fe:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	2200      	movs	r2, #0
    2204:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    2206:	68fb      	ldr	r3, [r7, #12]
    2208:	2200      	movs	r2, #0
    220a:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    220c:	68fb      	ldr	r3, [r7, #12]
    220e:	2200      	movs	r2, #0
    2210:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    2212:	4b12      	ldr	r3, [pc, #72]	; (225c <adc_init+0xec>)
    2214:	68fa      	ldr	r2, [r7, #12]
    2216:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	222a      	movs	r2, #42	; 0x2a
    221c:	5c9b      	ldrb	r3, [r3, r2]
    221e:	2b00      	cmp	r3, #0
    2220:	d10a      	bne.n	2238 <adc_init+0xc8>
			!config->freerunning) {
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	7d1b      	ldrb	r3, [r3, #20]
    2226:	2201      	movs	r2, #1
    2228:	4053      	eors	r3, r2
    222a:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    222c:	2b00      	cmp	r3, #0
    222e:	d003      	beq.n	2238 <adc_init+0xc8>
		module_inst->software_trigger = true;
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	2201      	movs	r2, #1
    2234:	775a      	strb	r2, [r3, #29]
    2236:	e002      	b.n	223e <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	2200      	movs	r2, #0
    223c:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    223e:	687a      	ldr	r2, [r7, #4]
    2240:	68fb      	ldr	r3, [r7, #12]
    2242:	0011      	movs	r1, r2
    2244:	0018      	movs	r0, r3
    2246:	4b06      	ldr	r3, [pc, #24]	; (2260 <adc_init+0xf0>)
    2248:	4798      	blx	r3
    224a:	0003      	movs	r3, r0
}
    224c:	0018      	movs	r0, r3
    224e:	46bd      	mov	sp, r7
    2250:	b006      	add	sp, #24
    2252:	bd80      	pop	{r7, pc}
    2254:	00001a35 	.word	0x00001a35
    2258:	00001ab9 	.word	0x00001ab9
    225c:	20003c80 	.word	0x20003c80
    2260:	00001c45 	.word	0x00001c45

00002264 <adc_is_syncing>:
{
    2264:	b580      	push	{r7, lr}
    2266:	b084      	sub	sp, #16
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2272:	68fb      	ldr	r3, [r7, #12]
    2274:	7e5b      	ldrb	r3, [r3, #25]
    2276:	b2db      	uxtb	r3, r3
    2278:	b25b      	sxtb	r3, r3
    227a:	2b00      	cmp	r3, #0
    227c:	da01      	bge.n	2282 <adc_is_syncing+0x1e>
		return true;
    227e:	2301      	movs	r3, #1
    2280:	e000      	b.n	2284 <adc_is_syncing+0x20>
	return false;
    2282:	2300      	movs	r3, #0
}
    2284:	0018      	movs	r0, r3
    2286:	46bd      	mov	sp, r7
    2288:	b004      	add	sp, #16
    228a:	bd80      	pop	{r7, pc}

0000228c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    228c:	b580      	push	{r7, lr}
    228e:	b084      	sub	sp, #16
    2290:	af00      	add	r7, sp, #0
    2292:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	681b      	ldr	r3, [r3, #0]
    2298:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	0018      	movs	r0, r3
    22a0:	4b0b      	ldr	r3, [pc, #44]	; (22d0 <adc_start_conversion+0x44>)
    22a2:	4798      	blx	r3
    22a4:	1e03      	subs	r3, r0, #0
    22a6:	d1f9      	bne.n	229c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    22a8:	68fb      	ldr	r3, [r7, #12]
    22aa:	7b1b      	ldrb	r3, [r3, #12]
    22ac:	b2db      	uxtb	r3, r3
    22ae:	2202      	movs	r2, #2
    22b0:	4313      	orrs	r3, r2
    22b2:	b2da      	uxtb	r2, r3
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    22b8:	46c0      	nop			; (mov r8, r8)
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	0018      	movs	r0, r3
    22be:	4b04      	ldr	r3, [pc, #16]	; (22d0 <adc_start_conversion+0x44>)
    22c0:	4798      	blx	r3
    22c2:	1e03      	subs	r3, r0, #0
    22c4:	d1f9      	bne.n	22ba <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	46bd      	mov	sp, r7
    22ca:	b004      	add	sp, #16
    22cc:	bd80      	pop	{r7, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00002265 	.word	0x00002265

000022d4 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    22d4:	b580      	push	{r7, lr}
    22d6:	b084      	sub	sp, #16
    22d8:	af00      	add	r7, sp, #0
    22da:	6078      	str	r0, [r7, #4]
    22dc:	000a      	movs	r2, r1
    22de:	1cfb      	adds	r3, r7, #3
    22e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	681b      	ldr	r3, [r3, #0]
    22e6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
    22e8:	68fb      	ldr	r3, [r7, #12]
    22ea:	1cfa      	adds	r2, r7, #3
    22ec:	7812      	ldrb	r2, [r2, #0]
    22ee:	75da      	strb	r2, [r3, #23]
}
    22f0:	46c0      	nop			; (mov r8, r8)
    22f2:	46bd      	mov	sp, r7
    22f4:	b004      	add	sp, #16
    22f6:	bd80      	pop	{r7, pc}

000022f8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	b084      	sub	sp, #16
    22fc:	af00      	add	r7, sp, #0
    22fe:	6078      	str	r0, [r7, #4]
    2300:	000a      	movs	r2, r1
    2302:	1cfb      	adds	r3, r7, #3
    2304:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    230c:	68fb      	ldr	r3, [r7, #12]
    230e:	1cfa      	adds	r2, r7, #3
    2310:	7812      	ldrb	r2, [r2, #0]
    2312:	759a      	strb	r2, [r3, #22]
}
    2314:	46c0      	nop			; (mov r8, r8)
    2316:	46bd      	mov	sp, r7
    2318:	b004      	add	sp, #16
    231a:	bd80      	pop	{r7, pc}

0000231c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    231c:	b580      	push	{r7, lr}
    231e:	b084      	sub	sp, #16
    2320:	af00      	add	r7, sp, #0
    2322:	0002      	movs	r2, r0
    2324:	1dfb      	adds	r3, r7, #7
    2326:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    2328:	1dfb      	adds	r3, r7, #7
    232a:	781a      	ldrb	r2, [r3, #0]
    232c:	4b47      	ldr	r3, [pc, #284]	; (244c <_adc_interrupt_handler+0x130>)
    232e:	0092      	lsls	r2, r2, #2
    2330:	58d3      	ldr	r3, [r2, r3]
    2332:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	7e1b      	ldrb	r3, [r3, #24]
    233a:	b2da      	uxtb	r2, r3
    233c:	68fb      	ldr	r3, [r7, #12]
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	7ddb      	ldrb	r3, [r3, #23]
    2342:	b2db      	uxtb	r3, r3
    2344:	4013      	ands	r3, r2
    2346:	b2db      	uxtb	r3, r3
    2348:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    234a:	68bb      	ldr	r3, [r7, #8]
    234c:	2201      	movs	r2, #1
    234e:	4013      	ands	r3, r2
    2350:	d045      	beq.n	23de <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	681b      	ldr	r3, [r3, #0]
    2356:	2201      	movs	r2, #1
    2358:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	68fb      	ldr	r3, [r7, #12]
    235e:	0018      	movs	r0, r3
    2360:	4b3b      	ldr	r3, [pc, #236]	; (2450 <_adc_interrupt_handler+0x134>)
    2362:	4798      	blx	r3
    2364:	1e03      	subs	r3, r0, #0
    2366:	d1f9      	bne.n	235c <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    2368:	68fb      	ldr	r3, [r7, #12]
    236a:	695b      	ldr	r3, [r3, #20]
    236c:	1c99      	adds	r1, r3, #2
    236e:	68fa      	ldr	r2, [r7, #12]
    2370:	6151      	str	r1, [r2, #20]
    2372:	68fa      	ldr	r2, [r7, #12]
    2374:	6812      	ldr	r2, [r2, #0]
    2376:	8b52      	ldrh	r2, [r2, #26]
    2378:	b292      	uxth	r2, r2
    237a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    237c:	68fb      	ldr	r3, [r7, #12]
    237e:	8b1b      	ldrh	r3, [r3, #24]
    2380:	b29b      	uxth	r3, r3
    2382:	3b01      	subs	r3, #1
    2384:	b29b      	uxth	r3, r3
    2386:	68fa      	ldr	r2, [r7, #12]
    2388:	1c19      	adds	r1, r3, #0
    238a:	8311      	strh	r1, [r2, #24]
    238c:	2b00      	cmp	r3, #0
    238e:	d008      	beq.n	23a2 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    2390:	68fb      	ldr	r3, [r7, #12]
    2392:	7f5b      	ldrb	r3, [r3, #29]
    2394:	2b00      	cmp	r3, #0
    2396:	d022      	beq.n	23de <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    2398:	68fb      	ldr	r3, [r7, #12]
    239a:	0018      	movs	r0, r3
    239c:	4b2d      	ldr	r3, [pc, #180]	; (2454 <_adc_interrupt_handler+0x138>)
    239e:	4798      	blx	r3
    23a0:	e01d      	b.n	23de <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    23a2:	68fb      	ldr	r3, [r7, #12]
    23a4:	2101      	movs	r1, #1
    23a6:	0018      	movs	r0, r3
    23a8:	4b2b      	ldr	r3, [pc, #172]	; (2458 <_adc_interrupt_handler+0x13c>)
    23aa:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    23ac:	68fb      	ldr	r3, [r7, #12]
    23ae:	7f1b      	ldrb	r3, [r3, #28]
    23b0:	b2db      	uxtb	r3, r3
    23b2:	2b05      	cmp	r3, #5
    23b4:	d113      	bne.n	23de <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    23b6:	68fb      	ldr	r3, [r7, #12]
    23b8:	2200      	movs	r2, #0
    23ba:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	7edb      	ldrb	r3, [r3, #27]
    23c0:	001a      	movs	r2, r3
    23c2:	2301      	movs	r3, #1
    23c4:	4013      	ands	r3, r2
    23c6:	d00a      	beq.n	23de <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    23c8:	68fb      	ldr	r3, [r7, #12]
    23ca:	7e9b      	ldrb	r3, [r3, #26]
    23cc:	001a      	movs	r2, r3
    23ce:	2301      	movs	r3, #1
    23d0:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    23d2:	d004      	beq.n	23de <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    23d4:	68fb      	ldr	r3, [r7, #12]
    23d6:	689b      	ldr	r3, [r3, #8]
    23d8:	68fa      	ldr	r2, [r7, #12]
    23da:	0010      	movs	r0, r2
    23dc:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    23de:	68bb      	ldr	r3, [r7, #8]
    23e0:	2204      	movs	r2, #4
    23e2:	4013      	ands	r3, r2
    23e4:	d014      	beq.n	2410 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    23e6:	68fb      	ldr	r3, [r7, #12]
    23e8:	681b      	ldr	r3, [r3, #0]
    23ea:	2204      	movs	r2, #4
    23ec:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    23ee:	68fb      	ldr	r3, [r7, #12]
    23f0:	7edb      	ldrb	r3, [r3, #27]
    23f2:	001a      	movs	r2, r3
    23f4:	2302      	movs	r3, #2
    23f6:	4013      	ands	r3, r2
    23f8:	d00a      	beq.n	2410 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	7e9b      	ldrb	r3, [r3, #26]
    23fe:	001a      	movs	r2, r3
    2400:	2302      	movs	r3, #2
    2402:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2404:	d004      	beq.n	2410 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2406:	68fb      	ldr	r3, [r7, #12]
    2408:	68db      	ldr	r3, [r3, #12]
    240a:	68fa      	ldr	r2, [r7, #12]
    240c:	0010      	movs	r0, r2
    240e:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    2410:	68bb      	ldr	r3, [r7, #8]
    2412:	2202      	movs	r2, #2
    2414:	4013      	ands	r3, r2
    2416:	d014      	beq.n	2442 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	681b      	ldr	r3, [r3, #0]
    241c:	2202      	movs	r2, #2
    241e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	7edb      	ldrb	r3, [r3, #27]
    2424:	001a      	movs	r2, r3
    2426:	2304      	movs	r3, #4
    2428:	4013      	ands	r3, r2
    242a:	d00a      	beq.n	2442 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    242c:	68fb      	ldr	r3, [r7, #12]
    242e:	7e9b      	ldrb	r3, [r3, #26]
    2430:	001a      	movs	r2, r3
    2432:	2304      	movs	r3, #4
    2434:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2436:	d004      	beq.n	2442 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	691b      	ldr	r3, [r3, #16]
    243c:	68fa      	ldr	r2, [r7, #12]
    243e:	0010      	movs	r0, r2
    2440:	4798      	blx	r3
		}
	}
}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	46bd      	mov	sp, r7
    2446:	b004      	add	sp, #16
    2448:	bd80      	pop	{r7, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	20003c80 	.word	0x20003c80
    2450:	00002265 	.word	0x00002265
    2454:	0000228d 	.word	0x0000228d
    2458:	000022f9 	.word	0x000022f9

0000245c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    245c:	b580      	push	{r7, lr}
    245e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    2460:	2000      	movs	r0, #0
    2462:	4b02      	ldr	r3, [pc, #8]	; (246c <ADC_Handler+0x10>)
    2464:	4798      	blx	r3
}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	46bd      	mov	sp, r7
    246a:	bd80      	pop	{r7, pc}
    246c:	0000231d 	.word	0x0000231d

00002470 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
    2470:	b580      	push	{r7, lr}
    2472:	b084      	sub	sp, #16
    2474:	af00      	add	r7, sp, #0
    2476:	60f8      	str	r0, [r7, #12]
    2478:	60b9      	str	r1, [r7, #8]
    247a:	1dfb      	adds	r3, r7, #7
    247c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    247e:	1dfb      	adds	r3, r7, #7
    2480:	781a      	ldrb	r2, [r3, #0]
    2482:	68fb      	ldr	r3, [r7, #12]
    2484:	3202      	adds	r2, #2
    2486:	0092      	lsls	r2, r2, #2
    2488:	68b9      	ldr	r1, [r7, #8]
    248a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	7e9b      	ldrb	r3, [r3, #26]
    2490:	b25a      	sxtb	r2, r3
    2492:	1dfb      	adds	r3, r7, #7
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	2101      	movs	r1, #1
    2498:	4099      	lsls	r1, r3
    249a:	000b      	movs	r3, r1
    249c:	b25b      	sxtb	r3, r3
    249e:	4313      	orrs	r3, r2
    24a0:	b25b      	sxtb	r3, r3
    24a2:	b2da      	uxtb	r2, r3
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	769a      	strb	r2, [r3, #26]
}
    24a8:	46c0      	nop			; (mov r8, r8)
    24aa:	46bd      	mov	sp, r7
    24ac:	b004      	add	sp, #16
    24ae:	bd80      	pop	{r7, pc}

000024b0 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b084      	sub	sp, #16
    24b4:	af00      	add	r7, sp, #0
    24b6:	60f8      	str	r0, [r7, #12]
    24b8:	60b9      	str	r1, [r7, #8]
    24ba:	1dbb      	adds	r3, r7, #6
    24bc:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	8b1b      	ldrh	r3, [r3, #24]
    24c2:	b29b      	uxth	r3, r3
    24c4:	2b00      	cmp	r3, #0
    24c6:	d104      	bne.n	24d2 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	7f1b      	ldrb	r3, [r3, #28]
    24cc:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
    24ce:	2b05      	cmp	r3, #5
    24d0:	d101      	bne.n	24d6 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
    24d2:	2305      	movs	r3, #5
    24d4:	e017      	b.n	2506 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
    24d6:	68fb      	ldr	r3, [r7, #12]
    24d8:	2205      	movs	r2, #5
    24da:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
    24dc:	68fb      	ldr	r3, [r7, #12]
    24de:	1dba      	adds	r2, r7, #6
    24e0:	8812      	ldrh	r2, [r2, #0]
    24e2:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
    24e4:	68fb      	ldr	r3, [r7, #12]
    24e6:	68ba      	ldr	r2, [r7, #8]
    24e8:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
    24ea:	68fb      	ldr	r3, [r7, #12]
    24ec:	2101      	movs	r1, #1
    24ee:	0018      	movs	r0, r3
    24f0:	4b07      	ldr	r3, [pc, #28]	; (2510 <adc_read_buffer_job+0x60>)
    24f2:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
    24f4:	68fb      	ldr	r3, [r7, #12]
    24f6:	7f5b      	ldrb	r3, [r3, #29]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d003      	beq.n	2504 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
    24fc:	68fb      	ldr	r3, [r7, #12]
    24fe:	0018      	movs	r0, r3
    2500:	4b04      	ldr	r3, [pc, #16]	; (2514 <adc_read_buffer_job+0x64>)
    2502:	4798      	blx	r3
	}

	return STATUS_OK;
    2504:	2300      	movs	r3, #0
}
    2506:	0018      	movs	r0, r3
    2508:	46bd      	mov	sp, r7
    250a:	b004      	add	sp, #16
    250c:	bd80      	pop	{r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	000022d5 	.word	0x000022d5
    2514:	0000228d 	.word	0x0000228d

00002518 <adc_get_job_status>:
 * \return Status of the job.
 */
enum status_code adc_get_job_status(
		struct adc_module *module_inst,
		enum adc_job_type type)
{
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	000a      	movs	r2, r1
    2522:	1cfb      	adds	r3, r7, #3
    2524:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
    2526:	1cfb      	adds	r3, r7, #3
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	2b00      	cmp	r3, #0
    252c:	d103      	bne.n	2536 <adc_get_job_status+0x1e>
		return module_inst->job_status;
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	7f1b      	ldrb	r3, [r3, #28]
    2532:	b2db      	uxtb	r3, r3
    2534:	e000      	b.n	2538 <adc_get_job_status+0x20>
	} else {
		return STATUS_ERR_INVALID_ARG;
    2536:	2317      	movs	r3, #23
	}
}
    2538:	0018      	movs	r0, r3
    253a:	46bd      	mov	sp, r7
    253c:	b002      	add	sp, #8
    253e:	bd80      	pop	{r7, pc}

00002540 <system_gclk_chan_get_config_defaults>:
{
    2540:	b580      	push	{r7, lr}
    2542:	b082      	sub	sp, #8
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	2200      	movs	r2, #0
    254c:	701a      	strb	r2, [r3, #0]
}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	46bd      	mov	sp, r7
    2552:	b002      	add	sp, #8
    2554:	bd80      	pop	{r7, pc}
	...

00002558 <system_apb_clock_set_mask>:
{
    2558:	b580      	push	{r7, lr}
    255a:	b082      	sub	sp, #8
    255c:	af00      	add	r7, sp, #0
    255e:	0002      	movs	r2, r0
    2560:	6039      	str	r1, [r7, #0]
    2562:	1dfb      	adds	r3, r7, #7
    2564:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2566:	1dfb      	adds	r3, r7, #7
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	2b01      	cmp	r3, #1
    256c:	d00a      	beq.n	2584 <system_apb_clock_set_mask+0x2c>
    256e:	2b02      	cmp	r3, #2
    2570:	d00f      	beq.n	2592 <system_apb_clock_set_mask+0x3a>
    2572:	2b00      	cmp	r3, #0
    2574:	d114      	bne.n	25a0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2576:	4b0e      	ldr	r3, [pc, #56]	; (25b0 <system_apb_clock_set_mask+0x58>)
    2578:	4a0d      	ldr	r2, [pc, #52]	; (25b0 <system_apb_clock_set_mask+0x58>)
    257a:	6991      	ldr	r1, [r2, #24]
    257c:	683a      	ldr	r2, [r7, #0]
    257e:	430a      	orrs	r2, r1
    2580:	619a      	str	r2, [r3, #24]
			break;
    2582:	e00f      	b.n	25a4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2584:	4b0a      	ldr	r3, [pc, #40]	; (25b0 <system_apb_clock_set_mask+0x58>)
    2586:	4a0a      	ldr	r2, [pc, #40]	; (25b0 <system_apb_clock_set_mask+0x58>)
    2588:	69d1      	ldr	r1, [r2, #28]
    258a:	683a      	ldr	r2, [r7, #0]
    258c:	430a      	orrs	r2, r1
    258e:	61da      	str	r2, [r3, #28]
			break;
    2590:	e008      	b.n	25a4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2592:	4b07      	ldr	r3, [pc, #28]	; (25b0 <system_apb_clock_set_mask+0x58>)
    2594:	4a06      	ldr	r2, [pc, #24]	; (25b0 <system_apb_clock_set_mask+0x58>)
    2596:	6a11      	ldr	r1, [r2, #32]
    2598:	683a      	ldr	r2, [r7, #0]
    259a:	430a      	orrs	r2, r1
    259c:	621a      	str	r2, [r3, #32]
			break;
    259e:	e001      	b.n	25a4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    25a0:	2317      	movs	r3, #23
    25a2:	e000      	b.n	25a6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    25a4:	2300      	movs	r3, #0
}
    25a6:	0018      	movs	r0, r3
    25a8:	46bd      	mov	sp, r7
    25aa:	b002      	add	sp, #8
    25ac:	bd80      	pop	{r7, pc}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	40000400 	.word	0x40000400

000025b4 <system_pinmux_get_config_defaults>:
{
    25b4:	b580      	push	{r7, lr}
    25b6:	b082      	sub	sp, #8
    25b8:	af00      	add	r7, sp, #0
    25ba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	2280      	movs	r2, #128	; 0x80
    25c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	2200      	movs	r2, #0
    25c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	2201      	movs	r2, #1
    25cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	2200      	movs	r2, #0
    25d2:	70da      	strb	r2, [r3, #3]
}
    25d4:	46c0      	nop			; (mov r8, r8)
    25d6:	46bd      	mov	sp, r7
    25d8:	b002      	add	sp, #8
    25da:	bd80      	pop	{r7, pc}

000025dc <system_voltage_reference_enable>:
{
    25dc:	b580      	push	{r7, lr}
    25de:	b082      	sub	sp, #8
    25e0:	af00      	add	r7, sp, #0
    25e2:	0002      	movs	r2, r0
    25e4:	1dfb      	adds	r3, r7, #7
    25e6:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    25e8:	1dfb      	adds	r3, r7, #7
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d002      	beq.n	25f6 <system_voltage_reference_enable+0x1a>
    25f0:	2b01      	cmp	r3, #1
    25f2:	d007      	beq.n	2604 <system_voltage_reference_enable+0x28>
			return;
    25f4:	e00d      	b.n	2612 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    25f6:	4b08      	ldr	r3, [pc, #32]	; (2618 <system_voltage_reference_enable+0x3c>)
    25f8:	4a07      	ldr	r2, [pc, #28]	; (2618 <system_voltage_reference_enable+0x3c>)
    25fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
    25fc:	2102      	movs	r1, #2
    25fe:	430a      	orrs	r2, r1
    2600:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2602:	e006      	b.n	2612 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2604:	4b04      	ldr	r3, [pc, #16]	; (2618 <system_voltage_reference_enable+0x3c>)
    2606:	4a04      	ldr	r2, [pc, #16]	; (2618 <system_voltage_reference_enable+0x3c>)
    2608:	6c12      	ldr	r2, [r2, #64]	; 0x40
    260a:	2104      	movs	r1, #4
    260c:	430a      	orrs	r2, r1
    260e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2610:	46c0      	nop			; (mov r8, r8)
}
    2612:	46bd      	mov	sp, r7
    2614:	b002      	add	sp, #8
    2616:	bd80      	pop	{r7, pc}
    2618:	40000800 	.word	0x40000800

0000261c <_dac_set_config>:
 *
 */
static void _dac_set_config(
		struct dac_module *const module_inst,
		struct dac_config *const config)
{
    261c:	b580      	push	{r7, lr}
    261e:	b086      	sub	sp, #24
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
    2624:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(config);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    2626:	687b      	ldr	r3, [r7, #4]
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	60fb      	str	r3, [r7, #12]

	/* Set selected DAC output to be enabled when enabling the module */
	module_inst->output = config->output;
    262c:	683b      	ldr	r3, [r7, #0]
    262e:	785a      	ldrb	r2, [r3, #1]
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	711a      	strb	r2, [r3, #4]
	module_inst->start_on_event = false;
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	2200      	movs	r2, #0
    2638:	719a      	strb	r2, [r3, #6]

	uint32_t new_ctrla = 0;
    263a:	2300      	movs	r3, #0
    263c:	617b      	str	r3, [r7, #20]
	uint32_t new_ctrlb = 0;
    263e:	2300      	movs	r3, #0
    2640:	613b      	str	r3, [r7, #16]

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
    2642:	683b      	ldr	r3, [r7, #0]
    2644:	799b      	ldrb	r3, [r3, #6]
    2646:	2b00      	cmp	r3, #0
    2648:	d003      	beq.n	2652 <_dac_set_config+0x36>
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    264a:	697b      	ldr	r3, [r7, #20]
    264c:	2204      	movs	r2, #4
    264e:	4313      	orrs	r3, r2
    2650:	617b      	str	r3, [r7, #20]
	}

	/* Set reference voltage */
	new_ctrlb |= config->reference;
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	001a      	movs	r2, r3
    2658:	693b      	ldr	r3, [r7, #16]
    265a:	4313      	orrs	r3, r2
    265c:	613b      	str	r3, [r7, #16]

	/* Left adjust data if configured */
	if (config->left_adjust) {
    265e:	683b      	ldr	r3, [r7, #0]
    2660:	789b      	ldrb	r3, [r3, #2]
    2662:	2b00      	cmp	r3, #0
    2664:	d003      	beq.n	266e <_dac_set_config+0x52>
		new_ctrlb |= DAC_CTRLB_LEFTADJ;
    2666:	693b      	ldr	r3, [r7, #16]
    2668:	2204      	movs	r2, #4
    266a:	4313      	orrs	r3, r2
    266c:	613b      	str	r3, [r7, #16]
	}

#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	/* Bypass DATABUF write protection if configured */
	if (config->databuf_protection_bypass) {
    266e:	683b      	ldr	r3, [r7, #0]
    2670:	791b      	ldrb	r3, [r3, #4]
    2672:	2b00      	cmp	r3, #0
    2674:	d003      	beq.n	267e <_dac_set_config+0x62>
		new_ctrlb |= DAC_CTRLB_BDWP;
    2676:	693b      	ldr	r3, [r7, #16]
    2678:	2210      	movs	r2, #16
    267a:	4313      	orrs	r3, r2
    267c:	613b      	str	r3, [r7, #16]
	}
#endif

	/* Voltage pump disable if configured */
	if (config->voltage_pump_disable) {
    267e:	683b      	ldr	r3, [r7, #0]
    2680:	795b      	ldrb	r3, [r3, #5]
    2682:	2b00      	cmp	r3, #0
    2684:	d003      	beq.n	268e <_dac_set_config+0x72>
		new_ctrlb |= DAC_CTRLB_VPD;
    2686:	693b      	ldr	r3, [r7, #16]
    2688:	2208      	movs	r2, #8
    268a:	4313      	orrs	r3, r2
    268c:	613b      	str	r3, [r7, #16]
	}

	/* Apply the new configuration to the hardware module */
	dac_module->CTRLA.reg = new_ctrla;
    268e:	697b      	ldr	r3, [r7, #20]
    2690:	b2da      	uxtb	r2, r3
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	701a      	strb	r2, [r3, #0]

	while (dac_is_syncing(module_inst)) {
    2696:	46c0      	nop			; (mov r8, r8)
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	0018      	movs	r0, r3
    269c:	4b05      	ldr	r3, [pc, #20]	; (26b4 <_dac_set_config+0x98>)
    269e:	4798      	blx	r3
    26a0:	1e03      	subs	r3, r0, #0
    26a2:	d1f9      	bne.n	2698 <_dac_set_config+0x7c>
		/* Wait until the synchronization is complete */
	}

	dac_module->CTRLB.reg = new_ctrlb;
    26a4:	693b      	ldr	r3, [r7, #16]
    26a6:	b2da      	uxtb	r2, r3
    26a8:	68fb      	ldr	r3, [r7, #12]
    26aa:	705a      	strb	r2, [r3, #1]
}
    26ac:	46c0      	nop			; (mov r8, r8)
    26ae:	46bd      	mov	sp, r7
    26b0:	b006      	add	sp, #24
    26b2:	bd80      	pop	{r7, pc}
    26b4:	000026b9 	.word	0x000026b9

000026b8 <dac_is_syncing>:
 * \retval true If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
bool dac_is_syncing(
		struct dac_module *const dev_inst)
{
    26b8:	b580      	push	{r7, lr}
    26ba:	b084      	sub	sp, #16
    26bc:	af00      	add	r7, sp, #0
    26be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	681b      	ldr	r3, [r3, #0]
    26c4:	60fb      	str	r3, [r7, #12]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	79db      	ldrb	r3, [r3, #7]
    26ca:	b2db      	uxtb	r3, r3
    26cc:	b25b      	sxtb	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	da01      	bge.n	26d6 <dac_is_syncing+0x1e>
#endif
		return true;
    26d2:	2301      	movs	r3, #1
    26d4:	e000      	b.n	26d8 <dac_is_syncing+0x20>
	}

	return false;
    26d6:	2300      	movs	r3, #0
}
    26d8:	0018      	movs	r0, r3
    26da:	46bd      	mov	sp, r7
    26dc:	b004      	add	sp, #16
    26de:	bd80      	pop	{r7, pc}

000026e0 <dac_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_get_config_defaults(
		struct dac_config *const config)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b082      	sub	sp, #8
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	2200      	movs	r2, #0
    26ec:	701a      	strb	r2, [r3, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    26ee:	687b      	ldr	r3, [r7, #4]
    26f0:	2201      	movs	r2, #1
    26f2:	705a      	strb	r2, [r3, #1]
	config->left_adjust    = false;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	2200      	movs	r2, #0
    26f8:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2200      	movs	r2, #0
    26fe:	711a      	strb	r2, [r3, #4]
#endif
	config->voltage_pump_disable = false;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2200      	movs	r2, #0
    2704:	715a      	strb	r2, [r3, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	2200      	movs	r2, #0
    270a:	70da      	strb	r2, [r3, #3]
	config->run_in_standby = false;
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	2200      	movs	r2, #0
    2710:	719a      	strb	r2, [r3, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	46bd      	mov	sp, r7
    2716:	b002      	add	sp, #8
    2718:	bd80      	pop	{r7, pc}
	...

0000271c <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    271c:	b580      	push	{r7, lr}
    271e:	b086      	sub	sp, #24
    2720:	af00      	add	r7, sp, #0
    2722:	60f8      	str	r0, [r7, #12]
    2724:	60b9      	str	r1, [r7, #8]
    2726:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	68ba      	ldr	r2, [r7, #8]
    272c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
#if (SAMC21)
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
    272e:	2380      	movs	r3, #128	; 0x80
    2730:	02db      	lsls	r3, r3, #11
    2732:	0019      	movs	r1, r3
    2734:	2002      	movs	r0, #2
    2736:	4b35      	ldr	r3, [pc, #212]	; (280c <dac_init+0xf0>)
    2738:	4798      	blx	r3
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    273a:	68bb      	ldr	r3, [r7, #8]
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	b2db      	uxtb	r3, r3
    2740:	001a      	movs	r2, r3
    2742:	2302      	movs	r3, #2
    2744:	4013      	ands	r3, r2
    2746:	d001      	beq.n	274c <dac_init+0x30>
		return STATUS_ERR_DENIED;
    2748:	231c      	movs	r3, #28
    274a:	e05b      	b.n	2804 <dac_init+0xe8>
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    274c:	68bb      	ldr	r3, [r7, #8]
    274e:	781b      	ldrb	r3, [r3, #0]
    2750:	b2db      	uxtb	r3, r3
    2752:	001a      	movs	r2, r3
    2754:	2301      	movs	r3, #1
    2756:	4013      	ands	r3, r2
    2758:	d001      	beq.n	275e <dac_init+0x42>
		return STATUS_BUSY;
    275a:	2305      	movs	r3, #5
    275c:	e052      	b.n	2804 <dac_init+0xe8>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    275e:	2314      	movs	r3, #20
    2760:	18fb      	adds	r3, r7, r3
    2762:	0018      	movs	r0, r3
    2764:	4b2a      	ldr	r3, [pc, #168]	; (2810 <dac_init+0xf4>)
    2766:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	78da      	ldrb	r2, [r3, #3]
    276c:	2314      	movs	r3, #20
    276e:	18fb      	adds	r3, r7, r3
    2770:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    2772:	2314      	movs	r3, #20
    2774:	18fb      	adds	r3, r7, r3
    2776:	0019      	movs	r1, r3
    2778:	2021      	movs	r0, #33	; 0x21
    277a:	4b26      	ldr	r3, [pc, #152]	; (2814 <dac_init+0xf8>)
    277c:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    277e:	2021      	movs	r0, #33	; 0x21
    2780:	4b25      	ldr	r3, [pc, #148]	; (2818 <dac_init+0xfc>)
    2782:	4798      	blx	r3

	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2784:	2310      	movs	r3, #16
    2786:	18fb      	adds	r3, r7, r3
    2788:	0018      	movs	r0, r3
    278a:	4b24      	ldr	r3, [pc, #144]	; (281c <dac_init+0x100>)
    278c:	4798      	blx	r3

	/* Set up the DAC VOUT pin */
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    278e:	2310      	movs	r3, #16
    2790:	18fb      	adds	r3, r7, r3
    2792:	2201      	movs	r2, #1
    2794:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2796:	2310      	movs	r3, #16
    2798:	18fb      	adds	r3, r7, r3
    279a:	2200      	movs	r2, #0
    279c:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    279e:	2310      	movs	r3, #16
    27a0:	18fb      	adds	r3, r7, r3
    27a2:	2200      	movs	r2, #0
    27a4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    27a6:	2310      	movs	r3, #16
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	0019      	movs	r1, r3
    27ac:	2002      	movs	r0, #2
    27ae:	4b1c      	ldr	r3, [pc, #112]	; (2820 <dac_init+0x104>)
    27b0:	4798      	blx	r3

	/* Write configuration to module */
	_dac_set_config(module_inst, config);
    27b2:	687a      	ldr	r2, [r7, #4]
    27b4:	68fb      	ldr	r3, [r7, #12]
    27b6:	0011      	movs	r1, r2
    27b8:	0018      	movs	r0, r3
    27ba:	4b1a      	ldr	r3, [pc, #104]	; (2824 <dac_init+0x108>)
    27bc:	4798      	blx	r3

	/* Store reference selection for later use */
	module_inst->reference = config->reference;
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	781a      	ldrb	r2, [r3, #0]
    27c2:	68fb      	ldr	r3, [r7, #12]
    27c4:	715a      	strb	r2, [r3, #5]

#if DAC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
    27c6:	2317      	movs	r3, #23
    27c8:	18fb      	adds	r3, r7, r3
    27ca:	2200      	movs	r2, #0
    27cc:	701a      	strb	r2, [r3, #0]
    27ce:	e010      	b.n	27f2 <dac_init+0xd6>
		module_inst->callback[i] = NULL;
    27d0:	2317      	movs	r3, #23
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	3304      	adds	r3, #4
    27da:	009b      	lsls	r3, r3, #2
    27dc:	18d3      	adds	r3, r2, r3
    27de:	3304      	adds	r3, #4
    27e0:	2200      	movs	r2, #0
    27e2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
    27e4:	2317      	movs	r3, #23
    27e6:	18fb      	adds	r3, r7, r3
    27e8:	781a      	ldrb	r2, [r3, #0]
    27ea:	2317      	movs	r3, #23
    27ec:	18fb      	adds	r3, r7, r3
    27ee:	3201      	adds	r2, #1
    27f0:	701a      	strb	r2, [r3, #0]
    27f2:	2317      	movs	r3, #23
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	2b02      	cmp	r3, #2
    27fa:	d9e9      	bls.n	27d0 <dac_init+0xb4>
	};

	_dac_instances[0] = module_inst;
    27fc:	4b0a      	ldr	r3, [pc, #40]	; (2828 <dac_init+0x10c>)
    27fe:	68fa      	ldr	r2, [r7, #12]
    2800:	601a      	str	r2, [r3, #0]
#endif

	return STATUS_OK;
    2802:	2300      	movs	r3, #0
}
    2804:	0018      	movs	r0, r3
    2806:	46bd      	mov	sp, r7
    2808:	b006      	add	sp, #24
    280a:	bd80      	pop	{r7, pc}
    280c:	00002559 	.word	0x00002559
    2810:	00002541 	.word	0x00002541
    2814:	0000f5fd 	.word	0x0000f5fd
    2818:	0000f641 	.word	0x0000f641
    281c:	000025b5 	.word	0x000025b5
    2820:	0000f931 	.word	0x0000f931
    2824:	0000261d 	.word	0x0000261d
    2828:	20003c84 	.word	0x20003c84

0000282c <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    282c:	b580      	push	{r7, lr}
    282e:	b084      	sub	sp, #16
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	681b      	ldr	r3, [r3, #0]
    2838:	60fb      	str	r3, [r7, #12]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	785b      	ldrb	r3, [r3, #1]
    283e:	b2da      	uxtb	r2, r3
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	791b      	ldrb	r3, [r3, #4]
    2844:	4313      	orrs	r3, r2
    2846:	b2da      	uxtb	r2, r3
    2848:	68fb      	ldr	r3, [r7, #12]
    284a:	705a      	strb	r2, [r3, #1]

	while (dac_is_syncing(module_inst)) {
    284c:	46c0      	nop			; (mov r8, r8)
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	0018      	movs	r0, r3
    2852:	4b0b      	ldr	r3, [pc, #44]	; (2880 <dac_enable+0x54>)
    2854:	4798      	blx	r3
    2856:	1e03      	subs	r3, r0, #0
    2858:	d1f9      	bne.n	284e <dac_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    285a:	68fb      	ldr	r3, [r7, #12]
    285c:	781b      	ldrb	r3, [r3, #0]
    285e:	b2db      	uxtb	r3, r3
    2860:	2202      	movs	r2, #2
    2862:	4313      	orrs	r3, r2
    2864:	b2da      	uxtb	r2, r3
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	701a      	strb	r2, [r3, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	795b      	ldrb	r3, [r3, #5]
    286e:	2b00      	cmp	r3, #0
    2870:	d102      	bne.n	2878 <dac_enable+0x4c>
	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
		};
	}
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    2872:	2001      	movs	r0, #1
    2874:	4b03      	ldr	r3, [pc, #12]	; (2884 <dac_enable+0x58>)
    2876:	4798      	blx	r3
	}

#endif
}
    2878:	46c0      	nop			; (mov r8, r8)
    287a:	46bd      	mov	sp, r7
    287c:	b004      	add	sp, #16
    287e:	bd80      	pop	{r7, pc}
    2880:	000026b9 	.word	0x000026b9
    2884:	000025dd 	.word	0x000025dd

00002888 <dac_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
    2888:	b580      	push	{r7, lr}
    288a:	b082      	sub	sp, #8
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
}
    2890:	46c0      	nop			; (mov r8, r8)
    2892:	46bd      	mov	sp, r7
    2894:	b002      	add	sp, #8
    2896:	bd80      	pop	{r7, pc}

00002898 <dac_chan_set_config>:
 */
void dac_chan_set_config(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	60f8      	str	r0, [r7, #12]
    28a0:	607a      	str	r2, [r7, #4]
    28a2:	230b      	movs	r3, #11
    28a4:	18fb      	adds	r3, r7, r3
    28a6:	1c0a      	adds	r2, r1, #0
    28a8:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	46bd      	mov	sp, r7
    28ae:	b004      	add	sp, #16
    28b0:	bd80      	pop	{r7, pc}

000028b2 <dac_chan_enable>:
 *
 */
void dac_chan_enable(
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
    28b2:	b580      	push	{r7, lr}
    28b4:	b082      	sub	sp, #8
    28b6:	af00      	add	r7, sp, #0
    28b8:	6078      	str	r0, [r7, #4]
    28ba:	000a      	movs	r2, r1
    28bc:	1cfb      	adds	r3, r7, #3
    28be:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
    28c0:	46c0      	nop			; (mov r8, r8)
    28c2:	46bd      	mov	sp, r7
    28c4:	b002      	add	sp, #8
    28c6:	bd80      	pop	{r7, pc}

000028c8 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b084      	sub	sp, #16
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
    28d0:	0008      	movs	r0, r1
    28d2:	0011      	movs	r1, r2
    28d4:	1cfb      	adds	r3, r7, #3
    28d6:	1c02      	adds	r2, r0, #0
    28d8:	701a      	strb	r2, [r3, #0]
    28da:	003b      	movs	r3, r7
    28dc:	1c0a      	adds	r2, r1, #0
    28de:	801a      	strh	r2, [r3, #0]
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	60fb      	str	r3, [r7, #12]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	0018      	movs	r0, r3
    28ec:	4b0a      	ldr	r3, [pc, #40]	; (2918 <dac_chan_write+0x50>)
    28ee:	4798      	blx	r3
    28f0:	1e03      	subs	r3, r0, #0
    28f2:	d1f9      	bne.n	28e8 <dac_chan_write+0x20>
	};

	if (module_inst->start_on_event) {
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	799b      	ldrb	r3, [r3, #6]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d004      	beq.n	2906 <dac_chan_write+0x3e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	003a      	movs	r2, r7
    2900:	8812      	ldrh	r2, [r2, #0]
    2902:	819a      	strh	r2, [r3, #12]
    2904:	e003      	b.n	290e <dac_chan_write+0x46>
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
    2906:	68fb      	ldr	r3, [r7, #12]
    2908:	003a      	movs	r2, r7
    290a:	8812      	ldrh	r2, [r2, #0]
    290c:	811a      	strh	r2, [r3, #8]
	}

	return STATUS_OK;
    290e:	2300      	movs	r3, #0
}
    2910:	0018      	movs	r0, r3
    2912:	46bd      	mov	sp, r7
    2914:	b004      	add	sp, #16
    2916:	bd80      	pop	{r7, pc}
    2918:	000026b9 	.word	0x000026b9

0000291c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    2922:	0002      	movs	r2, r0
    2924:	1dfb      	adds	r3, r7, #7
    2926:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2928:	4a07      	ldr	r2, [pc, #28]	; (2948 <system_interrupt_disable+0x2c>)
    292a:	1dfb      	adds	r3, r7, #7
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	0019      	movs	r1, r3
    2930:	231f      	movs	r3, #31
    2932:	400b      	ands	r3, r1
    2934:	2101      	movs	r1, #1
    2936:	4099      	lsls	r1, r3
    2938:	000b      	movs	r3, r1
    293a:	0019      	movs	r1, r3
    293c:	2380      	movs	r3, #128	; 0x80
    293e:	50d1      	str	r1, [r2, r3]
}
    2940:	46c0      	nop			; (mov r8, r8)
    2942:	46bd      	mov	sp, r7
    2944:	b002      	add	sp, #8
    2946:	bd80      	pop	{r7, pc}
    2948:	e000e100 	.word	0xe000e100

0000294c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    294c:	b580      	push	{r7, lr}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	0002      	movs	r2, r0
    2954:	1dfb      	adds	r3, r7, #7
    2956:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    2958:	1dfb      	adds	r3, r7, #7
    295a:	781a      	ldrb	r2, [r3, #0]
    295c:	4b37      	ldr	r3, [pc, #220]	; (2a3c <_dac_interrupt_handler+0xf0>)
    295e:	0092      	lsls	r2, r2, #2
    2960:	58d3      	ldr	r3, [r2, r3]
    2962:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    296a:	68bb      	ldr	r3, [r7, #8]
    296c:	799b      	ldrb	r3, [r3, #6]
    296e:	b2db      	uxtb	r3, r3
    2970:	001a      	movs	r2, r3
    2972:	2301      	movs	r3, #1
    2974:	4013      	ands	r3, r2
    2976:	d00e      	beq.n	2996 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    2978:	68bb      	ldr	r3, [r7, #8]
    297a:	2201      	movs	r2, #1
    297c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    297e:	68fb      	ldr	r3, [r7, #12]
    2980:	3314      	adds	r3, #20
    2982:	2b00      	cmp	r3, #0
    2984:	d007      	beq.n	2996 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    2986:	68fb      	ldr	r3, [r7, #12]
    2988:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    298a:	2b00      	cmp	r3, #0
    298c:	d003      	beq.n	2996 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    298e:	68fb      	ldr	r3, [r7, #12]
    2990:	699b      	ldr	r3, [r3, #24]
    2992:	2000      	movs	r0, #0
    2994:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    2996:	68bb      	ldr	r3, [r7, #8]
    2998:	799b      	ldrb	r3, [r3, #6]
    299a:	b2db      	uxtb	r3, r3
    299c:	001a      	movs	r2, r3
    299e:	2302      	movs	r3, #2
    29a0:	4013      	ands	r3, r2
    29a2:	d047      	beq.n	2a34 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    29a4:	68bb      	ldr	r3, [r7, #8]
    29a6:	2202      	movs	r2, #2
    29a8:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    29aa:	68fb      	ldr	r3, [r7, #12]
    29ac:	899b      	ldrh	r3, [r3, #12]
    29ae:	b29b      	uxth	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d033      	beq.n	2a1c <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    29b4:	68fb      	ldr	r3, [r7, #12]
    29b6:	689a      	ldr	r2, [r3, #8]
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	89db      	ldrh	r3, [r3, #14]
    29bc:	b29b      	uxth	r3, r3
    29be:	1c59      	adds	r1, r3, #1
    29c0:	b288      	uxth	r0, r1
    29c2:	68f9      	ldr	r1, [r7, #12]
    29c4:	81c8      	strh	r0, [r1, #14]
    29c6:	005b      	lsls	r3, r3, #1
    29c8:	18d3      	adds	r3, r2, r3
    29ca:	881b      	ldrh	r3, [r3, #0]
    29cc:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    29ce:	68bb      	ldr	r3, [r7, #8]
    29d0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    29d2:	68fb      	ldr	r3, [r7, #12]
    29d4:	899b      	ldrh	r3, [r3, #12]
    29d6:	b29b      	uxth	r3, r3
    29d8:	3b01      	subs	r3, #1
    29da:	b29a      	uxth	r2, r3
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    29e0:	68fb      	ldr	r3, [r7, #12]
    29e2:	899b      	ldrh	r3, [r3, #12]
    29e4:	b29b      	uxth	r3, r3
    29e6:	2b00      	cmp	r3, #0
    29e8:	d118      	bne.n	2a1c <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	2220      	movs	r2, #32
    29ee:	2100      	movs	r1, #0
    29f0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    29f2:	68bb      	ldr	r3, [r7, #8]
    29f4:	2202      	movs	r2, #2
    29f6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    29f8:	68bb      	ldr	r3, [r7, #8]
    29fa:	2202      	movs	r2, #2
    29fc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    29fe:	2019      	movs	r0, #25
    2a00:	4b0f      	ldr	r3, [pc, #60]	; (2a40 <_dac_interrupt_handler+0xf4>)
    2a02:	4798      	blx	r3

				if ((module->callback) &&
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	3314      	adds	r3, #20
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d007      	beq.n	2a1c <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    2a0c:	68fb      	ldr	r3, [r7, #12]
    2a0e:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    2a10:	2b00      	cmp	r3, #0
    2a12:	d003      	beq.n	2a1c <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	69db      	ldr	r3, [r3, #28]
    2a18:	2000      	movs	r0, #0
    2a1a:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    2a1c:	68fb      	ldr	r3, [r7, #12]
    2a1e:	3314      	adds	r3, #20
    2a20:	2b00      	cmp	r3, #0
    2a22:	d007      	beq.n	2a34 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    2a24:	68fb      	ldr	r3, [r7, #12]
    2a26:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d003      	beq.n	2a34 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    2a2c:	68fb      	ldr	r3, [r7, #12]
    2a2e:	695b      	ldr	r3, [r3, #20]
    2a30:	2000      	movs	r0, #0
    2a32:	4798      	blx	r3
		}
	}
}
    2a34:	46c0      	nop			; (mov r8, r8)
    2a36:	46bd      	mov	sp, r7
    2a38:	b004      	add	sp, #16
    2a3a:	bd80      	pop	{r7, pc}
    2a3c:	20003c84 	.word	0x20003c84
    2a40:	0000291d 	.word	0x0000291d

00002a44 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    2a44:	b580      	push	{r7, lr}
    2a46:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    2a48:	2000      	movs	r0, #0
    2a4a:	4b02      	ldr	r3, [pc, #8]	; (2a54 <DAC_Handler+0x10>)
    2a4c:	4798      	blx	r3
}
    2a4e:	46c0      	nop			; (mov r8, r8)
    2a50:	46bd      	mov	sp, r7
    2a52:	bd80      	pop	{r7, pc}
    2a54:	0000294d 	.word	0x0000294d

00002a58 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b084      	sub	sp, #16
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	0002      	movs	r2, r0
    2a60:	1dfb      	adds	r3, r7, #7
    2a62:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    2a64:	230f      	movs	r3, #15
    2a66:	18fb      	adds	r3, r7, r3
    2a68:	1dfa      	adds	r2, r7, #7
    2a6a:	7812      	ldrb	r2, [r2, #0]
    2a6c:	0952      	lsrs	r2, r2, #5
    2a6e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    2a70:	230f      	movs	r3, #15
    2a72:	18fb      	adds	r3, r7, r3
    2a74:	781b      	ldrb	r3, [r3, #0]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d10c      	bne.n	2a94 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <_extint_get_eic_from_channel+0x48>)
    2a7c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    2a7e:	230f      	movs	r3, #15
    2a80:	18fb      	adds	r3, r7, r3
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	009b      	lsls	r3, r3, #2
    2a86:	2210      	movs	r2, #16
    2a88:	4694      	mov	ip, r2
    2a8a:	44bc      	add	ip, r7
    2a8c:	4463      	add	r3, ip
    2a8e:	3b08      	subs	r3, #8
    2a90:	681b      	ldr	r3, [r3, #0]
    2a92:	e000      	b.n	2a96 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2a94:	2300      	movs	r3, #0
	}
}
    2a96:	0018      	movs	r0, r3
    2a98:	46bd      	mov	sp, r7
    2a9a:	b004      	add	sp, #16
    2a9c:	bd80      	pop	{r7, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	40001800 	.word	0x40001800

00002aa4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b084      	sub	sp, #16
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	0002      	movs	r2, r0
    2aac:	1dfb      	adds	r3, r7, #7
    2aae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2ab0:	1dfb      	adds	r3, r7, #7
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b0b      	ldr	r3, [pc, #44]	; (2ae4 <extint_chan_is_detected+0x40>)
    2ab8:	4798      	blx	r3
    2aba:	0003      	movs	r3, r0
    2abc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    2abe:	1dfb      	adds	r3, r7, #7
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	221f      	movs	r2, #31
    2ac4:	4013      	ands	r3, r2
    2ac6:	2201      	movs	r2, #1
    2ac8:	409a      	lsls	r2, r3
    2aca:	0013      	movs	r3, r2
    2acc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    2ace:	68fb      	ldr	r3, [r7, #12]
    2ad0:	691b      	ldr	r3, [r3, #16]
    2ad2:	68ba      	ldr	r2, [r7, #8]
    2ad4:	4013      	ands	r3, r2
    2ad6:	1e5a      	subs	r2, r3, #1
    2ad8:	4193      	sbcs	r3, r2
    2ada:	b2db      	uxtb	r3, r3
}
    2adc:	0018      	movs	r0, r3
    2ade:	46bd      	mov	sp, r7
    2ae0:	b004      	add	sp, #16
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	00002a59 	.word	0x00002a59

00002ae8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b084      	sub	sp, #16
    2aec:	af00      	add	r7, sp, #0
    2aee:	0002      	movs	r2, r0
    2af0:	1dfb      	adds	r3, r7, #7
    2af2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2af4:	1dfb      	adds	r3, r7, #7
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	0018      	movs	r0, r3
    2afa:	4b09      	ldr	r3, [pc, #36]	; (2b20 <extint_chan_clear_detected+0x38>)
    2afc:	4798      	blx	r3
    2afe:	0003      	movs	r3, r0
    2b00:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    2b02:	1dfb      	adds	r3, r7, #7
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	221f      	movs	r2, #31
    2b08:	4013      	ands	r3, r2
    2b0a:	2201      	movs	r2, #1
    2b0c:	409a      	lsls	r2, r3
    2b0e:	0013      	movs	r3, r2
    2b10:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    2b12:	68fb      	ldr	r3, [r7, #12]
    2b14:	68ba      	ldr	r2, [r7, #8]
    2b16:	611a      	str	r2, [r3, #16]
}
    2b18:	46c0      	nop			; (mov r8, r8)
    2b1a:	46bd      	mov	sp, r7
    2b1c:	b004      	add	sp, #16
    2b1e:	bd80      	pop	{r7, pc}
    2b20:	00002a59 	.word	0x00002a59

00002b24 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b28:	4b15      	ldr	r3, [pc, #84]	; (2b80 <EIC_Handler+0x5c>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	701a      	strb	r2, [r3, #0]
    2b2e:	e020      	b.n	2b72 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    2b30:	4b13      	ldr	r3, [pc, #76]	; (2b80 <EIC_Handler+0x5c>)
    2b32:	781b      	ldrb	r3, [r3, #0]
    2b34:	0018      	movs	r0, r3
    2b36:	4b13      	ldr	r3, [pc, #76]	; (2b84 <EIC_Handler+0x60>)
    2b38:	4798      	blx	r3
    2b3a:	1e03      	subs	r3, r0, #0
    2b3c:	d013      	beq.n	2b66 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    2b3e:	4b10      	ldr	r3, [pc, #64]	; (2b80 <EIC_Handler+0x5c>)
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	0018      	movs	r0, r3
    2b44:	4b10      	ldr	r3, [pc, #64]	; (2b88 <EIC_Handler+0x64>)
    2b46:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2b48:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <EIC_Handler+0x5c>)
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	001a      	movs	r2, r3
    2b4e:	4b0f      	ldr	r3, [pc, #60]	; (2b8c <EIC_Handler+0x68>)
    2b50:	0092      	lsls	r2, r2, #2
    2b52:	58d3      	ldr	r3, [r2, r3]
    2b54:	2b00      	cmp	r3, #0
    2b56:	d006      	beq.n	2b66 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2b58:	4b09      	ldr	r3, [pc, #36]	; (2b80 <EIC_Handler+0x5c>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	001a      	movs	r2, r3
    2b5e:	4b0b      	ldr	r3, [pc, #44]	; (2b8c <EIC_Handler+0x68>)
    2b60:	0092      	lsls	r2, r2, #2
    2b62:	58d3      	ldr	r3, [r2, r3]
    2b64:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b66:	4b06      	ldr	r3, [pc, #24]	; (2b80 <EIC_Handler+0x5c>)
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	3301      	adds	r3, #1
    2b6c:	b2da      	uxtb	r2, r3
    2b6e:	4b04      	ldr	r3, [pc, #16]	; (2b80 <EIC_Handler+0x5c>)
    2b70:	701a      	strb	r2, [r3, #0]
    2b72:	4b03      	ldr	r3, [pc, #12]	; (2b80 <EIC_Handler+0x5c>)
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	2b0f      	cmp	r3, #15
    2b78:	d9da      	bls.n	2b30 <EIC_Handler+0xc>
			}
		}
	}
}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}
    2b80:	20003c88 	.word	0x20003c88
    2b84:	00002aa5 	.word	0x00002aa5
    2b88:	00002ae9 	.word	0x00002ae9
    2b8c:	20003c8c 	.word	0x20003c8c

00002b90 <system_gclk_chan_get_config_defaults>:
{
    2b90:	b580      	push	{r7, lr}
    2b92:	b082      	sub	sp, #8
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	2200      	movs	r2, #0
    2b9c:	701a      	strb	r2, [r3, #0]
}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	46bd      	mov	sp, r7
    2ba2:	b002      	add	sp, #8
    2ba4:	bd80      	pop	{r7, pc}
	...

00002ba8 <system_apb_clock_set_mask>:
{
    2ba8:	b580      	push	{r7, lr}
    2baa:	b082      	sub	sp, #8
    2bac:	af00      	add	r7, sp, #0
    2bae:	0002      	movs	r2, r0
    2bb0:	6039      	str	r1, [r7, #0]
    2bb2:	1dfb      	adds	r3, r7, #7
    2bb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2bb6:	1dfb      	adds	r3, r7, #7
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	2b01      	cmp	r3, #1
    2bbc:	d00a      	beq.n	2bd4 <system_apb_clock_set_mask+0x2c>
    2bbe:	2b02      	cmp	r3, #2
    2bc0:	d00f      	beq.n	2be2 <system_apb_clock_set_mask+0x3a>
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d114      	bne.n	2bf0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2bc6:	4b0e      	ldr	r3, [pc, #56]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2bc8:	4a0d      	ldr	r2, [pc, #52]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2bca:	6991      	ldr	r1, [r2, #24]
    2bcc:	683a      	ldr	r2, [r7, #0]
    2bce:	430a      	orrs	r2, r1
    2bd0:	619a      	str	r2, [r3, #24]
			break;
    2bd2:	e00f      	b.n	2bf4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2bd4:	4b0a      	ldr	r3, [pc, #40]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2bd6:	4a0a      	ldr	r2, [pc, #40]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2bd8:	69d1      	ldr	r1, [r2, #28]
    2bda:	683a      	ldr	r2, [r7, #0]
    2bdc:	430a      	orrs	r2, r1
    2bde:	61da      	str	r2, [r3, #28]
			break;
    2be0:	e008      	b.n	2bf4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2be2:	4b07      	ldr	r3, [pc, #28]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2be4:	4a06      	ldr	r2, [pc, #24]	; (2c00 <system_apb_clock_set_mask+0x58>)
    2be6:	6a11      	ldr	r1, [r2, #32]
    2be8:	683a      	ldr	r2, [r7, #0]
    2bea:	430a      	orrs	r2, r1
    2bec:	621a      	str	r2, [r3, #32]
			break;
    2bee:	e001      	b.n	2bf4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2bf0:	2317      	movs	r3, #23
    2bf2:	e000      	b.n	2bf6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2bf4:	2300      	movs	r3, #0
}
    2bf6:	0018      	movs	r0, r3
    2bf8:	46bd      	mov	sp, r7
    2bfa:	b002      	add	sp, #8
    2bfc:	bd80      	pop	{r7, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	40000400 	.word	0x40000400

00002c04 <system_interrupt_enable>:
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b082      	sub	sp, #8
    2c08:	af00      	add	r7, sp, #0
    2c0a:	0002      	movs	r2, r0
    2c0c:	1dfb      	adds	r3, r7, #7
    2c0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2c10:	4b06      	ldr	r3, [pc, #24]	; (2c2c <system_interrupt_enable+0x28>)
    2c12:	1dfa      	adds	r2, r7, #7
    2c14:	7812      	ldrb	r2, [r2, #0]
    2c16:	0011      	movs	r1, r2
    2c18:	221f      	movs	r2, #31
    2c1a:	400a      	ands	r2, r1
    2c1c:	2101      	movs	r1, #1
    2c1e:	4091      	lsls	r1, r2
    2c20:	000a      	movs	r2, r1
    2c22:	601a      	str	r2, [r3, #0]
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b002      	add	sp, #8
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	e000e100 	.word	0xe000e100

00002c30 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2c36:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <extint_is_syncing+0x44>)
    2c38:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2c3a:	2300      	movs	r3, #0
    2c3c:	607b      	str	r3, [r7, #4]
    2c3e:	e011      	b.n	2c64 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	009b      	lsls	r3, r3, #2
    2c44:	2208      	movs	r2, #8
    2c46:	4694      	mov	ip, r2
    2c48:	44bc      	add	ip, r7
    2c4a:	4463      	add	r3, ip
    2c4c:	3b08      	subs	r3, #8
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	785b      	ldrb	r3, [r3, #1]
    2c52:	b2db      	uxtb	r3, r3
    2c54:	b25b      	sxtb	r3, r3
    2c56:	2b00      	cmp	r3, #0
    2c58:	da01      	bge.n	2c5e <extint_is_syncing+0x2e>
			return true;
    2c5a:	2301      	movs	r3, #1
    2c5c:	e006      	b.n	2c6c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	3301      	adds	r3, #1
    2c62:	607b      	str	r3, [r7, #4]
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d0ea      	beq.n	2c40 <extint_is_syncing+0x10>
		}
	}
	return false;
    2c6a:	2300      	movs	r3, #0
}
    2c6c:	0018      	movs	r0, r3
    2c6e:	46bd      	mov	sp, r7
    2c70:	b002      	add	sp, #8
    2c72:	bd80      	pop	{r7, pc}
    2c74:	40001800 	.word	0x40001800

00002c78 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b084      	sub	sp, #16
    2c7c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2c7e:	4b2d      	ldr	r3, [pc, #180]	; (2d34 <_system_extint_init+0xbc>)
    2c80:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    2c82:	2140      	movs	r1, #64	; 0x40
    2c84:	2000      	movs	r0, #0
    2c86:	4b2c      	ldr	r3, [pc, #176]	; (2d38 <_system_extint_init+0xc0>)
    2c88:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2c8a:	003b      	movs	r3, r7
    2c8c:	0018      	movs	r0, r3
    2c8e:	4b2b      	ldr	r3, [pc, #172]	; (2d3c <_system_extint_init+0xc4>)
    2c90:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    2c92:	003b      	movs	r3, r7
    2c94:	2200      	movs	r2, #0
    2c96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2c98:	003b      	movs	r3, r7
    2c9a:	0019      	movs	r1, r3
    2c9c:	2005      	movs	r0, #5
    2c9e:	4b28      	ldr	r3, [pc, #160]	; (2d40 <_system_extint_init+0xc8>)
    2ca0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    2ca2:	2005      	movs	r0, #5
    2ca4:	4b27      	ldr	r3, [pc, #156]	; (2d44 <_system_extint_init+0xcc>)
    2ca6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2ca8:	2300      	movs	r3, #0
    2caa:	60fb      	str	r3, [r7, #12]
    2cac:	e018      	b.n	2ce0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2cae:	68fb      	ldr	r3, [r7, #12]
    2cb0:	009b      	lsls	r3, r3, #2
    2cb2:	2210      	movs	r2, #16
    2cb4:	4694      	mov	ip, r2
    2cb6:	44bc      	add	ip, r7
    2cb8:	4463      	add	r3, ip
    2cba:	3b0c      	subs	r3, #12
    2cbc:	681a      	ldr	r2, [r3, #0]
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	009b      	lsls	r3, r3, #2
    2cc2:	2110      	movs	r1, #16
    2cc4:	468c      	mov	ip, r1
    2cc6:	44bc      	add	ip, r7
    2cc8:	4463      	add	r3, ip
    2cca:	3b0c      	subs	r3, #12
    2ccc:	681b      	ldr	r3, [r3, #0]
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	b2db      	uxtb	r3, r3
    2cd2:	2101      	movs	r1, #1
    2cd4:	430b      	orrs	r3, r1
    2cd6:	b2db      	uxtb	r3, r3
    2cd8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2cda:	68fb      	ldr	r3, [r7, #12]
    2cdc:	3301      	adds	r3, #1
    2cde:	60fb      	str	r3, [r7, #12]
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d0e3      	beq.n	2cae <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	4b17      	ldr	r3, [pc, #92]	; (2d48 <_system_extint_init+0xd0>)
    2cea:	4798      	blx	r3
    2cec:	1e03      	subs	r3, r0, #0
    2cee:	d1fb      	bne.n	2ce8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2cf0:	230b      	movs	r3, #11
    2cf2:	18fb      	adds	r3, r7, r3
    2cf4:	2200      	movs	r2, #0
    2cf6:	701a      	strb	r2, [r3, #0]
    2cf8:	e00d      	b.n	2d16 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    2cfa:	230b      	movs	r3, #11
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	781a      	ldrb	r2, [r3, #0]
    2d00:	4b12      	ldr	r3, [pc, #72]	; (2d4c <_system_extint_init+0xd4>)
    2d02:	0092      	lsls	r2, r2, #2
    2d04:	2100      	movs	r1, #0
    2d06:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2d08:	230b      	movs	r3, #11
    2d0a:	18fb      	adds	r3, r7, r3
    2d0c:	781a      	ldrb	r2, [r3, #0]
    2d0e:	230b      	movs	r3, #11
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	3201      	adds	r2, #1
    2d14:	701a      	strb	r2, [r3, #0]
    2d16:	230b      	movs	r3, #11
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	2b0f      	cmp	r3, #15
    2d1e:	d9ec      	bls.n	2cfa <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    2d20:	2004      	movs	r0, #4
    2d22:	4b0b      	ldr	r3, [pc, #44]	; (2d50 <_system_extint_init+0xd8>)
    2d24:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    2d26:	4b0b      	ldr	r3, [pc, #44]	; (2d54 <_system_extint_init+0xdc>)
    2d28:	4798      	blx	r3
}
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b004      	add	sp, #16
    2d30:	bd80      	pop	{r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	40001800 	.word	0x40001800
    2d38:	00002ba9 	.word	0x00002ba9
    2d3c:	00002b91 	.word	0x00002b91
    2d40:	0000f5fd 	.word	0x0000f5fd
    2d44:	0000f641 	.word	0x0000f641
    2d48:	00002c31 	.word	0x00002c31
    2d4c:	20003c8c 	.word	0x20003c8c
    2d50:	00002c05 	.word	0x00002c05
    2d54:	00002d59 	.word	0x00002d59

00002d58 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	b082      	sub	sp, #8
    2d5c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2d5e:	4b15      	ldr	r3, [pc, #84]	; (2db4 <_extint_enable+0x5c>)
    2d60:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2d62:	2300      	movs	r3, #0
    2d64:	607b      	str	r3, [r7, #4]
    2d66:	e018      	b.n	2d9a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	009b      	lsls	r3, r3, #2
    2d6c:	2208      	movs	r2, #8
    2d6e:	4694      	mov	ip, r2
    2d70:	44bc      	add	ip, r7
    2d72:	4463      	add	r3, ip
    2d74:	3b08      	subs	r3, #8
    2d76:	681a      	ldr	r2, [r3, #0]
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	009b      	lsls	r3, r3, #2
    2d7c:	2108      	movs	r1, #8
    2d7e:	468c      	mov	ip, r1
    2d80:	44bc      	add	ip, r7
    2d82:	4463      	add	r3, ip
    2d84:	3b08      	subs	r3, #8
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	2102      	movs	r1, #2
    2d8e:	430b      	orrs	r3, r1
    2d90:	b2db      	uxtb	r3, r3
    2d92:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	3301      	adds	r3, #1
    2d98:	607b      	str	r3, [r7, #4]
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d0e3      	beq.n	2d68 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    2da0:	46c0      	nop			; (mov r8, r8)
    2da2:	4b05      	ldr	r3, [pc, #20]	; (2db8 <_extint_enable+0x60>)
    2da4:	4798      	blx	r3
    2da6:	1e03      	subs	r3, r0, #0
    2da8:	d1fb      	bne.n	2da2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	46bd      	mov	sp, r7
    2dae:	b002      	add	sp, #8
    2db0:	bd80      	pop	{r7, pc}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	40001800 	.word	0x40001800
    2db8:	00002c31 	.word	0x00002c31

00002dbc <system_gclk_chan_get_config_defaults>:
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	b082      	sub	sp, #8
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	2200      	movs	r2, #0
    2dc8:	701a      	strb	r2, [r3, #0]
}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	46bd      	mov	sp, r7
    2dce:	b002      	add	sp, #8
    2dd0:	bd80      	pop	{r7, pc}
	...

00002dd4 <system_apb_clock_set_mask>:
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b082      	sub	sp, #8
    2dd8:	af00      	add	r7, sp, #0
    2dda:	0002      	movs	r2, r0
    2ddc:	6039      	str	r1, [r7, #0]
    2dde:	1dfb      	adds	r3, r7, #7
    2de0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2de2:	1dfb      	adds	r3, r7, #7
    2de4:	781b      	ldrb	r3, [r3, #0]
    2de6:	2b01      	cmp	r3, #1
    2de8:	d00a      	beq.n	2e00 <system_apb_clock_set_mask+0x2c>
    2dea:	2b02      	cmp	r3, #2
    2dec:	d00f      	beq.n	2e0e <system_apb_clock_set_mask+0x3a>
    2dee:	2b00      	cmp	r3, #0
    2df0:	d114      	bne.n	2e1c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2df2:	4b0e      	ldr	r3, [pc, #56]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2df4:	4a0d      	ldr	r2, [pc, #52]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2df6:	6991      	ldr	r1, [r2, #24]
    2df8:	683a      	ldr	r2, [r7, #0]
    2dfa:	430a      	orrs	r2, r1
    2dfc:	619a      	str	r2, [r3, #24]
			break;
    2dfe:	e00f      	b.n	2e20 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2e00:	4b0a      	ldr	r3, [pc, #40]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2e02:	4a0a      	ldr	r2, [pc, #40]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2e04:	69d1      	ldr	r1, [r2, #28]
    2e06:	683a      	ldr	r2, [r7, #0]
    2e08:	430a      	orrs	r2, r1
    2e0a:	61da      	str	r2, [r3, #28]
			break;
    2e0c:	e008      	b.n	2e20 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2e0e:	4b07      	ldr	r3, [pc, #28]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2e10:	4a06      	ldr	r2, [pc, #24]	; (2e2c <system_apb_clock_set_mask+0x58>)
    2e12:	6a11      	ldr	r1, [r2, #32]
    2e14:	683a      	ldr	r2, [r7, #0]
    2e16:	430a      	orrs	r2, r1
    2e18:	621a      	str	r2, [r3, #32]
			break;
    2e1a:	e001      	b.n	2e20 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2e1c:	2317      	movs	r3, #23
    2e1e:	e000      	b.n	2e22 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2e20:	2300      	movs	r3, #0
}
    2e22:	0018      	movs	r0, r3
    2e24:	46bd      	mov	sp, r7
    2e26:	b002      	add	sp, #8
    2e28:	bd80      	pop	{r7, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	40000400 	.word	0x40000400

00002e30 <system_pinmux_get_config_defaults>:
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b082      	sub	sp, #8
    2e34:	af00      	add	r7, sp, #0
    2e36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	2280      	movs	r2, #128	; 0x80
    2e3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e3e:	687b      	ldr	r3, [r7, #4]
    2e40:	2200      	movs	r2, #0
    2e42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	2201      	movs	r2, #1
    2e48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	2200      	movs	r2, #0
    2e4e:	70da      	strb	r2, [r3, #3]
}
    2e50:	46c0      	nop			; (mov r8, r8)
    2e52:	46bd      	mov	sp, r7
    2e54:	b002      	add	sp, #8
    2e56:	bd80      	pop	{r7, pc}

00002e58 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2e5c:	4b05      	ldr	r3, [pc, #20]	; (2e74 <system_is_debugger_present+0x1c>)
    2e5e:	789b      	ldrb	r3, [r3, #2]
    2e60:	b2db      	uxtb	r3, r3
    2e62:	001a      	movs	r2, r3
    2e64:	2302      	movs	r3, #2
    2e66:	4013      	ands	r3, r2
    2e68:	1e5a      	subs	r2, r3, #1
    2e6a:	4193      	sbcs	r3, r2
    2e6c:	b2db      	uxtb	r3, r3
}
    2e6e:	0018      	movs	r0, r3
    2e70:	46bd      	mov	sp, r7
    2e72:	bd80      	pop	{r7, pc}
    2e74:	41002000 	.word	0x41002000

00002e78 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    2e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e7a:	b097      	sub	sp, #92	; 0x5c
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6178      	str	r0, [r7, #20]
    2e80:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    2e82:	2300      	movs	r3, #0
    2e84:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    2e86:	2300      	movs	r3, #0
    2e88:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    2e8a:	2300      	movs	r3, #0
    2e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    2e8e:	233b      	movs	r3, #59	; 0x3b
    2e90:	2210      	movs	r2, #16
    2e92:	4694      	mov	ip, r2
    2e94:	44bc      	add	ip, r7
    2e96:	4463      	add	r3, ip
    2e98:	2200      	movs	r2, #0
    2e9a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2e9c:	697b      	ldr	r3, [r7, #20]
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    2ea2:	697b      	ldr	r3, [r7, #20]
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    2ea8:	2323      	movs	r3, #35	; 0x23
    2eaa:	2210      	movs	r2, #16
    2eac:	18ba      	adds	r2, r7, r2
    2eae:	18d4      	adds	r4, r2, r3
    2eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2eb2:	0018      	movs	r0, r3
    2eb4:	4bc0      	ldr	r3, [pc, #768]	; (31b8 <_i2c_master_set_config+0x340>)
    2eb6:	4798      	blx	r3
    2eb8:	0003      	movs	r3, r0
    2eba:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2ebc:	230c      	movs	r3, #12
    2ebe:	2210      	movs	r2, #16
    2ec0:	4694      	mov	ip, r2
    2ec2:	44bc      	add	ip, r7
    2ec4:	4463      	add	r3, ip
    2ec6:	0018      	movs	r0, r3
    2ec8:	4bbc      	ldr	r3, [pc, #752]	; (31bc <_i2c_master_set_config+0x344>)
    2eca:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    2ecc:	693b      	ldr	r3, [r7, #16]
    2ece:	69db      	ldr	r3, [r3, #28]
    2ed0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    2ed2:	693b      	ldr	r3, [r7, #16]
    2ed4:	6a1b      	ldr	r3, [r3, #32]
    2ed6:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    2ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2eda:	2b00      	cmp	r3, #0
    2edc:	d106      	bne.n	2eec <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    2ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ee0:	2100      	movs	r1, #0
    2ee2:	0018      	movs	r0, r3
    2ee4:	4bb6      	ldr	r3, [pc, #728]	; (31c0 <_i2c_master_set_config+0x348>)
    2ee6:	4798      	blx	r3
    2ee8:	0003      	movs	r3, r0
    2eea:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    2eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2eee:	b2da      	uxtb	r2, r3
    2ef0:	230c      	movs	r3, #12
    2ef2:	2110      	movs	r1, #16
    2ef4:	468c      	mov	ip, r1
    2ef6:	44bc      	add	ip, r7
    2ef8:	4463      	add	r3, ip
    2efa:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2efc:	230c      	movs	r3, #12
    2efe:	2210      	movs	r2, #16
    2f00:	4694      	mov	ip, r2
    2f02:	44bc      	add	ip, r7
    2f04:	4463      	add	r3, ip
    2f06:	2202      	movs	r2, #2
    2f08:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2f0c:	0c1b      	lsrs	r3, r3, #16
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	220c      	movs	r2, #12
    2f12:	2110      	movs	r1, #16
    2f14:	468c      	mov	ip, r1
    2f16:	44bc      	add	ip, r7
    2f18:	4462      	add	r2, ip
    2f1a:	0011      	movs	r1, r2
    2f1c:	0018      	movs	r0, r3
    2f1e:	4ba9      	ldr	r3, [pc, #676]	; (31c4 <_i2c_master_set_config+0x34c>)
    2f20:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    2f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f24:	2b00      	cmp	r3, #0
    2f26:	d106      	bne.n	2f36 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    2f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f2a:	2101      	movs	r1, #1
    2f2c:	0018      	movs	r0, r3
    2f2e:	4ba4      	ldr	r3, [pc, #656]	; (31c0 <_i2c_master_set_config+0x348>)
    2f30:	4798      	blx	r3
    2f32:	0003      	movs	r3, r0
    2f34:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    2f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f38:	b2da      	uxtb	r2, r3
    2f3a:	230c      	movs	r3, #12
    2f3c:	2110      	movs	r1, #16
    2f3e:	468c      	mov	ip, r1
    2f40:	44bc      	add	ip, r7
    2f42:	4463      	add	r3, ip
    2f44:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2f46:	230c      	movs	r3, #12
    2f48:	2210      	movs	r2, #16
    2f4a:	4694      	mov	ip, r2
    2f4c:	44bc      	add	ip, r7
    2f4e:	4463      	add	r3, ip
    2f50:	2202      	movs	r2, #2
    2f52:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    2f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2f56:	0c1b      	lsrs	r3, r3, #16
    2f58:	b2db      	uxtb	r3, r3
    2f5a:	220c      	movs	r2, #12
    2f5c:	2110      	movs	r1, #16
    2f5e:	468c      	mov	ip, r1
    2f60:	44bc      	add	ip, r7
    2f62:	4462      	add	r2, ip
    2f64:	0011      	movs	r1, r2
    2f66:	0018      	movs	r0, r3
    2f68:	4b96      	ldr	r3, [pc, #600]	; (31c4 <_i2c_master_set_config+0x34c>)
    2f6a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    2f6c:	693b      	ldr	r3, [r7, #16]
    2f6e:	8a9a      	ldrh	r2, [r3, #20]
    2f70:	697b      	ldr	r3, [r7, #20]
    2f72:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    2f74:	693b      	ldr	r3, [r7, #16]
    2f76:	8ada      	ldrh	r2, [r3, #22]
    2f78:	697b      	ldr	r3, [r7, #20]
    2f7a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2f7c:	693b      	ldr	r3, [r7, #16]
    2f7e:	7e1b      	ldrb	r3, [r3, #24]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d103      	bne.n	2f8c <_i2c_master_set_config+0x114>
    2f84:	4b90      	ldr	r3, [pc, #576]	; (31c8 <_i2c_master_set_config+0x350>)
    2f86:	4798      	blx	r3
    2f88:	1e03      	subs	r3, r0, #0
    2f8a:	d002      	beq.n	2f92 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    2f8c:	2380      	movs	r3, #128	; 0x80
    2f8e:	657b      	str	r3, [r7, #84]	; 0x54
    2f90:	e001      	b.n	2f96 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    2f92:	2300      	movs	r3, #0
    2f94:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    2f96:	693b      	ldr	r3, [r7, #16]
    2f98:	691b      	ldr	r3, [r3, #16]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d004      	beq.n	2fa8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    2f9e:	693b      	ldr	r3, [r7, #16]
    2fa0:	691b      	ldr	r3, [r3, #16]
    2fa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2fa4:	4313      	orrs	r3, r2
    2fa6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    2fa8:	693b      	ldr	r3, [r7, #16]
    2faa:	689b      	ldr	r3, [r3, #8]
    2fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2fae:	4313      	orrs	r3, r2
    2fb0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    2fb2:	693b      	ldr	r3, [r7, #16]
    2fb4:	2224      	movs	r2, #36	; 0x24
    2fb6:	5c9b      	ldrb	r3, [r3, r2]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d004      	beq.n	2fc6 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    2fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2fbe:	2280      	movs	r2, #128	; 0x80
    2fc0:	05d2      	lsls	r2, r2, #23
    2fc2:	4313      	orrs	r3, r2
    2fc4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    2fc6:	693b      	ldr	r3, [r7, #16]
    2fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d004      	beq.n	2fd8 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2fd4:	4313      	orrs	r3, r2
    2fd6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    2fd8:	693b      	ldr	r3, [r7, #16]
    2fda:	222c      	movs	r2, #44	; 0x2c
    2fdc:	5c9b      	ldrb	r3, [r3, r2]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d105      	bne.n	2fee <_i2c_master_set_config+0x176>
    2fe2:	693b      	ldr	r3, [r7, #16]
    2fe4:	689a      	ldr	r2, [r3, #8]
    2fe6:	2380      	movs	r3, #128	; 0x80
    2fe8:	049b      	lsls	r3, r3, #18
    2fea:	429a      	cmp	r2, r3
    2fec:	d104      	bne.n	2ff8 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    2fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2ff0:	2280      	movs	r2, #128	; 0x80
    2ff2:	0512      	lsls	r2, r2, #20
    2ff4:	4313      	orrs	r3, r2
    2ff6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    2ff8:	693b      	ldr	r3, [r7, #16]
    2ffa:	222d      	movs	r2, #45	; 0x2d
    2ffc:	5c9b      	ldrb	r3, [r3, r2]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d004      	beq.n	300c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3004:	2280      	movs	r2, #128	; 0x80
    3006:	0412      	lsls	r2, r2, #16
    3008:	4313      	orrs	r3, r2
    300a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    300c:	693b      	ldr	r3, [r7, #16]
    300e:	222e      	movs	r2, #46	; 0x2e
    3010:	5c9b      	ldrb	r3, [r3, r2]
    3012:	2b00      	cmp	r3, #0
    3014:	d004      	beq.n	3020 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3018:	2280      	movs	r2, #128	; 0x80
    301a:	03d2      	lsls	r2, r2, #15
    301c:	4313      	orrs	r3, r2
    301e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3022:	681a      	ldr	r2, [r3, #0]
    3024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3026:	431a      	orrs	r2, r3
    3028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    302a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    302e:	2280      	movs	r2, #128	; 0x80
    3030:	0052      	lsls	r2, r2, #1
    3032:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3034:	2323      	movs	r3, #35	; 0x23
    3036:	2210      	movs	r2, #16
    3038:	4694      	mov	ip, r2
    303a:	44bc      	add	ip, r7
    303c:	4463      	add	r3, ip
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	3314      	adds	r3, #20
    3042:	b2db      	uxtb	r3, r3
    3044:	0018      	movs	r0, r3
    3046:	4b61      	ldr	r3, [pc, #388]	; (31cc <_i2c_master_set_config+0x354>)
    3048:	4798      	blx	r3
    304a:	0003      	movs	r3, r0
    304c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    304e:	693b      	ldr	r3, [r7, #16]
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	22fa      	movs	r2, #250	; 0xfa
    3054:	0092      	lsls	r2, r2, #2
    3056:	4353      	muls	r3, r2
    3058:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    305a:	693b      	ldr	r3, [r7, #16]
    305c:	685b      	ldr	r3, [r3, #4]
    305e:	22fa      	movs	r2, #250	; 0xfa
    3060:	0092      	lsls	r2, r2, #2
    3062:	4353      	muls	r3, r2
    3064:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3066:	693b      	ldr	r3, [r7, #16]
    3068:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    306a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    306c:	4b58      	ldr	r3, [pc, #352]	; (31d0 <_i2c_master_set_config+0x358>)
    306e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3070:	4798      	blx	r3
    3072:	0005      	movs	r5, r0
    3074:	000e      	movs	r6, r1
    3076:	4b56      	ldr	r3, [pc, #344]	; (31d0 <_i2c_master_set_config+0x358>)
    3078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    307a:	4798      	blx	r3
    307c:	60b8      	str	r0, [r7, #8]
    307e:	60f9      	str	r1, [r7, #12]
    3080:	4b53      	ldr	r3, [pc, #332]	; (31d0 <_i2c_master_set_config+0x358>)
    3082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3084:	4798      	blx	r3
    3086:	4c53      	ldr	r4, [pc, #332]	; (31d4 <_i2c_master_set_config+0x35c>)
    3088:	4a53      	ldr	r2, [pc, #332]	; (31d8 <_i2c_master_set_config+0x360>)
    308a:	4b54      	ldr	r3, [pc, #336]	; (31dc <_i2c_master_set_config+0x364>)
    308c:	47a0      	blx	r4
    308e:	0003      	movs	r3, r0
    3090:	000c      	movs	r4, r1
    3092:	603b      	str	r3, [r7, #0]
    3094:	607c      	str	r4, [r7, #4]
    3096:	4b4e      	ldr	r3, [pc, #312]	; (31d0 <_i2c_master_set_config+0x358>)
    3098:	6a38      	ldr	r0, [r7, #32]
    309a:	4798      	blx	r3
    309c:	0002      	movs	r2, r0
    309e:	000b      	movs	r3, r1
    30a0:	4c4c      	ldr	r4, [pc, #304]	; (31d4 <_i2c_master_set_config+0x35c>)
    30a2:	6838      	ldr	r0, [r7, #0]
    30a4:	6879      	ldr	r1, [r7, #4]
    30a6:	47a0      	blx	r4
    30a8:	0003      	movs	r3, r0
    30aa:	000c      	movs	r4, r1
    30ac:	0018      	movs	r0, r3
    30ae:	0021      	movs	r1, r4
    30b0:	4c4b      	ldr	r4, [pc, #300]	; (31e0 <_i2c_master_set_config+0x368>)
    30b2:	2200      	movs	r2, #0
    30b4:	4b4b      	ldr	r3, [pc, #300]	; (31e4 <_i2c_master_set_config+0x36c>)
    30b6:	47a0      	blx	r4
    30b8:	0003      	movs	r3, r0
    30ba:	000c      	movs	r4, r1
    30bc:	001a      	movs	r2, r3
    30be:	0023      	movs	r3, r4
    30c0:	4c44      	ldr	r4, [pc, #272]	; (31d4 <_i2c_master_set_config+0x35c>)
    30c2:	68b8      	ldr	r0, [r7, #8]
    30c4:	68f9      	ldr	r1, [r7, #12]
    30c6:	47a0      	blx	r4
    30c8:	0003      	movs	r3, r0
    30ca:	000c      	movs	r4, r1
    30cc:	001a      	movs	r2, r3
    30ce:	0023      	movs	r3, r4
    30d0:	4c45      	ldr	r4, [pc, #276]	; (31e8 <_i2c_master_set_config+0x370>)
    30d2:	0028      	movs	r0, r5
    30d4:	0031      	movs	r1, r6
    30d6:	47a0      	blx	r4
    30d8:	0003      	movs	r3, r0
    30da:	000c      	movs	r4, r1
    30dc:	001d      	movs	r5, r3
    30de:	0026      	movs	r6, r4
    30e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30e2:	005a      	lsls	r2, r3, #1
    30e4:	4b3a      	ldr	r3, [pc, #232]	; (31d0 <_i2c_master_set_config+0x358>)
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
    30ea:	0002      	movs	r2, r0
    30ec:	000b      	movs	r3, r1
    30ee:	4c3c      	ldr	r4, [pc, #240]	; (31e0 <_i2c_master_set_config+0x368>)
    30f0:	0028      	movs	r0, r5
    30f2:	0031      	movs	r1, r6
    30f4:	47a0      	blx	r4
    30f6:	0003      	movs	r3, r0
    30f8:	000c      	movs	r4, r1
    30fa:	0018      	movs	r0, r3
    30fc:	0021      	movs	r1, r4
    30fe:	4c3a      	ldr	r4, [pc, #232]	; (31e8 <_i2c_master_set_config+0x370>)
    3100:	2200      	movs	r2, #0
    3102:	4b3a      	ldr	r3, [pc, #232]	; (31ec <_i2c_master_set_config+0x374>)
    3104:	47a0      	blx	r4
    3106:	0003      	movs	r3, r0
    3108:	000c      	movs	r4, r1
    310a:	001d      	movs	r5, r3
    310c:	0026      	movs	r6, r4
    310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3110:	005a      	lsls	r2, r3, #1
    3112:	4b2f      	ldr	r3, [pc, #188]	; (31d0 <_i2c_master_set_config+0x358>)
    3114:	0010      	movs	r0, r2
    3116:	4798      	blx	r3
    3118:	0002      	movs	r2, r0
    311a:	000b      	movs	r3, r1
    311c:	4c34      	ldr	r4, [pc, #208]	; (31f0 <_i2c_master_set_config+0x378>)
    311e:	0028      	movs	r0, r5
    3120:	0031      	movs	r1, r6
    3122:	47a0      	blx	r4
    3124:	0003      	movs	r3, r0
    3126:	000c      	movs	r4, r1
    3128:	0019      	movs	r1, r3
    312a:	0022      	movs	r2, r4
    312c:	4b31      	ldr	r3, [pc, #196]	; (31f4 <_i2c_master_set_config+0x37c>)
    312e:	0008      	movs	r0, r1
    3130:	0011      	movs	r1, r2
    3132:	4798      	blx	r3
    3134:	0003      	movs	r3, r0
    3136:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3138:	693b      	ldr	r3, [r7, #16]
    313a:	689a      	ldr	r2, [r3, #8]
    313c:	2380      	movs	r3, #128	; 0x80
    313e:	049b      	lsls	r3, r3, #18
    3140:	429a      	cmp	r2, r3
    3142:	d16a      	bne.n	321a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3144:	4b22      	ldr	r3, [pc, #136]	; (31d0 <_i2c_master_set_config+0x358>)
    3146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3148:	4798      	blx	r3
    314a:	4c25      	ldr	r4, [pc, #148]	; (31e0 <_i2c_master_set_config+0x368>)
    314c:	0002      	movs	r2, r0
    314e:	000b      	movs	r3, r1
    3150:	47a0      	blx	r4
    3152:	0003      	movs	r3, r0
    3154:	000c      	movs	r4, r1
    3156:	001d      	movs	r5, r3
    3158:	0026      	movs	r6, r4
    315a:	4b1d      	ldr	r3, [pc, #116]	; (31d0 <_i2c_master_set_config+0x358>)
    315c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    315e:	4798      	blx	r3
    3160:	4c1c      	ldr	r4, [pc, #112]	; (31d4 <_i2c_master_set_config+0x35c>)
    3162:	2200      	movs	r2, #0
    3164:	4b24      	ldr	r3, [pc, #144]	; (31f8 <_i2c_master_set_config+0x380>)
    3166:	47a0      	blx	r4
    3168:	0003      	movs	r3, r0
    316a:	000c      	movs	r4, r1
    316c:	001a      	movs	r2, r3
    316e:	0023      	movs	r3, r4
    3170:	4c1f      	ldr	r4, [pc, #124]	; (31f0 <_i2c_master_set_config+0x378>)
    3172:	0028      	movs	r0, r5
    3174:	0031      	movs	r1, r6
    3176:	47a0      	blx	r4
    3178:	0003      	movs	r3, r0
    317a:	000c      	movs	r4, r1
    317c:	0018      	movs	r0, r3
    317e:	0021      	movs	r1, r4
    3180:	4c19      	ldr	r4, [pc, #100]	; (31e8 <_i2c_master_set_config+0x370>)
    3182:	2200      	movs	r2, #0
    3184:	4b19      	ldr	r3, [pc, #100]	; (31ec <_i2c_master_set_config+0x374>)
    3186:	47a0      	blx	r4
    3188:	0003      	movs	r3, r0
    318a:	000c      	movs	r4, r1
    318c:	0019      	movs	r1, r3
    318e:	0022      	movs	r2, r4
    3190:	4b18      	ldr	r3, [pc, #96]	; (31f4 <_i2c_master_set_config+0x37c>)
    3192:	0008      	movs	r0, r1
    3194:	0011      	movs	r1, r2
    3196:	4798      	blx	r3
    3198:	0003      	movs	r3, r0
    319a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    319e:	2b00      	cmp	r3, #0
    31a0:	d02e      	beq.n	3200 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    31a2:	4b16      	ldr	r3, [pc, #88]	; (31fc <_i2c_master_set_config+0x384>)
    31a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    31a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    31a8:	4798      	blx	r3
    31aa:	0003      	movs	r3, r0
    31ac:	1e9a      	subs	r2, r3, #2
    31ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    31b0:	1ad3      	subs	r3, r2, r3
    31b2:	653b      	str	r3, [r7, #80]	; 0x50
    31b4:	e031      	b.n	321a <_i2c_master_set_config+0x3a2>
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	0000e155 	.word	0x0000e155
    31bc:	00002e31 	.word	0x00002e31
    31c0:	0000df99 	.word	0x0000df99
    31c4:	0000f931 	.word	0x0000f931
    31c8:	00002e59 	.word	0x00002e59
    31cc:	0000f769 	.word	0x0000f769
    31d0:	000129cd 	.word	0x000129cd
    31d4:	00011db5 	.word	0x00011db5
    31d8:	e826d695 	.word	0xe826d695
    31dc:	3e112e0b 	.word	0x3e112e0b
    31e0:	0001112d 	.word	0x0001112d
    31e4:	40240000 	.word	0x40240000
    31e8:	000122b5 	.word	0x000122b5
    31ec:	3ff00000 	.word	0x3ff00000
    31f0:	0001174d 	.word	0x0001174d
    31f4:	000128e1 	.word	0x000128e1
    31f8:	40080000 	.word	0x40080000
    31fc:	0000fd75 	.word	0x0000fd75
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3202:	005a      	lsls	r2, r3, #1
    3204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3206:	18d3      	adds	r3, r2, r3
    3208:	1e5a      	subs	r2, r3, #1
    320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    320c:	0059      	lsls	r1, r3, #1
    320e:	4b1d      	ldr	r3, [pc, #116]	; (3284 <_i2c_master_set_config+0x40c>)
    3210:	0010      	movs	r0, r2
    3212:	4798      	blx	r3
    3214:	0003      	movs	r3, r0
    3216:	3b01      	subs	r3, #1
    3218:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    321c:	2bff      	cmp	r3, #255	; 0xff
    321e:	dc08      	bgt.n	3232 <_i2c_master_set_config+0x3ba>
    3220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3222:	2b00      	cmp	r3, #0
    3224:	db05      	blt.n	3232 <_i2c_master_set_config+0x3ba>
    3226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3228:	2bff      	cmp	r3, #255	; 0xff
    322a:	dc02      	bgt.n	3232 <_i2c_master_set_config+0x3ba>
    322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    322e:	2b00      	cmp	r3, #0
    3230:	da06      	bge.n	3240 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3232:	233b      	movs	r3, #59	; 0x3b
    3234:	2210      	movs	r2, #16
    3236:	4694      	mov	ip, r2
    3238:	44bc      	add	ip, r7
    323a:	4463      	add	r3, ip
    323c:	2240      	movs	r2, #64	; 0x40
    323e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3240:	233b      	movs	r3, #59	; 0x3b
    3242:	2210      	movs	r2, #16
    3244:	4694      	mov	ip, r2
    3246:	44bc      	add	ip, r7
    3248:	4463      	add	r3, ip
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	2b40      	cmp	r3, #64	; 0x40
    324e:	d00e      	beq.n	326e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3252:	22ff      	movs	r2, #255	; 0xff
    3254:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3258:	041b      	lsls	r3, r3, #16
    325a:	0019      	movs	r1, r3
    325c:	23ff      	movs	r3, #255	; 0xff
    325e:	041b      	lsls	r3, r3, #16
    3260:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3262:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3266:	0612      	lsls	r2, r2, #24
    3268:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    326c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    326e:	233b      	movs	r3, #59	; 0x3b
    3270:	2210      	movs	r2, #16
    3272:	4694      	mov	ip, r2
    3274:	44bc      	add	ip, r7
    3276:	4463      	add	r3, ip
    3278:	781b      	ldrb	r3, [r3, #0]
}
    327a:	0018      	movs	r0, r3
    327c:	46bd      	mov	sp, r7
    327e:	b017      	add	sp, #92	; 0x5c
    3280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	0000fd75 	.word	0x0000fd75

00003288 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3288:	b590      	push	{r4, r7, lr}
    328a:	b08b      	sub	sp, #44	; 0x2c
    328c:	af00      	add	r7, sp, #0
    328e:	60f8      	str	r0, [r7, #12]
    3290:	60b9      	str	r1, [r7, #8]
    3292:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3294:	68fb      	ldr	r3, [r7, #12]
    3296:	68ba      	ldr	r2, [r7, #8]
    3298:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    329a:	68fb      	ldr	r3, [r7, #12]
    329c:	681b      	ldr	r3, [r3, #0]
    329e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    32a0:	68fb      	ldr	r3, [r7, #12]
    32a2:	681b      	ldr	r3, [r3, #0]
    32a4:	0018      	movs	r0, r3
    32a6:	4b3b      	ldr	r3, [pc, #236]	; (3394 <i2c_master_init+0x10c>)
    32a8:	4798      	blx	r3
    32aa:	0003      	movs	r3, r0
    32ac:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    32ae:	6a3b      	ldr	r3, [r7, #32]
    32b0:	3302      	adds	r3, #2
    32b2:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    32b4:	6a3b      	ldr	r3, [r7, #32]
    32b6:	3314      	adds	r3, #20
    32b8:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    32ba:	2201      	movs	r2, #1
    32bc:	69fb      	ldr	r3, [r7, #28]
    32be:	409a      	lsls	r2, r3
    32c0:	0013      	movs	r3, r2
    32c2:	0019      	movs	r1, r3
    32c4:	2002      	movs	r0, #2
    32c6:	4b34      	ldr	r3, [pc, #208]	; (3398 <i2c_master_init+0x110>)
    32c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    32ca:	2314      	movs	r3, #20
    32cc:	18fb      	adds	r3, r7, r3
    32ce:	0018      	movs	r0, r3
    32d0:	4b32      	ldr	r3, [pc, #200]	; (339c <i2c_master_init+0x114>)
    32d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	7b1a      	ldrb	r2, [r3, #12]
    32d8:	2314      	movs	r3, #20
    32da:	18fb      	adds	r3, r7, r3
    32dc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    32de:	69bb      	ldr	r3, [r7, #24]
    32e0:	b2db      	uxtb	r3, r3
    32e2:	2214      	movs	r2, #20
    32e4:	18ba      	adds	r2, r7, r2
    32e6:	0011      	movs	r1, r2
    32e8:	0018      	movs	r0, r3
    32ea:	4b2d      	ldr	r3, [pc, #180]	; (33a0 <i2c_master_init+0x118>)
    32ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    32ee:	69bb      	ldr	r3, [r7, #24]
    32f0:	b2db      	uxtb	r3, r3
    32f2:	0018      	movs	r0, r3
    32f4:	4b2b      	ldr	r3, [pc, #172]	; (33a4 <i2c_master_init+0x11c>)
    32f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	7b1b      	ldrb	r3, [r3, #12]
    32fc:	2100      	movs	r1, #0
    32fe:	0018      	movs	r0, r3
    3300:	4b29      	ldr	r3, [pc, #164]	; (33a8 <i2c_master_init+0x120>)
    3302:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	2202      	movs	r2, #2
    330a:	4013      	ands	r3, r2
    330c:	d001      	beq.n	3312 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    330e:	231c      	movs	r3, #28
    3310:	e03b      	b.n	338a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	2201      	movs	r2, #1
    3318:	4013      	ands	r3, r2
    331a:	d001      	beq.n	3320 <i2c_master_init+0x98>
		return STATUS_BUSY;
    331c:	2305      	movs	r3, #5
    331e:	e034      	b.n	338a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3320:	68fb      	ldr	r3, [r7, #12]
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	2217      	movs	r2, #23
    3326:	18bc      	adds	r4, r7, r2
    3328:	0018      	movs	r0, r3
    332a:	4b1a      	ldr	r3, [pc, #104]	; (3394 <i2c_master_init+0x10c>)
    332c:	4798      	blx	r3
    332e:	0003      	movs	r3, r0
    3330:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3332:	4a1e      	ldr	r2, [pc, #120]	; (33ac <i2c_master_init+0x124>)
    3334:	2317      	movs	r3, #23
    3336:	18fb      	adds	r3, r7, r3
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	0011      	movs	r1, r2
    333c:	0018      	movs	r0, r3
    333e:	4b1c      	ldr	r3, [pc, #112]	; (33b0 <i2c_master_init+0x128>)
    3340:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3342:	2317      	movs	r3, #23
    3344:	18fb      	adds	r3, r7, r3
    3346:	781a      	ldrb	r2, [r3, #0]
    3348:	4b1a      	ldr	r3, [pc, #104]	; (33b4 <i2c_master_init+0x12c>)
    334a:	0092      	lsls	r2, r2, #2
    334c:	68f9      	ldr	r1, [r7, #12]
    334e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    3350:	68fb      	ldr	r3, [r7, #12]
    3352:	2200      	movs	r2, #0
    3354:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    3356:	68fb      	ldr	r3, [r7, #12]
    3358:	2200      	movs	r2, #0
    335a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    335c:	68fb      	ldr	r3, [r7, #12]
    335e:	2200      	movs	r2, #0
    3360:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	2200      	movs	r2, #0
    3366:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    3368:	68fb      	ldr	r3, [r7, #12]
    336a:	2225      	movs	r2, #37	; 0x25
    336c:	2100      	movs	r1, #0
    336e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    3370:	68fb      	ldr	r3, [r7, #12]
    3372:	2200      	movs	r2, #0
    3374:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    3376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3378:	2214      	movs	r2, #20
    337a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    337c:	687a      	ldr	r2, [r7, #4]
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	0011      	movs	r1, r2
    3382:	0018      	movs	r0, r3
    3384:	4b0c      	ldr	r3, [pc, #48]	; (33b8 <i2c_master_init+0x130>)
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
}
    338a:	0018      	movs	r0, r3
    338c:	46bd      	mov	sp, r7
    338e:	b00b      	add	sp, #44	; 0x2c
    3390:	bd90      	pop	{r4, r7, pc}
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	0000e155 	.word	0x0000e155
    3398:	00002dd5 	.word	0x00002dd5
    339c:	00002dbd 	.word	0x00002dbd
    33a0:	0000f5fd 	.word	0x0000f5fd
    33a4:	0000f641 	.word	0x0000f641
    33a8:	0000df0d 	.word	0x0000df0d
    33ac:	00003a01 	.word	0x00003a01
    33b0:	0000e1b9 	.word	0x0000e1b9
    33b4:	20004094 	.word	0x20004094
    33b8:	00002e79 	.word	0x00002e79

000033bc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    33bc:	b580      	push	{r7, lr}
    33be:	b084      	sub	sp, #16
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    33ca:	68fb      	ldr	r3, [r7, #12]
    33cc:	7e1b      	ldrb	r3, [r3, #24]
    33ce:	b2db      	uxtb	r3, r3
    33d0:	001a      	movs	r2, r3
    33d2:	2302      	movs	r3, #2
    33d4:	4013      	ands	r3, r2
    33d6:	d00b      	beq.n	33f0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    33d8:	68fb      	ldr	r3, [r7, #12]
    33da:	2202      	movs	r2, #2
    33dc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    33de:	68fb      	ldr	r3, [r7, #12]
    33e0:	8b5b      	ldrh	r3, [r3, #26]
    33e2:	b29b      	uxth	r3, r3
    33e4:	001a      	movs	r2, r3
    33e6:	2302      	movs	r3, #2
    33e8:	4013      	ands	r3, r2
    33ea:	d011      	beq.n	3410 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    33ec:	2341      	movs	r3, #65	; 0x41
    33ee:	e010      	b.n	3412 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    33f0:	68fb      	ldr	r3, [r7, #12]
    33f2:	8b5b      	ldrh	r3, [r3, #26]
    33f4:	b29b      	uxth	r3, r3
    33f6:	001a      	movs	r2, r3
    33f8:	2304      	movs	r3, #4
    33fa:	4013      	ands	r3, r2
    33fc:	d008      	beq.n	3410 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    33fe:	68fb      	ldr	r3, [r7, #12]
    3400:	685b      	ldr	r3, [r3, #4]
    3402:	22c0      	movs	r2, #192	; 0xc0
    3404:	0292      	lsls	r2, r2, #10
    3406:	431a      	orrs	r2, r3
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    340c:	2318      	movs	r3, #24
    340e:	e000      	b.n	3412 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3410:	2300      	movs	r3, #0
}
    3412:	0018      	movs	r0, r3
    3414:	46bd      	mov	sp, r7
    3416:	b004      	add	sp, #16
    3418:	bd80      	pop	{r7, pc}

0000341a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    341a:	b580      	push	{r7, lr}
    341c:	b084      	sub	sp, #16
    341e:	af00      	add	r7, sp, #0
    3420:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	681b      	ldr	r3, [r3, #0]
    3426:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3428:	230e      	movs	r3, #14
    342a:	18fb      	adds	r3, r7, r3
    342c:	2200      	movs	r2, #0
    342e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3430:	e00f      	b.n	3452 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3432:	230e      	movs	r3, #14
    3434:	18fb      	adds	r3, r7, r3
    3436:	220e      	movs	r2, #14
    3438:	18ba      	adds	r2, r7, r2
    343a:	8812      	ldrh	r2, [r2, #0]
    343c:	3201      	adds	r2, #1
    343e:	801a      	strh	r2, [r3, #0]
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	891b      	ldrh	r3, [r3, #8]
    3444:	220e      	movs	r2, #14
    3446:	18ba      	adds	r2, r7, r2
    3448:	8812      	ldrh	r2, [r2, #0]
    344a:	429a      	cmp	r2, r3
    344c:	d301      	bcc.n	3452 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    344e:	2312      	movs	r3, #18
    3450:	e00e      	b.n	3470 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3452:	68bb      	ldr	r3, [r7, #8]
    3454:	7e1b      	ldrb	r3, [r3, #24]
    3456:	b2db      	uxtb	r3, r3
    3458:	001a      	movs	r2, r3
    345a:	2301      	movs	r3, #1
    345c:	4013      	ands	r3, r2
    345e:	d106      	bne.n	346e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3460:	68bb      	ldr	r3, [r7, #8]
    3462:	7e1b      	ldrb	r3, [r3, #24]
    3464:	b2db      	uxtb	r3, r3
    3466:	001a      	movs	r2, r3
    3468:	2302      	movs	r3, #2
    346a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    346c:	d0e1      	beq.n	3432 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    346e:	2300      	movs	r3, #0
}
    3470:	0018      	movs	r0, r3
    3472:	46bd      	mov	sp, r7
    3474:	b004      	add	sp, #16
    3476:	bd80      	pop	{r7, pc}

00003478 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3478:	b590      	push	{r4, r7, lr}
    347a:	b085      	sub	sp, #20
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
    3480:	000a      	movs	r2, r1
    3482:	1cfb      	adds	r3, r7, #3
    3484:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    348c:	68fb      	ldr	r3, [r7, #12]
    348e:	685b      	ldr	r3, [r3, #4]
    3490:	2280      	movs	r2, #128	; 0x80
    3492:	02d2      	lsls	r2, r2, #11
    3494:	431a      	orrs	r2, r3
    3496:	68fb      	ldr	r3, [r7, #12]
    3498:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    349a:	1cfb      	adds	r3, r7, #3
    349c:	781a      	ldrb	r2, [r3, #0]
    349e:	68fb      	ldr	r3, [r7, #12]
    34a0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    34a2:	230b      	movs	r3, #11
    34a4:	18fc      	adds	r4, r7, r3
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	0018      	movs	r0, r3
    34aa:	4b07      	ldr	r3, [pc, #28]	; (34c8 <_i2c_master_send_hs_master_code+0x50>)
    34ac:	4798      	blx	r3
    34ae:	0003      	movs	r3, r0
    34b0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    34b2:	68fb      	ldr	r3, [r7, #12]
    34b4:	2201      	movs	r2, #1
    34b6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    34b8:	230b      	movs	r3, #11
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	781b      	ldrb	r3, [r3, #0]
}
    34be:	0018      	movs	r0, r3
    34c0:	46bd      	mov	sp, r7
    34c2:	b005      	add	sp, #20
    34c4:	bd90      	pop	{r4, r7, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	0000341b 	.word	0x0000341b

000034cc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b084      	sub	sp, #16
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	69db      	ldr	r3, [r3, #28]
    34de:	2207      	movs	r2, #7
    34e0:	4013      	ands	r3, r2
    34e2:	1e5a      	subs	r2, r3, #1
    34e4:	4193      	sbcs	r3, r2
    34e6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    34e8:	0018      	movs	r0, r3
    34ea:	46bd      	mov	sp, r7
    34ec:	b004      	add	sp, #16
    34ee:	bd80      	pop	{r7, pc}

000034f0 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b082      	sub	sp, #8
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	0018      	movs	r0, r3
    34fe:	4b04      	ldr	r3, [pc, #16]	; (3510 <_i2c_master_wait_for_sync+0x20>)
    3500:	4798      	blx	r3
    3502:	1e03      	subs	r3, r0, #0
    3504:	d1f9      	bne.n	34fa <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	46bd      	mov	sp, r7
    350a:	b002      	add	sp, #8
    350c:	bd80      	pop	{r7, pc}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	000034cd 	.word	0x000034cd

00003514 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3514:	b580      	push	{r7, lr}
    3516:	b084      	sub	sp, #16
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	681b      	ldr	r3, [r3, #0]
    3520:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3522:	68fb      	ldr	r3, [r7, #12]
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	011b      	lsls	r3, r3, #4
    3528:	0fdb      	lsrs	r3, r3, #31
    352a:	b2db      	uxtb	r3, r3
    352c:	001a      	movs	r2, r3
    352e:	230b      	movs	r3, #11
    3530:	18fb      	adds	r3, r7, r3
    3532:	1e51      	subs	r1, r2, #1
    3534:	418a      	sbcs	r2, r1
    3536:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3538:	2308      	movs	r3, #8
    353a:	18fb      	adds	r3, r7, r3
    353c:	687a      	ldr	r2, [r7, #4]
    353e:	8b52      	ldrh	r2, [r2, #26]
    3540:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	8b9b      	ldrh	r3, [r3, #28]
    3546:	b29a      	uxth	r2, r3
    3548:	2308      	movs	r3, #8
    354a:	18fb      	adds	r3, r7, r3
    354c:	2108      	movs	r1, #8
    354e:	1879      	adds	r1, r7, r1
    3550:	8809      	ldrh	r1, [r1, #0]
    3552:	1a8a      	subs	r2, r1, r2
    3554:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	8b9b      	ldrh	r3, [r3, #28]
    355a:	b29b      	uxth	r3, r3
    355c:	3b01      	subs	r3, #1
    355e:	b29a      	uxth	r2, r3
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3564:	230b      	movs	r3, #11
    3566:	18fb      	adds	r3, r7, r3
    3568:	781b      	ldrb	r3, [r3, #0]
    356a:	2b00      	cmp	r3, #0
    356c:	d010      	beq.n	3590 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	7adb      	ldrb	r3, [r3, #11]
    3572:	2b00      	cmp	r3, #0
    3574:	d01c      	beq.n	35b0 <_i2c_master_read+0x9c>
    3576:	687b      	ldr	r3, [r7, #4]
    3578:	8b9b      	ldrh	r3, [r3, #28]
    357a:	b29b      	uxth	r3, r3
    357c:	2b01      	cmp	r3, #1
    357e:	d117      	bne.n	35b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	685b      	ldr	r3, [r3, #4]
    3584:	2280      	movs	r2, #128	; 0x80
    3586:	02d2      	lsls	r2, r2, #11
    3588:	431a      	orrs	r2, r3
    358a:	68fb      	ldr	r3, [r7, #12]
    358c:	605a      	str	r2, [r3, #4]
    358e:	e00f      	b.n	35b0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	7adb      	ldrb	r3, [r3, #11]
    3594:	2b00      	cmp	r3, #0
    3596:	d00b      	beq.n	35b0 <_i2c_master_read+0x9c>
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	8b9b      	ldrh	r3, [r3, #28]
    359c:	b29b      	uxth	r3, r3
    359e:	2b00      	cmp	r3, #0
    35a0:	d106      	bne.n	35b0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    35a2:	68fb      	ldr	r3, [r7, #12]
    35a4:	685b      	ldr	r3, [r3, #4]
    35a6:	2280      	movs	r2, #128	; 0x80
    35a8:	02d2      	lsls	r2, r2, #11
    35aa:	431a      	orrs	r2, r3
    35ac:	68fb      	ldr	r3, [r7, #12]
    35ae:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	8b9b      	ldrh	r3, [r3, #28]
    35b4:	b29b      	uxth	r3, r3
    35b6:	2b00      	cmp	r3, #0
    35b8:	d10e      	bne.n	35d8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	7a9b      	ldrb	r3, [r3, #10]
    35be:	2b00      	cmp	r3, #0
    35c0:	d00a      	beq.n	35d8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	0018      	movs	r0, r3
    35c6:	4b0e      	ldr	r3, [pc, #56]	; (3600 <_i2c_master_read+0xec>)
    35c8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    35ca:	68fb      	ldr	r3, [r7, #12]
    35cc:	685b      	ldr	r3, [r3, #4]
    35ce:	22c0      	movs	r2, #192	; 0xc0
    35d0:	0292      	lsls	r2, r2, #10
    35d2:	431a      	orrs	r2, r3
    35d4:	68fb      	ldr	r3, [r7, #12]
    35d6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	0018      	movs	r0, r3
    35dc:	4b08      	ldr	r3, [pc, #32]	; (3600 <_i2c_master_read+0xec>)
    35de:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	6a1a      	ldr	r2, [r3, #32]
    35e4:	2308      	movs	r3, #8
    35e6:	18fb      	adds	r3, r7, r3
    35e8:	881b      	ldrh	r3, [r3, #0]
    35ea:	18d3      	adds	r3, r2, r3
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	2128      	movs	r1, #40	; 0x28
    35f0:	5c52      	ldrb	r2, [r2, r1]
    35f2:	b2d2      	uxtb	r2, r2
    35f4:	701a      	strb	r2, [r3, #0]
}
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	46bd      	mov	sp, r7
    35fa:	b004      	add	sp, #16
    35fc:	bd80      	pop	{r7, pc}
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	000034f1 	.word	0x000034f1

00003604 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3604:	b580      	push	{r7, lr}
    3606:	b084      	sub	sp, #16
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	681b      	ldr	r3, [r3, #0]
    3610:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	8b5b      	ldrh	r3, [r3, #26]
    3616:	b29b      	uxth	r3, r3
    3618:	001a      	movs	r2, r3
    361a:	2304      	movs	r3, #4
    361c:	4013      	ands	r3, r2
    361e:	d004      	beq.n	362a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	2225      	movs	r2, #37	; 0x25
    3624:	211e      	movs	r1, #30
    3626:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3628:	e024      	b.n	3674 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    362a:	230a      	movs	r3, #10
    362c:	18fb      	adds	r3, r7, r3
    362e:	687a      	ldr	r2, [r7, #4]
    3630:	8b52      	ldrh	r2, [r2, #26]
    3632:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	8b9b      	ldrh	r3, [r3, #28]
    3638:	b29a      	uxth	r2, r3
    363a:	230a      	movs	r3, #10
    363c:	18fb      	adds	r3, r7, r3
    363e:	210a      	movs	r1, #10
    3640:	1879      	adds	r1, r7, r1
    3642:	8809      	ldrh	r1, [r1, #0]
    3644:	1a8a      	subs	r2, r1, r2
    3646:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3648:	687b      	ldr	r3, [r7, #4]
    364a:	8b9b      	ldrh	r3, [r3, #28]
    364c:	b29b      	uxth	r3, r3
    364e:	3b01      	subs	r3, #1
    3650:	b29a      	uxth	r2, r3
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	0018      	movs	r0, r3
    365a:	4b08      	ldr	r3, [pc, #32]	; (367c <_i2c_master_write+0x78>)
    365c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	6a1a      	ldr	r2, [r3, #32]
    3662:	230a      	movs	r3, #10
    3664:	18fb      	adds	r3, r7, r3
    3666:	881b      	ldrh	r3, [r3, #0]
    3668:	18d3      	adds	r3, r2, r3
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	b2d9      	uxtb	r1, r3
    366e:	68fb      	ldr	r3, [r7, #12]
    3670:	2228      	movs	r2, #40	; 0x28
    3672:	5499      	strb	r1, [r3, r2]
}
    3674:	46bd      	mov	sp, r7
    3676:	b004      	add	sp, #16
    3678:	bd80      	pop	{r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	000034f1 	.word	0x000034f1

00003680 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	681b      	ldr	r3, [r3, #0]
    368c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    368e:	68fb      	ldr	r3, [r7, #12]
    3690:	7e1b      	ldrb	r3, [r3, #24]
    3692:	b2db      	uxtb	r3, r3
    3694:	001a      	movs	r2, r3
    3696:	2301      	movs	r3, #1
    3698:	4013      	ands	r3, r2
    369a:	d02b      	beq.n	36f4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	2201      	movs	r2, #1
    36a0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    36a2:	68fb      	ldr	r3, [r7, #12]
    36a4:	8b5b      	ldrh	r3, [r3, #26]
    36a6:	b29b      	uxth	r3, r3
    36a8:	001a      	movs	r2, r3
    36aa:	2302      	movs	r3, #2
    36ac:	4013      	ands	r3, r2
    36ae:	d004      	beq.n	36ba <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	2225      	movs	r2, #37	; 0x25
    36b4:	2141      	movs	r1, #65	; 0x41
    36b6:	5499      	strb	r1, [r3, r2]
    36b8:	e01c      	b.n	36f4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    36ba:	68fb      	ldr	r3, [r7, #12]
    36bc:	8b5b      	ldrh	r3, [r3, #26]
    36be:	b29b      	uxth	r3, r3
    36c0:	001a      	movs	r2, r3
    36c2:	2304      	movs	r3, #4
    36c4:	4013      	ands	r3, r2
    36c6:	d015      	beq.n	36f4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	2225      	movs	r2, #37	; 0x25
    36cc:	2118      	movs	r1, #24
    36ce:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	2200      	movs	r2, #0
    36d4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	7a9b      	ldrb	r3, [r3, #10]
    36da:	2b00      	cmp	r3, #0
    36dc:	d00a      	beq.n	36f4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	0018      	movs	r0, r3
    36e2:	4b13      	ldr	r3, [pc, #76]	; (3730 <_i2c_master_async_address_response+0xb0>)
    36e4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    36e6:	68fb      	ldr	r3, [r7, #12]
    36e8:	685b      	ldr	r3, [r3, #4]
    36ea:	22c0      	movs	r2, #192	; 0xc0
    36ec:	0292      	lsls	r2, r2, #10
    36ee:	431a      	orrs	r2, r3
    36f0:	68fb      	ldr	r3, [r7, #12]
    36f2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	8b9b      	ldrh	r3, [r3, #28]
    36f8:	b29a      	uxth	r2, r3
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	2225      	movs	r2, #37	; 0x25
    3702:	5c9b      	ldrb	r3, [r3, r2]
    3704:	b2db      	uxtb	r3, r3
    3706:	2b05      	cmp	r3, #5
    3708:	d10e      	bne.n	3728 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	2224      	movs	r2, #36	; 0x24
    370e:	5c9b      	ldrb	r3, [r3, r2]
    3710:	b2db      	uxtb	r3, r3
    3712:	2b00      	cmp	r3, #0
    3714:	d104      	bne.n	3720 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	0018      	movs	r0, r3
    371a:	4b06      	ldr	r3, [pc, #24]	; (3734 <_i2c_master_async_address_response+0xb4>)
    371c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    371e:	e003      	b.n	3728 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	0018      	movs	r0, r3
    3724:	4b04      	ldr	r3, [pc, #16]	; (3738 <_i2c_master_async_address_response+0xb8>)
    3726:	4798      	blx	r3
}
    3728:	46c0      	nop			; (mov r8, r8)
    372a:	46bd      	mov	sp, r7
    372c:	b004      	add	sp, #16
    372e:	bd80      	pop	{r7, pc}
    3730:	000034f1 	.word	0x000034f1
    3734:	00003605 	.word	0x00003605
    3738:	00003515 	.word	0x00003515

0000373c <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    373c:	b580      	push	{r7, lr}
    373e:	b084      	sub	sp, #16
    3740:	af00      	add	r7, sp, #0
    3742:	60f8      	str	r0, [r7, #12]
    3744:	60b9      	str	r1, [r7, #8]
    3746:	1dfb      	adds	r3, r7, #7
    3748:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    374a:	1dfb      	adds	r3, r7, #7
    374c:	781b      	ldrb	r3, [r3, #0]
    374e:	68fa      	ldr	r2, [r7, #12]
    3750:	3302      	adds	r3, #2
    3752:	009b      	lsls	r3, r3, #2
    3754:	18d3      	adds	r3, r2, r3
    3756:	3304      	adds	r3, #4
    3758:	68ba      	ldr	r2, [r7, #8]
    375a:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	7e1b      	ldrb	r3, [r3, #24]
    3760:	b2db      	uxtb	r3, r3
    3762:	b25a      	sxtb	r2, r3
    3764:	1dfb      	adds	r3, r7, #7
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	2101      	movs	r1, #1
    376a:	4099      	lsls	r1, r3
    376c:	000b      	movs	r3, r1
    376e:	b25b      	sxtb	r3, r3
    3770:	4313      	orrs	r3, r2
    3772:	b25b      	sxtb	r3, r3
    3774:	b2da      	uxtb	r2, r3
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	761a      	strb	r2, [r3, #24]
}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	46bd      	mov	sp, r7
    377e:	b004      	add	sp, #16
    3780:	bd80      	pop	{r7, pc}
	...

00003784 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3784:	b590      	push	{r4, r7, lr}
    3786:	b087      	sub	sp, #28
    3788:	af00      	add	r7, sp, #0
    378a:	6078      	str	r0, [r7, #4]
    378c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    3794:	683b      	ldr	r3, [r7, #0]
    3796:	685a      	ldr	r2, [r3, #4]
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    379c:	683b      	ldr	r3, [r7, #0]
    379e:	885a      	ldrh	r2, [r3, #2]
    37a0:	687b      	ldr	r3, [r7, #4]
    37a2:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	2224      	movs	r2, #36	; 0x24
    37a8:	2101      	movs	r1, #1
    37aa:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	2225      	movs	r2, #37	; 0x25
    37b0:	2105      	movs	r1, #5
    37b2:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    37b4:	693b      	ldr	r3, [r7, #16]
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	011b      	lsls	r3, r3, #4
    37ba:	0fdb      	lsrs	r3, r3, #31
    37bc:	b2db      	uxtb	r3, r3
    37be:	001a      	movs	r2, r3
    37c0:	230f      	movs	r3, #15
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	1e51      	subs	r1, r2, #1
    37c6:	418a      	sbcs	r2, r1
    37c8:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    37ca:	683b      	ldr	r3, [r7, #0]
    37cc:	7a5b      	ldrb	r3, [r3, #9]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d006      	beq.n	37e0 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    37d2:	683b      	ldr	r3, [r7, #0]
    37d4:	7a9a      	ldrb	r2, [r3, #10]
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	0011      	movs	r1, r2
    37da:	0018      	movs	r0, r3
    37dc:	4b3b      	ldr	r3, [pc, #236]	; (38cc <_i2c_master_read_packet+0x148>)
    37de:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    37e0:	230f      	movs	r3, #15
    37e2:	18fb      	adds	r3, r7, r3
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d00b      	beq.n	3802 <_i2c_master_read_packet+0x7e>
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	885b      	ldrh	r3, [r3, #2]
    37ee:	2b01      	cmp	r3, #1
    37f0:	d107      	bne.n	3802 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    37f2:	693b      	ldr	r3, [r7, #16]
    37f4:	685b      	ldr	r3, [r3, #4]
    37f6:	2280      	movs	r2, #128	; 0x80
    37f8:	02d2      	lsls	r2, r2, #11
    37fa:	431a      	orrs	r2, r3
    37fc:	693b      	ldr	r3, [r7, #16]
    37fe:	605a      	str	r2, [r3, #4]
    3800:	e005      	b.n	380e <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3802:	693b      	ldr	r3, [r7, #16]
    3804:	685b      	ldr	r3, [r3, #4]
    3806:	4a32      	ldr	r2, [pc, #200]	; (38d0 <_i2c_master_read_packet+0x14c>)
    3808:	401a      	ands	r2, r3
    380a:	693b      	ldr	r3, [r7, #16]
    380c:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    380e:	683b      	ldr	r3, [r7, #0]
    3810:	7a1b      	ldrb	r3, [r3, #8]
    3812:	2b00      	cmp	r3, #0
    3814:	d045      	beq.n	38a2 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    3816:	683b      	ldr	r3, [r7, #0]
    3818:	881b      	ldrh	r3, [r3, #0]
    381a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    381c:	683b      	ldr	r3, [r7, #0]
    381e:	7a5b      	ldrb	r3, [r3, #9]
    3820:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3822:	4313      	orrs	r3, r2
    3824:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3826:	2380      	movs	r3, #128	; 0x80
    3828:	021b      	lsls	r3, r3, #8
    382a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    382c:	693b      	ldr	r3, [r7, #16]
    382e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    3830:	2317      	movs	r3, #23
    3832:	18fc      	adds	r4, r7, r3
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	0018      	movs	r0, r3
    3838:	4b26      	ldr	r3, [pc, #152]	; (38d4 <_i2c_master_read_packet+0x150>)
    383a:	4798      	blx	r3
    383c:	0003      	movs	r3, r0
    383e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3840:	693b      	ldr	r3, [r7, #16]
    3842:	685b      	ldr	r3, [r3, #4]
    3844:	4a22      	ldr	r2, [pc, #136]	; (38d0 <_i2c_master_read_packet+0x14c>)
    3846:	401a      	ands	r2, r3
    3848:	693b      	ldr	r3, [r7, #16]
    384a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    384c:	2317      	movs	r3, #23
    384e:	18fb      	adds	r3, r7, r3
    3850:	781b      	ldrb	r3, [r3, #0]
    3852:	2b00      	cmp	r3, #0
    3854:	d107      	bne.n	3866 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    3856:	2317      	movs	r3, #23
    3858:	18fc      	adds	r4, r7, r3
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	0018      	movs	r0, r3
    385e:	4b1e      	ldr	r3, [pc, #120]	; (38d8 <_i2c_master_read_packet+0x154>)
    3860:	4798      	blx	r3
    3862:	0003      	movs	r3, r0
    3864:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    3866:	2317      	movs	r3, #23
    3868:	18fb      	adds	r3, r7, r3
    386a:	781b      	ldrb	r3, [r3, #0]
    386c:	2b00      	cmp	r3, #0
    386e:	d114      	bne.n	389a <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    3870:	693b      	ldr	r3, [r7, #16]
    3872:	2203      	movs	r2, #3
    3874:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3876:	683b      	ldr	r3, [r7, #0]
    3878:	881b      	ldrh	r3, [r3, #0]
    387a:	0a1b      	lsrs	r3, r3, #8
    387c:	b29b      	uxth	r3, r3
    387e:	2278      	movs	r2, #120	; 0x78
    3880:	4313      	orrs	r3, r2
    3882:	b29b      	uxth	r3, r3
    3884:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3886:	683b      	ldr	r3, [r7, #0]
    3888:	7a5b      	ldrb	r3, [r3, #9]
    388a:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    388c:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    388e:	2201      	movs	r2, #1
    3890:	4313      	orrs	r3, r2
    3892:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3894:	693b      	ldr	r3, [r7, #16]
    3896:	625a      	str	r2, [r3, #36]	; 0x24
    3898:	e012      	b.n	38c0 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    389a:	2317      	movs	r3, #23
    389c:	18fb      	adds	r3, r7, r3
    389e:	781b      	ldrb	r3, [r3, #0]
    38a0:	e00f      	b.n	38c2 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    38a2:	693b      	ldr	r3, [r7, #16]
    38a4:	2203      	movs	r2, #3
    38a6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    38a8:	683b      	ldr	r3, [r7, #0]
    38aa:	881b      	ldrh	r3, [r3, #0]
    38ac:	005b      	lsls	r3, r3, #1
    38ae:	2201      	movs	r2, #1
    38b0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	7a5b      	ldrb	r3, [r3, #9]
    38b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    38b8:	4313      	orrs	r3, r2
    38ba:	001a      	movs	r2, r3
    38bc:	693b      	ldr	r3, [r7, #16]
    38be:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    38c0:	2300      	movs	r3, #0
}
    38c2:	0018      	movs	r0, r3
    38c4:	46bd      	mov	sp, r7
    38c6:	b007      	add	sp, #28
    38c8:	bd90      	pop	{r4, r7, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	00003479 	.word	0x00003479
    38d0:	fffbffff 	.word	0xfffbffff
    38d4:	0000341b 	.word	0x0000341b
    38d8:	000033bd 	.word	0x000033bd

000038dc <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    38dc:	b580      	push	{r7, lr}
    38de:	b082      	sub	sp, #8
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    38e4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b9b      	ldrh	r3, [r3, #28]
    38ea:	b29b      	uxth	r3, r3
    38ec:	2b00      	cmp	r3, #0
    38ee:	d001      	beq.n	38f4 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    38f0:	2305      	movs	r3, #5
    38f2:	e00c      	b.n	390e <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	2201      	movs	r2, #1
    38f8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	2201      	movs	r2, #1
    38fe:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    3900:	683a      	ldr	r2, [r7, #0]
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	0011      	movs	r1, r2
    3906:	0018      	movs	r0, r3
    3908:	4b03      	ldr	r3, [pc, #12]	; (3918 <i2c_master_read_packet_job+0x3c>)
    390a:	4798      	blx	r3
    390c:	0003      	movs	r3, r0
}
    390e:	0018      	movs	r0, r3
    3910:	46bd      	mov	sp, r7
    3912:	b002      	add	sp, #8
    3914:	bd80      	pop	{r7, pc}
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	00003785 	.word	0x00003785

0000391c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    391c:	b580      	push	{r7, lr}
    391e:	b084      	sub	sp, #16
    3920:	af00      	add	r7, sp, #0
    3922:	6078      	str	r0, [r7, #4]
    3924:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    392c:	683b      	ldr	r3, [r7, #0]
    392e:	7a5b      	ldrb	r3, [r3, #9]
    3930:	2b00      	cmp	r3, #0
    3932:	d006      	beq.n	3942 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3934:	683b      	ldr	r3, [r7, #0]
    3936:	7a9a      	ldrb	r2, [r3, #10]
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	0011      	movs	r1, r2
    393c:	0018      	movs	r0, r3
    393e:	4b1e      	ldr	r3, [pc, #120]	; (39b8 <_i2c_master_write_packet+0x9c>)
    3940:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	685b      	ldr	r3, [r3, #4]
    3946:	4a1d      	ldr	r2, [pc, #116]	; (39bc <_i2c_master_write_packet+0xa0>)
    3948:	401a      	ands	r2, r3
    394a:	68fb      	ldr	r3, [r7, #12]
    394c:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    394e:	683b      	ldr	r3, [r7, #0]
    3950:	685a      	ldr	r2, [r3, #4]
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    3956:	683b      	ldr	r3, [r7, #0]
    3958:	885a      	ldrh	r2, [r3, #2]
    395a:	687b      	ldr	r3, [r7, #4]
    395c:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	2224      	movs	r2, #36	; 0x24
    3962:	2100      	movs	r1, #0
    3964:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	2225      	movs	r2, #37	; 0x25
    396a:	2105      	movs	r1, #5
    396c:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	2203      	movs	r2, #3
    3972:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    3974:	683b      	ldr	r3, [r7, #0]
    3976:	7a1b      	ldrb	r3, [r3, #8]
    3978:	2b00      	cmp	r3, #0
    397a:	d00d      	beq.n	3998 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	881b      	ldrh	r3, [r3, #0]
    3980:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3982:	683b      	ldr	r3, [r7, #0]
    3984:	7a5b      	ldrb	r3, [r3, #9]
    3986:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3988:	4313      	orrs	r3, r2
    398a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    398c:	2380      	movs	r3, #128	; 0x80
    398e:	021b      	lsls	r3, r3, #8
    3990:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	625a      	str	r2, [r3, #36]	; 0x24
    3996:	e009      	b.n	39ac <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3998:	683b      	ldr	r3, [r7, #0]
    399a:	881b      	ldrh	r3, [r3, #0]
    399c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a5b      	ldrb	r3, [r3, #9]
    39a2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    39a4:	4313      	orrs	r3, r2
    39a6:	001a      	movs	r2, r3
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    39ac:	2300      	movs	r3, #0
}
    39ae:	0018      	movs	r0, r3
    39b0:	46bd      	mov	sp, r7
    39b2:	b004      	add	sp, #16
    39b4:	bd80      	pop	{r7, pc}
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	00003479 	.word	0x00003479
    39bc:	fffbffff 	.word	0xfffbffff

000039c0 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    39c0:	b580      	push	{r7, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	af00      	add	r7, sp, #0
    39c6:	6078      	str	r0, [r7, #4]
    39c8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	8b9b      	ldrh	r3, [r3, #28]
    39ce:	b29b      	uxth	r3, r3
    39d0:	2b00      	cmp	r3, #0
    39d2:	d001      	beq.n	39d8 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    39d4:	2305      	movs	r3, #5
    39d6:	e00c      	b.n	39f2 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	2201      	movs	r2, #1
    39dc:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	2201      	movs	r2, #1
    39e2:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    39e4:	683a      	ldr	r2, [r7, #0]
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	0011      	movs	r1, r2
    39ea:	0018      	movs	r0, r3
    39ec:	4b03      	ldr	r3, [pc, #12]	; (39fc <i2c_master_write_packet_job+0x3c>)
    39ee:	4798      	blx	r3
    39f0:	0003      	movs	r3, r0
}
    39f2:	0018      	movs	r0, r3
    39f4:	46bd      	mov	sp, r7
    39f6:	b002      	add	sp, #8
    39f8:	bd80      	pop	{r7, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	0000391d 	.word	0x0000391d

00003a00 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b086      	sub	sp, #24
    3a04:	af00      	add	r7, sp, #0
    3a06:	0002      	movs	r2, r0
    3a08:	1dfb      	adds	r3, r7, #7
    3a0a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    3a0c:	1dfb      	adds	r3, r7, #7
    3a0e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    3a10:	4b93      	ldr	r3, [pc, #588]	; (3c60 <_i2c_master_interrupt_handler+0x260>)
    3a12:	0092      	lsls	r2, r2, #2
    3a14:	58d3      	ldr	r3, [r2, r3]
    3a16:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a18:	697b      	ldr	r3, [r7, #20]
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3a1e:	693b      	ldr	r3, [r7, #16]
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	011b      	lsls	r3, r3, #4
    3a24:	0fdb      	lsrs	r3, r3, #31
    3a26:	b2db      	uxtb	r3, r3
    3a28:	001a      	movs	r2, r3
    3a2a:	230f      	movs	r3, #15
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	1e51      	subs	r1, r2, #1
    3a30:	418a      	sbcs	r2, r1
    3a32:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    3a34:	230e      	movs	r3, #14
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	697a      	ldr	r2, [r7, #20]
    3a3a:	7e52      	ldrb	r2, [r2, #25]
    3a3c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    3a3e:	697b      	ldr	r3, [r7, #20]
    3a40:	7e1b      	ldrb	r3, [r3, #24]
    3a42:	b2da      	uxtb	r2, r3
    3a44:	230e      	movs	r3, #14
    3a46:	18fb      	adds	r3, r7, r3
    3a48:	210e      	movs	r1, #14
    3a4a:	1879      	adds	r1, r7, r1
    3a4c:	7809      	ldrb	r1, [r1, #0]
    3a4e:	400a      	ands	r2, r1
    3a50:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    3a52:	697b      	ldr	r3, [r7, #20]
    3a54:	8b5b      	ldrh	r3, [r3, #26]
    3a56:	b29b      	uxth	r3, r3
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d109      	bne.n	3a70 <_i2c_master_interrupt_handler+0x70>
    3a5c:	697b      	ldr	r3, [r7, #20]
    3a5e:	8b9b      	ldrh	r3, [r3, #28]
    3a60:	b29b      	uxth	r3, r3
    3a62:	2b00      	cmp	r3, #0
    3a64:	d004      	beq.n	3a70 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    3a66:	697b      	ldr	r3, [r7, #20]
    3a68:	0018      	movs	r0, r3
    3a6a:	4b7e      	ldr	r3, [pc, #504]	; (3c64 <_i2c_master_interrupt_handler+0x264>)
    3a6c:	4798      	blx	r3
    3a6e:	e070      	b.n	3b52 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3a70:	697b      	ldr	r3, [r7, #20]
    3a72:	8b5b      	ldrh	r3, [r3, #26]
    3a74:	b29b      	uxth	r3, r3
    3a76:	2b00      	cmp	r3, #0
    3a78:	d039      	beq.n	3aee <_i2c_master_interrupt_handler+0xee>
    3a7a:	697b      	ldr	r3, [r7, #20]
    3a7c:	8b9b      	ldrh	r3, [r3, #28]
    3a7e:	b29b      	uxth	r3, r3
    3a80:	2b00      	cmp	r3, #0
    3a82:	d134      	bne.n	3aee <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    3a84:	697b      	ldr	r3, [r7, #20]
    3a86:	2225      	movs	r2, #37	; 0x25
    3a88:	5c9b      	ldrb	r3, [r3, r2]
    3a8a:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3a8c:	2b05      	cmp	r3, #5
    3a8e:	d12e      	bne.n	3aee <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3a90:	697b      	ldr	r3, [r7, #20]
    3a92:	2224      	movs	r2, #36	; 0x24
    3a94:	5c9b      	ldrb	r3, [r3, r2]
    3a96:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d128      	bne.n	3aee <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    3a9c:	693b      	ldr	r3, [r7, #16]
    3a9e:	2203      	movs	r2, #3
    3aa0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3aa2:	697b      	ldr	r3, [r7, #20]
    3aa4:	2200      	movs	r2, #0
    3aa6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    3aa8:	697b      	ldr	r3, [r7, #20]
    3aaa:	2225      	movs	r2, #37	; 0x25
    3aac:	2100      	movs	r1, #0
    3aae:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    3ab0:	697b      	ldr	r3, [r7, #20]
    3ab2:	7a9b      	ldrb	r3, [r3, #10]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d00b      	beq.n	3ad0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ab8:	697b      	ldr	r3, [r7, #20]
    3aba:	0018      	movs	r0, r3
    3abc:	4b6a      	ldr	r3, [pc, #424]	; (3c68 <_i2c_master_interrupt_handler+0x268>)
    3abe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	685b      	ldr	r3, [r3, #4]
    3ac4:	22c0      	movs	r2, #192	; 0xc0
    3ac6:	0292      	lsls	r2, r2, #10
    3ac8:	431a      	orrs	r2, r3
    3aca:	693b      	ldr	r3, [r7, #16]
    3acc:	605a      	str	r2, [r3, #4]
    3ace:	e002      	b.n	3ad6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3ad0:	693b      	ldr	r3, [r7, #16]
    3ad2:	2201      	movs	r2, #1
    3ad4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3ad6:	230e      	movs	r3, #14
    3ad8:	18fb      	adds	r3, r7, r3
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	2201      	movs	r2, #1
    3ade:	4013      	ands	r3, r2
    3ae0:	d037      	beq.n	3b52 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3ae2:	697b      	ldr	r3, [r7, #20]
    3ae4:	68db      	ldr	r3, [r3, #12]
    3ae6:	697a      	ldr	r2, [r7, #20]
    3ae8:	0010      	movs	r0, r2
    3aea:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3aec:	e031      	b.n	3b52 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    3aee:	697b      	ldr	r3, [r7, #20]
    3af0:	8b5b      	ldrh	r3, [r3, #26]
    3af2:	b29b      	uxth	r3, r3
    3af4:	2b00      	cmp	r3, #0
    3af6:	d02c      	beq.n	3b52 <_i2c_master_interrupt_handler+0x152>
    3af8:	697b      	ldr	r3, [r7, #20]
    3afa:	8b9b      	ldrh	r3, [r3, #28]
    3afc:	b29b      	uxth	r3, r3
    3afe:	2b00      	cmp	r3, #0
    3b00:	d027      	beq.n	3b52 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3b02:	693b      	ldr	r3, [r7, #16]
    3b04:	8b5b      	ldrh	r3, [r3, #26]
    3b06:	b29b      	uxth	r3, r3
    3b08:	001a      	movs	r2, r3
    3b0a:	2320      	movs	r3, #32
    3b0c:	4013      	ands	r3, r2
    3b0e:	d111      	bne.n	3b34 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3b10:	230f      	movs	r3, #15
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	2201      	movs	r2, #1
    3b18:	4053      	eors	r3, r2
    3b1a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d104      	bne.n	3b2a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3b20:	697b      	ldr	r3, [r7, #20]
    3b22:	8b9b      	ldrh	r3, [r3, #28]
    3b24:	b29b      	uxth	r3, r3
    3b26:	2b01      	cmp	r3, #1
    3b28:	d004      	beq.n	3b34 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3b2a:	697b      	ldr	r3, [r7, #20]
    3b2c:	2225      	movs	r2, #37	; 0x25
    3b2e:	2141      	movs	r1, #65	; 0x41
    3b30:	5499      	strb	r1, [r3, r2]
    3b32:	e00e      	b.n	3b52 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3b34:	697b      	ldr	r3, [r7, #20]
    3b36:	2224      	movs	r2, #36	; 0x24
    3b38:	5c9b      	ldrb	r3, [r3, r2]
    3b3a:	b2db      	uxtb	r3, r3
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d104      	bne.n	3b4a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    3b40:	697b      	ldr	r3, [r7, #20]
    3b42:	0018      	movs	r0, r3
    3b44:	4b49      	ldr	r3, [pc, #292]	; (3c6c <_i2c_master_interrupt_handler+0x26c>)
    3b46:	4798      	blx	r3
    3b48:	e003      	b.n	3b52 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    3b4a:	697b      	ldr	r3, [r7, #20]
    3b4c:	0018      	movs	r0, r3
    3b4e:	4b48      	ldr	r3, [pc, #288]	; (3c70 <_i2c_master_interrupt_handler+0x270>)
    3b50:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3b52:	697b      	ldr	r3, [r7, #20]
    3b54:	8b5b      	ldrh	r3, [r3, #26]
    3b56:	b29b      	uxth	r3, r3
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d047      	beq.n	3bec <_i2c_master_interrupt_handler+0x1ec>
    3b5c:	697b      	ldr	r3, [r7, #20]
    3b5e:	8b9b      	ldrh	r3, [r3, #28]
    3b60:	b29b      	uxth	r3, r3
    3b62:	2b00      	cmp	r3, #0
    3b64:	d142      	bne.n	3bec <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    3b66:	697b      	ldr	r3, [r7, #20]
    3b68:	2225      	movs	r2, #37	; 0x25
    3b6a:	5c9b      	ldrb	r3, [r3, r2]
    3b6c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3b6e:	2b05      	cmp	r3, #5
    3b70:	d13c      	bne.n	3bec <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    3b72:	697b      	ldr	r3, [r7, #20]
    3b74:	2224      	movs	r2, #36	; 0x24
    3b76:	5c9b      	ldrb	r3, [r3, r2]
    3b78:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    3b7a:	2b01      	cmp	r3, #1
    3b7c:	d136      	bne.n	3bec <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3b7e:	693b      	ldr	r3, [r7, #16]
    3b80:	7e1b      	ldrb	r3, [r3, #24]
    3b82:	b2db      	uxtb	r3, r3
    3b84:	001a      	movs	r2, r3
    3b86:	2302      	movs	r3, #2
    3b88:	4013      	ands	r3, r2
    3b8a:	d002      	beq.n	3b92 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3b8c:	693b      	ldr	r3, [r7, #16]
    3b8e:	2202      	movs	r2, #2
    3b90:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    3b92:	693b      	ldr	r3, [r7, #16]
    3b94:	2203      	movs	r2, #3
    3b96:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    3b98:	697b      	ldr	r3, [r7, #20]
    3b9a:	2200      	movs	r2, #0
    3b9c:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    3b9e:	697b      	ldr	r3, [r7, #20]
    3ba0:	2225      	movs	r2, #37	; 0x25
    3ba2:	2100      	movs	r1, #0
    3ba4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3ba6:	230e      	movs	r3, #14
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	2202      	movs	r2, #2
    3bae:	4013      	ands	r3, r2
    3bb0:	d00b      	beq.n	3bca <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    3bb2:	697b      	ldr	r3, [r7, #20]
    3bb4:	2224      	movs	r2, #36	; 0x24
    3bb6:	5c9b      	ldrb	r3, [r3, r2]
    3bb8:	b2db      	uxtb	r3, r3
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d105      	bne.n	3bca <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    3bbe:	697b      	ldr	r3, [r7, #20]
    3bc0:	691b      	ldr	r3, [r3, #16]
    3bc2:	697a      	ldr	r2, [r7, #20]
    3bc4:	0010      	movs	r0, r2
    3bc6:	4798      	blx	r3
    3bc8:	e010      	b.n	3bec <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3bca:	230e      	movs	r3, #14
    3bcc:	18fb      	adds	r3, r7, r3
    3bce:	781b      	ldrb	r3, [r3, #0]
    3bd0:	2201      	movs	r2, #1
    3bd2:	4013      	ands	r3, r2
    3bd4:	d00a      	beq.n	3bec <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3bd6:	697b      	ldr	r3, [r7, #20]
    3bd8:	2224      	movs	r2, #36	; 0x24
    3bda:	5c9b      	ldrb	r3, [r3, r2]
    3bdc:	b2db      	uxtb	r3, r3
    3bde:	2b00      	cmp	r3, #0
    3be0:	d104      	bne.n	3bec <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3be2:	697b      	ldr	r3, [r7, #20]
    3be4:	68db      	ldr	r3, [r3, #12]
    3be6:	697a      	ldr	r2, [r7, #20]
    3be8:	0010      	movs	r0, r2
    3bea:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    3bec:	697b      	ldr	r3, [r7, #20]
    3bee:	2225      	movs	r2, #37	; 0x25
    3bf0:	5c9b      	ldrb	r3, [r3, r2]
    3bf2:	b2db      	uxtb	r3, r3
    3bf4:	2b05      	cmp	r3, #5
    3bf6:	d02e      	beq.n	3c56 <_i2c_master_interrupt_handler+0x256>
    3bf8:	697b      	ldr	r3, [r7, #20]
    3bfa:	2225      	movs	r2, #37	; 0x25
    3bfc:	5c9b      	ldrb	r3, [r3, r2]
    3bfe:	b2db      	uxtb	r3, r3
    3c00:	2b00      	cmp	r3, #0
    3c02:	d028      	beq.n	3c56 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    3c04:	693b      	ldr	r3, [r7, #16]
    3c06:	2203      	movs	r2, #3
    3c08:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3c0a:	697b      	ldr	r3, [r7, #20]
    3c0c:	2200      	movs	r2, #0
    3c0e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    3c10:	697b      	ldr	r3, [r7, #20]
    3c12:	2200      	movs	r2, #0
    3c14:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3c16:	697b      	ldr	r3, [r7, #20]
    3c18:	2225      	movs	r2, #37	; 0x25
    3c1a:	5c9b      	ldrb	r3, [r3, r2]
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	2b41      	cmp	r3, #65	; 0x41
    3c20:	d00e      	beq.n	3c40 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    3c22:	697b      	ldr	r3, [r7, #20]
    3c24:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3c26:	2b00      	cmp	r3, #0
    3c28:	d00a      	beq.n	3c40 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    3c2a:	697b      	ldr	r3, [r7, #20]
    3c2c:	0018      	movs	r0, r3
    3c2e:	4b0e      	ldr	r3, [pc, #56]	; (3c68 <_i2c_master_interrupt_handler+0x268>)
    3c30:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    3c32:	693b      	ldr	r3, [r7, #16]
    3c34:	685b      	ldr	r3, [r3, #4]
    3c36:	22e0      	movs	r2, #224	; 0xe0
    3c38:	02d2      	lsls	r2, r2, #11
    3c3a:	431a      	orrs	r2, r3
    3c3c:	693b      	ldr	r3, [r7, #16]
    3c3e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    3c40:	230e      	movs	r3, #14
    3c42:	18fb      	adds	r3, r7, r3
    3c44:	781b      	ldrb	r3, [r3, #0]
    3c46:	2204      	movs	r2, #4
    3c48:	4013      	ands	r3, r2
    3c4a:	d004      	beq.n	3c56 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3c4c:	697b      	ldr	r3, [r7, #20]
    3c4e:	695b      	ldr	r3, [r3, #20]
    3c50:	697a      	ldr	r2, [r7, #20]
    3c52:	0010      	movs	r0, r2
    3c54:	4798      	blx	r3
		}
	}
}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	46bd      	mov	sp, r7
    3c5a:	b006      	add	sp, #24
    3c5c:	bd80      	pop	{r7, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	20004094 	.word	0x20004094
    3c64:	00003681 	.word	0x00003681
    3c68:	000034f1 	.word	0x000034f1
    3c6c:	00003605 	.word	0x00003605
    3c70:	00003515 	.word	0x00003515

00003c74 <cpu_irq_save>:
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b082      	sub	sp, #8
    3c78:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c7a:	f3ef 8310 	mrs	r3, PRIMASK
    3c7e:	607b      	str	r3, [r7, #4]
  return(result);
    3c80:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c82:	425a      	negs	r2, r3
    3c84:	4153      	adcs	r3, r2
    3c86:	b2db      	uxtb	r3, r3
    3c88:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3c8a:	b672      	cpsid	i
    3c8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c90:	4b03      	ldr	r3, [pc, #12]	; (3ca0 <cpu_irq_save+0x2c>)
    3c92:	2200      	movs	r2, #0
    3c94:	701a      	strb	r2, [r3, #0]
	return flags;
    3c96:	683b      	ldr	r3, [r7, #0]
}
    3c98:	0018      	movs	r0, r3
    3c9a:	46bd      	mov	sp, r7
    3c9c:	b002      	add	sp, #8
    3c9e:	bd80      	pop	{r7, pc}
    3ca0:	200001d2 	.word	0x200001d2

00003ca4 <cpu_irq_is_enabled_flags>:
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b082      	sub	sp, #8
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
	return (flags);
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	1e5a      	subs	r2, r3, #1
    3cb0:	4193      	sbcs	r3, r2
    3cb2:	b2db      	uxtb	r3, r3
}
    3cb4:	0018      	movs	r0, r3
    3cb6:	46bd      	mov	sp, r7
    3cb8:	b002      	add	sp, #8
    3cba:	bd80      	pop	{r7, pc}

00003cbc <cpu_irq_restore>:
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <cpu_irq_restore+0x28>)
    3cca:	4798      	blx	r3
    3ccc:	1e03      	subs	r3, r0, #0
    3cce:	d005      	beq.n	3cdc <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3cd0:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <cpu_irq_restore+0x2c>)
    3cd2:	2201      	movs	r2, #1
    3cd4:	701a      	strb	r2, [r3, #0]
    3cd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3cda:	b662      	cpsie	i
}
    3cdc:	46c0      	nop			; (mov r8, r8)
    3cde:	46bd      	mov	sp, r7
    3ce0:	b002      	add	sp, #8
    3ce2:	bd80      	pop	{r7, pc}
    3ce4:	00003ca5 	.word	0x00003ca5
    3ce8:	200001d2 	.word	0x200001d2

00003cec <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b082      	sub	sp, #8
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	681a      	ldr	r2, [r3, #0]
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	681b      	ldr	r3, [r3, #0]
    3cfc:	891b      	ldrh	r3, [r3, #8]
    3cfe:	b29b      	uxth	r3, r3
    3d00:	2101      	movs	r1, #1
    3d02:	438b      	bics	r3, r1
    3d04:	b29b      	uxth	r3, r3
    3d06:	8113      	strh	r3, [r2, #8]
}
    3d08:	46c0      	nop			; (mov r8, r8)
    3d0a:	46bd      	mov	sp, r7
    3d0c:	b002      	add	sp, #8
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b082      	sub	sp, #8
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	7a9b      	ldrb	r3, [r3, #10]
    3d1e:	065b      	lsls	r3, r3, #25
    3d20:	0e5b      	lsrs	r3, r3, #25
    3d22:	b2db      	uxtb	r3, r3
}
    3d24:	0018      	movs	r0, r3
    3d26:	46bd      	mov	sp, r7
    3d28:	b002      	add	sp, #8
    3d2a:	bd80      	pop	{r7, pc}

00003d2c <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	000a      	movs	r2, r1
    3d36:	1cfb      	adds	r3, r7, #3
    3d38:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	1cfa      	adds	r2, r7, #3
    3d40:	7812      	ldrb	r2, [r2, #0]
    3d42:	2180      	movs	r1, #128	; 0x80
    3d44:	4249      	negs	r1, r1
    3d46:	430a      	orrs	r2, r1
    3d48:	b2d2      	uxtb	r2, r2
    3d4a:	729a      	strb	r2, [r3, #10]
}
    3d4c:	46c0      	nop			; (mov r8, r8)
    3d4e:	46bd      	mov	sp, r7
    3d50:	b002      	add	sp, #8
    3d52:	bd80      	pop	{r7, pc}

00003d54 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b082      	sub	sp, #8
    3d58:	af00      	add	r7, sp, #0
    3d5a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	8a1b      	ldrh	r3, [r3, #16]
    3d62:	049b      	lsls	r3, r3, #18
    3d64:	0d5b      	lsrs	r3, r3, #21
    3d66:	b29b      	uxth	r3, r3
}
    3d68:	0018      	movs	r0, r3
    3d6a:	46bd      	mov	sp, r7
    3d6c:	b002      	add	sp, #8
    3d6e:	bd80      	pop	{r7, pc}

00003d70 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	8a1b      	ldrh	r3, [r3, #16]
    3d7e:	b29b      	uxth	r3, r3
}
    3d80:	0018      	movs	r0, r3
    3d82:	46bd      	mov	sp, r7
    3d84:	b002      	add	sp, #8
    3d86:	bd80      	pop	{r7, pc}

00003d88 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	000a      	movs	r2, r1
    3d92:	1cfb      	adds	r3, r7, #3
    3d94:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	681a      	ldr	r2, [r3, #0]
    3d9a:	1cfb      	adds	r3, r7, #3
    3d9c:	781b      	ldrb	r3, [r3, #0]
    3d9e:	2103      	movs	r1, #3
    3da0:	400b      	ands	r3, r1
    3da2:	b2d9      	uxtb	r1, r3
    3da4:	8913      	ldrh	r3, [r2, #8]
    3da6:	1c08      	adds	r0, r1, #0
    3da8:	2103      	movs	r1, #3
    3daa:	4001      	ands	r1, r0
    3dac:	0288      	lsls	r0, r1, #10
    3dae:	4905      	ldr	r1, [pc, #20]	; (3dc4 <usb_device_set_lpm_mode+0x3c>)
    3db0:	400b      	ands	r3, r1
    3db2:	1c19      	adds	r1, r3, #0
    3db4:	1c03      	adds	r3, r0, #0
    3db6:	430b      	orrs	r3, r1
    3db8:	8113      	strh	r3, [r2, #8]
}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	46bd      	mov	sp, r7
    3dbe:	b002      	add	sp, #8
    3dc0:	bd80      	pop	{r7, pc}
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	fffff3ff 	.word	0xfffff3ff

00003dc8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b084      	sub	sp, #16
    3dcc:	af00      	add	r7, sp, #0
    3dce:	0002      	movs	r2, r0
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3dd4:	1dfb      	adds	r3, r7, #7
    3dd6:	781b      	ldrb	r3, [r3, #0]
    3dd8:	4a0c      	ldr	r2, [pc, #48]	; (3e0c <sleepmgr_lock_mode+0x44>)
    3dda:	5cd3      	ldrb	r3, [r2, r3]
    3ddc:	2bff      	cmp	r3, #255	; 0xff
    3dde:	d100      	bne.n	3de2 <sleepmgr_lock_mode+0x1a>
		while (true) {
    3de0:	e7fe      	b.n	3de0 <sleepmgr_lock_mode+0x18>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    3de2:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <sleepmgr_lock_mode+0x48>)
    3de4:	4798      	blx	r3
    3de6:	0003      	movs	r3, r0
    3de8:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    3dea:	1dfb      	adds	r3, r7, #7
    3dec:	781b      	ldrb	r3, [r3, #0]
    3dee:	4a07      	ldr	r2, [pc, #28]	; (3e0c <sleepmgr_lock_mode+0x44>)
    3df0:	5cd2      	ldrb	r2, [r2, r3]
    3df2:	3201      	adds	r2, #1
    3df4:	b2d1      	uxtb	r1, r2
    3df6:	4a05      	ldr	r2, [pc, #20]	; (3e0c <sleepmgr_lock_mode+0x44>)
    3df8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    3dfa:	68fb      	ldr	r3, [r7, #12]
    3dfc:	0018      	movs	r0, r3
    3dfe:	4b05      	ldr	r3, [pc, #20]	; (3e14 <sleepmgr_lock_mode+0x4c>)
    3e00:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	46bd      	mov	sp, r7
    3e06:	b004      	add	sp, #16
    3e08:	bd80      	pop	{r7, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	20003c78 	.word	0x20003c78
    3e10:	00003c75 	.word	0x00003c75
    3e14:	00003cbd 	.word	0x00003cbd

00003e18 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    3e18:	b580      	push	{r7, lr}
    3e1a:	b084      	sub	sp, #16
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	0002      	movs	r2, r0
    3e20:	1dfb      	adds	r3, r7, #7
    3e22:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    3e24:	1dfb      	adds	r3, r7, #7
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	4a0c      	ldr	r2, [pc, #48]	; (3e5c <sleepmgr_unlock_mode+0x44>)
    3e2a:	5cd3      	ldrb	r3, [r2, r3]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d100      	bne.n	3e32 <sleepmgr_unlock_mode+0x1a>
		while (true) {
    3e30:	e7fe      	b.n	3e30 <sleepmgr_unlock_mode+0x18>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    3e32:	4b0b      	ldr	r3, [pc, #44]	; (3e60 <sleepmgr_unlock_mode+0x48>)
    3e34:	4798      	blx	r3
    3e36:	0003      	movs	r3, r0
    3e38:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    3e3a:	1dfb      	adds	r3, r7, #7
    3e3c:	781b      	ldrb	r3, [r3, #0]
    3e3e:	4a07      	ldr	r2, [pc, #28]	; (3e5c <sleepmgr_unlock_mode+0x44>)
    3e40:	5cd2      	ldrb	r2, [r2, r3]
    3e42:	3a01      	subs	r2, #1
    3e44:	b2d1      	uxtb	r1, r2
    3e46:	4a05      	ldr	r2, [pc, #20]	; (3e5c <sleepmgr_unlock_mode+0x44>)
    3e48:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    3e4a:	68fb      	ldr	r3, [r7, #12]
    3e4c:	0018      	movs	r0, r3
    3e4e:	4b05      	ldr	r3, [pc, #20]	; (3e64 <sleepmgr_unlock_mode+0x4c>)
    3e50:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	46bd      	mov	sp, r7
    3e56:	b004      	add	sp, #16
    3e58:	bd80      	pop	{r7, pc}
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	20003c78 	.word	0x20003c78
    3e60:	00003c75 	.word	0x00003c75
    3e64:	00003cbd 	.word	0x00003cbd

00003e68 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    3e68:	b580      	push	{r7, lr}
    3e6a:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3e6c:	4b0c      	ldr	r3, [pc, #48]	; (3ea0 <udd_wait_clock_ready+0x38>)
    3e6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3e70:	b29b      	uxth	r3, r3
    3e72:	001a      	movs	r2, r3
    3e74:	2320      	movs	r3, #32
    3e76:	4013      	ands	r3, r2
    3e78:	d107      	bne.n	3e8a <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3e7a:	46c0      	nop			; (mov r8, r8)
    3e7c:	4b08      	ldr	r3, [pc, #32]	; (3ea0 <udd_wait_clock_ready+0x38>)
    3e7e:	68db      	ldr	r3, [r3, #12]
    3e80:	22d0      	movs	r2, #208	; 0xd0
    3e82:	4013      	ands	r3, r2
    3e84:	2bd0      	cmp	r3, #208	; 0xd0
    3e86:	d1f9      	bne.n	3e7c <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    3e88:	e006      	b.n	3e98 <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	4b04      	ldr	r3, [pc, #16]	; (3ea0 <udd_wait_clock_ready+0x38>)
    3e8e:	68db      	ldr	r3, [r3, #12]
    3e90:	2210      	movs	r2, #16
    3e92:	4013      	ands	r3, r2
    3e94:	2b10      	cmp	r3, #16
    3e96:	d1f9      	bne.n	3e8c <udd_wait_clock_ready+0x24>
}
    3e98:	46c0      	nop			; (mov r8, r8)
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd80      	pop	{r7, pc}
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	40000800 	.word	0x40000800

00003ea4 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3ea4:	b580      	push	{r7, lr}
    3ea6:	b084      	sub	sp, #16
    3ea8:	af00      	add	r7, sp, #0
    3eaa:	0002      	movs	r2, r0
    3eac:	1dfb      	adds	r3, r7, #7
    3eae:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    3eb0:	230c      	movs	r3, #12
    3eb2:	18fb      	adds	r3, r7, r3
    3eb4:	4a15      	ldr	r2, [pc, #84]	; (3f0c <udd_sleep_mode+0x68>)
    3eb6:	6812      	ldr	r2, [r2, #0]
    3eb8:	601a      	str	r2, [r3, #0]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    3eba:	4b15      	ldr	r3, [pc, #84]	; (3f10 <udd_sleep_mode+0x6c>)
    3ebc:	781b      	ldrb	r3, [r3, #0]
    3ebe:	1dfa      	adds	r2, r7, #7
    3ec0:	7812      	ldrb	r2, [r2, #0]
    3ec2:	429a      	cmp	r2, r3
    3ec4:	d01d      	beq.n	3f02 <udd_sleep_mode+0x5e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    3ec6:	1dfb      	adds	r3, r7, #7
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d007      	beq.n	3ede <udd_sleep_mode+0x3a>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    3ece:	1dfb      	adds	r3, r7, #7
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	220c      	movs	r2, #12
    3ed4:	18ba      	adds	r2, r7, r2
    3ed6:	5cd3      	ldrb	r3, [r2, r3]
    3ed8:	0018      	movs	r0, r3
    3eda:	4b0e      	ldr	r3, [pc, #56]	; (3f14 <udd_sleep_mode+0x70>)
    3edc:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    3ede:	4b0c      	ldr	r3, [pc, #48]	; (3f10 <udd_sleep_mode+0x6c>)
    3ee0:	781b      	ldrb	r3, [r3, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d008      	beq.n	3ef8 <udd_sleep_mode+0x54>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3ee6:	4b0a      	ldr	r3, [pc, #40]	; (3f10 <udd_sleep_mode+0x6c>)
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	001a      	movs	r2, r3
    3eec:	230c      	movs	r3, #12
    3eee:	18fb      	adds	r3, r7, r3
    3ef0:	5c9b      	ldrb	r3, [r3, r2]
    3ef2:	0018      	movs	r0, r3
    3ef4:	4b08      	ldr	r3, [pc, #32]	; (3f18 <udd_sleep_mode+0x74>)
    3ef6:	4798      	blx	r3
	}
	udd_state = new_state;
    3ef8:	4b05      	ldr	r3, [pc, #20]	; (3f10 <udd_sleep_mode+0x6c>)
    3efa:	1dfa      	adds	r2, r7, #7
    3efc:	7812      	ldrb	r2, [r2, #0]
    3efe:	701a      	strb	r2, [r3, #0]
    3f00:	e000      	b.n	3f04 <udd_sleep_mode+0x60>
		return; // No change
    3f02:	46c0      	nop			; (mov r8, r8)
}
    3f04:	46bd      	mov	sp, r7
    3f06:	b004      	add	sp, #16
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	000138e4 	.word	0x000138e4
    3f10:	20000828 	.word	0x20000828
    3f14:	00003dc9 	.word	0x00003dc9
    3f18:	00003e19 	.word	0x00003e19

00003f1c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
    3f22:	0002      	movs	r2, r0
    3f24:	1dfb      	adds	r3, r7, #7
    3f26:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    3f28:	1dfb      	adds	r3, r7, #7
    3f2a:	781b      	ldrb	r3, [r3, #0]
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d003      	beq.n	3f38 <udd_ep_get_job+0x1c>
    3f30:	1dfb      	adds	r3, r7, #7
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	2b80      	cmp	r3, #128	; 0x80
    3f36:	d101      	bne.n	3f3c <udd_ep_get_job+0x20>
		return NULL;
    3f38:	2300      	movs	r3, #0
    3f3a:	e012      	b.n	3f62 <udd_ep_get_job+0x46>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3f3c:	1dfb      	adds	r3, r7, #7
    3f3e:	781b      	ldrb	r3, [r3, #0]
    3f40:	220f      	movs	r2, #15
    3f42:	4013      	ands	r3, r2
    3f44:	005b      	lsls	r3, r3, #1
    3f46:	1dfa      	adds	r2, r7, #7
    3f48:	7812      	ldrb	r2, [r2, #0]
    3f4a:	b252      	sxtb	r2, r2
    3f4c:	b2d2      	uxtb	r2, r2
    3f4e:	09d2      	lsrs	r2, r2, #7
    3f50:	b2d2      	uxtb	r2, r2
    3f52:	189b      	adds	r3, r3, r2
    3f54:	1e9a      	subs	r2, r3, #2
    3f56:	0013      	movs	r3, r2
    3f58:	009b      	lsls	r3, r3, #2
    3f5a:	189b      	adds	r3, r3, r2
    3f5c:	009b      	lsls	r3, r3, #2
    3f5e:	4a03      	ldr	r2, [pc, #12]	; (3f6c <udd_ep_get_job+0x50>)
    3f60:	189b      	adds	r3, r3, r2
	}
}
    3f62:	0018      	movs	r0, r3
    3f64:	46bd      	mov	sp, r7
    3f66:	b002      	add	sp, #8
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	200007b0 	.word	0x200007b0

00003f70 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    3f70:	b590      	push	{r4, r7, lr}
    3f72:	b089      	sub	sp, #36	; 0x24
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3f7c:	2317      	movs	r3, #23
    3f7e:	18fb      	adds	r3, r7, r3
    3f80:	69ba      	ldr	r2, [r7, #24]
    3f82:	7992      	ldrb	r2, [r2, #6]
    3f84:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    3f86:	2317      	movs	r3, #23
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	0018      	movs	r0, r3
    3f8e:	4b54      	ldr	r3, [pc, #336]	; (40e0 <udd_ep_trans_in_next+0x170>)
    3f90:	4798      	blx	r3
    3f92:	0003      	movs	r3, r0
    3f94:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    3f96:	230f      	movs	r3, #15
    3f98:	18fb      	adds	r3, r7, r3
    3f9a:	2217      	movs	r2, #23
    3f9c:	18ba      	adds	r2, r7, r2
    3f9e:	7812      	ldrb	r2, [r2, #0]
    3fa0:	210f      	movs	r1, #15
    3fa2:	400a      	ands	r2, r1
    3fa4:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    3fa6:	230c      	movs	r3, #12
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	693a      	ldr	r2, [r7, #16]
    3fac:	8a12      	ldrh	r2, [r2, #16]
    3fae:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    3fb0:	230a      	movs	r3, #10
    3fb2:	18fb      	adds	r3, r7, r3
    3fb4:	69ba      	ldr	r2, [r7, #24]
    3fb6:	8852      	ldrh	r2, [r2, #2]
    3fb8:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    3fba:	693b      	ldr	r3, [r7, #16]
    3fbc:	68da      	ldr	r2, [r3, #12]
    3fbe:	230a      	movs	r3, #10
    3fc0:	18fb      	adds	r3, r7, r3
    3fc2:	881b      	ldrh	r3, [r3, #0]
    3fc4:	18d2      	adds	r2, r2, r3
    3fc6:	693b      	ldr	r3, [r7, #16]
    3fc8:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    3fca:	693b      	ldr	r3, [r7, #16]
    3fcc:	68da      	ldr	r2, [r3, #12]
    3fce:	693b      	ldr	r3, [r7, #16]
    3fd0:	689b      	ldr	r3, [r3, #8]
    3fd2:	429a      	cmp	r2, r3
    3fd4:	d054      	beq.n	4080 <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3fd6:	693b      	ldr	r3, [r7, #16]
    3fd8:	689b      	ldr	r3, [r3, #8]
    3fda:	b299      	uxth	r1, r3
    3fdc:	693b      	ldr	r3, [r7, #16]
    3fde:	68db      	ldr	r3, [r3, #12]
    3fe0:	b29a      	uxth	r2, r3
    3fe2:	231e      	movs	r3, #30
    3fe4:	18fb      	adds	r3, r7, r3
    3fe6:	1a8a      	subs	r2, r1, r2
    3fe8:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3fea:	231e      	movs	r3, #30
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	881b      	ldrh	r3, [r3, #0]
    3ff0:	4a3c      	ldr	r2, [pc, #240]	; (40e4 <udd_ep_trans_in_next+0x174>)
    3ff2:	4293      	cmp	r3, r2
    3ff4:	d90d      	bls.n	4012 <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    3ff6:	230c      	movs	r3, #12
    3ff8:	18fb      	adds	r3, r7, r3
    3ffa:	881a      	ldrh	r2, [r3, #0]
    3ffc:	4839      	ldr	r0, [pc, #228]	; (40e4 <udd_ep_trans_in_next+0x174>)
    3ffe:	4b3a      	ldr	r3, [pc, #232]	; (40e8 <udd_ep_trans_in_next+0x178>)
    4000:	0011      	movs	r1, r2
    4002:	4798      	blx	r3
    4004:	000b      	movs	r3, r1
    4006:	b29a      	uxth	r2, r3
    4008:	231e      	movs	r3, #30
    400a:	18fb      	adds	r3, r7, r3
    400c:	4935      	ldr	r1, [pc, #212]	; (40e4 <udd_ep_trans_in_next+0x174>)
    400e:	1a8a      	subs	r2, r1, r2
    4010:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    4012:	693b      	ldr	r3, [r7, #16]
    4014:	7c9b      	ldrb	r3, [r3, #18]
    4016:	2202      	movs	r2, #2
    4018:	4013      	ands	r3, r2
    401a:	b2db      	uxtb	r3, r3
    401c:	2b00      	cmp	r3, #0
    401e:	d00e      	beq.n	403e <udd_ep_trans_in_next+0xce>
    4020:	231e      	movs	r3, #30
    4022:	18fa      	adds	r2, r7, r3
    4024:	230c      	movs	r3, #12
    4026:	18fb      	adds	r3, r7, r3
    4028:	8812      	ldrh	r2, [r2, #0]
    402a:	8819      	ldrh	r1, [r3, #0]
    402c:	4b2f      	ldr	r3, [pc, #188]	; (40ec <udd_ep_trans_in_next+0x17c>)
    402e:	0010      	movs	r0, r2
    4030:	4798      	blx	r3
    4032:	000b      	movs	r3, r1
    4034:	b29b      	uxth	r3, r3
    4036:	2b00      	cmp	r3, #0
    4038:	d101      	bne.n	403e <udd_ep_trans_in_next+0xce>
    403a:	2301      	movs	r3, #1
    403c:	e000      	b.n	4040 <udd_ep_trans_in_next+0xd0>
    403e:	2300      	movs	r3, #0
    4040:	b2db      	uxtb	r3, r3
    4042:	1c1a      	adds	r2, r3, #0
    4044:	2301      	movs	r3, #1
    4046:	4013      	ands	r3, r2
    4048:	b2da      	uxtb	r2, r3
    404a:	693b      	ldr	r3, [r7, #16]
    404c:	2101      	movs	r1, #1
    404e:	400a      	ands	r2, r1
    4050:	1890      	adds	r0, r2, r2
    4052:	7c9a      	ldrb	r2, [r3, #18]
    4054:	2102      	movs	r1, #2
    4056:	438a      	bics	r2, r1
    4058:	1c11      	adds	r1, r2, #0
    405a:	1c02      	adds	r2, r0, #0
    405c:	430a      	orrs	r2, r1
    405e:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4060:	693b      	ldr	r3, [r7, #16]
    4062:	685a      	ldr	r2, [r3, #4]
    4064:	693b      	ldr	r3, [r7, #16]
    4066:	68db      	ldr	r3, [r3, #12]
    4068:	18d2      	adds	r2, r2, r3
    406a:	231e      	movs	r3, #30
    406c:	18fb      	adds	r3, r7, r3
    406e:	881c      	ldrh	r4, [r3, #0]
    4070:	230f      	movs	r3, #15
    4072:	18fb      	adds	r3, r7, r3
    4074:	7819      	ldrb	r1, [r3, #0]
    4076:	481e      	ldr	r0, [pc, #120]	; (40f0 <udd_ep_trans_in_next+0x180>)
    4078:	0023      	movs	r3, r4
    407a:	4c1e      	ldr	r4, [pc, #120]	; (40f4 <udd_ep_trans_in_next+0x184>)
    407c:	47a0      	blx	r4
		return;
    407e:	e02b      	b.n	40d8 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    4080:	693b      	ldr	r3, [r7, #16]
    4082:	7c9b      	ldrb	r3, [r3, #18]
    4084:	2202      	movs	r2, #2
    4086:	4013      	ands	r3, r2
    4088:	b2db      	uxtb	r3, r3
    408a:	2b00      	cmp	r3, #0
    408c:	d011      	beq.n	40b2 <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    408e:	693b      	ldr	r3, [r7, #16]
    4090:	7c9a      	ldrb	r2, [r3, #18]
    4092:	2102      	movs	r1, #2
    4094:	438a      	bics	r2, r1
    4096:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    4098:	693b      	ldr	r3, [r7, #16]
    409a:	685a      	ldr	r2, [r3, #4]
    409c:	693b      	ldr	r3, [r7, #16]
    409e:	68db      	ldr	r3, [r3, #12]
    40a0:	18d2      	adds	r2, r2, r3
    40a2:	230f      	movs	r3, #15
    40a4:	18fb      	adds	r3, r7, r3
    40a6:	7819      	ldrb	r1, [r3, #0]
    40a8:	4811      	ldr	r0, [pc, #68]	; (40f0 <udd_ep_trans_in_next+0x180>)
    40aa:	2300      	movs	r3, #0
    40ac:	4c11      	ldr	r4, [pc, #68]	; (40f4 <udd_ep_trans_in_next+0x184>)
    40ae:	47a0      	blx	r4
		return;
    40b0:	e012      	b.n	40d8 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    40b2:	693b      	ldr	r3, [r7, #16]
    40b4:	7c9a      	ldrb	r2, [r3, #18]
    40b6:	2101      	movs	r1, #1
    40b8:	438a      	bics	r2, r1
    40ba:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d009      	beq.n	40d8 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	681c      	ldr	r4, [r3, #0]
    40c8:	693b      	ldr	r3, [r7, #16]
    40ca:	68d9      	ldr	r1, [r3, #12]
    40cc:	2317      	movs	r3, #23
    40ce:	18fb      	adds	r3, r7, r3
    40d0:	781b      	ldrb	r3, [r3, #0]
    40d2:	001a      	movs	r2, r3
    40d4:	2000      	movs	r0, #0
    40d6:	47a0      	blx	r4
	}
}
    40d8:	46bd      	mov	sp, r7
    40da:	b009      	add	sp, #36	; 0x24
    40dc:	bd90      	pop	{r4, r7, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00003f1d 	.word	0x00003f1d
    40e4:	00001fff 	.word	0x00001fff
    40e8:	00010055 	.word	0x00010055
    40ec:	0000fe81 	.word	0x0000fe81
    40f0:	20003d8c 	.word	0x20003d8c
    40f4:	000066c5 	.word	0x000066c5

000040f8 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    40f8:	b5b0      	push	{r4, r5, r7, lr}
    40fa:	b088      	sub	sp, #32
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    4104:	2317      	movs	r3, #23
    4106:	18fb      	adds	r3, r7, r3
    4108:	69ba      	ldr	r2, [r7, #24]
    410a:	7992      	ldrb	r2, [r2, #6]
    410c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    410e:	2317      	movs	r3, #23
    4110:	18fb      	adds	r3, r7, r3
    4112:	781b      	ldrb	r3, [r3, #0]
    4114:	0018      	movs	r0, r3
    4116:	4b66      	ldr	r3, [pc, #408]	; (42b0 <udd_ep_trans_out_next+0x1b8>)
    4118:	4798      	blx	r3
    411a:	0003      	movs	r3, r0
    411c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    411e:	230f      	movs	r3, #15
    4120:	18fb      	adds	r3, r7, r3
    4122:	2217      	movs	r2, #23
    4124:	18ba      	adds	r2, r7, r2
    4126:	7812      	ldrb	r2, [r2, #0]
    4128:	210f      	movs	r1, #15
    412a:	400a      	ands	r2, r1
    412c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    412e:	230c      	movs	r3, #12
    4130:	18fb      	adds	r3, r7, r3
    4132:	693a      	ldr	r2, [r7, #16]
    4134:	8a12      	ldrh	r2, [r2, #16]
    4136:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    4138:	230a      	movs	r3, #10
    413a:	18fb      	adds	r3, r7, r3
    413c:	69ba      	ldr	r2, [r7, #24]
    413e:	8812      	ldrh	r2, [r2, #0]
    4140:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    4142:	693b      	ldr	r3, [r7, #16]
    4144:	7c9b      	ldrb	r3, [r3, #18]
    4146:	2204      	movs	r2, #4
    4148:	4013      	ands	r3, r2
    414a:	b2db      	uxtb	r3, r3
    414c:	2b00      	cmp	r3, #0
    414e:	d019      	beq.n	4184 <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    4150:	693b      	ldr	r3, [r7, #16]
    4152:	685a      	ldr	r2, [r3, #4]
    4154:	693b      	ldr	r3, [r7, #16]
    4156:	68db      	ldr	r3, [r3, #12]
    4158:	18d4      	adds	r4, r2, r3
    415a:	230f      	movs	r3, #15
    415c:	18fb      	adds	r3, r7, r3
    415e:	781b      	ldrb	r3, [r3, #0]
    4160:	3b01      	subs	r3, #1
    4162:	019a      	lsls	r2, r3, #6
    4164:	4b53      	ldr	r3, [pc, #332]	; (42b4 <udd_ep_trans_out_next+0x1bc>)
    4166:	18d5      	adds	r5, r2, r3
    4168:	693b      	ldr	r3, [r7, #16]
    416a:	689a      	ldr	r2, [r3, #8]
    416c:	230c      	movs	r3, #12
    416e:	18fb      	adds	r3, r7, r3
    4170:	8819      	ldrh	r1, [r3, #0]
    4172:	4b51      	ldr	r3, [pc, #324]	; (42b8 <udd_ep_trans_out_next+0x1c0>)
    4174:	0010      	movs	r0, r2
    4176:	4798      	blx	r3
    4178:	000b      	movs	r3, r1
    417a:	001a      	movs	r2, r3
    417c:	0029      	movs	r1, r5
    417e:	0020      	movs	r0, r4
    4180:	4b4e      	ldr	r3, [pc, #312]	; (42bc <udd_ep_trans_out_next+0x1c4>)
    4182:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    4184:	693b      	ldr	r3, [r7, #16]
    4186:	68da      	ldr	r2, [r3, #12]
    4188:	230a      	movs	r3, #10
    418a:	18fb      	adds	r3, r7, r3
    418c:	881b      	ldrh	r3, [r3, #0]
    418e:	18d2      	adds	r2, r2, r3
    4190:	693b      	ldr	r3, [r7, #16]
    4192:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    4194:	693b      	ldr	r3, [r7, #16]
    4196:	68da      	ldr	r2, [r3, #12]
    4198:	693b      	ldr	r3, [r7, #16]
    419a:	689b      	ldr	r3, [r3, #8]
    419c:	429a      	cmp	r2, r3
    419e:	d903      	bls.n	41a8 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    41a0:	693b      	ldr	r3, [r7, #16]
    41a2:	689a      	ldr	r2, [r3, #8]
    41a4:	693b      	ldr	r3, [r7, #16]
    41a6:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    41a8:	69bb      	ldr	r3, [r7, #24]
    41aa:	889b      	ldrh	r3, [r3, #4]
    41ac:	220a      	movs	r2, #10
    41ae:	18ba      	adds	r2, r7, r2
    41b0:	8812      	ldrh	r2, [r2, #0]
    41b2:	429a      	cmp	r2, r3
    41b4:	d165      	bne.n	4282 <udd_ep_trans_out_next+0x18a>
    41b6:	693b      	ldr	r3, [r7, #16]
    41b8:	68da      	ldr	r2, [r3, #12]
    41ba:	693b      	ldr	r3, [r7, #16]
    41bc:	689b      	ldr	r3, [r3, #8]
    41be:	429a      	cmp	r2, r3
    41c0:	d05f      	beq.n	4282 <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    41c2:	693b      	ldr	r3, [r7, #16]
    41c4:	689b      	ldr	r3, [r3, #8]
    41c6:	b299      	uxth	r1, r3
    41c8:	693b      	ldr	r3, [r7, #16]
    41ca:	68db      	ldr	r3, [r3, #12]
    41cc:	b29a      	uxth	r2, r3
    41ce:	231e      	movs	r3, #30
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	1a8a      	subs	r2, r1, r2
    41d4:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    41d6:	231e      	movs	r3, #30
    41d8:	18fb      	adds	r3, r7, r3
    41da:	881b      	ldrh	r3, [r3, #0]
    41dc:	4a38      	ldr	r2, [pc, #224]	; (42c0 <udd_ep_trans_out_next+0x1c8>)
    41de:	4293      	cmp	r3, r2
    41e0:	d90e      	bls.n	4200 <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    41e2:	230c      	movs	r3, #12
    41e4:	18fb      	adds	r3, r7, r3
    41e6:	881a      	ldrh	r2, [r3, #0]
    41e8:	4835      	ldr	r0, [pc, #212]	; (42c0 <udd_ep_trans_out_next+0x1c8>)
    41ea:	4b36      	ldr	r3, [pc, #216]	; (42c4 <udd_ep_trans_out_next+0x1cc>)
    41ec:	0011      	movs	r1, r2
    41ee:	4798      	blx	r3
    41f0:	000b      	movs	r3, r1
    41f2:	b29a      	uxth	r2, r3
    41f4:	231e      	movs	r3, #30
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	4931      	ldr	r1, [pc, #196]	; (42c0 <udd_ep_trans_out_next+0x1c8>)
    41fa:	1a8a      	subs	r2, r1, r2
    41fc:	801a      	strh	r2, [r3, #0]
    41fe:	e011      	b.n	4224 <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    4200:	231e      	movs	r3, #30
    4202:	18fa      	adds	r2, r7, r3
    4204:	230c      	movs	r3, #12
    4206:	18fb      	adds	r3, r7, r3
    4208:	8812      	ldrh	r2, [r2, #0]
    420a:	8819      	ldrh	r1, [r3, #0]
    420c:	4b2a      	ldr	r3, [pc, #168]	; (42b8 <udd_ep_trans_out_next+0x1c0>)
    420e:	0010      	movs	r0, r2
    4210:	4798      	blx	r3
    4212:	000b      	movs	r3, r1
    4214:	b29a      	uxth	r2, r3
    4216:	231e      	movs	r3, #30
    4218:	18fb      	adds	r3, r7, r3
    421a:	211e      	movs	r1, #30
    421c:	1879      	adds	r1, r7, r1
    421e:	8809      	ldrh	r1, [r1, #0]
    4220:	1a8a      	subs	r2, r1, r2
    4222:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    4224:	231e      	movs	r3, #30
    4226:	18fa      	adds	r2, r7, r3
    4228:	230c      	movs	r3, #12
    422a:	18fb      	adds	r3, r7, r3
    422c:	8812      	ldrh	r2, [r2, #0]
    422e:	881b      	ldrh	r3, [r3, #0]
    4230:	429a      	cmp	r2, r3
    4232:	d216      	bcs.n	4262 <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    4234:	693b      	ldr	r3, [r7, #16]
    4236:	7c9a      	ldrb	r2, [r3, #18]
    4238:	2104      	movs	r1, #4
    423a:	430a      	orrs	r2, r1
    423c:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    423e:	230f      	movs	r3, #15
    4240:	18fb      	adds	r3, r7, r3
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	3b01      	subs	r3, #1
    4246:	019a      	lsls	r2, r3, #6
    4248:	4b1a      	ldr	r3, [pc, #104]	; (42b4 <udd_ep_trans_out_next+0x1bc>)
    424a:	18d2      	adds	r2, r2, r3
    424c:	230c      	movs	r3, #12
    424e:	18fb      	adds	r3, r7, r3
    4250:	881c      	ldrh	r4, [r3, #0]
    4252:	230f      	movs	r3, #15
    4254:	18fb      	adds	r3, r7, r3
    4256:	7819      	ldrb	r1, [r3, #0]
    4258:	481b      	ldr	r0, [pc, #108]	; (42c8 <udd_ep_trans_out_next+0x1d0>)
    425a:	0023      	movs	r3, r4
    425c:	4c1b      	ldr	r4, [pc, #108]	; (42cc <udd_ep_trans_out_next+0x1d4>)
    425e:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    4260:	e022      	b.n	42a8 <udd_ep_trans_out_next+0x1b0>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4262:	693b      	ldr	r3, [r7, #16]
    4264:	685a      	ldr	r2, [r3, #4]
    4266:	693b      	ldr	r3, [r7, #16]
    4268:	68db      	ldr	r3, [r3, #12]
    426a:	18d2      	adds	r2, r2, r3
    426c:	231e      	movs	r3, #30
    426e:	18fb      	adds	r3, r7, r3
    4270:	881c      	ldrh	r4, [r3, #0]
    4272:	230f      	movs	r3, #15
    4274:	18fb      	adds	r3, r7, r3
    4276:	7819      	ldrb	r1, [r3, #0]
    4278:	4813      	ldr	r0, [pc, #76]	; (42c8 <udd_ep_trans_out_next+0x1d0>)
    427a:	0023      	movs	r3, r4
    427c:	4c13      	ldr	r4, [pc, #76]	; (42cc <udd_ep_trans_out_next+0x1d4>)
    427e:	47a0      	blx	r4
		return;
    4280:	e012      	b.n	42a8 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    4282:	693b      	ldr	r3, [r7, #16]
    4284:	7c9a      	ldrb	r2, [r3, #18]
    4286:	2101      	movs	r1, #1
    4288:	438a      	bics	r2, r1
    428a:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    428c:	693b      	ldr	r3, [r7, #16]
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	2b00      	cmp	r3, #0
    4292:	d009      	beq.n	42a8 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    4294:	693b      	ldr	r3, [r7, #16]
    4296:	681c      	ldr	r4, [r3, #0]
    4298:	693b      	ldr	r3, [r7, #16]
    429a:	68d9      	ldr	r1, [r3, #12]
    429c:	2317      	movs	r3, #23
    429e:	18fb      	adds	r3, r7, r3
    42a0:	781b      	ldrb	r3, [r3, #0]
    42a2:	001a      	movs	r2, r3
    42a4:	2000      	movs	r0, #0
    42a6:	47a0      	blx	r4
	}
}
    42a8:	46bd      	mov	sp, r7
    42aa:	b008      	add	sp, #32
    42ac:	bdb0      	pop	{r4, r5, r7, pc}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	00003f1d 	.word	0x00003f1d
    42b4:	20003ccc 	.word	0x20003ccc
    42b8:	0000fe81 	.word	0x0000fe81
    42bc:	00012ed1 	.word	0x00012ed1
    42c0:	00001fff 	.word	0x00001fff
    42c4:	00010055 	.word	0x00010055
    42c8:	20003d8c 	.word	0x20003d8c
    42cc:	00006779 	.word	0x00006779

000042d0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b084      	sub	sp, #16
    42d4:	af00      	add	r7, sp, #0
    42d6:	6078      	str	r0, [r7, #4]
    42d8:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    42da:	683b      	ldr	r3, [r7, #0]
    42dc:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    42de:	230b      	movs	r3, #11
    42e0:	18fb      	adds	r3, r7, r3
    42e2:	68fa      	ldr	r2, [r7, #12]
    42e4:	7992      	ldrb	r2, [r2, #6]
    42e6:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    42e8:	230b      	movs	r3, #11
    42ea:	18fb      	adds	r3, r7, r3
    42ec:	781b      	ldrb	r3, [r3, #0]
    42ee:	b25b      	sxtb	r3, r3
    42f0:	2b00      	cmp	r3, #0
    42f2:	da04      	bge.n	42fe <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    42f4:	683b      	ldr	r3, [r7, #0]
    42f6:	0018      	movs	r0, r3
    42f8:	4b05      	ldr	r3, [pc, #20]	; (4310 <udd_ep_transfer_process+0x40>)
    42fa:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    42fc:	e003      	b.n	4306 <udd_ep_transfer_process+0x36>
		udd_ep_trans_out_next(pointer);
    42fe:	683b      	ldr	r3, [r7, #0]
    4300:	0018      	movs	r0, r3
    4302:	4b04      	ldr	r3, [pc, #16]	; (4314 <udd_ep_transfer_process+0x44>)
    4304:	4798      	blx	r3
}
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	46bd      	mov	sp, r7
    430a:	b004      	add	sp, #16
    430c:	bd80      	pop	{r7, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	00003f71 	.word	0x00003f71
    4314:	000040f9 	.word	0x000040f9

00004318 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    4318:	b590      	push	{r4, r7, lr}
    431a:	b085      	sub	sp, #20
    431c:	af00      	add	r7, sp, #0
    431e:	0002      	movs	r2, r0
    4320:	1dfb      	adds	r3, r7, #7
    4322:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    4324:	1dfb      	adds	r3, r7, #7
    4326:	781a      	ldrb	r2, [r3, #0]
    4328:	4b14      	ldr	r3, [pc, #80]	; (437c <udd_ep_abort+0x64>)
    432a:	0011      	movs	r1, r2
    432c:	0018      	movs	r0, r3
    432e:	4b14      	ldr	r3, [pc, #80]	; (4380 <udd_ep_abort+0x68>)
    4330:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    4332:	1dfb      	adds	r3, r7, #7
    4334:	781b      	ldrb	r3, [r3, #0]
    4336:	0018      	movs	r0, r3
    4338:	4b12      	ldr	r3, [pc, #72]	; (4384 <udd_ep_abort+0x6c>)
    433a:	4798      	blx	r3
    433c:	0003      	movs	r3, r0
    433e:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	7c9b      	ldrb	r3, [r3, #18]
    4344:	2201      	movs	r2, #1
    4346:	4013      	ands	r3, r2
    4348:	b2db      	uxtb	r3, r3
    434a:	2b00      	cmp	r3, #0
    434c:	d012      	beq.n	4374 <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	7c9a      	ldrb	r2, [r3, #18]
    4352:	2101      	movs	r1, #1
    4354:	438a      	bics	r2, r1
    4356:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	2b00      	cmp	r3, #0
    435e:	d00a      	beq.n	4376 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	681c      	ldr	r4, [r3, #0]
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	68d9      	ldr	r1, [r3, #12]
    4368:	1dfb      	adds	r3, r7, #7
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	001a      	movs	r2, r3
    436e:	2001      	movs	r0, #1
    4370:	47a0      	blx	r4
    4372:	e000      	b.n	4376 <udd_ep_abort+0x5e>
		return;
    4374:	46c0      	nop			; (mov r8, r8)
	}
}
    4376:	46bd      	mov	sp, r7
    4378:	b005      	add	sp, #20
    437a:	bd90      	pop	{r4, r7, pc}
    437c:	20003d8c 	.word	0x20003d8c
    4380:	00006441 	.word	0x00006441
    4384:	00003f1d 	.word	0x00003f1d

00004388 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    4388:	b580      	push	{r7, lr}
    438a:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1 || SAMR30
	return false;
    438c:	2300      	movs	r3, #0
#endif
}
    438e:	0018      	movs	r0, r3
    4390:	46bd      	mov	sp, r7
    4392:	bd80      	pop	{r7, pc}

00004394 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    4394:	b580      	push	{r7, lr}
    4396:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    4398:	4b03      	ldr	r3, [pc, #12]	; (43a8 <udd_get_frame_number+0x14>)
    439a:	0018      	movs	r0, r3
    439c:	4b03      	ldr	r3, [pc, #12]	; (43ac <udd_get_frame_number+0x18>)
    439e:	4798      	blx	r3
    43a0:	0003      	movs	r3, r0
}
    43a2:	0018      	movs	r0, r3
    43a4:	46bd      	mov	sp, r7
    43a6:	bd80      	pop	{r7, pc}
    43a8:	20003d8c 	.word	0x20003d8c
    43ac:	00003d55 	.word	0x00003d55

000043b0 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    43b0:	b580      	push	{r7, lr}
    43b2:	af00      	add	r7, sp, #0
	return usb_device_get_micro_frame_number(&usb_device);
    43b4:	4b03      	ldr	r3, [pc, #12]	; (43c4 <udd_get_micro_frame_number+0x14>)
    43b6:	0018      	movs	r0, r3
    43b8:	4b03      	ldr	r3, [pc, #12]	; (43c8 <udd_get_micro_frame_number+0x18>)
    43ba:	4798      	blx	r3
    43bc:	0003      	movs	r3, r0
}
    43be:	0018      	movs	r0, r3
    43c0:	46bd      	mov	sp, r7
    43c2:	bd80      	pop	{r7, pc}
    43c4:	20003d8c 	.word	0x20003d8c
    43c8:	00003d71 	.word	0x00003d71

000043cc <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	0002      	movs	r2, r0
    43d4:	1dfb      	adds	r3, r7, #7
    43d6:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    43d8:	2308      	movs	r3, #8
    43da:	18fb      	adds	r3, r7, r3
    43dc:	0018      	movs	r0, r3
    43de:	4b18      	ldr	r3, [pc, #96]	; (4440 <udd_ep_free+0x74>)
    43e0:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    43e2:	230f      	movs	r3, #15
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	1dfa      	adds	r2, r7, #7
    43e8:	7812      	ldrb	r2, [r2, #0]
    43ea:	210f      	movs	r1, #15
    43ec:	400a      	ands	r2, r1
    43ee:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    43f0:	1dfb      	adds	r3, r7, #7
    43f2:	781b      	ldrb	r3, [r3, #0]
    43f4:	0018      	movs	r0, r3
    43f6:	4b13      	ldr	r3, [pc, #76]	; (4444 <udd_ep_free+0x78>)
    43f8:	4798      	blx	r3

	config_ep.ep_address = ep;
    43fa:	2308      	movs	r3, #8
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	1dfa      	adds	r2, r7, #7
    4400:	7812      	ldrb	r2, [r2, #0]
    4402:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    4404:	2308      	movs	r3, #8
    4406:	18fb      	adds	r3, r7, r3
    4408:	2200      	movs	r2, #0
    440a:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    440c:	2308      	movs	r3, #8
    440e:	18fa      	adds	r2, r7, r3
    4410:	4b0d      	ldr	r3, [pc, #52]	; (4448 <udd_ep_free+0x7c>)
    4412:	0011      	movs	r1, r2
    4414:	0018      	movs	r0, r3
    4416:	4b0d      	ldr	r3, [pc, #52]	; (444c <udd_ep_free+0x80>)
    4418:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    441a:	230f      	movs	r3, #15
    441c:	18fb      	adds	r3, r7, r3
    441e:	7819      	ldrb	r1, [r3, #0]
    4420:	4b09      	ldr	r3, [pc, #36]	; (4448 <udd_ep_free+0x7c>)
    4422:	2200      	movs	r2, #0
    4424:	0018      	movs	r0, r3
    4426:	4b0a      	ldr	r3, [pc, #40]	; (4450 <udd_ep_free+0x84>)
    4428:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    442a:	1dfb      	adds	r3, r7, #7
    442c:	7819      	ldrb	r1, [r3, #0]
    442e:	4b06      	ldr	r3, [pc, #24]	; (4448 <udd_ep_free+0x7c>)
    4430:	2200      	movs	r2, #0
    4432:	0018      	movs	r0, r3
    4434:	4b07      	ldr	r3, [pc, #28]	; (4454 <udd_ep_free+0x88>)
    4436:	4798      	blx	r3
}
    4438:	46c0      	nop			; (mov r8, r8)
    443a:	46bd      	mov	sp, r7
    443c:	b004      	add	sp, #16
    443e:	bd80      	pop	{r7, pc}
    4440:	00005f21 	.word	0x00005f21
    4444:	00004319 	.word	0x00004319
    4448:	20003d8c 	.word	0x20003d8c
    444c:	00005f49 	.word	0x00005f49
    4450:	00005b69 	.word	0x00005b69
    4454:	00005d7d 	.word	0x00005d7d

00004458 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    4458:	b590      	push	{r4, r7, lr}
    445a:	b087      	sub	sp, #28
    445c:	af00      	add	r7, sp, #0
    445e:	0004      	movs	r4, r0
    4460:	0008      	movs	r0, r1
    4462:	0011      	movs	r1, r2
    4464:	1dfb      	adds	r3, r7, #7
    4466:	1c22      	adds	r2, r4, #0
    4468:	701a      	strb	r2, [r3, #0]
    446a:	1dbb      	adds	r3, r7, #6
    446c:	1c02      	adds	r2, r0, #0
    446e:	701a      	strb	r2, [r3, #0]
    4470:	1d3b      	adds	r3, r7, #4
    4472:	1c0a      	adds	r2, r1, #0
    4474:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    4476:	230c      	movs	r3, #12
    4478:	18fb      	adds	r3, r7, r3
    447a:	0018      	movs	r0, r3
    447c:	4b58      	ldr	r3, [pc, #352]	; (45e0 <udd_ep_alloc+0x188>)
    447e:	4798      	blx	r3

	config_ep.ep_address = ep;
    4480:	230c      	movs	r3, #12
    4482:	18fb      	adds	r3, r7, r3
    4484:	1dfa      	adds	r2, r7, #7
    4486:	7812      	ldrb	r2, [r2, #0]
    4488:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    448a:	1d3b      	adds	r3, r7, #4
    448c:	881b      	ldrh	r3, [r3, #0]
    448e:	2b08      	cmp	r3, #8
    4490:	d804      	bhi.n	449c <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    4492:	230c      	movs	r3, #12
    4494:	18fb      	adds	r3, r7, r3
    4496:	2200      	movs	r2, #0
    4498:	705a      	strb	r2, [r3, #1]
    449a:	e045      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    449c:	1d3b      	adds	r3, r7, #4
    449e:	881b      	ldrh	r3, [r3, #0]
    44a0:	2b10      	cmp	r3, #16
    44a2:	d804      	bhi.n	44ae <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    44a4:	230c      	movs	r3, #12
    44a6:	18fb      	adds	r3, r7, r3
    44a8:	2201      	movs	r2, #1
    44aa:	705a      	strb	r2, [r3, #1]
    44ac:	e03c      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    44ae:	1d3b      	adds	r3, r7, #4
    44b0:	881b      	ldrh	r3, [r3, #0]
    44b2:	2b20      	cmp	r3, #32
    44b4:	d804      	bhi.n	44c0 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    44b6:	230c      	movs	r3, #12
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	2202      	movs	r2, #2
    44bc:	705a      	strb	r2, [r3, #1]
    44be:	e033      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    44c0:	1d3b      	adds	r3, r7, #4
    44c2:	881b      	ldrh	r3, [r3, #0]
    44c4:	2b40      	cmp	r3, #64	; 0x40
    44c6:	d804      	bhi.n	44d2 <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    44c8:	230c      	movs	r3, #12
    44ca:	18fb      	adds	r3, r7, r3
    44cc:	2203      	movs	r2, #3
    44ce:	705a      	strb	r2, [r3, #1]
    44d0:	e02a      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    44d2:	1d3b      	adds	r3, r7, #4
    44d4:	881b      	ldrh	r3, [r3, #0]
    44d6:	2b80      	cmp	r3, #128	; 0x80
    44d8:	d804      	bhi.n	44e4 <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    44da:	230c      	movs	r3, #12
    44dc:	18fb      	adds	r3, r7, r3
    44de:	2204      	movs	r2, #4
    44e0:	705a      	strb	r2, [r3, #1]
    44e2:	e021      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    44e4:	1d3b      	adds	r3, r7, #4
    44e6:	881a      	ldrh	r2, [r3, #0]
    44e8:	2380      	movs	r3, #128	; 0x80
    44ea:	005b      	lsls	r3, r3, #1
    44ec:	429a      	cmp	r2, r3
    44ee:	d804      	bhi.n	44fa <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    44f0:	230c      	movs	r3, #12
    44f2:	18fb      	adds	r3, r7, r3
    44f4:	2205      	movs	r2, #5
    44f6:	705a      	strb	r2, [r3, #1]
    44f8:	e016      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    44fa:	1d3b      	adds	r3, r7, #4
    44fc:	881a      	ldrh	r2, [r3, #0]
    44fe:	2380      	movs	r3, #128	; 0x80
    4500:	009b      	lsls	r3, r3, #2
    4502:	429a      	cmp	r2, r3
    4504:	d804      	bhi.n	4510 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    4506:	230c      	movs	r3, #12
    4508:	18fb      	adds	r3, r7, r3
    450a:	2206      	movs	r2, #6
    450c:	705a      	strb	r2, [r3, #1]
    450e:	e00b      	b.n	4528 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    4510:	1d3b      	adds	r3, r7, #4
    4512:	881b      	ldrh	r3, [r3, #0]
    4514:	4a33      	ldr	r2, [pc, #204]	; (45e4 <udd_ep_alloc+0x18c>)
    4516:	4293      	cmp	r3, r2
    4518:	d804      	bhi.n	4524 <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    451a:	230c      	movs	r3, #12
    451c:	18fb      	adds	r3, r7, r3
    451e:	2207      	movs	r2, #7
    4520:	705a      	strb	r2, [r3, #1]
    4522:	e001      	b.n	4528 <udd_ep_alloc+0xd0>
	} else {
		return false;
    4524:	2300      	movs	r3, #0
    4526:	e057      	b.n	45d8 <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    4528:	1dfb      	adds	r3, r7, #7
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	0018      	movs	r0, r3
    452e:	4b2e      	ldr	r3, [pc, #184]	; (45e8 <udd_ep_alloc+0x190>)
    4530:	4798      	blx	r3
    4532:	0003      	movs	r3, r0
    4534:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    4536:	697b      	ldr	r3, [r7, #20]
    4538:	1d3a      	adds	r2, r7, #4
    453a:	8812      	ldrh	r2, [r2, #0]
    453c:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    453e:	1dbb      	adds	r3, r7, #6
    4540:	1dba      	adds	r2, r7, #6
    4542:	7812      	ldrb	r2, [r2, #0]
    4544:	2103      	movs	r1, #3
    4546:	400a      	ands	r2, r1
    4548:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    454a:	1dbb      	adds	r3, r7, #6
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	2b01      	cmp	r3, #1
    4550:	d104      	bne.n	455c <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    4552:	230c      	movs	r3, #12
    4554:	18fb      	adds	r3, r7, r3
    4556:	2202      	movs	r2, #2
    4558:	70da      	strb	r2, [r3, #3]
    455a:	e013      	b.n	4584 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    455c:	1dbb      	adds	r3, r7, #6
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	2b02      	cmp	r3, #2
    4562:	d104      	bne.n	456e <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    4564:	230c      	movs	r3, #12
    4566:	18fb      	adds	r3, r7, r3
    4568:	2203      	movs	r2, #3
    456a:	70da      	strb	r2, [r3, #3]
    456c:	e00a      	b.n	4584 <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    456e:	1dbb      	adds	r3, r7, #6
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	2b03      	cmp	r3, #3
    4574:	d104      	bne.n	4580 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    4576:	230c      	movs	r3, #12
    4578:	18fb      	adds	r3, r7, r3
    457a:	2204      	movs	r2, #4
    457c:	70da      	strb	r2, [r3, #3]
    457e:	e001      	b.n	4584 <udd_ep_alloc+0x12c>
	} else {
		return false;
    4580:	2300      	movs	r3, #0
    4582:	e029      	b.n	45d8 <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4584:	2313      	movs	r3, #19
    4586:	18fb      	adds	r3, r7, r3
    4588:	1dfa      	adds	r2, r7, #7
    458a:	7812      	ldrb	r2, [r2, #0]
    458c:	210f      	movs	r1, #15
    458e:	400a      	ands	r2, r1
    4590:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    4592:	230c      	movs	r3, #12
    4594:	18fa      	adds	r2, r7, r3
    4596:	4b15      	ldr	r3, [pc, #84]	; (45ec <udd_ep_alloc+0x194>)
    4598:	0011      	movs	r1, r2
    459a:	0018      	movs	r0, r3
    459c:	4b14      	ldr	r3, [pc, #80]	; (45f0 <udd_ep_alloc+0x198>)
    459e:	4798      	blx	r3
    45a0:	1e03      	subs	r3, r0, #0
    45a2:	d001      	beq.n	45a8 <udd_ep_alloc+0x150>
		return false;
    45a4:	2300      	movs	r3, #0
    45a6:	e017      	b.n	45d8 <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    45a8:	4a12      	ldr	r2, [pc, #72]	; (45f4 <udd_ep_alloc+0x19c>)
    45aa:	2313      	movs	r3, #19
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	7819      	ldrb	r1, [r3, #0]
    45b0:	480e      	ldr	r0, [pc, #56]	; (45ec <udd_ep_alloc+0x194>)
    45b2:	0013      	movs	r3, r2
    45b4:	2200      	movs	r2, #0
    45b6:	4c10      	ldr	r4, [pc, #64]	; (45f8 <udd_ep_alloc+0x1a0>)
    45b8:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    45ba:	1dfb      	adds	r3, r7, #7
    45bc:	7819      	ldrb	r1, [r3, #0]
    45be:	4b0b      	ldr	r3, [pc, #44]	; (45ec <udd_ep_alloc+0x194>)
    45c0:	2200      	movs	r2, #0
    45c2:	0018      	movs	r0, r3
    45c4:	4b0d      	ldr	r3, [pc, #52]	; (45fc <udd_ep_alloc+0x1a4>)
    45c6:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    45c8:	1dfb      	adds	r3, r7, #7
    45ca:	7819      	ldrb	r1, [r3, #0]
    45cc:	4b07      	ldr	r3, [pc, #28]	; (45ec <udd_ep_alloc+0x194>)
    45ce:	2201      	movs	r2, #1
    45d0:	0018      	movs	r0, r3
    45d2:	4b0a      	ldr	r3, [pc, #40]	; (45fc <udd_ep_alloc+0x1a4>)
    45d4:	4798      	blx	r3

	return true;
    45d6:	2301      	movs	r3, #1
}
    45d8:	0018      	movs	r0, r3
    45da:	46bd      	mov	sp, r7
    45dc:	b007      	add	sp, #28
    45de:	bd90      	pop	{r4, r7, pc}
    45e0:	00005f21 	.word	0x00005f21
    45e4:	000003ff 	.word	0x000003ff
    45e8:	00003f1d 	.word	0x00003f1d
    45ec:	20003d8c 	.word	0x20003d8c
    45f0:	00005f49 	.word	0x00005f49
    45f4:	000042d1 	.word	0x000042d1
    45f8:	00005ae9 	.word	0x00005ae9
    45fc:	00005be1 	.word	0x00005be1

00004600 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    4600:	b580      	push	{r7, lr}
    4602:	b082      	sub	sp, #8
    4604:	af00      	add	r7, sp, #0
    4606:	0002      	movs	r2, r0
    4608:	1dfb      	adds	r3, r7, #7
    460a:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    460c:	1dfb      	adds	r3, r7, #7
    460e:	781a      	ldrb	r2, [r3, #0]
    4610:	4b04      	ldr	r3, [pc, #16]	; (4624 <udd_ep_is_halted+0x24>)
    4612:	0011      	movs	r1, r2
    4614:	0018      	movs	r0, r3
    4616:	4b04      	ldr	r3, [pc, #16]	; (4628 <udd_ep_is_halted+0x28>)
    4618:	4798      	blx	r3
    461a:	0003      	movs	r3, r0
}
    461c:	0018      	movs	r0, r3
    461e:	46bd      	mov	sp, r7
    4620:	b002      	add	sp, #8
    4622:	bd80      	pop	{r7, pc}
    4624:	20003d8c 	.word	0x20003d8c
    4628:	000064c9 	.word	0x000064c9

0000462c <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    462c:	b580      	push	{r7, lr}
    462e:	b084      	sub	sp, #16
    4630:	af00      	add	r7, sp, #0
    4632:	0002      	movs	r2, r0
    4634:	1dfb      	adds	r3, r7, #7
    4636:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4638:	230f      	movs	r3, #15
    463a:	18fb      	adds	r3, r7, r3
    463c:	1dfa      	adds	r2, r7, #7
    463e:	7812      	ldrb	r2, [r2, #0]
    4640:	210f      	movs	r1, #15
    4642:	400a      	ands	r2, r1
    4644:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    4646:	230f      	movs	r3, #15
    4648:	18fb      	adds	r3, r7, r3
    464a:	781b      	ldrb	r3, [r3, #0]
    464c:	2b03      	cmp	r3, #3
    464e:	d901      	bls.n	4654 <udd_ep_set_halt+0x28>
		return false;
    4650:	2300      	movs	r3, #0
    4652:	e00c      	b.n	466e <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    4654:	1dfb      	adds	r3, r7, #7
    4656:	781a      	ldrb	r2, [r3, #0]
    4658:	4b07      	ldr	r3, [pc, #28]	; (4678 <udd_ep_set_halt+0x4c>)
    465a:	0011      	movs	r1, r2
    465c:	0018      	movs	r0, r3
    465e:	4b07      	ldr	r3, [pc, #28]	; (467c <udd_ep_set_halt+0x50>)
    4660:	4798      	blx	r3

	udd_ep_abort(ep);
    4662:	1dfb      	adds	r3, r7, #7
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	0018      	movs	r0, r3
    4668:	4b05      	ldr	r3, [pc, #20]	; (4680 <udd_ep_set_halt+0x54>)
    466a:	4798      	blx	r3
	return true;
    466c:	2301      	movs	r3, #1
}
    466e:	0018      	movs	r0, r3
    4670:	46bd      	mov	sp, r7
    4672:	b004      	add	sp, #16
    4674:	bd80      	pop	{r7, pc}
    4676:	46c0      	nop			; (mov r8, r8)
    4678:	20003d8c 	.word	0x20003d8c
    467c:	0000653d 	.word	0x0000653d
    4680:	00004319 	.word	0x00004319

00004684 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	0002      	movs	r2, r0
    468c:	1dfb      	adds	r3, r7, #7
    468e:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4690:	230f      	movs	r3, #15
    4692:	18fb      	adds	r3, r7, r3
    4694:	1dfa      	adds	r2, r7, #7
    4696:	7812      	ldrb	r2, [r2, #0]
    4698:	210f      	movs	r1, #15
    469a:	400a      	ands	r2, r1
    469c:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    469e:	230f      	movs	r3, #15
    46a0:	18fb      	adds	r3, r7, r3
    46a2:	781b      	ldrb	r3, [r3, #0]
    46a4:	2b03      	cmp	r3, #3
    46a6:	d901      	bls.n	46ac <udd_ep_clear_halt+0x28>
		return false;
    46a8:	2300      	movs	r3, #0
    46aa:	e01d      	b.n	46e8 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    46ac:	1dfb      	adds	r3, r7, #7
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	0018      	movs	r0, r3
    46b2:	4b0f      	ldr	r3, [pc, #60]	; (46f0 <udd_ep_clear_halt+0x6c>)
    46b4:	4798      	blx	r3
    46b6:	0003      	movs	r3, r0
    46b8:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    46ba:	1dfb      	adds	r3, r7, #7
    46bc:	781a      	ldrb	r2, [r3, #0]
    46be:	4b0d      	ldr	r3, [pc, #52]	; (46f4 <udd_ep_clear_halt+0x70>)
    46c0:	0011      	movs	r1, r2
    46c2:	0018      	movs	r0, r3
    46c4:	4b0c      	ldr	r3, [pc, #48]	; (46f8 <udd_ep_clear_halt+0x74>)
    46c6:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    46c8:	68bb      	ldr	r3, [r7, #8]
    46ca:	7c9b      	ldrb	r3, [r3, #18]
    46cc:	2201      	movs	r2, #1
    46ce:	4013      	ands	r3, r2
    46d0:	b2db      	uxtb	r3, r3
    46d2:	2b00      	cmp	r3, #0
    46d4:	d007      	beq.n	46e6 <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    46d6:	68bb      	ldr	r3, [r7, #8]
    46d8:	7c9a      	ldrb	r2, [r3, #18]
    46da:	2101      	movs	r1, #1
    46dc:	438a      	bics	r2, r1
    46de:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    46e0:	68bb      	ldr	r3, [r7, #8]
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	4798      	blx	r3
	}

	return true;
    46e6:	2301      	movs	r3, #1
}
    46e8:	0018      	movs	r0, r3
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}
    46f0:	00003f1d 	.word	0x00003f1d
    46f4:	20003d8c 	.word	0x20003d8c
    46f8:	00006599 	.word	0x00006599

000046fc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4700:	4b07      	ldr	r3, [pc, #28]	; (4720 <udd_ctrl_stall_data+0x24>)
    4702:	2205      	movs	r2, #5
    4704:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    4706:	4b07      	ldr	r3, [pc, #28]	; (4724 <udd_ctrl_stall_data+0x28>)
    4708:	2180      	movs	r1, #128	; 0x80
    470a:	0018      	movs	r0, r3
    470c:	4b06      	ldr	r3, [pc, #24]	; (4728 <udd_ctrl_stall_data+0x2c>)
    470e:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    4710:	4b04      	ldr	r3, [pc, #16]	; (4724 <udd_ctrl_stall_data+0x28>)
    4712:	2100      	movs	r1, #0
    4714:	0018      	movs	r0, r3
    4716:	4b05      	ldr	r3, [pc, #20]	; (472c <udd_ctrl_stall_data+0x30>)
    4718:	4798      	blx	r3
}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	46bd      	mov	sp, r7
    471e:	bd80      	pop	{r7, pc}
    4720:	200007aa 	.word	0x200007aa
    4724:	20003d8c 	.word	0x20003d8c
    4728:	0000653d 	.word	0x0000653d
    472c:	00006599 	.word	0x00006599

00004730 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    4730:	b590      	push	{r4, r7, lr}
    4732:	b089      	sub	sp, #36	; 0x24
    4734:	af00      	add	r7, sp, #0
    4736:	60ba      	str	r2, [r7, #8]
    4738:	607b      	str	r3, [r7, #4]
    473a:	230f      	movs	r3, #15
    473c:	18fb      	adds	r3, r7, r3
    473e:	1c02      	adds	r2, r0, #0
    4740:	701a      	strb	r2, [r3, #0]
    4742:	230e      	movs	r3, #14
    4744:	18fb      	adds	r3, r7, r3
    4746:	1c0a      	adds	r2, r1, #0
    4748:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    474a:	231d      	movs	r3, #29
    474c:	18fb      	adds	r3, r7, r3
    474e:	220f      	movs	r2, #15
    4750:	18ba      	adds	r2, r7, r2
    4752:	7812      	ldrb	r2, [r2, #0]
    4754:	210f      	movs	r1, #15
    4756:	400a      	ands	r2, r1
    4758:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    475a:	231d      	movs	r3, #29
    475c:	18fb      	adds	r3, r7, r3
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	2b03      	cmp	r3, #3
    4762:	d807      	bhi.n	4774 <udd_ep_run+0x44>
    4764:	230f      	movs	r3, #15
    4766:	18fb      	adds	r3, r7, r3
    4768:	781b      	ldrb	r3, [r3, #0]
    476a:	0018      	movs	r0, r3
    476c:	4b9f      	ldr	r3, [pc, #636]	; (49ec <udd_ep_run+0x2bc>)
    476e:	4798      	blx	r3
    4770:	1e03      	subs	r3, r0, #0
    4772:	d001      	beq.n	4778 <udd_ep_run+0x48>
		return false;
    4774:	2300      	movs	r3, #0
    4776:	e134      	b.n	49e2 <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    4778:	230f      	movs	r3, #15
    477a:	18fb      	adds	r3, r7, r3
    477c:	781b      	ldrb	r3, [r3, #0]
    477e:	0018      	movs	r0, r3
    4780:	4b9b      	ldr	r3, [pc, #620]	; (49f0 <udd_ep_run+0x2c0>)
    4782:	4798      	blx	r3
    4784:	0003      	movs	r3, r0
    4786:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    4788:	4b9a      	ldr	r3, [pc, #616]	; (49f4 <udd_ep_run+0x2c4>)
    478a:	4798      	blx	r3
    478c:	0003      	movs	r3, r0
    478e:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    4790:	69bb      	ldr	r3, [r7, #24]
    4792:	7c9b      	ldrb	r3, [r3, #18]
    4794:	2201      	movs	r2, #1
    4796:	4013      	ands	r3, r2
    4798:	b2db      	uxtb	r3, r3
    479a:	2b00      	cmp	r3, #0
    479c:	d005      	beq.n	47aa <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    479e:	697b      	ldr	r3, [r7, #20]
    47a0:	0018      	movs	r0, r3
    47a2:	4b95      	ldr	r3, [pc, #596]	; (49f8 <udd_ep_run+0x2c8>)
    47a4:	4798      	blx	r3
		return false; /* Job already on going */
    47a6:	2300      	movs	r3, #0
    47a8:	e11b      	b.n	49e2 <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    47aa:	69bb      	ldr	r3, [r7, #24]
    47ac:	7c9a      	ldrb	r2, [r3, #18]
    47ae:	2101      	movs	r1, #1
    47b0:	430a      	orrs	r2, r1
    47b2:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    47b4:	697b      	ldr	r3, [r7, #20]
    47b6:	0018      	movs	r0, r3
    47b8:	4b8f      	ldr	r3, [pc, #572]	; (49f8 <udd_ep_run+0x2c8>)
    47ba:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    47bc:	69bb      	ldr	r3, [r7, #24]
    47be:	68ba      	ldr	r2, [r7, #8]
    47c0:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    47c2:	69bb      	ldr	r3, [r7, #24]
    47c4:	687a      	ldr	r2, [r7, #4]
    47c6:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    47c8:	69bb      	ldr	r3, [r7, #24]
    47ca:	2200      	movs	r2, #0
    47cc:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    47ce:	69bb      	ldr	r3, [r7, #24]
    47d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    47d2:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    47d4:	69bb      	ldr	r3, [r7, #24]
    47d6:	220e      	movs	r2, #14
    47d8:	18ba      	adds	r2, r7, r2
    47da:	7812      	ldrb	r2, [r2, #0]
    47dc:	2101      	movs	r1, #1
    47de:	400a      	ands	r2, r1
    47e0:	1890      	adds	r0, r2, r2
    47e2:	7c9a      	ldrb	r2, [r3, #18]
    47e4:	2102      	movs	r1, #2
    47e6:	438a      	bics	r2, r1
    47e8:	1c11      	adds	r1, r2, #0
    47ea:	1c02      	adds	r2, r0, #0
    47ec:	430a      	orrs	r2, r1
    47ee:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    47f0:	69bb      	ldr	r3, [r7, #24]
    47f2:	7c9a      	ldrb	r2, [r3, #18]
    47f4:	2104      	movs	r1, #4
    47f6:	438a      	bics	r2, r1
    47f8:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    47fa:	230f      	movs	r3, #15
    47fc:	18fb      	adds	r3, r7, r3
    47fe:	781b      	ldrb	r3, [r3, #0]
    4800:	b25b      	sxtb	r3, r3
    4802:	2b00      	cmp	r3, #0
    4804:	db00      	blt.n	4808 <udd_ep_run+0xd8>
    4806:	e078      	b.n	48fa <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    4808:	69bb      	ldr	r3, [r7, #24]
    480a:	689b      	ldr	r3, [r3, #8]
    480c:	2b00      	cmp	r3, #0
    480e:	d03f      	beq.n	4890 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    4810:	69bb      	ldr	r3, [r7, #24]
    4812:	689a      	ldr	r2, [r3, #8]
    4814:	231e      	movs	r3, #30
    4816:	18fb      	adds	r3, r7, r3
    4818:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    481a:	231e      	movs	r3, #30
    481c:	18fb      	adds	r3, r7, r3
    481e:	881b      	ldrh	r3, [r3, #0]
    4820:	4a76      	ldr	r2, [pc, #472]	; (49fc <udd_ep_run+0x2cc>)
    4822:	4293      	cmp	r3, r2
    4824:	d90d      	bls.n	4842 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    4826:	69bb      	ldr	r3, [r7, #24]
    4828:	8a1b      	ldrh	r3, [r3, #16]
    482a:	0019      	movs	r1, r3
    482c:	4a73      	ldr	r2, [pc, #460]	; (49fc <udd_ep_run+0x2cc>)
    482e:	4b74      	ldr	r3, [pc, #464]	; (4a00 <udd_ep_run+0x2d0>)
    4830:	0010      	movs	r0, r2
    4832:	4798      	blx	r3
    4834:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4836:	b29a      	uxth	r2, r3
    4838:	231e      	movs	r3, #30
    483a:	18fb      	adds	r3, r7, r3
    483c:	496f      	ldr	r1, [pc, #444]	; (49fc <udd_ep_run+0x2cc>)
    483e:	1a8a      	subs	r2, r1, r2
    4840:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    4842:	69bb      	ldr	r3, [r7, #24]
    4844:	7c9b      	ldrb	r3, [r3, #18]
    4846:	2202      	movs	r2, #2
    4848:	4013      	ands	r3, r2
    484a:	b2db      	uxtb	r3, r3
    484c:	2b00      	cmp	r3, #0
    484e:	d00d      	beq.n	486c <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    4850:	69bb      	ldr	r3, [r7, #24]
    4852:	8a19      	ldrh	r1, [r3, #16]
    4854:	231e      	movs	r3, #30
    4856:	18fb      	adds	r3, r7, r3
    4858:	881a      	ldrh	r2, [r3, #0]
    485a:	4b6a      	ldr	r3, [pc, #424]	; (4a04 <udd_ep_run+0x2d4>)
    485c:	0010      	movs	r0, r2
    485e:	4798      	blx	r3
    4860:	000b      	movs	r3, r1
    4862:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    4864:	2b00      	cmp	r3, #0
    4866:	d101      	bne.n	486c <udd_ep_run+0x13c>
    4868:	2301      	movs	r3, #1
    486a:	e000      	b.n	486e <udd_ep_run+0x13e>
    486c:	2300      	movs	r3, #0
    486e:	b2db      	uxtb	r3, r3
    4870:	1c1a      	adds	r2, r3, #0
    4872:	2301      	movs	r3, #1
    4874:	4013      	ands	r3, r2
    4876:	b2da      	uxtb	r2, r3
    4878:	69bb      	ldr	r3, [r7, #24]
    487a:	2101      	movs	r1, #1
    487c:	400a      	ands	r2, r1
    487e:	1890      	adds	r0, r2, r2
    4880:	7c9a      	ldrb	r2, [r3, #18]
    4882:	2102      	movs	r1, #2
    4884:	438a      	bics	r2, r1
    4886:	1c11      	adds	r1, r2, #0
    4888:	1c02      	adds	r2, r0, #0
    488a:	430a      	orrs	r2, r1
    488c:	749a      	strb	r2, [r3, #18]
    488e:	e023      	b.n	48d8 <udd_ep_run+0x1a8>
		} else if (true == ptr_job->b_shortpacket) {
    4890:	69bb      	ldr	r3, [r7, #24]
    4892:	7c9b      	ldrb	r3, [r3, #18]
    4894:	2202      	movs	r2, #2
    4896:	4013      	ands	r3, r2
    4898:	b2db      	uxtb	r3, r3
    489a:	2b00      	cmp	r3, #0
    489c:	d009      	beq.n	48b2 <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    489e:	69bb      	ldr	r3, [r7, #24]
    48a0:	7c9a      	ldrb	r2, [r3, #18]
    48a2:	2102      	movs	r1, #2
    48a4:	438a      	bics	r2, r1
    48a6:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    48a8:	231e      	movs	r3, #30
    48aa:	18fb      	adds	r3, r7, r3
    48ac:	2200      	movs	r2, #0
    48ae:	801a      	strh	r2, [r3, #0]
    48b0:	e012      	b.n	48d8 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    48b2:	69bb      	ldr	r3, [r7, #24]
    48b4:	7c9a      	ldrb	r2, [r3, #18]
    48b6:	2101      	movs	r1, #1
    48b8:	438a      	bics	r2, r1
    48ba:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    48bc:	69bb      	ldr	r3, [r7, #24]
    48be:	681b      	ldr	r3, [r3, #0]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d007      	beq.n	48d4 <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    48c4:	69bb      	ldr	r3, [r7, #24]
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	220f      	movs	r2, #15
    48ca:	18ba      	adds	r2, r7, r2
    48cc:	7812      	ldrb	r2, [r2, #0]
    48ce:	2100      	movs	r1, #0
    48d0:	2000      	movs	r0, #0
    48d2:	4798      	blx	r3
			}
			return true;
    48d4:	2301      	movs	r3, #1
    48d6:	e084      	b.n	49e2 <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    48d8:	69bb      	ldr	r3, [r7, #24]
    48da:	685a      	ldr	r2, [r3, #4]
    48dc:	231e      	movs	r3, #30
    48de:	18fb      	adds	r3, r7, r3
    48e0:	881c      	ldrh	r4, [r3, #0]
    48e2:	231d      	movs	r3, #29
    48e4:	18fb      	adds	r3, r7, r3
    48e6:	7819      	ldrb	r1, [r3, #0]
    48e8:	4847      	ldr	r0, [pc, #284]	; (4a08 <udd_ep_run+0x2d8>)
    48ea:	0023      	movs	r3, r4
    48ec:	4c47      	ldr	r4, [pc, #284]	; (4a0c <udd_ep_run+0x2dc>)
    48ee:	47a0      	blx	r4
    48f0:	0003      	movs	r3, r0
		return (STATUS_OK ==
    48f2:	425a      	negs	r2, r3
    48f4:	4153      	adcs	r3, r2
    48f6:	b2db      	uxtb	r3, r3
    48f8:	e073      	b.n	49e2 <udd_ep_run+0x2b2>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    48fa:	69bb      	ldr	r3, [r7, #24]
    48fc:	689b      	ldr	r3, [r3, #8]
    48fe:	2b00      	cmp	r3, #0
    4900:	d05d      	beq.n	49be <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    4902:	69bb      	ldr	r3, [r7, #24]
    4904:	689a      	ldr	r2, [r3, #8]
    4906:	231e      	movs	r3, #30
    4908:	18fb      	adds	r3, r7, r3
    490a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    490c:	231e      	movs	r3, #30
    490e:	18fb      	adds	r3, r7, r3
    4910:	881b      	ldrh	r3, [r3, #0]
    4912:	4a3a      	ldr	r2, [pc, #232]	; (49fc <udd_ep_run+0x2cc>)
    4914:	4293      	cmp	r3, r2
    4916:	d90e      	bls.n	4936 <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    4918:	69bb      	ldr	r3, [r7, #24]
    491a:	8a1b      	ldrh	r3, [r3, #16]
    491c:	0019      	movs	r1, r3
    491e:	4a37      	ldr	r2, [pc, #220]	; (49fc <udd_ep_run+0x2cc>)
    4920:	4b37      	ldr	r3, [pc, #220]	; (4a00 <udd_ep_run+0x2d0>)
    4922:	0010      	movs	r0, r2
    4924:	4798      	blx	r3
    4926:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4928:	b29a      	uxth	r2, r3
    492a:	231e      	movs	r3, #30
    492c:	18fb      	adds	r3, r7, r3
    492e:	4933      	ldr	r1, [pc, #204]	; (49fc <udd_ep_run+0x2cc>)
    4930:	1a8a      	subs	r2, r1, r2
    4932:	801a      	strh	r2, [r3, #0]
    4934:	e010      	b.n	4958 <udd_ep_run+0x228>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    4936:	69bb      	ldr	r3, [r7, #24]
    4938:	8a19      	ldrh	r1, [r3, #16]
    493a:	231e      	movs	r3, #30
    493c:	18fb      	adds	r3, r7, r3
    493e:	881a      	ldrh	r2, [r3, #0]
    4940:	4b30      	ldr	r3, [pc, #192]	; (4a04 <udd_ep_run+0x2d4>)
    4942:	0010      	movs	r0, r2
    4944:	4798      	blx	r3
    4946:	000b      	movs	r3, r1
    4948:	b29a      	uxth	r2, r3
    494a:	231e      	movs	r3, #30
    494c:	18fb      	adds	r3, r7, r3
    494e:	211e      	movs	r1, #30
    4950:	1879      	adds	r1, r7, r1
    4952:	8809      	ldrh	r1, [r1, #0]
    4954:	1a8a      	subs	r2, r1, r2
    4956:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    4958:	69bb      	ldr	r3, [r7, #24]
    495a:	8a1b      	ldrh	r3, [r3, #16]
    495c:	221e      	movs	r2, #30
    495e:	18ba      	adds	r2, r7, r2
    4960:	8812      	ldrh	r2, [r2, #0]
    4962:	429a      	cmp	r2, r3
    4964:	d21a      	bcs.n	499c <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    4966:	69bb      	ldr	r3, [r7, #24]
    4968:	7c9a      	ldrb	r2, [r3, #18]
    496a:	2104      	movs	r1, #4
    496c:	430a      	orrs	r2, r1
    496e:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    4970:	231d      	movs	r3, #29
    4972:	18fb      	adds	r3, r7, r3
    4974:	781b      	ldrb	r3, [r3, #0]
    4976:	3b01      	subs	r3, #1
    4978:	019a      	lsls	r2, r3, #6
    497a:	4b25      	ldr	r3, [pc, #148]	; (4a10 <udd_ep_run+0x2e0>)
    497c:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    497e:	69bb      	ldr	r3, [r7, #24]
    4980:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    4982:	001c      	movs	r4, r3
    4984:	231d      	movs	r3, #29
    4986:	18fb      	adds	r3, r7, r3
    4988:	7819      	ldrb	r1, [r3, #0]
    498a:	481f      	ldr	r0, [pc, #124]	; (4a08 <udd_ep_run+0x2d8>)
    498c:	0023      	movs	r3, r4
    498e:	4c21      	ldr	r4, [pc, #132]	; (4a14 <udd_ep_run+0x2e4>)
    4990:	47a0      	blx	r4
    4992:	0003      	movs	r3, r0
				return (STATUS_OK ==
    4994:	425a      	negs	r2, r3
    4996:	4153      	adcs	r3, r2
    4998:	b2db      	uxtb	r3, r3
    499a:	e022      	b.n	49e2 <udd_ep_run+0x2b2>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    499c:	69bb      	ldr	r3, [r7, #24]
    499e:	685a      	ldr	r2, [r3, #4]
    49a0:	231e      	movs	r3, #30
    49a2:	18fb      	adds	r3, r7, r3
    49a4:	881c      	ldrh	r4, [r3, #0]
    49a6:	231d      	movs	r3, #29
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	7819      	ldrb	r1, [r3, #0]
    49ac:	4816      	ldr	r0, [pc, #88]	; (4a08 <udd_ep_run+0x2d8>)
    49ae:	0023      	movs	r3, r4
    49b0:	4c18      	ldr	r4, [pc, #96]	; (4a14 <udd_ep_run+0x2e4>)
    49b2:	47a0      	blx	r4
    49b4:	0003      	movs	r3, r0
				return (STATUS_OK ==
    49b6:	425a      	negs	r2, r3
    49b8:	4153      	adcs	r3, r2
    49ba:	b2db      	uxtb	r3, r3
    49bc:	e011      	b.n	49e2 <udd_ep_run+0x2b2>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    49be:	69bb      	ldr	r3, [r7, #24]
    49c0:	7c9a      	ldrb	r2, [r3, #18]
    49c2:	2101      	movs	r1, #1
    49c4:	438a      	bics	r2, r1
    49c6:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    49c8:	69bb      	ldr	r3, [r7, #24]
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d007      	beq.n	49e0 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    49d0:	69bb      	ldr	r3, [r7, #24]
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	220f      	movs	r2, #15
    49d6:	18ba      	adds	r2, r7, r2
    49d8:	7812      	ldrb	r2, [r2, #0]
    49da:	2100      	movs	r1, #0
    49dc:	2000      	movs	r0, #0
    49de:	4798      	blx	r3
			}
			return true;
    49e0:	2301      	movs	r3, #1
		}
	}
}
    49e2:	0018      	movs	r0, r3
    49e4:	46bd      	mov	sp, r7
    49e6:	b009      	add	sp, #36	; 0x24
    49e8:	bd90      	pop	{r4, r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	00004601 	.word	0x00004601
    49f0:	00003f1d 	.word	0x00003f1d
    49f4:	00003c75 	.word	0x00003c75
    49f8:	00003cbd 	.word	0x00003cbd
    49fc:	00001fff 	.word	0x00001fff
    4a00:	00010055 	.word	0x00010055
    4a04:	0000fe81 	.word	0x0000fe81
    4a08:	20003d8c 	.word	0x20003d8c
    4a0c:	000066c5 	.word	0x000066c5
    4a10:	20003ccc 	.word	0x20003ccc
    4a14:	00006779 	.word	0x00006779

00004a18 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b082      	sub	sp, #8
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	0002      	movs	r2, r0
    4a20:	1dfb      	adds	r3, r7, #7
    4a22:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    4a24:	1dfb      	adds	r3, r7, #7
    4a26:	781a      	ldrb	r2, [r3, #0]
    4a28:	4b04      	ldr	r3, [pc, #16]	; (4a3c <udd_set_address+0x24>)
    4a2a:	0011      	movs	r1, r2
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b04      	ldr	r3, [pc, #16]	; (4a40 <udd_set_address+0x28>)
    4a30:	4798      	blx	r3
}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	46bd      	mov	sp, r7
    4a36:	b002      	add	sp, #8
    4a38:	bd80      	pop	{r7, pc}
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	20003d8c 	.word	0x20003d8c
    4a40:	00003d2d 	.word	0x00003d2d

00004a44 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    4a44:	b580      	push	{r7, lr}
    4a46:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    4a48:	4b03      	ldr	r3, [pc, #12]	; (4a58 <udd_getaddress+0x14>)
    4a4a:	0018      	movs	r0, r3
    4a4c:	4b03      	ldr	r3, [pc, #12]	; (4a5c <udd_getaddress+0x18>)
    4a4e:	4798      	blx	r3
    4a50:	0003      	movs	r3, r0
}
    4a52:	0018      	movs	r0, r3
    4a54:	46bd      	mov	sp, r7
    4a56:	bd80      	pop	{r7, pc}
    4a58:	20003d8c 	.word	0x20003d8c
    4a5c:	00003d11 	.word	0x00003d11

00004a60 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    4a60:	b580      	push	{r7, lr}
    4a62:	b082      	sub	sp, #8
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
    4a68:	000a      	movs	r2, r1
    4a6a:	1cbb      	adds	r3, r7, #2
    4a6c:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    4a6e:	4b05      	ldr	r3, [pc, #20]	; (4a84 <udd_set_setup_payload+0x24>)
    4a70:	687a      	ldr	r2, [r7, #4]
    4a72:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    4a74:	4b03      	ldr	r3, [pc, #12]	; (4a84 <udd_set_setup_payload+0x24>)
    4a76:	1cba      	adds	r2, r7, #2
    4a78:	8812      	ldrh	r2, [r2, #0]
    4a7a:	819a      	strh	r2, [r3, #12]
}
    4a7c:	46c0      	nop			; (mov r8, r8)
    4a7e:	46bd      	mov	sp, r7
    4a80:	b002      	add	sp, #8
    4a82:	bd80      	pop	{r7, pc}
    4a84:	20003ef4 	.word	0x20003ef4

00004a88 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    4a8c:	4b17      	ldr	r3, [pc, #92]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4a8e:	781a      	ldrb	r2, [r3, #0]
    4a90:	4b17      	ldr	r3, [pc, #92]	; (4af0 <udd_ctrl_fetch_ram+0x68>)
    4a92:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    4a94:	4b15      	ldr	r3, [pc, #84]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4a96:	785a      	ldrb	r2, [r3, #1]
    4a98:	4b15      	ldr	r3, [pc, #84]	; (4af0 <udd_ctrl_fetch_ram+0x68>)
    4a9a:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    4a9c:	4b13      	ldr	r3, [pc, #76]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4a9e:	78db      	ldrb	r3, [r3, #3]
    4aa0:	b29b      	uxth	r3, r3
    4aa2:	021b      	lsls	r3, r3, #8
    4aa4:	b29a      	uxth	r2, r3
    4aa6:	4b11      	ldr	r3, [pc, #68]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4aa8:	789b      	ldrb	r3, [r3, #2]
    4aaa:	b29b      	uxth	r3, r3
    4aac:	18d3      	adds	r3, r2, r3
    4aae:	b29a      	uxth	r2, r3
    4ab0:	4b0f      	ldr	r3, [pc, #60]	; (4af0 <udd_ctrl_fetch_ram+0x68>)
    4ab2:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    4ab4:	4b0d      	ldr	r3, [pc, #52]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4ab6:	795b      	ldrb	r3, [r3, #5]
    4ab8:	b29b      	uxth	r3, r3
    4aba:	021b      	lsls	r3, r3, #8
    4abc:	b29a      	uxth	r2, r3
    4abe:	4b0b      	ldr	r3, [pc, #44]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4ac0:	791b      	ldrb	r3, [r3, #4]
    4ac2:	b29b      	uxth	r3, r3
    4ac4:	18d3      	adds	r3, r2, r3
    4ac6:	b29a      	uxth	r2, r3
    4ac8:	4b09      	ldr	r3, [pc, #36]	; (4af0 <udd_ctrl_fetch_ram+0x68>)
    4aca:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    4acc:	4b07      	ldr	r3, [pc, #28]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4ace:	79db      	ldrb	r3, [r3, #7]
    4ad0:	b29b      	uxth	r3, r3
    4ad2:	021b      	lsls	r3, r3, #8
    4ad4:	b29a      	uxth	r2, r3
    4ad6:	4b05      	ldr	r3, [pc, #20]	; (4aec <udd_ctrl_fetch_ram+0x64>)
    4ad8:	799b      	ldrb	r3, [r3, #6]
    4ada:	b29b      	uxth	r3, r3
    4adc:	18d3      	adds	r3, r2, r3
    4ade:	b29a      	uxth	r2, r3
    4ae0:	4b03      	ldr	r3, [pc, #12]	; (4af0 <udd_ctrl_fetch_ram+0x68>)
    4ae2:	80da      	strh	r2, [r3, #6]
}
    4ae4:	46c0      	nop			; (mov r8, r8)
    4ae6:	46bd      	mov	sp, r7
    4ae8:	bd80      	pop	{r7, pc}
    4aea:	46c0      	nop			; (mov r8, r8)
    4aec:	20003f0c 	.word	0x20003f0c
    4af0:	20003ef4 	.word	0x20003ef4

00004af4 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    4af4:	b5b0      	push	{r4, r5, r7, lr}
    4af6:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4af8:	4b09      	ldr	r3, [pc, #36]	; (4b20 <udd_ctrl_send_zlp_in+0x2c>)
    4afa:	2203      	movs	r2, #3
    4afc:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4afe:	4a09      	ldr	r2, [pc, #36]	; (4b24 <udd_ctrl_send_zlp_in+0x30>)
    4b00:	4b09      	ldr	r3, [pc, #36]	; (4b28 <udd_ctrl_send_zlp_in+0x34>)
    4b02:	0011      	movs	r1, r2
    4b04:	0018      	movs	r0, r3
    4b06:	4b09      	ldr	r3, [pc, #36]	; (4b2c <udd_ctrl_send_zlp_in+0x38>)
    4b08:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    4b0a:	4b09      	ldr	r3, [pc, #36]	; (4b30 <udd_ctrl_send_zlp_in+0x3c>)
    4b0c:	689a      	ldr	r2, [r3, #8]
    4b0e:	4806      	ldr	r0, [pc, #24]	; (4b28 <udd_ctrl_send_zlp_in+0x34>)
    4b10:	2300      	movs	r3, #0
    4b12:	2100      	movs	r1, #0
    4b14:	4c07      	ldr	r4, [pc, #28]	; (4b34 <udd_ctrl_send_zlp_in+0x40>)
    4b16:	47a0      	blx	r4
}
    4b18:	46c0      	nop			; (mov r8, r8)
    4b1a:	46bd      	mov	sp, r7
    4b1c:	bdb0      	pop	{r4, r5, r7, pc}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	200007aa 	.word	0x200007aa
    4b24:	20003f0c 	.word	0x20003f0c
    4b28:	20003d8c 	.word	0x20003d8c
    4b2c:	00006829 	.word	0x00006829
    4b30:	20003ef4 	.word	0x20003ef4
    4b34:	000066c5 	.word	0x000066c5

00004b38 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    4b38:	b590      	push	{r4, r7, lr}
    4b3a:	b083      	sub	sp, #12
    4b3c:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4b3e:	4b30      	ldr	r3, [pc, #192]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4b40:	8999      	ldrh	r1, [r3, #12]
    4b42:	4b30      	ldr	r3, [pc, #192]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4b44:	881a      	ldrh	r2, [r3, #0]
    4b46:	1dbb      	adds	r3, r7, #6
    4b48:	1a8a      	subs	r2, r1, r2
    4b4a:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    4b4c:	1dbb      	adds	r3, r7, #6
    4b4e:	881b      	ldrh	r3, [r3, #0]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d130      	bne.n	4bb6 <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    4b54:	4b2c      	ldr	r3, [pc, #176]	; (4c08 <udd_ctrl_in_sent+0xd0>)
    4b56:	881a      	ldrh	r2, [r3, #0]
    4b58:	4b2a      	ldr	r3, [pc, #168]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4b5a:	881b      	ldrh	r3, [r3, #0]
    4b5c:	18d3      	adds	r3, r2, r3
    4b5e:	b29a      	uxth	r2, r3
    4b60:	4b29      	ldr	r3, [pc, #164]	; (4c08 <udd_ctrl_in_sent+0xd0>)
    4b62:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    4b64:	4b26      	ldr	r3, [pc, #152]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4b66:	88da      	ldrh	r2, [r3, #6]
    4b68:	4b27      	ldr	r3, [pc, #156]	; (4c08 <udd_ctrl_in_sent+0xd0>)
    4b6a:	881b      	ldrh	r3, [r3, #0]
    4b6c:	429a      	cmp	r2, r3
    4b6e:	d003      	beq.n	4b78 <udd_ctrl_in_sent+0x40>
    4b70:	4b26      	ldr	r3, [pc, #152]	; (4c0c <udd_ctrl_in_sent+0xd4>)
    4b72:	781b      	ldrb	r3, [r3, #0]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d009      	beq.n	4b8c <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4b78:	4b25      	ldr	r3, [pc, #148]	; (4c10 <udd_ctrl_in_sent+0xd8>)
    4b7a:	2204      	movs	r2, #4
    4b7c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4b7e:	4a25      	ldr	r2, [pc, #148]	; (4c14 <udd_ctrl_in_sent+0xdc>)
    4b80:	4b25      	ldr	r3, [pc, #148]	; (4c18 <udd_ctrl_in_sent+0xe0>)
    4b82:	0011      	movs	r1, r2
    4b84:	0018      	movs	r0, r3
    4b86:	4b25      	ldr	r3, [pc, #148]	; (4c1c <udd_ctrl_in_sent+0xe4>)
    4b88:	4798      	blx	r3
			return;
    4b8a:	e035      	b.n	4bf8 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    4b8c:	4b1c      	ldr	r3, [pc, #112]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4b8e:	695b      	ldr	r3, [r3, #20]
    4b90:	2b00      	cmp	r3, #0
    4b92:	d010      	beq.n	4bb6 <udd_ctrl_in_sent+0x7e>
    4b94:	4b1a      	ldr	r3, [pc, #104]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4b96:	695b      	ldr	r3, [r3, #20]
    4b98:	4798      	blx	r3
    4b9a:	0003      	movs	r3, r0
    4b9c:	001a      	movs	r2, r3
    4b9e:	2301      	movs	r3, #1
    4ba0:	4053      	eors	r3, r2
    4ba2:	b2db      	uxtb	r3, r3
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d106      	bne.n	4bb6 <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    4ba8:	4b16      	ldr	r3, [pc, #88]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4baa:	2200      	movs	r2, #0
    4bac:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    4bae:	1dbb      	adds	r3, r7, #6
    4bb0:	4a13      	ldr	r2, [pc, #76]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4bb2:	8992      	ldrh	r2, [r2, #12]
    4bb4:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    4bb6:	1dbb      	adds	r3, r7, #6
    4bb8:	881b      	ldrh	r3, [r3, #0]
    4bba:	2b3f      	cmp	r3, #63	; 0x3f
    4bbc:	d906      	bls.n	4bcc <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    4bbe:	1dbb      	adds	r3, r7, #6
    4bc0:	2240      	movs	r2, #64	; 0x40
    4bc2:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    4bc4:	4b11      	ldr	r3, [pc, #68]	; (4c0c <udd_ctrl_in_sent+0xd4>)
    4bc6:	2200      	movs	r2, #0
    4bc8:	701a      	strb	r2, [r3, #0]
    4bca:	e002      	b.n	4bd2 <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    4bcc:	4b0f      	ldr	r3, [pc, #60]	; (4c0c <udd_ctrl_in_sent+0xd4>)
    4bce:	2201      	movs	r2, #1
    4bd0:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    4bd2:	4b0b      	ldr	r3, [pc, #44]	; (4c00 <udd_ctrl_in_sent+0xc8>)
    4bd4:	689b      	ldr	r3, [r3, #8]
    4bd6:	4a0b      	ldr	r2, [pc, #44]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4bd8:	8812      	ldrh	r2, [r2, #0]
    4bda:	189a      	adds	r2, r3, r2
    4bdc:	1dbb      	adds	r3, r7, #6
    4bde:	881b      	ldrh	r3, [r3, #0]
    4be0:	480d      	ldr	r0, [pc, #52]	; (4c18 <udd_ctrl_in_sent+0xe0>)
    4be2:	2100      	movs	r1, #0
    4be4:	4c0e      	ldr	r4, [pc, #56]	; (4c20 <udd_ctrl_in_sent+0xe8>)
    4be6:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    4be8:	4b06      	ldr	r3, [pc, #24]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4bea:	881a      	ldrh	r2, [r3, #0]
    4bec:	1dbb      	adds	r3, r7, #6
    4bee:	881b      	ldrh	r3, [r3, #0]
    4bf0:	18d3      	adds	r3, r2, r3
    4bf2:	b29a      	uxth	r2, r3
    4bf4:	4b03      	ldr	r3, [pc, #12]	; (4c04 <udd_ctrl_in_sent+0xcc>)
    4bf6:	801a      	strh	r2, [r3, #0]
}
    4bf8:	46bd      	mov	sp, r7
    4bfa:	b003      	add	sp, #12
    4bfc:	bd90      	pop	{r4, r7, pc}
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	20003ef4 	.word	0x20003ef4
    4c04:	200007ae 	.word	0x200007ae
    4c08:	200007ac 	.word	0x200007ac
    4c0c:	20000829 	.word	0x20000829
    4c10:	200007aa 	.word	0x200007aa
    4c14:	20003f0c 	.word	0x20003f0c
    4c18:	20003d8c 	.word	0x20003d8c
    4c1c:	00006829 	.word	0x00006829
    4c20:	000066c5 	.word	0x000066c5

00004c24 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    4c24:	b590      	push	{r4, r7, lr}
    4c26:	b085      	sub	sp, #20
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    4c30:	230e      	movs	r3, #14
    4c32:	18fb      	adds	r3, r7, r3
    4c34:	68ba      	ldr	r2, [r7, #8]
    4c36:	8812      	ldrh	r2, [r2, #0]
    4c38:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    4c3a:	4b45      	ldr	r3, [pc, #276]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4c3c:	899b      	ldrh	r3, [r3, #12]
    4c3e:	001a      	movs	r2, r3
    4c40:	4b44      	ldr	r3, [pc, #272]	; (4d54 <udd_ctrl_out_received+0x130>)
    4c42:	881b      	ldrh	r3, [r3, #0]
    4c44:	0019      	movs	r1, r3
    4c46:	230e      	movs	r3, #14
    4c48:	18fb      	adds	r3, r7, r3
    4c4a:	881b      	ldrh	r3, [r3, #0]
    4c4c:	18cb      	adds	r3, r1, r3
    4c4e:	429a      	cmp	r2, r3
    4c50:	da07      	bge.n	4c62 <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4c52:	4b3f      	ldr	r3, [pc, #252]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4c54:	8999      	ldrh	r1, [r3, #12]
    4c56:	4b3f      	ldr	r3, [pc, #252]	; (4d54 <udd_ctrl_out_received+0x130>)
    4c58:	881a      	ldrh	r2, [r3, #0]
    4c5a:	230e      	movs	r3, #14
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	1a8a      	subs	r2, r1, r2
    4c60:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    4c62:	4b3b      	ldr	r3, [pc, #236]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4c64:	689b      	ldr	r3, [r3, #8]
    4c66:	4a3b      	ldr	r2, [pc, #236]	; (4d54 <udd_ctrl_out_received+0x130>)
    4c68:	8812      	ldrh	r2, [r2, #0]
    4c6a:	1898      	adds	r0, r3, r2
    4c6c:	230e      	movs	r3, #14
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	881a      	ldrh	r2, [r3, #0]
    4c72:	4b39      	ldr	r3, [pc, #228]	; (4d58 <udd_ctrl_out_received+0x134>)
    4c74:	0019      	movs	r1, r3
    4c76:	4b39      	ldr	r3, [pc, #228]	; (4d5c <udd_ctrl_out_received+0x138>)
    4c78:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    4c7a:	4b36      	ldr	r3, [pc, #216]	; (4d54 <udd_ctrl_out_received+0x130>)
    4c7c:	881a      	ldrh	r2, [r3, #0]
    4c7e:	230e      	movs	r3, #14
    4c80:	18fb      	adds	r3, r7, r3
    4c82:	881b      	ldrh	r3, [r3, #0]
    4c84:	18d3      	adds	r3, r2, r3
    4c86:	b29a      	uxth	r2, r3
    4c88:	4b32      	ldr	r3, [pc, #200]	; (4d54 <udd_ctrl_out_received+0x130>)
    4c8a:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    4c8c:	230e      	movs	r3, #14
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	881b      	ldrh	r3, [r3, #0]
    4c92:	2b40      	cmp	r3, #64	; 0x40
    4c94:	d10a      	bne.n	4cac <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    4c96:	4b2e      	ldr	r3, [pc, #184]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4c98:	88db      	ldrh	r3, [r3, #6]
    4c9a:	001a      	movs	r2, r3
    4c9c:	4b30      	ldr	r3, [pc, #192]	; (4d60 <udd_ctrl_out_received+0x13c>)
    4c9e:	881b      	ldrh	r3, [r3, #0]
    4ca0:	0019      	movs	r1, r3
    4ca2:	4b2c      	ldr	r3, [pc, #176]	; (4d54 <udd_ctrl_out_received+0x130>)
    4ca4:	881b      	ldrh	r3, [r3, #0]
    4ca6:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    4ca8:	429a      	cmp	r2, r3
    4caa:	dc1b      	bgt.n	4ce4 <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    4cac:	4b29      	ldr	r3, [pc, #164]	; (4d54 <udd_ctrl_out_received+0x130>)
    4cae:	881a      	ldrh	r2, [r3, #0]
    4cb0:	4b27      	ldr	r3, [pc, #156]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4cb2:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    4cb4:	4b26      	ldr	r3, [pc, #152]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4cb6:	695b      	ldr	r3, [r3, #20]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d010      	beq.n	4cde <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    4cbc:	4b24      	ldr	r3, [pc, #144]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4cbe:	695b      	ldr	r3, [r3, #20]
    4cc0:	4798      	blx	r3
    4cc2:	0003      	movs	r3, r0
    4cc4:	001a      	movs	r2, r3
    4cc6:	2301      	movs	r3, #1
    4cc8:	4053      	eors	r3, r2
    4cca:	b2db      	uxtb	r3, r3
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d006      	beq.n	4cde <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4cd0:	4b24      	ldr	r3, [pc, #144]	; (4d64 <udd_ctrl_out_received+0x140>)
    4cd2:	2205      	movs	r2, #5
    4cd4:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    4cd6:	2000      	movs	r0, #0
    4cd8:	4b23      	ldr	r3, [pc, #140]	; (4d68 <udd_ctrl_out_received+0x144>)
    4cda:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    4cdc:	e035      	b.n	4d4a <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    4cde:	4b23      	ldr	r3, [pc, #140]	; (4d6c <udd_ctrl_out_received+0x148>)
    4ce0:	4798      	blx	r3
		return;
    4ce2:	e032      	b.n	4d4a <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    4ce4:	4b1a      	ldr	r3, [pc, #104]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4ce6:	899a      	ldrh	r2, [r3, #12]
    4ce8:	4b1a      	ldr	r3, [pc, #104]	; (4d54 <udd_ctrl_out_received+0x130>)
    4cea:	881b      	ldrh	r3, [r3, #0]
    4cec:	429a      	cmp	r2, r3
    4cee:	d126      	bne.n	4d3e <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    4cf0:	4b17      	ldr	r3, [pc, #92]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4cf2:	695b      	ldr	r3, [r3, #20]
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	d106      	bne.n	4d06 <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4cf8:	4b1a      	ldr	r3, [pc, #104]	; (4d64 <udd_ctrl_out_received+0x140>)
    4cfa:	2205      	movs	r2, #5
    4cfc:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    4cfe:	2000      	movs	r0, #0
    4d00:	4b19      	ldr	r3, [pc, #100]	; (4d68 <udd_ctrl_out_received+0x144>)
    4d02:	4798      	blx	r3
			return;
    4d04:	e021      	b.n	4d4a <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    4d06:	4b12      	ldr	r3, [pc, #72]	; (4d50 <udd_ctrl_out_received+0x12c>)
    4d08:	695b      	ldr	r3, [r3, #20]
    4d0a:	4798      	blx	r3
    4d0c:	0003      	movs	r3, r0
    4d0e:	001a      	movs	r2, r3
    4d10:	2301      	movs	r3, #1
    4d12:	4053      	eors	r3, r2
    4d14:	b2db      	uxtb	r3, r3
    4d16:	2b00      	cmp	r3, #0
    4d18:	d006      	beq.n	4d28 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4d1a:	4b12      	ldr	r3, [pc, #72]	; (4d64 <udd_ctrl_out_received+0x140>)
    4d1c:	2205      	movs	r2, #5
    4d1e:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    4d20:	2000      	movs	r0, #0
    4d22:	4b11      	ldr	r3, [pc, #68]	; (4d68 <udd_ctrl_out_received+0x144>)
    4d24:	4798      	blx	r3
			return;
    4d26:	e010      	b.n	4d4a <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    4d28:	4b0d      	ldr	r3, [pc, #52]	; (4d60 <udd_ctrl_out_received+0x13c>)
    4d2a:	881a      	ldrh	r2, [r3, #0]
    4d2c:	4b09      	ldr	r3, [pc, #36]	; (4d54 <udd_ctrl_out_received+0x130>)
    4d2e:	881b      	ldrh	r3, [r3, #0]
    4d30:	18d3      	adds	r3, r2, r3
    4d32:	b29a      	uxth	r2, r3
    4d34:	4b0a      	ldr	r3, [pc, #40]	; (4d60 <udd_ctrl_out_received+0x13c>)
    4d36:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    4d38:	4b06      	ldr	r3, [pc, #24]	; (4d54 <udd_ctrl_out_received+0x130>)
    4d3a:	2200      	movs	r2, #0
    4d3c:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4d3e:	4a06      	ldr	r2, [pc, #24]	; (4d58 <udd_ctrl_out_received+0x134>)
    4d40:	480b      	ldr	r0, [pc, #44]	; (4d70 <udd_ctrl_out_received+0x14c>)
    4d42:	2340      	movs	r3, #64	; 0x40
    4d44:	2100      	movs	r1, #0
    4d46:	4c0b      	ldr	r4, [pc, #44]	; (4d74 <udd_ctrl_out_received+0x150>)
    4d48:	47a0      	blx	r4
}
    4d4a:	46bd      	mov	sp, r7
    4d4c:	b005      	add	sp, #20
    4d4e:	bd90      	pop	{r4, r7, pc}
    4d50:	20003ef4 	.word	0x20003ef4
    4d54:	200007ae 	.word	0x200007ae
    4d58:	20003f0c 	.word	0x20003f0c
    4d5c:	00012ed1 	.word	0x00012ed1
    4d60:	200007ac 	.word	0x200007ac
    4d64:	200007aa 	.word	0x200007aa
    4d68:	0000462d 	.word	0x0000462d
    4d6c:	00004af5 	.word	0x00004af5
    4d70:	20003d8c 	.word	0x20003d8c
    4d74:	00006779 	.word	0x00006779

00004d78 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    4d78:	b590      	push	{r4, r7, lr}
    4d7a:	b085      	sub	sp, #20
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4d82:	683b      	ldr	r3, [r7, #0]
    4d84:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4d86:	4b29      	ldr	r3, [pc, #164]	; (4e2c <_usb_ep0_on_setup+0xb4>)
    4d88:	781b      	ldrb	r3, [r3, #0]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d009      	beq.n	4da2 <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    4d8e:	4b28      	ldr	r3, [pc, #160]	; (4e30 <_usb_ep0_on_setup+0xb8>)
    4d90:	691b      	ldr	r3, [r3, #16]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d002      	beq.n	4d9c <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    4d96:	4b26      	ldr	r3, [pc, #152]	; (4e30 <_usb_ep0_on_setup+0xb8>)
    4d98:	691b      	ldr	r3, [r3, #16]
    4d9a:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    4d9c:	4b23      	ldr	r3, [pc, #140]	; (4e2c <_usb_ep0_on_setup+0xb4>)
    4d9e:	2200      	movs	r2, #0
    4da0:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    4da2:	68fb      	ldr	r3, [r7, #12]
    4da4:	881b      	ldrh	r3, [r3, #0]
    4da6:	2b08      	cmp	r3, #8
    4da8:	d002      	beq.n	4db0 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    4daa:	4b22      	ldr	r3, [pc, #136]	; (4e34 <_usb_ep0_on_setup+0xbc>)
    4dac:	4798      	blx	r3
		return;
    4dae:	e03a      	b.n	4e26 <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    4db0:	4b21      	ldr	r3, [pc, #132]	; (4e38 <_usb_ep0_on_setup+0xc0>)
    4db2:	4798      	blx	r3
		if (false == udc_process_setup()) {
    4db4:	4b21      	ldr	r3, [pc, #132]	; (4e3c <_usb_ep0_on_setup+0xc4>)
    4db6:	4798      	blx	r3
    4db8:	0003      	movs	r3, r0
    4dba:	001a      	movs	r2, r3
    4dbc:	2301      	movs	r3, #1
    4dbe:	4053      	eors	r3, r2
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d002      	beq.n	4dcc <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    4dc6:	4b1b      	ldr	r3, [pc, #108]	; (4e34 <_usb_ep0_on_setup+0xbc>)
    4dc8:	4798      	blx	r3
			return;
    4dca:	e02c      	b.n	4e26 <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    4dcc:	4b18      	ldr	r3, [pc, #96]	; (4e30 <_usb_ep0_on_setup+0xb8>)
    4dce:	781b      	ldrb	r3, [r3, #0]
    4dd0:	b25b      	sxtb	r3, r3
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	da11      	bge.n	4dfa <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    4dd6:	4b1a      	ldr	r3, [pc, #104]	; (4e40 <_usb_ep0_on_setup+0xc8>)
    4dd8:	2200      	movs	r2, #0
    4dda:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    4ddc:	4b19      	ldr	r3, [pc, #100]	; (4e44 <_usb_ep0_on_setup+0xcc>)
    4dde:	2200      	movs	r2, #0
    4de0:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    4de2:	4b12      	ldr	r3, [pc, #72]	; (4e2c <_usb_ep0_on_setup+0xb4>)
    4de4:	2202      	movs	r2, #2
    4de6:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4de8:	4a17      	ldr	r2, [pc, #92]	; (4e48 <_usb_ep0_on_setup+0xd0>)
    4dea:	4818      	ldr	r0, [pc, #96]	; (4e4c <_usb_ep0_on_setup+0xd4>)
    4dec:	2340      	movs	r3, #64	; 0x40
    4dee:	2100      	movs	r1, #0
    4df0:	4c17      	ldr	r4, [pc, #92]	; (4e50 <_usb_ep0_on_setup+0xd8>)
    4df2:	47a0      	blx	r4
			udd_ctrl_in_sent();
    4df4:	4b17      	ldr	r3, [pc, #92]	; (4e54 <_usb_ep0_on_setup+0xdc>)
    4df6:	4798      	blx	r3
    4df8:	e015      	b.n	4e26 <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    4dfa:	4b0d      	ldr	r3, [pc, #52]	; (4e30 <_usb_ep0_on_setup+0xb8>)
    4dfc:	88db      	ldrh	r3, [r3, #6]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d102      	bne.n	4e08 <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    4e02:	4b15      	ldr	r3, [pc, #84]	; (4e58 <_usb_ep0_on_setup+0xe0>)
    4e04:	4798      	blx	r3
				return;
    4e06:	e00e      	b.n	4e26 <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    4e08:	4b0d      	ldr	r3, [pc, #52]	; (4e40 <_usb_ep0_on_setup+0xc8>)
    4e0a:	2200      	movs	r2, #0
    4e0c:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    4e0e:	4b0d      	ldr	r3, [pc, #52]	; (4e44 <_usb_ep0_on_setup+0xcc>)
    4e10:	2200      	movs	r2, #0
    4e12:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    4e14:	4b05      	ldr	r3, [pc, #20]	; (4e2c <_usb_ep0_on_setup+0xb4>)
    4e16:	2201      	movs	r2, #1
    4e18:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4e1a:	4a0b      	ldr	r2, [pc, #44]	; (4e48 <_usb_ep0_on_setup+0xd0>)
    4e1c:	480b      	ldr	r0, [pc, #44]	; (4e4c <_usb_ep0_on_setup+0xd4>)
    4e1e:	2340      	movs	r3, #64	; 0x40
    4e20:	2100      	movs	r1, #0
    4e22:	4c0b      	ldr	r4, [pc, #44]	; (4e50 <_usb_ep0_on_setup+0xd8>)
    4e24:	47a0      	blx	r4
			}
		}
	}
}
    4e26:	46bd      	mov	sp, r7
    4e28:	b005      	add	sp, #20
    4e2a:	bd90      	pop	{r4, r7, pc}
    4e2c:	200007aa 	.word	0x200007aa
    4e30:	20003ef4 	.word	0x20003ef4
    4e34:	000046fd 	.word	0x000046fd
    4e38:	00004a89 	.word	0x00004a89
    4e3c:	0000198d 	.word	0x0000198d
    4e40:	200007ac 	.word	0x200007ac
    4e44:	200007ae 	.word	0x200007ae
    4e48:	20003f0c 	.word	0x20003f0c
    4e4c:	20003d8c 	.word	0x20003d8c
    4e50:	00006779 	.word	0x00006779
    4e54:	00004b39 	.word	0x00004b39
    4e58:	00004af5 	.word	0x00004af5

00004e5c <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b084      	sub	sp, #16
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    4e68:	4b0a      	ldr	r3, [pc, #40]	; (4e94 <udd_ctrl_underflow+0x38>)
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	2b01      	cmp	r3, #1
    4e6e:	d102      	bne.n	4e76 <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    4e70:	4b09      	ldr	r3, [pc, #36]	; (4e98 <udd_ctrl_underflow+0x3c>)
    4e72:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    4e74:	e00a      	b.n	4e8c <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    4e76:	4b07      	ldr	r3, [pc, #28]	; (4e94 <udd_ctrl_underflow+0x38>)
    4e78:	781b      	ldrb	r3, [r3, #0]
    4e7a:	2b04      	cmp	r3, #4
    4e7c:	d106      	bne.n	4e8c <udd_ctrl_underflow+0x30>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    4e7e:	68fb      	ldr	r3, [r7, #12]
    4e80:	799a      	ldrb	r2, [r3, #6]
    4e82:	4b06      	ldr	r3, [pc, #24]	; (4e9c <udd_ctrl_underflow+0x40>)
    4e84:	0011      	movs	r1, r2
    4e86:	0018      	movs	r0, r3
    4e88:	4b05      	ldr	r3, [pc, #20]	; (4ea0 <udd_ctrl_underflow+0x44>)
    4e8a:	4798      	blx	r3
}
    4e8c:	46c0      	nop			; (mov r8, r8)
    4e8e:	46bd      	mov	sp, r7
    4e90:	b004      	add	sp, #16
    4e92:	bd80      	pop	{r7, pc}
    4e94:	200007aa 	.word	0x200007aa
    4e98:	00004af5 	.word	0x00004af5
    4e9c:	20003d8c 	.word	0x20003d8c
    4ea0:	0000653d 	.word	0x0000653d

00004ea4 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b084      	sub	sp, #16
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4eb0:	4b0b      	ldr	r3, [pc, #44]	; (4ee0 <udd_ctrl_overflow+0x3c>)
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	2b02      	cmp	r3, #2
    4eb6:	d103      	bne.n	4ec0 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4eb8:	4b09      	ldr	r3, [pc, #36]	; (4ee0 <udd_ctrl_overflow+0x3c>)
    4eba:	2204      	movs	r2, #4
    4ebc:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    4ebe:	e00a      	b.n	4ed6 <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4ec0:	4b07      	ldr	r3, [pc, #28]	; (4ee0 <udd_ctrl_overflow+0x3c>)
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	2b03      	cmp	r3, #3
    4ec6:	d106      	bne.n	4ed6 <udd_ctrl_overflow+0x32>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    4ec8:	68fb      	ldr	r3, [r7, #12]
    4eca:	799a      	ldrb	r2, [r3, #6]
    4ecc:	4b05      	ldr	r3, [pc, #20]	; (4ee4 <udd_ctrl_overflow+0x40>)
    4ece:	0011      	movs	r1, r2
    4ed0:	0018      	movs	r0, r3
    4ed2:	4b05      	ldr	r3, [pc, #20]	; (4ee8 <udd_ctrl_overflow+0x44>)
    4ed4:	4798      	blx	r3
}
    4ed6:	46c0      	nop			; (mov r8, r8)
    4ed8:	46bd      	mov	sp, r7
    4eda:	b004      	add	sp, #16
    4edc:	bd80      	pop	{r7, pc}
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	200007aa 	.word	0x200007aa
    4ee4:	20003d8c 	.word	0x20003d8c
    4ee8:	0000653d 	.word	0x0000653d

00004eec <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    4eec:	b580      	push	{r7, lr}
    4eee:	b084      	sub	sp, #16
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	6078      	str	r0, [r7, #4]
    4ef4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    4ef6:	683b      	ldr	r3, [r7, #0]
    4ef8:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	799b      	ldrb	r3, [r3, #6]
    4efe:	b25b      	sxtb	r3, r3
    4f00:	2b00      	cmp	r3, #0
    4f02:	da04      	bge.n	4f0e <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    4f04:	683b      	ldr	r3, [r7, #0]
    4f06:	0018      	movs	r0, r3
    4f08:	4b05      	ldr	r3, [pc, #20]	; (4f20 <_usb_ep0_on_tansfer_fail+0x34>)
    4f0a:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    4f0c:	e003      	b.n	4f16 <_usb_ep0_on_tansfer_fail+0x2a>
		udd_ctrl_overflow(pointer);
    4f0e:	683b      	ldr	r3, [r7, #0]
    4f10:	0018      	movs	r0, r3
    4f12:	4b04      	ldr	r3, [pc, #16]	; (4f24 <_usb_ep0_on_tansfer_fail+0x38>)
    4f14:	4798      	blx	r3
}
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	46bd      	mov	sp, r7
    4f1a:	b004      	add	sp, #16
    4f1c:	bd80      	pop	{r7, pc}
    4f1e:	46c0      	nop			; (mov r8, r8)
    4f20:	00004e5d 	.word	0x00004e5d
    4f24:	00004ea5 	.word	0x00004ea5

00004f28 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	6078      	str	r0, [r7, #4]
    4f30:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    4f32:	4b0f      	ldr	r3, [pc, #60]	; (4f70 <_usb_ep0_on_tansfer_ok+0x48>)
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	2b01      	cmp	r3, #1
    4f38:	d104      	bne.n	4f44 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    4f3a:	683b      	ldr	r3, [r7, #0]
    4f3c:	0018      	movs	r0, r3
    4f3e:	4b0d      	ldr	r3, [pc, #52]	; (4f74 <_usb_ep0_on_tansfer_ok+0x4c>)
    4f40:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    4f42:	e010      	b.n	4f66 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    4f44:	4b0a      	ldr	r3, [pc, #40]	; (4f70 <_usb_ep0_on_tansfer_ok+0x48>)
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	2b02      	cmp	r3, #2
    4f4a:	d102      	bne.n	4f52 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    4f4c:	4b0a      	ldr	r3, [pc, #40]	; (4f78 <_usb_ep0_on_tansfer_ok+0x50>)
    4f4e:	4798      	blx	r3
}
    4f50:	e009      	b.n	4f66 <_usb_ep0_on_tansfer_ok+0x3e>
			if (NULL != udd_g_ctrlreq.callback) {
    4f52:	4b0a      	ldr	r3, [pc, #40]	; (4f7c <_usb_ep0_on_tansfer_ok+0x54>)
    4f54:	691b      	ldr	r3, [r3, #16]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d002      	beq.n	4f60 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    4f5a:	4b08      	ldr	r3, [pc, #32]	; (4f7c <_usb_ep0_on_tansfer_ok+0x54>)
    4f5c:	691b      	ldr	r3, [r3, #16]
    4f5e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    4f60:	4b03      	ldr	r3, [pc, #12]	; (4f70 <_usb_ep0_on_tansfer_ok+0x48>)
    4f62:	2200      	movs	r2, #0
    4f64:	701a      	strb	r2, [r3, #0]
}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	46bd      	mov	sp, r7
    4f6a:	b002      	add	sp, #8
    4f6c:	bd80      	pop	{r7, pc}
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	200007aa 	.word	0x200007aa
    4f74:	00004c25 	.word	0x00004c25
    4f78:	00004b39 	.word	0x00004b39
    4f7c:	20003ef4 	.word	0x20003ef4

00004f80 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    4f80:	b590      	push	{r4, r7, lr}
    4f82:	b085      	sub	sp, #20
    4f84:	af00      	add	r7, sp, #0
    4f86:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    4f88:	230c      	movs	r3, #12
    4f8a:	18fb      	adds	r3, r7, r3
    4f8c:	0018      	movs	r0, r3
    4f8e:	4b21      	ldr	r3, [pc, #132]	; (5014 <udd_ctrl_ep_enable+0x94>)
    4f90:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    4f92:	230c      	movs	r3, #12
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	2203      	movs	r2, #3
    4f98:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    4f9a:	230c      	movs	r3, #12
    4f9c:	18fa      	adds	r2, r7, r3
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	0011      	movs	r1, r2
    4fa2:	0018      	movs	r0, r3
    4fa4:	4b1c      	ldr	r3, [pc, #112]	; (5018 <udd_ctrl_ep_enable+0x98>)
    4fa6:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    4fa8:	4a1c      	ldr	r2, [pc, #112]	; (501c <udd_ctrl_ep_enable+0x9c>)
    4faa:	687b      	ldr	r3, [r7, #4]
    4fac:	0011      	movs	r1, r2
    4fae:	0018      	movs	r0, r3
    4fb0:	4b1b      	ldr	r3, [pc, #108]	; (5020 <udd_ctrl_ep_enable+0xa0>)
    4fb2:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    4fb4:	4b1b      	ldr	r3, [pc, #108]	; (5024 <udd_ctrl_ep_enable+0xa4>)
    4fb6:	6878      	ldr	r0, [r7, #4]
    4fb8:	2202      	movs	r2, #2
    4fba:	2100      	movs	r1, #0
    4fbc:	4c1a      	ldr	r4, [pc, #104]	; (5028 <udd_ctrl_ep_enable+0xa8>)
    4fbe:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    4fc0:	4b1a      	ldr	r3, [pc, #104]	; (502c <udd_ctrl_ep_enable+0xac>)
    4fc2:	6878      	ldr	r0, [r7, #4]
    4fc4:	2200      	movs	r2, #0
    4fc6:	2100      	movs	r1, #0
    4fc8:	4c17      	ldr	r4, [pc, #92]	; (5028 <udd_ctrl_ep_enable+0xa8>)
    4fca:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    4fcc:	4b18      	ldr	r3, [pc, #96]	; (5030 <udd_ctrl_ep_enable+0xb0>)
    4fce:	6878      	ldr	r0, [r7, #4]
    4fd0:	2201      	movs	r2, #1
    4fd2:	2100      	movs	r1, #0
    4fd4:	4c14      	ldr	r4, [pc, #80]	; (5028 <udd_ctrl_ep_enable+0xa8>)
    4fd6:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	2202      	movs	r2, #2
    4fdc:	2100      	movs	r1, #0
    4fde:	0018      	movs	r0, r3
    4fe0:	4b14      	ldr	r3, [pc, #80]	; (5034 <udd_ctrl_ep_enable+0xb4>)
    4fe2:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	2200      	movs	r2, #0
    4fe8:	2100      	movs	r1, #0
    4fea:	0018      	movs	r0, r3
    4fec:	4b11      	ldr	r3, [pc, #68]	; (5034 <udd_ctrl_ep_enable+0xb4>)
    4fee:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	2201      	movs	r2, #1
    4ff4:	2100      	movs	r1, #0
    4ff6:	0018      	movs	r0, r3
    4ff8:	4b0e      	ldr	r3, [pc, #56]	; (5034 <udd_ctrl_ep_enable+0xb4>)
    4ffa:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	2101      	movs	r1, #1
    5000:	0018      	movs	r0, r3
    5002:	4b0d      	ldr	r3, [pc, #52]	; (5038 <udd_ctrl_ep_enable+0xb8>)
    5004:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    5006:	4b0d      	ldr	r3, [pc, #52]	; (503c <udd_ctrl_ep_enable+0xbc>)
    5008:	2200      	movs	r2, #0
    500a:	701a      	strb	r2, [r3, #0]
}
    500c:	46c0      	nop			; (mov r8, r8)
    500e:	46bd      	mov	sp, r7
    5010:	b005      	add	sp, #20
    5012:	bd90      	pop	{r4, r7, pc}
    5014:	00005f21 	.word	0x00005f21
    5018:	00005f49 	.word	0x00005f49
    501c:	20003f0c 	.word	0x20003f0c
    5020:	00006829 	.word	0x00006829
    5024:	00004d79 	.word	0x00004d79
    5028:	00005ae9 	.word	0x00005ae9
    502c:	00004f29 	.word	0x00004f29
    5030:	00004eed 	.word	0x00004eed
    5034:	00005be1 	.word	0x00005be1
    5038:	00003d89 	.word	0x00003d89
    503c:	200007aa 	.word	0x200007aa

00005040 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
    5048:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    504a:	4b08      	ldr	r3, [pc, #32]	; (506c <_usb_on_suspend+0x2c>)
    504c:	2104      	movs	r1, #4
    504e:	0018      	movs	r0, r3
    5050:	4b07      	ldr	r3, [pc, #28]	; (5070 <_usb_on_suspend+0x30>)
    5052:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5054:	4b05      	ldr	r3, [pc, #20]	; (506c <_usb_on_suspend+0x2c>)
    5056:	2102      	movs	r1, #2
    5058:	0018      	movs	r0, r3
    505a:	4b06      	ldr	r3, [pc, #24]	; (5074 <_usb_on_suspend+0x34>)
    505c:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    505e:	2001      	movs	r0, #1
    5060:	4b05      	ldr	r3, [pc, #20]	; (5078 <_usb_on_suspend+0x38>)
    5062:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
#endif
}
    5064:	46c0      	nop			; (mov r8, r8)
    5066:	46bd      	mov	sp, r7
    5068:	b002      	add	sp, #8
    506a:	bd80      	pop	{r7, pc}
    506c:	20003d8c 	.word	0x20003d8c
    5070:	00005a95 	.word	0x00005a95
    5074:	00005a39 	.word	0x00005a39
    5078:	00003ea5 	.word	0x00003ea5

0000507c <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    507c:	b580      	push	{r7, lr}
    507e:	b084      	sub	sp, #16
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
    5084:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    5086:	683b      	ldr	r3, [r7, #0]
    5088:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    508a:	4b0b      	ldr	r3, [pc, #44]	; (50b8 <_usb_device_lpm_suspend+0x3c>)
    508c:	2106      	movs	r1, #6
    508e:	0018      	movs	r0, r3
    5090:	4b0a      	ldr	r3, [pc, #40]	; (50bc <_usb_device_lpm_suspend+0x40>)
    5092:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5094:	4b08      	ldr	r3, [pc, #32]	; (50b8 <_usb_device_lpm_suspend+0x3c>)
    5096:	2104      	movs	r1, #4
    5098:	0018      	movs	r0, r3
    509a:	4b08      	ldr	r3, [pc, #32]	; (50bc <_usb_device_lpm_suspend+0x40>)
    509c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    509e:	4b06      	ldr	r3, [pc, #24]	; (50b8 <_usb_device_lpm_suspend+0x3c>)
    50a0:	2102      	movs	r1, #2
    50a2:	0018      	movs	r0, r3
    50a4:	4b06      	ldr	r3, [pc, #24]	; (50c0 <_usb_device_lpm_suspend+0x44>)
    50a6:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    50a8:	2002      	movs	r0, #2
    50aa:	4b06      	ldr	r3, [pc, #24]	; (50c4 <_usb_device_lpm_suspend+0x48>)
    50ac:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	46bd      	mov	sp, r7
    50b2:	b004      	add	sp, #16
    50b4:	bd80      	pop	{r7, pc}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	20003d8c 	.word	0x20003d8c
    50bc:	00005a95 	.word	0x00005a95
    50c0:	00005a39 	.word	0x00005a39
    50c4:	00003ea5 	.word	0x00003ea5

000050c8 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    50c8:	b580      	push	{r7, lr}
    50ca:	b082      	sub	sp, #8
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
    50d0:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    50d2:	4b03      	ldr	r3, [pc, #12]	; (50e0 <_usb_on_sof_notify+0x18>)
    50d4:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	46bd      	mov	sp, r7
    50da:	b002      	add	sp, #8
    50dc:	bd80      	pop	{r7, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	00001115 	.word	0x00001115

000050e4 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b082      	sub	sp, #8
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
    50ec:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    50ee:	4b07      	ldr	r3, [pc, #28]	; (510c <_usb_on_bus_reset+0x28>)
    50f0:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	2100      	movs	r1, #0
    50f6:	0018      	movs	r0, r3
    50f8:	4b05      	ldr	r3, [pc, #20]	; (5110 <_usb_on_bus_reset+0x2c>)
    50fa:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	0018      	movs	r0, r3
    5100:	4b04      	ldr	r3, [pc, #16]	; (5114 <_usb_on_bus_reset+0x30>)
    5102:	4798      	blx	r3
}
    5104:	46c0      	nop			; (mov r8, r8)
    5106:	46bd      	mov	sp, r7
    5108:	b002      	add	sp, #8
    510a:	bd80      	pop	{r7, pc}
    510c:	000010b5 	.word	0x000010b5
    5110:	00003d2d 	.word	0x00003d2d
    5114:	00004f81 	.word	0x00004f81

00005118 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    5118:	b580      	push	{r7, lr}
    511a:	b082      	sub	sp, #8
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
    5120:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    5122:	4b0f      	ldr	r3, [pc, #60]	; (5160 <_usb_on_wakeup+0x48>)
    5124:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5126:	4b0f      	ldr	r3, [pc, #60]	; (5164 <_usb_on_wakeup+0x4c>)
    5128:	2102      	movs	r1, #2
    512a:	0018      	movs	r0, r3
    512c:	4b0e      	ldr	r3, [pc, #56]	; (5168 <_usb_on_wakeup+0x50>)
    512e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5130:	4b0c      	ldr	r3, [pc, #48]	; (5164 <_usb_on_wakeup+0x4c>)
    5132:	2104      	movs	r1, #4
    5134:	0018      	movs	r0, r3
    5136:	4b0d      	ldr	r3, [pc, #52]	; (516c <_usb_on_wakeup+0x54>)
    5138:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    513a:	4a0d      	ldr	r2, [pc, #52]	; (5170 <_usb_on_wakeup+0x58>)
    513c:	4b09      	ldr	r3, [pc, #36]	; (5164 <_usb_on_wakeup+0x4c>)
    513e:	2106      	movs	r1, #6
    5140:	0018      	movs	r0, r3
    5142:	4b0c      	ldr	r3, [pc, #48]	; (5174 <_usb_on_wakeup+0x5c>)
    5144:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5146:	4b07      	ldr	r3, [pc, #28]	; (5164 <_usb_on_wakeup+0x4c>)
    5148:	2106      	movs	r1, #6
    514a:	0018      	movs	r0, r3
    514c:	4b07      	ldr	r3, [pc, #28]	; (516c <_usb_on_wakeup+0x54>)
    514e:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    5150:	2003      	movs	r0, #3
    5152:	4b09      	ldr	r3, [pc, #36]	; (5178 <_usb_on_wakeup+0x60>)
    5154:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	46bd      	mov	sp, r7
    515a:	b002      	add	sp, #8
    515c:	bd80      	pop	{r7, pc}
    515e:	46c0      	nop			; (mov r8, r8)
    5160:	00003e69 	.word	0x00003e69
    5164:	20003d8c 	.word	0x20003d8c
    5168:	00005a95 	.word	0x00005a95
    516c:	00005a39 	.word	0x00005a39
    5170:	0000507d 	.word	0x0000507d
    5174:	000059e9 	.word	0x000059e9
    5178:	00003ea5 	.word	0x00003ea5

0000517c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    517c:	b580      	push	{r7, lr}
    517e:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    5180:	2003      	movs	r0, #3
    5182:	4b20      	ldr	r3, [pc, #128]	; (5204 <udd_attach+0x88>)
    5184:	4798      	blx	r3
	usb_device_attach(&usb_device);
    5186:	4b20      	ldr	r3, [pc, #128]	; (5208 <udd_attach+0x8c>)
    5188:	0018      	movs	r0, r3
    518a:	4b20      	ldr	r3, [pc, #128]	; (520c <udd_attach+0x90>)
    518c:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    518e:	4a20      	ldr	r2, [pc, #128]	; (5210 <udd_attach+0x94>)
    5190:	4b1d      	ldr	r3, [pc, #116]	; (5208 <udd_attach+0x8c>)
    5192:	2104      	movs	r1, #4
    5194:	0018      	movs	r0, r3
    5196:	4b1f      	ldr	r3, [pc, #124]	; (5214 <udd_attach+0x98>)
    5198:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    519a:	4a1f      	ldr	r2, [pc, #124]	; (5218 <udd_attach+0x9c>)
    519c:	4b1a      	ldr	r3, [pc, #104]	; (5208 <udd_attach+0x8c>)
    519e:	2100      	movs	r1, #0
    51a0:	0018      	movs	r0, r3
    51a2:	4b1c      	ldr	r3, [pc, #112]	; (5214 <udd_attach+0x98>)
    51a4:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    51a6:	4a1d      	ldr	r2, [pc, #116]	; (521c <udd_attach+0xa0>)
    51a8:	4b17      	ldr	r3, [pc, #92]	; (5208 <udd_attach+0x8c>)
    51aa:	2101      	movs	r1, #1
    51ac:	0018      	movs	r0, r3
    51ae:	4b19      	ldr	r3, [pc, #100]	; (5214 <udd_attach+0x98>)
    51b0:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    51b2:	4a1b      	ldr	r2, [pc, #108]	; (5220 <udd_attach+0xa4>)
    51b4:	4b14      	ldr	r3, [pc, #80]	; (5208 <udd_attach+0x8c>)
    51b6:	2102      	movs	r1, #2
    51b8:	0018      	movs	r0, r3
    51ba:	4b16      	ldr	r3, [pc, #88]	; (5214 <udd_attach+0x98>)
    51bc:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    51be:	4b12      	ldr	r3, [pc, #72]	; (5208 <udd_attach+0x8c>)
    51c0:	2104      	movs	r1, #4
    51c2:	0018      	movs	r0, r3
    51c4:	4b17      	ldr	r3, [pc, #92]	; (5224 <udd_attach+0xa8>)
    51c6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    51c8:	4b0f      	ldr	r3, [pc, #60]	; (5208 <udd_attach+0x8c>)
    51ca:	2100      	movs	r1, #0
    51cc:	0018      	movs	r0, r3
    51ce:	4b15      	ldr	r3, [pc, #84]	; (5224 <udd_attach+0xa8>)
    51d0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    51d2:	4b0d      	ldr	r3, [pc, #52]	; (5208 <udd_attach+0x8c>)
    51d4:	2101      	movs	r1, #1
    51d6:	0018      	movs	r0, r3
    51d8:	4b12      	ldr	r3, [pc, #72]	; (5224 <udd_attach+0xa8>)
    51da:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    51dc:	4b0a      	ldr	r3, [pc, #40]	; (5208 <udd_attach+0x8c>)
    51de:	2102      	movs	r1, #2
    51e0:	0018      	movs	r0, r3
    51e2:	4b10      	ldr	r3, [pc, #64]	; (5224 <udd_attach+0xa8>)
    51e4:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    51e6:	4a10      	ldr	r2, [pc, #64]	; (5228 <udd_attach+0xac>)
    51e8:	4b07      	ldr	r3, [pc, #28]	; (5208 <udd_attach+0x8c>)
    51ea:	2106      	movs	r1, #6
    51ec:	0018      	movs	r0, r3
    51ee:	4b09      	ldr	r3, [pc, #36]	; (5214 <udd_attach+0x98>)
    51f0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    51f2:	4b05      	ldr	r3, [pc, #20]	; (5208 <udd_attach+0x8c>)
    51f4:	2106      	movs	r1, #6
    51f6:	0018      	movs	r0, r3
    51f8:	4b0a      	ldr	r3, [pc, #40]	; (5224 <udd_attach+0xa8>)
    51fa:	4798      	blx	r3
#endif
}
    51fc:	46c0      	nop			; (mov r8, r8)
    51fe:	46bd      	mov	sp, r7
    5200:	bd80      	pop	{r7, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	00003ea5 	.word	0x00003ea5
    5208:	20003d8c 	.word	0x20003d8c
    520c:	00003ced 	.word	0x00003ced
    5210:	00005041 	.word	0x00005041
    5214:	000059e9 	.word	0x000059e9
    5218:	000050c9 	.word	0x000050c9
    521c:	000050e5 	.word	0x000050e5
    5220:	00005119 	.word	0x00005119
    5224:	00005a39 	.word	0x00005a39
    5228:	0000507d 	.word	0x0000507d

0000522c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    522c:	b580      	push	{r7, lr}
    522e:	b082      	sub	sp, #8
    5230:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    5232:	4b12      	ldr	r3, [pc, #72]	; (527c <udd_enable+0x50>)
    5234:	4798      	blx	r3
    5236:	0003      	movs	r3, r0
    5238:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    523a:	003b      	movs	r3, r7
    523c:	0018      	movs	r0, r3
    523e:	4b10      	ldr	r3, [pc, #64]	; (5280 <udd_enable+0x54>)
    5240:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5242:	003b      	movs	r3, r7
    5244:	2200      	movs	r2, #0
    5246:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    5248:	003a      	movs	r2, r7
    524a:	490e      	ldr	r1, [pc, #56]	; (5284 <udd_enable+0x58>)
    524c:	4b0e      	ldr	r3, [pc, #56]	; (5288 <udd_enable+0x5c>)
    524e:	0018      	movs	r0, r3
    5250:	4b0e      	ldr	r3, [pc, #56]	; (528c <udd_enable+0x60>)
    5252:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    5254:	4b0c      	ldr	r3, [pc, #48]	; (5288 <udd_enable+0x5c>)
    5256:	0018      	movs	r0, r3
    5258:	4b0d      	ldr	r3, [pc, #52]	; (5290 <udd_enable+0x64>)
    525a:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    525c:	4b0d      	ldr	r3, [pc, #52]	; (5294 <udd_enable+0x68>)
    525e:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    5260:	2001      	movs	r0, #1
    5262:	4b0d      	ldr	r3, [pc, #52]	; (5298 <udd_enable+0x6c>)
    5264:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    5266:	4b0d      	ldr	r3, [pc, #52]	; (529c <udd_enable+0x70>)
    5268:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	0018      	movs	r0, r3
    526e:	4b0c      	ldr	r3, [pc, #48]	; (52a0 <udd_enable+0x74>)
    5270:	4798      	blx	r3
}
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	46bd      	mov	sp, r7
    5276:	b002      	add	sp, #8
    5278:	bd80      	pop	{r7, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	00003c75 	.word	0x00003c75
    5280:	00006e59 	.word	0x00006e59
    5284:	41005000 	.word	0x41005000
    5288:	20003d8c 	.word	0x20003d8c
    528c:	00006e81 	.word	0x00006e81
    5290:	00006df1 	.word	0x00006df1
    5294:	00003e69 	.word	0x00003e69
    5298:	00003ea5 	.word	0x00003ea5
    529c:	0000517d 	.word	0x0000517d
    52a0:	00003cbd 	.word	0x00003cbd

000052a4 <system_gclk_chan_get_config_defaults>:
{
    52a4:	b580      	push	{r7, lr}
    52a6:	b082      	sub	sp, #8
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	2200      	movs	r2, #0
    52b0:	701a      	strb	r2, [r3, #0]
}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	46bd      	mov	sp, r7
    52b6:	b002      	add	sp, #8
    52b8:	bd80      	pop	{r7, pc}
	...

000052bc <system_apb_clock_set_mask>:
{
    52bc:	b580      	push	{r7, lr}
    52be:	b082      	sub	sp, #8
    52c0:	af00      	add	r7, sp, #0
    52c2:	0002      	movs	r2, r0
    52c4:	6039      	str	r1, [r7, #0]
    52c6:	1dfb      	adds	r3, r7, #7
    52c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    52ca:	1dfb      	adds	r3, r7, #7
    52cc:	781b      	ldrb	r3, [r3, #0]
    52ce:	2b01      	cmp	r3, #1
    52d0:	d00a      	beq.n	52e8 <system_apb_clock_set_mask+0x2c>
    52d2:	2b02      	cmp	r3, #2
    52d4:	d00f      	beq.n	52f6 <system_apb_clock_set_mask+0x3a>
    52d6:	2b00      	cmp	r3, #0
    52d8:	d114      	bne.n	5304 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    52da:	4b0e      	ldr	r3, [pc, #56]	; (5314 <system_apb_clock_set_mask+0x58>)
    52dc:	4a0d      	ldr	r2, [pc, #52]	; (5314 <system_apb_clock_set_mask+0x58>)
    52de:	6991      	ldr	r1, [r2, #24]
    52e0:	683a      	ldr	r2, [r7, #0]
    52e2:	430a      	orrs	r2, r1
    52e4:	619a      	str	r2, [r3, #24]
			break;
    52e6:	e00f      	b.n	5308 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    52e8:	4b0a      	ldr	r3, [pc, #40]	; (5314 <system_apb_clock_set_mask+0x58>)
    52ea:	4a0a      	ldr	r2, [pc, #40]	; (5314 <system_apb_clock_set_mask+0x58>)
    52ec:	69d1      	ldr	r1, [r2, #28]
    52ee:	683a      	ldr	r2, [r7, #0]
    52f0:	430a      	orrs	r2, r1
    52f2:	61da      	str	r2, [r3, #28]
			break;
    52f4:	e008      	b.n	5308 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    52f6:	4b07      	ldr	r3, [pc, #28]	; (5314 <system_apb_clock_set_mask+0x58>)
    52f8:	4a06      	ldr	r2, [pc, #24]	; (5314 <system_apb_clock_set_mask+0x58>)
    52fa:	6a11      	ldr	r1, [r2, #32]
    52fc:	683a      	ldr	r2, [r7, #0]
    52fe:	430a      	orrs	r2, r1
    5300:	621a      	str	r2, [r3, #32]
			break;
    5302:	e001      	b.n	5308 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5304:	2317      	movs	r3, #23
    5306:	e000      	b.n	530a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5308:	2300      	movs	r3, #0
}
    530a:	0018      	movs	r0, r3
    530c:	46bd      	mov	sp, r7
    530e:	b002      	add	sp, #8
    5310:	bd80      	pop	{r7, pc}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	40000400 	.word	0x40000400

00005318 <system_pinmux_get_config_defaults>:
{
    5318:	b580      	push	{r7, lr}
    531a:	b082      	sub	sp, #8
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	2280      	movs	r2, #128	; 0x80
    5324:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	2200      	movs	r2, #0
    532a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    532c:	687b      	ldr	r3, [r7, #4]
    532e:	2201      	movs	r2, #1
    5330:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5332:	687b      	ldr	r3, [r7, #4]
    5334:	2200      	movs	r2, #0
    5336:	70da      	strb	r2, [r3, #3]
}
    5338:	46c0      	nop			; (mov r8, r8)
    533a:	46bd      	mov	sp, r7
    533c:	b002      	add	sp, #8
    533e:	bd80      	pop	{r7, pc}

00005340 <system_interrupt_enable>:
{
    5340:	b580      	push	{r7, lr}
    5342:	b082      	sub	sp, #8
    5344:	af00      	add	r7, sp, #0
    5346:	0002      	movs	r2, r0
    5348:	1dfb      	adds	r3, r7, #7
    534a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    534c:	4b06      	ldr	r3, [pc, #24]	; (5368 <system_interrupt_enable+0x28>)
    534e:	1dfa      	adds	r2, r7, #7
    5350:	7812      	ldrb	r2, [r2, #0]
    5352:	0011      	movs	r1, r2
    5354:	221f      	movs	r2, #31
    5356:	400a      	ands	r2, r1
    5358:	2101      	movs	r1, #1
    535a:	4091      	lsls	r1, r2
    535c:	000a      	movs	r2, r1
    535e:	601a      	str	r2, [r3, #0]
}
    5360:	46c0      	nop			; (mov r8, r8)
    5362:	46bd      	mov	sp, r7
    5364:	b002      	add	sp, #8
    5366:	bd80      	pop	{r7, pc}
    5368:	e000e100 	.word	0xe000e100

0000536c <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    536c:	b580      	push	{r7, lr}
    536e:	b082      	sub	sp, #8
    5370:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    5372:	4ba4      	ldr	r3, [pc, #656]	; (5604 <_usb_host_interrupt_handler+0x298>)
    5374:	681b      	ldr	r3, [r3, #0]
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	8c1b      	ldrh	r3, [r3, #32]
    537a:	b29b      	uxth	r3, r3
    537c:	2b00      	cmp	r3, #0
    537e:	d00a      	beq.n	5396 <_usb_host_interrupt_handler+0x2a>
    5380:	4ba0      	ldr	r3, [pc, #640]	; (5604 <_usb_host_interrupt_handler+0x298>)
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	8c1b      	ldrh	r3, [r3, #32]
    5388:	b29b      	uxth	r3, r3
    538a:	001a      	movs	r2, r3
    538c:	4b9e      	ldr	r3, [pc, #632]	; (5608 <_usb_host_interrupt_handler+0x29c>)
    538e:	0010      	movs	r0, r2
    5390:	4798      	blx	r3
    5392:	0003      	movs	r3, r0
    5394:	e000      	b.n	5398 <_usb_host_interrupt_handler+0x2c>
    5396:	2320      	movs	r3, #32
    5398:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	2b1f      	cmp	r3, #31
    539e:	d900      	bls.n	53a2 <_usb_host_interrupt_handler+0x36>
    53a0:	e204      	b.n	57ac <_usb_host_interrupt_handler+0x440>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    53a2:	4b98      	ldr	r3, [pc, #608]	; (5604 <_usb_host_interrupt_handler+0x298>)
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	681a      	ldr	r2, [r3, #0]
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	3308      	adds	r3, #8
    53ac:	015b      	lsls	r3, r3, #5
    53ae:	18d3      	adds	r3, r2, r3
    53b0:	3307      	adds	r3, #7
    53b2:	781b      	ldrb	r3, [r3, #0]
    53b4:	b2db      	uxtb	r3, r3
    53b6:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    53b8:	683b      	ldr	r3, [r7, #0]
    53ba:	2203      	movs	r2, #3
    53bc:	4013      	ands	r3, r2
    53be:	d100      	bne.n	53c2 <_usb_host_interrupt_handler+0x56>
    53c0:	e088      	b.n	54d4 <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    53c2:	2201      	movs	r2, #1
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	409a      	lsls	r2, r3
    53c8:	0013      	movs	r3, r2
    53ca:	43db      	mvns	r3, r3
    53cc:	001a      	movs	r2, r3
    53ce:	4b8f      	ldr	r3, [pc, #572]	; (560c <_usb_host_interrupt_handler+0x2a0>)
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	401a      	ands	r2, r3
    53d4:	4b8d      	ldr	r3, [pc, #564]	; (560c <_usb_host_interrupt_handler+0x2a0>)
    53d6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    53d8:	4b8a      	ldr	r3, [pc, #552]	; (5604 <_usb_host_interrupt_handler+0x298>)
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	681a      	ldr	r2, [r3, #0]
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	3308      	adds	r3, #8
    53e2:	015b      	lsls	r3, r3, #5
    53e4:	18d3      	adds	r3, r2, r3
    53e6:	3307      	adds	r3, #7
    53e8:	2203      	movs	r2, #3
    53ea:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    53ec:	4b85      	ldr	r3, [pc, #532]	; (5604 <_usb_host_interrupt_handler+0x298>)
    53ee:	681a      	ldr	r2, [r3, #0]
    53f0:	21ae      	movs	r1, #174	; 0xae
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	18d3      	adds	r3, r2, r3
    53f6:	185b      	adds	r3, r3, r1
    53f8:	781b      	ldrb	r3, [r3, #0]
    53fa:	001a      	movs	r2, r3
    53fc:	2301      	movs	r3, #1
    53fe:	4013      	ands	r3, r2
    5400:	d068      	beq.n	54d4 <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	b2da      	uxtb	r2, r3
    5406:	4b82      	ldr	r3, [pc, #520]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    5408:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    540a:	4b7e      	ldr	r3, [pc, #504]	; (5604 <_usb_host_interrupt_handler+0x298>)
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	681b      	ldr	r3, [r3, #0]
    5410:	687a      	ldr	r2, [r7, #4]
    5412:	3208      	adds	r2, #8
    5414:	0152      	lsls	r2, r2, #5
    5416:	5cd3      	ldrb	r3, [r2, r3]
    5418:	079b      	lsls	r3, r3, #30
    541a:	0f9b      	lsrs	r3, r3, #30
    541c:	b2db      	uxtb	r3, r3
    541e:	2b01      	cmp	r3, #1
    5420:	d11e      	bne.n	5460 <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5422:	4a7c      	ldr	r2, [pc, #496]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    5424:	687b      	ldr	r3, [r7, #4]
    5426:	015b      	lsls	r3, r3, #5
    5428:	18d3      	adds	r3, r2, r3
    542a:	685b      	ldr	r3, [r3, #4]
    542c:	049b      	lsls	r3, r3, #18
    542e:	0c9b      	lsrs	r3, r3, #18
    5430:	b29b      	uxth	r3, r3
    5432:	001a      	movs	r2, r3
    5434:	4b76      	ldr	r3, [pc, #472]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    5436:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5438:	4a76      	ldr	r2, [pc, #472]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	015b      	lsls	r3, r3, #5
    543e:	18d3      	adds	r3, r2, r3
    5440:	685b      	ldr	r3, [r3, #4]
    5442:	011b      	lsls	r3, r3, #4
    5444:	0c9b      	lsrs	r3, r3, #18
    5446:	b29b      	uxth	r3, r3
    5448:	001a      	movs	r2, r3
    544a:	4b71      	ldr	r3, [pc, #452]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    544c:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    544e:	4a71      	ldr	r2, [pc, #452]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	015b      	lsls	r3, r3, #5
    5454:	18d3      	adds	r3, r2, r3
    5456:	685a      	ldr	r2, [r3, #4]
    5458:	0b92      	lsrs	r2, r2, #14
    545a:	0392      	lsls	r2, r2, #14
    545c:	605a      	str	r2, [r3, #4]
    545e:	e02c      	b.n	54ba <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5460:	4a6c      	ldr	r2, [pc, #432]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	015b      	lsls	r3, r3, #5
    5466:	18d3      	adds	r3, r2, r3
    5468:	685b      	ldr	r3, [r3, #4]
    546a:	011b      	lsls	r3, r3, #4
    546c:	0c9b      	lsrs	r3, r3, #18
    546e:	b29b      	uxth	r3, r3
    5470:	001a      	movs	r2, r3
    5472:	4b67      	ldr	r3, [pc, #412]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    5474:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5476:	4a67      	ldr	r2, [pc, #412]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	015b      	lsls	r3, r3, #5
    547c:	18d3      	adds	r3, r2, r3
    547e:	685b      	ldr	r3, [r3, #4]
    5480:	049b      	lsls	r3, r3, #18
    5482:	0c9b      	lsrs	r3, r3, #18
    5484:	b29b      	uxth	r3, r3
    5486:	001a      	movs	r2, r3
    5488:	4b61      	ldr	r3, [pc, #388]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    548a:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    548c:	4a61      	ldr	r2, [pc, #388]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	015b      	lsls	r3, r3, #5
    5492:	18d3      	adds	r3, r2, r3
    5494:	685a      	ldr	r2, [r3, #4]
    5496:	4960      	ldr	r1, [pc, #384]	; (5618 <_usb_host_interrupt_handler+0x2ac>)
    5498:	400a      	ands	r2, r1
    549a:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    549c:	4b5c      	ldr	r3, [pc, #368]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    549e:	885b      	ldrh	r3, [r3, #2]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d10a      	bne.n	54ba <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    54a4:	4a5b      	ldr	r2, [pc, #364]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	015b      	lsls	r3, r3, #5
    54aa:	18d3      	adds	r3, r2, r3
    54ac:	685b      	ldr	r3, [r3, #4]
    54ae:	049b      	lsls	r3, r3, #18
    54b0:	0c9b      	lsrs	r3, r3, #18
    54b2:	b29b      	uxth	r3, r3
    54b4:	001a      	movs	r2, r3
    54b6:	4b56      	ldr	r3, [pc, #344]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    54b8:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    54ba:	4b52      	ldr	r3, [pc, #328]	; (5604 <_usb_host_interrupt_handler+0x298>)
    54bc:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	3302      	adds	r3, #2
    54c2:	011b      	lsls	r3, r3, #4
    54c4:	18d3      	adds	r3, r2, r3
    54c6:	3304      	adds	r3, #4
    54c8:	681a      	ldr	r2, [r3, #0]
    54ca:	4b4e      	ldr	r3, [pc, #312]	; (5604 <_usb_host_interrupt_handler+0x298>)
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	4950      	ldr	r1, [pc, #320]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    54d0:	0018      	movs	r0, r3
    54d2:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    54d4:	683b      	ldr	r3, [r7, #0]
    54d6:	2204      	movs	r2, #4
    54d8:	4013      	ands	r3, r2
    54da:	d100      	bne.n	54de <_usb_host_interrupt_handler+0x172>
    54dc:	e0af      	b.n	563e <_usb_host_interrupt_handler+0x2d2>
			/* For ISO IN, check CRC error */
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    54de:	4b49      	ldr	r3, [pc, #292]	; (5604 <_usb_host_interrupt_handler+0x298>)
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	687a      	ldr	r2, [r7, #4]
    54e6:	3208      	adds	r2, #8
    54e8:	0152      	lsls	r2, r2, #5
    54ea:	5cd3      	ldrb	r3, [r2, r3]
    54ec:	069b      	lsls	r3, r3, #26
    54ee:	0f5b      	lsrs	r3, r3, #29
    54f0:	b2db      	uxtb	r3, r3
    54f2:	2b02      	cmp	r3, #2
    54f4:	d151      	bne.n	559a <_usb_host_interrupt_handler+0x22e>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    54f6:	4b43      	ldr	r3, [pc, #268]	; (5604 <_usb_host_interrupt_handler+0x298>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	687a      	ldr	r2, [r7, #4]
    54fe:	3208      	adds	r2, #8
    5500:	0152      	lsls	r2, r2, #5
    5502:	5cd3      	ldrb	r3, [r2, r3]
    5504:	079b      	lsls	r3, r3, #30
    5506:	0f9b      	lsrs	r3, r3, #30
    5508:	b2db      	uxtb	r3, r3
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    550a:	2b01      	cmp	r3, #1
    550c:	d145      	bne.n	559a <_usb_host_interrupt_handler+0x22e>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    550e:	4a41      	ldr	r2, [pc, #260]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	015b      	lsls	r3, r3, #5
    5514:	18d3      	adds	r3, r2, r3
    5516:	3308      	adds	r3, #8
    5518:	789b      	ldrb	r3, [r3, #2]
    551a:	07db      	lsls	r3, r3, #31
    551c:	0fdb      	lsrs	r3, r3, #31
    551e:	b2db      	uxtb	r3, r3
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    5520:	2b00      	cmp	r3, #0
    5522:	d03a      	beq.n	559a <_usb_host_interrupt_handler+0x22e>
				/* Clear busy status */
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    5524:	2201      	movs	r2, #1
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	409a      	lsls	r2, r3
    552a:	0013      	movs	r3, r2
    552c:	43db      	mvns	r3, r3
    552e:	001a      	movs	r2, r3
    5530:	4b36      	ldr	r3, [pc, #216]	; (560c <_usb_host_interrupt_handler+0x2a0>)
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	401a      	ands	r2, r3
    5536:	4b35      	ldr	r3, [pc, #212]	; (560c <_usb_host_interrupt_handler+0x2a0>)
    5538:	601a      	str	r2, [r3, #0]
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    553a:	4a36      	ldr	r2, [pc, #216]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	015b      	lsls	r3, r3, #5
    5540:	18d3      	adds	r3, r2, r3
    5542:	330a      	adds	r3, #10
    5544:	2200      	movs	r2, #0
    5546:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5548:	4b2e      	ldr	r3, [pc, #184]	; (5604 <_usb_host_interrupt_handler+0x298>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	681a      	ldr	r2, [r3, #0]
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	3308      	adds	r3, #8
    5552:	015b      	lsls	r3, r3, #5
    5554:	18d3      	adds	r3, r2, r3
    5556:	3307      	adds	r3, #7
    5558:	2204      	movs	r2, #4
    555a:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    555c:	4b29      	ldr	r3, [pc, #164]	; (5604 <_usb_host_interrupt_handler+0x298>)
    555e:	681a      	ldr	r2, [r3, #0]
    5560:	21ae      	movs	r1, #174	; 0xae
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	18d3      	adds	r3, r2, r3
    5566:	185b      	adds	r3, r3, r1
    5568:	781b      	ldrb	r3, [r3, #0]
    556a:	001a      	movs	r2, r3
    556c:	2302      	movs	r3, #2
    556e:	4013      	ands	r3, r2
    5570:	d065      	beq.n	563e <_usb_host_interrupt_handler+0x2d2>
						(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
					pipe_callback_para.pipe_num = pipe_int;
    5572:	687b      	ldr	r3, [r7, #4]
    5574:	b2da      	uxtb	r2, r3
    5576:	4b26      	ldr	r3, [pc, #152]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    5578:	701a      	strb	r2, [r3, #0]
					#define USB_STATUS_PIPE_CRC16ER   (1 << 4)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    557a:	4b25      	ldr	r3, [pc, #148]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    557c:	2210      	movs	r2, #16
    557e:	705a      	strb	r2, [r3, #1]
					(_usb_instances->host_pipe_callback[pipe_int]
    5580:	4b20      	ldr	r3, [pc, #128]	; (5604 <_usb_host_interrupt_handler+0x298>)
    5582:	681a      	ldr	r2, [r3, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	011b      	lsls	r3, r3, #4
    5588:	18d3      	adds	r3, r2, r3
    558a:	3328      	adds	r3, #40	; 0x28
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	4b1d      	ldr	r3, [pc, #116]	; (5604 <_usb_host_interrupt_handler+0x298>)
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	491f      	ldr	r1, [pc, #124]	; (5610 <_usb_host_interrupt_handler+0x2a4>)
    5594:	0018      	movs	r0, r3
    5596:	4790      	blx	r2
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5598:	e051      	b.n	563e <_usb_host_interrupt_handler+0x2d2>
				}
			}
#if UHD_BULK_INTERVAL_MIN
			/* For Bulk IN, check flow error */
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    559a:	4b1a      	ldr	r3, [pc, #104]	; (5604 <_usb_host_interrupt_handler+0x298>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	687a      	ldr	r2, [r7, #4]
    55a2:	3208      	adds	r2, #8
    55a4:	0152      	lsls	r2, r2, #5
    55a6:	5cd3      	ldrb	r3, [r2, r3]
    55a8:	069b      	lsls	r3, r3, #26
    55aa:	0f5b      	lsrs	r3, r3, #29
    55ac:	b2db      	uxtb	r3, r3
    55ae:	2b03      	cmp	r3, #3
    55b0:	d134      	bne.n	561c <_usb_host_interrupt_handler+0x2b0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    55b2:	4b14      	ldr	r3, [pc, #80]	; (5604 <_usb_host_interrupt_handler+0x298>)
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	681b      	ldr	r3, [r3, #0]
    55b8:	687a      	ldr	r2, [r7, #4]
    55ba:	3208      	adds	r2, #8
    55bc:	0152      	lsls	r2, r2, #5
    55be:	5cd3      	ldrb	r3, [r2, r3]
    55c0:	079b      	lsls	r3, r3, #30
    55c2:	0f9b      	lsrs	r3, r3, #30
    55c4:	b2db      	uxtb	r3, r3
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    55c6:	2b01      	cmp	r3, #1
    55c8:	d128      	bne.n	561c <_usb_host_interrupt_handler+0x2b0>
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    55ca:	4a12      	ldr	r2, [pc, #72]	; (5614 <_usb_host_interrupt_handler+0x2a8>)
    55cc:	687b      	ldr	r3, [r7, #4]
    55ce:	015b      	lsls	r3, r3, #5
    55d0:	18d3      	adds	r3, r2, r3
    55d2:	330a      	adds	r3, #10
    55d4:	2200      	movs	r2, #0
    55d6:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    55d8:	4b0a      	ldr	r3, [pc, #40]	; (5604 <_usb_host_interrupt_handler+0x298>)
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	681a      	ldr	r2, [r3, #0]
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	3308      	adds	r3, #8
    55e2:	015b      	lsls	r3, r3, #5
    55e4:	18d3      	adds	r3, r2, r3
    55e6:	3307      	adds	r3, #7
    55e8:	2204      	movs	r2, #4
    55ea:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
				/* Freeze until next SOF */
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    55ec:	4b05      	ldr	r3, [pc, #20]	; (5604 <_usb_host_interrupt_handler+0x298>)
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	681a      	ldr	r2, [r3, #0]
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	3308      	adds	r3, #8
    55f6:	015b      	lsls	r3, r3, #5
    55f8:	18d3      	adds	r3, r2, r3
    55fa:	3305      	adds	r3, #5
    55fc:	2210      	movs	r2, #16
    55fe:	701a      	strb	r2, [r3, #0]
    5600:	e01d      	b.n	563e <_usb_host_interrupt_handler+0x2d2>
    5602:	46c0      	nop			; (mov r8, r8)
    5604:	2000082c 	.word	0x2000082c
    5608:	00010111 	.word	0x00010111
    560c:	20000844 	.word	0x20000844
    5610:	20000830 	.word	0x20000830
    5614:	20003f4c 	.word	0x20003f4c
    5618:	f0003fff 	.word	0xf0003fff
			}
#endif
			/* Clear flag anyway */
			else {
				/* clear the flag */
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    561c:	4a83      	ldr	r2, [pc, #524]	; (582c <_usb_host_interrupt_handler+0x4c0>)
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	015b      	lsls	r3, r3, #5
    5622:	18d3      	adds	r3, r2, r3
    5624:	330a      	adds	r3, #10
    5626:	2200      	movs	r2, #0
    5628:	701a      	strb	r2, [r3, #0]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    562a:	4b81      	ldr	r3, [pc, #516]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    562c:	681b      	ldr	r3, [r3, #0]
    562e:	681a      	ldr	r2, [r3, #0]
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	3308      	adds	r3, #8
    5634:	015b      	lsls	r3, r3, #5
    5636:	18d3      	adds	r3, r2, r3
    5638:	3307      	adds	r3, #7
    563a:	2204      	movs	r2, #4
    563c:	701a      	strb	r2, [r3, #0]
						USB_HOST_PINTFLAG_TRFAIL;
			}
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    563e:	683b      	ldr	r3, [r7, #0]
    5640:	2208      	movs	r2, #8
    5642:	4013      	ands	r3, r2
    5644:	d03c      	beq.n	56c0 <_usb_host_interrupt_handler+0x354>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5646:	2201      	movs	r2, #1
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	409a      	lsls	r2, r3
    564c:	0013      	movs	r3, r2
    564e:	43db      	mvns	r3, r3
    5650:	001a      	movs	r2, r3
    5652:	4b78      	ldr	r3, [pc, #480]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	401a      	ands	r2, r3
    5658:	4b76      	ldr	r3, [pc, #472]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    565a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    565c:	4b74      	ldr	r3, [pc, #464]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    565e:	681b      	ldr	r3, [r3, #0]
    5660:	681a      	ldr	r2, [r3, #0]
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	3308      	adds	r3, #8
    5666:	015b      	lsls	r3, r3, #5
    5668:	18d3      	adds	r3, r2, r3
    566a:	3307      	adds	r3, #7
    566c:	2208      	movs	r2, #8
    566e:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5670:	4b6f      	ldr	r3, [pc, #444]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5672:	681a      	ldr	r2, [r3, #0]
    5674:	21ae      	movs	r1, #174	; 0xae
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	18d3      	adds	r3, r2, r3
    567a:	185b      	adds	r3, r3, r1
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	001a      	movs	r2, r3
    5680:	2302      	movs	r3, #2
    5682:	4013      	ands	r3, r2
    5684:	d01c      	beq.n	56c0 <_usb_host_interrupt_handler+0x354>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	b2da      	uxtb	r2, r3
    568a:	4b6b      	ldr	r3, [pc, #428]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    568c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    568e:	4a67      	ldr	r2, [pc, #412]	; (582c <_usb_host_interrupt_handler+0x4c0>)
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	015b      	lsls	r3, r3, #5
    5694:	18d3      	adds	r3, r2, r3
    5696:	330e      	adds	r3, #14
    5698:	881b      	ldrh	r3, [r3, #0]
    569a:	b29b      	uxth	r3, r3
    569c:	b2db      	uxtb	r3, r3
    569e:	221f      	movs	r2, #31
    56a0:	4013      	ands	r3, r2
    56a2:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    56a4:	4b64      	ldr	r3, [pc, #400]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    56a6:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    56a8:	4b61      	ldr	r3, [pc, #388]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    56aa:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	011b      	lsls	r3, r3, #4
    56b0:	18d3      	adds	r3, r2, r3
    56b2:	3328      	adds	r3, #40	; 0x28
    56b4:	681a      	ldr	r2, [r3, #0]
    56b6:	4b5e      	ldr	r3, [pc, #376]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	495f      	ldr	r1, [pc, #380]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    56bc:	0018      	movs	r0, r3
    56be:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    56c0:	683b      	ldr	r3, [r7, #0]
    56c2:	2210      	movs	r2, #16
    56c4:	4013      	ands	r3, r2
    56c6:	d03a      	beq.n	573e <_usb_host_interrupt_handler+0x3d2>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    56c8:	2201      	movs	r2, #1
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	409a      	lsls	r2, r3
    56ce:	0013      	movs	r3, r2
    56d0:	43db      	mvns	r3, r3
    56d2:	001a      	movs	r2, r3
    56d4:	4b57      	ldr	r3, [pc, #348]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	401a      	ands	r2, r3
    56da:	4b56      	ldr	r3, [pc, #344]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    56dc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    56de:	4b54      	ldr	r3, [pc, #336]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	681a      	ldr	r2, [r3, #0]
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	3308      	adds	r3, #8
    56e8:	015b      	lsls	r3, r3, #5
    56ea:	18d3      	adds	r3, r2, r3
    56ec:	3307      	adds	r3, #7
    56ee:	2210      	movs	r2, #16
    56f0:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    56f2:	4b4f      	ldr	r3, [pc, #316]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    56f4:	681a      	ldr	r2, [r3, #0]
    56f6:	21ae      	movs	r1, #174	; 0xae
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	18d3      	adds	r3, r2, r3
    56fc:	185b      	adds	r3, r3, r1
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	001a      	movs	r2, r3
    5702:	2304      	movs	r3, #4
    5704:	4013      	ands	r3, r2
    5706:	d01a      	beq.n	573e <_usb_host_interrupt_handler+0x3d2>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	b2da      	uxtb	r2, r3
    570c:	4b4a      	ldr	r3, [pc, #296]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    570e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5710:	4a46      	ldr	r2, [pc, #280]	; (582c <_usb_host_interrupt_handler+0x4c0>)
    5712:	687b      	ldr	r3, [r7, #4]
    5714:	015b      	lsls	r3, r3, #5
    5716:	18d3      	adds	r3, r2, r3
    5718:	685b      	ldr	r3, [r3, #4]
    571a:	011b      	lsls	r3, r3, #4
    571c:	0c9b      	lsrs	r3, r3, #18
    571e:	b29b      	uxth	r3, r3
    5720:	001a      	movs	r2, r3
    5722:	4b45      	ldr	r3, [pc, #276]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    5724:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    5726:	4b42      	ldr	r3, [pc, #264]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5728:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    572a:	687b      	ldr	r3, [r7, #4]
    572c:	011b      	lsls	r3, r3, #4
    572e:	18d3      	adds	r3, r2, r3
    5730:	332c      	adds	r3, #44	; 0x2c
    5732:	681a      	ldr	r2, [r3, #0]
    5734:	4b3e      	ldr	r3, [pc, #248]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	2100      	movs	r1, #0
    573a:	0018      	movs	r0, r3
    573c:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	2220      	movs	r2, #32
    5742:	4013      	ands	r3, r2
    5744:	d100      	bne.n	5748 <_usb_host_interrupt_handler+0x3dc>
    5746:	e146      	b.n	59d6 <_usb_host_interrupt_handler+0x66a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5748:	2201      	movs	r2, #1
    574a:	687b      	ldr	r3, [r7, #4]
    574c:	409a      	lsls	r2, r3
    574e:	0013      	movs	r3, r2
    5750:	43db      	mvns	r3, r3
    5752:	001a      	movs	r2, r3
    5754:	4b37      	ldr	r3, [pc, #220]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	401a      	ands	r2, r3
    575a:	4b36      	ldr	r3, [pc, #216]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    575c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    575e:	4b34      	ldr	r3, [pc, #208]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	681a      	ldr	r2, [r3, #0]
    5764:	687b      	ldr	r3, [r7, #4]
    5766:	3308      	adds	r3, #8
    5768:	015b      	lsls	r3, r3, #5
    576a:	18d3      	adds	r3, r2, r3
    576c:	3307      	adds	r3, #7
    576e:	2220      	movs	r2, #32
    5770:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5772:	4b2f      	ldr	r3, [pc, #188]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5774:	681a      	ldr	r2, [r3, #0]
    5776:	21ae      	movs	r1, #174	; 0xae
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	18d3      	adds	r3, r2, r3
    577c:	185b      	adds	r3, r3, r1
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	001a      	movs	r2, r3
    5782:	2308      	movs	r3, #8
    5784:	4013      	ands	r3, r2
    5786:	d100      	bne.n	578a <_usb_host_interrupt_handler+0x41e>
    5788:	e125      	b.n	59d6 <_usb_host_interrupt_handler+0x66a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	b2da      	uxtb	r2, r3
    578e:	4b2a      	ldr	r3, [pc, #168]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    5790:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    5792:	4b27      	ldr	r3, [pc, #156]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5794:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    5796:	687b      	ldr	r3, [r7, #4]
    5798:	011b      	lsls	r3, r3, #4
    579a:	18d3      	adds	r3, r2, r3
    579c:	3330      	adds	r3, #48	; 0x30
    579e:	681a      	ldr	r2, [r3, #0]
    57a0:	4b23      	ldr	r3, [pc, #140]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    57a2:	681b      	ldr	r3, [r3, #0]
    57a4:	4924      	ldr	r1, [pc, #144]	; (5838 <_usb_host_interrupt_handler+0x4cc>)
    57a6:	0018      	movs	r0, r3
    57a8:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    57aa:	e114      	b.n	59d6 <_usb_host_interrupt_handler+0x66a>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    57ac:	4b20      	ldr	r3, [pc, #128]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    57ae:	681b      	ldr	r3, [r3, #0]
    57b0:	681b      	ldr	r3, [r3, #0]
    57b2:	8b9b      	ldrh	r3, [r3, #28]
    57b4:	b29b      	uxth	r3, r3
    57b6:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    57b8:	683b      	ldr	r3, [r7, #0]
    57ba:	2204      	movs	r2, #4
    57bc:	4013      	ands	r3, r2
    57be:	d053      	beq.n	5868 <_usb_host_interrupt_handler+0x4fc>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    57c0:	4b1b      	ldr	r3, [pc, #108]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	2204      	movs	r2, #4
    57c8:	839a      	strh	r2, [r3, #28]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    57ca:	2301      	movs	r3, #1
    57cc:	607b      	str	r3, [r7, #4]
    57ce:	e039      	b.n	5844 <_usb_host_interrupt_handler+0x4d8>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    57d0:	2201      	movs	r2, #1
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	409a      	lsls	r2, r3
    57d6:	0013      	movs	r3, r2
    57d8:	001a      	movs	r2, r3
    57da:	4b16      	ldr	r3, [pc, #88]	; (5834 <_usb_host_interrupt_handler+0x4c8>)
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	4013      	ands	r3, r2
    57e0:	d022      	beq.n	5828 <_usb_host_interrupt_handler+0x4bc>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    57e2:	4b13      	ldr	r3, [pc, #76]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	687a      	ldr	r2, [r7, #4]
    57ea:	3208      	adds	r2, #8
    57ec:	0152      	lsls	r2, r2, #5
    57ee:	5cd3      	ldrb	r3, [r2, r3]
    57f0:	069b      	lsls	r3, r3, #26
    57f2:	0f5b      	lsrs	r3, r3, #29
    57f4:	b2db      	uxtb	r3, r3
    57f6:	2b03      	cmp	r3, #3
    57f8:	d120      	bne.n	583c <_usb_host_interrupt_handler+0x4d0>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    57fa:	4b0d      	ldr	r3, [pc, #52]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	687a      	ldr	r2, [r7, #4]
    5802:	3208      	adds	r2, #8
    5804:	0152      	lsls	r2, r2, #5
    5806:	5cd3      	ldrb	r3, [r2, r3]
    5808:	079b      	lsls	r3, r3, #30
    580a:	0f9b      	lsrs	r3, r3, #30
    580c:	b2db      	uxtb	r3, r3
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    580e:	2b01      	cmp	r3, #1
    5810:	d114      	bne.n	583c <_usb_host_interrupt_handler+0x4d0>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    5812:	4b07      	ldr	r3, [pc, #28]	; (5830 <_usb_host_interrupt_handler+0x4c4>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	681a      	ldr	r2, [r3, #0]
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	3308      	adds	r3, #8
    581c:	015b      	lsls	r3, r3, #5
    581e:	18d3      	adds	r3, r2, r3
    5820:	3304      	adds	r3, #4
    5822:	2210      	movs	r2, #16
    5824:	701a      	strb	r2, [r3, #0]
    5826:	e00a      	b.n	583e <_usb_host_interrupt_handler+0x4d2>
					continue;
    5828:	46c0      	nop			; (mov r8, r8)
    582a:	e008      	b.n	583e <_usb_host_interrupt_handler+0x4d2>
    582c:	20003f4c 	.word	0x20003f4c
    5830:	2000082c 	.word	0x2000082c
    5834:	20000844 	.word	0x20000844
    5838:	20000830 	.word	0x20000830
					continue;
    583c:	46c0      	nop			; (mov r8, r8)
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	3301      	adds	r3, #1
    5842:	607b      	str	r3, [r7, #4]
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	2b07      	cmp	r3, #7
    5848:	d9c2      	bls.n	57d0 <_usb_host_interrupt_handler+0x464>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    584a:	4b65      	ldr	r3, [pc, #404]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	22a5      	movs	r2, #165	; 0xa5
    5850:	5c9b      	ldrb	r3, [r3, r2]
    5852:	001a      	movs	r2, r3
    5854:	2301      	movs	r3, #1
    5856:	4013      	ands	r3, r2
    5858:	d006      	beq.n	5868 <_usb_host_interrupt_handler+0x4fc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    585a:	4b61      	ldr	r3, [pc, #388]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	685a      	ldr	r2, [r3, #4]
    5860:	4b5f      	ldr	r3, [pc, #380]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	0018      	movs	r0, r3
    5866:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    5868:	683b      	ldr	r3, [r7, #0]
    586a:	2208      	movs	r2, #8
    586c:	4013      	ands	r3, r2
    586e:	d016      	beq.n	589e <_usb_host_interrupt_handler+0x532>
			host_pipe_job_busy_status = 0;
    5870:	4b5c      	ldr	r3, [pc, #368]	; (59e4 <_usb_host_interrupt_handler+0x678>)
    5872:	2200      	movs	r2, #0
    5874:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    5876:	4b5a      	ldr	r3, [pc, #360]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	2208      	movs	r2, #8
    587e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    5880:	4b57      	ldr	r3, [pc, #348]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	22a5      	movs	r2, #165	; 0xa5
    5886:	5c9b      	ldrb	r3, [r3, r2]
    5888:	001a      	movs	r2, r3
    588a:	2302      	movs	r3, #2
    588c:	4013      	ands	r3, r2
    588e:	d006      	beq.n	589e <_usb_host_interrupt_handler+0x532>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    5890:	4b53      	ldr	r3, [pc, #332]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5892:	681b      	ldr	r3, [r3, #0]
    5894:	689a      	ldr	r2, [r3, #8]
    5896:	4b52      	ldr	r3, [pc, #328]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	0018      	movs	r0, r3
    589c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    589e:	683b      	ldr	r3, [r7, #0]
    58a0:	2240      	movs	r2, #64	; 0x40
    58a2:	4013      	ands	r3, r2
    58a4:	d013      	beq.n	58ce <_usb_host_interrupt_handler+0x562>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    58a6:	4b4e      	ldr	r3, [pc, #312]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	681b      	ldr	r3, [r3, #0]
    58ac:	2240      	movs	r2, #64	; 0x40
    58ae:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    58b0:	4b4b      	ldr	r3, [pc, #300]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	22a5      	movs	r2, #165	; 0xa5
    58b6:	5c9b      	ldrb	r3, [r3, r2]
    58b8:	001a      	movs	r2, r3
    58ba:	2310      	movs	r3, #16
    58bc:	4013      	ands	r3, r2
    58be:	d006      	beq.n	58ce <_usb_host_interrupt_handler+0x562>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    58c0:	4b47      	ldr	r3, [pc, #284]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58c2:	681b      	ldr	r3, [r3, #0]
    58c4:	695a      	ldr	r2, [r3, #20]
    58c6:	4b46      	ldr	r3, [pc, #280]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	0018      	movs	r0, r3
    58cc:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    58ce:	683b      	ldr	r3, [r7, #0]
    58d0:	2220      	movs	r2, #32
    58d2:	4013      	ands	r3, r2
    58d4:	d013      	beq.n	58fe <_usb_host_interrupt_handler+0x592>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    58d6:	4b42      	ldr	r3, [pc, #264]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	2220      	movs	r2, #32
    58de:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    58e0:	4b3f      	ldr	r3, [pc, #252]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	22a5      	movs	r2, #165	; 0xa5
    58e6:	5c9b      	ldrb	r3, [r3, r2]
    58e8:	001a      	movs	r2, r3
    58ea:	2308      	movs	r3, #8
    58ec:	4013      	ands	r3, r2
    58ee:	d006      	beq.n	58fe <_usb_host_interrupt_handler+0x592>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    58f0:	4b3b      	ldr	r3, [pc, #236]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	691a      	ldr	r2, [r3, #16]
    58f6:	4b3a      	ldr	r3, [pc, #232]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	0018      	movs	r0, r3
    58fc:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    58fe:	683b      	ldr	r3, [r7, #0]
    5900:	2210      	movs	r2, #16
    5902:	4013      	ands	r3, r2
    5904:	d013      	beq.n	592e <_usb_host_interrupt_handler+0x5c2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    5906:	4b36      	ldr	r3, [pc, #216]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	2210      	movs	r2, #16
    590e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    5910:	4b33      	ldr	r3, [pc, #204]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5912:	681b      	ldr	r3, [r3, #0]
    5914:	22a5      	movs	r2, #165	; 0xa5
    5916:	5c9b      	ldrb	r3, [r3, r2]
    5918:	001a      	movs	r2, r3
    591a:	2304      	movs	r3, #4
    591c:	4013      	ands	r3, r2
    591e:	d006      	beq.n	592e <_usb_host_interrupt_handler+0x5c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    5920:	4b2f      	ldr	r3, [pc, #188]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5922:	681b      	ldr	r3, [r3, #0]
    5924:	68da      	ldr	r2, [r3, #12]
    5926:	4b2e      	ldr	r3, [pc, #184]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	0018      	movs	r0, r3
    592c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    592e:	683b      	ldr	r3, [r7, #0]
    5930:	2280      	movs	r2, #128	; 0x80
    5932:	4013      	ands	r3, r2
    5934:	d016      	beq.n	5964 <_usb_host_interrupt_handler+0x5f8>
			host_pipe_job_busy_status = 0;
    5936:	4b2b      	ldr	r3, [pc, #172]	; (59e4 <_usb_host_interrupt_handler+0x678>)
    5938:	2200      	movs	r2, #0
    593a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    593c:	4b28      	ldr	r3, [pc, #160]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    593e:	681b      	ldr	r3, [r3, #0]
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	2280      	movs	r2, #128	; 0x80
    5944:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    5946:	4b26      	ldr	r3, [pc, #152]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	22a5      	movs	r2, #165	; 0xa5
    594c:	5c9b      	ldrb	r3, [r3, r2]
    594e:	001a      	movs	r2, r3
    5950:	2320      	movs	r3, #32
    5952:	4013      	ands	r3, r2
    5954:	d006      	beq.n	5964 <_usb_host_interrupt_handler+0x5f8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    5956:	4b22      	ldr	r3, [pc, #136]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	699a      	ldr	r2, [r3, #24]
    595c:	4b20      	ldr	r3, [pc, #128]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	0018      	movs	r0, r3
    5962:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    5964:	683a      	ldr	r2, [r7, #0]
    5966:	2380      	movs	r3, #128	; 0x80
    5968:	005b      	lsls	r3, r3, #1
    596a:	4013      	ands	r3, r2
    596c:	d017      	beq.n	599e <_usb_host_interrupt_handler+0x632>
			host_pipe_job_busy_status = 0;
    596e:	4b1d      	ldr	r3, [pc, #116]	; (59e4 <_usb_host_interrupt_handler+0x678>)
    5970:	2200      	movs	r2, #0
    5972:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    5974:	4b1a      	ldr	r3, [pc, #104]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	2280      	movs	r2, #128	; 0x80
    597c:	0052      	lsls	r2, r2, #1
    597e:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    5980:	4b17      	ldr	r3, [pc, #92]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5982:	681b      	ldr	r3, [r3, #0]
    5984:	22a5      	movs	r2, #165	; 0xa5
    5986:	5c9b      	ldrb	r3, [r3, r2]
    5988:	001a      	movs	r2, r3
    598a:	2340      	movs	r3, #64	; 0x40
    598c:	4013      	ands	r3, r2
    598e:	d006      	beq.n	599e <_usb_host_interrupt_handler+0x632>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    5990:	4b13      	ldr	r3, [pc, #76]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	69da      	ldr	r2, [r3, #28]
    5996:	4b12      	ldr	r3, [pc, #72]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	0018      	movs	r0, r3
    599c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    599e:	683a      	ldr	r2, [r7, #0]
    59a0:	2380      	movs	r3, #128	; 0x80
    59a2:	009b      	lsls	r3, r3, #2
    59a4:	4013      	ands	r3, r2
    59a6:	d016      	beq.n	59d6 <_usb_host_interrupt_handler+0x66a>
			host_pipe_job_busy_status = 0;
    59a8:	4b0e      	ldr	r3, [pc, #56]	; (59e4 <_usb_host_interrupt_handler+0x678>)
    59aa:	2200      	movs	r2, #0
    59ac:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    59ae:	4b0c      	ldr	r3, [pc, #48]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	2280      	movs	r2, #128	; 0x80
    59b6:	0092      	lsls	r2, r2, #2
    59b8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    59ba:	4b09      	ldr	r3, [pc, #36]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	22a5      	movs	r2, #165	; 0xa5
    59c0:	5c9b      	ldrb	r3, [r3, r2]
    59c2:	b25b      	sxtb	r3, r3
    59c4:	2b00      	cmp	r3, #0
    59c6:	da06      	bge.n	59d6 <_usb_host_interrupt_handler+0x66a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    59c8:	4b05      	ldr	r3, [pc, #20]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    59ca:	681b      	ldr	r3, [r3, #0]
    59cc:	6a1a      	ldr	r2, [r3, #32]
    59ce:	4b04      	ldr	r3, [pc, #16]	; (59e0 <_usb_host_interrupt_handler+0x674>)
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	0018      	movs	r0, r3
    59d4:	4790      	blx	r2
}
    59d6:	46c0      	nop			; (mov r8, r8)
    59d8:	46bd      	mov	sp, r7
    59da:	b002      	add	sp, #8
    59dc:	bd80      	pop	{r7, pc}
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	2000082c 	.word	0x2000082c
    59e4:	20000844 	.word	0x20000844

000059e8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b084      	sub	sp, #16
    59ec:	af00      	add	r7, sp, #0
    59ee:	60f8      	str	r0, [r7, #12]
    59f0:	607a      	str	r2, [r7, #4]
    59f2:	230b      	movs	r3, #11
    59f4:	18fb      	adds	r3, r7, r3
    59f6:	1c0a      	adds	r2, r1, #0
    59f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    59fa:	230b      	movs	r3, #11
    59fc:	18fb      	adds	r3, r7, r3
    59fe:	781a      	ldrb	r2, [r3, #0]
    5a00:	68fb      	ldr	r3, [r7, #12]
    5a02:	322e      	adds	r2, #46	; 0x2e
    5a04:	0092      	lsls	r2, r2, #2
    5a06:	6879      	ldr	r1, [r7, #4]
    5a08:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    5a0a:	68fa      	ldr	r2, [r7, #12]
    5a0c:	23aa      	movs	r3, #170	; 0xaa
    5a0e:	005b      	lsls	r3, r3, #1
    5a10:	5ad2      	ldrh	r2, [r2, r3]
    5a12:	230b      	movs	r3, #11
    5a14:	18fb      	adds	r3, r7, r3
    5a16:	7819      	ldrb	r1, [r3, #0]
    5a18:	4b06      	ldr	r3, [pc, #24]	; (5a34 <usb_device_register_callback+0x4c>)
    5a1a:	0049      	lsls	r1, r1, #1
    5a1c:	5acb      	ldrh	r3, [r1, r3]
    5a1e:	4313      	orrs	r3, r2
    5a20:	b299      	uxth	r1, r3
    5a22:	68fa      	ldr	r2, [r7, #12]
    5a24:	23aa      	movs	r3, #170	; 0xaa
    5a26:	005b      	lsls	r3, r3, #1
    5a28:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    5a2a:	2300      	movs	r3, #0
}
    5a2c:	0018      	movs	r0, r3
    5a2e:	46bd      	mov	sp, r7
    5a30:	b004      	add	sp, #16
    5a32:	bd80      	pop	{r7, pc}
    5a34:	000138e8 	.word	0x000138e8

00005a38 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
    5a40:	000a      	movs	r2, r1
    5a42:	1cfb      	adds	r3, r7, #3
    5a44:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	681b      	ldr	r3, [r3, #0]
    5a4a:	1cfa      	adds	r2, r7, #3
    5a4c:	7811      	ldrb	r1, [r2, #0]
    5a4e:	4a10      	ldr	r2, [pc, #64]	; (5a90 <usb_device_enable_callback+0x58>)
    5a50:	0049      	lsls	r1, r1, #1
    5a52:	5a8a      	ldrh	r2, [r1, r2]
    5a54:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    5a56:	687a      	ldr	r2, [r7, #4]
    5a58:	23ab      	movs	r3, #171	; 0xab
    5a5a:	005b      	lsls	r3, r3, #1
    5a5c:	5ad2      	ldrh	r2, [r2, r3]
    5a5e:	1cfb      	adds	r3, r7, #3
    5a60:	7819      	ldrb	r1, [r3, #0]
    5a62:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <usb_device_enable_callback+0x58>)
    5a64:	0049      	lsls	r1, r1, #1
    5a66:	5acb      	ldrh	r3, [r1, r3]
    5a68:	4313      	orrs	r3, r2
    5a6a:	b299      	uxth	r1, r3
    5a6c:	687a      	ldr	r2, [r7, #4]
    5a6e:	23ab      	movs	r3, #171	; 0xab
    5a70:	005b      	lsls	r3, r3, #1
    5a72:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	1cfa      	adds	r2, r7, #3
    5a7a:	7811      	ldrb	r1, [r2, #0]
    5a7c:	4a04      	ldr	r2, [pc, #16]	; (5a90 <usb_device_enable_callback+0x58>)
    5a7e:	0049      	lsls	r1, r1, #1
    5a80:	5a8a      	ldrh	r2, [r1, r2]
    5a82:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    5a84:	2300      	movs	r3, #0
}
    5a86:	0018      	movs	r0, r3
    5a88:	46bd      	mov	sp, r7
    5a8a:	b002      	add	sp, #8
    5a8c:	bd80      	pop	{r7, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	000138e8 	.word	0x000138e8

00005a94 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
    5a9c:	000a      	movs	r2, r1
    5a9e:	1cfb      	adds	r3, r7, #3
    5aa0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    5aa2:	687a      	ldr	r2, [r7, #4]
    5aa4:	23ab      	movs	r3, #171	; 0xab
    5aa6:	005b      	lsls	r3, r3, #1
    5aa8:	5ad3      	ldrh	r3, [r2, r3]
    5aaa:	b21b      	sxth	r3, r3
    5aac:	1cfa      	adds	r2, r7, #3
    5aae:	7811      	ldrb	r1, [r2, #0]
    5ab0:	4a0c      	ldr	r2, [pc, #48]	; (5ae4 <usb_device_disable_callback+0x50>)
    5ab2:	0049      	lsls	r1, r1, #1
    5ab4:	5a8a      	ldrh	r2, [r1, r2]
    5ab6:	b212      	sxth	r2, r2
    5ab8:	43d2      	mvns	r2, r2
    5aba:	b212      	sxth	r2, r2
    5abc:	4013      	ands	r3, r2
    5abe:	b21b      	sxth	r3, r3
    5ac0:	b299      	uxth	r1, r3
    5ac2:	687a      	ldr	r2, [r7, #4]
    5ac4:	23ab      	movs	r3, #171	; 0xab
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	1cfa      	adds	r2, r7, #3
    5ad0:	7811      	ldrb	r1, [r2, #0]
    5ad2:	4a04      	ldr	r2, [pc, #16]	; (5ae4 <usb_device_disable_callback+0x50>)
    5ad4:	0049      	lsls	r1, r1, #1
    5ad6:	5a8a      	ldrh	r2, [r1, r2]
    5ad8:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    5ada:	2300      	movs	r3, #0
}
    5adc:	0018      	movs	r0, r3
    5ade:	46bd      	mov	sp, r7
    5ae0:	b002      	add	sp, #8
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	000138e8 	.word	0x000138e8

00005ae8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b084      	sub	sp, #16
    5aec:	af00      	add	r7, sp, #0
    5aee:	60f8      	str	r0, [r7, #12]
    5af0:	0008      	movs	r0, r1
    5af2:	0011      	movs	r1, r2
    5af4:	607b      	str	r3, [r7, #4]
    5af6:	230b      	movs	r3, #11
    5af8:	18fb      	adds	r3, r7, r3
    5afa:	1c02      	adds	r2, r0, #0
    5afc:	701a      	strb	r2, [r3, #0]
    5afe:	230a      	movs	r3, #10
    5b00:	18fb      	adds	r3, r7, r3
    5b02:	1c0a      	adds	r2, r1, #0
    5b04:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    5b06:	230b      	movs	r3, #11
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	7819      	ldrb	r1, [r3, #0]
    5b0c:	230a      	movs	r3, #10
    5b0e:	18fb      	adds	r3, r7, r3
    5b10:	781b      	ldrb	r3, [r3, #0]
    5b12:	68fa      	ldr	r2, [r7, #12]
    5b14:	0089      	lsls	r1, r1, #2
    5b16:	18cb      	adds	r3, r1, r3
    5b18:	3334      	adds	r3, #52	; 0x34
    5b1a:	009b      	lsls	r3, r3, #2
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	3304      	adds	r3, #4
    5b20:	687a      	ldr	r2, [r7, #4]
    5b22:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5b24:	230b      	movs	r3, #11
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781a      	ldrb	r2, [r3, #0]
    5b2a:	230b      	movs	r3, #11
    5b2c:	18fb      	adds	r3, r7, r3
    5b2e:	7819      	ldrb	r1, [r3, #0]
    5b30:	68f8      	ldr	r0, [r7, #12]
    5b32:	23ac      	movs	r3, #172	; 0xac
    5b34:	005b      	lsls	r3, r3, #1
    5b36:	1841      	adds	r1, r0, r1
    5b38:	18cb      	adds	r3, r1, r3
    5b3a:	7819      	ldrb	r1, [r3, #0]
    5b3c:	230a      	movs	r3, #10
    5b3e:	18fb      	adds	r3, r7, r3
    5b40:	781b      	ldrb	r3, [r3, #0]
    5b42:	4808      	ldr	r0, [pc, #32]	; (5b64 <usb_device_endpoint_register_callback+0x7c>)
    5b44:	5cc3      	ldrb	r3, [r0, r3]
    5b46:	430b      	orrs	r3, r1
    5b48:	b2d8      	uxtb	r0, r3
    5b4a:	68f9      	ldr	r1, [r7, #12]
    5b4c:	23ac      	movs	r3, #172	; 0xac
    5b4e:	005b      	lsls	r3, r3, #1
    5b50:	188a      	adds	r2, r1, r2
    5b52:	18d3      	adds	r3, r2, r3
    5b54:	1c02      	adds	r2, r0, #0
    5b56:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    5b58:	2300      	movs	r3, #0
}
    5b5a:	0018      	movs	r0, r3
    5b5c:	46bd      	mov	sp, r7
    5b5e:	b004      	add	sp, #16
    5b60:	bd80      	pop	{r7, pc}
    5b62:	46c0      	nop			; (mov r8, r8)
    5b64:	000138f8 	.word	0x000138f8

00005b68 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    5b68:	b580      	push	{r7, lr}
    5b6a:	b082      	sub	sp, #8
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
    5b70:	0008      	movs	r0, r1
    5b72:	0011      	movs	r1, r2
    5b74:	1cfb      	adds	r3, r7, #3
    5b76:	1c02      	adds	r2, r0, #0
    5b78:	701a      	strb	r2, [r3, #0]
    5b7a:	1cbb      	adds	r3, r7, #2
    5b7c:	1c0a      	adds	r2, r1, #0
    5b7e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    5b80:	1cfb      	adds	r3, r7, #3
    5b82:	7819      	ldrb	r1, [r3, #0]
    5b84:	1cbb      	adds	r3, r7, #2
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	687a      	ldr	r2, [r7, #4]
    5b8a:	0089      	lsls	r1, r1, #2
    5b8c:	18cb      	adds	r3, r1, r3
    5b8e:	3334      	adds	r3, #52	; 0x34
    5b90:	009b      	lsls	r3, r3, #2
    5b92:	18d3      	adds	r3, r2, r3
    5b94:	3304      	adds	r3, #4
    5b96:	2200      	movs	r2, #0
    5b98:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5b9a:	1cfb      	adds	r3, r7, #3
    5b9c:	781a      	ldrb	r2, [r3, #0]
    5b9e:	1cfb      	adds	r3, r7, #3
    5ba0:	7819      	ldrb	r1, [r3, #0]
    5ba2:	6878      	ldr	r0, [r7, #4]
    5ba4:	23ac      	movs	r3, #172	; 0xac
    5ba6:	005b      	lsls	r3, r3, #1
    5ba8:	1841      	adds	r1, r0, r1
    5baa:	18cb      	adds	r3, r1, r3
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	b25b      	sxtb	r3, r3
    5bb0:	1cb9      	adds	r1, r7, #2
    5bb2:	7809      	ldrb	r1, [r1, #0]
    5bb4:	4809      	ldr	r0, [pc, #36]	; (5bdc <usb_device_endpoint_unregister_callback+0x74>)
    5bb6:	5c41      	ldrb	r1, [r0, r1]
    5bb8:	b249      	sxtb	r1, r1
    5bba:	43c9      	mvns	r1, r1
    5bbc:	b249      	sxtb	r1, r1
    5bbe:	400b      	ands	r3, r1
    5bc0:	b25b      	sxtb	r3, r3
    5bc2:	b2d8      	uxtb	r0, r3
    5bc4:	6879      	ldr	r1, [r7, #4]
    5bc6:	23ac      	movs	r3, #172	; 0xac
    5bc8:	005b      	lsls	r3, r3, #1
    5bca:	188a      	adds	r2, r1, r2
    5bcc:	18d3      	adds	r3, r2, r3
    5bce:	1c02      	adds	r2, r0, #0
    5bd0:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    5bd2:	2300      	movs	r3, #0
}
    5bd4:	0018      	movs	r0, r3
    5bd6:	46bd      	mov	sp, r7
    5bd8:	b002      	add	sp, #8
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	000138f8 	.word	0x000138f8

00005be0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5be0:	b580      	push	{r7, lr}
    5be2:	b084      	sub	sp, #16
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
    5be8:	0008      	movs	r0, r1
    5bea:	0011      	movs	r1, r2
    5bec:	1cfb      	adds	r3, r7, #3
    5bee:	1c02      	adds	r2, r0, #0
    5bf0:	701a      	strb	r2, [r3, #0]
    5bf2:	1cbb      	adds	r3, r7, #2
    5bf4:	1c0a      	adds	r2, r1, #0
    5bf6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5bf8:	230f      	movs	r3, #15
    5bfa:	18fb      	adds	r3, r7, r3
    5bfc:	1cfa      	adds	r2, r7, #3
    5bfe:	7812      	ldrb	r2, [r2, #0]
    5c00:	210f      	movs	r1, #15
    5c02:	400a      	ands	r2, r1
    5c04:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5c06:	230f      	movs	r3, #15
    5c08:	18fb      	adds	r3, r7, r3
    5c0a:	781a      	ldrb	r2, [r3, #0]
    5c0c:	230f      	movs	r3, #15
    5c0e:	18fb      	adds	r3, r7, r3
    5c10:	7819      	ldrb	r1, [r3, #0]
    5c12:	6878      	ldr	r0, [r7, #4]
    5c14:	23b0      	movs	r3, #176	; 0xb0
    5c16:	005b      	lsls	r3, r3, #1
    5c18:	1841      	adds	r1, r0, r1
    5c1a:	18cb      	adds	r3, r1, r3
    5c1c:	7819      	ldrb	r1, [r3, #0]
    5c1e:	1cbb      	adds	r3, r7, #2
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	4855      	ldr	r0, [pc, #340]	; (5d78 <usb_device_endpoint_enable_callback+0x198>)
    5c24:	5cc3      	ldrb	r3, [r0, r3]
    5c26:	430b      	orrs	r3, r1
    5c28:	b2d8      	uxtb	r0, r3
    5c2a:	6879      	ldr	r1, [r7, #4]
    5c2c:	23b0      	movs	r3, #176	; 0xb0
    5c2e:	005b      	lsls	r3, r3, #1
    5c30:	188a      	adds	r2, r1, r2
    5c32:	18d3      	adds	r3, r2, r3
    5c34:	1c02      	adds	r2, r0, #0
    5c36:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5c38:	1cbb      	adds	r3, r7, #2
    5c3a:	781b      	ldrb	r3, [r3, #0]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d12f      	bne.n	5ca0 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    5c40:	230f      	movs	r3, #15
    5c42:	18fb      	adds	r3, r7, r3
    5c44:	781b      	ldrb	r3, [r3, #0]
    5c46:	2b00      	cmp	r3, #0
    5c48:	d10c      	bne.n	5c64 <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	6819      	ldr	r1, [r3, #0]
    5c4e:	230f      	movs	r3, #15
    5c50:	18fb      	adds	r3, r7, r3
    5c52:	781a      	ldrb	r2, [r3, #0]
    5c54:	230a      	movs	r3, #10
    5c56:	33ff      	adds	r3, #255	; 0xff
    5c58:	0152      	lsls	r2, r2, #5
    5c5a:	188a      	adds	r2, r1, r2
    5c5c:	18d3      	adds	r3, r2, r3
    5c5e:	2203      	movs	r2, #3
    5c60:	701a      	strb	r2, [r3, #0]
    5c62:	e01d      	b.n	5ca0 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    5c64:	1cfb      	adds	r3, r7, #3
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	b25b      	sxtb	r3, r3
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	da0c      	bge.n	5c88 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	6819      	ldr	r1, [r3, #0]
    5c72:	230f      	movs	r3, #15
    5c74:	18fb      	adds	r3, r7, r3
    5c76:	781a      	ldrb	r2, [r3, #0]
    5c78:	230a      	movs	r3, #10
    5c7a:	33ff      	adds	r3, #255	; 0xff
    5c7c:	0152      	lsls	r2, r2, #5
    5c7e:	188a      	adds	r2, r1, r2
    5c80:	18d3      	adds	r3, r2, r3
    5c82:	2202      	movs	r2, #2
    5c84:	701a      	strb	r2, [r3, #0]
    5c86:	e00b      	b.n	5ca0 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	6819      	ldr	r1, [r3, #0]
    5c8c:	230f      	movs	r3, #15
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	781a      	ldrb	r2, [r3, #0]
    5c92:	230a      	movs	r3, #10
    5c94:	33ff      	adds	r3, #255	; 0xff
    5c96:	0152      	lsls	r2, r2, #5
    5c98:	188a      	adds	r2, r1, r2
    5c9a:	18d3      	adds	r3, r2, r3
    5c9c:	2201      	movs	r2, #1
    5c9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    5ca0:	1cbb      	adds	r3, r7, #2
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	2b01      	cmp	r3, #1
    5ca6:	d12f      	bne.n	5d08 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    5ca8:	230f      	movs	r3, #15
    5caa:	18fb      	adds	r3, r7, r3
    5cac:	781b      	ldrb	r3, [r3, #0]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d10c      	bne.n	5ccc <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	6819      	ldr	r1, [r3, #0]
    5cb6:	230f      	movs	r3, #15
    5cb8:	18fb      	adds	r3, r7, r3
    5cba:	781a      	ldrb	r2, [r3, #0]
    5cbc:	230a      	movs	r3, #10
    5cbe:	33ff      	adds	r3, #255	; 0xff
    5cc0:	0152      	lsls	r2, r2, #5
    5cc2:	188a      	adds	r2, r1, r2
    5cc4:	18d3      	adds	r3, r2, r3
    5cc6:	220c      	movs	r2, #12
    5cc8:	701a      	strb	r2, [r3, #0]
    5cca:	e01d      	b.n	5d08 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    5ccc:	1cfb      	adds	r3, r7, #3
    5cce:	781b      	ldrb	r3, [r3, #0]
    5cd0:	b25b      	sxtb	r3, r3
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	da0c      	bge.n	5cf0 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	6819      	ldr	r1, [r3, #0]
    5cda:	230f      	movs	r3, #15
    5cdc:	18fb      	adds	r3, r7, r3
    5cde:	781a      	ldrb	r2, [r3, #0]
    5ce0:	230a      	movs	r3, #10
    5ce2:	33ff      	adds	r3, #255	; 0xff
    5ce4:	0152      	lsls	r2, r2, #5
    5ce6:	188a      	adds	r2, r1, r2
    5ce8:	18d3      	adds	r3, r2, r3
    5cea:	2208      	movs	r2, #8
    5cec:	701a      	strb	r2, [r3, #0]
    5cee:	e00b      	b.n	5d08 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	6819      	ldr	r1, [r3, #0]
    5cf4:	230f      	movs	r3, #15
    5cf6:	18fb      	adds	r3, r7, r3
    5cf8:	781a      	ldrb	r2, [r3, #0]
    5cfa:	230a      	movs	r3, #10
    5cfc:	33ff      	adds	r3, #255	; 0xff
    5cfe:	0152      	lsls	r2, r2, #5
    5d00:	188a      	adds	r2, r1, r2
    5d02:	18d3      	adds	r3, r2, r3
    5d04:	2204      	movs	r2, #4
    5d06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    5d08:	1cbb      	adds	r3, r7, #2
    5d0a:	781b      	ldrb	r3, [r3, #0]
    5d0c:	2b02      	cmp	r3, #2
    5d0e:	d10b      	bne.n	5d28 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	6819      	ldr	r1, [r3, #0]
    5d14:	230f      	movs	r3, #15
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	781a      	ldrb	r2, [r3, #0]
    5d1a:	230a      	movs	r3, #10
    5d1c:	33ff      	adds	r3, #255	; 0xff
    5d1e:	0152      	lsls	r2, r2, #5
    5d20:	188a      	adds	r2, r1, r2
    5d22:	18d3      	adds	r3, r2, r3
    5d24:	2210      	movs	r2, #16
    5d26:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5d28:	1cbb      	adds	r3, r7, #2
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	2b03      	cmp	r3, #3
    5d2e:	d11d      	bne.n	5d6c <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    5d30:	1cfb      	adds	r3, r7, #3
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	b25b      	sxtb	r3, r3
    5d36:	2b00      	cmp	r3, #0
    5d38:	da0c      	bge.n	5d54 <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    5d3a:	687b      	ldr	r3, [r7, #4]
    5d3c:	6819      	ldr	r1, [r3, #0]
    5d3e:	230f      	movs	r3, #15
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	781a      	ldrb	r2, [r3, #0]
    5d44:	230a      	movs	r3, #10
    5d46:	33ff      	adds	r3, #255	; 0xff
    5d48:	0152      	lsls	r2, r2, #5
    5d4a:	188a      	adds	r2, r1, r2
    5d4c:	18d3      	adds	r3, r2, r3
    5d4e:	2240      	movs	r2, #64	; 0x40
    5d50:	701a      	strb	r2, [r3, #0]
    5d52:	e00b      	b.n	5d6c <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	6819      	ldr	r1, [r3, #0]
    5d58:	230f      	movs	r3, #15
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	781a      	ldrb	r2, [r3, #0]
    5d5e:	230a      	movs	r3, #10
    5d60:	33ff      	adds	r3, #255	; 0xff
    5d62:	0152      	lsls	r2, r2, #5
    5d64:	188a      	adds	r2, r1, r2
    5d66:	18d3      	adds	r3, r2, r3
    5d68:	2220      	movs	r2, #32
    5d6a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    5d6c:	2300      	movs	r3, #0
}
    5d6e:	0018      	movs	r0, r3
    5d70:	46bd      	mov	sp, r7
    5d72:	b004      	add	sp, #16
    5d74:	bd80      	pop	{r7, pc}
    5d76:	46c0      	nop			; (mov r8, r8)
    5d78:	000138f8 	.word	0x000138f8

00005d7c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	b084      	sub	sp, #16
    5d80:	af00      	add	r7, sp, #0
    5d82:	6078      	str	r0, [r7, #4]
    5d84:	0008      	movs	r0, r1
    5d86:	0011      	movs	r1, r2
    5d88:	1cfb      	adds	r3, r7, #3
    5d8a:	1c02      	adds	r2, r0, #0
    5d8c:	701a      	strb	r2, [r3, #0]
    5d8e:	1cbb      	adds	r3, r7, #2
    5d90:	1c0a      	adds	r2, r1, #0
    5d92:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5d94:	230f      	movs	r3, #15
    5d96:	18fb      	adds	r3, r7, r3
    5d98:	1cfa      	adds	r2, r7, #3
    5d9a:	7812      	ldrb	r2, [r2, #0]
    5d9c:	210f      	movs	r1, #15
    5d9e:	400a      	ands	r2, r1
    5da0:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5da2:	230f      	movs	r3, #15
    5da4:	18fb      	adds	r3, r7, r3
    5da6:	781a      	ldrb	r2, [r3, #0]
    5da8:	230f      	movs	r3, #15
    5daa:	18fb      	adds	r3, r7, r3
    5dac:	7819      	ldrb	r1, [r3, #0]
    5dae:	6878      	ldr	r0, [r7, #4]
    5db0:	23b0      	movs	r3, #176	; 0xb0
    5db2:	005b      	lsls	r3, r3, #1
    5db4:	1841      	adds	r1, r0, r1
    5db6:	18cb      	adds	r3, r1, r3
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	b25b      	sxtb	r3, r3
    5dbc:	1cb9      	adds	r1, r7, #2
    5dbe:	7809      	ldrb	r1, [r1, #0]
    5dc0:	4856      	ldr	r0, [pc, #344]	; (5f1c <usb_device_endpoint_disable_callback+0x1a0>)
    5dc2:	5c41      	ldrb	r1, [r0, r1]
    5dc4:	b249      	sxtb	r1, r1
    5dc6:	43c9      	mvns	r1, r1
    5dc8:	b249      	sxtb	r1, r1
    5dca:	400b      	ands	r3, r1
    5dcc:	b25b      	sxtb	r3, r3
    5dce:	b2d8      	uxtb	r0, r3
    5dd0:	6879      	ldr	r1, [r7, #4]
    5dd2:	23b0      	movs	r3, #176	; 0xb0
    5dd4:	005b      	lsls	r3, r3, #1
    5dd6:	188a      	adds	r2, r1, r2
    5dd8:	18d3      	adds	r3, r2, r3
    5dda:	1c02      	adds	r2, r0, #0
    5ddc:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5dde:	1cbb      	adds	r3, r7, #2
    5de0:	781b      	ldrb	r3, [r3, #0]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d12f      	bne.n	5e46 <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    5de6:	230f      	movs	r3, #15
    5de8:	18fb      	adds	r3, r7, r3
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	2b00      	cmp	r3, #0
    5dee:	d10c      	bne.n	5e0a <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	6819      	ldr	r1, [r3, #0]
    5df4:	230f      	movs	r3, #15
    5df6:	18fb      	adds	r3, r7, r3
    5df8:	781a      	ldrb	r2, [r3, #0]
    5dfa:	2384      	movs	r3, #132	; 0x84
    5dfc:	005b      	lsls	r3, r3, #1
    5dfe:	0152      	lsls	r2, r2, #5
    5e00:	188a      	adds	r2, r1, r2
    5e02:	18d3      	adds	r3, r2, r3
    5e04:	2203      	movs	r2, #3
    5e06:	701a      	strb	r2, [r3, #0]
    5e08:	e01d      	b.n	5e46 <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    5e0a:	1cfb      	adds	r3, r7, #3
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	b25b      	sxtb	r3, r3
    5e10:	2b00      	cmp	r3, #0
    5e12:	da0c      	bge.n	5e2e <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	6819      	ldr	r1, [r3, #0]
    5e18:	230f      	movs	r3, #15
    5e1a:	18fb      	adds	r3, r7, r3
    5e1c:	781a      	ldrb	r2, [r3, #0]
    5e1e:	2384      	movs	r3, #132	; 0x84
    5e20:	005b      	lsls	r3, r3, #1
    5e22:	0152      	lsls	r2, r2, #5
    5e24:	188a      	adds	r2, r1, r2
    5e26:	18d3      	adds	r3, r2, r3
    5e28:	2202      	movs	r2, #2
    5e2a:	701a      	strb	r2, [r3, #0]
    5e2c:	e00b      	b.n	5e46 <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	6819      	ldr	r1, [r3, #0]
    5e32:	230f      	movs	r3, #15
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	781a      	ldrb	r2, [r3, #0]
    5e38:	2384      	movs	r3, #132	; 0x84
    5e3a:	005b      	lsls	r3, r3, #1
    5e3c:	0152      	lsls	r2, r2, #5
    5e3e:	188a      	adds	r2, r1, r2
    5e40:	18d3      	adds	r3, r2, r3
    5e42:	2201      	movs	r2, #1
    5e44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    5e46:	1cbb      	adds	r3, r7, #2
    5e48:	781b      	ldrb	r3, [r3, #0]
    5e4a:	2b01      	cmp	r3, #1
    5e4c:	d12f      	bne.n	5eae <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    5e4e:	230f      	movs	r3, #15
    5e50:	18fb      	adds	r3, r7, r3
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	2b00      	cmp	r3, #0
    5e56:	d10c      	bne.n	5e72 <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	6819      	ldr	r1, [r3, #0]
    5e5c:	230f      	movs	r3, #15
    5e5e:	18fb      	adds	r3, r7, r3
    5e60:	781a      	ldrb	r2, [r3, #0]
    5e62:	2384      	movs	r3, #132	; 0x84
    5e64:	005b      	lsls	r3, r3, #1
    5e66:	0152      	lsls	r2, r2, #5
    5e68:	188a      	adds	r2, r1, r2
    5e6a:	18d3      	adds	r3, r2, r3
    5e6c:	220c      	movs	r2, #12
    5e6e:	701a      	strb	r2, [r3, #0]
    5e70:	e01d      	b.n	5eae <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    5e72:	1cfb      	adds	r3, r7, #3
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	b25b      	sxtb	r3, r3
    5e78:	2b00      	cmp	r3, #0
    5e7a:	da0c      	bge.n	5e96 <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	6819      	ldr	r1, [r3, #0]
    5e80:	230f      	movs	r3, #15
    5e82:	18fb      	adds	r3, r7, r3
    5e84:	781a      	ldrb	r2, [r3, #0]
    5e86:	2384      	movs	r3, #132	; 0x84
    5e88:	005b      	lsls	r3, r3, #1
    5e8a:	0152      	lsls	r2, r2, #5
    5e8c:	188a      	adds	r2, r1, r2
    5e8e:	18d3      	adds	r3, r2, r3
    5e90:	2208      	movs	r2, #8
    5e92:	701a      	strb	r2, [r3, #0]
    5e94:	e00b      	b.n	5eae <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	6819      	ldr	r1, [r3, #0]
    5e9a:	230f      	movs	r3, #15
    5e9c:	18fb      	adds	r3, r7, r3
    5e9e:	781a      	ldrb	r2, [r3, #0]
    5ea0:	2384      	movs	r3, #132	; 0x84
    5ea2:	005b      	lsls	r3, r3, #1
    5ea4:	0152      	lsls	r2, r2, #5
    5ea6:	188a      	adds	r2, r1, r2
    5ea8:	18d3      	adds	r3, r2, r3
    5eaa:	2204      	movs	r2, #4
    5eac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    5eae:	1cbb      	adds	r3, r7, #2
    5eb0:	781b      	ldrb	r3, [r3, #0]
    5eb2:	2b02      	cmp	r3, #2
    5eb4:	d10b      	bne.n	5ece <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	6819      	ldr	r1, [r3, #0]
    5eba:	230f      	movs	r3, #15
    5ebc:	18fb      	adds	r3, r7, r3
    5ebe:	781a      	ldrb	r2, [r3, #0]
    5ec0:	2384      	movs	r3, #132	; 0x84
    5ec2:	005b      	lsls	r3, r3, #1
    5ec4:	0152      	lsls	r2, r2, #5
    5ec6:	188a      	adds	r2, r1, r2
    5ec8:	18d3      	adds	r3, r2, r3
    5eca:	2210      	movs	r2, #16
    5ecc:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5ece:	1cbb      	adds	r3, r7, #2
    5ed0:	781b      	ldrb	r3, [r3, #0]
    5ed2:	2b03      	cmp	r3, #3
    5ed4:	d11d      	bne.n	5f12 <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    5ed6:	1cfb      	adds	r3, r7, #3
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	b25b      	sxtb	r3, r3
    5edc:	2b00      	cmp	r3, #0
    5ede:	da0c      	bge.n	5efa <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	6819      	ldr	r1, [r3, #0]
    5ee4:	230f      	movs	r3, #15
    5ee6:	18fb      	adds	r3, r7, r3
    5ee8:	781a      	ldrb	r2, [r3, #0]
    5eea:	2384      	movs	r3, #132	; 0x84
    5eec:	005b      	lsls	r3, r3, #1
    5eee:	0152      	lsls	r2, r2, #5
    5ef0:	188a      	adds	r2, r1, r2
    5ef2:	18d3      	adds	r3, r2, r3
    5ef4:	2240      	movs	r2, #64	; 0x40
    5ef6:	701a      	strb	r2, [r3, #0]
    5ef8:	e00b      	b.n	5f12 <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	6819      	ldr	r1, [r3, #0]
    5efe:	230f      	movs	r3, #15
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	781a      	ldrb	r2, [r3, #0]
    5f04:	2384      	movs	r3, #132	; 0x84
    5f06:	005b      	lsls	r3, r3, #1
    5f08:	0152      	lsls	r2, r2, #5
    5f0a:	188a      	adds	r2, r1, r2
    5f0c:	18d3      	adds	r3, r2, r3
    5f0e:	2220      	movs	r2, #32
    5f10:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    5f12:	2300      	movs	r3, #0
}
    5f14:	0018      	movs	r0, r3
    5f16:	46bd      	mov	sp, r7
    5f18:	b004      	add	sp, #16
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	000138f8 	.word	0x000138f8

00005f20 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	2200      	movs	r2, #0
    5f2c:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	2200      	movs	r2, #0
    5f32:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	2200      	movs	r2, #0
    5f38:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	2201      	movs	r2, #1
    5f3e:	70da      	strb	r2, [r3, #3]
}
    5f40:	46c0      	nop			; (mov r8, r8)
    5f42:	46bd      	mov	sp, r7
    5f44:	b002      	add	sp, #8
    5f46:	bd80      	pop	{r7, pc}

00005f48 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    5f48:	b590      	push	{r4, r7, lr}
    5f4a:	b085      	sub	sp, #20
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
    5f50:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    5f52:	683b      	ldr	r3, [r7, #0]
    5f54:	781a      	ldrb	r2, [r3, #0]
    5f56:	230f      	movs	r3, #15
    5f58:	18fb      	adds	r3, r7, r3
    5f5a:	210f      	movs	r1, #15
    5f5c:	400a      	ands	r2, r1
    5f5e:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    5f60:	683b      	ldr	r3, [r7, #0]
    5f62:	781b      	ldrb	r3, [r3, #0]
    5f64:	b25b      	sxtb	r3, r3
    5f66:	b2db      	uxtb	r3, r3
    5f68:	09db      	lsrs	r3, r3, #7
    5f6a:	b2da      	uxtb	r2, r3
    5f6c:	230e      	movs	r3, #14
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    5f72:	683b      	ldr	r3, [r7, #0]
    5f74:	78db      	ldrb	r3, [r3, #3]
    5f76:	2b04      	cmp	r3, #4
    5f78:	d900      	bls.n	5f7c <usb_device_endpoint_set_config+0x34>
    5f7a:	e200      	b.n	637e <usb_device_endpoint_set_config+0x436>
    5f7c:	009a      	lsls	r2, r3, #2
    5f7e:	4be4      	ldr	r3, [pc, #912]	; (6310 <usb_device_endpoint_set_config+0x3c8>)
    5f80:	18d3      	adds	r3, r2, r3
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	220f      	movs	r2, #15
    5f8c:	18ba      	adds	r2, r7, r2
    5f8e:	7812      	ldrb	r2, [r2, #0]
    5f90:	3208      	adds	r2, #8
    5f92:	0152      	lsls	r2, r2, #5
    5f94:	2100      	movs	r1, #0
    5f96:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    5f98:	2300      	movs	r3, #0
    5f9a:	e249      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	681b      	ldr	r3, [r3, #0]
    5fa0:	220f      	movs	r2, #15
    5fa2:	18ba      	adds	r2, r7, r2
    5fa4:	7812      	ldrb	r2, [r2, #0]
    5fa6:	3208      	adds	r2, #8
    5fa8:	0152      	lsls	r2, r2, #5
    5faa:	5cd3      	ldrb	r3, [r2, r3]
    5fac:	b2db      	uxtb	r3, r3
    5fae:	001a      	movs	r2, r3
    5fb0:	2307      	movs	r3, #7
    5fb2:	4013      	ands	r3, r2
    5fb4:	d130      	bne.n	6018 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    5fb6:	687b      	ldr	r3, [r7, #4]
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	220f      	movs	r2, #15
    5fbc:	18ba      	adds	r2, r7, r2
    5fbe:	7812      	ldrb	r2, [r2, #0]
    5fc0:	3208      	adds	r2, #8
    5fc2:	0152      	lsls	r2, r2, #5
    5fc4:	5cd3      	ldrb	r3, [r2, r3]
    5fc6:	b2db      	uxtb	r3, r3
    5fc8:	001a      	movs	r2, r3
    5fca:	2370      	movs	r3, #112	; 0x70
    5fcc:	4013      	ands	r3, r2
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5fce:	d123      	bne.n	6018 <usb_device_endpoint_set_config+0xd0>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	220f      	movs	r2, #15
    5fd6:	18ba      	adds	r2, r7, r2
    5fd8:	7812      	ldrb	r2, [r2, #0]
    5fda:	3208      	adds	r2, #8
    5fdc:	0152      	lsls	r2, r2, #5
    5fde:	2111      	movs	r1, #17
    5fe0:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	681a      	ldr	r2, [r3, #0]
    5fe6:	230f      	movs	r3, #15
    5fe8:	18fb      	adds	r3, r7, r3
    5fea:	781b      	ldrb	r3, [r3, #0]
    5fec:	3308      	adds	r3, #8
    5fee:	015b      	lsls	r3, r3, #5
    5ff0:	18d3      	adds	r3, r2, r3
    5ff2:	3305      	adds	r3, #5
    5ff4:	2240      	movs	r2, #64	; 0x40
    5ff6:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	681a      	ldr	r2, [r3, #0]
    5ffc:	230f      	movs	r3, #15
    5ffe:	18fb      	adds	r3, r7, r3
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	3308      	adds	r3, #8
    6004:	015b      	lsls	r3, r3, #5
    6006:	18d3      	adds	r3, r2, r3
    6008:	3304      	adds	r3, #4
    600a:	2280      	movs	r2, #128	; 0x80
    600c:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    600e:	683b      	ldr	r3, [r7, #0]
    6010:	789b      	ldrb	r3, [r3, #2]
    6012:	2b00      	cmp	r3, #0
    6014:	d102      	bne.n	601c <usb_device_endpoint_set_config+0xd4>
    6016:	e028      	b.n	606a <usb_device_endpoint_set_config+0x122>
				return STATUS_ERR_DENIED;
    6018:	231c      	movs	r3, #28
    601a:	e209      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    601c:	230f      	movs	r3, #15
    601e:	18fb      	adds	r3, r7, r3
    6020:	7818      	ldrb	r0, [r3, #0]
    6022:	230f      	movs	r3, #15
    6024:	18fb      	adds	r3, r7, r3
    6026:	781b      	ldrb	r3, [r3, #0]
    6028:	4aba      	ldr	r2, [pc, #744]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    602a:	015b      	lsls	r3, r3, #5
    602c:	18d3      	adds	r3, r2, r3
    602e:	3304      	adds	r3, #4
    6030:	681b      	ldr	r3, [r3, #0]
    6032:	2280      	movs	r2, #128	; 0x80
    6034:	0612      	lsls	r2, r2, #24
    6036:	431a      	orrs	r2, r3
    6038:	49b6      	ldr	r1, [pc, #728]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    603a:	0143      	lsls	r3, r0, #5
    603c:	18cb      	adds	r3, r1, r3
    603e:	3304      	adds	r3, #4
    6040:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6042:	230f      	movs	r3, #15
    6044:	18fb      	adds	r3, r7, r3
    6046:	7818      	ldrb	r0, [r3, #0]
    6048:	230f      	movs	r3, #15
    604a:	18fb      	adds	r3, r7, r3
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	4ab1      	ldr	r2, [pc, #708]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    6050:	015b      	lsls	r3, r3, #5
    6052:	18d3      	adds	r3, r2, r3
    6054:	3314      	adds	r3, #20
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	2280      	movs	r2, #128	; 0x80
    605a:	0612      	lsls	r2, r2, #24
    605c:	431a      	orrs	r2, r3
    605e:	49ad      	ldr	r1, [pc, #692]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    6060:	0143      	lsls	r3, r0, #5
    6062:	18cb      	adds	r3, r1, r3
    6064:	3314      	adds	r3, #20
    6066:	601a      	str	r2, [r3, #0]
    6068:	e023      	b.n	60b2 <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    606a:	230f      	movs	r3, #15
    606c:	18fb      	adds	r3, r7, r3
    606e:	7818      	ldrb	r0, [r3, #0]
    6070:	230f      	movs	r3, #15
    6072:	18fb      	adds	r3, r7, r3
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	4aa7      	ldr	r2, [pc, #668]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    6078:	015b      	lsls	r3, r3, #5
    607a:	18d3      	adds	r3, r2, r3
    607c:	3304      	adds	r3, #4
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	005b      	lsls	r3, r3, #1
    6082:	085a      	lsrs	r2, r3, #1
    6084:	49a3      	ldr	r1, [pc, #652]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    6086:	0143      	lsls	r3, r0, #5
    6088:	18cb      	adds	r3, r1, r3
    608a:	3304      	adds	r3, #4
    608c:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    608e:	230f      	movs	r3, #15
    6090:	18fb      	adds	r3, r7, r3
    6092:	7818      	ldrb	r0, [r3, #0]
    6094:	230f      	movs	r3, #15
    6096:	18fb      	adds	r3, r7, r3
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	4a9e      	ldr	r2, [pc, #632]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    609c:	015b      	lsls	r3, r3, #5
    609e:	18d3      	adds	r3, r2, r3
    60a0:	3314      	adds	r3, #20
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	005b      	lsls	r3, r3, #1
    60a6:	085a      	lsrs	r2, r3, #1
    60a8:	499a      	ldr	r1, [pc, #616]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    60aa:	0143      	lsls	r3, r0, #5
    60ac:	18cb      	adds	r3, r1, r3
    60ae:	3314      	adds	r3, #20
    60b0:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    60b2:	230f      	movs	r3, #15
    60b4:	18fb      	adds	r3, r7, r3
    60b6:	781b      	ldrb	r3, [r3, #0]
    60b8:	683a      	ldr	r2, [r7, #0]
    60ba:	7852      	ldrb	r2, [r2, #1]
    60bc:	1c11      	adds	r1, r2, #0
    60be:	2207      	movs	r2, #7
    60c0:	400a      	ands	r2, r1
    60c2:	b2d1      	uxtb	r1, r2
    60c4:	4a93      	ldr	r2, [pc, #588]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    60c6:	015b      	lsls	r3, r3, #5
    60c8:	18d3      	adds	r3, r2, r3
    60ca:	685a      	ldr	r2, [r3, #4]
    60cc:	2007      	movs	r0, #7
    60ce:	4001      	ands	r1, r0
    60d0:	0709      	lsls	r1, r1, #28
    60d2:	4891      	ldr	r0, [pc, #580]	; (6318 <usb_device_endpoint_set_config+0x3d0>)
    60d4:	4002      	ands	r2, r0
    60d6:	430a      	orrs	r2, r1
    60d8:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    60da:	230f      	movs	r3, #15
    60dc:	18fb      	adds	r3, r7, r3
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	683a      	ldr	r2, [r7, #0]
    60e2:	7852      	ldrb	r2, [r2, #1]
    60e4:	1c11      	adds	r1, r2, #0
    60e6:	2207      	movs	r2, #7
    60e8:	400a      	ands	r2, r1
    60ea:	b2d1      	uxtb	r1, r2
    60ec:	4a89      	ldr	r2, [pc, #548]	; (6314 <usb_device_endpoint_set_config+0x3cc>)
    60ee:	015b      	lsls	r3, r3, #5
    60f0:	18d3      	adds	r3, r2, r3
    60f2:	3310      	adds	r3, #16
    60f4:	685a      	ldr	r2, [r3, #4]
    60f6:	2007      	movs	r0, #7
    60f8:	4001      	ands	r1, r0
    60fa:	0709      	lsls	r1, r1, #28
    60fc:	4886      	ldr	r0, [pc, #536]	; (6318 <usb_device_endpoint_set_config+0x3d0>)
    60fe:	4002      	ands	r2, r0
    6100:	430a      	orrs	r2, r1
    6102:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    6104:	2300      	movs	r3, #0
    6106:	e193      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6108:	230e      	movs	r3, #14
    610a:	18fb      	adds	r3, r7, r3
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	2b00      	cmp	r3, #0
    6110:	d030      	beq.n	6174 <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	681b      	ldr	r3, [r3, #0]
    6116:	220f      	movs	r2, #15
    6118:	18ba      	adds	r2, r7, r2
    611a:	7812      	ldrb	r2, [r2, #0]
    611c:	3208      	adds	r2, #8
    611e:	0152      	lsls	r2, r2, #5
    6120:	5cd3      	ldrb	r3, [r2, r3]
    6122:	b2db      	uxtb	r3, r3
    6124:	001a      	movs	r2, r3
    6126:	2370      	movs	r3, #112	; 0x70
    6128:	4013      	ands	r3, r2
    612a:	d121      	bne.n	6170 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	681a      	ldr	r2, [r3, #0]
    6130:	230f      	movs	r3, #15
    6132:	18fb      	adds	r3, r7, r3
    6134:	7819      	ldrb	r1, [r3, #0]
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	681b      	ldr	r3, [r3, #0]
    613a:	200f      	movs	r0, #15
    613c:	1838      	adds	r0, r7, r0
    613e:	7800      	ldrb	r0, [r0, #0]
    6140:	3008      	adds	r0, #8
    6142:	0140      	lsls	r0, r0, #5
    6144:	5cc3      	ldrb	r3, [r0, r3]
    6146:	b2db      	uxtb	r3, r3
    6148:	2020      	movs	r0, #32
    614a:	4303      	orrs	r3, r0
    614c:	b2d8      	uxtb	r0, r3
    614e:	000b      	movs	r3, r1
    6150:	3308      	adds	r3, #8
    6152:	015b      	lsls	r3, r3, #5
    6154:	1c01      	adds	r1, r0, #0
    6156:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	681a      	ldr	r2, [r3, #0]
    615c:	230f      	movs	r3, #15
    615e:	18fb      	adds	r3, r7, r3
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	3308      	adds	r3, #8
    6164:	015b      	lsls	r3, r3, #5
    6166:	18d3      	adds	r3, r2, r3
    6168:	3304      	adds	r3, #4
    616a:	2280      	movs	r2, #128	; 0x80
    616c:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    616e:	e107      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    6170:	231c      	movs	r3, #28
    6172:	e15d      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	220f      	movs	r2, #15
    617a:	18ba      	adds	r2, r7, r2
    617c:	7812      	ldrb	r2, [r2, #0]
    617e:	3208      	adds	r2, #8
    6180:	0152      	lsls	r2, r2, #5
    6182:	5cd3      	ldrb	r3, [r2, r3]
    6184:	b2db      	uxtb	r3, r3
    6186:	001a      	movs	r2, r3
    6188:	2307      	movs	r3, #7
    618a:	4013      	ands	r3, r2
    618c:	d121      	bne.n	61d2 <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	681a      	ldr	r2, [r3, #0]
    6192:	230f      	movs	r3, #15
    6194:	18fb      	adds	r3, r7, r3
    6196:	7819      	ldrb	r1, [r3, #0]
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	200f      	movs	r0, #15
    619e:	1838      	adds	r0, r7, r0
    61a0:	7800      	ldrb	r0, [r0, #0]
    61a2:	3008      	adds	r0, #8
    61a4:	0140      	lsls	r0, r0, #5
    61a6:	5cc3      	ldrb	r3, [r0, r3]
    61a8:	b2db      	uxtb	r3, r3
    61aa:	2002      	movs	r0, #2
    61ac:	4303      	orrs	r3, r0
    61ae:	b2d8      	uxtb	r0, r3
    61b0:	000b      	movs	r3, r1
    61b2:	3308      	adds	r3, #8
    61b4:	015b      	lsls	r3, r3, #5
    61b6:	1c01      	adds	r1, r0, #0
    61b8:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	681a      	ldr	r2, [r3, #0]
    61be:	230f      	movs	r3, #15
    61c0:	18fb      	adds	r3, r7, r3
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	3308      	adds	r3, #8
    61c6:	015b      	lsls	r3, r3, #5
    61c8:	18d3      	adds	r3, r2, r3
    61ca:	3305      	adds	r3, #5
    61cc:	2240      	movs	r2, #64	; 0x40
    61ce:	701a      	strb	r2, [r3, #0]
			break;
    61d0:	e0d6      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    61d2:	231c      	movs	r3, #28
    61d4:	e12c      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    61d6:	230e      	movs	r3, #14
    61d8:	18fb      	adds	r3, r7, r3
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	2b00      	cmp	r3, #0
    61de:	d030      	beq.n	6242 <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	220f      	movs	r2, #15
    61e6:	18ba      	adds	r2, r7, r2
    61e8:	7812      	ldrb	r2, [r2, #0]
    61ea:	3208      	adds	r2, #8
    61ec:	0152      	lsls	r2, r2, #5
    61ee:	5cd3      	ldrb	r3, [r2, r3]
    61f0:	b2db      	uxtb	r3, r3
    61f2:	001a      	movs	r2, r3
    61f4:	2370      	movs	r3, #112	; 0x70
    61f6:	4013      	ands	r3, r2
    61f8:	d121      	bne.n	623e <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    61fa:	687b      	ldr	r3, [r7, #4]
    61fc:	681a      	ldr	r2, [r3, #0]
    61fe:	230f      	movs	r3, #15
    6200:	18fb      	adds	r3, r7, r3
    6202:	7819      	ldrb	r1, [r3, #0]
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	200f      	movs	r0, #15
    620a:	1838      	adds	r0, r7, r0
    620c:	7800      	ldrb	r0, [r0, #0]
    620e:	3008      	adds	r0, #8
    6210:	0140      	lsls	r0, r0, #5
    6212:	5cc3      	ldrb	r3, [r0, r3]
    6214:	b2db      	uxtb	r3, r3
    6216:	2030      	movs	r0, #48	; 0x30
    6218:	4303      	orrs	r3, r0
    621a:	b2d8      	uxtb	r0, r3
    621c:	000b      	movs	r3, r1
    621e:	3308      	adds	r3, #8
    6220:	015b      	lsls	r3, r3, #5
    6222:	1c01      	adds	r1, r0, #0
    6224:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	681a      	ldr	r2, [r3, #0]
    622a:	230f      	movs	r3, #15
    622c:	18fb      	adds	r3, r7, r3
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	3308      	adds	r3, #8
    6232:	015b      	lsls	r3, r3, #5
    6234:	18d3      	adds	r3, r2, r3
    6236:	3304      	adds	r3, #4
    6238:	2280      	movs	r2, #128	; 0x80
    623a:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    623c:	e0a0      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    623e:	231c      	movs	r3, #28
    6240:	e0f6      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	220f      	movs	r2, #15
    6248:	18ba      	adds	r2, r7, r2
    624a:	7812      	ldrb	r2, [r2, #0]
    624c:	3208      	adds	r2, #8
    624e:	0152      	lsls	r2, r2, #5
    6250:	5cd3      	ldrb	r3, [r2, r3]
    6252:	b2db      	uxtb	r3, r3
    6254:	001a      	movs	r2, r3
    6256:	2307      	movs	r3, #7
    6258:	4013      	ands	r3, r2
    625a:	d121      	bne.n	62a0 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	681a      	ldr	r2, [r3, #0]
    6260:	230f      	movs	r3, #15
    6262:	18fb      	adds	r3, r7, r3
    6264:	7819      	ldrb	r1, [r3, #0]
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	681b      	ldr	r3, [r3, #0]
    626a:	200f      	movs	r0, #15
    626c:	1838      	adds	r0, r7, r0
    626e:	7800      	ldrb	r0, [r0, #0]
    6270:	3008      	adds	r0, #8
    6272:	0140      	lsls	r0, r0, #5
    6274:	5cc3      	ldrb	r3, [r0, r3]
    6276:	b2db      	uxtb	r3, r3
    6278:	2003      	movs	r0, #3
    627a:	4303      	orrs	r3, r0
    627c:	b2d8      	uxtb	r0, r3
    627e:	000b      	movs	r3, r1
    6280:	3308      	adds	r3, #8
    6282:	015b      	lsls	r3, r3, #5
    6284:	1c01      	adds	r1, r0, #0
    6286:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	681a      	ldr	r2, [r3, #0]
    628c:	230f      	movs	r3, #15
    628e:	18fb      	adds	r3, r7, r3
    6290:	781b      	ldrb	r3, [r3, #0]
    6292:	3308      	adds	r3, #8
    6294:	015b      	lsls	r3, r3, #5
    6296:	18d3      	adds	r3, r2, r3
    6298:	3305      	adds	r3, #5
    629a:	2240      	movs	r2, #64	; 0x40
    629c:	701a      	strb	r2, [r3, #0]
			break;
    629e:	e06f      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    62a0:	231c      	movs	r3, #28
    62a2:	e0c5      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    62a4:	230e      	movs	r3, #14
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	2b00      	cmp	r3, #0
    62ac:	d036      	beq.n	631c <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	220f      	movs	r2, #15
    62b4:	18ba      	adds	r2, r7, r2
    62b6:	7812      	ldrb	r2, [r2, #0]
    62b8:	3208      	adds	r2, #8
    62ba:	0152      	lsls	r2, r2, #5
    62bc:	5cd3      	ldrb	r3, [r2, r3]
    62be:	b2db      	uxtb	r3, r3
    62c0:	001a      	movs	r2, r3
    62c2:	2370      	movs	r3, #112	; 0x70
    62c4:	4013      	ands	r3, r2
    62c6:	d121      	bne.n	630c <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	681a      	ldr	r2, [r3, #0]
    62cc:	230f      	movs	r3, #15
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	7819      	ldrb	r1, [r3, #0]
    62d2:	687b      	ldr	r3, [r7, #4]
    62d4:	681b      	ldr	r3, [r3, #0]
    62d6:	200f      	movs	r0, #15
    62d8:	1838      	adds	r0, r7, r0
    62da:	7800      	ldrb	r0, [r0, #0]
    62dc:	3008      	adds	r0, #8
    62de:	0140      	lsls	r0, r0, #5
    62e0:	5cc3      	ldrb	r3, [r0, r3]
    62e2:	b2db      	uxtb	r3, r3
    62e4:	2040      	movs	r0, #64	; 0x40
    62e6:	4303      	orrs	r3, r0
    62e8:	b2d8      	uxtb	r0, r3
    62ea:	000b      	movs	r3, r1
    62ec:	3308      	adds	r3, #8
    62ee:	015b      	lsls	r3, r3, #5
    62f0:	1c01      	adds	r1, r0, #0
    62f2:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	681a      	ldr	r2, [r3, #0]
    62f8:	230f      	movs	r3, #15
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	3308      	adds	r3, #8
    6300:	015b      	lsls	r3, r3, #5
    6302:	18d3      	adds	r3, r2, r3
    6304:	3304      	adds	r3, #4
    6306:	2280      	movs	r2, #128	; 0x80
    6308:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    630a:	e039      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    630c:	231c      	movs	r3, #28
    630e:	e08f      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>
    6310:	000138fc 	.word	0x000138fc
    6314:	20003f4c 	.word	0x20003f4c
    6318:	8fffffff 	.word	0x8fffffff
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    631c:	687b      	ldr	r3, [r7, #4]
    631e:	681b      	ldr	r3, [r3, #0]
    6320:	220f      	movs	r2, #15
    6322:	18ba      	adds	r2, r7, r2
    6324:	7812      	ldrb	r2, [r2, #0]
    6326:	3208      	adds	r2, #8
    6328:	0152      	lsls	r2, r2, #5
    632a:	5cd3      	ldrb	r3, [r2, r3]
    632c:	b2db      	uxtb	r3, r3
    632e:	001a      	movs	r2, r3
    6330:	2307      	movs	r3, #7
    6332:	4013      	ands	r3, r2
    6334:	d121      	bne.n	637a <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	681a      	ldr	r2, [r3, #0]
    633a:	230f      	movs	r3, #15
    633c:	18fb      	adds	r3, r7, r3
    633e:	7819      	ldrb	r1, [r3, #0]
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	200f      	movs	r0, #15
    6346:	1838      	adds	r0, r7, r0
    6348:	7800      	ldrb	r0, [r0, #0]
    634a:	3008      	adds	r0, #8
    634c:	0140      	lsls	r0, r0, #5
    634e:	5cc3      	ldrb	r3, [r0, r3]
    6350:	b2db      	uxtb	r3, r3
    6352:	2004      	movs	r0, #4
    6354:	4303      	orrs	r3, r0
    6356:	b2d8      	uxtb	r0, r3
    6358:	000b      	movs	r3, r1
    635a:	3308      	adds	r3, #8
    635c:	015b      	lsls	r3, r3, #5
    635e:	1c01      	adds	r1, r0, #0
    6360:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	681a      	ldr	r2, [r3, #0]
    6366:	230f      	movs	r3, #15
    6368:	18fb      	adds	r3, r7, r3
    636a:	781b      	ldrb	r3, [r3, #0]
    636c:	3308      	adds	r3, #8
    636e:	015b      	lsls	r3, r3, #5
    6370:	18d3      	adds	r3, r2, r3
    6372:	3305      	adds	r3, #5
    6374:	2240      	movs	r2, #64	; 0x40
    6376:	701a      	strb	r2, [r3, #0]
			break;
    6378:	e002      	b.n	6380 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e058      	b.n	6430 <usb_device_endpoint_set_config+0x4e8>

		default:
			break;
    637e:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6380:	230f      	movs	r3, #15
    6382:	18fb      	adds	r3, r7, r3
    6384:	7818      	ldrb	r0, [r3, #0]
    6386:	230e      	movs	r3, #14
    6388:	18fb      	adds	r3, r7, r3
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	683a      	ldr	r2, [r7, #0]
    638e:	7852      	ldrb	r2, [r2, #1]
    6390:	1c11      	adds	r1, r2, #0
    6392:	2207      	movs	r2, #7
    6394:	400a      	ands	r2, r1
    6396:	b2d1      	uxtb	r1, r2
    6398:	4a27      	ldr	r2, [pc, #156]	; (6438 <usb_device_endpoint_set_config+0x4f0>)
    639a:	0040      	lsls	r0, r0, #1
    639c:	18c3      	adds	r3, r0, r3
    639e:	011b      	lsls	r3, r3, #4
    63a0:	18d3      	adds	r3, r2, r3
    63a2:	685a      	ldr	r2, [r3, #4]
    63a4:	2007      	movs	r0, #7
    63a6:	4001      	ands	r1, r0
    63a8:	0709      	lsls	r1, r1, #28
    63aa:	4824      	ldr	r0, [pc, #144]	; (643c <usb_device_endpoint_set_config+0x4f4>)
    63ac:	4002      	ands	r2, r0
    63ae:	430a      	orrs	r2, r1
    63b0:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    63b2:	683b      	ldr	r3, [r7, #0]
    63b4:	789b      	ldrb	r3, [r3, #2]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d01d      	beq.n	63f6 <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    63ba:	230f      	movs	r3, #15
    63bc:	18fb      	adds	r3, r7, r3
    63be:	781c      	ldrb	r4, [r3, #0]
    63c0:	230e      	movs	r3, #14
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	7818      	ldrb	r0, [r3, #0]
    63c6:	230f      	movs	r3, #15
    63c8:	18fb      	adds	r3, r7, r3
    63ca:	7819      	ldrb	r1, [r3, #0]
    63cc:	230e      	movs	r3, #14
    63ce:	18fb      	adds	r3, r7, r3
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	4a19      	ldr	r2, [pc, #100]	; (6438 <usb_device_endpoint_set_config+0x4f0>)
    63d4:	0049      	lsls	r1, r1, #1
    63d6:	18cb      	adds	r3, r1, r3
    63d8:	011b      	lsls	r3, r3, #4
    63da:	18d3      	adds	r3, r2, r3
    63dc:	3304      	adds	r3, #4
    63de:	681b      	ldr	r3, [r3, #0]
    63e0:	2280      	movs	r2, #128	; 0x80
    63e2:	0612      	lsls	r2, r2, #24
    63e4:	431a      	orrs	r2, r3
    63e6:	4914      	ldr	r1, [pc, #80]	; (6438 <usb_device_endpoint_set_config+0x4f0>)
    63e8:	0063      	lsls	r3, r4, #1
    63ea:	181b      	adds	r3, r3, r0
    63ec:	011b      	lsls	r3, r3, #4
    63ee:	18cb      	adds	r3, r1, r3
    63f0:	3304      	adds	r3, #4
    63f2:	601a      	str	r2, [r3, #0]
    63f4:	e01b      	b.n	642e <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    63f6:	230f      	movs	r3, #15
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	781c      	ldrb	r4, [r3, #0]
    63fc:	230e      	movs	r3, #14
    63fe:	18fb      	adds	r3, r7, r3
    6400:	7818      	ldrb	r0, [r3, #0]
    6402:	230f      	movs	r3, #15
    6404:	18fb      	adds	r3, r7, r3
    6406:	7819      	ldrb	r1, [r3, #0]
    6408:	230e      	movs	r3, #14
    640a:	18fb      	adds	r3, r7, r3
    640c:	781b      	ldrb	r3, [r3, #0]
    640e:	4a0a      	ldr	r2, [pc, #40]	; (6438 <usb_device_endpoint_set_config+0x4f0>)
    6410:	0049      	lsls	r1, r1, #1
    6412:	18cb      	adds	r3, r1, r3
    6414:	011b      	lsls	r3, r3, #4
    6416:	18d3      	adds	r3, r2, r3
    6418:	3304      	adds	r3, #4
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	005b      	lsls	r3, r3, #1
    641e:	085a      	lsrs	r2, r3, #1
    6420:	4905      	ldr	r1, [pc, #20]	; (6438 <usb_device_endpoint_set_config+0x4f0>)
    6422:	0063      	lsls	r3, r4, #1
    6424:	181b      	adds	r3, r3, r0
    6426:	011b      	lsls	r3, r3, #4
    6428:	18cb      	adds	r3, r1, r3
    642a:	3304      	adds	r3, #4
    642c:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    642e:	2300      	movs	r3, #0
}
    6430:	0018      	movs	r0, r3
    6432:	46bd      	mov	sp, r7
    6434:	b005      	add	sp, #20
    6436:	bd90      	pop	{r4, r7, pc}
    6438:	20003f4c 	.word	0x20003f4c
    643c:	8fffffff 	.word	0x8fffffff

00006440 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    6440:	b580      	push	{r7, lr}
    6442:	b084      	sub	sp, #16
    6444:	af00      	add	r7, sp, #0
    6446:	6078      	str	r0, [r7, #4]
    6448:	000a      	movs	r2, r1
    644a:	1cfb      	adds	r3, r7, #3
    644c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    644e:	230f      	movs	r3, #15
    6450:	18fb      	adds	r3, r7, r3
    6452:	1cfa      	adds	r2, r7, #3
    6454:	7812      	ldrb	r2, [r2, #0]
    6456:	210f      	movs	r1, #15
    6458:	400a      	ands	r2, r1
    645a:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    645c:	1cfb      	adds	r3, r7, #3
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	b25b      	sxtb	r3, r3
    6462:	2b00      	cmp	r3, #0
    6464:	da16      	bge.n	6494 <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6466:	687b      	ldr	r3, [r7, #4]
    6468:	681a      	ldr	r2, [r3, #0]
    646a:	230f      	movs	r3, #15
    646c:	18fb      	adds	r3, r7, r3
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	3308      	adds	r3, #8
    6472:	015b      	lsls	r3, r3, #5
    6474:	18d3      	adds	r3, r2, r3
    6476:	3304      	adds	r3, #4
    6478:	2280      	movs	r2, #128	; 0x80
    647a:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	681a      	ldr	r2, [r3, #0]
    6480:	230f      	movs	r3, #15
    6482:	18fb      	adds	r3, r7, r3
    6484:	781b      	ldrb	r3, [r3, #0]
    6486:	3308      	adds	r3, #8
    6488:	015b      	lsls	r3, r3, #5
    648a:	18d3      	adds	r3, r2, r3
    648c:	3307      	adds	r3, #7
    648e:	2202      	movs	r2, #2
    6490:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    6492:	e015      	b.n	64c0 <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	681a      	ldr	r2, [r3, #0]
    6498:	230f      	movs	r3, #15
    649a:	18fb      	adds	r3, r7, r3
    649c:	781b      	ldrb	r3, [r3, #0]
    649e:	3308      	adds	r3, #8
    64a0:	015b      	lsls	r3, r3, #5
    64a2:	18d3      	adds	r3, r2, r3
    64a4:	3305      	adds	r3, #5
    64a6:	2240      	movs	r2, #64	; 0x40
    64a8:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	681a      	ldr	r2, [r3, #0]
    64ae:	230f      	movs	r3, #15
    64b0:	18fb      	adds	r3, r7, r3
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	3308      	adds	r3, #8
    64b6:	015b      	lsls	r3, r3, #5
    64b8:	18d3      	adds	r3, r2, r3
    64ba:	3307      	adds	r3, #7
    64bc:	2201      	movs	r2, #1
    64be:	701a      	strb	r2, [r3, #0]
}
    64c0:	46c0      	nop			; (mov r8, r8)
    64c2:	46bd      	mov	sp, r7
    64c4:	b004      	add	sp, #16
    64c6:	bd80      	pop	{r7, pc}

000064c8 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    64c8:	b580      	push	{r7, lr}
    64ca:	b084      	sub	sp, #16
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
    64d0:	000a      	movs	r2, r1
    64d2:	1cfb      	adds	r3, r7, #3
    64d4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    64d6:	230f      	movs	r3, #15
    64d8:	18fb      	adds	r3, r7, r3
    64da:	1cfa      	adds	r2, r7, #3
    64dc:	7812      	ldrb	r2, [r2, #0]
    64de:	210f      	movs	r1, #15
    64e0:	400a      	ands	r2, r1
    64e2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    64e4:	1cfb      	adds	r3, r7, #3
    64e6:	781b      	ldrb	r3, [r3, #0]
    64e8:	b25b      	sxtb	r3, r3
    64ea:	2b00      	cmp	r3, #0
    64ec:	da11      	bge.n	6512 <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	681a      	ldr	r2, [r3, #0]
    64f2:	230f      	movs	r3, #15
    64f4:	18fb      	adds	r3, r7, r3
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	3308      	adds	r3, #8
    64fa:	015b      	lsls	r3, r3, #5
    64fc:	18d3      	adds	r3, r2, r3
    64fe:	3306      	adds	r3, #6
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	b2db      	uxtb	r3, r3
    6504:	001a      	movs	r2, r3
    6506:	2320      	movs	r3, #32
    6508:	4013      	ands	r3, r2
    650a:	1e5a      	subs	r2, r3, #1
    650c:	4193      	sbcs	r3, r2
    650e:	b2db      	uxtb	r3, r3
    6510:	e010      	b.n	6534 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	681a      	ldr	r2, [r3, #0]
    6516:	230f      	movs	r3, #15
    6518:	18fb      	adds	r3, r7, r3
    651a:	781b      	ldrb	r3, [r3, #0]
    651c:	3308      	adds	r3, #8
    651e:	015b      	lsls	r3, r3, #5
    6520:	18d3      	adds	r3, r2, r3
    6522:	3306      	adds	r3, #6
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	b2db      	uxtb	r3, r3
    6528:	001a      	movs	r2, r3
    652a:	2310      	movs	r3, #16
    652c:	4013      	ands	r3, r2
    652e:	1e5a      	subs	r2, r3, #1
    6530:	4193      	sbcs	r3, r2
    6532:	b2db      	uxtb	r3, r3
	}
}
    6534:	0018      	movs	r0, r3
    6536:	46bd      	mov	sp, r7
    6538:	b004      	add	sp, #16
    653a:	bd80      	pop	{r7, pc}

0000653c <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    653c:	b580      	push	{r7, lr}
    653e:	b084      	sub	sp, #16
    6540:	af00      	add	r7, sp, #0
    6542:	6078      	str	r0, [r7, #4]
    6544:	000a      	movs	r2, r1
    6546:	1cfb      	adds	r3, r7, #3
    6548:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    654a:	230f      	movs	r3, #15
    654c:	18fb      	adds	r3, r7, r3
    654e:	1cfa      	adds	r2, r7, #3
    6550:	7812      	ldrb	r2, [r2, #0]
    6552:	210f      	movs	r1, #15
    6554:	400a      	ands	r2, r1
    6556:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6558:	1cfb      	adds	r3, r7, #3
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	b25b      	sxtb	r3, r3
    655e:	2b00      	cmp	r3, #0
    6560:	da0b      	bge.n	657a <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    6562:	687b      	ldr	r3, [r7, #4]
    6564:	681a      	ldr	r2, [r3, #0]
    6566:	230f      	movs	r3, #15
    6568:	18fb      	adds	r3, r7, r3
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	3308      	adds	r3, #8
    656e:	015b      	lsls	r3, r3, #5
    6570:	18d3      	adds	r3, r2, r3
    6572:	3305      	adds	r3, #5
    6574:	2220      	movs	r2, #32
    6576:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    6578:	e00a      	b.n	6590 <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	681a      	ldr	r2, [r3, #0]
    657e:	230f      	movs	r3, #15
    6580:	18fb      	adds	r3, r7, r3
    6582:	781b      	ldrb	r3, [r3, #0]
    6584:	3308      	adds	r3, #8
    6586:	015b      	lsls	r3, r3, #5
    6588:	18d3      	adds	r3, r2, r3
    658a:	3305      	adds	r3, #5
    658c:	2210      	movs	r2, #16
    658e:	701a      	strb	r2, [r3, #0]
}
    6590:	46c0      	nop			; (mov r8, r8)
    6592:	46bd      	mov	sp, r7
    6594:	b004      	add	sp, #16
    6596:	bd80      	pop	{r7, pc}

00006598 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    6598:	b580      	push	{r7, lr}
    659a:	b084      	sub	sp, #16
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
    65a0:	000a      	movs	r2, r1
    65a2:	1cfb      	adds	r3, r7, #3
    65a4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    65a6:	230f      	movs	r3, #15
    65a8:	18fb      	adds	r3, r7, r3
    65aa:	1cfa      	adds	r2, r7, #3
    65ac:	7812      	ldrb	r2, [r2, #0]
    65ae:	210f      	movs	r1, #15
    65b0:	400a      	ands	r2, r1
    65b2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    65b4:	1cfb      	adds	r3, r7, #3
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	b25b      	sxtb	r3, r3
    65ba:	2b00      	cmp	r3, #0
    65bc:	da3f      	bge.n	663e <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	681a      	ldr	r2, [r3, #0]
    65c2:	230f      	movs	r3, #15
    65c4:	18fb      	adds	r3, r7, r3
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	3308      	adds	r3, #8
    65ca:	015b      	lsls	r3, r3, #5
    65cc:	18d3      	adds	r3, r2, r3
    65ce:	3306      	adds	r3, #6
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	b2db      	uxtb	r3, r3
    65d4:	001a      	movs	r2, r3
    65d6:	2320      	movs	r3, #32
    65d8:	4013      	ands	r3, r2
    65da:	d06f      	beq.n	66bc <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    65dc:	687b      	ldr	r3, [r7, #4]
    65de:	681a      	ldr	r2, [r3, #0]
    65e0:	230f      	movs	r3, #15
    65e2:	18fb      	adds	r3, r7, r3
    65e4:	781b      	ldrb	r3, [r3, #0]
    65e6:	3308      	adds	r3, #8
    65e8:	015b      	lsls	r3, r3, #5
    65ea:	18d3      	adds	r3, r2, r3
    65ec:	3304      	adds	r3, #4
    65ee:	2220      	movs	r2, #32
    65f0:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    65f2:	687b      	ldr	r3, [r7, #4]
    65f4:	681a      	ldr	r2, [r3, #0]
    65f6:	230f      	movs	r3, #15
    65f8:	18fb      	adds	r3, r7, r3
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	3308      	adds	r3, #8
    65fe:	015b      	lsls	r3, r3, #5
    6600:	18d3      	adds	r3, r2, r3
    6602:	3307      	adds	r3, #7
    6604:	781b      	ldrb	r3, [r3, #0]
    6606:	b2db      	uxtb	r3, r3
    6608:	001a      	movs	r2, r3
    660a:	2340      	movs	r3, #64	; 0x40
    660c:	4013      	ands	r3, r2
    660e:	d055      	beq.n	66bc <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	681a      	ldr	r2, [r3, #0]
    6614:	230f      	movs	r3, #15
    6616:	18fb      	adds	r3, r7, r3
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	3308      	adds	r3, #8
    661c:	015b      	lsls	r3, r3, #5
    661e:	18d3      	adds	r3, r2, r3
    6620:	3307      	adds	r3, #7
    6622:	2240      	movs	r2, #64	; 0x40
    6624:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	681a      	ldr	r2, [r3, #0]
    662a:	230f      	movs	r3, #15
    662c:	18fb      	adds	r3, r7, r3
    662e:	781b      	ldrb	r3, [r3, #0]
    6630:	3308      	adds	r3, #8
    6632:	015b      	lsls	r3, r3, #5
    6634:	18d3      	adds	r3, r2, r3
    6636:	3304      	adds	r3, #4
    6638:	2202      	movs	r2, #2
    663a:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    663c:	e03e      	b.n	66bc <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	681a      	ldr	r2, [r3, #0]
    6642:	230f      	movs	r3, #15
    6644:	18fb      	adds	r3, r7, r3
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	3308      	adds	r3, #8
    664a:	015b      	lsls	r3, r3, #5
    664c:	18d3      	adds	r3, r2, r3
    664e:	3306      	adds	r3, #6
    6650:	781b      	ldrb	r3, [r3, #0]
    6652:	b2db      	uxtb	r3, r3
    6654:	001a      	movs	r2, r3
    6656:	2310      	movs	r3, #16
    6658:	4013      	ands	r3, r2
    665a:	d02f      	beq.n	66bc <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	681a      	ldr	r2, [r3, #0]
    6660:	230f      	movs	r3, #15
    6662:	18fb      	adds	r3, r7, r3
    6664:	781b      	ldrb	r3, [r3, #0]
    6666:	3308      	adds	r3, #8
    6668:	015b      	lsls	r3, r3, #5
    666a:	18d3      	adds	r3, r2, r3
    666c:	3304      	adds	r3, #4
    666e:	2210      	movs	r2, #16
    6670:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	681a      	ldr	r2, [r3, #0]
    6676:	230f      	movs	r3, #15
    6678:	18fb      	adds	r3, r7, r3
    667a:	781b      	ldrb	r3, [r3, #0]
    667c:	3308      	adds	r3, #8
    667e:	015b      	lsls	r3, r3, #5
    6680:	18d3      	adds	r3, r2, r3
    6682:	3307      	adds	r3, #7
    6684:	781b      	ldrb	r3, [r3, #0]
    6686:	b2db      	uxtb	r3, r3
    6688:	001a      	movs	r2, r3
    668a:	2320      	movs	r3, #32
    668c:	4013      	ands	r3, r2
    668e:	d015      	beq.n	66bc <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	681a      	ldr	r2, [r3, #0]
    6694:	230f      	movs	r3, #15
    6696:	18fb      	adds	r3, r7, r3
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	3308      	adds	r3, #8
    669c:	015b      	lsls	r3, r3, #5
    669e:	18d3      	adds	r3, r2, r3
    66a0:	3307      	adds	r3, #7
    66a2:	2220      	movs	r2, #32
    66a4:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	681a      	ldr	r2, [r3, #0]
    66aa:	230f      	movs	r3, #15
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	3308      	adds	r3, #8
    66b2:	015b      	lsls	r3, r3, #5
    66b4:	18d3      	adds	r3, r2, r3
    66b6:	3304      	adds	r3, #4
    66b8:	2201      	movs	r2, #1
    66ba:	701a      	strb	r2, [r3, #0]
}
    66bc:	46c0      	nop			; (mov r8, r8)
    66be:	46bd      	mov	sp, r7
    66c0:	b004      	add	sp, #16
    66c2:	bd80      	pop	{r7, pc}

000066c4 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b086      	sub	sp, #24
    66c8:	af00      	add	r7, sp, #0
    66ca:	60f8      	str	r0, [r7, #12]
    66cc:	607a      	str	r2, [r7, #4]
    66ce:	603b      	str	r3, [r7, #0]
    66d0:	230b      	movs	r3, #11
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	1c0a      	adds	r2, r1, #0
    66d6:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    66d8:	68fb      	ldr	r3, [r7, #12]
    66da:	681b      	ldr	r3, [r3, #0]
    66dc:	220b      	movs	r2, #11
    66de:	18ba      	adds	r2, r7, r2
    66e0:	7812      	ldrb	r2, [r2, #0]
    66e2:	3208      	adds	r2, #8
    66e4:	0152      	lsls	r2, r2, #5
    66e6:	5cd3      	ldrb	r3, [r2, r3]
    66e8:	065b      	lsls	r3, r3, #25
    66ea:	0f5b      	lsrs	r3, r3, #29
    66ec:	b2da      	uxtb	r2, r3
    66ee:	2317      	movs	r3, #23
    66f0:	18fb      	adds	r3, r7, r3
    66f2:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    66f4:	2317      	movs	r3, #23
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	2b00      	cmp	r3, #0
    66fc:	d101      	bne.n	6702 <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    66fe:	231c      	movs	r3, #28
    6700:	e032      	b.n	6768 <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6702:	230b      	movs	r3, #11
    6704:	18fb      	adds	r3, r7, r3
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	687a      	ldr	r2, [r7, #4]
    670a:	4919      	ldr	r1, [pc, #100]	; (6770 <usb_device_endpoint_write_buffer_job+0xac>)
    670c:	015b      	lsls	r3, r3, #5
    670e:	18cb      	adds	r3, r1, r3
    6710:	3310      	adds	r3, #16
    6712:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6714:	230b      	movs	r3, #11
    6716:	18fb      	adds	r3, r7, r3
    6718:	781b      	ldrb	r3, [r3, #0]
    671a:	4a15      	ldr	r2, [pc, #84]	; (6770 <usb_device_endpoint_write_buffer_job+0xac>)
    671c:	015b      	lsls	r3, r3, #5
    671e:	18d3      	adds	r3, r2, r3
    6720:	3310      	adds	r3, #16
    6722:	685a      	ldr	r2, [r3, #4]
    6724:	4913      	ldr	r1, [pc, #76]	; (6774 <usb_device_endpoint_write_buffer_job+0xb0>)
    6726:	400a      	ands	r2, r1
    6728:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    672a:	230b      	movs	r3, #11
    672c:	18fb      	adds	r3, r7, r3
    672e:	781b      	ldrb	r3, [r3, #0]
    6730:	683a      	ldr	r2, [r7, #0]
    6732:	b292      	uxth	r2, r2
    6734:	0492      	lsls	r2, r2, #18
    6736:	0c92      	lsrs	r2, r2, #18
    6738:	b291      	uxth	r1, r2
    673a:	4a0d      	ldr	r2, [pc, #52]	; (6770 <usb_device_endpoint_write_buffer_job+0xac>)
    673c:	015b      	lsls	r3, r3, #5
    673e:	18d3      	adds	r3, r2, r3
    6740:	3310      	adds	r3, #16
    6742:	685a      	ldr	r2, [r3, #4]
    6744:	0489      	lsls	r1, r1, #18
    6746:	0c89      	lsrs	r1, r1, #18
    6748:	0b92      	lsrs	r2, r2, #14
    674a:	0392      	lsls	r2, r2, #14
    674c:	430a      	orrs	r2, r1
    674e:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6750:	68fb      	ldr	r3, [r7, #12]
    6752:	681a      	ldr	r2, [r3, #0]
    6754:	230b      	movs	r3, #11
    6756:	18fb      	adds	r3, r7, r3
    6758:	781b      	ldrb	r3, [r3, #0]
    675a:	3308      	adds	r3, #8
    675c:	015b      	lsls	r3, r3, #5
    675e:	18d3      	adds	r3, r2, r3
    6760:	3305      	adds	r3, #5
    6762:	2280      	movs	r2, #128	; 0x80
    6764:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    6766:	2300      	movs	r3, #0
}
    6768:	0018      	movs	r0, r3
    676a:	46bd      	mov	sp, r7
    676c:	b006      	add	sp, #24
    676e:	bd80      	pop	{r7, pc}
    6770:	20003f4c 	.word	0x20003f4c
    6774:	f0003fff 	.word	0xf0003fff

00006778 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6778:	b580      	push	{r7, lr}
    677a:	b086      	sub	sp, #24
    677c:	af00      	add	r7, sp, #0
    677e:	60f8      	str	r0, [r7, #12]
    6780:	607a      	str	r2, [r7, #4]
    6782:	603b      	str	r3, [r7, #0]
    6784:	230b      	movs	r3, #11
    6786:	18fb      	adds	r3, r7, r3
    6788:	1c0a      	adds	r2, r1, #0
    678a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    678c:	68fb      	ldr	r3, [r7, #12]
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	220b      	movs	r2, #11
    6792:	18ba      	adds	r2, r7, r2
    6794:	7812      	ldrb	r2, [r2, #0]
    6796:	3208      	adds	r2, #8
    6798:	0152      	lsls	r2, r2, #5
    679a:	5cd3      	ldrb	r3, [r2, r3]
    679c:	075b      	lsls	r3, r3, #29
    679e:	0f5b      	lsrs	r3, r3, #29
    67a0:	b2da      	uxtb	r2, r3
    67a2:	2317      	movs	r3, #23
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    67a8:	2317      	movs	r3, #23
    67aa:	18fb      	adds	r3, r7, r3
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d101      	bne.n	67b6 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    67b2:	231c      	movs	r3, #28
    67b4:	e02f      	b.n	6816 <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    67b6:	230b      	movs	r3, #11
    67b8:	18fb      	adds	r3, r7, r3
    67ba:	781a      	ldrb	r2, [r3, #0]
    67bc:	6879      	ldr	r1, [r7, #4]
    67be:	4b18      	ldr	r3, [pc, #96]	; (6820 <usb_device_endpoint_read_buffer_job+0xa8>)
    67c0:	0152      	lsls	r2, r2, #5
    67c2:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    67c4:	230b      	movs	r3, #11
    67c6:	18fb      	adds	r3, r7, r3
    67c8:	781b      	ldrb	r3, [r3, #0]
    67ca:	683a      	ldr	r2, [r7, #0]
    67cc:	b292      	uxth	r2, r2
    67ce:	0492      	lsls	r2, r2, #18
    67d0:	0c92      	lsrs	r2, r2, #18
    67d2:	b291      	uxth	r1, r2
    67d4:	4a12      	ldr	r2, [pc, #72]	; (6820 <usb_device_endpoint_read_buffer_job+0xa8>)
    67d6:	015b      	lsls	r3, r3, #5
    67d8:	18d3      	adds	r3, r2, r3
    67da:	685a      	ldr	r2, [r3, #4]
    67dc:	0489      	lsls	r1, r1, #18
    67de:	0c89      	lsrs	r1, r1, #18
    67e0:	0389      	lsls	r1, r1, #14
    67e2:	4810      	ldr	r0, [pc, #64]	; (6824 <usb_device_endpoint_read_buffer_job+0xac>)
    67e4:	4002      	ands	r2, r0
    67e6:	430a      	orrs	r2, r1
    67e8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    67ea:	230b      	movs	r3, #11
    67ec:	18fb      	adds	r3, r7, r3
    67ee:	781b      	ldrb	r3, [r3, #0]
    67f0:	4a0b      	ldr	r2, [pc, #44]	; (6820 <usb_device_endpoint_read_buffer_job+0xa8>)
    67f2:	015b      	lsls	r3, r3, #5
    67f4:	18d3      	adds	r3, r2, r3
    67f6:	685a      	ldr	r2, [r3, #4]
    67f8:	0b92      	lsrs	r2, r2, #14
    67fa:	0392      	lsls	r2, r2, #14
    67fc:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    67fe:	68fb      	ldr	r3, [r7, #12]
    6800:	681a      	ldr	r2, [r3, #0]
    6802:	230b      	movs	r3, #11
    6804:	18fb      	adds	r3, r7, r3
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	3308      	adds	r3, #8
    680a:	015b      	lsls	r3, r3, #5
    680c:	18d3      	adds	r3, r2, r3
    680e:	3304      	adds	r3, #4
    6810:	2240      	movs	r2, #64	; 0x40
    6812:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    6814:	2300      	movs	r3, #0
}
    6816:	0018      	movs	r0, r3
    6818:	46bd      	mov	sp, r7
    681a:	b006      	add	sp, #24
    681c:	bd80      	pop	{r7, pc}
    681e:	46c0      	nop			; (mov r8, r8)
    6820:	20003f4c 	.word	0x20003f4c
    6824:	f0003fff 	.word	0xf0003fff

00006828 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	6078      	str	r0, [r7, #4]
    6830:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6832:	683a      	ldr	r2, [r7, #0]
    6834:	4b0c      	ldr	r3, [pc, #48]	; (6868 <usb_device_endpoint_setup_buffer_job+0x40>)
    6836:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6838:	4b0b      	ldr	r3, [pc, #44]	; (6868 <usb_device_endpoint_setup_buffer_job+0x40>)
    683a:	685a      	ldr	r2, [r3, #4]
    683c:	490b      	ldr	r1, [pc, #44]	; (686c <usb_device_endpoint_setup_buffer_job+0x44>)
    683e:	400a      	ands	r2, r1
    6840:	2180      	movs	r1, #128	; 0x80
    6842:	0289      	lsls	r1, r1, #10
    6844:	430a      	orrs	r2, r1
    6846:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6848:	4b07      	ldr	r3, [pc, #28]	; (6868 <usb_device_endpoint_setup_buffer_job+0x40>)
    684a:	685a      	ldr	r2, [r3, #4]
    684c:	0b92      	lsrs	r2, r2, #14
    684e:	0392      	lsls	r2, r2, #14
    6850:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	681a      	ldr	r2, [r3, #0]
    6856:	2382      	movs	r3, #130	; 0x82
    6858:	005b      	lsls	r3, r3, #1
    685a:	2140      	movs	r1, #64	; 0x40
    685c:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    685e:	2300      	movs	r3, #0
}
    6860:	0018      	movs	r0, r3
    6862:	46bd      	mov	sp, r7
    6864:	b002      	add	sp, #8
    6866:	bd80      	pop	{r7, pc}
    6868:	20003f4c 	.word	0x20003f4c
    686c:	f0003fff 	.word	0xf0003fff

00006870 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    6870:	b580      	push	{r7, lr}
    6872:	b084      	sub	sp, #16
    6874:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    6876:	4bbd      	ldr	r3, [pc, #756]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6878:	681b      	ldr	r3, [r3, #0]
    687a:	681a      	ldr	r2, [r3, #0]
    687c:	2308      	movs	r3, #8
    687e:	18fb      	adds	r3, r7, r3
    6880:	8c12      	ldrh	r2, [r2, #32]
    6882:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    6884:	2308      	movs	r3, #8
    6886:	18fb      	adds	r3, r7, r3
    6888:	881b      	ldrh	r3, [r3, #0]
    688a:	2b00      	cmp	r3, #0
    688c:	d155      	bne.n	693a <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    688e:	4bb7      	ldr	r3, [pc, #732]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	681a      	ldr	r2, [r3, #0]
    6894:	1dbb      	adds	r3, r7, #6
    6896:	8b92      	ldrh	r2, [r2, #28]
    6898:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    689a:	4bb4      	ldr	r3, [pc, #720]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    689c:	681a      	ldr	r2, [r3, #0]
    689e:	23ab      	movs	r3, #171	; 0xab
    68a0:	005b      	lsls	r3, r3, #1
    68a2:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    68a4:	1dba      	adds	r2, r7, #6
    68a6:	8812      	ldrh	r2, [r2, #0]
    68a8:	4013      	ands	r3, r2
    68aa:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    68ac:	4baf      	ldr	r3, [pc, #700]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    68ae:	6819      	ldr	r1, [r3, #0]
    68b0:	23aa      	movs	r3, #170	; 0xaa
    68b2:	005b      	lsls	r3, r3, #1
    68b4:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    68b6:	1d3b      	adds	r3, r7, #4
    68b8:	400a      	ands	r2, r1
    68ba:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    68bc:	2300      	movs	r3, #0
    68be:	60fb      	str	r3, [r7, #12]
    68c0:	e037      	b.n	6932 <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    68c2:	4bab      	ldr	r3, [pc, #684]	; (6b70 <_usb_device_interrupt_handler+0x300>)
    68c4:	68fa      	ldr	r2, [r7, #12]
    68c6:	0052      	lsls	r2, r2, #1
    68c8:	5ad3      	ldrh	r3, [r2, r3]
    68ca:	1dba      	adds	r2, r7, #6
    68cc:	8812      	ldrh	r2, [r2, #0]
    68ce:	4013      	ands	r3, r2
    68d0:	b29b      	uxth	r3, r3
    68d2:	2b00      	cmp	r3, #0
    68d4:	d007      	beq.n	68e6 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    68d6:	4ba5      	ldr	r3, [pc, #660]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    68d8:	681b      	ldr	r3, [r3, #0]
    68da:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    68dc:	4aa4      	ldr	r2, [pc, #656]	; (6b70 <_usb_device_interrupt_handler+0x300>)
    68de:	68f9      	ldr	r1, [r7, #12]
    68e0:	0049      	lsls	r1, r1, #1
    68e2:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    68e4:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    68e6:	4ba2      	ldr	r3, [pc, #648]	; (6b70 <_usb_device_interrupt_handler+0x300>)
    68e8:	68fa      	ldr	r2, [r7, #12]
    68ea:	0052      	lsls	r2, r2, #1
    68ec:	5ad3      	ldrh	r3, [r2, r3]
    68ee:	1d3a      	adds	r2, r7, #4
    68f0:	8812      	ldrh	r2, [r2, #0]
    68f2:	4013      	ands	r3, r2
    68f4:	b29b      	uxth	r3, r3
    68f6:	2b00      	cmp	r3, #0
    68f8:	d018      	beq.n	692c <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	2b06      	cmp	r3, #6
    68fe:	d10a      	bne.n	6916 <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6900:	4b9c      	ldr	r3, [pc, #624]	; (6b74 <_usb_device_interrupt_handler+0x304>)
    6902:	891b      	ldrh	r3, [r3, #8]
    6904:	045b      	lsls	r3, r3, #17
    6906:	0d5b      	lsrs	r3, r3, #21
    6908:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    690a:	001a      	movs	r2, r3
    690c:	2380      	movs	r3, #128	; 0x80
    690e:	005b      	lsls	r3, r3, #1
    6910:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    6912:	4b99      	ldr	r3, [pc, #612]	; (6b78 <_usb_device_interrupt_handler+0x308>)
    6914:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6916:	4b95      	ldr	r3, [pc, #596]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6918:	681b      	ldr	r3, [r3, #0]
    691a:	68fa      	ldr	r2, [r7, #12]
    691c:	322e      	adds	r2, #46	; 0x2e
    691e:	0092      	lsls	r2, r2, #2
    6920:	58d2      	ldr	r2, [r2, r3]
    6922:	4b92      	ldr	r3, [pc, #584]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	4994      	ldr	r1, [pc, #592]	; (6b78 <_usb_device_interrupt_handler+0x308>)
    6928:	0018      	movs	r0, r3
    692a:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    692c:	68fb      	ldr	r3, [r7, #12]
    692e:	3301      	adds	r3, #1
    6930:	60fb      	str	r3, [r7, #12]
    6932:	68fb      	ldr	r3, [r7, #12]
    6934:	2b06      	cmp	r3, #6
    6936:	ddc4      	ble.n	68c2 <_usb_device_interrupt_handler+0x52>
    6938:	e250      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    693a:	230b      	movs	r3, #11
    693c:	18fb      	adds	r3, r7, r3
    693e:	2200      	movs	r2, #0
    6940:	701a      	strb	r2, [r3, #0]
    6942:	e23b      	b.n	6dbc <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    6944:	2308      	movs	r3, #8
    6946:	18fb      	adds	r3, r7, r3
    6948:	881a      	ldrh	r2, [r3, #0]
    694a:	230b      	movs	r3, #11
    694c:	18fb      	adds	r3, r7, r3
    694e:	781b      	ldrb	r3, [r3, #0]
    6950:	411a      	asrs	r2, r3
    6952:	0013      	movs	r3, r2
    6954:	2201      	movs	r2, #1
    6956:	4013      	ands	r3, r2
    6958:	d100      	bne.n	695c <_usb_device_interrupt_handler+0xec>
    695a:	e228      	b.n	6dae <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    695c:	4b83      	ldr	r3, [pc, #524]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    695e:	681b      	ldr	r3, [r3, #0]
    6960:	681a      	ldr	r2, [r3, #0]
    6962:	230b      	movs	r3, #11
    6964:	18fb      	adds	r3, r7, r3
    6966:	781b      	ldrb	r3, [r3, #0]
    6968:	3308      	adds	r3, #8
    696a:	015b      	lsls	r3, r3, #5
    696c:	18d3      	adds	r3, r2, r3
    696e:	3307      	adds	r3, #7
    6970:	781b      	ldrb	r3, [r3, #0]
    6972:	b2da      	uxtb	r2, r3
    6974:	1dbb      	adds	r3, r7, #6
    6976:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    6978:	4b7c      	ldr	r3, [pc, #496]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    697a:	6819      	ldr	r1, [r3, #0]
    697c:	230b      	movs	r3, #11
    697e:	18fb      	adds	r3, r7, r3
    6980:	781a      	ldrb	r2, [r3, #0]
    6982:	23b0      	movs	r3, #176	; 0xb0
    6984:	005b      	lsls	r3, r3, #1
    6986:	188a      	adds	r2, r1, r2
    6988:	18d3      	adds	r3, r2, r3
    698a:	781b      	ldrb	r3, [r3, #0]
    698c:	b29b      	uxth	r3, r3
				flags_run = flags &
    698e:	1dba      	adds	r2, r7, #6
    6990:	8812      	ldrh	r2, [r2, #0]
    6992:	4013      	ands	r3, r2
    6994:	b29b      	uxth	r3, r3
    6996:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    6998:	4b74      	ldr	r3, [pc, #464]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    699a:	6818      	ldr	r0, [r3, #0]
    699c:	230b      	movs	r3, #11
    699e:	18fb      	adds	r3, r7, r3
    69a0:	7819      	ldrb	r1, [r3, #0]
    69a2:	23ac      	movs	r3, #172	; 0xac
    69a4:	005b      	lsls	r3, r3, #1
    69a6:	1841      	adds	r1, r0, r1
    69a8:	18cb      	adds	r3, r1, r3
    69aa:	781b      	ldrb	r3, [r3, #0]
    69ac:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    69ae:	4013      	ands	r3, r2
    69b0:	b21a      	sxth	r2, r3
				flags_run = flags &
    69b2:	1d3b      	adds	r3, r7, #4
    69b4:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    69b6:	1dbb      	adds	r3, r7, #6
    69b8:	881b      	ldrh	r3, [r3, #0]
    69ba:	2260      	movs	r2, #96	; 0x60
    69bc:	4013      	ands	r3, r2
    69be:	d05c      	beq.n	6a7a <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    69c0:	4b6a      	ldr	r3, [pc, #424]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    69c2:	681b      	ldr	r3, [r3, #0]
    69c4:	681a      	ldr	r2, [r3, #0]
    69c6:	230b      	movs	r3, #11
    69c8:	18fb      	adds	r3, r7, r3
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	3308      	adds	r3, #8
    69ce:	015b      	lsls	r3, r3, #5
    69d0:	18d3      	adds	r3, r2, r3
    69d2:	3307      	adds	r3, #7
    69d4:	781b      	ldrb	r3, [r3, #0]
    69d6:	b2db      	uxtb	r3, r3
    69d8:	001a      	movs	r2, r3
    69da:	2340      	movs	r3, #64	; 0x40
    69dc:	4013      	ands	r3, r2
    69de:	d015      	beq.n	6a0c <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    69e0:	4b62      	ldr	r3, [pc, #392]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    69e2:	681b      	ldr	r3, [r3, #0]
    69e4:	681a      	ldr	r2, [r3, #0]
    69e6:	230b      	movs	r3, #11
    69e8:	18fb      	adds	r3, r7, r3
    69ea:	781b      	ldrb	r3, [r3, #0]
    69ec:	3308      	adds	r3, #8
    69ee:	015b      	lsls	r3, r3, #5
    69f0:	18d3      	adds	r3, r2, r3
    69f2:	3307      	adds	r3, #7
    69f4:	2240      	movs	r2, #64	; 0x40
    69f6:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    69f8:	230b      	movs	r3, #11
    69fa:	18fb      	adds	r3, r7, r3
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	2280      	movs	r2, #128	; 0x80
    6a00:	4252      	negs	r2, r2
    6a02:	4313      	orrs	r3, r2
    6a04:	b2da      	uxtb	r2, r3
    6a06:	4b5d      	ldr	r3, [pc, #372]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6a08:	719a      	strb	r2, [r3, #6]
    6a0a:	e020      	b.n	6a4e <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6a0c:	4b57      	ldr	r3, [pc, #348]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	681a      	ldr	r2, [r3, #0]
    6a12:	230b      	movs	r3, #11
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	3308      	adds	r3, #8
    6a1a:	015b      	lsls	r3, r3, #5
    6a1c:	18d3      	adds	r3, r2, r3
    6a1e:	3307      	adds	r3, #7
    6a20:	781b      	ldrb	r3, [r3, #0]
    6a22:	b2db      	uxtb	r3, r3
    6a24:	001a      	movs	r2, r3
    6a26:	2320      	movs	r3, #32
    6a28:	4013      	ands	r3, r2
    6a2a:	d010      	beq.n	6a4e <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6a2c:	4b4f      	ldr	r3, [pc, #316]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a2e:	681b      	ldr	r3, [r3, #0]
    6a30:	681a      	ldr	r2, [r3, #0]
    6a32:	230b      	movs	r3, #11
    6a34:	18fb      	adds	r3, r7, r3
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	3308      	adds	r3, #8
    6a3a:	015b      	lsls	r3, r3, #5
    6a3c:	18d3      	adds	r3, r2, r3
    6a3e:	3307      	adds	r3, #7
    6a40:	2220      	movs	r2, #32
    6a42:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6a44:	4b4d      	ldr	r3, [pc, #308]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6a46:	220b      	movs	r2, #11
    6a48:	18ba      	adds	r2, r7, r2
    6a4a:	7812      	ldrb	r2, [r2, #0]
    6a4c:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6a4e:	1d3b      	adds	r3, r7, #4
    6a50:	881b      	ldrh	r3, [r3, #0]
    6a52:	2260      	movs	r2, #96	; 0x60
    6a54:	4013      	ands	r3, r2
    6a56:	d100      	bne.n	6a5a <_usb_device_interrupt_handler+0x1ea>
    6a58:	e1b7      	b.n	6dca <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6a5a:	4b44      	ldr	r3, [pc, #272]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a5c:	681a      	ldr	r2, [r3, #0]
    6a5e:	230b      	movs	r3, #11
    6a60:	18fb      	adds	r3, r7, r3
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	21e0      	movs	r1, #224	; 0xe0
    6a66:	011b      	lsls	r3, r3, #4
    6a68:	18d3      	adds	r3, r2, r3
    6a6a:	185b      	adds	r3, r3, r1
    6a6c:	681a      	ldr	r2, [r3, #0]
    6a6e:	4b3f      	ldr	r3, [pc, #252]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a70:	681b      	ldr	r3, [r3, #0]
    6a72:	4942      	ldr	r1, [pc, #264]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6a74:	0018      	movs	r0, r3
    6a76:	4790      	blx	r2
					}
					return;
    6a78:	e1a7      	b.n	6dca <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6a7a:	1dbb      	adds	r3, r7, #6
    6a7c:	881b      	ldrh	r3, [r3, #0]
    6a7e:	2210      	movs	r2, #16
    6a80:	4013      	ands	r3, r2
    6a82:	d038      	beq.n	6af6 <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6a84:	4b39      	ldr	r3, [pc, #228]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a86:	681b      	ldr	r3, [r3, #0]
    6a88:	681a      	ldr	r2, [r3, #0]
    6a8a:	230b      	movs	r3, #11
    6a8c:	18fb      	adds	r3, r7, r3
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	3308      	adds	r3, #8
    6a92:	015b      	lsls	r3, r3, #5
    6a94:	18d3      	adds	r3, r2, r3
    6a96:	3307      	adds	r3, #7
    6a98:	2210      	movs	r2, #16
    6a9a:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6a9c:	4b33      	ldr	r3, [pc, #204]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6a9e:	6819      	ldr	r1, [r3, #0]
    6aa0:	230b      	movs	r3, #11
    6aa2:	18fb      	adds	r3, r7, r3
    6aa4:	781a      	ldrb	r2, [r3, #0]
    6aa6:	23b0      	movs	r3, #176	; 0xb0
    6aa8:	005b      	lsls	r3, r3, #1
    6aaa:	188a      	adds	r2, r1, r2
    6aac:	18d3      	adds	r3, r2, r3
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	2210      	movs	r2, #16
    6ab2:	4013      	ands	r3, r2
    6ab4:	b2db      	uxtb	r3, r3
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d100      	bne.n	6abc <_usb_device_interrupt_handler+0x24c>
    6aba:	e188      	b.n	6dce <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6abc:	230b      	movs	r3, #11
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	4a2c      	ldr	r2, [pc, #176]	; (6b74 <_usb_device_interrupt_handler+0x304>)
    6ac4:	015b      	lsls	r3, r3, #5
    6ac6:	18d3      	adds	r3, r2, r3
    6ac8:	685b      	ldr	r3, [r3, #4]
    6aca:	049b      	lsls	r3, r3, #18
    6acc:	0c9b      	lsrs	r3, r3, #18
    6ace:	b29b      	uxth	r3, r3
    6ad0:	001a      	movs	r2, r3
    6ad2:	4b2a      	ldr	r3, [pc, #168]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6ad4:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6ad6:	4b25      	ldr	r3, [pc, #148]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6ad8:	681a      	ldr	r2, [r3, #0]
    6ada:	230b      	movs	r3, #11
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	21dc      	movs	r1, #220	; 0xdc
    6ae2:	011b      	lsls	r3, r3, #4
    6ae4:	18d3      	adds	r3, r2, r3
    6ae6:	185b      	adds	r3, r3, r1
    6ae8:	681a      	ldr	r2, [r3, #0]
    6aea:	4b20      	ldr	r3, [pc, #128]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6aec:	681b      	ldr	r3, [r3, #0]
    6aee:	4923      	ldr	r1, [pc, #140]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6af0:	0018      	movs	r0, r3
    6af2:	4790      	blx	r2
					}
					return;
    6af4:	e16b      	b.n	6dce <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6af6:	1dbb      	adds	r3, r7, #6
    6af8:	881b      	ldrh	r3, [r3, #0]
    6afa:	2203      	movs	r2, #3
    6afc:	4013      	ands	r3, r2
    6afe:	d100      	bne.n	6b02 <_usb_device_interrupt_handler+0x292>
    6b00:	e08f      	b.n	6c22 <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6b02:	4b1a      	ldr	r3, [pc, #104]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	681a      	ldr	r2, [r3, #0]
    6b08:	230b      	movs	r3, #11
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	3308      	adds	r3, #8
    6b10:	015b      	lsls	r3, r3, #5
    6b12:	18d3      	adds	r3, r2, r3
    6b14:	3307      	adds	r3, #7
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	b2db      	uxtb	r3, r3
    6b1a:	001a      	movs	r2, r3
    6b1c:	2302      	movs	r3, #2
    6b1e:	4013      	ands	r3, r2
    6b20:	d02e      	beq.n	6b80 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6b22:	4b12      	ldr	r3, [pc, #72]	; (6b6c <_usb_device_interrupt_handler+0x2fc>)
    6b24:	681b      	ldr	r3, [r3, #0]
    6b26:	681a      	ldr	r2, [r3, #0]
    6b28:	230b      	movs	r3, #11
    6b2a:	18fb      	adds	r3, r7, r3
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	3308      	adds	r3, #8
    6b30:	015b      	lsls	r3, r3, #5
    6b32:	18d3      	adds	r3, r2, r3
    6b34:	3307      	adds	r3, #7
    6b36:	2202      	movs	r2, #2
    6b38:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6b3a:	230b      	movs	r3, #11
    6b3c:	18fb      	adds	r3, r7, r3
    6b3e:	781b      	ldrb	r3, [r3, #0]
    6b40:	2280      	movs	r2, #128	; 0x80
    6b42:	4252      	negs	r2, r2
    6b44:	4313      	orrs	r3, r2
    6b46:	b2da      	uxtb	r2, r3
    6b48:	4b0c      	ldr	r3, [pc, #48]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6b4a:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    6b4c:	230b      	movs	r3, #11
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	4a08      	ldr	r2, [pc, #32]	; (6b74 <_usb_device_interrupt_handler+0x304>)
    6b54:	015b      	lsls	r3, r3, #5
    6b56:	18d3      	adds	r3, r2, r3
    6b58:	3310      	adds	r3, #16
    6b5a:	685b      	ldr	r3, [r3, #4]
    6b5c:	049b      	lsls	r3, r3, #18
    6b5e:	0c9b      	lsrs	r3, r3, #18
    6b60:	b29b      	uxth	r3, r3
    6b62:	001a      	movs	r2, r3
    6b64:	4b05      	ldr	r3, [pc, #20]	; (6b7c <_usb_device_interrupt_handler+0x30c>)
    6b66:	805a      	strh	r2, [r3, #2]
    6b68:	e045      	b.n	6bf6 <_usb_device_interrupt_handler+0x386>
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	2000082c 	.word	0x2000082c
    6b70:	000138e8 	.word	0x000138e8
    6b74:	20003f4c 	.word	0x20003f4c
    6b78:	20000838 	.word	0x20000838
    6b7c:	2000083c 	.word	0x2000083c

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6b80:	4b98      	ldr	r3, [pc, #608]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	681a      	ldr	r2, [r3, #0]
    6b86:	230b      	movs	r3, #11
    6b88:	18fb      	adds	r3, r7, r3
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	3308      	adds	r3, #8
    6b8e:	015b      	lsls	r3, r3, #5
    6b90:	18d3      	adds	r3, r2, r3
    6b92:	3307      	adds	r3, #7
    6b94:	781b      	ldrb	r3, [r3, #0]
    6b96:	b2db      	uxtb	r3, r3
    6b98:	001a      	movs	r2, r3
    6b9a:	2301      	movs	r3, #1
    6b9c:	4013      	ands	r3, r2
    6b9e:	d02a      	beq.n	6bf6 <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6ba0:	4b90      	ldr	r3, [pc, #576]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	681a      	ldr	r2, [r3, #0]
    6ba6:	230b      	movs	r3, #11
    6ba8:	18fb      	adds	r3, r7, r3
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	3308      	adds	r3, #8
    6bae:	015b      	lsls	r3, r3, #5
    6bb0:	18d3      	adds	r3, r2, r3
    6bb2:	3307      	adds	r3, #7
    6bb4:	2201      	movs	r2, #1
    6bb6:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6bb8:	4b8b      	ldr	r3, [pc, #556]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6bba:	220b      	movs	r2, #11
    6bbc:	18ba      	adds	r2, r7, r2
    6bbe:	7812      	ldrb	r2, [r2, #0]
    6bc0:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6bc2:	230b      	movs	r3, #11
    6bc4:	18fb      	adds	r3, r7, r3
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	4a88      	ldr	r2, [pc, #544]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6bca:	015b      	lsls	r3, r3, #5
    6bcc:	18d3      	adds	r3, r2, r3
    6bce:	685b      	ldr	r3, [r3, #4]
    6bd0:	049b      	lsls	r3, r3, #18
    6bd2:	0c9b      	lsrs	r3, r3, #18
    6bd4:	b29b      	uxth	r3, r3
    6bd6:	001a      	movs	r2, r3
    6bd8:	4b83      	ldr	r3, [pc, #524]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6bda:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6bdc:	230b      	movs	r3, #11
    6bde:	18fb      	adds	r3, r7, r3
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	4a82      	ldr	r2, [pc, #520]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6be4:	015b      	lsls	r3, r3, #5
    6be6:	18d3      	adds	r3, r2, r3
    6be8:	685b      	ldr	r3, [r3, #4]
    6bea:	011b      	lsls	r3, r3, #4
    6bec:	0c9b      	lsrs	r3, r3, #18
    6bee:	b29b      	uxth	r3, r3
    6bf0:	001a      	movs	r2, r3
    6bf2:	4b7d      	ldr	r3, [pc, #500]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6bf4:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6bf6:	1d3b      	adds	r3, r7, #4
    6bf8:	881b      	ldrh	r3, [r3, #0]
    6bfa:	2203      	movs	r2, #3
    6bfc:	4013      	ands	r3, r2
    6bfe:	d100      	bne.n	6c02 <_usb_device_interrupt_handler+0x392>
    6c00:	e0e7      	b.n	6dd2 <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6c02:	4b78      	ldr	r3, [pc, #480]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6c04:	681a      	ldr	r2, [r3, #0]
    6c06:	230b      	movs	r3, #11
    6c08:	18fb      	adds	r3, r7, r3
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	330d      	adds	r3, #13
    6c0e:	011b      	lsls	r3, r3, #4
    6c10:	18d3      	adds	r3, r2, r3
    6c12:	3304      	adds	r3, #4
    6c14:	681a      	ldr	r2, [r3, #0]
    6c16:	4b73      	ldr	r3, [pc, #460]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	4973      	ldr	r1, [pc, #460]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6c1c:	0018      	movs	r0, r3
    6c1e:	4790      	blx	r2
					}
					return;
    6c20:	e0d7      	b.n	6dd2 <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6c22:	1dbb      	adds	r3, r7, #6
    6c24:	881b      	ldrh	r3, [r3, #0]
    6c26:	220c      	movs	r2, #12
    6c28:	4013      	ands	r3, r2
    6c2a:	d100      	bne.n	6c2e <_usb_device_interrupt_handler+0x3be>
    6c2c:	e0bf      	b.n	6dae <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6c2e:	4b6d      	ldr	r3, [pc, #436]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6c30:	681b      	ldr	r3, [r3, #0]
    6c32:	681a      	ldr	r2, [r3, #0]
    6c34:	230b      	movs	r3, #11
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	3308      	adds	r3, #8
    6c3c:	015b      	lsls	r3, r3, #5
    6c3e:	18d3      	adds	r3, r2, r3
    6c40:	3307      	adds	r3, #7
    6c42:	781b      	ldrb	r3, [r3, #0]
    6c44:	b2db      	uxtb	r3, r3
    6c46:	001a      	movs	r2, r3
    6c48:	2308      	movs	r3, #8
    6c4a:	4013      	ands	r3, r2
    6c4c:	d047      	beq.n	6cde <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    6c4e:	4b65      	ldr	r3, [pc, #404]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6c50:	681b      	ldr	r3, [r3, #0]
    6c52:	681a      	ldr	r2, [r3, #0]
    6c54:	230b      	movs	r3, #11
    6c56:	18fb      	adds	r3, r7, r3
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	3308      	adds	r3, #8
    6c5c:	015b      	lsls	r3, r3, #5
    6c5e:	18d3      	adds	r3, r2, r3
    6c60:	3307      	adds	r3, #7
    6c62:	2208      	movs	r2, #8
    6c64:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6c66:	230b      	movs	r3, #11
    6c68:	18fb      	adds	r3, r7, r3
    6c6a:	781b      	ldrb	r3, [r3, #0]
    6c6c:	4a5f      	ldr	r2, [pc, #380]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6c6e:	015b      	lsls	r3, r3, #5
    6c70:	18d3      	adds	r3, r2, r3
    6c72:	331a      	adds	r3, #26
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	b2db      	uxtb	r3, r3
    6c78:	001a      	movs	r2, r3
    6c7a:	2302      	movs	r3, #2
    6c7c:	4013      	ands	r3, r2
    6c7e:	d014      	beq.n	6caa <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6c80:	230b      	movs	r3, #11
    6c82:	18fb      	adds	r3, r7, r3
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	220b      	movs	r2, #11
    6c88:	18ba      	adds	r2, r7, r2
    6c8a:	7812      	ldrb	r2, [r2, #0]
    6c8c:	4957      	ldr	r1, [pc, #348]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6c8e:	0152      	lsls	r2, r2, #5
    6c90:	188a      	adds	r2, r1, r2
    6c92:	321a      	adds	r2, #26
    6c94:	7812      	ldrb	r2, [r2, #0]
    6c96:	b2d2      	uxtb	r2, r2
    6c98:	2102      	movs	r1, #2
    6c9a:	438a      	bics	r2, r1
    6c9c:	b2d1      	uxtb	r1, r2
    6c9e:	4a53      	ldr	r2, [pc, #332]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6ca0:	015b      	lsls	r3, r3, #5
    6ca2:	18d3      	adds	r3, r2, r3
    6ca4:	331a      	adds	r3, #26
    6ca6:	1c0a      	adds	r2, r1, #0
    6ca8:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6caa:	230b      	movs	r3, #11
    6cac:	18fb      	adds	r3, r7, r3
    6cae:	781b      	ldrb	r3, [r3, #0]
    6cb0:	2280      	movs	r2, #128	; 0x80
    6cb2:	4252      	negs	r2, r2
    6cb4:	4313      	orrs	r3, r2
    6cb6:	b2da      	uxtb	r2, r3
    6cb8:	4b4b      	ldr	r3, [pc, #300]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6cba:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6cbc:	4b49      	ldr	r3, [pc, #292]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6cbe:	681b      	ldr	r3, [r3, #0]
    6cc0:	681a      	ldr	r2, [r3, #0]
    6cc2:	230b      	movs	r3, #11
    6cc4:	18fb      	adds	r3, r7, r3
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	3308      	adds	r3, #8
    6cca:	015b      	lsls	r3, r3, #5
    6ccc:	18d3      	adds	r3, r2, r3
    6cce:	3307      	adds	r3, #7
    6cd0:	781b      	ldrb	r3, [r3, #0]
    6cd2:	b2db      	uxtb	r3, r3
    6cd4:	001a      	movs	r2, r3
    6cd6:	2302      	movs	r3, #2
    6cd8:	4013      	ands	r3, r2
    6cda:	d053      	beq.n	6d84 <_usb_device_interrupt_handler+0x514>
							return;
    6cdc:	e07e      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6cde:	4b41      	ldr	r3, [pc, #260]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6ce0:	681b      	ldr	r3, [r3, #0]
    6ce2:	681a      	ldr	r2, [r3, #0]
    6ce4:	230b      	movs	r3, #11
    6ce6:	18fb      	adds	r3, r7, r3
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	3308      	adds	r3, #8
    6cec:	015b      	lsls	r3, r3, #5
    6cee:	18d3      	adds	r3, r2, r3
    6cf0:	3307      	adds	r3, #7
    6cf2:	781b      	ldrb	r3, [r3, #0]
    6cf4:	b2db      	uxtb	r3, r3
    6cf6:	001a      	movs	r2, r3
    6cf8:	2304      	movs	r3, #4
    6cfa:	4013      	ands	r3, r2
    6cfc:	d042      	beq.n	6d84 <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6cfe:	4b39      	ldr	r3, [pc, #228]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	681a      	ldr	r2, [r3, #0]
    6d04:	230b      	movs	r3, #11
    6d06:	18fb      	adds	r3, r7, r3
    6d08:	781b      	ldrb	r3, [r3, #0]
    6d0a:	3308      	adds	r3, #8
    6d0c:	015b      	lsls	r3, r3, #5
    6d0e:	18d3      	adds	r3, r2, r3
    6d10:	3307      	adds	r3, #7
    6d12:	2204      	movs	r2, #4
    6d14:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6d16:	230b      	movs	r3, #11
    6d18:	18fb      	adds	r3, r7, r3
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	4a33      	ldr	r2, [pc, #204]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6d1e:	015b      	lsls	r3, r3, #5
    6d20:	18d3      	adds	r3, r2, r3
    6d22:	330a      	adds	r3, #10
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	b2db      	uxtb	r3, r3
    6d28:	001a      	movs	r2, r3
    6d2a:	2302      	movs	r3, #2
    6d2c:	4013      	ands	r3, r2
    6d2e:	d014      	beq.n	6d5a <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6d30:	230b      	movs	r3, #11
    6d32:	18fb      	adds	r3, r7, r3
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	220b      	movs	r2, #11
    6d38:	18ba      	adds	r2, r7, r2
    6d3a:	7812      	ldrb	r2, [r2, #0]
    6d3c:	492b      	ldr	r1, [pc, #172]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6d3e:	0152      	lsls	r2, r2, #5
    6d40:	188a      	adds	r2, r1, r2
    6d42:	320a      	adds	r2, #10
    6d44:	7812      	ldrb	r2, [r2, #0]
    6d46:	b2d2      	uxtb	r2, r2
    6d48:	2102      	movs	r1, #2
    6d4a:	438a      	bics	r2, r1
    6d4c:	b2d1      	uxtb	r1, r2
    6d4e:	4a27      	ldr	r2, [pc, #156]	; (6dec <_usb_device_interrupt_handler+0x57c>)
    6d50:	015b      	lsls	r3, r3, #5
    6d52:	18d3      	adds	r3, r2, r3
    6d54:	330a      	adds	r3, #10
    6d56:	1c0a      	adds	r2, r1, #0
    6d58:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6d5a:	4b23      	ldr	r3, [pc, #140]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6d5c:	220b      	movs	r2, #11
    6d5e:	18ba      	adds	r2, r7, r2
    6d60:	7812      	ldrb	r2, [r2, #0]
    6d62:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6d64:	4b1f      	ldr	r3, [pc, #124]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	681a      	ldr	r2, [r3, #0]
    6d6a:	230b      	movs	r3, #11
    6d6c:	18fb      	adds	r3, r7, r3
    6d6e:	781b      	ldrb	r3, [r3, #0]
    6d70:	3308      	adds	r3, #8
    6d72:	015b      	lsls	r3, r3, #5
    6d74:	18d3      	adds	r3, r2, r3
    6d76:	3307      	adds	r3, #7
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	b2db      	uxtb	r3, r3
    6d7c:	001a      	movs	r2, r3
    6d7e:	2301      	movs	r3, #1
    6d80:	4013      	ands	r3, r2
    6d82:	d128      	bne.n	6dd6 <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6d84:	1d3b      	adds	r3, r7, #4
    6d86:	881b      	ldrh	r3, [r3, #0]
    6d88:	220c      	movs	r2, #12
    6d8a:	4013      	ands	r3, r2
    6d8c:	d025      	beq.n	6dda <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6d8e:	4b15      	ldr	r3, [pc, #84]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6d90:	681a      	ldr	r2, [r3, #0]
    6d92:	230b      	movs	r3, #11
    6d94:	18fb      	adds	r3, r7, r3
    6d96:	781b      	ldrb	r3, [r3, #0]
    6d98:	21d8      	movs	r1, #216	; 0xd8
    6d9a:	011b      	lsls	r3, r3, #4
    6d9c:	18d3      	adds	r3, r2, r3
    6d9e:	185b      	adds	r3, r3, r1
    6da0:	681a      	ldr	r2, [r3, #0]
    6da2:	4b10      	ldr	r3, [pc, #64]	; (6de4 <_usb_device_interrupt_handler+0x574>)
    6da4:	681b      	ldr	r3, [r3, #0]
    6da6:	4910      	ldr	r1, [pc, #64]	; (6de8 <_usb_device_interrupt_handler+0x578>)
    6da8:	0018      	movs	r0, r3
    6daa:	4790      	blx	r2
					}
					return;
    6dac:	e015      	b.n	6dda <_usb_device_interrupt_handler+0x56a>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6dae:	230b      	movs	r3, #11
    6db0:	18fb      	adds	r3, r7, r3
    6db2:	781a      	ldrb	r2, [r3, #0]
    6db4:	230b      	movs	r3, #11
    6db6:	18fb      	adds	r3, r7, r3
    6db8:	3201      	adds	r2, #1
    6dba:	701a      	strb	r2, [r3, #0]
    6dbc:	230b      	movs	r3, #11
    6dbe:	18fb      	adds	r3, r7, r3
    6dc0:	781b      	ldrb	r3, [r3, #0]
    6dc2:	2b07      	cmp	r3, #7
    6dc4:	d800      	bhi.n	6dc8 <_usb_device_interrupt_handler+0x558>
    6dc6:	e5bd      	b.n	6944 <_usb_device_interrupt_handler+0xd4>
    6dc8:	e008      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
					return;
    6dca:	46c0      	nop			; (mov r8, r8)
    6dcc:	e006      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
					return;
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	e004      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
					return;
    6dd2:	46c0      	nop			; (mov r8, r8)
    6dd4:	e002      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
							return;
    6dd6:	46c0      	nop			; (mov r8, r8)
    6dd8:	e000      	b.n	6ddc <_usb_device_interrupt_handler+0x56c>
					return;
    6dda:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    6ddc:	46bd      	mov	sp, r7
    6dde:	b004      	add	sp, #16
    6de0:	bd80      	pop	{r7, pc}
    6de2:	46c0      	nop			; (mov r8, r8)
    6de4:	2000082c 	.word	0x2000082c
    6de8:	2000083c 	.word	0x2000083c
    6dec:	20003f4c 	.word	0x20003f4c

00006df0 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b082      	sub	sp, #8
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	681a      	ldr	r2, [r3, #0]
    6dfc:	687b      	ldr	r3, [r7, #4]
    6dfe:	681b      	ldr	r3, [r3, #0]
    6e00:	781b      	ldrb	r3, [r3, #0]
    6e02:	b2db      	uxtb	r3, r3
    6e04:	2102      	movs	r1, #2
    6e06:	430b      	orrs	r3, r1
    6e08:	b2db      	uxtb	r3, r3
    6e0a:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    6e0c:	46c0      	nop			; (mov r8, r8)
    6e0e:	687b      	ldr	r3, [r7, #4]
    6e10:	681b      	ldr	r3, [r3, #0]
    6e12:	789b      	ldrb	r3, [r3, #2]
    6e14:	b2db      	uxtb	r3, r3
    6e16:	2b02      	cmp	r3, #2
    6e18:	d0f9      	beq.n	6e0e <usb_enable+0x1e>
}
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	46bd      	mov	sp, r7
    6e1e:	b002      	add	sp, #8
    6e20:	bd80      	pop	{r7, pc}
	...

00006e24 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6e24:	b580      	push	{r7, lr}
    6e26:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    6e28:	4b08      	ldr	r3, [pc, #32]	; (6e4c <USB_Handler+0x28>)
    6e2a:	681b      	ldr	r3, [r3, #0]
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	781b      	ldrb	r3, [r3, #0]
    6e30:	061b      	lsls	r3, r3, #24
    6e32:	0fdb      	lsrs	r3, r3, #31
    6e34:	b2db      	uxtb	r3, r3
    6e36:	2b00      	cmp	r3, #0
    6e38:	d002      	beq.n	6e40 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    6e3a:	4b05      	ldr	r3, [pc, #20]	; (6e50 <USB_Handler+0x2c>)
    6e3c:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6e3e:	e001      	b.n	6e44 <USB_Handler+0x20>
		_usb_device_interrupt_handler();
    6e40:	4b04      	ldr	r3, [pc, #16]	; (6e54 <USB_Handler+0x30>)
    6e42:	4798      	blx	r3
}
    6e44:	46c0      	nop			; (mov r8, r8)
    6e46:	46bd      	mov	sp, r7
    6e48:	bd80      	pop	{r7, pc}
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	2000082c 	.word	0x2000082c
    6e50:	0000536d 	.word	0x0000536d
    6e54:	00006871 	.word	0x00006871

00006e58 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    6e58:	b580      	push	{r7, lr}
    6e5a:	b082      	sub	sp, #8
    6e5c:	af00      	add	r7, sp, #0
    6e5e:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	2200      	movs	r2, #0
    6e64:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	2201      	movs	r2, #1
    6e6a:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	2200      	movs	r2, #0
    6e70:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	2201      	movs	r2, #1
    6e76:	70da      	strb	r2, [r3, #3]
}
    6e78:	46c0      	nop			; (mov r8, r8)
    6e7a:	46bd      	mov	sp, r7
    6e7c:	b002      	add	sp, #8
    6e7e:	bd80      	pop	{r7, pc}

00006e80 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b08c      	sub	sp, #48	; 0x30
    6e84:	af00      	add	r7, sp, #0
    6e86:	60f8      	str	r0, [r7, #12]
    6e88:	60b9      	str	r1, [r7, #8]
    6e8a:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6e8c:	4bc4      	ldr	r3, [pc, #784]	; (71a0 <usb_init+0x320>)
    6e8e:	2200      	movs	r2, #0
    6e90:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    6e92:	4bc4      	ldr	r3, [pc, #784]	; (71a4 <usb_init+0x324>)
    6e94:	68fa      	ldr	r2, [r7, #12]
    6e96:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6e98:	68fb      	ldr	r3, [r7, #12]
    6e9a:	68ba      	ldr	r2, [r7, #8]
    6e9c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    6e9e:	2120      	movs	r1, #32
    6ea0:	2001      	movs	r0, #1
    6ea2:	4bc1      	ldr	r3, [pc, #772]	; (71a8 <usb_init+0x328>)
    6ea4:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    6ea6:	2318      	movs	r3, #24
    6ea8:	18fb      	adds	r3, r7, r3
    6eaa:	0018      	movs	r0, r3
    6eac:	4bbf      	ldr	r3, [pc, #764]	; (71ac <usb_init+0x32c>)
    6eae:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6eb0:	2318      	movs	r3, #24
    6eb2:	18fb      	adds	r3, r7, r3
    6eb4:	2206      	movs	r2, #6
    6eb6:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6eb8:	2318      	movs	r3, #24
    6eba:	18fb      	adds	r3, r7, r3
    6ebc:	0019      	movs	r1, r3
    6ebe:	2018      	movs	r0, #24
    6ec0:	4bbb      	ldr	r3, [pc, #748]	; (71b0 <usb_init+0x330>)
    6ec2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6ec4:	2318      	movs	r3, #24
    6ec6:	18fb      	adds	r3, r7, r3
    6ec8:	2206      	movs	r2, #6
    6eca:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6ecc:	2318      	movs	r3, #24
    6ece:	18fb      	adds	r3, r7, r3
    6ed0:	0019      	movs	r1, r3
    6ed2:	2019      	movs	r0, #25
    6ed4:	4bb6      	ldr	r3, [pc, #728]	; (71b0 <usb_init+0x330>)
    6ed6:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    6ed8:	2314      	movs	r3, #20
    6eda:	18fb      	adds	r3, r7, r3
    6edc:	0018      	movs	r0, r3
    6ede:	4bb5      	ldr	r3, [pc, #724]	; (71b4 <usb_init+0x334>)
    6ee0:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    6ee2:	687b      	ldr	r3, [r7, #4]
    6ee4:	789a      	ldrb	r2, [r3, #2]
    6ee6:	2314      	movs	r3, #20
    6ee8:	18fb      	adds	r3, r7, r3
    6eea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6eec:	2314      	movs	r3, #20
    6eee:	18fb      	adds	r3, r7, r3
    6ef0:	0019      	movs	r1, r3
    6ef2:	2006      	movs	r0, #6
    6ef4:	4bb0      	ldr	r3, [pc, #704]	; (71b8 <usb_init+0x338>)
    6ef6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    6ef8:	2006      	movs	r0, #6
    6efa:	4bb0      	ldr	r3, [pc, #704]	; (71bc <usb_init+0x33c>)
    6efc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6efe:	68ba      	ldr	r2, [r7, #8]
    6f00:	7813      	ldrb	r3, [r2, #0]
    6f02:	2101      	movs	r1, #1
    6f04:	430b      	orrs	r3, r1
    6f06:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    6f08:	46c0      	nop			; (mov r8, r8)
    6f0a:	68bb      	ldr	r3, [r7, #8]
    6f0c:	789b      	ldrb	r3, [r3, #2]
    6f0e:	07db      	lsls	r3, r3, #31
    6f10:	0fdb      	lsrs	r3, r3, #31
    6f12:	b2db      	uxtb	r3, r3
    6f14:	2b00      	cmp	r3, #0
    6f16:	d1f8      	bne.n	6f0a <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f18:	4aa9      	ldr	r2, [pc, #676]	; (71c0 <usb_init+0x340>)
    6f1a:	78d3      	ldrb	r3, [r2, #3]
    6f1c:	2103      	movs	r1, #3
    6f1e:	438b      	bics	r3, r1
    6f20:	1c19      	adds	r1, r3, #0
    6f22:	2302      	movs	r3, #2
    6f24:	430b      	orrs	r3, r1
    6f26:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f28:	4aa5      	ldr	r2, [pc, #660]	; (71c0 <usb_init+0x340>)
    6f2a:	78d3      	ldrb	r3, [r2, #3]
    6f2c:	210c      	movs	r1, #12
    6f2e:	438b      	bics	r3, r1
    6f30:	1c19      	adds	r1, r3, #0
    6f32:	2308      	movs	r3, #8
    6f34:	430b      	orrs	r3, r1
    6f36:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f38:	4ba2      	ldr	r3, [pc, #648]	; (71c4 <usb_init+0x344>)
    6f3a:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6f3c:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f3e:	221f      	movs	r2, #31
    6f40:	4013      	ands	r3, r2
    6f42:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f46:	2b1f      	cmp	r3, #31
    6f48:	d101      	bne.n	6f4e <usb_init+0xce>
		pad_transn = 5;
    6f4a:	2305      	movs	r3, #5
    6f4c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f50:	b2db      	uxtb	r3, r3
    6f52:	1c1a      	adds	r2, r3, #0
    6f54:	231f      	movs	r3, #31
    6f56:	4013      	ands	r3, r2
    6f58:	b2d9      	uxtb	r1, r3
    6f5a:	68ba      	ldr	r2, [r7, #8]
    6f5c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6f5e:	1c08      	adds	r0, r1, #0
    6f60:	211f      	movs	r1, #31
    6f62:	4001      	ands	r1, r0
    6f64:	0188      	lsls	r0, r1, #6
    6f66:	4998      	ldr	r1, [pc, #608]	; (71c8 <usb_init+0x348>)
    6f68:	400b      	ands	r3, r1
    6f6a:	1c19      	adds	r1, r3, #0
    6f6c:	1c03      	adds	r3, r0, #0
    6f6e:	430b      	orrs	r3, r1
    6f70:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f72:	4b94      	ldr	r3, [pc, #592]	; (71c4 <usb_init+0x344>)
    6f74:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6f76:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f78:	221f      	movs	r2, #31
    6f7a:	4013      	ands	r3, r2
    6f7c:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6f7e:	6a3b      	ldr	r3, [r7, #32]
    6f80:	2b1f      	cmp	r3, #31
    6f82:	d101      	bne.n	6f88 <usb_init+0x108>
		pad_transp = 29;
    6f84:	231d      	movs	r3, #29
    6f86:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6f88:	6a3b      	ldr	r3, [r7, #32]
    6f8a:	b2db      	uxtb	r3, r3
    6f8c:	1c1a      	adds	r2, r3, #0
    6f8e:	231f      	movs	r3, #31
    6f90:	4013      	ands	r3, r2
    6f92:	b2d9      	uxtb	r1, r3
    6f94:	68ba      	ldr	r2, [r7, #8]
    6f96:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6f98:	1c08      	adds	r0, r1, #0
    6f9a:	211f      	movs	r1, #31
    6f9c:	4008      	ands	r0, r1
    6f9e:	211f      	movs	r1, #31
    6fa0:	438b      	bics	r3, r1
    6fa2:	1c19      	adds	r1, r3, #0
    6fa4:	1c03      	adds	r3, r0, #0
    6fa6:	430b      	orrs	r3, r1
    6fa8:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6faa:	4b86      	ldr	r3, [pc, #536]	; (71c4 <usb_init+0x344>)
    6fac:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    6fae:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6fb0:	2207      	movs	r2, #7
    6fb2:	4013      	ands	r3, r2
    6fb4:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6fb6:	69fb      	ldr	r3, [r7, #28]
    6fb8:	2b07      	cmp	r3, #7
    6fba:	d101      	bne.n	6fc0 <usb_init+0x140>
		pad_trim = 3;
    6fbc:	2303      	movs	r3, #3
    6fbe:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6fc0:	69fb      	ldr	r3, [r7, #28]
    6fc2:	b2db      	uxtb	r3, r3
    6fc4:	1c1a      	adds	r2, r3, #0
    6fc6:	2307      	movs	r3, #7
    6fc8:	4013      	ands	r3, r2
    6fca:	b2d9      	uxtb	r1, r3
    6fcc:	68ba      	ldr	r2, [r7, #8]
    6fce:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6fd0:	1c08      	adds	r0, r1, #0
    6fd2:	2107      	movs	r1, #7
    6fd4:	4001      	ands	r1, r0
    6fd6:	0308      	lsls	r0, r1, #12
    6fd8:	497c      	ldr	r1, [pc, #496]	; (71cc <usb_init+0x34c>)
    6fda:	400b      	ands	r3, r1
    6fdc:	1c19      	adds	r1, r3, #0
    6fde:	1c03      	adds	r3, r0, #0
    6fe0:	430b      	orrs	r3, r1
    6fe2:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6fe4:	687b      	ldr	r3, [r7, #4]
    6fe6:	7819      	ldrb	r1, [r3, #0]
    6fe8:	68ba      	ldr	r2, [r7, #8]
    6fea:	7813      	ldrb	r3, [r2, #0]
    6fec:	01c8      	lsls	r0, r1, #7
    6fee:	217f      	movs	r1, #127	; 0x7f
    6ff0:	400b      	ands	r3, r1
    6ff2:	1c19      	adds	r1, r3, #0
    6ff4:	1c03      	adds	r3, r0, #0
    6ff6:	430b      	orrs	r3, r1
    6ff8:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	7859      	ldrb	r1, [r3, #1]
    6ffe:	68ba      	ldr	r2, [r7, #8]
    7000:	7813      	ldrb	r3, [r2, #0]
    7002:	2001      	movs	r0, #1
    7004:	4001      	ands	r1, r0
    7006:	0088      	lsls	r0, r1, #2
    7008:	2104      	movs	r1, #4
    700a:	438b      	bics	r3, r1
    700c:	1c19      	adds	r1, r3, #0
    700e:	1c03      	adds	r3, r0, #0
    7010:	430b      	orrs	r3, r1
    7012:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    7014:	4a6e      	ldr	r2, [pc, #440]	; (71d0 <usb_init+0x350>)
    7016:	68bb      	ldr	r3, [r7, #8]
    7018:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	78db      	ldrb	r3, [r3, #3]
    701e:	2b01      	cmp	r3, #1
    7020:	d106      	bne.n	7030 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    7022:	68fb      	ldr	r3, [r7, #12]
    7024:	681a      	ldr	r2, [r3, #0]
    7026:	8913      	ldrh	r3, [r2, #8]
    7028:	210c      	movs	r1, #12
    702a:	438b      	bics	r3, r1
    702c:	8113      	strh	r3, [r2, #8]
    702e:	e00c      	b.n	704a <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	78db      	ldrb	r3, [r3, #3]
    7034:	2b00      	cmp	r3, #0
    7036:	d108      	bne.n	704a <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7038:	68fb      	ldr	r3, [r7, #12]
    703a:	681a      	ldr	r2, [r3, #0]
    703c:	8913      	ldrh	r3, [r2, #8]
    703e:	210c      	movs	r1, #12
    7040:	438b      	bics	r3, r1
    7042:	1c19      	adds	r1, r3, #0
    7044:	2304      	movs	r3, #4
    7046:	430b      	orrs	r3, r1
    7048:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    704a:	2380      	movs	r3, #128	; 0x80
    704c:	005a      	lsls	r2, r3, #1
    704e:	4b60      	ldr	r3, [pc, #384]	; (71d0 <usb_init+0x350>)
    7050:	2100      	movs	r1, #0
    7052:	0018      	movs	r0, r3
    7054:	4b5f      	ldr	r3, [pc, #380]	; (71d4 <usb_init+0x354>)
    7056:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    7058:	2300      	movs	r3, #0
    705a:	62fb      	str	r3, [r7, #44]	; 0x2c
    705c:	e009      	b.n	7072 <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    705e:	68fa      	ldr	r2, [r7, #12]
    7060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7062:	009b      	lsls	r3, r3, #2
    7064:	18d3      	adds	r3, r2, r3
    7066:	3304      	adds	r3, #4
    7068:	2200      	movs	r2, #0
    706a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    706e:	3301      	adds	r3, #1
    7070:	62fb      	str	r3, [r7, #44]	; 0x2c
    7072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7074:	2b07      	cmp	r3, #7
    7076:	d9f2      	bls.n	705e <usb_init+0x1de>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7078:	2300      	movs	r3, #0
    707a:	62fb      	str	r3, [r7, #44]	; 0x2c
    707c:	e016      	b.n	70ac <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    707e:	2300      	movs	r3, #0
    7080:	62bb      	str	r3, [r7, #40]	; 0x28
    7082:	e00d      	b.n	70a0 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    7084:	68fa      	ldr	r2, [r7, #12]
    7086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7088:	0099      	lsls	r1, r3, #2
    708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    708c:	18cb      	adds	r3, r1, r3
    708e:	3308      	adds	r3, #8
    7090:	009b      	lsls	r3, r3, #2
    7092:	18d3      	adds	r3, r2, r3
    7094:	3304      	adds	r3, #4
    7096:	2200      	movs	r2, #0
    7098:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    709c:	3301      	adds	r3, #1
    709e:	62bb      	str	r3, [r7, #40]	; 0x28
    70a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    70a2:	2b03      	cmp	r3, #3
    70a4:	d9ee      	bls.n	7084 <usb_init+0x204>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    70a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70a8:	3301      	adds	r3, #1
    70aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    70ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70ae:	2b07      	cmp	r3, #7
    70b0:	d9e5      	bls.n	707e <usb_init+0x1fe>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    70b2:	68fb      	ldr	r3, [r7, #12]
    70b4:	22a4      	movs	r2, #164	; 0xa4
    70b6:	2100      	movs	r1, #0
    70b8:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	22a5      	movs	r2, #165	; 0xa5
    70be:	2100      	movs	r1, #0
    70c0:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    70c2:	2300      	movs	r3, #0
    70c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    70c6:	e010      	b.n	70ea <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    70c8:	68fa      	ldr	r2, [r7, #12]
    70ca:	21a6      	movs	r1, #166	; 0xa6
    70cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70ce:	18d3      	adds	r3, r2, r3
    70d0:	185b      	adds	r3, r3, r1
    70d2:	2200      	movs	r2, #0
    70d4:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    70d6:	68fa      	ldr	r2, [r7, #12]
    70d8:	21ae      	movs	r1, #174	; 0xae
    70da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70dc:	18d3      	adds	r3, r2, r3
    70de:	185b      	adds	r3, r3, r1
    70e0:	2200      	movs	r2, #0
    70e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    70e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70e6:	3301      	adds	r3, #1
    70e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    70ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    70ec:	2b07      	cmp	r3, #7
    70ee:	d9eb      	bls.n	70c8 <usb_init+0x248>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    70f0:	2300      	movs	r3, #0
    70f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    70f4:	e008      	b.n	7108 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    70f6:	68fb      	ldr	r3, [r7, #12]
    70f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    70fa:	322e      	adds	r2, #46	; 0x2e
    70fc:	0092      	lsls	r2, r2, #2
    70fe:	2100      	movs	r1, #0
    7100:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    7102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7104:	3301      	adds	r3, #1
    7106:	62fb      	str	r3, [r7, #44]	; 0x2c
    7108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    710a:	2b06      	cmp	r3, #6
    710c:	d9f3      	bls.n	70f6 <usb_init+0x276>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    710e:	2300      	movs	r3, #0
    7110:	62fb      	str	r3, [r7, #44]	; 0x2c
    7112:	e016      	b.n	7142 <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    7114:	2300      	movs	r3, #0
    7116:	62bb      	str	r3, [r7, #40]	; 0x28
    7118:	e00d      	b.n	7136 <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    711a:	68fa      	ldr	r2, [r7, #12]
    711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    711e:	0099      	lsls	r1, r3, #2
    7120:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7122:	18cb      	adds	r3, r1, r3
    7124:	3334      	adds	r3, #52	; 0x34
    7126:	009b      	lsls	r3, r3, #2
    7128:	18d3      	adds	r3, r2, r3
    712a:	3304      	adds	r3, #4
    712c:	2200      	movs	r2, #0
    712e:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    7130:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7132:	3301      	adds	r3, #1
    7134:	62bb      	str	r3, [r7, #40]	; 0x28
    7136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7138:	2b03      	cmp	r3, #3
    713a:	d9ee      	bls.n	711a <usb_init+0x29a>
	for (i = 0; i < USB_EPT_NUM; i++) {
    713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    713e:	3301      	adds	r3, #1
    7140:	62fb      	str	r3, [r7, #44]	; 0x2c
    7142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7144:	2b07      	cmp	r3, #7
    7146:	d9e5      	bls.n	7114 <usb_init+0x294>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7148:	68fa      	ldr	r2, [r7, #12]
    714a:	23aa      	movs	r3, #170	; 0xaa
    714c:	005b      	lsls	r3, r3, #1
    714e:	2100      	movs	r1, #0
    7150:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    7152:	68fa      	ldr	r2, [r7, #12]
    7154:	23ab      	movs	r3, #171	; 0xab
    7156:	005b      	lsls	r3, r3, #1
    7158:	2100      	movs	r1, #0
    715a:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    715c:	2300      	movs	r3, #0
    715e:	62bb      	str	r3, [r7, #40]	; 0x28
    7160:	e012      	b.n	7188 <usb_init+0x308>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    7162:	68f9      	ldr	r1, [r7, #12]
    7164:	23ac      	movs	r3, #172	; 0xac
    7166:	005b      	lsls	r3, r3, #1
    7168:	6aba      	ldr	r2, [r7, #40]	; 0x28
    716a:	188a      	adds	r2, r1, r2
    716c:	18d3      	adds	r3, r2, r3
    716e:	2200      	movs	r2, #0
    7170:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    7172:	68f9      	ldr	r1, [r7, #12]
    7174:	23b0      	movs	r3, #176	; 0xb0
    7176:	005b      	lsls	r3, r3, #1
    7178:	6aba      	ldr	r2, [r7, #40]	; 0x28
    717a:	188a      	adds	r2, r1, r2
    717c:	18d3      	adds	r3, r2, r3
    717e:	2200      	movs	r2, #0
    7180:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    7182:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7184:	3301      	adds	r3, #1
    7186:	62bb      	str	r3, [r7, #40]	; 0x28
    7188:	6abb      	ldr	r3, [r7, #40]	; 0x28
    718a:	2b07      	cmp	r3, #7
    718c:	d9e9      	bls.n	7162 <usb_init+0x2e2>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    718e:	2007      	movs	r0, #7
    7190:	4b11      	ldr	r3, [pc, #68]	; (71d8 <usb_init+0x358>)
    7192:	4798      	blx	r3

	return STATUS_OK;
    7194:	2300      	movs	r3, #0
}
    7196:	0018      	movs	r0, r3
    7198:	46bd      	mov	sp, r7
    719a:	b00c      	add	sp, #48	; 0x30
    719c:	bd80      	pop	{r7, pc}
    719e:	46c0      	nop			; (mov r8, r8)
    71a0:	20000844 	.word	0x20000844
    71a4:	2000082c 	.word	0x2000082c
    71a8:	000052bd 	.word	0x000052bd
    71ac:	00005319 	.word	0x00005319
    71b0:	0000f931 	.word	0x0000f931
    71b4:	000052a5 	.word	0x000052a5
    71b8:	0000f5fd 	.word	0x0000f5fd
    71bc:	0000f641 	.word	0x0000f641
    71c0:	41005000 	.word	0x41005000
    71c4:	00806024 	.word	0x00806024
    71c8:	fffff83f 	.word	0xfffff83f
    71cc:	ffff8fff 	.word	0xffff8fff
    71d0:	20003f4c 	.word	0x20003f4c
    71d4:	00012ee3 	.word	0x00012ee3
    71d8:	00005341 	.word	0x00005341

000071dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    71dc:	b580      	push	{r7, lr}
    71de:	b084      	sub	sp, #16
    71e0:	af00      	add	r7, sp, #0
    71e2:	60f8      	str	r0, [r7, #12]
    71e4:	60b9      	str	r1, [r7, #8]
    71e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	3b04      	subs	r3, #4
    71ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    71ee:	68fb      	ldr	r3, [r7, #12]
    71f0:	2280      	movs	r2, #128	; 0x80
    71f2:	0452      	lsls	r2, r2, #17
    71f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    71f6:	68fb      	ldr	r3, [r7, #12]
    71f8:	3b04      	subs	r3, #4
    71fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    71fc:	68ba      	ldr	r2, [r7, #8]
    71fe:	68fb      	ldr	r3, [r7, #12]
    7200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7202:	68fb      	ldr	r3, [r7, #12]
    7204:	3b04      	subs	r3, #4
    7206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    7208:	4a08      	ldr	r2, [pc, #32]	; (722c <pxPortInitialiseStack+0x50>)
    720a:	68fb      	ldr	r3, [r7, #12]
    720c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    720e:	68fb      	ldr	r3, [r7, #12]
    7210:	3b14      	subs	r3, #20
    7212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    7214:	687a      	ldr	r2, [r7, #4]
    7216:	68fb      	ldr	r3, [r7, #12]
    7218:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    721a:	68fb      	ldr	r3, [r7, #12]
    721c:	3b20      	subs	r3, #32
    721e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    7220:	68fb      	ldr	r3, [r7, #12]
}
    7222:	0018      	movs	r0, r3
    7224:	46bd      	mov	sp, r7
    7226:	b004      	add	sp, #16
    7228:	bd80      	pop	{r7, pc}
    722a:	46c0      	nop			; (mov r8, r8)
    722c:	00007231 	.word	0x00007231

00007230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    7230:	b580      	push	{r7, lr}
    7232:	b082      	sub	sp, #8
    7234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    7236:	2300      	movs	r3, #0
    7238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    723a:	4b07      	ldr	r3, [pc, #28]	; (7258 <prvTaskExitError+0x28>)
    723c:	681b      	ldr	r3, [r3, #0]
    723e:	3301      	adds	r3, #1
    7240:	d001      	beq.n	7246 <prvTaskExitError+0x16>
    7242:	b672      	cpsid	i
    7244:	e7fe      	b.n	7244 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    7246:	b672      	cpsid	i
	while( ulDummy == 0 )
    7248:	46c0      	nop			; (mov r8, r8)
    724a:	687b      	ldr	r3, [r7, #4]
    724c:	2b00      	cmp	r3, #0
    724e:	d0fc      	beq.n	724a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    7250:	46c0      	nop			; (mov r8, r8)
    7252:	46bd      	mov	sp, r7
    7254:	b002      	add	sp, #8
    7256:	bd80      	pop	{r7, pc}
    7258:	200000bc 	.word	0x200000bc

0000725c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    725c:	b580      	push	{r7, lr}
    725e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    7260:	46c0      	nop			; (mov r8, r8)
    7262:	46bd      	mov	sp, r7
    7264:	bd80      	pop	{r7, pc}
	...

00007270 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    7270:	4a0b      	ldr	r2, [pc, #44]	; (72a0 <pxCurrentTCBConst2>)
    7272:	6813      	ldr	r3, [r2, #0]
    7274:	6818      	ldr	r0, [r3, #0]
    7276:	3020      	adds	r0, #32
    7278:	f380 8809 	msr	PSP, r0
    727c:	2002      	movs	r0, #2
    727e:	f380 8814 	msr	CONTROL, r0
    7282:	f3bf 8f6f 	isb	sy
    7286:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    7288:	46ae      	mov	lr, r5
    728a:	bc08      	pop	{r3}
    728c:	bc04      	pop	{r2}
    728e:	b662      	cpsie	i
    7290:	4718      	bx	r3
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	46c0      	nop			; (mov r8, r8)
    7296:	46c0      	nop			; (mov r8, r8)
    7298:	46c0      	nop			; (mov r8, r8)
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	46c0      	nop			; (mov r8, r8)
    729e:	46c0      	nop			; (mov r8, r8)

000072a0 <pxCurrentTCBConst2>:
    72a0:	20003af0 	.word	0x20003af0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    72a4:	46c0      	nop			; (mov r8, r8)
    72a6:	46c0      	nop			; (mov r8, r8)

000072a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    72a8:	b580      	push	{r7, lr}
    72aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    72ac:	4b0e      	ldr	r3, [pc, #56]	; (72e8 <xPortStartScheduler+0x40>)
    72ae:	4a0e      	ldr	r2, [pc, #56]	; (72e8 <xPortStartScheduler+0x40>)
    72b0:	6812      	ldr	r2, [r2, #0]
    72b2:	21ff      	movs	r1, #255	; 0xff
    72b4:	0409      	lsls	r1, r1, #16
    72b6:	430a      	orrs	r2, r1
    72b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    72ba:	4b0b      	ldr	r3, [pc, #44]	; (72e8 <xPortStartScheduler+0x40>)
    72bc:	4a0a      	ldr	r2, [pc, #40]	; (72e8 <xPortStartScheduler+0x40>)
    72be:	6812      	ldr	r2, [r2, #0]
    72c0:	21ff      	movs	r1, #255	; 0xff
    72c2:	0609      	lsls	r1, r1, #24
    72c4:	430a      	orrs	r2, r1
    72c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    72c8:	4b08      	ldr	r3, [pc, #32]	; (72ec <xPortStartScheduler+0x44>)
    72ca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    72cc:	4b08      	ldr	r3, [pc, #32]	; (72f0 <xPortStartScheduler+0x48>)
    72ce:	2200      	movs	r2, #0
    72d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    72d2:	4b08      	ldr	r3, [pc, #32]	; (72f4 <xPortStartScheduler+0x4c>)
    72d4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    72d6:	4b08      	ldr	r3, [pc, #32]	; (72f8 <xPortStartScheduler+0x50>)
    72d8:	4798      	blx	r3
	prvTaskExitError();
    72da:	4b08      	ldr	r3, [pc, #32]	; (72fc <xPortStartScheduler+0x54>)
    72dc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    72de:	2300      	movs	r3, #0
}
    72e0:	0018      	movs	r0, r3
    72e2:	46bd      	mov	sp, r7
    72e4:	bd80      	pop	{r7, pc}
    72e6:	46c0      	nop			; (mov r8, r8)
    72e8:	e000ed20 	.word	0xe000ed20
    72ec:	00007419 	.word	0x00007419
    72f0:	200000bc 	.word	0x200000bc
    72f4:	00007271 	.word	0x00007271
    72f8:	0000c1cd 	.word	0x0000c1cd
    72fc:	00007231 	.word	0x00007231

00007300 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    7300:	b580      	push	{r7, lr}
    7302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    7304:	4b05      	ldr	r3, [pc, #20]	; (731c <vPortYield+0x1c>)
    7306:	2280      	movs	r2, #128	; 0x80
    7308:	0552      	lsls	r2, r2, #21
    730a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    730c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7310:	f3bf 8f6f 	isb	sy
}
    7314:	46c0      	nop			; (mov r8, r8)
    7316:	46bd      	mov	sp, r7
    7318:	bd80      	pop	{r7, pc}
    731a:	46c0      	nop			; (mov r8, r8)
    731c:	e000ed04 	.word	0xe000ed04

00007320 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7320:	b580      	push	{r7, lr}
    7322:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    7324:	b672      	cpsid	i
    uxCriticalNesting++;
    7326:	4b06      	ldr	r3, [pc, #24]	; (7340 <vPortEnterCritical+0x20>)
    7328:	681b      	ldr	r3, [r3, #0]
    732a:	1c5a      	adds	r2, r3, #1
    732c:	4b04      	ldr	r3, [pc, #16]	; (7340 <vPortEnterCritical+0x20>)
    732e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    7330:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7334:	f3bf 8f6f 	isb	sy
}
    7338:	46c0      	nop			; (mov r8, r8)
    733a:	46bd      	mov	sp, r7
    733c:	bd80      	pop	{r7, pc}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	200000bc 	.word	0x200000bc

00007344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    7344:	b580      	push	{r7, lr}
    7346:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    7348:	4b09      	ldr	r3, [pc, #36]	; (7370 <vPortExitCritical+0x2c>)
    734a:	681b      	ldr	r3, [r3, #0]
    734c:	2b00      	cmp	r3, #0
    734e:	d101      	bne.n	7354 <vPortExitCritical+0x10>
    7350:	b672      	cpsid	i
    7352:	e7fe      	b.n	7352 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    7354:	4b06      	ldr	r3, [pc, #24]	; (7370 <vPortExitCritical+0x2c>)
    7356:	681b      	ldr	r3, [r3, #0]
    7358:	1e5a      	subs	r2, r3, #1
    735a:	4b05      	ldr	r3, [pc, #20]	; (7370 <vPortExitCritical+0x2c>)
    735c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    735e:	4b04      	ldr	r3, [pc, #16]	; (7370 <vPortExitCritical+0x2c>)
    7360:	681b      	ldr	r3, [r3, #0]
    7362:	2b00      	cmp	r3, #0
    7364:	d100      	bne.n	7368 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    7366:	b662      	cpsie	i
    }
}
    7368:	46c0      	nop			; (mov r8, r8)
    736a:	46bd      	mov	sp, r7
    736c:	bd80      	pop	{r7, pc}
    736e:	46c0      	nop			; (mov r8, r8)
    7370:	200000bc 	.word	0x200000bc

00007374 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    7374:	f3ef 8010 	mrs	r0, PRIMASK
    7378:	b672      	cpsid	i
    737a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    737c:	46c0      	nop			; (mov r8, r8)
    737e:	0018      	movs	r0, r3

00007380 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    7380:	f380 8810 	msr	PRIMASK, r0
    7384:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    7386:	46c0      	nop			; (mov r8, r8)
	...

00007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    7390:	f3ef 8009 	mrs	r0, PSP
    7394:	4b0e      	ldr	r3, [pc, #56]	; (73d0 <pxCurrentTCBConst>)
    7396:	681a      	ldr	r2, [r3, #0]
    7398:	3820      	subs	r0, #32
    739a:	6010      	str	r0, [r2, #0]
    739c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    739e:	4644      	mov	r4, r8
    73a0:	464d      	mov	r5, r9
    73a2:	4656      	mov	r6, sl
    73a4:	465f      	mov	r7, fp
    73a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    73a8:	b508      	push	{r3, lr}
    73aa:	b672      	cpsid	i
    73ac:	f004 ff0e 	bl	c1cc <vTaskSwitchContext>
    73b0:	b662      	cpsie	i
    73b2:	bc0c      	pop	{r2, r3}
    73b4:	6811      	ldr	r1, [r2, #0]
    73b6:	6808      	ldr	r0, [r1, #0]
    73b8:	3010      	adds	r0, #16
    73ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    73bc:	46a0      	mov	r8, r4
    73be:	46a9      	mov	r9, r5
    73c0:	46b2      	mov	sl, r6
    73c2:	46bb      	mov	fp, r7
    73c4:	f380 8809 	msr	PSP, r0
    73c8:	3820      	subs	r0, #32
    73ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    73cc:	4718      	bx	r3
    73ce:	46c0      	nop			; (mov r8, r8)

000073d0 <pxCurrentTCBConst>:
    73d0:	20003af0 	.word	0x20003af0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    73d4:	46c0      	nop			; (mov r8, r8)
    73d6:	46c0      	nop			; (mov r8, r8)

000073d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    73d8:	b580      	push	{r7, lr}
    73da:	b082      	sub	sp, #8
    73dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    73de:	4b0a      	ldr	r3, [pc, #40]	; (7408 <SysTick_Handler+0x30>)
    73e0:	4798      	blx	r3
    73e2:	0003      	movs	r3, r0
    73e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    73e6:	4b09      	ldr	r3, [pc, #36]	; (740c <SysTick_Handler+0x34>)
    73e8:	4798      	blx	r3
    73ea:	1e03      	subs	r3, r0, #0
    73ec:	d003      	beq.n	73f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    73ee:	4b08      	ldr	r3, [pc, #32]	; (7410 <SysTick_Handler+0x38>)
    73f0:	2280      	movs	r2, #128	; 0x80
    73f2:	0552      	lsls	r2, r2, #21
    73f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	0018      	movs	r0, r3
    73fa:	4b06      	ldr	r3, [pc, #24]	; (7414 <SysTick_Handler+0x3c>)
    73fc:	4798      	blx	r3
}
    73fe:	46c0      	nop			; (mov r8, r8)
    7400:	46bd      	mov	sp, r7
    7402:	b002      	add	sp, #8
    7404:	bd80      	pop	{r7, pc}
    7406:	46c0      	nop			; (mov r8, r8)
    7408:	00007375 	.word	0x00007375
    740c:	0000c045 	.word	0x0000c045
    7410:	e000ed04 	.word	0xe000ed04
    7414:	00007381 	.word	0x00007381

00007418 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7418:	b580      	push	{r7, lr}
    741a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    741c:	4b07      	ldr	r3, [pc, #28]	; (743c <prvSetupTimerInterrupt+0x24>)
    741e:	2200      	movs	r2, #0
    7420:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    7422:	4b07      	ldr	r3, [pc, #28]	; (7440 <prvSetupTimerInterrupt+0x28>)
    7424:	2200      	movs	r2, #0
    7426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7428:	4b06      	ldr	r3, [pc, #24]	; (7444 <prvSetupTimerInterrupt+0x2c>)
    742a:	4a07      	ldr	r2, [pc, #28]	; (7448 <prvSetupTimerInterrupt+0x30>)
    742c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    742e:	4b03      	ldr	r3, [pc, #12]	; (743c <prvSetupTimerInterrupt+0x24>)
    7430:	2207      	movs	r2, #7
    7432:	601a      	str	r2, [r3, #0]
}
    7434:	46c0      	nop			; (mov r8, r8)
    7436:	46bd      	mov	sp, r7
    7438:	bd80      	pop	{r7, pc}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	e000e010 	.word	0xe000e010
    7440:	e000e018 	.word	0xe000e018
    7444:	e000e014 	.word	0xe000e014
    7448:	0000bb7f 	.word	0x0000bb7f

0000744c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    744c:	b580      	push	{r7, lr}
    744e:	b086      	sub	sp, #24
    7450:	af00      	add	r7, sp, #0
    7452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    7454:	2300      	movs	r3, #0
    7456:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
    7458:	4b4c      	ldr	r3, [pc, #304]	; (758c <pvPortMalloc+0x140>)
    745a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    745c:	4b4c      	ldr	r3, [pc, #304]	; (7590 <pvPortMalloc+0x144>)
    745e:	681b      	ldr	r3, [r3, #0]
    7460:	2b00      	cmp	r3, #0
    7462:	d101      	bne.n	7468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    7464:	4b4b      	ldr	r3, [pc, #300]	; (7594 <pvPortMalloc+0x148>)
    7466:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    7468:	4b4b      	ldr	r3, [pc, #300]	; (7598 <pvPortMalloc+0x14c>)
    746a:	681b      	ldr	r3, [r3, #0]
    746c:	687a      	ldr	r2, [r7, #4]
    746e:	4013      	ands	r3, r2
    7470:	d000      	beq.n	7474 <pvPortMalloc+0x28>
    7472:	e079      	b.n	7568 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	2b00      	cmp	r3, #0
    7478:	d012      	beq.n	74a0 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
    747a:	2208      	movs	r2, #8
    747c:	687b      	ldr	r3, [r7, #4]
    747e:	189b      	adds	r3, r3, r2
    7480:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	2207      	movs	r2, #7
    7486:	4013      	ands	r3, r2
    7488:	d00a      	beq.n	74a0 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	2207      	movs	r2, #7
    748e:	4393      	bics	r3, r2
    7490:	3308      	adds	r3, #8
    7492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    7494:	687b      	ldr	r3, [r7, #4]
    7496:	2207      	movs	r2, #7
    7498:	4013      	ands	r3, r2
    749a:	d001      	beq.n	74a0 <pvPortMalloc+0x54>
    749c:	b672      	cpsid	i
    749e:	e7fe      	b.n	749e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    74a0:	687b      	ldr	r3, [r7, #4]
    74a2:	2b00      	cmp	r3, #0
    74a4:	d060      	beq.n	7568 <pvPortMalloc+0x11c>
    74a6:	4b3d      	ldr	r3, [pc, #244]	; (759c <pvPortMalloc+0x150>)
    74a8:	681b      	ldr	r3, [r3, #0]
    74aa:	687a      	ldr	r2, [r7, #4]
    74ac:	429a      	cmp	r2, r3
    74ae:	d85b      	bhi.n	7568 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    74b0:	4b3b      	ldr	r3, [pc, #236]	; (75a0 <pvPortMalloc+0x154>)
    74b2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
    74b4:	4b3a      	ldr	r3, [pc, #232]	; (75a0 <pvPortMalloc+0x154>)
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    74ba:	e004      	b.n	74c6 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
    74bc:	697b      	ldr	r3, [r7, #20]
    74be:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
    74c0:	697b      	ldr	r3, [r7, #20]
    74c2:	681b      	ldr	r3, [r3, #0]
    74c4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    74c6:	697b      	ldr	r3, [r7, #20]
    74c8:	685a      	ldr	r2, [r3, #4]
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	429a      	cmp	r2, r3
    74ce:	d203      	bcs.n	74d8 <pvPortMalloc+0x8c>
    74d0:	697b      	ldr	r3, [r7, #20]
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d1f1      	bne.n	74bc <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    74d8:	4b2d      	ldr	r3, [pc, #180]	; (7590 <pvPortMalloc+0x144>)
    74da:	681b      	ldr	r3, [r3, #0]
    74dc:	697a      	ldr	r2, [r7, #20]
    74de:	429a      	cmp	r2, r3
    74e0:	d042      	beq.n	7568 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    74e2:	693b      	ldr	r3, [r7, #16]
    74e4:	681b      	ldr	r3, [r3, #0]
    74e6:	2208      	movs	r2, #8
    74e8:	189b      	adds	r3, r3, r2
    74ea:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    74ec:	697b      	ldr	r3, [r7, #20]
    74ee:	681a      	ldr	r2, [r3, #0]
    74f0:	693b      	ldr	r3, [r7, #16]
    74f2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    74f4:	697b      	ldr	r3, [r7, #20]
    74f6:	685a      	ldr	r2, [r3, #4]
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	1ad2      	subs	r2, r2, r3
    74fc:	2308      	movs	r3, #8
    74fe:	005b      	lsls	r3, r3, #1
    7500:	429a      	cmp	r2, r3
    7502:	d916      	bls.n	7532 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    7504:	697a      	ldr	r2, [r7, #20]
    7506:	687b      	ldr	r3, [r7, #4]
    7508:	18d3      	adds	r3, r2, r3
    750a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    750c:	68bb      	ldr	r3, [r7, #8]
    750e:	2207      	movs	r2, #7
    7510:	4013      	ands	r3, r2
    7512:	d001      	beq.n	7518 <pvPortMalloc+0xcc>
    7514:	b672      	cpsid	i
    7516:	e7fe      	b.n	7516 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    7518:	697b      	ldr	r3, [r7, #20]
    751a:	685a      	ldr	r2, [r3, #4]
    751c:	687b      	ldr	r3, [r7, #4]
    751e:	1ad2      	subs	r2, r2, r3
    7520:	68bb      	ldr	r3, [r7, #8]
    7522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    7524:	697b      	ldr	r3, [r7, #20]
    7526:	687a      	ldr	r2, [r7, #4]
    7528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    752a:	68bb      	ldr	r3, [r7, #8]
    752c:	0018      	movs	r0, r3
    752e:	4b1d      	ldr	r3, [pc, #116]	; (75a4 <pvPortMalloc+0x158>)
    7530:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    7532:	4b1a      	ldr	r3, [pc, #104]	; (759c <pvPortMalloc+0x150>)
    7534:	681a      	ldr	r2, [r3, #0]
    7536:	697b      	ldr	r3, [r7, #20]
    7538:	685b      	ldr	r3, [r3, #4]
    753a:	1ad2      	subs	r2, r2, r3
    753c:	4b17      	ldr	r3, [pc, #92]	; (759c <pvPortMalloc+0x150>)
    753e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    7540:	4b16      	ldr	r3, [pc, #88]	; (759c <pvPortMalloc+0x150>)
    7542:	681a      	ldr	r2, [r3, #0]
    7544:	4b18      	ldr	r3, [pc, #96]	; (75a8 <pvPortMalloc+0x15c>)
    7546:	681b      	ldr	r3, [r3, #0]
    7548:	429a      	cmp	r2, r3
    754a:	d203      	bcs.n	7554 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    754c:	4b13      	ldr	r3, [pc, #76]	; (759c <pvPortMalloc+0x150>)
    754e:	681a      	ldr	r2, [r3, #0]
    7550:	4b15      	ldr	r3, [pc, #84]	; (75a8 <pvPortMalloc+0x15c>)
    7552:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    7554:	697b      	ldr	r3, [r7, #20]
    7556:	685a      	ldr	r2, [r3, #4]
    7558:	4b0f      	ldr	r3, [pc, #60]	; (7598 <pvPortMalloc+0x14c>)
    755a:	681b      	ldr	r3, [r3, #0]
    755c:	431a      	orrs	r2, r3
    755e:	697b      	ldr	r3, [r7, #20]
    7560:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    7562:	697b      	ldr	r3, [r7, #20]
    7564:	2200      	movs	r2, #0
    7566:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    7568:	4b10      	ldr	r3, [pc, #64]	; (75ac <pvPortMalloc+0x160>)
    756a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    756c:	68fb      	ldr	r3, [r7, #12]
    756e:	2b00      	cmp	r3, #0
    7570:	d101      	bne.n	7576 <pvPortMalloc+0x12a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    7572:	4b0f      	ldr	r3, [pc, #60]	; (75b0 <pvPortMalloc+0x164>)
    7574:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    7576:	68fb      	ldr	r3, [r7, #12]
    7578:	2207      	movs	r2, #7
    757a:	4013      	ands	r3, r2
    757c:	d001      	beq.n	7582 <pvPortMalloc+0x136>
    757e:	b672      	cpsid	i
    7580:	e7fe      	b.n	7580 <pvPortMalloc+0x134>
	return pvReturn;
    7582:	68fb      	ldr	r3, [r7, #12]
}
    7584:	0018      	movs	r0, r3
    7586:	46bd      	mov	sp, r7
    7588:	b006      	add	sp, #24
    758a:	bd80      	pop	{r7, pc}
    758c:	0000bedd 	.word	0x0000bedd
    7590:	20003730 	.word	0x20003730
    7594:	00007651 	.word	0x00007651
    7598:	2000373c 	.word	0x2000373c
    759c:	20003734 	.word	0x20003734
    75a0:	20003728 	.word	0x20003728
    75a4:	00007711 	.word	0x00007711
    75a8:	20003738 	.word	0x20003738
    75ac:	0000bef5 	.word	0x0000bef5
    75b0:	0000fd45 	.word	0x0000fd45

000075b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b084      	sub	sp, #16
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	2b00      	cmp	r3, #0
    75c4:	d035      	beq.n	7632 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    75c6:	2308      	movs	r3, #8
    75c8:	425b      	negs	r3, r3
    75ca:	68fa      	ldr	r2, [r7, #12]
    75cc:	18d3      	adds	r3, r2, r3
    75ce:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    75d0:	68fb      	ldr	r3, [r7, #12]
    75d2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    75d4:	68bb      	ldr	r3, [r7, #8]
    75d6:	685a      	ldr	r2, [r3, #4]
    75d8:	4b18      	ldr	r3, [pc, #96]	; (763c <vPortFree+0x88>)
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	4013      	ands	r3, r2
    75de:	d101      	bne.n	75e4 <vPortFree+0x30>
    75e0:	b672      	cpsid	i
    75e2:	e7fe      	b.n	75e2 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    75e4:	68bb      	ldr	r3, [r7, #8]
    75e6:	681b      	ldr	r3, [r3, #0]
    75e8:	2b00      	cmp	r3, #0
    75ea:	d001      	beq.n	75f0 <vPortFree+0x3c>
    75ec:	b672      	cpsid	i
    75ee:	e7fe      	b.n	75ee <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    75f0:	68bb      	ldr	r3, [r7, #8]
    75f2:	685a      	ldr	r2, [r3, #4]
    75f4:	4b11      	ldr	r3, [pc, #68]	; (763c <vPortFree+0x88>)
    75f6:	681b      	ldr	r3, [r3, #0]
    75f8:	4013      	ands	r3, r2
    75fa:	d01a      	beq.n	7632 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    75fc:	68bb      	ldr	r3, [r7, #8]
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	2b00      	cmp	r3, #0
    7602:	d116      	bne.n	7632 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    7604:	68bb      	ldr	r3, [r7, #8]
    7606:	685a      	ldr	r2, [r3, #4]
    7608:	4b0c      	ldr	r3, [pc, #48]	; (763c <vPortFree+0x88>)
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	43db      	mvns	r3, r3
    760e:	401a      	ands	r2, r3
    7610:	68bb      	ldr	r3, [r7, #8]
    7612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    7614:	4b0a      	ldr	r3, [pc, #40]	; (7640 <vPortFree+0x8c>)
    7616:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    7618:	68bb      	ldr	r3, [r7, #8]
    761a:	685a      	ldr	r2, [r3, #4]
    761c:	4b09      	ldr	r3, [pc, #36]	; (7644 <vPortFree+0x90>)
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	18d2      	adds	r2, r2, r3
    7622:	4b08      	ldr	r3, [pc, #32]	; (7644 <vPortFree+0x90>)
    7624:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    7626:	68bb      	ldr	r3, [r7, #8]
    7628:	0018      	movs	r0, r3
    762a:	4b07      	ldr	r3, [pc, #28]	; (7648 <vPortFree+0x94>)
    762c:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
    762e:	4b07      	ldr	r3, [pc, #28]	; (764c <vPortFree+0x98>)
    7630:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    7632:	46c0      	nop			; (mov r8, r8)
    7634:	46bd      	mov	sp, r7
    7636:	b004      	add	sp, #16
    7638:	bd80      	pop	{r7, pc}
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	2000373c 	.word	0x2000373c
    7640:	0000bedd 	.word	0x0000bedd
    7644:	20003734 	.word	0x20003734
    7648:	00007711 	.word	0x00007711
    764c:	0000bef5 	.word	0x0000bef5

00007650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    7650:	b580      	push	{r7, lr}
    7652:	b084      	sub	sp, #16
    7654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    7656:	4b27      	ldr	r3, [pc, #156]	; (76f4 <prvHeapInit+0xa4>)
    7658:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    765a:	4b27      	ldr	r3, [pc, #156]	; (76f8 <prvHeapInit+0xa8>)
    765c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    765e:	68fb      	ldr	r3, [r7, #12]
    7660:	2207      	movs	r2, #7
    7662:	4013      	ands	r3, r2
    7664:	d00c      	beq.n	7680 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    7666:	68fb      	ldr	r3, [r7, #12]
    7668:	3307      	adds	r3, #7
    766a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    766c:	68fb      	ldr	r3, [r7, #12]
    766e:	2207      	movs	r2, #7
    7670:	4393      	bics	r3, r2
    7672:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    7674:	68ba      	ldr	r2, [r7, #8]
    7676:	68fb      	ldr	r3, [r7, #12]
    7678:	1ad2      	subs	r2, r2, r3
    767a:	4b1f      	ldr	r3, [pc, #124]	; (76f8 <prvHeapInit+0xa8>)
    767c:	18d3      	adds	r3, r2, r3
    767e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    7680:	68fb      	ldr	r3, [r7, #12]
    7682:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    7684:	4b1d      	ldr	r3, [pc, #116]	; (76fc <prvHeapInit+0xac>)
    7686:	687a      	ldr	r2, [r7, #4]
    7688:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
    768a:	4b1c      	ldr	r3, [pc, #112]	; (76fc <prvHeapInit+0xac>)
    768c:	2200      	movs	r2, #0
    768e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    7690:	687a      	ldr	r2, [r7, #4]
    7692:	68bb      	ldr	r3, [r7, #8]
    7694:	18d3      	adds	r3, r2, r3
    7696:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    7698:	2208      	movs	r2, #8
    769a:	68fb      	ldr	r3, [r7, #12]
    769c:	1a9b      	subs	r3, r3, r2
    769e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    76a0:	68fb      	ldr	r3, [r7, #12]
    76a2:	2207      	movs	r2, #7
    76a4:	4393      	bics	r3, r2
    76a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    76a8:	68fa      	ldr	r2, [r7, #12]
    76aa:	4b15      	ldr	r3, [pc, #84]	; (7700 <prvHeapInit+0xb0>)
    76ac:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
    76ae:	4b14      	ldr	r3, [pc, #80]	; (7700 <prvHeapInit+0xb0>)
    76b0:	681b      	ldr	r3, [r3, #0]
    76b2:	2200      	movs	r2, #0
    76b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    76b6:	4b12      	ldr	r3, [pc, #72]	; (7700 <prvHeapInit+0xb0>)
    76b8:	681b      	ldr	r3, [r3, #0]
    76ba:	2200      	movs	r2, #0
    76bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    76c2:	683b      	ldr	r3, [r7, #0]
    76c4:	68fa      	ldr	r2, [r7, #12]
    76c6:	1ad2      	subs	r2, r2, r3
    76c8:	683b      	ldr	r3, [r7, #0]
    76ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    76cc:	4b0c      	ldr	r3, [pc, #48]	; (7700 <prvHeapInit+0xb0>)
    76ce:	681a      	ldr	r2, [r3, #0]
    76d0:	683b      	ldr	r3, [r7, #0]
    76d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    76d4:	683b      	ldr	r3, [r7, #0]
    76d6:	685a      	ldr	r2, [r3, #4]
    76d8:	4b0a      	ldr	r3, [pc, #40]	; (7704 <prvHeapInit+0xb4>)
    76da:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    76dc:	683b      	ldr	r3, [r7, #0]
    76de:	685a      	ldr	r2, [r3, #4]
    76e0:	4b09      	ldr	r3, [pc, #36]	; (7708 <prvHeapInit+0xb8>)
    76e2:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    76e4:	4b09      	ldr	r3, [pc, #36]	; (770c <prvHeapInit+0xbc>)
    76e6:	2280      	movs	r2, #128	; 0x80
    76e8:	0612      	lsls	r2, r2, #24
    76ea:	601a      	str	r2, [r3, #0]
}
    76ec:	46c0      	nop			; (mov r8, r8)
    76ee:	46bd      	mov	sp, r7
    76f0:	b004      	add	sp, #16
    76f2:	bd80      	pop	{r7, pc}
    76f4:	00002ee0 	.word	0x00002ee0
    76f8:	20000848 	.word	0x20000848
    76fc:	20003728 	.word	0x20003728
    7700:	20003730 	.word	0x20003730
    7704:	20003738 	.word	0x20003738
    7708:	20003734 	.word	0x20003734
    770c:	2000373c 	.word	0x2000373c

00007710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    7710:	b580      	push	{r7, lr}
    7712:	b084      	sub	sp, #16
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    7718:	4b27      	ldr	r3, [pc, #156]	; (77b8 <prvInsertBlockIntoFreeList+0xa8>)
    771a:	60fb      	str	r3, [r7, #12]
    771c:	e002      	b.n	7724 <prvInsertBlockIntoFreeList+0x14>
    771e:	68fb      	ldr	r3, [r7, #12]
    7720:	681b      	ldr	r3, [r3, #0]
    7722:	60fb      	str	r3, [r7, #12]
    7724:	68fb      	ldr	r3, [r7, #12]
    7726:	681a      	ldr	r2, [r3, #0]
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	429a      	cmp	r2, r3
    772c:	d3f7      	bcc.n	771e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    772e:	68fb      	ldr	r3, [r7, #12]
    7730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    7732:	68fb      	ldr	r3, [r7, #12]
    7734:	685b      	ldr	r3, [r3, #4]
    7736:	68ba      	ldr	r2, [r7, #8]
    7738:	18d2      	adds	r2, r2, r3
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	429a      	cmp	r2, r3
    773e:	d108      	bne.n	7752 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    7740:	68fb      	ldr	r3, [r7, #12]
    7742:	685a      	ldr	r2, [r3, #4]
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	685b      	ldr	r3, [r3, #4]
    7748:	18d2      	adds	r2, r2, r3
    774a:	68fb      	ldr	r3, [r7, #12]
    774c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    774e:	68fb      	ldr	r3, [r7, #12]
    7750:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    7752:	687b      	ldr	r3, [r7, #4]
    7754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	685b      	ldr	r3, [r3, #4]
    775a:	68ba      	ldr	r2, [r7, #8]
    775c:	18d2      	adds	r2, r2, r3
    775e:	68fb      	ldr	r3, [r7, #12]
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	429a      	cmp	r2, r3
    7764:	d118      	bne.n	7798 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    7766:	68fb      	ldr	r3, [r7, #12]
    7768:	681a      	ldr	r2, [r3, #0]
    776a:	4b14      	ldr	r3, [pc, #80]	; (77bc <prvInsertBlockIntoFreeList+0xac>)
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	429a      	cmp	r2, r3
    7770:	d00d      	beq.n	778e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	685a      	ldr	r2, [r3, #4]
    7776:	68fb      	ldr	r3, [r7, #12]
    7778:	681b      	ldr	r3, [r3, #0]
    777a:	685b      	ldr	r3, [r3, #4]
    777c:	18d2      	adds	r2, r2, r3
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    7782:	68fb      	ldr	r3, [r7, #12]
    7784:	681b      	ldr	r3, [r3, #0]
    7786:	681a      	ldr	r2, [r3, #0]
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	601a      	str	r2, [r3, #0]
    778c:	e008      	b.n	77a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    778e:	4b0b      	ldr	r3, [pc, #44]	; (77bc <prvInsertBlockIntoFreeList+0xac>)
    7790:	681a      	ldr	r2, [r3, #0]
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	601a      	str	r2, [r3, #0]
    7796:	e003      	b.n	77a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    7798:	68fb      	ldr	r3, [r7, #12]
    779a:	681a      	ldr	r2, [r3, #0]
    779c:	687b      	ldr	r3, [r7, #4]
    779e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    77a0:	68fa      	ldr	r2, [r7, #12]
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	429a      	cmp	r2, r3
    77a6:	d002      	beq.n	77ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    77a8:	68fb      	ldr	r3, [r7, #12]
    77aa:	687a      	ldr	r2, [r7, #4]
    77ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    77ae:	46c0      	nop			; (mov r8, r8)
    77b0:	46bd      	mov	sp, r7
    77b2:	b004      	add	sp, #16
    77b4:	bd80      	pop	{r7, pc}
    77b6:	46c0      	nop			; (mov r8, r8)
    77b8:	20003728 	.word	0x20003728
    77bc:	20003730 	.word	0x20003730

000077c0 <system_interrupt_enable>:
{
    77c0:	b580      	push	{r7, lr}
    77c2:	b082      	sub	sp, #8
    77c4:	af00      	add	r7, sp, #0
    77c6:	0002      	movs	r2, r0
    77c8:	1dfb      	adds	r3, r7, #7
    77ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    77cc:	4b06      	ldr	r3, [pc, #24]	; (77e8 <system_interrupt_enable+0x28>)
    77ce:	1dfa      	adds	r2, r7, #7
    77d0:	7812      	ldrb	r2, [r2, #0]
    77d2:	0011      	movs	r1, r2
    77d4:	221f      	movs	r2, #31
    77d6:	400a      	ands	r2, r1
    77d8:	2101      	movs	r1, #1
    77da:	4091      	lsls	r1, r2
    77dc:	000a      	movs	r2, r1
    77de:	601a      	str	r2, [r3, #0]
}
    77e0:	46c0      	nop			; (mov r8, r8)
    77e2:	46bd      	mov	sp, r7
    77e4:	b002      	add	sp, #8
    77e6:	bd80      	pop	{r7, pc}
    77e8:	e000e100 	.word	0xe000e100

000077ec <adc_is_syncing>:
{
    77ec:	b580      	push	{r7, lr}
    77ee:	b084      	sub	sp, #16
    77f0:	af00      	add	r7, sp, #0
    77f2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	681b      	ldr	r3, [r3, #0]
    77f8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    77fa:	68fb      	ldr	r3, [r7, #12]
    77fc:	7e5b      	ldrb	r3, [r3, #25]
    77fe:	b2db      	uxtb	r3, r3
    7800:	b25b      	sxtb	r3, r3
    7802:	2b00      	cmp	r3, #0
    7804:	da01      	bge.n	780a <adc_is_syncing+0x1e>
		return true;
    7806:	2301      	movs	r3, #1
    7808:	e000      	b.n	780c <adc_is_syncing+0x20>
	return false;
    780a:	2300      	movs	r3, #0
}
    780c:	0018      	movs	r0, r3
    780e:	46bd      	mov	sp, r7
    7810:	b004      	add	sp, #16
    7812:	bd80      	pop	{r7, pc}

00007814 <adc_enable>:
{
    7814:	b580      	push	{r7, lr}
    7816:	b084      	sub	sp, #16
    7818:	af00      	add	r7, sp, #0
    781a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    781c:	687b      	ldr	r3, [r7, #4]
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    7822:	46c0      	nop			; (mov r8, r8)
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	0018      	movs	r0, r3
    7828:	4b10      	ldr	r3, [pc, #64]	; (786c <adc_enable+0x58>)
    782a:	4798      	blx	r3
    782c:	1e03      	subs	r3, r0, #0
    782e:	d1f9      	bne.n	7824 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    7830:	2017      	movs	r0, #23
    7832:	4b0f      	ldr	r3, [pc, #60]	; (7870 <adc_enable+0x5c>)
    7834:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    7836:	68fb      	ldr	r3, [r7, #12]
    7838:	220f      	movs	r2, #15
    783a:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	220f      	movs	r2, #15
    7840:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    7842:	68fb      	ldr	r3, [r7, #12]
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	b2db      	uxtb	r3, r3
    7848:	2202      	movs	r2, #2
    784a:	4313      	orrs	r3, r2
    784c:	b2da      	uxtb	r2, r3
    784e:	68fb      	ldr	r3, [r7, #12]
    7850:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    7852:	46c0      	nop			; (mov r8, r8)
    7854:	687b      	ldr	r3, [r7, #4]
    7856:	0018      	movs	r0, r3
    7858:	4b04      	ldr	r3, [pc, #16]	; (786c <adc_enable+0x58>)
    785a:	4798      	blx	r3
    785c:	1e03      	subs	r3, r0, #0
    785e:	d1f9      	bne.n	7854 <adc_enable+0x40>
	return STATUS_OK;
    7860:	2300      	movs	r3, #0
}
    7862:	0018      	movs	r0, r3
    7864:	46bd      	mov	sp, r7
    7866:	b004      	add	sp, #16
    7868:	bd80      	pop	{r7, pc}
    786a:	46c0      	nop			; (mov r8, r8)
    786c:	000077ed 	.word	0x000077ed
    7870:	000077c1 	.word	0x000077c1

00007874 <adc_enable_interrupt>:
{
    7874:	b580      	push	{r7, lr}
    7876:	b084      	sub	sp, #16
    7878:	af00      	add	r7, sp, #0
    787a:	6078      	str	r0, [r7, #4]
    787c:	000a      	movs	r2, r1
    787e:	1cfb      	adds	r3, r7, #3
    7880:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	681b      	ldr	r3, [r3, #0]
    7886:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
    7888:	68fb      	ldr	r3, [r7, #12]
    788a:	1cfa      	adds	r2, r7, #3
    788c:	7812      	ldrb	r2, [r2, #0]
    788e:	75da      	strb	r2, [r3, #23]
}
    7890:	46c0      	nop			; (mov r8, r8)
    7892:	46bd      	mov	sp, r7
    7894:	b004      	add	sp, #16
    7896:	bd80      	pop	{r7, pc}

00007898 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    7898:	b580      	push	{r7, lr}
    789a:	b082      	sub	sp, #8
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
    78a0:	000a      	movs	r2, r1
    78a2:	1cfb      	adds	r3, r7, #3
    78a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	7edb      	ldrb	r3, [r3, #27]
    78aa:	b25a      	sxtb	r2, r3
    78ac:	1cfb      	adds	r3, r7, #3
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	2101      	movs	r1, #1
    78b2:	4099      	lsls	r1, r3
    78b4:	000b      	movs	r3, r1
    78b6:	b25b      	sxtb	r3, r3
    78b8:	4313      	orrs	r3, r2
    78ba:	b25b      	sxtb	r3, r3
    78bc:	b2da      	uxtb	r2, r3
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    78c2:	1cfb      	adds	r3, r7, #3
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	2b01      	cmp	r3, #1
    78c8:	d104      	bne.n	78d4 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	2104      	movs	r1, #4
    78ce:	0018      	movs	r0, r3
    78d0:	4b07      	ldr	r3, [pc, #28]	; (78f0 <adc_enable_callback+0x58>)
    78d2:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    78d4:	1cfb      	adds	r3, r7, #3
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	2b02      	cmp	r3, #2
    78da:	d104      	bne.n	78e6 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    78dc:	687b      	ldr	r3, [r7, #4]
    78de:	2102      	movs	r1, #2
    78e0:	0018      	movs	r0, r3
    78e2:	4b03      	ldr	r3, [pc, #12]	; (78f0 <adc_enable_callback+0x58>)
    78e4:	4798      	blx	r3
	}
}
    78e6:	46c0      	nop			; (mov r8, r8)
    78e8:	46bd      	mov	sp, r7
    78ea:	b002      	add	sp, #8
    78ec:	bd80      	pop	{r7, pc}
    78ee:	46c0      	nop			; (mov r8, r8)
    78f0:	00007875 	.word	0x00007875

000078f4 <adc_cb>:
 static volatile uint16_t flow_meas_raw;

 static volatile bool setup = false;

 static void adc_cb(struct adc_module *const module)
 {
    78f4:	b580      	push	{r7, lr}
    78f6:	b082      	sub	sp, #8
    78f8:	af00      	add	r7, sp, #0
    78fa:	6078      	str	r0, [r7, #4]
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	2100      	movs	r1, #0
    7900:	0018      	movs	r0, r3
    7902:	4b13      	ldr	r3, [pc, #76]	; (7950 <adc_cb+0x5c>)
    7904:	4798      	blx	r3
    7906:	1e03      	subs	r3, r0, #0
    7908:	d11d      	bne.n	7946 <adc_cb+0x52>
	{
		// Motor first
		motor_temp_meas_raw = adc_buffer[0];
    790a:	4b12      	ldr	r3, [pc, #72]	; (7954 <adc_cb+0x60>)
    790c:	881b      	ldrh	r3, [r3, #0]
    790e:	b29a      	uxth	r2, r3
    7910:	4b11      	ldr	r3, [pc, #68]	; (7958 <adc_cb+0x64>)
    7912:	801a      	strh	r2, [r3, #0]
		// Control potentiometer
		potentiometer_meas_raw = adc_buffer[1];
    7914:	4b0f      	ldr	r3, [pc, #60]	; (7954 <adc_cb+0x60>)
    7916:	885b      	ldrh	r3, [r3, #2]
    7918:	b29a      	uxth	r2, r3
    791a:	4b10      	ldr	r3, [pc, #64]	; (795c <adc_cb+0x68>)
    791c:	801a      	strh	r2, [r3, #0]
		// Three pressure sensors in a raw
		pressure_raw_int[0] = adc_buffer[2];
    791e:	4b0d      	ldr	r3, [pc, #52]	; (7954 <adc_cb+0x60>)
    7920:	889b      	ldrh	r3, [r3, #4]
    7922:	b29a      	uxth	r2, r3
    7924:	4b0e      	ldr	r3, [pc, #56]	; (7960 <adc_cb+0x6c>)
    7926:	801a      	strh	r2, [r3, #0]
		pressure_raw_int[1] = adc_buffer[3];
    7928:	4b0a      	ldr	r3, [pc, #40]	; (7954 <adc_cb+0x60>)
    792a:	88db      	ldrh	r3, [r3, #6]
    792c:	b29a      	uxth	r2, r3
    792e:	4b0c      	ldr	r3, [pc, #48]	; (7960 <adc_cb+0x6c>)
    7930:	805a      	strh	r2, [r3, #2]
		pressure_raw_int[2] = adc_buffer[4];
    7932:	4b08      	ldr	r3, [pc, #32]	; (7954 <adc_cb+0x60>)
    7934:	891b      	ldrh	r3, [r3, #8]
    7936:	b29a      	uxth	r2, r3
    7938:	4b09      	ldr	r3, [pc, #36]	; (7960 <adc_cb+0x6c>)
    793a:	809a      	strh	r2, [r3, #4]
		// Flow sensor at ain[10]
		flow_meas_raw = adc_buffer[8];
    793c:	4b05      	ldr	r3, [pc, #20]	; (7954 <adc_cb+0x60>)
    793e:	8a1b      	ldrh	r3, [r3, #16]
    7940:	b29a      	uxth	r2, r3
    7942:	4b08      	ldr	r3, [pc, #32]	; (7964 <adc_cb+0x70>)
    7944:	801a      	strh	r2, [r3, #0]
	}
 }
    7946:	46c0      	nop			; (mov r8, r8)
    7948:	46bd      	mov	sp, r7
    794a:	b002      	add	sp, #8
    794c:	bd80      	pop	{r7, pc}
    794e:	46c0      	nop			; (mov r8, r8)
    7950:	00002519 	.word	0x00002519
    7954:	20003760 	.word	0x20003760
    7958:	2000377c 	.word	0x2000377c
    795c:	2000377a 	.word	0x2000377a
    7960:	20003774 	.word	0x20003774
    7964:	2000377e 	.word	0x2000377e

00007968 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    7968:	b580      	push	{r7, lr}
    796a:	b08c      	sub	sp, #48	; 0x30
    796c:	af00      	add	r7, sp, #0
	struct adc_config config;

	adc_get_config_defaults(&config);
    796e:	003b      	movs	r3, r7
    7970:	0018      	movs	r0, r3
    7972:	4b21      	ldr	r3, [pc, #132]	; (79f8 <adc_interface_init+0x90>)
    7974:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    7976:	003b      	movs	r3, r7
    7978:	2202      	movs	r2, #2
    797a:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    797c:	003b      	movs	r3, r7
    797e:	22c0      	movs	r2, #192	; 0xc0
    7980:	0152      	lsls	r2, r2, #5
    7982:	81da      	strh	r2, [r3, #14]
	config.differential_mode = false;
    7984:	003b      	movs	r3, r7
    7986:	2200      	movs	r2, #0
    7988:	74da      	strb	r2, [r3, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock TODO is this fast enough?
    798a:	003b      	movs	r3, r7
    798c:	2201      	movs	r2, #1
    798e:	701a      	strb	r2, [r3, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;
    7990:	003b      	movs	r3, r7
    7992:	22c0      	movs	r2, #192	; 0xc0
    7994:	00d2      	lsls	r2, r2, #3
    7996:	805a      	strh	r2, [r3, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    7998:	003b      	movs	r3, r7
    799a:	2200      	movs	r2, #0
    799c:	609a      	str	r2, [r3, #8]
	config.resolution = ADC_RESOLUTION_12BIT;
    799e:	003b      	movs	r3, r7
    79a0:	2200      	movs	r2, #0
    79a2:	711a      	strb	r2, [r3, #4]
	config.reference = ADC_REFERENCE_AREFA; // 3.3V
    79a4:	003b      	movs	r3, r7
    79a6:	2203      	movs	r2, #3
    79a8:	705a      	strb	r2, [r3, #1]

	// Scan from 2 through 10
	config.pin_scan.offset_start_scan = 0;
    79aa:	003b      	movs	r3, r7
    79ac:	222b      	movs	r2, #43	; 0x2b
    79ae:	2100      	movs	r1, #0
    79b0:	5499      	strb	r1, [r3, r2]
	config.pin_scan.inputs_to_scan = 9;
    79b2:	003b      	movs	r3, r7
    79b4:	222c      	movs	r2, #44	; 0x2c
    79b6:	2109      	movs	r1, #9
    79b8:	5499      	strb	r1, [r3, r2]

	adc_init(&adc_module_instance, ADC, &config);
    79ba:	003a      	movs	r2, r7
    79bc:	490f      	ldr	r1, [pc, #60]	; (79fc <adc_interface_init+0x94>)
    79be:	4b10      	ldr	r3, [pc, #64]	; (7a00 <adc_interface_init+0x98>)
    79c0:	0018      	movs	r0, r3
    79c2:	4b10      	ldr	r3, [pc, #64]	; (7a04 <adc_interface_init+0x9c>)
    79c4:	4798      	blx	r3
	adc_enable(&adc_module_instance);
    79c6:	4b0e      	ldr	r3, [pc, #56]	; (7a00 <adc_interface_init+0x98>)
    79c8:	0018      	movs	r0, r3
    79ca:	4b0f      	ldr	r3, [pc, #60]	; (7a08 <adc_interface_init+0xa0>)
    79cc:	4798      	blx	r3

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    79ce:	490f      	ldr	r1, [pc, #60]	; (7a0c <adc_interface_init+0xa4>)
    79d0:	4b0b      	ldr	r3, [pc, #44]	; (7a00 <adc_interface_init+0x98>)
    79d2:	2200      	movs	r2, #0
    79d4:	0018      	movs	r0, r3
    79d6:	4b0e      	ldr	r3, [pc, #56]	; (7a10 <adc_interface_init+0xa8>)
    79d8:	4798      	blx	r3
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);
    79da:	4b09      	ldr	r3, [pc, #36]	; (7a00 <adc_interface_init+0x98>)
    79dc:	2100      	movs	r1, #0
    79de:	0018      	movs	r0, r3
    79e0:	4b0c      	ldr	r3, [pc, #48]	; (7a14 <adc_interface_init+0xac>)
    79e2:	4798      	blx	r3

	setup = true;
    79e4:	4b0c      	ldr	r3, [pc, #48]	; (7a18 <adc_interface_init+0xb0>)
    79e6:	2201      	movs	r2, #1
    79e8:	701a      	strb	r2, [r3, #0]

	// Start the conversion
	adc_request_update();
    79ea:	4b0c      	ldr	r3, [pc, #48]	; (7a1c <adc_interface_init+0xb4>)
    79ec:	4798      	blx	r3
 }
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	46bd      	mov	sp, r7
    79f2:	b00c      	add	sp, #48	; 0x30
    79f4:	bd80      	pop	{r7, pc}
    79f6:	46c0      	nop			; (mov r8, r8)
    79f8:	00001b21 	.word	0x00001b21
    79fc:	42004000 	.word	0x42004000
    7a00:	20003740 	.word	0x20003740
    7a04:	00002171 	.word	0x00002171
    7a08:	00007815 	.word	0x00007815
    7a0c:	000078f5 	.word	0x000078f5
    7a10:	00002471 	.word	0x00002471
    7a14:	00007899 	.word	0x00007899
    7a18:	20003780 	.word	0x20003780
    7a1c:	00007a21 	.word	0x00007a21

00007a20 <adc_request_update>:

 void adc_request_update(void)
 {
    7a20:	b580      	push	{r7, lr}
    7a22:	af00      	add	r7, sp, #0
	// Trigger new measurement
	if(setup)
    7a24:	4b06      	ldr	r3, [pc, #24]	; (7a40 <adc_request_update+0x20>)
    7a26:	781b      	ldrb	r3, [r3, #0]
    7a28:	b2db      	uxtb	r3, r3
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	d005      	beq.n	7a3a <adc_request_update+0x1a>
	{
		adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    7a2e:	4905      	ldr	r1, [pc, #20]	; (7a44 <adc_request_update+0x24>)
    7a30:	4b05      	ldr	r3, [pc, #20]	; (7a48 <adc_request_update+0x28>)
    7a32:	2209      	movs	r2, #9
    7a34:	0018      	movs	r0, r3
    7a36:	4b05      	ldr	r3, [pc, #20]	; (7a4c <adc_request_update+0x2c>)
    7a38:	4798      	blx	r3
	}
 }
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	46bd      	mov	sp, r7
    7a3e:	bd80      	pop	{r7, pc}
    7a40:	20003780 	.word	0x20003780
    7a44:	20003760 	.word	0x20003760
    7a48:	20003740 	.word	0x20003740
    7a4c:	000024b1 	.word	0x000024b1

00007a50 <get_pressure_sensor_cmH2O>:
 *	\param channel The sensor channel
 *	
 *	\return The pressure from the channel in cm-H2O if channel valid or 0 otherwise
 */
 float get_pressure_sensor_cmH2O(uint8_t channel)
 {
    7a50:	b590      	push	{r4, r7, lr}
    7a52:	b087      	sub	sp, #28
    7a54:	af00      	add	r7, sp, #0
    7a56:	0002      	movs	r2, r0
    7a58:	1dfb      	adds	r3, r7, #7
    7a5a:	701a      	strb	r2, [r3, #0]
	// Pressure sensors output 0.5-4.5V corresponding to 0-5psig
	// Scaled down to 3.3V range with 10K/(10K+5.6K) divider
	if(channel >= NUM_PRESSURE_SENSOR_CHANNELS)
    7a5c:	1dfb      	adds	r3, r7, #7
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	2b02      	cmp	r3, #2
    7a62:	d901      	bls.n	7a68 <get_pressure_sensor_cmH2O+0x18>
	{
		return 0.0;
    7a64:	2300      	movs	r3, #0
    7a66:	e05e      	b.n	7b26 <get_pressure_sensor_cmH2O+0xd6>
	}
	uint16_t raw_adc =  pressure_raw_int[channel];
    7a68:	1dfb      	adds	r3, r7, #7
    7a6a:	7819      	ldrb	r1, [r3, #0]
    7a6c:	2316      	movs	r3, #22
    7a6e:	18fb      	adds	r3, r7, r3
    7a70:	4a2f      	ldr	r2, [pc, #188]	; (7b30 <get_pressure_sensor_cmH2O+0xe0>)
    7a72:	0049      	lsls	r1, r1, #1
    7a74:	5a8a      	ldrh	r2, [r1, r2]
    7a76:	801a      	strh	r2, [r3, #0]

	float pressure_voltage_scaled_up = ((raw_adc / ADC_MAX) * 3.3) * (15.6 / 10.0);
    7a78:	2316      	movs	r3, #22
    7a7a:	18fb      	adds	r3, r7, r3
    7a7c:	881a      	ldrh	r2, [r3, #0]
    7a7e:	4b2d      	ldr	r3, [pc, #180]	; (7b34 <get_pressure_sensor_cmH2O+0xe4>)
    7a80:	0010      	movs	r0, r2
    7a82:	4798      	blx	r3
    7a84:	4c2c      	ldr	r4, [pc, #176]	; (7b38 <get_pressure_sensor_cmH2O+0xe8>)
    7a86:	2200      	movs	r2, #0
    7a88:	4b2c      	ldr	r3, [pc, #176]	; (7b3c <get_pressure_sensor_cmH2O+0xec>)
    7a8a:	47a0      	blx	r4
    7a8c:	0003      	movs	r3, r0
    7a8e:	000c      	movs	r4, r1
    7a90:	0018      	movs	r0, r3
    7a92:	0021      	movs	r1, r4
    7a94:	4c2a      	ldr	r4, [pc, #168]	; (7b40 <get_pressure_sensor_cmH2O+0xf0>)
    7a96:	4a2b      	ldr	r2, [pc, #172]	; (7b44 <get_pressure_sensor_cmH2O+0xf4>)
    7a98:	4b2b      	ldr	r3, [pc, #172]	; (7b48 <get_pressure_sensor_cmH2O+0xf8>)
    7a9a:	47a0      	blx	r4
    7a9c:	0003      	movs	r3, r0
    7a9e:	000c      	movs	r4, r1
    7aa0:	0018      	movs	r0, r3
    7aa2:	0021      	movs	r1, r4
    7aa4:	4c26      	ldr	r4, [pc, #152]	; (7b40 <get_pressure_sensor_cmH2O+0xf0>)
    7aa6:	4a29      	ldr	r2, [pc, #164]	; (7b4c <get_pressure_sensor_cmH2O+0xfc>)
    7aa8:	4b29      	ldr	r3, [pc, #164]	; (7b50 <get_pressure_sensor_cmH2O+0x100>)
    7aaa:	47a0      	blx	r4
    7aac:	0003      	movs	r3, r0
    7aae:	000c      	movs	r4, r1
    7ab0:	0019      	movs	r1, r3
    7ab2:	0022      	movs	r2, r4
    7ab4:	4b27      	ldr	r3, [pc, #156]	; (7b54 <get_pressure_sensor_cmH2O+0x104>)
    7ab6:	0008      	movs	r0, r1
    7ab8:	0011      	movs	r1, r2
    7aba:	4798      	blx	r3
    7abc:	1c03      	adds	r3, r0, #0
    7abe:	613b      	str	r3, [r7, #16]

	float pressure_psi = 5.0 * (pressure_voltage_scaled_up - 0.5) / 4.0;
    7ac0:	4b25      	ldr	r3, [pc, #148]	; (7b58 <get_pressure_sensor_cmH2O+0x108>)
    7ac2:	6938      	ldr	r0, [r7, #16]
    7ac4:	4798      	blx	r3
    7ac6:	4c25      	ldr	r4, [pc, #148]	; (7b5c <get_pressure_sensor_cmH2O+0x10c>)
    7ac8:	2200      	movs	r2, #0
    7aca:	4b25      	ldr	r3, [pc, #148]	; (7b60 <get_pressure_sensor_cmH2O+0x110>)
    7acc:	47a0      	blx	r4
    7ace:	0003      	movs	r3, r0
    7ad0:	000c      	movs	r4, r1
    7ad2:	0018      	movs	r0, r3
    7ad4:	0021      	movs	r1, r4
    7ad6:	4c1a      	ldr	r4, [pc, #104]	; (7b40 <get_pressure_sensor_cmH2O+0xf0>)
    7ad8:	2200      	movs	r2, #0
    7ada:	4b22      	ldr	r3, [pc, #136]	; (7b64 <get_pressure_sensor_cmH2O+0x114>)
    7adc:	47a0      	blx	r4
    7ade:	0003      	movs	r3, r0
    7ae0:	000c      	movs	r4, r1
    7ae2:	0018      	movs	r0, r3
    7ae4:	0021      	movs	r1, r4
    7ae6:	4c14      	ldr	r4, [pc, #80]	; (7b38 <get_pressure_sensor_cmH2O+0xe8>)
    7ae8:	2200      	movs	r2, #0
    7aea:	4b1f      	ldr	r3, [pc, #124]	; (7b68 <get_pressure_sensor_cmH2O+0x118>)
    7aec:	47a0      	blx	r4
    7aee:	0003      	movs	r3, r0
    7af0:	000c      	movs	r4, r1
    7af2:	0019      	movs	r1, r3
    7af4:	0022      	movs	r2, r4
    7af6:	4b17      	ldr	r3, [pc, #92]	; (7b54 <get_pressure_sensor_cmH2O+0x104>)
    7af8:	0008      	movs	r0, r1
    7afa:	0011      	movs	r1, r2
    7afc:	4798      	blx	r3
    7afe:	1c03      	adds	r3, r0, #0
    7b00:	60fb      	str	r3, [r7, #12]

	float pressure_cmH2O = (70.307) * pressure_psi;
    7b02:	4b15      	ldr	r3, [pc, #84]	; (7b58 <get_pressure_sensor_cmH2O+0x108>)
    7b04:	68f8      	ldr	r0, [r7, #12]
    7b06:	4798      	blx	r3
    7b08:	4c0d      	ldr	r4, [pc, #52]	; (7b40 <get_pressure_sensor_cmH2O+0xf0>)
    7b0a:	4a18      	ldr	r2, [pc, #96]	; (7b6c <get_pressure_sensor_cmH2O+0x11c>)
    7b0c:	4b18      	ldr	r3, [pc, #96]	; (7b70 <get_pressure_sensor_cmH2O+0x120>)
    7b0e:	47a0      	blx	r4
    7b10:	0003      	movs	r3, r0
    7b12:	000c      	movs	r4, r1
    7b14:	0019      	movs	r1, r3
    7b16:	0022      	movs	r2, r4
    7b18:	4b0e      	ldr	r3, [pc, #56]	; (7b54 <get_pressure_sensor_cmH2O+0x104>)
    7b1a:	0008      	movs	r0, r1
    7b1c:	0011      	movs	r1, r2
    7b1e:	4798      	blx	r3
    7b20:	1c03      	adds	r3, r0, #0
    7b22:	60bb      	str	r3, [r7, #8]
	return pressure_cmH2O;
    7b24:	68bb      	ldr	r3, [r7, #8]
 }
    7b26:	1c18      	adds	r0, r3, #0
    7b28:	46bd      	mov	sp, r7
    7b2a:	b007      	add	sp, #28
    7b2c:	bd90      	pop	{r4, r7, pc}
    7b2e:	46c0      	nop			; (mov r8, r8)
    7b30:	20003774 	.word	0x20003774
    7b34:	00012949 	.word	0x00012949
    7b38:	0001174d 	.word	0x0001174d
    7b3c:	40affe00 	.word	0x40affe00
    7b40:	00011db5 	.word	0x00011db5
    7b44:	66666666 	.word	0x66666666
    7b48:	400a6666 	.word	0x400a6666
    7b4c:	8f5c28f6 	.word	0x8f5c28f6
    7b50:	3ff8f5c2 	.word	0x3ff8f5c2
    7b54:	00012ae1 	.word	0x00012ae1
    7b58:	00012a3d 	.word	0x00012a3d
    7b5c:	000122b5 	.word	0x000122b5
    7b60:	3fe00000 	.word	0x3fe00000
    7b64:	40140000 	.word	0x40140000
    7b68:	40100000 	.word	0x40100000
    7b6c:	e353f7cf 	.word	0xe353f7cf
    7b70:	405193a5 	.word	0x405193a5

00007b74 <get_pressure_sensor_cmH2O_voted>:
 *	\brief Gets pressure sensor data best estimate and checks for errors
 *
 *	\return The voted pressure in cm-H2O 
 */
 float get_pressure_sensor_cmH2O_voted(void)
 {
    7b74:	b580      	push	{r7, lr}
    7b76:	b084      	sub	sp, #16
    7b78:	af00      	add	r7, sp, #0
	// TODO for now, just use single pressure sensor
	set_alarm(ALARM_PRESSURE_SENSOR, false);
    7b7a:	2100      	movs	r1, #0
    7b7c:	2002      	movs	r0, #2
    7b7e:	4b05      	ldr	r3, [pc, #20]	; (7b94 <get_pressure_sensor_cmH2O_voted+0x20>)
    7b80:	4798      	blx	r3
	return get_pressure_sensor_cmH2O(0);
    7b82:	2000      	movs	r0, #0
    7b84:	4b04      	ldr	r3, [pc, #16]	; (7b98 <get_pressure_sensor_cmH2O_voted+0x24>)
    7b86:	4798      	blx	r3
    7b88:	1c03      	adds	r3, r0, #0
	else
	{
		set_alarm(ALARM_PRESSURE_SENSOR, false);
	}
	return avg_pressure;
 }
    7b8a:	1c18      	adds	r0, r3, #0
    7b8c:	46bd      	mov	sp, r7
    7b8e:	b004      	add	sp, #16
    7b90:	bd80      	pop	{r7, pc}
    7b92:	46c0      	nop			; (mov r8, r8)
    7b94:	00007bf1 	.word	0x00007bf1
    7b98:	00007a51 	.word	0x00007a51

00007b9c <get_input_potentiometer_portion>:
 *	\brief Gets portion of full scale from potentiometer input
 *
 *	\return The portion from 0.0 to 1.0
 */
 float get_input_potentiometer_portion(void)
 {
    7b9c:	b5b0      	push	{r4, r5, r7, lr}
    7b9e:	af00      	add	r7, sp, #0
	return (potentiometer_meas_raw / ADC_MAX);
    7ba0:	4b0b      	ldr	r3, [pc, #44]	; (7bd0 <get_input_potentiometer_portion+0x34>)
    7ba2:	881b      	ldrh	r3, [r3, #0]
    7ba4:	b29b      	uxth	r3, r3
    7ba6:	001a      	movs	r2, r3
    7ba8:	4b0a      	ldr	r3, [pc, #40]	; (7bd4 <get_input_potentiometer_portion+0x38>)
    7baa:	0010      	movs	r0, r2
    7bac:	4798      	blx	r3
    7bae:	4c0a      	ldr	r4, [pc, #40]	; (7bd8 <get_input_potentiometer_portion+0x3c>)
    7bb0:	2200      	movs	r2, #0
    7bb2:	4b0a      	ldr	r3, [pc, #40]	; (7bdc <get_input_potentiometer_portion+0x40>)
    7bb4:	47a0      	blx	r4
    7bb6:	0003      	movs	r3, r0
    7bb8:	000c      	movs	r4, r1
    7bba:	0019      	movs	r1, r3
    7bbc:	0022      	movs	r2, r4
    7bbe:	4b08      	ldr	r3, [pc, #32]	; (7be0 <get_input_potentiometer_portion+0x44>)
    7bc0:	0008      	movs	r0, r1
    7bc2:	0011      	movs	r1, r2
    7bc4:	4798      	blx	r3
    7bc6:	1c03      	adds	r3, r0, #0
 }
    7bc8:	1c18      	adds	r0, r3, #0
    7bca:	46bd      	mov	sp, r7
    7bcc:	bdb0      	pop	{r4, r5, r7, pc}
    7bce:	46c0      	nop			; (mov r8, r8)
    7bd0:	2000377a 	.word	0x2000377a
    7bd4:	00012949 	.word	0x00012949
    7bd8:	0001174d 	.word	0x0001174d
    7bdc:	40affe00 	.word	0x40affe00
    7be0:	00012ae1 	.word	0x00012ae1

00007be4 <get_motor_temp_celsius>:
 *	\brief Gets motor temperature
 *
 *	\return The temperature in Celsius
 */
 float get_motor_temp_celsius(void)
 {
    7be4:	b580      	push	{r7, lr}
    7be6:	af00      	add	r7, sp, #0
	// TODO what is scale?
	return 0.0;
    7be8:	2300      	movs	r3, #0
 }
    7bea:	1c18      	adds	r0, r3, #0
    7bec:	46bd      	mov	sp, r7
    7bee:	bd80      	pop	{r7, pc}

00007bf0 <set_alarm>:
*
*	\param alarm_type The alarm to set
*	\param set If true, alarm is set; if false, alarm is cleared
*/
void set_alarm(ALARM_TYPE_INDEX alarm_type, bool set)
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	b082      	sub	sp, #8
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	0002      	movs	r2, r0
    7bf8:	1dfb      	adds	r3, r7, #7
    7bfa:	701a      	strb	r2, [r3, #0]
    7bfc:	1dbb      	adds	r3, r7, #6
    7bfe:	1c0a      	adds	r2, r1, #0
    7c00:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    7c02:	1dfb      	adds	r3, r7, #7
    7c04:	781b      	ldrb	r3, [r3, #0]
    7c06:	2b1f      	cmp	r3, #31
    7c08:	d81c      	bhi.n	7c44 <set_alarm+0x54>
	{
		return;
	}

	if(set)
    7c0a:	1dbb      	adds	r3, r7, #6
    7c0c:	781b      	ldrb	r3, [r3, #0]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d00b      	beq.n	7c2a <set_alarm+0x3a>
	{
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
    7c12:	1dfb      	adds	r3, r7, #7
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	2201      	movs	r2, #1
    7c18:	409a      	lsls	r2, r3
    7c1a:	0013      	movs	r3, r2
    7c1c:	001a      	movs	r2, r3
    7c1e:	4b0b      	ldr	r3, [pc, #44]	; (7c4c <set_alarm+0x5c>)
    7c20:	681b      	ldr	r3, [r3, #0]
    7c22:	431a      	orrs	r2, r3
    7c24:	4b09      	ldr	r3, [pc, #36]	; (7c4c <set_alarm+0x5c>)
    7c26:	601a      	str	r2, [r3, #0]
    7c28:	e00d      	b.n	7c46 <set_alarm+0x56>
	}
	else
	{
		alarm_bitfield &= ~(1 << (uint32_t) alarm_type);
    7c2a:	1dfb      	adds	r3, r7, #7
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	2201      	movs	r2, #1
    7c30:	409a      	lsls	r2, r3
    7c32:	0013      	movs	r3, r2
    7c34:	43db      	mvns	r3, r3
    7c36:	001a      	movs	r2, r3
    7c38:	4b04      	ldr	r3, [pc, #16]	; (7c4c <set_alarm+0x5c>)
    7c3a:	681b      	ldr	r3, [r3, #0]
    7c3c:	401a      	ands	r2, r3
    7c3e:	4b03      	ldr	r3, [pc, #12]	; (7c4c <set_alarm+0x5c>)
    7c40:	601a      	str	r2, [r3, #0]
    7c42:	e000      	b.n	7c46 <set_alarm+0x56>
		return;
    7c44:	46c0      	nop			; (mov r8, r8)
	}
	
}
    7c46:	46bd      	mov	sp, r7
    7c48:	b002      	add	sp, #8
    7c4a:	bd80      	pop	{r7, pc}
    7c4c:	20003784 	.word	0x20003784

00007c50 <check_alarm>:
*	\param alarm_type The alarm to check
*
*	\return True if the alarm is set, false if not
*/
bool check_alarm(ALARM_TYPE_INDEX alarm_type)
{
    7c50:	b580      	push	{r7, lr}
    7c52:	b082      	sub	sp, #8
    7c54:	af00      	add	r7, sp, #0
    7c56:	0002      	movs	r2, r0
    7c58:	1dfb      	adds	r3, r7, #7
    7c5a:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    7c5c:	1dfb      	adds	r3, r7, #7
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	2b1f      	cmp	r3, #31
    7c62:	d901      	bls.n	7c68 <check_alarm+0x18>
	{
		return false;
    7c64:	2300      	movs	r3, #0
    7c66:	e00b      	b.n	7c80 <check_alarm+0x30>
	}

	return (alarm_bitfield & (1 << (uint32_t) alarm_type));
    7c68:	1dfb      	adds	r3, r7, #7
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	2201      	movs	r2, #1
    7c6e:	409a      	lsls	r2, r3
    7c70:	0013      	movs	r3, r2
    7c72:	001a      	movs	r2, r3
    7c74:	4b04      	ldr	r3, [pc, #16]	; (7c88 <check_alarm+0x38>)
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	4013      	ands	r3, r2
    7c7a:	1e5a      	subs	r2, r3, #1
    7c7c:	4193      	sbcs	r3, r2
    7c7e:	b2db      	uxtb	r3, r3
}
    7c80:	0018      	movs	r0, r3
    7c82:	46bd      	mov	sp, r7
    7c84:	b002      	add	sp, #8
    7c86:	bd80      	pop	{r7, pc}
    7c88:	20003784 	.word	0x20003784

00007c8c <any_alarms_set>:
*	\brief Checks if any alarm is set
*
*	\return True if any alarm is set
*/
bool any_alarms_set(void)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	af00      	add	r7, sp, #0
	return (alarm_bitfield != 0);
    7c90:	4b03      	ldr	r3, [pc, #12]	; (7ca0 <any_alarms_set+0x14>)
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	1e5a      	subs	r2, r3, #1
    7c96:	4193      	sbcs	r3, r2
    7c98:	b2db      	uxtb	r3, r3
    7c9a:	0018      	movs	r0, r3
    7c9c:	46bd      	mov	sp, r7
    7c9e:	bd80      	pop	{r7, pc}
    7ca0:	20003784 	.word	0x20003784

00007ca4 <calculate_new_setpoint>:
 #include "alarm_monitoring.h"

 #include "controller.h"
 
 static uint32_t calculate_new_setpoint(uint32_t stage_start_time_ms, uint32_t current_time_ms, lcv_state_t * state, lcv_control_t * control)
 {
    7ca4:	b5b0      	push	{r4, r5, r7, lr}
    7ca6:	b088      	sub	sp, #32
    7ca8:	af00      	add	r7, sp, #0
    7caa:	60f8      	str	r0, [r7, #12]
    7cac:	60b9      	str	r1, [r7, #8]
    7cae:	607a      	str	r2, [r7, #4]
    7cb0:	603b      	str	r3, [r7, #0]
	int32_t time_into_profile = current_time_ms - stage_start_time_ms;
    7cb2:	68ba      	ldr	r2, [r7, #8]
    7cb4:	68fb      	ldr	r3, [r7, #12]
    7cb6:	1ad3      	subs	r3, r2, r3
    7cb8:	61bb      	str	r3, [r7, #24]
	uint32_t new_state_start = stage_start_time_ms;
    7cba:	68fb      	ldr	r3, [r7, #12]
    7cbc:	61fb      	str	r3, [r7, #28]
	// In PEEP to PIP stage?
	if(time_into_profile < control->peep_to_pip_rampup_ms)
    7cbe:	683b      	ldr	r3, [r7, #0]
    7cc0:	681a      	ldr	r2, [r3, #0]
    7cc2:	69bb      	ldr	r3, [r7, #24]
    7cc4:	429a      	cmp	r2, r3
    7cc6:	dd2c      	ble.n	7d22 <calculate_new_setpoint+0x7e>
	{
		// Linear ramp up
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	689a      	ldr	r2, [r3, #8]
    7ccc:	683b      	ldr	r3, [r7, #0]
    7cce:	611a      	str	r2, [r3, #16]
		float section_factor = ((float) (time_into_profile) / (float) control->peep_to_pip_rampup_ms);
    7cd0:	4b54      	ldr	r3, [pc, #336]	; (7e24 <calculate_new_setpoint+0x180>)
    7cd2:	69b8      	ldr	r0, [r7, #24]
    7cd4:	4798      	blx	r3
    7cd6:	1c04      	adds	r4, r0, #0
    7cd8:	683b      	ldr	r3, [r7, #0]
    7cda:	681a      	ldr	r2, [r3, #0]
    7cdc:	4b51      	ldr	r3, [pc, #324]	; (7e24 <calculate_new_setpoint+0x180>)
    7cde:	0010      	movs	r0, r2
    7ce0:	4798      	blx	r3
    7ce2:	1c02      	adds	r2, r0, #0
    7ce4:	4b50      	ldr	r3, [pc, #320]	; (7e28 <calculate_new_setpoint+0x184>)
    7ce6:	1c11      	adds	r1, r2, #0
    7ce8:	1c20      	adds	r0, r4, #0
    7cea:	4798      	blx	r3
    7cec:	1c03      	adds	r3, r0, #0
    7cee:	617b      	str	r3, [r7, #20]
		control->pressure_set_point_cm_h20 += (int32_t)  (section_factor * (state->setting_state.pip_cm_h20 - state->setting_state.peep_cm_h20));
    7cf0:	683b      	ldr	r3, [r7, #0]
    7cf2:	691c      	ldr	r4, [r3, #16]
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	68da      	ldr	r2, [r3, #12]
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	689b      	ldr	r3, [r3, #8]
    7cfc:	1ad2      	subs	r2, r2, r3
    7cfe:	4b49      	ldr	r3, [pc, #292]	; (7e24 <calculate_new_setpoint+0x180>)
    7d00:	0010      	movs	r0, r2
    7d02:	4798      	blx	r3
    7d04:	1c02      	adds	r2, r0, #0
    7d06:	4b49      	ldr	r3, [pc, #292]	; (7e2c <calculate_new_setpoint+0x188>)
    7d08:	6979      	ldr	r1, [r7, #20]
    7d0a:	1c10      	adds	r0, r2, #0
    7d0c:	4798      	blx	r3
    7d0e:	1c03      	adds	r3, r0, #0
    7d10:	1c1a      	adds	r2, r3, #0
    7d12:	4b47      	ldr	r3, [pc, #284]	; (7e30 <calculate_new_setpoint+0x18c>)
    7d14:	1c10      	adds	r0, r2, #0
    7d16:	4798      	blx	r3
    7d18:	0003      	movs	r3, r0
    7d1a:	18e2      	adds	r2, r4, r3
    7d1c:	683b      	ldr	r3, [r7, #0]
    7d1e:	611a      	str	r2, [r3, #16]
    7d20:	e07b      	b.n	7e1a <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms))
    7d22:	683b      	ldr	r3, [r7, #0]
    7d24:	681a      	ldr	r2, [r3, #0]
    7d26:	683b      	ldr	r3, [r7, #0]
    7d28:	685b      	ldr	r3, [r3, #4]
    7d2a:	18d2      	adds	r2, r2, r3
    7d2c:	69bb      	ldr	r3, [r7, #24]
    7d2e:	429a      	cmp	r2, r3
    7d30:	dd04      	ble.n	7d3c <calculate_new_setpoint+0x98>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	68da      	ldr	r2, [r3, #12]
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	611a      	str	r2, [r3, #16]
    7d3a:	e06e      	b.n	7e1a <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms))
    7d3c:	683b      	ldr	r3, [r7, #0]
    7d3e:	681a      	ldr	r2, [r3, #0]
    7d40:	683b      	ldr	r3, [r7, #0]
    7d42:	685b      	ldr	r3, [r3, #4]
    7d44:	18d2      	adds	r2, r2, r3
    7d46:	683b      	ldr	r3, [r7, #0]
    7d48:	689b      	ldr	r3, [r3, #8]
    7d4a:	18d2      	adds	r2, r2, r3
    7d4c:	69bb      	ldr	r3, [r7, #24]
    7d4e:	429a      	cmp	r2, r3
    7d50:	dd3d      	ble.n	7dce <calculate_new_setpoint+0x12a>
	{
		// Linear ramp down
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	68da      	ldr	r2, [r3, #12]
    7d56:	683b      	ldr	r3, [r7, #0]
    7d58:	611a      	str	r2, [r3, #16]
		
		float section_dt = time_into_profile - (control->peep_to_pip_rampup_ms + control->pip_hold_ms);
    7d5a:	683b      	ldr	r3, [r7, #0]
    7d5c:	681a      	ldr	r2, [r3, #0]
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	685b      	ldr	r3, [r3, #4]
    7d62:	18d3      	adds	r3, r2, r3
    7d64:	69ba      	ldr	r2, [r7, #24]
    7d66:	1ad2      	subs	r2, r2, r3
    7d68:	4b2e      	ldr	r3, [pc, #184]	; (7e24 <calculate_new_setpoint+0x180>)
    7d6a:	0010      	movs	r0, r2
    7d6c:	4798      	blx	r3
    7d6e:	1c03      	adds	r3, r0, #0
    7d70:	613b      	str	r3, [r7, #16]
		control->pressure_set_point_cm_h20 += (section_dt / (float) control->pip_to_peep_rampdown_ms) * (state->setting_state.peep_cm_h20 - state->setting_state.pip_cm_h20);
    7d72:	683b      	ldr	r3, [r7, #0]
    7d74:	691a      	ldr	r2, [r3, #16]
    7d76:	4b2b      	ldr	r3, [pc, #172]	; (7e24 <calculate_new_setpoint+0x180>)
    7d78:	0010      	movs	r0, r2
    7d7a:	4798      	blx	r3
    7d7c:	1c04      	adds	r4, r0, #0
    7d7e:	683b      	ldr	r3, [r7, #0]
    7d80:	689a      	ldr	r2, [r3, #8]
    7d82:	4b28      	ldr	r3, [pc, #160]	; (7e24 <calculate_new_setpoint+0x180>)
    7d84:	0010      	movs	r0, r2
    7d86:	4798      	blx	r3
    7d88:	1c02      	adds	r2, r0, #0
    7d8a:	4b27      	ldr	r3, [pc, #156]	; (7e28 <calculate_new_setpoint+0x184>)
    7d8c:	1c11      	adds	r1, r2, #0
    7d8e:	6938      	ldr	r0, [r7, #16]
    7d90:	4798      	blx	r3
    7d92:	1c03      	adds	r3, r0, #0
    7d94:	1c1d      	adds	r5, r3, #0
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	689a      	ldr	r2, [r3, #8]
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	68db      	ldr	r3, [r3, #12]
    7d9e:	1ad2      	subs	r2, r2, r3
    7da0:	4b20      	ldr	r3, [pc, #128]	; (7e24 <calculate_new_setpoint+0x180>)
    7da2:	0010      	movs	r0, r2
    7da4:	4798      	blx	r3
    7da6:	1c02      	adds	r2, r0, #0
    7da8:	4b20      	ldr	r3, [pc, #128]	; (7e2c <calculate_new_setpoint+0x188>)
    7daa:	1c11      	adds	r1, r2, #0
    7dac:	1c28      	adds	r0, r5, #0
    7dae:	4798      	blx	r3
    7db0:	1c03      	adds	r3, r0, #0
    7db2:	1c1a      	adds	r2, r3, #0
    7db4:	4b1f      	ldr	r3, [pc, #124]	; (7e34 <calculate_new_setpoint+0x190>)
    7db6:	1c11      	adds	r1, r2, #0
    7db8:	1c20      	adds	r0, r4, #0
    7dba:	4798      	blx	r3
    7dbc:	1c03      	adds	r3, r0, #0
    7dbe:	1c1a      	adds	r2, r3, #0
    7dc0:	4b1b      	ldr	r3, [pc, #108]	; (7e30 <calculate_new_setpoint+0x18c>)
    7dc2:	1c10      	adds	r0, r2, #0
    7dc4:	4798      	blx	r3
    7dc6:	0002      	movs	r2, r0
    7dc8:	683b      	ldr	r3, [r7, #0]
    7dca:	611a      	str	r2, [r3, #16]
    7dcc:	e025      	b.n	7e1a <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms))
    7dce:	683b      	ldr	r3, [r7, #0]
    7dd0:	681a      	ldr	r2, [r3, #0]
    7dd2:	683b      	ldr	r3, [r7, #0]
    7dd4:	685b      	ldr	r3, [r3, #4]
    7dd6:	18d2      	adds	r2, r2, r3
    7dd8:	683b      	ldr	r3, [r7, #0]
    7dda:	689b      	ldr	r3, [r3, #8]
    7ddc:	18d2      	adds	r2, r2, r3
    7dde:	683b      	ldr	r3, [r7, #0]
    7de0:	68db      	ldr	r3, [r3, #12]
    7de2:	18d2      	adds	r2, r2, r3
    7de4:	69bb      	ldr	r3, [r7, #24]
    7de6:	429a      	cmp	r2, r3
    7de8:	dd04      	ble.n	7df4 <calculate_new_setpoint+0x150>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	689a      	ldr	r2, [r3, #8]
    7dee:	683b      	ldr	r3, [r7, #0]
    7df0:	611a      	str	r2, [r3, #16]
    7df2:	e012      	b.n	7e1a <calculate_new_setpoint+0x176>
	}
	else
	{
		// Time over this setpoint, return new transition time, keep at PEEP
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	689a      	ldr	r2, [r3, #8]
    7df8:	683b      	ldr	r3, [r7, #0]
    7dfa:	611a      	str	r2, [r3, #16]
		new_state_start = stage_start_time_ms + (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms);
    7dfc:	683b      	ldr	r3, [r7, #0]
    7dfe:	681a      	ldr	r2, [r3, #0]
    7e00:	683b      	ldr	r3, [r7, #0]
    7e02:	685b      	ldr	r3, [r3, #4]
    7e04:	18d2      	adds	r2, r2, r3
    7e06:	683b      	ldr	r3, [r7, #0]
    7e08:	689b      	ldr	r3, [r3, #8]
    7e0a:	18d2      	adds	r2, r2, r3
    7e0c:	683b      	ldr	r3, [r7, #0]
    7e0e:	68db      	ldr	r3, [r3, #12]
    7e10:	18d3      	adds	r3, r2, r3
    7e12:	001a      	movs	r2, r3
    7e14:	68fb      	ldr	r3, [r7, #12]
    7e16:	18d3      	adds	r3, r2, r3
    7e18:	61fb      	str	r3, [r7, #28]
	}
	return new_state_start;
    7e1a:	69fb      	ldr	r3, [r7, #28]
 }
    7e1c:	0018      	movs	r0, r3
    7e1e:	46bd      	mov	sp, r7
    7e20:	b008      	add	sp, #32
    7e22:	bdb0      	pop	{r4, r5, r7, pc}
    7e24:	0001108d 	.word	0x0001108d
    7e28:	000106f5 	.word	0x000106f5
    7e2c:	00010ad5 	.word	0x00010ad5
    7e30:	0001104d 	.word	0x0001104d
    7e34:	000103d1 	.word	0x000103d1

00007e38 <pidf_control>:
 *
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 static float pidf_control(lcv_control_t * control, controller_param_t * params)
 {
    7e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e3a:	b089      	sub	sp, #36	; 0x24
    7e3c:	af00      	add	r7, sp, #0
    7e3e:	60f8      	str	r0, [r7, #12]
    7e40:	60b9      	str	r1, [r7, #8]
	static float error_integral = 0.0;
	static float error_derivative = 0.0;
	static float last_error = 0.0;

	float error = control->pressure_set_point_cm_h20 - control->pressure_current_cm_h20;
    7e42:	68fb      	ldr	r3, [r7, #12]
    7e44:	691a      	ldr	r2, [r3, #16]
    7e46:	68fb      	ldr	r3, [r7, #12]
    7e48:	695b      	ldr	r3, [r3, #20]
    7e4a:	1ad2      	subs	r2, r2, r3
    7e4c:	4b7d      	ldr	r3, [pc, #500]	; (8044 <pidf_control+0x20c>)
    7e4e:	0010      	movs	r0, r2
    7e50:	4798      	blx	r3
    7e52:	1c03      	adds	r3, r0, #0
    7e54:	61bb      	str	r3, [r7, #24]

	float alpha = 0.7;
    7e56:	4b7c      	ldr	r3, [pc, #496]	; (8048 <pidf_control+0x210>)
    7e58:	617b      	str	r3, [r7, #20]
	error_derivative = alpha*(error-last_error) + (1.0 - alpha)*error_derivative;
    7e5a:	4b7c      	ldr	r3, [pc, #496]	; (804c <pidf_control+0x214>)
    7e5c:	681a      	ldr	r2, [r3, #0]
    7e5e:	4b7c      	ldr	r3, [pc, #496]	; (8050 <pidf_control+0x218>)
    7e60:	1c11      	adds	r1, r2, #0
    7e62:	69b8      	ldr	r0, [r7, #24]
    7e64:	4798      	blx	r3
    7e66:	1c03      	adds	r3, r0, #0
    7e68:	1c1a      	adds	r2, r3, #0
    7e6a:	4b7a      	ldr	r3, [pc, #488]	; (8054 <pidf_control+0x21c>)
    7e6c:	6979      	ldr	r1, [r7, #20]
    7e6e:	1c10      	adds	r0, r2, #0
    7e70:	4798      	blx	r3
    7e72:	1c03      	adds	r3, r0, #0
    7e74:	1c1a      	adds	r2, r3, #0
    7e76:	4b78      	ldr	r3, [pc, #480]	; (8058 <pidf_control+0x220>)
    7e78:	1c10      	adds	r0, r2, #0
    7e7a:	4798      	blx	r3
    7e7c:	0005      	movs	r5, r0
    7e7e:	000e      	movs	r6, r1
    7e80:	4b75      	ldr	r3, [pc, #468]	; (8058 <pidf_control+0x220>)
    7e82:	6978      	ldr	r0, [r7, #20]
    7e84:	4798      	blx	r3
    7e86:	0002      	movs	r2, r0
    7e88:	000b      	movs	r3, r1
    7e8a:	4c74      	ldr	r4, [pc, #464]	; (805c <pidf_control+0x224>)
    7e8c:	2000      	movs	r0, #0
    7e8e:	4974      	ldr	r1, [pc, #464]	; (8060 <pidf_control+0x228>)
    7e90:	47a0      	blx	r4
    7e92:	0003      	movs	r3, r0
    7e94:	000c      	movs	r4, r1
    7e96:	603b      	str	r3, [r7, #0]
    7e98:	607c      	str	r4, [r7, #4]
    7e9a:	4b72      	ldr	r3, [pc, #456]	; (8064 <pidf_control+0x22c>)
    7e9c:	681a      	ldr	r2, [r3, #0]
    7e9e:	4b6e      	ldr	r3, [pc, #440]	; (8058 <pidf_control+0x220>)
    7ea0:	1c10      	adds	r0, r2, #0
    7ea2:	4798      	blx	r3
    7ea4:	0002      	movs	r2, r0
    7ea6:	000b      	movs	r3, r1
    7ea8:	4c6f      	ldr	r4, [pc, #444]	; (8068 <pidf_control+0x230>)
    7eaa:	6838      	ldr	r0, [r7, #0]
    7eac:	6879      	ldr	r1, [r7, #4]
    7eae:	47a0      	blx	r4
    7eb0:	0003      	movs	r3, r0
    7eb2:	000c      	movs	r4, r1
    7eb4:	001a      	movs	r2, r3
    7eb6:	0023      	movs	r3, r4
    7eb8:	4c6c      	ldr	r4, [pc, #432]	; (806c <pidf_control+0x234>)
    7eba:	0028      	movs	r0, r5
    7ebc:	0031      	movs	r1, r6
    7ebe:	47a0      	blx	r4
    7ec0:	0003      	movs	r3, r0
    7ec2:	000c      	movs	r4, r1
    7ec4:	0019      	movs	r1, r3
    7ec6:	0022      	movs	r2, r4
    7ec8:	4b69      	ldr	r3, [pc, #420]	; (8070 <pidf_control+0x238>)
    7eca:	0008      	movs	r0, r1
    7ecc:	0011      	movs	r1, r2
    7ece:	4798      	blx	r3
    7ed0:	1c02      	adds	r2, r0, #0
    7ed2:	4b64      	ldr	r3, [pc, #400]	; (8064 <pidf_control+0x22c>)
    7ed4:	601a      	str	r2, [r3, #0]

	if(abs(error) < params->integral_enable_error_range)
    7ed6:	4b67      	ldr	r3, [pc, #412]	; (8074 <pidf_control+0x23c>)
    7ed8:	69b8      	ldr	r0, [r7, #24]
    7eda:	4798      	blx	r3
    7edc:	0003      	movs	r3, r0
    7ede:	17d9      	asrs	r1, r3, #31
    7ee0:	185a      	adds	r2, r3, r1
    7ee2:	404a      	eors	r2, r1
    7ee4:	4b57      	ldr	r3, [pc, #348]	; (8044 <pidf_control+0x20c>)
    7ee6:	0010      	movs	r0, r2
    7ee8:	4798      	blx	r3
    7eea:	68bb      	ldr	r3, [r7, #8]
    7eec:	695a      	ldr	r2, [r3, #20]
    7eee:	4b62      	ldr	r3, [pc, #392]	; (8078 <pidf_control+0x240>)
    7ef0:	1c11      	adds	r1, r2, #0
    7ef2:	4798      	blx	r3
    7ef4:	1e03      	subs	r3, r0, #0
    7ef6:	d049      	beq.n	7f8c <pidf_control+0x154>
	{
		error_integral += error;
    7ef8:	4b60      	ldr	r3, [pc, #384]	; (807c <pidf_control+0x244>)
    7efa:	681a      	ldr	r2, [r3, #0]
    7efc:	4b60      	ldr	r3, [pc, #384]	; (8080 <pidf_control+0x248>)
    7efe:	69b9      	ldr	r1, [r7, #24]
    7f00:	1c10      	adds	r0, r2, #0
    7f02:	4798      	blx	r3
    7f04:	1c03      	adds	r3, r0, #0
    7f06:	1c1a      	adds	r2, r3, #0
    7f08:	4b5c      	ldr	r3, [pc, #368]	; (807c <pidf_control+0x244>)
    7f0a:	601a      	str	r2, [r3, #0]
		if(abs(error_integral * params->ki) > params->integral_antiwindup)
    7f0c:	68bb      	ldr	r3, [r7, #8]
    7f0e:	689a      	ldr	r2, [r3, #8]
    7f10:	4b5a      	ldr	r3, [pc, #360]	; (807c <pidf_control+0x244>)
    7f12:	6819      	ldr	r1, [r3, #0]
    7f14:	4b4f      	ldr	r3, [pc, #316]	; (8054 <pidf_control+0x21c>)
    7f16:	1c10      	adds	r0, r2, #0
    7f18:	4798      	blx	r3
    7f1a:	1c03      	adds	r3, r0, #0
    7f1c:	1c1a      	adds	r2, r3, #0
    7f1e:	4b55      	ldr	r3, [pc, #340]	; (8074 <pidf_control+0x23c>)
    7f20:	1c10      	adds	r0, r2, #0
    7f22:	4798      	blx	r3
    7f24:	0003      	movs	r3, r0
    7f26:	17d9      	asrs	r1, r3, #31
    7f28:	185a      	adds	r2, r3, r1
    7f2a:	404a      	eors	r2, r1
    7f2c:	4b45      	ldr	r3, [pc, #276]	; (8044 <pidf_control+0x20c>)
    7f2e:	0010      	movs	r0, r2
    7f30:	4798      	blx	r3
    7f32:	68bb      	ldr	r3, [r7, #8]
    7f34:	691a      	ldr	r2, [r3, #16]
    7f36:	4b53      	ldr	r3, [pc, #332]	; (8084 <pidf_control+0x24c>)
    7f38:	1c11      	adds	r1, r2, #0
    7f3a:	4798      	blx	r3
    7f3c:	1e03      	subs	r3, r0, #0
    7f3e:	d028      	beq.n	7f92 <pidf_control+0x15a>
		{
			error_integral	= (error_integral/abs(error_integral)) * (params->integral_antiwindup) / params->ki;
    7f40:	4b4e      	ldr	r3, [pc, #312]	; (807c <pidf_control+0x244>)
    7f42:	681c      	ldr	r4, [r3, #0]
    7f44:	4b4d      	ldr	r3, [pc, #308]	; (807c <pidf_control+0x244>)
    7f46:	681a      	ldr	r2, [r3, #0]
    7f48:	4b4a      	ldr	r3, [pc, #296]	; (8074 <pidf_control+0x23c>)
    7f4a:	1c10      	adds	r0, r2, #0
    7f4c:	4798      	blx	r3
    7f4e:	0003      	movs	r3, r0
    7f50:	17d9      	asrs	r1, r3, #31
    7f52:	185a      	adds	r2, r3, r1
    7f54:	404a      	eors	r2, r1
    7f56:	4b3b      	ldr	r3, [pc, #236]	; (8044 <pidf_control+0x20c>)
    7f58:	0010      	movs	r0, r2
    7f5a:	4798      	blx	r3
    7f5c:	1c02      	adds	r2, r0, #0
    7f5e:	4b4a      	ldr	r3, [pc, #296]	; (8088 <pidf_control+0x250>)
    7f60:	1c11      	adds	r1, r2, #0
    7f62:	1c20      	adds	r0, r4, #0
    7f64:	4798      	blx	r3
    7f66:	1c03      	adds	r3, r0, #0
    7f68:	1c18      	adds	r0, r3, #0
    7f6a:	68bb      	ldr	r3, [r7, #8]
    7f6c:	691a      	ldr	r2, [r3, #16]
    7f6e:	4b39      	ldr	r3, [pc, #228]	; (8054 <pidf_control+0x21c>)
    7f70:	1c11      	adds	r1, r2, #0
    7f72:	4798      	blx	r3
    7f74:	1c03      	adds	r3, r0, #0
    7f76:	1c18      	adds	r0, r3, #0
    7f78:	68bb      	ldr	r3, [r7, #8]
    7f7a:	689a      	ldr	r2, [r3, #8]
    7f7c:	4b42      	ldr	r3, [pc, #264]	; (8088 <pidf_control+0x250>)
    7f7e:	1c11      	adds	r1, r2, #0
    7f80:	4798      	blx	r3
    7f82:	1c03      	adds	r3, r0, #0
    7f84:	1c1a      	adds	r2, r3, #0
    7f86:	4b3d      	ldr	r3, [pc, #244]	; (807c <pidf_control+0x244>)
    7f88:	601a      	str	r2, [r3, #0]
    7f8a:	e002      	b.n	7f92 <pidf_control+0x15a>
		}
	}
	else
	{
		error_integral = 0.0;
    7f8c:	4b3b      	ldr	r3, [pc, #236]	; (807c <pidf_control+0x244>)
    7f8e:	2200      	movs	r2, #0
    7f90:	601a      	str	r2, [r3, #0]
	}

	float output = params->kf * control->pressure_set_point_cm_h20 +
    7f92:	68bb      	ldr	r3, [r7, #8]
    7f94:	681c      	ldr	r4, [r3, #0]
    7f96:	68fb      	ldr	r3, [r7, #12]
    7f98:	691a      	ldr	r2, [r3, #16]
    7f9a:	4b2a      	ldr	r3, [pc, #168]	; (8044 <pidf_control+0x20c>)
    7f9c:	0010      	movs	r0, r2
    7f9e:	4798      	blx	r3
    7fa0:	1c02      	adds	r2, r0, #0
    7fa2:	4b2c      	ldr	r3, [pc, #176]	; (8054 <pidf_control+0x21c>)
    7fa4:	1c11      	adds	r1, r2, #0
    7fa6:	1c20      	adds	r0, r4, #0
    7fa8:	4798      	blx	r3
    7faa:	1c03      	adds	r3, r0, #0
    7fac:	1c1c      	adds	r4, r3, #0
					params->kp * error +
    7fae:	68bb      	ldr	r3, [r7, #8]
    7fb0:	685a      	ldr	r2, [r3, #4]
    7fb2:	4b28      	ldr	r3, [pc, #160]	; (8054 <pidf_control+0x21c>)
    7fb4:	69b9      	ldr	r1, [r7, #24]
    7fb6:	1c10      	adds	r0, r2, #0
    7fb8:	4798      	blx	r3
    7fba:	1c03      	adds	r3, r0, #0
    7fbc:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    7fbe:	4b30      	ldr	r3, [pc, #192]	; (8080 <pidf_control+0x248>)
    7fc0:	1c11      	adds	r1, r2, #0
    7fc2:	1c20      	adds	r0, r4, #0
    7fc4:	4798      	blx	r3
    7fc6:	1c03      	adds	r3, r0, #0
    7fc8:	1c1c      	adds	r4, r3, #0
					params->ki * error_integral +
    7fca:	68bb      	ldr	r3, [r7, #8]
    7fcc:	689a      	ldr	r2, [r3, #8]
    7fce:	4b2b      	ldr	r3, [pc, #172]	; (807c <pidf_control+0x244>)
    7fd0:	6819      	ldr	r1, [r3, #0]
    7fd2:	4b20      	ldr	r3, [pc, #128]	; (8054 <pidf_control+0x21c>)
    7fd4:	1c10      	adds	r0, r2, #0
    7fd6:	4798      	blx	r3
    7fd8:	1c03      	adds	r3, r0, #0
    7fda:	1c1a      	adds	r2, r3, #0
					params->kp * error +
    7fdc:	4b28      	ldr	r3, [pc, #160]	; (8080 <pidf_control+0x248>)
    7fde:	1c11      	adds	r1, r2, #0
    7fe0:	1c20      	adds	r0, r4, #0
    7fe2:	4798      	blx	r3
    7fe4:	1c03      	adds	r3, r0, #0
    7fe6:	1c1c      	adds	r4, r3, #0
					params->kd * error_derivative;
    7fe8:	68bb      	ldr	r3, [r7, #8]
    7fea:	68da      	ldr	r2, [r3, #12]
    7fec:	4b1d      	ldr	r3, [pc, #116]	; (8064 <pidf_control+0x22c>)
    7fee:	6819      	ldr	r1, [r3, #0]
    7ff0:	4b18      	ldr	r3, [pc, #96]	; (8054 <pidf_control+0x21c>)
    7ff2:	1c10      	adds	r0, r2, #0
    7ff4:	4798      	blx	r3
    7ff6:	1c03      	adds	r3, r0, #0
    7ff8:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    7ffa:	4b21      	ldr	r3, [pc, #132]	; (8080 <pidf_control+0x248>)
    7ffc:	1c11      	adds	r1, r2, #0
    7ffe:	1c20      	adds	r0, r4, #0
    8000:	4798      	blx	r3
    8002:	1c03      	adds	r3, r0, #0
    8004:	61fb      	str	r3, [r7, #28]

	if(output > params->max_output)
    8006:	68bb      	ldr	r3, [r7, #8]
    8008:	699a      	ldr	r2, [r3, #24]
    800a:	4b1b      	ldr	r3, [pc, #108]	; (8078 <pidf_control+0x240>)
    800c:	69f9      	ldr	r1, [r7, #28]
    800e:	1c10      	adds	r0, r2, #0
    8010:	4798      	blx	r3
    8012:	1e03      	subs	r3, r0, #0
    8014:	d002      	beq.n	801c <pidf_control+0x1e4>
	{
		output = params->max_output;
    8016:	68bb      	ldr	r3, [r7, #8]
    8018:	699b      	ldr	r3, [r3, #24]
    801a:	61fb      	str	r3, [r7, #28]
	}

	if(output < params->min_output)
    801c:	68bb      	ldr	r3, [r7, #8]
    801e:	69da      	ldr	r2, [r3, #28]
    8020:	4b18      	ldr	r3, [pc, #96]	; (8084 <pidf_control+0x24c>)
    8022:	69f9      	ldr	r1, [r7, #28]
    8024:	1c10      	adds	r0, r2, #0
    8026:	4798      	blx	r3
    8028:	1e03      	subs	r3, r0, #0
    802a:	d002      	beq.n	8032 <pidf_control+0x1fa>
	{
		output = params->min_output;
    802c:	68bb      	ldr	r3, [r7, #8]
    802e:	69db      	ldr	r3, [r3, #28]
    8030:	61fb      	str	r3, [r7, #28]
	}

	last_error = error;
    8032:	4b06      	ldr	r3, [pc, #24]	; (804c <pidf_control+0x214>)
    8034:	69ba      	ldr	r2, [r7, #24]
    8036:	601a      	str	r2, [r3, #0]
	return output;
    8038:	69fb      	ldr	r3, [r7, #28]
 }
    803a:	1c18      	adds	r0, r3, #0
    803c:	46bd      	mov	sp, r7
    803e:	b009      	add	sp, #36	; 0x24
    8040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8042:	46c0      	nop			; (mov r8, r8)
    8044:	0001108d 	.word	0x0001108d
    8048:	3f333333 	.word	0x3f333333
    804c:	20003788 	.word	0x20003788
    8050:	00010d15 	.word	0x00010d15
    8054:	00010ad5 	.word	0x00010ad5
    8058:	00012a3d 	.word	0x00012a3d
    805c:	000122b5 	.word	0x000122b5
    8060:	3ff00000 	.word	0x3ff00000
    8064:	2000378c 	.word	0x2000378c
    8068:	00011db5 	.word	0x00011db5
    806c:	0001112d 	.word	0x0001112d
    8070:	00012ae1 	.word	0x00012ae1
    8074:	0001104d 	.word	0x0001104d
    8078:	00010085 	.word	0x00010085
    807c:	20003790 	.word	0x20003790
    8080:	000103d1 	.word	0x000103d1
    8084:	000100ad 	.word	0x000100ad
    8088:	000106f5 	.word	0x000106f5

0000808c <calculate_lcv_control_params>:
 *
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 */
 void calculate_lcv_control_params(lcv_state_t * state, lcv_control_t * control)
 {
    808c:	b5f0      	push	{r4, r5, r6, r7, lr}
    808e:	b087      	sub	sp, #28
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
    8094:	6039      	str	r1, [r7, #0]
	*	PIP	         ________
	*			   /		  \
	*			 /			    \
	*	PEEP   /				  \____________
	*/
	float breath_cycle_total_time_ms = (60000.0) / state->setting_state.breath_per_min;
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	691a      	ldr	r2, [r3, #16]
    809a:	4b6b      	ldr	r3, [pc, #428]	; (8248 <calculate_lcv_control_params+0x1bc>)
    809c:	0010      	movs	r0, r2
    809e:	4798      	blx	r3
    80a0:	0002      	movs	r2, r0
    80a2:	000b      	movs	r3, r1
    80a4:	4c69      	ldr	r4, [pc, #420]	; (824c <calculate_lcv_control_params+0x1c0>)
    80a6:	2000      	movs	r0, #0
    80a8:	4969      	ldr	r1, [pc, #420]	; (8250 <calculate_lcv_control_params+0x1c4>)
    80aa:	47a0      	blx	r4
    80ac:	0003      	movs	r3, r0
    80ae:	000c      	movs	r4, r1
    80b0:	0019      	movs	r1, r3
    80b2:	0022      	movs	r2, r4
    80b4:	4b67      	ldr	r3, [pc, #412]	; (8254 <calculate_lcv_control_params+0x1c8>)
    80b6:	0008      	movs	r0, r1
    80b8:	0011      	movs	r1, r2
    80ba:	4798      	blx	r3
    80bc:	1c03      	adds	r3, r0, #0
    80be:	617b      	str	r3, [r7, #20]
	float breath_cycle_total_time_ms_minus_ramps = breath_cycle_total_time_ms - (control->pip_to_peep_rampdown_ms + control->peep_to_pip_rampup_ms);
    80c0:	683b      	ldr	r3, [r7, #0]
    80c2:	689a      	ldr	r2, [r3, #8]
    80c4:	683b      	ldr	r3, [r7, #0]
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	18d2      	adds	r2, r2, r3
    80ca:	4b63      	ldr	r3, [pc, #396]	; (8258 <calculate_lcv_control_params+0x1cc>)
    80cc:	0010      	movs	r0, r2
    80ce:	4798      	blx	r3
    80d0:	1c02      	adds	r2, r0, #0
    80d2:	4b62      	ldr	r3, [pc, #392]	; (825c <calculate_lcv_control_params+0x1d0>)
    80d4:	1c11      	adds	r1, r2, #0
    80d6:	6978      	ldr	r0, [r7, #20]
    80d8:	4798      	blx	r3
    80da:	1c03      	adds	r3, r0, #0
    80dc:	613b      	str	r3, [r7, #16]

	if(breath_cycle_total_time_ms_minus_ramps < 0)
    80de:	4b60      	ldr	r3, [pc, #384]	; (8260 <calculate_lcv_control_params+0x1d4>)
    80e0:	2100      	movs	r1, #0
    80e2:	6938      	ldr	r0, [r7, #16]
    80e4:	4798      	blx	r3
    80e6:	1e03      	subs	r3, r0, #0
    80e8:	d004      	beq.n	80f4 <calculate_lcv_control_params+0x68>
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, true);
    80ea:	2101      	movs	r1, #1
    80ec:	2006      	movs	r0, #6
    80ee:	4b5d      	ldr	r3, [pc, #372]	; (8264 <calculate_lcv_control_params+0x1d8>)
    80f0:	4798      	blx	r3
    80f2:	e003      	b.n	80fc <calculate_lcv_control_params+0x70>
		// TODO pick something reasonable?
	}
	else
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, false);
    80f4:	2100      	movs	r1, #0
    80f6:	2006      	movs	r0, #6
    80f8:	4b5a      	ldr	r3, [pc, #360]	; (8264 <calculate_lcv_control_params+0x1d8>)
    80fa:	4798      	blx	r3
	}

	// I:E is a ratio, so 3:1 implies 4 parts needed. Split up what is left according to the I:E ratio
	float section_size_ms;
	if(state->setting_state.ie_ratio_tenths > 10)
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	785b      	ldrb	r3, [r3, #1]
    8100:	2b0a      	cmp	r3, #10
    8102:	d951      	bls.n	81a8 <calculate_lcv_control_params+0x11c>
	{
		// Typical ratios with more expiratory time
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / ((state->setting_state.ie_ratio_tenths * 0.1) + 1.0);
    8104:	4b58      	ldr	r3, [pc, #352]	; (8268 <calculate_lcv_control_params+0x1dc>)
    8106:	6938      	ldr	r0, [r7, #16]
    8108:	4798      	blx	r3
    810a:	0005      	movs	r5, r0
    810c:	000e      	movs	r6, r1
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	785b      	ldrb	r3, [r3, #1]
    8112:	001a      	movs	r2, r3
    8114:	4b4c      	ldr	r3, [pc, #304]	; (8248 <calculate_lcv_control_params+0x1bc>)
    8116:	0010      	movs	r0, r2
    8118:	4798      	blx	r3
    811a:	4c54      	ldr	r4, [pc, #336]	; (826c <calculate_lcv_control_params+0x1e0>)
    811c:	4a54      	ldr	r2, [pc, #336]	; (8270 <calculate_lcv_control_params+0x1e4>)
    811e:	4b55      	ldr	r3, [pc, #340]	; (8274 <calculate_lcv_control_params+0x1e8>)
    8120:	47a0      	blx	r4
    8122:	0003      	movs	r3, r0
    8124:	000c      	movs	r4, r1
    8126:	0018      	movs	r0, r3
    8128:	0021      	movs	r1, r4
    812a:	4c53      	ldr	r4, [pc, #332]	; (8278 <calculate_lcv_control_params+0x1ec>)
    812c:	2200      	movs	r2, #0
    812e:	4b53      	ldr	r3, [pc, #332]	; (827c <calculate_lcv_control_params+0x1f0>)
    8130:	47a0      	blx	r4
    8132:	0003      	movs	r3, r0
    8134:	000c      	movs	r4, r1
    8136:	001a      	movs	r2, r3
    8138:	0023      	movs	r3, r4
    813a:	4c44      	ldr	r4, [pc, #272]	; (824c <calculate_lcv_control_params+0x1c0>)
    813c:	0028      	movs	r0, r5
    813e:	0031      	movs	r1, r6
    8140:	47a0      	blx	r4
    8142:	0003      	movs	r3, r0
    8144:	000c      	movs	r4, r1
    8146:	0019      	movs	r1, r3
    8148:	0022      	movs	r2, r4
    814a:	4b42      	ldr	r3, [pc, #264]	; (8254 <calculate_lcv_control_params+0x1c8>)
    814c:	0008      	movs	r0, r1
    814e:	0011      	movs	r1, r2
    8150:	4798      	blx	r3
    8152:	1c03      	adds	r3, r0, #0
    8154:	60fb      	str	r3, [r7, #12]
		
		control->peep_hold_ms =	section_size_ms * (state->setting_state.ie_ratio_tenths * 0.1);
    8156:	4b44      	ldr	r3, [pc, #272]	; (8268 <calculate_lcv_control_params+0x1dc>)
    8158:	68f8      	ldr	r0, [r7, #12]
    815a:	4798      	blx	r3
    815c:	0005      	movs	r5, r0
    815e:	000e      	movs	r6, r1
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	785b      	ldrb	r3, [r3, #1]
    8164:	001a      	movs	r2, r3
    8166:	4b38      	ldr	r3, [pc, #224]	; (8248 <calculate_lcv_control_params+0x1bc>)
    8168:	0010      	movs	r0, r2
    816a:	4798      	blx	r3
    816c:	4c3f      	ldr	r4, [pc, #252]	; (826c <calculate_lcv_control_params+0x1e0>)
    816e:	4a40      	ldr	r2, [pc, #256]	; (8270 <calculate_lcv_control_params+0x1e4>)
    8170:	4b40      	ldr	r3, [pc, #256]	; (8274 <calculate_lcv_control_params+0x1e8>)
    8172:	47a0      	blx	r4
    8174:	0003      	movs	r3, r0
    8176:	000c      	movs	r4, r1
    8178:	001a      	movs	r2, r3
    817a:	0023      	movs	r3, r4
    817c:	4c3b      	ldr	r4, [pc, #236]	; (826c <calculate_lcv_control_params+0x1e0>)
    817e:	0028      	movs	r0, r5
    8180:	0031      	movs	r1, r6
    8182:	47a0      	blx	r4
    8184:	0003      	movs	r3, r0
    8186:	000c      	movs	r4, r1
    8188:	0019      	movs	r1, r3
    818a:	0022      	movs	r2, r4
    818c:	4b3c      	ldr	r3, [pc, #240]	; (8280 <calculate_lcv_control_params+0x1f4>)
    818e:	0008      	movs	r0, r1
    8190:	0011      	movs	r1, r2
    8192:	4798      	blx	r3
    8194:	0002      	movs	r2, r0
    8196:	683b      	ldr	r3, [r7, #0]
    8198:	60da      	str	r2, [r3, #12]
		control->pip_hold_ms = section_size_ms; // 1 section by definition
    819a:	4b3a      	ldr	r3, [pc, #232]	; (8284 <calculate_lcv_control_params+0x1f8>)
    819c:	68f8      	ldr	r0, [r7, #12]
    819e:	4798      	blx	r3
    81a0:	0002      	movs	r2, r0
    81a2:	683b      	ldr	r3, [r7, #0]
    81a4:	605a      	str	r2, [r3, #4]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);

		control->pip_hold_ms =	section_size_ms * ratio_to_use;
		control->peep_hold_ms = section_size_ms; // 1 section by definition
	}
 }
    81a6:	e04b      	b.n	8240 <calculate_lcv_control_params+0x1b4>
		float ratio_to_use = 1.0 / (state->setting_state.ie_ratio_tenths * 0.1);	// Ratio of 0.5:1 means 1:2, which has 3 sections
    81a8:	687b      	ldr	r3, [r7, #4]
    81aa:	785b      	ldrb	r3, [r3, #1]
    81ac:	001a      	movs	r2, r3
    81ae:	4b26      	ldr	r3, [pc, #152]	; (8248 <calculate_lcv_control_params+0x1bc>)
    81b0:	0010      	movs	r0, r2
    81b2:	4798      	blx	r3
    81b4:	4c2d      	ldr	r4, [pc, #180]	; (826c <calculate_lcv_control_params+0x1e0>)
    81b6:	4a2e      	ldr	r2, [pc, #184]	; (8270 <calculate_lcv_control_params+0x1e4>)
    81b8:	4b2e      	ldr	r3, [pc, #184]	; (8274 <calculate_lcv_control_params+0x1e8>)
    81ba:	47a0      	blx	r4
    81bc:	0003      	movs	r3, r0
    81be:	000c      	movs	r4, r1
    81c0:	001a      	movs	r2, r3
    81c2:	0023      	movs	r3, r4
    81c4:	4c21      	ldr	r4, [pc, #132]	; (824c <calculate_lcv_control_params+0x1c0>)
    81c6:	2000      	movs	r0, #0
    81c8:	492c      	ldr	r1, [pc, #176]	; (827c <calculate_lcv_control_params+0x1f0>)
    81ca:	47a0      	blx	r4
    81cc:	0003      	movs	r3, r0
    81ce:	000c      	movs	r4, r1
    81d0:	0019      	movs	r1, r3
    81d2:	0022      	movs	r2, r4
    81d4:	4b1f      	ldr	r3, [pc, #124]	; (8254 <calculate_lcv_control_params+0x1c8>)
    81d6:	0008      	movs	r0, r1
    81d8:	0011      	movs	r1, r2
    81da:	4798      	blx	r3
    81dc:	1c03      	adds	r3, r0, #0
    81de:	60bb      	str	r3, [r7, #8]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);
    81e0:	4b21      	ldr	r3, [pc, #132]	; (8268 <calculate_lcv_control_params+0x1dc>)
    81e2:	6938      	ldr	r0, [r7, #16]
    81e4:	4798      	blx	r3
    81e6:	0005      	movs	r5, r0
    81e8:	000e      	movs	r6, r1
    81ea:	4b1f      	ldr	r3, [pc, #124]	; (8268 <calculate_lcv_control_params+0x1dc>)
    81ec:	68b8      	ldr	r0, [r7, #8]
    81ee:	4798      	blx	r3
    81f0:	4c21      	ldr	r4, [pc, #132]	; (8278 <calculate_lcv_control_params+0x1ec>)
    81f2:	2200      	movs	r2, #0
    81f4:	4b21      	ldr	r3, [pc, #132]	; (827c <calculate_lcv_control_params+0x1f0>)
    81f6:	47a0      	blx	r4
    81f8:	0003      	movs	r3, r0
    81fa:	000c      	movs	r4, r1
    81fc:	001a      	movs	r2, r3
    81fe:	0023      	movs	r3, r4
    8200:	4c12      	ldr	r4, [pc, #72]	; (824c <calculate_lcv_control_params+0x1c0>)
    8202:	0028      	movs	r0, r5
    8204:	0031      	movs	r1, r6
    8206:	47a0      	blx	r4
    8208:	0003      	movs	r3, r0
    820a:	000c      	movs	r4, r1
    820c:	0019      	movs	r1, r3
    820e:	0022      	movs	r2, r4
    8210:	4b10      	ldr	r3, [pc, #64]	; (8254 <calculate_lcv_control_params+0x1c8>)
    8212:	0008      	movs	r0, r1
    8214:	0011      	movs	r1, r2
    8216:	4798      	blx	r3
    8218:	1c03      	adds	r3, r0, #0
    821a:	60fb      	str	r3, [r7, #12]
		control->pip_hold_ms =	section_size_ms * ratio_to_use;
    821c:	4b1a      	ldr	r3, [pc, #104]	; (8288 <calculate_lcv_control_params+0x1fc>)
    821e:	68b9      	ldr	r1, [r7, #8]
    8220:	68f8      	ldr	r0, [r7, #12]
    8222:	4798      	blx	r3
    8224:	1c03      	adds	r3, r0, #0
    8226:	1c1a      	adds	r2, r3, #0
    8228:	4b16      	ldr	r3, [pc, #88]	; (8284 <calculate_lcv_control_params+0x1f8>)
    822a:	1c10      	adds	r0, r2, #0
    822c:	4798      	blx	r3
    822e:	0002      	movs	r2, r0
    8230:	683b      	ldr	r3, [r7, #0]
    8232:	605a      	str	r2, [r3, #4]
		control->peep_hold_ms = section_size_ms; // 1 section by definition
    8234:	4b13      	ldr	r3, [pc, #76]	; (8284 <calculate_lcv_control_params+0x1f8>)
    8236:	68f8      	ldr	r0, [r7, #12]
    8238:	4798      	blx	r3
    823a:	0002      	movs	r2, r0
    823c:	683b      	ldr	r3, [r7, #0]
    823e:	60da      	str	r2, [r3, #12]
 }
    8240:	46c0      	nop			; (mov r8, r8)
    8242:	46bd      	mov	sp, r7
    8244:	b007      	add	sp, #28
    8246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8248:	00012949 	.word	0x00012949
    824c:	0001174d 	.word	0x0001174d
    8250:	40ed4c00 	.word	0x40ed4c00
    8254:	00012ae1 	.word	0x00012ae1
    8258:	0001108d 	.word	0x0001108d
    825c:	00010d15 	.word	0x00010d15
    8260:	00010085 	.word	0x00010085
    8264:	00007bf1 	.word	0x00007bf1
    8268:	00012a3d 	.word	0x00012a3d
    826c:	00011db5 	.word	0x00011db5
    8270:	9999999a 	.word	0x9999999a
    8274:	3fb99999 	.word	0x3fb99999
    8278:	0001112d 	.word	0x0001112d
    827c:	3ff00000 	.word	0x3ff00000
    8280:	000128e1 	.word	0x000128e1
    8284:	0001104d 	.word	0x0001104d
    8288:	00010ad5 	.word	0x00010ad5

0000828c <run_controller>:
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 float run_controller(lcv_state_t * state, lcv_control_t * control, controller_param_t * params)
 {
    828c:	b590      	push	{r4, r7, lr}
    828e:	b087      	sub	sp, #28
    8290:	af00      	add	r7, sp, #0
    8292:	60f8      	str	r0, [r7, #12]
    8294:	60b9      	str	r1, [r7, #8]
    8296:	607a      	str	r2, [r7, #4]
	static bool was_enabled = false;
	static uint32_t start_of_current_profile_time_ms = 0;
	uint32_t current_time_ms = xTaskGetTickCount() * portTICK_PERIOD_MS;
    8298:	4b1b      	ldr	r3, [pc, #108]	; (8308 <run_controller+0x7c>)
    829a:	4798      	blx	r3
    829c:	0003      	movs	r3, r0
    829e:	617b      	str	r3, [r7, #20]

	if(!was_enabled && state->current_state.enable)
    82a0:	4b1a      	ldr	r3, [pc, #104]	; (830c <run_controller+0x80>)
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	2201      	movs	r2, #1
    82a6:	4053      	eors	r3, r2
    82a8:	b2db      	uxtb	r3, r3
    82aa:	2b00      	cmp	r3, #0
    82ac:	d009      	beq.n	82c2 <run_controller+0x36>
    82ae:	68fb      	ldr	r3, [r7, #12]
    82b0:	7d1b      	ldrb	r3, [r3, #20]
    82b2:	2201      	movs	r2, #1
    82b4:	4013      	ands	r3, r2
    82b6:	b2db      	uxtb	r3, r3
    82b8:	2b00      	cmp	r3, #0
    82ba:	d002      	beq.n	82c2 <run_controller+0x36>
	{
		start_of_current_profile_time_ms = current_time_ms;
    82bc:	4b14      	ldr	r3, [pc, #80]	; (8310 <run_controller+0x84>)
    82be:	697a      	ldr	r2, [r7, #20]
    82c0:	601a      	str	r2, [r3, #0]
	}

	// First, determine what the new setpoint should be
	// Updates profile if enters a new profile
	start_of_current_profile_time_ms = calculate_new_setpoint(start_of_current_profile_time_ms, current_time_ms, state, control);
    82c2:	4b13      	ldr	r3, [pc, #76]	; (8310 <run_controller+0x84>)
    82c4:	6818      	ldr	r0, [r3, #0]
    82c6:	68bb      	ldr	r3, [r7, #8]
    82c8:	68fa      	ldr	r2, [r7, #12]
    82ca:	6979      	ldr	r1, [r7, #20]
    82cc:	4c11      	ldr	r4, [pc, #68]	; (8314 <run_controller+0x88>)
    82ce:	47a0      	blx	r4
    82d0:	0002      	movs	r2, r0
    82d2:	4b0f      	ldr	r3, [pc, #60]	; (8310 <run_controller+0x84>)
    82d4:	601a      	str	r2, [r3, #0]

	// Then, run the controller to track this setpoint
	float output = pidf_control(control, params);
    82d6:	687a      	ldr	r2, [r7, #4]
    82d8:	68bb      	ldr	r3, [r7, #8]
    82da:	0011      	movs	r1, r2
    82dc:	0018      	movs	r0, r3
    82de:	4b0e      	ldr	r3, [pc, #56]	; (8318 <run_controller+0x8c>)
    82e0:	4798      	blx	r3
    82e2:	1c03      	adds	r3, r0, #0
    82e4:	613b      	str	r3, [r7, #16]
	was_enabled = (state->current_state.enable > 0);
    82e6:	68fb      	ldr	r3, [r7, #12]
    82e8:	7d1b      	ldrb	r3, [r3, #20]
    82ea:	07db      	lsls	r3, r3, #31
    82ec:	0fdb      	lsrs	r3, r3, #31
    82ee:	b2db      	uxtb	r3, r3
    82f0:	17da      	asrs	r2, r3, #31
    82f2:	1ad3      	subs	r3, r2, r3
    82f4:	0fdb      	lsrs	r3, r3, #31
    82f6:	b2da      	uxtb	r2, r3
    82f8:	4b04      	ldr	r3, [pc, #16]	; (830c <run_controller+0x80>)
    82fa:	701a      	strb	r2, [r3, #0]
	return output;
    82fc:	693b      	ldr	r3, [r7, #16]
    82fe:	1c18      	adds	r0, r3, #0
    8300:	46bd      	mov	sp, r7
    8302:	b007      	add	sp, #28
    8304:	bd90      	pop	{r4, r7, pc}
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	0000c029 	.word	0x0000c029
    830c:	20003794 	.word	0x20003794
    8310:	20003798 	.word	0x20003798
    8314:	00007ca5 	.word	0x00007ca5
    8318:	00007e39 	.word	0x00007e39

0000831c <crc_8>:
 *
 * The function crc_8() calculates the 8 bit wide CRC of an input string of a
 * given length.
 */

uint8_t crc_8( const unsigned char *input_str, size_t num_bytes ) {
    831c:	b580      	push	{r7, lr}
    831e:	b086      	sub	sp, #24
    8320:	af00      	add	r7, sp, #0
    8322:	6078      	str	r0, [r7, #4]
    8324:	6039      	str	r1, [r7, #0]

	size_t a;
	uint8_t crc;
	const unsigned char *ptr;

	crc = CRC_START_8;
    8326:	2313      	movs	r3, #19
    8328:	18fb      	adds	r3, r7, r3
    832a:	2200      	movs	r2, #0
    832c:	701a      	strb	r2, [r3, #0]
	ptr = input_str;
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	60fb      	str	r3, [r7, #12]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
    8332:	68fb      	ldr	r3, [r7, #12]
    8334:	2b00      	cmp	r3, #0
    8336:	d018      	beq.n	836a <crc_8+0x4e>
    8338:	2300      	movs	r3, #0
    833a:	617b      	str	r3, [r7, #20]
    833c:	e011      	b.n	8362 <crc_8+0x46>

		crc = sht75_crc_table[(*ptr++) ^ crc];
    833e:	68fb      	ldr	r3, [r7, #12]
    8340:	1c5a      	adds	r2, r3, #1
    8342:	60fa      	str	r2, [r7, #12]
    8344:	781a      	ldrb	r2, [r3, #0]
    8346:	2313      	movs	r3, #19
    8348:	18fb      	adds	r3, r7, r3
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	4053      	eors	r3, r2
    834e:	b2db      	uxtb	r3, r3
    8350:	0019      	movs	r1, r3
    8352:	2313      	movs	r3, #19
    8354:	18fb      	adds	r3, r7, r3
    8356:	4a08      	ldr	r2, [pc, #32]	; (8378 <crc_8+0x5c>)
    8358:	5c52      	ldrb	r2, [r2, r1]
    835a:	701a      	strb	r2, [r3, #0]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
    835c:	697b      	ldr	r3, [r7, #20]
    835e:	3301      	adds	r3, #1
    8360:	617b      	str	r3, [r7, #20]
    8362:	697a      	ldr	r2, [r7, #20]
    8364:	683b      	ldr	r3, [r7, #0]
    8366:	429a      	cmp	r2, r3
    8368:	d3e9      	bcc.n	833e <crc_8+0x22>
	}

	return crc;
    836a:	2313      	movs	r3, #19
    836c:	18fb      	adds	r3, r7, r3
    836e:	781b      	ldrb	r3, [r3, #0]

}  /* crc_8 */
    8370:	0018      	movs	r0, r3
    8372:	46bd      	mov	sp, r7
    8374:	b006      	add	sp, #24
    8376:	bd80      	pop	{r7, pc}
    8378:	200000c0 	.word	0x200000c0

0000837c <system_interrupt_enable>:
{
    837c:	b580      	push	{r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	af00      	add	r7, sp, #0
    8382:	0002      	movs	r2, r0
    8384:	1dfb      	adds	r3, r7, #7
    8386:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8388:	4b06      	ldr	r3, [pc, #24]	; (83a4 <system_interrupt_enable+0x28>)
    838a:	1dfa      	adds	r2, r7, #7
    838c:	7812      	ldrb	r2, [r2, #0]
    838e:	0011      	movs	r1, r2
    8390:	221f      	movs	r2, #31
    8392:	400a      	ands	r2, r1
    8394:	2101      	movs	r1, #1
    8396:	4091      	lsls	r1, r2
    8398:	000a      	movs	r2, r1
    839a:	601a      	str	r2, [r3, #0]
}
    839c:	46c0      	nop			; (mov r8, r8)
    839e:	46bd      	mov	sp, r7
    83a0:	b002      	add	sp, #8
    83a2:	bd80      	pop	{r7, pc}
    83a4:	e000e100 	.word	0xe000e100

000083a8 <i2c_master_is_syncing>:
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b084      	sub	sp, #16
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    83b0:	687b      	ldr	r3, [r7, #4]
    83b2:	681b      	ldr	r3, [r3, #0]
    83b4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    83b6:	68fb      	ldr	r3, [r7, #12]
    83b8:	69db      	ldr	r3, [r3, #28]
    83ba:	2207      	movs	r2, #7
    83bc:	4013      	ands	r3, r2
    83be:	1e5a      	subs	r2, r3, #1
    83c0:	4193      	sbcs	r3, r2
    83c2:	b2db      	uxtb	r3, r3
}
    83c4:	0018      	movs	r0, r3
    83c6:	46bd      	mov	sp, r7
    83c8:	b004      	add	sp, #16
    83ca:	bd80      	pop	{r7, pc}

000083cc <_i2c_master_wait_for_sync>:
{
    83cc:	b580      	push	{r7, lr}
    83ce:	b082      	sub	sp, #8
    83d0:	af00      	add	r7, sp, #0
    83d2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    83d4:	46c0      	nop			; (mov r8, r8)
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	0018      	movs	r0, r3
    83da:	4b04      	ldr	r3, [pc, #16]	; (83ec <_i2c_master_wait_for_sync+0x20>)
    83dc:	4798      	blx	r3
    83de:	1e03      	subs	r3, r0, #0
    83e0:	d1f9      	bne.n	83d6 <_i2c_master_wait_for_sync+0xa>
}
    83e2:	46c0      	nop			; (mov r8, r8)
    83e4:	46bd      	mov	sp, r7
    83e6:	b002      	add	sp, #8
    83e8:	bd80      	pop	{r7, pc}
    83ea:	46c0      	nop			; (mov r8, r8)
    83ec:	000083a9 	.word	0x000083a9

000083f0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	af00      	add	r7, sp, #0
    83f6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	2264      	movs	r2, #100	; 0x64
    83fc:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    83fe:	687b      	ldr	r3, [r7, #4]
    8400:	4a1b      	ldr	r2, [pc, #108]	; (8470 <i2c_master_get_config_defaults+0x80>)
    8402:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	2200      	movs	r2, #0
    8408:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    840a:	687b      	ldr	r3, [r7, #4]
    840c:	2200      	movs	r2, #0
    840e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	2200      	movs	r2, #0
    8414:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	2280      	movs	r2, #128	; 0x80
    841a:	0392      	lsls	r2, r2, #14
    841c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    841e:	687b      	ldr	r3, [r7, #4]
    8420:	2201      	movs	r2, #1
    8422:	4252      	negs	r2, r2
    8424:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	2201      	movs	r2, #1
    842a:	4252      	negs	r2, r2
    842c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	2200      	movs	r2, #0
    8432:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	2200      	movs	r2, #0
    8438:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	2224      	movs	r2, #36	; 0x24
    843e:	2100      	movs	r1, #0
    8440:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	2200      	movs	r2, #0
    8446:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8448:	687b      	ldr	r3, [r7, #4]
    844a:	222c      	movs	r2, #44	; 0x2c
    844c:	2100      	movs	r1, #0
    844e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8450:	687b      	ldr	r3, [r7, #4]
    8452:	222d      	movs	r2, #45	; 0x2d
    8454:	2100      	movs	r1, #0
    8456:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	222e      	movs	r2, #46	; 0x2e
    845c:	2100      	movs	r1, #0
    845e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	22d7      	movs	r2, #215	; 0xd7
    8464:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8466:	46c0      	nop			; (mov r8, r8)
    8468:	46bd      	mov	sp, r7
    846a:	b002      	add	sp, #8
    846c:	bd80      	pop	{r7, pc}
    846e:	46c0      	nop			; (mov r8, r8)
    8470:	00000d48 	.word	0x00000d48

00008474 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    8474:	b580      	push	{r7, lr}
    8476:	b084      	sub	sp, #16
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    8482:	2300      	movs	r3, #0
    8484:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	0018      	movs	r0, r3
    848a:	4b14      	ldr	r3, [pc, #80]	; (84dc <i2c_master_enable+0x68>)
    848c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    848e:	68bb      	ldr	r3, [r7, #8]
    8490:	681b      	ldr	r3, [r3, #0]
    8492:	2202      	movs	r2, #2
    8494:	431a      	orrs	r2, r3
    8496:	68bb      	ldr	r3, [r7, #8]
    8498:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	681b      	ldr	r3, [r3, #0]
    849e:	0018      	movs	r0, r3
    84a0:	4b0f      	ldr	r3, [pc, #60]	; (84e0 <i2c_master_enable+0x6c>)
    84a2:	4798      	blx	r3
    84a4:	0003      	movs	r3, r0
    84a6:	0018      	movs	r0, r3
    84a8:	4b0e      	ldr	r3, [pc, #56]	; (84e4 <i2c_master_enable+0x70>)
    84aa:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    84ac:	e00c      	b.n	84c8 <i2c_master_enable+0x54>
		timeout_counter++;
    84ae:	68fb      	ldr	r3, [r7, #12]
    84b0:	3301      	adds	r3, #1
    84b2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	88db      	ldrh	r3, [r3, #6]
    84b8:	001a      	movs	r2, r3
    84ba:	68fb      	ldr	r3, [r7, #12]
    84bc:	429a      	cmp	r2, r3
    84be:	d803      	bhi.n	84c8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    84c0:	68bb      	ldr	r3, [r7, #8]
    84c2:	2210      	movs	r2, #16
    84c4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    84c6:	e006      	b.n	84d6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    84c8:	68bb      	ldr	r3, [r7, #8]
    84ca:	8b5b      	ldrh	r3, [r3, #26]
    84cc:	b29b      	uxth	r3, r3
    84ce:	001a      	movs	r2, r3
    84d0:	2310      	movs	r3, #16
    84d2:	4013      	ands	r3, r2
    84d4:	d0eb      	beq.n	84ae <i2c_master_enable+0x3a>
		}
	}
}
    84d6:	46bd      	mov	sp, r7
    84d8:	b004      	add	sp, #16
    84da:	bd80      	pop	{r7, pc}
    84dc:	000083cd 	.word	0x000083cd
    84e0:	0000e225 	.word	0x0000e225
    84e4:	0000837d 	.word	0x0000837d

000084e8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    84e8:	b580      	push	{r7, lr}
    84ea:	b082      	sub	sp, #8
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
    84f0:	000a      	movs	r2, r1
    84f2:	1cfb      	adds	r3, r7, #3
    84f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    84f6:	687b      	ldr	r3, [r7, #4]
    84f8:	7e5b      	ldrb	r3, [r3, #25]
    84fa:	b2db      	uxtb	r3, r3
    84fc:	b25a      	sxtb	r2, r3
    84fe:	1cfb      	adds	r3, r7, #3
    8500:	781b      	ldrb	r3, [r3, #0]
    8502:	2101      	movs	r1, #1
    8504:	4099      	lsls	r1, r3
    8506:	000b      	movs	r3, r1
    8508:	b25b      	sxtb	r3, r3
    850a:	4313      	orrs	r3, r2
    850c:	b25b      	sxtb	r3, r3
    850e:	b2da      	uxtb	r2, r3
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	765a      	strb	r2, [r3, #25]
}
    8514:	46c0      	nop			; (mov r8, r8)
    8516:	46bd      	mov	sp, r7
    8518:	b002      	add	sp, #8
    851a:	bd80      	pop	{r7, pc}

0000851c <flow_sensor_slm_callback>:
 *	\brief Callback to handle the measurements from the flow sensor
 *
 *	\param module Pointer to I2C master module
 */
 static void flow_sensor_slm_callback(struct i2c_master_module *const module)
 {
    851c:	b580      	push	{r7, lr}
    851e:	b082      	sub	sp, #8
    8520:	af00      	add	r7, sp, #0
    8522:	6078      	str	r0, [r7, #4]
	 // WARNING: ISR context
	 current_data.flow_thousand_slpm = (read_slm_buffer[0] * 16777216) + (read_slm_buffer[1] * 65536) + (read_slm_buffer[2] * 256) + read_slm_buffer[3];
    8524:	4b15      	ldr	r3, [pc, #84]	; (857c <flow_sensor_slm_callback+0x60>)
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	b2db      	uxtb	r3, r3
    852a:	021b      	lsls	r3, r3, #8
    852c:	4a13      	ldr	r2, [pc, #76]	; (857c <flow_sensor_slm_callback+0x60>)
    852e:	7852      	ldrb	r2, [r2, #1]
    8530:	b2d2      	uxtb	r2, r2
    8532:	189b      	adds	r3, r3, r2
    8534:	021b      	lsls	r3, r3, #8
    8536:	4a11      	ldr	r2, [pc, #68]	; (857c <flow_sensor_slm_callback+0x60>)
    8538:	7892      	ldrb	r2, [r2, #2]
    853a:	b2d2      	uxtb	r2, r2
    853c:	189b      	adds	r3, r3, r2
    853e:	021b      	lsls	r3, r3, #8
    8540:	4a0e      	ldr	r2, [pc, #56]	; (857c <flow_sensor_slm_callback+0x60>)
    8542:	78d2      	ldrb	r2, [r2, #3]
    8544:	b2d2      	uxtb	r2, r2
    8546:	189a      	adds	r2, r3, r2
    8548:	4b0d      	ldr	r3, [pc, #52]	; (8580 <flow_sensor_slm_callback+0x64>)
    854a:	601a      	str	r2, [r3, #0]
	 current_data.pressure_thousand_cmh20 = (read_slm_buffer[4] * 16777216) + (read_slm_buffer[5] * 65536) + (read_slm_buffer[6] * 256) + read_slm_buffer[7];
    854c:	4b0b      	ldr	r3, [pc, #44]	; (857c <flow_sensor_slm_callback+0x60>)
    854e:	791b      	ldrb	r3, [r3, #4]
    8550:	b2db      	uxtb	r3, r3
    8552:	021b      	lsls	r3, r3, #8
    8554:	4a09      	ldr	r2, [pc, #36]	; (857c <flow_sensor_slm_callback+0x60>)
    8556:	7952      	ldrb	r2, [r2, #5]
    8558:	b2d2      	uxtb	r2, r2
    855a:	189b      	adds	r3, r3, r2
    855c:	021b      	lsls	r3, r3, #8
    855e:	4a07      	ldr	r2, [pc, #28]	; (857c <flow_sensor_slm_callback+0x60>)
    8560:	7992      	ldrb	r2, [r2, #6]
    8562:	b2d2      	uxtb	r2, r2
    8564:	189b      	adds	r3, r3, r2
    8566:	021b      	lsls	r3, r3, #8
    8568:	4a04      	ldr	r2, [pc, #16]	; (857c <flow_sensor_slm_callback+0x60>)
    856a:	79d2      	ldrb	r2, [r2, #7]
    856c:	b2d2      	uxtb	r2, r2
    856e:	189a      	adds	r2, r3, r2
    8570:	4b03      	ldr	r3, [pc, #12]	; (8580 <flow_sensor_slm_callback+0x64>)
    8572:	605a      	str	r2, [r3, #4]
 }
    8574:	46c0      	nop			; (mov r8, r8)
    8576:	46bd      	mov	sp, r7
    8578:	b002      	add	sp, #8
    857a:	bd80      	pop	{r7, pc}
    857c:	200037cc 	.word	0x200037cc
    8580:	200037c4 	.word	0x200037c4

00008584 <fs6122_init>:

 void fs6122_init(void)
 {
    8584:	b580      	push	{r7, lr}
    8586:	b08e      	sub	sp, #56	; 0x38
    8588:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    858a:	1d3b      	adds	r3, r7, #4
    858c:	0018      	movs	r0, r3
    858e:	4b21      	ldr	r3, [pc, #132]	; (8614 <fs6122_init+0x90>)
    8590:	4798      	blx	r3
	config_i2c_master.generator_source = GCLK_GENERATOR_1;	// 8 MHz
    8592:	1d3b      	adds	r3, r7, #4
    8594:	2201      	movs	r2, #1
    8596:	731a      	strb	r2, [r3, #12]
	config_i2c_master.baud_rate = 80;
    8598:	1d3b      	adds	r3, r7, #4
    859a:	2250      	movs	r2, #80	; 0x50
    859c:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535;
    859e:	1d3b      	adds	r3, r7, #4
    85a0:	2201      	movs	r2, #1
    85a2:	4252      	negs	r2, r2
    85a4:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    85a6:	1d3b      	adds	r3, r7, #4
    85a8:	2216      	movs	r2, #22
    85aa:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    85ac:	1d3b      	adds	r3, r7, #4
    85ae:	2217      	movs	r2, #23
    85b0:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    85b2:	46c0      	nop			; (mov r8, r8)
    85b4:	1d3a      	adds	r2, r7, #4
    85b6:	4918      	ldr	r1, [pc, #96]	; (8618 <fs6122_init+0x94>)
    85b8:	4b18      	ldr	r3, [pc, #96]	; (861c <fs6122_init+0x98>)
    85ba:	0018      	movs	r0, r3
    85bc:	4b18      	ldr	r3, [pc, #96]	; (8620 <fs6122_init+0x9c>)
    85be:	4798      	blx	r3
    85c0:	1e03      	subs	r3, r0, #0
    85c2:	d1f7      	bne.n	85b4 <fs6122_init+0x30>
	i2c_master_enable(&i2c_master_instance);
    85c4:	4b15      	ldr	r3, [pc, #84]	; (861c <fs6122_init+0x98>)
    85c6:	0018      	movs	r0, r3
    85c8:	4b16      	ldr	r3, [pc, #88]	; (8624 <fs6122_init+0xa0>)
    85ca:	4798      	blx	r3

	// Set up I2C callback
	i2c_master_register_callback(&i2c_master_instance, flow_sensor_slm_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
    85cc:	4916      	ldr	r1, [pc, #88]	; (8628 <fs6122_init+0xa4>)
    85ce:	4b13      	ldr	r3, [pc, #76]	; (861c <fs6122_init+0x98>)
    85d0:	2201      	movs	r2, #1
    85d2:	0018      	movs	r0, r3
    85d4:	4b15      	ldr	r3, [pc, #84]	; (862c <fs6122_init+0xa8>)
    85d6:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    85d8:	4b10      	ldr	r3, [pc, #64]	; (861c <fs6122_init+0x98>)
    85da:	2101      	movs	r1, #1
    85dc:	0018      	movs	r0, r3
    85de:	4b14      	ldr	r3, [pc, #80]	; (8630 <fs6122_init+0xac>)
    85e0:	4798      	blx	r3

	// request read for next cycle
	static uint8_t flow_request_to_send = 0x84;
	// First have to request read, delay 2ms, and then read
	slm_write_packet.address = FS6122_I2C_ADDRESS;
    85e2:	4b14      	ldr	r3, [pc, #80]	; (8634 <fs6122_init+0xb0>)
    85e4:	2201      	movs	r2, #1
    85e6:	801a      	strh	r2, [r3, #0]
	slm_write_packet.data = &flow_request_to_send;
    85e8:	4b12      	ldr	r3, [pc, #72]	; (8634 <fs6122_init+0xb0>)
    85ea:	4a13      	ldr	r2, [pc, #76]	; (8638 <fs6122_init+0xb4>)
    85ec:	605a      	str	r2, [r3, #4]
	slm_write_packet.data_length = 1;
    85ee:	4b11      	ldr	r3, [pc, #68]	; (8634 <fs6122_init+0xb0>)
    85f0:	2201      	movs	r2, #1
    85f2:	805a      	strh	r2, [r3, #2]
	slm_write_packet.high_speed = false;
    85f4:	4b0f      	ldr	r3, [pc, #60]	; (8634 <fs6122_init+0xb0>)
    85f6:	2200      	movs	r2, #0
    85f8:	725a      	strb	r2, [r3, #9]
	slm_write_packet.ten_bit_address = false;
    85fa:	4b0e      	ldr	r3, [pc, #56]	; (8634 <fs6122_init+0xb0>)
    85fc:	2200      	movs	r2, #0
    85fe:	721a      	strb	r2, [r3, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &slm_write_packet);
    8600:	4a0c      	ldr	r2, [pc, #48]	; (8634 <fs6122_init+0xb0>)
    8602:	4b06      	ldr	r3, [pc, #24]	; (861c <fs6122_init+0x98>)
    8604:	0011      	movs	r1, r2
    8606:	0018      	movs	r0, r3
    8608:	4b0c      	ldr	r3, [pc, #48]	; (863c <fs6122_init+0xb8>)
    860a:	4798      	blx	r3
 }
    860c:	46c0      	nop			; (mov r8, r8)
    860e:	46bd      	mov	sp, r7
    8610:	b00e      	add	sp, #56	; 0x38
    8612:	bd80      	pop	{r7, pc}
    8614:	000083f1 	.word	0x000083f1
    8618:	42001400 	.word	0x42001400
    861c:	2000379c 	.word	0x2000379c
    8620:	00003289 	.word	0x00003289
    8624:	00008475 	.word	0x00008475
    8628:	0000851d 	.word	0x0000851d
    862c:	0000373d 	.word	0x0000373d
    8630:	000084e9 	.word	0x000084e9
    8634:	200037e0 	.word	0x200037e0
    8638:	200001c0 	.word	0x200001c0
    863c:	000039c1 	.word	0x000039c1

00008640 <reset_fs6122_read_pointer>:

 void reset_fs6122_read_pointer(void)
 {
    8640:	b580      	push	{r7, lr}
    8642:	af00      	add	r7, sp, #0
	// request read for next cycle
	static uint8_t flow_request_to_send = 0x84;
	// First have to request read, delay 2ms, and then read
	slm_write_packet.address = FS6122_I2C_ADDRESS;
    8644:	4b0b      	ldr	r3, [pc, #44]	; (8674 <reset_fs6122_read_pointer+0x34>)
    8646:	2201      	movs	r2, #1
    8648:	801a      	strh	r2, [r3, #0]
	slm_write_packet.data = &flow_request_to_send;
    864a:	4b0a      	ldr	r3, [pc, #40]	; (8674 <reset_fs6122_read_pointer+0x34>)
    864c:	4a0a      	ldr	r2, [pc, #40]	; (8678 <reset_fs6122_read_pointer+0x38>)
    864e:	605a      	str	r2, [r3, #4]
	slm_write_packet.data_length = 1;
    8650:	4b08      	ldr	r3, [pc, #32]	; (8674 <reset_fs6122_read_pointer+0x34>)
    8652:	2201      	movs	r2, #1
    8654:	805a      	strh	r2, [r3, #2]
	slm_write_packet.high_speed = false;
    8656:	4b07      	ldr	r3, [pc, #28]	; (8674 <reset_fs6122_read_pointer+0x34>)
    8658:	2200      	movs	r2, #0
    865a:	725a      	strb	r2, [r3, #9]
	slm_write_packet.ten_bit_address = false;
    865c:	4b05      	ldr	r3, [pc, #20]	; (8674 <reset_fs6122_read_pointer+0x34>)
    865e:	2200      	movs	r2, #0
    8660:	721a      	strb	r2, [r3, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &slm_write_packet);
    8662:	4a04      	ldr	r2, [pc, #16]	; (8674 <reset_fs6122_read_pointer+0x34>)
    8664:	4b05      	ldr	r3, [pc, #20]	; (867c <reset_fs6122_read_pointer+0x3c>)
    8666:	0011      	movs	r1, r2
    8668:	0018      	movs	r0, r3
    866a:	4b05      	ldr	r3, [pc, #20]	; (8680 <reset_fs6122_read_pointer+0x40>)
    866c:	4798      	blx	r3
 }
    866e:	46c0      	nop			; (mov r8, r8)
    8670:	46bd      	mov	sp, r7
    8672:	bd80      	pop	{r7, pc}
    8674:	200037e0 	.word	0x200037e0
    8678:	200001c1 	.word	0x200001c1
    867c:	2000379c 	.word	0x2000379c
    8680:	000039c1 	.word	0x000039c1

00008684 <request_fs6122_data>:
 
 void request_fs6122_data(void)
 {
    8684:	b580      	push	{r7, lr}
    8686:	af00      	add	r7, sp, #0
	slm_read_packet.address = FS6122_I2C_ADDRESS;
    8688:	4b0b      	ldr	r3, [pc, #44]	; (86b8 <request_fs6122_data+0x34>)
    868a:	2201      	movs	r2, #1
    868c:	801a      	strh	r2, [r3, #0]
	slm_read_packet.data = read_slm_buffer;
    868e:	4b0a      	ldr	r3, [pc, #40]	; (86b8 <request_fs6122_data+0x34>)
    8690:	4a0a      	ldr	r2, [pc, #40]	; (86bc <request_fs6122_data+0x38>)
    8692:	605a      	str	r2, [r3, #4]
	slm_read_packet.data_length = 8;
    8694:	4b08      	ldr	r3, [pc, #32]	; (86b8 <request_fs6122_data+0x34>)
    8696:	2208      	movs	r2, #8
    8698:	805a      	strh	r2, [r3, #2]
	slm_read_packet.high_speed = false;
    869a:	4b07      	ldr	r3, [pc, #28]	; (86b8 <request_fs6122_data+0x34>)
    869c:	2200      	movs	r2, #0
    869e:	725a      	strb	r2, [r3, #9]
	slm_read_packet.ten_bit_address = false;
    86a0:	4b05      	ldr	r3, [pc, #20]	; (86b8 <request_fs6122_data+0x34>)
    86a2:	2200      	movs	r2, #0
    86a4:	721a      	strb	r2, [r3, #8]
	i2c_master_read_packet_job(&i2c_master_instance, &slm_read_packet);
    86a6:	4a04      	ldr	r2, [pc, #16]	; (86b8 <request_fs6122_data+0x34>)
    86a8:	4b05      	ldr	r3, [pc, #20]	; (86c0 <request_fs6122_data+0x3c>)
    86aa:	0011      	movs	r1, r2
    86ac:	0018      	movs	r0, r3
    86ae:	4b05      	ldr	r3, [pc, #20]	; (86c4 <request_fs6122_data+0x40>)
    86b0:	4798      	blx	r3
 }
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	46bd      	mov	sp, r7
    86b6:	bd80      	pop	{r7, pc}
    86b8:	200037d4 	.word	0x200037d4
    86bc:	200037cc 	.word	0x200037cc
    86c0:	2000379c 	.word	0x2000379c
    86c4:	000038dd 	.word	0x000038dd

000086c8 <read_fs6122_data>:

 void read_fs6122_data(siargo_fs6122_data_t * data)
 {
    86c8:	b580      	push	{r7, lr}
    86ca:	b082      	sub	sp, #8
    86cc:	af00      	add	r7, sp, #0
    86ce:	6078      	str	r0, [r7, #4]
	*data = current_data;
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	4a03      	ldr	r2, [pc, #12]	; (86e0 <read_fs6122_data+0x18>)
    86d4:	ca03      	ldmia	r2!, {r0, r1}
    86d6:	c303      	stmia	r3!, {r0, r1}
    86d8:	46c0      	nop			; (mov r8, r8)
    86da:	46bd      	mov	sp, r7
    86dc:	b002      	add	sp, #8
    86de:	bd80      	pop	{r7, pc}
    86e0:	200037c4 	.word	0x200037c4

000086e4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    86e4:	b580      	push	{r7, lr}
    86e6:	b084      	sub	sp, #16
    86e8:	af00      	add	r7, sp, #0
    86ea:	0002      	movs	r2, r0
    86ec:	1dfb      	adds	r3, r7, #7
    86ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    86f0:	230f      	movs	r3, #15
    86f2:	18fb      	adds	r3, r7, r3
    86f4:	1dfa      	adds	r2, r7, #7
    86f6:	7812      	ldrb	r2, [r2, #0]
    86f8:	09d2      	lsrs	r2, r2, #7
    86fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    86fc:	230e      	movs	r3, #14
    86fe:	18fb      	adds	r3, r7, r3
    8700:	1dfa      	adds	r2, r7, #7
    8702:	7812      	ldrb	r2, [r2, #0]
    8704:	0952      	lsrs	r2, r2, #5
    8706:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8708:	4b0d      	ldr	r3, [pc, #52]	; (8740 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    870a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    870c:	230f      	movs	r3, #15
    870e:	18fb      	adds	r3, r7, r3
    8710:	781b      	ldrb	r3, [r3, #0]
    8712:	2b00      	cmp	r3, #0
    8714:	d10f      	bne.n	8736 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8716:	230f      	movs	r3, #15
    8718:	18fb      	adds	r3, r7, r3
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	009b      	lsls	r3, r3, #2
    871e:	2210      	movs	r2, #16
    8720:	4694      	mov	ip, r2
    8722:	44bc      	add	ip, r7
    8724:	4463      	add	r3, ip
    8726:	3b08      	subs	r3, #8
    8728:	681a      	ldr	r2, [r3, #0]
    872a:	230e      	movs	r3, #14
    872c:	18fb      	adds	r3, r7, r3
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	01db      	lsls	r3, r3, #7
    8732:	18d3      	adds	r3, r2, r3
    8734:	e000      	b.n	8738 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8736:	2300      	movs	r3, #0
	}
}
    8738:	0018      	movs	r0, r3
    873a:	46bd      	mov	sp, r7
    873c:	b004      	add	sp, #16
    873e:	bd80      	pop	{r7, pc}
    8740:	41004400 	.word	0x41004400

00008744 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8744:	b580      	push	{r7, lr}
    8746:	b082      	sub	sp, #8
    8748:	af00      	add	r7, sp, #0
    874a:	0002      	movs	r2, r0
    874c:	1dfb      	adds	r3, r7, #7
    874e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8750:	1dfb      	adds	r3, r7, #7
    8752:	781b      	ldrb	r3, [r3, #0]
    8754:	0018      	movs	r0, r3
    8756:	4b03      	ldr	r3, [pc, #12]	; (8764 <port_get_group_from_gpio_pin+0x20>)
    8758:	4798      	blx	r3
    875a:	0003      	movs	r3, r0
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b002      	add	sp, #8
    8762:	bd80      	pop	{r7, pc}
    8764:	000086e5 	.word	0x000086e5

00008768 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8768:	b580      	push	{r7, lr}
    876a:	b082      	sub	sp, #8
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	2200      	movs	r2, #0
    8774:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	2201      	movs	r2, #1
    877a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	2200      	movs	r2, #0
    8780:	709a      	strb	r2, [r3, #2]
}
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	46bd      	mov	sp, r7
    8786:	b002      	add	sp, #8
    8788:	bd80      	pop	{r7, pc}
	...

0000878c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	0002      	movs	r2, r0
    8794:	1dfb      	adds	r3, r7, #7
    8796:	701a      	strb	r2, [r3, #0]
    8798:	1dbb      	adds	r3, r7, #6
    879a:	1c0a      	adds	r2, r1, #0
    879c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    879e:	1dfb      	adds	r3, r7, #7
    87a0:	781b      	ldrb	r3, [r3, #0]
    87a2:	0018      	movs	r0, r3
    87a4:	4b0d      	ldr	r3, [pc, #52]	; (87dc <port_pin_set_output_level+0x50>)
    87a6:	4798      	blx	r3
    87a8:	0003      	movs	r3, r0
    87aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    87ac:	1dfb      	adds	r3, r7, #7
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	221f      	movs	r2, #31
    87b2:	4013      	ands	r3, r2
    87b4:	2201      	movs	r2, #1
    87b6:	409a      	lsls	r2, r3
    87b8:	0013      	movs	r3, r2
    87ba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    87bc:	1dbb      	adds	r3, r7, #6
    87be:	781b      	ldrb	r3, [r3, #0]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d003      	beq.n	87cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    87c4:	68fb      	ldr	r3, [r7, #12]
    87c6:	68ba      	ldr	r2, [r7, #8]
    87c8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    87ca:	e002      	b.n	87d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    87cc:	68fb      	ldr	r3, [r7, #12]
    87ce:	68ba      	ldr	r2, [r7, #8]
    87d0:	615a      	str	r2, [r3, #20]
}
    87d2:	46c0      	nop			; (mov r8, r8)
    87d4:	46bd      	mov	sp, r7
    87d6:	b004      	add	sp, #16
    87d8:	bd80      	pop	{r7, pc}
    87da:	46c0      	nop			; (mov r8, r8)
    87dc:	00008745 	.word	0x00008745

000087e0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    87e0:	b580      	push	{r7, lr}
    87e2:	b082      	sub	sp, #8
    87e4:	af00      	add	r7, sp, #0
    87e6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	220a      	movs	r2, #10
    87ec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    87ee:	687b      	ldr	r3, [r7, #4]
    87f0:	2200      	movs	r2, #0
    87f2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	2200      	movs	r2, #0
    87f8:	709a      	strb	r2, [r3, #2]
}
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	46bd      	mov	sp, r7
    87fe:	b002      	add	sp, #8
    8800:	bd80      	pop	{r7, pc}
	...

00008804 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    8804:	b580      	push	{r7, lr}
    8806:	b084      	sub	sp, #16
    8808:	af00      	add	r7, sp, #0
    880a:	6078      	str	r0, [r7, #4]
    880c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    880e:	683b      	ldr	r3, [r7, #0]
    8810:	781a      	ldrb	r2, [r3, #0]
    8812:	687b      	ldr	r3, [r7, #4]
    8814:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    8816:	683b      	ldr	r3, [r7, #0]
    8818:	785a      	ldrb	r2, [r3, #1]
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	789a      	ldrb	r2, [r3, #2]
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    8826:	230c      	movs	r3, #12
    8828:	18fb      	adds	r3, r7, r3
    882a:	0018      	movs	r0, r3
    882c:	4b0b      	ldr	r3, [pc, #44]	; (885c <spi_attach_slave+0x58>)
    882e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8830:	230c      	movs	r3, #12
    8832:	18fb      	adds	r3, r7, r3
    8834:	2201      	movs	r2, #1
    8836:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	781b      	ldrb	r3, [r3, #0]
    883c:	220c      	movs	r2, #12
    883e:	18ba      	adds	r2, r7, r2
    8840:	0011      	movs	r1, r2
    8842:	0018      	movs	r0, r3
    8844:	4b06      	ldr	r3, [pc, #24]	; (8860 <spi_attach_slave+0x5c>)
    8846:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8848:	687b      	ldr	r3, [r7, #4]
    884a:	781b      	ldrb	r3, [r3, #0]
    884c:	2101      	movs	r1, #1
    884e:	0018      	movs	r0, r3
    8850:	4b04      	ldr	r3, [pc, #16]	; (8864 <spi_attach_slave+0x60>)
    8852:	4798      	blx	r3
}
    8854:	46c0      	nop			; (mov r8, r8)
    8856:	46bd      	mov	sp, r7
    8858:	b004      	add	sp, #16
    885a:	bd80      	pop	{r7, pc}
    885c:	00008769 	.word	0x00008769
    8860:	0000e32d 	.word	0x0000e32d
    8864:	0000878d 	.word	0x0000878d

00008868 <parameter_load_cb>:
 #define PARAMETER_STORAGE_WRITE_SIZE				(3+18+1)	// 3 byte header, 18 bytes of data + 1 byte crc8

 static struct spi_slave_inst fram_slave;

 static void parameter_load_cb(uint8_t * buff, uint32_t length)
 {
    8868:	b590      	push	{r4, r7, lr}
    886a:	b089      	sub	sp, #36	; 0x24
    886c:	af00      	add	r7, sp, #0
    886e:	6078      	str	r0, [r7, #4]
    8870:	6039      	str	r1, [r7, #0]
	if(length == PARAMETER_STORAGE_READ_SIZE)
    8872:	683b      	ldr	r3, [r7, #0]
    8874:	2b16      	cmp	r3, #22
    8876:	d15a      	bne.n	892e <parameter_load_cb+0xc6>
	{
		uint8_t crc_read = *(buff + PARAMETER_STORAGE_READ_SIZE-1);
    8878:	231f      	movs	r3, #31
    887a:	18fb      	adds	r3, r7, r3
    887c:	687a      	ldr	r2, [r7, #4]
    887e:	7d52      	ldrb	r2, [r2, #21]
    8880:	701a      	strb	r2, [r3, #0]
		uint8_t crc_calc = crc_8((buff+3), PARAMETER_STORAGE_READ_SIZE-4); // Ignore header
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	3303      	adds	r3, #3
    8886:	221e      	movs	r2, #30
    8888:	18bc      	adds	r4, r7, r2
    888a:	2112      	movs	r1, #18
    888c:	0018      	movs	r0, r3
    888e:	4b2a      	ldr	r3, [pc, #168]	; (8938 <parameter_load_cb+0xd0>)
    8890:	4798      	blx	r3
    8892:	0003      	movs	r3, r0
    8894:	7023      	strb	r3, [r4, #0]
		if(crc_calc == crc_read)
    8896:	231e      	movs	r3, #30
    8898:	18fa      	adds	r2, r7, r3
    889a:	231f      	movs	r3, #31
    889c:	18fb      	adds	r3, r7, r3
    889e:	7812      	ldrb	r2, [r2, #0]
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	429a      	cmp	r2, r3
    88a4:	d143      	bne.n	892e <parameter_load_cb+0xc6>
		{
			// Unpack
			lcv_parameters_t params;
			params.enable = *(buff+3);
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	3303      	adds	r3, #3
    88aa:	781b      	ldrb	r3, [r3, #0]
    88ac:	1c1a      	adds	r2, r3, #0
    88ae:	2301      	movs	r3, #1
    88b0:	4013      	ands	r3, r2
    88b2:	b2da      	uxtb	r2, r3
    88b4:	2308      	movs	r3, #8
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	2101      	movs	r1, #1
    88ba:	400a      	ands	r2, r1
    88bc:	0010      	movs	r0, r2
    88be:	781a      	ldrb	r2, [r3, #0]
    88c0:	2101      	movs	r1, #1
    88c2:	438a      	bics	r2, r1
    88c4:	1c11      	adds	r1, r2, #0
    88c6:	1c02      	adds	r2, r0, #0
    88c8:	430a      	orrs	r2, r1
    88ca:	701a      	strb	r2, [r3, #0]
			params.ie_ratio_tenths = *(buff+4);
    88cc:	687b      	ldr	r3, [r7, #4]
    88ce:	791a      	ldrb	r2, [r3, #4]
    88d0:	2308      	movs	r3, #8
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	705a      	strb	r2, [r3, #1]
			memcpy(&params.tidal_volume_ml, (buff+5), 4);
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	1d59      	adds	r1, r3, #5
    88da:	2308      	movs	r3, #8
    88dc:	18fb      	adds	r3, r7, r3
    88de:	3304      	adds	r3, #4
    88e0:	2204      	movs	r2, #4
    88e2:	0018      	movs	r0, r3
    88e4:	4b15      	ldr	r3, [pc, #84]	; (893c <parameter_load_cb+0xd4>)
    88e6:	4798      	blx	r3
			memcpy(&params.peep_cm_h20, (buff+9), 4);
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	3309      	adds	r3, #9
    88ec:	0019      	movs	r1, r3
    88ee:	2308      	movs	r3, #8
    88f0:	18fb      	adds	r3, r7, r3
    88f2:	3308      	adds	r3, #8
    88f4:	2204      	movs	r2, #4
    88f6:	0018      	movs	r0, r3
    88f8:	4b10      	ldr	r3, [pc, #64]	; (893c <parameter_load_cb+0xd4>)
    88fa:	4798      	blx	r3
			memcpy(&params.pip_cm_h20, (buff+13), 4);
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	330d      	adds	r3, #13
    8900:	0019      	movs	r1, r3
    8902:	2308      	movs	r3, #8
    8904:	18fb      	adds	r3, r7, r3
    8906:	330c      	adds	r3, #12
    8908:	2204      	movs	r2, #4
    890a:	0018      	movs	r0, r3
    890c:	4b0b      	ldr	r3, [pc, #44]	; (893c <parameter_load_cb+0xd4>)
    890e:	4798      	blx	r3
			memcpy(&params.breath_per_min, (buff+17), 4);
    8910:	687b      	ldr	r3, [r7, #4]
    8912:	3311      	adds	r3, #17
    8914:	0019      	movs	r1, r3
    8916:	2308      	movs	r3, #8
    8918:	18fb      	adds	r3, r7, r3
    891a:	3310      	adds	r3, #16
    891c:	2204      	movs	r2, #4
    891e:	0018      	movs	r0, r3
    8920:	4b06      	ldr	r3, [pc, #24]	; (893c <parameter_load_cb+0xd4>)
    8922:	4798      	blx	r3

			update_settings(&params);
    8924:	2308      	movs	r3, #8
    8926:	18fb      	adds	r3, r7, r3
    8928:	0018      	movs	r0, r3
    892a:	4b05      	ldr	r3, [pc, #20]	; (8940 <parameter_load_cb+0xd8>)
    892c:	4798      	blx	r3
		}
	}
 }
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	46bd      	mov	sp, r7
    8932:	b009      	add	sp, #36	; 0x24
    8934:	bd90      	pop	{r4, r7, pc}
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	0000831d 	.word	0x0000831d
    893c:	00012ed1 	.word	0x00012ed1
    8940:	00009d1d 	.word	0x00009d1d

00008944 <dummy_spi_cb>:

 static void dummy_spi_cb(uint8_t * buff, uint32_t length)
 {
    8944:	b580      	push	{r7, lr}
    8946:	b082      	sub	sp, #8
    8948:	af00      	add	r7, sp, #0
    894a:	6078      	str	r0, [r7, #4]
    894c:	6039      	str	r1, [r7, #0]
	// Do nothing
 }
    894e:	46c0      	nop			; (mov r8, r8)
    8950:	46bd      	mov	sp, r7
    8952:	b002      	add	sp, #8
    8954:	bd80      	pop	{r7, pc}
	...

00008958 <write_enable>:

 static void write_enable(void)
 {
    8958:	b5f0      	push	{r4, r5, r6, r7, lr}
    895a:	b087      	sub	sp, #28
    895c:	af00      	add	r7, sp, #0
	spi_transaction_t transaction;
	uint8_t wren = FRAM_WREN;
    895e:	1dfb      	adds	r3, r7, #7
    8960:	2206      	movs	r2, #6
    8962:	701a      	strb	r2, [r3, #0]
	transaction.tx_buff = &wren;
    8964:	2308      	movs	r3, #8
    8966:	18fb      	adds	r3, r7, r3
    8968:	1dfa      	adds	r2, r7, #7
    896a:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = 1;
    896c:	2308      	movs	r3, #8
    896e:	18fb      	adds	r3, r7, r3
    8970:	2201      	movs	r2, #1
    8972:	609a      	str	r2, [r3, #8]
	transaction.cb = dummy_spi_cb;
    8974:	2308      	movs	r3, #8
    8976:	18fb      	adds	r3, r7, r3
    8978:	4a1a      	ldr	r2, [pc, #104]	; (89e4 <write_enable+0x8c>)
    897a:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    897c:	2308      	movs	r3, #8
    897e:	18fb      	adds	r3, r7, r3
    8980:	4a19      	ldr	r2, [pc, #100]	; (89e8 <write_enable+0x90>)
    8982:	8811      	ldrh	r1, [r2, #0]
    8984:	8019      	strh	r1, [r3, #0]
    8986:	7892      	ldrb	r2, [r2, #2]
    8988:	709a      	strb	r2, [r3, #2]

	spi_transact(transaction);
    898a:	2308      	movs	r3, #8
    898c:	18fb      	adds	r3, r7, r3
    898e:	6818      	ldr	r0, [r3, #0]
    8990:	6859      	ldr	r1, [r3, #4]
    8992:	689a      	ldr	r2, [r3, #8]
    8994:	68db      	ldr	r3, [r3, #12]
    8996:	4c15      	ldr	r4, [pc, #84]	; (89ec <write_enable+0x94>)
    8998:	47a0      	blx	r4
	delay_us(50); // wait TODO set up queueing
    899a:	2000      	movs	r0, #0
    899c:	4b14      	ldr	r3, [pc, #80]	; (89f0 <write_enable+0x98>)
    899e:	4798      	blx	r3
    89a0:	0003      	movs	r3, r0
    89a2:	001d      	movs	r5, r3
    89a4:	2300      	movs	r3, #0
    89a6:	001e      	movs	r6, r3
    89a8:	4c12      	ldr	r4, [pc, #72]	; (89f4 <write_enable+0x9c>)
    89aa:	2232      	movs	r2, #50	; 0x32
    89ac:	2300      	movs	r3, #0
    89ae:	0028      	movs	r0, r5
    89b0:	0031      	movs	r1, r6
    89b2:	47a0      	blx	r4
    89b4:	0003      	movs	r3, r0
    89b6:	000c      	movs	r4, r1
    89b8:	0019      	movs	r1, r3
    89ba:	0022      	movs	r2, r4
    89bc:	4b0e      	ldr	r3, [pc, #56]	; (89f8 <write_enable+0xa0>)
    89be:	2400      	movs	r4, #0
    89c0:	18c9      	adds	r1, r1, r3
    89c2:	4162      	adcs	r2, r4
    89c4:	0008      	movs	r0, r1
    89c6:	0011      	movs	r1, r2
    89c8:	4c0c      	ldr	r4, [pc, #48]	; (89fc <write_enable+0xa4>)
    89ca:	4a0d      	ldr	r2, [pc, #52]	; (8a00 <write_enable+0xa8>)
    89cc:	2300      	movs	r3, #0
    89ce:	47a0      	blx	r4
    89d0:	0003      	movs	r3, r0
    89d2:	000c      	movs	r4, r1
    89d4:	0018      	movs	r0, r3
    89d6:	4b0b      	ldr	r3, [pc, #44]	; (8a04 <write_enable+0xac>)
    89d8:	4798      	blx	r3
 }
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	46bd      	mov	sp, r7
    89de:	b007      	add	sp, #28
    89e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89e2:	46c0      	nop			; (mov r8, r8)
    89e4:	00008945 	.word	0x00008945
    89e8:	200037ec 	.word	0x200037ec
    89ec:	00009789 	.word	0x00009789
    89f0:	0000f525 	.word	0x0000f525
    89f4:	00010191 	.word	0x00010191
    89f8:	006acfbf 	.word	0x006acfbf
    89fc:	00010151 	.word	0x00010151
    8a00:	006acfc0 	.word	0x006acfc0
    8a04:	20000001 	.word	0x20000001

00008a08 <fram_init>:

 void fram_init(void)
 {
    8a08:	b580      	push	{r7, lr}
    8a0a:	b082      	sub	sp, #8
    8a0c:	af00      	add	r7, sp, #0
	spi_interface_init();
    8a0e:	4b09      	ldr	r3, [pc, #36]	; (8a34 <fram_init+0x2c>)
    8a10:	4798      	blx	r3

	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    8a12:	1d3b      	adds	r3, r7, #4
    8a14:	0018      	movs	r0, r3
    8a16:	4b08      	ldr	r3, [pc, #32]	; (8a38 <fram_init+0x30>)
    8a18:	4798      	blx	r3
	slave_dev_config.ss_pin = FRAM_CS_GPIO;
    8a1a:	1d3b      	adds	r3, r7, #4
    8a1c:	220b      	movs	r2, #11
    8a1e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&fram_slave, &slave_dev_config);
    8a20:	1d3a      	adds	r2, r7, #4
    8a22:	4b06      	ldr	r3, [pc, #24]	; (8a3c <fram_init+0x34>)
    8a24:	0011      	movs	r1, r2
    8a26:	0018      	movs	r0, r3
    8a28:	4b05      	ldr	r3, [pc, #20]	; (8a40 <fram_init+0x38>)
    8a2a:	4798      	blx	r3
 }
    8a2c:	46c0      	nop			; (mov r8, r8)
    8a2e:	46bd      	mov	sp, r7
    8a30:	b002      	add	sp, #8
    8a32:	bd80      	pop	{r7, pc}
    8a34:	000096ed 	.word	0x000096ed
    8a38:	000087e1 	.word	0x000087e1
    8a3c:	200037ec 	.word	0x200037ec
    8a40:	00008805 	.word	0x00008805

00008a44 <fram_load_parameters_asynch>:

 bool fram_load_parameters_asynch(void)
 {
    8a44:	b590      	push	{r4, r7, lr}
    8a46:	b08b      	sub	sp, #44	; 0x2c
    8a48:	af00      	add	r7, sp, #0
	uint8_t tx_buff[PARAMETER_STORAGE_READ_SIZE];
	spi_transaction_t transaction;

	// Data
	uint16_t address = (PARAMETER_STORAGE_ADDRESS) & ADDRESS_MASK;
    8a4a:	2326      	movs	r3, #38	; 0x26
    8a4c:	18fb      	adds	r3, r7, r3
    8a4e:	2200      	movs	r2, #0
    8a50:	801a      	strh	r2, [r3, #0]
	tx_buff[0] = FRAM_READ;
    8a52:	2310      	movs	r3, #16
    8a54:	18fb      	adds	r3, r7, r3
    8a56:	2203      	movs	r2, #3
    8a58:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = (address & 0xFF00) >> 8;  // address is MSB first
    8a5a:	2326      	movs	r3, #38	; 0x26
    8a5c:	18fb      	adds	r3, r7, r3
    8a5e:	881b      	ldrh	r3, [r3, #0]
    8a60:	0a1b      	lsrs	r3, r3, #8
    8a62:	b29b      	uxth	r3, r3
    8a64:	b2da      	uxtb	r2, r3
    8a66:	2310      	movs	r3, #16
    8a68:	18fb      	adds	r3, r7, r3
    8a6a:	705a      	strb	r2, [r3, #1]
	tx_buff[2] = (address & 0x00FF);
    8a6c:	2326      	movs	r3, #38	; 0x26
    8a6e:	18fb      	adds	r3, r7, r3
    8a70:	881b      	ldrh	r3, [r3, #0]
    8a72:	b2da      	uxtb	r2, r3
    8a74:	2310      	movs	r3, #16
    8a76:	18fb      	adds	r3, r7, r3
    8a78:	709a      	strb	r2, [r3, #2]

	transaction.tx_buff = tx_buff;
    8a7a:	003b      	movs	r3, r7
    8a7c:	2210      	movs	r2, #16
    8a7e:	18ba      	adds	r2, r7, r2
    8a80:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = PARAMETER_STORAGE_READ_SIZE;
    8a82:	003b      	movs	r3, r7
    8a84:	2216      	movs	r2, #22
    8a86:	609a      	str	r2, [r3, #8]
	transaction.cb = parameter_load_cb;
    8a88:	003b      	movs	r3, r7
    8a8a:	4a0a      	ldr	r2, [pc, #40]	; (8ab4 <fram_load_parameters_asynch+0x70>)
    8a8c:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    8a8e:	003b      	movs	r3, r7
    8a90:	4a09      	ldr	r2, [pc, #36]	; (8ab8 <fram_load_parameters_asynch+0x74>)
    8a92:	8811      	ldrh	r1, [r2, #0]
    8a94:	8019      	strh	r1, [r3, #0]
    8a96:	7892      	ldrb	r2, [r2, #2]
    8a98:	709a      	strb	r2, [r3, #2]

	return spi_transact(transaction);
    8a9a:	003b      	movs	r3, r7
    8a9c:	6818      	ldr	r0, [r3, #0]
    8a9e:	6859      	ldr	r1, [r3, #4]
    8aa0:	689a      	ldr	r2, [r3, #8]
    8aa2:	68db      	ldr	r3, [r3, #12]
    8aa4:	4c05      	ldr	r4, [pc, #20]	; (8abc <fram_load_parameters_asynch+0x78>)
    8aa6:	47a0      	blx	r4
    8aa8:	0003      	movs	r3, r0
 }
    8aaa:	0018      	movs	r0, r3
    8aac:	46bd      	mov	sp, r7
    8aae:	b00b      	add	sp, #44	; 0x2c
    8ab0:	bd90      	pop	{r4, r7, pc}
    8ab2:	46c0      	nop			; (mov r8, r8)
    8ab4:	00008869 	.word	0x00008869
    8ab8:	200037ec 	.word	0x200037ec
    8abc:	00009789 	.word	0x00009789

00008ac0 <fram_save_parameters_asynch>:

 bool fram_save_parameters_asynch(lcv_parameters_t * param)
 {
    8ac0:	b590      	push	{r4, r7, lr}
    8ac2:	b08d      	sub	sp, #52	; 0x34
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[PARAMETER_STORAGE_WRITE_SIZE];
	spi_transaction_t transaction;

	write_enable();
    8ac8:	4b3d      	ldr	r3, [pc, #244]	; (8bc0 <fram_save_parameters_asynch+0x100>)
    8aca:	4798      	blx	r3

	// Data
	uint16_t address = (PARAMETER_STORAGE_ADDRESS) & ADDRESS_MASK;
    8acc:	232e      	movs	r3, #46	; 0x2e
    8ace:	18fb      	adds	r3, r7, r3
    8ad0:	2200      	movs	r2, #0
    8ad2:	801a      	strh	r2, [r3, #0]
	tx_buff[0] = FRAM_WRITE;
    8ad4:	2318      	movs	r3, #24
    8ad6:	18fb      	adds	r3, r7, r3
    8ad8:	2202      	movs	r2, #2
    8ada:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = (address & 0xFF00) >> 8; // address is MSB first
    8adc:	232e      	movs	r3, #46	; 0x2e
    8ade:	18fb      	adds	r3, r7, r3
    8ae0:	881b      	ldrh	r3, [r3, #0]
    8ae2:	0a1b      	lsrs	r3, r3, #8
    8ae4:	b29b      	uxth	r3, r3
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	2318      	movs	r3, #24
    8aea:	18fb      	adds	r3, r7, r3
    8aec:	705a      	strb	r2, [r3, #1]
	tx_buff[2] = (address & 0x00FF);
    8aee:	232e      	movs	r3, #46	; 0x2e
    8af0:	18fb      	adds	r3, r7, r3
    8af2:	881b      	ldrh	r3, [r3, #0]
    8af4:	b2da      	uxtb	r2, r3
    8af6:	2318      	movs	r3, #24
    8af8:	18fb      	adds	r3, r7, r3
    8afa:	709a      	strb	r2, [r3, #2]

	tx_buff[3] = param->enable;
    8afc:	687b      	ldr	r3, [r7, #4]
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	07db      	lsls	r3, r3, #31
    8b02:	0fdb      	lsrs	r3, r3, #31
    8b04:	b2db      	uxtb	r3, r3
    8b06:	001a      	movs	r2, r3
    8b08:	2318      	movs	r3, #24
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	70da      	strb	r2, [r3, #3]
	tx_buff[4] = param->ie_ratio_tenths;
    8b0e:	687b      	ldr	r3, [r7, #4]
    8b10:	785a      	ldrb	r2, [r3, #1]
    8b12:	2318      	movs	r3, #24
    8b14:	18fb      	adds	r3, r7, r3
    8b16:	711a      	strb	r2, [r3, #4]
	memcpy(&tx_buff[5], &param->tidal_volume_ml, 4);
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	1d19      	adds	r1, r3, #4
    8b1c:	2318      	movs	r3, #24
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	3305      	adds	r3, #5
    8b22:	2204      	movs	r2, #4
    8b24:	0018      	movs	r0, r3
    8b26:	4b27      	ldr	r3, [pc, #156]	; (8bc4 <fram_save_parameters_asynch+0x104>)
    8b28:	4798      	blx	r3
	memcpy(&tx_buff[9], &param->peep_cm_h20, 4);
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	3308      	adds	r3, #8
    8b2e:	0019      	movs	r1, r3
    8b30:	2318      	movs	r3, #24
    8b32:	18fb      	adds	r3, r7, r3
    8b34:	3309      	adds	r3, #9
    8b36:	2204      	movs	r2, #4
    8b38:	0018      	movs	r0, r3
    8b3a:	4b22      	ldr	r3, [pc, #136]	; (8bc4 <fram_save_parameters_asynch+0x104>)
    8b3c:	4798      	blx	r3
	memcpy(&tx_buff[13], &param->pip_cm_h20, 4);
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	330c      	adds	r3, #12
    8b42:	0019      	movs	r1, r3
    8b44:	2318      	movs	r3, #24
    8b46:	18fb      	adds	r3, r7, r3
    8b48:	330d      	adds	r3, #13
    8b4a:	2204      	movs	r2, #4
    8b4c:	0018      	movs	r0, r3
    8b4e:	4b1d      	ldr	r3, [pc, #116]	; (8bc4 <fram_save_parameters_asynch+0x104>)
    8b50:	4798      	blx	r3
	memcpy(&tx_buff[17], &param->breath_per_min, 4);
    8b52:	687b      	ldr	r3, [r7, #4]
    8b54:	3310      	adds	r3, #16
    8b56:	0019      	movs	r1, r3
    8b58:	2318      	movs	r3, #24
    8b5a:	18fb      	adds	r3, r7, r3
    8b5c:	3311      	adds	r3, #17
    8b5e:	2204      	movs	r2, #4
    8b60:	0018      	movs	r0, r3
    8b62:	4b18      	ldr	r3, [pc, #96]	; (8bc4 <fram_save_parameters_asynch+0x104>)
    8b64:	4798      	blx	r3
	// Calculate CRC8
	tx_buff[21] = crc_8(&tx_buff[3], PARAMETER_STORAGE_WRITE_SIZE-4); // Ignore header
    8b66:	2318      	movs	r3, #24
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	3303      	adds	r3, #3
    8b6c:	2112      	movs	r1, #18
    8b6e:	0018      	movs	r0, r3
    8b70:	4b15      	ldr	r3, [pc, #84]	; (8bc8 <fram_save_parameters_asynch+0x108>)
    8b72:	4798      	blx	r3
    8b74:	0003      	movs	r3, r0
    8b76:	001a      	movs	r2, r3
    8b78:	2318      	movs	r3, #24
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	755a      	strb	r2, [r3, #21]

	transaction.tx_buff = tx_buff;
    8b7e:	2308      	movs	r3, #8
    8b80:	18fb      	adds	r3, r7, r3
    8b82:	2218      	movs	r2, #24
    8b84:	18ba      	adds	r2, r7, r2
    8b86:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = PARAMETER_STORAGE_WRITE_SIZE;
    8b88:	2308      	movs	r3, #8
    8b8a:	18fb      	adds	r3, r7, r3
    8b8c:	2216      	movs	r2, #22
    8b8e:	609a      	str	r2, [r3, #8]
	transaction.cb = dummy_spi_cb;
    8b90:	2308      	movs	r3, #8
    8b92:	18fb      	adds	r3, r7, r3
    8b94:	4a0d      	ldr	r2, [pc, #52]	; (8bcc <fram_save_parameters_asynch+0x10c>)
    8b96:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    8b98:	2308      	movs	r3, #8
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	4a0c      	ldr	r2, [pc, #48]	; (8bd0 <fram_save_parameters_asynch+0x110>)
    8b9e:	8811      	ldrh	r1, [r2, #0]
    8ba0:	8019      	strh	r1, [r3, #0]
    8ba2:	7892      	ldrb	r2, [r2, #2]
    8ba4:	709a      	strb	r2, [r3, #2]

	return spi_transact(transaction);
    8ba6:	2308      	movs	r3, #8
    8ba8:	18fb      	adds	r3, r7, r3
    8baa:	6818      	ldr	r0, [r3, #0]
    8bac:	6859      	ldr	r1, [r3, #4]
    8bae:	689a      	ldr	r2, [r3, #8]
    8bb0:	68db      	ldr	r3, [r3, #12]
    8bb2:	4c08      	ldr	r4, [pc, #32]	; (8bd4 <fram_save_parameters_asynch+0x114>)
    8bb4:	47a0      	blx	r4
    8bb6:	0003      	movs	r3, r0
 }
    8bb8:	0018      	movs	r0, r3
    8bba:	46bd      	mov	sp, r7
    8bbc:	b00d      	add	sp, #52	; 0x34
    8bbe:	bd90      	pop	{r4, r7, pc}
    8bc0:	00008959 	.word	0x00008959
    8bc4:	00012ed1 	.word	0x00012ed1
    8bc8:	0000831d 	.word	0x0000831d
    8bcc:	00008945 	.word	0x00008945
    8bd0:	200037ec 	.word	0x200037ec
    8bd4:	00009789 	.word	0x00009789

00008bd8 <lcd_init>:
 static char main_screen_buffer[SCREEN_BUFFER_SIZE] = {0};

 static char * intro_screen = "Low Cost Ventilator";

 bool lcd_init(void)
 {
    8bd8:	b590      	push	{r4, r7, lr}
    8bda:	b085      	sub	sp, #20
    8bdc:	af00      	add	r7, sp, #0
	// Turn on screen
	static uint8_t on_screen_buffer[2] = {LCD_PREFIX, LCD_COMMAND_DISPLAY_ON};
	power_on_packet.address = LCD_I2C_ADDRESS;
    8bde:	4b1a      	ldr	r3, [pc, #104]	; (8c48 <lcd_init+0x70>)
    8be0:	2228      	movs	r2, #40	; 0x28
    8be2:	801a      	strh	r2, [r3, #0]
	power_on_packet.data = on_screen_buffer;
    8be4:	4b18      	ldr	r3, [pc, #96]	; (8c48 <lcd_init+0x70>)
    8be6:	4a19      	ldr	r2, [pc, #100]	; (8c4c <lcd_init+0x74>)
    8be8:	605a      	str	r2, [r3, #4]
	power_on_packet.data_length = 2;
    8bea:	4b17      	ldr	r3, [pc, #92]	; (8c48 <lcd_init+0x70>)
    8bec:	2202      	movs	r2, #2
    8bee:	805a      	strh	r2, [r3, #2]
	power_on_packet.high_speed = false;
    8bf0:	4b15      	ldr	r3, [pc, #84]	; (8c48 <lcd_init+0x70>)
    8bf2:	2200      	movs	r2, #0
    8bf4:	725a      	strb	r2, [r3, #9]
	power_on_packet.ten_bit_address = false;
    8bf6:	4b14      	ldr	r3, [pc, #80]	; (8c48 <lcd_init+0x70>)
    8bf8:	2200      	movs	r2, #0
    8bfa:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = power_on_packet;
    8bfc:	1d3b      	adds	r3, r7, #4
    8bfe:	4a12      	ldr	r2, [pc, #72]	; (8c48 <lcd_init+0x70>)
    8c00:	ca13      	ldmia	r2!, {r0, r1, r4}
    8c02:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8c04:	1d3b      	adds	r3, r7, #4
    8c06:	6818      	ldr	r0, [r3, #0]
    8c08:	6859      	ldr	r1, [r3, #4]
    8c0a:	689a      	ldr	r2, [r3, #8]
    8c0c:	4b10      	ldr	r3, [pc, #64]	; (8c50 <lcd_init+0x78>)
    8c0e:	4798      	blx	r3
	
	set_backlight(8);
    8c10:	2008      	movs	r0, #8
    8c12:	4b10      	ldr	r3, [pc, #64]	; (8c54 <lcd_init+0x7c>)
    8c14:	4798      	blx	r3

	set_contrast(40);
    8c16:	2028      	movs	r0, #40	; 0x28
    8c18:	4b0f      	ldr	r3, [pc, #60]	; (8c58 <lcd_init+0x80>)
    8c1a:	4798      	blx	r3

	// Set up initial screen
	memcpy(main_screen_buffer, intro_screen, strlen(intro_screen));
    8c1c:	4b0f      	ldr	r3, [pc, #60]	; (8c5c <lcd_init+0x84>)
    8c1e:	681c      	ldr	r4, [r3, #0]
    8c20:	4b0e      	ldr	r3, [pc, #56]	; (8c5c <lcd_init+0x84>)
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	0018      	movs	r0, r3
    8c26:	4b0e      	ldr	r3, [pc, #56]	; (8c60 <lcd_init+0x88>)
    8c28:	4798      	blx	r3
    8c2a:	0002      	movs	r2, r0
    8c2c:	4b0d      	ldr	r3, [pc, #52]	; (8c64 <lcd_init+0x8c>)
    8c2e:	0021      	movs	r1, r4
    8c30:	0018      	movs	r0, r3
    8c32:	4b0d      	ldr	r3, [pc, #52]	; (8c68 <lcd_init+0x90>)
    8c34:	4798      	blx	r3
	send_buffer(MAIN_SCREEN);
    8c36:	2000      	movs	r0, #0
    8c38:	4b0c      	ldr	r3, [pc, #48]	; (8c6c <lcd_init+0x94>)
    8c3a:	4798      	blx	r3
	return true;
    8c3c:	2301      	movs	r3, #1
 }
    8c3e:	0018      	movs	r0, r3
    8c40:	46bd      	mov	sp, r7
    8c42:	b005      	add	sp, #20
    8c44:	bd90      	pop	{r4, r7, pc}
    8c46:	46c0      	nop			; (mov r8, r8)
    8c48:	20003814 	.word	0x20003814
    8c4c:	200001c8 	.word	0x200001c8
    8c50:	0000a6d1 	.word	0x0000a6d1
    8c54:	00008ea9 	.word	0x00008ea9
    8c58:	00008e29 	.word	0x00008e29
    8c5c:	200001c4 	.word	0x200001c4
    8c60:	00012f9d 	.word	0x00012f9d
    8c64:	20003888 	.word	0x20003888
    8c68:	00012ed1 	.word	0x00012ed1
    8c6c:	00008c71 	.word	0x00008c71

00008c70 <send_buffer>:
	}
	return false;
}

bool send_buffer(SCREEN_TYPE screen)
{
    8c70:	b590      	push	{r4, r7, lr}
    8c72:	b087      	sub	sp, #28
    8c74:	af00      	add	r7, sp, #0
    8c76:	0002      	movs	r2, r0
    8c78:	1dfb      	adds	r3, r7, #7
    8c7a:	701a      	strb	r2, [r3, #0]
    */
	// reorganize to this format
	static uint8_t lines_1_3_buffer[40];
	static uint8_t lines_2_4_buffer[40];

	if(screen == MAIN_SCREEN)
    8c7c:	1dfb      	adds	r3, r7, #7
    8c7e:	781b      	ldrb	r3, [r3, #0]
    8c80:	2b00      	cmp	r3, #0
    8c82:	d118      	bne.n	8cb6 <send_buffer+0x46>
	{
		memcpy(&lines_1_3_buffer[0], &main_screen_buffer[0], 20);
    8c84:	4956      	ldr	r1, [pc, #344]	; (8de0 <send_buffer+0x170>)
    8c86:	4b57      	ldr	r3, [pc, #348]	; (8de4 <send_buffer+0x174>)
    8c88:	2214      	movs	r2, #20
    8c8a:	0018      	movs	r0, r3
    8c8c:	4b56      	ldr	r3, [pc, #344]	; (8de8 <send_buffer+0x178>)
    8c8e:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &main_screen_buffer[40], 20);
    8c90:	4956      	ldr	r1, [pc, #344]	; (8dec <send_buffer+0x17c>)
    8c92:	4b57      	ldr	r3, [pc, #348]	; (8df0 <send_buffer+0x180>)
    8c94:	2214      	movs	r2, #20
    8c96:	0018      	movs	r0, r3
    8c98:	4b53      	ldr	r3, [pc, #332]	; (8de8 <send_buffer+0x178>)
    8c9a:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &main_screen_buffer[20], 20);
    8c9c:	4955      	ldr	r1, [pc, #340]	; (8df4 <send_buffer+0x184>)
    8c9e:	4b56      	ldr	r3, [pc, #344]	; (8df8 <send_buffer+0x188>)
    8ca0:	2214      	movs	r2, #20
    8ca2:	0018      	movs	r0, r3
    8ca4:	4b50      	ldr	r3, [pc, #320]	; (8de8 <send_buffer+0x178>)
    8ca6:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &main_screen_buffer[60], 20);
    8ca8:	4954      	ldr	r1, [pc, #336]	; (8dfc <send_buffer+0x18c>)
    8caa:	4b55      	ldr	r3, [pc, #340]	; (8e00 <send_buffer+0x190>)
    8cac:	2214      	movs	r2, #20
    8cae:	0018      	movs	r0, r3
    8cb0:	4b4d      	ldr	r3, [pc, #308]	; (8de8 <send_buffer+0x178>)
    8cb2:	4798      	blx	r3
    8cb4:	e01e      	b.n	8cf4 <send_buffer+0x84>
	}
	else if(screen == ALARM_SCREEN)
    8cb6:	1dfb      	adds	r3, r7, #7
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	2b01      	cmp	r3, #1
    8cbc:	d118      	bne.n	8cf0 <send_buffer+0x80>
	{
		memcpy(&lines_1_3_buffer[0], &alarm_screen_buffer[0], 20);
    8cbe:	4951      	ldr	r1, [pc, #324]	; (8e04 <send_buffer+0x194>)
    8cc0:	4b48      	ldr	r3, [pc, #288]	; (8de4 <send_buffer+0x174>)
    8cc2:	2214      	movs	r2, #20
    8cc4:	0018      	movs	r0, r3
    8cc6:	4b48      	ldr	r3, [pc, #288]	; (8de8 <send_buffer+0x178>)
    8cc8:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &alarm_screen_buffer[40], 20);
    8cca:	494f      	ldr	r1, [pc, #316]	; (8e08 <send_buffer+0x198>)
    8ccc:	4b48      	ldr	r3, [pc, #288]	; (8df0 <send_buffer+0x180>)
    8cce:	2214      	movs	r2, #20
    8cd0:	0018      	movs	r0, r3
    8cd2:	4b45      	ldr	r3, [pc, #276]	; (8de8 <send_buffer+0x178>)
    8cd4:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
    8cd6:	494d      	ldr	r1, [pc, #308]	; (8e0c <send_buffer+0x19c>)
    8cd8:	4b47      	ldr	r3, [pc, #284]	; (8df8 <send_buffer+0x188>)
    8cda:	2214      	movs	r2, #20
    8cdc:	0018      	movs	r0, r3
    8cde:	4b42      	ldr	r3, [pc, #264]	; (8de8 <send_buffer+0x178>)
    8ce0:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
    8ce2:	494b      	ldr	r1, [pc, #300]	; (8e10 <send_buffer+0x1a0>)
    8ce4:	4b46      	ldr	r3, [pc, #280]	; (8e00 <send_buffer+0x190>)
    8ce6:	2214      	movs	r2, #20
    8ce8:	0018      	movs	r0, r3
    8cea:	4b3f      	ldr	r3, [pc, #252]	; (8de8 <send_buffer+0x178>)
    8cec:	4798      	blx	r3
    8cee:	e001      	b.n	8cf4 <send_buffer+0x84>
	}
	else
	{
		return false;
    8cf0:	2300      	movs	r3, #0
    8cf2:	e070      	b.n	8dd6 <send_buffer+0x166>
	}

	// Clear any trailing 0s from string creation as those are special characters on the LCD
	for(int32_t i = 0; i < 40; i++)
    8cf4:	2300      	movs	r3, #0
    8cf6:	617b      	str	r3, [r7, #20]
    8cf8:	e018      	b.n	8d2c <send_buffer+0xbc>
	{
		if(lines_1_3_buffer[i] < 0x07)
    8cfa:	4a3a      	ldr	r2, [pc, #232]	; (8de4 <send_buffer+0x174>)
    8cfc:	697b      	ldr	r3, [r7, #20]
    8cfe:	18d3      	adds	r3, r2, r3
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	2b06      	cmp	r3, #6
    8d04:	d804      	bhi.n	8d10 <send_buffer+0xa0>
		{
			lines_1_3_buffer[i] = 0x20; // ASCII space
    8d06:	4a37      	ldr	r2, [pc, #220]	; (8de4 <send_buffer+0x174>)
    8d08:	697b      	ldr	r3, [r7, #20]
    8d0a:	18d3      	adds	r3, r2, r3
    8d0c:	2220      	movs	r2, #32
    8d0e:	701a      	strb	r2, [r3, #0]
		}
		if(lines_2_4_buffer[i] < 0x07)
    8d10:	4a39      	ldr	r2, [pc, #228]	; (8df8 <send_buffer+0x188>)
    8d12:	697b      	ldr	r3, [r7, #20]
    8d14:	18d3      	adds	r3, r2, r3
    8d16:	781b      	ldrb	r3, [r3, #0]
    8d18:	2b06      	cmp	r3, #6
    8d1a:	d804      	bhi.n	8d26 <send_buffer+0xb6>
		{
			lines_2_4_buffer[i] = 0x20; // ASCII space
    8d1c:	4a36      	ldr	r2, [pc, #216]	; (8df8 <send_buffer+0x188>)
    8d1e:	697b      	ldr	r3, [r7, #20]
    8d20:	18d3      	adds	r3, r2, r3
    8d22:	2220      	movs	r2, #32
    8d24:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < 40; i++)
    8d26:	697b      	ldr	r3, [r7, #20]
    8d28:	3301      	adds	r3, #1
    8d2a:	617b      	str	r3, [r7, #20]
    8d2c:	697b      	ldr	r3, [r7, #20]
    8d2e:	2b27      	cmp	r3, #39	; 0x27
    8d30:	dde3      	ble.n	8cfa <send_buffer+0x8a>

	i2c_transaction_t transaction;

	// First set cursor to start
	static uint8_t cursor_set[3] = {LCD_PREFIX, LCD_COMMAND_SET_CURSOR, 0x00};
	cursor_set_packet.address = LCD_I2C_ADDRESS;
    8d32:	4b38      	ldr	r3, [pc, #224]	; (8e14 <send_buffer+0x1a4>)
    8d34:	2228      	movs	r2, #40	; 0x28
    8d36:	801a      	strh	r2, [r3, #0]
	cursor_set_packet.data = cursor_set;
    8d38:	4b36      	ldr	r3, [pc, #216]	; (8e14 <send_buffer+0x1a4>)
    8d3a:	4a37      	ldr	r2, [pc, #220]	; (8e18 <send_buffer+0x1a8>)
    8d3c:	605a      	str	r2, [r3, #4]
	cursor_set_packet.data_length = 3;
    8d3e:	4b35      	ldr	r3, [pc, #212]	; (8e14 <send_buffer+0x1a4>)
    8d40:	2203      	movs	r2, #3
    8d42:	805a      	strh	r2, [r3, #2]
	cursor_set_packet.high_speed = false;
    8d44:	4b33      	ldr	r3, [pc, #204]	; (8e14 <send_buffer+0x1a4>)
    8d46:	2200      	movs	r2, #0
    8d48:	725a      	strb	r2, [r3, #9]
	cursor_set_packet.ten_bit_address = false;
    8d4a:	4b32      	ldr	r3, [pc, #200]	; (8e14 <send_buffer+0x1a4>)
    8d4c:	2200      	movs	r2, #0
    8d4e:	721a      	strb	r2, [r3, #8]
	transaction.packet = cursor_set_packet;
    8d50:	2308      	movs	r3, #8
    8d52:	18fb      	adds	r3, r7, r3
    8d54:	4a2f      	ldr	r2, [pc, #188]	; (8e14 <send_buffer+0x1a4>)
    8d56:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d58:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8d5a:	2308      	movs	r3, #8
    8d5c:	18fb      	adds	r3, r7, r3
    8d5e:	6818      	ldr	r0, [r3, #0]
    8d60:	6859      	ldr	r1, [r3, #4]
    8d62:	689a      	ldr	r2, [r3, #8]
    8d64:	4b2d      	ldr	r3, [pc, #180]	; (8e1c <send_buffer+0x1ac>)
    8d66:	4798      	blx	r3

	// Send first and third lines
	screen_buffer_first_half_packet.address = LCD_I2C_ADDRESS;
    8d68:	4b2d      	ldr	r3, [pc, #180]	; (8e20 <send_buffer+0x1b0>)
    8d6a:	2228      	movs	r2, #40	; 0x28
    8d6c:	801a      	strh	r2, [r3, #0]
	screen_buffer_first_half_packet.data = lines_1_3_buffer;
    8d6e:	4b2c      	ldr	r3, [pc, #176]	; (8e20 <send_buffer+0x1b0>)
    8d70:	4a1c      	ldr	r2, [pc, #112]	; (8de4 <send_buffer+0x174>)
    8d72:	605a      	str	r2, [r3, #4]
	screen_buffer_first_half_packet.data_length = 40;
    8d74:	4b2a      	ldr	r3, [pc, #168]	; (8e20 <send_buffer+0x1b0>)
    8d76:	2228      	movs	r2, #40	; 0x28
    8d78:	805a      	strh	r2, [r3, #2]
	screen_buffer_first_half_packet.high_speed = false;
    8d7a:	4b29      	ldr	r3, [pc, #164]	; (8e20 <send_buffer+0x1b0>)
    8d7c:	2200      	movs	r2, #0
    8d7e:	725a      	strb	r2, [r3, #9]
	screen_buffer_first_half_packet.ten_bit_address = false;
    8d80:	4b27      	ldr	r3, [pc, #156]	; (8e20 <send_buffer+0x1b0>)
    8d82:	2200      	movs	r2, #0
    8d84:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_first_half_packet;
    8d86:	2308      	movs	r3, #8
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	4a25      	ldr	r2, [pc, #148]	; (8e20 <send_buffer+0x1b0>)
    8d8c:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d8e:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8d90:	2308      	movs	r3, #8
    8d92:	18fb      	adds	r3, r7, r3
    8d94:	6818      	ldr	r0, [r3, #0]
    8d96:	6859      	ldr	r1, [r3, #4]
    8d98:	689a      	ldr	r2, [r3, #8]
    8d9a:	4b20      	ldr	r3, [pc, #128]	; (8e1c <send_buffer+0x1ac>)
    8d9c:	4798      	blx	r3

	// Send second and fourth lines
	screen_buffer_second_half_packet.address = LCD_I2C_ADDRESS;
    8d9e:	4b21      	ldr	r3, [pc, #132]	; (8e24 <send_buffer+0x1b4>)
    8da0:	2228      	movs	r2, #40	; 0x28
    8da2:	801a      	strh	r2, [r3, #0]
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
    8da4:	4b1f      	ldr	r3, [pc, #124]	; (8e24 <send_buffer+0x1b4>)
    8da6:	4a14      	ldr	r2, [pc, #80]	; (8df8 <send_buffer+0x188>)
    8da8:	605a      	str	r2, [r3, #4]
	screen_buffer_second_half_packet.data_length = 40;
    8daa:	4b1e      	ldr	r3, [pc, #120]	; (8e24 <send_buffer+0x1b4>)
    8dac:	2228      	movs	r2, #40	; 0x28
    8dae:	805a      	strh	r2, [r3, #2]
	screen_buffer_second_half_packet.high_speed = false;
    8db0:	4b1c      	ldr	r3, [pc, #112]	; (8e24 <send_buffer+0x1b4>)
    8db2:	2200      	movs	r2, #0
    8db4:	725a      	strb	r2, [r3, #9]
	screen_buffer_second_half_packet.ten_bit_address = false;
    8db6:	4b1b      	ldr	r3, [pc, #108]	; (8e24 <send_buffer+0x1b4>)
    8db8:	2200      	movs	r2, #0
    8dba:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_second_half_packet;
    8dbc:	2308      	movs	r3, #8
    8dbe:	18fb      	adds	r3, r7, r3
    8dc0:	4a18      	ldr	r2, [pc, #96]	; (8e24 <send_buffer+0x1b4>)
    8dc2:	ca13      	ldmia	r2!, {r0, r1, r4}
    8dc4:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8dc6:	2308      	movs	r3, #8
    8dc8:	18fb      	adds	r3, r7, r3
    8dca:	6818      	ldr	r0, [r3, #0]
    8dcc:	6859      	ldr	r1, [r3, #4]
    8dce:	689a      	ldr	r2, [r3, #8]
    8dd0:	4b12      	ldr	r3, [pc, #72]	; (8e1c <send_buffer+0x1ac>)
    8dd2:	4798      	blx	r3
	return true;
    8dd4:	2301      	movs	r3, #1
}
    8dd6:	0018      	movs	r0, r3
    8dd8:	46bd      	mov	sp, r7
    8dda:	b007      	add	sp, #28
    8ddc:	bd90      	pop	{r4, r7, pc}
    8dde:	46c0      	nop			; (mov r8, r8)
    8de0:	20003888 	.word	0x20003888
    8de4:	200038d8 	.word	0x200038d8
    8de8:	00012ed1 	.word	0x00012ed1
    8dec:	200038b0 	.word	0x200038b0
    8df0:	200038ec 	.word	0x200038ec
    8df4:	2000389c 	.word	0x2000389c
    8df8:	20003900 	.word	0x20003900
    8dfc:	200038c4 	.word	0x200038c4
    8e00:	20003914 	.word	0x20003914
    8e04:	20003838 	.word	0x20003838
    8e08:	20003860 	.word	0x20003860
    8e0c:	2000384c 	.word	0x2000384c
    8e10:	20003874 	.word	0x20003874
    8e14:	20003808 	.word	0x20003808
    8e18:	200001cc 	.word	0x200001cc
    8e1c:	0000a6d1 	.word	0x0000a6d1
    8e20:	200037f0 	.word	0x200037f0
    8e24:	200037fc 	.word	0x200037fc

00008e28 <set_contrast>:

bool set_contrast(uint8_t level)
{
    8e28:	b590      	push	{r4, r7, lr}
    8e2a:	b087      	sub	sp, #28
    8e2c:	af00      	add	r7, sp, #0
    8e2e:	0002      	movs	r2, r0
    8e30:	1dfb      	adds	r3, r7, #7
    8e32:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 50)
    8e34:	1dfb      	adds	r3, r7, #7
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	2b00      	cmp	r3, #0
    8e3a:	d003      	beq.n	8e44 <set_contrast+0x1c>
    8e3c:	1dfb      	adds	r3, r7, #7
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	2b32      	cmp	r3, #50	; 0x32
    8e42:	d901      	bls.n	8e48 <set_contrast+0x20>
	{
		return false;
    8e44:	2300      	movs	r3, #0
    8e46:	e025      	b.n	8e94 <set_contrast+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    8e48:	4b14      	ldr	r3, [pc, #80]	; (8e9c <set_contrast+0x74>)
    8e4a:	22fe      	movs	r2, #254	; 0xfe
    8e4c:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_CONTRAST;
    8e4e:	4b13      	ldr	r3, [pc, #76]	; (8e9c <set_contrast+0x74>)
    8e50:	2252      	movs	r2, #82	; 0x52
    8e52:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    8e54:	4b11      	ldr	r3, [pc, #68]	; (8e9c <set_contrast+0x74>)
    8e56:	1dfa      	adds	r2, r7, #7
    8e58:	7812      	ldrb	r2, [r2, #0]
    8e5a:	709a      	strb	r2, [r3, #2]
	contrast_packet.address = LCD_I2C_ADDRESS;
    8e5c:	4b10      	ldr	r3, [pc, #64]	; (8ea0 <set_contrast+0x78>)
    8e5e:	2228      	movs	r2, #40	; 0x28
    8e60:	801a      	strh	r2, [r3, #0]
	contrast_packet.data = data_to_send;
    8e62:	4b0f      	ldr	r3, [pc, #60]	; (8ea0 <set_contrast+0x78>)
    8e64:	4a0d      	ldr	r2, [pc, #52]	; (8e9c <set_contrast+0x74>)
    8e66:	605a      	str	r2, [r3, #4]
	contrast_packet.data_length = 3;
    8e68:	4b0d      	ldr	r3, [pc, #52]	; (8ea0 <set_contrast+0x78>)
    8e6a:	2203      	movs	r2, #3
    8e6c:	805a      	strh	r2, [r3, #2]
	contrast_packet.high_speed = false;
    8e6e:	4b0c      	ldr	r3, [pc, #48]	; (8ea0 <set_contrast+0x78>)
    8e70:	2200      	movs	r2, #0
    8e72:	725a      	strb	r2, [r3, #9]
	contrast_packet.ten_bit_address = false;
    8e74:	4b0a      	ldr	r3, [pc, #40]	; (8ea0 <set_contrast+0x78>)
    8e76:	2200      	movs	r2, #0
    8e78:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = contrast_packet;
    8e7a:	230c      	movs	r3, #12
    8e7c:	18fb      	adds	r3, r7, r3
    8e7e:	4a08      	ldr	r2, [pc, #32]	; (8ea0 <set_contrast+0x78>)
    8e80:	ca13      	ldmia	r2!, {r0, r1, r4}
    8e82:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8e84:	230c      	movs	r3, #12
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	6818      	ldr	r0, [r3, #0]
    8e8a:	6859      	ldr	r1, [r3, #4]
    8e8c:	689a      	ldr	r2, [r3, #8]
    8e8e:	4b05      	ldr	r3, [pc, #20]	; (8ea4 <set_contrast+0x7c>)
    8e90:	4798      	blx	r3
	return true;
    8e92:	2301      	movs	r3, #1
}
    8e94:	0018      	movs	r0, r3
    8e96:	46bd      	mov	sp, r7
    8e98:	b007      	add	sp, #28
    8e9a:	bd90      	pop	{r4, r7, pc}
    8e9c:	20003928 	.word	0x20003928
    8ea0:	20003820 	.word	0x20003820
    8ea4:	0000a6d1 	.word	0x0000a6d1

00008ea8 <set_backlight>:

bool set_backlight(uint8_t level)
{
    8ea8:	b590      	push	{r4, r7, lr}
    8eaa:	b087      	sub	sp, #28
    8eac:	af00      	add	r7, sp, #0
    8eae:	0002      	movs	r2, r0
    8eb0:	1dfb      	adds	r3, r7, #7
    8eb2:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 8)
    8eb4:	1dfb      	adds	r3, r7, #7
    8eb6:	781b      	ldrb	r3, [r3, #0]
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d003      	beq.n	8ec4 <set_backlight+0x1c>
    8ebc:	1dfb      	adds	r3, r7, #7
    8ebe:	781b      	ldrb	r3, [r3, #0]
    8ec0:	2b08      	cmp	r3, #8
    8ec2:	d901      	bls.n	8ec8 <set_backlight+0x20>
	{
		return false;
    8ec4:	2300      	movs	r3, #0
    8ec6:	e025      	b.n	8f14 <set_backlight+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    8ec8:	4b14      	ldr	r3, [pc, #80]	; (8f1c <set_backlight+0x74>)
    8eca:	22fe      	movs	r2, #254	; 0xfe
    8ecc:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_BRIGHTNESS;
    8ece:	4b13      	ldr	r3, [pc, #76]	; (8f1c <set_backlight+0x74>)
    8ed0:	2253      	movs	r2, #83	; 0x53
    8ed2:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    8ed4:	4b11      	ldr	r3, [pc, #68]	; (8f1c <set_backlight+0x74>)
    8ed6:	1dfa      	adds	r2, r7, #7
    8ed8:	7812      	ldrb	r2, [r2, #0]
    8eda:	709a      	strb	r2, [r3, #2]
	backlight_packet.address = LCD_I2C_ADDRESS;
    8edc:	4b10      	ldr	r3, [pc, #64]	; (8f20 <set_backlight+0x78>)
    8ede:	2228      	movs	r2, #40	; 0x28
    8ee0:	801a      	strh	r2, [r3, #0]
	backlight_packet.data = data_to_send;
    8ee2:	4b0f      	ldr	r3, [pc, #60]	; (8f20 <set_backlight+0x78>)
    8ee4:	4a0d      	ldr	r2, [pc, #52]	; (8f1c <set_backlight+0x74>)
    8ee6:	605a      	str	r2, [r3, #4]
	backlight_packet.data_length = 3;
    8ee8:	4b0d      	ldr	r3, [pc, #52]	; (8f20 <set_backlight+0x78>)
    8eea:	2203      	movs	r2, #3
    8eec:	805a      	strh	r2, [r3, #2]
	backlight_packet.high_speed = false;
    8eee:	4b0c      	ldr	r3, [pc, #48]	; (8f20 <set_backlight+0x78>)
    8ef0:	2200      	movs	r2, #0
    8ef2:	725a      	strb	r2, [r3, #9]
	backlight_packet.ten_bit_address = false;
    8ef4:	4b0a      	ldr	r3, [pc, #40]	; (8f20 <set_backlight+0x78>)
    8ef6:	2200      	movs	r2, #0
    8ef8:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = backlight_packet;
    8efa:	230c      	movs	r3, #12
    8efc:	18fb      	adds	r3, r7, r3
    8efe:	4a08      	ldr	r2, [pc, #32]	; (8f20 <set_backlight+0x78>)
    8f00:	ca13      	ldmia	r2!, {r0, r1, r4}
    8f02:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    8f04:	230c      	movs	r3, #12
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	6818      	ldr	r0, [r3, #0]
    8f0a:	6859      	ldr	r1, [r3, #4]
    8f0c:	689a      	ldr	r2, [r3, #8]
    8f0e:	4b05      	ldr	r3, [pc, #20]	; (8f24 <set_backlight+0x7c>)
    8f10:	4798      	blx	r3
	return true;
    8f12:	2301      	movs	r3, #1
}
    8f14:	0018      	movs	r0, r3
    8f16:	46bd      	mov	sp, r7
    8f18:	b007      	add	sp, #28
    8f1a:	bd90      	pop	{r4, r7, pc}
    8f1c:	2000392c 	.word	0x2000392c
    8f20:	2000382c 	.word	0x2000382c
    8f24:	0000a6d1 	.word	0x0000a6d1

00008f28 <update_main_buffer>:

void update_main_buffer(lcv_parameters_t * new_settings,  SETTINGS_INPUT_STAGE stage)
{
    8f28:	b590      	push	{r4, r7, lr}
    8f2a:	b08d      	sub	sp, #52	; 0x34
    8f2c:	af02      	add	r7, sp, #8
    8f2e:	6078      	str	r0, [r7, #4]
    8f30:	000a      	movs	r2, r1
    8f32:	1cfb      	adds	r3, r7, #3
    8f34:	701a      	strb	r2, [r3, #0]
	lcv_parameters_t current_settings = get_current_settings();
    8f36:	230c      	movs	r3, #12
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	0018      	movs	r0, r3
    8f3c:	4b59      	ldr	r3, [pc, #356]	; (90a4 <update_main_buffer+0x17c>)
    8f3e:	4798      	blx	r3

	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    8f40:	2300      	movs	r3, #0
    8f42:	627b      	str	r3, [r7, #36]	; 0x24
    8f44:	e007      	b.n	8f56 <update_main_buffer+0x2e>
	{
		main_screen_buffer[i] = 0x20; // ASCII space
    8f46:	4a58      	ldr	r2, [pc, #352]	; (90a8 <update_main_buffer+0x180>)
    8f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f4a:	18d3      	adds	r3, r2, r3
    8f4c:	2220      	movs	r2, #32
    8f4e:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    8f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f52:	3301      	adds	r3, #1
    8f54:	627b      	str	r3, [r7, #36]	; 0x24
    8f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f58:	2b4f      	cmp	r3, #79	; 0x4f
    8f5a:	ddf4      	ble.n	8f46 <update_main_buffer+0x1e>
	}

	// Update info
	// NOTE: snprintf here doesn't support floats
	if(current_settings.enable)
    8f5c:	230c      	movs	r3, #12
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	2201      	movs	r2, #1
    8f64:	4013      	ands	r3, r2
    8f66:	b2db      	uxtb	r3, r3
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d004      	beq.n	8f76 <update_main_buffer+0x4e>
	{
		snprintf(&main_screen_buffer[0],9,"VENT:ON");
    8f6c:	4b4e      	ldr	r3, [pc, #312]	; (90a8 <update_main_buffer+0x180>)
    8f6e:	4a4f      	ldr	r2, [pc, #316]	; (90ac <update_main_buffer+0x184>)
    8f70:	ca03      	ldmia	r2!, {r0, r1}
    8f72:	c303      	stmia	r3!, {r0, r1}
    8f74:	e005      	b.n	8f82 <update_main_buffer+0x5a>
	}
	else
	{
		snprintf(&main_screen_buffer[0],9,"VENT:OFF");
    8f76:	4b4c      	ldr	r3, [pc, #304]	; (90a8 <update_main_buffer+0x180>)
    8f78:	4a4d      	ldr	r2, [pc, #308]	; (90b0 <update_main_buffer+0x188>)
    8f7a:	ca03      	ldmia	r2!, {r0, r1}
    8f7c:	c303      	stmia	r3!, {r0, r1}
    8f7e:	7812      	ldrb	r2, [r2, #0]
    8f80:	701a      	strb	r2, [r3, #0]
	}

	snprintf(&main_screen_buffer[10],10, "V:%iml", current_settings.tidal_volume_ml);
    8f82:	230c      	movs	r3, #12
    8f84:	18fb      	adds	r3, r7, r3
    8f86:	685b      	ldr	r3, [r3, #4]
    8f88:	4a4a      	ldr	r2, [pc, #296]	; (90b4 <update_main_buffer+0x18c>)
    8f8a:	484b      	ldr	r0, [pc, #300]	; (90b8 <update_main_buffer+0x190>)
    8f8c:	210a      	movs	r1, #10
    8f8e:	4c4b      	ldr	r4, [pc, #300]	; (90bc <update_main_buffer+0x194>)
    8f90:	47a0      	blx	r4

	snprintf(&main_screen_buffer[20],13, "PEEP:%icmH20", current_settings.peep_cm_h20);
    8f92:	230c      	movs	r3, #12
    8f94:	18fb      	adds	r3, r7, r3
    8f96:	689b      	ldr	r3, [r3, #8]
    8f98:	4a49      	ldr	r2, [pc, #292]	; (90c0 <update_main_buffer+0x198>)
    8f9a:	484a      	ldr	r0, [pc, #296]	; (90c4 <update_main_buffer+0x19c>)
    8f9c:	210d      	movs	r1, #13
    8f9e:	4c47      	ldr	r4, [pc, #284]	; (90bc <update_main_buffer+0x194>)
    8fa0:	47a0      	blx	r4

	uint8_t current_inspiratory_ones = current_settings.ie_ratio_tenths / 10;
    8fa2:	230c      	movs	r3, #12
    8fa4:	18fb      	adds	r3, r7, r3
    8fa6:	785a      	ldrb	r2, [r3, #1]
    8fa8:	2323      	movs	r3, #35	; 0x23
    8faa:	18fc      	adds	r4, r7, r3
    8fac:	4b46      	ldr	r3, [pc, #280]	; (90c8 <update_main_buffer+0x1a0>)
    8fae:	210a      	movs	r1, #10
    8fb0:	0010      	movs	r0, r2
    8fb2:	4798      	blx	r3
    8fb4:	0003      	movs	r3, r0
    8fb6:	7023      	strb	r3, [r4, #0]
	uint8_t current_inspiratory_tenths = current_settings.ie_ratio_tenths - (10*current_inspiratory_ones);
    8fb8:	230c      	movs	r3, #12
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	7859      	ldrb	r1, [r3, #1]
    8fbe:	2323      	movs	r3, #35	; 0x23
    8fc0:	18fb      	adds	r3, r7, r3
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	220a      	movs	r2, #10
    8fc6:	4252      	negs	r2, r2
    8fc8:	4353      	muls	r3, r2
    8fca:	b2da      	uxtb	r2, r3
    8fcc:	2322      	movs	r3, #34	; 0x22
    8fce:	18fb      	adds	r3, r7, r3
    8fd0:	188a      	adds	r2, r1, r2
    8fd2:	701a      	strb	r2, [r3, #0]
	snprintf(&main_screen_buffer[32],9, "IE:%i.%i:1", current_inspiratory_ones, current_inspiratory_tenths);
    8fd4:	2323      	movs	r3, #35	; 0x23
    8fd6:	18fb      	adds	r3, r7, r3
    8fd8:	7819      	ldrb	r1, [r3, #0]
    8fda:	2322      	movs	r3, #34	; 0x22
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	4a3a      	ldr	r2, [pc, #232]	; (90cc <update_main_buffer+0x1a4>)
    8fe2:	483b      	ldr	r0, [pc, #236]	; (90d0 <update_main_buffer+0x1a8>)
    8fe4:	9300      	str	r3, [sp, #0]
    8fe6:	000b      	movs	r3, r1
    8fe8:	2109      	movs	r1, #9
    8fea:	4c34      	ldr	r4, [pc, #208]	; (90bc <update_main_buffer+0x194>)
    8fec:	47a0      	blx	r4

	snprintf(&main_screen_buffer[40],13, "PIP:%icmH20", current_settings.pip_cm_h20);
    8fee:	230c      	movs	r3, #12
    8ff0:	18fb      	adds	r3, r7, r3
    8ff2:	68db      	ldr	r3, [r3, #12]
    8ff4:	4a37      	ldr	r2, [pc, #220]	; (90d4 <update_main_buffer+0x1ac>)
    8ff6:	4838      	ldr	r0, [pc, #224]	; (90d8 <update_main_buffer+0x1b0>)
    8ff8:	210d      	movs	r1, #13
    8ffa:	4c30      	ldr	r4, [pc, #192]	; (90bc <update_main_buffer+0x194>)
    8ffc:	47a0      	blx	r4

	snprintf(&main_screen_buffer[52],7, "BPM:%i", current_settings.breath_per_min);
    8ffe:	230c      	movs	r3, #12
    9000:	18fb      	adds	r3, r7, r3
    9002:	691b      	ldr	r3, [r3, #16]
    9004:	4a35      	ldr	r2, [pc, #212]	; (90dc <update_main_buffer+0x1b4>)
    9006:	4836      	ldr	r0, [pc, #216]	; (90e0 <update_main_buffer+0x1b8>)
    9008:	2107      	movs	r1, #7
    900a:	4c2c      	ldr	r4, [pc, #176]	; (90bc <update_main_buffer+0x194>)
    900c:	47a0      	blx	r4

	// Fill in settings input display
	uint8_t setting_inspiratory_ones = new_settings->ie_ratio_tenths / 10;
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	785a      	ldrb	r2, [r3, #1]
    9012:	2321      	movs	r3, #33	; 0x21
    9014:	18fc      	adds	r4, r7, r3
    9016:	4b2c      	ldr	r3, [pc, #176]	; (90c8 <update_main_buffer+0x1a0>)
    9018:	210a      	movs	r1, #10
    901a:	0010      	movs	r0, r2
    901c:	4798      	blx	r3
    901e:	0003      	movs	r3, r0
    9020:	7023      	strb	r3, [r4, #0]
	uint8_t setting_inspiratory_tenths = new_settings->ie_ratio_tenths - (10*setting_inspiratory_ones);
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	7859      	ldrb	r1, [r3, #1]
    9026:	2321      	movs	r3, #33	; 0x21
    9028:	18fb      	adds	r3, r7, r3
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	220a      	movs	r2, #10
    902e:	4252      	negs	r2, r2
    9030:	4353      	muls	r3, r2
    9032:	b2da      	uxtb	r2, r3
    9034:	2320      	movs	r3, #32
    9036:	18fb      	adds	r3, r7, r3
    9038:	188a      	adds	r2, r1, r2
    903a:	701a      	strb	r2, [r3, #0]

	switch (stage)
    903c:	1cfb      	adds	r3, r7, #3
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	2b04      	cmp	r3, #4
    9042:	d827      	bhi.n	9094 <update_main_buffer+0x16c>
    9044:	009a      	lsls	r2, r3, #2
    9046:	4b27      	ldr	r3, [pc, #156]	; (90e4 <update_main_buffer+0x1bc>)
    9048:	18d3      	adds	r3, r2, r3
    904a:	681b      	ldr	r3, [r3, #0]
    904c:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
			break;

		case STAGE_BPM:
			sprintf(&main_screen_buffer[60], "SET BPM:%i", new_settings->breath_per_min);
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	691a      	ldr	r2, [r3, #16]
    9052:	4925      	ldr	r1, [pc, #148]	; (90e8 <update_main_buffer+0x1c0>)
    9054:	4b25      	ldr	r3, [pc, #148]	; (90ec <update_main_buffer+0x1c4>)
    9056:	0018      	movs	r0, r3
    9058:	4b25      	ldr	r3, [pc, #148]	; (90f0 <update_main_buffer+0x1c8>)
    905a:	4798      	blx	r3
			break;
    905c:	e01d      	b.n	909a <update_main_buffer+0x172>

		case STAGE_PEEP:
			sprintf(&main_screen_buffer[60], "SET PEEP:%icmH20", new_settings->peep_cm_h20);
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	689a      	ldr	r2, [r3, #8]
    9062:	4924      	ldr	r1, [pc, #144]	; (90f4 <update_main_buffer+0x1cc>)
    9064:	4b21      	ldr	r3, [pc, #132]	; (90ec <update_main_buffer+0x1c4>)
    9066:	0018      	movs	r0, r3
    9068:	4b21      	ldr	r3, [pc, #132]	; (90f0 <update_main_buffer+0x1c8>)
    906a:	4798      	blx	r3
			break;
    906c:	e015      	b.n	909a <update_main_buffer+0x172>

		case STAGE_PIP:
			sprintf(&main_screen_buffer[60], "SET PIP:%icmH20", new_settings->pip_cm_h20);
    906e:	687b      	ldr	r3, [r7, #4]
    9070:	68da      	ldr	r2, [r3, #12]
    9072:	4921      	ldr	r1, [pc, #132]	; (90f8 <update_main_buffer+0x1d0>)
    9074:	4b1d      	ldr	r3, [pc, #116]	; (90ec <update_main_buffer+0x1c4>)
    9076:	0018      	movs	r0, r3
    9078:	4b1d      	ldr	r3, [pc, #116]	; (90f0 <update_main_buffer+0x1c8>)
    907a:	4798      	blx	r3
			break;
    907c:	e00d      	b.n	909a <update_main_buffer+0x172>

		case STAGE_IE:
			sprintf(&main_screen_buffer[60], "SET I:E: %i.%i:1", setting_inspiratory_ones, setting_inspiratory_tenths);
    907e:	2321      	movs	r3, #33	; 0x21
    9080:	18fb      	adds	r3, r7, r3
    9082:	781a      	ldrb	r2, [r3, #0]
    9084:	2320      	movs	r3, #32
    9086:	18fb      	adds	r3, r7, r3
    9088:	781b      	ldrb	r3, [r3, #0]
    908a:	491c      	ldr	r1, [pc, #112]	; (90fc <update_main_buffer+0x1d4>)
    908c:	4817      	ldr	r0, [pc, #92]	; (90ec <update_main_buffer+0x1c4>)
    908e:	4c18      	ldr	r4, [pc, #96]	; (90f0 <update_main_buffer+0x1c8>)
    9090:	47a0      	blx	r4
			break;
    9092:	e002      	b.n	909a <update_main_buffer+0x172>
		
		default:
			break;
    9094:	46c0      	nop			; (mov r8, r8)
    9096:	e000      	b.n	909a <update_main_buffer+0x172>
			break;
    9098:	46c0      	nop			; (mov r8, r8)
	}
}
    909a:	46c0      	nop			; (mov r8, r8)
    909c:	46bd      	mov	sp, r7
    909e:	b00b      	add	sp, #44	; 0x2c
    90a0:	bd90      	pop	{r4, r7, pc}
    90a2:	46c0      	nop			; (mov r8, r8)
    90a4:	00009cfd 	.word	0x00009cfd
    90a8:	20003888 	.word	0x20003888
    90ac:	00013924 	.word	0x00013924
    90b0:	0001392c 	.word	0x0001392c
    90b4:	00013938 	.word	0x00013938
    90b8:	20003892 	.word	0x20003892
    90bc:	00012ef5 	.word	0x00012ef5
    90c0:	00013940 	.word	0x00013940
    90c4:	2000389c 	.word	0x2000389c
    90c8:	0000fd75 	.word	0x0000fd75
    90cc:	00013950 	.word	0x00013950
    90d0:	200038a8 	.word	0x200038a8
    90d4:	0001395c 	.word	0x0001395c
    90d8:	200038b0 	.word	0x200038b0
    90dc:	00013968 	.word	0x00013968
    90e0:	200038bc 	.word	0x200038bc
    90e4:	000139fc 	.word	0x000139fc
    90e8:	00013970 	.word	0x00013970
    90ec:	200038c4 	.word	0x200038c4
    90f0:	00012f59 	.word	0x00012f59
    90f4:	0001397c 	.word	0x0001397c
    90f8:	00013990 	.word	0x00013990
    90fc:	000139a0 	.word	0x000139a0

00009100 <update_alarm_buffer>:

void update_alarm_buffer(void)
{
    9100:	b580      	push	{r7, lr}
    9102:	b082      	sub	sp, #8
    9104:	af00      	add	r7, sp, #0
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    9106:	2300      	movs	r3, #0
    9108:	607b      	str	r3, [r7, #4]
    910a:	e007      	b.n	911c <update_alarm_buffer+0x1c>
	{
		alarm_screen_buffer[i] = 0x20; // ASCII space
    910c:	4a2e      	ldr	r2, [pc, #184]	; (91c8 <update_alarm_buffer+0xc8>)
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	18d3      	adds	r3, r2, r3
    9112:	2220      	movs	r2, #32
    9114:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    9116:	687b      	ldr	r3, [r7, #4]
    9118:	3301      	adds	r3, #1
    911a:	607b      	str	r3, [r7, #4]
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	2b4f      	cmp	r3, #79	; 0x4f
    9120:	ddf4      	ble.n	910c <update_alarm_buffer+0xc>
	}

	snprintf(&alarm_screen_buffer[0],9,"ERRORS:");
    9122:	4b29      	ldr	r3, [pc, #164]	; (91c8 <update_alarm_buffer+0xc8>)
    9124:	4a29      	ldr	r2, [pc, #164]	; (91cc <update_alarm_buffer+0xcc>)
    9126:	ca03      	ldmia	r2!, {r0, r1}
    9128:	c303      	stmia	r3!, {r0, r1}

	if(check_alarm(ALARM_FLOW_SENSOR))
    912a:	2000      	movs	r0, #0
    912c:	4b28      	ldr	r3, [pc, #160]	; (91d0 <update_alarm_buffer+0xd0>)
    912e:	4798      	blx	r3
    9130:	1e03      	subs	r3, r0, #0
    9132:	d007      	beq.n	9144 <update_alarm_buffer+0x44>
	{
		snprintf(&alarm_screen_buffer[10],10,"FLOW");
    9134:	4a27      	ldr	r2, [pc, #156]	; (91d4 <update_alarm_buffer+0xd4>)
    9136:	4b28      	ldr	r3, [pc, #160]	; (91d8 <update_alarm_buffer+0xd8>)
    9138:	0010      	movs	r0, r2
    913a:	0019      	movs	r1, r3
    913c:	2305      	movs	r3, #5
    913e:	001a      	movs	r2, r3
    9140:	4b26      	ldr	r3, [pc, #152]	; (91dc <update_alarm_buffer+0xdc>)
    9142:	4798      	blx	r3
	}

	if(check_alarm(ALARM_PRESSURE_SENSOR))
    9144:	2002      	movs	r0, #2
    9146:	4b22      	ldr	r3, [pc, #136]	; (91d0 <update_alarm_buffer+0xd0>)
    9148:	4798      	blx	r3
    914a:	1e03      	subs	r3, r0, #0
    914c:	d005      	beq.n	915a <update_alarm_buffer+0x5a>
	{
		snprintf(&alarm_screen_buffer[20],10,"PRES SNS");
    914e:	4b24      	ldr	r3, [pc, #144]	; (91e0 <update_alarm_buffer+0xe0>)
    9150:	4a24      	ldr	r2, [pc, #144]	; (91e4 <update_alarm_buffer+0xe4>)
    9152:	ca03      	ldmia	r2!, {r0, r1}
    9154:	c303      	stmia	r3!, {r0, r1}
    9156:	7812      	ldrb	r2, [r2, #0]
    9158:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_MOTOR_ERROR))
    915a:	2003      	movs	r0, #3
    915c:	4b1c      	ldr	r3, [pc, #112]	; (91d0 <update_alarm_buffer+0xd0>)
    915e:	4798      	blx	r3
    9160:	1e03      	subs	r3, r0, #0
    9162:	d007      	beq.n	9174 <update_alarm_buffer+0x74>
	{
		snprintf(&alarm_screen_buffer[30],10,"MOT FAIL");
    9164:	4a20      	ldr	r2, [pc, #128]	; (91e8 <update_alarm_buffer+0xe8>)
    9166:	4b21      	ldr	r3, [pc, #132]	; (91ec <update_alarm_buffer+0xec>)
    9168:	0010      	movs	r0, r2
    916a:	0019      	movs	r1, r3
    916c:	2309      	movs	r3, #9
    916e:	001a      	movs	r2, r3
    9170:	4b1a      	ldr	r3, [pc, #104]	; (91dc <update_alarm_buffer+0xdc>)
    9172:	4798      	blx	r3
	}

	if(check_alarm(ALARM_MOTOR_TEMP))
    9174:	2004      	movs	r0, #4
    9176:	4b16      	ldr	r3, [pc, #88]	; (91d0 <update_alarm_buffer+0xd0>)
    9178:	4798      	blx	r3
    917a:	1e03      	subs	r3, r0, #0
    917c:	d005      	beq.n	918a <update_alarm_buffer+0x8a>
	{
		snprintf(&alarm_screen_buffer[40],10,"MOT TEMP");
    917e:	4b1c      	ldr	r3, [pc, #112]	; (91f0 <update_alarm_buffer+0xf0>)
    9180:	4a1c      	ldr	r2, [pc, #112]	; (91f4 <update_alarm_buffer+0xf4>)
    9182:	ca03      	ldmia	r2!, {r0, r1}
    9184:	c303      	stmia	r3!, {r0, r1}
    9186:	7812      	ldrb	r2, [r2, #0]
    9188:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_SETTINGS_LOAD))
    918a:	2005      	movs	r0, #5
    918c:	4b10      	ldr	r3, [pc, #64]	; (91d0 <update_alarm_buffer+0xd0>)
    918e:	4798      	blx	r3
    9190:	1e03      	subs	r3, r0, #0
    9192:	d007      	beq.n	91a4 <update_alarm_buffer+0xa4>
	{
		snprintf(&alarm_screen_buffer[50],10,"SETT LOAD");
    9194:	4a18      	ldr	r2, [pc, #96]	; (91f8 <update_alarm_buffer+0xf8>)
    9196:	4b19      	ldr	r3, [pc, #100]	; (91fc <update_alarm_buffer+0xfc>)
    9198:	0010      	movs	r0, r2
    919a:	0019      	movs	r1, r3
    919c:	230a      	movs	r3, #10
    919e:	001a      	movs	r2, r3
    91a0:	4b0e      	ldr	r3, [pc, #56]	; (91dc <update_alarm_buffer+0xdc>)
    91a2:	4798      	blx	r3
	}

	if(check_alarm(ALARM_P_RAMP_SETTINGS_INVALID))
    91a4:	2006      	movs	r0, #6
    91a6:	4b0a      	ldr	r3, [pc, #40]	; (91d0 <update_alarm_buffer+0xd0>)
    91a8:	4798      	blx	r3
    91aa:	1e03      	subs	r3, r0, #0
    91ac:	d007      	beq.n	91be <update_alarm_buffer+0xbe>
	{
		snprintf(&alarm_screen_buffer[60],10,"P RISE");
    91ae:	4b14      	ldr	r3, [pc, #80]	; (9200 <update_alarm_buffer+0x100>)
    91b0:	4a14      	ldr	r2, [pc, #80]	; (9204 <update_alarm_buffer+0x104>)
    91b2:	6811      	ldr	r1, [r2, #0]
    91b4:	6019      	str	r1, [r3, #0]
    91b6:	8891      	ldrh	r1, [r2, #4]
    91b8:	8099      	strh	r1, [r3, #4]
    91ba:	7992      	ldrb	r2, [r2, #6]
    91bc:	719a      	strb	r2, [r3, #6]
	}
    91be:	46c0      	nop			; (mov r8, r8)
    91c0:	46bd      	mov	sp, r7
    91c2:	b002      	add	sp, #8
    91c4:	bd80      	pop	{r7, pc}
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	20003838 	.word	0x20003838
    91cc:	000139b4 	.word	0x000139b4
    91d0:	00007c51 	.word	0x00007c51
    91d4:	20003842 	.word	0x20003842
    91d8:	000139bc 	.word	0x000139bc
    91dc:	00012ed1 	.word	0x00012ed1
    91e0:	2000384c 	.word	0x2000384c
    91e4:	000139c4 	.word	0x000139c4
    91e8:	20003856 	.word	0x20003856
    91ec:	000139d0 	.word	0x000139d0
    91f0:	20003860 	.word	0x20003860
    91f4:	000139dc 	.word	0x000139dc
    91f8:	2000386a 	.word	0x2000386a
    91fc:	000139e8 	.word	0x000139e8
    9200:	20003874 	.word	0x20003874
    9204:	000139f4 	.word	0x000139f4

00009208 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    9210:	687b      	ldr	r3, [r7, #4]
    9212:	095b      	lsrs	r3, r3, #5
}
    9214:	0018      	movs	r0, r3
    9216:	46bd      	mov	sp, r7
    9218:	b002      	add	sp, #8
    921a:	bd80      	pop	{r7, pc}

0000921c <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    921c:	b580      	push	{r7, lr}
    921e:	b082      	sub	sp, #8
    9220:	af00      	add	r7, sp, #0
    9222:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	01db      	lsls	r3, r3, #7
    9228:	4a03      	ldr	r2, [pc, #12]	; (9238 <arch_ioport_port_to_base+0x1c>)
    922a:	4694      	mov	ip, r2
    922c:	4463      	add	r3, ip
}
    922e:	0018      	movs	r0, r3
    9230:	46bd      	mov	sp, r7
    9232:	b002      	add	sp, #8
    9234:	bd80      	pop	{r7, pc}
    9236:	46c0      	nop			; (mov r8, r8)
    9238:	41004400 	.word	0x41004400

0000923c <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    923c:	b580      	push	{r7, lr}
    923e:	b082      	sub	sp, #8
    9240:	af00      	add	r7, sp, #0
    9242:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	0018      	movs	r0, r3
    9248:	4b05      	ldr	r3, [pc, #20]	; (9260 <arch_ioport_pin_to_base+0x24>)
    924a:	4798      	blx	r3
    924c:	0003      	movs	r3, r0
    924e:	0018      	movs	r0, r3
    9250:	4b04      	ldr	r3, [pc, #16]	; (9264 <arch_ioport_pin_to_base+0x28>)
    9252:	4798      	blx	r3
    9254:	0003      	movs	r3, r0
}
    9256:	0018      	movs	r0, r3
    9258:	46bd      	mov	sp, r7
    925a:	b002      	add	sp, #8
    925c:	bd80      	pop	{r7, pc}
    925e:	46c0      	nop			; (mov r8, r8)
    9260:	00009209 	.word	0x00009209
    9264:	0000921d 	.word	0x0000921d

00009268 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    9268:	b580      	push	{r7, lr}
    926a:	b082      	sub	sp, #8
    926c:	af00      	add	r7, sp, #0
    926e:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	221f      	movs	r2, #31
    9274:	4013      	ands	r3, r2
    9276:	2201      	movs	r2, #1
    9278:	409a      	lsls	r2, r3
    927a:	0013      	movs	r3, r2
}
    927c:	0018      	movs	r0, r3
    927e:	46bd      	mov	sp, r7
    9280:	b002      	add	sp, #8
    9282:	bd80      	pop	{r7, pc}

00009284 <arch_ioport_set_pin_level>:
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    9284:	b590      	push	{r4, r7, lr}
    9286:	b083      	sub	sp, #12
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
    928c:	000a      	movs	r2, r1
    928e:	1cfb      	adds	r3, r7, #3
    9290:	701a      	strb	r2, [r3, #0]
	if (level) {
    9292:	1cfb      	adds	r3, r7, #3
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	2b00      	cmp	r3, #0
    9298:	d00b      	beq.n	92b2 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	0018      	movs	r0, r3
    929e:	4b0c      	ldr	r3, [pc, #48]	; (92d0 <arch_ioport_set_pin_level+0x4c>)
    92a0:	4798      	blx	r3
    92a2:	0004      	movs	r4, r0
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	0018      	movs	r0, r3
    92a8:	4b0a      	ldr	r3, [pc, #40]	; (92d4 <arch_ioport_set_pin_level+0x50>)
    92aa:	4798      	blx	r3
    92ac:	0003      	movs	r3, r0
    92ae:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    92b0:	e00a      	b.n	92c8 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    92b2:	687b      	ldr	r3, [r7, #4]
    92b4:	0018      	movs	r0, r3
    92b6:	4b06      	ldr	r3, [pc, #24]	; (92d0 <arch_ioport_set_pin_level+0x4c>)
    92b8:	4798      	blx	r3
    92ba:	0004      	movs	r4, r0
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	0018      	movs	r0, r3
    92c0:	4b04      	ldr	r3, [pc, #16]	; (92d4 <arch_ioport_set_pin_level+0x50>)
    92c2:	4798      	blx	r3
    92c4:	0003      	movs	r3, r0
    92c6:	6163      	str	r3, [r4, #20]
}
    92c8:	46c0      	nop			; (mov r8, r8)
    92ca:	46bd      	mov	sp, r7
    92cc:	b003      	add	sp, #12
    92ce:	bd90      	pop	{r4, r7, pc}
    92d0:	0000923d 	.word	0x0000923d
    92d4:	00009269 	.word	0x00009269

000092d8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    92d8:	b580      	push	{r7, lr}
    92da:	b082      	sub	sp, #8
    92dc:	af00      	add	r7, sp, #0
    92de:	6078      	str	r0, [r7, #4]
    92e0:	000a      	movs	r2, r1
    92e2:	1cfb      	adds	r3, r7, #3
    92e4:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    92e6:	1cfb      	adds	r3, r7, #3
    92e8:	781a      	ldrb	r2, [r3, #0]
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	0011      	movs	r1, r2
    92ee:	0018      	movs	r0, r3
    92f0:	4b02      	ldr	r3, [pc, #8]	; (92fc <ioport_set_pin_level+0x24>)
    92f2:	4798      	blx	r3
}
    92f4:	46c0      	nop			; (mov r8, r8)
    92f6:	46bd      	mov	sp, r7
    92f8:	b002      	add	sp, #8
    92fa:	bd80      	pop	{r7, pc}
    92fc:	00009285 	.word	0x00009285

00009300 <init_motor_interface>:
 #include "motor_interface.h"

 static struct dac_module module;

 void init_motor_interface(void)
 {
    9300:	b580      	push	{r7, lr}
    9302:	b084      	sub	sp, #16
    9304:	af00      	add	r7, sp, #0
	disable_motor();
    9306:	4b1a      	ldr	r3, [pc, #104]	; (9370 <init_motor_interface+0x70>)
    9308:	4798      	blx	r3

	// Set up DAC
	struct dac_chan_config channel_config;
	dac_chan_get_config_defaults(&channel_config);
    930a:	230c      	movs	r3, #12
    930c:	18fb      	adds	r3, r7, r3
    930e:	0018      	movs	r0, r3
    9310:	4b18      	ldr	r3, [pc, #96]	; (9374 <init_motor_interface+0x74>)
    9312:	4798      	blx	r3

	struct dac_config config;
	dac_get_config_defaults(&config);
    9314:	1d3b      	adds	r3, r7, #4
    9316:	0018      	movs	r0, r3
    9318:	4b17      	ldr	r3, [pc, #92]	; (9378 <init_motor_interface+0x78>)
    931a:	4798      	blx	r3
	config.left_adjust = false;
    931c:	1d3b      	adds	r3, r7, #4
    931e:	2200      	movs	r2, #0
    9320:	709a      	strb	r2, [r3, #2]
	config.voltage_pump_disable = false;
    9322:	1d3b      	adds	r3, r7, #4
    9324:	2200      	movs	r2, #0
    9326:	715a      	strb	r2, [r3, #5]
	config.reference = DAC_REFERENCE_AVCC;
    9328:	1d3b      	adds	r3, r7, #4
    932a:	2240      	movs	r2, #64	; 0x40
    932c:	701a      	strb	r2, [r3, #0]
	config.clock_source = GCLK_GENERATOR_1;	// 8 MHz
    932e:	1d3b      	adds	r3, r7, #4
    9330:	2201      	movs	r2, #1
    9332:	70da      	strb	r2, [r3, #3]

	dac_init(&module, DAC, &config);
    9334:	1d3a      	adds	r2, r7, #4
    9336:	4911      	ldr	r1, [pc, #68]	; (937c <init_motor_interface+0x7c>)
    9338:	4b11      	ldr	r3, [pc, #68]	; (9380 <init_motor_interface+0x80>)
    933a:	0018      	movs	r0, r3
    933c:	4b11      	ldr	r3, [pc, #68]	; (9384 <init_motor_interface+0x84>)
    933e:	4798      	blx	r3
	
	dac_chan_set_config(&module, DAC_CHANNEL_0, &channel_config);
    9340:	230c      	movs	r3, #12
    9342:	18fa      	adds	r2, r7, r3
    9344:	4b0e      	ldr	r3, [pc, #56]	; (9380 <init_motor_interface+0x80>)
    9346:	2100      	movs	r1, #0
    9348:	0018      	movs	r0, r3
    934a:	4b0f      	ldr	r3, [pc, #60]	; (9388 <init_motor_interface+0x88>)
    934c:	4798      	blx	r3
	dac_chan_enable(&module, DAC_CHANNEL_0);
    934e:	4b0c      	ldr	r3, [pc, #48]	; (9380 <init_motor_interface+0x80>)
    9350:	2100      	movs	r1, #0
    9352:	0018      	movs	r0, r3
    9354:	4b0d      	ldr	r3, [pc, #52]	; (938c <init_motor_interface+0x8c>)
    9356:	4798      	blx	r3

	dac_enable(&module);
    9358:	4b09      	ldr	r3, [pc, #36]	; (9380 <init_motor_interface+0x80>)
    935a:	0018      	movs	r0, r3
    935c:	4b0c      	ldr	r3, [pc, #48]	; (9390 <init_motor_interface+0x90>)
    935e:	4798      	blx	r3

	drive_motor(0.0);
    9360:	2300      	movs	r3, #0
    9362:	1c18      	adds	r0, r3, #0
    9364:	4b0b      	ldr	r3, [pc, #44]	; (9394 <init_motor_interface+0x94>)
    9366:	4798      	blx	r3
 }
    9368:	46c0      	nop			; (mov r8, r8)
    936a:	46bd      	mov	sp, r7
    936c:	b004      	add	sp, #16
    936e:	bd80      	pop	{r7, pc}
    9370:	000093f9 	.word	0x000093f9
    9374:	00002889 	.word	0x00002889
    9378:	000026e1 	.word	0x000026e1
    937c:	42004800 	.word	0x42004800
    9380:	20003930 	.word	0x20003930
    9384:	0000271d 	.word	0x0000271d
    9388:	00002899 	.word	0x00002899
    938c:	000028b3 	.word	0x000028b3
    9390:	0000282d 	.word	0x0000282d
    9394:	00009411 	.word	0x00009411

00009398 <motor_status_monitor>:

 void motor_status_monitor(void)
 {
    9398:	b580      	push	{r7, lr}
    939a:	af00      	add	r7, sp, #0
	}
	else
	{
		set_alarm(ALARM_MOTOR_ERROR, false);
	}*/
	set_alarm(ALARM_MOTOR_ERROR, false);
    939c:	2100      	movs	r1, #0
    939e:	2003      	movs	r0, #3
    93a0:	4b0b      	ldr	r3, [pc, #44]	; (93d0 <motor_status_monitor+0x38>)
    93a2:	4798      	blx	r3

	if(get_motor_temp_celsius() > 100)
    93a4:	4b0b      	ldr	r3, [pc, #44]	; (93d4 <motor_status_monitor+0x3c>)
    93a6:	4798      	blx	r3
    93a8:	1c02      	adds	r2, r0, #0
    93aa:	4b0b      	ldr	r3, [pc, #44]	; (93d8 <motor_status_monitor+0x40>)
    93ac:	490b      	ldr	r1, [pc, #44]	; (93dc <motor_status_monitor+0x44>)
    93ae:	1c10      	adds	r0, r2, #0
    93b0:	4798      	blx	r3
    93b2:	1e03      	subs	r3, r0, #0
    93b4:	d004      	beq.n	93c0 <motor_status_monitor+0x28>
	{
		set_alarm(ALARM_MOTOR_TEMP, true);
    93b6:	2101      	movs	r1, #1
    93b8:	2004      	movs	r0, #4
    93ba:	4b05      	ldr	r3, [pc, #20]	; (93d0 <motor_status_monitor+0x38>)
    93bc:	4798      	blx	r3
	}
	else
	{
		set_alarm(ALARM_MOTOR_TEMP, false);
	}
 }
    93be:	e003      	b.n	93c8 <motor_status_monitor+0x30>
		set_alarm(ALARM_MOTOR_TEMP, false);
    93c0:	2100      	movs	r1, #0
    93c2:	2004      	movs	r0, #4
    93c4:	4b02      	ldr	r3, [pc, #8]	; (93d0 <motor_status_monitor+0x38>)
    93c6:	4798      	blx	r3
 }
    93c8:	46c0      	nop			; (mov r8, r8)
    93ca:	46bd      	mov	sp, r7
    93cc:	bd80      	pop	{r7, pc}
    93ce:	46c0      	nop			; (mov r8, r8)
    93d0:	00007bf1 	.word	0x00007bf1
    93d4:	00007be5 	.word	0x00007be5
    93d8:	000100ad 	.word	0x000100ad
    93dc:	42c80000 	.word	0x42c80000

000093e0 <enable_motor>:

 void enable_motor(void)
 {
    93e0:	b580      	push	{r7, lr}
    93e2:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, MOTOR_ENABLE_ACTIVE_LEVEL);
    93e4:	2101      	movs	r1, #1
    93e6:	2000      	movs	r0, #0
    93e8:	4b02      	ldr	r3, [pc, #8]	; (93f4 <enable_motor+0x14>)
    93ea:	4798      	blx	r3
 }
    93ec:	46c0      	nop			; (mov r8, r8)
    93ee:	46bd      	mov	sp, r7
    93f0:	bd80      	pop	{r7, pc}
    93f2:	46c0      	nop			; (mov r8, r8)
    93f4:	000092d9 	.word	0x000092d9

000093f8 <disable_motor>:

 void disable_motor(void)
 {
    93f8:	b580      	push	{r7, lr}
    93fa:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    93fc:	2100      	movs	r1, #0
    93fe:	2000      	movs	r0, #0
    9400:	4b02      	ldr	r3, [pc, #8]	; (940c <disable_motor+0x14>)
    9402:	4798      	blx	r3
 }
    9404:	46c0      	nop			; (mov r8, r8)
    9406:	46bd      	mov	sp, r7
    9408:	bd80      	pop	{r7, pc}
    940a:	46c0      	nop			; (mov r8, r8)
    940c:	000092d9 	.word	0x000092d9

00009410 <drive_motor>:

 float drive_motor(float command)
 {
    9410:	b5f0      	push	{r4, r5, r6, r7, lr}
    9412:	b087      	sub	sp, #28
    9414:	af00      	add	r7, sp, #0
    9416:	60f8      	str	r0, [r7, #12]
	if(command< 0.0)
    9418:	4b3f      	ldr	r3, [pc, #252]	; (9518 <drive_motor+0x108>)
    941a:	2100      	movs	r1, #0
    941c:	68f8      	ldr	r0, [r7, #12]
    941e:	4798      	blx	r3
    9420:	1e03      	subs	r3, r0, #0
    9422:	d001      	beq.n	9428 <drive_motor+0x18>
	{
		command = 0.00001;
    9424:	4b3d      	ldr	r3, [pc, #244]	; (951c <drive_motor+0x10c>)
    9426:	60fb      	str	r3, [r7, #12]
	}
	if(command > 1.0)
    9428:	4b3d      	ldr	r3, [pc, #244]	; (9520 <drive_motor+0x110>)
    942a:	21fe      	movs	r1, #254	; 0xfe
    942c:	0589      	lsls	r1, r1, #22
    942e:	68f8      	ldr	r0, [r7, #12]
    9430:	4798      	blx	r3
    9432:	1e03      	subs	r3, r0, #0
    9434:	d001      	beq.n	943a <drive_motor+0x2a>
	{
		command = 0.9999;
    9436:	4b3b      	ldr	r3, [pc, #236]	; (9524 <drive_motor+0x114>)
    9438:	60fb      	str	r3, [r7, #12]
	}

	static float command_filt = 0.0;
	float alpha = 0.8;
    943a:	4b3b      	ldr	r3, [pc, #236]	; (9528 <drive_motor+0x118>)
    943c:	617b      	str	r3, [r7, #20]

	command_filt = alpha * command_filt + (1.0-alpha) * command;
    943e:	4b3b      	ldr	r3, [pc, #236]	; (952c <drive_motor+0x11c>)
    9440:	681a      	ldr	r2, [r3, #0]
    9442:	4b3b      	ldr	r3, [pc, #236]	; (9530 <drive_motor+0x120>)
    9444:	6979      	ldr	r1, [r7, #20]
    9446:	1c10      	adds	r0, r2, #0
    9448:	4798      	blx	r3
    944a:	1c03      	adds	r3, r0, #0
    944c:	1c1a      	adds	r2, r3, #0
    944e:	4b39      	ldr	r3, [pc, #228]	; (9534 <drive_motor+0x124>)
    9450:	1c10      	adds	r0, r2, #0
    9452:	4798      	blx	r3
    9454:	0005      	movs	r5, r0
    9456:	000e      	movs	r6, r1
    9458:	4b36      	ldr	r3, [pc, #216]	; (9534 <drive_motor+0x124>)
    945a:	6978      	ldr	r0, [r7, #20]
    945c:	4798      	blx	r3
    945e:	0002      	movs	r2, r0
    9460:	000b      	movs	r3, r1
    9462:	4c35      	ldr	r4, [pc, #212]	; (9538 <drive_motor+0x128>)
    9464:	2000      	movs	r0, #0
    9466:	4935      	ldr	r1, [pc, #212]	; (953c <drive_motor+0x12c>)
    9468:	47a0      	blx	r4
    946a:	0003      	movs	r3, r0
    946c:	000c      	movs	r4, r1
    946e:	603b      	str	r3, [r7, #0]
    9470:	607c      	str	r4, [r7, #4]
    9472:	4b30      	ldr	r3, [pc, #192]	; (9534 <drive_motor+0x124>)
    9474:	68f8      	ldr	r0, [r7, #12]
    9476:	4798      	blx	r3
    9478:	0002      	movs	r2, r0
    947a:	000b      	movs	r3, r1
    947c:	4c30      	ldr	r4, [pc, #192]	; (9540 <drive_motor+0x130>)
    947e:	6838      	ldr	r0, [r7, #0]
    9480:	6879      	ldr	r1, [r7, #4]
    9482:	47a0      	blx	r4
    9484:	0003      	movs	r3, r0
    9486:	000c      	movs	r4, r1
    9488:	001a      	movs	r2, r3
    948a:	0023      	movs	r3, r4
    948c:	4c2d      	ldr	r4, [pc, #180]	; (9544 <drive_motor+0x134>)
    948e:	0028      	movs	r0, r5
    9490:	0031      	movs	r1, r6
    9492:	47a0      	blx	r4
    9494:	0003      	movs	r3, r0
    9496:	000c      	movs	r4, r1
    9498:	0019      	movs	r1, r3
    949a:	0022      	movs	r2, r4
    949c:	4b2a      	ldr	r3, [pc, #168]	; (9548 <drive_motor+0x138>)
    949e:	0008      	movs	r0, r1
    94a0:	0011      	movs	r1, r2
    94a2:	4798      	blx	r3
    94a4:	1c02      	adds	r2, r0, #0
    94a6:	4b21      	ldr	r3, [pc, #132]	; (952c <drive_motor+0x11c>)
    94a8:	601a      	str	r2, [r3, #0]

	uint16_t dac_out = (uint16_t) (command_filt * 1023.0);
    94aa:	4b20      	ldr	r3, [pc, #128]	; (952c <drive_motor+0x11c>)
    94ac:	681a      	ldr	r2, [r3, #0]
    94ae:	4b21      	ldr	r3, [pc, #132]	; (9534 <drive_motor+0x124>)
    94b0:	1c10      	adds	r0, r2, #0
    94b2:	4798      	blx	r3
    94b4:	4c22      	ldr	r4, [pc, #136]	; (9540 <drive_motor+0x130>)
    94b6:	2200      	movs	r2, #0
    94b8:	4b24      	ldr	r3, [pc, #144]	; (954c <drive_motor+0x13c>)
    94ba:	47a0      	blx	r4
    94bc:	0003      	movs	r3, r0
    94be:	000c      	movs	r4, r1
    94c0:	0019      	movs	r1, r3
    94c2:	0022      	movs	r2, r4
    94c4:	230a      	movs	r3, #10
    94c6:	2008      	movs	r0, #8
    94c8:	1838      	adds	r0, r7, r0
    94ca:	18c4      	adds	r4, r0, r3
    94cc:	4b20      	ldr	r3, [pc, #128]	; (9550 <drive_motor+0x140>)
    94ce:	0008      	movs	r0, r1
    94d0:	0011      	movs	r1, r2
    94d2:	4798      	blx	r3
    94d4:	0003      	movs	r3, r0
    94d6:	8023      	strh	r3, [r4, #0]
	dac_out &= (0x3ff);
    94d8:	230a      	movs	r3, #10
    94da:	2208      	movs	r2, #8
    94dc:	4694      	mov	ip, r2
    94de:	44bc      	add	ip, r7
    94e0:	4463      	add	r3, ip
    94e2:	220a      	movs	r2, #10
    94e4:	2108      	movs	r1, #8
    94e6:	468c      	mov	ip, r1
    94e8:	44bc      	add	ip, r7
    94ea:	4462      	add	r2, ip
    94ec:	8812      	ldrh	r2, [r2, #0]
    94ee:	0592      	lsls	r2, r2, #22
    94f0:	0d92      	lsrs	r2, r2, #22
    94f2:	801a      	strh	r2, [r3, #0]
	dac_chan_write(&module, DAC_CHANNEL_0, dac_out);
    94f4:	230a      	movs	r3, #10
    94f6:	2208      	movs	r2, #8
    94f8:	4694      	mov	ip, r2
    94fa:	44bc      	add	ip, r7
    94fc:	4463      	add	r3, ip
    94fe:	881a      	ldrh	r2, [r3, #0]
    9500:	4b14      	ldr	r3, [pc, #80]	; (9554 <drive_motor+0x144>)
    9502:	2100      	movs	r1, #0
    9504:	0018      	movs	r0, r3
    9506:	4b14      	ldr	r3, [pc, #80]	; (9558 <drive_motor+0x148>)
    9508:	4798      	blx	r3
	return command_filt;
    950a:	4b08      	ldr	r3, [pc, #32]	; (952c <drive_motor+0x11c>)
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	1c18      	adds	r0, r3, #0
    9510:	46bd      	mov	sp, r7
    9512:	b007      	add	sp, #28
    9514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9516:	46c0      	nop			; (mov r8, r8)
    9518:	00010085 	.word	0x00010085
    951c:	3727c5ac 	.word	0x3727c5ac
    9520:	000100ad 	.word	0x000100ad
    9524:	3f7ff972 	.word	0x3f7ff972
    9528:	3f4ccccd 	.word	0x3f4ccccd
    952c:	20003954 	.word	0x20003954
    9530:	00010ad5 	.word	0x00010ad5
    9534:	00012a3d 	.word	0x00012a3d
    9538:	000122b5 	.word	0x000122b5
    953c:	3ff00000 	.word	0x3ff00000
    9540:	00011db5 	.word	0x00011db5
    9544:	0001112d 	.word	0x0001112d
    9548:	00012ae1 	.word	0x00012ae1
    954c:	408ff800 	.word	0x408ff800
    9550:	00010215 	.word	0x00010215
    9554:	20003930 	.word	0x20003930
    9558:	000028c9 	.word	0x000028c9

0000955c <system_interrupt_enable>:
{
    955c:	b580      	push	{r7, lr}
    955e:	b082      	sub	sp, #8
    9560:	af00      	add	r7, sp, #0
    9562:	0002      	movs	r2, r0
    9564:	1dfb      	adds	r3, r7, #7
    9566:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9568:	4b06      	ldr	r3, [pc, #24]	; (9584 <system_interrupt_enable+0x28>)
    956a:	1dfa      	adds	r2, r7, #7
    956c:	7812      	ldrb	r2, [r2, #0]
    956e:	0011      	movs	r1, r2
    9570:	221f      	movs	r2, #31
    9572:	400a      	ands	r2, r1
    9574:	2101      	movs	r1, #1
    9576:	4091      	lsls	r1, r2
    9578:	000a      	movs	r2, r1
    957a:	601a      	str	r2, [r3, #0]
}
    957c:	46c0      	nop			; (mov r8, r8)
    957e:	46bd      	mov	sp, r7
    9580:	b002      	add	sp, #8
    9582:	bd80      	pop	{r7, pc}
    9584:	e000e100 	.word	0xe000e100

00009588 <spi_is_syncing>:
{
    9588:	b580      	push	{r7, lr}
    958a:	b084      	sub	sp, #16
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9590:	687b      	ldr	r3, [r7, #4]
    9592:	681b      	ldr	r3, [r3, #0]
    9594:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    9596:	68fb      	ldr	r3, [r7, #12]
    9598:	69db      	ldr	r3, [r3, #28]
    959a:	1e5a      	subs	r2, r3, #1
    959c:	4193      	sbcs	r3, r2
    959e:	b2db      	uxtb	r3, r3
}
    95a0:	0018      	movs	r0, r3
    95a2:	46bd      	mov	sp, r7
    95a4:	b004      	add	sp, #16
    95a6:	bd80      	pop	{r7, pc}

000095a8 <spi_get_config_defaults>:
{
    95a8:	b580      	push	{r7, lr}
    95aa:	b082      	sub	sp, #8
    95ac:	af00      	add	r7, sp, #0
    95ae:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	2201      	movs	r2, #1
    95b4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	2200      	movs	r2, #0
    95ba:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	2200      	movs	r2, #0
    95c0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    95c2:	687b      	ldr	r3, [r7, #4]
    95c4:	22c0      	movs	r2, #192	; 0xc0
    95c6:	0392      	lsls	r2, r2, #14
    95c8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	2200      	movs	r2, #0
    95ce:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    95d0:	687b      	ldr	r3, [r7, #4]
    95d2:	2200      	movs	r2, #0
    95d4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	2201      	movs	r2, #1
    95da:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    95dc:	687b      	ldr	r3, [r7, #4]
    95de:	2201      	movs	r2, #1
    95e0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    95e2:	687b      	ldr	r3, [r7, #4]
    95e4:	2200      	movs	r2, #0
    95e6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	2224      	movs	r2, #36	; 0x24
    95ec:	2100      	movs	r1, #0
    95ee:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    95f0:	687b      	ldr	r3, [r7, #4]
    95f2:	3318      	adds	r3, #24
    95f4:	220c      	movs	r2, #12
    95f6:	2100      	movs	r1, #0
    95f8:	0018      	movs	r0, r3
    95fa:	4b0a      	ldr	r3, [pc, #40]	; (9624 <spi_get_config_defaults+0x7c>)
    95fc:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	4a09      	ldr	r2, [pc, #36]	; (9628 <spi_get_config_defaults+0x80>)
    9602:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	2200      	movs	r2, #0
    9608:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	2200      	movs	r2, #0
    960e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	2200      	movs	r2, #0
    9614:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	2200      	movs	r2, #0
    961a:	635a      	str	r2, [r3, #52]	; 0x34
};
    961c:	46c0      	nop			; (mov r8, r8)
    961e:	46bd      	mov	sp, r7
    9620:	b002      	add	sp, #8
    9622:	bd80      	pop	{r7, pc}
    9624:	00012ee3 	.word	0x00012ee3
    9628:	000186a0 	.word	0x000186a0

0000962c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    962c:	b580      	push	{r7, lr}
    962e:	b084      	sub	sp, #16
    9630:	af00      	add	r7, sp, #0
    9632:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	681b      	ldr	r3, [r3, #0]
    9638:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    963a:	687b      	ldr	r3, [r7, #4]
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	0018      	movs	r0, r3
    9640:	4b0b      	ldr	r3, [pc, #44]	; (9670 <spi_enable+0x44>)
    9642:	4798      	blx	r3
    9644:	0003      	movs	r3, r0
    9646:	0018      	movs	r0, r3
    9648:	4b0a      	ldr	r3, [pc, #40]	; (9674 <spi_enable+0x48>)
    964a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    964c:	46c0      	nop			; (mov r8, r8)
    964e:	687b      	ldr	r3, [r7, #4]
    9650:	0018      	movs	r0, r3
    9652:	4b09      	ldr	r3, [pc, #36]	; (9678 <spi_enable+0x4c>)
    9654:	4798      	blx	r3
    9656:	1e03      	subs	r3, r0, #0
    9658:	d1f9      	bne.n	964e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	681b      	ldr	r3, [r3, #0]
    965e:	2202      	movs	r2, #2
    9660:	431a      	orrs	r2, r3
    9662:	68fb      	ldr	r3, [r7, #12]
    9664:	601a      	str	r2, [r3, #0]
}
    9666:	46c0      	nop			; (mov r8, r8)
    9668:	46bd      	mov	sp, r7
    966a:	b004      	add	sp, #16
    966c:	bd80      	pop	{r7, pc}
    966e:	46c0      	nop			; (mov r8, r8)
    9670:	0000e225 	.word	0x0000e225
    9674:	0000955d 	.word	0x0000955d
    9678:	00009589 	.word	0x00009589

0000967c <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
    967c:	b580      	push	{r7, lr}
    967e:	b082      	sub	sp, #8
    9680:	af00      	add	r7, sp, #0
    9682:	6078      	str	r0, [r7, #4]
    9684:	000a      	movs	r2, r1
    9686:	1cfb      	adds	r3, r7, #3
    9688:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    968a:	687b      	ldr	r3, [r7, #4]
    968c:	2237      	movs	r2, #55	; 0x37
    968e:	5c9b      	ldrb	r3, [r3, r2]
    9690:	b25a      	sxtb	r2, r3
    9692:	1cfb      	adds	r3, r7, #3
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	2101      	movs	r1, #1
    9698:	4099      	lsls	r1, r3
    969a:	000b      	movs	r3, r1
    969c:	b25b      	sxtb	r3, r3
    969e:	4313      	orrs	r3, r2
    96a0:	b25b      	sxtb	r3, r3
    96a2:	b2d9      	uxtb	r1, r3
    96a4:	687b      	ldr	r3, [r7, #4]
    96a6:	2237      	movs	r2, #55	; 0x37
    96a8:	5499      	strb	r1, [r3, r2]
}
    96aa:	46c0      	nop			; (mov r8, r8)
    96ac:	46bd      	mov	sp, r7
    96ae:	b002      	add	sp, #8
    96b0:	bd80      	pop	{r7, pc}
	...

000096b4 <callback_spi_master>:
 static volatile uint8_t rx_buffer[MAX_BUFFER_SIZE];

 static volatile spi_transaction_t current_transaction;

 static void callback_spi_master( struct spi_module *const module)
 {
    96b4:	b580      	push	{r7, lr}
    96b6:	b082      	sub	sp, #8
    96b8:	af00      	add	r7, sp, #0
    96ba:	6078      	str	r0, [r7, #4]
	 spi_select_slave(module, &current_transaction.slave_device, false);
    96bc:	4908      	ldr	r1, [pc, #32]	; (96e0 <callback_spi_master+0x2c>)
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	2200      	movs	r2, #0
    96c2:	0018      	movs	r0, r3
    96c4:	4b07      	ldr	r3, [pc, #28]	; (96e4 <callback_spi_master+0x30>)
    96c6:	4798      	blx	r3
	 // callback
	 current_transaction.cb(rx_buffer, current_transaction.buffer_length);
    96c8:	4b05      	ldr	r3, [pc, #20]	; (96e0 <callback_spi_master+0x2c>)
    96ca:	68da      	ldr	r2, [r3, #12]
    96cc:	4b04      	ldr	r3, [pc, #16]	; (96e0 <callback_spi_master+0x2c>)
    96ce:	6899      	ldr	r1, [r3, #8]
    96d0:	4b05      	ldr	r3, [pc, #20]	; (96e8 <callback_spi_master+0x34>)
    96d2:	0018      	movs	r0, r3
    96d4:	4790      	blx	r2
 }
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	46bd      	mov	sp, r7
    96da:	b002      	add	sp, #8
    96dc:	bd80      	pop	{r7, pc}
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	20003a14 	.word	0x20003a14
    96e4:	0000d81d 	.word	0x0000d81d
    96e8:	200039d4 	.word	0x200039d4

000096ec <spi_interface_init>:

 void spi_interface_init(void)
 {
    96ec:	b580      	push	{r7, lr}
    96ee:	b08e      	sub	sp, #56	; 0x38
    96f0:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    96f2:	003b      	movs	r3, r7
    96f4:	0018      	movs	r0, r3
    96f6:	4b1b      	ldr	r3, [pc, #108]	; (9764 <spi_interface_init+0x78>)
    96f8:	4798      	blx	r3
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_C; // MOSI [0], SCK [1], MISO [2]
    96fa:	003b      	movs	r3, r7
    96fc:	2280      	movs	r2, #128	; 0x80
    96fe:	0392      	lsls	r2, r2, #14
    9700:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = FRAM_MOSI_PINMUX;
    9702:	003b      	movs	r3, r7
    9704:	2280      	movs	r2, #128	; 0x80
    9706:	0052      	lsls	r2, r2, #1
    9708:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = FRAM_SCK_PINMUX;
    970a:	003b      	movs	r3, r7
    970c:	2280      	movs	r2, #128	; 0x80
    970e:	0092      	lsls	r2, r2, #2
    9710:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = FRAM_MISO_PINMUX;
    9712:	003b      	movs	r3, r7
    9714:	2280      	movs	r2, #128	; 0x80
    9716:	00d2      	lsls	r2, r2, #3
    9718:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
    971a:	003b      	movs	r3, r7
    971c:	2201      	movs	r2, #1
    971e:	4252      	negs	r2, r2
    9720:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.generator_source = GCLK_GENERATOR_0; // 48MHz
    9722:	003b      	movs	r3, r7
    9724:	2224      	movs	r2, #36	; 0x24
    9726:	2100      	movs	r1, #0
    9728:	5499      	strb	r1, [r3, r2]
	config_spi_master.mode_specific.master.baudrate = 2000000; // 2MHz, FRAM can handle 20 MHz
    972a:	003b      	movs	r3, r7
    972c:	4a0e      	ldr	r2, [pc, #56]	; (9768 <spi_interface_init+0x7c>)
    972e:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, SPI_SERCOM, &config_spi_master);
    9730:	003a      	movs	r2, r7
    9732:	490e      	ldr	r1, [pc, #56]	; (976c <spi_interface_init+0x80>)
    9734:	4b0e      	ldr	r3, [pc, #56]	; (9770 <spi_interface_init+0x84>)
    9736:	0018      	movs	r0, r3
    9738:	4b0e      	ldr	r3, [pc, #56]	; (9774 <spi_interface_init+0x88>)
    973a:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    973c:	4b0c      	ldr	r3, [pc, #48]	; (9770 <spi_interface_init+0x84>)
    973e:	0018      	movs	r0, r3
    9740:	4b0d      	ldr	r3, [pc, #52]	; (9778 <spi_interface_init+0x8c>)
    9742:	4798      	blx	r3

	// Set up callbacks
	spi_register_callback(&spi_master_instance, callback_spi_master,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    9744:	490d      	ldr	r1, [pc, #52]	; (977c <spi_interface_init+0x90>)
    9746:	4b0a      	ldr	r3, [pc, #40]	; (9770 <spi_interface_init+0x84>)
    9748:	2202      	movs	r2, #2
    974a:	0018      	movs	r0, r3
    974c:	4b0c      	ldr	r3, [pc, #48]	; (9780 <spi_interface_init+0x94>)
    974e:	4798      	blx	r3
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    9750:	4b07      	ldr	r3, [pc, #28]	; (9770 <spi_interface_init+0x84>)
    9752:	2102      	movs	r1, #2
    9754:	0018      	movs	r0, r3
    9756:	4b0b      	ldr	r3, [pc, #44]	; (9784 <spi_interface_init+0x98>)
    9758:	4798      	blx	r3

	// Note: first spi seems to fail...
	//spi_write(&spi_master_instance, 0);
 }
    975a:	46c0      	nop			; (mov r8, r8)
    975c:	46bd      	mov	sp, r7
    975e:	b00e      	add	sp, #56	; 0x38
    9760:	bd80      	pop	{r7, pc}
    9762:	46c0      	nop			; (mov r8, r8)
    9764:	000095a9 	.word	0x000095a9
    9768:	001e8480 	.word	0x001e8480
    976c:	42000800 	.word	0x42000800
    9770:	20003958 	.word	0x20003958
    9774:	0000d679 	.word	0x0000d679
    9778:	0000962d 	.word	0x0000962d
    977c:	000096b5 	.word	0x000096b5
    9780:	0000d971 	.word	0x0000d971
    9784:	0000967d 	.word	0x0000967d

00009788 <spi_transact>:

 bool spi_transact(spi_transaction_t transaction)
 {
    9788:	b590      	push	{r4, r7, lr}
    978a:	b085      	sub	sp, #20
    978c:	af00      	add	r7, sp, #0
    978e:	003c      	movs	r4, r7
    9790:	6020      	str	r0, [r4, #0]
    9792:	6061      	str	r1, [r4, #4]
    9794:	60a2      	str	r2, [r4, #8]
    9796:	60e3      	str	r3, [r4, #12]
	if(current_transaction.buffer_length > MAX_BUFFER_SIZE )
    9798:	4b13      	ldr	r3, [pc, #76]	; (97e8 <spi_transact+0x60>)
    979a:	689b      	ldr	r3, [r3, #8]
    979c:	2b40      	cmp	r3, #64	; 0x40
    979e:	d901      	bls.n	97a4 <spi_transact+0x1c>
	{
		return false;
    97a0:	2300      	movs	r3, #0
    97a2:	e01c      	b.n	97de <spi_transact+0x56>
	}

	current_transaction = transaction;
    97a4:	4b10      	ldr	r3, [pc, #64]	; (97e8 <spi_transact+0x60>)
    97a6:	003a      	movs	r2, r7
    97a8:	ca13      	ldmia	r2!, {r0, r1, r4}
    97aa:	c313      	stmia	r3!, {r0, r1, r4}
    97ac:	6812      	ldr	r2, [r2, #0]
    97ae:	601a      	str	r2, [r3, #0]
	memcpy(tx_buffer, current_transaction.tx_buff, current_transaction.buffer_length);
    97b0:	4b0d      	ldr	r3, [pc, #52]	; (97e8 <spi_transact+0x60>)
    97b2:	6859      	ldr	r1, [r3, #4]
    97b4:	4b0c      	ldr	r3, [pc, #48]	; (97e8 <spi_transact+0x60>)
    97b6:	689a      	ldr	r2, [r3, #8]
    97b8:	4b0c      	ldr	r3, [pc, #48]	; (97ec <spi_transact+0x64>)
    97ba:	0018      	movs	r0, r3
    97bc:	4b0c      	ldr	r3, [pc, #48]	; (97f0 <spi_transact+0x68>)
    97be:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &current_transaction.slave_device, true);
    97c0:	4909      	ldr	r1, [pc, #36]	; (97e8 <spi_transact+0x60>)
    97c2:	4b0c      	ldr	r3, [pc, #48]	; (97f4 <spi_transact+0x6c>)
    97c4:	2201      	movs	r2, #1
    97c6:	0018      	movs	r0, r3
    97c8:	4b0b      	ldr	r3, [pc, #44]	; (97f8 <spi_transact+0x70>)
    97ca:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_instance, tx_buffer, rx_buffer, current_transaction.buffer_length);
    97cc:	4b06      	ldr	r3, [pc, #24]	; (97e8 <spi_transact+0x60>)
    97ce:	689b      	ldr	r3, [r3, #8]
    97d0:	b29b      	uxth	r3, r3
    97d2:	4a0a      	ldr	r2, [pc, #40]	; (97fc <spi_transact+0x74>)
    97d4:	4905      	ldr	r1, [pc, #20]	; (97ec <spi_transact+0x64>)
    97d6:	4807      	ldr	r0, [pc, #28]	; (97f4 <spi_transact+0x6c>)
    97d8:	4c09      	ldr	r4, [pc, #36]	; (9800 <spi_transact+0x78>)
    97da:	47a0      	blx	r4
	return true;
    97dc:	2301      	movs	r3, #1
    97de:	0018      	movs	r0, r3
    97e0:	46bd      	mov	sp, r7
    97e2:	b005      	add	sp, #20
    97e4:	bd90      	pop	{r4, r7, pc}
    97e6:	46c0      	nop			; (mov r8, r8)
    97e8:	20003a14 	.word	0x20003a14
    97ec:	20003994 	.word	0x20003994
    97f0:	00012ed1 	.word	0x00012ed1
    97f4:	20003958 	.word	0x20003958
    97f8:	0000d81d 	.word	0x0000d81d
    97fc:	200039d4 	.word	0x200039d4
    9800:	0000d9b9 	.word	0x0000d9b9

00009804 <usb_interface_init>:
 #include "usb_interface.h"

 static volatile bool authorize_cdc_transfer = false;

 void usb_interface_init(void)
 {
    9804:	b580      	push	{r7, lr}
    9806:	af00      	add	r7, sp, #0
	udc_start();
    9808:	4b02      	ldr	r3, [pc, #8]	; (9814 <usb_interface_init+0x10>)
    980a:	4798      	blx	r3
 }
    980c:	46c0      	nop			; (mov r8, r8)
    980e:	46bd      	mov	sp, r7
    9810:	bd80      	pop	{r7, pc}
    9812:	46c0      	nop			; (mov r8, r8)
    9814:	000010a1 	.word	0x000010a1

00009818 <usb_transmit_control>:

 void usb_transmit_control(lcv_control_t * control_params, float output)
 {
    9818:	b580      	push	{r7, lr}
    981a:	b088      	sub	sp, #32
    981c:	af00      	add	r7, sp, #0
    981e:	6078      	str	r0, [r7, #4]
    9820:	6039      	str	r1, [r7, #0]
	int32_t i;
	if(authorize_cdc_transfer)
    9822:	4b29      	ldr	r3, [pc, #164]	; (98c8 <usb_transmit_control+0xb0>)
    9824:	781b      	ldrb	r3, [r3, #0]
    9826:	b2db      	uxtb	r3, r3
    9828:	2b00      	cmp	r3, #0
    982a:	d048      	beq.n	98be <usb_transmit_control+0xa6>
	{
		// send it
		uint8_t buffer[14];
		buffer[0] = USB_MAGIC_BYTE;
    982c:	230c      	movs	r3, #12
    982e:	18fb      	adds	r3, r7, r3
    9830:	225e      	movs	r2, #94	; 0x5e
    9832:	701a      	strb	r2, [r3, #0]
		memcpy(&buffer[1], &control_params->pressure_current_cm_h20, 4);
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	3314      	adds	r3, #20
    9838:	0019      	movs	r1, r3
    983a:	230c      	movs	r3, #12
    983c:	18fb      	adds	r3, r7, r3
    983e:	3301      	adds	r3, #1
    9840:	2204      	movs	r2, #4
    9842:	0018      	movs	r0, r3
    9844:	4b21      	ldr	r3, [pc, #132]	; (98cc <usb_transmit_control+0xb4>)
    9846:	4798      	blx	r3
		memcpy(&buffer[5], &control_params->pressure_set_point_cm_h20, 4);
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	3310      	adds	r3, #16
    984c:	0019      	movs	r1, r3
    984e:	230c      	movs	r3, #12
    9850:	18fb      	adds	r3, r7, r3
    9852:	3305      	adds	r3, #5
    9854:	2204      	movs	r2, #4
    9856:	0018      	movs	r0, r3
    9858:	4b1c      	ldr	r3, [pc, #112]	; (98cc <usb_transmit_control+0xb4>)
    985a:	4798      	blx	r3
		memcpy(&buffer[9], &output, 4);
    985c:	0039      	movs	r1, r7
    985e:	230c      	movs	r3, #12
    9860:	18fb      	adds	r3, r7, r3
    9862:	3309      	adds	r3, #9
    9864:	2204      	movs	r2, #4
    9866:	0018      	movs	r0, r3
    9868:	4b18      	ldr	r3, [pc, #96]	; (98cc <usb_transmit_control+0xb4>)
    986a:	4798      	blx	r3
		buffer[13] = 0;
    986c:	230c      	movs	r3, #12
    986e:	18fb      	adds	r3, r7, r3
    9870:	2200      	movs	r2, #0
    9872:	735a      	strb	r2, [r3, #13]
		for(i = 1; i < 13; i++)
    9874:	2301      	movs	r3, #1
    9876:	61fb      	str	r3, [r7, #28]
    9878:	e00f      	b.n	989a <usb_transmit_control+0x82>
		{
			buffer[13] += buffer[i];
    987a:	230c      	movs	r3, #12
    987c:	18fb      	adds	r3, r7, r3
    987e:	7b5a      	ldrb	r2, [r3, #13]
    9880:	230c      	movs	r3, #12
    9882:	18f9      	adds	r1, r7, r3
    9884:	69fb      	ldr	r3, [r7, #28]
    9886:	18cb      	adds	r3, r1, r3
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	18d3      	adds	r3, r2, r3
    988c:	b2da      	uxtb	r2, r3
    988e:	230c      	movs	r3, #12
    9890:	18fb      	adds	r3, r7, r3
    9892:	735a      	strb	r2, [r3, #13]
		for(i = 1; i < 13; i++)
    9894:	69fb      	ldr	r3, [r7, #28]
    9896:	3301      	adds	r3, #1
    9898:	61fb      	str	r3, [r7, #28]
    989a:	69fb      	ldr	r3, [r7, #28]
    989c:	2b0c      	cmp	r3, #12
    989e:	ddec      	ble.n	987a <usb_transmit_control+0x62>
		}

		
		if(udi_cdc_is_tx_ready() && udi_cdc_get_free_tx_buffer() >= 14)
    98a0:	4b0b      	ldr	r3, [pc, #44]	; (98d0 <usb_transmit_control+0xb8>)
    98a2:	4798      	blx	r3
    98a4:	1e03      	subs	r3, r0, #0
    98a6:	d00a      	beq.n	98be <usb_transmit_control+0xa6>
    98a8:	4b0a      	ldr	r3, [pc, #40]	; (98d4 <usb_transmit_control+0xbc>)
    98aa:	4798      	blx	r3
    98ac:	0003      	movs	r3, r0
    98ae:	2b0d      	cmp	r3, #13
    98b0:	d905      	bls.n	98be <usb_transmit_control+0xa6>
		{
			udi_cdc_write_buf(buffer, 14);
    98b2:	230c      	movs	r3, #12
    98b4:	18fb      	adds	r3, r7, r3
    98b6:	210e      	movs	r1, #14
    98b8:	0018      	movs	r0, r3
    98ba:	4b07      	ldr	r3, [pc, #28]	; (98d8 <usb_transmit_control+0xc0>)
    98bc:	4798      	blx	r3
		}
	}
 }
    98be:	46c0      	nop			; (mov r8, r8)
    98c0:	46bd      	mov	sp, r7
    98c2:	b008      	add	sp, #32
    98c4:	bd80      	pop	{r7, pc}
    98c6:	46c0      	nop			; (mov r8, r8)
    98c8:	20003a24 	.word	0x20003a24
    98cc:	00012ed1 	.word	0x00012ed1
    98d0:	00000c71 	.word	0x00000c71
    98d4:	00000c2d 	.word	0x00000c2d
    98d8:	00000ded 	.word	0x00000ded

000098dc <my_callback_cdc_enable>:

 bool my_callback_cdc_enable(void)
 {
    98dc:	b580      	push	{r7, lr}
    98de:	af00      	add	r7, sp, #0
	 authorize_cdc_transfer = true;
    98e0:	4b03      	ldr	r3, [pc, #12]	; (98f0 <my_callback_cdc_enable+0x14>)
    98e2:	2201      	movs	r2, #1
    98e4:	701a      	strb	r2, [r3, #0]
	 return true;
    98e6:	2301      	movs	r3, #1
 }
    98e8:	0018      	movs	r0, r3
    98ea:	46bd      	mov	sp, r7
    98ec:	bd80      	pop	{r7, pc}
    98ee:	46c0      	nop			; (mov r8, r8)
    98f0:	20003a24 	.word	0x20003a24

000098f4 <my_callback_cdc_disable>:

 void my_callback_cdc_disable(void)
 {
    98f4:	b580      	push	{r7, lr}
    98f6:	af00      	add	r7, sp, #0
	 authorize_cdc_transfer = false;
    98f8:	4b02      	ldr	r3, [pc, #8]	; (9904 <my_callback_cdc_disable+0x10>)
    98fa:	2200      	movs	r2, #0
    98fc:	701a      	strb	r2, [r3, #0]
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	46bd      	mov	sp, r7
    9902:	bd80      	pop	{r7, pc}
    9904:	20003a24 	.word	0x20003a24

00009908 <arch_ioport_pin_to_port_id>:
{
    9908:	b580      	push	{r7, lr}
    990a:	b082      	sub	sp, #8
    990c:	af00      	add	r7, sp, #0
    990e:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	095b      	lsrs	r3, r3, #5
}
    9914:	0018      	movs	r0, r3
    9916:	46bd      	mov	sp, r7
    9918:	b002      	add	sp, #8
    991a:	bd80      	pop	{r7, pc}

0000991c <arch_ioport_port_to_base>:
{
    991c:	b580      	push	{r7, lr}
    991e:	b082      	sub	sp, #8
    9920:	af00      	add	r7, sp, #0
    9922:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	01db      	lsls	r3, r3, #7
    9928:	4a03      	ldr	r2, [pc, #12]	; (9938 <arch_ioport_port_to_base+0x1c>)
    992a:	4694      	mov	ip, r2
    992c:	4463      	add	r3, ip
}
    992e:	0018      	movs	r0, r3
    9930:	46bd      	mov	sp, r7
    9932:	b002      	add	sp, #8
    9934:	bd80      	pop	{r7, pc}
    9936:	46c0      	nop			; (mov r8, r8)
    9938:	41004400 	.word	0x41004400

0000993c <arch_ioport_pin_to_base>:
{
    993c:	b580      	push	{r7, lr}
    993e:	b082      	sub	sp, #8
    9940:	af00      	add	r7, sp, #0
    9942:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    9944:	687b      	ldr	r3, [r7, #4]
    9946:	0018      	movs	r0, r3
    9948:	4b05      	ldr	r3, [pc, #20]	; (9960 <arch_ioport_pin_to_base+0x24>)
    994a:	4798      	blx	r3
    994c:	0003      	movs	r3, r0
    994e:	0018      	movs	r0, r3
    9950:	4b04      	ldr	r3, [pc, #16]	; (9964 <arch_ioport_pin_to_base+0x28>)
    9952:	4798      	blx	r3
    9954:	0003      	movs	r3, r0
}
    9956:	0018      	movs	r0, r3
    9958:	46bd      	mov	sp, r7
    995a:	b002      	add	sp, #8
    995c:	bd80      	pop	{r7, pc}
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	00009909 	.word	0x00009909
    9964:	0000991d 	.word	0x0000991d

00009968 <arch_ioport_pin_to_mask>:
{
    9968:	b580      	push	{r7, lr}
    996a:	b082      	sub	sp, #8
    996c:	af00      	add	r7, sp, #0
    996e:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    9970:	687b      	ldr	r3, [r7, #4]
    9972:	221f      	movs	r2, #31
    9974:	4013      	ands	r3, r2
    9976:	2201      	movs	r2, #1
    9978:	409a      	lsls	r2, r3
    997a:	0013      	movs	r3, r2
}
    997c:	0018      	movs	r0, r3
    997e:	46bd      	mov	sp, r7
    9980:	b002      	add	sp, #8
    9982:	bd80      	pop	{r7, pc}

00009984 <arch_ioport_set_pin_level>:
{
    9984:	b590      	push	{r4, r7, lr}
    9986:	b083      	sub	sp, #12
    9988:	af00      	add	r7, sp, #0
    998a:	6078      	str	r0, [r7, #4]
    998c:	000a      	movs	r2, r1
    998e:	1cfb      	adds	r3, r7, #3
    9990:	701a      	strb	r2, [r3, #0]
	if (level) {
    9992:	1cfb      	adds	r3, r7, #3
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	2b00      	cmp	r3, #0
    9998:	d00b      	beq.n	99b2 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    999a:	687b      	ldr	r3, [r7, #4]
    999c:	0018      	movs	r0, r3
    999e:	4b0c      	ldr	r3, [pc, #48]	; (99d0 <arch_ioport_set_pin_level+0x4c>)
    99a0:	4798      	blx	r3
    99a2:	0004      	movs	r4, r0
    99a4:	687b      	ldr	r3, [r7, #4]
    99a6:	0018      	movs	r0, r3
    99a8:	4b0a      	ldr	r3, [pc, #40]	; (99d4 <arch_ioport_set_pin_level+0x50>)
    99aa:	4798      	blx	r3
    99ac:	0003      	movs	r3, r0
    99ae:	61a3      	str	r3, [r4, #24]
}
    99b0:	e00a      	b.n	99c8 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	0018      	movs	r0, r3
    99b6:	4b06      	ldr	r3, [pc, #24]	; (99d0 <arch_ioport_set_pin_level+0x4c>)
    99b8:	4798      	blx	r3
    99ba:	0004      	movs	r4, r0
    99bc:	687b      	ldr	r3, [r7, #4]
    99be:	0018      	movs	r0, r3
    99c0:	4b04      	ldr	r3, [pc, #16]	; (99d4 <arch_ioport_set_pin_level+0x50>)
    99c2:	4798      	blx	r3
    99c4:	0003      	movs	r3, r0
    99c6:	6163      	str	r3, [r4, #20]
}
    99c8:	46c0      	nop			; (mov r8, r8)
    99ca:	46bd      	mov	sp, r7
    99cc:	b003      	add	sp, #12
    99ce:	bd90      	pop	{r4, r7, pc}
    99d0:	0000993d 	.word	0x0000993d
    99d4:	00009969 	.word	0x00009969

000099d8 <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
    99d8:	b590      	push	{r4, r7, lr}
    99da:	b083      	sub	sp, #12
    99dc:	af00      	add	r7, sp, #0
    99de:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	0018      	movs	r0, r3
    99e4:	4b08      	ldr	r3, [pc, #32]	; (9a08 <arch_ioport_get_pin_level+0x30>)
    99e6:	4798      	blx	r3
    99e8:	0003      	movs	r3, r0
    99ea:	6a1c      	ldr	r4, [r3, #32]
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	0018      	movs	r0, r3
    99f0:	4b06      	ldr	r3, [pc, #24]	; (9a0c <arch_ioport_get_pin_level+0x34>)
    99f2:	4798      	blx	r3
    99f4:	0003      	movs	r3, r0
    99f6:	4023      	ands	r3, r4
    99f8:	1e5a      	subs	r2, r3, #1
    99fa:	4193      	sbcs	r3, r2
    99fc:	b2db      	uxtb	r3, r3
}
    99fe:	0018      	movs	r0, r3
    9a00:	46bd      	mov	sp, r7
    9a02:	b003      	add	sp, #12
    9a04:	bd90      	pop	{r4, r7, pc}
    9a06:	46c0      	nop			; (mov r8, r8)
    9a08:	0000993d 	.word	0x0000993d
    9a0c:	00009969 	.word	0x00009969

00009a10 <ioport_set_pin_level>:
{
    9a10:	b580      	push	{r7, lr}
    9a12:	b082      	sub	sp, #8
    9a14:	af00      	add	r7, sp, #0
    9a16:	6078      	str	r0, [r7, #4]
    9a18:	000a      	movs	r2, r1
    9a1a:	1cfb      	adds	r3, r7, #3
    9a1c:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    9a1e:	1cfb      	adds	r3, r7, #3
    9a20:	781a      	ldrb	r2, [r3, #0]
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	0011      	movs	r1, r2
    9a26:	0018      	movs	r0, r3
    9a28:	4b02      	ldr	r3, [pc, #8]	; (9a34 <ioport_set_pin_level+0x24>)
    9a2a:	4798      	blx	r3
}
    9a2c:	46c0      	nop			; (mov r8, r8)
    9a2e:	46bd      	mov	sp, r7
    9a30:	b002      	add	sp, #8
    9a32:	bd80      	pop	{r7, pc}
    9a34:	00009985 	.word	0x00009985

00009a38 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    9a38:	b580      	push	{r7, lr}
    9a3a:	b082      	sub	sp, #8
    9a3c:	af00      	add	r7, sp, #0
    9a3e:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	0018      	movs	r0, r3
    9a44:	4b03      	ldr	r3, [pc, #12]	; (9a54 <ioport_get_pin_level+0x1c>)
    9a46:	4798      	blx	r3
    9a48:	0003      	movs	r3, r0
}
    9a4a:	0018      	movs	r0, r3
    9a4c:	46bd      	mov	sp, r7
    9a4e:	b002      	add	sp, #8
    9a50:	bd80      	pop	{r7, pc}
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	000099d9 	.word	0x000099d9

00009a58 <update_parameters_from_sensors>:
static lcv_control_t lcv_control;

static volatile bool settings_changed = true;

static void update_parameters_from_sensors(lcv_state_t * state, lcv_control_t * control)
{
    9a58:	b580      	push	{r7, lr}
    9a5a:	b082      	sub	sp, #8
    9a5c:	af00      	add	r7, sp, #0
    9a5e:	6078      	str	r0, [r7, #4]
    9a60:	6039      	str	r1, [r7, #0]
	adc_request_update();
    9a62:	4b21      	ldr	r3, [pc, #132]	; (9ae8 <update_parameters_from_sensors+0x90>)
    9a64:	4798      	blx	r3
	state->current_state.enable = system_is_enabled();
    9a66:	4b21      	ldr	r3, [pc, #132]	; (9aec <update_parameters_from_sensors+0x94>)
    9a68:	4798      	blx	r3
    9a6a:	0003      	movs	r3, r0
    9a6c:	0019      	movs	r1, r3
    9a6e:	687b      	ldr	r3, [r7, #4]
    9a70:	2201      	movs	r2, #1
    9a72:	4011      	ands	r1, r2
    9a74:	0008      	movs	r0, r1
    9a76:	7d1a      	ldrb	r2, [r3, #20]
    9a78:	2101      	movs	r1, #1
    9a7a:	438a      	bics	r2, r1
    9a7c:	1c11      	adds	r1, r2, #0
    9a7e:	1c02      	adds	r2, r0, #0
    9a80:	430a      	orrs	r2, r1
    9a82:	751a      	strb	r2, [r3, #20]
	state->setting_state.enable = state->current_state.enable;
    9a84:	687b      	ldr	r3, [r7, #4]
    9a86:	7d1b      	ldrb	r3, [r3, #20]
    9a88:	07db      	lsls	r3, r3, #31
    9a8a:	0fdb      	lsrs	r3, r3, #31
    9a8c:	b2da      	uxtb	r2, r3
    9a8e:	687b      	ldr	r3, [r7, #4]
    9a90:	2101      	movs	r1, #1
    9a92:	400a      	ands	r2, r1
    9a94:	0010      	movs	r0, r2
    9a96:	781a      	ldrb	r2, [r3, #0]
    9a98:	2101      	movs	r1, #1
    9a9a:	438a      	bics	r2, r1
    9a9c:	1c11      	adds	r1, r2, #0
    9a9e:	1c02      	adds	r2, r0, #0
    9aa0:	430a      	orrs	r2, r1
    9aa2:	701a      	strb	r2, [r3, #0]

	state->current_state.tidal_volume_ml = (int32_t) 1000 * get_tidal_volume_liter();
    9aa4:	4b12      	ldr	r3, [pc, #72]	; (9af0 <update_parameters_from_sensors+0x98>)
    9aa6:	4798      	blx	r3
    9aa8:	1c02      	adds	r2, r0, #0
    9aaa:	4b12      	ldr	r3, [pc, #72]	; (9af4 <update_parameters_from_sensors+0x9c>)
    9aac:	4912      	ldr	r1, [pc, #72]	; (9af8 <update_parameters_from_sensors+0xa0>)
    9aae:	1c10      	adds	r0, r2, #0
    9ab0:	4798      	blx	r3
    9ab2:	1c03      	adds	r3, r0, #0
    9ab4:	1c1a      	adds	r2, r3, #0
    9ab6:	4b11      	ldr	r3, [pc, #68]	; (9afc <update_parameters_from_sensors+0xa4>)
    9ab8:	1c10      	adds	r0, r2, #0
    9aba:	4798      	blx	r3
    9abc:	0002      	movs	r2, r0
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	619a      	str	r2, [r3, #24]
	state->setting_state.tidal_volume_ml = state->current_state.tidal_volume_ml;
    9ac2:	687b      	ldr	r3, [r7, #4]
    9ac4:	699a      	ldr	r2, [r3, #24]
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	605a      	str	r2, [r3, #4]

	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    9aca:	4b0d      	ldr	r3, [pc, #52]	; (9b00 <update_parameters_from_sensors+0xa8>)
    9acc:	4798      	blx	r3
    9ace:	1c02      	adds	r2, r0, #0
    9ad0:	4b0a      	ldr	r3, [pc, #40]	; (9afc <update_parameters_from_sensors+0xa4>)
    9ad2:	1c10      	adds	r0, r2, #0
    9ad4:	4798      	blx	r3
    9ad6:	0002      	movs	r2, r0
    9ad8:	683b      	ldr	r3, [r7, #0]
    9ada:	615a      	str	r2, [r3, #20]

	motor_status_monitor();
    9adc:	4b09      	ldr	r3, [pc, #36]	; (9b04 <update_parameters_from_sensors+0xac>)
    9ade:	4798      	blx	r3
}
    9ae0:	46c0      	nop			; (mov r8, r8)
    9ae2:	46bd      	mov	sp, r7
    9ae4:	b002      	add	sp, #8
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	00007a21 	.word	0x00007a21
    9aec:	0000a6a1 	.word	0x0000a6a1
    9af0:	0000ac55 	.word	0x0000ac55
    9af4:	00010ad5 	.word	0x00010ad5
    9af8:	447a0000 	.word	0x447a0000
    9afc:	0001104d 	.word	0x0001104d
    9b00:	00007b75 	.word	0x00007b75
    9b04:	00009399 	.word	0x00009399

00009b08 <control_task>:

static void control_task(void * pvParameters)
{
    9b08:	b590      	push	{r4, r7, lr}
    9b0a:	b08f      	sub	sp, #60	; 0x3c
    9b0c:	af00      	add	r7, sp, #0
    9b0e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	// Set up FRAM and SPI
	fram_init();
    9b10:	4b53      	ldr	r3, [pc, #332]	; (9c60 <control_task+0x158>)
    9b12:	4798      	blx	r3

	// Set default TODO what should these be?
	lcv_state.setting_state.enable = 0;
    9b14:	4b53      	ldr	r3, [pc, #332]	; (9c64 <control_task+0x15c>)
    9b16:	781a      	ldrb	r2, [r3, #0]
    9b18:	2101      	movs	r1, #1
    9b1a:	438a      	bics	r2, r1
    9b1c:	701a      	strb	r2, [r3, #0]
	lcv_state.setting_state.ie_ratio_tenths = 30;
    9b1e:	4b51      	ldr	r3, [pc, #324]	; (9c64 <control_task+0x15c>)
    9b20:	221e      	movs	r2, #30
    9b22:	705a      	strb	r2, [r3, #1]
	lcv_state.setting_state.peep_cm_h20 = 14;
    9b24:	4b4f      	ldr	r3, [pc, #316]	; (9c64 <control_task+0x15c>)
    9b26:	220e      	movs	r2, #14
    9b28:	609a      	str	r2, [r3, #8]
	lcv_state.setting_state.pip_cm_h20 = 30;
    9b2a:	4b4e      	ldr	r3, [pc, #312]	; (9c64 <control_task+0x15c>)
    9b2c:	221e      	movs	r2, #30
    9b2e:	60da      	str	r2, [r3, #12]
	lcv_state.setting_state.breath_per_min = 20;
    9b30:	4b4c      	ldr	r3, [pc, #304]	; (9c64 <control_task+0x15c>)
    9b32:	2214      	movs	r2, #20
    9b34:	611a      	str	r2, [r3, #16]

	// Load from FRAM asynchronously
	fram_load_parameters_asynch();
    9b36:	4b4c      	ldr	r3, [pc, #304]	; (9c68 <control_task+0x160>)
    9b38:	4798      	blx	r3
	vTaskDelay(pdMS_TO_TICKS(5));
    9b3a:	2005      	movs	r0, #5
    9b3c:	4b4b      	ldr	r3, [pc, #300]	; (9c6c <control_task+0x164>)
    9b3e:	4798      	blx	r3

	// Assume nothing until feedback
	lcv_state.current_state = lcv_state.setting_state;
    9b40:	4b48      	ldr	r3, [pc, #288]	; (9c64 <control_task+0x15c>)
    9b42:	4a48      	ldr	r2, [pc, #288]	; (9c64 <control_task+0x15c>)
    9b44:	3314      	adds	r3, #20
    9b46:	ca13      	ldmia	r2!, {r0, r1, r4}
    9b48:	c313      	stmia	r3!, {r0, r1, r4}
    9b4a:	ca03      	ldmia	r2!, {r0, r1}
    9b4c:	c303      	stmia	r3!, {r0, r1}

	// Set initial control settings
	lcv_control.peep_to_pip_rampup_ms = 200;
    9b4e:	4b48      	ldr	r3, [pc, #288]	; (9c70 <control_task+0x168>)
    9b50:	22c8      	movs	r2, #200	; 0xc8
    9b52:	601a      	str	r2, [r3, #0]
	lcv_control.pip_to_peep_rampdown_ms = 200;
    9b54:	4b46      	ldr	r3, [pc, #280]	; (9c70 <control_task+0x168>)
    9b56:	22c8      	movs	r2, #200	; 0xc8
    9b58:	609a      	str	r2, [r3, #8]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    9b5a:	4a45      	ldr	r2, [pc, #276]	; (9c70 <control_task+0x168>)
    9b5c:	4b41      	ldr	r3, [pc, #260]	; (9c64 <control_task+0x15c>)
    9b5e:	0011      	movs	r1, r2
    9b60:	0018      	movs	r0, r3
    9b62:	4b44      	ldr	r3, [pc, #272]	; (9c74 <control_task+0x16c>)
    9b64:	4798      	blx	r3

	const TickType_t xFrequency = pdMS_TO_TICKS(10);	// 100 Hz rate
    9b66:	230a      	movs	r3, #10
    9b68:	637b      	str	r3, [r7, #52]	; 0x34
	TickType_t xLastWakeTime = xTaskGetTickCount();
    9b6a:	4b43      	ldr	r3, [pc, #268]	; (9c78 <control_task+0x170>)
    9b6c:	4798      	blx	r3
    9b6e:	0003      	movs	r3, r0
    9b70:	62bb      	str	r3, [r7, #40]	; 0x28

	controller_param_t control_params;
	control_params.kf = 0.07; 
    9b72:	2308      	movs	r3, #8
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	4a41      	ldr	r2, [pc, #260]	; (9c7c <control_task+0x174>)
    9b78:	601a      	str	r2, [r3, #0]
	control_params.kp = 0.003; // higher than 0.003 stops working, sometimes higher is ok
    9b7a:	2308      	movs	r3, #8
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	4a40      	ldr	r2, [pc, #256]	; (9c80 <control_task+0x178>)
    9b80:	605a      	str	r2, [r3, #4]
	control_params.kd = 0.0;
    9b82:	2308      	movs	r3, #8
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	2200      	movs	r2, #0
    9b88:	60da      	str	r2, [r3, #12]
	control_params.ki = 0.0;
    9b8a:	2308      	movs	r3, #8
    9b8c:	18fb      	adds	r3, r7, r3
    9b8e:	2200      	movs	r2, #0
    9b90:	609a      	str	r2, [r3, #8]
	control_params.integral_enable_error_range = 10.0;
    9b92:	2308      	movs	r3, #8
    9b94:	18fb      	adds	r3, r7, r3
    9b96:	4a3b      	ldr	r2, [pc, #236]	; (9c84 <control_task+0x17c>)
    9b98:	615a      	str	r2, [r3, #20]
	control_params.integral_antiwindup = 0.3;
    9b9a:	2308      	movs	r3, #8
    9b9c:	18fb      	adds	r3, r7, r3
    9b9e:	4a3a      	ldr	r2, [pc, #232]	; (9c88 <control_task+0x180>)
    9ba0:	611a      	str	r2, [r3, #16]
	control_params.max_output = 1.0;
    9ba2:	2308      	movs	r3, #8
    9ba4:	18fb      	adds	r3, r7, r3
    9ba6:	22fe      	movs	r2, #254	; 0xfe
    9ba8:	0592      	lsls	r2, r2, #22
    9baa:	619a      	str	r2, [r3, #24]
	control_params.min_output = 0.0;
    9bac:	2308      	movs	r3, #8
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	2200      	movs	r2, #0
    9bb2:	61da      	str	r2, [r3, #28]

	init_motor_interface();
    9bb4:	4b35      	ldr	r3, [pc, #212]	; (9c8c <control_task+0x184>)
    9bb6:	4798      	blx	r3

	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    9bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9bba:	2328      	movs	r3, #40	; 0x28
    9bbc:	18fb      	adds	r3, r7, r3
    9bbe:	0011      	movs	r1, r2
    9bc0:	0018      	movs	r0, r3
    9bc2:	4b33      	ldr	r3, [pc, #204]	; (9c90 <control_task+0x188>)
    9bc4:	4798      	blx	r3

		// Ensure at least control is not locked by feeding here
		wdt_reset_count();
    9bc6:	4b33      	ldr	r3, [pc, #204]	; (9c94 <control_task+0x18c>)
    9bc8:	4798      	blx	r3

		// Feed hardware watchdog
		ioport_set_pin_level(WATCHDOG_GPIO, !ioport_get_pin_level(WATCHDOG_GPIO));
    9bca:	2015      	movs	r0, #21
    9bcc:	4b32      	ldr	r3, [pc, #200]	; (9c98 <control_task+0x190>)
    9bce:	4798      	blx	r3
    9bd0:	0003      	movs	r3, r0
    9bd2:	1e5a      	subs	r2, r3, #1
    9bd4:	4193      	sbcs	r3, r2
    9bd6:	b2db      	uxtb	r3, r3
    9bd8:	2201      	movs	r2, #1
    9bda:	4053      	eors	r3, r2
    9bdc:	b2db      	uxtb	r3, r3
    9bde:	1c1a      	adds	r2, r3, #0
    9be0:	2301      	movs	r3, #1
    9be2:	4013      	ands	r3, r2
    9be4:	b2db      	uxtb	r3, r3
    9be6:	0019      	movs	r1, r3
    9be8:	2015      	movs	r0, #21
    9bea:	4b2c      	ldr	r3, [pc, #176]	; (9c9c <control_task+0x194>)
    9bec:	4798      	blx	r3

		// Update sensor data if possible
		update_parameters_from_sensors(&lcv_state, &lcv_control);
    9bee:	4a20      	ldr	r2, [pc, #128]	; (9c70 <control_task+0x168>)
    9bf0:	4b1c      	ldr	r3, [pc, #112]	; (9c64 <control_task+0x15c>)
    9bf2:	0011      	movs	r1, r2
    9bf4:	0018      	movs	r0, r3
    9bf6:	4b2a      	ldr	r3, [pc, #168]	; (9ca0 <control_task+0x198>)
    9bf8:	4798      	blx	r3

		// Save if changed 
		if(settings_changed)
    9bfa:	4b2a      	ldr	r3, [pc, #168]	; (9ca4 <control_task+0x19c>)
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	b2db      	uxtb	r3, r3
    9c00:	2b00      	cmp	r3, #0
    9c02:	d006      	beq.n	9c12 <control_task+0x10a>
		{
			fram_save_parameters_asynch(&lcv_state.setting_state);
    9c04:	4b17      	ldr	r3, [pc, #92]	; (9c64 <control_task+0x15c>)
    9c06:	0018      	movs	r0, r3
    9c08:	4b27      	ldr	r3, [pc, #156]	; (9ca8 <control_task+0x1a0>)
    9c0a:	4798      	blx	r3
			settings_changed = false;
    9c0c:	4b25      	ldr	r3, [pc, #148]	; (9ca4 <control_task+0x19c>)
    9c0e:	2200      	movs	r2, #0
    9c10:	701a      	strb	r2, [r3, #0]
		}

		float motor_output = run_controller(&lcv_state, &lcv_control, &control_params);
    9c12:	2308      	movs	r3, #8
    9c14:	18fa      	adds	r2, r7, r3
    9c16:	4916      	ldr	r1, [pc, #88]	; (9c70 <control_task+0x168>)
    9c18:	4b12      	ldr	r3, [pc, #72]	; (9c64 <control_task+0x15c>)
    9c1a:	0018      	movs	r0, r3
    9c1c:	4b23      	ldr	r3, [pc, #140]	; (9cac <control_task+0x1a4>)
    9c1e:	4798      	blx	r3
    9c20:	1c03      	adds	r3, r0, #0
    9c22:	633b      	str	r3, [r7, #48]	; 0x30
		if(lcv_state.current_state.enable)
    9c24:	4b0f      	ldr	r3, [pc, #60]	; (9c64 <control_task+0x15c>)
    9c26:	7d1b      	ldrb	r3, [r3, #20]
    9c28:	2201      	movs	r2, #1
    9c2a:	4013      	ands	r3, r2
    9c2c:	b2db      	uxtb	r3, r3
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d00e      	beq.n	9c50 <control_task+0x148>
		{
			enable_motor();
    9c32:	4b1f      	ldr	r3, [pc, #124]	; (9cb0 <control_task+0x1a8>)
    9c34:	4798      	blx	r3
			float output_sent = drive_motor(motor_output);
    9c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9c38:	1c18      	adds	r0, r3, #0
    9c3a:	4b1e      	ldr	r3, [pc, #120]	; (9cb4 <control_task+0x1ac>)
    9c3c:	4798      	blx	r3
    9c3e:	1c03      	adds	r3, r0, #0
    9c40:	62fb      	str	r3, [r7, #44]	; 0x2c
			usb_transmit_control(&lcv_control, output_sent);
    9c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9c44:	4b0a      	ldr	r3, [pc, #40]	; (9c70 <control_task+0x168>)
    9c46:	1c11      	adds	r1, r2, #0
    9c48:	0018      	movs	r0, r3
    9c4a:	4b1b      	ldr	r3, [pc, #108]	; (9cb8 <control_task+0x1b0>)
    9c4c:	4798      	blx	r3
    9c4e:	e7b3      	b.n	9bb8 <control_task+0xb0>
		}
		else
		{
			disable_motor();
    9c50:	4b1a      	ldr	r3, [pc, #104]	; (9cbc <control_task+0x1b4>)
    9c52:	4798      	blx	r3
			drive_motor(0.0);
    9c54:	2300      	movs	r3, #0
    9c56:	1c18      	adds	r0, r3, #0
    9c58:	4b16      	ldr	r3, [pc, #88]	; (9cb4 <control_task+0x1ac>)
    9c5a:	4798      	blx	r3
	{
    9c5c:	e7ac      	b.n	9bb8 <control_task+0xb0>
    9c5e:	46c0      	nop			; (mov r8, r8)
    9c60:	00008a09 	.word	0x00008a09
    9c64:	20003a2c 	.word	0x20003a2c
    9c68:	00008a45 	.word	0x00008a45
    9c6c:	0000bb31 	.word	0x0000bb31
    9c70:	20003a54 	.word	0x20003a54
    9c74:	0000808d 	.word	0x0000808d
    9c78:	0000c029 	.word	0x0000c029
    9c7c:	3d8f5c29 	.word	0x3d8f5c29
    9c80:	3b449ba6 	.word	0x3b449ba6
    9c84:	41200000 	.word	0x41200000
    9c88:	3e99999a 	.word	0x3e99999a
    9c8c:	00009301 	.word	0x00009301
    9c90:	0000ba69 	.word	0x0000ba69
    9c94:	0000d109 	.word	0x0000d109
    9c98:	00009a39 	.word	0x00009a39
    9c9c:	00009a11 	.word	0x00009a11
    9ca0:	00009a59 	.word	0x00009a59
    9ca4:	200001cf 	.word	0x200001cf
    9ca8:	00008ac1 	.word	0x00008ac1
    9cac:	0000828d 	.word	0x0000828d
    9cb0:	000093e1 	.word	0x000093e1
    9cb4:	00009411 	.word	0x00009411
    9cb8:	00009819 	.word	0x00009819
    9cbc:	000093f9 	.word	0x000093f9

00009cc0 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    9cc0:	b590      	push	{r4, r7, lr}
    9cc2:	b085      	sub	sp, #20
    9cc4:	af02      	add	r7, sp, #8
    9cc6:	0002      	movs	r2, r0
    9cc8:	6039      	str	r1, [r7, #0]
    9cca:	1dbb      	adds	r3, r7, #6
    9ccc:	801a      	strh	r2, [r3, #0]
	xTaskCreate(control_task, (const char * const) "CONTROL",
    9cce:	1dbb      	adds	r3, r7, #6
    9cd0:	881a      	ldrh	r2, [r3, #0]
    9cd2:	4906      	ldr	r1, [pc, #24]	; (9cec <create_control_task+0x2c>)
    9cd4:	4806      	ldr	r0, [pc, #24]	; (9cf0 <create_control_task+0x30>)
    9cd6:	4b07      	ldr	r3, [pc, #28]	; (9cf4 <create_control_task+0x34>)
    9cd8:	9301      	str	r3, [sp, #4]
    9cda:	683b      	ldr	r3, [r7, #0]
    9cdc:	9300      	str	r3, [sp, #0]
    9cde:	2300      	movs	r3, #0
    9ce0:	4c05      	ldr	r4, [pc, #20]	; (9cf8 <create_control_task+0x38>)
    9ce2:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
}
    9ce4:	46c0      	nop			; (mov r8, r8)
    9ce6:	46bd      	mov	sp, r7
    9ce8:	b003      	add	sp, #12
    9cea:	bd90      	pop	{r4, r7, pc}
    9cec:	00013a10 	.word	0x00013a10
    9cf0:	00009b09 	.word	0x00009b09
    9cf4:	20003a28 	.word	0x20003a28
    9cf8:	0000b7d5 	.word	0x0000b7d5

00009cfc <get_current_settings>:
*	\brief Gets the current settings
*
*	\return The current settings
*/
lcv_parameters_t get_current_settings(void)
{
    9cfc:	b590      	push	{r4, r7, lr}
    9cfe:	b083      	sub	sp, #12
    9d00:	af00      	add	r7, sp, #0
    9d02:	6078      	str	r0, [r7, #4]
	return lcv_state.setting_state;
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	4a04      	ldr	r2, [pc, #16]	; (9d18 <get_current_settings+0x1c>)
    9d08:	ca13      	ldmia	r2!, {r0, r1, r4}
    9d0a:	c313      	stmia	r3!, {r0, r1, r4}
    9d0c:	ca03      	ldmia	r2!, {r0, r1}
    9d0e:	c303      	stmia	r3!, {r0, r1}
}
    9d10:	6878      	ldr	r0, [r7, #4]
    9d12:	46bd      	mov	sp, r7
    9d14:	b003      	add	sp, #12
    9d16:	bd90      	pop	{r4, r7, pc}
    9d18:	20003a2c 	.word	0x20003a2c

00009d1c <update_settings>:
*	\brief Updates the current settings
*
*	\param new_settings Pointer to the new settings
*/
void update_settings(lcv_parameters_t * new_settings)
{
    9d1c:	b590      	push	{r4, r7, lr}
    9d1e:	b083      	sub	sp, #12
    9d20:	af00      	add	r7, sp, #0
    9d22:	6078      	str	r0, [r7, #4]
	// NOTE: may be called from ISR
	lcv_state.setting_state = *new_settings;
    9d24:	4b09      	ldr	r3, [pc, #36]	; (9d4c <update_settings+0x30>)
    9d26:	687a      	ldr	r2, [r7, #4]
    9d28:	ca13      	ldmia	r2!, {r0, r1, r4}
    9d2a:	c313      	stmia	r3!, {r0, r1, r4}
    9d2c:	ca03      	ldmia	r2!, {r0, r1}
    9d2e:	c303      	stmia	r3!, {r0, r1}

	settings_changed = true;
    9d30:	4b07      	ldr	r3, [pc, #28]	; (9d50 <update_settings+0x34>)
    9d32:	2201      	movs	r2, #1
    9d34:	701a      	strb	r2, [r3, #0]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    9d36:	4a07      	ldr	r2, [pc, #28]	; (9d54 <update_settings+0x38>)
    9d38:	4b04      	ldr	r3, [pc, #16]	; (9d4c <update_settings+0x30>)
    9d3a:	0011      	movs	r1, r2
    9d3c:	0018      	movs	r0, r3
    9d3e:	4b06      	ldr	r3, [pc, #24]	; (9d58 <update_settings+0x3c>)
    9d40:	4798      	blx	r3
    9d42:	46c0      	nop			; (mov r8, r8)
    9d44:	46bd      	mov	sp, r7
    9d46:	b003      	add	sp, #12
    9d48:	bd90      	pop	{r4, r7, pc}
    9d4a:	46c0      	nop			; (mov r8, r8)
    9d4c:	20003a2c 	.word	0x20003a2c
    9d50:	200001cf 	.word	0x200001cf
    9d54:	20003a54 	.word	0x20003a54
    9d58:	0000808d 	.word	0x0000808d

00009d5c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b082      	sub	sp, #8
    9d60:	af00      	add	r7, sp, #0
    9d62:	0002      	movs	r2, r0
    9d64:	1dfb      	adds	r3, r7, #7
    9d66:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    9d68:	4b06      	ldr	r3, [pc, #24]	; (9d84 <NVIC_EnableIRQ+0x28>)
    9d6a:	1dfa      	adds	r2, r7, #7
    9d6c:	7812      	ldrb	r2, [r2, #0]
    9d6e:	0011      	movs	r1, r2
    9d70:	221f      	movs	r2, #31
    9d72:	400a      	ands	r2, r1
    9d74:	2101      	movs	r1, #1
    9d76:	4091      	lsls	r1, r2
    9d78:	000a      	movs	r2, r1
    9d7a:	601a      	str	r2, [r3, #0]
}
    9d7c:	46c0      	nop			; (mov r8, r8)
    9d7e:	46bd      	mov	sp, r7
    9d80:	b002      	add	sp, #8
    9d82:	bd80      	pop	{r7, pc}
    9d84:	e000e100 	.word	0xe000e100

00009d88 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    9d88:	b580      	push	{r7, lr}
    9d8a:	b082      	sub	sp, #8
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	0002      	movs	r2, r0
    9d90:	1dfb      	adds	r3, r7, #7
    9d92:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    9d94:	4a08      	ldr	r2, [pc, #32]	; (9db8 <NVIC_ClearPendingIRQ+0x30>)
    9d96:	1dfb      	adds	r3, r7, #7
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	0019      	movs	r1, r3
    9d9c:	231f      	movs	r3, #31
    9d9e:	400b      	ands	r3, r1
    9da0:	2101      	movs	r1, #1
    9da2:	4099      	lsls	r1, r3
    9da4:	000b      	movs	r3, r1
    9da6:	0019      	movs	r1, r3
    9da8:	23c0      	movs	r3, #192	; 0xc0
    9daa:	005b      	lsls	r3, r3, #1
    9dac:	50d1      	str	r1, [r2, r3]
}
    9dae:	46c0      	nop			; (mov r8, r8)
    9db0:	46bd      	mov	sp, r7
    9db2:	b002      	add	sp, #8
    9db4:	bd80      	pop	{r7, pc}
    9db6:	46c0      	nop			; (mov r8, r8)
    9db8:	e000e100 	.word	0xe000e100

00009dbc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    9dbc:	b5b0      	push	{r4, r5, r7, lr}
    9dbe:	b082      	sub	sp, #8
    9dc0:	af00      	add	r7, sp, #0
    9dc2:	0002      	movs	r2, r0
    9dc4:	6039      	str	r1, [r7, #0]
    9dc6:	1dfb      	adds	r3, r7, #7
    9dc8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    9dca:	1dfb      	adds	r3, r7, #7
    9dcc:	781b      	ldrb	r3, [r3, #0]
    9dce:	2b7f      	cmp	r3, #127	; 0x7f
    9dd0:	d932      	bls.n	9e38 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9dd2:	4c2f      	ldr	r4, [pc, #188]	; (9e90 <NVIC_SetPriority+0xd4>)
    9dd4:	1dfb      	adds	r3, r7, #7
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	001a      	movs	r2, r3
    9dda:	230f      	movs	r3, #15
    9ddc:	4013      	ands	r3, r2
    9dde:	3b08      	subs	r3, #8
    9de0:	0899      	lsrs	r1, r3, #2
    9de2:	4a2b      	ldr	r2, [pc, #172]	; (9e90 <NVIC_SetPriority+0xd4>)
    9de4:	1dfb      	adds	r3, r7, #7
    9de6:	781b      	ldrb	r3, [r3, #0]
    9de8:	0018      	movs	r0, r3
    9dea:	230f      	movs	r3, #15
    9dec:	4003      	ands	r3, r0
    9dee:	3b08      	subs	r3, #8
    9df0:	089b      	lsrs	r3, r3, #2
    9df2:	3306      	adds	r3, #6
    9df4:	009b      	lsls	r3, r3, #2
    9df6:	18d3      	adds	r3, r2, r3
    9df8:	3304      	adds	r3, #4
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	1dfa      	adds	r2, r7, #7
    9dfe:	7812      	ldrb	r2, [r2, #0]
    9e00:	0010      	movs	r0, r2
    9e02:	2203      	movs	r2, #3
    9e04:	4002      	ands	r2, r0
    9e06:	00d2      	lsls	r2, r2, #3
    9e08:	20ff      	movs	r0, #255	; 0xff
    9e0a:	4090      	lsls	r0, r2
    9e0c:	0002      	movs	r2, r0
    9e0e:	43d2      	mvns	r2, r2
    9e10:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    9e12:	683b      	ldr	r3, [r7, #0]
    9e14:	019b      	lsls	r3, r3, #6
    9e16:	20ff      	movs	r0, #255	; 0xff
    9e18:	4018      	ands	r0, r3
    9e1a:	1dfb      	adds	r3, r7, #7
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	001d      	movs	r5, r3
    9e20:	2303      	movs	r3, #3
    9e22:	402b      	ands	r3, r5
    9e24:	00db      	lsls	r3, r3, #3
    9e26:	4098      	lsls	r0, r3
    9e28:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9e2a:	431a      	orrs	r2, r3
    9e2c:	1d8b      	adds	r3, r1, #6
    9e2e:	009b      	lsls	r3, r3, #2
    9e30:	18e3      	adds	r3, r4, r3
    9e32:	3304      	adds	r3, #4
    9e34:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    9e36:	e027      	b.n	9e88 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9e38:	4c16      	ldr	r4, [pc, #88]	; (9e94 <NVIC_SetPriority+0xd8>)
    9e3a:	1dfb      	adds	r3, r7, #7
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	b25b      	sxtb	r3, r3
    9e40:	089b      	lsrs	r3, r3, #2
    9e42:	4914      	ldr	r1, [pc, #80]	; (9e94 <NVIC_SetPriority+0xd8>)
    9e44:	1dfa      	adds	r2, r7, #7
    9e46:	7812      	ldrb	r2, [r2, #0]
    9e48:	b252      	sxtb	r2, r2
    9e4a:	0892      	lsrs	r2, r2, #2
    9e4c:	32c0      	adds	r2, #192	; 0xc0
    9e4e:	0092      	lsls	r2, r2, #2
    9e50:	5852      	ldr	r2, [r2, r1]
    9e52:	1df9      	adds	r1, r7, #7
    9e54:	7809      	ldrb	r1, [r1, #0]
    9e56:	0008      	movs	r0, r1
    9e58:	2103      	movs	r1, #3
    9e5a:	4001      	ands	r1, r0
    9e5c:	00c9      	lsls	r1, r1, #3
    9e5e:	20ff      	movs	r0, #255	; 0xff
    9e60:	4088      	lsls	r0, r1
    9e62:	0001      	movs	r1, r0
    9e64:	43c9      	mvns	r1, r1
    9e66:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    9e68:	683a      	ldr	r2, [r7, #0]
    9e6a:	0192      	lsls	r2, r2, #6
    9e6c:	20ff      	movs	r0, #255	; 0xff
    9e6e:	4010      	ands	r0, r2
    9e70:	1dfa      	adds	r2, r7, #7
    9e72:	7812      	ldrb	r2, [r2, #0]
    9e74:	0015      	movs	r5, r2
    9e76:	2203      	movs	r2, #3
    9e78:	402a      	ands	r2, r5
    9e7a:	00d2      	lsls	r2, r2, #3
    9e7c:	4090      	lsls	r0, r2
    9e7e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    9e80:	430a      	orrs	r2, r1
    9e82:	33c0      	adds	r3, #192	; 0xc0
    9e84:	009b      	lsls	r3, r3, #2
    9e86:	511a      	str	r2, [r3, r4]
}
    9e88:	46c0      	nop			; (mov r8, r8)
    9e8a:	46bd      	mov	sp, r7
    9e8c:	b002      	add	sp, #8
    9e8e:	bdb0      	pop	{r4, r5, r7, pc}
    9e90:	e000ed00 	.word	0xe000ed00
    9e94:	e000e100 	.word	0xe000e100

00009e98 <system_interrupt_enable>:
{
    9e98:	b580      	push	{r7, lr}
    9e9a:	b082      	sub	sp, #8
    9e9c:	af00      	add	r7, sp, #0
    9e9e:	0002      	movs	r2, r0
    9ea0:	1dfb      	adds	r3, r7, #7
    9ea2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9ea4:	4b06      	ldr	r3, [pc, #24]	; (9ec0 <system_interrupt_enable+0x28>)
    9ea6:	1dfa      	adds	r2, r7, #7
    9ea8:	7812      	ldrb	r2, [r2, #0]
    9eaa:	0011      	movs	r1, r2
    9eac:	221f      	movs	r2, #31
    9eae:	400a      	ands	r2, r1
    9eb0:	2101      	movs	r1, #1
    9eb2:	4091      	lsls	r1, r2
    9eb4:	000a      	movs	r2, r1
    9eb6:	601a      	str	r2, [r3, #0]
}
    9eb8:	46c0      	nop			; (mov r8, r8)
    9eba:	46bd      	mov	sp, r7
    9ebc:	b002      	add	sp, #8
    9ebe:	bd80      	pop	{r7, pc}
    9ec0:	e000e100 	.word	0xe000e100

00009ec4 <arch_ioport_pin_to_port_id>:
{
    9ec4:	b580      	push	{r7, lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	095b      	lsrs	r3, r3, #5
}
    9ed0:	0018      	movs	r0, r3
    9ed2:	46bd      	mov	sp, r7
    9ed4:	b002      	add	sp, #8
    9ed6:	bd80      	pop	{r7, pc}

00009ed8 <arch_ioport_port_to_base>:
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	b082      	sub	sp, #8
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	01db      	lsls	r3, r3, #7
    9ee4:	4a03      	ldr	r2, [pc, #12]	; (9ef4 <arch_ioport_port_to_base+0x1c>)
    9ee6:	4694      	mov	ip, r2
    9ee8:	4463      	add	r3, ip
}
    9eea:	0018      	movs	r0, r3
    9eec:	46bd      	mov	sp, r7
    9eee:	b002      	add	sp, #8
    9ef0:	bd80      	pop	{r7, pc}
    9ef2:	46c0      	nop			; (mov r8, r8)
    9ef4:	41004400 	.word	0x41004400

00009ef8 <arch_ioport_pin_to_base>:
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	b082      	sub	sp, #8
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	0018      	movs	r0, r3
    9f04:	4b05      	ldr	r3, [pc, #20]	; (9f1c <arch_ioport_pin_to_base+0x24>)
    9f06:	4798      	blx	r3
    9f08:	0003      	movs	r3, r0
    9f0a:	0018      	movs	r0, r3
    9f0c:	4b04      	ldr	r3, [pc, #16]	; (9f20 <arch_ioport_pin_to_base+0x28>)
    9f0e:	4798      	blx	r3
    9f10:	0003      	movs	r3, r0
}
    9f12:	0018      	movs	r0, r3
    9f14:	46bd      	mov	sp, r7
    9f16:	b002      	add	sp, #8
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	46c0      	nop			; (mov r8, r8)
    9f1c:	00009ec5 	.word	0x00009ec5
    9f20:	00009ed9 	.word	0x00009ed9

00009f24 <arch_ioport_pin_to_mask>:
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b082      	sub	sp, #8
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	221f      	movs	r2, #31
    9f30:	4013      	ands	r3, r2
    9f32:	2201      	movs	r2, #1
    9f34:	409a      	lsls	r2, r3
    9f36:	0013      	movs	r3, r2
}
    9f38:	0018      	movs	r0, r3
    9f3a:	46bd      	mov	sp, r7
    9f3c:	b002      	add	sp, #8
    9f3e:	bd80      	pop	{r7, pc}

00009f40 <arch_ioport_get_pin_level>:
{
    9f40:	b590      	push	{r4, r7, lr}
    9f42:	b083      	sub	sp, #12
    9f44:	af00      	add	r7, sp, #0
    9f46:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	0018      	movs	r0, r3
    9f4c:	4b08      	ldr	r3, [pc, #32]	; (9f70 <arch_ioport_get_pin_level+0x30>)
    9f4e:	4798      	blx	r3
    9f50:	0003      	movs	r3, r0
    9f52:	6a1c      	ldr	r4, [r3, #32]
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	0018      	movs	r0, r3
    9f58:	4b06      	ldr	r3, [pc, #24]	; (9f74 <arch_ioport_get_pin_level+0x34>)
    9f5a:	4798      	blx	r3
    9f5c:	0003      	movs	r3, r0
    9f5e:	4023      	ands	r3, r4
    9f60:	1e5a      	subs	r2, r3, #1
    9f62:	4193      	sbcs	r3, r2
    9f64:	b2db      	uxtb	r3, r3
}
    9f66:	0018      	movs	r0, r3
    9f68:	46bd      	mov	sp, r7
    9f6a:	b003      	add	sp, #12
    9f6c:	bd90      	pop	{r4, r7, pc}
    9f6e:	46c0      	nop			; (mov r8, r8)
    9f70:	00009ef9 	.word	0x00009ef9
    9f74:	00009f25 	.word	0x00009f25

00009f78 <ioport_get_pin_level>:
{
    9f78:	b580      	push	{r7, lr}
    9f7a:	b082      	sub	sp, #8
    9f7c:	af00      	add	r7, sp, #0
    9f7e:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    9f80:	687b      	ldr	r3, [r7, #4]
    9f82:	0018      	movs	r0, r3
    9f84:	4b03      	ldr	r3, [pc, #12]	; (9f94 <ioport_get_pin_level+0x1c>)
    9f86:	4798      	blx	r3
    9f88:	0003      	movs	r3, r0
}
    9f8a:	0018      	movs	r0, r3
    9f8c:	46bd      	mov	sp, r7
    9f8e:	b002      	add	sp, #8
    9f90:	bd80      	pop	{r7, pc}
    9f92:	46c0      	nop			; (mov r8, r8)
    9f94:	00009f41 	.word	0x00009f41

00009f98 <i2c_master_is_syncing>:
{
    9f98:	b580      	push	{r7, lr}
    9f9a:	b084      	sub	sp, #16
    9f9c:	af00      	add	r7, sp, #0
    9f9e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    9fa0:	687b      	ldr	r3, [r7, #4]
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    9fa6:	68fb      	ldr	r3, [r7, #12]
    9fa8:	69db      	ldr	r3, [r3, #28]
    9faa:	2207      	movs	r2, #7
    9fac:	4013      	ands	r3, r2
    9fae:	1e5a      	subs	r2, r3, #1
    9fb0:	4193      	sbcs	r3, r2
    9fb2:	b2db      	uxtb	r3, r3
}
    9fb4:	0018      	movs	r0, r3
    9fb6:	46bd      	mov	sp, r7
    9fb8:	b004      	add	sp, #16
    9fba:	bd80      	pop	{r7, pc}

00009fbc <_i2c_master_wait_for_sync>:
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b082      	sub	sp, #8
    9fc0:	af00      	add	r7, sp, #0
    9fc2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    9fc4:	46c0      	nop			; (mov r8, r8)
    9fc6:	687b      	ldr	r3, [r7, #4]
    9fc8:	0018      	movs	r0, r3
    9fca:	4b04      	ldr	r3, [pc, #16]	; (9fdc <_i2c_master_wait_for_sync+0x20>)
    9fcc:	4798      	blx	r3
    9fce:	1e03      	subs	r3, r0, #0
    9fd0:	d1f9      	bne.n	9fc6 <_i2c_master_wait_for_sync+0xa>
}
    9fd2:	46c0      	nop			; (mov r8, r8)
    9fd4:	46bd      	mov	sp, r7
    9fd6:	b002      	add	sp, #8
    9fd8:	bd80      	pop	{r7, pc}
    9fda:	46c0      	nop			; (mov r8, r8)
    9fdc:	00009f99 	.word	0x00009f99

00009fe0 <i2c_master_get_config_defaults>:
{
    9fe0:	b580      	push	{r7, lr}
    9fe2:	b082      	sub	sp, #8
    9fe4:	af00      	add	r7, sp, #0
    9fe6:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	2264      	movs	r2, #100	; 0x64
    9fec:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	4a1b      	ldr	r2, [pc, #108]	; (a060 <i2c_master_get_config_defaults+0x80>)
    9ff2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	2200      	movs	r2, #0
    9ff8:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	2200      	movs	r2, #0
    9ffe:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    a000:	687b      	ldr	r3, [r7, #4]
    a002:	2200      	movs	r2, #0
    a004:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	2280      	movs	r2, #128	; 0x80
    a00a:	0392      	lsls	r2, r2, #14
    a00c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    a00e:	687b      	ldr	r3, [r7, #4]
    a010:	2201      	movs	r2, #1
    a012:	4252      	negs	r2, r2
    a014:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    a016:	687b      	ldr	r3, [r7, #4]
    a018:	2201      	movs	r2, #1
    a01a:	4252      	negs	r2, r2
    a01c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a01e:	687b      	ldr	r3, [r7, #4]
    a020:	2200      	movs	r2, #0
    a022:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	2200      	movs	r2, #0
    a028:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    a02a:	687b      	ldr	r3, [r7, #4]
    a02c:	2224      	movs	r2, #36	; 0x24
    a02e:	2100      	movs	r1, #0
    a030:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    a032:	687b      	ldr	r3, [r7, #4]
    a034:	2200      	movs	r2, #0
    a036:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	222c      	movs	r2, #44	; 0x2c
    a03c:	2100      	movs	r1, #0
    a03e:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
    a040:	687b      	ldr	r3, [r7, #4]
    a042:	222d      	movs	r2, #45	; 0x2d
    a044:	2100      	movs	r1, #0
    a046:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    a048:	687b      	ldr	r3, [r7, #4]
    a04a:	222e      	movs	r2, #46	; 0x2e
    a04c:	2100      	movs	r1, #0
    a04e:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	22d7      	movs	r2, #215	; 0xd7
    a054:	861a      	strh	r2, [r3, #48]	; 0x30
}
    a056:	46c0      	nop			; (mov r8, r8)
    a058:	46bd      	mov	sp, r7
    a05a:	b002      	add	sp, #8
    a05c:	bd80      	pop	{r7, pc}
    a05e:	46c0      	nop			; (mov r8, r8)
    a060:	00000d48 	.word	0x00000d48

0000a064 <i2c_master_enable>:
{
    a064:	b580      	push	{r7, lr}
    a066:	b084      	sub	sp, #16
    a068:	af00      	add	r7, sp, #0
    a06a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	681b      	ldr	r3, [r3, #0]
    a070:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
    a072:	2300      	movs	r3, #0
    a074:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
    a076:	687b      	ldr	r3, [r7, #4]
    a078:	0018      	movs	r0, r3
    a07a:	4b14      	ldr	r3, [pc, #80]	; (a0cc <i2c_master_enable+0x68>)
    a07c:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a07e:	68bb      	ldr	r3, [r7, #8]
    a080:	681b      	ldr	r3, [r3, #0]
    a082:	2202      	movs	r2, #2
    a084:	431a      	orrs	r2, r3
    a086:	68bb      	ldr	r3, [r7, #8]
    a088:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	0018      	movs	r0, r3
    a090:	4b0f      	ldr	r3, [pc, #60]	; (a0d0 <i2c_master_enable+0x6c>)
    a092:	4798      	blx	r3
    a094:	0003      	movs	r3, r0
    a096:	0018      	movs	r0, r3
    a098:	4b0e      	ldr	r3, [pc, #56]	; (a0d4 <i2c_master_enable+0x70>)
    a09a:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    a09c:	e00c      	b.n	a0b8 <i2c_master_enable+0x54>
		timeout_counter++;
    a09e:	68fb      	ldr	r3, [r7, #12]
    a0a0:	3301      	adds	r3, #1
    a0a2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	88db      	ldrh	r3, [r3, #6]
    a0a8:	001a      	movs	r2, r3
    a0aa:	68fb      	ldr	r3, [r7, #12]
    a0ac:	429a      	cmp	r2, r3
    a0ae:	d803      	bhi.n	a0b8 <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    a0b0:	68bb      	ldr	r3, [r7, #8]
    a0b2:	2210      	movs	r2, #16
    a0b4:	835a      	strh	r2, [r3, #26]
			return;
    a0b6:	e006      	b.n	a0c6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    a0b8:	68bb      	ldr	r3, [r7, #8]
    a0ba:	8b5b      	ldrh	r3, [r3, #26]
    a0bc:	b29b      	uxth	r3, r3
    a0be:	001a      	movs	r2, r3
    a0c0:	2310      	movs	r3, #16
    a0c2:	4013      	ands	r3, r2
    a0c4:	d0eb      	beq.n	a09e <i2c_master_enable+0x3a>
}
    a0c6:	46bd      	mov	sp, r7
    a0c8:	b004      	add	sp, #16
    a0ca:	bd80      	pop	{r7, pc}
    a0cc:	00009fbd 	.word	0x00009fbd
    a0d0:	0000e225 	.word	0x0000e225
    a0d4:	00009e99 	.word	0x00009e99

0000a0d8 <i2c_master_enable_callback>:
{
    a0d8:	b580      	push	{r7, lr}
    a0da:	b082      	sub	sp, #8
    a0dc:	af00      	add	r7, sp, #0
    a0de:	6078      	str	r0, [r7, #4]
    a0e0:	000a      	movs	r2, r1
    a0e2:	1cfb      	adds	r3, r7, #3
    a0e4:	701a      	strb	r2, [r3, #0]
	module->enabled_callback |= (1 << callback_type);
    a0e6:	687b      	ldr	r3, [r7, #4]
    a0e8:	7e5b      	ldrb	r3, [r3, #25]
    a0ea:	b2db      	uxtb	r3, r3
    a0ec:	b25a      	sxtb	r2, r3
    a0ee:	1cfb      	adds	r3, r7, #3
    a0f0:	781b      	ldrb	r3, [r3, #0]
    a0f2:	2101      	movs	r1, #1
    a0f4:	4099      	lsls	r1, r3
    a0f6:	000b      	movs	r3, r1
    a0f8:	b25b      	sxtb	r3, r3
    a0fa:	4313      	orrs	r3, r2
    a0fc:	b25b      	sxtb	r3, r3
    a0fe:	b2da      	uxtb	r2, r3
    a100:	687b      	ldr	r3, [r7, #4]
    a102:	765a      	strb	r2, [r3, #25]
}
    a104:	46c0      	nop			; (mov r8, r8)
    a106:	46bd      	mov	sp, r7
    a108:	b002      	add	sp, #8
    a10a:	bd80      	pop	{r7, pc}

0000a10c <i2c_master_get_job_status>:
 *                                      data, indicating that slave does not
 *                                      want more data and was not able to read
 */
static inline enum status_code i2c_master_get_job_status(
		struct i2c_master_module *const module)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	b082      	sub	sp, #8
    a110:	af00      	add	r7, sp, #0
    a112:	6078      	str	r0, [r7, #4]
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	2225      	movs	r2, #37	; 0x25
    a118:	5c9b      	ldrb	r3, [r3, r2]
    a11a:	b2db      	uxtb	r3, r3
}
    a11c:	0018      	movs	r0, r3
    a11e:	46bd      	mov	sp, r7
    a120:	b002      	add	sp, #8
    a122:	bd80      	pop	{r7, pc}

0000a124 <handle_hmi_input>:
static const lcv_parameters_t upper_settings_range = {.enable = 0, .tidal_volume_ml = 2500,
.peep_cm_h20 = 20, .pip_cm_h20 = 35, .breath_per_min = 60, .ie_ratio_tenths=40};


static void handle_hmi_input(void)
{
    a124:	b590      	push	{r4, r7, lr}
    a126:	b083      	sub	sp, #12
    a128:	af00      	add	r7, sp, #0
	static bool last_button_status = false;
	// Check for stage change
	bool new_button_status = get_pushbutton_level();
    a12a:	1dfc      	adds	r4, r7, #7
    a12c:	4b66      	ldr	r3, [pc, #408]	; (a2c8 <handle_hmi_input+0x1a4>)
    a12e:	4798      	blx	r3
    a130:	0003      	movs	r3, r0
    a132:	7023      	strb	r3, [r4, #0]

	if(!last_button_status && new_button_status)
    a134:	4b65      	ldr	r3, [pc, #404]	; (a2cc <handle_hmi_input+0x1a8>)
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	2201      	movs	r2, #1
    a13a:	4053      	eors	r3, r2
    a13c:	b2db      	uxtb	r3, r3
    a13e:	2b00      	cmp	r3, #0
    a140:	d028      	beq.n	a194 <handle_hmi_input+0x70>
    a142:	1dfb      	adds	r3, r7, #7
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	2b00      	cmp	r3, #0
    a148:	d024      	beq.n	a194 <handle_hmi_input+0x70>
	{
		switch (stage)
    a14a:	4b61      	ldr	r3, [pc, #388]	; (a2d0 <handle_hmi_input+0x1ac>)
    a14c:	781b      	ldrb	r3, [r3, #0]
    a14e:	2b04      	cmp	r3, #4
    a150:	d81c      	bhi.n	a18c <handle_hmi_input+0x68>
    a152:	009a      	lsls	r2, r3, #2
    a154:	4b5f      	ldr	r3, [pc, #380]	; (a2d4 <handle_hmi_input+0x1b0>)
    a156:	18d3      	adds	r3, r2, r3
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	469f      	mov	pc, r3
		{
			case STAGE_NONE:
				stage = STAGE_BPM;
    a15c:	4b5c      	ldr	r3, [pc, #368]	; (a2d0 <handle_hmi_input+0x1ac>)
    a15e:	2201      	movs	r2, #1
    a160:	701a      	strb	r2, [r3, #0]
				break;
    a162:	e017      	b.n	a194 <handle_hmi_input+0x70>

			case STAGE_BPM:
				stage = STAGE_PEEP;
    a164:	4b5a      	ldr	r3, [pc, #360]	; (a2d0 <handle_hmi_input+0x1ac>)
    a166:	2202      	movs	r2, #2
    a168:	701a      	strb	r2, [r3, #0]
				break;
    a16a:	e013      	b.n	a194 <handle_hmi_input+0x70>

			case STAGE_PEEP:
				stage = STAGE_PIP;
    a16c:	4b58      	ldr	r3, [pc, #352]	; (a2d0 <handle_hmi_input+0x1ac>)
    a16e:	2203      	movs	r2, #3
    a170:	701a      	strb	r2, [r3, #0]
				break;
    a172:	e00f      	b.n	a194 <handle_hmi_input+0x70>

			case STAGE_PIP:
				stage = STAGE_IE;
    a174:	4b56      	ldr	r3, [pc, #344]	; (a2d0 <handle_hmi_input+0x1ac>)
    a176:	2204      	movs	r2, #4
    a178:	701a      	strb	r2, [r3, #0]
				break;
    a17a:	e00b      	b.n	a194 <handle_hmi_input+0x70>

			case STAGE_IE:
				// Save settings
				update_settings(&settings_input);
    a17c:	4b56      	ldr	r3, [pc, #344]	; (a2d8 <handle_hmi_input+0x1b4>)
    a17e:	0018      	movs	r0, r3
    a180:	4b56      	ldr	r3, [pc, #344]	; (a2dc <handle_hmi_input+0x1b8>)
    a182:	4798      	blx	r3
				stage = STAGE_NONE;
    a184:	4b52      	ldr	r3, [pc, #328]	; (a2d0 <handle_hmi_input+0x1ac>)
    a186:	2200      	movs	r2, #0
    a188:	701a      	strb	r2, [r3, #0]
				break;
    a18a:	e003      	b.n	a194 <handle_hmi_input+0x70>
			
			default:
				stage = STAGE_NONE;
    a18c:	4b50      	ldr	r3, [pc, #320]	; (a2d0 <handle_hmi_input+0x1ac>)
    a18e:	2200      	movs	r2, #0
    a190:	701a      	strb	r2, [r3, #0]
				break;
    a192:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Handle the stage

	float knob_portion = get_input_potentiometer_portion();
    a194:	4b52      	ldr	r3, [pc, #328]	; (a2e0 <handle_hmi_input+0x1bc>)
    a196:	4798      	blx	r3
    a198:	1c03      	adds	r3, r0, #0
    a19a:	603b      	str	r3, [r7, #0]

	switch (stage)
    a19c:	4b4c      	ldr	r3, [pc, #304]	; (a2d0 <handle_hmi_input+0x1ac>)
    a19e:	781b      	ldrb	r3, [r3, #0]
    a1a0:	2b04      	cmp	r3, #4
    a1a2:	d900      	bls.n	a1a6 <handle_hmi_input+0x82>
    a1a4:	e083      	b.n	a2ae <handle_hmi_input+0x18a>
    a1a6:	009a      	lsls	r2, r3, #2
    a1a8:	4b4e      	ldr	r3, [pc, #312]	; (a2e4 <handle_hmi_input+0x1c0>)
    a1aa:	18d3      	adds	r3, r2, r3
    a1ac:	681b      	ldr	r3, [r3, #0]
    a1ae:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
		break;

		case STAGE_BPM:
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    a1b0:	2206      	movs	r2, #6
    a1b2:	4b4d      	ldr	r3, [pc, #308]	; (a2e8 <handle_hmi_input+0x1c4>)
    a1b4:	0010      	movs	r0, r2
    a1b6:	4798      	blx	r3
    a1b8:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.breath_per_min - lower_settings_range.breath_per_min);
    a1ba:	223c      	movs	r2, #60	; 0x3c
    a1bc:	2306      	movs	r3, #6
    a1be:	1ad2      	subs	r2, r2, r3
    a1c0:	4b49      	ldr	r3, [pc, #292]	; (a2e8 <handle_hmi_input+0x1c4>)
    a1c2:	0010      	movs	r0, r2
    a1c4:	4798      	blx	r3
    a1c6:	1c02      	adds	r2, r0, #0
    a1c8:	4b48      	ldr	r3, [pc, #288]	; (a2ec <handle_hmi_input+0x1c8>)
    a1ca:	6839      	ldr	r1, [r7, #0]
    a1cc:	1c10      	adds	r0, r2, #0
    a1ce:	4798      	blx	r3
    a1d0:	1c03      	adds	r3, r0, #0
    a1d2:	1c1a      	adds	r2, r3, #0
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    a1d4:	4b46      	ldr	r3, [pc, #280]	; (a2f0 <handle_hmi_input+0x1cc>)
    a1d6:	1c11      	adds	r1, r2, #0
    a1d8:	1c20      	adds	r0, r4, #0
    a1da:	4798      	blx	r3
    a1dc:	1c03      	adds	r3, r0, #0
    a1de:	1c1a      	adds	r2, r3, #0
    a1e0:	4b44      	ldr	r3, [pc, #272]	; (a2f4 <handle_hmi_input+0x1d0>)
    a1e2:	1c10      	adds	r0, r2, #0
    a1e4:	4798      	blx	r3
    a1e6:	0002      	movs	r2, r0
    a1e8:	4b3b      	ldr	r3, [pc, #236]	; (a2d8 <handle_hmi_input+0x1b4>)
    a1ea:	611a      	str	r2, [r3, #16]
			break;
    a1ec:	e064      	b.n	a2b8 <handle_hmi_input+0x194>

		case STAGE_PEEP:
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    a1ee:	2203      	movs	r2, #3
    a1f0:	4b3d      	ldr	r3, [pc, #244]	; (a2e8 <handle_hmi_input+0x1c4>)
    a1f2:	0010      	movs	r0, r2
    a1f4:	4798      	blx	r3
    a1f6:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.peep_cm_h20 - lower_settings_range.peep_cm_h20);
    a1f8:	2214      	movs	r2, #20
    a1fa:	2303      	movs	r3, #3
    a1fc:	1ad2      	subs	r2, r2, r3
    a1fe:	4b3a      	ldr	r3, [pc, #232]	; (a2e8 <handle_hmi_input+0x1c4>)
    a200:	0010      	movs	r0, r2
    a202:	4798      	blx	r3
    a204:	1c02      	adds	r2, r0, #0
    a206:	4b39      	ldr	r3, [pc, #228]	; (a2ec <handle_hmi_input+0x1c8>)
    a208:	6839      	ldr	r1, [r7, #0]
    a20a:	1c10      	adds	r0, r2, #0
    a20c:	4798      	blx	r3
    a20e:	1c03      	adds	r3, r0, #0
    a210:	1c1a      	adds	r2, r3, #0
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    a212:	4b37      	ldr	r3, [pc, #220]	; (a2f0 <handle_hmi_input+0x1cc>)
    a214:	1c11      	adds	r1, r2, #0
    a216:	1c20      	adds	r0, r4, #0
    a218:	4798      	blx	r3
    a21a:	1c03      	adds	r3, r0, #0
    a21c:	1c1a      	adds	r2, r3, #0
    a21e:	4b35      	ldr	r3, [pc, #212]	; (a2f4 <handle_hmi_input+0x1d0>)
    a220:	1c10      	adds	r0, r2, #0
    a222:	4798      	blx	r3
    a224:	0002      	movs	r2, r0
    a226:	4b2c      	ldr	r3, [pc, #176]	; (a2d8 <handle_hmi_input+0x1b4>)
    a228:	609a      	str	r2, [r3, #8]
			break;
    a22a:	e045      	b.n	a2b8 <handle_hmi_input+0x194>

		case STAGE_PIP:
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    a22c:	220a      	movs	r2, #10
    a22e:	4b2e      	ldr	r3, [pc, #184]	; (a2e8 <handle_hmi_input+0x1c4>)
    a230:	0010      	movs	r0, r2
    a232:	4798      	blx	r3
    a234:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.pip_cm_h20 - lower_settings_range.pip_cm_h20);
    a236:	2223      	movs	r2, #35	; 0x23
    a238:	230a      	movs	r3, #10
    a23a:	1ad2      	subs	r2, r2, r3
    a23c:	4b2a      	ldr	r3, [pc, #168]	; (a2e8 <handle_hmi_input+0x1c4>)
    a23e:	0010      	movs	r0, r2
    a240:	4798      	blx	r3
    a242:	1c02      	adds	r2, r0, #0
    a244:	4b29      	ldr	r3, [pc, #164]	; (a2ec <handle_hmi_input+0x1c8>)
    a246:	6839      	ldr	r1, [r7, #0]
    a248:	1c10      	adds	r0, r2, #0
    a24a:	4798      	blx	r3
    a24c:	1c03      	adds	r3, r0, #0
    a24e:	1c1a      	adds	r2, r3, #0
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    a250:	4b27      	ldr	r3, [pc, #156]	; (a2f0 <handle_hmi_input+0x1cc>)
    a252:	1c11      	adds	r1, r2, #0
    a254:	1c20      	adds	r0, r4, #0
    a256:	4798      	blx	r3
    a258:	1c03      	adds	r3, r0, #0
    a25a:	1c1a      	adds	r2, r3, #0
    a25c:	4b25      	ldr	r3, [pc, #148]	; (a2f4 <handle_hmi_input+0x1d0>)
    a25e:	1c10      	adds	r0, r2, #0
    a260:	4798      	blx	r3
    a262:	0002      	movs	r2, r0
    a264:	4b1c      	ldr	r3, [pc, #112]	; (a2d8 <handle_hmi_input+0x1b4>)
    a266:	60da      	str	r2, [r3, #12]
			break;
    a268:	e026      	b.n	a2b8 <handle_hmi_input+0x194>

		case STAGE_IE:
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    a26a:	2305      	movs	r3, #5
    a26c:	001a      	movs	r2, r3
    a26e:	4b1e      	ldr	r3, [pc, #120]	; (a2e8 <handle_hmi_input+0x1c4>)
    a270:	0010      	movs	r0, r2
    a272:	4798      	blx	r3
    a274:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.ie_ratio_tenths - lower_settings_range.ie_ratio_tenths);
    a276:	2328      	movs	r3, #40	; 0x28
    a278:	001a      	movs	r2, r3
    a27a:	2305      	movs	r3, #5
    a27c:	1ad2      	subs	r2, r2, r3
    a27e:	4b1a      	ldr	r3, [pc, #104]	; (a2e8 <handle_hmi_input+0x1c4>)
    a280:	0010      	movs	r0, r2
    a282:	4798      	blx	r3
    a284:	1c02      	adds	r2, r0, #0
    a286:	4b19      	ldr	r3, [pc, #100]	; (a2ec <handle_hmi_input+0x1c8>)
    a288:	6839      	ldr	r1, [r7, #0]
    a28a:	1c10      	adds	r0, r2, #0
    a28c:	4798      	blx	r3
    a28e:	1c03      	adds	r3, r0, #0
    a290:	1c1a      	adds	r2, r3, #0
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    a292:	4b17      	ldr	r3, [pc, #92]	; (a2f0 <handle_hmi_input+0x1cc>)
    a294:	1c11      	adds	r1, r2, #0
    a296:	1c20      	adds	r0, r4, #0
    a298:	4798      	blx	r3
    a29a:	1c03      	adds	r3, r0, #0
    a29c:	1c1a      	adds	r2, r3, #0
    a29e:	4b16      	ldr	r3, [pc, #88]	; (a2f8 <handle_hmi_input+0x1d4>)
    a2a0:	1c10      	adds	r0, r2, #0
    a2a2:	4798      	blx	r3
    a2a4:	0003      	movs	r3, r0
    a2a6:	b2da      	uxtb	r2, r3
    a2a8:	4b0b      	ldr	r3, [pc, #44]	; (a2d8 <handle_hmi_input+0x1b4>)
    a2aa:	705a      	strb	r2, [r3, #1]
			break;
    a2ac:	e004      	b.n	a2b8 <handle_hmi_input+0x194>
		
		default:
			stage = STAGE_NONE;
    a2ae:	4b08      	ldr	r3, [pc, #32]	; (a2d0 <handle_hmi_input+0x1ac>)
    a2b0:	2200      	movs	r2, #0
    a2b2:	701a      	strb	r2, [r3, #0]
			break;
    a2b4:	e000      	b.n	a2b8 <handle_hmi_input+0x194>
		break;
    a2b6:	46c0      	nop			; (mov r8, r8)
	}

	last_button_status = new_button_status;
    a2b8:	4b04      	ldr	r3, [pc, #16]	; (a2cc <handle_hmi_input+0x1a8>)
    a2ba:	1dfa      	adds	r2, r7, #7
    a2bc:	7812      	ldrb	r2, [r2, #0]
    a2be:	701a      	strb	r2, [r3, #0]
}
    a2c0:	46c0      	nop			; (mov r8, r8)
    a2c2:	46bd      	mov	sp, r7
    a2c4:	b003      	add	sp, #12
    a2c6:	bd90      	pop	{r4, r7, pc}
    a2c8:	0000a6b9 	.word	0x0000a6b9
    a2cc:	20003ac4 	.word	0x20003ac4
    a2d0:	20003aac 	.word	0x20003aac
    a2d4:	00013a18 	.word	0x00013a18
    a2d8:	20003ab0 	.word	0x20003ab0
    a2dc:	00009d1d 	.word	0x00009d1d
    a2e0:	00007b9d 	.word	0x00007b9d
    a2e4:	00013a2c 	.word	0x00013a2c
    a2e8:	0001108d 	.word	0x0001108d
    a2ec:	00010ad5 	.word	0x00010ad5
    a2f0:	000103d1 	.word	0x000103d1
    a2f4:	0001104d 	.word	0x0001104d
    a2f8:	000101e5 	.word	0x000101e5

0000a2fc <vScreenChangeTimerCallback>:

static void vScreenChangeTimerCallback( TimerHandle_t xTimer )
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	display_main_page = !display_main_page;
    a304:	4b08      	ldr	r3, [pc, #32]	; (a328 <vScreenChangeTimerCallback+0x2c>)
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	1e5a      	subs	r2, r3, #1
    a30a:	4193      	sbcs	r3, r2
    a30c:	b2db      	uxtb	r3, r3
    a30e:	2201      	movs	r2, #1
    a310:	4053      	eors	r3, r2
    a312:	b2db      	uxtb	r3, r3
    a314:	1c1a      	adds	r2, r3, #0
    a316:	2301      	movs	r3, #1
    a318:	4013      	ands	r3, r2
    a31a:	b2da      	uxtb	r2, r3
    a31c:	4b02      	ldr	r3, [pc, #8]	; (a328 <vScreenChangeTimerCallback+0x2c>)
    a31e:	701a      	strb	r2, [r3, #0]
}
    a320:	46c0      	nop			; (mov r8, r8)
    a322:	46bd      	mov	sp, r7
    a324:	b002      	add	sp, #8
    a326:	bd80      	pop	{r7, pc}
    a328:	200001d0 	.word	0x200001d0

0000a32c <vScreenRefreshTimerCallback>:

static void vScreenRefreshTimerCallback( TimerHandle_t xTimer )
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b082      	sub	sp, #8
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	
	// Don't display alarm page if no alarms
	if(!display_main_page)
    a334:	4b10      	ldr	r3, [pc, #64]	; (a378 <vScreenRefreshTimerCallback+0x4c>)
    a336:	781b      	ldrb	r3, [r3, #0]
    a338:	2201      	movs	r2, #1
    a33a:	4053      	eors	r3, r2
    a33c:	b2db      	uxtb	r3, r3
    a33e:	2b00      	cmp	r3, #0
    a340:	d00b      	beq.n	a35a <vScreenRefreshTimerCallback+0x2e>
	{
		if(!any_alarms_set())
    a342:	4b0e      	ldr	r3, [pc, #56]	; (a37c <vScreenRefreshTimerCallback+0x50>)
    a344:	4798      	blx	r3
    a346:	0003      	movs	r3, r0
    a348:	001a      	movs	r2, r3
    a34a:	2301      	movs	r3, #1
    a34c:	4053      	eors	r3, r2
    a34e:	b2db      	uxtb	r3, r3
    a350:	2b00      	cmp	r3, #0
    a352:	d002      	beq.n	a35a <vScreenRefreshTimerCallback+0x2e>
		{
			display_main_page = true;
    a354:	4b08      	ldr	r3, [pc, #32]	; (a378 <vScreenRefreshTimerCallback+0x4c>)
    a356:	2201      	movs	r2, #1
    a358:	701a      	strb	r2, [r3, #0]
		}
	}

	if(display_main_page)
    a35a:	4b07      	ldr	r3, [pc, #28]	; (a378 <vScreenRefreshTimerCallback+0x4c>)
    a35c:	781b      	ldrb	r3, [r3, #0]
    a35e:	2b00      	cmp	r3, #0
    a360:	d003      	beq.n	a36a <vScreenRefreshTimerCallback+0x3e>
	{
		send_buffer(MAIN_SCREEN);
    a362:	2000      	movs	r0, #0
    a364:	4b06      	ldr	r3, [pc, #24]	; (a380 <vScreenRefreshTimerCallback+0x54>)
    a366:	4798      	blx	r3
	}
	else
	{
		send_buffer(ALARM_SCREEN);
	}
}
    a368:	e002      	b.n	a370 <vScreenRefreshTimerCallback+0x44>
		send_buffer(ALARM_SCREEN);
    a36a:	2001      	movs	r0, #1
    a36c:	4b04      	ldr	r3, [pc, #16]	; (a380 <vScreenRefreshTimerCallback+0x54>)
    a36e:	4798      	blx	r3
}
    a370:	46c0      	nop			; (mov r8, r8)
    a372:	46bd      	mov	sp, r7
    a374:	b002      	add	sp, #8
    a376:	bd80      	pop	{r7, pc}
    a378:	200001d0 	.word	0x200001d0
    a37c:	00007c8d 	.word	0x00007c8d
    a380:	00008c71 	.word	0x00008c71

0000a384 <vI2CTimeoutTimerCallback>:

static void vI2CTimeoutTimerCallback( TimerHandle_t xTimer )
{
    a384:	b580      	push	{r7, lr}
    a386:	b082      	sub	sp, #8
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	vTaskResume(lcd_i2c_task_handle);
    a38c:	4b04      	ldr	r3, [pc, #16]	; (a3a0 <vI2CTimeoutTimerCallback+0x1c>)
    a38e:	681b      	ldr	r3, [r3, #0]
    a390:	0018      	movs	r0, r3
    a392:	4b04      	ldr	r3, [pc, #16]	; (a3a4 <vI2CTimeoutTimerCallback+0x20>)
    a394:	4798      	blx	r3
}
    a396:	46c0      	nop			; (mov r8, r8)
    a398:	46bd      	mov	sp, r7
    a39a:	b002      	add	sp, #8
    a39c:	bd80      	pop	{r7, pc}
    a39e:	46c0      	nop			; (mov r8, r8)
    a3a0:	20003a70 	.word	0x20003a70
    a3a4:	0000bcd5 	.word	0x0000bcd5

0000a3a8 <handle_i2c_write_complete>:

static void handle_i2c_write_complete(struct i2c_master_module *const module)
{
    a3a8:	b590      	push	{r4, r7, lr}
    a3aa:	b085      	sub	sp, #20
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
	 enum status_code status = i2c_master_get_job_status(module);
    a3b0:	230f      	movs	r3, #15
    a3b2:	18fc      	adds	r4, r7, r3
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	0018      	movs	r0, r3
    a3b8:	4b06      	ldr	r3, [pc, #24]	; (a3d4 <handle_i2c_write_complete+0x2c>)
    a3ba:	4798      	blx	r3
    a3bc:	0003      	movs	r3, r0
    a3be:	7023      	strb	r3, [r4, #0]

	xTaskResumeFromISR(lcd_i2c_task_handle);
    a3c0:	4b05      	ldr	r3, [pc, #20]	; (a3d8 <handle_i2c_write_complete+0x30>)
    a3c2:	681b      	ldr	r3, [r3, #0]
    a3c4:	0018      	movs	r0, r3
    a3c6:	4b05      	ldr	r3, [pc, #20]	; (a3dc <handle_i2c_write_complete+0x34>)
    a3c8:	4798      	blx	r3
}
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	46bd      	mov	sp, r7
    a3ce:	b005      	add	sp, #20
    a3d0:	bd90      	pop	{r4, r7, pc}
    a3d2:	46c0      	nop			; (mov r8, r8)
    a3d4:	0000a10d 	.word	0x0000a10d
    a3d8:	20003a70 	.word	0x20003a70
    a3dc:	0000bd89 	.word	0x0000bd89

0000a3e0 <lcd_i2c_hw_setup>:

static void lcd_i2c_hw_setup(void)
{
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b08e      	sub	sp, #56	; 0x38
    a3e4:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    a3e6:	1d3b      	adds	r3, r7, #4
    a3e8:	0018      	movs	r0, r3
    a3ea:	4b21      	ldr	r3, [pc, #132]	; (a470 <lcd_i2c_hw_setup+0x90>)
    a3ec:	4798      	blx	r3
	config_i2c_master.generator_source = GCLK_GENERATOR_1;	// 8 MHz
    a3ee:	1d3b      	adds	r3, r7, #4
    a3f0:	2201      	movs	r2, #1
    a3f2:	731a      	strb	r2, [r3, #12]
	config_i2c_master.baud_rate = 45; // Set in # of kHz
    a3f4:	1d3b      	adds	r3, r7, #4
    a3f6:	222d      	movs	r2, #45	; 0x2d
    a3f8:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535;
    a3fa:	1d3b      	adds	r3, r7, #4
    a3fc:	2201      	movs	r2, #1
    a3fe:	4252      	negs	r2, r2
    a400:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA16C_SERCOM1_PAD0;
    a402:	1d3b      	adds	r3, r7, #4
    a404:	2210      	movs	r2, #16
    a406:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA17C_SERCOM1_PAD1;
    a408:	1d3b      	adds	r3, r7, #4
    a40a:	2211      	movs	r2, #17
    a40c:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, LCD_SERCOM, &config_i2c_master) != STATUS_OK);
    a40e:	46c0      	nop			; (mov r8, r8)
    a410:	1d3a      	adds	r2, r7, #4
    a412:	4918      	ldr	r1, [pc, #96]	; (a474 <lcd_i2c_hw_setup+0x94>)
    a414:	4b18      	ldr	r3, [pc, #96]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a416:	0018      	movs	r0, r3
    a418:	4b18      	ldr	r3, [pc, #96]	; (a47c <lcd_i2c_hw_setup+0x9c>)
    a41a:	4798      	blx	r3
    a41c:	1e03      	subs	r3, r0, #0
    a41e:	d1f7      	bne.n	a410 <lcd_i2c_hw_setup+0x30>

	// Uses FreeRTOS, so need to limit priority
	irq_register_handler(LCD_SERCOM_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    a420:	200a      	movs	r0, #10
    a422:	4b17      	ldr	r3, [pc, #92]	; (a480 <lcd_i2c_hw_setup+0xa0>)
    a424:	4798      	blx	r3
    a426:	2104      	movs	r1, #4
    a428:	200a      	movs	r0, #10
    a42a:	4b16      	ldr	r3, [pc, #88]	; (a484 <lcd_i2c_hw_setup+0xa4>)
    a42c:	4798      	blx	r3
    a42e:	200a      	movs	r0, #10
    a430:	4b15      	ldr	r3, [pc, #84]	; (a488 <lcd_i2c_hw_setup+0xa8>)
    a432:	4798      	blx	r3
	i2c_master_register_callback(&i2c_master_instance, handle_i2c_write_complete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    a434:	4915      	ldr	r1, [pc, #84]	; (a48c <lcd_i2c_hw_setup+0xac>)
    a436:	4b10      	ldr	r3, [pc, #64]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a438:	2200      	movs	r2, #0
    a43a:	0018      	movs	r0, r3
    a43c:	4b14      	ldr	r3, [pc, #80]	; (a490 <lcd_i2c_hw_setup+0xb0>)
    a43e:	4798      	blx	r3
	i2c_master_register_callback(&i2c_master_instance, handle_i2c_write_complete, I2C_MASTER_CALLBACK_ERROR);
    a440:	4912      	ldr	r1, [pc, #72]	; (a48c <lcd_i2c_hw_setup+0xac>)
    a442:	4b0d      	ldr	r3, [pc, #52]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a444:	2202      	movs	r2, #2
    a446:	0018      	movs	r0, r3
    a448:	4b11      	ldr	r3, [pc, #68]	; (a490 <lcd_i2c_hw_setup+0xb0>)
    a44a:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    a44c:	4b0a      	ldr	r3, [pc, #40]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a44e:	2100      	movs	r1, #0
    a450:	0018      	movs	r0, r3
    a452:	4b10      	ldr	r3, [pc, #64]	; (a494 <lcd_i2c_hw_setup+0xb4>)
    a454:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_ERROR);
    a456:	4b08      	ldr	r3, [pc, #32]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a458:	2102      	movs	r1, #2
    a45a:	0018      	movs	r0, r3
    a45c:	4b0d      	ldr	r3, [pc, #52]	; (a494 <lcd_i2c_hw_setup+0xb4>)
    a45e:	4798      	blx	r3

	i2c_master_enable(&i2c_master_instance);
    a460:	4b05      	ldr	r3, [pc, #20]	; (a478 <lcd_i2c_hw_setup+0x98>)
    a462:	0018      	movs	r0, r3
    a464:	4b0c      	ldr	r3, [pc, #48]	; (a498 <lcd_i2c_hw_setup+0xb8>)
    a466:	4798      	blx	r3
}
    a468:	46c0      	nop			; (mov r8, r8)
    a46a:	46bd      	mov	sp, r7
    a46c:	b00e      	add	sp, #56	; 0x38
    a46e:	bd80      	pop	{r7, pc}
    a470:	00009fe1 	.word	0x00009fe1
    a474:	42000c00 	.word	0x42000c00
    a478:	20003a84 	.word	0x20003a84
    a47c:	00003289 	.word	0x00003289
    a480:	00009d89 	.word	0x00009d89
    a484:	00009dbd 	.word	0x00009dbd
    a488:	00009d5d 	.word	0x00009d5d
    a48c:	0000a3a9 	.word	0x0000a3a9
    a490:	0000373d 	.word	0x0000373d
    a494:	0000a0d9 	.word	0x0000a0d9
    a498:	0000a065 	.word	0x0000a065

0000a49c <hmi_task>:

static void hmi_task(void * pvParameters)
{
    a49c:	b590      	push	{r4, r7, lr}
    a49e:	b087      	sub	sp, #28
    a4a0:	af02      	add	r7, sp, #8
    a4a2:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	lcd_i2c_hw_setup();
    a4a4:	4b29      	ldr	r3, [pc, #164]	; (a54c <hmi_task+0xb0>)
    a4a6:	4798      	blx	r3
	lcd_init();
    a4a8:	4b29      	ldr	r3, [pc, #164]	; (a550 <hmi_task+0xb4>)
    a4aa:	4798      	blx	r3

	screen_update_handle = xTimerCreate("SCREEN_TIM",
    a4ac:	4829      	ldr	r0, [pc, #164]	; (a554 <hmi_task+0xb8>)
    a4ae:	4b2a      	ldr	r3, [pc, #168]	; (a558 <hmi_task+0xbc>)
    a4b0:	9300      	str	r3, [sp, #0]
    a4b2:	2300      	movs	r3, #0
    a4b4:	2201      	movs	r2, #1
    a4b6:	211e      	movs	r1, #30
    a4b8:	4c28      	ldr	r4, [pc, #160]	; (a55c <hmi_task+0xc0>)
    a4ba:	47a0      	blx	r4
    a4bc:	0002      	movs	r2, r0
    a4be:	4b28      	ldr	r3, [pc, #160]	; (a560 <hmi_task+0xc4>)
    a4c0:	601a      	str	r2, [r3, #0]
				pdMS_TO_TICKS(30),
				pdTRUE,
				(void *) 0,
				vScreenRefreshTimerCallback);
	if(screen_update_handle)
    a4c2:	4b27      	ldr	r3, [pc, #156]	; (a560 <hmi_task+0xc4>)
    a4c4:	681b      	ldr	r3, [r3, #0]
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d00b      	beq.n	a4e2 <hmi_task+0x46>
	{
		xTimerStart(screen_update_handle, 0);
    a4ca:	4b25      	ldr	r3, [pc, #148]	; (a560 <hmi_task+0xc4>)
    a4cc:	681c      	ldr	r4, [r3, #0]
    a4ce:	4b25      	ldr	r3, [pc, #148]	; (a564 <hmi_task+0xc8>)
    a4d0:	4798      	blx	r3
    a4d2:	0002      	movs	r2, r0
    a4d4:	2300      	movs	r3, #0
    a4d6:	9300      	str	r3, [sp, #0]
    a4d8:	2300      	movs	r3, #0
    a4da:	2101      	movs	r1, #1
    a4dc:	0020      	movs	r0, r4
    a4de:	4c22      	ldr	r4, [pc, #136]	; (a568 <hmi_task+0xcc>)
    a4e0:	47a0      	blx	r4
	}

	screen_change_handle = xTimerCreate("SCREEN_CHG",
    a4e2:	23fa      	movs	r3, #250	; 0xfa
    a4e4:	00d9      	lsls	r1, r3, #3
    a4e6:	4821      	ldr	r0, [pc, #132]	; (a56c <hmi_task+0xd0>)
    a4e8:	4b21      	ldr	r3, [pc, #132]	; (a570 <hmi_task+0xd4>)
    a4ea:	9300      	str	r3, [sp, #0]
    a4ec:	2300      	movs	r3, #0
    a4ee:	2201      	movs	r2, #1
    a4f0:	4c1a      	ldr	r4, [pc, #104]	; (a55c <hmi_task+0xc0>)
    a4f2:	47a0      	blx	r4
    a4f4:	0002      	movs	r2, r0
    a4f6:	4b1f      	ldr	r3, [pc, #124]	; (a574 <hmi_task+0xd8>)
    a4f8:	601a      	str	r2, [r3, #0]
		pdMS_TO_TICKS(2000),
		pdTRUE,
		(void *) 0,
		vScreenChangeTimerCallback);
	if(screen_change_handle)
    a4fa:	4b1e      	ldr	r3, [pc, #120]	; (a574 <hmi_task+0xd8>)
    a4fc:	681b      	ldr	r3, [r3, #0]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d00b      	beq.n	a51a <hmi_task+0x7e>
	{
		xTimerStart(screen_change_handle, 0);
    a502:	4b1c      	ldr	r3, [pc, #112]	; (a574 <hmi_task+0xd8>)
    a504:	681c      	ldr	r4, [r3, #0]
    a506:	4b17      	ldr	r3, [pc, #92]	; (a564 <hmi_task+0xc8>)
    a508:	4798      	blx	r3
    a50a:	0002      	movs	r2, r0
    a50c:	2300      	movs	r3, #0
    a50e:	9300      	str	r3, [sp, #0]
    a510:	2300      	movs	r3, #0
    a512:	2101      	movs	r1, #1
    a514:	0020      	movs	r0, r4
    a516:	4c14      	ldr	r4, [pc, #80]	; (a568 <hmi_task+0xcc>)
    a518:	47a0      	blx	r4
	}

	const TickType_t xFrequency = pdMS_TO_TICKS(20);	// 50 Hz rate
    a51a:	2314      	movs	r3, #20
    a51c:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
    a51e:	4b11      	ldr	r3, [pc, #68]	; (a564 <hmi_task+0xc8>)
    a520:	4798      	blx	r3
    a522:	0003      	movs	r3, r0
    a524:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    a526:	68fa      	ldr	r2, [r7, #12]
    a528:	2308      	movs	r3, #8
    a52a:	18fb      	adds	r3, r7, r3
    a52c:	0011      	movs	r1, r2
    a52e:	0018      	movs	r0, r3
    a530:	4b11      	ldr	r3, [pc, #68]	; (a578 <hmi_task+0xdc>)
    a532:	4798      	blx	r3

		handle_hmi_input();
    a534:	4b11      	ldr	r3, [pc, #68]	; (a57c <hmi_task+0xe0>)
    a536:	4798      	blx	r3
		// Actual display write and screen changes happens in timers. Here we just update buffers
		update_main_buffer(&settings_input, stage);
    a538:	4b11      	ldr	r3, [pc, #68]	; (a580 <hmi_task+0xe4>)
    a53a:	781a      	ldrb	r2, [r3, #0]
    a53c:	4b11      	ldr	r3, [pc, #68]	; (a584 <hmi_task+0xe8>)
    a53e:	0011      	movs	r1, r2
    a540:	0018      	movs	r0, r3
    a542:	4b11      	ldr	r3, [pc, #68]	; (a588 <hmi_task+0xec>)
    a544:	4798      	blx	r3
		update_alarm_buffer();
    a546:	4b11      	ldr	r3, [pc, #68]	; (a58c <hmi_task+0xf0>)
    a548:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    a54a:	e7ec      	b.n	a526 <hmi_task+0x8a>
    a54c:	0000a3e1 	.word	0x0000a3e1
    a550:	00008bd9 	.word	0x00008bd9
    a554:	00013a40 	.word	0x00013a40
    a558:	0000a32d 	.word	0x0000a32d
    a55c:	0000c8a9 	.word	0x0000c8a9
    a560:	20003a74 	.word	0x20003a74
    a564:	0000c029 	.word	0x0000c029
    a568:	0000c94d 	.word	0x0000c94d
    a56c:	00013a4c 	.word	0x00013a4c
    a570:	0000a2fd 	.word	0x0000a2fd
    a574:	20003a78 	.word	0x20003a78
    a578:	0000ba69 	.word	0x0000ba69
    a57c:	0000a125 	.word	0x0000a125
    a580:	20003aac 	.word	0x20003aac
    a584:	20003ab0 	.word	0x20003ab0
    a588:	00008f29 	.word	0x00008f29
    a58c:	00009101 	.word	0x00009101

0000a590 <lcd_i2c_task>:

	}
}

static void lcd_i2c_task(void * pvParameters)
{
    a590:	b590      	push	{r4, r7, lr}
    a592:	b089      	sub	sp, #36	; 0x24
    a594:	af02      	add	r7, sp, #8
    a596:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	i2c_timeout_timer_handle = xTimerCreate("I2C_TIMEOUT",
    a598:	4817      	ldr	r0, [pc, #92]	; (a5f8 <lcd_i2c_task+0x68>)
    a59a:	4b18      	ldr	r3, [pc, #96]	; (a5fc <lcd_i2c_task+0x6c>)
    a59c:	9300      	str	r3, [sp, #0]
    a59e:	2300      	movs	r3, #0
    a5a0:	2200      	movs	r2, #0
    a5a2:	211e      	movs	r1, #30
    a5a4:	4c16      	ldr	r4, [pc, #88]	; (a600 <lcd_i2c_task+0x70>)
    a5a6:	47a0      	blx	r4
    a5a8:	0002      	movs	r2, r0
    a5aa:	4b16      	ldr	r3, [pc, #88]	; (a604 <lcd_i2c_task+0x74>)
    a5ac:	601a      	str	r2, [r3, #0]

	i2c_transaction_t transaction;

	for (;;)
	{
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    a5ae:	4b16      	ldr	r3, [pc, #88]	; (a608 <lcd_i2c_task+0x78>)
    a5b0:	6818      	ldr	r0, [r3, #0]
    a5b2:	2301      	movs	r3, #1
    a5b4:	425a      	negs	r2, r3
    a5b6:	230c      	movs	r3, #12
    a5b8:	18fb      	adds	r3, r7, r3
    a5ba:	0019      	movs	r1, r3
    a5bc:	4b13      	ldr	r3, [pc, #76]	; (a60c <lcd_i2c_task+0x7c>)
    a5be:	4798      	blx	r3
    a5c0:	0003      	movs	r3, r0
    a5c2:	2b01      	cmp	r3, #1
    a5c4:	d1f3      	bne.n	a5ae <lcd_i2c_task+0x1e>
		{
			// Send transaction
			i2c_master_write_packet_job(&i2c_master_instance, &transaction.packet);
    a5c6:	230c      	movs	r3, #12
    a5c8:	18fa      	adds	r2, r7, r3
    a5ca:	4b11      	ldr	r3, [pc, #68]	; (a610 <lcd_i2c_task+0x80>)
    a5cc:	0011      	movs	r1, r2
    a5ce:	0018      	movs	r0, r3
    a5d0:	4b10      	ldr	r3, [pc, #64]	; (a614 <lcd_i2c_task+0x84>)
    a5d2:	4798      	blx	r3

			// Set up timeout timer
			xTimerReset(i2c_timeout_timer_handle, 0);
    a5d4:	4b0b      	ldr	r3, [pc, #44]	; (a604 <lcd_i2c_task+0x74>)
    a5d6:	681c      	ldr	r4, [r3, #0]
    a5d8:	4b0f      	ldr	r3, [pc, #60]	; (a618 <lcd_i2c_task+0x88>)
    a5da:	4798      	blx	r3
    a5dc:	0002      	movs	r2, r0
    a5de:	2300      	movs	r3, #0
    a5e0:	9300      	str	r3, [sp, #0]
    a5e2:	2300      	movs	r3, #0
    a5e4:	2102      	movs	r1, #2
    a5e6:	0020      	movs	r0, r4
    a5e8:	4c0c      	ldr	r4, [pc, #48]	; (a61c <lcd_i2c_task+0x8c>)
    a5ea:	47a0      	blx	r4

			vTaskSuspend(lcd_i2c_task_handle);
    a5ec:	4b0c      	ldr	r3, [pc, #48]	; (a620 <lcd_i2c_task+0x90>)
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	0018      	movs	r0, r3
    a5f2:	4b0c      	ldr	r3, [pc, #48]	; (a624 <lcd_i2c_task+0x94>)
    a5f4:	4798      	blx	r3
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    a5f6:	e7da      	b.n	a5ae <lcd_i2c_task+0x1e>
    a5f8:	00013a58 	.word	0x00013a58
    a5fc:	0000a385 	.word	0x0000a385
    a600:	0000c8a9 	.word	0x0000c8a9
    a604:	20003a7c 	.word	0x20003a7c
    a608:	20003a80 	.word	0x20003a80
    a60c:	0000b23d 	.word	0x0000b23d
    a610:	20003a84 	.word	0x20003a84
    a614:	000039c1 	.word	0x000039c1
    a618:	0000c029 	.word	0x0000c029
    a61c:	0000c94d 	.word	0x0000c94d
    a620:	20003a70 	.word	0x20003a70
    a624:	0000bb8d 	.word	0x0000bb8d

0000a628 <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    a628:	b590      	push	{r4, r7, lr}
    a62a:	b085      	sub	sp, #20
    a62c:	af02      	add	r7, sp, #8
    a62e:	0002      	movs	r2, r0
    a630:	6039      	str	r1, [r7, #0]
    a632:	1dbb      	adds	r3, r7, #6
    a634:	801a      	strh	r2, [r3, #0]
	lcd_i2c_queue = xQueueCreate(LCD_I2C_QUEUE_SIZE, sizeof(i2c_transaction_t));
    a636:	2200      	movs	r2, #0
    a638:	210c      	movs	r1, #12
    a63a:	200a      	movs	r0, #10
    a63c:	4b0f      	ldr	r3, [pc, #60]	; (a67c <create_hmi_task+0x54>)
    a63e:	4798      	blx	r3
    a640:	0002      	movs	r2, r0
    a642:	4b0f      	ldr	r3, [pc, #60]	; (a680 <create_hmi_task+0x58>)
    a644:	601a      	str	r2, [r3, #0]

	xTaskCreate(hmi_task, (const char * const) "HMI",
    a646:	1dbb      	adds	r3, r7, #6
    a648:	881a      	ldrh	r2, [r3, #0]
    a64a:	490e      	ldr	r1, [pc, #56]	; (a684 <create_hmi_task+0x5c>)
    a64c:	480e      	ldr	r0, [pc, #56]	; (a688 <create_hmi_task+0x60>)
    a64e:	4b0f      	ldr	r3, [pc, #60]	; (a68c <create_hmi_task+0x64>)
    a650:	9301      	str	r3, [sp, #4]
    a652:	683b      	ldr	r3, [r7, #0]
    a654:	9300      	str	r3, [sp, #0]
    a656:	2300      	movs	r3, #0
    a658:	4c0d      	ldr	r4, [pc, #52]	; (a690 <create_hmi_task+0x68>)
    a65a:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);

	xTaskCreate(lcd_i2c_task, (const char * const) "I2C",
    a65c:	2380      	movs	r3, #128	; 0x80
    a65e:	005a      	lsls	r2, r3, #1
    a660:	490c      	ldr	r1, [pc, #48]	; (a694 <create_hmi_task+0x6c>)
    a662:	480d      	ldr	r0, [pc, #52]	; (a698 <create_hmi_task+0x70>)
    a664:	4b0d      	ldr	r3, [pc, #52]	; (a69c <create_hmi_task+0x74>)
    a666:	9301      	str	r3, [sp, #4]
    a668:	683b      	ldr	r3, [r7, #0]
    a66a:	9300      	str	r3, [sp, #0]
    a66c:	2300      	movs	r3, #0
    a66e:	4c08      	ldr	r4, [pc, #32]	; (a690 <create_hmi_task+0x68>)
    a670:	47a0      	blx	r4
		256, NULL, task_priority, &lcd_i2c_task_handle);
}
    a672:	46c0      	nop			; (mov r8, r8)
    a674:	46bd      	mov	sp, r7
    a676:	b003      	add	sp, #12
    a678:	bd90      	pop	{r4, r7, pc}
    a67a:	46c0      	nop			; (mov r8, r8)
    a67c:	0000ae79 	.word	0x0000ae79
    a680:	20003a80 	.word	0x20003a80
    a684:	00013a64 	.word	0x00013a64
    a688:	0000a49d 	.word	0x0000a49d
    a68c:	20003a6c 	.word	0x20003a6c
    a690:	0000b7d5 	.word	0x0000b7d5
    a694:	00013a68 	.word	0x00013a68
    a698:	0000a591 	.word	0x0000a591
    a69c:	20003a70 	.word	0x20003a70

0000a6a0 <system_is_enabled>:
*	\brief Checks is the system enable switch is on
*
*	\return True if enabled, false otherwise
*/
bool system_is_enabled(void)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	af00      	add	r7, sp, #0
	return (ioport_get_pin_level(INPUT_ENABLE_GPIO) == IOPORT_PIN_LEVEL_HIGH);
    a6a4:	202b      	movs	r0, #43	; 0x2b
    a6a6:	4b03      	ldr	r3, [pc, #12]	; (a6b4 <system_is_enabled+0x14>)
    a6a8:	4798      	blx	r3
    a6aa:	0003      	movs	r3, r0
}
    a6ac:	0018      	movs	r0, r3
    a6ae:	46bd      	mov	sp, r7
    a6b0:	bd80      	pop	{r7, pc}
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	00009f79 	.word	0x00009f79

0000a6b8 <get_pushbutton_level>:
*	\brief Checks the level of the pushbutton
*
*	\return True if high, false if low
*/
bool get_pushbutton_level(void)
{
    a6b8:	b580      	push	{r7, lr}
    a6ba:	af00      	add	r7, sp, #0
	return ioport_get_pin_level(INPUT_PUSHBUTTON_GPIO);
    a6bc:	200c      	movs	r0, #12
    a6be:	4b03      	ldr	r3, [pc, #12]	; (a6cc <get_pushbutton_level+0x14>)
    a6c0:	4798      	blx	r3
    a6c2:	0003      	movs	r3, r0
}
    a6c4:	0018      	movs	r0, r3
    a6c6:	46bd      	mov	sp, r7
    a6c8:	bd80      	pop	{r7, pc}
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	00009f79 	.word	0x00009f79

0000a6d0 <add_lcd_i2c_transaction_to_queue>:

void add_lcd_i2c_transaction_to_queue(i2c_transaction_t transaction)
{
    a6d0:	b590      	push	{r4, r7, lr}
    a6d2:	b085      	sub	sp, #20
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	1d3b      	adds	r3, r7, #4
    a6d8:	6018      	str	r0, [r3, #0]
    a6da:	6059      	str	r1, [r3, #4]
    a6dc:	609a      	str	r2, [r3, #8]
	if(lcd_i2c_queue)
    a6de:	4b07      	ldr	r3, [pc, #28]	; (a6fc <add_lcd_i2c_transaction_to_queue+0x2c>)
    a6e0:	681b      	ldr	r3, [r3, #0]
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d006      	beq.n	a6f4 <add_lcd_i2c_transaction_to_queue+0x24>
	{
		xQueueSend(lcd_i2c_queue, &transaction, 0);
    a6e6:	4b05      	ldr	r3, [pc, #20]	; (a6fc <add_lcd_i2c_transaction_to_queue+0x2c>)
    a6e8:	6818      	ldr	r0, [r3, #0]
    a6ea:	1d39      	adds	r1, r7, #4
    a6ec:	2300      	movs	r3, #0
    a6ee:	2200      	movs	r2, #0
    a6f0:	4c03      	ldr	r4, [pc, #12]	; (a700 <add_lcd_i2c_transaction_to_queue+0x30>)
    a6f2:	47a0      	blx	r4
	}
    a6f4:	46c0      	nop			; (mov r8, r8)
    a6f6:	46bd      	mov	sp, r7
    a6f8:	b005      	add	sp, #20
    a6fa:	bd90      	pop	{r4, r7, pc}
    a6fc:	20003a80 	.word	0x20003a80
    a700:	0000af3d 	.word	0x0000af3d

0000a704 <arch_ioport_pin_to_port_id>:
{
    a704:	b580      	push	{r7, lr}
    a706:	b082      	sub	sp, #8
    a708:	af00      	add	r7, sp, #0
    a70a:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    a70c:	687b      	ldr	r3, [r7, #4]
    a70e:	095b      	lsrs	r3, r3, #5
}
    a710:	0018      	movs	r0, r3
    a712:	46bd      	mov	sp, r7
    a714:	b002      	add	sp, #8
    a716:	bd80      	pop	{r7, pc}

0000a718 <arch_ioport_port_to_base>:
{
    a718:	b580      	push	{r7, lr}
    a71a:	b082      	sub	sp, #8
    a71c:	af00      	add	r7, sp, #0
    a71e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	01db      	lsls	r3, r3, #7
    a724:	4a03      	ldr	r2, [pc, #12]	; (a734 <arch_ioport_port_to_base+0x1c>)
    a726:	4694      	mov	ip, r2
    a728:	4463      	add	r3, ip
}
    a72a:	0018      	movs	r0, r3
    a72c:	46bd      	mov	sp, r7
    a72e:	b002      	add	sp, #8
    a730:	bd80      	pop	{r7, pc}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	41004400 	.word	0x41004400

0000a738 <arch_ioport_pin_to_base>:
{
    a738:	b580      	push	{r7, lr}
    a73a:	b082      	sub	sp, #8
    a73c:	af00      	add	r7, sp, #0
    a73e:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	0018      	movs	r0, r3
    a744:	4b05      	ldr	r3, [pc, #20]	; (a75c <arch_ioport_pin_to_base+0x24>)
    a746:	4798      	blx	r3
    a748:	0003      	movs	r3, r0
    a74a:	0018      	movs	r0, r3
    a74c:	4b04      	ldr	r3, [pc, #16]	; (a760 <arch_ioport_pin_to_base+0x28>)
    a74e:	4798      	blx	r3
    a750:	0003      	movs	r3, r0
}
    a752:	0018      	movs	r0, r3
    a754:	46bd      	mov	sp, r7
    a756:	b002      	add	sp, #8
    a758:	bd80      	pop	{r7, pc}
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	0000a705 	.word	0x0000a705
    a760:	0000a719 	.word	0x0000a719

0000a764 <arch_ioport_pin_to_mask>:
{
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	221f      	movs	r2, #31
    a770:	4013      	ands	r3, r2
    a772:	2201      	movs	r2, #1
    a774:	409a      	lsls	r2, r3
    a776:	0013      	movs	r3, r2
}
    a778:	0018      	movs	r0, r3
    a77a:	46bd      	mov	sp, r7
    a77c:	b002      	add	sp, #8
    a77e:	bd80      	pop	{r7, pc}

0000a780 <arch_ioport_set_pin_level>:
{
    a780:	b590      	push	{r4, r7, lr}
    a782:	b083      	sub	sp, #12
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    a788:	000a      	movs	r2, r1
    a78a:	1cfb      	adds	r3, r7, #3
    a78c:	701a      	strb	r2, [r3, #0]
	if (level) {
    a78e:	1cfb      	adds	r3, r7, #3
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	2b00      	cmp	r3, #0
    a794:	d00b      	beq.n	a7ae <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    a796:	687b      	ldr	r3, [r7, #4]
    a798:	0018      	movs	r0, r3
    a79a:	4b0c      	ldr	r3, [pc, #48]	; (a7cc <arch_ioport_set_pin_level+0x4c>)
    a79c:	4798      	blx	r3
    a79e:	0004      	movs	r4, r0
    a7a0:	687b      	ldr	r3, [r7, #4]
    a7a2:	0018      	movs	r0, r3
    a7a4:	4b0a      	ldr	r3, [pc, #40]	; (a7d0 <arch_ioport_set_pin_level+0x50>)
    a7a6:	4798      	blx	r3
    a7a8:	0003      	movs	r3, r0
    a7aa:	61a3      	str	r3, [r4, #24]
}
    a7ac:	e00a      	b.n	a7c4 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	0018      	movs	r0, r3
    a7b2:	4b06      	ldr	r3, [pc, #24]	; (a7cc <arch_ioport_set_pin_level+0x4c>)
    a7b4:	4798      	blx	r3
    a7b6:	0004      	movs	r4, r0
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	0018      	movs	r0, r3
    a7bc:	4b04      	ldr	r3, [pc, #16]	; (a7d0 <arch_ioport_set_pin_level+0x50>)
    a7be:	4798      	blx	r3
    a7c0:	0003      	movs	r3, r0
    a7c2:	6163      	str	r3, [r4, #20]
}
    a7c4:	46c0      	nop			; (mov r8, r8)
    a7c6:	46bd      	mov	sp, r7
    a7c8:	b003      	add	sp, #12
    a7ca:	bd90      	pop	{r4, r7, pc}
    a7cc:	0000a739 	.word	0x0000a739
    a7d0:	0000a765 	.word	0x0000a765

0000a7d4 <ioport_set_pin_level>:
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b082      	sub	sp, #8
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	000a      	movs	r2, r1
    a7de:	1cfb      	adds	r3, r7, #3
    a7e0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    a7e2:	1cfb      	adds	r3, r7, #3
    a7e4:	781a      	ldrb	r2, [r3, #0]
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	0011      	movs	r1, r2
    a7ea:	0018      	movs	r0, r3
    a7ec:	4b02      	ldr	r3, [pc, #8]	; (a7f8 <ioport_set_pin_level+0x24>)
    a7ee:	4798      	blx	r3
}
    a7f0:	46c0      	nop			; (mov r8, r8)
    a7f2:	46bd      	mov	sp, r7
    a7f4:	b002      	add	sp, #8
    a7f6:	bd80      	pop	{r7, pc}
    a7f8:	0000a781 	.word	0x0000a781

0000a7fc <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b082      	sub	sp, #8
    a800:	af00      	add	r7, sp, #0
    a802:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(100));
    a804:	2064      	movs	r0, #100	; 0x64
    a806:	4b08      	ldr	r3, [pc, #32]	; (a828 <monitor_task+0x2c>)
    a808:	4798      	blx	r3

		if(any_alarms_set())
    a80a:	4b08      	ldr	r3, [pc, #32]	; (a82c <monitor_task+0x30>)
    a80c:	4798      	blx	r3
    a80e:	1e03      	subs	r3, r0, #0
    a810:	d004      	beq.n	a81c <monitor_task+0x20>
		{
			//ioport_set_pin_level(BUZZER_GPIO, BUZZER_GPIO_ACTIVE_LEVEL); // TODO once IO more reliable, add back in to alarm issues
			ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    a812:	2100      	movs	r1, #0
    a814:	2036      	movs	r0, #54	; 0x36
    a816:	4b06      	ldr	r3, [pc, #24]	; (a830 <monitor_task+0x34>)
    a818:	4798      	blx	r3
    a81a:	e7f3      	b.n	a804 <monitor_task+0x8>
		}
		else
		{
			ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    a81c:	2100      	movs	r1, #0
    a81e:	2036      	movs	r0, #54	; 0x36
    a820:	4b03      	ldr	r3, [pc, #12]	; (a830 <monitor_task+0x34>)
    a822:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(100));
    a824:	e7ee      	b.n	a804 <monitor_task+0x8>
    a826:	46c0      	nop			; (mov r8, r8)
    a828:	0000bb31 	.word	0x0000bb31
    a82c:	00007c8d 	.word	0x00007c8d
    a830:	0000a7d5 	.word	0x0000a7d5

0000a834 <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    a834:	b590      	push	{r4, r7, lr}
    a836:	b085      	sub	sp, #20
    a838:	af02      	add	r7, sp, #8
    a83a:	0002      	movs	r2, r0
    a83c:	6039      	str	r1, [r7, #0]
    a83e:	1dbb      	adds	r3, r7, #6
    a840:	801a      	strh	r2, [r3, #0]
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    a842:	1dbb      	adds	r3, r7, #6
    a844:	881a      	ldrh	r2, [r3, #0]
    a846:	4906      	ldr	r1, [pc, #24]	; (a860 <create_monitor_task+0x2c>)
    a848:	4806      	ldr	r0, [pc, #24]	; (a864 <create_monitor_task+0x30>)
    a84a:	4b07      	ldr	r3, [pc, #28]	; (a868 <create_monitor_task+0x34>)
    a84c:	9301      	str	r3, [sp, #4]
    a84e:	683b      	ldr	r3, [r7, #0]
    a850:	9300      	str	r3, [sp, #0]
    a852:	2300      	movs	r3, #0
    a854:	4c05      	ldr	r4, [pc, #20]	; (a86c <create_monitor_task+0x38>)
    a856:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    a858:	46c0      	nop			; (mov r8, r8)
    a85a:	46bd      	mov	sp, r7
    a85c:	b003      	add	sp, #12
    a85e:	bd90      	pop	{r4, r7, pc}
    a860:	00013a6c 	.word	0x00013a6c
    a864:	0000a7fd 	.word	0x0000a7fd
    a868:	20003ac8 	.word	0x20003ac8
    a86c:	0000b7d5 	.word	0x0000b7d5

0000a870 <vFS6122ReadTimerCallback>:
*	\brief Timer callback for sending I2C command to reset internal address pointer
*
*	\param xTimer The timer handle
*/
static void vFS6122ReadTimerCallback( TimerHandle_t xTimer )
{
    a870:	b580      	push	{r7, lr}
    a872:	b082      	sub	sp, #8
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
	reset_fs6122_read_pointer();
    a878:	4b02      	ldr	r3, [pc, #8]	; (a884 <vFS6122ReadTimerCallback+0x14>)
    a87a:	4798      	blx	r3
}
    a87c:	46c0      	nop			; (mov r8, r8)
    a87e:	46bd      	mov	sp, r7
    a880:	b002      	add	sp, #8
    a882:	bd80      	pop	{r7, pc}
    a884:	00008641 	.word	0x00008641

0000a888 <vTidalVolumeTimerCallback>:
*	\brief Timer callback for tidal volume estimation
*
*	\param xTimer The timer handle
*/
static void vTidalVolumeTimerCallback( TimerHandle_t xTimer )
{
    a888:	b5f0      	push	{r4, r5, r6, r7, lr}
    a88a:	b08d      	sub	sp, #52	; 0x34
    a88c:	af02      	add	r7, sp, #8
    a88e:	60f8      	str	r0, [r7, #12]
	static float filtered_rate = 0.0;
	static float last_filtered_rate = 0.0;
	static bool rising = true;
	static uint32_t last_time = 0;

	uint32_t current_time = xTaskGetTickCount();
    a890:	4b96      	ldr	r3, [pc, #600]	; (aaec <vTidalVolumeTimerCallback+0x264>)
    a892:	4798      	blx	r3
    a894:	0003      	movs	r3, r0
    a896:	627b      	str	r3, [r7, #36]	; 0x24

	siargo_fs6122_data_t data;
	read_fs6122_data(&data);
    a898:	2308      	movs	r3, #8
    a89a:	2208      	movs	r2, #8
    a89c:	4694      	mov	ip, r2
    a89e:	44bc      	add	ip, r7
    a8a0:	4463      	add	r3, ip
    a8a2:	0018      	movs	r0, r3
    a8a4:	4b92      	ldr	r3, [pc, #584]	; (aaf0 <vTidalVolumeTimerCallback+0x268>)
    a8a6:	4798      	blx	r3
	float flow_slm = data.flow_thousand_slpm * 0.001;
    a8a8:	2308      	movs	r3, #8
    a8aa:	2208      	movs	r2, #8
    a8ac:	4694      	mov	ip, r2
    a8ae:	44bc      	add	ip, r7
    a8b0:	4463      	add	r3, ip
    a8b2:	681a      	ldr	r2, [r3, #0]
    a8b4:	4b8f      	ldr	r3, [pc, #572]	; (aaf4 <vTidalVolumeTimerCallback+0x26c>)
    a8b6:	0010      	movs	r0, r2
    a8b8:	4798      	blx	r3
    a8ba:	4c8f      	ldr	r4, [pc, #572]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a8bc:	4a8f      	ldr	r2, [pc, #572]	; (aafc <vTidalVolumeTimerCallback+0x274>)
    a8be:	4b90      	ldr	r3, [pc, #576]	; (ab00 <vTidalVolumeTimerCallback+0x278>)
    a8c0:	47a0      	blx	r4
    a8c2:	0003      	movs	r3, r0
    a8c4:	000c      	movs	r4, r1
    a8c6:	0019      	movs	r1, r3
    a8c8:	0022      	movs	r2, r4
    a8ca:	4b8e      	ldr	r3, [pc, #568]	; (ab04 <vTidalVolumeTimerCallback+0x27c>)
    a8cc:	0008      	movs	r0, r1
    a8ce:	0011      	movs	r1, r2
    a8d0:	4798      	blx	r3
    a8d2:	1c03      	adds	r3, r0, #0
    a8d4:	623b      	str	r3, [r7, #32]

	float alpha = 0.7;
    a8d6:	4b8c      	ldr	r3, [pc, #560]	; (ab08 <vTidalVolumeTimerCallback+0x280>)
    a8d8:	61fb      	str	r3, [r7, #28]
	filtered_rate = (alpha)*filtered_rate + (1.0-alpha)*flow_slm;
    a8da:	4b8c      	ldr	r3, [pc, #560]	; (ab0c <vTidalVolumeTimerCallback+0x284>)
    a8dc:	681a      	ldr	r2, [r3, #0]
    a8de:	4b8c      	ldr	r3, [pc, #560]	; (ab10 <vTidalVolumeTimerCallback+0x288>)
    a8e0:	69f9      	ldr	r1, [r7, #28]
    a8e2:	1c10      	adds	r0, r2, #0
    a8e4:	4798      	blx	r3
    a8e6:	1c03      	adds	r3, r0, #0
    a8e8:	1c1a      	adds	r2, r3, #0
    a8ea:	4b8a      	ldr	r3, [pc, #552]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a8ec:	1c10      	adds	r0, r2, #0
    a8ee:	4798      	blx	r3
    a8f0:	0005      	movs	r5, r0
    a8f2:	000e      	movs	r6, r1
    a8f4:	4b87      	ldr	r3, [pc, #540]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a8f6:	69f8      	ldr	r0, [r7, #28]
    a8f8:	4798      	blx	r3
    a8fa:	0002      	movs	r2, r0
    a8fc:	000b      	movs	r3, r1
    a8fe:	4c86      	ldr	r4, [pc, #536]	; (ab18 <vTidalVolumeTimerCallback+0x290>)
    a900:	2000      	movs	r0, #0
    a902:	4986      	ldr	r1, [pc, #536]	; (ab1c <vTidalVolumeTimerCallback+0x294>)
    a904:	47a0      	blx	r4
    a906:	0003      	movs	r3, r0
    a908:	000c      	movs	r4, r1
    a90a:	603b      	str	r3, [r7, #0]
    a90c:	607c      	str	r4, [r7, #4]
    a90e:	4b81      	ldr	r3, [pc, #516]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a910:	6a38      	ldr	r0, [r7, #32]
    a912:	4798      	blx	r3
    a914:	0002      	movs	r2, r0
    a916:	000b      	movs	r3, r1
    a918:	4c77      	ldr	r4, [pc, #476]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a91a:	6838      	ldr	r0, [r7, #0]
    a91c:	6879      	ldr	r1, [r7, #4]
    a91e:	47a0      	blx	r4
    a920:	0003      	movs	r3, r0
    a922:	000c      	movs	r4, r1
    a924:	001a      	movs	r2, r3
    a926:	0023      	movs	r3, r4
    a928:	4c7d      	ldr	r4, [pc, #500]	; (ab20 <vTidalVolumeTimerCallback+0x298>)
    a92a:	0028      	movs	r0, r5
    a92c:	0031      	movs	r1, r6
    a92e:	47a0      	blx	r4
    a930:	0003      	movs	r3, r0
    a932:	000c      	movs	r4, r1
    a934:	0019      	movs	r1, r3
    a936:	0022      	movs	r2, r4
    a938:	4b72      	ldr	r3, [pc, #456]	; (ab04 <vTidalVolumeTimerCallback+0x27c>)
    a93a:	0008      	movs	r0, r1
    a93c:	0011      	movs	r1, r2
    a93e:	4798      	blx	r3
    a940:	1c02      	adds	r2, r0, #0
    a942:	4b72      	ldr	r3, [pc, #456]	; (ab0c <vTidalVolumeTimerCallback+0x284>)
    a944:	601a      	str	r2, [r3, #0]
	float dt = 0.001 * (current_time - last_time); // Time in seconds
    a946:	4b77      	ldr	r3, [pc, #476]	; (ab24 <vTidalVolumeTimerCallback+0x29c>)
    a948:	681b      	ldr	r3, [r3, #0]
    a94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a94c:	1ad2      	subs	r2, r2, r3
    a94e:	4b76      	ldr	r3, [pc, #472]	; (ab28 <vTidalVolumeTimerCallback+0x2a0>)
    a950:	0010      	movs	r0, r2
    a952:	4798      	blx	r3
    a954:	4c68      	ldr	r4, [pc, #416]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a956:	4a69      	ldr	r2, [pc, #420]	; (aafc <vTidalVolumeTimerCallback+0x274>)
    a958:	4b69      	ldr	r3, [pc, #420]	; (ab00 <vTidalVolumeTimerCallback+0x278>)
    a95a:	47a0      	blx	r4
    a95c:	0003      	movs	r3, r0
    a95e:	000c      	movs	r4, r1
    a960:	0019      	movs	r1, r3
    a962:	0022      	movs	r2, r4
    a964:	4b67      	ldr	r3, [pc, #412]	; (ab04 <vTidalVolumeTimerCallback+0x27c>)
    a966:	0008      	movs	r0, r1
    a968:	0011      	movs	r1, r2
    a96a:	4798      	blx	r3
    a96c:	1c03      	adds	r3, r0, #0
    a96e:	61bb      	str	r3, [r7, #24]
	flow_volume += flow_slm * (1.0/60.0) * dt;  // flow change in liters
    a970:	4b6e      	ldr	r3, [pc, #440]	; (ab2c <vTidalVolumeTimerCallback+0x2a4>)
    a972:	681a      	ldr	r2, [r3, #0]
    a974:	4b67      	ldr	r3, [pc, #412]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a976:	1c10      	adds	r0, r2, #0
    a978:	4798      	blx	r3
    a97a:	0005      	movs	r5, r0
    a97c:	000e      	movs	r6, r1
    a97e:	4b65      	ldr	r3, [pc, #404]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a980:	6a38      	ldr	r0, [r7, #32]
    a982:	4798      	blx	r3
    a984:	4c5c      	ldr	r4, [pc, #368]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a986:	4a6a      	ldr	r2, [pc, #424]	; (ab30 <vTidalVolumeTimerCallback+0x2a8>)
    a988:	4b6a      	ldr	r3, [pc, #424]	; (ab34 <vTidalVolumeTimerCallback+0x2ac>)
    a98a:	47a0      	blx	r4
    a98c:	0003      	movs	r3, r0
    a98e:	000c      	movs	r4, r1
    a990:	603b      	str	r3, [r7, #0]
    a992:	607c      	str	r4, [r7, #4]
    a994:	4b5f      	ldr	r3, [pc, #380]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a996:	69b8      	ldr	r0, [r7, #24]
    a998:	4798      	blx	r3
    a99a:	0002      	movs	r2, r0
    a99c:	000b      	movs	r3, r1
    a99e:	4c56      	ldr	r4, [pc, #344]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a9a0:	6838      	ldr	r0, [r7, #0]
    a9a2:	6879      	ldr	r1, [r7, #4]
    a9a4:	47a0      	blx	r4
    a9a6:	0003      	movs	r3, r0
    a9a8:	000c      	movs	r4, r1
    a9aa:	001a      	movs	r2, r3
    a9ac:	0023      	movs	r3, r4
    a9ae:	4c5c      	ldr	r4, [pc, #368]	; (ab20 <vTidalVolumeTimerCallback+0x298>)
    a9b0:	0028      	movs	r0, r5
    a9b2:	0031      	movs	r1, r6
    a9b4:	47a0      	blx	r4
    a9b6:	0003      	movs	r3, r0
    a9b8:	000c      	movs	r4, r1
    a9ba:	0019      	movs	r1, r3
    a9bc:	0022      	movs	r2, r4
    a9be:	4b51      	ldr	r3, [pc, #324]	; (ab04 <vTidalVolumeTimerCallback+0x27c>)
    a9c0:	0008      	movs	r0, r1
    a9c2:	0011      	movs	r1, r2
    a9c4:	4798      	blx	r3
    a9c6:	1c02      	adds	r2, r0, #0
    a9c8:	4b58      	ldr	r3, [pc, #352]	; (ab2c <vTidalVolumeTimerCallback+0x2a4>)
    a9ca:	601a      	str	r2, [r3, #0]
	tidal_volume += abs(flow_slm) * (1.0/60.0) *dt * 0.5;	// total tidal flow change
    a9cc:	4b5a      	ldr	r3, [pc, #360]	; (ab38 <vTidalVolumeTimerCallback+0x2b0>)
    a9ce:	681a      	ldr	r2, [r3, #0]
    a9d0:	4b50      	ldr	r3, [pc, #320]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    a9d2:	1c10      	adds	r0, r2, #0
    a9d4:	4798      	blx	r3
    a9d6:	0005      	movs	r5, r0
    a9d8:	000e      	movs	r6, r1
    a9da:	4b58      	ldr	r3, [pc, #352]	; (ab3c <vTidalVolumeTimerCallback+0x2b4>)
    a9dc:	6a38      	ldr	r0, [r7, #32]
    a9de:	4798      	blx	r3
    a9e0:	0003      	movs	r3, r0
    a9e2:	17d9      	asrs	r1, r3, #31
    a9e4:	185a      	adds	r2, r3, r1
    a9e6:	404a      	eors	r2, r1
    a9e8:	4b42      	ldr	r3, [pc, #264]	; (aaf4 <vTidalVolumeTimerCallback+0x26c>)
    a9ea:	0010      	movs	r0, r2
    a9ec:	4798      	blx	r3
    a9ee:	4c42      	ldr	r4, [pc, #264]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    a9f0:	4a4f      	ldr	r2, [pc, #316]	; (ab30 <vTidalVolumeTimerCallback+0x2a8>)
    a9f2:	4b50      	ldr	r3, [pc, #320]	; (ab34 <vTidalVolumeTimerCallback+0x2ac>)
    a9f4:	47a0      	blx	r4
    a9f6:	0003      	movs	r3, r0
    a9f8:	000c      	movs	r4, r1
    a9fa:	603b      	str	r3, [r7, #0]
    a9fc:	607c      	str	r4, [r7, #4]
    a9fe:	4b45      	ldr	r3, [pc, #276]	; (ab14 <vTidalVolumeTimerCallback+0x28c>)
    aa00:	69b8      	ldr	r0, [r7, #24]
    aa02:	4798      	blx	r3
    aa04:	0002      	movs	r2, r0
    aa06:	000b      	movs	r3, r1
    aa08:	4c3b      	ldr	r4, [pc, #236]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    aa0a:	6838      	ldr	r0, [r7, #0]
    aa0c:	6879      	ldr	r1, [r7, #4]
    aa0e:	47a0      	blx	r4
    aa10:	0003      	movs	r3, r0
    aa12:	000c      	movs	r4, r1
    aa14:	0018      	movs	r0, r3
    aa16:	0021      	movs	r1, r4
    aa18:	4c37      	ldr	r4, [pc, #220]	; (aaf8 <vTidalVolumeTimerCallback+0x270>)
    aa1a:	2200      	movs	r2, #0
    aa1c:	4b48      	ldr	r3, [pc, #288]	; (ab40 <vTidalVolumeTimerCallback+0x2b8>)
    aa1e:	47a0      	blx	r4
    aa20:	0003      	movs	r3, r0
    aa22:	000c      	movs	r4, r1
    aa24:	001a      	movs	r2, r3
    aa26:	0023      	movs	r3, r4
    aa28:	4c3d      	ldr	r4, [pc, #244]	; (ab20 <vTidalVolumeTimerCallback+0x298>)
    aa2a:	0028      	movs	r0, r5
    aa2c:	0031      	movs	r1, r6
    aa2e:	47a0      	blx	r4
    aa30:	0003      	movs	r3, r0
    aa32:	000c      	movs	r4, r1
    aa34:	0019      	movs	r1, r3
    aa36:	0022      	movs	r2, r4
    aa38:	4b32      	ldr	r3, [pc, #200]	; (ab04 <vTidalVolumeTimerCallback+0x27c>)
    aa3a:	0008      	movs	r0, r1
    aa3c:	0011      	movs	r1, r2
    aa3e:	4798      	blx	r3
    aa40:	1c02      	adds	r2, r0, #0
    aa42:	4b3d      	ldr	r3, [pc, #244]	; (ab38 <vTidalVolumeTimerCallback+0x2b0>)
    aa44:	601a      	str	r2, [r3, #0]

	if(rising && filtered_rate > 0.0 && last_filtered_rate <= 0.0)
    aa46:	4b3f      	ldr	r3, [pc, #252]	; (ab44 <vTidalVolumeTimerCallback+0x2bc>)
    aa48:	781b      	ldrb	r3, [r3, #0]
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d013      	beq.n	aa76 <vTidalVolumeTimerCallback+0x1ee>
    aa4e:	4b2f      	ldr	r3, [pc, #188]	; (ab0c <vTidalVolumeTimerCallback+0x284>)
    aa50:	681a      	ldr	r2, [r3, #0]
    aa52:	4b3d      	ldr	r3, [pc, #244]	; (ab48 <vTidalVolumeTimerCallback+0x2c0>)
    aa54:	2100      	movs	r1, #0
    aa56:	1c10      	adds	r0, r2, #0
    aa58:	4798      	blx	r3
    aa5a:	1e03      	subs	r3, r0, #0
    aa5c:	d00b      	beq.n	aa76 <vTidalVolumeTimerCallback+0x1ee>
    aa5e:	4b3b      	ldr	r3, [pc, #236]	; (ab4c <vTidalVolumeTimerCallback+0x2c4>)
    aa60:	681a      	ldr	r2, [r3, #0]
    aa62:	4b3b      	ldr	r3, [pc, #236]	; (ab50 <vTidalVolumeTimerCallback+0x2c8>)
    aa64:	2100      	movs	r1, #0
    aa66:	1c10      	adds	r0, r2, #0
    aa68:	4798      	blx	r3
    aa6a:	1e03      	subs	r3, r0, #0
    aa6c:	d003      	beq.n	aa76 <vTidalVolumeTimerCallback+0x1ee>
	{
		rising = false;
    aa6e:	4b35      	ldr	r3, [pc, #212]	; (ab44 <vTidalVolumeTimerCallback+0x2bc>)
    aa70:	2200      	movs	r2, #0
    aa72:	701a      	strb	r2, [r3, #0]
    aa74:	e020      	b.n	aab8 <vTidalVolumeTimerCallback+0x230>
	}
	else if(!rising && filtered_rate < 0.0 && last_filtered_rate >= 0.0)
    aa76:	4b33      	ldr	r3, [pc, #204]	; (ab44 <vTidalVolumeTimerCallback+0x2bc>)
    aa78:	781b      	ldrb	r3, [r3, #0]
    aa7a:	2201      	movs	r2, #1
    aa7c:	4053      	eors	r3, r2
    aa7e:	b2db      	uxtb	r3, r3
    aa80:	2b00      	cmp	r3, #0
    aa82:	d019      	beq.n	aab8 <vTidalVolumeTimerCallback+0x230>
    aa84:	4b21      	ldr	r3, [pc, #132]	; (ab0c <vTidalVolumeTimerCallback+0x284>)
    aa86:	681a      	ldr	r2, [r3, #0]
    aa88:	4b32      	ldr	r3, [pc, #200]	; (ab54 <vTidalVolumeTimerCallback+0x2cc>)
    aa8a:	2100      	movs	r1, #0
    aa8c:	1c10      	adds	r0, r2, #0
    aa8e:	4798      	blx	r3
    aa90:	1e03      	subs	r3, r0, #0
    aa92:	d011      	beq.n	aab8 <vTidalVolumeTimerCallback+0x230>
    aa94:	4b2d      	ldr	r3, [pc, #180]	; (ab4c <vTidalVolumeTimerCallback+0x2c4>)
    aa96:	681a      	ldr	r2, [r3, #0]
    aa98:	4b2f      	ldr	r3, [pc, #188]	; (ab58 <vTidalVolumeTimerCallback+0x2d0>)
    aa9a:	2100      	movs	r1, #0
    aa9c:	1c10      	adds	r0, r2, #0
    aa9e:	4798      	blx	r3
    aaa0:	1e03      	subs	r3, r0, #0
    aaa2:	d009      	beq.n	aab8 <vTidalVolumeTimerCallback+0x230>
	{
		recent_tidal_volume_liter = tidal_volume;
    aaa4:	4b24      	ldr	r3, [pc, #144]	; (ab38 <vTidalVolumeTimerCallback+0x2b0>)
    aaa6:	681a      	ldr	r2, [r3, #0]
    aaa8:	4b2c      	ldr	r3, [pc, #176]	; (ab5c <vTidalVolumeTimerCallback+0x2d4>)
    aaaa:	601a      	str	r2, [r3, #0]
		// Reset
		flow_volume = 0.0;
    aaac:	4b1f      	ldr	r3, [pc, #124]	; (ab2c <vTidalVolumeTimerCallback+0x2a4>)
    aaae:	2200      	movs	r2, #0
    aab0:	601a      	str	r2, [r3, #0]
		tidal_volume = 0.0;
    aab2:	4b21      	ldr	r3, [pc, #132]	; (ab38 <vTidalVolumeTimerCallback+0x2b0>)
    aab4:	2200      	movs	r2, #0
    aab6:	601a      	str	r2, [r3, #0]
	}

	last_filtered_rate = filtered_rate;
    aab8:	4b14      	ldr	r3, [pc, #80]	; (ab0c <vTidalVolumeTimerCallback+0x284>)
    aaba:	681a      	ldr	r2, [r3, #0]
    aabc:	4b23      	ldr	r3, [pc, #140]	; (ab4c <vTidalVolumeTimerCallback+0x2c4>)
    aabe:	601a      	str	r2, [r3, #0]
	last_time = current_time;
    aac0:	4b18      	ldr	r3, [pc, #96]	; (ab24 <vTidalVolumeTimerCallback+0x29c>)
    aac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    aac4:	601a      	str	r2, [r3, #0]

	request_fs6122_data();
    aac6:	4b26      	ldr	r3, [pc, #152]	; (ab60 <vTidalVolumeTimerCallback+0x2d8>)
    aac8:	4798      	blx	r3
	xTimerReset(fs6122_read_handle, 0);
    aaca:	4b26      	ldr	r3, [pc, #152]	; (ab64 <vTidalVolumeTimerCallback+0x2dc>)
    aacc:	681c      	ldr	r4, [r3, #0]
    aace:	4b07      	ldr	r3, [pc, #28]	; (aaec <vTidalVolumeTimerCallback+0x264>)
    aad0:	4798      	blx	r3
    aad2:	0002      	movs	r2, r0
    aad4:	2300      	movs	r3, #0
    aad6:	9300      	str	r3, [sp, #0]
    aad8:	2300      	movs	r3, #0
    aada:	2102      	movs	r1, #2
    aadc:	0020      	movs	r0, r4
    aade:	4c22      	ldr	r4, [pc, #136]	; (ab68 <vTidalVolumeTimerCallback+0x2e0>)
    aae0:	47a0      	blx	r4
}
    aae2:	46c0      	nop			; (mov r8, r8)
    aae4:	46bd      	mov	sp, r7
    aae6:	b00b      	add	sp, #44	; 0x2c
    aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aaea:	46c0      	nop			; (mov r8, r8)
    aaec:	0000c029 	.word	0x0000c029
    aaf0:	000086c9 	.word	0x000086c9
    aaf4:	00012949 	.word	0x00012949
    aaf8:	00011db5 	.word	0x00011db5
    aafc:	d2f1a9fc 	.word	0xd2f1a9fc
    ab00:	3f50624d 	.word	0x3f50624d
    ab04:	00012ae1 	.word	0x00012ae1
    ab08:	3f333333 	.word	0x3f333333
    ab0c:	20003adc 	.word	0x20003adc
    ab10:	00010ad5 	.word	0x00010ad5
    ab14:	00012a3d 	.word	0x00012a3d
    ab18:	000122b5 	.word	0x000122b5
    ab1c:	3ff00000 	.word	0x3ff00000
    ab20:	0001112d 	.word	0x0001112d
    ab24:	20003ae0 	.word	0x20003ae0
    ab28:	000129cd 	.word	0x000129cd
    ab2c:	20003ae4 	.word	0x20003ae4
    ab30:	11111111 	.word	0x11111111
    ab34:	3f911111 	.word	0x3f911111
    ab38:	20003ae8 	.word	0x20003ae8
    ab3c:	0001104d 	.word	0x0001104d
    ab40:	3fe00000 	.word	0x3fe00000
    ab44:	200001d1 	.word	0x200001d1
    ab48:	000100ad 	.word	0x000100ad
    ab4c:	20003aec 	.word	0x20003aec
    ab50:	00010099 	.word	0x00010099
    ab54:	00010085 	.word	0x00010085
    ab58:	000100c1 	.word	0x000100c1
    ab5c:	20003ad8 	.word	0x20003ad8
    ab60:	00008685 	.word	0x00008685
    ab64:	20003ad4 	.word	0x20003ad4
    ab68:	0000c94d 	.word	0x0000c94d

0000ab6c <sensor_hw_init>:
*	\brief Sets up sensor interface hardware
*
*	Sets up ADC for communication with pressure sensors and flow meter
*/
static void sensor_hw_init(void)
{
    ab6c:	b580      	push	{r7, lr}
    ab6e:	af00      	add	r7, sp, #0
	fs6122_init();
    ab70:	4b03      	ldr	r3, [pc, #12]	; (ab80 <sensor_hw_init+0x14>)
    ab72:	4798      	blx	r3

	adc_interface_init();
    ab74:	4b03      	ldr	r3, [pc, #12]	; (ab84 <sensor_hw_init+0x18>)
    ab76:	4798      	blx	r3
}
    ab78:	46c0      	nop			; (mov r8, r8)
    ab7a:	46bd      	mov	sp, r7
    ab7c:	bd80      	pop	{r7, pc}
    ab7e:	46c0      	nop			; (mov r8, r8)
    ab80:	00008585 	.word	0x00008585
    ab84:	00007969 	.word	0x00007969

0000ab88 <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    ab88:	b590      	push	{r4, r7, lr}
    ab8a:	b085      	sub	sp, #20
    ab8c:	af02      	add	r7, sp, #8
    ab8e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	sensor_hw_init();
    ab90:	4b16      	ldr	r3, [pc, #88]	; (abec <sensor_task+0x64>)
    ab92:	4798      	blx	r3

	volume_estimator_handle = xTimerCreate("TIDALV",
    ab94:	4816      	ldr	r0, [pc, #88]	; (abf0 <sensor_task+0x68>)
    ab96:	4b17      	ldr	r3, [pc, #92]	; (abf4 <sensor_task+0x6c>)
    ab98:	9300      	str	r3, [sp, #0]
    ab9a:	2300      	movs	r3, #0
    ab9c:	2201      	movs	r2, #1
    ab9e:	210a      	movs	r1, #10
    aba0:	4c15      	ldr	r4, [pc, #84]	; (abf8 <sensor_task+0x70>)
    aba2:	47a0      	blx	r4
    aba4:	0002      	movs	r2, r0
    aba6:	4b15      	ldr	r3, [pc, #84]	; (abfc <sensor_task+0x74>)
    aba8:	601a      	str	r2, [r3, #0]
		pdMS_TO_TICKS(TIDAL_VOLUME_PERIOD_MS),
		pdTRUE,
		(void *) 0,
		vTidalVolumeTimerCallback);

	if(volume_estimator_handle)
    abaa:	4b14      	ldr	r3, [pc, #80]	; (abfc <sensor_task+0x74>)
    abac:	681b      	ldr	r3, [r3, #0]
    abae:	2b00      	cmp	r3, #0
    abb0:	d00b      	beq.n	abca <sensor_task+0x42>
	{
		xTimerStart(volume_estimator_handle, 0);
    abb2:	4b12      	ldr	r3, [pc, #72]	; (abfc <sensor_task+0x74>)
    abb4:	681c      	ldr	r4, [r3, #0]
    abb6:	4b12      	ldr	r3, [pc, #72]	; (ac00 <sensor_task+0x78>)
    abb8:	4798      	blx	r3
    abba:	0002      	movs	r2, r0
    abbc:	2300      	movs	r3, #0
    abbe:	9300      	str	r3, [sp, #0]
    abc0:	2300      	movs	r3, #0
    abc2:	2101      	movs	r1, #1
    abc4:	0020      	movs	r0, r4
    abc6:	4c0f      	ldr	r4, [pc, #60]	; (ac04 <sensor_task+0x7c>)
    abc8:	47a0      	blx	r4
	}

	fs6122_read_handle = xTimerCreate("FLOWS",
    abca:	480f      	ldr	r0, [pc, #60]	; (ac08 <sensor_task+0x80>)
    abcc:	4b0f      	ldr	r3, [pc, #60]	; (ac0c <sensor_task+0x84>)
    abce:	9300      	str	r3, [sp, #0]
    abd0:	2300      	movs	r3, #0
    abd2:	2200      	movs	r2, #0
    abd4:	2105      	movs	r1, #5
    abd6:	4c08      	ldr	r4, [pc, #32]	; (abf8 <sensor_task+0x70>)
    abd8:	47a0      	blx	r4
    abda:	0002      	movs	r2, r0
    abdc:	4b0c      	ldr	r3, [pc, #48]	; (ac10 <sensor_task+0x88>)
    abde:	601a      	str	r2, [r3, #0]
		(void *) 0,
		vFS6122ReadTimerCallback);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    abe0:	23fa      	movs	r3, #250	; 0xfa
    abe2:	009b      	lsls	r3, r3, #2
    abe4:	0018      	movs	r0, r3
    abe6:	4b0b      	ldr	r3, [pc, #44]	; (ac14 <sensor_task+0x8c>)
    abe8:	4798      	blx	r3
    abea:	e7f9      	b.n	abe0 <sensor_task+0x58>
    abec:	0000ab6d 	.word	0x0000ab6d
    abf0:	00013a74 	.word	0x00013a74
    abf4:	0000a889 	.word	0x0000a889
    abf8:	0000c8a9 	.word	0x0000c8a9
    abfc:	20003ad0 	.word	0x20003ad0
    ac00:	0000c029 	.word	0x0000c029
    ac04:	0000c94d 	.word	0x0000c94d
    ac08:	00013a7c 	.word	0x00013a7c
    ac0c:	0000a871 	.word	0x0000a871
    ac10:	20003ad4 	.word	0x20003ad4
    ac14:	0000bb31 	.word	0x0000bb31

0000ac18 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    ac18:	b590      	push	{r4, r7, lr}
    ac1a:	b085      	sub	sp, #20
    ac1c:	af02      	add	r7, sp, #8
    ac1e:	0002      	movs	r2, r0
    ac20:	6039      	str	r1, [r7, #0]
    ac22:	1dbb      	adds	r3, r7, #6
    ac24:	801a      	strh	r2, [r3, #0]
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    ac26:	1dbb      	adds	r3, r7, #6
    ac28:	881a      	ldrh	r2, [r3, #0]
    ac2a:	4906      	ldr	r1, [pc, #24]	; (ac44 <create_sensor_task+0x2c>)
    ac2c:	4806      	ldr	r0, [pc, #24]	; (ac48 <create_sensor_task+0x30>)
    ac2e:	4b07      	ldr	r3, [pc, #28]	; (ac4c <create_sensor_task+0x34>)
    ac30:	9301      	str	r3, [sp, #4]
    ac32:	683b      	ldr	r3, [r7, #0]
    ac34:	9300      	str	r3, [sp, #0]
    ac36:	2300      	movs	r3, #0
    ac38:	4c05      	ldr	r4, [pc, #20]	; (ac50 <create_sensor_task+0x38>)
    ac3a:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
}
    ac3c:	46c0      	nop			; (mov r8, r8)
    ac3e:	46bd      	mov	sp, r7
    ac40:	b003      	add	sp, #12
    ac42:	bd90      	pop	{r4, r7, pc}
    ac44:	00013a84 	.word	0x00013a84
    ac48:	0000ab89 	.word	0x0000ab89
    ac4c:	20003acc 	.word	0x20003acc
    ac50:	0000b7d5 	.word	0x0000b7d5

0000ac54 <get_tidal_volume_liter>:

/*
*	\brief Gets the estimated tidal volume in liters
*/
float get_tidal_volume_liter(void)
{
    ac54:	b580      	push	{r7, lr}
    ac56:	af00      	add	r7, sp, #0
	return recent_tidal_volume_liter;
    ac58:	4b02      	ldr	r3, [pc, #8]	; (ac64 <get_tidal_volume_liter+0x10>)
    ac5a:	681b      	ldr	r3, [r3, #0]
    ac5c:	1c18      	adds	r0, r3, #0
    ac5e:	46bd      	mov	sp, r7
    ac60:	bd80      	pop	{r7, pc}
    ac62:	46c0      	nop			; (mov r8, r8)
    ac64:	20003ad8 	.word	0x20003ad8

0000ac68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    ac68:	b580      	push	{r7, lr}
    ac6a:	b082      	sub	sp, #8
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	3308      	adds	r3, #8
    ac74:	001a      	movs	r2, r3
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    ac7a:	687b      	ldr	r3, [r7, #4]
    ac7c:	2201      	movs	r2, #1
    ac7e:	4252      	negs	r2, r2
    ac80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	3308      	adds	r3, #8
    ac86:	001a      	movs	r2, r3
    ac88:	687b      	ldr	r3, [r7, #4]
    ac8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	3308      	adds	r3, #8
    ac90:	001a      	movs	r2, r3
    ac92:	687b      	ldr	r3, [r7, #4]
    ac94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    ac96:	687b      	ldr	r3, [r7, #4]
    ac98:	2200      	movs	r2, #0
    ac9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    ac9c:	46c0      	nop			; (mov r8, r8)
    ac9e:	46bd      	mov	sp, r7
    aca0:	b002      	add	sp, #8
    aca2:	bd80      	pop	{r7, pc}

0000aca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    aca4:	b580      	push	{r7, lr}
    aca6:	b082      	sub	sp, #8
    aca8:	af00      	add	r7, sp, #0
    acaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	2200      	movs	r2, #0
    acb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	46bd      	mov	sp, r7
    acb6:	b002      	add	sp, #8
    acb8:	bd80      	pop	{r7, pc}

0000acba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    acba:	b580      	push	{r7, lr}
    acbc:	b084      	sub	sp, #16
    acbe:	af00      	add	r7, sp, #0
    acc0:	6078      	str	r0, [r7, #4]
    acc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	685b      	ldr	r3, [r3, #4]
    acc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    acca:	683b      	ldr	r3, [r7, #0]
    accc:	68fa      	ldr	r2, [r7, #12]
    acce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    acd0:	68fb      	ldr	r3, [r7, #12]
    acd2:	689a      	ldr	r2, [r3, #8]
    acd4:	683b      	ldr	r3, [r7, #0]
    acd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    acd8:	68fb      	ldr	r3, [r7, #12]
    acda:	689b      	ldr	r3, [r3, #8]
    acdc:	683a      	ldr	r2, [r7, #0]
    acde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    ace0:	68fb      	ldr	r3, [r7, #12]
    ace2:	683a      	ldr	r2, [r7, #0]
    ace4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    ace6:	683b      	ldr	r3, [r7, #0]
    ace8:	687a      	ldr	r2, [r7, #4]
    acea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    acec:	687b      	ldr	r3, [r7, #4]
    acee:	681b      	ldr	r3, [r3, #0]
    acf0:	1c5a      	adds	r2, r3, #1
    acf2:	687b      	ldr	r3, [r7, #4]
    acf4:	601a      	str	r2, [r3, #0]
}
    acf6:	46c0      	nop			; (mov r8, r8)
    acf8:	46bd      	mov	sp, r7
    acfa:	b004      	add	sp, #16
    acfc:	bd80      	pop	{r7, pc}

0000acfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    acfe:	b580      	push	{r7, lr}
    ad00:	b084      	sub	sp, #16
    ad02:	af00      	add	r7, sp, #0
    ad04:	6078      	str	r0, [r7, #4]
    ad06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    ad08:	683b      	ldr	r3, [r7, #0]
    ad0a:	681b      	ldr	r3, [r3, #0]
    ad0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    ad0e:	68bb      	ldr	r3, [r7, #8]
    ad10:	3301      	adds	r3, #1
    ad12:	d103      	bne.n	ad1c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    ad14:	687b      	ldr	r3, [r7, #4]
    ad16:	691b      	ldr	r3, [r3, #16]
    ad18:	60fb      	str	r3, [r7, #12]
    ad1a:	e00c      	b.n	ad36 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ad1c:	687b      	ldr	r3, [r7, #4]
    ad1e:	3308      	adds	r3, #8
    ad20:	60fb      	str	r3, [r7, #12]
    ad22:	e002      	b.n	ad2a <vListInsert+0x2c>
    ad24:	68fb      	ldr	r3, [r7, #12]
    ad26:	685b      	ldr	r3, [r3, #4]
    ad28:	60fb      	str	r3, [r7, #12]
    ad2a:	68fb      	ldr	r3, [r7, #12]
    ad2c:	685b      	ldr	r3, [r3, #4]
    ad2e:	681a      	ldr	r2, [r3, #0]
    ad30:	68bb      	ldr	r3, [r7, #8]
    ad32:	429a      	cmp	r2, r3
    ad34:	d9f6      	bls.n	ad24 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    ad36:	68fb      	ldr	r3, [r7, #12]
    ad38:	685a      	ldr	r2, [r3, #4]
    ad3a:	683b      	ldr	r3, [r7, #0]
    ad3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    ad3e:	683b      	ldr	r3, [r7, #0]
    ad40:	685b      	ldr	r3, [r3, #4]
    ad42:	683a      	ldr	r2, [r7, #0]
    ad44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    ad46:	683b      	ldr	r3, [r7, #0]
    ad48:	68fa      	ldr	r2, [r7, #12]
    ad4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    ad4c:	68fb      	ldr	r3, [r7, #12]
    ad4e:	683a      	ldr	r2, [r7, #0]
    ad50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    ad52:	683b      	ldr	r3, [r7, #0]
    ad54:	687a      	ldr	r2, [r7, #4]
    ad56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	1c5a      	adds	r2, r3, #1
    ad5e:	687b      	ldr	r3, [r7, #4]
    ad60:	601a      	str	r2, [r3, #0]
}
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	46bd      	mov	sp, r7
    ad66:	b004      	add	sp, #16
    ad68:	bd80      	pop	{r7, pc}

0000ad6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    ad6a:	b580      	push	{r7, lr}
    ad6c:	b084      	sub	sp, #16
    ad6e:	af00      	add	r7, sp, #0
    ad70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    ad72:	687b      	ldr	r3, [r7, #4]
    ad74:	691b      	ldr	r3, [r3, #16]
    ad76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    ad78:	687b      	ldr	r3, [r7, #4]
    ad7a:	685b      	ldr	r3, [r3, #4]
    ad7c:	687a      	ldr	r2, [r7, #4]
    ad7e:	6892      	ldr	r2, [r2, #8]
    ad80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    ad82:	687b      	ldr	r3, [r7, #4]
    ad84:	689b      	ldr	r3, [r3, #8]
    ad86:	687a      	ldr	r2, [r7, #4]
    ad88:	6852      	ldr	r2, [r2, #4]
    ad8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    ad8c:	68fb      	ldr	r3, [r7, #12]
    ad8e:	685a      	ldr	r2, [r3, #4]
    ad90:	687b      	ldr	r3, [r7, #4]
    ad92:	429a      	cmp	r2, r3
    ad94:	d103      	bne.n	ad9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    ad96:	687b      	ldr	r3, [r7, #4]
    ad98:	689a      	ldr	r2, [r3, #8]
    ad9a:	68fb      	ldr	r3, [r7, #12]
    ad9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	2200      	movs	r2, #0
    ada2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    ada4:	68fb      	ldr	r3, [r7, #12]
    ada6:	681b      	ldr	r3, [r3, #0]
    ada8:	1e5a      	subs	r2, r3, #1
    adaa:	68fb      	ldr	r3, [r7, #12]
    adac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	681b      	ldr	r3, [r3, #0]
}
    adb2:	0018      	movs	r0, r3
    adb4:	46bd      	mov	sp, r7
    adb6:	b004      	add	sp, #16
    adb8:	bd80      	pop	{r7, pc}
	...

0000adbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    adbc:	b580      	push	{r7, lr}
    adbe:	b084      	sub	sp, #16
    adc0:	af00      	add	r7, sp, #0
    adc2:	6078      	str	r0, [r7, #4]
    adc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    adc6:	687b      	ldr	r3, [r7, #4]
    adc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    adca:	68fb      	ldr	r3, [r7, #12]
    adcc:	2b00      	cmp	r3, #0
    adce:	d101      	bne.n	add4 <xQueueGenericReset+0x18>
    add0:	b672      	cpsid	i
    add2:	e7fe      	b.n	add2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    add4:	4b23      	ldr	r3, [pc, #140]	; (ae64 <xQueueGenericReset+0xa8>)
    add6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    add8:	68fb      	ldr	r3, [r7, #12]
    adda:	681a      	ldr	r2, [r3, #0]
    addc:	68fb      	ldr	r3, [r7, #12]
    adde:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ade0:	68fb      	ldr	r3, [r7, #12]
    ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ade4:	434b      	muls	r3, r1
    ade6:	18d2      	adds	r2, r2, r3
    ade8:	68fb      	ldr	r3, [r7, #12]
    adea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    adec:	68fb      	ldr	r3, [r7, #12]
    adee:	2200      	movs	r2, #0
    adf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    adf2:	68fb      	ldr	r3, [r7, #12]
    adf4:	681a      	ldr	r2, [r3, #0]
    adf6:	68fb      	ldr	r3, [r7, #12]
    adf8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    adfa:	68fb      	ldr	r3, [r7, #12]
    adfc:	681a      	ldr	r2, [r3, #0]
    adfe:	68fb      	ldr	r3, [r7, #12]
    ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ae02:	1e59      	subs	r1, r3, #1
    ae04:	68fb      	ldr	r3, [r7, #12]
    ae06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ae08:	434b      	muls	r3, r1
    ae0a:	18d2      	adds	r2, r2, r3
    ae0c:	68fb      	ldr	r3, [r7, #12]
    ae0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    ae10:	68fb      	ldr	r3, [r7, #12]
    ae12:	2244      	movs	r2, #68	; 0x44
    ae14:	21ff      	movs	r1, #255	; 0xff
    ae16:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    ae18:	68fb      	ldr	r3, [r7, #12]
    ae1a:	2245      	movs	r2, #69	; 0x45
    ae1c:	21ff      	movs	r1, #255	; 0xff
    ae1e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    ae20:	683b      	ldr	r3, [r7, #0]
    ae22:	2b00      	cmp	r3, #0
    ae24:	d10d      	bne.n	ae42 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    ae26:	68fb      	ldr	r3, [r7, #12]
    ae28:	691b      	ldr	r3, [r3, #16]
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d013      	beq.n	ae56 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    ae2e:	68fb      	ldr	r3, [r7, #12]
    ae30:	3310      	adds	r3, #16
    ae32:	0018      	movs	r0, r3
    ae34:	4b0c      	ldr	r3, [pc, #48]	; (ae68 <xQueueGenericReset+0xac>)
    ae36:	4798      	blx	r3
    ae38:	1e03      	subs	r3, r0, #0
    ae3a:	d00c      	beq.n	ae56 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    ae3c:	4b0b      	ldr	r3, [pc, #44]	; (ae6c <xQueueGenericReset+0xb0>)
    ae3e:	4798      	blx	r3
    ae40:	e009      	b.n	ae56 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    ae42:	68fb      	ldr	r3, [r7, #12]
    ae44:	3310      	adds	r3, #16
    ae46:	0018      	movs	r0, r3
    ae48:	4b09      	ldr	r3, [pc, #36]	; (ae70 <xQueueGenericReset+0xb4>)
    ae4a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    ae4c:	68fb      	ldr	r3, [r7, #12]
    ae4e:	3324      	adds	r3, #36	; 0x24
    ae50:	0018      	movs	r0, r3
    ae52:	4b07      	ldr	r3, [pc, #28]	; (ae70 <xQueueGenericReset+0xb4>)
    ae54:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    ae56:	4b07      	ldr	r3, [pc, #28]	; (ae74 <xQueueGenericReset+0xb8>)
    ae58:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    ae5a:	2301      	movs	r3, #1
}
    ae5c:	0018      	movs	r0, r3
    ae5e:	46bd      	mov	sp, r7
    ae60:	b004      	add	sp, #16
    ae62:	bd80      	pop	{r7, pc}
    ae64:	00007321 	.word	0x00007321
    ae68:	0000c35d 	.word	0x0000c35d
    ae6c:	00007301 	.word	0x00007301
    ae70:	0000ac69 	.word	0x0000ac69
    ae74:	00007345 	.word	0x00007345

0000ae78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    ae78:	b590      	push	{r4, r7, lr}
    ae7a:	b08b      	sub	sp, #44	; 0x2c
    ae7c:	af02      	add	r7, sp, #8
    ae7e:	60f8      	str	r0, [r7, #12]
    ae80:	60b9      	str	r1, [r7, #8]
    ae82:	1dfb      	adds	r3, r7, #7
    ae84:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    ae86:	68fb      	ldr	r3, [r7, #12]
    ae88:	2b00      	cmp	r3, #0
    ae8a:	d101      	bne.n	ae90 <xQueueGenericCreate+0x18>
    ae8c:	b672      	cpsid	i
    ae8e:	e7fe      	b.n	ae8e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    ae90:	68bb      	ldr	r3, [r7, #8]
    ae92:	2b00      	cmp	r3, #0
    ae94:	d102      	bne.n	ae9c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    ae96:	2300      	movs	r3, #0
    ae98:	61fb      	str	r3, [r7, #28]
    ae9a:	e003      	b.n	aea4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ae9c:	68fb      	ldr	r3, [r7, #12]
    ae9e:	68ba      	ldr	r2, [r7, #8]
    aea0:	4353      	muls	r3, r2
    aea2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    aea4:	69fb      	ldr	r3, [r7, #28]
    aea6:	3354      	adds	r3, #84	; 0x54
    aea8:	0018      	movs	r0, r3
    aeaa:	4b0c      	ldr	r3, [pc, #48]	; (aedc <xQueueGenericCreate+0x64>)
    aeac:	4798      	blx	r3
    aeae:	0003      	movs	r3, r0
    aeb0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    aeb2:	69bb      	ldr	r3, [r7, #24]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d00c      	beq.n	aed2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    aeb8:	69bb      	ldr	r3, [r7, #24]
    aeba:	3354      	adds	r3, #84	; 0x54
    aebc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    aebe:	1dfb      	adds	r3, r7, #7
    aec0:	781c      	ldrb	r4, [r3, #0]
    aec2:	697a      	ldr	r2, [r7, #20]
    aec4:	68b9      	ldr	r1, [r7, #8]
    aec6:	68f8      	ldr	r0, [r7, #12]
    aec8:	69bb      	ldr	r3, [r7, #24]
    aeca:	9300      	str	r3, [sp, #0]
    aecc:	0023      	movs	r3, r4
    aece:	4c04      	ldr	r4, [pc, #16]	; (aee0 <xQueueGenericCreate+0x68>)
    aed0:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    aed2:	69bb      	ldr	r3, [r7, #24]
	}
    aed4:	0018      	movs	r0, r3
    aed6:	46bd      	mov	sp, r7
    aed8:	b009      	add	sp, #36	; 0x24
    aeda:	bd90      	pop	{r4, r7, pc}
    aedc:	0000744d 	.word	0x0000744d
    aee0:	0000aee5 	.word	0x0000aee5

0000aee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b084      	sub	sp, #16
    aee8:	af00      	add	r7, sp, #0
    aeea:	60f8      	str	r0, [r7, #12]
    aeec:	60b9      	str	r1, [r7, #8]
    aeee:	607a      	str	r2, [r7, #4]
    aef0:	001a      	movs	r2, r3
    aef2:	1cfb      	adds	r3, r7, #3
    aef4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    aef6:	68bb      	ldr	r3, [r7, #8]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d103      	bne.n	af04 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    aefc:	69bb      	ldr	r3, [r7, #24]
    aefe:	69ba      	ldr	r2, [r7, #24]
    af00:	601a      	str	r2, [r3, #0]
    af02:	e002      	b.n	af0a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    af04:	69bb      	ldr	r3, [r7, #24]
    af06:	687a      	ldr	r2, [r7, #4]
    af08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    af0a:	69bb      	ldr	r3, [r7, #24]
    af0c:	68fa      	ldr	r2, [r7, #12]
    af0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    af10:	69bb      	ldr	r3, [r7, #24]
    af12:	68ba      	ldr	r2, [r7, #8]
    af14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    af16:	69bb      	ldr	r3, [r7, #24]
    af18:	2101      	movs	r1, #1
    af1a:	0018      	movs	r0, r3
    af1c:	4b06      	ldr	r3, [pc, #24]	; (af38 <prvInitialiseNewQueue+0x54>)
    af1e:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    af20:	69bb      	ldr	r3, [r7, #24]
    af22:	1cfa      	adds	r2, r7, #3
    af24:	2150      	movs	r1, #80	; 0x50
    af26:	7812      	ldrb	r2, [r2, #0]
    af28:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    af2a:	69bb      	ldr	r3, [r7, #24]
    af2c:	2200      	movs	r2, #0
    af2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    af30:	46c0      	nop			; (mov r8, r8)
    af32:	46bd      	mov	sp, r7
    af34:	b004      	add	sp, #16
    af36:	bd80      	pop	{r7, pc}
    af38:	0000adbd 	.word	0x0000adbd

0000af3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    af3c:	b580      	push	{r7, lr}
    af3e:	b08a      	sub	sp, #40	; 0x28
    af40:	af00      	add	r7, sp, #0
    af42:	60f8      	str	r0, [r7, #12]
    af44:	60b9      	str	r1, [r7, #8]
    af46:	607a      	str	r2, [r7, #4]
    af48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    af4a:	2300      	movs	r3, #0
    af4c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    af4e:	68fb      	ldr	r3, [r7, #12]
    af50:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    af52:	6a3b      	ldr	r3, [r7, #32]
    af54:	2b00      	cmp	r3, #0
    af56:	d101      	bne.n	af5c <xQueueGenericSend+0x20>
    af58:	b672      	cpsid	i
    af5a:	e7fe      	b.n	af5a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    af5c:	68bb      	ldr	r3, [r7, #8]
    af5e:	2b00      	cmp	r3, #0
    af60:	d103      	bne.n	af6a <xQueueGenericSend+0x2e>
    af62:	6a3b      	ldr	r3, [r7, #32]
    af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    af66:	2b00      	cmp	r3, #0
    af68:	d101      	bne.n	af6e <xQueueGenericSend+0x32>
    af6a:	2301      	movs	r3, #1
    af6c:	e000      	b.n	af70 <xQueueGenericSend+0x34>
    af6e:	2300      	movs	r3, #0
    af70:	2b00      	cmp	r3, #0
    af72:	d101      	bne.n	af78 <xQueueGenericSend+0x3c>
    af74:	b672      	cpsid	i
    af76:	e7fe      	b.n	af76 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    af78:	683b      	ldr	r3, [r7, #0]
    af7a:	2b02      	cmp	r3, #2
    af7c:	d103      	bne.n	af86 <xQueueGenericSend+0x4a>
    af7e:	6a3b      	ldr	r3, [r7, #32]
    af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    af82:	2b01      	cmp	r3, #1
    af84:	d101      	bne.n	af8a <xQueueGenericSend+0x4e>
    af86:	2301      	movs	r3, #1
    af88:	e000      	b.n	af8c <xQueueGenericSend+0x50>
    af8a:	2300      	movs	r3, #0
    af8c:	2b00      	cmp	r3, #0
    af8e:	d101      	bne.n	af94 <xQueueGenericSend+0x58>
    af90:	b672      	cpsid	i
    af92:	e7fe      	b.n	af92 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    af94:	4b53      	ldr	r3, [pc, #332]	; (b0e4 <xQueueGenericSend+0x1a8>)
    af96:	4798      	blx	r3
    af98:	1e03      	subs	r3, r0, #0
    af9a:	d102      	bne.n	afa2 <xQueueGenericSend+0x66>
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	2b00      	cmp	r3, #0
    afa0:	d101      	bne.n	afa6 <xQueueGenericSend+0x6a>
    afa2:	2301      	movs	r3, #1
    afa4:	e000      	b.n	afa8 <xQueueGenericSend+0x6c>
    afa6:	2300      	movs	r3, #0
    afa8:	2b00      	cmp	r3, #0
    afaa:	d101      	bne.n	afb0 <xQueueGenericSend+0x74>
    afac:	b672      	cpsid	i
    afae:	e7fe      	b.n	afae <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    afb0:	4b4d      	ldr	r3, [pc, #308]	; (b0e8 <xQueueGenericSend+0x1ac>)
    afb2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    afb4:	6a3b      	ldr	r3, [r7, #32]
    afb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    afb8:	6a3b      	ldr	r3, [r7, #32]
    afba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    afbc:	429a      	cmp	r2, r3
    afbe:	d302      	bcc.n	afc6 <xQueueGenericSend+0x8a>
    afc0:	683b      	ldr	r3, [r7, #0]
    afc2:	2b02      	cmp	r3, #2
    afc4:	d12d      	bne.n	b022 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    afc6:	683a      	ldr	r2, [r7, #0]
    afc8:	68b9      	ldr	r1, [r7, #8]
    afca:	6a3b      	ldr	r3, [r7, #32]
    afcc:	0018      	movs	r0, r3
    afce:	4b47      	ldr	r3, [pc, #284]	; (b0ec <xQueueGenericSend+0x1b0>)
    afd0:	4798      	blx	r3
    afd2:	0003      	movs	r3, r0
    afd4:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    afd6:	6a3b      	ldr	r3, [r7, #32]
    afd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    afda:	2b00      	cmp	r3, #0
    afdc:	d00a      	beq.n	aff4 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    afde:	683a      	ldr	r2, [r7, #0]
    afe0:	6a3b      	ldr	r3, [r7, #32]
    afe2:	0011      	movs	r1, r2
    afe4:	0018      	movs	r0, r3
    afe6:	4b42      	ldr	r3, [pc, #264]	; (b0f0 <xQueueGenericSend+0x1b4>)
    afe8:	4798      	blx	r3
    afea:	1e03      	subs	r3, r0, #0
    afec:	d015      	beq.n	b01a <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    afee:	4b41      	ldr	r3, [pc, #260]	; (b0f4 <xQueueGenericSend+0x1b8>)
    aff0:	4798      	blx	r3
    aff2:	e012      	b.n	b01a <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    aff4:	6a3b      	ldr	r3, [r7, #32]
    aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aff8:	2b00      	cmp	r3, #0
    affa:	d009      	beq.n	b010 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    affc:	6a3b      	ldr	r3, [r7, #32]
    affe:	3324      	adds	r3, #36	; 0x24
    b000:	0018      	movs	r0, r3
    b002:	4b3d      	ldr	r3, [pc, #244]	; (b0f8 <xQueueGenericSend+0x1bc>)
    b004:	4798      	blx	r3
    b006:	1e03      	subs	r3, r0, #0
    b008:	d007      	beq.n	b01a <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    b00a:	4b3a      	ldr	r3, [pc, #232]	; (b0f4 <xQueueGenericSend+0x1b8>)
    b00c:	4798      	blx	r3
    b00e:	e004      	b.n	b01a <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    b010:	69fb      	ldr	r3, [r7, #28]
    b012:	2b00      	cmp	r3, #0
    b014:	d001      	beq.n	b01a <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    b016:	4b37      	ldr	r3, [pc, #220]	; (b0f4 <xQueueGenericSend+0x1b8>)
    b018:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    b01a:	4b38      	ldr	r3, [pc, #224]	; (b0fc <xQueueGenericSend+0x1c0>)
    b01c:	4798      	blx	r3
				return pdPASS;
    b01e:	2301      	movs	r3, #1
    b020:	e05c      	b.n	b0dc <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b022:	687b      	ldr	r3, [r7, #4]
    b024:	2b00      	cmp	r3, #0
    b026:	d103      	bne.n	b030 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b028:	4b34      	ldr	r3, [pc, #208]	; (b0fc <xQueueGenericSend+0x1c0>)
    b02a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    b02c:	2300      	movs	r3, #0
    b02e:	e055      	b.n	b0dc <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b032:	2b00      	cmp	r3, #0
    b034:	d106      	bne.n	b044 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    b036:	2314      	movs	r3, #20
    b038:	18fb      	adds	r3, r7, r3
    b03a:	0018      	movs	r0, r3
    b03c:	4b30      	ldr	r3, [pc, #192]	; (b100 <xQueueGenericSend+0x1c4>)
    b03e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b040:	2301      	movs	r3, #1
    b042:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b044:	4b2d      	ldr	r3, [pc, #180]	; (b0fc <xQueueGenericSend+0x1c0>)
    b046:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b048:	4b2e      	ldr	r3, [pc, #184]	; (b104 <xQueueGenericSend+0x1c8>)
    b04a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b04c:	4b26      	ldr	r3, [pc, #152]	; (b0e8 <xQueueGenericSend+0x1ac>)
    b04e:	4798      	blx	r3
    b050:	6a3b      	ldr	r3, [r7, #32]
    b052:	2244      	movs	r2, #68	; 0x44
    b054:	5c9b      	ldrb	r3, [r3, r2]
    b056:	b25b      	sxtb	r3, r3
    b058:	3301      	adds	r3, #1
    b05a:	d103      	bne.n	b064 <xQueueGenericSend+0x128>
    b05c:	6a3b      	ldr	r3, [r7, #32]
    b05e:	2244      	movs	r2, #68	; 0x44
    b060:	2100      	movs	r1, #0
    b062:	5499      	strb	r1, [r3, r2]
    b064:	6a3b      	ldr	r3, [r7, #32]
    b066:	2245      	movs	r2, #69	; 0x45
    b068:	5c9b      	ldrb	r3, [r3, r2]
    b06a:	b25b      	sxtb	r3, r3
    b06c:	3301      	adds	r3, #1
    b06e:	d103      	bne.n	b078 <xQueueGenericSend+0x13c>
    b070:	6a3b      	ldr	r3, [r7, #32]
    b072:	2245      	movs	r2, #69	; 0x45
    b074:	2100      	movs	r1, #0
    b076:	5499      	strb	r1, [r3, r2]
    b078:	4b20      	ldr	r3, [pc, #128]	; (b0fc <xQueueGenericSend+0x1c0>)
    b07a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b07c:	1d3a      	adds	r2, r7, #4
    b07e:	2314      	movs	r3, #20
    b080:	18fb      	adds	r3, r7, r3
    b082:	0011      	movs	r1, r2
    b084:	0018      	movs	r0, r3
    b086:	4b20      	ldr	r3, [pc, #128]	; (b108 <xQueueGenericSend+0x1cc>)
    b088:	4798      	blx	r3
    b08a:	1e03      	subs	r3, r0, #0
    b08c:	d11f      	bne.n	b0ce <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    b08e:	6a3b      	ldr	r3, [r7, #32]
    b090:	0018      	movs	r0, r3
    b092:	4b1e      	ldr	r3, [pc, #120]	; (b10c <xQueueGenericSend+0x1d0>)
    b094:	4798      	blx	r3
    b096:	1e03      	subs	r3, r0, #0
    b098:	d012      	beq.n	b0c0 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    b09a:	6a3b      	ldr	r3, [r7, #32]
    b09c:	3310      	adds	r3, #16
    b09e:	687a      	ldr	r2, [r7, #4]
    b0a0:	0011      	movs	r1, r2
    b0a2:	0018      	movs	r0, r3
    b0a4:	4b1a      	ldr	r3, [pc, #104]	; (b110 <xQueueGenericSend+0x1d4>)
    b0a6:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    b0a8:	6a3b      	ldr	r3, [r7, #32]
    b0aa:	0018      	movs	r0, r3
    b0ac:	4b19      	ldr	r3, [pc, #100]	; (b114 <xQueueGenericSend+0x1d8>)
    b0ae:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    b0b0:	4b19      	ldr	r3, [pc, #100]	; (b118 <xQueueGenericSend+0x1dc>)
    b0b2:	4798      	blx	r3
    b0b4:	1e03      	subs	r3, r0, #0
    b0b6:	d000      	beq.n	b0ba <xQueueGenericSend+0x17e>
    b0b8:	e77a      	b.n	afb0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    b0ba:	4b0e      	ldr	r3, [pc, #56]	; (b0f4 <xQueueGenericSend+0x1b8>)
    b0bc:	4798      	blx	r3
    b0be:	e777      	b.n	afb0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b0c0:	6a3b      	ldr	r3, [r7, #32]
    b0c2:	0018      	movs	r0, r3
    b0c4:	4b13      	ldr	r3, [pc, #76]	; (b114 <xQueueGenericSend+0x1d8>)
    b0c6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b0c8:	4b13      	ldr	r3, [pc, #76]	; (b118 <xQueueGenericSend+0x1dc>)
    b0ca:	4798      	blx	r3
    b0cc:	e770      	b.n	afb0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    b0ce:	6a3b      	ldr	r3, [r7, #32]
    b0d0:	0018      	movs	r0, r3
    b0d2:	4b10      	ldr	r3, [pc, #64]	; (b114 <xQueueGenericSend+0x1d8>)
    b0d4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b0d6:	4b10      	ldr	r3, [pc, #64]	; (b118 <xQueueGenericSend+0x1dc>)
    b0d8:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    b0da:	2300      	movs	r3, #0
		}
	}
}
    b0dc:	0018      	movs	r0, r3
    b0de:	46bd      	mov	sp, r7
    b0e0:	b00a      	add	sp, #40	; 0x28
    b0e2:	bd80      	pop	{r7, pc}
    b0e4:	0000c69d 	.word	0x0000c69d
    b0e8:	00007321 	.word	0x00007321
    b0ec:	0000b3dd 	.word	0x0000b3dd
    b0f0:	0000b731 	.word	0x0000b731
    b0f4:	00007301 	.word	0x00007301
    b0f8:	0000c35d 	.word	0x0000c35d
    b0fc:	00007345 	.word	0x00007345
    b100:	0000c41d 	.word	0x0000c41d
    b104:	0000bedd 	.word	0x0000bedd
    b108:	0000c445 	.word	0x0000c445
    b10c:	0000b631 	.word	0x0000b631
    b110:	0000c2c5 	.word	0x0000c2c5
    b114:	0000b50d 	.word	0x0000b50d
    b118:	0000bef5 	.word	0x0000bef5

0000b11c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    b11c:	b580      	push	{r7, lr}
    b11e:	b088      	sub	sp, #32
    b120:	af00      	add	r7, sp, #0
    b122:	60f8      	str	r0, [r7, #12]
    b124:	60b9      	str	r1, [r7, #8]
    b126:	607a      	str	r2, [r7, #4]
    b128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    b12e:	69bb      	ldr	r3, [r7, #24]
    b130:	2b00      	cmp	r3, #0
    b132:	d101      	bne.n	b138 <xQueueGenericSendFromISR+0x1c>
    b134:	b672      	cpsid	i
    b136:	e7fe      	b.n	b136 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b138:	68bb      	ldr	r3, [r7, #8]
    b13a:	2b00      	cmp	r3, #0
    b13c:	d103      	bne.n	b146 <xQueueGenericSendFromISR+0x2a>
    b13e:	69bb      	ldr	r3, [r7, #24]
    b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b142:	2b00      	cmp	r3, #0
    b144:	d101      	bne.n	b14a <xQueueGenericSendFromISR+0x2e>
    b146:	2301      	movs	r3, #1
    b148:	e000      	b.n	b14c <xQueueGenericSendFromISR+0x30>
    b14a:	2300      	movs	r3, #0
    b14c:	2b00      	cmp	r3, #0
    b14e:	d101      	bne.n	b154 <xQueueGenericSendFromISR+0x38>
    b150:	b672      	cpsid	i
    b152:	e7fe      	b.n	b152 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b154:	683b      	ldr	r3, [r7, #0]
    b156:	2b02      	cmp	r3, #2
    b158:	d103      	bne.n	b162 <xQueueGenericSendFromISR+0x46>
    b15a:	69bb      	ldr	r3, [r7, #24]
    b15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b15e:	2b01      	cmp	r3, #1
    b160:	d101      	bne.n	b166 <xQueueGenericSendFromISR+0x4a>
    b162:	2301      	movs	r3, #1
    b164:	e000      	b.n	b168 <xQueueGenericSendFromISR+0x4c>
    b166:	2300      	movs	r3, #0
    b168:	2b00      	cmp	r3, #0
    b16a:	d101      	bne.n	b170 <xQueueGenericSendFromISR+0x54>
    b16c:	b672      	cpsid	i
    b16e:	e7fe      	b.n	b16e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    b170:	4b2d      	ldr	r3, [pc, #180]	; (b228 <xQueueGenericSendFromISR+0x10c>)
    b172:	4798      	blx	r3
    b174:	0003      	movs	r3, r0
    b176:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b178:	69bb      	ldr	r3, [r7, #24]
    b17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b17c:	69bb      	ldr	r3, [r7, #24]
    b17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b180:	429a      	cmp	r2, r3
    b182:	d302      	bcc.n	b18a <xQueueGenericSendFromISR+0x6e>
    b184:	683b      	ldr	r3, [r7, #0]
    b186:	2b02      	cmp	r3, #2
    b188:	d142      	bne.n	b210 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    b18a:	2313      	movs	r3, #19
    b18c:	18fb      	adds	r3, r7, r3
    b18e:	69ba      	ldr	r2, [r7, #24]
    b190:	2145      	movs	r1, #69	; 0x45
    b192:	5c52      	ldrb	r2, [r2, r1]
    b194:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b196:	683a      	ldr	r2, [r7, #0]
    b198:	68b9      	ldr	r1, [r7, #8]
    b19a:	69bb      	ldr	r3, [r7, #24]
    b19c:	0018      	movs	r0, r3
    b19e:	4b23      	ldr	r3, [pc, #140]	; (b22c <xQueueGenericSendFromISR+0x110>)
    b1a0:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    b1a2:	2313      	movs	r3, #19
    b1a4:	18fb      	adds	r3, r7, r3
    b1a6:	781b      	ldrb	r3, [r3, #0]
    b1a8:	b25b      	sxtb	r3, r3
    b1aa:	3301      	adds	r3, #1
    b1ac:	d124      	bne.n	b1f8 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b1ae:	69bb      	ldr	r3, [r7, #24]
    b1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d00e      	beq.n	b1d4 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b1b6:	683a      	ldr	r2, [r7, #0]
    b1b8:	69bb      	ldr	r3, [r7, #24]
    b1ba:	0011      	movs	r1, r2
    b1bc:	0018      	movs	r0, r3
    b1be:	4b1c      	ldr	r3, [pc, #112]	; (b230 <xQueueGenericSendFromISR+0x114>)
    b1c0:	4798      	blx	r3
    b1c2:	1e03      	subs	r3, r0, #0
    b1c4:	d021      	beq.n	b20a <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    b1c6:	687b      	ldr	r3, [r7, #4]
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d01e      	beq.n	b20a <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    b1cc:	687b      	ldr	r3, [r7, #4]
    b1ce:	2201      	movs	r2, #1
    b1d0:	601a      	str	r2, [r3, #0]
    b1d2:	e01a      	b.n	b20a <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b1d4:	69bb      	ldr	r3, [r7, #24]
    b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b1d8:	2b00      	cmp	r3, #0
    b1da:	d016      	beq.n	b20a <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b1dc:	69bb      	ldr	r3, [r7, #24]
    b1de:	3324      	adds	r3, #36	; 0x24
    b1e0:	0018      	movs	r0, r3
    b1e2:	4b14      	ldr	r3, [pc, #80]	; (b234 <xQueueGenericSendFromISR+0x118>)
    b1e4:	4798      	blx	r3
    b1e6:	1e03      	subs	r3, r0, #0
    b1e8:	d00f      	beq.n	b20a <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    b1ea:	687b      	ldr	r3, [r7, #4]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d00c      	beq.n	b20a <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    b1f0:	687b      	ldr	r3, [r7, #4]
    b1f2:	2201      	movs	r2, #1
    b1f4:	601a      	str	r2, [r3, #0]
    b1f6:	e008      	b.n	b20a <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b1f8:	2313      	movs	r3, #19
    b1fa:	18fb      	adds	r3, r7, r3
    b1fc:	781b      	ldrb	r3, [r3, #0]
    b1fe:	3301      	adds	r3, #1
    b200:	b2db      	uxtb	r3, r3
    b202:	b259      	sxtb	r1, r3
    b204:	69bb      	ldr	r3, [r7, #24]
    b206:	2245      	movs	r2, #69	; 0x45
    b208:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    b20a:	2301      	movs	r3, #1
    b20c:	61fb      	str	r3, [r7, #28]
		{
    b20e:	e001      	b.n	b214 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    b210:	2300      	movs	r3, #0
    b212:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b214:	697b      	ldr	r3, [r7, #20]
    b216:	0018      	movs	r0, r3
    b218:	4b07      	ldr	r3, [pc, #28]	; (b238 <xQueueGenericSendFromISR+0x11c>)
    b21a:	4798      	blx	r3

	return xReturn;
    b21c:	69fb      	ldr	r3, [r7, #28]
}
    b21e:	0018      	movs	r0, r3
    b220:	46bd      	mov	sp, r7
    b222:	b008      	add	sp, #32
    b224:	bd80      	pop	{r7, pc}
    b226:	46c0      	nop			; (mov r8, r8)
    b228:	00007375 	.word	0x00007375
    b22c:	0000b3dd 	.word	0x0000b3dd
    b230:	0000b731 	.word	0x0000b731
    b234:	0000c35d 	.word	0x0000c35d
    b238:	00007381 	.word	0x00007381

0000b23c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    b23c:	b580      	push	{r7, lr}
    b23e:	b08a      	sub	sp, #40	; 0x28
    b240:	af00      	add	r7, sp, #0
    b242:	60f8      	str	r0, [r7, #12]
    b244:	60b9      	str	r1, [r7, #8]
    b246:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    b248:	2300      	movs	r3, #0
    b24a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b24c:	68fb      	ldr	r3, [r7, #12]
    b24e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    b250:	6a3b      	ldr	r3, [r7, #32]
    b252:	2b00      	cmp	r3, #0
    b254:	d101      	bne.n	b25a <xQueueReceive+0x1e>
    b256:	b672      	cpsid	i
    b258:	e7fe      	b.n	b258 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b25a:	68bb      	ldr	r3, [r7, #8]
    b25c:	2b00      	cmp	r3, #0
    b25e:	d103      	bne.n	b268 <xQueueReceive+0x2c>
    b260:	6a3b      	ldr	r3, [r7, #32]
    b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b264:	2b00      	cmp	r3, #0
    b266:	d101      	bne.n	b26c <xQueueReceive+0x30>
    b268:	2301      	movs	r3, #1
    b26a:	e000      	b.n	b26e <xQueueReceive+0x32>
    b26c:	2300      	movs	r3, #0
    b26e:	2b00      	cmp	r3, #0
    b270:	d101      	bne.n	b276 <xQueueReceive+0x3a>
    b272:	b672      	cpsid	i
    b274:	e7fe      	b.n	b274 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b276:	4b4c      	ldr	r3, [pc, #304]	; (b3a8 <xQueueReceive+0x16c>)
    b278:	4798      	blx	r3
    b27a:	1e03      	subs	r3, r0, #0
    b27c:	d102      	bne.n	b284 <xQueueReceive+0x48>
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	2b00      	cmp	r3, #0
    b282:	d101      	bne.n	b288 <xQueueReceive+0x4c>
    b284:	2301      	movs	r3, #1
    b286:	e000      	b.n	b28a <xQueueReceive+0x4e>
    b288:	2300      	movs	r3, #0
    b28a:	2b00      	cmp	r3, #0
    b28c:	d101      	bne.n	b292 <xQueueReceive+0x56>
    b28e:	b672      	cpsid	i
    b290:	e7fe      	b.n	b290 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    b292:	4b46      	ldr	r3, [pc, #280]	; (b3ac <xQueueReceive+0x170>)
    b294:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b296:	6a3b      	ldr	r3, [r7, #32]
    b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b29a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b29c:	69fb      	ldr	r3, [r7, #28]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	d01a      	beq.n	b2d8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    b2a2:	68ba      	ldr	r2, [r7, #8]
    b2a4:	6a3b      	ldr	r3, [r7, #32]
    b2a6:	0011      	movs	r1, r2
    b2a8:	0018      	movs	r0, r3
    b2aa:	4b41      	ldr	r3, [pc, #260]	; (b3b0 <xQueueReceive+0x174>)
    b2ac:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    b2ae:	69fb      	ldr	r3, [r7, #28]
    b2b0:	1e5a      	subs	r2, r3, #1
    b2b2:	6a3b      	ldr	r3, [r7, #32]
    b2b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b2b6:	6a3b      	ldr	r3, [r7, #32]
    b2b8:	691b      	ldr	r3, [r3, #16]
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d008      	beq.n	b2d0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b2be:	6a3b      	ldr	r3, [r7, #32]
    b2c0:	3310      	adds	r3, #16
    b2c2:	0018      	movs	r0, r3
    b2c4:	4b3b      	ldr	r3, [pc, #236]	; (b3b4 <xQueueReceive+0x178>)
    b2c6:	4798      	blx	r3
    b2c8:	1e03      	subs	r3, r0, #0
    b2ca:	d001      	beq.n	b2d0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    b2cc:	4b3a      	ldr	r3, [pc, #232]	; (b3b8 <xQueueReceive+0x17c>)
    b2ce:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    b2d0:	4b3a      	ldr	r3, [pc, #232]	; (b3bc <xQueueReceive+0x180>)
    b2d2:	4798      	blx	r3
				return pdPASS;
    b2d4:	2301      	movs	r3, #1
    b2d6:	e062      	b.n	b39e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b2d8:	687b      	ldr	r3, [r7, #4]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d103      	bne.n	b2e6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b2de:	4b37      	ldr	r3, [pc, #220]	; (b3bc <xQueueReceive+0x180>)
    b2e0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    b2e2:	2300      	movs	r3, #0
    b2e4:	e05b      	b.n	b39e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d106      	bne.n	b2fa <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    b2ec:	2314      	movs	r3, #20
    b2ee:	18fb      	adds	r3, r7, r3
    b2f0:	0018      	movs	r0, r3
    b2f2:	4b33      	ldr	r3, [pc, #204]	; (b3c0 <xQueueReceive+0x184>)
    b2f4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b2f6:	2301      	movs	r3, #1
    b2f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b2fa:	4b30      	ldr	r3, [pc, #192]	; (b3bc <xQueueReceive+0x180>)
    b2fc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b2fe:	4b31      	ldr	r3, [pc, #196]	; (b3c4 <xQueueReceive+0x188>)
    b300:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b302:	4b2a      	ldr	r3, [pc, #168]	; (b3ac <xQueueReceive+0x170>)
    b304:	4798      	blx	r3
    b306:	6a3b      	ldr	r3, [r7, #32]
    b308:	2244      	movs	r2, #68	; 0x44
    b30a:	5c9b      	ldrb	r3, [r3, r2]
    b30c:	b25b      	sxtb	r3, r3
    b30e:	3301      	adds	r3, #1
    b310:	d103      	bne.n	b31a <xQueueReceive+0xde>
    b312:	6a3b      	ldr	r3, [r7, #32]
    b314:	2244      	movs	r2, #68	; 0x44
    b316:	2100      	movs	r1, #0
    b318:	5499      	strb	r1, [r3, r2]
    b31a:	6a3b      	ldr	r3, [r7, #32]
    b31c:	2245      	movs	r2, #69	; 0x45
    b31e:	5c9b      	ldrb	r3, [r3, r2]
    b320:	b25b      	sxtb	r3, r3
    b322:	3301      	adds	r3, #1
    b324:	d103      	bne.n	b32e <xQueueReceive+0xf2>
    b326:	6a3b      	ldr	r3, [r7, #32]
    b328:	2245      	movs	r2, #69	; 0x45
    b32a:	2100      	movs	r1, #0
    b32c:	5499      	strb	r1, [r3, r2]
    b32e:	4b23      	ldr	r3, [pc, #140]	; (b3bc <xQueueReceive+0x180>)
    b330:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b332:	1d3a      	adds	r2, r7, #4
    b334:	2314      	movs	r3, #20
    b336:	18fb      	adds	r3, r7, r3
    b338:	0011      	movs	r1, r2
    b33a:	0018      	movs	r0, r3
    b33c:	4b22      	ldr	r3, [pc, #136]	; (b3c8 <xQueueReceive+0x18c>)
    b33e:	4798      	blx	r3
    b340:	1e03      	subs	r3, r0, #0
    b342:	d11e      	bne.n	b382 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b344:	6a3b      	ldr	r3, [r7, #32]
    b346:	0018      	movs	r0, r3
    b348:	4b20      	ldr	r3, [pc, #128]	; (b3cc <xQueueReceive+0x190>)
    b34a:	4798      	blx	r3
    b34c:	1e03      	subs	r3, r0, #0
    b34e:	d011      	beq.n	b374 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b350:	6a3b      	ldr	r3, [r7, #32]
    b352:	3324      	adds	r3, #36	; 0x24
    b354:	687a      	ldr	r2, [r7, #4]
    b356:	0011      	movs	r1, r2
    b358:	0018      	movs	r0, r3
    b35a:	4b1d      	ldr	r3, [pc, #116]	; (b3d0 <xQueueReceive+0x194>)
    b35c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    b35e:	6a3b      	ldr	r3, [r7, #32]
    b360:	0018      	movs	r0, r3
    b362:	4b1c      	ldr	r3, [pc, #112]	; (b3d4 <xQueueReceive+0x198>)
    b364:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    b366:	4b1c      	ldr	r3, [pc, #112]	; (b3d8 <xQueueReceive+0x19c>)
    b368:	4798      	blx	r3
    b36a:	1e03      	subs	r3, r0, #0
    b36c:	d191      	bne.n	b292 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    b36e:	4b12      	ldr	r3, [pc, #72]	; (b3b8 <xQueueReceive+0x17c>)
    b370:	4798      	blx	r3
    b372:	e78e      	b.n	b292 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    b374:	6a3b      	ldr	r3, [r7, #32]
    b376:	0018      	movs	r0, r3
    b378:	4b16      	ldr	r3, [pc, #88]	; (b3d4 <xQueueReceive+0x198>)
    b37a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b37c:	4b16      	ldr	r3, [pc, #88]	; (b3d8 <xQueueReceive+0x19c>)
    b37e:	4798      	blx	r3
    b380:	e787      	b.n	b292 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    b382:	6a3b      	ldr	r3, [r7, #32]
    b384:	0018      	movs	r0, r3
    b386:	4b13      	ldr	r3, [pc, #76]	; (b3d4 <xQueueReceive+0x198>)
    b388:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b38a:	4b13      	ldr	r3, [pc, #76]	; (b3d8 <xQueueReceive+0x19c>)
    b38c:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b38e:	6a3b      	ldr	r3, [r7, #32]
    b390:	0018      	movs	r0, r3
    b392:	4b0e      	ldr	r3, [pc, #56]	; (b3cc <xQueueReceive+0x190>)
    b394:	4798      	blx	r3
    b396:	1e03      	subs	r3, r0, #0
    b398:	d100      	bne.n	b39c <xQueueReceive+0x160>
    b39a:	e77a      	b.n	b292 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    b39c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    b39e:	0018      	movs	r0, r3
    b3a0:	46bd      	mov	sp, r7
    b3a2:	b00a      	add	sp, #40	; 0x28
    b3a4:	bd80      	pop	{r7, pc}
    b3a6:	46c0      	nop			; (mov r8, r8)
    b3a8:	0000c69d 	.word	0x0000c69d
    b3ac:	00007321 	.word	0x00007321
    b3b0:	0000b4bd 	.word	0x0000b4bd
    b3b4:	0000c35d 	.word	0x0000c35d
    b3b8:	00007301 	.word	0x00007301
    b3bc:	00007345 	.word	0x00007345
    b3c0:	0000c41d 	.word	0x0000c41d
    b3c4:	0000bedd 	.word	0x0000bedd
    b3c8:	0000c445 	.word	0x0000c445
    b3cc:	0000b5fd 	.word	0x0000b5fd
    b3d0:	0000c2c5 	.word	0x0000c2c5
    b3d4:	0000b50d 	.word	0x0000b50d
    b3d8:	0000bef5 	.word	0x0000bef5

0000b3dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    b3dc:	b580      	push	{r7, lr}
    b3de:	b086      	sub	sp, #24
    b3e0:	af00      	add	r7, sp, #0
    b3e2:	60f8      	str	r0, [r7, #12]
    b3e4:	60b9      	str	r1, [r7, #8]
    b3e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    b3e8:	2300      	movs	r3, #0
    b3ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b3ec:	68fb      	ldr	r3, [r7, #12]
    b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b3f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    b3f2:	68fb      	ldr	r3, [r7, #12]
    b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d10e      	bne.n	b418 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b3fa:	68fb      	ldr	r3, [r7, #12]
    b3fc:	681b      	ldr	r3, [r3, #0]
    b3fe:	2b00      	cmp	r3, #0
    b400:	d14e      	bne.n	b4a0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    b402:	68fb      	ldr	r3, [r7, #12]
    b404:	685b      	ldr	r3, [r3, #4]
    b406:	0018      	movs	r0, r3
    b408:	4b2a      	ldr	r3, [pc, #168]	; (b4b4 <prvCopyDataToQueue+0xd8>)
    b40a:	4798      	blx	r3
    b40c:	0003      	movs	r3, r0
    b40e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    b410:	68fb      	ldr	r3, [r7, #12]
    b412:	2200      	movs	r2, #0
    b414:	605a      	str	r2, [r3, #4]
    b416:	e043      	b.n	b4a0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    b418:	687b      	ldr	r3, [r7, #4]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d119      	bne.n	b452 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    b41e:	68fb      	ldr	r3, [r7, #12]
    b420:	6898      	ldr	r0, [r3, #8]
    b422:	68fb      	ldr	r3, [r7, #12]
    b424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b426:	68bb      	ldr	r3, [r7, #8]
    b428:	0019      	movs	r1, r3
    b42a:	4b23      	ldr	r3, [pc, #140]	; (b4b8 <prvCopyDataToQueue+0xdc>)
    b42c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    b42e:	68fb      	ldr	r3, [r7, #12]
    b430:	689a      	ldr	r2, [r3, #8]
    b432:	68fb      	ldr	r3, [r7, #12]
    b434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b436:	18d2      	adds	r2, r2, r3
    b438:	68fb      	ldr	r3, [r7, #12]
    b43a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b43c:	68fb      	ldr	r3, [r7, #12]
    b43e:	689a      	ldr	r2, [r3, #8]
    b440:	68fb      	ldr	r3, [r7, #12]
    b442:	685b      	ldr	r3, [r3, #4]
    b444:	429a      	cmp	r2, r3
    b446:	d32b      	bcc.n	b4a0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    b448:	68fb      	ldr	r3, [r7, #12]
    b44a:	681a      	ldr	r2, [r3, #0]
    b44c:	68fb      	ldr	r3, [r7, #12]
    b44e:	609a      	str	r2, [r3, #8]
    b450:	e026      	b.n	b4a0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b452:	68fb      	ldr	r3, [r7, #12]
    b454:	68d8      	ldr	r0, [r3, #12]
    b456:	68fb      	ldr	r3, [r7, #12]
    b458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b45a:	68bb      	ldr	r3, [r7, #8]
    b45c:	0019      	movs	r1, r3
    b45e:	4b16      	ldr	r3, [pc, #88]	; (b4b8 <prvCopyDataToQueue+0xdc>)
    b460:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    b462:	68fb      	ldr	r3, [r7, #12]
    b464:	68da      	ldr	r2, [r3, #12]
    b466:	68fb      	ldr	r3, [r7, #12]
    b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b46a:	425b      	negs	r3, r3
    b46c:	18d2      	adds	r2, r2, r3
    b46e:	68fb      	ldr	r3, [r7, #12]
    b470:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b472:	68fb      	ldr	r3, [r7, #12]
    b474:	68da      	ldr	r2, [r3, #12]
    b476:	68fb      	ldr	r3, [r7, #12]
    b478:	681b      	ldr	r3, [r3, #0]
    b47a:	429a      	cmp	r2, r3
    b47c:	d207      	bcs.n	b48e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    b47e:	68fb      	ldr	r3, [r7, #12]
    b480:	685a      	ldr	r2, [r3, #4]
    b482:	68fb      	ldr	r3, [r7, #12]
    b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b486:	425b      	negs	r3, r3
    b488:	18d2      	adds	r2, r2, r3
    b48a:	68fb      	ldr	r3, [r7, #12]
    b48c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    b48e:	687b      	ldr	r3, [r7, #4]
    b490:	2b02      	cmp	r3, #2
    b492:	d105      	bne.n	b4a0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b494:	693b      	ldr	r3, [r7, #16]
    b496:	2b00      	cmp	r3, #0
    b498:	d002      	beq.n	b4a0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    b49a:	693b      	ldr	r3, [r7, #16]
    b49c:	3b01      	subs	r3, #1
    b49e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    b4a0:	693b      	ldr	r3, [r7, #16]
    b4a2:	1c5a      	adds	r2, r3, #1
    b4a4:	68fb      	ldr	r3, [r7, #12]
    b4a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    b4a8:	697b      	ldr	r3, [r7, #20]
}
    b4aa:	0018      	movs	r0, r3
    b4ac:	46bd      	mov	sp, r7
    b4ae:	b006      	add	sp, #24
    b4b0:	bd80      	pop	{r7, pc}
    b4b2:	46c0      	nop			; (mov r8, r8)
    b4b4:	0000c6d5 	.word	0x0000c6d5
    b4b8:	00012ed1 	.word	0x00012ed1

0000b4bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    b4bc:	b580      	push	{r7, lr}
    b4be:	b082      	sub	sp, #8
    b4c0:	af00      	add	r7, sp, #0
    b4c2:	6078      	str	r0, [r7, #4]
    b4c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b4ca:	2b00      	cmp	r3, #0
    b4cc:	d018      	beq.n	b500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    b4ce:	687b      	ldr	r3, [r7, #4]
    b4d0:	68da      	ldr	r2, [r3, #12]
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b4d6:	18d2      	adds	r2, r2, r3
    b4d8:	687b      	ldr	r3, [r7, #4]
    b4da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	68da      	ldr	r2, [r3, #12]
    b4e0:	687b      	ldr	r3, [r7, #4]
    b4e2:	685b      	ldr	r3, [r3, #4]
    b4e4:	429a      	cmp	r2, r3
    b4e6:	d303      	bcc.n	b4f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	681a      	ldr	r2, [r3, #0]
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	68d9      	ldr	r1, [r3, #12]
    b4f4:	687b      	ldr	r3, [r7, #4]
    b4f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b4f8:	683b      	ldr	r3, [r7, #0]
    b4fa:	0018      	movs	r0, r3
    b4fc:	4b02      	ldr	r3, [pc, #8]	; (b508 <prvCopyDataFromQueue+0x4c>)
    b4fe:	4798      	blx	r3
	}
}
    b500:	46c0      	nop			; (mov r8, r8)
    b502:	46bd      	mov	sp, r7
    b504:	b002      	add	sp, #8
    b506:	bd80      	pop	{r7, pc}
    b508:	00012ed1 	.word	0x00012ed1

0000b50c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    b50c:	b580      	push	{r7, lr}
    b50e:	b084      	sub	sp, #16
    b510:	af00      	add	r7, sp, #0
    b512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    b514:	4b34      	ldr	r3, [pc, #208]	; (b5e8 <prvUnlockQueue+0xdc>)
    b516:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    b518:	230f      	movs	r3, #15
    b51a:	18fb      	adds	r3, r7, r3
    b51c:	687a      	ldr	r2, [r7, #4]
    b51e:	2145      	movs	r1, #69	; 0x45
    b520:	5c52      	ldrb	r2, [r2, r1]
    b522:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b524:	e022      	b.n	b56c <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    b526:	687b      	ldr	r3, [r7, #4]
    b528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b52a:	2b00      	cmp	r3, #0
    b52c:	d009      	beq.n	b542 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    b52e:	687b      	ldr	r3, [r7, #4]
    b530:	2100      	movs	r1, #0
    b532:	0018      	movs	r0, r3
    b534:	4b2d      	ldr	r3, [pc, #180]	; (b5ec <prvUnlockQueue+0xe0>)
    b536:	4798      	blx	r3
    b538:	1e03      	subs	r3, r0, #0
    b53a:	d00f      	beq.n	b55c <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    b53c:	4b2c      	ldr	r3, [pc, #176]	; (b5f0 <prvUnlockQueue+0xe4>)
    b53e:	4798      	blx	r3
    b540:	e00c      	b.n	b55c <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b546:	2b00      	cmp	r3, #0
    b548:	d017      	beq.n	b57a <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b54a:	687b      	ldr	r3, [r7, #4]
    b54c:	3324      	adds	r3, #36	; 0x24
    b54e:	0018      	movs	r0, r3
    b550:	4b28      	ldr	r3, [pc, #160]	; (b5f4 <prvUnlockQueue+0xe8>)
    b552:	4798      	blx	r3
    b554:	1e03      	subs	r3, r0, #0
    b556:	d001      	beq.n	b55c <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    b558:	4b25      	ldr	r3, [pc, #148]	; (b5f0 <prvUnlockQueue+0xe4>)
    b55a:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    b55c:	230f      	movs	r3, #15
    b55e:	18fb      	adds	r3, r7, r3
    b560:	781b      	ldrb	r3, [r3, #0]
    b562:	3b01      	subs	r3, #1
    b564:	b2da      	uxtb	r2, r3
    b566:	230f      	movs	r3, #15
    b568:	18fb      	adds	r3, r7, r3
    b56a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b56c:	230f      	movs	r3, #15
    b56e:	18fb      	adds	r3, r7, r3
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	b25b      	sxtb	r3, r3
    b574:	2b00      	cmp	r3, #0
    b576:	dcd6      	bgt.n	b526 <prvUnlockQueue+0x1a>
    b578:	e000      	b.n	b57c <prvUnlockQueue+0x70>
						break;
    b57a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	2245      	movs	r2, #69	; 0x45
    b580:	21ff      	movs	r1, #255	; 0xff
    b582:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b584:	4b1c      	ldr	r3, [pc, #112]	; (b5f8 <prvUnlockQueue+0xec>)
    b586:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    b588:	4b17      	ldr	r3, [pc, #92]	; (b5e8 <prvUnlockQueue+0xdc>)
    b58a:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    b58c:	230e      	movs	r3, #14
    b58e:	18fb      	adds	r3, r7, r3
    b590:	687a      	ldr	r2, [r7, #4]
    b592:	2144      	movs	r1, #68	; 0x44
    b594:	5c52      	ldrb	r2, [r2, r1]
    b596:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b598:	e014      	b.n	b5c4 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b59a:	687b      	ldr	r3, [r7, #4]
    b59c:	691b      	ldr	r3, [r3, #16]
    b59e:	2b00      	cmp	r3, #0
    b5a0:	d017      	beq.n	b5d2 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b5a2:	687b      	ldr	r3, [r7, #4]
    b5a4:	3310      	adds	r3, #16
    b5a6:	0018      	movs	r0, r3
    b5a8:	4b12      	ldr	r3, [pc, #72]	; (b5f4 <prvUnlockQueue+0xe8>)
    b5aa:	4798      	blx	r3
    b5ac:	1e03      	subs	r3, r0, #0
    b5ae:	d001      	beq.n	b5b4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    b5b0:	4b0f      	ldr	r3, [pc, #60]	; (b5f0 <prvUnlockQueue+0xe4>)
    b5b2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    b5b4:	230e      	movs	r3, #14
    b5b6:	18fb      	adds	r3, r7, r3
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	3b01      	subs	r3, #1
    b5bc:	b2da      	uxtb	r2, r3
    b5be:	230e      	movs	r3, #14
    b5c0:	18fb      	adds	r3, r7, r3
    b5c2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    b5c4:	230e      	movs	r3, #14
    b5c6:	18fb      	adds	r3, r7, r3
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	b25b      	sxtb	r3, r3
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	dce4      	bgt.n	b59a <prvUnlockQueue+0x8e>
    b5d0:	e000      	b.n	b5d4 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    b5d2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	2244      	movs	r2, #68	; 0x44
    b5d8:	21ff      	movs	r1, #255	; 0xff
    b5da:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b5dc:	4b06      	ldr	r3, [pc, #24]	; (b5f8 <prvUnlockQueue+0xec>)
    b5de:	4798      	blx	r3
}
    b5e0:	46c0      	nop			; (mov r8, r8)
    b5e2:	46bd      	mov	sp, r7
    b5e4:	b004      	add	sp, #16
    b5e6:	bd80      	pop	{r7, pc}
    b5e8:	00007321 	.word	0x00007321
    b5ec:	0000b731 	.word	0x0000b731
    b5f0:	0000c4f1 	.word	0x0000c4f1
    b5f4:	0000c35d 	.word	0x0000c35d
    b5f8:	00007345 	.word	0x00007345

0000b5fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    b5fc:	b580      	push	{r7, lr}
    b5fe:	b084      	sub	sp, #16
    b600:	af00      	add	r7, sp, #0
    b602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b604:	4b08      	ldr	r3, [pc, #32]	; (b628 <prvIsQueueEmpty+0x2c>)
    b606:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b60c:	2b00      	cmp	r3, #0
    b60e:	d102      	bne.n	b616 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    b610:	2301      	movs	r3, #1
    b612:	60fb      	str	r3, [r7, #12]
    b614:	e001      	b.n	b61a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    b616:	2300      	movs	r3, #0
    b618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b61a:	4b04      	ldr	r3, [pc, #16]	; (b62c <prvIsQueueEmpty+0x30>)
    b61c:	4798      	blx	r3

	return xReturn;
    b61e:	68fb      	ldr	r3, [r7, #12]
}
    b620:	0018      	movs	r0, r3
    b622:	46bd      	mov	sp, r7
    b624:	b004      	add	sp, #16
    b626:	bd80      	pop	{r7, pc}
    b628:	00007321 	.word	0x00007321
    b62c:	00007345 	.word	0x00007345

0000b630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    b630:	b580      	push	{r7, lr}
    b632:	b084      	sub	sp, #16
    b634:	af00      	add	r7, sp, #0
    b636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b638:	4b09      	ldr	r3, [pc, #36]	; (b660 <prvIsQueueFull+0x30>)
    b63a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b644:	429a      	cmp	r2, r3
    b646:	d102      	bne.n	b64e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    b648:	2301      	movs	r3, #1
    b64a:	60fb      	str	r3, [r7, #12]
    b64c:	e001      	b.n	b652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    b64e:	2300      	movs	r3, #0
    b650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b652:	4b04      	ldr	r3, [pc, #16]	; (b664 <prvIsQueueFull+0x34>)
    b654:	4798      	blx	r3

	return xReturn;
    b656:	68fb      	ldr	r3, [r7, #12]
}
    b658:	0018      	movs	r0, r3
    b65a:	46bd      	mov	sp, r7
    b65c:	b004      	add	sp, #16
    b65e:	bd80      	pop	{r7, pc}
    b660:	00007321 	.word	0x00007321
    b664:	00007345 	.word	0x00007345

0000b668 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    b668:	b580      	push	{r7, lr}
    b66a:	b084      	sub	sp, #16
    b66c:	af00      	add	r7, sp, #0
    b66e:	6078      	str	r0, [r7, #4]
    b670:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    b672:	2300      	movs	r3, #0
    b674:	60fb      	str	r3, [r7, #12]
    b676:	e015      	b.n	b6a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    b678:	4b0e      	ldr	r3, [pc, #56]	; (b6b4 <vQueueAddToRegistry+0x4c>)
    b67a:	68fa      	ldr	r2, [r7, #12]
    b67c:	00d2      	lsls	r2, r2, #3
    b67e:	58d3      	ldr	r3, [r2, r3]
    b680:	2b00      	cmp	r3, #0
    b682:	d10c      	bne.n	b69e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    b684:	4b0b      	ldr	r3, [pc, #44]	; (b6b4 <vQueueAddToRegistry+0x4c>)
    b686:	68fa      	ldr	r2, [r7, #12]
    b688:	00d2      	lsls	r2, r2, #3
    b68a:	6839      	ldr	r1, [r7, #0]
    b68c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    b68e:	4a09      	ldr	r2, [pc, #36]	; (b6b4 <vQueueAddToRegistry+0x4c>)
    b690:	68fb      	ldr	r3, [r7, #12]
    b692:	00db      	lsls	r3, r3, #3
    b694:	18d3      	adds	r3, r2, r3
    b696:	3304      	adds	r3, #4
    b698:	687a      	ldr	r2, [r7, #4]
    b69a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    b69c:	e005      	b.n	b6aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    b69e:	68fb      	ldr	r3, [r7, #12]
    b6a0:	3301      	adds	r3, #1
    b6a2:	60fb      	str	r3, [r7, #12]
    b6a4:	68fb      	ldr	r3, [r7, #12]
    b6a6:	2b07      	cmp	r3, #7
    b6a8:	d9e6      	bls.n	b678 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    b6aa:	46c0      	nop			; (mov r8, r8)
    b6ac:	46bd      	mov	sp, r7
    b6ae:	b004      	add	sp, #16
    b6b0:	bd80      	pop	{r7, pc}
    b6b2:	46c0      	nop			; (mov r8, r8)
    b6b4:	2000404c 	.word	0x2000404c

0000b6b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    b6b8:	b580      	push	{r7, lr}
    b6ba:	b086      	sub	sp, #24
    b6bc:	af00      	add	r7, sp, #0
    b6be:	60f8      	str	r0, [r7, #12]
    b6c0:	60b9      	str	r1, [r7, #8]
    b6c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b6c4:	68fb      	ldr	r3, [r7, #12]
    b6c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    b6c8:	4b15      	ldr	r3, [pc, #84]	; (b720 <vQueueWaitForMessageRestricted+0x68>)
    b6ca:	4798      	blx	r3
    b6cc:	697b      	ldr	r3, [r7, #20]
    b6ce:	2244      	movs	r2, #68	; 0x44
    b6d0:	5c9b      	ldrb	r3, [r3, r2]
    b6d2:	b25b      	sxtb	r3, r3
    b6d4:	3301      	adds	r3, #1
    b6d6:	d103      	bne.n	b6e0 <vQueueWaitForMessageRestricted+0x28>
    b6d8:	697b      	ldr	r3, [r7, #20]
    b6da:	2244      	movs	r2, #68	; 0x44
    b6dc:	2100      	movs	r1, #0
    b6de:	5499      	strb	r1, [r3, r2]
    b6e0:	697b      	ldr	r3, [r7, #20]
    b6e2:	2245      	movs	r2, #69	; 0x45
    b6e4:	5c9b      	ldrb	r3, [r3, r2]
    b6e6:	b25b      	sxtb	r3, r3
    b6e8:	3301      	adds	r3, #1
    b6ea:	d103      	bne.n	b6f4 <vQueueWaitForMessageRestricted+0x3c>
    b6ec:	697b      	ldr	r3, [r7, #20]
    b6ee:	2245      	movs	r2, #69	; 0x45
    b6f0:	2100      	movs	r1, #0
    b6f2:	5499      	strb	r1, [r3, r2]
    b6f4:	4b0b      	ldr	r3, [pc, #44]	; (b724 <vQueueWaitForMessageRestricted+0x6c>)
    b6f6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    b6f8:	697b      	ldr	r3, [r7, #20]
    b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	d106      	bne.n	b70e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    b700:	697b      	ldr	r3, [r7, #20]
    b702:	3324      	adds	r3, #36	; 0x24
    b704:	687a      	ldr	r2, [r7, #4]
    b706:	68b9      	ldr	r1, [r7, #8]
    b708:	0018      	movs	r0, r3
    b70a:	4b07      	ldr	r3, [pc, #28]	; (b728 <vQueueWaitForMessageRestricted+0x70>)
    b70c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    b70e:	697b      	ldr	r3, [r7, #20]
    b710:	0018      	movs	r0, r3
    b712:	4b06      	ldr	r3, [pc, #24]	; (b72c <vQueueWaitForMessageRestricted+0x74>)
    b714:	4798      	blx	r3
	}
    b716:	46c0      	nop			; (mov r8, r8)
    b718:	46bd      	mov	sp, r7
    b71a:	b006      	add	sp, #24
    b71c:	bd80      	pop	{r7, pc}
    b71e:	46c0      	nop			; (mov r8, r8)
    b720:	00007321 	.word	0x00007321
    b724:	00007345 	.word	0x00007345
    b728:	0000c309 	.word	0x0000c309
    b72c:	0000b50d 	.word	0x0000b50d

0000b730 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    b730:	b580      	push	{r7, lr}
    b732:	b086      	sub	sp, #24
    b734:	af00      	add	r7, sp, #0
    b736:	6078      	str	r0, [r7, #4]
    b738:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    b73a:	687b      	ldr	r3, [r7, #4]
    b73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b73e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    b740:	2300      	movs	r3, #0
    b742:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    b744:	693b      	ldr	r3, [r7, #16]
    b746:	2b00      	cmp	r3, #0
    b748:	d101      	bne.n	b74e <prvNotifyQueueSetContainer+0x1e>
    b74a:	b672      	cpsid	i
    b74c:	e7fe      	b.n	b74c <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    b74e:	693b      	ldr	r3, [r7, #16]
    b750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b752:	693b      	ldr	r3, [r7, #16]
    b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b756:	429a      	cmp	r2, r3
    b758:	d301      	bcc.n	b75e <prvNotifyQueueSetContainer+0x2e>
    b75a:	b672      	cpsid	i
    b75c:	e7fe      	b.n	b75c <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    b75e:	693b      	ldr	r3, [r7, #16]
    b760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b762:	693b      	ldr	r3, [r7, #16]
    b764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b766:	429a      	cmp	r2, r3
    b768:	d22a      	bcs.n	b7c0 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    b76a:	230f      	movs	r3, #15
    b76c:	18fb      	adds	r3, r7, r3
    b76e:	693a      	ldr	r2, [r7, #16]
    b770:	2145      	movs	r1, #69	; 0x45
    b772:	5c52      	ldrb	r2, [r2, r1]
    b774:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    b776:	683a      	ldr	r2, [r7, #0]
    b778:	1d39      	adds	r1, r7, #4
    b77a:	693b      	ldr	r3, [r7, #16]
    b77c:	0018      	movs	r0, r3
    b77e:	4b13      	ldr	r3, [pc, #76]	; (b7cc <prvNotifyQueueSetContainer+0x9c>)
    b780:	4798      	blx	r3
    b782:	0003      	movs	r3, r0
    b784:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    b786:	230f      	movs	r3, #15
    b788:	18fb      	adds	r3, r7, r3
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	b25b      	sxtb	r3, r3
    b78e:	3301      	adds	r3, #1
    b790:	d10d      	bne.n	b7ae <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    b792:	693b      	ldr	r3, [r7, #16]
    b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b796:	2b00      	cmp	r3, #0
    b798:	d012      	beq.n	b7c0 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    b79a:	693b      	ldr	r3, [r7, #16]
    b79c:	3324      	adds	r3, #36	; 0x24
    b79e:	0018      	movs	r0, r3
    b7a0:	4b0b      	ldr	r3, [pc, #44]	; (b7d0 <prvNotifyQueueSetContainer+0xa0>)
    b7a2:	4798      	blx	r3
    b7a4:	1e03      	subs	r3, r0, #0
    b7a6:	d00b      	beq.n	b7c0 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    b7a8:	2301      	movs	r3, #1
    b7aa:	617b      	str	r3, [r7, #20]
    b7ac:	e008      	b.n	b7c0 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b7ae:	230f      	movs	r3, #15
    b7b0:	18fb      	adds	r3, r7, r3
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	3301      	adds	r3, #1
    b7b6:	b2db      	uxtb	r3, r3
    b7b8:	b259      	sxtb	r1, r3
    b7ba:	693b      	ldr	r3, [r7, #16]
    b7bc:	2245      	movs	r2, #69	; 0x45
    b7be:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    b7c0:	697b      	ldr	r3, [r7, #20]
	}
    b7c2:	0018      	movs	r0, r3
    b7c4:	46bd      	mov	sp, r7
    b7c6:	b006      	add	sp, #24
    b7c8:	bd80      	pop	{r7, pc}
    b7ca:	46c0      	nop			; (mov r8, r8)
    b7cc:	0000b3dd 	.word	0x0000b3dd
    b7d0:	0000c35d 	.word	0x0000c35d

0000b7d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    b7d4:	b590      	push	{r4, r7, lr}
    b7d6:	b08d      	sub	sp, #52	; 0x34
    b7d8:	af04      	add	r7, sp, #16
    b7da:	60f8      	str	r0, [r7, #12]
    b7dc:	60b9      	str	r1, [r7, #8]
    b7de:	603b      	str	r3, [r7, #0]
    b7e0:	1dbb      	adds	r3, r7, #6
    b7e2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b7e4:	1dbb      	adds	r3, r7, #6
    b7e6:	881b      	ldrh	r3, [r3, #0]
    b7e8:	009b      	lsls	r3, r3, #2
    b7ea:	0018      	movs	r0, r3
    b7ec:	4b1d      	ldr	r3, [pc, #116]	; (b864 <xTaskCreate+0x90>)
    b7ee:	4798      	blx	r3
    b7f0:	0003      	movs	r3, r0
    b7f2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    b7f4:	697b      	ldr	r3, [r7, #20]
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d010      	beq.n	b81c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    b7fa:	2058      	movs	r0, #88	; 0x58
    b7fc:	4b19      	ldr	r3, [pc, #100]	; (b864 <xTaskCreate+0x90>)
    b7fe:	4798      	blx	r3
    b800:	0003      	movs	r3, r0
    b802:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    b804:	69fb      	ldr	r3, [r7, #28]
    b806:	2b00      	cmp	r3, #0
    b808:	d003      	beq.n	b812 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    b80a:	69fb      	ldr	r3, [r7, #28]
    b80c:	697a      	ldr	r2, [r7, #20]
    b80e:	631a      	str	r2, [r3, #48]	; 0x30
    b810:	e006      	b.n	b820 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    b812:	697b      	ldr	r3, [r7, #20]
    b814:	0018      	movs	r0, r3
    b816:	4b14      	ldr	r3, [pc, #80]	; (b868 <xTaskCreate+0x94>)
    b818:	4798      	blx	r3
    b81a:	e001      	b.n	b820 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    b81c:	2300      	movs	r3, #0
    b81e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    b820:	69fb      	ldr	r3, [r7, #28]
    b822:	2b00      	cmp	r3, #0
    b824:	d016      	beq.n	b854 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    b826:	1dbb      	adds	r3, r7, #6
    b828:	881a      	ldrh	r2, [r3, #0]
    b82a:	683c      	ldr	r4, [r7, #0]
    b82c:	68b9      	ldr	r1, [r7, #8]
    b82e:	68f8      	ldr	r0, [r7, #12]
    b830:	2300      	movs	r3, #0
    b832:	9303      	str	r3, [sp, #12]
    b834:	69fb      	ldr	r3, [r7, #28]
    b836:	9302      	str	r3, [sp, #8]
    b838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b83a:	9301      	str	r3, [sp, #4]
    b83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b83e:	9300      	str	r3, [sp, #0]
    b840:	0023      	movs	r3, r4
    b842:	4c0a      	ldr	r4, [pc, #40]	; (b86c <xTaskCreate+0x98>)
    b844:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    b846:	69fb      	ldr	r3, [r7, #28]
    b848:	0018      	movs	r0, r3
    b84a:	4b09      	ldr	r3, [pc, #36]	; (b870 <xTaskCreate+0x9c>)
    b84c:	4798      	blx	r3
			xReturn = pdPASS;
    b84e:	2301      	movs	r3, #1
    b850:	61bb      	str	r3, [r7, #24]
    b852:	e002      	b.n	b85a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    b854:	2301      	movs	r3, #1
    b856:	425b      	negs	r3, r3
    b858:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    b85a:	69bb      	ldr	r3, [r7, #24]
	}
    b85c:	0018      	movs	r0, r3
    b85e:	46bd      	mov	sp, r7
    b860:	b009      	add	sp, #36	; 0x24
    b862:	bd90      	pop	{r4, r7, pc}
    b864:	0000744d 	.word	0x0000744d
    b868:	000075b5 	.word	0x000075b5
    b86c:	0000b875 	.word	0x0000b875
    b870:	0000b985 	.word	0x0000b985

0000b874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    b874:	b580      	push	{r7, lr}
    b876:	b086      	sub	sp, #24
    b878:	af00      	add	r7, sp, #0
    b87a:	60f8      	str	r0, [r7, #12]
    b87c:	60b9      	str	r1, [r7, #8]
    b87e:	607a      	str	r2, [r7, #4]
    b880:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b884:	6b18      	ldr	r0, [r3, #48]	; 0x30
    b886:	687b      	ldr	r3, [r7, #4]
    b888:	009b      	lsls	r3, r3, #2
    b88a:	001a      	movs	r2, r3
    b88c:	21a5      	movs	r1, #165	; 0xa5
    b88e:	4b39      	ldr	r3, [pc, #228]	; (b974 <prvInitialiseNewTask+0x100>)
    b890:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b896:	687b      	ldr	r3, [r7, #4]
    b898:	4937      	ldr	r1, [pc, #220]	; (b978 <prvInitialiseNewTask+0x104>)
    b89a:	468c      	mov	ip, r1
    b89c:	4463      	add	r3, ip
    b89e:	009b      	lsls	r3, r3, #2
    b8a0:	18d3      	adds	r3, r2, r3
    b8a2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    b8a4:	693b      	ldr	r3, [r7, #16]
    b8a6:	2207      	movs	r2, #7
    b8a8:	4393      	bics	r3, r2
    b8aa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    b8ac:	693b      	ldr	r3, [r7, #16]
    b8ae:	2207      	movs	r2, #7
    b8b0:	4013      	ands	r3, r2
    b8b2:	d001      	beq.n	b8b8 <prvInitialiseNewTask+0x44>
    b8b4:	b672      	cpsid	i
    b8b6:	e7fe      	b.n	b8b6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b8b8:	2300      	movs	r3, #0
    b8ba:	617b      	str	r3, [r7, #20]
    b8bc:	e013      	b.n	b8e6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    b8be:	68ba      	ldr	r2, [r7, #8]
    b8c0:	697b      	ldr	r3, [r7, #20]
    b8c2:	18d3      	adds	r3, r2, r3
    b8c4:	7818      	ldrb	r0, [r3, #0]
    b8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b8c8:	2134      	movs	r1, #52	; 0x34
    b8ca:	697b      	ldr	r3, [r7, #20]
    b8cc:	18d3      	adds	r3, r2, r3
    b8ce:	185b      	adds	r3, r3, r1
    b8d0:	1c02      	adds	r2, r0, #0
    b8d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    b8d4:	68ba      	ldr	r2, [r7, #8]
    b8d6:	697b      	ldr	r3, [r7, #20]
    b8d8:	18d3      	adds	r3, r2, r3
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d006      	beq.n	b8ee <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b8e0:	697b      	ldr	r3, [r7, #20]
    b8e2:	3301      	adds	r3, #1
    b8e4:	617b      	str	r3, [r7, #20]
    b8e6:	697b      	ldr	r3, [r7, #20]
    b8e8:	2b09      	cmp	r3, #9
    b8ea:	d9e8      	bls.n	b8be <prvInitialiseNewTask+0x4a>
    b8ec:	e000      	b.n	b8f0 <prvInitialiseNewTask+0x7c>
		{
			break;
    b8ee:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b8f2:	223d      	movs	r2, #61	; 0x3d
    b8f4:	2100      	movs	r1, #0
    b8f6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    b8f8:	6a3b      	ldr	r3, [r7, #32]
    b8fa:	2b04      	cmp	r3, #4
    b8fc:	d901      	bls.n	b902 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    b8fe:	2304      	movs	r3, #4
    b900:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b904:	6a3a      	ldr	r2, [r7, #32]
    b906:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b90a:	6a3a      	ldr	r2, [r7, #32]
    b90c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b910:	2200      	movs	r2, #0
    b912:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b916:	3304      	adds	r3, #4
    b918:	0018      	movs	r0, r3
    b91a:	4b18      	ldr	r3, [pc, #96]	; (b97c <prvInitialiseNewTask+0x108>)
    b91c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b920:	3318      	adds	r3, #24
    b922:	0018      	movs	r0, r3
    b924:	4b15      	ldr	r3, [pc, #84]	; (b97c <prvInitialiseNewTask+0x108>)
    b926:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b92c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b92e:	6a3b      	ldr	r3, [r7, #32]
    b930:	2205      	movs	r2, #5
    b932:	1ad2      	subs	r2, r2, r3
    b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b93c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b940:	2200      	movs	r2, #0
    b942:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b946:	2254      	movs	r2, #84	; 0x54
    b948:	2100      	movs	r1, #0
    b94a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    b94c:	683a      	ldr	r2, [r7, #0]
    b94e:	68f9      	ldr	r1, [r7, #12]
    b950:	693b      	ldr	r3, [r7, #16]
    b952:	0018      	movs	r0, r3
    b954:	4b0a      	ldr	r3, [pc, #40]	; (b980 <prvInitialiseNewTask+0x10c>)
    b956:	4798      	blx	r3
    b958:	0002      	movs	r2, r0
    b95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b95c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b960:	2b00      	cmp	r3, #0
    b962:	d002      	beq.n	b96a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b966:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b96a:	46c0      	nop			; (mov r8, r8)
    b96c:	46bd      	mov	sp, r7
    b96e:	b006      	add	sp, #24
    b970:	bd80      	pop	{r7, pc}
    b972:	46c0      	nop			; (mov r8, r8)
    b974:	00012ee3 	.word	0x00012ee3
    b978:	3fffffff 	.word	0x3fffffff
    b97c:	0000aca5 	.word	0x0000aca5
    b980:	000071dd 	.word	0x000071dd

0000b984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    b984:	b580      	push	{r7, lr}
    b986:	b082      	sub	sp, #8
    b988:	af00      	add	r7, sp, #0
    b98a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    b98c:	4b2b      	ldr	r3, [pc, #172]	; (ba3c <prvAddNewTaskToReadyList+0xb8>)
    b98e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    b990:	4b2b      	ldr	r3, [pc, #172]	; (ba40 <prvAddNewTaskToReadyList+0xbc>)
    b992:	681b      	ldr	r3, [r3, #0]
    b994:	1c5a      	adds	r2, r3, #1
    b996:	4b2a      	ldr	r3, [pc, #168]	; (ba40 <prvAddNewTaskToReadyList+0xbc>)
    b998:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    b99a:	4b2a      	ldr	r3, [pc, #168]	; (ba44 <prvAddNewTaskToReadyList+0xc0>)
    b99c:	681b      	ldr	r3, [r3, #0]
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d109      	bne.n	b9b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    b9a2:	4b28      	ldr	r3, [pc, #160]	; (ba44 <prvAddNewTaskToReadyList+0xc0>)
    b9a4:	687a      	ldr	r2, [r7, #4]
    b9a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    b9a8:	4b25      	ldr	r3, [pc, #148]	; (ba40 <prvAddNewTaskToReadyList+0xbc>)
    b9aa:	681b      	ldr	r3, [r3, #0]
    b9ac:	2b01      	cmp	r3, #1
    b9ae:	d110      	bne.n	b9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    b9b0:	4b25      	ldr	r3, [pc, #148]	; (ba48 <prvAddNewTaskToReadyList+0xc4>)
    b9b2:	4798      	blx	r3
    b9b4:	e00d      	b.n	b9d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    b9b6:	4b25      	ldr	r3, [pc, #148]	; (ba4c <prvAddNewTaskToReadyList+0xc8>)
    b9b8:	681b      	ldr	r3, [r3, #0]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d109      	bne.n	b9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    b9be:	4b21      	ldr	r3, [pc, #132]	; (ba44 <prvAddNewTaskToReadyList+0xc0>)
    b9c0:	681b      	ldr	r3, [r3, #0]
    b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b9c4:	687b      	ldr	r3, [r7, #4]
    b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b9c8:	429a      	cmp	r2, r3
    b9ca:	d802      	bhi.n	b9d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    b9cc:	4b1d      	ldr	r3, [pc, #116]	; (ba44 <prvAddNewTaskToReadyList+0xc0>)
    b9ce:	687a      	ldr	r2, [r7, #4]
    b9d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    b9d2:	4b1f      	ldr	r3, [pc, #124]	; (ba50 <prvAddNewTaskToReadyList+0xcc>)
    b9d4:	681b      	ldr	r3, [r3, #0]
    b9d6:	1c5a      	adds	r2, r3, #1
    b9d8:	4b1d      	ldr	r3, [pc, #116]	; (ba50 <prvAddNewTaskToReadyList+0xcc>)
    b9da:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    b9dc:	4b1c      	ldr	r3, [pc, #112]	; (ba50 <prvAddNewTaskToReadyList+0xcc>)
    b9de:	681a      	ldr	r2, [r3, #0]
    b9e0:	687b      	ldr	r3, [r7, #4]
    b9e2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b9e8:	4b1a      	ldr	r3, [pc, #104]	; (ba54 <prvAddNewTaskToReadyList+0xd0>)
    b9ea:	681b      	ldr	r3, [r3, #0]
    b9ec:	429a      	cmp	r2, r3
    b9ee:	d903      	bls.n	b9f8 <prvAddNewTaskToReadyList+0x74>
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b9f4:	4b17      	ldr	r3, [pc, #92]	; (ba54 <prvAddNewTaskToReadyList+0xd0>)
    b9f6:	601a      	str	r2, [r3, #0]
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b9fc:	0013      	movs	r3, r2
    b9fe:	009b      	lsls	r3, r3, #2
    ba00:	189b      	adds	r3, r3, r2
    ba02:	009b      	lsls	r3, r3, #2
    ba04:	4a14      	ldr	r2, [pc, #80]	; (ba58 <prvAddNewTaskToReadyList+0xd4>)
    ba06:	189a      	adds	r2, r3, r2
    ba08:	687b      	ldr	r3, [r7, #4]
    ba0a:	3304      	adds	r3, #4
    ba0c:	0019      	movs	r1, r3
    ba0e:	0010      	movs	r0, r2
    ba10:	4b12      	ldr	r3, [pc, #72]	; (ba5c <prvAddNewTaskToReadyList+0xd8>)
    ba12:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    ba14:	4b12      	ldr	r3, [pc, #72]	; (ba60 <prvAddNewTaskToReadyList+0xdc>)
    ba16:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    ba18:	4b0c      	ldr	r3, [pc, #48]	; (ba4c <prvAddNewTaskToReadyList+0xc8>)
    ba1a:	681b      	ldr	r3, [r3, #0]
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d008      	beq.n	ba32 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    ba20:	4b08      	ldr	r3, [pc, #32]	; (ba44 <prvAddNewTaskToReadyList+0xc0>)
    ba22:	681b      	ldr	r3, [r3, #0]
    ba24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba26:	687b      	ldr	r3, [r7, #4]
    ba28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ba2a:	429a      	cmp	r2, r3
    ba2c:	d201      	bcs.n	ba32 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    ba2e:	4b0d      	ldr	r3, [pc, #52]	; (ba64 <prvAddNewTaskToReadyList+0xe0>)
    ba30:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ba32:	46c0      	nop			; (mov r8, r8)
    ba34:	46bd      	mov	sp, r7
    ba36:	b002      	add	sp, #8
    ba38:	bd80      	pop	{r7, pc}
    ba3a:	46c0      	nop			; (mov r8, r8)
    ba3c:	00007321 	.word	0x00007321
    ba40:	20003bc8 	.word	0x20003bc8
    ba44:	20003af0 	.word	0x20003af0
    ba48:	0000c535 	.word	0x0000c535
    ba4c:	20003bd4 	.word	0x20003bd4
    ba50:	20003be4 	.word	0x20003be4
    ba54:	20003bd0 	.word	0x20003bd0
    ba58:	20003af4 	.word	0x20003af4
    ba5c:	0000acbb 	.word	0x0000acbb
    ba60:	00007345 	.word	0x00007345
    ba64:	00007301 	.word	0x00007301

0000ba68 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    ba68:	b580      	push	{r7, lr}
    ba6a:	b086      	sub	sp, #24
    ba6c:	af00      	add	r7, sp, #0
    ba6e:	6078      	str	r0, [r7, #4]
    ba70:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    ba72:	2300      	movs	r3, #0
    ba74:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    ba76:	687b      	ldr	r3, [r7, #4]
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d101      	bne.n	ba80 <vTaskDelayUntil+0x18>
    ba7c:	b672      	cpsid	i
    ba7e:	e7fe      	b.n	ba7e <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    ba80:	683b      	ldr	r3, [r7, #0]
    ba82:	2b00      	cmp	r3, #0
    ba84:	d101      	bne.n	ba8a <vTaskDelayUntil+0x22>
    ba86:	b672      	cpsid	i
    ba88:	e7fe      	b.n	ba88 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    ba8a:	4b23      	ldr	r3, [pc, #140]	; (bb18 <vTaskDelayUntil+0xb0>)
    ba8c:	681b      	ldr	r3, [r3, #0]
    ba8e:	2b00      	cmp	r3, #0
    ba90:	d001      	beq.n	ba96 <vTaskDelayUntil+0x2e>
    ba92:	b672      	cpsid	i
    ba94:	e7fe      	b.n	ba94 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    ba96:	4b21      	ldr	r3, [pc, #132]	; (bb1c <vTaskDelayUntil+0xb4>)
    ba98:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    ba9a:	4b21      	ldr	r3, [pc, #132]	; (bb20 <vTaskDelayUntil+0xb8>)
    ba9c:	681b      	ldr	r3, [r3, #0]
    ba9e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    baa0:	687b      	ldr	r3, [r7, #4]
    baa2:	681a      	ldr	r2, [r3, #0]
    baa4:	683b      	ldr	r3, [r7, #0]
    baa6:	18d3      	adds	r3, r2, r3
    baa8:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    baaa:	687b      	ldr	r3, [r7, #4]
    baac:	681a      	ldr	r2, [r3, #0]
    baae:	693b      	ldr	r3, [r7, #16]
    bab0:	429a      	cmp	r2, r3
    bab2:	d90b      	bls.n	bacc <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	681a      	ldr	r2, [r3, #0]
    bab8:	68fb      	ldr	r3, [r7, #12]
    baba:	429a      	cmp	r2, r3
    babc:	d911      	bls.n	bae2 <vTaskDelayUntil+0x7a>
    babe:	68fa      	ldr	r2, [r7, #12]
    bac0:	693b      	ldr	r3, [r7, #16]
    bac2:	429a      	cmp	r2, r3
    bac4:	d90d      	bls.n	bae2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    bac6:	2301      	movs	r3, #1
    bac8:	617b      	str	r3, [r7, #20]
    baca:	e00a      	b.n	bae2 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    bacc:	687b      	ldr	r3, [r7, #4]
    bace:	681a      	ldr	r2, [r3, #0]
    bad0:	68fb      	ldr	r3, [r7, #12]
    bad2:	429a      	cmp	r2, r3
    bad4:	d803      	bhi.n	bade <vTaskDelayUntil+0x76>
    bad6:	68fa      	ldr	r2, [r7, #12]
    bad8:	693b      	ldr	r3, [r7, #16]
    bada:	429a      	cmp	r2, r3
    badc:	d901      	bls.n	bae2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    bade:	2301      	movs	r3, #1
    bae0:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    bae2:	687b      	ldr	r3, [r7, #4]
    bae4:	68fa      	ldr	r2, [r7, #12]
    bae6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    bae8:	697b      	ldr	r3, [r7, #20]
    baea:	2b00      	cmp	r3, #0
    baec:	d006      	beq.n	bafc <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    baee:	68fa      	ldr	r2, [r7, #12]
    baf0:	693b      	ldr	r3, [r7, #16]
    baf2:	1ad3      	subs	r3, r2, r3
    baf4:	2100      	movs	r1, #0
    baf6:	0018      	movs	r0, r3
    baf8:	4b0a      	ldr	r3, [pc, #40]	; (bb24 <vTaskDelayUntil+0xbc>)
    bafa:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    bafc:	4b0a      	ldr	r3, [pc, #40]	; (bb28 <vTaskDelayUntil+0xc0>)
    bafe:	4798      	blx	r3
    bb00:	0003      	movs	r3, r0
    bb02:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    bb04:	68bb      	ldr	r3, [r7, #8]
    bb06:	2b00      	cmp	r3, #0
    bb08:	d101      	bne.n	bb0e <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    bb0a:	4b08      	ldr	r3, [pc, #32]	; (bb2c <vTaskDelayUntil+0xc4>)
    bb0c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bb0e:	46c0      	nop			; (mov r8, r8)
    bb10:	46bd      	mov	sp, r7
    bb12:	b006      	add	sp, #24
    bb14:	bd80      	pop	{r7, pc}
    bb16:	46c0      	nop			; (mov r8, r8)
    bb18:	20003bf0 	.word	0x20003bf0
    bb1c:	0000bedd 	.word	0x0000bedd
    bb20:	20003bcc 	.word	0x20003bcc
    bb24:	0000c795 	.word	0x0000c795
    bb28:	0000bef5 	.word	0x0000bef5
    bb2c:	00007301 	.word	0x00007301

0000bb30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    bb30:	b580      	push	{r7, lr}
    bb32:	b084      	sub	sp, #16
    bb34:	af00      	add	r7, sp, #0
    bb36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    bb38:	2300      	movs	r3, #0
    bb3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    bb3c:	687b      	ldr	r3, [r7, #4]
    bb3e:	2b00      	cmp	r3, #0
    bb40:	d010      	beq.n	bb64 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    bb42:	4b0d      	ldr	r3, [pc, #52]	; (bb78 <vTaskDelay+0x48>)
    bb44:	681b      	ldr	r3, [r3, #0]
    bb46:	2b00      	cmp	r3, #0
    bb48:	d001      	beq.n	bb4e <vTaskDelay+0x1e>
    bb4a:	b672      	cpsid	i
    bb4c:	e7fe      	b.n	bb4c <vTaskDelay+0x1c>
			vTaskSuspendAll();
    bb4e:	4b0b      	ldr	r3, [pc, #44]	; (bb7c <vTaskDelay+0x4c>)
    bb50:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    bb52:	687b      	ldr	r3, [r7, #4]
    bb54:	2100      	movs	r1, #0
    bb56:	0018      	movs	r0, r3
    bb58:	4b09      	ldr	r3, [pc, #36]	; (bb80 <vTaskDelay+0x50>)
    bb5a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    bb5c:	4b09      	ldr	r3, [pc, #36]	; (bb84 <vTaskDelay+0x54>)
    bb5e:	4798      	blx	r3
    bb60:	0003      	movs	r3, r0
    bb62:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    bb64:	68fb      	ldr	r3, [r7, #12]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d101      	bne.n	bb6e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    bb6a:	4b07      	ldr	r3, [pc, #28]	; (bb88 <vTaskDelay+0x58>)
    bb6c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bb6e:	46c0      	nop			; (mov r8, r8)
    bb70:	46bd      	mov	sp, r7
    bb72:	b004      	add	sp, #16
    bb74:	bd80      	pop	{r7, pc}
    bb76:	46c0      	nop			; (mov r8, r8)
    bb78:	20003bf0 	.word	0x20003bf0
    bb7c:	0000bedd 	.word	0x0000bedd
    bb80:	0000c795 	.word	0x0000c795
    bb84:	0000bef5 	.word	0x0000bef5
    bb88:	00007301 	.word	0x00007301

0000bb8c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    bb8c:	b580      	push	{r7, lr}
    bb8e:	b084      	sub	sp, #16
    bb90:	af00      	add	r7, sp, #0
    bb92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    bb94:	4b2b      	ldr	r3, [pc, #172]	; (bc44 <vTaskSuspend+0xb8>)
    bb96:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    bb98:	687b      	ldr	r3, [r7, #4]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d102      	bne.n	bba4 <vTaskSuspend+0x18>
    bb9e:	4b2a      	ldr	r3, [pc, #168]	; (bc48 <vTaskSuspend+0xbc>)
    bba0:	681b      	ldr	r3, [r3, #0]
    bba2:	e000      	b.n	bba6 <vTaskSuspend+0x1a>
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    bba8:	68fb      	ldr	r3, [r7, #12]
    bbaa:	3304      	adds	r3, #4
    bbac:	0018      	movs	r0, r3
    bbae:	4b27      	ldr	r3, [pc, #156]	; (bc4c <vTaskSuspend+0xc0>)
    bbb0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    bbb2:	68fb      	ldr	r3, [r7, #12]
    bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d004      	beq.n	bbc4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	3318      	adds	r3, #24
    bbbe:	0018      	movs	r0, r3
    bbc0:	4b22      	ldr	r3, [pc, #136]	; (bc4c <vTaskSuspend+0xc0>)
    bbc2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    bbc4:	68fb      	ldr	r3, [r7, #12]
    bbc6:	1d1a      	adds	r2, r3, #4
    bbc8:	4b21      	ldr	r3, [pc, #132]	; (bc50 <vTaskSuspend+0xc4>)
    bbca:	0011      	movs	r1, r2
    bbcc:	0018      	movs	r0, r3
    bbce:	4b21      	ldr	r3, [pc, #132]	; (bc54 <vTaskSuspend+0xc8>)
    bbd0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    bbd2:	68fb      	ldr	r3, [r7, #12]
    bbd4:	2254      	movs	r2, #84	; 0x54
    bbd6:	5c9b      	ldrb	r3, [r3, r2]
    bbd8:	b2db      	uxtb	r3, r3
    bbda:	2b01      	cmp	r3, #1
    bbdc:	d103      	bne.n	bbe6 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    bbde:	68fb      	ldr	r3, [r7, #12]
    bbe0:	2254      	movs	r2, #84	; 0x54
    bbe2:	2100      	movs	r1, #0
    bbe4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    bbe6:	4b1c      	ldr	r3, [pc, #112]	; (bc58 <vTaskSuspend+0xcc>)
    bbe8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    bbea:	4b1c      	ldr	r3, [pc, #112]	; (bc5c <vTaskSuspend+0xd0>)
    bbec:	681b      	ldr	r3, [r3, #0]
    bbee:	2b00      	cmp	r3, #0
    bbf0:	d005      	beq.n	bbfe <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    bbf2:	4b14      	ldr	r3, [pc, #80]	; (bc44 <vTaskSuspend+0xb8>)
    bbf4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    bbf6:	4b1a      	ldr	r3, [pc, #104]	; (bc60 <vTaskSuspend+0xd4>)
    bbf8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    bbfa:	4b17      	ldr	r3, [pc, #92]	; (bc58 <vTaskSuspend+0xcc>)
    bbfc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    bbfe:	4b12      	ldr	r3, [pc, #72]	; (bc48 <vTaskSuspend+0xbc>)
    bc00:	681b      	ldr	r3, [r3, #0]
    bc02:	68fa      	ldr	r2, [r7, #12]
    bc04:	429a      	cmp	r2, r3
    bc06:	d118      	bne.n	bc3a <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
    bc08:	4b14      	ldr	r3, [pc, #80]	; (bc5c <vTaskSuspend+0xd0>)
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	2b00      	cmp	r3, #0
    bc0e:	d008      	beq.n	bc22 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    bc10:	4b14      	ldr	r3, [pc, #80]	; (bc64 <vTaskSuspend+0xd8>)
    bc12:	681b      	ldr	r3, [r3, #0]
    bc14:	2b00      	cmp	r3, #0
    bc16:	d001      	beq.n	bc1c <vTaskSuspend+0x90>
    bc18:	b672      	cpsid	i
    bc1a:	e7fe      	b.n	bc1a <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
    bc1c:	4b12      	ldr	r3, [pc, #72]	; (bc68 <vTaskSuspend+0xdc>)
    bc1e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bc20:	e00b      	b.n	bc3a <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    bc22:	4b0b      	ldr	r3, [pc, #44]	; (bc50 <vTaskSuspend+0xc4>)
    bc24:	681a      	ldr	r2, [r3, #0]
    bc26:	4b11      	ldr	r3, [pc, #68]	; (bc6c <vTaskSuspend+0xe0>)
    bc28:	681b      	ldr	r3, [r3, #0]
    bc2a:	429a      	cmp	r2, r3
    bc2c:	d103      	bne.n	bc36 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
    bc2e:	4b06      	ldr	r3, [pc, #24]	; (bc48 <vTaskSuspend+0xbc>)
    bc30:	2200      	movs	r2, #0
    bc32:	601a      	str	r2, [r3, #0]
	}
    bc34:	e001      	b.n	bc3a <vTaskSuspend+0xae>
					vTaskSwitchContext();
    bc36:	4b0e      	ldr	r3, [pc, #56]	; (bc70 <vTaskSuspend+0xe4>)
    bc38:	4798      	blx	r3
	}
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	46bd      	mov	sp, r7
    bc3e:	b004      	add	sp, #16
    bc40:	bd80      	pop	{r7, pc}
    bc42:	46c0      	nop			; (mov r8, r8)
    bc44:	00007321 	.word	0x00007321
    bc48:	20003af0 	.word	0x20003af0
    bc4c:	0000ad6b 	.word	0x0000ad6b
    bc50:	20003bb4 	.word	0x20003bb4
    bc54:	0000acbb 	.word	0x0000acbb
    bc58:	00007345 	.word	0x00007345
    bc5c:	20003bd4 	.word	0x20003bd4
    bc60:	0000c655 	.word	0x0000c655
    bc64:	20003bf0 	.word	0x20003bf0
    bc68:	00007301 	.word	0x00007301
    bc6c:	20003bc8 	.word	0x20003bc8
    bc70:	0000c1cd 	.word	0x0000c1cd

0000bc74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    bc74:	b580      	push	{r7, lr}
    bc76:	b084      	sub	sp, #16
    bc78:	af00      	add	r7, sp, #0
    bc7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    bc7c:	2300      	movs	r3, #0
    bc7e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    bc80:	687b      	ldr	r3, [r7, #4]
    bc82:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    bc84:	687b      	ldr	r3, [r7, #4]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d101      	bne.n	bc8e <prvTaskIsTaskSuspended+0x1a>
    bc8a:	b672      	cpsid	i
    bc8c:	e7fe      	b.n	bc8c <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    bc8e:	68bb      	ldr	r3, [r7, #8]
    bc90:	695a      	ldr	r2, [r3, #20]
    bc92:	4b0e      	ldr	r3, [pc, #56]	; (bccc <prvTaskIsTaskSuspended+0x58>)
    bc94:	429a      	cmp	r2, r3
    bc96:	d101      	bne.n	bc9c <prvTaskIsTaskSuspended+0x28>
    bc98:	2301      	movs	r3, #1
    bc9a:	e000      	b.n	bc9e <prvTaskIsTaskSuspended+0x2a>
    bc9c:	2300      	movs	r3, #0
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d00f      	beq.n	bcc2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    bca2:	68bb      	ldr	r3, [r7, #8]
    bca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bca6:	4b0a      	ldr	r3, [pc, #40]	; (bcd0 <prvTaskIsTaskSuspended+0x5c>)
    bca8:	429a      	cmp	r2, r3
    bcaa:	d00a      	beq.n	bcc2 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    bcac:	68bb      	ldr	r3, [r7, #8]
    bcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d101      	bne.n	bcb8 <prvTaskIsTaskSuspended+0x44>
    bcb4:	2301      	movs	r3, #1
    bcb6:	e000      	b.n	bcba <prvTaskIsTaskSuspended+0x46>
    bcb8:	2300      	movs	r3, #0
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d001      	beq.n	bcc2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
    bcbe:	2301      	movs	r3, #1
    bcc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    bcc2:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    bcc4:	0018      	movs	r0, r3
    bcc6:	46bd      	mov	sp, r7
    bcc8:	b004      	add	sp, #16
    bcca:	bd80      	pop	{r7, pc}
    bccc:	20003bb4 	.word	0x20003bb4
    bcd0:	20003b88 	.word	0x20003b88

0000bcd4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    bcd4:	b580      	push	{r7, lr}
    bcd6:	b084      	sub	sp, #16
    bcd8:	af00      	add	r7, sp, #0
    bcda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    bcdc:	687b      	ldr	r3, [r7, #4]
    bcde:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    bce0:	687b      	ldr	r3, [r7, #4]
    bce2:	2b00      	cmp	r3, #0
    bce4:	d101      	bne.n	bcea <vTaskResume+0x16>
    bce6:	b672      	cpsid	i
    bce8:	e7fe      	b.n	bce8 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    bcea:	68fb      	ldr	r3, [r7, #12]
    bcec:	2b00      	cmp	r3, #0
    bcee:	d034      	beq.n	bd5a <vTaskResume+0x86>
    bcf0:	4b1c      	ldr	r3, [pc, #112]	; (bd64 <vTaskResume+0x90>)
    bcf2:	681b      	ldr	r3, [r3, #0]
    bcf4:	68fa      	ldr	r2, [r7, #12]
    bcf6:	429a      	cmp	r2, r3
    bcf8:	d02f      	beq.n	bd5a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    bcfa:	4b1b      	ldr	r3, [pc, #108]	; (bd68 <vTaskResume+0x94>)
    bcfc:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    bcfe:	68fb      	ldr	r3, [r7, #12]
    bd00:	0018      	movs	r0, r3
    bd02:	4b1a      	ldr	r3, [pc, #104]	; (bd6c <vTaskResume+0x98>)
    bd04:	4798      	blx	r3
    bd06:	1e03      	subs	r3, r0, #0
    bd08:	d025      	beq.n	bd56 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    bd0a:	68fb      	ldr	r3, [r7, #12]
    bd0c:	3304      	adds	r3, #4
    bd0e:	0018      	movs	r0, r3
    bd10:	4b17      	ldr	r3, [pc, #92]	; (bd70 <vTaskResume+0x9c>)
    bd12:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    bd14:	68fb      	ldr	r3, [r7, #12]
    bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bd18:	4b16      	ldr	r3, [pc, #88]	; (bd74 <vTaskResume+0xa0>)
    bd1a:	681b      	ldr	r3, [r3, #0]
    bd1c:	429a      	cmp	r2, r3
    bd1e:	d903      	bls.n	bd28 <vTaskResume+0x54>
    bd20:	68fb      	ldr	r3, [r7, #12]
    bd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bd24:	4b13      	ldr	r3, [pc, #76]	; (bd74 <vTaskResume+0xa0>)
    bd26:	601a      	str	r2, [r3, #0]
    bd28:	68fb      	ldr	r3, [r7, #12]
    bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bd2c:	0013      	movs	r3, r2
    bd2e:	009b      	lsls	r3, r3, #2
    bd30:	189b      	adds	r3, r3, r2
    bd32:	009b      	lsls	r3, r3, #2
    bd34:	4a10      	ldr	r2, [pc, #64]	; (bd78 <vTaskResume+0xa4>)
    bd36:	189a      	adds	r2, r3, r2
    bd38:	68fb      	ldr	r3, [r7, #12]
    bd3a:	3304      	adds	r3, #4
    bd3c:	0019      	movs	r1, r3
    bd3e:	0010      	movs	r0, r2
    bd40:	4b0e      	ldr	r3, [pc, #56]	; (bd7c <vTaskResume+0xa8>)
    bd42:	4798      	blx	r3

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    bd44:	68fb      	ldr	r3, [r7, #12]
    bd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bd48:	4b06      	ldr	r3, [pc, #24]	; (bd64 <vTaskResume+0x90>)
    bd4a:	681b      	ldr	r3, [r3, #0]
    bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd4e:	429a      	cmp	r2, r3
    bd50:	d301      	bcc.n	bd56 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    bd52:	4b0b      	ldr	r3, [pc, #44]	; (bd80 <vTaskResume+0xac>)
    bd54:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    bd56:	4b0b      	ldr	r3, [pc, #44]	; (bd84 <vTaskResume+0xb0>)
    bd58:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bd5a:	46c0      	nop			; (mov r8, r8)
    bd5c:	46bd      	mov	sp, r7
    bd5e:	b004      	add	sp, #16
    bd60:	bd80      	pop	{r7, pc}
    bd62:	46c0      	nop			; (mov r8, r8)
    bd64:	20003af0 	.word	0x20003af0
    bd68:	00007321 	.word	0x00007321
    bd6c:	0000bc75 	.word	0x0000bc75
    bd70:	0000ad6b 	.word	0x0000ad6b
    bd74:	20003bd0 	.word	0x20003bd0
    bd78:	20003af4 	.word	0x20003af4
    bd7c:	0000acbb 	.word	0x0000acbb
    bd80:	00007301 	.word	0x00007301
    bd84:	00007345 	.word	0x00007345

0000bd88 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    bd88:	b580      	push	{r7, lr}
    bd8a:	b086      	sub	sp, #24
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    bd90:	2300      	movs	r3, #0
    bd92:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    bd98:	687b      	ldr	r3, [r7, #4]
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d101      	bne.n	bda2 <xTaskResumeFromISR+0x1a>
    bd9e:	b672      	cpsid	i
    bda0:	e7fe      	b.n	bda0 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    bda2:	4b23      	ldr	r3, [pc, #140]	; (be30 <xTaskResumeFromISR+0xa8>)
    bda4:	4798      	blx	r3
    bda6:	0003      	movs	r3, r0
    bda8:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    bdaa:	693b      	ldr	r3, [r7, #16]
    bdac:	0018      	movs	r0, r3
    bdae:	4b21      	ldr	r3, [pc, #132]	; (be34 <xTaskResumeFromISR+0xac>)
    bdb0:	4798      	blx	r3
    bdb2:	1e03      	subs	r3, r0, #0
    bdb4:	d032      	beq.n	be1c <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bdb6:	4b20      	ldr	r3, [pc, #128]	; (be38 <xTaskResumeFromISR+0xb0>)
    bdb8:	681b      	ldr	r3, [r3, #0]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d126      	bne.n	be0c <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    bdbe:	693b      	ldr	r3, [r7, #16]
    bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdc2:	4b1e      	ldr	r3, [pc, #120]	; (be3c <xTaskResumeFromISR+0xb4>)
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bdc8:	429a      	cmp	r2, r3
    bdca:	d301      	bcc.n	bdd0 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
    bdcc:	2301      	movs	r3, #1
    bdce:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bdd0:	693b      	ldr	r3, [r7, #16]
    bdd2:	3304      	adds	r3, #4
    bdd4:	0018      	movs	r0, r3
    bdd6:	4b1a      	ldr	r3, [pc, #104]	; (be40 <xTaskResumeFromISR+0xb8>)
    bdd8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    bdda:	693b      	ldr	r3, [r7, #16]
    bddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdde:	4b19      	ldr	r3, [pc, #100]	; (be44 <xTaskResumeFromISR+0xbc>)
    bde0:	681b      	ldr	r3, [r3, #0]
    bde2:	429a      	cmp	r2, r3
    bde4:	d903      	bls.n	bdee <xTaskResumeFromISR+0x66>
    bde6:	693b      	ldr	r3, [r7, #16]
    bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdea:	4b16      	ldr	r3, [pc, #88]	; (be44 <xTaskResumeFromISR+0xbc>)
    bdec:	601a      	str	r2, [r3, #0]
    bdee:	693b      	ldr	r3, [r7, #16]
    bdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdf2:	0013      	movs	r3, r2
    bdf4:	009b      	lsls	r3, r3, #2
    bdf6:	189b      	adds	r3, r3, r2
    bdf8:	009b      	lsls	r3, r3, #2
    bdfa:	4a13      	ldr	r2, [pc, #76]	; (be48 <xTaskResumeFromISR+0xc0>)
    bdfc:	189a      	adds	r2, r3, r2
    bdfe:	693b      	ldr	r3, [r7, #16]
    be00:	3304      	adds	r3, #4
    be02:	0019      	movs	r1, r3
    be04:	0010      	movs	r0, r2
    be06:	4b11      	ldr	r3, [pc, #68]	; (be4c <xTaskResumeFromISR+0xc4>)
    be08:	4798      	blx	r3
    be0a:	e007      	b.n	be1c <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    be0c:	693b      	ldr	r3, [r7, #16]
    be0e:	3318      	adds	r3, #24
    be10:	001a      	movs	r2, r3
    be12:	4b0f      	ldr	r3, [pc, #60]	; (be50 <xTaskResumeFromISR+0xc8>)
    be14:	0011      	movs	r1, r2
    be16:	0018      	movs	r0, r3
    be18:	4b0c      	ldr	r3, [pc, #48]	; (be4c <xTaskResumeFromISR+0xc4>)
    be1a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    be1c:	68fb      	ldr	r3, [r7, #12]
    be1e:	0018      	movs	r0, r3
    be20:	4b0c      	ldr	r3, [pc, #48]	; (be54 <xTaskResumeFromISR+0xcc>)
    be22:	4798      	blx	r3

		return xYieldRequired;
    be24:	697b      	ldr	r3, [r7, #20]
	}
    be26:	0018      	movs	r0, r3
    be28:	46bd      	mov	sp, r7
    be2a:	b006      	add	sp, #24
    be2c:	bd80      	pop	{r7, pc}
    be2e:	46c0      	nop			; (mov r8, r8)
    be30:	00007375 	.word	0x00007375
    be34:	0000bc75 	.word	0x0000bc75
    be38:	20003bf0 	.word	0x20003bf0
    be3c:	20003af0 	.word	0x20003af0
    be40:	0000ad6b 	.word	0x0000ad6b
    be44:	20003bd0 	.word	0x20003bd0
    be48:	20003af4 	.word	0x20003af4
    be4c:	0000acbb 	.word	0x0000acbb
    be50:	20003b88 	.word	0x20003b88
    be54:	00007381 	.word	0x00007381

0000be58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    be58:	b590      	push	{r4, r7, lr}
    be5a:	b085      	sub	sp, #20
    be5c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    be5e:	4916      	ldr	r1, [pc, #88]	; (beb8 <vTaskStartScheduler+0x60>)
    be60:	4816      	ldr	r0, [pc, #88]	; (bebc <vTaskStartScheduler+0x64>)
    be62:	4b17      	ldr	r3, [pc, #92]	; (bec0 <vTaskStartScheduler+0x68>)
    be64:	9301      	str	r3, [sp, #4]
    be66:	2300      	movs	r3, #0
    be68:	9300      	str	r3, [sp, #0]
    be6a:	2300      	movs	r3, #0
    be6c:	2282      	movs	r2, #130	; 0x82
    be6e:	4c15      	ldr	r4, [pc, #84]	; (bec4 <vTaskStartScheduler+0x6c>)
    be70:	47a0      	blx	r4
    be72:	0003      	movs	r3, r0
    be74:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    be76:	687b      	ldr	r3, [r7, #4]
    be78:	2b01      	cmp	r3, #1
    be7a:	d103      	bne.n	be84 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    be7c:	4b12      	ldr	r3, [pc, #72]	; (bec8 <vTaskStartScheduler+0x70>)
    be7e:	4798      	blx	r3
    be80:	0003      	movs	r3, r0
    be82:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	2b01      	cmp	r3, #1
    be88:	d10d      	bne.n	bea6 <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    be8a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    be8c:	4b0f      	ldr	r3, [pc, #60]	; (becc <vTaskStartScheduler+0x74>)
    be8e:	2201      	movs	r2, #1
    be90:	4252      	negs	r2, r2
    be92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    be94:	4b0e      	ldr	r3, [pc, #56]	; (bed0 <vTaskStartScheduler+0x78>)
    be96:	2201      	movs	r2, #1
    be98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    be9a:	4b0e      	ldr	r3, [pc, #56]	; (bed4 <vTaskStartScheduler+0x7c>)
    be9c:	2200      	movs	r2, #0
    be9e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    bea0:	4b0d      	ldr	r3, [pc, #52]	; (bed8 <vTaskStartScheduler+0x80>)
    bea2:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    bea4:	e004      	b.n	beb0 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    bea6:	687b      	ldr	r3, [r7, #4]
    bea8:	3301      	adds	r3, #1
    beaa:	d101      	bne.n	beb0 <vTaskStartScheduler+0x58>
    beac:	b672      	cpsid	i
    beae:	e7fe      	b.n	beae <vTaskStartScheduler+0x56>
}
    beb0:	46c0      	nop			; (mov r8, r8)
    beb2:	46bd      	mov	sp, r7
    beb4:	b003      	add	sp, #12
    beb6:	bd90      	pop	{r4, r7, pc}
    beb8:	00013a8c 	.word	0x00013a8c
    bebc:	0000c505 	.word	0x0000c505
    bec0:	20003bec 	.word	0x20003bec
    bec4:	0000b7d5 	.word	0x0000b7d5
    bec8:	0000c849 	.word	0x0000c849
    becc:	20003be8 	.word	0x20003be8
    bed0:	20003bd4 	.word	0x20003bd4
    bed4:	20003bcc 	.word	0x20003bcc
    bed8:	000072a9 	.word	0x000072a9

0000bedc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    bedc:	b580      	push	{r7, lr}
    bede:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    bee0:	4b03      	ldr	r3, [pc, #12]	; (bef0 <vTaskSuspendAll+0x14>)
    bee2:	681b      	ldr	r3, [r3, #0]
    bee4:	1c5a      	adds	r2, r3, #1
    bee6:	4b02      	ldr	r3, [pc, #8]	; (bef0 <vTaskSuspendAll+0x14>)
    bee8:	601a      	str	r2, [r3, #0]
}
    beea:	46c0      	nop			; (mov r8, r8)
    beec:	46bd      	mov	sp, r7
    beee:	bd80      	pop	{r7, pc}
    bef0:	20003bf0 	.word	0x20003bf0

0000bef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    bef4:	b580      	push	{r7, lr}
    bef6:	b084      	sub	sp, #16
    bef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    befa:	2300      	movs	r3, #0
    befc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    befe:	2300      	movs	r3, #0
    bf00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    bf02:	4b3a      	ldr	r3, [pc, #232]	; (bfec <xTaskResumeAll+0xf8>)
    bf04:	681b      	ldr	r3, [r3, #0]
    bf06:	2b00      	cmp	r3, #0
    bf08:	d101      	bne.n	bf0e <xTaskResumeAll+0x1a>
    bf0a:	b672      	cpsid	i
    bf0c:	e7fe      	b.n	bf0c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    bf0e:	4b38      	ldr	r3, [pc, #224]	; (bff0 <xTaskResumeAll+0xfc>)
    bf10:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    bf12:	4b36      	ldr	r3, [pc, #216]	; (bfec <xTaskResumeAll+0xf8>)
    bf14:	681b      	ldr	r3, [r3, #0]
    bf16:	1e5a      	subs	r2, r3, #1
    bf18:	4b34      	ldr	r3, [pc, #208]	; (bfec <xTaskResumeAll+0xf8>)
    bf1a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bf1c:	4b33      	ldr	r3, [pc, #204]	; (bfec <xTaskResumeAll+0xf8>)
    bf1e:	681b      	ldr	r3, [r3, #0]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d15b      	bne.n	bfdc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    bf24:	4b33      	ldr	r3, [pc, #204]	; (bff4 <xTaskResumeAll+0x100>)
    bf26:	681b      	ldr	r3, [r3, #0]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d057      	beq.n	bfdc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    bf2c:	e02f      	b.n	bf8e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    bf2e:	4b32      	ldr	r3, [pc, #200]	; (bff8 <xTaskResumeAll+0x104>)
    bf30:	68db      	ldr	r3, [r3, #12]
    bf32:	68db      	ldr	r3, [r3, #12]
    bf34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    bf36:	68fb      	ldr	r3, [r7, #12]
    bf38:	3318      	adds	r3, #24
    bf3a:	0018      	movs	r0, r3
    bf3c:	4b2f      	ldr	r3, [pc, #188]	; (bffc <xTaskResumeAll+0x108>)
    bf3e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bf40:	68fb      	ldr	r3, [r7, #12]
    bf42:	3304      	adds	r3, #4
    bf44:	0018      	movs	r0, r3
    bf46:	4b2d      	ldr	r3, [pc, #180]	; (bffc <xTaskResumeAll+0x108>)
    bf48:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    bf4a:	68fb      	ldr	r3, [r7, #12]
    bf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf4e:	4b2c      	ldr	r3, [pc, #176]	; (c000 <xTaskResumeAll+0x10c>)
    bf50:	681b      	ldr	r3, [r3, #0]
    bf52:	429a      	cmp	r2, r3
    bf54:	d903      	bls.n	bf5e <xTaskResumeAll+0x6a>
    bf56:	68fb      	ldr	r3, [r7, #12]
    bf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf5a:	4b29      	ldr	r3, [pc, #164]	; (c000 <xTaskResumeAll+0x10c>)
    bf5c:	601a      	str	r2, [r3, #0]
    bf5e:	68fb      	ldr	r3, [r7, #12]
    bf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf62:	0013      	movs	r3, r2
    bf64:	009b      	lsls	r3, r3, #2
    bf66:	189b      	adds	r3, r3, r2
    bf68:	009b      	lsls	r3, r3, #2
    bf6a:	4a26      	ldr	r2, [pc, #152]	; (c004 <xTaskResumeAll+0x110>)
    bf6c:	189a      	adds	r2, r3, r2
    bf6e:	68fb      	ldr	r3, [r7, #12]
    bf70:	3304      	adds	r3, #4
    bf72:	0019      	movs	r1, r3
    bf74:	0010      	movs	r0, r2
    bf76:	4b24      	ldr	r3, [pc, #144]	; (c008 <xTaskResumeAll+0x114>)
    bf78:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    bf7a:	68fb      	ldr	r3, [r7, #12]
    bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf7e:	4b23      	ldr	r3, [pc, #140]	; (c00c <xTaskResumeAll+0x118>)
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bf84:	429a      	cmp	r2, r3
    bf86:	d302      	bcc.n	bf8e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    bf88:	4b21      	ldr	r3, [pc, #132]	; (c010 <xTaskResumeAll+0x11c>)
    bf8a:	2201      	movs	r2, #1
    bf8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    bf8e:	4b1a      	ldr	r3, [pc, #104]	; (bff8 <xTaskResumeAll+0x104>)
    bf90:	681b      	ldr	r3, [r3, #0]
    bf92:	2b00      	cmp	r3, #0
    bf94:	d1cb      	bne.n	bf2e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    bf96:	68fb      	ldr	r3, [r7, #12]
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d001      	beq.n	bfa0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    bf9c:	4b1d      	ldr	r3, [pc, #116]	; (c014 <xTaskResumeAll+0x120>)
    bf9e:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    bfa0:	4b1d      	ldr	r3, [pc, #116]	; (c018 <xTaskResumeAll+0x124>)
    bfa2:	681b      	ldr	r3, [r3, #0]
    bfa4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    bfa6:	687b      	ldr	r3, [r7, #4]
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d00f      	beq.n	bfcc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    bfac:	4b1b      	ldr	r3, [pc, #108]	; (c01c <xTaskResumeAll+0x128>)
    bfae:	4798      	blx	r3
    bfb0:	1e03      	subs	r3, r0, #0
    bfb2:	d002      	beq.n	bfba <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    bfb4:	4b16      	ldr	r3, [pc, #88]	; (c010 <xTaskResumeAll+0x11c>)
    bfb6:	2201      	movs	r2, #1
    bfb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    bfba:	687b      	ldr	r3, [r7, #4]
    bfbc:	3b01      	subs	r3, #1
    bfbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    bfc0:	687b      	ldr	r3, [r7, #4]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d1f2      	bne.n	bfac <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    bfc6:	4b14      	ldr	r3, [pc, #80]	; (c018 <xTaskResumeAll+0x124>)
    bfc8:	2200      	movs	r2, #0
    bfca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    bfcc:	4b10      	ldr	r3, [pc, #64]	; (c010 <xTaskResumeAll+0x11c>)
    bfce:	681b      	ldr	r3, [r3, #0]
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d003      	beq.n	bfdc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    bfd4:	2301      	movs	r3, #1
    bfd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    bfd8:	4b11      	ldr	r3, [pc, #68]	; (c020 <xTaskResumeAll+0x12c>)
    bfda:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    bfdc:	4b11      	ldr	r3, [pc, #68]	; (c024 <xTaskResumeAll+0x130>)
    bfde:	4798      	blx	r3

	return xAlreadyYielded;
    bfe0:	68bb      	ldr	r3, [r7, #8]
}
    bfe2:	0018      	movs	r0, r3
    bfe4:	46bd      	mov	sp, r7
    bfe6:	b004      	add	sp, #16
    bfe8:	bd80      	pop	{r7, pc}
    bfea:	46c0      	nop			; (mov r8, r8)
    bfec:	20003bf0 	.word	0x20003bf0
    bff0:	00007321 	.word	0x00007321
    bff4:	20003bc8 	.word	0x20003bc8
    bff8:	20003b88 	.word	0x20003b88
    bffc:	0000ad6b 	.word	0x0000ad6b
    c000:	20003bd0 	.word	0x20003bd0
    c004:	20003af4 	.word	0x20003af4
    c008:	0000acbb 	.word	0x0000acbb
    c00c:	20003af0 	.word	0x20003af0
    c010:	20003bdc 	.word	0x20003bdc
    c014:	0000c655 	.word	0x0000c655
    c018:	20003bd8 	.word	0x20003bd8
    c01c:	0000c045 	.word	0x0000c045
    c020:	00007301 	.word	0x00007301
    c024:	00007345 	.word	0x00007345

0000c028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    c028:	b580      	push	{r7, lr}
    c02a:	b082      	sub	sp, #8
    c02c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    c02e:	4b04      	ldr	r3, [pc, #16]	; (c040 <xTaskGetTickCount+0x18>)
    c030:	681b      	ldr	r3, [r3, #0]
    c032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    c034:	687b      	ldr	r3, [r7, #4]
}
    c036:	0018      	movs	r0, r3
    c038:	46bd      	mov	sp, r7
    c03a:	b002      	add	sp, #8
    c03c:	bd80      	pop	{r7, pc}
    c03e:	46c0      	nop			; (mov r8, r8)
    c040:	20003bcc 	.word	0x20003bcc

0000c044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    c044:	b580      	push	{r7, lr}
    c046:	b086      	sub	sp, #24
    c048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    c04a:	2300      	movs	r3, #0
    c04c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c04e:	4b50      	ldr	r3, [pc, #320]	; (c190 <xTaskIncrementTick+0x14c>)
    c050:	681b      	ldr	r3, [r3, #0]
    c052:	2b00      	cmp	r3, #0
    c054:	d000      	beq.n	c058 <xTaskIncrementTick+0x14>
    c056:	e089      	b.n	c16c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    c058:	4b4e      	ldr	r3, [pc, #312]	; (c194 <xTaskIncrementTick+0x150>)
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	3301      	adds	r3, #1
    c05e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    c060:	4b4c      	ldr	r3, [pc, #304]	; (c194 <xTaskIncrementTick+0x150>)
    c062:	693a      	ldr	r2, [r7, #16]
    c064:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    c066:	693b      	ldr	r3, [r7, #16]
    c068:	2b00      	cmp	r3, #0
    c06a:	d117      	bne.n	c09c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    c06c:	4b4a      	ldr	r3, [pc, #296]	; (c198 <xTaskIncrementTick+0x154>)
    c06e:	681b      	ldr	r3, [r3, #0]
    c070:	681b      	ldr	r3, [r3, #0]
    c072:	2b00      	cmp	r3, #0
    c074:	d001      	beq.n	c07a <xTaskIncrementTick+0x36>
    c076:	b672      	cpsid	i
    c078:	e7fe      	b.n	c078 <xTaskIncrementTick+0x34>
    c07a:	4b47      	ldr	r3, [pc, #284]	; (c198 <xTaskIncrementTick+0x154>)
    c07c:	681b      	ldr	r3, [r3, #0]
    c07e:	60fb      	str	r3, [r7, #12]
    c080:	4b46      	ldr	r3, [pc, #280]	; (c19c <xTaskIncrementTick+0x158>)
    c082:	681a      	ldr	r2, [r3, #0]
    c084:	4b44      	ldr	r3, [pc, #272]	; (c198 <xTaskIncrementTick+0x154>)
    c086:	601a      	str	r2, [r3, #0]
    c088:	4b44      	ldr	r3, [pc, #272]	; (c19c <xTaskIncrementTick+0x158>)
    c08a:	68fa      	ldr	r2, [r7, #12]
    c08c:	601a      	str	r2, [r3, #0]
    c08e:	4b44      	ldr	r3, [pc, #272]	; (c1a0 <xTaskIncrementTick+0x15c>)
    c090:	681b      	ldr	r3, [r3, #0]
    c092:	1c5a      	adds	r2, r3, #1
    c094:	4b42      	ldr	r3, [pc, #264]	; (c1a0 <xTaskIncrementTick+0x15c>)
    c096:	601a      	str	r2, [r3, #0]
    c098:	4b42      	ldr	r3, [pc, #264]	; (c1a4 <xTaskIncrementTick+0x160>)
    c09a:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    c09c:	4b42      	ldr	r3, [pc, #264]	; (c1a8 <xTaskIncrementTick+0x164>)
    c09e:	681b      	ldr	r3, [r3, #0]
    c0a0:	693a      	ldr	r2, [r7, #16]
    c0a2:	429a      	cmp	r2, r3
    c0a4:	d34e      	bcc.n	c144 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c0a6:	4b3c      	ldr	r3, [pc, #240]	; (c198 <xTaskIncrementTick+0x154>)
    c0a8:	681b      	ldr	r3, [r3, #0]
    c0aa:	681b      	ldr	r3, [r3, #0]
    c0ac:	2b00      	cmp	r3, #0
    c0ae:	d101      	bne.n	c0b4 <xTaskIncrementTick+0x70>
    c0b0:	2301      	movs	r3, #1
    c0b2:	e000      	b.n	c0b6 <xTaskIncrementTick+0x72>
    c0b4:	2300      	movs	r3, #0
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d004      	beq.n	c0c4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c0ba:	4b3b      	ldr	r3, [pc, #236]	; (c1a8 <xTaskIncrementTick+0x164>)
    c0bc:	2201      	movs	r2, #1
    c0be:	4252      	negs	r2, r2
    c0c0:	601a      	str	r2, [r3, #0]
					break;
    c0c2:	e03f      	b.n	c144 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c0c4:	4b34      	ldr	r3, [pc, #208]	; (c198 <xTaskIncrementTick+0x154>)
    c0c6:	681b      	ldr	r3, [r3, #0]
    c0c8:	68db      	ldr	r3, [r3, #12]
    c0ca:	68db      	ldr	r3, [r3, #12]
    c0cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    c0ce:	68bb      	ldr	r3, [r7, #8]
    c0d0:	685b      	ldr	r3, [r3, #4]
    c0d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    c0d4:	693a      	ldr	r2, [r7, #16]
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	429a      	cmp	r2, r3
    c0da:	d203      	bcs.n	c0e4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    c0dc:	4b32      	ldr	r3, [pc, #200]	; (c1a8 <xTaskIncrementTick+0x164>)
    c0de:	687a      	ldr	r2, [r7, #4]
    c0e0:	601a      	str	r2, [r3, #0]
						break;
    c0e2:	e02f      	b.n	c144 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c0e4:	68bb      	ldr	r3, [r7, #8]
    c0e6:	3304      	adds	r3, #4
    c0e8:	0018      	movs	r0, r3
    c0ea:	4b30      	ldr	r3, [pc, #192]	; (c1ac <xTaskIncrementTick+0x168>)
    c0ec:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    c0ee:	68bb      	ldr	r3, [r7, #8]
    c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c0f2:	2b00      	cmp	r3, #0
    c0f4:	d004      	beq.n	c100 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    c0f6:	68bb      	ldr	r3, [r7, #8]
    c0f8:	3318      	adds	r3, #24
    c0fa:	0018      	movs	r0, r3
    c0fc:	4b2b      	ldr	r3, [pc, #172]	; (c1ac <xTaskIncrementTick+0x168>)
    c0fe:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    c100:	68bb      	ldr	r3, [r7, #8]
    c102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c104:	4b2a      	ldr	r3, [pc, #168]	; (c1b0 <xTaskIncrementTick+0x16c>)
    c106:	681b      	ldr	r3, [r3, #0]
    c108:	429a      	cmp	r2, r3
    c10a:	d903      	bls.n	c114 <xTaskIncrementTick+0xd0>
    c10c:	68bb      	ldr	r3, [r7, #8]
    c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c110:	4b27      	ldr	r3, [pc, #156]	; (c1b0 <xTaskIncrementTick+0x16c>)
    c112:	601a      	str	r2, [r3, #0]
    c114:	68bb      	ldr	r3, [r7, #8]
    c116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c118:	0013      	movs	r3, r2
    c11a:	009b      	lsls	r3, r3, #2
    c11c:	189b      	adds	r3, r3, r2
    c11e:	009b      	lsls	r3, r3, #2
    c120:	4a24      	ldr	r2, [pc, #144]	; (c1b4 <xTaskIncrementTick+0x170>)
    c122:	189a      	adds	r2, r3, r2
    c124:	68bb      	ldr	r3, [r7, #8]
    c126:	3304      	adds	r3, #4
    c128:	0019      	movs	r1, r3
    c12a:	0010      	movs	r0, r2
    c12c:	4b22      	ldr	r3, [pc, #136]	; (c1b8 <xTaskIncrementTick+0x174>)
    c12e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    c130:	68bb      	ldr	r3, [r7, #8]
    c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c134:	4b21      	ldr	r3, [pc, #132]	; (c1bc <xTaskIncrementTick+0x178>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c13a:	429a      	cmp	r2, r3
    c13c:	d3b3      	bcc.n	c0a6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    c13e:	2301      	movs	r3, #1
    c140:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c142:	e7b0      	b.n	c0a6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    c144:	4b1d      	ldr	r3, [pc, #116]	; (c1bc <xTaskIncrementTick+0x178>)
    c146:	681b      	ldr	r3, [r3, #0]
    c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c14a:	491a      	ldr	r1, [pc, #104]	; (c1b4 <xTaskIncrementTick+0x170>)
    c14c:	0013      	movs	r3, r2
    c14e:	009b      	lsls	r3, r3, #2
    c150:	189b      	adds	r3, r3, r2
    c152:	009b      	lsls	r3, r3, #2
    c154:	585b      	ldr	r3, [r3, r1]
    c156:	2b01      	cmp	r3, #1
    c158:	d901      	bls.n	c15e <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
    c15a:	2301      	movs	r3, #1
    c15c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    c15e:	4b18      	ldr	r3, [pc, #96]	; (c1c0 <xTaskIncrementTick+0x17c>)
    c160:	681b      	ldr	r3, [r3, #0]
    c162:	2b00      	cmp	r3, #0
    c164:	d109      	bne.n	c17a <xTaskIncrementTick+0x136>
			{
				vApplicationTickHook();
    c166:	4b17      	ldr	r3, [pc, #92]	; (c1c4 <xTaskIncrementTick+0x180>)
    c168:	4798      	blx	r3
    c16a:	e006      	b.n	c17a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    c16c:	4b14      	ldr	r3, [pc, #80]	; (c1c0 <xTaskIncrementTick+0x17c>)
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	1c5a      	adds	r2, r3, #1
    c172:	4b13      	ldr	r3, [pc, #76]	; (c1c0 <xTaskIncrementTick+0x17c>)
    c174:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    c176:	4b13      	ldr	r3, [pc, #76]	; (c1c4 <xTaskIncrementTick+0x180>)
    c178:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    c17a:	4b13      	ldr	r3, [pc, #76]	; (c1c8 <xTaskIncrementTick+0x184>)
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	2b00      	cmp	r3, #0
    c180:	d001      	beq.n	c186 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
    c182:	2301      	movs	r3, #1
    c184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    c186:	697b      	ldr	r3, [r7, #20]
}
    c188:	0018      	movs	r0, r3
    c18a:	46bd      	mov	sp, r7
    c18c:	b006      	add	sp, #24
    c18e:	bd80      	pop	{r7, pc}
    c190:	20003bf0 	.word	0x20003bf0
    c194:	20003bcc 	.word	0x20003bcc
    c198:	20003b80 	.word	0x20003b80
    c19c:	20003b84 	.word	0x20003b84
    c1a0:	20003be0 	.word	0x20003be0
    c1a4:	0000c655 	.word	0x0000c655
    c1a8:	20003be8 	.word	0x20003be8
    c1ac:	0000ad6b 	.word	0x0000ad6b
    c1b0:	20003bd0 	.word	0x20003bd0
    c1b4:	20003af4 	.word	0x20003af4
    c1b8:	0000acbb 	.word	0x0000acbb
    c1bc:	20003af0 	.word	0x20003af0
    c1c0:	20003bd8 	.word	0x20003bd8
    c1c4:	0000fd57 	.word	0x0000fd57
    c1c8:	20003bdc 	.word	0x20003bdc

0000c1cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    c1cc:	b580      	push	{r7, lr}
    c1ce:	b084      	sub	sp, #16
    c1d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    c1d2:	4b35      	ldr	r3, [pc, #212]	; (c2a8 <vTaskSwitchContext+0xdc>)
    c1d4:	681b      	ldr	r3, [r3, #0]
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d003      	beq.n	c1e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    c1da:	4b34      	ldr	r3, [pc, #208]	; (c2ac <vTaskSwitchContext+0xe0>)
    c1dc:	2201      	movs	r2, #1
    c1de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c1e0:	e05d      	b.n	c29e <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
    c1e2:	4b32      	ldr	r3, [pc, #200]	; (c2ac <vTaskSwitchContext+0xe0>)
    c1e4:	2200      	movs	r2, #0
    c1e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    c1e8:	4b31      	ldr	r3, [pc, #196]	; (c2b0 <vTaskSwitchContext+0xe4>)
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c1ee:	60bb      	str	r3, [r7, #8]
    c1f0:	4b30      	ldr	r3, [pc, #192]	; (c2b4 <vTaskSwitchContext+0xe8>)
    c1f2:	607b      	str	r3, [r7, #4]
    c1f4:	68bb      	ldr	r3, [r7, #8]
    c1f6:	681a      	ldr	r2, [r3, #0]
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	429a      	cmp	r2, r3
    c1fc:	d111      	bne.n	c222 <vTaskSwitchContext+0x56>
    c1fe:	68bb      	ldr	r3, [r7, #8]
    c200:	3304      	adds	r3, #4
    c202:	681a      	ldr	r2, [r3, #0]
    c204:	687b      	ldr	r3, [r7, #4]
    c206:	429a      	cmp	r2, r3
    c208:	d10b      	bne.n	c222 <vTaskSwitchContext+0x56>
    c20a:	68bb      	ldr	r3, [r7, #8]
    c20c:	3308      	adds	r3, #8
    c20e:	681a      	ldr	r2, [r3, #0]
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	429a      	cmp	r2, r3
    c214:	d105      	bne.n	c222 <vTaskSwitchContext+0x56>
    c216:	68bb      	ldr	r3, [r7, #8]
    c218:	330c      	adds	r3, #12
    c21a:	681a      	ldr	r2, [r3, #0]
    c21c:	687b      	ldr	r3, [r7, #4]
    c21e:	429a      	cmp	r2, r3
    c220:	d008      	beq.n	c234 <vTaskSwitchContext+0x68>
    c222:	4b23      	ldr	r3, [pc, #140]	; (c2b0 <vTaskSwitchContext+0xe4>)
    c224:	681a      	ldr	r2, [r3, #0]
    c226:	4b22      	ldr	r3, [pc, #136]	; (c2b0 <vTaskSwitchContext+0xe4>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	3334      	adds	r3, #52	; 0x34
    c22c:	0019      	movs	r1, r3
    c22e:	0010      	movs	r0, r2
    c230:	4b21      	ldr	r3, [pc, #132]	; (c2b8 <vTaskSwitchContext+0xec>)
    c232:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    c234:	4b21      	ldr	r3, [pc, #132]	; (c2bc <vTaskSwitchContext+0xf0>)
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	60fb      	str	r3, [r7, #12]
    c23a:	e007      	b.n	c24c <vTaskSwitchContext+0x80>
    c23c:	68fb      	ldr	r3, [r7, #12]
    c23e:	2b00      	cmp	r3, #0
    c240:	d101      	bne.n	c246 <vTaskSwitchContext+0x7a>
    c242:	b672      	cpsid	i
    c244:	e7fe      	b.n	c244 <vTaskSwitchContext+0x78>
    c246:	68fb      	ldr	r3, [r7, #12]
    c248:	3b01      	subs	r3, #1
    c24a:	60fb      	str	r3, [r7, #12]
    c24c:	491c      	ldr	r1, [pc, #112]	; (c2c0 <vTaskSwitchContext+0xf4>)
    c24e:	68fa      	ldr	r2, [r7, #12]
    c250:	0013      	movs	r3, r2
    c252:	009b      	lsls	r3, r3, #2
    c254:	189b      	adds	r3, r3, r2
    c256:	009b      	lsls	r3, r3, #2
    c258:	585b      	ldr	r3, [r3, r1]
    c25a:	2b00      	cmp	r3, #0
    c25c:	d0ee      	beq.n	c23c <vTaskSwitchContext+0x70>
    c25e:	68fa      	ldr	r2, [r7, #12]
    c260:	0013      	movs	r3, r2
    c262:	009b      	lsls	r3, r3, #2
    c264:	189b      	adds	r3, r3, r2
    c266:	009b      	lsls	r3, r3, #2
    c268:	4a15      	ldr	r2, [pc, #84]	; (c2c0 <vTaskSwitchContext+0xf4>)
    c26a:	189b      	adds	r3, r3, r2
    c26c:	603b      	str	r3, [r7, #0]
    c26e:	683b      	ldr	r3, [r7, #0]
    c270:	685b      	ldr	r3, [r3, #4]
    c272:	685a      	ldr	r2, [r3, #4]
    c274:	683b      	ldr	r3, [r7, #0]
    c276:	605a      	str	r2, [r3, #4]
    c278:	683b      	ldr	r3, [r7, #0]
    c27a:	685a      	ldr	r2, [r3, #4]
    c27c:	683b      	ldr	r3, [r7, #0]
    c27e:	3308      	adds	r3, #8
    c280:	429a      	cmp	r2, r3
    c282:	d104      	bne.n	c28e <vTaskSwitchContext+0xc2>
    c284:	683b      	ldr	r3, [r7, #0]
    c286:	685b      	ldr	r3, [r3, #4]
    c288:	685a      	ldr	r2, [r3, #4]
    c28a:	683b      	ldr	r3, [r7, #0]
    c28c:	605a      	str	r2, [r3, #4]
    c28e:	683b      	ldr	r3, [r7, #0]
    c290:	685b      	ldr	r3, [r3, #4]
    c292:	68da      	ldr	r2, [r3, #12]
    c294:	4b06      	ldr	r3, [pc, #24]	; (c2b0 <vTaskSwitchContext+0xe4>)
    c296:	601a      	str	r2, [r3, #0]
    c298:	4b08      	ldr	r3, [pc, #32]	; (c2bc <vTaskSwitchContext+0xf0>)
    c29a:	68fa      	ldr	r2, [r7, #12]
    c29c:	601a      	str	r2, [r3, #0]
}
    c29e:	46c0      	nop			; (mov r8, r8)
    c2a0:	46bd      	mov	sp, r7
    c2a2:	b004      	add	sp, #16
    c2a4:	bd80      	pop	{r7, pc}
    c2a6:	46c0      	nop			; (mov r8, r8)
    c2a8:	20003bf0 	.word	0x20003bf0
    c2ac:	20003bdc 	.word	0x20003bdc
    c2b0:	20003af0 	.word	0x20003af0
    c2b4:	a5a5a5a5 	.word	0xa5a5a5a5
    c2b8:	0000fd61 	.word	0x0000fd61
    c2bc:	20003bd0 	.word	0x20003bd0
    c2c0:	20003af4 	.word	0x20003af4

0000c2c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b082      	sub	sp, #8
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	6078      	str	r0, [r7, #4]
    c2cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    c2ce:	687b      	ldr	r3, [r7, #4]
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d101      	bne.n	c2d8 <vTaskPlaceOnEventList+0x14>
    c2d4:	b672      	cpsid	i
    c2d6:	e7fe      	b.n	c2d6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c2d8:	4b08      	ldr	r3, [pc, #32]	; (c2fc <vTaskPlaceOnEventList+0x38>)
    c2da:	681b      	ldr	r3, [r3, #0]
    c2dc:	3318      	adds	r3, #24
    c2de:	001a      	movs	r2, r3
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	0011      	movs	r1, r2
    c2e4:	0018      	movs	r0, r3
    c2e6:	4b06      	ldr	r3, [pc, #24]	; (c300 <vTaskPlaceOnEventList+0x3c>)
    c2e8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c2ea:	683b      	ldr	r3, [r7, #0]
    c2ec:	2101      	movs	r1, #1
    c2ee:	0018      	movs	r0, r3
    c2f0:	4b04      	ldr	r3, [pc, #16]	; (c304 <vTaskPlaceOnEventList+0x40>)
    c2f2:	4798      	blx	r3
}
    c2f4:	46c0      	nop			; (mov r8, r8)
    c2f6:	46bd      	mov	sp, r7
    c2f8:	b002      	add	sp, #8
    c2fa:	bd80      	pop	{r7, pc}
    c2fc:	20003af0 	.word	0x20003af0
    c300:	0000acff 	.word	0x0000acff
    c304:	0000c795 	.word	0x0000c795

0000c308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    c308:	b580      	push	{r7, lr}
    c30a:	b084      	sub	sp, #16
    c30c:	af00      	add	r7, sp, #0
    c30e:	60f8      	str	r0, [r7, #12]
    c310:	60b9      	str	r1, [r7, #8]
    c312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    c314:	68fb      	ldr	r3, [r7, #12]
    c316:	2b00      	cmp	r3, #0
    c318:	d101      	bne.n	c31e <vTaskPlaceOnEventListRestricted+0x16>
    c31a:	b672      	cpsid	i
    c31c:	e7fe      	b.n	c31c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c31e:	4b0c      	ldr	r3, [pc, #48]	; (c350 <vTaskPlaceOnEventListRestricted+0x48>)
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	3318      	adds	r3, #24
    c324:	001a      	movs	r2, r3
    c326:	68fb      	ldr	r3, [r7, #12]
    c328:	0011      	movs	r1, r2
    c32a:	0018      	movs	r0, r3
    c32c:	4b09      	ldr	r3, [pc, #36]	; (c354 <vTaskPlaceOnEventListRestricted+0x4c>)
    c32e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	2b00      	cmp	r3, #0
    c334:	d002      	beq.n	c33c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    c336:	2301      	movs	r3, #1
    c338:	425b      	negs	r3, r3
    c33a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    c33c:	687a      	ldr	r2, [r7, #4]
    c33e:	68bb      	ldr	r3, [r7, #8]
    c340:	0011      	movs	r1, r2
    c342:	0018      	movs	r0, r3
    c344:	4b04      	ldr	r3, [pc, #16]	; (c358 <vTaskPlaceOnEventListRestricted+0x50>)
    c346:	4798      	blx	r3
	}
    c348:	46c0      	nop			; (mov r8, r8)
    c34a:	46bd      	mov	sp, r7
    c34c:	b004      	add	sp, #16
    c34e:	bd80      	pop	{r7, pc}
    c350:	20003af0 	.word	0x20003af0
    c354:	0000acbb 	.word	0x0000acbb
    c358:	0000c795 	.word	0x0000c795

0000c35c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    c35c:	b580      	push	{r7, lr}
    c35e:	b084      	sub	sp, #16
    c360:	af00      	add	r7, sp, #0
    c362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    c364:	687b      	ldr	r3, [r7, #4]
    c366:	68db      	ldr	r3, [r3, #12]
    c368:	68db      	ldr	r3, [r3, #12]
    c36a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    c36c:	68bb      	ldr	r3, [r7, #8]
    c36e:	2b00      	cmp	r3, #0
    c370:	d101      	bne.n	c376 <xTaskRemoveFromEventList+0x1a>
    c372:	b672      	cpsid	i
    c374:	e7fe      	b.n	c374 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    c376:	68bb      	ldr	r3, [r7, #8]
    c378:	3318      	adds	r3, #24
    c37a:	0018      	movs	r0, r3
    c37c:	4b1f      	ldr	r3, [pc, #124]	; (c3fc <xTaskRemoveFromEventList+0xa0>)
    c37e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c380:	4b1f      	ldr	r3, [pc, #124]	; (c400 <xTaskRemoveFromEventList+0xa4>)
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	2b00      	cmp	r3, #0
    c386:	d11d      	bne.n	c3c4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    c388:	68bb      	ldr	r3, [r7, #8]
    c38a:	3304      	adds	r3, #4
    c38c:	0018      	movs	r0, r3
    c38e:	4b1b      	ldr	r3, [pc, #108]	; (c3fc <xTaskRemoveFromEventList+0xa0>)
    c390:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    c392:	68bb      	ldr	r3, [r7, #8]
    c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c396:	4b1b      	ldr	r3, [pc, #108]	; (c404 <xTaskRemoveFromEventList+0xa8>)
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	429a      	cmp	r2, r3
    c39c:	d903      	bls.n	c3a6 <xTaskRemoveFromEventList+0x4a>
    c39e:	68bb      	ldr	r3, [r7, #8]
    c3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3a2:	4b18      	ldr	r3, [pc, #96]	; (c404 <xTaskRemoveFromEventList+0xa8>)
    c3a4:	601a      	str	r2, [r3, #0]
    c3a6:	68bb      	ldr	r3, [r7, #8]
    c3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3aa:	0013      	movs	r3, r2
    c3ac:	009b      	lsls	r3, r3, #2
    c3ae:	189b      	adds	r3, r3, r2
    c3b0:	009b      	lsls	r3, r3, #2
    c3b2:	4a15      	ldr	r2, [pc, #84]	; (c408 <xTaskRemoveFromEventList+0xac>)
    c3b4:	189a      	adds	r2, r3, r2
    c3b6:	68bb      	ldr	r3, [r7, #8]
    c3b8:	3304      	adds	r3, #4
    c3ba:	0019      	movs	r1, r3
    c3bc:	0010      	movs	r0, r2
    c3be:	4b13      	ldr	r3, [pc, #76]	; (c40c <xTaskRemoveFromEventList+0xb0>)
    c3c0:	4798      	blx	r3
    c3c2:	e007      	b.n	c3d4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    c3c4:	68bb      	ldr	r3, [r7, #8]
    c3c6:	3318      	adds	r3, #24
    c3c8:	001a      	movs	r2, r3
    c3ca:	4b11      	ldr	r3, [pc, #68]	; (c410 <xTaskRemoveFromEventList+0xb4>)
    c3cc:	0011      	movs	r1, r2
    c3ce:	0018      	movs	r0, r3
    c3d0:	4b0e      	ldr	r3, [pc, #56]	; (c40c <xTaskRemoveFromEventList+0xb0>)
    c3d2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    c3d4:	68bb      	ldr	r3, [r7, #8]
    c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c3d8:	4b0e      	ldr	r3, [pc, #56]	; (c414 <xTaskRemoveFromEventList+0xb8>)
    c3da:	681b      	ldr	r3, [r3, #0]
    c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c3de:	429a      	cmp	r2, r3
    c3e0:	d905      	bls.n	c3ee <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    c3e2:	2301      	movs	r3, #1
    c3e4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    c3e6:	4b0c      	ldr	r3, [pc, #48]	; (c418 <xTaskRemoveFromEventList+0xbc>)
    c3e8:	2201      	movs	r2, #1
    c3ea:	601a      	str	r2, [r3, #0]
    c3ec:	e001      	b.n	c3f2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    c3ee:	2300      	movs	r3, #0
    c3f0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    c3f2:	68fb      	ldr	r3, [r7, #12]
}
    c3f4:	0018      	movs	r0, r3
    c3f6:	46bd      	mov	sp, r7
    c3f8:	b004      	add	sp, #16
    c3fa:	bd80      	pop	{r7, pc}
    c3fc:	0000ad6b 	.word	0x0000ad6b
    c400:	20003bf0 	.word	0x20003bf0
    c404:	20003bd0 	.word	0x20003bd0
    c408:	20003af4 	.word	0x20003af4
    c40c:	0000acbb 	.word	0x0000acbb
    c410:	20003b88 	.word	0x20003b88
    c414:	20003af0 	.word	0x20003af0
    c418:	20003bdc 	.word	0x20003bdc

0000c41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    c41c:	b580      	push	{r7, lr}
    c41e:	b082      	sub	sp, #8
    c420:	af00      	add	r7, sp, #0
    c422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    c424:	4b05      	ldr	r3, [pc, #20]	; (c43c <vTaskInternalSetTimeOutState+0x20>)
    c426:	681a      	ldr	r2, [r3, #0]
    c428:	687b      	ldr	r3, [r7, #4]
    c42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    c42c:	4b04      	ldr	r3, [pc, #16]	; (c440 <vTaskInternalSetTimeOutState+0x24>)
    c42e:	681a      	ldr	r2, [r3, #0]
    c430:	687b      	ldr	r3, [r7, #4]
    c432:	605a      	str	r2, [r3, #4]
}
    c434:	46c0      	nop			; (mov r8, r8)
    c436:	46bd      	mov	sp, r7
    c438:	b002      	add	sp, #8
    c43a:	bd80      	pop	{r7, pc}
    c43c:	20003be0 	.word	0x20003be0
    c440:	20003bcc 	.word	0x20003bcc

0000c444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    c444:	b580      	push	{r7, lr}
    c446:	b086      	sub	sp, #24
    c448:	af00      	add	r7, sp, #0
    c44a:	6078      	str	r0, [r7, #4]
    c44c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    c44e:	687b      	ldr	r3, [r7, #4]
    c450:	2b00      	cmp	r3, #0
    c452:	d101      	bne.n	c458 <xTaskCheckForTimeOut+0x14>
    c454:	b672      	cpsid	i
    c456:	e7fe      	b.n	c456 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    c458:	683b      	ldr	r3, [r7, #0]
    c45a:	2b00      	cmp	r3, #0
    c45c:	d101      	bne.n	c462 <xTaskCheckForTimeOut+0x1e>
    c45e:	b672      	cpsid	i
    c460:	e7fe      	b.n	c460 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    c462:	4b1e      	ldr	r3, [pc, #120]	; (c4dc <xTaskCheckForTimeOut+0x98>)
    c464:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    c466:	4b1e      	ldr	r3, [pc, #120]	; (c4e0 <xTaskCheckForTimeOut+0x9c>)
    c468:	681b      	ldr	r3, [r3, #0]
    c46a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    c46c:	687b      	ldr	r3, [r7, #4]
    c46e:	685b      	ldr	r3, [r3, #4]
    c470:	693a      	ldr	r2, [r7, #16]
    c472:	1ad3      	subs	r3, r2, r3
    c474:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    c476:	683b      	ldr	r3, [r7, #0]
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	3301      	adds	r3, #1
    c47c:	d102      	bne.n	c484 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    c47e:	2300      	movs	r3, #0
    c480:	617b      	str	r3, [r7, #20]
    c482:	e024      	b.n	c4ce <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    c484:	687b      	ldr	r3, [r7, #4]
    c486:	681a      	ldr	r2, [r3, #0]
    c488:	4b16      	ldr	r3, [pc, #88]	; (c4e4 <xTaskCheckForTimeOut+0xa0>)
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	429a      	cmp	r2, r3
    c48e:	d007      	beq.n	c4a0 <xTaskCheckForTimeOut+0x5c>
    c490:	687b      	ldr	r3, [r7, #4]
    c492:	685a      	ldr	r2, [r3, #4]
    c494:	693b      	ldr	r3, [r7, #16]
    c496:	429a      	cmp	r2, r3
    c498:	d802      	bhi.n	c4a0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    c49a:	2301      	movs	r3, #1
    c49c:	617b      	str	r3, [r7, #20]
    c49e:	e016      	b.n	c4ce <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    c4a0:	683b      	ldr	r3, [r7, #0]
    c4a2:	681a      	ldr	r2, [r3, #0]
    c4a4:	68fb      	ldr	r3, [r7, #12]
    c4a6:	429a      	cmp	r2, r3
    c4a8:	d90c      	bls.n	c4c4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    c4aa:	683b      	ldr	r3, [r7, #0]
    c4ac:	681a      	ldr	r2, [r3, #0]
    c4ae:	68fb      	ldr	r3, [r7, #12]
    c4b0:	1ad2      	subs	r2, r2, r3
    c4b2:	683b      	ldr	r3, [r7, #0]
    c4b4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    c4b6:	687b      	ldr	r3, [r7, #4]
    c4b8:	0018      	movs	r0, r3
    c4ba:	4b0b      	ldr	r3, [pc, #44]	; (c4e8 <xTaskCheckForTimeOut+0xa4>)
    c4bc:	4798      	blx	r3
			xReturn = pdFALSE;
    c4be:	2300      	movs	r3, #0
    c4c0:	617b      	str	r3, [r7, #20]
    c4c2:	e004      	b.n	c4ce <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    c4c4:	683b      	ldr	r3, [r7, #0]
    c4c6:	2200      	movs	r2, #0
    c4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    c4ca:	2301      	movs	r3, #1
    c4cc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    c4ce:	4b07      	ldr	r3, [pc, #28]	; (c4ec <xTaskCheckForTimeOut+0xa8>)
    c4d0:	4798      	blx	r3

	return xReturn;
    c4d2:	697b      	ldr	r3, [r7, #20]
}
    c4d4:	0018      	movs	r0, r3
    c4d6:	46bd      	mov	sp, r7
    c4d8:	b006      	add	sp, #24
    c4da:	bd80      	pop	{r7, pc}
    c4dc:	00007321 	.word	0x00007321
    c4e0:	20003bcc 	.word	0x20003bcc
    c4e4:	20003be0 	.word	0x20003be0
    c4e8:	0000c41d 	.word	0x0000c41d
    c4ec:	00007345 	.word	0x00007345

0000c4f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    c4f0:	b580      	push	{r7, lr}
    c4f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    c4f4:	4b02      	ldr	r3, [pc, #8]	; (c500 <vTaskMissedYield+0x10>)
    c4f6:	2201      	movs	r2, #1
    c4f8:	601a      	str	r2, [r3, #0]
}
    c4fa:	46c0      	nop			; (mov r8, r8)
    c4fc:	46bd      	mov	sp, r7
    c4fe:	bd80      	pop	{r7, pc}
    c500:	20003bdc 	.word	0x20003bdc

0000c504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    c504:	b580      	push	{r7, lr}
    c506:	b082      	sub	sp, #8
    c508:	af00      	add	r7, sp, #0
    c50a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    c50c:	4b05      	ldr	r3, [pc, #20]	; (c524 <prvIdleTask+0x20>)
    c50e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    c510:	4b05      	ldr	r3, [pc, #20]	; (c528 <prvIdleTask+0x24>)
    c512:	681b      	ldr	r3, [r3, #0]
    c514:	2b01      	cmp	r3, #1
    c516:	d901      	bls.n	c51c <prvIdleTask+0x18>
			{
				taskYIELD();
    c518:	4b04      	ldr	r3, [pc, #16]	; (c52c <prvIdleTask+0x28>)
    c51a:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    c51c:	4b04      	ldr	r3, [pc, #16]	; (c530 <prvIdleTask+0x2c>)
    c51e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    c520:	e7f4      	b.n	c50c <prvIdleTask+0x8>
    c522:	46c0      	nop			; (mov r8, r8)
    c524:	0000c5c1 	.word	0x0000c5c1
    c528:	20003af4 	.word	0x20003af4
    c52c:	00007301 	.word	0x00007301
    c530:	0000fd4d 	.word	0x0000fd4d

0000c534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    c534:	b580      	push	{r7, lr}
    c536:	b082      	sub	sp, #8
    c538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c53a:	2300      	movs	r3, #0
    c53c:	607b      	str	r3, [r7, #4]
    c53e:	e00c      	b.n	c55a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    c540:	687a      	ldr	r2, [r7, #4]
    c542:	0013      	movs	r3, r2
    c544:	009b      	lsls	r3, r3, #2
    c546:	189b      	adds	r3, r3, r2
    c548:	009b      	lsls	r3, r3, #2
    c54a:	4a14      	ldr	r2, [pc, #80]	; (c59c <prvInitialiseTaskLists+0x68>)
    c54c:	189b      	adds	r3, r3, r2
    c54e:	0018      	movs	r0, r3
    c550:	4b13      	ldr	r3, [pc, #76]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c552:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c554:	687b      	ldr	r3, [r7, #4]
    c556:	3301      	adds	r3, #1
    c558:	607b      	str	r3, [r7, #4]
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	2b04      	cmp	r3, #4
    c55e:	d9ef      	bls.n	c540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    c560:	4b10      	ldr	r3, [pc, #64]	; (c5a4 <prvInitialiseTaskLists+0x70>)
    c562:	0018      	movs	r0, r3
    c564:	4b0e      	ldr	r3, [pc, #56]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c566:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    c568:	4b0f      	ldr	r3, [pc, #60]	; (c5a8 <prvInitialiseTaskLists+0x74>)
    c56a:	0018      	movs	r0, r3
    c56c:	4b0c      	ldr	r3, [pc, #48]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c56e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    c570:	4b0e      	ldr	r3, [pc, #56]	; (c5ac <prvInitialiseTaskLists+0x78>)
    c572:	0018      	movs	r0, r3
    c574:	4b0a      	ldr	r3, [pc, #40]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c576:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    c578:	4b0d      	ldr	r3, [pc, #52]	; (c5b0 <prvInitialiseTaskLists+0x7c>)
    c57a:	0018      	movs	r0, r3
    c57c:	4b08      	ldr	r3, [pc, #32]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c57e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    c580:	4b0c      	ldr	r3, [pc, #48]	; (c5b4 <prvInitialiseTaskLists+0x80>)
    c582:	0018      	movs	r0, r3
    c584:	4b06      	ldr	r3, [pc, #24]	; (c5a0 <prvInitialiseTaskLists+0x6c>)
    c586:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    c588:	4b0b      	ldr	r3, [pc, #44]	; (c5b8 <prvInitialiseTaskLists+0x84>)
    c58a:	4a06      	ldr	r2, [pc, #24]	; (c5a4 <prvInitialiseTaskLists+0x70>)
    c58c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    c58e:	4b0b      	ldr	r3, [pc, #44]	; (c5bc <prvInitialiseTaskLists+0x88>)
    c590:	4a05      	ldr	r2, [pc, #20]	; (c5a8 <prvInitialiseTaskLists+0x74>)
    c592:	601a      	str	r2, [r3, #0]
}
    c594:	46c0      	nop			; (mov r8, r8)
    c596:	46bd      	mov	sp, r7
    c598:	b002      	add	sp, #8
    c59a:	bd80      	pop	{r7, pc}
    c59c:	20003af4 	.word	0x20003af4
    c5a0:	0000ac69 	.word	0x0000ac69
    c5a4:	20003b58 	.word	0x20003b58
    c5a8:	20003b6c 	.word	0x20003b6c
    c5ac:	20003b88 	.word	0x20003b88
    c5b0:	20003b9c 	.word	0x20003b9c
    c5b4:	20003bb4 	.word	0x20003bb4
    c5b8:	20003b80 	.word	0x20003b80
    c5bc:	20003b84 	.word	0x20003b84

0000c5c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    c5c0:	b580      	push	{r7, lr}
    c5c2:	b082      	sub	sp, #8
    c5c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c5c6:	e01a      	b.n	c5fe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    c5c8:	4b11      	ldr	r3, [pc, #68]	; (c610 <prvCheckTasksWaitingTermination+0x50>)
    c5ca:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    c5cc:	4b11      	ldr	r3, [pc, #68]	; (c614 <prvCheckTasksWaitingTermination+0x54>)
    c5ce:	68db      	ldr	r3, [r3, #12]
    c5d0:	68db      	ldr	r3, [r3, #12]
    c5d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c5d4:	687b      	ldr	r3, [r7, #4]
    c5d6:	3304      	adds	r3, #4
    c5d8:	0018      	movs	r0, r3
    c5da:	4b0f      	ldr	r3, [pc, #60]	; (c618 <prvCheckTasksWaitingTermination+0x58>)
    c5dc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    c5de:	4b0f      	ldr	r3, [pc, #60]	; (c61c <prvCheckTasksWaitingTermination+0x5c>)
    c5e0:	681b      	ldr	r3, [r3, #0]
    c5e2:	1e5a      	subs	r2, r3, #1
    c5e4:	4b0d      	ldr	r3, [pc, #52]	; (c61c <prvCheckTasksWaitingTermination+0x5c>)
    c5e6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    c5e8:	4b0d      	ldr	r3, [pc, #52]	; (c620 <prvCheckTasksWaitingTermination+0x60>)
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	1e5a      	subs	r2, r3, #1
    c5ee:	4b0c      	ldr	r3, [pc, #48]	; (c620 <prvCheckTasksWaitingTermination+0x60>)
    c5f0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    c5f2:	4b0c      	ldr	r3, [pc, #48]	; (c624 <prvCheckTasksWaitingTermination+0x64>)
    c5f4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    c5f6:	687b      	ldr	r3, [r7, #4]
    c5f8:	0018      	movs	r0, r3
    c5fa:	4b0b      	ldr	r3, [pc, #44]	; (c628 <prvCheckTasksWaitingTermination+0x68>)
    c5fc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c5fe:	4b08      	ldr	r3, [pc, #32]	; (c620 <prvCheckTasksWaitingTermination+0x60>)
    c600:	681b      	ldr	r3, [r3, #0]
    c602:	2b00      	cmp	r3, #0
    c604:	d1e0      	bne.n	c5c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	46bd      	mov	sp, r7
    c60a:	b002      	add	sp, #8
    c60c:	bd80      	pop	{r7, pc}
    c60e:	46c0      	nop			; (mov r8, r8)
    c610:	00007321 	.word	0x00007321
    c614:	20003b9c 	.word	0x20003b9c
    c618:	0000ad6b 	.word	0x0000ad6b
    c61c:	20003bc8 	.word	0x20003bc8
    c620:	20003bb0 	.word	0x20003bb0
    c624:	00007345 	.word	0x00007345
    c628:	0000c62d 	.word	0x0000c62d

0000c62c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    c62c:	b580      	push	{r7, lr}
    c62e:	b082      	sub	sp, #8
    c630:	af00      	add	r7, sp, #0
    c632:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c638:	0018      	movs	r0, r3
    c63a:	4b05      	ldr	r3, [pc, #20]	; (c650 <prvDeleteTCB+0x24>)
    c63c:	4798      	blx	r3
			vPortFree( pxTCB );
    c63e:	687b      	ldr	r3, [r7, #4]
    c640:	0018      	movs	r0, r3
    c642:	4b03      	ldr	r3, [pc, #12]	; (c650 <prvDeleteTCB+0x24>)
    c644:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    c646:	46c0      	nop			; (mov r8, r8)
    c648:	46bd      	mov	sp, r7
    c64a:	b002      	add	sp, #8
    c64c:	bd80      	pop	{r7, pc}
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	000075b5 	.word	0x000075b5

0000c654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    c654:	b580      	push	{r7, lr}
    c656:	b082      	sub	sp, #8
    c658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c65a:	4b0e      	ldr	r3, [pc, #56]	; (c694 <prvResetNextTaskUnblockTime+0x40>)
    c65c:	681b      	ldr	r3, [r3, #0]
    c65e:	681b      	ldr	r3, [r3, #0]
    c660:	2b00      	cmp	r3, #0
    c662:	d101      	bne.n	c668 <prvResetNextTaskUnblockTime+0x14>
    c664:	2301      	movs	r3, #1
    c666:	e000      	b.n	c66a <prvResetNextTaskUnblockTime+0x16>
    c668:	2300      	movs	r3, #0
    c66a:	2b00      	cmp	r3, #0
    c66c:	d004      	beq.n	c678 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    c66e:	4b0a      	ldr	r3, [pc, #40]	; (c698 <prvResetNextTaskUnblockTime+0x44>)
    c670:	2201      	movs	r2, #1
    c672:	4252      	negs	r2, r2
    c674:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    c676:	e008      	b.n	c68a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c678:	4b06      	ldr	r3, [pc, #24]	; (c694 <prvResetNextTaskUnblockTime+0x40>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	68db      	ldr	r3, [r3, #12]
    c67e:	68db      	ldr	r3, [r3, #12]
    c680:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    c682:	687b      	ldr	r3, [r7, #4]
    c684:	685a      	ldr	r2, [r3, #4]
    c686:	4b04      	ldr	r3, [pc, #16]	; (c698 <prvResetNextTaskUnblockTime+0x44>)
    c688:	601a      	str	r2, [r3, #0]
}
    c68a:	46c0      	nop			; (mov r8, r8)
    c68c:	46bd      	mov	sp, r7
    c68e:	b002      	add	sp, #8
    c690:	bd80      	pop	{r7, pc}
    c692:	46c0      	nop			; (mov r8, r8)
    c694:	20003b80 	.word	0x20003b80
    c698:	20003be8 	.word	0x20003be8

0000c69c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    c69c:	b580      	push	{r7, lr}
    c69e:	b082      	sub	sp, #8
    c6a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    c6a2:	4b0a      	ldr	r3, [pc, #40]	; (c6cc <xTaskGetSchedulerState+0x30>)
    c6a4:	681b      	ldr	r3, [r3, #0]
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	d102      	bne.n	c6b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    c6aa:	2301      	movs	r3, #1
    c6ac:	607b      	str	r3, [r7, #4]
    c6ae:	e008      	b.n	c6c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c6b0:	4b07      	ldr	r3, [pc, #28]	; (c6d0 <xTaskGetSchedulerState+0x34>)
    c6b2:	681b      	ldr	r3, [r3, #0]
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d102      	bne.n	c6be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    c6b8:	2302      	movs	r3, #2
    c6ba:	607b      	str	r3, [r7, #4]
    c6bc:	e001      	b.n	c6c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    c6be:	2300      	movs	r3, #0
    c6c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    c6c2:	687b      	ldr	r3, [r7, #4]
	}
    c6c4:	0018      	movs	r0, r3
    c6c6:	46bd      	mov	sp, r7
    c6c8:	b002      	add	sp, #8
    c6ca:	bd80      	pop	{r7, pc}
    c6cc:	20003bd4 	.word	0x20003bd4
    c6d0:	20003bf0 	.word	0x20003bf0

0000c6d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b084      	sub	sp, #16
    c6d8:	af00      	add	r7, sp, #0
    c6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c6dc:	687b      	ldr	r3, [r7, #4]
    c6de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    c6e0:	2300      	movs	r3, #0
    c6e2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	d044      	beq.n	c774 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    c6ea:	4b25      	ldr	r3, [pc, #148]	; (c780 <xTaskPriorityDisinherit+0xac>)
    c6ec:	681b      	ldr	r3, [r3, #0]
    c6ee:	68ba      	ldr	r2, [r7, #8]
    c6f0:	429a      	cmp	r2, r3
    c6f2:	d001      	beq.n	c6f8 <xTaskPriorityDisinherit+0x24>
    c6f4:	b672      	cpsid	i
    c6f6:	e7fe      	b.n	c6f6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    c6f8:	68bb      	ldr	r3, [r7, #8]
    c6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	d101      	bne.n	c704 <xTaskPriorityDisinherit+0x30>
    c700:	b672      	cpsid	i
    c702:	e7fe      	b.n	c702 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    c704:	68bb      	ldr	r3, [r7, #8]
    c706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c708:	1e5a      	subs	r2, r3, #1
    c70a:	68bb      	ldr	r3, [r7, #8]
    c70c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    c70e:	68bb      	ldr	r3, [r7, #8]
    c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c712:	68bb      	ldr	r3, [r7, #8]
    c714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c716:	429a      	cmp	r2, r3
    c718:	d02c      	beq.n	c774 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c71a:	68bb      	ldr	r3, [r7, #8]
    c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c71e:	2b00      	cmp	r3, #0
    c720:	d128      	bne.n	c774 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c722:	68bb      	ldr	r3, [r7, #8]
    c724:	3304      	adds	r3, #4
    c726:	0018      	movs	r0, r3
    c728:	4b16      	ldr	r3, [pc, #88]	; (c784 <xTaskPriorityDisinherit+0xb0>)
    c72a:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c72c:	68bb      	ldr	r3, [r7, #8]
    c72e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c730:	68bb      	ldr	r3, [r7, #8]
    c732:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c734:	68bb      	ldr	r3, [r7, #8]
    c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c738:	2205      	movs	r2, #5
    c73a:	1ad2      	subs	r2, r2, r3
    c73c:	68bb      	ldr	r3, [r7, #8]
    c73e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    c740:	68bb      	ldr	r3, [r7, #8]
    c742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c744:	4b10      	ldr	r3, [pc, #64]	; (c788 <xTaskPriorityDisinherit+0xb4>)
    c746:	681b      	ldr	r3, [r3, #0]
    c748:	429a      	cmp	r2, r3
    c74a:	d903      	bls.n	c754 <xTaskPriorityDisinherit+0x80>
    c74c:	68bb      	ldr	r3, [r7, #8]
    c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c750:	4b0d      	ldr	r3, [pc, #52]	; (c788 <xTaskPriorityDisinherit+0xb4>)
    c752:	601a      	str	r2, [r3, #0]
    c754:	68bb      	ldr	r3, [r7, #8]
    c756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c758:	0013      	movs	r3, r2
    c75a:	009b      	lsls	r3, r3, #2
    c75c:	189b      	adds	r3, r3, r2
    c75e:	009b      	lsls	r3, r3, #2
    c760:	4a0a      	ldr	r2, [pc, #40]	; (c78c <xTaskPriorityDisinherit+0xb8>)
    c762:	189a      	adds	r2, r3, r2
    c764:	68bb      	ldr	r3, [r7, #8]
    c766:	3304      	adds	r3, #4
    c768:	0019      	movs	r1, r3
    c76a:	0010      	movs	r0, r2
    c76c:	4b08      	ldr	r3, [pc, #32]	; (c790 <xTaskPriorityDisinherit+0xbc>)
    c76e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c770:	2301      	movs	r3, #1
    c772:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c774:	68fb      	ldr	r3, [r7, #12]
	}
    c776:	0018      	movs	r0, r3
    c778:	46bd      	mov	sp, r7
    c77a:	b004      	add	sp, #16
    c77c:	bd80      	pop	{r7, pc}
    c77e:	46c0      	nop			; (mov r8, r8)
    c780:	20003af0 	.word	0x20003af0
    c784:	0000ad6b 	.word	0x0000ad6b
    c788:	20003bd0 	.word	0x20003bd0
    c78c:	20003af4 	.word	0x20003af4
    c790:	0000acbb 	.word	0x0000acbb

0000c794 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c794:	b580      	push	{r7, lr}
    c796:	b084      	sub	sp, #16
    c798:	af00      	add	r7, sp, #0
    c79a:	6078      	str	r0, [r7, #4]
    c79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c79e:	4b21      	ldr	r3, [pc, #132]	; (c824 <prvAddCurrentTaskToDelayedList+0x90>)
    c7a0:	681b      	ldr	r3, [r3, #0]
    c7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c7a4:	4b20      	ldr	r3, [pc, #128]	; (c828 <prvAddCurrentTaskToDelayedList+0x94>)
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	3304      	adds	r3, #4
    c7aa:	0018      	movs	r0, r3
    c7ac:	4b1f      	ldr	r3, [pc, #124]	; (c82c <prvAddCurrentTaskToDelayedList+0x98>)
    c7ae:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	3301      	adds	r3, #1
    c7b4:	d10b      	bne.n	c7ce <prvAddCurrentTaskToDelayedList+0x3a>
    c7b6:	683b      	ldr	r3, [r7, #0]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d008      	beq.n	c7ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c7bc:	4b1a      	ldr	r3, [pc, #104]	; (c828 <prvAddCurrentTaskToDelayedList+0x94>)
    c7be:	681b      	ldr	r3, [r3, #0]
    c7c0:	1d1a      	adds	r2, r3, #4
    c7c2:	4b1b      	ldr	r3, [pc, #108]	; (c830 <prvAddCurrentTaskToDelayedList+0x9c>)
    c7c4:	0011      	movs	r1, r2
    c7c6:	0018      	movs	r0, r3
    c7c8:	4b1a      	ldr	r3, [pc, #104]	; (c834 <prvAddCurrentTaskToDelayedList+0xa0>)
    c7ca:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c7cc:	e026      	b.n	c81c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    c7ce:	68fa      	ldr	r2, [r7, #12]
    c7d0:	687b      	ldr	r3, [r7, #4]
    c7d2:	18d3      	adds	r3, r2, r3
    c7d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c7d6:	4b14      	ldr	r3, [pc, #80]	; (c828 <prvAddCurrentTaskToDelayedList+0x94>)
    c7d8:	681b      	ldr	r3, [r3, #0]
    c7da:	68ba      	ldr	r2, [r7, #8]
    c7dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    c7de:	68ba      	ldr	r2, [r7, #8]
    c7e0:	68fb      	ldr	r3, [r7, #12]
    c7e2:	429a      	cmp	r2, r3
    c7e4:	d209      	bcs.n	c7fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c7e6:	4b14      	ldr	r3, [pc, #80]	; (c838 <prvAddCurrentTaskToDelayedList+0xa4>)
    c7e8:	681a      	ldr	r2, [r3, #0]
    c7ea:	4b0f      	ldr	r3, [pc, #60]	; (c828 <prvAddCurrentTaskToDelayedList+0x94>)
    c7ec:	681b      	ldr	r3, [r3, #0]
    c7ee:	3304      	adds	r3, #4
    c7f0:	0019      	movs	r1, r3
    c7f2:	0010      	movs	r0, r2
    c7f4:	4b11      	ldr	r3, [pc, #68]	; (c83c <prvAddCurrentTaskToDelayedList+0xa8>)
    c7f6:	4798      	blx	r3
}
    c7f8:	e010      	b.n	c81c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c7fa:	4b11      	ldr	r3, [pc, #68]	; (c840 <prvAddCurrentTaskToDelayedList+0xac>)
    c7fc:	681a      	ldr	r2, [r3, #0]
    c7fe:	4b0a      	ldr	r3, [pc, #40]	; (c828 <prvAddCurrentTaskToDelayedList+0x94>)
    c800:	681b      	ldr	r3, [r3, #0]
    c802:	3304      	adds	r3, #4
    c804:	0019      	movs	r1, r3
    c806:	0010      	movs	r0, r2
    c808:	4b0c      	ldr	r3, [pc, #48]	; (c83c <prvAddCurrentTaskToDelayedList+0xa8>)
    c80a:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    c80c:	4b0d      	ldr	r3, [pc, #52]	; (c844 <prvAddCurrentTaskToDelayedList+0xb0>)
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	68ba      	ldr	r2, [r7, #8]
    c812:	429a      	cmp	r2, r3
    c814:	d202      	bcs.n	c81c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    c816:	4b0b      	ldr	r3, [pc, #44]	; (c844 <prvAddCurrentTaskToDelayedList+0xb0>)
    c818:	68ba      	ldr	r2, [r7, #8]
    c81a:	601a      	str	r2, [r3, #0]
}
    c81c:	46c0      	nop			; (mov r8, r8)
    c81e:	46bd      	mov	sp, r7
    c820:	b004      	add	sp, #16
    c822:	bd80      	pop	{r7, pc}
    c824:	20003bcc 	.word	0x20003bcc
    c828:	20003af0 	.word	0x20003af0
    c82c:	0000ad6b 	.word	0x0000ad6b
    c830:	20003bb4 	.word	0x20003bb4
    c834:	0000acbb 	.word	0x0000acbb
    c838:	20003b84 	.word	0x20003b84
    c83c:	0000acff 	.word	0x0000acff
    c840:	20003b80 	.word	0x20003b80
    c844:	20003be8 	.word	0x20003be8

0000c848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    c848:	b590      	push	{r4, r7, lr}
    c84a:	b085      	sub	sp, #20
    c84c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    c84e:	2300      	movs	r3, #0
    c850:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    c852:	4b0e      	ldr	r3, [pc, #56]	; (c88c <xTimerCreateTimerTask+0x44>)
    c854:	4798      	blx	r3

	if( xTimerQueue != NULL )
    c856:	4b0e      	ldr	r3, [pc, #56]	; (c890 <xTimerCreateTimerTask+0x48>)
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	2b00      	cmp	r3, #0
    c85c:	d00b      	beq.n	c876 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    c85e:	4a0d      	ldr	r2, [pc, #52]	; (c894 <xTimerCreateTimerTask+0x4c>)
    c860:	490d      	ldr	r1, [pc, #52]	; (c898 <xTimerCreateTimerTask+0x50>)
    c862:	480e      	ldr	r0, [pc, #56]	; (c89c <xTimerCreateTimerTask+0x54>)
    c864:	4b0e      	ldr	r3, [pc, #56]	; (c8a0 <xTimerCreateTimerTask+0x58>)
    c866:	9301      	str	r3, [sp, #4]
    c868:	2304      	movs	r3, #4
    c86a:	9300      	str	r3, [sp, #0]
    c86c:	2300      	movs	r3, #0
    c86e:	4c0d      	ldr	r4, [pc, #52]	; (c8a4 <xTimerCreateTimerTask+0x5c>)
    c870:	47a0      	blx	r4
    c872:	0003      	movs	r3, r0
    c874:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    c876:	687b      	ldr	r3, [r7, #4]
    c878:	2b00      	cmp	r3, #0
    c87a:	d101      	bne.n	c880 <xTimerCreateTimerTask+0x38>
    c87c:	b672      	cpsid	i
    c87e:	e7fe      	b.n	c87e <xTimerCreateTimerTask+0x36>
	return xReturn;
    c880:	687b      	ldr	r3, [r7, #4]
}
    c882:	0018      	movs	r0, r3
    c884:	46bd      	mov	sp, r7
    c886:	b003      	add	sp, #12
    c888:	bd90      	pop	{r4, r7, pc}
    c88a:	46c0      	nop			; (mov r8, r8)
    c88c:	0000ce5d 	.word	0x0000ce5d
    c890:	20003c24 	.word	0x20003c24
    c894:	0000028a 	.word	0x0000028a
    c898:	00013aa4 	.word	0x00013aa4
    c89c:	0000ca71 	.word	0x0000ca71
    c8a0:	20003c28 	.word	0x20003c28
    c8a4:	0000b7d5 	.word	0x0000b7d5

0000c8a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    c8a8:	b590      	push	{r4, r7, lr}
    c8aa:	b089      	sub	sp, #36	; 0x24
    c8ac:	af02      	add	r7, sp, #8
    c8ae:	60f8      	str	r0, [r7, #12]
    c8b0:	60b9      	str	r1, [r7, #8]
    c8b2:	607a      	str	r2, [r7, #4]
    c8b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    c8b6:	202c      	movs	r0, #44	; 0x2c
    c8b8:	4b0b      	ldr	r3, [pc, #44]	; (c8e8 <xTimerCreate+0x40>)
    c8ba:	4798      	blx	r3
    c8bc:	0003      	movs	r3, r0
    c8be:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    c8c0:	697b      	ldr	r3, [r7, #20]
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d00a      	beq.n	c8dc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    c8c6:	683c      	ldr	r4, [r7, #0]
    c8c8:	687a      	ldr	r2, [r7, #4]
    c8ca:	68b9      	ldr	r1, [r7, #8]
    c8cc:	68f8      	ldr	r0, [r7, #12]
    c8ce:	697b      	ldr	r3, [r7, #20]
    c8d0:	9301      	str	r3, [sp, #4]
    c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8d4:	9300      	str	r3, [sp, #0]
    c8d6:	0023      	movs	r3, r4
    c8d8:	4c04      	ldr	r4, [pc, #16]	; (c8ec <xTimerCreate+0x44>)
    c8da:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    c8dc:	697b      	ldr	r3, [r7, #20]
	}
    c8de:	0018      	movs	r0, r3
    c8e0:	46bd      	mov	sp, r7
    c8e2:	b007      	add	sp, #28
    c8e4:	bd90      	pop	{r4, r7, pc}
    c8e6:	46c0      	nop			; (mov r8, r8)
    c8e8:	0000744d 	.word	0x0000744d
    c8ec:	0000c8f1 	.word	0x0000c8f1

0000c8f0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    c8f0:	b580      	push	{r7, lr}
    c8f2:	b084      	sub	sp, #16
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	60f8      	str	r0, [r7, #12]
    c8f8:	60b9      	str	r1, [r7, #8]
    c8fa:	607a      	str	r2, [r7, #4]
    c8fc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    c8fe:	68bb      	ldr	r3, [r7, #8]
    c900:	2b00      	cmp	r3, #0
    c902:	d101      	bne.n	c908 <prvInitialiseNewTimer+0x18>
    c904:	b672      	cpsid	i
    c906:	e7fe      	b.n	c906 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    c908:	69fb      	ldr	r3, [r7, #28]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d015      	beq.n	c93a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    c90e:	4b0d      	ldr	r3, [pc, #52]	; (c944 <prvInitialiseNewTimer+0x54>)
    c910:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    c912:	69fb      	ldr	r3, [r7, #28]
    c914:	68fa      	ldr	r2, [r7, #12]
    c916:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    c918:	69fb      	ldr	r3, [r7, #28]
    c91a:	68ba      	ldr	r2, [r7, #8]
    c91c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    c91e:	69fb      	ldr	r3, [r7, #28]
    c920:	687a      	ldr	r2, [r7, #4]
    c922:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    c924:	69fb      	ldr	r3, [r7, #28]
    c926:	683a      	ldr	r2, [r7, #0]
    c928:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    c92a:	69fb      	ldr	r3, [r7, #28]
    c92c:	69ba      	ldr	r2, [r7, #24]
    c92e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    c930:	69fb      	ldr	r3, [r7, #28]
    c932:	3304      	adds	r3, #4
    c934:	0018      	movs	r0, r3
    c936:	4b04      	ldr	r3, [pc, #16]	; (c948 <prvInitialiseNewTimer+0x58>)
    c938:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    c93a:	46c0      	nop			; (mov r8, r8)
    c93c:	46bd      	mov	sp, r7
    c93e:	b004      	add	sp, #16
    c940:	bd80      	pop	{r7, pc}
    c942:	46c0      	nop			; (mov r8, r8)
    c944:	0000ce5d 	.word	0x0000ce5d
    c948:	0000aca5 	.word	0x0000aca5

0000c94c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    c94c:	b590      	push	{r4, r7, lr}
    c94e:	b08b      	sub	sp, #44	; 0x2c
    c950:	af00      	add	r7, sp, #0
    c952:	60f8      	str	r0, [r7, #12]
    c954:	60b9      	str	r1, [r7, #8]
    c956:	607a      	str	r2, [r7, #4]
    c958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    c95a:	2300      	movs	r3, #0
    c95c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	2b00      	cmp	r3, #0
    c962:	d101      	bne.n	c968 <xTimerGenericCommand+0x1c>
    c964:	b672      	cpsid	i
    c966:	e7fe      	b.n	c966 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    c968:	4b1e      	ldr	r3, [pc, #120]	; (c9e4 <xTimerGenericCommand+0x98>)
    c96a:	681b      	ldr	r3, [r3, #0]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d033      	beq.n	c9d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    c970:	2314      	movs	r3, #20
    c972:	18fb      	adds	r3, r7, r3
    c974:	68ba      	ldr	r2, [r7, #8]
    c976:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    c978:	2314      	movs	r3, #20
    c97a:	18fb      	adds	r3, r7, r3
    c97c:	687a      	ldr	r2, [r7, #4]
    c97e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    c980:	2314      	movs	r3, #20
    c982:	18fb      	adds	r3, r7, r3
    c984:	68fa      	ldr	r2, [r7, #12]
    c986:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    c988:	68bb      	ldr	r3, [r7, #8]
    c98a:	2b05      	cmp	r3, #5
    c98c:	dc1a      	bgt.n	c9c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    c98e:	4b16      	ldr	r3, [pc, #88]	; (c9e8 <xTimerGenericCommand+0x9c>)
    c990:	4798      	blx	r3
    c992:	0003      	movs	r3, r0
    c994:	2b02      	cmp	r3, #2
    c996:	d10a      	bne.n	c9ae <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    c998:	4b12      	ldr	r3, [pc, #72]	; (c9e4 <xTimerGenericCommand+0x98>)
    c99a:	6818      	ldr	r0, [r3, #0]
    c99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c99e:	2314      	movs	r3, #20
    c9a0:	18f9      	adds	r1, r7, r3
    c9a2:	2300      	movs	r3, #0
    c9a4:	4c11      	ldr	r4, [pc, #68]	; (c9ec <xTimerGenericCommand+0xa0>)
    c9a6:	47a0      	blx	r4
    c9a8:	0003      	movs	r3, r0
    c9aa:	627b      	str	r3, [r7, #36]	; 0x24
    c9ac:	e014      	b.n	c9d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    c9ae:	4b0d      	ldr	r3, [pc, #52]	; (c9e4 <xTimerGenericCommand+0x98>)
    c9b0:	6818      	ldr	r0, [r3, #0]
    c9b2:	2314      	movs	r3, #20
    c9b4:	18f9      	adds	r1, r7, r3
    c9b6:	2300      	movs	r3, #0
    c9b8:	2200      	movs	r2, #0
    c9ba:	4c0c      	ldr	r4, [pc, #48]	; (c9ec <xTimerGenericCommand+0xa0>)
    c9bc:	47a0      	blx	r4
    c9be:	0003      	movs	r3, r0
    c9c0:	627b      	str	r3, [r7, #36]	; 0x24
    c9c2:	e009      	b.n	c9d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    c9c4:	4b07      	ldr	r3, [pc, #28]	; (c9e4 <xTimerGenericCommand+0x98>)
    c9c6:	6818      	ldr	r0, [r3, #0]
    c9c8:	683a      	ldr	r2, [r7, #0]
    c9ca:	2314      	movs	r3, #20
    c9cc:	18f9      	adds	r1, r7, r3
    c9ce:	2300      	movs	r3, #0
    c9d0:	4c07      	ldr	r4, [pc, #28]	; (c9f0 <xTimerGenericCommand+0xa4>)
    c9d2:	47a0      	blx	r4
    c9d4:	0003      	movs	r3, r0
    c9d6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c9da:	0018      	movs	r0, r3
    c9dc:	46bd      	mov	sp, r7
    c9de:	b00b      	add	sp, #44	; 0x2c
    c9e0:	bd90      	pop	{r4, r7, pc}
    c9e2:	46c0      	nop			; (mov r8, r8)
    c9e4:	20003c24 	.word	0x20003c24
    c9e8:	0000c69d 	.word	0x0000c69d
    c9ec:	0000af3d 	.word	0x0000af3d
    c9f0:	0000b11d 	.word	0x0000b11d

0000c9f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    c9f4:	b590      	push	{r4, r7, lr}
    c9f6:	b087      	sub	sp, #28
    c9f8:	af02      	add	r7, sp, #8
    c9fa:	6078      	str	r0, [r7, #4]
    c9fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    c9fe:	4b18      	ldr	r3, [pc, #96]	; (ca60 <prvProcessExpiredTimer+0x6c>)
    ca00:	681b      	ldr	r3, [r3, #0]
    ca02:	68db      	ldr	r3, [r3, #12]
    ca04:	68db      	ldr	r3, [r3, #12]
    ca06:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ca08:	68fb      	ldr	r3, [r7, #12]
    ca0a:	3304      	adds	r3, #4
    ca0c:	0018      	movs	r0, r3
    ca0e:	4b15      	ldr	r3, [pc, #84]	; (ca64 <prvProcessExpiredTimer+0x70>)
    ca10:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ca12:	68fb      	ldr	r3, [r7, #12]
    ca14:	69db      	ldr	r3, [r3, #28]
    ca16:	2b01      	cmp	r3, #1
    ca18:	d119      	bne.n	ca4e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    ca1a:	68fb      	ldr	r3, [r7, #12]
    ca1c:	699a      	ldr	r2, [r3, #24]
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	18d1      	adds	r1, r2, r3
    ca22:	687b      	ldr	r3, [r7, #4]
    ca24:	683a      	ldr	r2, [r7, #0]
    ca26:	68f8      	ldr	r0, [r7, #12]
    ca28:	4c0f      	ldr	r4, [pc, #60]	; (ca68 <prvProcessExpiredTimer+0x74>)
    ca2a:	47a0      	blx	r4
    ca2c:	1e03      	subs	r3, r0, #0
    ca2e:	d00e      	beq.n	ca4e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ca30:	687a      	ldr	r2, [r7, #4]
    ca32:	68f8      	ldr	r0, [r7, #12]
    ca34:	2300      	movs	r3, #0
    ca36:	9300      	str	r3, [sp, #0]
    ca38:	2300      	movs	r3, #0
    ca3a:	2100      	movs	r1, #0
    ca3c:	4c0b      	ldr	r4, [pc, #44]	; (ca6c <prvProcessExpiredTimer+0x78>)
    ca3e:	47a0      	blx	r4
    ca40:	0003      	movs	r3, r0
    ca42:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    ca44:	68bb      	ldr	r3, [r7, #8]
    ca46:	2b00      	cmp	r3, #0
    ca48:	d101      	bne.n	ca4e <prvProcessExpiredTimer+0x5a>
    ca4a:	b672      	cpsid	i
    ca4c:	e7fe      	b.n	ca4c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ca4e:	68fb      	ldr	r3, [r7, #12]
    ca50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca52:	68fa      	ldr	r2, [r7, #12]
    ca54:	0010      	movs	r0, r2
    ca56:	4798      	blx	r3
}
    ca58:	46c0      	nop			; (mov r8, r8)
    ca5a:	46bd      	mov	sp, r7
    ca5c:	b005      	add	sp, #20
    ca5e:	bd90      	pop	{r4, r7, pc}
    ca60:	20003c1c 	.word	0x20003c1c
    ca64:	0000ad6b 	.word	0x0000ad6b
    ca68:	0000cbd1 	.word	0x0000cbd1
    ca6c:	0000c94d 	.word	0x0000c94d

0000ca70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    ca70:	b580      	push	{r7, lr}
    ca72:	b084      	sub	sp, #16
    ca74:	af00      	add	r7, sp, #0
    ca76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    ca78:	2308      	movs	r3, #8
    ca7a:	18fb      	adds	r3, r7, r3
    ca7c:	0018      	movs	r0, r3
    ca7e:	4b06      	ldr	r3, [pc, #24]	; (ca98 <prvTimerTask+0x28>)
    ca80:	4798      	blx	r3
    ca82:	0003      	movs	r3, r0
    ca84:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    ca86:	68ba      	ldr	r2, [r7, #8]
    ca88:	68fb      	ldr	r3, [r7, #12]
    ca8a:	0011      	movs	r1, r2
    ca8c:	0018      	movs	r0, r3
    ca8e:	4b03      	ldr	r3, [pc, #12]	; (ca9c <prvTimerTask+0x2c>)
    ca90:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    ca92:	4b03      	ldr	r3, [pc, #12]	; (caa0 <prvTimerTask+0x30>)
    ca94:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    ca96:	e7ef      	b.n	ca78 <prvTimerTask+0x8>
    ca98:	0000cb49 	.word	0x0000cb49
    ca9c:	0000caa5 	.word	0x0000caa5
    caa0:	0000cc59 	.word	0x0000cc59

0000caa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    caa4:	b580      	push	{r7, lr}
    caa6:	b084      	sub	sp, #16
    caa8:	af00      	add	r7, sp, #0
    caaa:	6078      	str	r0, [r7, #4]
    caac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    caae:	4b1e      	ldr	r3, [pc, #120]	; (cb28 <prvProcessTimerOrBlockTask+0x84>)
    cab0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    cab2:	2308      	movs	r3, #8
    cab4:	18fb      	adds	r3, r7, r3
    cab6:	0018      	movs	r0, r3
    cab8:	4b1c      	ldr	r3, [pc, #112]	; (cb2c <prvProcessTimerOrBlockTask+0x88>)
    caba:	4798      	blx	r3
    cabc:	0003      	movs	r3, r0
    cabe:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    cac0:	68bb      	ldr	r3, [r7, #8]
    cac2:	2b00      	cmp	r3, #0
    cac4:	d129      	bne.n	cb1a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    cac6:	683b      	ldr	r3, [r7, #0]
    cac8:	2b00      	cmp	r3, #0
    caca:	d10c      	bne.n	cae6 <prvProcessTimerOrBlockTask+0x42>
    cacc:	687a      	ldr	r2, [r7, #4]
    cace:	68fb      	ldr	r3, [r7, #12]
    cad0:	429a      	cmp	r2, r3
    cad2:	d808      	bhi.n	cae6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    cad4:	4b16      	ldr	r3, [pc, #88]	; (cb30 <prvProcessTimerOrBlockTask+0x8c>)
    cad6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    cad8:	68fa      	ldr	r2, [r7, #12]
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	0011      	movs	r1, r2
    cade:	0018      	movs	r0, r3
    cae0:	4b14      	ldr	r3, [pc, #80]	; (cb34 <prvProcessTimerOrBlockTask+0x90>)
    cae2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    cae4:	e01b      	b.n	cb1e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    cae6:	683b      	ldr	r3, [r7, #0]
    cae8:	2b00      	cmp	r3, #0
    caea:	d006      	beq.n	cafa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    caec:	4b12      	ldr	r3, [pc, #72]	; (cb38 <prvProcessTimerOrBlockTask+0x94>)
    caee:	681b      	ldr	r3, [r3, #0]
    caf0:	681b      	ldr	r3, [r3, #0]
    caf2:	425a      	negs	r2, r3
    caf4:	4153      	adcs	r3, r2
    caf6:	b2db      	uxtb	r3, r3
    caf8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    cafa:	4b10      	ldr	r3, [pc, #64]	; (cb3c <prvProcessTimerOrBlockTask+0x98>)
    cafc:	6818      	ldr	r0, [r3, #0]
    cafe:	687a      	ldr	r2, [r7, #4]
    cb00:	68fb      	ldr	r3, [r7, #12]
    cb02:	1ad3      	subs	r3, r2, r3
    cb04:	683a      	ldr	r2, [r7, #0]
    cb06:	0019      	movs	r1, r3
    cb08:	4b0d      	ldr	r3, [pc, #52]	; (cb40 <prvProcessTimerOrBlockTask+0x9c>)
    cb0a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    cb0c:	4b08      	ldr	r3, [pc, #32]	; (cb30 <prvProcessTimerOrBlockTask+0x8c>)
    cb0e:	4798      	blx	r3
    cb10:	1e03      	subs	r3, r0, #0
    cb12:	d104      	bne.n	cb1e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    cb14:	4b0b      	ldr	r3, [pc, #44]	; (cb44 <prvProcessTimerOrBlockTask+0xa0>)
    cb16:	4798      	blx	r3
}
    cb18:	e001      	b.n	cb1e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    cb1a:	4b05      	ldr	r3, [pc, #20]	; (cb30 <prvProcessTimerOrBlockTask+0x8c>)
    cb1c:	4798      	blx	r3
}
    cb1e:	46c0      	nop			; (mov r8, r8)
    cb20:	46bd      	mov	sp, r7
    cb22:	b004      	add	sp, #16
    cb24:	bd80      	pop	{r7, pc}
    cb26:	46c0      	nop			; (mov r8, r8)
    cb28:	0000bedd 	.word	0x0000bedd
    cb2c:	0000cb89 	.word	0x0000cb89
    cb30:	0000bef5 	.word	0x0000bef5
    cb34:	0000c9f5 	.word	0x0000c9f5
    cb38:	20003c20 	.word	0x20003c20
    cb3c:	20003c24 	.word	0x20003c24
    cb40:	0000b6b9 	.word	0x0000b6b9
    cb44:	00007301 	.word	0x00007301

0000cb48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    cb48:	b580      	push	{r7, lr}
    cb4a:	b084      	sub	sp, #16
    cb4c:	af00      	add	r7, sp, #0
    cb4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    cb50:	4b0c      	ldr	r3, [pc, #48]	; (cb84 <prvGetNextExpireTime+0x3c>)
    cb52:	681b      	ldr	r3, [r3, #0]
    cb54:	681b      	ldr	r3, [r3, #0]
    cb56:	425a      	negs	r2, r3
    cb58:	4153      	adcs	r3, r2
    cb5a:	b2db      	uxtb	r3, r3
    cb5c:	001a      	movs	r2, r3
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	681b      	ldr	r3, [r3, #0]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d105      	bne.n	cb76 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    cb6a:	4b06      	ldr	r3, [pc, #24]	; (cb84 <prvGetNextExpireTime+0x3c>)
    cb6c:	681b      	ldr	r3, [r3, #0]
    cb6e:	68db      	ldr	r3, [r3, #12]
    cb70:	681b      	ldr	r3, [r3, #0]
    cb72:	60fb      	str	r3, [r7, #12]
    cb74:	e001      	b.n	cb7a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    cb76:	2300      	movs	r3, #0
    cb78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    cb7a:	68fb      	ldr	r3, [r7, #12]
}
    cb7c:	0018      	movs	r0, r3
    cb7e:	46bd      	mov	sp, r7
    cb80:	b004      	add	sp, #16
    cb82:	bd80      	pop	{r7, pc}
    cb84:	20003c1c 	.word	0x20003c1c

0000cb88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    cb88:	b580      	push	{r7, lr}
    cb8a:	b084      	sub	sp, #16
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    cb90:	4b0c      	ldr	r3, [pc, #48]	; (cbc4 <prvSampleTimeNow+0x3c>)
    cb92:	4798      	blx	r3
    cb94:	0003      	movs	r3, r0
    cb96:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    cb98:	4b0b      	ldr	r3, [pc, #44]	; (cbc8 <prvSampleTimeNow+0x40>)
    cb9a:	681b      	ldr	r3, [r3, #0]
    cb9c:	68fa      	ldr	r2, [r7, #12]
    cb9e:	429a      	cmp	r2, r3
    cba0:	d205      	bcs.n	cbae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    cba2:	4b0a      	ldr	r3, [pc, #40]	; (cbcc <prvSampleTimeNow+0x44>)
    cba4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    cba6:	687b      	ldr	r3, [r7, #4]
    cba8:	2201      	movs	r2, #1
    cbaa:	601a      	str	r2, [r3, #0]
    cbac:	e002      	b.n	cbb4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    cbae:	687b      	ldr	r3, [r7, #4]
    cbb0:	2200      	movs	r2, #0
    cbb2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    cbb4:	4b04      	ldr	r3, [pc, #16]	; (cbc8 <prvSampleTimeNow+0x40>)
    cbb6:	68fa      	ldr	r2, [r7, #12]
    cbb8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    cbba:	68fb      	ldr	r3, [r7, #12]
}
    cbbc:	0018      	movs	r0, r3
    cbbe:	46bd      	mov	sp, r7
    cbc0:	b004      	add	sp, #16
    cbc2:	bd80      	pop	{r7, pc}
    cbc4:	0000c029 	.word	0x0000c029
    cbc8:	20003c2c 	.word	0x20003c2c
    cbcc:	0000cd9d 	.word	0x0000cd9d

0000cbd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    cbd0:	b580      	push	{r7, lr}
    cbd2:	b086      	sub	sp, #24
    cbd4:	af00      	add	r7, sp, #0
    cbd6:	60f8      	str	r0, [r7, #12]
    cbd8:	60b9      	str	r1, [r7, #8]
    cbda:	607a      	str	r2, [r7, #4]
    cbdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    cbde:	2300      	movs	r3, #0
    cbe0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    cbe2:	68fb      	ldr	r3, [r7, #12]
    cbe4:	68ba      	ldr	r2, [r7, #8]
    cbe6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    cbe8:	68fb      	ldr	r3, [r7, #12]
    cbea:	68fa      	ldr	r2, [r7, #12]
    cbec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    cbee:	68ba      	ldr	r2, [r7, #8]
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	429a      	cmp	r2, r3
    cbf4:	d812      	bhi.n	cc1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    cbf6:	687a      	ldr	r2, [r7, #4]
    cbf8:	683b      	ldr	r3, [r7, #0]
    cbfa:	1ad2      	subs	r2, r2, r3
    cbfc:	68fb      	ldr	r3, [r7, #12]
    cbfe:	699b      	ldr	r3, [r3, #24]
    cc00:	429a      	cmp	r2, r3
    cc02:	d302      	bcc.n	cc0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    cc04:	2301      	movs	r3, #1
    cc06:	617b      	str	r3, [r7, #20]
    cc08:	e01b      	b.n	cc42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    cc0a:	4b10      	ldr	r3, [pc, #64]	; (cc4c <prvInsertTimerInActiveList+0x7c>)
    cc0c:	681a      	ldr	r2, [r3, #0]
    cc0e:	68fb      	ldr	r3, [r7, #12]
    cc10:	3304      	adds	r3, #4
    cc12:	0019      	movs	r1, r3
    cc14:	0010      	movs	r0, r2
    cc16:	4b0e      	ldr	r3, [pc, #56]	; (cc50 <prvInsertTimerInActiveList+0x80>)
    cc18:	4798      	blx	r3
    cc1a:	e012      	b.n	cc42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    cc1c:	687a      	ldr	r2, [r7, #4]
    cc1e:	683b      	ldr	r3, [r7, #0]
    cc20:	429a      	cmp	r2, r3
    cc22:	d206      	bcs.n	cc32 <prvInsertTimerInActiveList+0x62>
    cc24:	68ba      	ldr	r2, [r7, #8]
    cc26:	683b      	ldr	r3, [r7, #0]
    cc28:	429a      	cmp	r2, r3
    cc2a:	d302      	bcc.n	cc32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    cc2c:	2301      	movs	r3, #1
    cc2e:	617b      	str	r3, [r7, #20]
    cc30:	e007      	b.n	cc42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cc32:	4b08      	ldr	r3, [pc, #32]	; (cc54 <prvInsertTimerInActiveList+0x84>)
    cc34:	681a      	ldr	r2, [r3, #0]
    cc36:	68fb      	ldr	r3, [r7, #12]
    cc38:	3304      	adds	r3, #4
    cc3a:	0019      	movs	r1, r3
    cc3c:	0010      	movs	r0, r2
    cc3e:	4b04      	ldr	r3, [pc, #16]	; (cc50 <prvInsertTimerInActiveList+0x80>)
    cc40:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    cc42:	697b      	ldr	r3, [r7, #20]
}
    cc44:	0018      	movs	r0, r3
    cc46:	46bd      	mov	sp, r7
    cc48:	b006      	add	sp, #24
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	20003c20 	.word	0x20003c20
    cc50:	0000acff 	.word	0x0000acff
    cc54:	20003c1c 	.word	0x20003c1c

0000cc58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    cc58:	b590      	push	{r4, r7, lr}
    cc5a:	b08d      	sub	sp, #52	; 0x34
    cc5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    cc5e:	e07e      	b.n	cd5e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    cc60:	2308      	movs	r3, #8
    cc62:	18fb      	adds	r3, r7, r3
    cc64:	681b      	ldr	r3, [r3, #0]
    cc66:	2b00      	cmp	r3, #0
    cc68:	da10      	bge.n	cc8c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    cc6a:	2308      	movs	r3, #8
    cc6c:	18fb      	adds	r3, r7, r3
    cc6e:	3304      	adds	r3, #4
    cc70:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc74:	2b00      	cmp	r3, #0
    cc76:	d101      	bne.n	cc7c <prvProcessReceivedCommands+0x24>
    cc78:	b672      	cpsid	i
    cc7a:	e7fe      	b.n	cc7a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc7e:	681a      	ldr	r2, [r3, #0]
    cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc82:	6858      	ldr	r0, [r3, #4]
    cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc86:	689b      	ldr	r3, [r3, #8]
    cc88:	0019      	movs	r1, r3
    cc8a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    cc8c:	2308      	movs	r3, #8
    cc8e:	18fb      	adds	r3, r7, r3
    cc90:	681b      	ldr	r3, [r3, #0]
    cc92:	2b00      	cmp	r3, #0
    cc94:	db63      	blt.n	cd5e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    cc96:	2308      	movs	r3, #8
    cc98:	18fb      	adds	r3, r7, r3
    cc9a:	689b      	ldr	r3, [r3, #8]
    cc9c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    cc9e:	6a3b      	ldr	r3, [r7, #32]
    cca0:	695b      	ldr	r3, [r3, #20]
    cca2:	2b00      	cmp	r3, #0
    cca4:	d004      	beq.n	ccb0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cca6:	6a3b      	ldr	r3, [r7, #32]
    cca8:	3304      	adds	r3, #4
    ccaa:	0018      	movs	r0, r3
    ccac:	4b33      	ldr	r3, [pc, #204]	; (cd7c <prvProcessReceivedCommands+0x124>)
    ccae:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    ccb0:	1d3b      	adds	r3, r7, #4
    ccb2:	0018      	movs	r0, r3
    ccb4:	4b32      	ldr	r3, [pc, #200]	; (cd80 <prvProcessReceivedCommands+0x128>)
    ccb6:	4798      	blx	r3
    ccb8:	0003      	movs	r3, r0
    ccba:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
    ccbc:	2308      	movs	r3, #8
    ccbe:	18fb      	adds	r3, r7, r3
    ccc0:	681b      	ldr	r3, [r3, #0]
    ccc2:	2b09      	cmp	r3, #9
    ccc4:	d84a      	bhi.n	cd5c <prvProcessReceivedCommands+0x104>
    ccc6:	009a      	lsls	r2, r3, #2
    ccc8:	4b2e      	ldr	r3, [pc, #184]	; (cd84 <prvProcessReceivedCommands+0x12c>)
    ccca:	18d3      	adds	r3, r2, r3
    cccc:	681b      	ldr	r3, [r3, #0]
    ccce:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    ccd0:	2308      	movs	r3, #8
    ccd2:	18fb      	adds	r3, r7, r3
    ccd4:	685a      	ldr	r2, [r3, #4]
    ccd6:	6a3b      	ldr	r3, [r7, #32]
    ccd8:	699b      	ldr	r3, [r3, #24]
    ccda:	18d1      	adds	r1, r2, r3
    ccdc:	2308      	movs	r3, #8
    ccde:	18fb      	adds	r3, r7, r3
    cce0:	685b      	ldr	r3, [r3, #4]
    cce2:	69fa      	ldr	r2, [r7, #28]
    cce4:	6a38      	ldr	r0, [r7, #32]
    cce6:	4c28      	ldr	r4, [pc, #160]	; (cd88 <prvProcessReceivedCommands+0x130>)
    cce8:	47a0      	blx	r4
    ccea:	1e03      	subs	r3, r0, #0
    ccec:	d037      	beq.n	cd5e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ccee:	6a3b      	ldr	r3, [r7, #32]
    ccf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ccf2:	6a3a      	ldr	r2, [r7, #32]
    ccf4:	0010      	movs	r0, r2
    ccf6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ccf8:	6a3b      	ldr	r3, [r7, #32]
    ccfa:	69db      	ldr	r3, [r3, #28]
    ccfc:	2b01      	cmp	r3, #1
    ccfe:	d12e      	bne.n	cd5e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    cd00:	2308      	movs	r3, #8
    cd02:	18fb      	adds	r3, r7, r3
    cd04:	685a      	ldr	r2, [r3, #4]
    cd06:	6a3b      	ldr	r3, [r7, #32]
    cd08:	699b      	ldr	r3, [r3, #24]
    cd0a:	18d2      	adds	r2, r2, r3
    cd0c:	6a38      	ldr	r0, [r7, #32]
    cd0e:	2300      	movs	r3, #0
    cd10:	9300      	str	r3, [sp, #0]
    cd12:	2300      	movs	r3, #0
    cd14:	2100      	movs	r1, #0
    cd16:	4c1d      	ldr	r4, [pc, #116]	; (cd8c <prvProcessReceivedCommands+0x134>)
    cd18:	47a0      	blx	r4
    cd1a:	0003      	movs	r3, r0
    cd1c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
    cd1e:	69bb      	ldr	r3, [r7, #24]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d11c      	bne.n	cd5e <prvProcessReceivedCommands+0x106>
    cd24:	b672      	cpsid	i
    cd26:	e7fe      	b.n	cd26 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    cd28:	2308      	movs	r3, #8
    cd2a:	18fb      	adds	r3, r7, r3
    cd2c:	685a      	ldr	r2, [r3, #4]
    cd2e:	6a3b      	ldr	r3, [r7, #32]
    cd30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    cd32:	6a3b      	ldr	r3, [r7, #32]
    cd34:	699b      	ldr	r3, [r3, #24]
    cd36:	2b00      	cmp	r3, #0
    cd38:	d101      	bne.n	cd3e <prvProcessReceivedCommands+0xe6>
    cd3a:	b672      	cpsid	i
    cd3c:	e7fe      	b.n	cd3c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    cd3e:	6a3b      	ldr	r3, [r7, #32]
    cd40:	699a      	ldr	r2, [r3, #24]
    cd42:	69fb      	ldr	r3, [r7, #28]
    cd44:	18d1      	adds	r1, r2, r3
    cd46:	69fb      	ldr	r3, [r7, #28]
    cd48:	69fa      	ldr	r2, [r7, #28]
    cd4a:	6a38      	ldr	r0, [r7, #32]
    cd4c:	4c0e      	ldr	r4, [pc, #56]	; (cd88 <prvProcessReceivedCommands+0x130>)
    cd4e:	47a0      	blx	r4
					break;
    cd50:	e005      	b.n	cd5e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    cd52:	6a3b      	ldr	r3, [r7, #32]
    cd54:	0018      	movs	r0, r3
    cd56:	4b0e      	ldr	r3, [pc, #56]	; (cd90 <prvProcessReceivedCommands+0x138>)
    cd58:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    cd5a:	e000      	b.n	cd5e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
    cd5c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    cd5e:	4b0d      	ldr	r3, [pc, #52]	; (cd94 <prvProcessReceivedCommands+0x13c>)
    cd60:	681b      	ldr	r3, [r3, #0]
    cd62:	2208      	movs	r2, #8
    cd64:	18b9      	adds	r1, r7, r2
    cd66:	2200      	movs	r2, #0
    cd68:	0018      	movs	r0, r3
    cd6a:	4b0b      	ldr	r3, [pc, #44]	; (cd98 <prvProcessReceivedCommands+0x140>)
    cd6c:	4798      	blx	r3
    cd6e:	1e03      	subs	r3, r0, #0
    cd70:	d000      	beq.n	cd74 <prvProcessReceivedCommands+0x11c>
    cd72:	e775      	b.n	cc60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    cd74:	46c0      	nop			; (mov r8, r8)
    cd76:	46bd      	mov	sp, r7
    cd78:	b00b      	add	sp, #44	; 0x2c
    cd7a:	bd90      	pop	{r4, r7, pc}
    cd7c:	0000ad6b 	.word	0x0000ad6b
    cd80:	0000cb89 	.word	0x0000cb89
    cd84:	00013ab4 	.word	0x00013ab4
    cd88:	0000cbd1 	.word	0x0000cbd1
    cd8c:	0000c94d 	.word	0x0000c94d
    cd90:	000075b5 	.word	0x000075b5
    cd94:	20003c24 	.word	0x20003c24
    cd98:	0000b23d 	.word	0x0000b23d

0000cd9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    cd9c:	b590      	push	{r4, r7, lr}
    cd9e:	b089      	sub	sp, #36	; 0x24
    cda0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    cda2:	e03e      	b.n	ce22 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    cda4:	4b28      	ldr	r3, [pc, #160]	; (ce48 <prvSwitchTimerLists+0xac>)
    cda6:	681b      	ldr	r3, [r3, #0]
    cda8:	68db      	ldr	r3, [r3, #12]
    cdaa:	681b      	ldr	r3, [r3, #0]
    cdac:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    cdae:	4b26      	ldr	r3, [pc, #152]	; (ce48 <prvSwitchTimerLists+0xac>)
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	68db      	ldr	r3, [r3, #12]
    cdb4:	68db      	ldr	r3, [r3, #12]
    cdb6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cdb8:	693b      	ldr	r3, [r7, #16]
    cdba:	3304      	adds	r3, #4
    cdbc:	0018      	movs	r0, r3
    cdbe:	4b23      	ldr	r3, [pc, #140]	; (ce4c <prvSwitchTimerLists+0xb0>)
    cdc0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cdc2:	693b      	ldr	r3, [r7, #16]
    cdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cdc6:	693a      	ldr	r2, [r7, #16]
    cdc8:	0010      	movs	r0, r2
    cdca:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cdcc:	693b      	ldr	r3, [r7, #16]
    cdce:	69db      	ldr	r3, [r3, #28]
    cdd0:	2b01      	cmp	r3, #1
    cdd2:	d126      	bne.n	ce22 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    cdd4:	693b      	ldr	r3, [r7, #16]
    cdd6:	699a      	ldr	r2, [r3, #24]
    cdd8:	697b      	ldr	r3, [r7, #20]
    cdda:	18d3      	adds	r3, r2, r3
    cddc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    cdde:	68fa      	ldr	r2, [r7, #12]
    cde0:	697b      	ldr	r3, [r7, #20]
    cde2:	429a      	cmp	r2, r3
    cde4:	d90e      	bls.n	ce04 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    cde6:	693b      	ldr	r3, [r7, #16]
    cde8:	68fa      	ldr	r2, [r7, #12]
    cdea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    cdec:	693b      	ldr	r3, [r7, #16]
    cdee:	693a      	ldr	r2, [r7, #16]
    cdf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cdf2:	4b15      	ldr	r3, [pc, #84]	; (ce48 <prvSwitchTimerLists+0xac>)
    cdf4:	681a      	ldr	r2, [r3, #0]
    cdf6:	693b      	ldr	r3, [r7, #16]
    cdf8:	3304      	adds	r3, #4
    cdfa:	0019      	movs	r1, r3
    cdfc:	0010      	movs	r0, r2
    cdfe:	4b14      	ldr	r3, [pc, #80]	; (ce50 <prvSwitchTimerLists+0xb4>)
    ce00:	4798      	blx	r3
    ce02:	e00e      	b.n	ce22 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ce04:	697a      	ldr	r2, [r7, #20]
    ce06:	6938      	ldr	r0, [r7, #16]
    ce08:	2300      	movs	r3, #0
    ce0a:	9300      	str	r3, [sp, #0]
    ce0c:	2300      	movs	r3, #0
    ce0e:	2100      	movs	r1, #0
    ce10:	4c10      	ldr	r4, [pc, #64]	; (ce54 <prvSwitchTimerLists+0xb8>)
    ce12:	47a0      	blx	r4
    ce14:	0003      	movs	r3, r0
    ce16:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    ce18:	68bb      	ldr	r3, [r7, #8]
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d101      	bne.n	ce22 <prvSwitchTimerLists+0x86>
    ce1e:	b672      	cpsid	i
    ce20:	e7fe      	b.n	ce20 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ce22:	4b09      	ldr	r3, [pc, #36]	; (ce48 <prvSwitchTimerLists+0xac>)
    ce24:	681b      	ldr	r3, [r3, #0]
    ce26:	681b      	ldr	r3, [r3, #0]
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d1bb      	bne.n	cda4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    ce2c:	4b06      	ldr	r3, [pc, #24]	; (ce48 <prvSwitchTimerLists+0xac>)
    ce2e:	681b      	ldr	r3, [r3, #0]
    ce30:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    ce32:	4b09      	ldr	r3, [pc, #36]	; (ce58 <prvSwitchTimerLists+0xbc>)
    ce34:	681a      	ldr	r2, [r3, #0]
    ce36:	4b04      	ldr	r3, [pc, #16]	; (ce48 <prvSwitchTimerLists+0xac>)
    ce38:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    ce3a:	4b07      	ldr	r3, [pc, #28]	; (ce58 <prvSwitchTimerLists+0xbc>)
    ce3c:	687a      	ldr	r2, [r7, #4]
    ce3e:	601a      	str	r2, [r3, #0]
}
    ce40:	46c0      	nop			; (mov r8, r8)
    ce42:	46bd      	mov	sp, r7
    ce44:	b007      	add	sp, #28
    ce46:	bd90      	pop	{r4, r7, pc}
    ce48:	20003c1c 	.word	0x20003c1c
    ce4c:	0000ad6b 	.word	0x0000ad6b
    ce50:	0000acff 	.word	0x0000acff
    ce54:	0000c94d 	.word	0x0000c94d
    ce58:	20003c20 	.word	0x20003c20

0000ce5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    ce5c:	b580      	push	{r7, lr}
    ce5e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    ce60:	4b15      	ldr	r3, [pc, #84]	; (ceb8 <prvCheckForValidListAndQueue+0x5c>)
    ce62:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    ce64:	4b15      	ldr	r3, [pc, #84]	; (cebc <prvCheckForValidListAndQueue+0x60>)
    ce66:	681b      	ldr	r3, [r3, #0]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d120      	bne.n	ceae <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    ce6c:	4b14      	ldr	r3, [pc, #80]	; (cec0 <prvCheckForValidListAndQueue+0x64>)
    ce6e:	0018      	movs	r0, r3
    ce70:	4b14      	ldr	r3, [pc, #80]	; (cec4 <prvCheckForValidListAndQueue+0x68>)
    ce72:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    ce74:	4b14      	ldr	r3, [pc, #80]	; (cec8 <prvCheckForValidListAndQueue+0x6c>)
    ce76:	0018      	movs	r0, r3
    ce78:	4b12      	ldr	r3, [pc, #72]	; (cec4 <prvCheckForValidListAndQueue+0x68>)
    ce7a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    ce7c:	4b13      	ldr	r3, [pc, #76]	; (cecc <prvCheckForValidListAndQueue+0x70>)
    ce7e:	4a10      	ldr	r2, [pc, #64]	; (cec0 <prvCheckForValidListAndQueue+0x64>)
    ce80:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    ce82:	4b13      	ldr	r3, [pc, #76]	; (ced0 <prvCheckForValidListAndQueue+0x74>)
    ce84:	4a10      	ldr	r2, [pc, #64]	; (cec8 <prvCheckForValidListAndQueue+0x6c>)
    ce86:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    ce88:	2200      	movs	r2, #0
    ce8a:	2110      	movs	r1, #16
    ce8c:	200a      	movs	r0, #10
    ce8e:	4b11      	ldr	r3, [pc, #68]	; (ced4 <prvCheckForValidListAndQueue+0x78>)
    ce90:	4798      	blx	r3
    ce92:	0002      	movs	r2, r0
    ce94:	4b09      	ldr	r3, [pc, #36]	; (cebc <prvCheckForValidListAndQueue+0x60>)
    ce96:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    ce98:	4b08      	ldr	r3, [pc, #32]	; (cebc <prvCheckForValidListAndQueue+0x60>)
    ce9a:	681b      	ldr	r3, [r3, #0]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d006      	beq.n	ceae <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    cea0:	4b06      	ldr	r3, [pc, #24]	; (cebc <prvCheckForValidListAndQueue+0x60>)
    cea2:	681b      	ldr	r3, [r3, #0]
    cea4:	4a0c      	ldr	r2, [pc, #48]	; (ced8 <prvCheckForValidListAndQueue+0x7c>)
    cea6:	0011      	movs	r1, r2
    cea8:	0018      	movs	r0, r3
    ceaa:	4b0c      	ldr	r3, [pc, #48]	; (cedc <prvCheckForValidListAndQueue+0x80>)
    ceac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    ceae:	4b0c      	ldr	r3, [pc, #48]	; (cee0 <prvCheckForValidListAndQueue+0x84>)
    ceb0:	4798      	blx	r3
}
    ceb2:	46c0      	nop			; (mov r8, r8)
    ceb4:	46bd      	mov	sp, r7
    ceb6:	bd80      	pop	{r7, pc}
    ceb8:	00007321 	.word	0x00007321
    cebc:	20003c24 	.word	0x20003c24
    cec0:	20003bf4 	.word	0x20003bf4
    cec4:	0000ac69 	.word	0x0000ac69
    cec8:	20003c08 	.word	0x20003c08
    cecc:	20003c1c 	.word	0x20003c1c
    ced0:	20003c20 	.word	0x20003c20
    ced4:	0000ae79 	.word	0x0000ae79
    ced8:	00013aac 	.word	0x00013aac
    cedc:	0000b669 	.word	0x0000b669
    cee0:	00007345 	.word	0x00007345

0000cee4 <system_apb_clock_set_mask>:
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b082      	sub	sp, #8
    cee8:	af00      	add	r7, sp, #0
    ceea:	0002      	movs	r2, r0
    ceec:	6039      	str	r1, [r7, #0]
    ceee:	1dfb      	adds	r3, r7, #7
    cef0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    cef2:	1dfb      	adds	r3, r7, #7
    cef4:	781b      	ldrb	r3, [r3, #0]
    cef6:	2b01      	cmp	r3, #1
    cef8:	d00a      	beq.n	cf10 <system_apb_clock_set_mask+0x2c>
    cefa:	2b02      	cmp	r3, #2
    cefc:	d00f      	beq.n	cf1e <system_apb_clock_set_mask+0x3a>
    cefe:	2b00      	cmp	r3, #0
    cf00:	d114      	bne.n	cf2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    cf02:	4b0e      	ldr	r3, [pc, #56]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf04:	4a0d      	ldr	r2, [pc, #52]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf06:	6991      	ldr	r1, [r2, #24]
    cf08:	683a      	ldr	r2, [r7, #0]
    cf0a:	430a      	orrs	r2, r1
    cf0c:	619a      	str	r2, [r3, #24]
			break;
    cf0e:	e00f      	b.n	cf30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    cf10:	4b0a      	ldr	r3, [pc, #40]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf12:	4a0a      	ldr	r2, [pc, #40]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf14:	69d1      	ldr	r1, [r2, #28]
    cf16:	683a      	ldr	r2, [r7, #0]
    cf18:	430a      	orrs	r2, r1
    cf1a:	61da      	str	r2, [r3, #28]
			break;
    cf1c:	e008      	b.n	cf30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    cf1e:	4b07      	ldr	r3, [pc, #28]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf20:	4a06      	ldr	r2, [pc, #24]	; (cf3c <system_apb_clock_set_mask+0x58>)
    cf22:	6a11      	ldr	r1, [r2, #32]
    cf24:	683a      	ldr	r2, [r7, #0]
    cf26:	430a      	orrs	r2, r1
    cf28:	621a      	str	r2, [r3, #32]
			break;
    cf2a:	e001      	b.n	cf30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    cf2c:	2317      	movs	r3, #23
    cf2e:	e000      	b.n	cf32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    cf30:	2300      	movs	r3, #0
}
    cf32:	0018      	movs	r0, r3
    cf34:	46bd      	mov	sp, r7
    cf36:	b002      	add	sp, #8
    cf38:	bd80      	pop	{r7, pc}
    cf3a:	46c0      	nop			; (mov r8, r8)
    cf3c:	40000400 	.word	0x40000400

0000cf40 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b082      	sub	sp, #8
    cf44:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    cf46:	4b07      	ldr	r3, [pc, #28]	; (cf64 <wdt_is_syncing+0x24>)
    cf48:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    cf4a:	687b      	ldr	r3, [r7, #4]
    cf4c:	79db      	ldrb	r3, [r3, #7]
    cf4e:	b2db      	uxtb	r3, r3
    cf50:	b25b      	sxtb	r3, r3
    cf52:	2b00      	cmp	r3, #0
    cf54:	da01      	bge.n	cf5a <wdt_is_syncing+0x1a>
#endif
		return true;
    cf56:	2301      	movs	r3, #1
    cf58:	e000      	b.n	cf5c <wdt_is_syncing+0x1c>
	}

	return false;
    cf5a:	2300      	movs	r3, #0
}
    cf5c:	0018      	movs	r0, r3
    cf5e:	46bd      	mov	sp, r7
    cf60:	b002      	add	sp, #8
    cf62:	bd80      	pop	{r7, pc}
    cf64:	40001000 	.word	0x40001000

0000cf68 <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    cf68:	b580      	push	{r7, lr}
    cf6a:	b082      	sub	sp, #8
    cf6c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    cf6e:	4b07      	ldr	r3, [pc, #28]	; (cf8c <wdt_is_locked+0x24>)
    cf70:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    cf72:	687b      	ldr	r3, [r7, #4]
    cf74:	781b      	ldrb	r3, [r3, #0]
    cf76:	b2db      	uxtb	r3, r3
    cf78:	001a      	movs	r2, r3
    cf7a:	2380      	movs	r3, #128	; 0x80
    cf7c:	4013      	ands	r3, r2
    cf7e:	1e5a      	subs	r2, r3, #1
    cf80:	4193      	sbcs	r3, r2
    cf82:	b2db      	uxtb	r3, r3
#endif
}
    cf84:	0018      	movs	r0, r3
    cf86:	46bd      	mov	sp, r7
    cf88:	b002      	add	sp, #8
    cf8a:	bd80      	pop	{r7, pc}
    cf8c:	40001000 	.word	0x40001000

0000cf90 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    cf90:	b580      	push	{r7, lr}
    cf92:	b086      	sub	sp, #24
    cf94:	af00      	add	r7, sp, #0
    cf96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    cf98:	4b54      	ldr	r3, [pc, #336]	; (d0ec <wdt_set_config+0x15c>)
    cf9a:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    cf9c:	2110      	movs	r1, #16
    cf9e:	2000      	movs	r0, #0
    cfa0:	4b53      	ldr	r3, [pc, #332]	; (d0f0 <wdt_set_config+0x160>)
    cfa2:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    cfa4:	4b53      	ldr	r3, [pc, #332]	; (d0f4 <wdt_set_config+0x164>)
    cfa6:	4798      	blx	r3
    cfa8:	1e03      	subs	r3, r0, #0
    cfaa:	d001      	beq.n	cfb0 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    cfac:	2310      	movs	r3, #16
    cfae:	e098      	b.n	d0e2 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	78db      	ldrb	r3, [r3, #3]
    cfb4:	2b00      	cmp	r3, #0
    cfb6:	d101      	bne.n	cfbc <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    cfb8:	2317      	movs	r3, #23
    cfba:	e092      	b.n	d0e2 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	78da      	ldrb	r2, [r3, #3]
    cfc0:	687b      	ldr	r3, [r7, #4]
    cfc2:	791b      	ldrb	r3, [r3, #4]
    cfc4:	429a      	cmp	r2, r3
    cfc6:	d305      	bcc.n	cfd4 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    cfc8:	687b      	ldr	r3, [r7, #4]
    cfca:	78da      	ldrb	r2, [r3, #3]
    cfcc:	687b      	ldr	r3, [r7, #4]
    cfce:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    cfd0:	429a      	cmp	r2, r3
    cfd2:	d201      	bcs.n	cfd8 <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    cfd4:	2317      	movs	r3, #23
    cfd6:	e084      	b.n	d0e2 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    cfd8:	693b      	ldr	r3, [r7, #16]
    cfda:	781b      	ldrb	r3, [r3, #0]
    cfdc:	b2db      	uxtb	r3, r3
    cfde:	2202      	movs	r2, #2
    cfe0:	4393      	bics	r3, r2
    cfe2:	b2da      	uxtb	r2, r3
    cfe4:	693b      	ldr	r3, [r7, #16]
    cfe6:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    cfe8:	46c0      	nop			; (mov r8, r8)
    cfea:	4b43      	ldr	r3, [pc, #268]	; (d0f8 <wdt_set_config+0x168>)
    cfec:	4798      	blx	r3
    cfee:	1e03      	subs	r3, r0, #0
    cff0:	d1fb      	bne.n	cfea <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	785b      	ldrb	r3, [r3, #1]
    cff6:	2201      	movs	r2, #1
    cff8:	4053      	eors	r3, r2
    cffa:	b2db      	uxtb	r3, r3
    cffc:	2b00      	cmp	r3, #0
    cffe:	d001      	beq.n	d004 <wdt_set_config+0x74>
		return STATUS_OK;
    d000:	2300      	movs	r3, #0
    d002:	e06e      	b.n	d0e2 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    d004:	687b      	ldr	r3, [r7, #4]
    d006:	789a      	ldrb	r2, [r3, #2]
    d008:	230c      	movs	r3, #12
    d00a:	18fb      	adds	r3, r7, r3
    d00c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    d00e:	230c      	movs	r3, #12
    d010:	18fb      	adds	r3, r7, r3
    d012:	0019      	movs	r1, r3
    d014:	2003      	movs	r0, #3
    d016:	4b39      	ldr	r3, [pc, #228]	; (d0fc <wdt_set_config+0x16c>)
    d018:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    d01a:	2003      	movs	r0, #3
    d01c:	4b38      	ldr	r3, [pc, #224]	; (d100 <wdt_set_config+0x170>)
    d01e:	4798      	blx	r3
	if (config->always_on) {
    d020:	687b      	ldr	r3, [r7, #4]
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	2b00      	cmp	r3, #0
    d026:	d002      	beq.n	d02e <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    d028:	2003      	movs	r0, #3
    d02a:	4b36      	ldr	r3, [pc, #216]	; (d104 <wdt_set_config+0x174>)
    d02c:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    d02e:	2300      	movs	r3, #0
    d030:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    d032:	687b      	ldr	r3, [r7, #4]
    d034:	78db      	ldrb	r3, [r3, #3]
    d036:	3b01      	subs	r3, #1
    d038:	001a      	movs	r2, r3
    d03a:	697b      	ldr	r3, [r7, #20]
    d03c:	4313      	orrs	r3, r2
    d03e:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    d040:	687b      	ldr	r3, [r7, #4]
    d042:	791b      	ldrb	r3, [r3, #4]
    d044:	2b00      	cmp	r3, #0
    d046:	d010      	beq.n	d06a <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    d048:	693b      	ldr	r3, [r7, #16]
    d04a:	781b      	ldrb	r3, [r3, #0]
    d04c:	b2db      	uxtb	r3, r3
    d04e:	2204      	movs	r2, #4
    d050:	4313      	orrs	r3, r2
    d052:	b2da      	uxtb	r2, r3
    d054:	693b      	ldr	r3, [r7, #16]
    d056:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    d058:	687b      	ldr	r3, [r7, #4]
    d05a:	791b      	ldrb	r3, [r3, #4]
    d05c:	3b01      	subs	r3, #1
    d05e:	011b      	lsls	r3, r3, #4
    d060:	001a      	movs	r2, r3
    d062:	697b      	ldr	r3, [r7, #20]
    d064:	4313      	orrs	r3, r2
    d066:	617b      	str	r3, [r7, #20]
    d068:	e007      	b.n	d07a <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    d06a:	693b      	ldr	r3, [r7, #16]
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	b2db      	uxtb	r3, r3
    d070:	2204      	movs	r2, #4
    d072:	4393      	bics	r3, r2
    d074:	b2da      	uxtb	r2, r3
    d076:	693b      	ldr	r3, [r7, #16]
    d078:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    d07a:	46c0      	nop			; (mov r8, r8)
    d07c:	4b1e      	ldr	r3, [pc, #120]	; (d0f8 <wdt_set_config+0x168>)
    d07e:	4798      	blx	r3
    d080:	1e03      	subs	r3, r0, #0
    d082:	d1fb      	bne.n	d07c <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    d084:	697b      	ldr	r3, [r7, #20]
    d086:	b2da      	uxtb	r2, r3
    d088:	693b      	ldr	r3, [r7, #16]
    d08a:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    d08c:	687b      	ldr	r3, [r7, #4]
    d08e:	795b      	ldrb	r3, [r3, #5]
    d090:	2b00      	cmp	r3, #0
    d092:	d00a      	beq.n	d0aa <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    d094:	46c0      	nop			; (mov r8, r8)
    d096:	4b18      	ldr	r3, [pc, #96]	; (d0f8 <wdt_set_config+0x168>)
    d098:	4798      	blx	r3
    d09a:	1e03      	subs	r3, r0, #0
    d09c:	d1fb      	bne.n	d096 <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    d09e:	687b      	ldr	r3, [r7, #4]
    d0a0:	795b      	ldrb	r3, [r3, #5]
    d0a2:	3b01      	subs	r3, #1
    d0a4:	b2da      	uxtb	r2, r3
    d0a6:	693b      	ldr	r3, [r7, #16]
    d0a8:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    d0aa:	687b      	ldr	r3, [r7, #4]
    d0ac:	781b      	ldrb	r3, [r3, #0]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d009      	beq.n	d0c6 <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    d0b2:	693b      	ldr	r3, [r7, #16]
    d0b4:	781b      	ldrb	r3, [r3, #0]
    d0b6:	b2db      	uxtb	r3, r3
    d0b8:	2280      	movs	r2, #128	; 0x80
    d0ba:	4252      	negs	r2, r2
    d0bc:	4313      	orrs	r3, r2
    d0be:	b2da      	uxtb	r2, r3
    d0c0:	693b      	ldr	r3, [r7, #16]
    d0c2:	701a      	strb	r2, [r3, #0]
    d0c4:	e007      	b.n	d0d6 <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    d0c6:	693b      	ldr	r3, [r7, #16]
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	b2db      	uxtb	r3, r3
    d0cc:	2202      	movs	r2, #2
    d0ce:	4313      	orrs	r3, r2
    d0d0:	b2da      	uxtb	r2, r3
    d0d2:	693b      	ldr	r3, [r7, #16]
    d0d4:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	4b07      	ldr	r3, [pc, #28]	; (d0f8 <wdt_set_config+0x168>)
    d0da:	4798      	blx	r3
    d0dc:	1e03      	subs	r3, r0, #0
    d0de:	d1fb      	bne.n	d0d8 <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    d0e0:	2300      	movs	r3, #0
}
    d0e2:	0018      	movs	r0, r3
    d0e4:	46bd      	mov	sp, r7
    d0e6:	b006      	add	sp, #24
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	46c0      	nop			; (mov r8, r8)
    d0ec:	40001000 	.word	0x40001000
    d0f0:	0000cee5 	.word	0x0000cee5
    d0f4:	0000cf69 	.word	0x0000cf69
    d0f8:	0000cf41 	.word	0x0000cf41
    d0fc:	0000f5fd 	.word	0x0000f5fd
    d100:	0000f641 	.word	0x0000f641
    d104:	0000f721 	.word	0x0000f721

0000d108 <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    d108:	b580      	push	{r7, lr}
    d10a:	b082      	sub	sp, #8
    d10c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    d10e:	4b07      	ldr	r3, [pc, #28]	; (d12c <wdt_reset_count+0x24>)
    d110:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    d112:	687b      	ldr	r3, [r7, #4]
    d114:	22a5      	movs	r2, #165	; 0xa5
    d116:	721a      	strb	r2, [r3, #8]

	while (wdt_is_syncing()) {
    d118:	46c0      	nop			; (mov r8, r8)
    d11a:	4b05      	ldr	r3, [pc, #20]	; (d130 <wdt_reset_count+0x28>)
    d11c:	4798      	blx	r3
    d11e:	1e03      	subs	r3, r0, #0
    d120:	d1fb      	bne.n	d11a <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    d122:	46c0      	nop			; (mov r8, r8)
    d124:	46bd      	mov	sp, r7
    d126:	b002      	add	sp, #8
    d128:	bd80      	pop	{r7, pc}
    d12a:	46c0      	nop			; (mov r8, r8)
    d12c:	40001000 	.word	0x40001000
    d130:	0000cf41 	.word	0x0000cf41

0000d134 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    d134:	b580      	push	{r7, lr}
    d136:	b082      	sub	sp, #8
    d138:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    d13a:	4b04      	ldr	r3, [pc, #16]	; (d14c <wdt_clear_early_warning+0x18>)
    d13c:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    d13e:	687b      	ldr	r3, [r7, #4]
    d140:	2201      	movs	r2, #1
    d142:	719a      	strb	r2, [r3, #6]
}
    d144:	46c0      	nop			; (mov r8, r8)
    d146:	46bd      	mov	sp, r7
    d148:	b002      	add	sp, #8
    d14a:	bd80      	pop	{r7, pc}
    d14c:	40001000 	.word	0x40001000

0000d150 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    d150:	b580      	push	{r7, lr}
    d152:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    d154:	4b05      	ldr	r3, [pc, #20]	; (d16c <WDT_Handler+0x1c>)
    d156:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    d158:	4b05      	ldr	r3, [pc, #20]	; (d170 <WDT_Handler+0x20>)
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d002      	beq.n	d166 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    d160:	4b03      	ldr	r3, [pc, #12]	; (d170 <WDT_Handler+0x20>)
    d162:	681b      	ldr	r3, [r3, #0]
    d164:	4798      	blx	r3
	}
}
    d166:	46c0      	nop			; (mov r8, r8)
    d168:	46bd      	mov	sp, r7
    d16a:	bd80      	pop	{r7, pc}
    d16c:	0000d135 	.word	0x0000d135
    d170:	2000408c 	.word	0x2000408c

0000d174 <system_pinmux_get_config_defaults>:
{
    d174:	b580      	push	{r7, lr}
    d176:	b082      	sub	sp, #8
    d178:	af00      	add	r7, sp, #0
    d17a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	2280      	movs	r2, #128	; 0x80
    d180:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d182:	687b      	ldr	r3, [r7, #4]
    d184:	2200      	movs	r2, #0
    d186:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    d188:	687b      	ldr	r3, [r7, #4]
    d18a:	2201      	movs	r2, #1
    d18c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	2200      	movs	r2, #0
    d192:	70da      	strb	r2, [r3, #3]
}
    d194:	46c0      	nop			; (mov r8, r8)
    d196:	46bd      	mov	sp, r7
    d198:	b002      	add	sp, #8
    d19a:	bd80      	pop	{r7, pc}

0000d19c <system_pinmux_get_group_from_gpio_pin>:
{
    d19c:	b580      	push	{r7, lr}
    d19e:	b084      	sub	sp, #16
    d1a0:	af00      	add	r7, sp, #0
    d1a2:	0002      	movs	r2, r0
    d1a4:	1dfb      	adds	r3, r7, #7
    d1a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d1a8:	230f      	movs	r3, #15
    d1aa:	18fb      	adds	r3, r7, r3
    d1ac:	1dfa      	adds	r2, r7, #7
    d1ae:	7812      	ldrb	r2, [r2, #0]
    d1b0:	09d2      	lsrs	r2, r2, #7
    d1b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d1b4:	230e      	movs	r3, #14
    d1b6:	18fb      	adds	r3, r7, r3
    d1b8:	1dfa      	adds	r2, r7, #7
    d1ba:	7812      	ldrb	r2, [r2, #0]
    d1bc:	0952      	lsrs	r2, r2, #5
    d1be:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d1c0:	4b0d      	ldr	r3, [pc, #52]	; (d1f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d1c2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    d1c4:	230f      	movs	r3, #15
    d1c6:	18fb      	adds	r3, r7, r3
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d10f      	bne.n	d1ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d1ce:	230f      	movs	r3, #15
    d1d0:	18fb      	adds	r3, r7, r3
    d1d2:	781b      	ldrb	r3, [r3, #0]
    d1d4:	009b      	lsls	r3, r3, #2
    d1d6:	2210      	movs	r2, #16
    d1d8:	4694      	mov	ip, r2
    d1da:	44bc      	add	ip, r7
    d1dc:	4463      	add	r3, ip
    d1de:	3b08      	subs	r3, #8
    d1e0:	681a      	ldr	r2, [r3, #0]
    d1e2:	230e      	movs	r3, #14
    d1e4:	18fb      	adds	r3, r7, r3
    d1e6:	781b      	ldrb	r3, [r3, #0]
    d1e8:	01db      	lsls	r3, r3, #7
    d1ea:	18d3      	adds	r3, r2, r3
    d1ec:	e000      	b.n	d1f0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d1ee:	2300      	movs	r3, #0
}
    d1f0:	0018      	movs	r0, r3
    d1f2:	46bd      	mov	sp, r7
    d1f4:	b004      	add	sp, #16
    d1f6:	bd80      	pop	{r7, pc}
    d1f8:	41004400 	.word	0x41004400

0000d1fc <port_get_group_from_gpio_pin>:
{
    d1fc:	b580      	push	{r7, lr}
    d1fe:	b082      	sub	sp, #8
    d200:	af00      	add	r7, sp, #0
    d202:	0002      	movs	r2, r0
    d204:	1dfb      	adds	r3, r7, #7
    d206:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d208:	1dfb      	adds	r3, r7, #7
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	0018      	movs	r0, r3
    d20e:	4b03      	ldr	r3, [pc, #12]	; (d21c <port_get_group_from_gpio_pin+0x20>)
    d210:	4798      	blx	r3
    d212:	0003      	movs	r3, r0
}
    d214:	0018      	movs	r0, r3
    d216:	46bd      	mov	sp, r7
    d218:	b002      	add	sp, #8
    d21a:	bd80      	pop	{r7, pc}
    d21c:	0000d19d 	.word	0x0000d19d

0000d220 <port_pin_set_output_level>:
{
    d220:	b580      	push	{r7, lr}
    d222:	b084      	sub	sp, #16
    d224:	af00      	add	r7, sp, #0
    d226:	0002      	movs	r2, r0
    d228:	1dfb      	adds	r3, r7, #7
    d22a:	701a      	strb	r2, [r3, #0]
    d22c:	1dbb      	adds	r3, r7, #6
    d22e:	1c0a      	adds	r2, r1, #0
    d230:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d232:	1dfb      	adds	r3, r7, #7
    d234:	781b      	ldrb	r3, [r3, #0]
    d236:	0018      	movs	r0, r3
    d238:	4b0d      	ldr	r3, [pc, #52]	; (d270 <port_pin_set_output_level+0x50>)
    d23a:	4798      	blx	r3
    d23c:	0003      	movs	r3, r0
    d23e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d240:	1dfb      	adds	r3, r7, #7
    d242:	781b      	ldrb	r3, [r3, #0]
    d244:	221f      	movs	r2, #31
    d246:	4013      	ands	r3, r2
    d248:	2201      	movs	r2, #1
    d24a:	409a      	lsls	r2, r3
    d24c:	0013      	movs	r3, r2
    d24e:	60bb      	str	r3, [r7, #8]
	if (level) {
    d250:	1dbb      	adds	r3, r7, #6
    d252:	781b      	ldrb	r3, [r3, #0]
    d254:	2b00      	cmp	r3, #0
    d256:	d003      	beq.n	d260 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d258:	68fb      	ldr	r3, [r7, #12]
    d25a:	68ba      	ldr	r2, [r7, #8]
    d25c:	619a      	str	r2, [r3, #24]
}
    d25e:	e002      	b.n	d266 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d260:	68fb      	ldr	r3, [r7, #12]
    d262:	68ba      	ldr	r2, [r7, #8]
    d264:	615a      	str	r2, [r3, #20]
}
    d266:	46c0      	nop			; (mov r8, r8)
    d268:	46bd      	mov	sp, r7
    d26a:	b004      	add	sp, #16
    d26c:	bd80      	pop	{r7, pc}
    d26e:	46c0      	nop			; (mov r8, r8)
    d270:	0000d1fd 	.word	0x0000d1fd

0000d274 <system_gclk_chan_get_config_defaults>:
{
    d274:	b580      	push	{r7, lr}
    d276:	b082      	sub	sp, #8
    d278:	af00      	add	r7, sp, #0
    d27a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	2200      	movs	r2, #0
    d280:	701a      	strb	r2, [r3, #0]
}
    d282:	46c0      	nop			; (mov r8, r8)
    d284:	46bd      	mov	sp, r7
    d286:	b002      	add	sp, #8
    d288:	bd80      	pop	{r7, pc}
	...

0000d28c <system_apb_clock_set_mask>:
{
    d28c:	b580      	push	{r7, lr}
    d28e:	b082      	sub	sp, #8
    d290:	af00      	add	r7, sp, #0
    d292:	0002      	movs	r2, r0
    d294:	6039      	str	r1, [r7, #0]
    d296:	1dfb      	adds	r3, r7, #7
    d298:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d29a:	1dfb      	adds	r3, r7, #7
    d29c:	781b      	ldrb	r3, [r3, #0]
    d29e:	2b01      	cmp	r3, #1
    d2a0:	d00a      	beq.n	d2b8 <system_apb_clock_set_mask+0x2c>
    d2a2:	2b02      	cmp	r3, #2
    d2a4:	d00f      	beq.n	d2c6 <system_apb_clock_set_mask+0x3a>
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d114      	bne.n	d2d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d2aa:	4b0e      	ldr	r3, [pc, #56]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2ac:	4a0d      	ldr	r2, [pc, #52]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2ae:	6991      	ldr	r1, [r2, #24]
    d2b0:	683a      	ldr	r2, [r7, #0]
    d2b2:	430a      	orrs	r2, r1
    d2b4:	619a      	str	r2, [r3, #24]
			break;
    d2b6:	e00f      	b.n	d2d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d2b8:	4b0a      	ldr	r3, [pc, #40]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2ba:	4a0a      	ldr	r2, [pc, #40]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2bc:	69d1      	ldr	r1, [r2, #28]
    d2be:	683a      	ldr	r2, [r7, #0]
    d2c0:	430a      	orrs	r2, r1
    d2c2:	61da      	str	r2, [r3, #28]
			break;
    d2c4:	e008      	b.n	d2d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d2c6:	4b07      	ldr	r3, [pc, #28]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2c8:	4a06      	ldr	r2, [pc, #24]	; (d2e4 <system_apb_clock_set_mask+0x58>)
    d2ca:	6a11      	ldr	r1, [r2, #32]
    d2cc:	683a      	ldr	r2, [r7, #0]
    d2ce:	430a      	orrs	r2, r1
    d2d0:	621a      	str	r2, [r3, #32]
			break;
    d2d2:	e001      	b.n	d2d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d2d4:	2317      	movs	r3, #23
    d2d6:	e000      	b.n	d2da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d2d8:	2300      	movs	r3, #0
}
    d2da:	0018      	movs	r0, r3
    d2dc:	46bd      	mov	sp, r7
    d2de:	b002      	add	sp, #8
    d2e0:	bd80      	pop	{r7, pc}
    d2e2:	46c0      	nop			; (mov r8, r8)
    d2e4:	40000400 	.word	0x40000400

0000d2e8 <system_is_debugger_present>:
{
    d2e8:	b580      	push	{r7, lr}
    d2ea:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    d2ec:	4b05      	ldr	r3, [pc, #20]	; (d304 <system_is_debugger_present+0x1c>)
    d2ee:	789b      	ldrb	r3, [r3, #2]
    d2f0:	b2db      	uxtb	r3, r3
    d2f2:	001a      	movs	r2, r3
    d2f4:	2302      	movs	r3, #2
    d2f6:	4013      	ands	r3, r2
    d2f8:	1e5a      	subs	r2, r3, #1
    d2fa:	4193      	sbcs	r3, r2
    d2fc:	b2db      	uxtb	r3, r3
}
    d2fe:	0018      	movs	r0, r3
    d300:	46bd      	mov	sp, r7
    d302:	bd80      	pop	{r7, pc}
    d304:	41002000 	.word	0x41002000

0000d308 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    d308:	b580      	push	{r7, lr}
    d30a:	b084      	sub	sp, #16
    d30c:	af00      	add	r7, sp, #0
    d30e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	681b      	ldr	r3, [r3, #0]
    d314:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	7e1b      	ldrb	r3, [r3, #24]
    d31a:	b2db      	uxtb	r3, r3
    d31c:	001a      	movs	r2, r3
    d31e:	2301      	movs	r3, #1
    d320:	4013      	ands	r3, r2
    d322:	1e5a      	subs	r2, r3, #1
    d324:	4193      	sbcs	r3, r2
    d326:	b2db      	uxtb	r3, r3
}
    d328:	0018      	movs	r0, r3
    d32a:	46bd      	mov	sp, r7
    d32c:	b004      	add	sp, #16
    d32e:	bd80      	pop	{r7, pc}

0000d330 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    d330:	b580      	push	{r7, lr}
    d332:	b084      	sub	sp, #16
    d334:	af00      	add	r7, sp, #0
    d336:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d338:	687b      	ldr	r3, [r7, #4]
    d33a:	681b      	ldr	r3, [r3, #0]
    d33c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d33e:	68fb      	ldr	r3, [r7, #12]
    d340:	7e1b      	ldrb	r3, [r3, #24]
    d342:	b2db      	uxtb	r3, r3
    d344:	001a      	movs	r2, r3
    d346:	2304      	movs	r3, #4
    d348:	4013      	ands	r3, r2
    d34a:	1e5a      	subs	r2, r3, #1
    d34c:	4193      	sbcs	r3, r2
    d34e:	b2db      	uxtb	r3, r3
}
    d350:	0018      	movs	r0, r3
    d352:	46bd      	mov	sp, r7
    d354:	b004      	add	sp, #16
    d356:	bd80      	pop	{r7, pc}

0000d358 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    d358:	b580      	push	{r7, lr}
    d35a:	b084      	sub	sp, #16
    d35c:	af00      	add	r7, sp, #0
    d35e:	6078      	str	r0, [r7, #4]
    d360:	000a      	movs	r2, r1
    d362:	1cbb      	adds	r3, r7, #2
    d364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	681b      	ldr	r3, [r3, #0]
    d36a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	0018      	movs	r0, r3
    d370:	4b0a      	ldr	r3, [pc, #40]	; (d39c <spi_write+0x44>)
    d372:	4798      	blx	r3
    d374:	0003      	movs	r3, r0
    d376:	001a      	movs	r2, r3
    d378:	2301      	movs	r3, #1
    d37a:	4053      	eors	r3, r2
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b00      	cmp	r3, #0
    d380:	d001      	beq.n	d386 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    d382:	2305      	movs	r3, #5
    d384:	e006      	b.n	d394 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d386:	1cbb      	adds	r3, r7, #2
    d388:	881b      	ldrh	r3, [r3, #0]
    d38a:	05db      	lsls	r3, r3, #23
    d38c:	0dda      	lsrs	r2, r3, #23
    d38e:	68fb      	ldr	r3, [r7, #12]
    d390:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    d392:	2300      	movs	r3, #0
}
    d394:	0018      	movs	r0, r3
    d396:	46bd      	mov	sp, r7
    d398:	b004      	add	sp, #16
    d39a:	bd80      	pop	{r7, pc}
    d39c:	0000d309 	.word	0x0000d309

0000d3a0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    d3a0:	b580      	push	{r7, lr}
    d3a2:	b084      	sub	sp, #16
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
    d3a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d3aa:	687b      	ldr	r3, [r7, #4]
    d3ac:	681b      	ldr	r3, [r3, #0]
    d3ae:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    d3b0:	687b      	ldr	r3, [r7, #4]
    d3b2:	0018      	movs	r0, r3
    d3b4:	4b1b      	ldr	r3, [pc, #108]	; (d424 <spi_read+0x84>)
    d3b6:	4798      	blx	r3
    d3b8:	0003      	movs	r3, r0
    d3ba:	001a      	movs	r2, r3
    d3bc:	2301      	movs	r3, #1
    d3be:	4053      	eors	r3, r2
    d3c0:	b2db      	uxtb	r3, r3
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	d001      	beq.n	d3ca <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    d3c6:	2310      	movs	r3, #16
    d3c8:	e027      	b.n	d41a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    d3ca:	230f      	movs	r3, #15
    d3cc:	18fb      	adds	r3, r7, r3
    d3ce:	2200      	movs	r2, #0
    d3d0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d3d2:	68bb      	ldr	r3, [r7, #8]
    d3d4:	8b5b      	ldrh	r3, [r3, #26]
    d3d6:	b29b      	uxth	r3, r3
    d3d8:	001a      	movs	r2, r3
    d3da:	2304      	movs	r3, #4
    d3dc:	4013      	ands	r3, r2
    d3de:	d006      	beq.n	d3ee <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    d3e0:	230f      	movs	r3, #15
    d3e2:	18fb      	adds	r3, r7, r3
    d3e4:	221e      	movs	r2, #30
    d3e6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d3e8:	68bb      	ldr	r3, [r7, #8]
    d3ea:	2204      	movs	r2, #4
    d3ec:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	799b      	ldrb	r3, [r3, #6]
    d3f2:	2b01      	cmp	r3, #1
    d3f4:	d108      	bne.n	d408 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d3f6:	68bb      	ldr	r3, [r7, #8]
    d3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3fa:	b29b      	uxth	r3, r3
    d3fc:	05db      	lsls	r3, r3, #23
    d3fe:	0ddb      	lsrs	r3, r3, #23
    d400:	b29a      	uxth	r2, r3
    d402:	683b      	ldr	r3, [r7, #0]
    d404:	801a      	strh	r2, [r3, #0]
    d406:	e005      	b.n	d414 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d408:	68bb      	ldr	r3, [r7, #8]
    d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d40c:	b2db      	uxtb	r3, r3
    d40e:	b29a      	uxth	r2, r3
    d410:	683b      	ldr	r3, [r7, #0]
    d412:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    d414:	230f      	movs	r3, #15
    d416:	18fb      	adds	r3, r7, r3
    d418:	781b      	ldrb	r3, [r3, #0]
}
    d41a:	0018      	movs	r0, r3
    d41c:	46bd      	mov	sp, r7
    d41e:	b004      	add	sp, #16
    d420:	bd80      	pop	{r7, pc}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	0000d331 	.word	0x0000d331

0000d428 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    d428:	b590      	push	{r4, r7, lr}
    d42a:	b093      	sub	sp, #76	; 0x4c
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
    d430:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d432:	687b      	ldr	r3, [r7, #4]
    d434:	681b      	ldr	r3, [r3, #0]
    d436:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	681b      	ldr	r3, [r3, #0]
    d43c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    d43e:	231c      	movs	r3, #28
    d440:	18fb      	adds	r3, r7, r3
    d442:	0018      	movs	r0, r3
    d444:	4b85      	ldr	r3, [pc, #532]	; (d65c <_spi_set_config+0x234>)
    d446:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d448:	231c      	movs	r3, #28
    d44a:	18fb      	adds	r3, r7, r3
    d44c:	2200      	movs	r2, #0
    d44e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    d450:	683b      	ldr	r3, [r7, #0]
    d452:	781b      	ldrb	r3, [r3, #0]
    d454:	2b00      	cmp	r3, #0
    d456:	d103      	bne.n	d460 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    d458:	231c      	movs	r3, #28
    d45a:	18fb      	adds	r3, r7, r3
    d45c:	2200      	movs	r2, #0
    d45e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    d460:	683b      	ldr	r3, [r7, #0]
    d462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    d464:	230c      	movs	r3, #12
    d466:	18fb      	adds	r3, r7, r3
    d468:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    d46a:	683b      	ldr	r3, [r7, #0]
    d46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    d46e:	230c      	movs	r3, #12
    d470:	18fb      	adds	r3, r7, r3
    d472:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    d474:	683b      	ldr	r3, [r7, #0]
    d476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    d478:	230c      	movs	r3, #12
    d47a:	18fb      	adds	r3, r7, r3
    d47c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    d47e:	683b      	ldr	r3, [r7, #0]
    d480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    d482:	230c      	movs	r3, #12
    d484:	18fb      	adds	r3, r7, r3
    d486:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    d488:	2347      	movs	r3, #71	; 0x47
    d48a:	18fb      	adds	r3, r7, r3
    d48c:	2200      	movs	r2, #0
    d48e:	701a      	strb	r2, [r3, #0]
    d490:	e02c      	b.n	d4ec <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d492:	2347      	movs	r3, #71	; 0x47
    d494:	18fb      	adds	r3, r7, r3
    d496:	781a      	ldrb	r2, [r3, #0]
    d498:	230c      	movs	r3, #12
    d49a:	18fb      	adds	r3, r7, r3
    d49c:	0092      	lsls	r2, r2, #2
    d49e:	58d3      	ldr	r3, [r2, r3]
    d4a0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    d4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d109      	bne.n	d4bc <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    d4a8:	2347      	movs	r3, #71	; 0x47
    d4aa:	18fb      	adds	r3, r7, r3
    d4ac:	781a      	ldrb	r2, [r3, #0]
    d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d4b0:	0011      	movs	r1, r2
    d4b2:	0018      	movs	r0, r3
    d4b4:	4b6a      	ldr	r3, [pc, #424]	; (d660 <_spi_set_config+0x238>)
    d4b6:	4798      	blx	r3
    d4b8:	0003      	movs	r3, r0
    d4ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    d4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d4be:	3301      	adds	r3, #1
    d4c0:	d00d      	beq.n	d4de <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d4c4:	b2da      	uxtb	r2, r3
    d4c6:	231c      	movs	r3, #28
    d4c8:	18fb      	adds	r3, r7, r3
    d4ca:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    d4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d4ce:	0c1b      	lsrs	r3, r3, #16
    d4d0:	b2db      	uxtb	r3, r3
    d4d2:	221c      	movs	r2, #28
    d4d4:	18ba      	adds	r2, r7, r2
    d4d6:	0011      	movs	r1, r2
    d4d8:	0018      	movs	r0, r3
    d4da:	4b62      	ldr	r3, [pc, #392]	; (d664 <_spi_set_config+0x23c>)
    d4dc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    d4de:	2347      	movs	r3, #71	; 0x47
    d4e0:	18fb      	adds	r3, r7, r3
    d4e2:	781a      	ldrb	r2, [r3, #0]
    d4e4:	2347      	movs	r3, #71	; 0x47
    d4e6:	18fb      	adds	r3, r7, r3
    d4e8:	3201      	adds	r2, #1
    d4ea:	701a      	strb	r2, [r3, #0]
    d4ec:	2347      	movs	r3, #71	; 0x47
    d4ee:	18fb      	adds	r3, r7, r3
    d4f0:	781b      	ldrb	r3, [r3, #0]
    d4f2:	2b03      	cmp	r3, #3
    d4f4:	d9cd      	bls.n	d492 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    d4f6:	683b      	ldr	r3, [r7, #0]
    d4f8:	781a      	ldrb	r2, [r3, #0]
    d4fa:	687b      	ldr	r3, [r7, #4]
    d4fc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    d4fe:	683b      	ldr	r3, [r7, #0]
    d500:	7c1a      	ldrb	r2, [r3, #16]
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    d506:	683b      	ldr	r3, [r7, #0]
    d508:	7c9a      	ldrb	r2, [r3, #18]
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    d50e:	683b      	ldr	r3, [r7, #0]
    d510:	7d1a      	ldrb	r2, [r3, #20]
    d512:	687b      	ldr	r3, [r7, #4]
    d514:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    d516:	230a      	movs	r3, #10
    d518:	18fb      	adds	r3, r7, r3
    d51a:	2200      	movs	r2, #0
    d51c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    d51e:	2300      	movs	r3, #0
    d520:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    d522:	2300      	movs	r3, #0
    d524:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    d526:	683b      	ldr	r3, [r7, #0]
    d528:	781b      	ldrb	r3, [r3, #0]
    d52a:	2b01      	cmp	r3, #1
    d52c:	d129      	bne.n	d582 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	681b      	ldr	r3, [r3, #0]
    d532:	0018      	movs	r0, r3
    d534:	4b4c      	ldr	r3, [pc, #304]	; (d668 <_spi_set_config+0x240>)
    d536:	4798      	blx	r3
    d538:	0003      	movs	r3, r0
    d53a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d53e:	3314      	adds	r3, #20
    d540:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d544:	b2db      	uxtb	r3, r3
    d546:	0018      	movs	r0, r3
    d548:	4b48      	ldr	r3, [pc, #288]	; (d66c <_spi_set_config+0x244>)
    d54a:	4798      	blx	r3
    d54c:	0003      	movs	r3, r0
    d54e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    d550:	683b      	ldr	r3, [r7, #0]
    d552:	699b      	ldr	r3, [r3, #24]
    d554:	2223      	movs	r2, #35	; 0x23
    d556:	18bc      	adds	r4, r7, r2
    d558:	220a      	movs	r2, #10
    d55a:	18ba      	adds	r2, r7, r2
    d55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d55e:	0018      	movs	r0, r3
    d560:	4b43      	ldr	r3, [pc, #268]	; (d670 <_spi_set_config+0x248>)
    d562:	4798      	blx	r3
    d564:	0003      	movs	r3, r0
    d566:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    d568:	2323      	movs	r3, #35	; 0x23
    d56a:	18fb      	adds	r3, r7, r3
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	2b00      	cmp	r3, #0
    d570:	d001      	beq.n	d576 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    d572:	2317      	movs	r3, #23
    d574:	e06d      	b.n	d652 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    d576:	230a      	movs	r3, #10
    d578:	18fb      	adds	r3, r7, r3
    d57a:	881b      	ldrh	r3, [r3, #0]
    d57c:	b2da      	uxtb	r2, r3
    d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d580:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    d582:	683b      	ldr	r3, [r7, #0]
    d584:	781b      	ldrb	r3, [r3, #0]
    d586:	2b00      	cmp	r3, #0
    d588:	d11a      	bne.n	d5c0 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    d58a:	683b      	ldr	r3, [r7, #0]
    d58c:	699b      	ldr	r3, [r3, #24]
    d58e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    d590:	683b      	ldr	r3, [r7, #0]
    d592:	8b9b      	ldrh	r3, [r3, #28]
    d594:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    d596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    d59a:	683a      	ldr	r2, [r7, #0]
    d59c:	7f92      	ldrb	r2, [r2, #30]
    d59e:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    d5a0:	683a      	ldr	r2, [r7, #0]
    d5a2:	7fd2      	ldrb	r2, [r2, #31]
    d5a4:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    d5a6:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    d5a8:	431a      	orrs	r2, r3
    d5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5ac:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    d5ae:	683b      	ldr	r3, [r7, #0]
    d5b0:	2220      	movs	r2, #32
    d5b2:	5c9b      	ldrb	r3, [r3, r2]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d003      	beq.n	d5c0 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5ba:	2240      	movs	r2, #64	; 0x40
    d5bc:	4313      	orrs	r3, r2
    d5be:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    d5c0:	683b      	ldr	r3, [r7, #0]
    d5c2:	685b      	ldr	r3, [r3, #4]
    d5c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5c6:	4313      	orrs	r3, r2
    d5c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    d5ca:	683b      	ldr	r3, [r7, #0]
    d5cc:	689b      	ldr	r3, [r3, #8]
    d5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5d0:	4313      	orrs	r3, r2
    d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    d5d4:	683b      	ldr	r3, [r7, #0]
    d5d6:	68db      	ldr	r3, [r3, #12]
    d5d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d5da:	4313      	orrs	r3, r2
    d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    d5de:	683b      	ldr	r3, [r7, #0]
    d5e0:	7c1b      	ldrb	r3, [r3, #16]
    d5e2:	001a      	movs	r2, r3
    d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5e6:	4313      	orrs	r3, r2
    d5e8:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    d5ea:	683b      	ldr	r3, [r7, #0]
    d5ec:	7c5b      	ldrb	r3, [r3, #17]
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	d103      	bne.n	d5fa <_spi_set_config+0x1d2>
    d5f2:	4b20      	ldr	r3, [pc, #128]	; (d674 <_spi_set_config+0x24c>)
    d5f4:	4798      	blx	r3
    d5f6:	1e03      	subs	r3, r0, #0
    d5f8:	d003      	beq.n	d602 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    d5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5fc:	2280      	movs	r2, #128	; 0x80
    d5fe:	4313      	orrs	r3, r2
    d600:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    d602:	683b      	ldr	r3, [r7, #0]
    d604:	7c9b      	ldrb	r3, [r3, #18]
    d606:	2b00      	cmp	r3, #0
    d608:	d004      	beq.n	d614 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    d60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d60c:	2280      	movs	r2, #128	; 0x80
    d60e:	0292      	lsls	r2, r2, #10
    d610:	4313      	orrs	r3, r2
    d612:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    d614:	683b      	ldr	r3, [r7, #0]
    d616:	7cdb      	ldrb	r3, [r3, #19]
    d618:	2b00      	cmp	r3, #0
    d61a:	d004      	beq.n	d626 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d61e:	2280      	movs	r2, #128	; 0x80
    d620:	0092      	lsls	r2, r2, #2
    d622:	4313      	orrs	r3, r2
    d624:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    d626:	683b      	ldr	r3, [r7, #0]
    d628:	7d1b      	ldrb	r3, [r3, #20]
    d62a:	2b00      	cmp	r3, #0
    d62c:	d004      	beq.n	d638 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d630:	2280      	movs	r2, #128	; 0x80
    d632:	0192      	lsls	r2, r2, #6
    d634:	4313      	orrs	r3, r2
    d636:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    d638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d63a:	681a      	ldr	r2, [r3, #0]
    d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d63e:	431a      	orrs	r2, r3
    d640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d642:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    d644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d646:	685a      	ldr	r2, [r3, #4]
    d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d64a:	431a      	orrs	r2, r3
    d64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d64e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    d650:	2300      	movs	r3, #0
}
    d652:	0018      	movs	r0, r3
    d654:	46bd      	mov	sp, r7
    d656:	b013      	add	sp, #76	; 0x4c
    d658:	bd90      	pop	{r4, r7, pc}
    d65a:	46c0      	nop			; (mov r8, r8)
    d65c:	0000d175 	.word	0x0000d175
    d660:	0000df99 	.word	0x0000df99
    d664:	0000f931 	.word	0x0000f931
    d668:	0000e155 	.word	0x0000e155
    d66c:	0000f769 	.word	0x0000f769
    d670:	0000de8f 	.word	0x0000de8f
    d674:	0000d2e9 	.word	0x0000d2e9

0000d678 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    d678:	b590      	push	{r4, r7, lr}
    d67a:	b08b      	sub	sp, #44	; 0x2c
    d67c:	af00      	add	r7, sp, #0
    d67e:	60f8      	str	r0, [r7, #12]
    d680:	60b9      	str	r1, [r7, #8]
    d682:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d684:	68fb      	ldr	r3, [r7, #12]
    d686:	68ba      	ldr	r2, [r7, #8]
    d688:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    d68a:	68fb      	ldr	r3, [r7, #12]
    d68c:	681b      	ldr	r3, [r3, #0]
    d68e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    d690:	6a3b      	ldr	r3, [r7, #32]
    d692:	681b      	ldr	r3, [r3, #0]
    d694:	2202      	movs	r2, #2
    d696:	4013      	ands	r3, r2
    d698:	d001      	beq.n	d69e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    d69a:	231c      	movs	r3, #28
    d69c:	e0a6      	b.n	d7ec <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    d69e:	6a3b      	ldr	r3, [r7, #32]
    d6a0:	681b      	ldr	r3, [r3, #0]
    d6a2:	2201      	movs	r2, #1
    d6a4:	4013      	ands	r3, r2
    d6a6:	d001      	beq.n	d6ac <spi_init+0x34>
		return STATUS_BUSY;
    d6a8:	2305      	movs	r3, #5
    d6aa:	e09f      	b.n	d7ec <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d6ac:	68fb      	ldr	r3, [r7, #12]
    d6ae:	681b      	ldr	r3, [r3, #0]
    d6b0:	0018      	movs	r0, r3
    d6b2:	4b50      	ldr	r3, [pc, #320]	; (d7f4 <spi_init+0x17c>)
    d6b4:	4798      	blx	r3
    d6b6:	0003      	movs	r3, r0
    d6b8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    d6ba:	69fb      	ldr	r3, [r7, #28]
    d6bc:	3302      	adds	r3, #2
    d6be:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d6c0:	69fb      	ldr	r3, [r7, #28]
    d6c2:	3314      	adds	r3, #20
    d6c4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    d6c6:	2201      	movs	r2, #1
    d6c8:	69bb      	ldr	r3, [r7, #24]
    d6ca:	409a      	lsls	r2, r3
    d6cc:	0013      	movs	r3, r2
    d6ce:	0019      	movs	r1, r3
    d6d0:	2002      	movs	r0, #2
    d6d2:	4b49      	ldr	r3, [pc, #292]	; (d7f8 <spi_init+0x180>)
    d6d4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d6d6:	2310      	movs	r3, #16
    d6d8:	18fb      	adds	r3, r7, r3
    d6da:	0018      	movs	r0, r3
    d6dc:	4b47      	ldr	r3, [pc, #284]	; (d7fc <spi_init+0x184>)
    d6de:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    d6e0:	687b      	ldr	r3, [r7, #4]
    d6e2:	2224      	movs	r2, #36	; 0x24
    d6e4:	5c9a      	ldrb	r2, [r3, r2]
    d6e6:	2310      	movs	r3, #16
    d6e8:	18fb      	adds	r3, r7, r3
    d6ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    d6ec:	697b      	ldr	r3, [r7, #20]
    d6ee:	b2db      	uxtb	r3, r3
    d6f0:	2210      	movs	r2, #16
    d6f2:	18ba      	adds	r2, r7, r2
    d6f4:	0011      	movs	r1, r2
    d6f6:	0018      	movs	r0, r3
    d6f8:	4b41      	ldr	r3, [pc, #260]	; (d800 <spi_init+0x188>)
    d6fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    d6fc:	697b      	ldr	r3, [r7, #20]
    d6fe:	b2db      	uxtb	r3, r3
    d700:	0018      	movs	r0, r3
    d702:	4b40      	ldr	r3, [pc, #256]	; (d804 <spi_init+0x18c>)
    d704:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	2224      	movs	r2, #36	; 0x24
    d70a:	5c9b      	ldrb	r3, [r3, r2]
    d70c:	2100      	movs	r1, #0
    d70e:	0018      	movs	r0, r3
    d710:	4b3d      	ldr	r3, [pc, #244]	; (d808 <spi_init+0x190>)
    d712:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    d714:	687b      	ldr	r3, [r7, #4]
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	2b01      	cmp	r3, #1
    d71a:	d105      	bne.n	d728 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    d71c:	6a3b      	ldr	r3, [r7, #32]
    d71e:	681b      	ldr	r3, [r3, #0]
    d720:	220c      	movs	r2, #12
    d722:	431a      	orrs	r2, r3
    d724:	6a3b      	ldr	r3, [r7, #32]
    d726:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    d728:	687b      	ldr	r3, [r7, #4]
    d72a:	781b      	ldrb	r3, [r3, #0]
    d72c:	2b00      	cmp	r3, #0
    d72e:	d105      	bne.n	d73c <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    d730:	6a3b      	ldr	r3, [r7, #32]
    d732:	681b      	ldr	r3, [r3, #0]
    d734:	2208      	movs	r2, #8
    d736:	431a      	orrs	r2, r3
    d738:	6a3b      	ldr	r3, [r7, #32]
    d73a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d73c:	2327      	movs	r3, #39	; 0x27
    d73e:	18fb      	adds	r3, r7, r3
    d740:	2200      	movs	r2, #0
    d742:	701a      	strb	r2, [r3, #0]
    d744:	e010      	b.n	d768 <spi_init+0xf0>
		module->callback[i]        = NULL;
    d746:	2327      	movs	r3, #39	; 0x27
    d748:	18fb      	adds	r3, r7, r3
    d74a:	781b      	ldrb	r3, [r3, #0]
    d74c:	68fa      	ldr	r2, [r7, #12]
    d74e:	3302      	adds	r3, #2
    d750:	009b      	lsls	r3, r3, #2
    d752:	18d3      	adds	r3, r2, r3
    d754:	3304      	adds	r3, #4
    d756:	2200      	movs	r2, #0
    d758:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d75a:	2327      	movs	r3, #39	; 0x27
    d75c:	18fb      	adds	r3, r7, r3
    d75e:	781a      	ldrb	r2, [r3, #0]
    d760:	2327      	movs	r3, #39	; 0x27
    d762:	18fb      	adds	r3, r7, r3
    d764:	3201      	adds	r2, #1
    d766:	701a      	strb	r2, [r3, #0]
    d768:	2327      	movs	r3, #39	; 0x27
    d76a:	18fb      	adds	r3, r7, r3
    d76c:	781b      	ldrb	r3, [r3, #0]
    d76e:	2b06      	cmp	r3, #6
    d770:	d9e9      	bls.n	d746 <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    d772:	68fb      	ldr	r3, [r7, #12]
    d774:	2200      	movs	r2, #0
    d776:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    d778:	68fb      	ldr	r3, [r7, #12]
    d77a:	2200      	movs	r2, #0
    d77c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    d77e:	68fb      	ldr	r3, [r7, #12]
    d780:	2200      	movs	r2, #0
    d782:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    d784:	68fb      	ldr	r3, [r7, #12]
    d786:	2200      	movs	r2, #0
    d788:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    d78a:	68fb      	ldr	r3, [r7, #12]
    d78c:	2236      	movs	r2, #54	; 0x36
    d78e:	2100      	movs	r1, #0
    d790:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    d792:	68fb      	ldr	r3, [r7, #12]
    d794:	2237      	movs	r2, #55	; 0x37
    d796:	2100      	movs	r1, #0
    d798:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    d79a:	68fb      	ldr	r3, [r7, #12]
    d79c:	2238      	movs	r2, #56	; 0x38
    d79e:	2100      	movs	r1, #0
    d7a0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    d7a2:	68fb      	ldr	r3, [r7, #12]
    d7a4:	2203      	movs	r2, #3
    d7a6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    d7a8:	68fb      	ldr	r3, [r7, #12]
    d7aa:	2200      	movs	r2, #0
    d7ac:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    d7ae:	68fb      	ldr	r3, [r7, #12]
    d7b0:	681b      	ldr	r3, [r3, #0]
    d7b2:	2213      	movs	r2, #19
    d7b4:	18bc      	adds	r4, r7, r2
    d7b6:	0018      	movs	r0, r3
    d7b8:	4b0e      	ldr	r3, [pc, #56]	; (d7f4 <spi_init+0x17c>)
    d7ba:	4798      	blx	r3
    d7bc:	0003      	movs	r3, r0
    d7be:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    d7c0:	4a12      	ldr	r2, [pc, #72]	; (d80c <spi_init+0x194>)
    d7c2:	2313      	movs	r3, #19
    d7c4:	18fb      	adds	r3, r7, r3
    d7c6:	781b      	ldrb	r3, [r3, #0]
    d7c8:	0011      	movs	r1, r2
    d7ca:	0018      	movs	r0, r3
    d7cc:	4b10      	ldr	r3, [pc, #64]	; (d810 <spi_init+0x198>)
    d7ce:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d7d0:	2313      	movs	r3, #19
    d7d2:	18fb      	adds	r3, r7, r3
    d7d4:	781a      	ldrb	r2, [r3, #0]
    d7d6:	4b0f      	ldr	r3, [pc, #60]	; (d814 <spi_init+0x19c>)
    d7d8:	0092      	lsls	r2, r2, #2
    d7da:	68f9      	ldr	r1, [r7, #12]
    d7dc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    d7de:	687a      	ldr	r2, [r7, #4]
    d7e0:	68fb      	ldr	r3, [r7, #12]
    d7e2:	0011      	movs	r1, r2
    d7e4:	0018      	movs	r0, r3
    d7e6:	4b0c      	ldr	r3, [pc, #48]	; (d818 <spi_init+0x1a0>)
    d7e8:	4798      	blx	r3
    d7ea:	0003      	movs	r3, r0
}
    d7ec:	0018      	movs	r0, r3
    d7ee:	46bd      	mov	sp, r7
    d7f0:	b00b      	add	sp, #44	; 0x2c
    d7f2:	bd90      	pop	{r4, r7, pc}
    d7f4:	0000e155 	.word	0x0000e155
    d7f8:	0000d28d 	.word	0x0000d28d
    d7fc:	0000d275 	.word	0x0000d275
    d800:	0000f5fd 	.word	0x0000f5fd
    d804:	0000f641 	.word	0x0000f641
    d808:	0000df0d 	.word	0x0000df0d
    d80c:	0000db6d 	.word	0x0000db6d
    d810:	0000e1b9 	.word	0x0000e1b9
    d814:	20004094 	.word	0x20004094
    d818:	0000d429 	.word	0x0000d429

0000d81c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    d81c:	b580      	push	{r7, lr}
    d81e:	b086      	sub	sp, #24
    d820:	af00      	add	r7, sp, #0
    d822:	60f8      	str	r0, [r7, #12]
    d824:	60b9      	str	r1, [r7, #8]
    d826:	1dfb      	adds	r3, r7, #7
    d828:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    d82a:	68fb      	ldr	r3, [r7, #12]
    d82c:	795b      	ldrb	r3, [r3, #5]
    d82e:	2b01      	cmp	r3, #1
    d830:	d001      	beq.n	d836 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d832:	2315      	movs	r3, #21
    d834:	e05c      	b.n	d8f0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    d836:	68fb      	ldr	r3, [r7, #12]
    d838:	7a1b      	ldrb	r3, [r3, #8]
    d83a:	2201      	movs	r2, #1
    d83c:	4053      	eors	r3, r2
    d83e:	b2db      	uxtb	r3, r3
    d840:	2b00      	cmp	r3, #0
    d842:	d054      	beq.n	d8ee <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    d844:	1dfb      	adds	r3, r7, #7
    d846:	781b      	ldrb	r3, [r3, #0]
    d848:	2b00      	cmp	r3, #0
    d84a:	d04a      	beq.n	d8e2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    d84c:	68bb      	ldr	r3, [r7, #8]
    d84e:	785b      	ldrb	r3, [r3, #1]
    d850:	2b00      	cmp	r3, #0
    d852:	d03f      	beq.n	d8d4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    d854:	68fb      	ldr	r3, [r7, #12]
    d856:	0018      	movs	r0, r3
    d858:	4b27      	ldr	r3, [pc, #156]	; (d8f8 <spi_select_slave+0xdc>)
    d85a:	4798      	blx	r3
    d85c:	0003      	movs	r3, r0
    d85e:	001a      	movs	r2, r3
    d860:	2301      	movs	r3, #1
    d862:	4053      	eors	r3, r2
    d864:	b2db      	uxtb	r3, r3
    d866:	2b00      	cmp	r3, #0
    d868:	d007      	beq.n	d87a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    d86a:	68bb      	ldr	r3, [r7, #8]
    d86c:	781b      	ldrb	r3, [r3, #0]
    d86e:	2101      	movs	r1, #1
    d870:	0018      	movs	r0, r3
    d872:	4b22      	ldr	r3, [pc, #136]	; (d8fc <spi_select_slave+0xe0>)
    d874:	4798      	blx	r3
					return STATUS_BUSY;
    d876:	2305      	movs	r3, #5
    d878:	e03a      	b.n	d8f0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d87a:	68bb      	ldr	r3, [r7, #8]
    d87c:	781b      	ldrb	r3, [r3, #0]
    d87e:	2100      	movs	r1, #0
    d880:	0018      	movs	r0, r3
    d882:	4b1e      	ldr	r3, [pc, #120]	; (d8fc <spi_select_slave+0xe0>)
    d884:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    d886:	68bb      	ldr	r3, [r7, #8]
    d888:	789b      	ldrb	r3, [r3, #2]
    d88a:	b29a      	uxth	r2, r3
    d88c:	68fb      	ldr	r3, [r7, #12]
    d88e:	0011      	movs	r1, r2
    d890:	0018      	movs	r0, r3
    d892:	4b1b      	ldr	r3, [pc, #108]	; (d900 <spi_select_slave+0xe4>)
    d894:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    d896:	68fb      	ldr	r3, [r7, #12]
    d898:	79db      	ldrb	r3, [r3, #7]
    d89a:	2201      	movs	r2, #1
    d89c:	4053      	eors	r3, r2
    d89e:	b2db      	uxtb	r3, r3
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d024      	beq.n	d8ee <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    d8a4:	46c0      	nop			; (mov r8, r8)
    d8a6:	68fb      	ldr	r3, [r7, #12]
    d8a8:	0018      	movs	r0, r3
    d8aa:	4b16      	ldr	r3, [pc, #88]	; (d904 <spi_select_slave+0xe8>)
    d8ac:	4798      	blx	r3
    d8ae:	0003      	movs	r3, r0
    d8b0:	001a      	movs	r2, r3
    d8b2:	2301      	movs	r3, #1
    d8b4:	4053      	eors	r3, r2
    d8b6:	b2db      	uxtb	r3, r3
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d1f4      	bne.n	d8a6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    d8bc:	2316      	movs	r3, #22
    d8be:	18fb      	adds	r3, r7, r3
    d8c0:	2200      	movs	r2, #0
    d8c2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    d8c4:	2316      	movs	r3, #22
    d8c6:	18fa      	adds	r2, r7, r3
    d8c8:	68fb      	ldr	r3, [r7, #12]
    d8ca:	0011      	movs	r1, r2
    d8cc:	0018      	movs	r0, r3
    d8ce:	4b0e      	ldr	r3, [pc, #56]	; (d908 <spi_select_slave+0xec>)
    d8d0:	4798      	blx	r3
    d8d2:	e00c      	b.n	d8ee <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d8d4:	68bb      	ldr	r3, [r7, #8]
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	2100      	movs	r1, #0
    d8da:	0018      	movs	r0, r3
    d8dc:	4b07      	ldr	r3, [pc, #28]	; (d8fc <spi_select_slave+0xe0>)
    d8de:	4798      	blx	r3
    d8e0:	e005      	b.n	d8ee <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    d8e2:	68bb      	ldr	r3, [r7, #8]
    d8e4:	781b      	ldrb	r3, [r3, #0]
    d8e6:	2101      	movs	r1, #1
    d8e8:	0018      	movs	r0, r3
    d8ea:	4b04      	ldr	r3, [pc, #16]	; (d8fc <spi_select_slave+0xe0>)
    d8ec:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    d8ee:	2300      	movs	r3, #0
}
    d8f0:	0018      	movs	r0, r3
    d8f2:	46bd      	mov	sp, r7
    d8f4:	b006      	add	sp, #24
    d8f6:	bd80      	pop	{r7, pc}
    d8f8:	0000d309 	.word	0x0000d309
    d8fc:	0000d221 	.word	0x0000d221
    d900:	0000d359 	.word	0x0000d359
    d904:	0000d331 	.word	0x0000d331
    d908:	0000d3a1 	.word	0x0000d3a1

0000d90c <_spi_transceive_buffer>:
static void _spi_transceive_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    d90c:	b580      	push	{r7, lr}
    d90e:	b086      	sub	sp, #24
    d910:	af00      	add	r7, sp, #0
    d912:	60f8      	str	r0, [r7, #12]
    d914:	60b9      	str	r1, [r7, #8]
    d916:	607a      	str	r2, [r7, #4]
    d918:	001a      	movs	r2, r3
    d91a:	1cbb      	adds	r3, r7, #2
    d91c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    d91e:	68fb      	ldr	r3, [r7, #12]
    d920:	1cba      	adds	r2, r7, #2
    d922:	8812      	ldrh	r2, [r2, #0]
    d924:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    d926:	68fb      	ldr	r3, [r7, #12]
    d928:	1cba      	adds	r2, r7, #2
    d92a:	8812      	ldrh	r2, [r2, #0]
    d92c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    d92e:	68fb      	ldr	r3, [r7, #12]
    d930:	687a      	ldr	r2, [r7, #4]
    d932:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    d934:	68fb      	ldr	r3, [r7, #12]
    d936:	68ba      	ldr	r2, [r7, #8]
    d938:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    d93a:	68fb      	ldr	r3, [r7, #12]
    d93c:	2238      	movs	r2, #56	; 0x38
    d93e:	2105      	movs	r1, #5
    d940:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
    d942:	68fb      	ldr	r3, [r7, #12]
    d944:	2202      	movs	r2, #2
    d946:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    d948:	68fb      	ldr	r3, [r7, #12]
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	617b      	str	r3, [r7, #20]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    d94e:	697b      	ldr	r3, [r7, #20]
    d950:	2205      	movs	r2, #5
    d952:	759a      	strb	r2, [r3, #22]
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    d954:	68fb      	ldr	r3, [r7, #12]
    d956:	795b      	ldrb	r3, [r3, #5]
    d958:	2b00      	cmp	r3, #0
    d95a:	d105      	bne.n	d968 <_spi_transceive_buffer+0x5c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d95c:	697b      	ldr	r3, [r7, #20]
    d95e:	2202      	movs	r2, #2
    d960:	761a      	strb	r2, [r3, #24]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d962:	697b      	ldr	r3, [r7, #20]
    d964:	2202      	movs	r2, #2
    d966:	759a      	strb	r2, [r3, #22]
	}
#  endif
}
    d968:	46c0      	nop			; (mov r8, r8)
    d96a:	46bd      	mov	sp, r7
    d96c:	b006      	add	sp, #24
    d96e:	bd80      	pop	{r7, pc}

0000d970 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    d970:	b580      	push	{r7, lr}
    d972:	b084      	sub	sp, #16
    d974:	af00      	add	r7, sp, #0
    d976:	60f8      	str	r0, [r7, #12]
    d978:	60b9      	str	r1, [r7, #8]
    d97a:	1dfb      	adds	r3, r7, #7
    d97c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    d97e:	1dfb      	adds	r3, r7, #7
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	68fa      	ldr	r2, [r7, #12]
    d984:	3302      	adds	r3, #2
    d986:	009b      	lsls	r3, r3, #2
    d988:	18d3      	adds	r3, r2, r3
    d98a:	3304      	adds	r3, #4
    d98c:	68ba      	ldr	r2, [r7, #8]
    d98e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    d990:	68fb      	ldr	r3, [r7, #12]
    d992:	2236      	movs	r2, #54	; 0x36
    d994:	5c9b      	ldrb	r3, [r3, r2]
    d996:	b25a      	sxtb	r2, r3
    d998:	1dfb      	adds	r3, r7, #7
    d99a:	781b      	ldrb	r3, [r3, #0]
    d99c:	2101      	movs	r1, #1
    d99e:	4099      	lsls	r1, r3
    d9a0:	000b      	movs	r3, r1
    d9a2:	b25b      	sxtb	r3, r3
    d9a4:	4313      	orrs	r3, r2
    d9a6:	b25b      	sxtb	r3, r3
    d9a8:	b2d9      	uxtb	r1, r3
    d9aa:	68fb      	ldr	r3, [r7, #12]
    d9ac:	2236      	movs	r2, #54	; 0x36
    d9ae:	5499      	strb	r1, [r3, r2]
}
    d9b0:	46c0      	nop			; (mov r8, r8)
    d9b2:	46bd      	mov	sp, r7
    d9b4:	b004      	add	sp, #16
    d9b6:	bd80      	pop	{r7, pc}

0000d9b8 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    d9b8:	b590      	push	{r4, r7, lr}
    d9ba:	b085      	sub	sp, #20
    d9bc:	af00      	add	r7, sp, #0
    d9be:	60f8      	str	r0, [r7, #12]
    d9c0:	60b9      	str	r1, [r7, #8]
    d9c2:	607a      	str	r2, [r7, #4]
    d9c4:	001a      	movs	r2, r3
    d9c6:	1cbb      	adds	r3, r7, #2
    d9c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    d9ca:	1cbb      	adds	r3, r7, #2
    d9cc:	881b      	ldrh	r3, [r3, #0]
    d9ce:	2b00      	cmp	r3, #0
    d9d0:	d101      	bne.n	d9d6 <spi_transceive_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
    d9d2:	2317      	movs	r3, #23
    d9d4:	e018      	b.n	da08 <spi_transceive_buffer_job+0x50>
	}

	if (!(module->receiver_enabled)) {
    d9d6:	68fb      	ldr	r3, [r7, #12]
    d9d8:	79db      	ldrb	r3, [r3, #7]
    d9da:	2201      	movs	r2, #1
    d9dc:	4053      	eors	r3, r2
    d9de:	b2db      	uxtb	r3, r3
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d001      	beq.n	d9e8 <spi_transceive_buffer_job+0x30>
		return STATUS_ERR_DENIED;
    d9e4:	231c      	movs	r3, #28
    d9e6:	e00f      	b.n	da08 <spi_transceive_buffer_job+0x50>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    d9e8:	68fb      	ldr	r3, [r7, #12]
    d9ea:	2238      	movs	r2, #56	; 0x38
    d9ec:	5c9b      	ldrb	r3, [r3, r2]
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b05      	cmp	r3, #5
    d9f2:	d101      	bne.n	d9f8 <spi_transceive_buffer_job+0x40>
		return STATUS_BUSY;
    d9f4:	2305      	movs	r3, #5
    d9f6:	e007      	b.n	da08 <spi_transceive_buffer_job+0x50>
	}

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
    d9f8:	1cbb      	adds	r3, r7, #2
    d9fa:	881b      	ldrh	r3, [r3, #0]
    d9fc:	687a      	ldr	r2, [r7, #4]
    d9fe:	68b9      	ldr	r1, [r7, #8]
    da00:	68f8      	ldr	r0, [r7, #12]
    da02:	4c03      	ldr	r4, [pc, #12]	; (da10 <spi_transceive_buffer_job+0x58>)
    da04:	47a0      	blx	r4

	return STATUS_OK;
    da06:	2300      	movs	r3, #0
}
    da08:	0018      	movs	r0, r3
    da0a:	46bd      	mov	sp, r7
    da0c:	b005      	add	sp, #20
    da0e:	bd90      	pop	{r4, r7, pc}
    da10:	0000d90d 	.word	0x0000d90d

0000da14 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    da14:	b580      	push	{r7, lr}
    da16:	b084      	sub	sp, #16
    da18:	af00      	add	r7, sp, #0
    da1a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	681b      	ldr	r3, [r3, #0]
    da20:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    da22:	687b      	ldr	r3, [r7, #4]
    da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da26:	781b      	ldrb	r3, [r3, #0]
    da28:	b2da      	uxtb	r2, r3
    da2a:	230e      	movs	r3, #14
    da2c:	18fb      	adds	r3, r7, r3
    da2e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da34:	1c5a      	adds	r2, r3, #1
    da36:	687b      	ldr	r3, [r7, #4]
    da38:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	799b      	ldrb	r3, [r3, #6]
    da3e:	2b01      	cmp	r3, #1
    da40:	d113      	bne.n	da6a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    da42:	687b      	ldr	r3, [r7, #4]
    da44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da46:	781b      	ldrb	r3, [r3, #0]
    da48:	b2db      	uxtb	r3, r3
    da4a:	021b      	lsls	r3, r3, #8
    da4c:	b21a      	sxth	r2, r3
    da4e:	230e      	movs	r3, #14
    da50:	18fb      	adds	r3, r7, r3
    da52:	2100      	movs	r1, #0
    da54:	5e5b      	ldrsh	r3, [r3, r1]
    da56:	4313      	orrs	r3, r2
    da58:	b21a      	sxth	r2, r3
    da5a:	230e      	movs	r3, #14
    da5c:	18fb      	adds	r3, r7, r3
    da5e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    da60:	687b      	ldr	r3, [r7, #4]
    da62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    da64:	1c5a      	adds	r2, r3, #1
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    da6a:	230e      	movs	r3, #14
    da6c:	18fb      	adds	r3, r7, r3
    da6e:	881b      	ldrh	r3, [r3, #0]
    da70:	05db      	lsls	r3, r3, #23
    da72:	0dda      	lsrs	r2, r3, #23
    da74:	68bb      	ldr	r3, [r7, #8]
    da76:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    da78:	687b      	ldr	r3, [r7, #4]
    da7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    da7c:	b29b      	uxth	r3, r3
    da7e:	3b01      	subs	r3, #1
    da80:	b29a      	uxth	r2, r3
    da82:	687b      	ldr	r3, [r7, #4]
    da84:	869a      	strh	r2, [r3, #52]	; 0x34
}
    da86:	46c0      	nop			; (mov r8, r8)
    da88:	46bd      	mov	sp, r7
    da8a:	b004      	add	sp, #16
    da8c:	bd80      	pop	{r7, pc}
	...

0000da90 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    da90:	b580      	push	{r7, lr}
    da92:	b084      	sub	sp, #16
    da94:	af00      	add	r7, sp, #0
    da96:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    da98:	687b      	ldr	r3, [r7, #4]
    da9a:	681b      	ldr	r3, [r3, #0]
    da9c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    da9e:	4b08      	ldr	r3, [pc, #32]	; (dac0 <_spi_write_dummy+0x30>)
    daa0:	881b      	ldrh	r3, [r3, #0]
    daa2:	001a      	movs	r2, r3
    daa4:	68fb      	ldr	r3, [r7, #12]
    daa6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    daa8:	687b      	ldr	r3, [r7, #4]
    daaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    daac:	b29b      	uxth	r3, r3
    daae:	3b01      	subs	r3, #1
    dab0:	b29a      	uxth	r2, r3
    dab2:	687b      	ldr	r3, [r7, #4]
    dab4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    dab6:	46c0      	nop			; (mov r8, r8)
    dab8:	46bd      	mov	sp, r7
    daba:	b004      	add	sp, #16
    dabc:	bd80      	pop	{r7, pc}
    dabe:	46c0      	nop			; (mov r8, r8)
    dac0:	20004090 	.word	0x20004090

0000dac4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    dac4:	b580      	push	{r7, lr}
    dac6:	b084      	sub	sp, #16
    dac8:	af00      	add	r7, sp, #0
    daca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	681b      	ldr	r3, [r3, #0]
    dad0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    dad2:	230a      	movs	r3, #10
    dad4:	18fb      	adds	r3, r7, r3
    dad6:	2200      	movs	r2, #0
    dad8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    dada:	68fb      	ldr	r3, [r7, #12]
    dadc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dade:	230a      	movs	r3, #10
    dae0:	18fb      	adds	r3, r7, r3
    dae2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    dae4:	687b      	ldr	r3, [r7, #4]
    dae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    dae8:	b29b      	uxth	r3, r3
    daea:	3b01      	subs	r3, #1
    daec:	b29a      	uxth	r2, r3
    daee:	687b      	ldr	r3, [r7, #4]
    daf0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    daf2:	46c0      	nop			; (mov r8, r8)
    daf4:	46bd      	mov	sp, r7
    daf6:	b004      	add	sp, #16
    daf8:	bd80      	pop	{r7, pc}

0000dafa <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    dafa:	b580      	push	{r7, lr}
    dafc:	b084      	sub	sp, #16
    dafe:	af00      	add	r7, sp, #0
    db00:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    db02:	687b      	ldr	r3, [r7, #4]
    db04:	681b      	ldr	r3, [r3, #0]
    db06:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    db08:	68fb      	ldr	r3, [r7, #12]
    db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db0c:	b29a      	uxth	r2, r3
    db0e:	230a      	movs	r3, #10
    db10:	18fb      	adds	r3, r7, r3
    db12:	05d2      	lsls	r2, r2, #23
    db14:	0dd2      	lsrs	r2, r2, #23
    db16:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db1c:	220a      	movs	r2, #10
    db1e:	18ba      	adds	r2, r7, r2
    db20:	8812      	ldrh	r2, [r2, #0]
    db22:	b2d2      	uxtb	r2, r2
    db24:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    db26:	687b      	ldr	r3, [r7, #4]
    db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db2a:	1c5a      	adds	r2, r3, #1
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	799b      	ldrb	r3, [r3, #6]
    db34:	2b01      	cmp	r3, #1
    db36:	d10d      	bne.n	db54 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db3c:	220a      	movs	r2, #10
    db3e:	18ba      	adds	r2, r7, r2
    db40:	8812      	ldrh	r2, [r2, #0]
    db42:	0a12      	lsrs	r2, r2, #8
    db44:	b292      	uxth	r2, r2
    db46:	b2d2      	uxtb	r2, r2
    db48:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    db4a:	687b      	ldr	r3, [r7, #4]
    db4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db4e:	1c5a      	adds	r2, r3, #1
    db50:	687b      	ldr	r3, [r7, #4]
    db52:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    db54:	687b      	ldr	r3, [r7, #4]
    db56:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    db58:	b29b      	uxth	r3, r3
    db5a:	3b01      	subs	r3, #1
    db5c:	b29a      	uxth	r2, r3
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	861a      	strh	r2, [r3, #48]	; 0x30
}
    db62:	46c0      	nop			; (mov r8, r8)
    db64:	46bd      	mov	sp, r7
    db66:	b004      	add	sp, #16
    db68:	bd80      	pop	{r7, pc}
	...

0000db6c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    db6c:	b580      	push	{r7, lr}
    db6e:	b086      	sub	sp, #24
    db70:	af00      	add	r7, sp, #0
    db72:	0002      	movs	r2, r0
    db74:	1dfb      	adds	r3, r7, #7
    db76:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    db78:	1dfb      	adds	r3, r7, #7
    db7a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    db7c:	4bb9      	ldr	r3, [pc, #740]	; (de64 <_spi_interrupt_handler+0x2f8>)
    db7e:	0092      	lsls	r2, r2, #2
    db80:	58d3      	ldr	r3, [r2, r3]
    db82:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    db84:	697b      	ldr	r3, [r7, #20]
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    db8a:	697b      	ldr	r3, [r7, #20]
    db8c:	2237      	movs	r2, #55	; 0x37
    db8e:	5c9a      	ldrb	r2, [r3, r2]
    db90:	697b      	ldr	r3, [r7, #20]
    db92:	2136      	movs	r1, #54	; 0x36
    db94:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    db96:	230f      	movs	r3, #15
    db98:	18fb      	adds	r3, r7, r3
    db9a:	400a      	ands	r2, r1
    db9c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    db9e:	693b      	ldr	r3, [r7, #16]
    dba0:	7e1b      	ldrb	r3, [r3, #24]
    dba2:	b2da      	uxtb	r2, r3
    dba4:	230c      	movs	r3, #12
    dba6:	18fb      	adds	r3, r7, r3
    dba8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    dbaa:	693b      	ldr	r3, [r7, #16]
    dbac:	7d9b      	ldrb	r3, [r3, #22]
    dbae:	b2db      	uxtb	r3, r3
    dbb0:	b29a      	uxth	r2, r3
    dbb2:	230c      	movs	r3, #12
    dbb4:	18fb      	adds	r3, r7, r3
    dbb6:	210c      	movs	r1, #12
    dbb8:	1879      	adds	r1, r7, r1
    dbba:	8809      	ldrh	r1, [r1, #0]
    dbbc:	400a      	ands	r2, r1
    dbbe:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    dbc0:	230c      	movs	r3, #12
    dbc2:	18fb      	adds	r3, r7, r3
    dbc4:	881b      	ldrh	r3, [r3, #0]
    dbc6:	2201      	movs	r2, #1
    dbc8:	4013      	ands	r3, r2
    dbca:	d041      	beq.n	dc50 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    dbcc:	697b      	ldr	r3, [r7, #20]
    dbce:	795b      	ldrb	r3, [r3, #5]
    dbd0:	2b01      	cmp	r3, #1
    dbd2:	d110      	bne.n	dbf6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    dbd4:	697b      	ldr	r3, [r7, #20]
    dbd6:	7a5b      	ldrb	r3, [r3, #9]
    dbd8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    dbda:	2b00      	cmp	r3, #0
    dbdc:	d10b      	bne.n	dbf6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    dbde:	697b      	ldr	r3, [r7, #20]
    dbe0:	0018      	movs	r0, r3
    dbe2:	4ba1      	ldr	r3, [pc, #644]	; (de68 <_spi_interrupt_handler+0x2fc>)
    dbe4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    dbe6:	697b      	ldr	r3, [r7, #20]
    dbe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    dbea:	b29b      	uxth	r3, r3
    dbec:	2b00      	cmp	r3, #0
    dbee:	d102      	bne.n	dbf6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    dbf0:	693b      	ldr	r3, [r7, #16]
    dbf2:	2201      	movs	r2, #1
    dbf4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    dbf6:	697b      	ldr	r3, [r7, #20]
    dbf8:	795b      	ldrb	r3, [r3, #5]
		if (0
    dbfa:	2b01      	cmp	r3, #1
    dbfc:	d104      	bne.n	dc08 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    dbfe:	697b      	ldr	r3, [r7, #20]
    dc00:	7a5b      	ldrb	r3, [r3, #9]
    dc02:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    dc04:	2b00      	cmp	r3, #0
    dc06:	d108      	bne.n	dc1a <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    dc08:	697b      	ldr	r3, [r7, #20]
    dc0a:	795b      	ldrb	r3, [r3, #5]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d11f      	bne.n	dc50 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    dc10:	697b      	ldr	r3, [r7, #20]
    dc12:	7a5b      	ldrb	r3, [r3, #9]
    dc14:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    dc16:	2b00      	cmp	r3, #0
    dc18:	d01a      	beq.n	dc50 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    dc1a:	697b      	ldr	r3, [r7, #20]
    dc1c:	0018      	movs	r0, r3
    dc1e:	4b93      	ldr	r3, [pc, #588]	; (de6c <_spi_interrupt_handler+0x300>)
    dc20:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    dc22:	697b      	ldr	r3, [r7, #20]
    dc24:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    dc26:	b29b      	uxth	r3, r3
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d111      	bne.n	dc50 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    dc2c:	693b      	ldr	r3, [r7, #16]
    dc2e:	2201      	movs	r2, #1
    dc30:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    dc32:	697b      	ldr	r3, [r7, #20]
    dc34:	7a5b      	ldrb	r3, [r3, #9]
    dc36:	b2db      	uxtb	r3, r3
    dc38:	2b01      	cmp	r3, #1
    dc3a:	d109      	bne.n	dc50 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    dc3c:	697b      	ldr	r3, [r7, #20]
    dc3e:	79db      	ldrb	r3, [r3, #7]
    dc40:	2201      	movs	r2, #1
    dc42:	4053      	eors	r3, r2
    dc44:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    dc46:	2b00      	cmp	r3, #0
    dc48:	d002      	beq.n	dc50 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    dc4a:	693b      	ldr	r3, [r7, #16]
    dc4c:	2202      	movs	r2, #2
    dc4e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    dc50:	230c      	movs	r3, #12
    dc52:	18fb      	adds	r3, r7, r3
    dc54:	881b      	ldrh	r3, [r3, #0]
    dc56:	2204      	movs	r2, #4
    dc58:	4013      	ands	r3, r2
    dc5a:	d100      	bne.n	dc5e <_spi_interrupt_handler+0xf2>
    dc5c:	e07e      	b.n	dd5c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dc5e:	693b      	ldr	r3, [r7, #16]
    dc60:	8b5b      	ldrh	r3, [r3, #26]
    dc62:	b29b      	uxth	r3, r3
    dc64:	001a      	movs	r2, r3
    dc66:	2304      	movs	r3, #4
    dc68:	4013      	ands	r3, r2
    dc6a:	d022      	beq.n	dcb2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    dc6c:	697b      	ldr	r3, [r7, #20]
    dc6e:	7a5b      	ldrb	r3, [r3, #9]
    dc70:	b2db      	uxtb	r3, r3
    dc72:	2b01      	cmp	r3, #1
    dc74:	d014      	beq.n	dca0 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    dc76:	697b      	ldr	r3, [r7, #20]
    dc78:	2238      	movs	r2, #56	; 0x38
    dc7a:	211e      	movs	r1, #30
    dc7c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    dc7e:	697b      	ldr	r3, [r7, #20]
    dc80:	2203      	movs	r2, #3
    dc82:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    dc84:	693b      	ldr	r3, [r7, #16]
    dc86:	2205      	movs	r2, #5
    dc88:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    dc8a:	230f      	movs	r3, #15
    dc8c:	18fb      	adds	r3, r7, r3
    dc8e:	781b      	ldrb	r3, [r3, #0]
    dc90:	2208      	movs	r2, #8
    dc92:	4013      	ands	r3, r2
    dc94:	d004      	beq.n	dca0 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    dc96:	697b      	ldr	r3, [r7, #20]
    dc98:	699b      	ldr	r3, [r3, #24]
    dc9a:	697a      	ldr	r2, [r7, #20]
    dc9c:	0010      	movs	r0, r2
    dc9e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    dca0:	693b      	ldr	r3, [r7, #16]
    dca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dca4:	230a      	movs	r3, #10
    dca6:	18fb      	adds	r3, r7, r3
    dca8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dcaa:	693b      	ldr	r3, [r7, #16]
    dcac:	2204      	movs	r2, #4
    dcae:	835a      	strh	r2, [r3, #26]
    dcb0:	e054      	b.n	dd5c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    dcb2:	697b      	ldr	r3, [r7, #20]
    dcb4:	7a5b      	ldrb	r3, [r3, #9]
    dcb6:	b2db      	uxtb	r3, r3
    dcb8:	2b01      	cmp	r3, #1
    dcba:	d11e      	bne.n	dcfa <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    dcbc:	697b      	ldr	r3, [r7, #20]
    dcbe:	0018      	movs	r0, r3
    dcc0:	4b6b      	ldr	r3, [pc, #428]	; (de70 <_spi_interrupt_handler+0x304>)
    dcc2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    dcc4:	697b      	ldr	r3, [r7, #20]
    dcc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    dcc8:	b29b      	uxth	r3, r3
    dcca:	2b00      	cmp	r3, #0
    dccc:	d146      	bne.n	dd5c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    dcce:	693b      	ldr	r3, [r7, #16]
    dcd0:	2204      	movs	r2, #4
    dcd2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    dcd4:	697b      	ldr	r3, [r7, #20]
    dcd6:	2238      	movs	r2, #56	; 0x38
    dcd8:	2100      	movs	r1, #0
    dcda:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    dcdc:	697b      	ldr	r3, [r7, #20]
    dcde:	2203      	movs	r2, #3
    dce0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    dce2:	230f      	movs	r3, #15
    dce4:	18fb      	adds	r3, r7, r3
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	2201      	movs	r2, #1
    dcea:	4013      	ands	r3, r2
    dcec:	d036      	beq.n	dd5c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    dcee:	697b      	ldr	r3, [r7, #20]
    dcf0:	68db      	ldr	r3, [r3, #12]
    dcf2:	697a      	ldr	r2, [r7, #20]
    dcf4:	0010      	movs	r0, r2
    dcf6:	4798      	blx	r3
    dcf8:	e030      	b.n	dd5c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    dcfa:	697b      	ldr	r3, [r7, #20]
    dcfc:	0018      	movs	r0, r3
    dcfe:	4b5d      	ldr	r3, [pc, #372]	; (de74 <_spi_interrupt_handler+0x308>)
    dd00:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    dd02:	697b      	ldr	r3, [r7, #20]
    dd04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    dd06:	b29b      	uxth	r3, r3
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d127      	bne.n	dd5c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    dd0c:	697b      	ldr	r3, [r7, #20]
    dd0e:	2238      	movs	r2, #56	; 0x38
    dd10:	2100      	movs	r1, #0
    dd12:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    dd14:	693b      	ldr	r3, [r7, #16]
    dd16:	2204      	movs	r2, #4
    dd18:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    dd1a:	697b      	ldr	r3, [r7, #20]
    dd1c:	7a5b      	ldrb	r3, [r3, #9]
    dd1e:	b2db      	uxtb	r3, r3
    dd20:	2b02      	cmp	r3, #2
    dd22:	d10b      	bne.n	dd3c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    dd24:	230f      	movs	r3, #15
    dd26:	18fb      	adds	r3, r7, r3
    dd28:	781b      	ldrb	r3, [r3, #0]
    dd2a:	2204      	movs	r2, #4
    dd2c:	4013      	ands	r3, r2
    dd2e:	d015      	beq.n	dd5c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    dd30:	697b      	ldr	r3, [r7, #20]
    dd32:	695b      	ldr	r3, [r3, #20]
    dd34:	697a      	ldr	r2, [r7, #20]
    dd36:	0010      	movs	r0, r2
    dd38:	4798      	blx	r3
    dd3a:	e00f      	b.n	dd5c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    dd3c:	697b      	ldr	r3, [r7, #20]
    dd3e:	7a5b      	ldrb	r3, [r3, #9]
    dd40:	b2db      	uxtb	r3, r3
    dd42:	2b00      	cmp	r3, #0
    dd44:	d10a      	bne.n	dd5c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    dd46:	230f      	movs	r3, #15
    dd48:	18fb      	adds	r3, r7, r3
    dd4a:	781b      	ldrb	r3, [r3, #0]
    dd4c:	2202      	movs	r2, #2
    dd4e:	4013      	ands	r3, r2
    dd50:	d004      	beq.n	dd5c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    dd52:	697b      	ldr	r3, [r7, #20]
    dd54:	691b      	ldr	r3, [r3, #16]
    dd56:	697a      	ldr	r2, [r7, #20]
    dd58:	0010      	movs	r0, r2
    dd5a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    dd5c:	230c      	movs	r3, #12
    dd5e:	18fb      	adds	r3, r7, r3
    dd60:	881b      	ldrh	r3, [r3, #0]
    dd62:	2202      	movs	r2, #2
    dd64:	4013      	ands	r3, r2
    dd66:	d046      	beq.n	ddf6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    dd68:	697b      	ldr	r3, [r7, #20]
    dd6a:	795b      	ldrb	r3, [r3, #5]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d11d      	bne.n	ddac <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    dd70:	693b      	ldr	r3, [r7, #16]
    dd72:	2207      	movs	r2, #7
    dd74:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    dd76:	693b      	ldr	r3, [r7, #16]
    dd78:	2202      	movs	r2, #2
    dd7a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    dd7c:	697b      	ldr	r3, [r7, #20]
    dd7e:	2203      	movs	r2, #3
    dd80:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    dd82:	697b      	ldr	r3, [r7, #20]
    dd84:	2200      	movs	r2, #0
    dd86:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    dd88:	697b      	ldr	r3, [r7, #20]
    dd8a:	2200      	movs	r2, #0
    dd8c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    dd8e:	697b      	ldr	r3, [r7, #20]
    dd90:	2238      	movs	r2, #56	; 0x38
    dd92:	2100      	movs	r1, #0
    dd94:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    dd96:	230f      	movs	r3, #15
    dd98:	18fb      	adds	r3, r7, r3
    dd9a:	781b      	ldrb	r3, [r3, #0]
    dd9c:	2210      	movs	r2, #16
    dd9e:	4013      	ands	r3, r2
    dda0:	d004      	beq.n	ddac <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    dda2:	697b      	ldr	r3, [r7, #20]
    dda4:	69db      	ldr	r3, [r3, #28]
    dda6:	697a      	ldr	r2, [r7, #20]
    dda8:	0010      	movs	r0, r2
    ddaa:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    ddac:	697b      	ldr	r3, [r7, #20]
    ddae:	795b      	ldrb	r3, [r3, #5]
    ddb0:	2b01      	cmp	r3, #1
    ddb2:	d120      	bne.n	ddf6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    ddb4:	697b      	ldr	r3, [r7, #20]
    ddb6:	7a5b      	ldrb	r3, [r3, #9]
    ddb8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    ddba:	2b01      	cmp	r3, #1
    ddbc:	d11b      	bne.n	ddf6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    ddbe:	697b      	ldr	r3, [r7, #20]
    ddc0:	79db      	ldrb	r3, [r3, #7]
    ddc2:	2201      	movs	r2, #1
    ddc4:	4053      	eors	r3, r2
    ddc6:	b2db      	uxtb	r3, r3
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d014      	beq.n	ddf6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    ddcc:	693b      	ldr	r3, [r7, #16]
    ddce:	2202      	movs	r2, #2
    ddd0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    ddd2:	697b      	ldr	r3, [r7, #20]
    ddd4:	2203      	movs	r2, #3
    ddd6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    ddd8:	697b      	ldr	r3, [r7, #20]
    ddda:	2238      	movs	r2, #56	; 0x38
    dddc:	2100      	movs	r1, #0
    ddde:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    dde0:	230f      	movs	r3, #15
    dde2:	18fb      	adds	r3, r7, r3
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	2201      	movs	r2, #1
    dde8:	4013      	ands	r3, r2
    ddea:	d004      	beq.n	ddf6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    ddec:	697b      	ldr	r3, [r7, #20]
    ddee:	68db      	ldr	r3, [r3, #12]
    ddf0:	697a      	ldr	r2, [r7, #20]
    ddf2:	0010      	movs	r0, r2
    ddf4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    ddf6:	230c      	movs	r3, #12
    ddf8:	18fb      	adds	r3, r7, r3
    ddfa:	881b      	ldrh	r3, [r3, #0]
    ddfc:	2208      	movs	r2, #8
    ddfe:	4013      	ands	r3, r2
    de00:	d014      	beq.n	de2c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    de02:	697b      	ldr	r3, [r7, #20]
    de04:	795b      	ldrb	r3, [r3, #5]
    de06:	2b00      	cmp	r3, #0
    de08:	d110      	bne.n	de2c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    de0a:	693b      	ldr	r3, [r7, #16]
    de0c:	2208      	movs	r2, #8
    de0e:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    de10:	693b      	ldr	r3, [r7, #16]
    de12:	2208      	movs	r2, #8
    de14:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    de16:	230f      	movs	r3, #15
    de18:	18fb      	adds	r3, r7, r3
    de1a:	781b      	ldrb	r3, [r3, #0]
    de1c:	2220      	movs	r2, #32
    de1e:	4013      	ands	r3, r2
    de20:	d004      	beq.n	de2c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    de22:	697b      	ldr	r3, [r7, #20]
    de24:	6a1b      	ldr	r3, [r3, #32]
    de26:	697a      	ldr	r2, [r7, #20]
    de28:	0010      	movs	r0, r2
    de2a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    de2c:	230c      	movs	r3, #12
    de2e:	18fb      	adds	r3, r7, r3
    de30:	881b      	ldrh	r3, [r3, #0]
    de32:	2280      	movs	r2, #128	; 0x80
    de34:	4013      	ands	r3, r2
    de36:	d010      	beq.n	de5a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    de38:	693b      	ldr	r3, [r7, #16]
    de3a:	2280      	movs	r2, #128	; 0x80
    de3c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    de3e:	693b      	ldr	r3, [r7, #16]
    de40:	2280      	movs	r2, #128	; 0x80
    de42:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    de44:	230f      	movs	r3, #15
    de46:	18fb      	adds	r3, r7, r3
    de48:	781b      	ldrb	r3, [r3, #0]
    de4a:	2240      	movs	r2, #64	; 0x40
    de4c:	4013      	ands	r3, r2
    de4e:	d004      	beq.n	de5a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    de50:	697b      	ldr	r3, [r7, #20]
    de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    de54:	697a      	ldr	r2, [r7, #20]
    de56:	0010      	movs	r0, r2
    de58:	4798      	blx	r3
		}
	}
#  endif
}
    de5a:	46c0      	nop			; (mov r8, r8)
    de5c:	46bd      	mov	sp, r7
    de5e:	b006      	add	sp, #24
    de60:	bd80      	pop	{r7, pc}
    de62:	46c0      	nop			; (mov r8, r8)
    de64:	20004094 	.word	0x20004094
    de68:	0000da91 	.word	0x0000da91
    de6c:	0000da15 	.word	0x0000da15
    de70:	0000dac5 	.word	0x0000dac5
    de74:	0000dafb 	.word	0x0000dafb

0000de78 <system_gclk_chan_get_config_defaults>:
{
    de78:	b580      	push	{r7, lr}
    de7a:	b082      	sub	sp, #8
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    de80:	687b      	ldr	r3, [r7, #4]
    de82:	2200      	movs	r2, #0
    de84:	701a      	strb	r2, [r3, #0]
}
    de86:	46c0      	nop			; (mov r8, r8)
    de88:	46bd      	mov	sp, r7
    de8a:	b002      	add	sp, #8
    de8c:	bd80      	pop	{r7, pc}

0000de8e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    de8e:	b580      	push	{r7, lr}
    de90:	b086      	sub	sp, #24
    de92:	af00      	add	r7, sp, #0
    de94:	60f8      	str	r0, [r7, #12]
    de96:	60b9      	str	r1, [r7, #8]
    de98:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    de9a:	2316      	movs	r3, #22
    de9c:	18fb      	adds	r3, r7, r3
    de9e:	2200      	movs	r2, #0
    dea0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    dea2:	68bb      	ldr	r3, [r7, #8]
    dea4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    dea6:	68bb      	ldr	r3, [r7, #8]
    dea8:	085a      	lsrs	r2, r3, #1
    deaa:	68fb      	ldr	r3, [r7, #12]
    deac:	429a      	cmp	r2, r3
    deae:	d201      	bcs.n	deb4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    deb0:	2340      	movs	r3, #64	; 0x40
    deb2:	e026      	b.n	df02 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    deb4:	68bb      	ldr	r3, [r7, #8]
    deb6:	085b      	lsrs	r3, r3, #1
    deb8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    deba:	e00a      	b.n	ded2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    debc:	693a      	ldr	r2, [r7, #16]
    debe:	68fb      	ldr	r3, [r7, #12]
    dec0:	1ad3      	subs	r3, r2, r3
    dec2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    dec4:	2316      	movs	r3, #22
    dec6:	18fb      	adds	r3, r7, r3
    dec8:	881a      	ldrh	r2, [r3, #0]
    deca:	2316      	movs	r3, #22
    decc:	18fb      	adds	r3, r7, r3
    dece:	3201      	adds	r2, #1
    ded0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    ded2:	693a      	ldr	r2, [r7, #16]
    ded4:	68fb      	ldr	r3, [r7, #12]
    ded6:	429a      	cmp	r2, r3
    ded8:	d2f0      	bcs.n	debc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    deda:	2316      	movs	r3, #22
    dedc:	18fb      	adds	r3, r7, r3
    dede:	2216      	movs	r2, #22
    dee0:	18ba      	adds	r2, r7, r2
    dee2:	8812      	ldrh	r2, [r2, #0]
    dee4:	3a01      	subs	r2, #1
    dee6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    dee8:	2316      	movs	r3, #22
    deea:	18fb      	adds	r3, r7, r3
    deec:	881b      	ldrh	r3, [r3, #0]
    deee:	2bff      	cmp	r3, #255	; 0xff
    def0:	d901      	bls.n	def6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    def2:	2340      	movs	r3, #64	; 0x40
    def4:	e005      	b.n	df02 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    def6:	687b      	ldr	r3, [r7, #4]
    def8:	2216      	movs	r2, #22
    defa:	18ba      	adds	r2, r7, r2
    defc:	8812      	ldrh	r2, [r2, #0]
    defe:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    df00:	2300      	movs	r3, #0
	}
}
    df02:	0018      	movs	r0, r3
    df04:	46bd      	mov	sp, r7
    df06:	b006      	add	sp, #24
    df08:	bd80      	pop	{r7, pc}
	...

0000df0c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    df0c:	b580      	push	{r7, lr}
    df0e:	b084      	sub	sp, #16
    df10:	af00      	add	r7, sp, #0
    df12:	0002      	movs	r2, r0
    df14:	1dfb      	adds	r3, r7, #7
    df16:	701a      	strb	r2, [r3, #0]
    df18:	1dbb      	adds	r3, r7, #6
    df1a:	1c0a      	adds	r2, r1, #0
    df1c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    df1e:	4b1a      	ldr	r3, [pc, #104]	; (df88 <sercom_set_gclk_generator+0x7c>)
    df20:	781b      	ldrb	r3, [r3, #0]
    df22:	2201      	movs	r2, #1
    df24:	4053      	eors	r3, r2
    df26:	b2db      	uxtb	r3, r3
    df28:	2b00      	cmp	r3, #0
    df2a:	d103      	bne.n	df34 <sercom_set_gclk_generator+0x28>
    df2c:	1dbb      	adds	r3, r7, #6
    df2e:	781b      	ldrb	r3, [r3, #0]
    df30:	2b00      	cmp	r3, #0
    df32:	d01b      	beq.n	df6c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    df34:	230c      	movs	r3, #12
    df36:	18fb      	adds	r3, r7, r3
    df38:	0018      	movs	r0, r3
    df3a:	4b14      	ldr	r3, [pc, #80]	; (df8c <sercom_set_gclk_generator+0x80>)
    df3c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    df3e:	230c      	movs	r3, #12
    df40:	18fb      	adds	r3, r7, r3
    df42:	1dfa      	adds	r2, r7, #7
    df44:	7812      	ldrb	r2, [r2, #0]
    df46:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    df48:	230c      	movs	r3, #12
    df4a:	18fb      	adds	r3, r7, r3
    df4c:	0019      	movs	r1, r3
    df4e:	2013      	movs	r0, #19
    df50:	4b0f      	ldr	r3, [pc, #60]	; (df90 <sercom_set_gclk_generator+0x84>)
    df52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    df54:	2013      	movs	r0, #19
    df56:	4b0f      	ldr	r3, [pc, #60]	; (df94 <sercom_set_gclk_generator+0x88>)
    df58:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    df5a:	4b0b      	ldr	r3, [pc, #44]	; (df88 <sercom_set_gclk_generator+0x7c>)
    df5c:	1dfa      	adds	r2, r7, #7
    df5e:	7812      	ldrb	r2, [r2, #0]
    df60:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    df62:	4b09      	ldr	r3, [pc, #36]	; (df88 <sercom_set_gclk_generator+0x7c>)
    df64:	2201      	movs	r2, #1
    df66:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    df68:	2300      	movs	r3, #0
    df6a:	e008      	b.n	df7e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    df6c:	4b06      	ldr	r3, [pc, #24]	; (df88 <sercom_set_gclk_generator+0x7c>)
    df6e:	785b      	ldrb	r3, [r3, #1]
    df70:	1dfa      	adds	r2, r7, #7
    df72:	7812      	ldrb	r2, [r2, #0]
    df74:	429a      	cmp	r2, r3
    df76:	d101      	bne.n	df7c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    df78:	2300      	movs	r3, #0
    df7a:	e000      	b.n	df7e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    df7c:	231d      	movs	r3, #29
}
    df7e:	0018      	movs	r0, r3
    df80:	46bd      	mov	sp, r7
    df82:	b004      	add	sp, #16
    df84:	bd80      	pop	{r7, pc}
    df86:	46c0      	nop			; (mov r8, r8)
    df88:	20003c30 	.word	0x20003c30
    df8c:	0000de79 	.word	0x0000de79
    df90:	0000f5fd 	.word	0x0000f5fd
    df94:	0000f641 	.word	0x0000f641

0000df98 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    df98:	b580      	push	{r7, lr}
    df9a:	b082      	sub	sp, #8
    df9c:	af00      	add	r7, sp, #0
    df9e:	6078      	str	r0, [r7, #4]
    dfa0:	000a      	movs	r2, r1
    dfa2:	1cfb      	adds	r3, r7, #3
    dfa4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	4a4d      	ldr	r2, [pc, #308]	; (e0e0 <_sercom_get_default_pad+0x148>)
    dfaa:	4293      	cmp	r3, r2
    dfac:	d03f      	beq.n	e02e <_sercom_get_default_pad+0x96>
    dfae:	4a4c      	ldr	r2, [pc, #304]	; (e0e0 <_sercom_get_default_pad+0x148>)
    dfb0:	4293      	cmp	r3, r2
    dfb2:	d806      	bhi.n	dfc2 <_sercom_get_default_pad+0x2a>
    dfb4:	4a4b      	ldr	r2, [pc, #300]	; (e0e4 <_sercom_get_default_pad+0x14c>)
    dfb6:	4293      	cmp	r3, r2
    dfb8:	d00f      	beq.n	dfda <_sercom_get_default_pad+0x42>
    dfba:	4a4b      	ldr	r2, [pc, #300]	; (e0e8 <_sercom_get_default_pad+0x150>)
    dfbc:	4293      	cmp	r3, r2
    dfbe:	d021      	beq.n	e004 <_sercom_get_default_pad+0x6c>
    dfc0:	e089      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    dfc2:	4a4a      	ldr	r2, [pc, #296]	; (e0ec <_sercom_get_default_pad+0x154>)
    dfc4:	4293      	cmp	r3, r2
    dfc6:	d100      	bne.n	dfca <_sercom_get_default_pad+0x32>
    dfc8:	e05b      	b.n	e082 <_sercom_get_default_pad+0xea>
    dfca:	4a49      	ldr	r2, [pc, #292]	; (e0f0 <_sercom_get_default_pad+0x158>)
    dfcc:	4293      	cmp	r3, r2
    dfce:	d100      	bne.n	dfd2 <_sercom_get_default_pad+0x3a>
    dfd0:	e06c      	b.n	e0ac <_sercom_get_default_pad+0x114>
    dfd2:	4a48      	ldr	r2, [pc, #288]	; (e0f4 <_sercom_get_default_pad+0x15c>)
    dfd4:	4293      	cmp	r3, r2
    dfd6:	d03f      	beq.n	e058 <_sercom_get_default_pad+0xc0>
    dfd8:	e07d      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    dfda:	1cfb      	adds	r3, r7, #3
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	2b01      	cmp	r3, #1
    dfe0:	d00a      	beq.n	dff8 <_sercom_get_default_pad+0x60>
    dfe2:	dc02      	bgt.n	dfea <_sercom_get_default_pad+0x52>
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d005      	beq.n	dff4 <_sercom_get_default_pad+0x5c>
    dfe8:	e075      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    dfea:	2b02      	cmp	r3, #2
    dfec:	d006      	beq.n	dffc <_sercom_get_default_pad+0x64>
    dfee:	2b03      	cmp	r3, #3
    dff0:	d006      	beq.n	e000 <_sercom_get_default_pad+0x68>
    dff2:	e070      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    dff4:	4b40      	ldr	r3, [pc, #256]	; (e0f8 <_sercom_get_default_pad+0x160>)
    dff6:	e06f      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    dff8:	4b40      	ldr	r3, [pc, #256]	; (e0fc <_sercom_get_default_pad+0x164>)
    dffa:	e06d      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    dffc:	4b40      	ldr	r3, [pc, #256]	; (e100 <_sercom_get_default_pad+0x168>)
    dffe:	e06b      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e000:	4b40      	ldr	r3, [pc, #256]	; (e104 <_sercom_get_default_pad+0x16c>)
    e002:	e069      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e004:	1cfb      	adds	r3, r7, #3
    e006:	781b      	ldrb	r3, [r3, #0]
    e008:	2b01      	cmp	r3, #1
    e00a:	d00a      	beq.n	e022 <_sercom_get_default_pad+0x8a>
    e00c:	dc02      	bgt.n	e014 <_sercom_get_default_pad+0x7c>
    e00e:	2b00      	cmp	r3, #0
    e010:	d005      	beq.n	e01e <_sercom_get_default_pad+0x86>
    e012:	e060      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e014:	2b02      	cmp	r3, #2
    e016:	d006      	beq.n	e026 <_sercom_get_default_pad+0x8e>
    e018:	2b03      	cmp	r3, #3
    e01a:	d006      	beq.n	e02a <_sercom_get_default_pad+0x92>
    e01c:	e05b      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e01e:	2303      	movs	r3, #3
    e020:	e05a      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e022:	4b39      	ldr	r3, [pc, #228]	; (e108 <_sercom_get_default_pad+0x170>)
    e024:	e058      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e026:	4b39      	ldr	r3, [pc, #228]	; (e10c <_sercom_get_default_pad+0x174>)
    e028:	e056      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e02a:	4b39      	ldr	r3, [pc, #228]	; (e110 <_sercom_get_default_pad+0x178>)
    e02c:	e054      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e02e:	1cfb      	adds	r3, r7, #3
    e030:	781b      	ldrb	r3, [r3, #0]
    e032:	2b01      	cmp	r3, #1
    e034:	d00a      	beq.n	e04c <_sercom_get_default_pad+0xb4>
    e036:	dc02      	bgt.n	e03e <_sercom_get_default_pad+0xa6>
    e038:	2b00      	cmp	r3, #0
    e03a:	d005      	beq.n	e048 <_sercom_get_default_pad+0xb0>
    e03c:	e04b      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e03e:	2b02      	cmp	r3, #2
    e040:	d006      	beq.n	e050 <_sercom_get_default_pad+0xb8>
    e042:	2b03      	cmp	r3, #3
    e044:	d006      	beq.n	e054 <_sercom_get_default_pad+0xbc>
    e046:	e046      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e048:	4b32      	ldr	r3, [pc, #200]	; (e114 <_sercom_get_default_pad+0x17c>)
    e04a:	e045      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e04c:	4b32      	ldr	r3, [pc, #200]	; (e118 <_sercom_get_default_pad+0x180>)
    e04e:	e043      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e050:	4b32      	ldr	r3, [pc, #200]	; (e11c <_sercom_get_default_pad+0x184>)
    e052:	e041      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e054:	4b32      	ldr	r3, [pc, #200]	; (e120 <_sercom_get_default_pad+0x188>)
    e056:	e03f      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e058:	1cfb      	adds	r3, r7, #3
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	2b01      	cmp	r3, #1
    e05e:	d00a      	beq.n	e076 <_sercom_get_default_pad+0xde>
    e060:	dc02      	bgt.n	e068 <_sercom_get_default_pad+0xd0>
    e062:	2b00      	cmp	r3, #0
    e064:	d005      	beq.n	e072 <_sercom_get_default_pad+0xda>
    e066:	e036      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e068:	2b02      	cmp	r3, #2
    e06a:	d006      	beq.n	e07a <_sercom_get_default_pad+0xe2>
    e06c:	2b03      	cmp	r3, #3
    e06e:	d006      	beq.n	e07e <_sercom_get_default_pad+0xe6>
    e070:	e031      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e072:	4b2c      	ldr	r3, [pc, #176]	; (e124 <_sercom_get_default_pad+0x18c>)
    e074:	e030      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e076:	4b2c      	ldr	r3, [pc, #176]	; (e128 <_sercom_get_default_pad+0x190>)
    e078:	e02e      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e07a:	4b2c      	ldr	r3, [pc, #176]	; (e12c <_sercom_get_default_pad+0x194>)
    e07c:	e02c      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e07e:	4b2c      	ldr	r3, [pc, #176]	; (e130 <_sercom_get_default_pad+0x198>)
    e080:	e02a      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e082:	1cfb      	adds	r3, r7, #3
    e084:	781b      	ldrb	r3, [r3, #0]
    e086:	2b01      	cmp	r3, #1
    e088:	d00a      	beq.n	e0a0 <_sercom_get_default_pad+0x108>
    e08a:	dc02      	bgt.n	e092 <_sercom_get_default_pad+0xfa>
    e08c:	2b00      	cmp	r3, #0
    e08e:	d005      	beq.n	e09c <_sercom_get_default_pad+0x104>
    e090:	e021      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e092:	2b02      	cmp	r3, #2
    e094:	d006      	beq.n	e0a4 <_sercom_get_default_pad+0x10c>
    e096:	2b03      	cmp	r3, #3
    e098:	d006      	beq.n	e0a8 <_sercom_get_default_pad+0x110>
    e09a:	e01c      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e09c:	4b25      	ldr	r3, [pc, #148]	; (e134 <_sercom_get_default_pad+0x19c>)
    e09e:	e01b      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0a0:	4b25      	ldr	r3, [pc, #148]	; (e138 <_sercom_get_default_pad+0x1a0>)
    e0a2:	e019      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0a4:	4b25      	ldr	r3, [pc, #148]	; (e13c <_sercom_get_default_pad+0x1a4>)
    e0a6:	e017      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0a8:	4b25      	ldr	r3, [pc, #148]	; (e140 <_sercom_get_default_pad+0x1a8>)
    e0aa:	e015      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0ac:	1cfb      	adds	r3, r7, #3
    e0ae:	781b      	ldrb	r3, [r3, #0]
    e0b0:	2b01      	cmp	r3, #1
    e0b2:	d00a      	beq.n	e0ca <_sercom_get_default_pad+0x132>
    e0b4:	dc02      	bgt.n	e0bc <_sercom_get_default_pad+0x124>
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d005      	beq.n	e0c6 <_sercom_get_default_pad+0x12e>
    e0ba:	e00c      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e0bc:	2b02      	cmp	r3, #2
    e0be:	d006      	beq.n	e0ce <_sercom_get_default_pad+0x136>
    e0c0:	2b03      	cmp	r3, #3
    e0c2:	d006      	beq.n	e0d2 <_sercom_get_default_pad+0x13a>
    e0c4:	e007      	b.n	e0d6 <_sercom_get_default_pad+0x13e>
    e0c6:	4b1f      	ldr	r3, [pc, #124]	; (e144 <_sercom_get_default_pad+0x1ac>)
    e0c8:	e006      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0ca:	4b1f      	ldr	r3, [pc, #124]	; (e148 <_sercom_get_default_pad+0x1b0>)
    e0cc:	e004      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0ce:	4b1f      	ldr	r3, [pc, #124]	; (e14c <_sercom_get_default_pad+0x1b4>)
    e0d0:	e002      	b.n	e0d8 <_sercom_get_default_pad+0x140>
    e0d2:	4b1f      	ldr	r3, [pc, #124]	; (e150 <_sercom_get_default_pad+0x1b8>)
    e0d4:	e000      	b.n	e0d8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    e0d6:	2300      	movs	r3, #0
}
    e0d8:	0018      	movs	r0, r3
    e0da:	46bd      	mov	sp, r7
    e0dc:	b002      	add	sp, #8
    e0de:	bd80      	pop	{r7, pc}
    e0e0:	42001000 	.word	0x42001000
    e0e4:	42000800 	.word	0x42000800
    e0e8:	42000c00 	.word	0x42000c00
    e0ec:	42001800 	.word	0x42001800
    e0f0:	42001c00 	.word	0x42001c00
    e0f4:	42001400 	.word	0x42001400
    e0f8:	00040003 	.word	0x00040003
    e0fc:	00050003 	.word	0x00050003
    e100:	00060003 	.word	0x00060003
    e104:	00070003 	.word	0x00070003
    e108:	00010003 	.word	0x00010003
    e10c:	001e0003 	.word	0x001e0003
    e110:	001f0003 	.word	0x001f0003
    e114:	00080003 	.word	0x00080003
    e118:	00090003 	.word	0x00090003
    e11c:	000a0003 	.word	0x000a0003
    e120:	000b0003 	.word	0x000b0003
    e124:	00100003 	.word	0x00100003
    e128:	00110003 	.word	0x00110003
    e12c:	00120003 	.word	0x00120003
    e130:	00130003 	.word	0x00130003
    e134:	000c0003 	.word	0x000c0003
    e138:	000d0003 	.word	0x000d0003
    e13c:	000e0003 	.word	0x000e0003
    e140:	000f0003 	.word	0x000f0003
    e144:	00160003 	.word	0x00160003
    e148:	00170003 	.word	0x00170003
    e14c:	00180003 	.word	0x00180003
    e150:	00190003 	.word	0x00190003

0000e154 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    e154:	b590      	push	{r4, r7, lr}
    e156:	b08b      	sub	sp, #44	; 0x2c
    e158:	af00      	add	r7, sp, #0
    e15a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    e15c:	230c      	movs	r3, #12
    e15e:	18fb      	adds	r3, r7, r3
    e160:	4a0f      	ldr	r2, [pc, #60]	; (e1a0 <_sercom_get_sercom_inst_index+0x4c>)
    e162:	ca13      	ldmia	r2!, {r0, r1, r4}
    e164:	c313      	stmia	r3!, {r0, r1, r4}
    e166:	ca13      	ldmia	r2!, {r0, r1, r4}
    e168:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e16a:	2300      	movs	r3, #0
    e16c:	627b      	str	r3, [r7, #36]	; 0x24
    e16e:	e00e      	b.n	e18e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    e170:	230c      	movs	r3, #12
    e172:	18fb      	adds	r3, r7, r3
    e174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e176:	0092      	lsls	r2, r2, #2
    e178:	58d3      	ldr	r3, [r2, r3]
    e17a:	001a      	movs	r2, r3
    e17c:	687b      	ldr	r3, [r7, #4]
    e17e:	429a      	cmp	r2, r3
    e180:	d102      	bne.n	e188 <_sercom_get_sercom_inst_index+0x34>
			return i;
    e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e184:	b2db      	uxtb	r3, r3
    e186:	e006      	b.n	e196 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e18a:	3301      	adds	r3, #1
    e18c:	627b      	str	r3, [r7, #36]	; 0x24
    e18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e190:	2b05      	cmp	r3, #5
    e192:	d9ed      	bls.n	e170 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    e194:	2300      	movs	r3, #0
}
    e196:	0018      	movs	r0, r3
    e198:	46bd      	mov	sp, r7
    e19a:	b00b      	add	sp, #44	; 0x2c
    e19c:	bd90      	pop	{r4, r7, pc}
    e19e:	46c0      	nop			; (mov r8, r8)
    e1a0:	00013adc 	.word	0x00013adc

0000e1a4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	0002      	movs	r2, r0
    e1ac:	1dfb      	adds	r3, r7, #7
    e1ae:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    e1b0:	46c0      	nop			; (mov r8, r8)
    e1b2:	46bd      	mov	sp, r7
    e1b4:	b002      	add	sp, #8
    e1b6:	bd80      	pop	{r7, pc}

0000e1b8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    e1b8:	b580      	push	{r7, lr}
    e1ba:	b084      	sub	sp, #16
    e1bc:	af00      	add	r7, sp, #0
    e1be:	0002      	movs	r2, r0
    e1c0:	6039      	str	r1, [r7, #0]
    e1c2:	1dfb      	adds	r3, r7, #7
    e1c4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    e1c6:	4b13      	ldr	r3, [pc, #76]	; (e214 <_sercom_set_handler+0x5c>)
    e1c8:	781b      	ldrb	r3, [r3, #0]
    e1ca:	2201      	movs	r2, #1
    e1cc:	4053      	eors	r3, r2
    e1ce:	b2db      	uxtb	r3, r3
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d015      	beq.n	e200 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e1d4:	2300      	movs	r3, #0
    e1d6:	60fb      	str	r3, [r7, #12]
    e1d8:	e00c      	b.n	e1f4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    e1da:	4b0f      	ldr	r3, [pc, #60]	; (e218 <_sercom_set_handler+0x60>)
    e1dc:	68fa      	ldr	r2, [r7, #12]
    e1de:	0092      	lsls	r2, r2, #2
    e1e0:	490e      	ldr	r1, [pc, #56]	; (e21c <_sercom_set_handler+0x64>)
    e1e2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    e1e4:	4b0e      	ldr	r3, [pc, #56]	; (e220 <_sercom_set_handler+0x68>)
    e1e6:	68fa      	ldr	r2, [r7, #12]
    e1e8:	0092      	lsls	r2, r2, #2
    e1ea:	2100      	movs	r1, #0
    e1ec:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e1ee:	68fb      	ldr	r3, [r7, #12]
    e1f0:	3301      	adds	r3, #1
    e1f2:	60fb      	str	r3, [r7, #12]
    e1f4:	68fb      	ldr	r3, [r7, #12]
    e1f6:	2b05      	cmp	r3, #5
    e1f8:	d9ef      	bls.n	e1da <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    e1fa:	4b06      	ldr	r3, [pc, #24]	; (e214 <_sercom_set_handler+0x5c>)
    e1fc:	2201      	movs	r2, #1
    e1fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    e200:	1dfb      	adds	r3, r7, #7
    e202:	781a      	ldrb	r2, [r3, #0]
    e204:	4b04      	ldr	r3, [pc, #16]	; (e218 <_sercom_set_handler+0x60>)
    e206:	0092      	lsls	r2, r2, #2
    e208:	6839      	ldr	r1, [r7, #0]
    e20a:	50d1      	str	r1, [r2, r3]
}
    e20c:	46c0      	nop			; (mov r8, r8)
    e20e:	46bd      	mov	sp, r7
    e210:	b004      	add	sp, #16
    e212:	bd80      	pop	{r7, pc}
    e214:	20003c32 	.word	0x20003c32
    e218:	20003c34 	.word	0x20003c34
    e21c:	0000e1a5 	.word	0x0000e1a5
    e220:	20004094 	.word	0x20004094

0000e224 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    e224:	b590      	push	{r4, r7, lr}
    e226:	b085      	sub	sp, #20
    e228:	af00      	add	r7, sp, #0
    e22a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    e22c:	2308      	movs	r3, #8
    e22e:	18fb      	adds	r3, r7, r3
    e230:	4a0b      	ldr	r2, [pc, #44]	; (e260 <_sercom_get_interrupt_vector+0x3c>)
    e232:	6811      	ldr	r1, [r2, #0]
    e234:	6019      	str	r1, [r3, #0]
    e236:	8892      	ldrh	r2, [r2, #4]
    e238:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    e23a:	230f      	movs	r3, #15
    e23c:	18fc      	adds	r4, r7, r3
    e23e:	687b      	ldr	r3, [r7, #4]
    e240:	0018      	movs	r0, r3
    e242:	4b08      	ldr	r3, [pc, #32]	; (e264 <_sercom_get_interrupt_vector+0x40>)
    e244:	4798      	blx	r3
    e246:	0003      	movs	r3, r0
    e248:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    e24a:	230f      	movs	r3, #15
    e24c:	18fb      	adds	r3, r7, r3
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	2208      	movs	r2, #8
    e252:	18ba      	adds	r2, r7, r2
    e254:	5cd3      	ldrb	r3, [r2, r3]
    e256:	b25b      	sxtb	r3, r3
}
    e258:	0018      	movs	r0, r3
    e25a:	46bd      	mov	sp, r7
    e25c:	b005      	add	sp, #20
    e25e:	bd90      	pop	{r4, r7, pc}
    e260:	00013af4 	.word	0x00013af4
    e264:	0000e155 	.word	0x0000e155

0000e268 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    e268:	b580      	push	{r7, lr}
    e26a:	af00      	add	r7, sp, #0
    e26c:	4b03      	ldr	r3, [pc, #12]	; (e27c <SERCOM0_Handler+0x14>)
    e26e:	681b      	ldr	r3, [r3, #0]
    e270:	2000      	movs	r0, #0
    e272:	4798      	blx	r3
    e274:	46c0      	nop			; (mov r8, r8)
    e276:	46bd      	mov	sp, r7
    e278:	bd80      	pop	{r7, pc}
    e27a:	46c0      	nop			; (mov r8, r8)
    e27c:	20003c34 	.word	0x20003c34

0000e280 <SERCOM1_Handler>:
    e280:	b580      	push	{r7, lr}
    e282:	af00      	add	r7, sp, #0
    e284:	4b03      	ldr	r3, [pc, #12]	; (e294 <SERCOM1_Handler+0x14>)
    e286:	685b      	ldr	r3, [r3, #4]
    e288:	2001      	movs	r0, #1
    e28a:	4798      	blx	r3
    e28c:	46c0      	nop			; (mov r8, r8)
    e28e:	46bd      	mov	sp, r7
    e290:	bd80      	pop	{r7, pc}
    e292:	46c0      	nop			; (mov r8, r8)
    e294:	20003c34 	.word	0x20003c34

0000e298 <SERCOM2_Handler>:
    e298:	b580      	push	{r7, lr}
    e29a:	af00      	add	r7, sp, #0
    e29c:	4b03      	ldr	r3, [pc, #12]	; (e2ac <SERCOM2_Handler+0x14>)
    e29e:	689b      	ldr	r3, [r3, #8]
    e2a0:	2002      	movs	r0, #2
    e2a2:	4798      	blx	r3
    e2a4:	46c0      	nop			; (mov r8, r8)
    e2a6:	46bd      	mov	sp, r7
    e2a8:	bd80      	pop	{r7, pc}
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	20003c34 	.word	0x20003c34

0000e2b0 <SERCOM3_Handler>:
    e2b0:	b580      	push	{r7, lr}
    e2b2:	af00      	add	r7, sp, #0
    e2b4:	4b03      	ldr	r3, [pc, #12]	; (e2c4 <SERCOM3_Handler+0x14>)
    e2b6:	68db      	ldr	r3, [r3, #12]
    e2b8:	2003      	movs	r0, #3
    e2ba:	4798      	blx	r3
    e2bc:	46c0      	nop			; (mov r8, r8)
    e2be:	46bd      	mov	sp, r7
    e2c0:	bd80      	pop	{r7, pc}
    e2c2:	46c0      	nop			; (mov r8, r8)
    e2c4:	20003c34 	.word	0x20003c34

0000e2c8 <SERCOM4_Handler>:
    e2c8:	b580      	push	{r7, lr}
    e2ca:	af00      	add	r7, sp, #0
    e2cc:	4b03      	ldr	r3, [pc, #12]	; (e2dc <SERCOM4_Handler+0x14>)
    e2ce:	691b      	ldr	r3, [r3, #16]
    e2d0:	2004      	movs	r0, #4
    e2d2:	4798      	blx	r3
    e2d4:	46c0      	nop			; (mov r8, r8)
    e2d6:	46bd      	mov	sp, r7
    e2d8:	bd80      	pop	{r7, pc}
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	20003c34 	.word	0x20003c34

0000e2e0 <SERCOM5_Handler>:
    e2e0:	b580      	push	{r7, lr}
    e2e2:	af00      	add	r7, sp, #0
    e2e4:	4b03      	ldr	r3, [pc, #12]	; (e2f4 <SERCOM5_Handler+0x14>)
    e2e6:	695b      	ldr	r3, [r3, #20]
    e2e8:	2005      	movs	r0, #5
    e2ea:	4798      	blx	r3
    e2ec:	46c0      	nop			; (mov r8, r8)
    e2ee:	46bd      	mov	sp, r7
    e2f0:	bd80      	pop	{r7, pc}
    e2f2:	46c0      	nop			; (mov r8, r8)
    e2f4:	20003c34 	.word	0x20003c34

0000e2f8 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    e2f8:	b580      	push	{r7, lr}
    e2fa:	af00      	add	r7, sp, #0
}
    e2fc:	46c0      	nop			; (mov r8, r8)
    e2fe:	46bd      	mov	sp, r7
    e300:	bd80      	pop	{r7, pc}

0000e302 <system_pinmux_get_config_defaults>:
{
    e302:	b580      	push	{r7, lr}
    e304:	b082      	sub	sp, #8
    e306:	af00      	add	r7, sp, #0
    e308:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	2280      	movs	r2, #128	; 0x80
    e30e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	2200      	movs	r2, #0
    e314:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	2201      	movs	r2, #1
    e31a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e31c:	687b      	ldr	r3, [r7, #4]
    e31e:	2200      	movs	r2, #0
    e320:	70da      	strb	r2, [r3, #3]
}
    e322:	46c0      	nop			; (mov r8, r8)
    e324:	46bd      	mov	sp, r7
    e326:	b002      	add	sp, #8
    e328:	bd80      	pop	{r7, pc}
	...

0000e32c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    e32c:	b580      	push	{r7, lr}
    e32e:	b084      	sub	sp, #16
    e330:	af00      	add	r7, sp, #0
    e332:	0002      	movs	r2, r0
    e334:	6039      	str	r1, [r7, #0]
    e336:	1dfb      	adds	r3, r7, #7
    e338:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    e33a:	230c      	movs	r3, #12
    e33c:	18fb      	adds	r3, r7, r3
    e33e:	0018      	movs	r0, r3
    e340:	4b10      	ldr	r3, [pc, #64]	; (e384 <port_pin_set_config+0x58>)
    e342:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    e344:	230c      	movs	r3, #12
    e346:	18fb      	adds	r3, r7, r3
    e348:	2280      	movs	r2, #128	; 0x80
    e34a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    e34c:	683b      	ldr	r3, [r7, #0]
    e34e:	781a      	ldrb	r2, [r3, #0]
    e350:	230c      	movs	r3, #12
    e352:	18fb      	adds	r3, r7, r3
    e354:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    e356:	683b      	ldr	r3, [r7, #0]
    e358:	785a      	ldrb	r2, [r3, #1]
    e35a:	230c      	movs	r3, #12
    e35c:	18fb      	adds	r3, r7, r3
    e35e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    e360:	683b      	ldr	r3, [r7, #0]
    e362:	789a      	ldrb	r2, [r3, #2]
    e364:	230c      	movs	r3, #12
    e366:	18fb      	adds	r3, r7, r3
    e368:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    e36a:	230c      	movs	r3, #12
    e36c:	18fa      	adds	r2, r7, r3
    e36e:	1dfb      	adds	r3, r7, #7
    e370:	781b      	ldrb	r3, [r3, #0]
    e372:	0011      	movs	r1, r2
    e374:	0018      	movs	r0, r3
    e376:	4b04      	ldr	r3, [pc, #16]	; (e388 <port_pin_set_config+0x5c>)
    e378:	4798      	blx	r3
}
    e37a:	46c0      	nop			; (mov r8, r8)
    e37c:	46bd      	mov	sp, r7
    e37e:	b004      	add	sp, #16
    e380:	bd80      	pop	{r7, pc}
    e382:	46c0      	nop			; (mov r8, r8)
    e384:	0000e303 	.word	0x0000e303
    e388:	0000f931 	.word	0x0000f931

0000e38c <arch_ioport_pin_to_port_id>:
{
    e38c:	b580      	push	{r7, lr}
    e38e:	b082      	sub	sp, #8
    e390:	af00      	add	r7, sp, #0
    e392:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    e394:	687b      	ldr	r3, [r7, #4]
    e396:	095b      	lsrs	r3, r3, #5
}
    e398:	0018      	movs	r0, r3
    e39a:	46bd      	mov	sp, r7
    e39c:	b002      	add	sp, #8
    e39e:	bd80      	pop	{r7, pc}

0000e3a0 <arch_ioport_port_to_base>:
{
    e3a0:	b580      	push	{r7, lr}
    e3a2:	b082      	sub	sp, #8
    e3a4:	af00      	add	r7, sp, #0
    e3a6:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    e3a8:	687b      	ldr	r3, [r7, #4]
    e3aa:	01db      	lsls	r3, r3, #7
    e3ac:	4a03      	ldr	r2, [pc, #12]	; (e3bc <arch_ioport_port_to_base+0x1c>)
    e3ae:	4694      	mov	ip, r2
    e3b0:	4463      	add	r3, ip
}
    e3b2:	0018      	movs	r0, r3
    e3b4:	46bd      	mov	sp, r7
    e3b6:	b002      	add	sp, #8
    e3b8:	bd80      	pop	{r7, pc}
    e3ba:	46c0      	nop			; (mov r8, r8)
    e3bc:	41004400 	.word	0x41004400

0000e3c0 <arch_ioport_pin_to_base>:
{
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b082      	sub	sp, #8
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    e3c8:	687b      	ldr	r3, [r7, #4]
    e3ca:	0018      	movs	r0, r3
    e3cc:	4b05      	ldr	r3, [pc, #20]	; (e3e4 <arch_ioport_pin_to_base+0x24>)
    e3ce:	4798      	blx	r3
    e3d0:	0003      	movs	r3, r0
    e3d2:	0018      	movs	r0, r3
    e3d4:	4b04      	ldr	r3, [pc, #16]	; (e3e8 <arch_ioport_pin_to_base+0x28>)
    e3d6:	4798      	blx	r3
    e3d8:	0003      	movs	r3, r0
}
    e3da:	0018      	movs	r0, r3
    e3dc:	46bd      	mov	sp, r7
    e3de:	b002      	add	sp, #8
    e3e0:	bd80      	pop	{r7, pc}
    e3e2:	46c0      	nop			; (mov r8, r8)
    e3e4:	0000e38d 	.word	0x0000e38d
    e3e8:	0000e3a1 	.word	0x0000e3a1

0000e3ec <arch_ioport_pin_to_mask>:
{
    e3ec:	b580      	push	{r7, lr}
    e3ee:	b082      	sub	sp, #8
    e3f0:	af00      	add	r7, sp, #0
    e3f2:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    e3f4:	687b      	ldr	r3, [r7, #4]
    e3f6:	221f      	movs	r2, #31
    e3f8:	4013      	ands	r3, r2
    e3fa:	2201      	movs	r2, #1
    e3fc:	409a      	lsls	r2, r3
    e3fe:	0013      	movs	r3, r2
}
    e400:	0018      	movs	r0, r3
    e402:	46bd      	mov	sp, r7
    e404:	b002      	add	sp, #8
    e406:	bd80      	pop	{r7, pc}

0000e408 <arch_ioport_init>:
{
    e408:	b580      	push	{r7, lr}
    e40a:	af00      	add	r7, sp, #0
}
    e40c:	46c0      	nop			; (mov r8, r8)
    e40e:	46bd      	mov	sp, r7
    e410:	bd80      	pop	{r7, pc}
	...

0000e414 <arch_ioport_disable_port>:
{
    e414:	b580      	push	{r7, lr}
    e416:	b084      	sub	sp, #16
    e418:	af00      	add	r7, sp, #0
    e41a:	6078      	str	r0, [r7, #4]
    e41c:	6039      	str	r1, [r7, #0]
	volatile PortGroup *base = arch_ioport_port_to_base(port);
    e41e:	687b      	ldr	r3, [r7, #4]
    e420:	0018      	movs	r0, r3
    e422:	4b15      	ldr	r3, [pc, #84]	; (e478 <arch_ioport_disable_port+0x64>)
    e424:	4798      	blx	r3
    e426:	0003      	movs	r3, r0
    e428:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < 32; i++) {
    e42a:	2300      	movs	r3, #0
    e42c:	60fb      	str	r3, [r7, #12]
    e42e:	e01b      	b.n	e468 <arch_ioport_disable_port+0x54>
		if (mask & (1 << i)) {
    e430:	2201      	movs	r2, #1
    e432:	68fb      	ldr	r3, [r7, #12]
    e434:	409a      	lsls	r2, r3
    e436:	0013      	movs	r3, r2
    e438:	001a      	movs	r2, r3
    e43a:	683b      	ldr	r3, [r7, #0]
    e43c:	4013      	ands	r3, r2
    e43e:	d010      	beq.n	e462 <arch_ioport_disable_port+0x4e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    e440:	68ba      	ldr	r2, [r7, #8]
    e442:	2140      	movs	r1, #64	; 0x40
    e444:	68fb      	ldr	r3, [r7, #12]
    e446:	18d3      	adds	r3, r2, r3
    e448:	185b      	adds	r3, r3, r1
    e44a:	781b      	ldrb	r3, [r3, #0]
    e44c:	b2db      	uxtb	r3, r3
    e44e:	2201      	movs	r2, #1
    e450:	4313      	orrs	r3, r2
    e452:	b2d8      	uxtb	r0, r3
    e454:	68ba      	ldr	r2, [r7, #8]
    e456:	2140      	movs	r1, #64	; 0x40
    e458:	68fb      	ldr	r3, [r7, #12]
    e45a:	18d3      	adds	r3, r2, r3
    e45c:	185b      	adds	r3, r3, r1
    e45e:	1c02      	adds	r2, r0, #0
    e460:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 32; i++) {
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	3301      	adds	r3, #1
    e466:	60fb      	str	r3, [r7, #12]
    e468:	68fb      	ldr	r3, [r7, #12]
    e46a:	2b1f      	cmp	r3, #31
    e46c:	d9e0      	bls.n	e430 <arch_ioport_disable_port+0x1c>
}
    e46e:	46c0      	nop			; (mov r8, r8)
    e470:	46bd      	mov	sp, r7
    e472:	b004      	add	sp, #16
    e474:	bd80      	pop	{r7, pc}
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	0000e3a1 	.word	0x0000e3a1

0000e47c <arch_ioport_disable_pin>:
{
    e47c:	b590      	push	{r4, r7, lr}
    e47e:	b083      	sub	sp, #12
    e480:	af00      	add	r7, sp, #0
    e482:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
    e484:	687b      	ldr	r3, [r7, #4]
    e486:	0018      	movs	r0, r3
    e488:	4b07      	ldr	r3, [pc, #28]	; (e4a8 <arch_ioport_disable_pin+0x2c>)
    e48a:	4798      	blx	r3
    e48c:	0004      	movs	r4, r0
    e48e:	687b      	ldr	r3, [r7, #4]
    e490:	0018      	movs	r0, r3
    e492:	4b06      	ldr	r3, [pc, #24]	; (e4ac <arch_ioport_disable_pin+0x30>)
    e494:	4798      	blx	r3
    e496:	0003      	movs	r3, r0
    e498:	0019      	movs	r1, r3
    e49a:	0020      	movs	r0, r4
    e49c:	4b04      	ldr	r3, [pc, #16]	; (e4b0 <arch_ioport_disable_pin+0x34>)
    e49e:	4798      	blx	r3
}
    e4a0:	46c0      	nop			; (mov r8, r8)
    e4a2:	46bd      	mov	sp, r7
    e4a4:	b003      	add	sp, #12
    e4a6:	bd90      	pop	{r4, r7, pc}
    e4a8:	0000e38d 	.word	0x0000e38d
    e4ac:	0000e3ed 	.word	0x0000e3ed
    e4b0:	0000e415 	.word	0x0000e415

0000e4b4 <arch_ioport_set_port_mode>:
{
    e4b4:	b580      	push	{r7, lr}
    e4b6:	b08a      	sub	sp, #40	; 0x28
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	60f8      	str	r0, [r7, #12]
    e4bc:	60b9      	str	r1, [r7, #8]
    e4be:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    e4c0:	68fb      	ldr	r3, [r7, #12]
    e4c2:	0018      	movs	r0, r3
    e4c4:	4b2b      	ldr	r3, [pc, #172]	; (e574 <arch_ioport_set_port_mode+0xc0>)
    e4c6:	4798      	blx	r3
    e4c8:	0003      	movs	r3, r0
    e4ca:	623b      	str	r3, [r7, #32]
	uint32_t config_mask = 0;
    e4cc:	2300      	movs	r3, #0
    e4ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    e4d0:	2300      	movs	r3, #0
    e4d2:	61fb      	str	r3, [r7, #28]
	config_mask |= PORT_WRCONFIG_INEN;
    e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4d6:	2280      	movs	r2, #128	; 0x80
    e4d8:	0292      	lsls	r2, r2, #10
    e4da:	4313      	orrs	r3, r2
    e4dc:	627b      	str	r3, [r7, #36]	; 0x24
	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    e4de:	687b      	ldr	r3, [r7, #4]
    e4e0:	2220      	movs	r2, #32
    e4e2:	4013      	ands	r3, r2
    e4e4:	d103      	bne.n	e4ee <arch_ioport_set_port_mode+0x3a>
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	2210      	movs	r2, #16
    e4ea:	4013      	ands	r3, r2
    e4ec:	d004      	beq.n	e4f8 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e4f0:	2280      	movs	r2, #128	; 0x80
    e4f2:	02d2      	lsls	r2, r2, #11
    e4f4:	4313      	orrs	r3, r2
    e4f6:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    e4f8:	687b      	ldr	r3, [r7, #4]
    e4fa:	2280      	movs	r2, #128	; 0x80
    e4fc:	4013      	ands	r3, r2
    e4fe:	d004      	beq.n	e50a <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e502:	2280      	movs	r2, #128	; 0x80
    e504:	03d2      	lsls	r2, r2, #15
    e506:	4313      	orrs	r3, r2
    e508:	627b      	str	r3, [r7, #36]	; 0x24
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	061a      	lsls	r2, r3, #24
    e50e:	23f0      	movs	r3, #240	; 0xf0
    e510:	051b      	lsls	r3, r3, #20
    e512:	4013      	ands	r3, r2
    e514:	61fb      	str	r3, [r7, #28]
	uint32_t lower_pin_mask = (mask & 0xFFFF);
    e516:	68bb      	ldr	r3, [r7, #8]
    e518:	041b      	lsls	r3, r3, #16
    e51a:	0c1b      	lsrs	r3, r3, #16
    e51c:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    e51e:	68bb      	ldr	r3, [r7, #8]
    e520:	0c1b      	lsrs	r3, r3, #16
    e522:	617b      	str	r3, [r7, #20]
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e524:	69ba      	ldr	r2, [r7, #24]
    e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e528:	431a      	orrs	r2, r3
			config_mask | config_mux |
    e52a:	69fb      	ldr	r3, [r7, #28]
    e52c:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    e52e:	22a0      	movs	r2, #160	; 0xa0
    e530:	05d2      	lsls	r2, r2, #23
    e532:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    e534:	6a3b      	ldr	r3, [r7, #32]
    e536:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e538:	697a      	ldr	r2, [r7, #20]
    e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e53c:	431a      	orrs	r2, r3
			config_mask | config_mux |
    e53e:	69fb      	ldr	r3, [r7, #28]
    e540:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    e542:	22d0      	movs	r2, #208	; 0xd0
    e544:	0612      	lsls	r2, r2, #24
    e546:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    e548:	6a3b      	ldr	r3, [r7, #32]
    e54a:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_PULLDOWN) {
    e54c:	687b      	ldr	r3, [r7, #4]
    e54e:	2220      	movs	r2, #32
    e550:	4013      	ands	r3, r2
    e552:	d003      	beq.n	e55c <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    e554:	6a3b      	ldr	r3, [r7, #32]
    e556:	68ba      	ldr	r2, [r7, #8]
    e558:	615a      	str	r2, [r3, #20]
}
    e55a:	e006      	b.n	e56a <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	2210      	movs	r2, #16
    e560:	4013      	ands	r3, r2
    e562:	d002      	beq.n	e56a <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    e564:	6a3b      	ldr	r3, [r7, #32]
    e566:	68ba      	ldr	r2, [r7, #8]
    e568:	619a      	str	r2, [r3, #24]
}
    e56a:	46c0      	nop			; (mov r8, r8)
    e56c:	46bd      	mov	sp, r7
    e56e:	b00a      	add	sp, #40	; 0x28
    e570:	bd80      	pop	{r7, pc}
    e572:	46c0      	nop			; (mov r8, r8)
    e574:	0000e3a1 	.word	0x0000e3a1

0000e578 <arch_ioport_set_pin_mode>:
{
    e578:	b590      	push	{r4, r7, lr}
    e57a:	b083      	sub	sp, #12
    e57c:	af00      	add	r7, sp, #0
    e57e:	6078      	str	r0, [r7, #4]
    e580:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	0018      	movs	r0, r3
    e586:	4b08      	ldr	r3, [pc, #32]	; (e5a8 <arch_ioport_set_pin_mode+0x30>)
    e588:	4798      	blx	r3
    e58a:	0004      	movs	r4, r0
    e58c:	687b      	ldr	r3, [r7, #4]
    e58e:	0018      	movs	r0, r3
    e590:	4b06      	ldr	r3, [pc, #24]	; (e5ac <arch_ioport_set_pin_mode+0x34>)
    e592:	4798      	blx	r3
    e594:	0001      	movs	r1, r0
    e596:	683b      	ldr	r3, [r7, #0]
    e598:	001a      	movs	r2, r3
    e59a:	0020      	movs	r0, r4
    e59c:	4b04      	ldr	r3, [pc, #16]	; (e5b0 <arch_ioport_set_pin_mode+0x38>)
    e59e:	4798      	blx	r3
}
    e5a0:	46c0      	nop			; (mov r8, r8)
    e5a2:	46bd      	mov	sp, r7
    e5a4:	b003      	add	sp, #12
    e5a6:	bd90      	pop	{r4, r7, pc}
    e5a8:	0000e38d 	.word	0x0000e38d
    e5ac:	0000e3ed 	.word	0x0000e3ed
    e5b0:	0000e4b5 	.word	0x0000e4b5

0000e5b4 <arch_ioport_set_pin_dir>:
{
    e5b4:	b580      	push	{r7, lr}
    e5b6:	b084      	sub	sp, #16
    e5b8:	af00      	add	r7, sp, #0
    e5ba:	6078      	str	r0, [r7, #4]
    e5bc:	000a      	movs	r2, r1
    e5be:	1cfb      	adds	r3, r7, #3
    e5c0:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	0018      	movs	r0, r3
    e5c6:	4b18      	ldr	r3, [pc, #96]	; (e628 <arch_ioport_set_pin_dir+0x74>)
    e5c8:	4798      	blx	r3
    e5ca:	0003      	movs	r3, r0
    e5cc:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
    e5ce:	1cfb      	adds	r3, r7, #3
    e5d0:	781b      	ldrb	r3, [r3, #0]
    e5d2:	2b01      	cmp	r3, #1
    e5d4:	d107      	bne.n	e5e6 <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	0018      	movs	r0, r3
    e5da:	4b14      	ldr	r3, [pc, #80]	; (e62c <arch_ioport_set_pin_dir+0x78>)
    e5dc:	4798      	blx	r3
    e5de:	0002      	movs	r2, r0
    e5e0:	68fb      	ldr	r3, [r7, #12]
    e5e2:	609a      	str	r2, [r3, #8]
    e5e4:	e00a      	b.n	e5fc <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    e5e6:	1cfb      	adds	r3, r7, #3
    e5e8:	781b      	ldrb	r3, [r3, #0]
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	d106      	bne.n	e5fc <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	0018      	movs	r0, r3
    e5f2:	4b0e      	ldr	r3, [pc, #56]	; (e62c <arch_ioport_set_pin_dir+0x78>)
    e5f4:	4798      	blx	r3
    e5f6:	0002      	movs	r2, r0
    e5f8:	68fb      	ldr	r3, [r7, #12]
    e5fa:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    e5fc:	68fa      	ldr	r2, [r7, #12]
    e5fe:	2140      	movs	r1, #64	; 0x40
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	18d3      	adds	r3, r2, r3
    e604:	185b      	adds	r3, r3, r1
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	b2db      	uxtb	r3, r3
    e60a:	2202      	movs	r2, #2
    e60c:	4313      	orrs	r3, r2
    e60e:	b2d8      	uxtb	r0, r3
    e610:	68fa      	ldr	r2, [r7, #12]
    e612:	2140      	movs	r1, #64	; 0x40
    e614:	687b      	ldr	r3, [r7, #4]
    e616:	18d3      	adds	r3, r2, r3
    e618:	185b      	adds	r3, r3, r1
    e61a:	1c02      	adds	r2, r0, #0
    e61c:	701a      	strb	r2, [r3, #0]
}
    e61e:	46c0      	nop			; (mov r8, r8)
    e620:	46bd      	mov	sp, r7
    e622:	b004      	add	sp, #16
    e624:	bd80      	pop	{r7, pc}
    e626:	46c0      	nop			; (mov r8, r8)
    e628:	0000e3c1 	.word	0x0000e3c1
    e62c:	0000e3ed 	.word	0x0000e3ed

0000e630 <arch_ioport_set_pin_level>:
{
    e630:	b590      	push	{r4, r7, lr}
    e632:	b083      	sub	sp, #12
    e634:	af00      	add	r7, sp, #0
    e636:	6078      	str	r0, [r7, #4]
    e638:	000a      	movs	r2, r1
    e63a:	1cfb      	adds	r3, r7, #3
    e63c:	701a      	strb	r2, [r3, #0]
	if (level) {
    e63e:	1cfb      	adds	r3, r7, #3
    e640:	781b      	ldrb	r3, [r3, #0]
    e642:	2b00      	cmp	r3, #0
    e644:	d00b      	beq.n	e65e <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    e646:	687b      	ldr	r3, [r7, #4]
    e648:	0018      	movs	r0, r3
    e64a:	4b0c      	ldr	r3, [pc, #48]	; (e67c <arch_ioport_set_pin_level+0x4c>)
    e64c:	4798      	blx	r3
    e64e:	0004      	movs	r4, r0
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	0018      	movs	r0, r3
    e654:	4b0a      	ldr	r3, [pc, #40]	; (e680 <arch_ioport_set_pin_level+0x50>)
    e656:	4798      	blx	r3
    e658:	0003      	movs	r3, r0
    e65a:	61a3      	str	r3, [r4, #24]
}
    e65c:	e00a      	b.n	e674 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    e65e:	687b      	ldr	r3, [r7, #4]
    e660:	0018      	movs	r0, r3
    e662:	4b06      	ldr	r3, [pc, #24]	; (e67c <arch_ioport_set_pin_level+0x4c>)
    e664:	4798      	blx	r3
    e666:	0004      	movs	r4, r0
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	0018      	movs	r0, r3
    e66c:	4b04      	ldr	r3, [pc, #16]	; (e680 <arch_ioport_set_pin_level+0x50>)
    e66e:	4798      	blx	r3
    e670:	0003      	movs	r3, r0
    e672:	6163      	str	r3, [r4, #20]
}
    e674:	46c0      	nop			; (mov r8, r8)
    e676:	46bd      	mov	sp, r7
    e678:	b003      	add	sp, #12
    e67a:	bd90      	pop	{r4, r7, pc}
    e67c:	0000e3c1 	.word	0x0000e3c1
    e680:	0000e3ed 	.word	0x0000e3ed

0000e684 <ioport_init>:
{
    e684:	b580      	push	{r7, lr}
    e686:	af00      	add	r7, sp, #0
	arch_ioport_init();
    e688:	4b02      	ldr	r3, [pc, #8]	; (e694 <ioport_init+0x10>)
    e68a:	4798      	blx	r3
}
    e68c:	46c0      	nop			; (mov r8, r8)
    e68e:	46bd      	mov	sp, r7
    e690:	bd80      	pop	{r7, pc}
    e692:	46c0      	nop			; (mov r8, r8)
    e694:	0000e409 	.word	0x0000e409

0000e698 <ioport_disable_pin>:
{
    e698:	b580      	push	{r7, lr}
    e69a:	b082      	sub	sp, #8
    e69c:	af00      	add	r7, sp, #0
    e69e:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_pin(pin);
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	0018      	movs	r0, r3
    e6a4:	4b02      	ldr	r3, [pc, #8]	; (e6b0 <ioport_disable_pin+0x18>)
    e6a6:	4798      	blx	r3
}
    e6a8:	46c0      	nop			; (mov r8, r8)
    e6aa:	46bd      	mov	sp, r7
    e6ac:	b002      	add	sp, #8
    e6ae:	bd80      	pop	{r7, pc}
    e6b0:	0000e47d 	.word	0x0000e47d

0000e6b4 <ioport_set_pin_mode>:
{
    e6b4:	b580      	push	{r7, lr}
    e6b6:	b082      	sub	sp, #8
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	6078      	str	r0, [r7, #4]
    e6bc:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    e6be:	683a      	ldr	r2, [r7, #0]
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	0011      	movs	r1, r2
    e6c4:	0018      	movs	r0, r3
    e6c6:	4b03      	ldr	r3, [pc, #12]	; (e6d4 <ioport_set_pin_mode+0x20>)
    e6c8:	4798      	blx	r3
}
    e6ca:	46c0      	nop			; (mov r8, r8)
    e6cc:	46bd      	mov	sp, r7
    e6ce:	b002      	add	sp, #8
    e6d0:	bd80      	pop	{r7, pc}
    e6d2:	46c0      	nop			; (mov r8, r8)
    e6d4:	0000e579 	.word	0x0000e579

0000e6d8 <ioport_set_pin_dir>:
{
    e6d8:	b580      	push	{r7, lr}
    e6da:	b082      	sub	sp, #8
    e6dc:	af00      	add	r7, sp, #0
    e6de:	6078      	str	r0, [r7, #4]
    e6e0:	000a      	movs	r2, r1
    e6e2:	1cfb      	adds	r3, r7, #3
    e6e4:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    e6e6:	1cfb      	adds	r3, r7, #3
    e6e8:	781a      	ldrb	r2, [r3, #0]
    e6ea:	687b      	ldr	r3, [r7, #4]
    e6ec:	0011      	movs	r1, r2
    e6ee:	0018      	movs	r0, r3
    e6f0:	4b02      	ldr	r3, [pc, #8]	; (e6fc <ioport_set_pin_dir+0x24>)
    e6f2:	4798      	blx	r3
}
    e6f4:	46c0      	nop			; (mov r8, r8)
    e6f6:	46bd      	mov	sp, r7
    e6f8:	b002      	add	sp, #8
    e6fa:	bd80      	pop	{r7, pc}
    e6fc:	0000e5b5 	.word	0x0000e5b5

0000e700 <ioport_set_pin_level>:
{
    e700:	b580      	push	{r7, lr}
    e702:	b082      	sub	sp, #8
    e704:	af00      	add	r7, sp, #0
    e706:	6078      	str	r0, [r7, #4]
    e708:	000a      	movs	r2, r1
    e70a:	1cfb      	adds	r3, r7, #3
    e70c:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    e70e:	1cfb      	adds	r3, r7, #3
    e710:	781a      	ldrb	r2, [r3, #0]
    e712:	687b      	ldr	r3, [r7, #4]
    e714:	0011      	movs	r1, r2
    e716:	0018      	movs	r0, r3
    e718:	4b02      	ldr	r3, [pc, #8]	; (e724 <ioport_set_pin_level+0x24>)
    e71a:	4798      	blx	r3
}
    e71c:	46c0      	nop			; (mov r8, r8)
    e71e:	46bd      	mov	sp, r7
    e720:	b002      	add	sp, #8
    e722:	bd80      	pop	{r7, pc}
    e724:	0000e631 	.word	0x0000e631

0000e728 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    e728:	b580      	push	{r7, lr}
    e72a:	af00      	add	r7, sp, #0
	ioport_init();
    e72c:	4b56      	ldr	r3, [pc, #344]	; (e888 <system_board_init+0x160>)
    e72e:	4798      	blx	r3
	
	// Set up motor
	ioport_set_pin_dir(MOTOR_ENABLE_GPIO, IOPORT_DIR_OUTPUT);
    e730:	2101      	movs	r1, #1
    e732:	2000      	movs	r0, #0
    e734:	4b55      	ldr	r3, [pc, #340]	; (e88c <system_board_init+0x164>)
    e736:	4798      	blx	r3
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    e738:	2100      	movs	r1, #0
    e73a:	2000      	movs	r0, #0
    e73c:	4b54      	ldr	r3, [pc, #336]	; (e890 <system_board_init+0x168>)
    e73e:	4798      	blx	r3
	ioport_set_pin_dir(MOTOR_READY_GPIO, IOPORT_DIR_INPUT);
    e740:	2100      	movs	r1, #0
    e742:	2001      	movs	r0, #1
    e744:	4b51      	ldr	r3, [pc, #324]	; (e88c <system_board_init+0x164>)
    e746:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_READY_GPIO, IOPORT_MODE_PULLDOWN);
    e748:	2120      	movs	r1, #32
    e74a:	2001      	movs	r0, #1
    e74c:	4b51      	ldr	r3, [pc, #324]	; (e894 <system_board_init+0x16c>)
    e74e:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_SPEED_GPIO, MOTOR_SPEED_GPIO_FLAGS);
    e750:	2101      	movs	r1, #1
    e752:	2002      	movs	r0, #2
    e754:	4b4f      	ldr	r3, [pc, #316]	; (e894 <system_board_init+0x16c>)
    e756:	4798      	blx	r3
	ioport_disable_pin(MOTOR_SPEED_GPIO);
    e758:	2002      	movs	r0, #2
    e75a:	4b4f      	ldr	r3, [pc, #316]	; (e898 <system_board_init+0x170>)
    e75c:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_NTC_GPIO, MOTOR_NTC_GPIO_FLAGS);
    e75e:	2101      	movs	r1, #1
    e760:	2028      	movs	r0, #40	; 0x28
    e762:	4b4c      	ldr	r3, [pc, #304]	; (e894 <system_board_init+0x16c>)
    e764:	4798      	blx	r3
	ioport_disable_pin(MOTOR_NTC_GPIO);
    e766:	2028      	movs	r0, #40	; 0x28
    e768:	4b4b      	ldr	r3, [pc, #300]	; (e898 <system_board_init+0x170>)
    e76a:	4798      	blx	r3
	
	// Control inputs
	ioport_set_pin_mode(INPUT_POTENTIOMETER_GPIO, INPUT_POTENTIOMETER_GPIO_FLAGS);
    e76c:	2101      	movs	r1, #1
    e76e:	2029      	movs	r0, #41	; 0x29
    e770:	4b48      	ldr	r3, [pc, #288]	; (e894 <system_board_init+0x16c>)
    e772:	4798      	blx	r3
	ioport_disable_pin(INPUT_POTENTIOMETER_GPIO);
    e774:	2029      	movs	r0, #41	; 0x29
    e776:	4b48      	ldr	r3, [pc, #288]	; (e898 <system_board_init+0x170>)
    e778:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_PUSHBUTTON_GPIO, IOPORT_DIR_INPUT);
    e77a:	2100      	movs	r1, #0
    e77c:	200c      	movs	r0, #12
    e77e:	4b43      	ldr	r3, [pc, #268]	; (e88c <system_board_init+0x164>)
    e780:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_PUSHBUTTON_GPIO, IOPORT_MODE_PULLDOWN);
    e782:	2120      	movs	r1, #32
    e784:	200c      	movs	r0, #12
    e786:	4b43      	ldr	r3, [pc, #268]	; (e894 <system_board_init+0x16c>)
    e788:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_ENABLE_GPIO, IOPORT_DIR_INPUT);
    e78a:	2100      	movs	r1, #0
    e78c:	202b      	movs	r0, #43	; 0x2b
    e78e:	4b3f      	ldr	r3, [pc, #252]	; (e88c <system_board_init+0x164>)
    e790:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_ENABLE_GPIO, IOPORT_MODE_PULLDOWN);
    e792:	2120      	movs	r1, #32
    e794:	202b      	movs	r0, #43	; 0x2b
    e796:	4b3f      	ldr	r3, [pc, #252]	; (e894 <system_board_init+0x16c>)
    e798:	4798      	blx	r3
	
	// Pressure sensors
	ioport_set_pin_mode(PRESSURE_SENSOR_0_GPIO, PRESSURE_SENSOR_0_GPIO_FLAGS);
    e79a:	2101      	movs	r1, #1
    e79c:	2004      	movs	r0, #4
    e79e:	4b3d      	ldr	r3, [pc, #244]	; (e894 <system_board_init+0x16c>)
    e7a0:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_0_GPIO);
    e7a2:	2004      	movs	r0, #4
    e7a4:	4b3c      	ldr	r3, [pc, #240]	; (e898 <system_board_init+0x170>)
    e7a6:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_1_GPIO, PRESSURE_SENSOR_1_GPIO_FLAGS);
    e7a8:	2101      	movs	r1, #1
    e7aa:	2005      	movs	r0, #5
    e7ac:	4b39      	ldr	r3, [pc, #228]	; (e894 <system_board_init+0x16c>)
    e7ae:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_1_GPIO);
    e7b0:	2005      	movs	r0, #5
    e7b2:	4b39      	ldr	r3, [pc, #228]	; (e898 <system_board_init+0x170>)
    e7b4:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_2_GPIO, PRESSURE_SENSOR_2_GPIO_FLAGS);
    e7b6:	2101      	movs	r1, #1
    e7b8:	2006      	movs	r0, #6
    e7ba:	4b36      	ldr	r3, [pc, #216]	; (e894 <system_board_init+0x16c>)
    e7bc:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_2_GPIO);
    e7be:	2006      	movs	r0, #6
    e7c0:	4b35      	ldr	r3, [pc, #212]	; (e898 <system_board_init+0x170>)
    e7c2:	4798      	blx	r3
	
	// Flow meter
	ioport_set_pin_mode(FLOW_SENSOR_SDA_GPIO, FLOW_SENSOR_SDA_GPIO_FLAGS);
    e7c4:	2102      	movs	r1, #2
    e7c6:	2016      	movs	r0, #22
    e7c8:	4b32      	ldr	r3, [pc, #200]	; (e894 <system_board_init+0x16c>)
    e7ca:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SDA_GPIO);
    e7cc:	2016      	movs	r0, #22
    e7ce:	4b32      	ldr	r3, [pc, #200]	; (e898 <system_board_init+0x170>)
    e7d0:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_SCL_GPIO, FLOW_SENSOR_SCL_GPIO_FLAGS);
    e7d2:	2102      	movs	r1, #2
    e7d4:	2017      	movs	r0, #23
    e7d6:	4b2f      	ldr	r3, [pc, #188]	; (e894 <system_board_init+0x16c>)
    e7d8:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SCL_GPIO);
    e7da:	2017      	movs	r0, #23
    e7dc:	4b2e      	ldr	r3, [pc, #184]	; (e898 <system_board_init+0x170>)
    e7de:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_ANALOG_GPIO, FLOW_SENSOR_ANALOG_GPIO_FLAGS);
    e7e0:	2101      	movs	r1, #1
    e7e2:	2022      	movs	r0, #34	; 0x22
    e7e4:	4b2b      	ldr	r3, [pc, #172]	; (e894 <system_board_init+0x16c>)
    e7e6:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_ANALOG_GPIO);
    e7e8:	2022      	movs	r0, #34	; 0x22
    e7ea:	4b2b      	ldr	r3, [pc, #172]	; (e898 <system_board_init+0x170>)
    e7ec:	4798      	blx	r3
	
	// Screen
	ioport_set_pin_mode(LCD_SDA_GPIO, LCD_SDA_GPIO_FLAGS);
    e7ee:	2102      	movs	r1, #2
    e7f0:	2010      	movs	r0, #16
    e7f2:	4b28      	ldr	r3, [pc, #160]	; (e894 <system_board_init+0x16c>)
    e7f4:	4798      	blx	r3
	ioport_disable_pin(LCD_SDA_GPIO);
    e7f6:	2010      	movs	r0, #16
    e7f8:	4b27      	ldr	r3, [pc, #156]	; (e898 <system_board_init+0x170>)
    e7fa:	4798      	blx	r3
	ioport_set_pin_mode(LCD_SCL_GPIO, LCD_SCL_GPIO_FLAGS);
    e7fc:	2102      	movs	r1, #2
    e7fe:	2011      	movs	r0, #17
    e800:	4b24      	ldr	r3, [pc, #144]	; (e894 <system_board_init+0x16c>)
    e802:	4798      	blx	r3
	ioport_disable_pin(LCD_SCL_GPIO);
    e804:	2011      	movs	r0, #17
    e806:	4b24      	ldr	r3, [pc, #144]	; (e898 <system_board_init+0x170>)
    e808:	4798      	blx	r3
	
	// FRAM interface
	ioport_set_pin_dir(FRAM_CS_GPIO, IOPORT_DIR_OUTPUT);
    e80a:	2101      	movs	r1, #1
    e80c:	200b      	movs	r0, #11
    e80e:	4b1f      	ldr	r3, [pc, #124]	; (e88c <system_board_init+0x164>)
    e810:	4798      	blx	r3
	ioport_set_pin_level(FRAM_CS_GPIO, !FRAM_CS_SELECT_LEVEL);
    e812:	2101      	movs	r1, #1
    e814:	200b      	movs	r0, #11
    e816:	4b1e      	ldr	r3, [pc, #120]	; (e890 <system_board_init+0x168>)
    e818:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_SCK_GPIO, FRAM_SCK_GPIO_FLAGS);
    e81a:	2102      	movs	r1, #2
    e81c:	2009      	movs	r0, #9
    e81e:	4b1d      	ldr	r3, [pc, #116]	; (e894 <system_board_init+0x16c>)
    e820:	4798      	blx	r3
	ioport_disable_pin(FRAM_SCK_GPIO);
    e822:	2009      	movs	r0, #9
    e824:	4b1c      	ldr	r3, [pc, #112]	; (e898 <system_board_init+0x170>)
    e826:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MISO_GPIO, FRAM_MISO_GPIO_FLAGS);
    e828:	2102      	movs	r1, #2
    e82a:	200a      	movs	r0, #10
    e82c:	4b19      	ldr	r3, [pc, #100]	; (e894 <system_board_init+0x16c>)
    e82e:	4798      	blx	r3
	ioport_disable_pin(FRAM_MISO_GPIO);
    e830:	200a      	movs	r0, #10
    e832:	4b19      	ldr	r3, [pc, #100]	; (e898 <system_board_init+0x170>)
    e834:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MOSI_GPIO, FRAM_MOSI_GPIO_FLAGS);
    e836:	2102      	movs	r1, #2
    e838:	2008      	movs	r0, #8
    e83a:	4b16      	ldr	r3, [pc, #88]	; (e894 <system_board_init+0x16c>)
    e83c:	4798      	blx	r3
	ioport_disable_pin(FRAM_MOSI_GPIO);
    e83e:	2008      	movs	r0, #8
    e840:	4b15      	ldr	r3, [pc, #84]	; (e898 <system_board_init+0x170>)
    e842:	4798      	blx	r3
	
	// Alarm pins
	ioport_set_pin_dir(BUZZER_GPIO, IOPORT_DIR_OUTPUT);
    e844:	2101      	movs	r1, #1
    e846:	2036      	movs	r0, #54	; 0x36
    e848:	4b10      	ldr	r3, [pc, #64]	; (e88c <system_board_init+0x164>)
    e84a:	4798      	blx	r3
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    e84c:	2100      	movs	r1, #0
    e84e:	2036      	movs	r0, #54	; 0x36
    e850:	4b0f      	ldr	r3, [pc, #60]	; (e890 <system_board_init+0x168>)
    e852:	4798      	blx	r3
	ioport_set_pin_dir(WATCHDOG_GPIO, IOPORT_DIR_OUTPUT);
    e854:	2101      	movs	r1, #1
    e856:	2015      	movs	r0, #21
    e858:	4b0c      	ldr	r3, [pc, #48]	; (e88c <system_board_init+0x164>)
    e85a:	4798      	blx	r3
	ioport_set_pin_level(WATCHDOG_GPIO, !WATCHDOG_GPIO_ACTIVE_LEVEL);
    e85c:	2100      	movs	r1, #0
    e85e:	2015      	movs	r0, #21
    e860:	4b0b      	ldr	r3, [pc, #44]	; (e890 <system_board_init+0x168>)
    e862:	4798      	blx	r3

	// Power monitoring
	ioport_set_pin_dir(POWER_MONITOR_GPIO, IOPORT_DIR_INPUT);
    e864:	2100      	movs	r1, #0
    e866:	201c      	movs	r0, #28
    e868:	4b08      	ldr	r3, [pc, #32]	; (e88c <system_board_init+0x164>)
    e86a:	4798      	blx	r3
	ioport_set_pin_mode(POWER_MONITOR_GPIO, IOPORT_MODE_PULLDOWN);
    e86c:	2120      	movs	r1, #32
    e86e:	201c      	movs	r0, #28
    e870:	4b08      	ldr	r3, [pc, #32]	; (e894 <system_board_init+0x16c>)
    e872:	4798      	blx	r3
	
	// Vref
	ioport_set_pin_mode(VREFA_GPIO, VREFA_GPIO_FLAGS);
    e874:	2102      	movs	r1, #2
    e876:	2003      	movs	r0, #3
    e878:	4b06      	ldr	r3, [pc, #24]	; (e894 <system_board_init+0x16c>)
    e87a:	4798      	blx	r3
	ioport_disable_pin(VREFA_GPIO);
    e87c:	2003      	movs	r0, #3
    e87e:	4b06      	ldr	r3, [pc, #24]	; (e898 <system_board_init+0x170>)
    e880:	4798      	blx	r3
    e882:	46c0      	nop			; (mov r8, r8)
    e884:	46bd      	mov	sp, r7
    e886:	bd80      	pop	{r7, pc}
    e888:	0000e685 	.word	0x0000e685
    e88c:	0000e6d9 	.word	0x0000e6d9
    e890:	0000e701 	.word	0x0000e701
    e894:	0000e6b5 	.word	0x0000e6b5
    e898:	0000e699 	.word	0x0000e699

0000e89c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    e89c:	b580      	push	{r7, lr}
    e89e:	b082      	sub	sp, #8
    e8a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    e8a2:	4b10      	ldr	r3, [pc, #64]	; (e8e4 <cpu_irq_enter_critical+0x48>)
    e8a4:	681b      	ldr	r3, [r3, #0]
    e8a6:	2b00      	cmp	r3, #0
    e8a8:	d112      	bne.n	e8d0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e8aa:	f3ef 8310 	mrs	r3, PRIMASK
    e8ae:	607b      	str	r3, [r7, #4]
  return(result);
    e8b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d109      	bne.n	e8ca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    e8b6:	b672      	cpsid	i
    e8b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    e8bc:	4b0a      	ldr	r3, [pc, #40]	; (e8e8 <cpu_irq_enter_critical+0x4c>)
    e8be:	2200      	movs	r2, #0
    e8c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    e8c2:	4b0a      	ldr	r3, [pc, #40]	; (e8ec <cpu_irq_enter_critical+0x50>)
    e8c4:	2201      	movs	r2, #1
    e8c6:	701a      	strb	r2, [r3, #0]
    e8c8:	e002      	b.n	e8d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    e8ca:	4b08      	ldr	r3, [pc, #32]	; (e8ec <cpu_irq_enter_critical+0x50>)
    e8cc:	2200      	movs	r2, #0
    e8ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    e8d0:	4b04      	ldr	r3, [pc, #16]	; (e8e4 <cpu_irq_enter_critical+0x48>)
    e8d2:	681b      	ldr	r3, [r3, #0]
    e8d4:	1c5a      	adds	r2, r3, #1
    e8d6:	4b03      	ldr	r3, [pc, #12]	; (e8e4 <cpu_irq_enter_critical+0x48>)
    e8d8:	601a      	str	r2, [r3, #0]
}
    e8da:	46c0      	nop			; (mov r8, r8)
    e8dc:	46bd      	mov	sp, r7
    e8de:	b002      	add	sp, #8
    e8e0:	bd80      	pop	{r7, pc}
    e8e2:	46c0      	nop			; (mov r8, r8)
    e8e4:	20003c4c 	.word	0x20003c4c
    e8e8:	200001d2 	.word	0x200001d2
    e8ec:	20003c50 	.word	0x20003c50

0000e8f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    e8f0:	b580      	push	{r7, lr}
    e8f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    e8f4:	4b0b      	ldr	r3, [pc, #44]	; (e924 <cpu_irq_leave_critical+0x34>)
    e8f6:	681b      	ldr	r3, [r3, #0]
    e8f8:	1e5a      	subs	r2, r3, #1
    e8fa:	4b0a      	ldr	r3, [pc, #40]	; (e924 <cpu_irq_leave_critical+0x34>)
    e8fc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    e8fe:	4b09      	ldr	r3, [pc, #36]	; (e924 <cpu_irq_leave_critical+0x34>)
    e900:	681b      	ldr	r3, [r3, #0]
    e902:	2b00      	cmp	r3, #0
    e904:	d10a      	bne.n	e91c <cpu_irq_leave_critical+0x2c>
    e906:	4b08      	ldr	r3, [pc, #32]	; (e928 <cpu_irq_leave_critical+0x38>)
    e908:	781b      	ldrb	r3, [r3, #0]
    e90a:	b2db      	uxtb	r3, r3
    e90c:	2b00      	cmp	r3, #0
    e90e:	d005      	beq.n	e91c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    e910:	4b06      	ldr	r3, [pc, #24]	; (e92c <cpu_irq_leave_critical+0x3c>)
    e912:	2201      	movs	r2, #1
    e914:	701a      	strb	r2, [r3, #0]
    e916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e91a:	b662      	cpsie	i
	}
}
    e91c:	46c0      	nop			; (mov r8, r8)
    e91e:	46bd      	mov	sp, r7
    e920:	bd80      	pop	{r7, pc}
    e922:	46c0      	nop			; (mov r8, r8)
    e924:	20003c4c 	.word	0x20003c4c
    e928:	20003c50 	.word	0x20003c50
    e92c:	200001d2 	.word	0x200001d2

0000e930 <system_gclk_gen_get_config_defaults>:
{
    e930:	b580      	push	{r7, lr}
    e932:	b082      	sub	sp, #8
    e934:	af00      	add	r7, sp, #0
    e936:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    e938:	687b      	ldr	r3, [r7, #4]
    e93a:	2201      	movs	r2, #1
    e93c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    e93e:	687b      	ldr	r3, [r7, #4]
    e940:	2200      	movs	r2, #0
    e942:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    e944:	687b      	ldr	r3, [r7, #4]
    e946:	2206      	movs	r2, #6
    e948:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    e94a:	687b      	ldr	r3, [r7, #4]
    e94c:	2200      	movs	r2, #0
    e94e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    e950:	687b      	ldr	r3, [r7, #4]
    e952:	2200      	movs	r2, #0
    e954:	725a      	strb	r2, [r3, #9]
}
    e956:	46c0      	nop			; (mov r8, r8)
    e958:	46bd      	mov	sp, r7
    e95a:	b002      	add	sp, #8
    e95c:	bd80      	pop	{r7, pc}
	...

0000e960 <system_clock_source_xosc_get_config_defaults>:
{
    e960:	b580      	push	{r7, lr}
    e962:	b082      	sub	sp, #8
    e964:	af00      	add	r7, sp, #0
    e966:	6078      	str	r0, [r7, #4]
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    e968:	687b      	ldr	r3, [r7, #4]
    e96a:	2200      	movs	r2, #0
    e96c:	701a      	strb	r2, [r3, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	220e      	movs	r2, #14
    e972:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control = false;
    e974:	687b      	ldr	r3, [r7, #4]
    e976:	2200      	movs	r2, #0
    e978:	709a      	strb	r2, [r3, #2]
	config->frequency         = 12000000UL;
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	4a05      	ldr	r2, [pc, #20]	; (e994 <system_clock_source_xosc_get_config_defaults+0x34>)
    e97e:	605a      	str	r2, [r3, #4]
	config->run_in_standby    = false;
    e980:	687b      	ldr	r3, [r7, #4]
    e982:	2200      	movs	r2, #0
    e984:	721a      	strb	r2, [r3, #8]
	config->on_demand         = false;
    e986:	687b      	ldr	r3, [r7, #4]
    e988:	2200      	movs	r2, #0
    e98a:	725a      	strb	r2, [r3, #9]
}
    e98c:	46c0      	nop			; (mov r8, r8)
    e98e:	46bd      	mov	sp, r7
    e990:	b002      	add	sp, #8
    e992:	bd80      	pop	{r7, pc}
    e994:	00b71b00 	.word	0x00b71b00

0000e998 <system_clock_source_osc8m_get_config_defaults>:
{
    e998:	b580      	push	{r7, lr}
    e99a:	b082      	sub	sp, #8
    e99c:	af00      	add	r7, sp, #0
    e99e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	2203      	movs	r2, #3
    e9a4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    e9a6:	687b      	ldr	r3, [r7, #4]
    e9a8:	2200      	movs	r2, #0
    e9aa:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    e9ac:	687b      	ldr	r3, [r7, #4]
    e9ae:	2201      	movs	r2, #1
    e9b0:	709a      	strb	r2, [r3, #2]
}
    e9b2:	46c0      	nop			; (mov r8, r8)
    e9b4:	46bd      	mov	sp, r7
    e9b6:	b002      	add	sp, #8
    e9b8:	bd80      	pop	{r7, pc}

0000e9ba <system_clock_source_dfll_get_config_defaults>:
{
    e9ba:	b580      	push	{r7, lr}
    e9bc:	b082      	sub	sp, #8
    e9be:	af00      	add	r7, sp, #0
    e9c0:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    e9c2:	687b      	ldr	r3, [r7, #4]
    e9c4:	2200      	movs	r2, #0
    e9c6:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    e9c8:	687b      	ldr	r3, [r7, #4]
    e9ca:	2200      	movs	r2, #0
    e9cc:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    e9ce:	687b      	ldr	r3, [r7, #4]
    e9d0:	2200      	movs	r2, #0
    e9d2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	2200      	movs	r2, #0
    e9d8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    e9da:	687b      	ldr	r3, [r7, #4]
    e9dc:	2200      	movs	r2, #0
    e9de:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    e9e0:	687b      	ldr	r3, [r7, #4]
    e9e2:	2201      	movs	r2, #1
    e9e4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    e9e6:	687b      	ldr	r3, [r7, #4]
    e9e8:	2207      	movs	r2, #7
    e9ea:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    e9ec:	687b      	ldr	r3, [r7, #4]
    e9ee:	223f      	movs	r2, #63	; 0x3f
    e9f0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    e9f2:	687b      	ldr	r3, [r7, #4]
    e9f4:	2201      	movs	r2, #1
    e9f6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    e9f8:	687b      	ldr	r3, [r7, #4]
    e9fa:	2201      	movs	r2, #1
    e9fc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	2206      	movs	r2, #6
    ea02:	821a      	strh	r2, [r3, #16]
}
    ea04:	46c0      	nop			; (mov r8, r8)
    ea06:	46bd      	mov	sp, r7
    ea08:	b002      	add	sp, #8
    ea0a:	bd80      	pop	{r7, pc}

0000ea0c <system_cpu_clock_set_divider>:
{
    ea0c:	b580      	push	{r7, lr}
    ea0e:	b082      	sub	sp, #8
    ea10:	af00      	add	r7, sp, #0
    ea12:	0002      	movs	r2, r0
    ea14:	1dfb      	adds	r3, r7, #7
    ea16:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    ea18:	4a03      	ldr	r2, [pc, #12]	; (ea28 <system_cpu_clock_set_divider+0x1c>)
    ea1a:	1dfb      	adds	r3, r7, #7
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	7213      	strb	r3, [r2, #8]
}
    ea20:	46c0      	nop			; (mov r8, r8)
    ea22:	46bd      	mov	sp, r7
    ea24:	b002      	add	sp, #8
    ea26:	bd80      	pop	{r7, pc}
    ea28:	40000400 	.word	0x40000400

0000ea2c <system_apb_clock_set_divider>:
{
    ea2c:	b580      	push	{r7, lr}
    ea2e:	b082      	sub	sp, #8
    ea30:	af00      	add	r7, sp, #0
    ea32:	0002      	movs	r2, r0
    ea34:	1dfb      	adds	r3, r7, #7
    ea36:	701a      	strb	r2, [r3, #0]
    ea38:	1dbb      	adds	r3, r7, #6
    ea3a:	1c0a      	adds	r2, r1, #0
    ea3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ea3e:	1dfb      	adds	r3, r7, #7
    ea40:	781b      	ldrb	r3, [r3, #0]
    ea42:	2b01      	cmp	r3, #1
    ea44:	d008      	beq.n	ea58 <system_apb_clock_set_divider+0x2c>
    ea46:	2b02      	cmp	r3, #2
    ea48:	d00b      	beq.n	ea62 <system_apb_clock_set_divider+0x36>
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d10e      	bne.n	ea6c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    ea4e:	4a0b      	ldr	r2, [pc, #44]	; (ea7c <system_apb_clock_set_divider+0x50>)
    ea50:	1dbb      	adds	r3, r7, #6
    ea52:	781b      	ldrb	r3, [r3, #0]
    ea54:	7253      	strb	r3, [r2, #9]
			break;
    ea56:	e00b      	b.n	ea70 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    ea58:	4a08      	ldr	r2, [pc, #32]	; (ea7c <system_apb_clock_set_divider+0x50>)
    ea5a:	1dbb      	adds	r3, r7, #6
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	7293      	strb	r3, [r2, #10]
			break;
    ea60:	e006      	b.n	ea70 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    ea62:	4a06      	ldr	r2, [pc, #24]	; (ea7c <system_apb_clock_set_divider+0x50>)
    ea64:	1dbb      	adds	r3, r7, #6
    ea66:	781b      	ldrb	r3, [r3, #0]
    ea68:	72d3      	strb	r3, [r2, #11]
			break;
    ea6a:	e001      	b.n	ea70 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    ea6c:	2317      	movs	r3, #23
    ea6e:	e000      	b.n	ea72 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    ea70:	2300      	movs	r3, #0
}
    ea72:	0018      	movs	r0, r3
    ea74:	46bd      	mov	sp, r7
    ea76:	b002      	add	sp, #8
    ea78:	bd80      	pop	{r7, pc}
    ea7a:	46c0      	nop			; (mov r8, r8)
    ea7c:	40000400 	.word	0x40000400

0000ea80 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    ea80:	b580      	push	{r7, lr}
    ea82:	b082      	sub	sp, #8
    ea84:	af00      	add	r7, sp, #0
    ea86:	0002      	movs	r2, r0
    ea88:	1dfb      	adds	r3, r7, #7
    ea8a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    ea8c:	4a08      	ldr	r2, [pc, #32]	; (eab0 <system_flash_set_waitstates+0x30>)
    ea8e:	1dfb      	adds	r3, r7, #7
    ea90:	781b      	ldrb	r3, [r3, #0]
    ea92:	210f      	movs	r1, #15
    ea94:	400b      	ands	r3, r1
    ea96:	b2d9      	uxtb	r1, r3
    ea98:	6853      	ldr	r3, [r2, #4]
    ea9a:	200f      	movs	r0, #15
    ea9c:	4001      	ands	r1, r0
    ea9e:	0049      	lsls	r1, r1, #1
    eaa0:	201e      	movs	r0, #30
    eaa2:	4383      	bics	r3, r0
    eaa4:	430b      	orrs	r3, r1
    eaa6:	6053      	str	r3, [r2, #4]
}
    eaa8:	46c0      	nop			; (mov r8, r8)
    eaaa:	46bd      	mov	sp, r7
    eaac:	b002      	add	sp, #8
    eaae:	bd80      	pop	{r7, pc}
    eab0:	41004000 	.word	0x41004000

0000eab4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    eab4:	b580      	push	{r7, lr}
    eab6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    eab8:	46c0      	nop			; (mov r8, r8)
    eaba:	4b04      	ldr	r3, [pc, #16]	; (eacc <_system_dfll_wait_for_sync+0x18>)
    eabc:	68db      	ldr	r3, [r3, #12]
    eabe:	2210      	movs	r2, #16
    eac0:	4013      	ands	r3, r2
    eac2:	d0fa      	beq.n	eaba <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    eac4:	46c0      	nop			; (mov r8, r8)
    eac6:	46bd      	mov	sp, r7
    eac8:	bd80      	pop	{r7, pc}
    eaca:	46c0      	nop			; (mov r8, r8)
    eacc:	40000800 	.word	0x40000800

0000ead0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    ead0:	b580      	push	{r7, lr}
    ead2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    ead4:	4b0c      	ldr	r3, [pc, #48]	; (eb08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    ead6:	2202      	movs	r2, #2
    ead8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    eada:	4b0c      	ldr	r3, [pc, #48]	; (eb0c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    eadc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    eade:	4a0a      	ldr	r2, [pc, #40]	; (eb08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    eae0:	4b0b      	ldr	r3, [pc, #44]	; (eb10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    eae2:	689b      	ldr	r3, [r3, #8]
    eae4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    eae6:	4a08      	ldr	r2, [pc, #32]	; (eb08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    eae8:	4b09      	ldr	r3, [pc, #36]	; (eb10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    eaea:	685b      	ldr	r3, [r3, #4]
    eaec:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    eaee:	4b06      	ldr	r3, [pc, #24]	; (eb08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    eaf0:	2200      	movs	r2, #0
    eaf2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    eaf4:	4b05      	ldr	r3, [pc, #20]	; (eb0c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    eaf6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    eaf8:	4a03      	ldr	r2, [pc, #12]	; (eb08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    eafa:	4b05      	ldr	r3, [pc, #20]	; (eb10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    eafc:	681b      	ldr	r3, [r3, #0]
    eafe:	b29b      	uxth	r3, r3
    eb00:	8493      	strh	r3, [r2, #36]	; 0x24
}
    eb02:	46c0      	nop			; (mov r8, r8)
    eb04:	46bd      	mov	sp, r7
    eb06:	bd80      	pop	{r7, pc}
    eb08:	40000800 	.word	0x40000800
    eb0c:	0000eab5 	.word	0x0000eab5
    eb10:	20003c54 	.word	0x20003c54

0000eb14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    eb14:	b580      	push	{r7, lr}
    eb16:	b082      	sub	sp, #8
    eb18:	af00      	add	r7, sp, #0
    eb1a:	0002      	movs	r2, r0
    eb1c:	1dfb      	adds	r3, r7, #7
    eb1e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    eb20:	1dfb      	adds	r3, r7, #7
    eb22:	781b      	ldrb	r3, [r3, #0]
    eb24:	2b08      	cmp	r3, #8
    eb26:	d841      	bhi.n	ebac <system_clock_source_get_hz+0x98>
    eb28:	009a      	lsls	r2, r3, #2
    eb2a:	4b23      	ldr	r3, [pc, #140]	; (ebb8 <system_clock_source_get_hz+0xa4>)
    eb2c:	18d3      	adds	r3, r2, r3
    eb2e:	681b      	ldr	r3, [r3, #0]
    eb30:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    eb32:	4b22      	ldr	r3, [pc, #136]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eb34:	691b      	ldr	r3, [r3, #16]
    eb36:	e03a      	b.n	ebae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    eb38:	4b21      	ldr	r3, [pc, #132]	; (ebc0 <system_clock_source_get_hz+0xac>)
    eb3a:	6a1b      	ldr	r3, [r3, #32]
    eb3c:	059b      	lsls	r3, r3, #22
    eb3e:	0f9b      	lsrs	r3, r3, #30
    eb40:	b2db      	uxtb	r3, r3
    eb42:	001a      	movs	r2, r3
    eb44:	4b1f      	ldr	r3, [pc, #124]	; (ebc4 <system_clock_source_get_hz+0xb0>)
    eb46:	40d3      	lsrs	r3, r2
    eb48:	e031      	b.n	ebae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    eb4a:	2380      	movs	r3, #128	; 0x80
    eb4c:	021b      	lsls	r3, r3, #8
    eb4e:	e02e      	b.n	ebae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    eb50:	2380      	movs	r3, #128	; 0x80
    eb52:	021b      	lsls	r3, r3, #8
    eb54:	e02b      	b.n	ebae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    eb56:	4b19      	ldr	r3, [pc, #100]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eb58:	695b      	ldr	r3, [r3, #20]
    eb5a:	e028      	b.n	ebae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    eb5c:	4b17      	ldr	r3, [pc, #92]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eb5e:	681b      	ldr	r3, [r3, #0]
    eb60:	2202      	movs	r2, #2
    eb62:	4013      	ands	r3, r2
    eb64:	d101      	bne.n	eb6a <system_clock_source_get_hz+0x56>
			return 0;
    eb66:	2300      	movs	r3, #0
    eb68:	e021      	b.n	ebae <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    eb6a:	4b17      	ldr	r3, [pc, #92]	; (ebc8 <system_clock_source_get_hz+0xb4>)
    eb6c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    eb6e:	4b13      	ldr	r3, [pc, #76]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eb70:	681b      	ldr	r3, [r3, #0]
    eb72:	2224      	movs	r2, #36	; 0x24
    eb74:	4013      	ands	r3, r2
    eb76:	2b04      	cmp	r3, #4
    eb78:	d109      	bne.n	eb8e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    eb7a:	2000      	movs	r0, #0
    eb7c:	4b13      	ldr	r3, [pc, #76]	; (ebcc <system_clock_source_get_hz+0xb8>)
    eb7e:	4798      	blx	r3
    eb80:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    eb82:	4b0e      	ldr	r3, [pc, #56]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eb84:	689b      	ldr	r3, [r3, #8]
    eb86:	041b      	lsls	r3, r3, #16
    eb88:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    eb8a:	4353      	muls	r3, r2
    eb8c:	e00f      	b.n	ebae <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    eb8e:	4b10      	ldr	r3, [pc, #64]	; (ebd0 <system_clock_source_get_hz+0xbc>)
    eb90:	e00d      	b.n	ebae <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    eb92:	4a0b      	ldr	r2, [pc, #44]	; (ebc0 <system_clock_source_get_hz+0xac>)
    eb94:	2350      	movs	r3, #80	; 0x50
    eb96:	5cd3      	ldrb	r3, [r2, r3]
    eb98:	b2db      	uxtb	r3, r3
    eb9a:	001a      	movs	r2, r3
    eb9c:	2304      	movs	r3, #4
    eb9e:	4013      	ands	r3, r2
    eba0:	d101      	bne.n	eba6 <system_clock_source_get_hz+0x92>
			return 0;
    eba2:	2300      	movs	r3, #0
    eba4:	e003      	b.n	ebae <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    eba6:	4b05      	ldr	r3, [pc, #20]	; (ebbc <system_clock_source_get_hz+0xa8>)
    eba8:	68db      	ldr	r3, [r3, #12]
    ebaa:	e000      	b.n	ebae <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    ebac:	2300      	movs	r3, #0
	}
}
    ebae:	0018      	movs	r0, r3
    ebb0:	46bd      	mov	sp, r7
    ebb2:	b002      	add	sp, #8
    ebb4:	bd80      	pop	{r7, pc}
    ebb6:	46c0      	nop			; (mov r8, r8)
    ebb8:	00013afc 	.word	0x00013afc
    ebbc:	20003c54 	.word	0x20003c54
    ebc0:	40000800 	.word	0x40000800
    ebc4:	007a1200 	.word	0x007a1200
    ebc8:	0000eab5 	.word	0x0000eab5
    ebcc:	0000f769 	.word	0x0000f769
    ebd0:	02dc6c00 	.word	0x02dc6c00

0000ebd4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    ebd4:	b580      	push	{r7, lr}
    ebd6:	b084      	sub	sp, #16
    ebd8:	af00      	add	r7, sp, #0
    ebda:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    ebdc:	4b1a      	ldr	r3, [pc, #104]	; (ec48 <system_clock_source_osc8m_set_config+0x74>)
    ebde:	6a1b      	ldr	r3, [r3, #32]
    ebe0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    ebe2:	687b      	ldr	r3, [r7, #4]
    ebe4:	781b      	ldrb	r3, [r3, #0]
    ebe6:	1c1a      	adds	r2, r3, #0
    ebe8:	2303      	movs	r3, #3
    ebea:	4013      	ands	r3, r2
    ebec:	b2da      	uxtb	r2, r3
    ebee:	230d      	movs	r3, #13
    ebf0:	18fb      	adds	r3, r7, r3
    ebf2:	2103      	movs	r1, #3
    ebf4:	400a      	ands	r2, r1
    ebf6:	0010      	movs	r0, r2
    ebf8:	781a      	ldrb	r2, [r3, #0]
    ebfa:	2103      	movs	r1, #3
    ebfc:	438a      	bics	r2, r1
    ebfe:	1c11      	adds	r1, r2, #0
    ec00:	1c02      	adds	r2, r0, #0
    ec02:	430a      	orrs	r2, r1
    ec04:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	789a      	ldrb	r2, [r3, #2]
    ec0a:	230c      	movs	r3, #12
    ec0c:	18fb      	adds	r3, r7, r3
    ec0e:	01d0      	lsls	r0, r2, #7
    ec10:	781a      	ldrb	r2, [r3, #0]
    ec12:	217f      	movs	r1, #127	; 0x7f
    ec14:	400a      	ands	r2, r1
    ec16:	1c11      	adds	r1, r2, #0
    ec18:	1c02      	adds	r2, r0, #0
    ec1a:	430a      	orrs	r2, r1
    ec1c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    ec1e:	687b      	ldr	r3, [r7, #4]
    ec20:	785a      	ldrb	r2, [r3, #1]
    ec22:	230c      	movs	r3, #12
    ec24:	18fb      	adds	r3, r7, r3
    ec26:	2101      	movs	r1, #1
    ec28:	400a      	ands	r2, r1
    ec2a:	0190      	lsls	r0, r2, #6
    ec2c:	781a      	ldrb	r2, [r3, #0]
    ec2e:	2140      	movs	r1, #64	; 0x40
    ec30:	438a      	bics	r2, r1
    ec32:	1c11      	adds	r1, r2, #0
    ec34:	1c02      	adds	r2, r0, #0
    ec36:	430a      	orrs	r2, r1
    ec38:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    ec3a:	4b03      	ldr	r3, [pc, #12]	; (ec48 <system_clock_source_osc8m_set_config+0x74>)
    ec3c:	68fa      	ldr	r2, [r7, #12]
    ec3e:	621a      	str	r2, [r3, #32]
}
    ec40:	46c0      	nop			; (mov r8, r8)
    ec42:	46bd      	mov	sp, r7
    ec44:	b004      	add	sp, #16
    ec46:	bd80      	pop	{r7, pc}
    ec48:	40000800 	.word	0x40000800

0000ec4c <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    ec4c:	b580      	push	{r7, lr}
    ec4e:	b084      	sub	sp, #16
    ec50:	af00      	add	r7, sp, #0
    ec52:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    ec54:	4a50      	ldr	r2, [pc, #320]	; (ed98 <system_clock_source_xosc_set_config+0x14c>)
    ec56:	230c      	movs	r3, #12
    ec58:	18fb      	adds	r3, r7, r3
    ec5a:	8a12      	ldrh	r2, [r2, #16]
    ec5c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    ec5e:	687b      	ldr	r3, [r7, #4]
    ec60:	785b      	ldrb	r3, [r3, #1]
    ec62:	1c1a      	adds	r2, r3, #0
    ec64:	230f      	movs	r3, #15
    ec66:	4013      	ands	r3, r2
    ec68:	b2da      	uxtb	r2, r3
    ec6a:	230c      	movs	r3, #12
    ec6c:	18fb      	adds	r3, r7, r3
    ec6e:	0110      	lsls	r0, r2, #4
    ec70:	785a      	ldrb	r2, [r3, #1]
    ec72:	210f      	movs	r1, #15
    ec74:	400a      	ands	r2, r1
    ec76:	1c11      	adds	r1, r2, #0
    ec78:	1c02      	adds	r2, r0, #0
    ec7a:	430a      	orrs	r2, r1
    ec7c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	781b      	ldrb	r3, [r3, #0]
    ec82:	2b00      	cmp	r3, #0
    ec84:	d106      	bne.n	ec94 <system_clock_source_xosc_set_config+0x48>
		temp.bit.XTALEN = 1;
    ec86:	230c      	movs	r3, #12
    ec88:	18fb      	adds	r3, r7, r3
    ec8a:	781a      	ldrb	r2, [r3, #0]
    ec8c:	2104      	movs	r1, #4
    ec8e:	430a      	orrs	r2, r1
    ec90:	701a      	strb	r2, [r3, #0]
    ec92:	e005      	b.n	eca0 <system_clock_source_xosc_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    ec94:	230c      	movs	r3, #12
    ec96:	18fb      	adds	r3, r7, r3
    ec98:	781a      	ldrb	r2, [r3, #0]
    ec9a:	2104      	movs	r1, #4
    ec9c:	438a      	bics	r2, r1
    ec9e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AMPGC = config->auto_gain_control;
    eca0:	687b      	ldr	r3, [r7, #4]
    eca2:	789a      	ldrb	r2, [r3, #2]
    eca4:	230c      	movs	r3, #12
    eca6:	18fb      	adds	r3, r7, r3
    eca8:	2101      	movs	r1, #1
    ecaa:	400a      	ands	r2, r1
    ecac:	00d0      	lsls	r0, r2, #3
    ecae:	785a      	ldrb	r2, [r3, #1]
    ecb0:	2108      	movs	r1, #8
    ecb2:	438a      	bics	r2, r1
    ecb4:	1c11      	adds	r1, r2, #0
    ecb6:	1c02      	adds	r2, r0, #0
    ecb8:	430a      	orrs	r2, r1
    ecba:	705a      	strb	r2, [r3, #1]

	/* Set gain */
	if (config->frequency <= 2000000) {
    ecbc:	687b      	ldr	r3, [r7, #4]
    ecbe:	685b      	ldr	r3, [r3, #4]
    ecc0:	4a36      	ldr	r2, [pc, #216]	; (ed9c <system_clock_source_xosc_set_config+0x150>)
    ecc2:	4293      	cmp	r3, r2
    ecc4:	d806      	bhi.n	ecd4 <system_clock_source_xosc_set_config+0x88>
		temp.bit.GAIN = 0;
    ecc6:	230c      	movs	r3, #12
    ecc8:	18fb      	adds	r3, r7, r3
    ecca:	785a      	ldrb	r2, [r3, #1]
    eccc:	2107      	movs	r1, #7
    ecce:	438a      	bics	r2, r1
    ecd0:	705a      	strb	r2, [r3, #1]
    ecd2:	e03a      	b.n	ed4a <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 4000000) {
    ecd4:	687b      	ldr	r3, [r7, #4]
    ecd6:	685b      	ldr	r3, [r3, #4]
    ecd8:	4a31      	ldr	r2, [pc, #196]	; (eda0 <system_clock_source_xosc_set_config+0x154>)
    ecda:	4293      	cmp	r3, r2
    ecdc:	d809      	bhi.n	ecf2 <system_clock_source_xosc_set_config+0xa6>
		temp.bit.GAIN = 1;
    ecde:	230c      	movs	r3, #12
    ece0:	18fb      	adds	r3, r7, r3
    ece2:	785a      	ldrb	r2, [r3, #1]
    ece4:	2107      	movs	r1, #7
    ece6:	438a      	bics	r2, r1
    ece8:	1c11      	adds	r1, r2, #0
    ecea:	2201      	movs	r2, #1
    ecec:	430a      	orrs	r2, r1
    ecee:	705a      	strb	r2, [r3, #1]
    ecf0:	e02b      	b.n	ed4a <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 8000000) {
    ecf2:	687b      	ldr	r3, [r7, #4]
    ecf4:	685b      	ldr	r3, [r3, #4]
    ecf6:	4a2b      	ldr	r2, [pc, #172]	; (eda4 <system_clock_source_xosc_set_config+0x158>)
    ecf8:	4293      	cmp	r3, r2
    ecfa:	d809      	bhi.n	ed10 <system_clock_source_xosc_set_config+0xc4>
		temp.bit.GAIN = 2;
    ecfc:	230c      	movs	r3, #12
    ecfe:	18fb      	adds	r3, r7, r3
    ed00:	785a      	ldrb	r2, [r3, #1]
    ed02:	2107      	movs	r1, #7
    ed04:	438a      	bics	r2, r1
    ed06:	1c11      	adds	r1, r2, #0
    ed08:	2202      	movs	r2, #2
    ed0a:	430a      	orrs	r2, r1
    ed0c:	705a      	strb	r2, [r3, #1]
    ed0e:	e01c      	b.n	ed4a <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 16000000) {
    ed10:	687b      	ldr	r3, [r7, #4]
    ed12:	685b      	ldr	r3, [r3, #4]
    ed14:	4a24      	ldr	r2, [pc, #144]	; (eda8 <system_clock_source_xosc_set_config+0x15c>)
    ed16:	4293      	cmp	r3, r2
    ed18:	d809      	bhi.n	ed2e <system_clock_source_xosc_set_config+0xe2>
		temp.bit.GAIN = 3;
    ed1a:	230c      	movs	r3, #12
    ed1c:	18fb      	adds	r3, r7, r3
    ed1e:	785a      	ldrb	r2, [r3, #1]
    ed20:	2107      	movs	r1, #7
    ed22:	438a      	bics	r2, r1
    ed24:	1c11      	adds	r1, r2, #0
    ed26:	2203      	movs	r2, #3
    ed28:	430a      	orrs	r2, r1
    ed2a:	705a      	strb	r2, [r3, #1]
    ed2c:	e00d      	b.n	ed4a <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 32000000) {
    ed2e:	687b      	ldr	r3, [r7, #4]
    ed30:	685b      	ldr	r3, [r3, #4]
    ed32:	4a1e      	ldr	r2, [pc, #120]	; (edac <system_clock_source_xosc_set_config+0x160>)
    ed34:	4293      	cmp	r3, r2
    ed36:	d808      	bhi.n	ed4a <system_clock_source_xosc_set_config+0xfe>
		temp.bit.GAIN = 4;
    ed38:	230c      	movs	r3, #12
    ed3a:	18fb      	adds	r3, r7, r3
    ed3c:	785a      	ldrb	r2, [r3, #1]
    ed3e:	2107      	movs	r1, #7
    ed40:	438a      	bics	r2, r1
    ed42:	1c11      	adds	r1, r2, #0
    ed44:	2204      	movs	r2, #4
    ed46:	430a      	orrs	r2, r1
    ed48:	705a      	strb	r2, [r3, #1]
	}

	temp.bit.ONDEMAND = config->on_demand;
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	7a5a      	ldrb	r2, [r3, #9]
    ed4e:	230c      	movs	r3, #12
    ed50:	18fb      	adds	r3, r7, r3
    ed52:	01d0      	lsls	r0, r2, #7
    ed54:	781a      	ldrb	r2, [r3, #0]
    ed56:	217f      	movs	r1, #127	; 0x7f
    ed58:	400a      	ands	r2, r1
    ed5a:	1c11      	adds	r1, r2, #0
    ed5c:	1c02      	adds	r2, r0, #0
    ed5e:	430a      	orrs	r2, r1
    ed60:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    ed62:	687b      	ldr	r3, [r7, #4]
    ed64:	7a1a      	ldrb	r2, [r3, #8]
    ed66:	230c      	movs	r3, #12
    ed68:	18fb      	adds	r3, r7, r3
    ed6a:	2101      	movs	r1, #1
    ed6c:	400a      	ands	r2, r1
    ed6e:	0190      	lsls	r0, r2, #6
    ed70:	781a      	ldrb	r2, [r3, #0]
    ed72:	2140      	movs	r1, #64	; 0x40
    ed74:	438a      	bics	r2, r1
    ed76:	1c11      	adds	r1, r2, #0
    ed78:	1c02      	adds	r2, r0, #0
    ed7a:	430a      	orrs	r2, r1
    ed7c:	701a      	strb	r2, [r3, #0]

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    ed7e:	687b      	ldr	r3, [r7, #4]
    ed80:	685a      	ldr	r2, [r3, #4]
    ed82:	4b0b      	ldr	r3, [pc, #44]	; (edb0 <system_clock_source_xosc_set_config+0x164>)
    ed84:	611a      	str	r2, [r3, #16]

	SYSCTRL->XOSC = temp;
    ed86:	4a04      	ldr	r2, [pc, #16]	; (ed98 <system_clock_source_xosc_set_config+0x14c>)
    ed88:	230c      	movs	r3, #12
    ed8a:	18fb      	adds	r3, r7, r3
    ed8c:	881b      	ldrh	r3, [r3, #0]
    ed8e:	8213      	strh	r3, [r2, #16]
}
    ed90:	46c0      	nop			; (mov r8, r8)
    ed92:	46bd      	mov	sp, r7
    ed94:	b004      	add	sp, #16
    ed96:	bd80      	pop	{r7, pc}
    ed98:	40000800 	.word	0x40000800
    ed9c:	001e8480 	.word	0x001e8480
    eda0:	003d0900 	.word	0x003d0900
    eda4:	007a1200 	.word	0x007a1200
    eda8:	00f42400 	.word	0x00f42400
    edac:	01e84800 	.word	0x01e84800
    edb0:	20003c54 	.word	0x20003c54

0000edb4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    edb4:	b580      	push	{r7, lr}
    edb6:	b082      	sub	sp, #8
    edb8:	af00      	add	r7, sp, #0
    edba:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	7a1b      	ldrb	r3, [r3, #8]
    edc0:	029b      	lsls	r3, r3, #10
    edc2:	041b      	lsls	r3, r3, #16
    edc4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    edc6:	687b      	ldr	r3, [r7, #4]
    edc8:	895b      	ldrh	r3, [r3, #10]
    edca:	059b      	lsls	r3, r3, #22
    edcc:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    edce:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    edd0:	4b2a      	ldr	r3, [pc, #168]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    edd2:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    edd4:	687b      	ldr	r3, [r7, #4]
    edd6:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    edd8:	687b      	ldr	r3, [r7, #4]
    edda:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    eddc:	4313      	orrs	r3, r2
    edde:	b2db      	uxtb	r3, r3
    ede0:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    ede2:	687b      	ldr	r3, [r7, #4]
    ede4:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    ede6:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    ede8:	687a      	ldr	r2, [r7, #4]
    edea:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    edec:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    edee:	687b      	ldr	r3, [r7, #4]
    edf0:	785b      	ldrb	r3, [r3, #1]
    edf2:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    edf4:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    edf6:	4b21      	ldr	r3, [pc, #132]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    edf8:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    edfa:	687b      	ldr	r3, [r7, #4]
    edfc:	781b      	ldrb	r3, [r3, #0]
    edfe:	2b04      	cmp	r3, #4
    ee00:	d116      	bne.n	ee30 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ee02:	687b      	ldr	r3, [r7, #4]
    ee04:	7b1b      	ldrb	r3, [r3, #12]
    ee06:	069b      	lsls	r3, r3, #26
    ee08:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	89db      	ldrh	r3, [r3, #14]
    ee0e:	041b      	lsls	r3, r3, #16
    ee10:	0019      	movs	r1, r3
    ee12:	4b1b      	ldr	r3, [pc, #108]	; (ee80 <system_clock_source_dfll_set_config+0xcc>)
    ee14:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ee16:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ee18:	687a      	ldr	r2, [r7, #4]
    ee1a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ee1c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    ee1e:	4b17      	ldr	r3, [pc, #92]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee20:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    ee22:	4b16      	ldr	r3, [pc, #88]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee24:	681b      	ldr	r3, [r3, #0]
    ee26:	687a      	ldr	r2, [r7, #4]
    ee28:	7812      	ldrb	r2, [r2, #0]
    ee2a:	431a      	orrs	r2, r3
    ee2c:	4b13      	ldr	r3, [pc, #76]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee2e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    ee30:	687b      	ldr	r3, [r7, #4]
    ee32:	781b      	ldrb	r3, [r3, #0]
    ee34:	2b20      	cmp	r3, #32
    ee36:	d11c      	bne.n	ee72 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	7b1b      	ldrb	r3, [r3, #12]
    ee3c:	069b      	lsls	r3, r3, #26
    ee3e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ee40:	687b      	ldr	r3, [r7, #4]
    ee42:	89db      	ldrh	r3, [r3, #14]
    ee44:	041b      	lsls	r3, r3, #16
    ee46:	0019      	movs	r1, r3
    ee48:	4b0d      	ldr	r3, [pc, #52]	; (ee80 <system_clock_source_dfll_set_config+0xcc>)
    ee4a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ee4c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ee4e:	687a      	ldr	r2, [r7, #4]
    ee50:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ee52:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    ee54:	4b09      	ldr	r3, [pc, #36]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee56:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    ee58:	4b08      	ldr	r3, [pc, #32]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee5a:	681b      	ldr	r3, [r3, #0]
    ee5c:	687a      	ldr	r2, [r7, #4]
    ee5e:	7812      	ldrb	r2, [r2, #0]
    ee60:	2104      	movs	r1, #4
    ee62:	430a      	orrs	r2, r1
    ee64:	b2d2      	uxtb	r2, r2
    ee66:	4313      	orrs	r3, r2
    ee68:	2280      	movs	r2, #128	; 0x80
    ee6a:	00d2      	lsls	r2, r2, #3
    ee6c:	431a      	orrs	r2, r3
    ee6e:	4b03      	ldr	r3, [pc, #12]	; (ee7c <system_clock_source_dfll_set_config+0xc8>)
    ee70:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    ee72:	46c0      	nop			; (mov r8, r8)
    ee74:	46bd      	mov	sp, r7
    ee76:	b002      	add	sp, #8
    ee78:	bd80      	pop	{r7, pc}
    ee7a:	46c0      	nop			; (mov r8, r8)
    ee7c:	20003c54 	.word	0x20003c54
    ee80:	03ff0000 	.word	0x03ff0000

0000ee84 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    ee84:	b580      	push	{r7, lr}
    ee86:	b082      	sub	sp, #8
    ee88:	af00      	add	r7, sp, #0
    ee8a:	0002      	movs	r2, r0
    ee8c:	1dfb      	adds	r3, r7, #7
    ee8e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    ee90:	1dfb      	adds	r3, r7, #7
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	2b08      	cmp	r3, #8
    ee96:	d83b      	bhi.n	ef10 <system_clock_source_enable+0x8c>
    ee98:	009a      	lsls	r2, r3, #2
    ee9a:	4b21      	ldr	r3, [pc, #132]	; (ef20 <system_clock_source_enable+0x9c>)
    ee9c:	18d3      	adds	r3, r2, r3
    ee9e:	681b      	ldr	r3, [r3, #0]
    eea0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    eea2:	4b20      	ldr	r3, [pc, #128]	; (ef24 <system_clock_source_enable+0xa0>)
    eea4:	4a1f      	ldr	r2, [pc, #124]	; (ef24 <system_clock_source_enable+0xa0>)
    eea6:	6a12      	ldr	r2, [r2, #32]
    eea8:	2102      	movs	r1, #2
    eeaa:	430a      	orrs	r2, r1
    eeac:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    eeae:	2300      	movs	r3, #0
    eeb0:	e031      	b.n	ef16 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    eeb2:	4b1c      	ldr	r3, [pc, #112]	; (ef24 <system_clock_source_enable+0xa0>)
    eeb4:	4a1b      	ldr	r2, [pc, #108]	; (ef24 <system_clock_source_enable+0xa0>)
    eeb6:	6992      	ldr	r2, [r2, #24]
    eeb8:	2102      	movs	r1, #2
    eeba:	430a      	orrs	r2, r1
    eebc:	619a      	str	r2, [r3, #24]
		break;
    eebe:	e029      	b.n	ef14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    eec0:	4a18      	ldr	r2, [pc, #96]	; (ef24 <system_clock_source_enable+0xa0>)
    eec2:	4b18      	ldr	r3, [pc, #96]	; (ef24 <system_clock_source_enable+0xa0>)
    eec4:	8a1b      	ldrh	r3, [r3, #16]
    eec6:	b29b      	uxth	r3, r3
    eec8:	2102      	movs	r1, #2
    eeca:	430b      	orrs	r3, r1
    eecc:	b29b      	uxth	r3, r3
    eece:	8213      	strh	r3, [r2, #16]
		break;
    eed0:	e020      	b.n	ef14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    eed2:	4a14      	ldr	r2, [pc, #80]	; (ef24 <system_clock_source_enable+0xa0>)
    eed4:	4b13      	ldr	r3, [pc, #76]	; (ef24 <system_clock_source_enable+0xa0>)
    eed6:	8a9b      	ldrh	r3, [r3, #20]
    eed8:	b29b      	uxth	r3, r3
    eeda:	2102      	movs	r1, #2
    eedc:	430b      	orrs	r3, r1
    eede:	b29b      	uxth	r3, r3
    eee0:	8293      	strh	r3, [r2, #20]
		break;
    eee2:	e017      	b.n	ef14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    eee4:	4b10      	ldr	r3, [pc, #64]	; (ef28 <system_clock_source_enable+0xa4>)
    eee6:	681b      	ldr	r3, [r3, #0]
    eee8:	2202      	movs	r2, #2
    eeea:	431a      	orrs	r2, r3
    eeec:	4b0e      	ldr	r3, [pc, #56]	; (ef28 <system_clock_source_enable+0xa4>)
    eeee:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    eef0:	4b0e      	ldr	r3, [pc, #56]	; (ef2c <system_clock_source_enable+0xa8>)
    eef2:	4798      	blx	r3
		break;
    eef4:	e00e      	b.n	ef14 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    eef6:	4a0b      	ldr	r2, [pc, #44]	; (ef24 <system_clock_source_enable+0xa0>)
    eef8:	490a      	ldr	r1, [pc, #40]	; (ef24 <system_clock_source_enable+0xa0>)
    eefa:	2344      	movs	r3, #68	; 0x44
    eefc:	5ccb      	ldrb	r3, [r1, r3]
    eefe:	b2db      	uxtb	r3, r3
    ef00:	2102      	movs	r1, #2
    ef02:	430b      	orrs	r3, r1
    ef04:	b2d9      	uxtb	r1, r3
    ef06:	2344      	movs	r3, #68	; 0x44
    ef08:	54d1      	strb	r1, [r2, r3]
		break;
    ef0a:	e003      	b.n	ef14 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    ef0c:	2300      	movs	r3, #0
    ef0e:	e002      	b.n	ef16 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ef10:	2317      	movs	r3, #23
    ef12:	e000      	b.n	ef16 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    ef14:	2300      	movs	r3, #0
}
    ef16:	0018      	movs	r0, r3
    ef18:	46bd      	mov	sp, r7
    ef1a:	b002      	add	sp, #8
    ef1c:	bd80      	pop	{r7, pc}
    ef1e:	46c0      	nop			; (mov r8, r8)
    ef20:	00013b20 	.word	0x00013b20
    ef24:	40000800 	.word	0x40000800
    ef28:	20003c54 	.word	0x20003c54
    ef2c:	0000ead1 	.word	0x0000ead1

0000ef30 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    ef30:	b580      	push	{r7, lr}
    ef32:	b084      	sub	sp, #16
    ef34:	af00      	add	r7, sp, #0
    ef36:	0002      	movs	r2, r0
    ef38:	1dfb      	adds	r3, r7, #7
    ef3a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    ef3c:	2300      	movs	r3, #0
    ef3e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    ef40:	1dfb      	adds	r3, r7, #7
    ef42:	781b      	ldrb	r3, [r3, #0]
    ef44:	2b08      	cmp	r3, #8
    ef46:	d821      	bhi.n	ef8c <system_clock_source_is_ready+0x5c>
    ef48:	009a      	lsls	r2, r3, #2
    ef4a:	4b18      	ldr	r3, [pc, #96]	; (efac <system_clock_source_is_ready+0x7c>)
    ef4c:	18d3      	adds	r3, r2, r3
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    ef52:	2308      	movs	r3, #8
    ef54:	60fb      	str	r3, [r7, #12]
		break;
    ef56:	e01b      	b.n	ef90 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    ef58:	2304      	movs	r3, #4
    ef5a:	60fb      	str	r3, [r7, #12]
		break;
    ef5c:	e018      	b.n	ef90 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    ef5e:	2301      	movs	r3, #1
    ef60:	60fb      	str	r3, [r7, #12]
		break;
    ef62:	e015      	b.n	ef90 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    ef64:	2302      	movs	r3, #2
    ef66:	60fb      	str	r3, [r7, #12]
		break;
    ef68:	e012      	b.n	ef90 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    ef6a:	2310      	movs	r3, #16
    ef6c:	60fb      	str	r3, [r7, #12]
		}
		break;
    ef6e:	e00f      	b.n	ef90 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    ef70:	4a0f      	ldr	r2, [pc, #60]	; (efb0 <system_clock_source_is_ready+0x80>)
    ef72:	2350      	movs	r3, #80	; 0x50
    ef74:	5cd3      	ldrb	r3, [r2, r3]
    ef76:	b2db      	uxtb	r3, r3
    ef78:	001a      	movs	r2, r3
    ef7a:	2303      	movs	r3, #3
    ef7c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    ef7e:	3b03      	subs	r3, #3
    ef80:	425a      	negs	r2, r3
    ef82:	4153      	adcs	r3, r2
    ef84:	b2db      	uxtb	r3, r3
    ef86:	e00c      	b.n	efa2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    ef88:	2301      	movs	r3, #1
    ef8a:	e00a      	b.n	efa2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    ef8c:	2300      	movs	r3, #0
    ef8e:	e008      	b.n	efa2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    ef90:	4b07      	ldr	r3, [pc, #28]	; (efb0 <system_clock_source_is_ready+0x80>)
    ef92:	68db      	ldr	r3, [r3, #12]
    ef94:	68fa      	ldr	r2, [r7, #12]
    ef96:	401a      	ands	r2, r3
    ef98:	68fb      	ldr	r3, [r7, #12]
    ef9a:	1ad3      	subs	r3, r2, r3
    ef9c:	425a      	negs	r2, r3
    ef9e:	4153      	adcs	r3, r2
    efa0:	b2db      	uxtb	r3, r3
}
    efa2:	0018      	movs	r0, r3
    efa4:	46bd      	mov	sp, r7
    efa6:	b004      	add	sp, #16
    efa8:	bd80      	pop	{r7, pc}
    efaa:	46c0      	nop			; (mov r8, r8)
    efac:	00013b44 	.word	0x00013b44
    efb0:	40000800 	.word	0x40000800

0000efb4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    efb4:	b580      	push	{r7, lr}
    efb6:	b082      	sub	sp, #8
    efb8:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    efba:	003b      	movs	r3, r7
    efbc:	2202      	movs	r2, #2
    efbe:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    efc0:	2300      	movs	r3, #0
    efc2:	607b      	str	r3, [r7, #4]
    efc4:	e009      	b.n	efda <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    efc6:	687b      	ldr	r3, [r7, #4]
    efc8:	b2db      	uxtb	r3, r3
    efca:	003a      	movs	r2, r7
    efcc:	0011      	movs	r1, r2
    efce:	0018      	movs	r0, r3
    efd0:	4b05      	ldr	r3, [pc, #20]	; (efe8 <_switch_peripheral_gclk+0x34>)
    efd2:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    efd4:	687b      	ldr	r3, [r7, #4]
    efd6:	3301      	adds	r3, #1
    efd8:	607b      	str	r3, [r7, #4]
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	2b24      	cmp	r3, #36	; 0x24
    efde:	d9f2      	bls.n	efc6 <_switch_peripheral_gclk+0x12>
	}
}
    efe0:	46c0      	nop			; (mov r8, r8)
    efe2:	46bd      	mov	sp, r7
    efe4:	b002      	add	sp, #8
    efe6:	bd80      	pop	{r7, pc}
    efe8:	0000f5fd 	.word	0x0000f5fd

0000efec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    efec:	b580      	push	{r7, lr}
    efee:	b0aa      	sub	sp, #168	; 0xa8
    eff0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    eff2:	4ba2      	ldr	r3, [pc, #648]	; (f27c <system_clock_init+0x290>)
    eff4:	22c2      	movs	r2, #194	; 0xc2
    eff6:	00d2      	lsls	r2, r2, #3
    eff8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    effa:	2003      	movs	r0, #3
    effc:	4ba0      	ldr	r3, [pc, #640]	; (f280 <system_clock_init+0x294>)
    effe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    f000:	4ba0      	ldr	r3, [pc, #640]	; (f284 <system_clock_init+0x298>)
    f002:	4798      	blx	r3

	/* XOSC */
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);
    f004:	2398      	movs	r3, #152	; 0x98
    f006:	18fb      	adds	r3, r7, r3
    f008:	0018      	movs	r0, r3
    f00a:	4b9f      	ldr	r3, [pc, #636]	; (f288 <system_clock_init+0x29c>)
    f00c:	4798      	blx	r3

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
    f00e:	2398      	movs	r3, #152	; 0x98
    f010:	18fb      	adds	r3, r7, r3
    f012:	2200      	movs	r2, #0
    f014:	701a      	strb	r2, [r3, #0]
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    f016:	2398      	movs	r3, #152	; 0x98
    f018:	18fb      	adds	r3, r7, r3
    f01a:	220f      	movs	r2, #15
    f01c:	705a      	strb	r2, [r3, #1]
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    f01e:	2398      	movs	r3, #152	; 0x98
    f020:	18fb      	adds	r3, r7, r3
    f022:	4a9a      	ldr	r2, [pc, #616]	; (f28c <system_clock_init+0x2a0>)
    f024:	605a      	str	r2, [r3, #4]
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    f026:	2398      	movs	r3, #152	; 0x98
    f028:	18fb      	adds	r3, r7, r3
    f02a:	2200      	movs	r2, #0
    f02c:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    f02e:	2398      	movs	r3, #152	; 0x98
    f030:	18fb      	adds	r3, r7, r3
    f032:	0018      	movs	r0, r3
    f034:	4b96      	ldr	r3, [pc, #600]	; (f290 <system_clock_init+0x2a4>)
    f036:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    f038:	2000      	movs	r0, #0
    f03a:	4b96      	ldr	r3, [pc, #600]	; (f294 <system_clock_init+0x2a8>)
    f03c:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC));
    f03e:	46c0      	nop			; (mov r8, r8)
    f040:	2000      	movs	r0, #0
    f042:	4b95      	ldr	r3, [pc, #596]	; (f298 <system_clock_init+0x2ac>)
    f044:	4798      	blx	r3
    f046:	0003      	movs	r3, r0
    f048:	001a      	movs	r2, r3
    f04a:	2301      	movs	r3, #1
    f04c:	4053      	eors	r3, r2
    f04e:	b2db      	uxtb	r3, r3
    f050:	2b00      	cmp	r3, #0
    f052:	d1f5      	bne.n	f040 <system_clock_init+0x54>
	if (CONF_CLOCK_XOSC_ON_DEMAND || CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL) {
		SYSCTRL->XOSC.reg |=
    f054:	4989      	ldr	r1, [pc, #548]	; (f27c <system_clock_init+0x290>)
    f056:	4b89      	ldr	r3, [pc, #548]	; (f27c <system_clock_init+0x290>)
    f058:	8a1b      	ldrh	r3, [r3, #16]
    f05a:	b29b      	uxth	r3, r3
    f05c:	2288      	movs	r2, #136	; 0x88
    f05e:	0112      	lsls	r2, r2, #4
    f060:	4313      	orrs	r3, r2
    f062:	b29b      	uxth	r3, r3
    f064:	820b      	strh	r3, [r1, #16]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    f066:	2384      	movs	r3, #132	; 0x84
    f068:	18fb      	adds	r3, r7, r3
    f06a:	0018      	movs	r0, r3
    f06c:	4b8b      	ldr	r3, [pc, #556]	; (f29c <system_clock_init+0x2b0>)
    f06e:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    f070:	2384      	movs	r3, #132	; 0x84
    f072:	18fb      	adds	r3, r7, r3
    f074:	2220      	movs	r2, #32
    f076:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    f078:	2384      	movs	r3, #132	; 0x84
    f07a:	18fb      	adds	r3, r7, r3
    f07c:	2200      	movs	r2, #0
    f07e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    f080:	4b87      	ldr	r3, [pc, #540]	; (f2a0 <system_clock_init+0x2b4>)
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	0e9b      	lsrs	r3, r3, #26
    f086:	22a4      	movs	r2, #164	; 0xa4
    f088:	18ba      	adds	r2, r7, r2
    f08a:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    f08c:	23a4      	movs	r3, #164	; 0xa4
    f08e:	18fb      	adds	r3, r7, r3
    f090:	681b      	ldr	r3, [r3, #0]
    f092:	2b3f      	cmp	r3, #63	; 0x3f
    f094:	d103      	bne.n	f09e <system_clock_init+0xb2>
		coarse = 0x1f;
    f096:	231f      	movs	r3, #31
    f098:	22a4      	movs	r2, #164	; 0xa4
    f09a:	18ba      	adds	r2, r7, r2
    f09c:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    f09e:	23a4      	movs	r3, #164	; 0xa4
    f0a0:	18fb      	adds	r3, r7, r3
    f0a2:	681b      	ldr	r3, [r3, #0]
    f0a4:	b2da      	uxtb	r2, r3
    f0a6:	2384      	movs	r3, #132	; 0x84
    f0a8:	18fb      	adds	r3, r7, r3
    f0aa:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f0ac:	2384      	movs	r3, #132	; 0x84
    f0ae:	18fb      	adds	r3, r7, r3
    f0b0:	2200      	movs	r2, #0
    f0b2:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f0b4:	2384      	movs	r3, #132	; 0x84
    f0b6:	18fb      	adds	r3, r7, r3
    f0b8:	2200      	movs	r2, #0
    f0ba:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f0bc:	2384      	movs	r3, #132	; 0x84
    f0be:	18fb      	adds	r3, r7, r3
    f0c0:	2200      	movs	r2, #0
    f0c2:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    f0c4:	2384      	movs	r3, #132	; 0x84
    f0c6:	18fb      	adds	r3, r7, r3
    f0c8:	2200      	movs	r2, #0
    f0ca:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    f0cc:	2384      	movs	r3, #132	; 0x84
    f0ce:	18fb      	adds	r3, r7, r3
    f0d0:	2207      	movs	r2, #7
    f0d2:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    f0d4:	2384      	movs	r3, #132	; 0x84
    f0d6:	18fb      	adds	r3, r7, r3
    f0d8:	223f      	movs	r2, #63	; 0x3f
    f0da:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    f0dc:	2384      	movs	r3, #132	; 0x84
    f0de:	18fb      	adds	r3, r7, r3
    f0e0:	220a      	movs	r2, #10
    f0e2:	81da      	strh	r2, [r3, #14]
		dfll_conf.fine_value   = 0x1ff;
    f0e4:	2384      	movs	r3, #132	; 0x84
    f0e6:	18fb      	adds	r3, r7, r3
    f0e8:	4a6e      	ldr	r2, [pc, #440]	; (f2a4 <system_clock_init+0x2b8>)
    f0ea:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f0ec:	2384      	movs	r3, #132	; 0x84
    f0ee:	18fb      	adds	r3, r7, r3
    f0f0:	2200      	movs	r2, #0
    f0f2:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f0f4:	2384      	movs	r3, #132	; 0x84
    f0f6:	18fb      	adds	r3, r7, r3
    f0f8:	2200      	movs	r2, #0
    f0fa:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f0fc:	2384      	movs	r3, #132	; 0x84
    f0fe:	18fb      	adds	r3, r7, r3
    f100:	2200      	movs	r2, #0
    f102:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    f104:	2384      	movs	r3, #132	; 0x84
    f106:	18fb      	adds	r3, r7, r3
    f108:	2280      	movs	r2, #128	; 0x80
    f10a:	0052      	lsls	r2, r2, #1
    f10c:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    f10e:	2384      	movs	r3, #132	; 0x84
    f110:	18fb      	adds	r3, r7, r3
    f112:	4a65      	ldr	r2, [pc, #404]	; (f2a8 <system_clock_init+0x2bc>)
    f114:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    f116:	2384      	movs	r3, #132	; 0x84
    f118:	18fb      	adds	r3, r7, r3
    f11a:	0018      	movs	r0, r3
    f11c:	4b63      	ldr	r3, [pc, #396]	; (f2ac <system_clock_init+0x2c0>)
    f11e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    f120:	2380      	movs	r3, #128	; 0x80
    f122:	18fb      	adds	r3, r7, r3
    f124:	0018      	movs	r0, r3
    f126:	4b62      	ldr	r3, [pc, #392]	; (f2b0 <system_clock_init+0x2c4>)
    f128:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    f12a:	2380      	movs	r3, #128	; 0x80
    f12c:	18fb      	adds	r3, r7, r3
    f12e:	2200      	movs	r2, #0
    f130:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    f132:	2380      	movs	r3, #128	; 0x80
    f134:	18fb      	adds	r3, r7, r3
    f136:	2201      	movs	r2, #1
    f138:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    f13a:	2380      	movs	r3, #128	; 0x80
    f13c:	18fb      	adds	r3, r7, r3
    f13e:	2200      	movs	r2, #0
    f140:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    f142:	2380      	movs	r3, #128	; 0x80
    f144:	18fb      	adds	r3, r7, r3
    f146:	0018      	movs	r0, r3
    f148:	4b5a      	ldr	r3, [pc, #360]	; (f2b4 <system_clock_init+0x2c8>)
    f14a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    f14c:	2006      	movs	r0, #6
    f14e:	4b51      	ldr	r3, [pc, #324]	; (f294 <system_clock_init+0x2a8>)
    f150:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    f152:	4b59      	ldr	r3, [pc, #356]	; (f2b8 <system_clock_init+0x2cc>)
    f154:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    f156:	2368      	movs	r3, #104	; 0x68
    f158:	18fb      	adds	r3, r7, r3
    f15a:	0018      	movs	r0, r3
    f15c:	4b57      	ldr	r3, [pc, #348]	; (f2bc <system_clock_init+0x2d0>)
    f15e:	4798      	blx	r3
    f160:	2368      	movs	r3, #104	; 0x68
    f162:	18fb      	adds	r3, r7, r3
    f164:	2206      	movs	r2, #6
    f166:	701a      	strb	r2, [r3, #0]
    f168:	2368      	movs	r3, #104	; 0x68
    f16a:	18fb      	adds	r3, r7, r3
    f16c:	2201      	movs	r2, #1
    f16e:	605a      	str	r2, [r3, #4]
    f170:	2368      	movs	r3, #104	; 0x68
    f172:	18fb      	adds	r3, r7, r3
    f174:	2200      	movs	r2, #0
    f176:	721a      	strb	r2, [r3, #8]
    f178:	2368      	movs	r3, #104	; 0x68
    f17a:	18fb      	adds	r3, r7, r3
    f17c:	2200      	movs	r2, #0
    f17e:	725a      	strb	r2, [r3, #9]
    f180:	2368      	movs	r3, #104	; 0x68
    f182:	18fb      	adds	r3, r7, r3
    f184:	0019      	movs	r1, r3
    f186:	2001      	movs	r0, #1
    f188:	4b4d      	ldr	r3, [pc, #308]	; (f2c0 <system_clock_init+0x2d4>)
    f18a:	4798      	blx	r3
    f18c:	2001      	movs	r0, #1
    f18e:	4b4d      	ldr	r3, [pc, #308]	; (f2c4 <system_clock_init+0x2d8>)
    f190:	4798      	blx	r3
    f192:	2350      	movs	r3, #80	; 0x50
    f194:	18fb      	adds	r3, r7, r3
    f196:	0018      	movs	r0, r3
    f198:	4b48      	ldr	r3, [pc, #288]	; (f2bc <system_clock_init+0x2d0>)
    f19a:	4798      	blx	r3
    f19c:	2350      	movs	r3, #80	; 0x50
    f19e:	18fb      	adds	r3, r7, r3
    f1a0:	2200      	movs	r2, #0
    f1a2:	701a      	strb	r2, [r3, #0]
    f1a4:	2350      	movs	r3, #80	; 0x50
    f1a6:	18fb      	adds	r3, r7, r3
    f1a8:	2201      	movs	r2, #1
    f1aa:	605a      	str	r2, [r3, #4]
    f1ac:	2350      	movs	r3, #80	; 0x50
    f1ae:	18fb      	adds	r3, r7, r3
    f1b0:	2200      	movs	r2, #0
    f1b2:	721a      	strb	r2, [r3, #8]
    f1b4:	2350      	movs	r3, #80	; 0x50
    f1b6:	18fb      	adds	r3, r7, r3
    f1b8:	2200      	movs	r2, #0
    f1ba:	725a      	strb	r2, [r3, #9]
    f1bc:	2350      	movs	r3, #80	; 0x50
    f1be:	18fb      	adds	r3, r7, r3
    f1c0:	0019      	movs	r1, r3
    f1c2:	2003      	movs	r0, #3
    f1c4:	4b3e      	ldr	r3, [pc, #248]	; (f2c0 <system_clock_init+0x2d4>)
    f1c6:	4798      	blx	r3
    f1c8:	2003      	movs	r0, #3
    f1ca:	4b3e      	ldr	r3, [pc, #248]	; (f2c4 <system_clock_init+0x2d8>)
    f1cc:	4798      	blx	r3
    f1ce:	2344      	movs	r3, #68	; 0x44
    f1d0:	18fb      	adds	r3, r7, r3
    f1d2:	0018      	movs	r0, r3
    f1d4:	4b39      	ldr	r3, [pc, #228]	; (f2bc <system_clock_init+0x2d0>)
    f1d6:	4798      	blx	r3
    f1d8:	2344      	movs	r3, #68	; 0x44
    f1da:	18fb      	adds	r3, r7, r3
    f1dc:	2206      	movs	r2, #6
    f1de:	701a      	strb	r2, [r3, #0]
    f1e0:	2344      	movs	r3, #68	; 0x44
    f1e2:	18fb      	adds	r3, r7, r3
    f1e4:	22ff      	movs	r2, #255	; 0xff
    f1e6:	605a      	str	r2, [r3, #4]
    f1e8:	2344      	movs	r3, #68	; 0x44
    f1ea:	18fb      	adds	r3, r7, r3
    f1ec:	2200      	movs	r2, #0
    f1ee:	721a      	strb	r2, [r3, #8]
    f1f0:	2344      	movs	r3, #68	; 0x44
    f1f2:	18fb      	adds	r3, r7, r3
    f1f4:	2200      	movs	r2, #0
    f1f6:	725a      	strb	r2, [r3, #9]
    f1f8:	2344      	movs	r3, #68	; 0x44
    f1fa:	18fb      	adds	r3, r7, r3
    f1fc:	0019      	movs	r1, r3
    f1fe:	2004      	movs	r0, #4
    f200:	4b2f      	ldr	r3, [pc, #188]	; (f2c0 <system_clock_init+0x2d4>)
    f202:	4798      	blx	r3
    f204:	2004      	movs	r0, #4
    f206:	4b2f      	ldr	r3, [pc, #188]	; (f2c4 <system_clock_init+0x2d8>)
    f208:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    f20a:	2007      	movs	r0, #7
    f20c:	4b21      	ldr	r3, [pc, #132]	; (f294 <system_clock_init+0x2a8>)
    f20e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    f210:	46c0      	nop			; (mov r8, r8)
    f212:	2007      	movs	r0, #7
    f214:	4b20      	ldr	r3, [pc, #128]	; (f298 <system_clock_init+0x2ac>)
    f216:	4798      	blx	r3
    f218:	0003      	movs	r3, r0
    f21a:	001a      	movs	r2, r3
    f21c:	2301      	movs	r3, #1
    f21e:	4053      	eors	r3, r2
    f220:	b2db      	uxtb	r3, r3
    f222:	2b00      	cmp	r3, #0
    f224:	d1f5      	bne.n	f212 <system_clock_init+0x226>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    f226:	2000      	movs	r0, #0
    f228:	4b27      	ldr	r3, [pc, #156]	; (f2c8 <system_clock_init+0x2dc>)
    f22a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    f22c:	2100      	movs	r1, #0
    f22e:	2000      	movs	r0, #0
    f230:	4b26      	ldr	r3, [pc, #152]	; (f2cc <system_clock_init+0x2e0>)
    f232:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    f234:	2100      	movs	r1, #0
    f236:	2001      	movs	r0, #1
    f238:	4b24      	ldr	r3, [pc, #144]	; (f2cc <system_clock_init+0x2e0>)
    f23a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    f23c:	2100      	movs	r1, #0
    f23e:	2002      	movs	r0, #2
    f240:	4b22      	ldr	r3, [pc, #136]	; (f2cc <system_clock_init+0x2e0>)
    f242:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    f244:	1d3b      	adds	r3, r7, #4
    f246:	0018      	movs	r0, r3
    f248:	4b1c      	ldr	r3, [pc, #112]	; (f2bc <system_clock_init+0x2d0>)
    f24a:	4798      	blx	r3
    f24c:	1d3b      	adds	r3, r7, #4
    f24e:	2207      	movs	r2, #7
    f250:	701a      	strb	r2, [r3, #0]
    f252:	1d3b      	adds	r3, r7, #4
    f254:	2201      	movs	r2, #1
    f256:	605a      	str	r2, [r3, #4]
    f258:	1d3b      	adds	r3, r7, #4
    f25a:	2200      	movs	r2, #0
    f25c:	721a      	strb	r2, [r3, #8]
    f25e:	1d3b      	adds	r3, r7, #4
    f260:	2200      	movs	r2, #0
    f262:	725a      	strb	r2, [r3, #9]
    f264:	1d3b      	adds	r3, r7, #4
    f266:	0019      	movs	r1, r3
    f268:	2000      	movs	r0, #0
    f26a:	4b15      	ldr	r3, [pc, #84]	; (f2c0 <system_clock_init+0x2d4>)
    f26c:	4798      	blx	r3
    f26e:	2000      	movs	r0, #0
    f270:	4b14      	ldr	r3, [pc, #80]	; (f2c4 <system_clock_init+0x2d8>)
    f272:	4798      	blx	r3
#endif
}
    f274:	46c0      	nop			; (mov r8, r8)
    f276:	46bd      	mov	sp, r7
    f278:	b02a      	add	sp, #168	; 0xa8
    f27a:	bd80      	pop	{r7, pc}
    f27c:	40000800 	.word	0x40000800
    f280:	0000ea81 	.word	0x0000ea81
    f284:	0000efb5 	.word	0x0000efb5
    f288:	0000e961 	.word	0x0000e961
    f28c:	00b71b00 	.word	0x00b71b00
    f290:	0000ec4d 	.word	0x0000ec4d
    f294:	0000ee85 	.word	0x0000ee85
    f298:	0000ef31 	.word	0x0000ef31
    f29c:	0000e9bb 	.word	0x0000e9bb
    f2a0:	00806024 	.word	0x00806024
    f2a4:	000001ff 	.word	0x000001ff
    f2a8:	ffffbb80 	.word	0xffffbb80
    f2ac:	0000edb5 	.word	0x0000edb5
    f2b0:	0000e999 	.word	0x0000e999
    f2b4:	0000ebd5 	.word	0x0000ebd5
    f2b8:	0000f375 	.word	0x0000f375
    f2bc:	0000e931 	.word	0x0000e931
    f2c0:	0000f3a5 	.word	0x0000f3a5
    f2c4:	0000f4c9 	.word	0x0000f4c9
    f2c8:	0000ea0d 	.word	0x0000ea0d
    f2cc:	0000ea2d 	.word	0x0000ea2d

0000f2d0 <system_apb_clock_set_mask>:
{
    f2d0:	b580      	push	{r7, lr}
    f2d2:	b082      	sub	sp, #8
    f2d4:	af00      	add	r7, sp, #0
    f2d6:	0002      	movs	r2, r0
    f2d8:	6039      	str	r1, [r7, #0]
    f2da:	1dfb      	adds	r3, r7, #7
    f2dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    f2de:	1dfb      	adds	r3, r7, #7
    f2e0:	781b      	ldrb	r3, [r3, #0]
    f2e2:	2b01      	cmp	r3, #1
    f2e4:	d00a      	beq.n	f2fc <system_apb_clock_set_mask+0x2c>
    f2e6:	2b02      	cmp	r3, #2
    f2e8:	d00f      	beq.n	f30a <system_apb_clock_set_mask+0x3a>
    f2ea:	2b00      	cmp	r3, #0
    f2ec:	d114      	bne.n	f318 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    f2ee:	4b0e      	ldr	r3, [pc, #56]	; (f328 <system_apb_clock_set_mask+0x58>)
    f2f0:	4a0d      	ldr	r2, [pc, #52]	; (f328 <system_apb_clock_set_mask+0x58>)
    f2f2:	6991      	ldr	r1, [r2, #24]
    f2f4:	683a      	ldr	r2, [r7, #0]
    f2f6:	430a      	orrs	r2, r1
    f2f8:	619a      	str	r2, [r3, #24]
			break;
    f2fa:	e00f      	b.n	f31c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    f2fc:	4b0a      	ldr	r3, [pc, #40]	; (f328 <system_apb_clock_set_mask+0x58>)
    f2fe:	4a0a      	ldr	r2, [pc, #40]	; (f328 <system_apb_clock_set_mask+0x58>)
    f300:	69d1      	ldr	r1, [r2, #28]
    f302:	683a      	ldr	r2, [r7, #0]
    f304:	430a      	orrs	r2, r1
    f306:	61da      	str	r2, [r3, #28]
			break;
    f308:	e008      	b.n	f31c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    f30a:	4b07      	ldr	r3, [pc, #28]	; (f328 <system_apb_clock_set_mask+0x58>)
    f30c:	4a06      	ldr	r2, [pc, #24]	; (f328 <system_apb_clock_set_mask+0x58>)
    f30e:	6a11      	ldr	r1, [r2, #32]
    f310:	683a      	ldr	r2, [r7, #0]
    f312:	430a      	orrs	r2, r1
    f314:	621a      	str	r2, [r3, #32]
			break;
    f316:	e001      	b.n	f31c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    f318:	2317      	movs	r3, #23
    f31a:	e000      	b.n	f31e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    f31c:	2300      	movs	r3, #0
}
    f31e:	0018      	movs	r0, r3
    f320:	46bd      	mov	sp, r7
    f322:	b002      	add	sp, #8
    f324:	bd80      	pop	{r7, pc}
    f326:	46c0      	nop			; (mov r8, r8)
    f328:	40000400 	.word	0x40000400

0000f32c <system_interrupt_enter_critical_section>:
{
    f32c:	b580      	push	{r7, lr}
    f32e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    f330:	4b02      	ldr	r3, [pc, #8]	; (f33c <system_interrupt_enter_critical_section+0x10>)
    f332:	4798      	blx	r3
}
    f334:	46c0      	nop			; (mov r8, r8)
    f336:	46bd      	mov	sp, r7
    f338:	bd80      	pop	{r7, pc}
    f33a:	46c0      	nop			; (mov r8, r8)
    f33c:	0000e89d 	.word	0x0000e89d

0000f340 <system_interrupt_leave_critical_section>:
{
    f340:	b580      	push	{r7, lr}
    f342:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    f344:	4b02      	ldr	r3, [pc, #8]	; (f350 <system_interrupt_leave_critical_section+0x10>)
    f346:	4798      	blx	r3
}
    f348:	46c0      	nop			; (mov r8, r8)
    f34a:	46bd      	mov	sp, r7
    f34c:	bd80      	pop	{r7, pc}
    f34e:	46c0      	nop			; (mov r8, r8)
    f350:	0000e8f1 	.word	0x0000e8f1

0000f354 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    f354:	b580      	push	{r7, lr}
    f356:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f358:	4b05      	ldr	r3, [pc, #20]	; (f370 <system_gclk_is_syncing+0x1c>)
    f35a:	785b      	ldrb	r3, [r3, #1]
    f35c:	b2db      	uxtb	r3, r3
    f35e:	b25b      	sxtb	r3, r3
    f360:	2b00      	cmp	r3, #0
    f362:	da01      	bge.n	f368 <system_gclk_is_syncing+0x14>
		return true;
    f364:	2301      	movs	r3, #1
    f366:	e000      	b.n	f36a <system_gclk_is_syncing+0x16>
	}

	return false;
    f368:	2300      	movs	r3, #0
}
    f36a:	0018      	movs	r0, r3
    f36c:	46bd      	mov	sp, r7
    f36e:	bd80      	pop	{r7, pc}
    f370:	40000c00 	.word	0x40000c00

0000f374 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    f374:	b580      	push	{r7, lr}
    f376:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    f378:	2108      	movs	r1, #8
    f37a:	2000      	movs	r0, #0
    f37c:	4b07      	ldr	r3, [pc, #28]	; (f39c <system_gclk_init+0x28>)
    f37e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    f380:	4b07      	ldr	r3, [pc, #28]	; (f3a0 <system_gclk_init+0x2c>)
    f382:	2201      	movs	r2, #1
    f384:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    f386:	46c0      	nop			; (mov r8, r8)
    f388:	4b05      	ldr	r3, [pc, #20]	; (f3a0 <system_gclk_init+0x2c>)
    f38a:	781b      	ldrb	r3, [r3, #0]
    f38c:	b2db      	uxtb	r3, r3
    f38e:	001a      	movs	r2, r3
    f390:	2301      	movs	r3, #1
    f392:	4013      	ands	r3, r2
    f394:	d1f8      	bne.n	f388 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    f396:	46c0      	nop			; (mov r8, r8)
    f398:	46bd      	mov	sp, r7
    f39a:	bd80      	pop	{r7, pc}
    f39c:	0000f2d1 	.word	0x0000f2d1
    f3a0:	40000c00 	.word	0x40000c00

0000f3a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    f3a4:	b580      	push	{r7, lr}
    f3a6:	b086      	sub	sp, #24
    f3a8:	af00      	add	r7, sp, #0
    f3aa:	0002      	movs	r2, r0
    f3ac:	6039      	str	r1, [r7, #0]
    f3ae:	1dfb      	adds	r3, r7, #7
    f3b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    f3b2:	1dfb      	adds	r3, r7, #7
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    f3b8:	1dfb      	adds	r3, r7, #7
    f3ba:	781b      	ldrb	r3, [r3, #0]
    f3bc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    f3be:	683b      	ldr	r3, [r7, #0]
    f3c0:	781b      	ldrb	r3, [r3, #0]
    f3c2:	021b      	lsls	r3, r3, #8
    f3c4:	001a      	movs	r2, r3
    f3c6:	697b      	ldr	r3, [r7, #20]
    f3c8:	4313      	orrs	r3, r2
    f3ca:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    f3cc:	683b      	ldr	r3, [r7, #0]
    f3ce:	785b      	ldrb	r3, [r3, #1]
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d004      	beq.n	f3de <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    f3d4:	697b      	ldr	r3, [r7, #20]
    f3d6:	2280      	movs	r2, #128	; 0x80
    f3d8:	02d2      	lsls	r2, r2, #11
    f3da:	4313      	orrs	r3, r2
    f3dc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    f3de:	683b      	ldr	r3, [r7, #0]
    f3e0:	7a5b      	ldrb	r3, [r3, #9]
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	d004      	beq.n	f3f0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    f3e6:	697b      	ldr	r3, [r7, #20]
    f3e8:	2280      	movs	r2, #128	; 0x80
    f3ea:	0312      	lsls	r2, r2, #12
    f3ec:	4313      	orrs	r3, r2
    f3ee:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    f3f0:	683b      	ldr	r3, [r7, #0]
    f3f2:	685b      	ldr	r3, [r3, #4]
    f3f4:	2b01      	cmp	r3, #1
    f3f6:	d92c      	bls.n	f452 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    f3f8:	683b      	ldr	r3, [r7, #0]
    f3fa:	685a      	ldr	r2, [r3, #4]
    f3fc:	683b      	ldr	r3, [r7, #0]
    f3fe:	685b      	ldr	r3, [r3, #4]
    f400:	3b01      	subs	r3, #1
    f402:	4013      	ands	r3, r2
    f404:	d11a      	bne.n	f43c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    f406:	2300      	movs	r3, #0
    f408:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    f40a:	2302      	movs	r3, #2
    f40c:	60bb      	str	r3, [r7, #8]
    f40e:	e005      	b.n	f41c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    f410:	68fb      	ldr	r3, [r7, #12]
    f412:	3301      	adds	r3, #1
    f414:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    f416:	68bb      	ldr	r3, [r7, #8]
    f418:	005b      	lsls	r3, r3, #1
    f41a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    f41c:	683b      	ldr	r3, [r7, #0]
    f41e:	685a      	ldr	r2, [r3, #4]
    f420:	68bb      	ldr	r3, [r7, #8]
    f422:	429a      	cmp	r2, r3
    f424:	d8f4      	bhi.n	f410 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    f426:	68fb      	ldr	r3, [r7, #12]
    f428:	021b      	lsls	r3, r3, #8
    f42a:	693a      	ldr	r2, [r7, #16]
    f42c:	4313      	orrs	r3, r2
    f42e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    f430:	697b      	ldr	r3, [r7, #20]
    f432:	2280      	movs	r2, #128	; 0x80
    f434:	0352      	lsls	r2, r2, #13
    f436:	4313      	orrs	r3, r2
    f438:	617b      	str	r3, [r7, #20]
    f43a:	e00a      	b.n	f452 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    f43c:	683b      	ldr	r3, [r7, #0]
    f43e:	685b      	ldr	r3, [r3, #4]
    f440:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    f442:	693a      	ldr	r2, [r7, #16]
    f444:	4313      	orrs	r3, r2
    f446:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    f448:	697b      	ldr	r3, [r7, #20]
    f44a:	2280      	movs	r2, #128	; 0x80
    f44c:	0292      	lsls	r2, r2, #10
    f44e:	4313      	orrs	r3, r2
    f450:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    f452:	683b      	ldr	r3, [r7, #0]
    f454:	7a1b      	ldrb	r3, [r3, #8]
    f456:	2b00      	cmp	r3, #0
    f458:	d004      	beq.n	f464 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    f45a:	697b      	ldr	r3, [r7, #20]
    f45c:	2280      	movs	r2, #128	; 0x80
    f45e:	0392      	lsls	r2, r2, #14
    f460:	4313      	orrs	r3, r2
    f462:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    f464:	46c0      	nop			; (mov r8, r8)
    f466:	4b13      	ldr	r3, [pc, #76]	; (f4b4 <system_gclk_gen_set_config+0x110>)
    f468:	4798      	blx	r3
    f46a:	1e03      	subs	r3, r0, #0
    f46c:	d1fb      	bne.n	f466 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f46e:	4b12      	ldr	r3, [pc, #72]	; (f4b8 <system_gclk_gen_set_config+0x114>)
    f470:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f472:	4a12      	ldr	r2, [pc, #72]	; (f4bc <system_gclk_gen_set_config+0x118>)
    f474:	1dfb      	adds	r3, r7, #7
    f476:	781b      	ldrb	r3, [r3, #0]
    f478:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    f47a:	46c0      	nop			; (mov r8, r8)
    f47c:	4b0d      	ldr	r3, [pc, #52]	; (f4b4 <system_gclk_gen_set_config+0x110>)
    f47e:	4798      	blx	r3
    f480:	1e03      	subs	r3, r0, #0
    f482:	d1fb      	bne.n	f47c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    f484:	4b0e      	ldr	r3, [pc, #56]	; (f4c0 <system_gclk_gen_set_config+0x11c>)
    f486:	693a      	ldr	r2, [r7, #16]
    f488:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    f48a:	46c0      	nop			; (mov r8, r8)
    f48c:	4b09      	ldr	r3, [pc, #36]	; (f4b4 <system_gclk_gen_set_config+0x110>)
    f48e:	4798      	blx	r3
    f490:	1e03      	subs	r3, r0, #0
    f492:	d1fb      	bne.n	f48c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    f494:	4b0a      	ldr	r3, [pc, #40]	; (f4c0 <system_gclk_gen_set_config+0x11c>)
    f496:	4a0a      	ldr	r2, [pc, #40]	; (f4c0 <system_gclk_gen_set_config+0x11c>)
    f498:	6851      	ldr	r1, [r2, #4]
    f49a:	2280      	movs	r2, #128	; 0x80
    f49c:	0252      	lsls	r2, r2, #9
    f49e:	4011      	ands	r1, r2
    f4a0:	697a      	ldr	r2, [r7, #20]
    f4a2:	430a      	orrs	r2, r1
    f4a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f4a6:	4b07      	ldr	r3, [pc, #28]	; (f4c4 <system_gclk_gen_set_config+0x120>)
    f4a8:	4798      	blx	r3
}
    f4aa:	46c0      	nop			; (mov r8, r8)
    f4ac:	46bd      	mov	sp, r7
    f4ae:	b006      	add	sp, #24
    f4b0:	bd80      	pop	{r7, pc}
    f4b2:	46c0      	nop			; (mov r8, r8)
    f4b4:	0000f355 	.word	0x0000f355
    f4b8:	0000f32d 	.word	0x0000f32d
    f4bc:	40000c08 	.word	0x40000c08
    f4c0:	40000c00 	.word	0x40000c00
    f4c4:	0000f341 	.word	0x0000f341

0000f4c8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    f4c8:	b580      	push	{r7, lr}
    f4ca:	b082      	sub	sp, #8
    f4cc:	af00      	add	r7, sp, #0
    f4ce:	0002      	movs	r2, r0
    f4d0:	1dfb      	adds	r3, r7, #7
    f4d2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f4d4:	46c0      	nop			; (mov r8, r8)
    f4d6:	4b0e      	ldr	r3, [pc, #56]	; (f510 <system_gclk_gen_enable+0x48>)
    f4d8:	4798      	blx	r3
    f4da:	1e03      	subs	r3, r0, #0
    f4dc:	d1fb      	bne.n	f4d6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f4de:	4b0d      	ldr	r3, [pc, #52]	; (f514 <system_gclk_gen_enable+0x4c>)
    f4e0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f4e2:	4a0d      	ldr	r2, [pc, #52]	; (f518 <system_gclk_gen_enable+0x50>)
    f4e4:	1dfb      	adds	r3, r7, #7
    f4e6:	781b      	ldrb	r3, [r3, #0]
    f4e8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f4ea:	46c0      	nop			; (mov r8, r8)
    f4ec:	4b08      	ldr	r3, [pc, #32]	; (f510 <system_gclk_gen_enable+0x48>)
    f4ee:	4798      	blx	r3
    f4f0:	1e03      	subs	r3, r0, #0
    f4f2:	d1fb      	bne.n	f4ec <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    f4f4:	4b09      	ldr	r3, [pc, #36]	; (f51c <system_gclk_gen_enable+0x54>)
    f4f6:	4a09      	ldr	r2, [pc, #36]	; (f51c <system_gclk_gen_enable+0x54>)
    f4f8:	6852      	ldr	r2, [r2, #4]
    f4fa:	2180      	movs	r1, #128	; 0x80
    f4fc:	0249      	lsls	r1, r1, #9
    f4fe:	430a      	orrs	r2, r1
    f500:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f502:	4b07      	ldr	r3, [pc, #28]	; (f520 <system_gclk_gen_enable+0x58>)
    f504:	4798      	blx	r3
}
    f506:	46c0      	nop			; (mov r8, r8)
    f508:	46bd      	mov	sp, r7
    f50a:	b002      	add	sp, #8
    f50c:	bd80      	pop	{r7, pc}
    f50e:	46c0      	nop			; (mov r8, r8)
    f510:	0000f355 	.word	0x0000f355
    f514:	0000f32d 	.word	0x0000f32d
    f518:	40000c04 	.word	0x40000c04
    f51c:	40000c00 	.word	0x40000c00
    f520:	0000f341 	.word	0x0000f341

0000f524 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    f524:	b580      	push	{r7, lr}
    f526:	b086      	sub	sp, #24
    f528:	af00      	add	r7, sp, #0
    f52a:	0002      	movs	r2, r0
    f52c:	1dfb      	adds	r3, r7, #7
    f52e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f530:	46c0      	nop			; (mov r8, r8)
    f532:	4b2a      	ldr	r3, [pc, #168]	; (f5dc <system_gclk_gen_get_hz+0xb8>)
    f534:	4798      	blx	r3
    f536:	1e03      	subs	r3, r0, #0
    f538:	d1fb      	bne.n	f532 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f53a:	4b29      	ldr	r3, [pc, #164]	; (f5e0 <system_gclk_gen_get_hz+0xbc>)
    f53c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f53e:	4a29      	ldr	r2, [pc, #164]	; (f5e4 <system_gclk_gen_get_hz+0xc0>)
    f540:	1dfb      	adds	r3, r7, #7
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f546:	46c0      	nop			; (mov r8, r8)
    f548:	4b24      	ldr	r3, [pc, #144]	; (f5dc <system_gclk_gen_get_hz+0xb8>)
    f54a:	4798      	blx	r3
    f54c:	1e03      	subs	r3, r0, #0
    f54e:	d1fb      	bne.n	f548 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    f550:	4b25      	ldr	r3, [pc, #148]	; (f5e8 <system_gclk_gen_get_hz+0xc4>)
    f552:	685b      	ldr	r3, [r3, #4]
    f554:	04db      	lsls	r3, r3, #19
    f556:	0edb      	lsrs	r3, r3, #27
    f558:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    f55a:	0018      	movs	r0, r3
    f55c:	4b23      	ldr	r3, [pc, #140]	; (f5ec <system_gclk_gen_get_hz+0xc8>)
    f55e:	4798      	blx	r3
    f560:	0003      	movs	r3, r0
    f562:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f564:	4a1f      	ldr	r2, [pc, #124]	; (f5e4 <system_gclk_gen_get_hz+0xc0>)
    f566:	1dfb      	adds	r3, r7, #7
    f568:	781b      	ldrb	r3, [r3, #0]
    f56a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    f56c:	4b1e      	ldr	r3, [pc, #120]	; (f5e8 <system_gclk_gen_get_hz+0xc4>)
    f56e:	685b      	ldr	r3, [r3, #4]
    f570:	02db      	lsls	r3, r3, #11
    f572:	0fdb      	lsrs	r3, r3, #31
    f574:	b2da      	uxtb	r2, r3
    f576:	2313      	movs	r3, #19
    f578:	18fb      	adds	r3, r7, r3
    f57a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f57c:	4a1c      	ldr	r2, [pc, #112]	; (f5f0 <system_gclk_gen_get_hz+0xcc>)
    f57e:	1dfb      	adds	r3, r7, #7
    f580:	781b      	ldrb	r3, [r3, #0]
    f582:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f584:	46c0      	nop			; (mov r8, r8)
    f586:	4b15      	ldr	r3, [pc, #84]	; (f5dc <system_gclk_gen_get_hz+0xb8>)
    f588:	4798      	blx	r3
    f58a:	1e03      	subs	r3, r0, #0
    f58c:	d1fb      	bne.n	f586 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    f58e:	4b16      	ldr	r3, [pc, #88]	; (f5e8 <system_gclk_gen_get_hz+0xc4>)
    f590:	689b      	ldr	r3, [r3, #8]
    f592:	021b      	lsls	r3, r3, #8
    f594:	0c1b      	lsrs	r3, r3, #16
    f596:	b29b      	uxth	r3, r3
    f598:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    f59a:	4b16      	ldr	r3, [pc, #88]	; (f5f4 <system_gclk_gen_get_hz+0xd0>)
    f59c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    f59e:	2313      	movs	r3, #19
    f5a0:	18fb      	adds	r3, r7, r3
    f5a2:	781b      	ldrb	r3, [r3, #0]
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d109      	bne.n	f5bc <system_gclk_gen_get_hz+0x98>
    f5a8:	68fb      	ldr	r3, [r7, #12]
    f5aa:	2b01      	cmp	r3, #1
    f5ac:	d906      	bls.n	f5bc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    f5ae:	4b12      	ldr	r3, [pc, #72]	; (f5f8 <system_gclk_gen_get_hz+0xd4>)
    f5b0:	68f9      	ldr	r1, [r7, #12]
    f5b2:	6978      	ldr	r0, [r7, #20]
    f5b4:	4798      	blx	r3
    f5b6:	0003      	movs	r3, r0
    f5b8:	617b      	str	r3, [r7, #20]
    f5ba:	e00a      	b.n	f5d2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    f5bc:	2313      	movs	r3, #19
    f5be:	18fb      	adds	r3, r7, r3
    f5c0:	781b      	ldrb	r3, [r3, #0]
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	d005      	beq.n	f5d2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    f5c6:	68fb      	ldr	r3, [r7, #12]
    f5c8:	3301      	adds	r3, #1
    f5ca:	697a      	ldr	r2, [r7, #20]
    f5cc:	40da      	lsrs	r2, r3
    f5ce:	0013      	movs	r3, r2
    f5d0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    f5d2:	697b      	ldr	r3, [r7, #20]
}
    f5d4:	0018      	movs	r0, r3
    f5d6:	46bd      	mov	sp, r7
    f5d8:	b006      	add	sp, #24
    f5da:	bd80      	pop	{r7, pc}
    f5dc:	0000f355 	.word	0x0000f355
    f5e0:	0000f32d 	.word	0x0000f32d
    f5e4:	40000c04 	.word	0x40000c04
    f5e8:	40000c00 	.word	0x40000c00
    f5ec:	0000eb15 	.word	0x0000eb15
    f5f0:	40000c08 	.word	0x40000c08
    f5f4:	0000f341 	.word	0x0000f341
    f5f8:	0000fd75 	.word	0x0000fd75

0000f5fc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    f5fc:	b580      	push	{r7, lr}
    f5fe:	b084      	sub	sp, #16
    f600:	af00      	add	r7, sp, #0
    f602:	0002      	movs	r2, r0
    f604:	6039      	str	r1, [r7, #0]
    f606:	1dfb      	adds	r3, r7, #7
    f608:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    f60a:	1dfb      	adds	r3, r7, #7
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    f610:	683b      	ldr	r3, [r7, #0]
    f612:	781b      	ldrb	r3, [r3, #0]
    f614:	021b      	lsls	r3, r3, #8
    f616:	001a      	movs	r2, r3
    f618:	68fb      	ldr	r3, [r7, #12]
    f61a:	4313      	orrs	r3, r2
    f61c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    f61e:	1dfb      	adds	r3, r7, #7
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	0018      	movs	r0, r3
    f624:	4b04      	ldr	r3, [pc, #16]	; (f638 <system_gclk_chan_set_config+0x3c>)
    f626:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    f628:	4b04      	ldr	r3, [pc, #16]	; (f63c <system_gclk_chan_set_config+0x40>)
    f62a:	68fa      	ldr	r2, [r7, #12]
    f62c:	b292      	uxth	r2, r2
    f62e:	805a      	strh	r2, [r3, #2]
}
    f630:	46c0      	nop			; (mov r8, r8)
    f632:	46bd      	mov	sp, r7
    f634:	b004      	add	sp, #16
    f636:	bd80      	pop	{r7, pc}
    f638:	0000f689 	.word	0x0000f689
    f63c:	40000c00 	.word	0x40000c00

0000f640 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    f640:	b580      	push	{r7, lr}
    f642:	b082      	sub	sp, #8
    f644:	af00      	add	r7, sp, #0
    f646:	0002      	movs	r2, r0
    f648:	1dfb      	adds	r3, r7, #7
    f64a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f64c:	4b0a      	ldr	r3, [pc, #40]	; (f678 <system_gclk_chan_enable+0x38>)
    f64e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f650:	4a0a      	ldr	r2, [pc, #40]	; (f67c <system_gclk_chan_enable+0x3c>)
    f652:	1dfb      	adds	r3, r7, #7
    f654:	781b      	ldrb	r3, [r3, #0]
    f656:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    f658:	4909      	ldr	r1, [pc, #36]	; (f680 <system_gclk_chan_enable+0x40>)
    f65a:	4b09      	ldr	r3, [pc, #36]	; (f680 <system_gclk_chan_enable+0x40>)
    f65c:	885b      	ldrh	r3, [r3, #2]
    f65e:	b29b      	uxth	r3, r3
    f660:	2280      	movs	r2, #128	; 0x80
    f662:	01d2      	lsls	r2, r2, #7
    f664:	4313      	orrs	r3, r2
    f666:	b29b      	uxth	r3, r3
    f668:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    f66a:	4b06      	ldr	r3, [pc, #24]	; (f684 <system_gclk_chan_enable+0x44>)
    f66c:	4798      	blx	r3
}
    f66e:	46c0      	nop			; (mov r8, r8)
    f670:	46bd      	mov	sp, r7
    f672:	b002      	add	sp, #8
    f674:	bd80      	pop	{r7, pc}
    f676:	46c0      	nop			; (mov r8, r8)
    f678:	0000f32d 	.word	0x0000f32d
    f67c:	40000c02 	.word	0x40000c02
    f680:	40000c00 	.word	0x40000c00
    f684:	0000f341 	.word	0x0000f341

0000f688 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    f688:	b580      	push	{r7, lr}
    f68a:	b084      	sub	sp, #16
    f68c:	af00      	add	r7, sp, #0
    f68e:	0002      	movs	r2, r0
    f690:	1dfb      	adds	r3, r7, #7
    f692:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f694:	4b1c      	ldr	r3, [pc, #112]	; (f708 <system_gclk_chan_disable+0x80>)
    f696:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f698:	4a1c      	ldr	r2, [pc, #112]	; (f70c <system_gclk_chan_disable+0x84>)
    f69a:	1dfb      	adds	r3, r7, #7
    f69c:	781b      	ldrb	r3, [r3, #0]
    f69e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    f6a0:	4b1b      	ldr	r3, [pc, #108]	; (f710 <system_gclk_chan_disable+0x88>)
    f6a2:	885b      	ldrh	r3, [r3, #2]
    f6a4:	051b      	lsls	r3, r3, #20
    f6a6:	0f1b      	lsrs	r3, r3, #28
    f6a8:	b2db      	uxtb	r3, r3
    f6aa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    f6ac:	4a18      	ldr	r2, [pc, #96]	; (f710 <system_gclk_chan_disable+0x88>)
    f6ae:	8853      	ldrh	r3, [r2, #2]
    f6b0:	4918      	ldr	r1, [pc, #96]	; (f714 <system_gclk_chan_disable+0x8c>)
    f6b2:	400b      	ands	r3, r1
    f6b4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    f6b6:	4a16      	ldr	r2, [pc, #88]	; (f710 <system_gclk_chan_disable+0x88>)
    f6b8:	4b15      	ldr	r3, [pc, #84]	; (f710 <system_gclk_chan_disable+0x88>)
    f6ba:	885b      	ldrh	r3, [r3, #2]
    f6bc:	b29b      	uxth	r3, r3
    f6be:	4916      	ldr	r1, [pc, #88]	; (f718 <system_gclk_chan_disable+0x90>)
    f6c0:	400b      	ands	r3, r1
    f6c2:	b29b      	uxth	r3, r3
    f6c4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    f6c6:	46c0      	nop			; (mov r8, r8)
    f6c8:	4b11      	ldr	r3, [pc, #68]	; (f710 <system_gclk_chan_disable+0x88>)
    f6ca:	885b      	ldrh	r3, [r3, #2]
    f6cc:	b29b      	uxth	r3, r3
    f6ce:	001a      	movs	r2, r3
    f6d0:	2380      	movs	r3, #128	; 0x80
    f6d2:	01db      	lsls	r3, r3, #7
    f6d4:	4013      	ands	r3, r2
    f6d6:	d1f7      	bne.n	f6c8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    f6d8:	4a0d      	ldr	r2, [pc, #52]	; (f710 <system_gclk_chan_disable+0x88>)
    f6da:	68fb      	ldr	r3, [r7, #12]
    f6dc:	b2db      	uxtb	r3, r3
    f6de:	1c19      	adds	r1, r3, #0
    f6e0:	230f      	movs	r3, #15
    f6e2:	400b      	ands	r3, r1
    f6e4:	b2d9      	uxtb	r1, r3
    f6e6:	8853      	ldrh	r3, [r2, #2]
    f6e8:	1c08      	adds	r0, r1, #0
    f6ea:	210f      	movs	r1, #15
    f6ec:	4001      	ands	r1, r0
    f6ee:	0208      	lsls	r0, r1, #8
    f6f0:	4908      	ldr	r1, [pc, #32]	; (f714 <system_gclk_chan_disable+0x8c>)
    f6f2:	400b      	ands	r3, r1
    f6f4:	1c19      	adds	r1, r3, #0
    f6f6:	1c03      	adds	r3, r0, #0
    f6f8:	430b      	orrs	r3, r1
    f6fa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    f6fc:	4b07      	ldr	r3, [pc, #28]	; (f71c <system_gclk_chan_disable+0x94>)
    f6fe:	4798      	blx	r3
}
    f700:	46c0      	nop			; (mov r8, r8)
    f702:	46bd      	mov	sp, r7
    f704:	b004      	add	sp, #16
    f706:	bd80      	pop	{r7, pc}
    f708:	0000f32d 	.word	0x0000f32d
    f70c:	40000c02 	.word	0x40000c02
    f710:	40000c00 	.word	0x40000c00
    f714:	fffff0ff 	.word	0xfffff0ff
    f718:	ffffbfff 	.word	0xffffbfff
    f71c:	0000f341 	.word	0x0000f341

0000f720 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    f720:	b580      	push	{r7, lr}
    f722:	b082      	sub	sp, #8
    f724:	af00      	add	r7, sp, #0
    f726:	0002      	movs	r2, r0
    f728:	1dfb      	adds	r3, r7, #7
    f72a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f72c:	4b09      	ldr	r3, [pc, #36]	; (f754 <system_gclk_chan_lock+0x34>)
    f72e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f730:	4a09      	ldr	r2, [pc, #36]	; (f758 <system_gclk_chan_lock+0x38>)
    f732:	1dfb      	adds	r3, r7, #7
    f734:	781b      	ldrb	r3, [r3, #0]
    f736:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    f738:	4a08      	ldr	r2, [pc, #32]	; (f75c <system_gclk_chan_lock+0x3c>)
    f73a:	4b08      	ldr	r3, [pc, #32]	; (f75c <system_gclk_chan_lock+0x3c>)
    f73c:	885b      	ldrh	r3, [r3, #2]
    f73e:	b29b      	uxth	r3, r3
    f740:	4907      	ldr	r1, [pc, #28]	; (f760 <system_gclk_chan_lock+0x40>)
    f742:	430b      	orrs	r3, r1
    f744:	b29b      	uxth	r3, r3
    f746:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    f748:	4b06      	ldr	r3, [pc, #24]	; (f764 <system_gclk_chan_lock+0x44>)
    f74a:	4798      	blx	r3
}
    f74c:	46c0      	nop			; (mov r8, r8)
    f74e:	46bd      	mov	sp, r7
    f750:	b002      	add	sp, #8
    f752:	bd80      	pop	{r7, pc}
    f754:	0000f32d 	.word	0x0000f32d
    f758:	40000c02 	.word	0x40000c02
    f75c:	40000c00 	.word	0x40000c00
    f760:	ffffc000 	.word	0xffffc000
    f764:	0000f341 	.word	0x0000f341

0000f768 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    f768:	b580      	push	{r7, lr}
    f76a:	b084      	sub	sp, #16
    f76c:	af00      	add	r7, sp, #0
    f76e:	0002      	movs	r2, r0
    f770:	1dfb      	adds	r3, r7, #7
    f772:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    f774:	4b0d      	ldr	r3, [pc, #52]	; (f7ac <system_gclk_chan_get_hz+0x44>)
    f776:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f778:	4a0d      	ldr	r2, [pc, #52]	; (f7b0 <system_gclk_chan_get_hz+0x48>)
    f77a:	1dfb      	adds	r3, r7, #7
    f77c:	781b      	ldrb	r3, [r3, #0]
    f77e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    f780:	4b0c      	ldr	r3, [pc, #48]	; (f7b4 <system_gclk_chan_get_hz+0x4c>)
    f782:	885b      	ldrh	r3, [r3, #2]
    f784:	051b      	lsls	r3, r3, #20
    f786:	0f1b      	lsrs	r3, r3, #28
    f788:	b2da      	uxtb	r2, r3
    f78a:	230f      	movs	r3, #15
    f78c:	18fb      	adds	r3, r7, r3
    f78e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    f790:	4b09      	ldr	r3, [pc, #36]	; (f7b8 <system_gclk_chan_get_hz+0x50>)
    f792:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    f794:	230f      	movs	r3, #15
    f796:	18fb      	adds	r3, r7, r3
    f798:	781b      	ldrb	r3, [r3, #0]
    f79a:	0018      	movs	r0, r3
    f79c:	4b07      	ldr	r3, [pc, #28]	; (f7bc <system_gclk_chan_get_hz+0x54>)
    f79e:	4798      	blx	r3
    f7a0:	0003      	movs	r3, r0
}
    f7a2:	0018      	movs	r0, r3
    f7a4:	46bd      	mov	sp, r7
    f7a6:	b004      	add	sp, #16
    f7a8:	bd80      	pop	{r7, pc}
    f7aa:	46c0      	nop			; (mov r8, r8)
    f7ac:	0000f32d 	.word	0x0000f32d
    f7b0:	40000c02 	.word	0x40000c02
    f7b4:	40000c00 	.word	0x40000c00
    f7b8:	0000f341 	.word	0x0000f341
    f7bc:	0000f525 	.word	0x0000f525

0000f7c0 <system_pinmux_get_group_from_gpio_pin>:
{
    f7c0:	b580      	push	{r7, lr}
    f7c2:	b084      	sub	sp, #16
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	0002      	movs	r2, r0
    f7c8:	1dfb      	adds	r3, r7, #7
    f7ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    f7cc:	230f      	movs	r3, #15
    f7ce:	18fb      	adds	r3, r7, r3
    f7d0:	1dfa      	adds	r2, r7, #7
    f7d2:	7812      	ldrb	r2, [r2, #0]
    f7d4:	09d2      	lsrs	r2, r2, #7
    f7d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    f7d8:	230e      	movs	r3, #14
    f7da:	18fb      	adds	r3, r7, r3
    f7dc:	1dfa      	adds	r2, r7, #7
    f7de:	7812      	ldrb	r2, [r2, #0]
    f7e0:	0952      	lsrs	r2, r2, #5
    f7e2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    f7e4:	4b0d      	ldr	r3, [pc, #52]	; (f81c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    f7e6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    f7e8:	230f      	movs	r3, #15
    f7ea:	18fb      	adds	r3, r7, r3
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	2b00      	cmp	r3, #0
    f7f0:	d10f      	bne.n	f812 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    f7f2:	230f      	movs	r3, #15
    f7f4:	18fb      	adds	r3, r7, r3
    f7f6:	781b      	ldrb	r3, [r3, #0]
    f7f8:	009b      	lsls	r3, r3, #2
    f7fa:	2210      	movs	r2, #16
    f7fc:	4694      	mov	ip, r2
    f7fe:	44bc      	add	ip, r7
    f800:	4463      	add	r3, ip
    f802:	3b08      	subs	r3, #8
    f804:	681a      	ldr	r2, [r3, #0]
    f806:	230e      	movs	r3, #14
    f808:	18fb      	adds	r3, r7, r3
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	01db      	lsls	r3, r3, #7
    f80e:	18d3      	adds	r3, r2, r3
    f810:	e000      	b.n	f814 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    f812:	2300      	movs	r3, #0
}
    f814:	0018      	movs	r0, r3
    f816:	46bd      	mov	sp, r7
    f818:	b004      	add	sp, #16
    f81a:	bd80      	pop	{r7, pc}
    f81c:	41004400 	.word	0x41004400

0000f820 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    f820:	b580      	push	{r7, lr}
    f822:	b088      	sub	sp, #32
    f824:	af00      	add	r7, sp, #0
    f826:	60f8      	str	r0, [r7, #12]
    f828:	60b9      	str	r1, [r7, #8]
    f82a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    f82c:	2300      	movs	r3, #0
    f82e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    f830:	687b      	ldr	r3, [r7, #4]
    f832:	78db      	ldrb	r3, [r3, #3]
    f834:	2201      	movs	r2, #1
    f836:	4053      	eors	r3, r2
    f838:	b2db      	uxtb	r3, r3
    f83a:	2b00      	cmp	r3, #0
    f83c:	d035      	beq.n	f8aa <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    f83e:	687b      	ldr	r3, [r7, #4]
    f840:	781b      	ldrb	r3, [r3, #0]
    f842:	2b80      	cmp	r3, #128	; 0x80
    f844:	d00b      	beq.n	f85e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    f846:	69fb      	ldr	r3, [r7, #28]
    f848:	2280      	movs	r2, #128	; 0x80
    f84a:	0252      	lsls	r2, r2, #9
    f84c:	4313      	orrs	r3, r2
    f84e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	061b      	lsls	r3, r3, #24
    f856:	001a      	movs	r2, r3
    f858:	69fb      	ldr	r3, [r7, #28]
    f85a:	4313      	orrs	r3, r2
    f85c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    f85e:	687b      	ldr	r3, [r7, #4]
    f860:	785b      	ldrb	r3, [r3, #1]
    f862:	2b00      	cmp	r3, #0
    f864:	d003      	beq.n	f86e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    f866:	687b      	ldr	r3, [r7, #4]
    f868:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    f86a:	2b02      	cmp	r3, #2
    f86c:	d110      	bne.n	f890 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    f86e:	69fb      	ldr	r3, [r7, #28]
    f870:	2280      	movs	r2, #128	; 0x80
    f872:	0292      	lsls	r2, r2, #10
    f874:	4313      	orrs	r3, r2
    f876:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    f878:	687b      	ldr	r3, [r7, #4]
    f87a:	789b      	ldrb	r3, [r3, #2]
    f87c:	2b00      	cmp	r3, #0
    f87e:	d004      	beq.n	f88a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    f880:	69fb      	ldr	r3, [r7, #28]
    f882:	2280      	movs	r2, #128	; 0x80
    f884:	02d2      	lsls	r2, r2, #11
    f886:	4313      	orrs	r3, r2
    f888:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    f88a:	68fb      	ldr	r3, [r7, #12]
    f88c:	68ba      	ldr	r2, [r7, #8]
    f88e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f890:	687b      	ldr	r3, [r7, #4]
    f892:	785b      	ldrb	r3, [r3, #1]
    f894:	2b01      	cmp	r3, #1
    f896:	d003      	beq.n	f8a0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    f898:	687b      	ldr	r3, [r7, #4]
    f89a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f89c:	2b02      	cmp	r3, #2
    f89e:	d107      	bne.n	f8b0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    f8a0:	69fb      	ldr	r3, [r7, #28]
    f8a2:	4a22      	ldr	r2, [pc, #136]	; (f92c <_system_pinmux_config+0x10c>)
    f8a4:	4013      	ands	r3, r2
    f8a6:	61fb      	str	r3, [r7, #28]
    f8a8:	e002      	b.n	f8b0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    f8aa:	68fb      	ldr	r3, [r7, #12]
    f8ac:	68ba      	ldr	r2, [r7, #8]
    f8ae:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    f8b0:	68bb      	ldr	r3, [r7, #8]
    f8b2:	041b      	lsls	r3, r3, #16
    f8b4:	0c1b      	lsrs	r3, r3, #16
    f8b6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    f8b8:	68bb      	ldr	r3, [r7, #8]
    f8ba:	0c1b      	lsrs	r3, r3, #16
    f8bc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f8be:	69ba      	ldr	r2, [r7, #24]
    f8c0:	69fb      	ldr	r3, [r7, #28]
    f8c2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    f8c4:	22a0      	movs	r2, #160	; 0xa0
    f8c6:	05d2      	lsls	r2, r2, #23
    f8c8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f8ca:	68fb      	ldr	r3, [r7, #12]
    f8cc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f8ce:	697a      	ldr	r2, [r7, #20]
    f8d0:	69fb      	ldr	r3, [r7, #28]
    f8d2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    f8d4:	22d0      	movs	r2, #208	; 0xd0
    f8d6:	0612      	lsls	r2, r2, #24
    f8d8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f8da:	68fb      	ldr	r3, [r7, #12]
    f8dc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    f8de:	687b      	ldr	r3, [r7, #4]
    f8e0:	78db      	ldrb	r3, [r3, #3]
    f8e2:	2201      	movs	r2, #1
    f8e4:	4053      	eors	r3, r2
    f8e6:	b2db      	uxtb	r3, r3
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	d01a      	beq.n	f922 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    f8ec:	69fa      	ldr	r2, [r7, #28]
    f8ee:	2380      	movs	r3, #128	; 0x80
    f8f0:	02db      	lsls	r3, r3, #11
    f8f2:	4013      	ands	r3, r2
    f8f4:	d00a      	beq.n	f90c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    f8f6:	687b      	ldr	r3, [r7, #4]
    f8f8:	789b      	ldrb	r3, [r3, #2]
    f8fa:	2b01      	cmp	r3, #1
    f8fc:	d103      	bne.n	f906 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    f8fe:	68fb      	ldr	r3, [r7, #12]
    f900:	68ba      	ldr	r2, [r7, #8]
    f902:	619a      	str	r2, [r3, #24]
    f904:	e002      	b.n	f90c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    f906:	68fb      	ldr	r3, [r7, #12]
    f908:	68ba      	ldr	r2, [r7, #8]
    f90a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f90c:	687b      	ldr	r3, [r7, #4]
    f90e:	785b      	ldrb	r3, [r3, #1]
    f910:	2b01      	cmp	r3, #1
    f912:	d003      	beq.n	f91c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    f914:	687b      	ldr	r3, [r7, #4]
    f916:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f918:	2b02      	cmp	r3, #2
    f91a:	d102      	bne.n	f922 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    f91c:	68fb      	ldr	r3, [r7, #12]
    f91e:	68ba      	ldr	r2, [r7, #8]
    f920:	609a      	str	r2, [r3, #8]
		}
	}
}
    f922:	46c0      	nop			; (mov r8, r8)
    f924:	46bd      	mov	sp, r7
    f926:	b008      	add	sp, #32
    f928:	bd80      	pop	{r7, pc}
    f92a:	46c0      	nop			; (mov r8, r8)
    f92c:	fffbffff 	.word	0xfffbffff

0000f930 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    f930:	b580      	push	{r7, lr}
    f932:	b084      	sub	sp, #16
    f934:	af00      	add	r7, sp, #0
    f936:	0002      	movs	r2, r0
    f938:	6039      	str	r1, [r7, #0]
    f93a:	1dfb      	adds	r3, r7, #7
    f93c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    f93e:	1dfb      	adds	r3, r7, #7
    f940:	781b      	ldrb	r3, [r3, #0]
    f942:	0018      	movs	r0, r3
    f944:	4b0a      	ldr	r3, [pc, #40]	; (f970 <system_pinmux_pin_set_config+0x40>)
    f946:	4798      	blx	r3
    f948:	0003      	movs	r3, r0
    f94a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    f94c:	1dfb      	adds	r3, r7, #7
    f94e:	781b      	ldrb	r3, [r3, #0]
    f950:	221f      	movs	r2, #31
    f952:	4013      	ands	r3, r2
    f954:	2201      	movs	r2, #1
    f956:	409a      	lsls	r2, r3
    f958:	0013      	movs	r3, r2
    f95a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    f95c:	683a      	ldr	r2, [r7, #0]
    f95e:	68b9      	ldr	r1, [r7, #8]
    f960:	68fb      	ldr	r3, [r7, #12]
    f962:	0018      	movs	r0, r3
    f964:	4b03      	ldr	r3, [pc, #12]	; (f974 <system_pinmux_pin_set_config+0x44>)
    f966:	4798      	blx	r3
}
    f968:	46c0      	nop			; (mov r8, r8)
    f96a:	46bd      	mov	sp, r7
    f96c:	b004      	add	sp, #16
    f96e:	bd80      	pop	{r7, pc}
    f970:	0000f7c1 	.word	0x0000f7c1
    f974:	0000f821 	.word	0x0000f821

0000f978 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    f978:	b580      	push	{r7, lr}
    f97a:	af00      	add	r7, sp, #0
	return;
    f97c:	46c0      	nop			; (mov r8, r8)
}
    f97e:	46bd      	mov	sp, r7
    f980:	bd80      	pop	{r7, pc}
	...

0000f984 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    f984:	b580      	push	{r7, lr}
    f986:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    f988:	4b06      	ldr	r3, [pc, #24]	; (f9a4 <system_init+0x20>)
    f98a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    f98c:	4b06      	ldr	r3, [pc, #24]	; (f9a8 <system_init+0x24>)
    f98e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    f990:	4b06      	ldr	r3, [pc, #24]	; (f9ac <system_init+0x28>)
    f992:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    f994:	4b06      	ldr	r3, [pc, #24]	; (f9b0 <system_init+0x2c>)
    f996:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    f998:	4b06      	ldr	r3, [pc, #24]	; (f9b4 <system_init+0x30>)
    f99a:	4798      	blx	r3
}
    f99c:	46c0      	nop			; (mov r8, r8)
    f99e:	46bd      	mov	sp, r7
    f9a0:	bd80      	pop	{r7, pc}
    f9a2:	46c0      	nop			; (mov r8, r8)
    f9a4:	0000efed 	.word	0x0000efed
    f9a8:	0000e729 	.word	0x0000e729
    f9ac:	0000f979 	.word	0x0000f979
    f9b0:	00002c79 	.word	0x00002c79
    f9b4:	0000f979 	.word	0x0000f979

0000f9b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    f9b8:	b580      	push	{r7, lr}
    f9ba:	b082      	sub	sp, #8
    f9bc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    f9be:	4b2f      	ldr	r3, [pc, #188]	; (fa7c <Reset_Handler+0xc4>)
    f9c0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    f9c2:	4b2f      	ldr	r3, [pc, #188]	; (fa80 <Reset_Handler+0xc8>)
    f9c4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    f9c6:	687a      	ldr	r2, [r7, #4]
    f9c8:	683b      	ldr	r3, [r7, #0]
    f9ca:	429a      	cmp	r2, r3
    f9cc:	d00c      	beq.n	f9e8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    f9ce:	e007      	b.n	f9e0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    f9d0:	683b      	ldr	r3, [r7, #0]
    f9d2:	1d1a      	adds	r2, r3, #4
    f9d4:	603a      	str	r2, [r7, #0]
    f9d6:	687a      	ldr	r2, [r7, #4]
    f9d8:	1d11      	adds	r1, r2, #4
    f9da:	6079      	str	r1, [r7, #4]
    f9dc:	6812      	ldr	r2, [r2, #0]
    f9de:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    f9e0:	683a      	ldr	r2, [r7, #0]
    f9e2:	4b28      	ldr	r3, [pc, #160]	; (fa84 <Reset_Handler+0xcc>)
    f9e4:	429a      	cmp	r2, r3
    f9e6:	d3f3      	bcc.n	f9d0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    f9e8:	4b27      	ldr	r3, [pc, #156]	; (fa88 <Reset_Handler+0xd0>)
    f9ea:	603b      	str	r3, [r7, #0]
    f9ec:	e004      	b.n	f9f8 <Reset_Handler+0x40>
                *pDest++ = 0;
    f9ee:	683b      	ldr	r3, [r7, #0]
    f9f0:	1d1a      	adds	r2, r3, #4
    f9f2:	603a      	str	r2, [r7, #0]
    f9f4:	2200      	movs	r2, #0
    f9f6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    f9f8:	683a      	ldr	r2, [r7, #0]
    f9fa:	4b24      	ldr	r3, [pc, #144]	; (fa8c <Reset_Handler+0xd4>)
    f9fc:	429a      	cmp	r2, r3
    f9fe:	d3f6      	bcc.n	f9ee <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    fa00:	4b23      	ldr	r3, [pc, #140]	; (fa90 <Reset_Handler+0xd8>)
    fa02:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    fa04:	4b23      	ldr	r3, [pc, #140]	; (fa94 <Reset_Handler+0xdc>)
    fa06:	687a      	ldr	r2, [r7, #4]
    fa08:	21ff      	movs	r1, #255	; 0xff
    fa0a:	438a      	bics	r2, r1
    fa0c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    fa0e:	4a22      	ldr	r2, [pc, #136]	; (fa98 <Reset_Handler+0xe0>)
    fa10:	2390      	movs	r3, #144	; 0x90
    fa12:	005b      	lsls	r3, r3, #1
    fa14:	2102      	movs	r1, #2
    fa16:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    fa18:	4a20      	ldr	r2, [pc, #128]	; (fa9c <Reset_Handler+0xe4>)
    fa1a:	78d3      	ldrb	r3, [r2, #3]
    fa1c:	2103      	movs	r1, #3
    fa1e:	438b      	bics	r3, r1
    fa20:	1c19      	adds	r1, r3, #0
    fa22:	2302      	movs	r3, #2
    fa24:	430b      	orrs	r3, r1
    fa26:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    fa28:	4a1c      	ldr	r2, [pc, #112]	; (fa9c <Reset_Handler+0xe4>)
    fa2a:	78d3      	ldrb	r3, [r2, #3]
    fa2c:	210c      	movs	r1, #12
    fa2e:	438b      	bics	r3, r1
    fa30:	1c19      	adds	r1, r3, #0
    fa32:	2308      	movs	r3, #8
    fa34:	430b      	orrs	r3, r1
    fa36:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    fa38:	4a19      	ldr	r2, [pc, #100]	; (faa0 <Reset_Handler+0xe8>)
    fa3a:	7b93      	ldrb	r3, [r2, #14]
    fa3c:	2130      	movs	r1, #48	; 0x30
    fa3e:	438b      	bics	r3, r1
    fa40:	1c19      	adds	r1, r3, #0
    fa42:	2320      	movs	r3, #32
    fa44:	430b      	orrs	r3, r1
    fa46:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    fa48:	4a15      	ldr	r2, [pc, #84]	; (faa0 <Reset_Handler+0xe8>)
    fa4a:	7b93      	ldrb	r3, [r2, #14]
    fa4c:	210c      	movs	r1, #12
    fa4e:	438b      	bics	r3, r1
    fa50:	1c19      	adds	r1, r3, #0
    fa52:	2308      	movs	r3, #8
    fa54:	430b      	orrs	r3, r1
    fa56:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    fa58:	4a11      	ldr	r2, [pc, #68]	; (faa0 <Reset_Handler+0xe8>)
    fa5a:	7b93      	ldrb	r3, [r2, #14]
    fa5c:	2103      	movs	r1, #3
    fa5e:	438b      	bics	r3, r1
    fa60:	1c19      	adds	r1, r3, #0
    fa62:	2302      	movs	r3, #2
    fa64:	430b      	orrs	r3, r1
    fa66:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    fa68:	4a0e      	ldr	r2, [pc, #56]	; (faa4 <Reset_Handler+0xec>)
    fa6a:	6853      	ldr	r3, [r2, #4]
    fa6c:	2180      	movs	r1, #128	; 0x80
    fa6e:	430b      	orrs	r3, r1
    fa70:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    fa72:	4b0d      	ldr	r3, [pc, #52]	; (faa8 <Reset_Handler+0xf0>)
    fa74:	4798      	blx	r3

        /* Branch to main function */
        main();
    fa76:	4b0d      	ldr	r3, [pc, #52]	; (faac <Reset_Handler+0xf4>)
    fa78:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    fa7a:	e7fe      	b.n	fa7a <Reset_Handler+0xc2>
    fa7c:	00013d04 	.word	0x00013d04
    fa80:	20000000 	.word	0x20000000
    fa84:	20000238 	.word	0x20000238
    fa88:	20000238 	.word	0x20000238
    fa8c:	200040b0 	.word	0x200040b0
    fa90:	00000000 	.word	0x00000000
    fa94:	e000ed00 	.word	0xe000ed00
    fa98:	41007000 	.word	0x41007000
    fa9c:	41005000 	.word	0x41005000
    faa0:	41004800 	.word	0x41004800
    faa4:	41004000 	.word	0x41004000
    faa8:	00012e89 	.word	0x00012e89
    faac:	0000fc59 	.word	0x0000fc59

0000fab0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    fab0:	b580      	push	{r7, lr}
    fab2:	af00      	add	r7, sp, #0
        while (1) {
    fab4:	e7fe      	b.n	fab4 <Dummy_Handler+0x4>
	...

0000fab8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    fab8:	b580      	push	{r7, lr}
    faba:	b084      	sub	sp, #16
    fabc:	af00      	add	r7, sp, #0
    fabe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    fac0:	4b0a      	ldr	r3, [pc, #40]	; (faec <_sbrk+0x34>)
    fac2:	681b      	ldr	r3, [r3, #0]
    fac4:	2b00      	cmp	r3, #0
    fac6:	d102      	bne.n	face <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    fac8:	4b08      	ldr	r3, [pc, #32]	; (faec <_sbrk+0x34>)
    faca:	4a09      	ldr	r2, [pc, #36]	; (faf0 <_sbrk+0x38>)
    facc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    face:	4b07      	ldr	r3, [pc, #28]	; (faec <_sbrk+0x34>)
    fad0:	681b      	ldr	r3, [r3, #0]
    fad2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    fad4:	4b05      	ldr	r3, [pc, #20]	; (faec <_sbrk+0x34>)
    fad6:	681a      	ldr	r2, [r3, #0]
    fad8:	687b      	ldr	r3, [r7, #4]
    fada:	18d2      	adds	r2, r2, r3
    fadc:	4b03      	ldr	r3, [pc, #12]	; (faec <_sbrk+0x34>)
    fade:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    fae0:	68fb      	ldr	r3, [r7, #12]
}
    fae2:	0018      	movs	r0, r3
    fae4:	46bd      	mov	sp, r7
    fae6:	b004      	add	sp, #16
    fae8:	bd80      	pop	{r7, pc}
    faea:	46c0      	nop			; (mov r8, r8)
    faec:	20003c6c 	.word	0x20003c6c
    faf0:	200060b0 	.word	0x200060b0

0000faf4 <arch_ioport_pin_to_port_id>:
{
    faf4:	b580      	push	{r7, lr}
    faf6:	b082      	sub	sp, #8
    faf8:	af00      	add	r7, sp, #0
    fafa:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    fafc:	687b      	ldr	r3, [r7, #4]
    fafe:	095b      	lsrs	r3, r3, #5
}
    fb00:	0018      	movs	r0, r3
    fb02:	46bd      	mov	sp, r7
    fb04:	b002      	add	sp, #8
    fb06:	bd80      	pop	{r7, pc}

0000fb08 <arch_ioport_port_to_base>:
{
    fb08:	b580      	push	{r7, lr}
    fb0a:	b082      	sub	sp, #8
    fb0c:	af00      	add	r7, sp, #0
    fb0e:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    fb10:	687b      	ldr	r3, [r7, #4]
    fb12:	01db      	lsls	r3, r3, #7
    fb14:	4a03      	ldr	r2, [pc, #12]	; (fb24 <arch_ioport_port_to_base+0x1c>)
    fb16:	4694      	mov	ip, r2
    fb18:	4463      	add	r3, ip
}
    fb1a:	0018      	movs	r0, r3
    fb1c:	46bd      	mov	sp, r7
    fb1e:	b002      	add	sp, #8
    fb20:	bd80      	pop	{r7, pc}
    fb22:	46c0      	nop			; (mov r8, r8)
    fb24:	41004400 	.word	0x41004400

0000fb28 <arch_ioport_pin_to_base>:
{
    fb28:	b580      	push	{r7, lr}
    fb2a:	b082      	sub	sp, #8
    fb2c:	af00      	add	r7, sp, #0
    fb2e:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    fb30:	687b      	ldr	r3, [r7, #4]
    fb32:	0018      	movs	r0, r3
    fb34:	4b05      	ldr	r3, [pc, #20]	; (fb4c <arch_ioport_pin_to_base+0x24>)
    fb36:	4798      	blx	r3
    fb38:	0003      	movs	r3, r0
    fb3a:	0018      	movs	r0, r3
    fb3c:	4b04      	ldr	r3, [pc, #16]	; (fb50 <arch_ioport_pin_to_base+0x28>)
    fb3e:	4798      	blx	r3
    fb40:	0003      	movs	r3, r0
}
    fb42:	0018      	movs	r0, r3
    fb44:	46bd      	mov	sp, r7
    fb46:	b002      	add	sp, #8
    fb48:	bd80      	pop	{r7, pc}
    fb4a:	46c0      	nop			; (mov r8, r8)
    fb4c:	0000faf5 	.word	0x0000faf5
    fb50:	0000fb09 	.word	0x0000fb09

0000fb54 <arch_ioport_pin_to_mask>:
{
    fb54:	b580      	push	{r7, lr}
    fb56:	b082      	sub	sp, #8
    fb58:	af00      	add	r7, sp, #0
    fb5a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	221f      	movs	r2, #31
    fb60:	4013      	ands	r3, r2
    fb62:	2201      	movs	r2, #1
    fb64:	409a      	lsls	r2, r3
    fb66:	0013      	movs	r3, r2
}
    fb68:	0018      	movs	r0, r3
    fb6a:	46bd      	mov	sp, r7
    fb6c:	b002      	add	sp, #8
    fb6e:	bd80      	pop	{r7, pc}

0000fb70 <arch_ioport_set_pin_level>:
{
    fb70:	b590      	push	{r4, r7, lr}
    fb72:	b083      	sub	sp, #12
    fb74:	af00      	add	r7, sp, #0
    fb76:	6078      	str	r0, [r7, #4]
    fb78:	000a      	movs	r2, r1
    fb7a:	1cfb      	adds	r3, r7, #3
    fb7c:	701a      	strb	r2, [r3, #0]
	if (level) {
    fb7e:	1cfb      	adds	r3, r7, #3
    fb80:	781b      	ldrb	r3, [r3, #0]
    fb82:	2b00      	cmp	r3, #0
    fb84:	d00b      	beq.n	fb9e <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    fb86:	687b      	ldr	r3, [r7, #4]
    fb88:	0018      	movs	r0, r3
    fb8a:	4b0c      	ldr	r3, [pc, #48]	; (fbbc <arch_ioport_set_pin_level+0x4c>)
    fb8c:	4798      	blx	r3
    fb8e:	0004      	movs	r4, r0
    fb90:	687b      	ldr	r3, [r7, #4]
    fb92:	0018      	movs	r0, r3
    fb94:	4b0a      	ldr	r3, [pc, #40]	; (fbc0 <arch_ioport_set_pin_level+0x50>)
    fb96:	4798      	blx	r3
    fb98:	0003      	movs	r3, r0
    fb9a:	61a3      	str	r3, [r4, #24]
}
    fb9c:	e00a      	b.n	fbb4 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    fb9e:	687b      	ldr	r3, [r7, #4]
    fba0:	0018      	movs	r0, r3
    fba2:	4b06      	ldr	r3, [pc, #24]	; (fbbc <arch_ioport_set_pin_level+0x4c>)
    fba4:	4798      	blx	r3
    fba6:	0004      	movs	r4, r0
    fba8:	687b      	ldr	r3, [r7, #4]
    fbaa:	0018      	movs	r0, r3
    fbac:	4b04      	ldr	r3, [pc, #16]	; (fbc0 <arch_ioport_set_pin_level+0x50>)
    fbae:	4798      	blx	r3
    fbb0:	0003      	movs	r3, r0
    fbb2:	6163      	str	r3, [r4, #20]
}
    fbb4:	46c0      	nop			; (mov r8, r8)
    fbb6:	46bd      	mov	sp, r7
    fbb8:	b003      	add	sp, #12
    fbba:	bd90      	pop	{r4, r7, pc}
    fbbc:	0000fb29 	.word	0x0000fb29
    fbc0:	0000fb55 	.word	0x0000fb55

0000fbc4 <ioport_set_pin_level>:
{
    fbc4:	b580      	push	{r7, lr}
    fbc6:	b082      	sub	sp, #8
    fbc8:	af00      	add	r7, sp, #0
    fbca:	6078      	str	r0, [r7, #4]
    fbcc:	000a      	movs	r2, r1
    fbce:	1cfb      	adds	r3, r7, #3
    fbd0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    fbd2:	1cfb      	adds	r3, r7, #3
    fbd4:	781a      	ldrb	r2, [r3, #0]
    fbd6:	687b      	ldr	r3, [r7, #4]
    fbd8:	0011      	movs	r1, r2
    fbda:	0018      	movs	r0, r3
    fbdc:	4b02      	ldr	r3, [pc, #8]	; (fbe8 <ioport_set_pin_level+0x24>)
    fbde:	4798      	blx	r3
}
    fbe0:	46c0      	nop			; (mov r8, r8)
    fbe2:	46bd      	mov	sp, r7
    fbe4:	b002      	add	sp, #8
    fbe6:	bd80      	pop	{r7, pc}
    fbe8:	0000fb71 	.word	0x0000fb71

0000fbec <wdt_get_config_defaults>:
{
    fbec:	b580      	push	{r7, lr}
    fbee:	b082      	sub	sp, #8
    fbf0:	af00      	add	r7, sp, #0
    fbf2:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    fbf4:	687b      	ldr	r3, [r7, #4]
    fbf6:	2200      	movs	r2, #0
    fbf8:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    fbfa:	687b      	ldr	r3, [r7, #4]
    fbfc:	2201      	movs	r2, #1
    fbfe:	705a      	strb	r2, [r3, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    fc00:	687b      	ldr	r3, [r7, #4]
    fc02:	2204      	movs	r2, #4
    fc04:	709a      	strb	r2, [r3, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    fc06:	687b      	ldr	r3, [r7, #4]
    fc08:	220c      	movs	r2, #12
    fc0a:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    fc0c:	687b      	ldr	r3, [r7, #4]
    fc0e:	2200      	movs	r2, #0
    fc10:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    fc12:	687b      	ldr	r3, [r7, #4]
    fc14:	2200      	movs	r2, #0
    fc16:	715a      	strb	r2, [r3, #5]
}
    fc18:	46c0      	nop			; (mov r8, r8)
    fc1a:	46bd      	mov	sp, r7
    fc1c:	b002      	add	sp, #8
    fc1e:	bd80      	pop	{r7, pc}

0000fc20 <configure_wdt>:
#include "task_monitor.h"

#include "lib/usb_interface.h"

static void configure_wdt(void)
{
    fc20:	b580      	push	{r7, lr}
    fc22:	b082      	sub	sp, #8
    fc24:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
    fc26:	003b      	movs	r3, r7
    fc28:	0018      	movs	r0, r3
    fc2a:	4b09      	ldr	r3, [pc, #36]	; (fc50 <configure_wdt+0x30>)
    fc2c:	4798      	blx	r3
	config_wdt.always_on = false; // Can be disabled TODO in final, maybe lock this in, but makes debugging difficult
    fc2e:	003b      	movs	r3, r7
    fc30:	2200      	movs	r2, #0
    fc32:	701a      	strb	r2, [r3, #0]
	config_wdt.clock_source = GCLK_GENERATOR_4; // 8MHz / 255 = 32.372 kHz
    fc34:	003b      	movs	r3, r7
    fc36:	2204      	movs	r2, #4
    fc38:	709a      	strb	r2, [r3, #2]
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
    fc3a:	003b      	movs	r3, r7
    fc3c:	220c      	movs	r2, #12
    fc3e:	70da      	strb	r2, [r3, #3]
	wdt_set_config(&config_wdt);
    fc40:	003b      	movs	r3, r7
    fc42:	0018      	movs	r0, r3
    fc44:	4b03      	ldr	r3, [pc, #12]	; (fc54 <configure_wdt+0x34>)
    fc46:	4798      	blx	r3
}
    fc48:	46c0      	nop			; (mov r8, r8)
    fc4a:	46bd      	mov	sp, r7
    fc4c:	b002      	add	sp, #8
    fc4e:	bd80      	pop	{r7, pc}
    fc50:	0000fbed 	.word	0x0000fbed
    fc54:	0000cf91 	.word	0x0000cf91

0000fc58 <main>:

int main (void)
{
    fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc5a:	af00      	add	r7, sp, #0
	system_init();
    fc5c:	4b28      	ldr	r3, [pc, #160]	; (fd00 <main+0xa8>)
    fc5e:	4798      	blx	r3
	delay_init();
    fc60:	4b28      	ldr	r3, [pc, #160]	; (fd04 <main+0xac>)
    fc62:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    fc64:	4b28      	ldr	r3, [pc, #160]	; (fd08 <main+0xb0>)
    fc66:	2201      	movs	r2, #1
    fc68:	701a      	strb	r2, [r3, #0]
    fc6a:	f3bf 8f5f 	dmb	sy
    fc6e:	b662      	cpsie	i
	
	// Enable WDT
	configure_wdt();
    fc70:	4b26      	ldr	r3, [pc, #152]	; (fd0c <main+0xb4>)
    fc72:	4798      	blx	r3

	// Chirp to show reboot
	ioport_set_pin_level(BUZZER_GPIO, BUZZER_GPIO_ACTIVE_LEVEL);
    fc74:	2101      	movs	r1, #1
    fc76:	2036      	movs	r0, #54	; 0x36
    fc78:	4b25      	ldr	r3, [pc, #148]	; (fd10 <main+0xb8>)
    fc7a:	4798      	blx	r3
	delay_ms(100);
    fc7c:	2000      	movs	r0, #0
    fc7e:	4b25      	ldr	r3, [pc, #148]	; (fd14 <main+0xbc>)
    fc80:	4798      	blx	r3
    fc82:	0003      	movs	r3, r0
    fc84:	001d      	movs	r5, r3
    fc86:	2300      	movs	r3, #0
    fc88:	001e      	movs	r6, r3
    fc8a:	4c23      	ldr	r4, [pc, #140]	; (fd18 <main+0xc0>)
    fc8c:	2264      	movs	r2, #100	; 0x64
    fc8e:	2300      	movs	r3, #0
    fc90:	0028      	movs	r0, r5
    fc92:	0031      	movs	r1, r6
    fc94:	47a0      	blx	r4
    fc96:	0003      	movs	r3, r0
    fc98:	000c      	movs	r4, r1
    fc9a:	0019      	movs	r1, r3
    fc9c:	0022      	movs	r2, r4
    fc9e:	4b1f      	ldr	r3, [pc, #124]	; (fd1c <main+0xc4>)
    fca0:	2400      	movs	r4, #0
    fca2:	18c9      	adds	r1, r1, r3
    fca4:	4162      	adcs	r2, r4
    fca6:	0008      	movs	r0, r1
    fca8:	0011      	movs	r1, r2
    fcaa:	4c1d      	ldr	r4, [pc, #116]	; (fd20 <main+0xc8>)
    fcac:	4a1d      	ldr	r2, [pc, #116]	; (fd24 <main+0xcc>)
    fcae:	2300      	movs	r3, #0
    fcb0:	47a0      	blx	r4
    fcb2:	0003      	movs	r3, r0
    fcb4:	000c      	movs	r4, r1
    fcb6:	0018      	movs	r0, r3
    fcb8:	4b1b      	ldr	r3, [pc, #108]	; (fd28 <main+0xd0>)
    fcba:	4798      	blx	r3
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    fcbc:	2100      	movs	r1, #0
    fcbe:	2036      	movs	r0, #54	; 0x36
    fcc0:	4b13      	ldr	r3, [pc, #76]	; (fd10 <main+0xb8>)
    fcc2:	4798      	blx	r3

	// Start USB
	usb_interface_init();
    fcc4:	4b19      	ldr	r3, [pc, #100]	; (fd2c <main+0xd4>)
    fcc6:	4798      	blx	r3
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    fcc8:	2380      	movs	r3, #128	; 0x80
    fcca:	005b      	lsls	r3, r3, #1
    fccc:	2103      	movs	r1, #3
    fcce:	0018      	movs	r0, r3
    fcd0:	4b17      	ldr	r3, [pc, #92]	; (fd30 <main+0xd8>)
    fcd2:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    fcd4:	2380      	movs	r3, #128	; 0x80
    fcd6:	009b      	lsls	r3, r3, #2
    fcd8:	2102      	movs	r1, #2
    fcda:	0018      	movs	r0, r3
    fcdc:	4b15      	ldr	r3, [pc, #84]	; (fd34 <main+0xdc>)
    fcde:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    fce0:	2380      	movs	r3, #128	; 0x80
    fce2:	005b      	lsls	r3, r3, #1
    fce4:	2102      	movs	r1, #2
    fce6:	0018      	movs	r0, r3
    fce8:	4b13      	ldr	r3, [pc, #76]	; (fd38 <main+0xe0>)
    fcea:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    fcec:	2380      	movs	r3, #128	; 0x80
    fcee:	009b      	lsls	r3, r3, #2
    fcf0:	2101      	movs	r1, #1
    fcf2:	0018      	movs	r0, r3
    fcf4:	4b11      	ldr	r3, [pc, #68]	; (fd3c <main+0xe4>)
    fcf6:	4798      	blx	r3

	vTaskStartScheduler();
    fcf8:	4b11      	ldr	r3, [pc, #68]	; (fd40 <main+0xe8>)
    fcfa:	4798      	blx	r3
	
	// Should never get here, FreeRTOS tasks should have begun
	for (;;)
    fcfc:	e7fe      	b.n	fcfc <main+0xa4>
    fcfe:	46c0      	nop			; (mov r8, r8)
    fd00:	0000f985 	.word	0x0000f985
    fd04:	0000e2f9 	.word	0x0000e2f9
    fd08:	200001d2 	.word	0x200001d2
    fd0c:	0000fc21 	.word	0x0000fc21
    fd10:	0000fbc5 	.word	0x0000fbc5
    fd14:	0000f525 	.word	0x0000f525
    fd18:	00010191 	.word	0x00010191
    fd1c:	00001b57 	.word	0x00001b57
    fd20:	00010151 	.word	0x00010151
    fd24:	00001b58 	.word	0x00001b58
    fd28:	20000001 	.word	0x20000001
    fd2c:	00009805 	.word	0x00009805
    fd30:	0000a835 	.word	0x0000a835
    fd34:	00009cc1 	.word	0x00009cc1
    fd38:	0000ac19 	.word	0x0000ac19
    fd3c:	0000a629 	.word	0x0000a629
    fd40:	0000be59 	.word	0x0000be59

0000fd44 <vApplicationMallocFailedHook>:
/******* FreeRTOS User-Defined Hooks *******/

void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
    fd44:	b580      	push	{r7, lr}
    fd46:	af00      	add	r7, sp, #0
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    fd48:	b672      	cpsid	i
	for (;;)
    fd4a:	e7fe      	b.n	fd4a <vApplicationMallocFailedHook+0x6>

0000fd4c <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    fd4c:	b580      	push	{r7, lr}
    fd4e:	af00      	add	r7, sp, #0
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
}
    fd50:	46c0      	nop			; (mov r8, r8)
    fd52:	46bd      	mov	sp, r7
    fd54:	bd80      	pop	{r7, pc}

0000fd56 <vApplicationTickHook>:

void vApplicationTickHook(void);

void vApplicationTickHook(void)
{
    fd56:	b580      	push	{r7, lr}
    fd58:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    fd5a:	46c0      	nop			; (mov r8, r8)
    fd5c:	46bd      	mov	sp, r7
    fd5e:	bd80      	pop	{r7, pc}

0000fd60 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
    fd60:	b580      	push	{r7, lr}
    fd62:	af00      	add	r7, sp, #0
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    fd64:	b672      	cpsid	i
	for (;;)
    fd66:	e7fe      	b.n	fd66 <vApplicationStackOverflowHook+0x6>

0000fd68 <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    fd68:	b580      	push	{r7, lr}
    fd6a:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	for (;;)
    fd6c:	e7fe      	b.n	fd6c <HardFault_Handler+0x4>

0000fd6e <NMI_Handler>:
	{
	}
}

ISR(NMI_Handler)
{
    fd6e:	b580      	push	{r7, lr}
    fd70:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	for (;;)
    fd72:	e7fe      	b.n	fd72 <NMI_Handler+0x4>

0000fd74 <__udivsi3>:
    fd74:	2200      	movs	r2, #0
    fd76:	0843      	lsrs	r3, r0, #1
    fd78:	428b      	cmp	r3, r1
    fd7a:	d374      	bcc.n	fe66 <__udivsi3+0xf2>
    fd7c:	0903      	lsrs	r3, r0, #4
    fd7e:	428b      	cmp	r3, r1
    fd80:	d35f      	bcc.n	fe42 <__udivsi3+0xce>
    fd82:	0a03      	lsrs	r3, r0, #8
    fd84:	428b      	cmp	r3, r1
    fd86:	d344      	bcc.n	fe12 <__udivsi3+0x9e>
    fd88:	0b03      	lsrs	r3, r0, #12
    fd8a:	428b      	cmp	r3, r1
    fd8c:	d328      	bcc.n	fde0 <__udivsi3+0x6c>
    fd8e:	0c03      	lsrs	r3, r0, #16
    fd90:	428b      	cmp	r3, r1
    fd92:	d30d      	bcc.n	fdb0 <__udivsi3+0x3c>
    fd94:	22ff      	movs	r2, #255	; 0xff
    fd96:	0209      	lsls	r1, r1, #8
    fd98:	ba12      	rev	r2, r2
    fd9a:	0c03      	lsrs	r3, r0, #16
    fd9c:	428b      	cmp	r3, r1
    fd9e:	d302      	bcc.n	fda6 <__udivsi3+0x32>
    fda0:	1212      	asrs	r2, r2, #8
    fda2:	0209      	lsls	r1, r1, #8
    fda4:	d065      	beq.n	fe72 <__udivsi3+0xfe>
    fda6:	0b03      	lsrs	r3, r0, #12
    fda8:	428b      	cmp	r3, r1
    fdaa:	d319      	bcc.n	fde0 <__udivsi3+0x6c>
    fdac:	e000      	b.n	fdb0 <__udivsi3+0x3c>
    fdae:	0a09      	lsrs	r1, r1, #8
    fdb0:	0bc3      	lsrs	r3, r0, #15
    fdb2:	428b      	cmp	r3, r1
    fdb4:	d301      	bcc.n	fdba <__udivsi3+0x46>
    fdb6:	03cb      	lsls	r3, r1, #15
    fdb8:	1ac0      	subs	r0, r0, r3
    fdba:	4152      	adcs	r2, r2
    fdbc:	0b83      	lsrs	r3, r0, #14
    fdbe:	428b      	cmp	r3, r1
    fdc0:	d301      	bcc.n	fdc6 <__udivsi3+0x52>
    fdc2:	038b      	lsls	r3, r1, #14
    fdc4:	1ac0      	subs	r0, r0, r3
    fdc6:	4152      	adcs	r2, r2
    fdc8:	0b43      	lsrs	r3, r0, #13
    fdca:	428b      	cmp	r3, r1
    fdcc:	d301      	bcc.n	fdd2 <__udivsi3+0x5e>
    fdce:	034b      	lsls	r3, r1, #13
    fdd0:	1ac0      	subs	r0, r0, r3
    fdd2:	4152      	adcs	r2, r2
    fdd4:	0b03      	lsrs	r3, r0, #12
    fdd6:	428b      	cmp	r3, r1
    fdd8:	d301      	bcc.n	fdde <__udivsi3+0x6a>
    fdda:	030b      	lsls	r3, r1, #12
    fddc:	1ac0      	subs	r0, r0, r3
    fdde:	4152      	adcs	r2, r2
    fde0:	0ac3      	lsrs	r3, r0, #11
    fde2:	428b      	cmp	r3, r1
    fde4:	d301      	bcc.n	fdea <__udivsi3+0x76>
    fde6:	02cb      	lsls	r3, r1, #11
    fde8:	1ac0      	subs	r0, r0, r3
    fdea:	4152      	adcs	r2, r2
    fdec:	0a83      	lsrs	r3, r0, #10
    fdee:	428b      	cmp	r3, r1
    fdf0:	d301      	bcc.n	fdf6 <__udivsi3+0x82>
    fdf2:	028b      	lsls	r3, r1, #10
    fdf4:	1ac0      	subs	r0, r0, r3
    fdf6:	4152      	adcs	r2, r2
    fdf8:	0a43      	lsrs	r3, r0, #9
    fdfa:	428b      	cmp	r3, r1
    fdfc:	d301      	bcc.n	fe02 <__udivsi3+0x8e>
    fdfe:	024b      	lsls	r3, r1, #9
    fe00:	1ac0      	subs	r0, r0, r3
    fe02:	4152      	adcs	r2, r2
    fe04:	0a03      	lsrs	r3, r0, #8
    fe06:	428b      	cmp	r3, r1
    fe08:	d301      	bcc.n	fe0e <__udivsi3+0x9a>
    fe0a:	020b      	lsls	r3, r1, #8
    fe0c:	1ac0      	subs	r0, r0, r3
    fe0e:	4152      	adcs	r2, r2
    fe10:	d2cd      	bcs.n	fdae <__udivsi3+0x3a>
    fe12:	09c3      	lsrs	r3, r0, #7
    fe14:	428b      	cmp	r3, r1
    fe16:	d301      	bcc.n	fe1c <__udivsi3+0xa8>
    fe18:	01cb      	lsls	r3, r1, #7
    fe1a:	1ac0      	subs	r0, r0, r3
    fe1c:	4152      	adcs	r2, r2
    fe1e:	0983      	lsrs	r3, r0, #6
    fe20:	428b      	cmp	r3, r1
    fe22:	d301      	bcc.n	fe28 <__udivsi3+0xb4>
    fe24:	018b      	lsls	r3, r1, #6
    fe26:	1ac0      	subs	r0, r0, r3
    fe28:	4152      	adcs	r2, r2
    fe2a:	0943      	lsrs	r3, r0, #5
    fe2c:	428b      	cmp	r3, r1
    fe2e:	d301      	bcc.n	fe34 <__udivsi3+0xc0>
    fe30:	014b      	lsls	r3, r1, #5
    fe32:	1ac0      	subs	r0, r0, r3
    fe34:	4152      	adcs	r2, r2
    fe36:	0903      	lsrs	r3, r0, #4
    fe38:	428b      	cmp	r3, r1
    fe3a:	d301      	bcc.n	fe40 <__udivsi3+0xcc>
    fe3c:	010b      	lsls	r3, r1, #4
    fe3e:	1ac0      	subs	r0, r0, r3
    fe40:	4152      	adcs	r2, r2
    fe42:	08c3      	lsrs	r3, r0, #3
    fe44:	428b      	cmp	r3, r1
    fe46:	d301      	bcc.n	fe4c <__udivsi3+0xd8>
    fe48:	00cb      	lsls	r3, r1, #3
    fe4a:	1ac0      	subs	r0, r0, r3
    fe4c:	4152      	adcs	r2, r2
    fe4e:	0883      	lsrs	r3, r0, #2
    fe50:	428b      	cmp	r3, r1
    fe52:	d301      	bcc.n	fe58 <__udivsi3+0xe4>
    fe54:	008b      	lsls	r3, r1, #2
    fe56:	1ac0      	subs	r0, r0, r3
    fe58:	4152      	adcs	r2, r2
    fe5a:	0843      	lsrs	r3, r0, #1
    fe5c:	428b      	cmp	r3, r1
    fe5e:	d301      	bcc.n	fe64 <__udivsi3+0xf0>
    fe60:	004b      	lsls	r3, r1, #1
    fe62:	1ac0      	subs	r0, r0, r3
    fe64:	4152      	adcs	r2, r2
    fe66:	1a41      	subs	r1, r0, r1
    fe68:	d200      	bcs.n	fe6c <__udivsi3+0xf8>
    fe6a:	4601      	mov	r1, r0
    fe6c:	4152      	adcs	r2, r2
    fe6e:	4610      	mov	r0, r2
    fe70:	4770      	bx	lr
    fe72:	e7ff      	b.n	fe74 <__udivsi3+0x100>
    fe74:	b501      	push	{r0, lr}
    fe76:	2000      	movs	r0, #0
    fe78:	f000 f8f0 	bl	1005c <__aeabi_idiv0>
    fe7c:	bd02      	pop	{r1, pc}
    fe7e:	46c0      	nop			; (mov r8, r8)

0000fe80 <__aeabi_uidivmod>:
    fe80:	2900      	cmp	r1, #0
    fe82:	d0f7      	beq.n	fe74 <__udivsi3+0x100>
    fe84:	e776      	b.n	fd74 <__udivsi3>
    fe86:	4770      	bx	lr

0000fe88 <__divsi3>:
    fe88:	4603      	mov	r3, r0
    fe8a:	430b      	orrs	r3, r1
    fe8c:	d47f      	bmi.n	ff8e <__divsi3+0x106>
    fe8e:	2200      	movs	r2, #0
    fe90:	0843      	lsrs	r3, r0, #1
    fe92:	428b      	cmp	r3, r1
    fe94:	d374      	bcc.n	ff80 <__divsi3+0xf8>
    fe96:	0903      	lsrs	r3, r0, #4
    fe98:	428b      	cmp	r3, r1
    fe9a:	d35f      	bcc.n	ff5c <__divsi3+0xd4>
    fe9c:	0a03      	lsrs	r3, r0, #8
    fe9e:	428b      	cmp	r3, r1
    fea0:	d344      	bcc.n	ff2c <__divsi3+0xa4>
    fea2:	0b03      	lsrs	r3, r0, #12
    fea4:	428b      	cmp	r3, r1
    fea6:	d328      	bcc.n	fefa <__divsi3+0x72>
    fea8:	0c03      	lsrs	r3, r0, #16
    feaa:	428b      	cmp	r3, r1
    feac:	d30d      	bcc.n	feca <__divsi3+0x42>
    feae:	22ff      	movs	r2, #255	; 0xff
    feb0:	0209      	lsls	r1, r1, #8
    feb2:	ba12      	rev	r2, r2
    feb4:	0c03      	lsrs	r3, r0, #16
    feb6:	428b      	cmp	r3, r1
    feb8:	d302      	bcc.n	fec0 <__divsi3+0x38>
    feba:	1212      	asrs	r2, r2, #8
    febc:	0209      	lsls	r1, r1, #8
    febe:	d065      	beq.n	ff8c <__divsi3+0x104>
    fec0:	0b03      	lsrs	r3, r0, #12
    fec2:	428b      	cmp	r3, r1
    fec4:	d319      	bcc.n	fefa <__divsi3+0x72>
    fec6:	e000      	b.n	feca <__divsi3+0x42>
    fec8:	0a09      	lsrs	r1, r1, #8
    feca:	0bc3      	lsrs	r3, r0, #15
    fecc:	428b      	cmp	r3, r1
    fece:	d301      	bcc.n	fed4 <__divsi3+0x4c>
    fed0:	03cb      	lsls	r3, r1, #15
    fed2:	1ac0      	subs	r0, r0, r3
    fed4:	4152      	adcs	r2, r2
    fed6:	0b83      	lsrs	r3, r0, #14
    fed8:	428b      	cmp	r3, r1
    feda:	d301      	bcc.n	fee0 <__divsi3+0x58>
    fedc:	038b      	lsls	r3, r1, #14
    fede:	1ac0      	subs	r0, r0, r3
    fee0:	4152      	adcs	r2, r2
    fee2:	0b43      	lsrs	r3, r0, #13
    fee4:	428b      	cmp	r3, r1
    fee6:	d301      	bcc.n	feec <__divsi3+0x64>
    fee8:	034b      	lsls	r3, r1, #13
    feea:	1ac0      	subs	r0, r0, r3
    feec:	4152      	adcs	r2, r2
    feee:	0b03      	lsrs	r3, r0, #12
    fef0:	428b      	cmp	r3, r1
    fef2:	d301      	bcc.n	fef8 <__divsi3+0x70>
    fef4:	030b      	lsls	r3, r1, #12
    fef6:	1ac0      	subs	r0, r0, r3
    fef8:	4152      	adcs	r2, r2
    fefa:	0ac3      	lsrs	r3, r0, #11
    fefc:	428b      	cmp	r3, r1
    fefe:	d301      	bcc.n	ff04 <__divsi3+0x7c>
    ff00:	02cb      	lsls	r3, r1, #11
    ff02:	1ac0      	subs	r0, r0, r3
    ff04:	4152      	adcs	r2, r2
    ff06:	0a83      	lsrs	r3, r0, #10
    ff08:	428b      	cmp	r3, r1
    ff0a:	d301      	bcc.n	ff10 <__divsi3+0x88>
    ff0c:	028b      	lsls	r3, r1, #10
    ff0e:	1ac0      	subs	r0, r0, r3
    ff10:	4152      	adcs	r2, r2
    ff12:	0a43      	lsrs	r3, r0, #9
    ff14:	428b      	cmp	r3, r1
    ff16:	d301      	bcc.n	ff1c <__divsi3+0x94>
    ff18:	024b      	lsls	r3, r1, #9
    ff1a:	1ac0      	subs	r0, r0, r3
    ff1c:	4152      	adcs	r2, r2
    ff1e:	0a03      	lsrs	r3, r0, #8
    ff20:	428b      	cmp	r3, r1
    ff22:	d301      	bcc.n	ff28 <__divsi3+0xa0>
    ff24:	020b      	lsls	r3, r1, #8
    ff26:	1ac0      	subs	r0, r0, r3
    ff28:	4152      	adcs	r2, r2
    ff2a:	d2cd      	bcs.n	fec8 <__divsi3+0x40>
    ff2c:	09c3      	lsrs	r3, r0, #7
    ff2e:	428b      	cmp	r3, r1
    ff30:	d301      	bcc.n	ff36 <__divsi3+0xae>
    ff32:	01cb      	lsls	r3, r1, #7
    ff34:	1ac0      	subs	r0, r0, r3
    ff36:	4152      	adcs	r2, r2
    ff38:	0983      	lsrs	r3, r0, #6
    ff3a:	428b      	cmp	r3, r1
    ff3c:	d301      	bcc.n	ff42 <__divsi3+0xba>
    ff3e:	018b      	lsls	r3, r1, #6
    ff40:	1ac0      	subs	r0, r0, r3
    ff42:	4152      	adcs	r2, r2
    ff44:	0943      	lsrs	r3, r0, #5
    ff46:	428b      	cmp	r3, r1
    ff48:	d301      	bcc.n	ff4e <__divsi3+0xc6>
    ff4a:	014b      	lsls	r3, r1, #5
    ff4c:	1ac0      	subs	r0, r0, r3
    ff4e:	4152      	adcs	r2, r2
    ff50:	0903      	lsrs	r3, r0, #4
    ff52:	428b      	cmp	r3, r1
    ff54:	d301      	bcc.n	ff5a <__divsi3+0xd2>
    ff56:	010b      	lsls	r3, r1, #4
    ff58:	1ac0      	subs	r0, r0, r3
    ff5a:	4152      	adcs	r2, r2
    ff5c:	08c3      	lsrs	r3, r0, #3
    ff5e:	428b      	cmp	r3, r1
    ff60:	d301      	bcc.n	ff66 <__divsi3+0xde>
    ff62:	00cb      	lsls	r3, r1, #3
    ff64:	1ac0      	subs	r0, r0, r3
    ff66:	4152      	adcs	r2, r2
    ff68:	0883      	lsrs	r3, r0, #2
    ff6a:	428b      	cmp	r3, r1
    ff6c:	d301      	bcc.n	ff72 <__divsi3+0xea>
    ff6e:	008b      	lsls	r3, r1, #2
    ff70:	1ac0      	subs	r0, r0, r3
    ff72:	4152      	adcs	r2, r2
    ff74:	0843      	lsrs	r3, r0, #1
    ff76:	428b      	cmp	r3, r1
    ff78:	d301      	bcc.n	ff7e <__divsi3+0xf6>
    ff7a:	004b      	lsls	r3, r1, #1
    ff7c:	1ac0      	subs	r0, r0, r3
    ff7e:	4152      	adcs	r2, r2
    ff80:	1a41      	subs	r1, r0, r1
    ff82:	d200      	bcs.n	ff86 <__divsi3+0xfe>
    ff84:	4601      	mov	r1, r0
    ff86:	4152      	adcs	r2, r2
    ff88:	4610      	mov	r0, r2
    ff8a:	4770      	bx	lr
    ff8c:	e05d      	b.n	1004a <__divsi3+0x1c2>
    ff8e:	0fca      	lsrs	r2, r1, #31
    ff90:	d000      	beq.n	ff94 <__divsi3+0x10c>
    ff92:	4249      	negs	r1, r1
    ff94:	1003      	asrs	r3, r0, #32
    ff96:	d300      	bcc.n	ff9a <__divsi3+0x112>
    ff98:	4240      	negs	r0, r0
    ff9a:	4053      	eors	r3, r2
    ff9c:	2200      	movs	r2, #0
    ff9e:	469c      	mov	ip, r3
    ffa0:	0903      	lsrs	r3, r0, #4
    ffa2:	428b      	cmp	r3, r1
    ffa4:	d32d      	bcc.n	10002 <__divsi3+0x17a>
    ffa6:	0a03      	lsrs	r3, r0, #8
    ffa8:	428b      	cmp	r3, r1
    ffaa:	d312      	bcc.n	ffd2 <__divsi3+0x14a>
    ffac:	22fc      	movs	r2, #252	; 0xfc
    ffae:	0189      	lsls	r1, r1, #6
    ffb0:	ba12      	rev	r2, r2
    ffb2:	0a03      	lsrs	r3, r0, #8
    ffb4:	428b      	cmp	r3, r1
    ffb6:	d30c      	bcc.n	ffd2 <__divsi3+0x14a>
    ffb8:	0189      	lsls	r1, r1, #6
    ffba:	1192      	asrs	r2, r2, #6
    ffbc:	428b      	cmp	r3, r1
    ffbe:	d308      	bcc.n	ffd2 <__divsi3+0x14a>
    ffc0:	0189      	lsls	r1, r1, #6
    ffc2:	1192      	asrs	r2, r2, #6
    ffc4:	428b      	cmp	r3, r1
    ffc6:	d304      	bcc.n	ffd2 <__divsi3+0x14a>
    ffc8:	0189      	lsls	r1, r1, #6
    ffca:	d03a      	beq.n	10042 <__divsi3+0x1ba>
    ffcc:	1192      	asrs	r2, r2, #6
    ffce:	e000      	b.n	ffd2 <__divsi3+0x14a>
    ffd0:	0989      	lsrs	r1, r1, #6
    ffd2:	09c3      	lsrs	r3, r0, #7
    ffd4:	428b      	cmp	r3, r1
    ffd6:	d301      	bcc.n	ffdc <__divsi3+0x154>
    ffd8:	01cb      	lsls	r3, r1, #7
    ffda:	1ac0      	subs	r0, r0, r3
    ffdc:	4152      	adcs	r2, r2
    ffde:	0983      	lsrs	r3, r0, #6
    ffe0:	428b      	cmp	r3, r1
    ffe2:	d301      	bcc.n	ffe8 <__divsi3+0x160>
    ffe4:	018b      	lsls	r3, r1, #6
    ffe6:	1ac0      	subs	r0, r0, r3
    ffe8:	4152      	adcs	r2, r2
    ffea:	0943      	lsrs	r3, r0, #5
    ffec:	428b      	cmp	r3, r1
    ffee:	d301      	bcc.n	fff4 <__divsi3+0x16c>
    fff0:	014b      	lsls	r3, r1, #5
    fff2:	1ac0      	subs	r0, r0, r3
    fff4:	4152      	adcs	r2, r2
    fff6:	0903      	lsrs	r3, r0, #4
    fff8:	428b      	cmp	r3, r1
    fffa:	d301      	bcc.n	10000 <__divsi3+0x178>
    fffc:	010b      	lsls	r3, r1, #4
    fffe:	1ac0      	subs	r0, r0, r3
   10000:	4152      	adcs	r2, r2
   10002:	08c3      	lsrs	r3, r0, #3
   10004:	428b      	cmp	r3, r1
   10006:	d301      	bcc.n	1000c <__divsi3+0x184>
   10008:	00cb      	lsls	r3, r1, #3
   1000a:	1ac0      	subs	r0, r0, r3
   1000c:	4152      	adcs	r2, r2
   1000e:	0883      	lsrs	r3, r0, #2
   10010:	428b      	cmp	r3, r1
   10012:	d301      	bcc.n	10018 <__divsi3+0x190>
   10014:	008b      	lsls	r3, r1, #2
   10016:	1ac0      	subs	r0, r0, r3
   10018:	4152      	adcs	r2, r2
   1001a:	d2d9      	bcs.n	ffd0 <__divsi3+0x148>
   1001c:	0843      	lsrs	r3, r0, #1
   1001e:	428b      	cmp	r3, r1
   10020:	d301      	bcc.n	10026 <__divsi3+0x19e>
   10022:	004b      	lsls	r3, r1, #1
   10024:	1ac0      	subs	r0, r0, r3
   10026:	4152      	adcs	r2, r2
   10028:	1a41      	subs	r1, r0, r1
   1002a:	d200      	bcs.n	1002e <__divsi3+0x1a6>
   1002c:	4601      	mov	r1, r0
   1002e:	4663      	mov	r3, ip
   10030:	4152      	adcs	r2, r2
   10032:	105b      	asrs	r3, r3, #1
   10034:	4610      	mov	r0, r2
   10036:	d301      	bcc.n	1003c <__divsi3+0x1b4>
   10038:	4240      	negs	r0, r0
   1003a:	2b00      	cmp	r3, #0
   1003c:	d500      	bpl.n	10040 <__divsi3+0x1b8>
   1003e:	4249      	negs	r1, r1
   10040:	4770      	bx	lr
   10042:	4663      	mov	r3, ip
   10044:	105b      	asrs	r3, r3, #1
   10046:	d300      	bcc.n	1004a <__divsi3+0x1c2>
   10048:	4240      	negs	r0, r0
   1004a:	b501      	push	{r0, lr}
   1004c:	2000      	movs	r0, #0
   1004e:	f000 f805 	bl	1005c <__aeabi_idiv0>
   10052:	bd02      	pop	{r1, pc}

00010054 <__aeabi_idivmod>:
   10054:	2900      	cmp	r1, #0
   10056:	d0f8      	beq.n	1004a <__divsi3+0x1c2>
   10058:	e716      	b.n	fe88 <__divsi3>
   1005a:	4770      	bx	lr

0001005c <__aeabi_idiv0>:
   1005c:	4770      	bx	lr
   1005e:	46c0      	nop			; (mov r8, r8)

00010060 <__aeabi_cfrcmple>:
   10060:	4684      	mov	ip, r0
   10062:	1c08      	adds	r0, r1, #0
   10064:	4661      	mov	r1, ip
   10066:	e7ff      	b.n	10068 <__aeabi_cfcmpeq>

00010068 <__aeabi_cfcmpeq>:
   10068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1006a:	f000 fcf1 	bl	10a50 <__lesf2>
   1006e:	2800      	cmp	r0, #0
   10070:	d401      	bmi.n	10076 <__aeabi_cfcmpeq+0xe>
   10072:	2100      	movs	r1, #0
   10074:	42c8      	cmn	r0, r1
   10076:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00010078 <__aeabi_fcmpeq>:
   10078:	b510      	push	{r4, lr}
   1007a:	f000 fc83 	bl	10984 <__eqsf2>
   1007e:	4240      	negs	r0, r0
   10080:	3001      	adds	r0, #1
   10082:	bd10      	pop	{r4, pc}

00010084 <__aeabi_fcmplt>:
   10084:	b510      	push	{r4, lr}
   10086:	f000 fce3 	bl	10a50 <__lesf2>
   1008a:	2800      	cmp	r0, #0
   1008c:	db01      	blt.n	10092 <__aeabi_fcmplt+0xe>
   1008e:	2000      	movs	r0, #0
   10090:	bd10      	pop	{r4, pc}
   10092:	2001      	movs	r0, #1
   10094:	bd10      	pop	{r4, pc}
   10096:	46c0      	nop			; (mov r8, r8)

00010098 <__aeabi_fcmple>:
   10098:	b510      	push	{r4, lr}
   1009a:	f000 fcd9 	bl	10a50 <__lesf2>
   1009e:	2800      	cmp	r0, #0
   100a0:	dd01      	ble.n	100a6 <__aeabi_fcmple+0xe>
   100a2:	2000      	movs	r0, #0
   100a4:	bd10      	pop	{r4, pc}
   100a6:	2001      	movs	r0, #1
   100a8:	bd10      	pop	{r4, pc}
   100aa:	46c0      	nop			; (mov r8, r8)

000100ac <__aeabi_fcmpgt>:
   100ac:	b510      	push	{r4, lr}
   100ae:	f000 fc8f 	bl	109d0 <__gesf2>
   100b2:	2800      	cmp	r0, #0
   100b4:	dc01      	bgt.n	100ba <__aeabi_fcmpgt+0xe>
   100b6:	2000      	movs	r0, #0
   100b8:	bd10      	pop	{r4, pc}
   100ba:	2001      	movs	r0, #1
   100bc:	bd10      	pop	{r4, pc}
   100be:	46c0      	nop			; (mov r8, r8)

000100c0 <__aeabi_fcmpge>:
   100c0:	b510      	push	{r4, lr}
   100c2:	f000 fc85 	bl	109d0 <__gesf2>
   100c6:	2800      	cmp	r0, #0
   100c8:	da01      	bge.n	100ce <__aeabi_fcmpge+0xe>
   100ca:	2000      	movs	r0, #0
   100cc:	bd10      	pop	{r4, pc}
   100ce:	2001      	movs	r0, #1
   100d0:	bd10      	pop	{r4, pc}
   100d2:	46c0      	nop			; (mov r8, r8)

000100d4 <__clzsi2>:
   100d4:	211c      	movs	r1, #28
   100d6:	2301      	movs	r3, #1
   100d8:	041b      	lsls	r3, r3, #16
   100da:	4298      	cmp	r0, r3
   100dc:	d301      	bcc.n	100e2 <__clzsi2+0xe>
   100de:	0c00      	lsrs	r0, r0, #16
   100e0:	3910      	subs	r1, #16
   100e2:	0a1b      	lsrs	r3, r3, #8
   100e4:	4298      	cmp	r0, r3
   100e6:	d301      	bcc.n	100ec <__clzsi2+0x18>
   100e8:	0a00      	lsrs	r0, r0, #8
   100ea:	3908      	subs	r1, #8
   100ec:	091b      	lsrs	r3, r3, #4
   100ee:	4298      	cmp	r0, r3
   100f0:	d301      	bcc.n	100f6 <__clzsi2+0x22>
   100f2:	0900      	lsrs	r0, r0, #4
   100f4:	3904      	subs	r1, #4
   100f6:	a202      	add	r2, pc, #8	; (adr r2, 10100 <__clzsi2+0x2c>)
   100f8:	5c10      	ldrb	r0, [r2, r0]
   100fa:	1840      	adds	r0, r0, r1
   100fc:	4770      	bx	lr
   100fe:	46c0      	nop			; (mov r8, r8)
   10100:	02020304 	.word	0x02020304
   10104:	01010101 	.word	0x01010101
	...

00010110 <__ctzsi2>:
   10110:	4241      	negs	r1, r0
   10112:	4008      	ands	r0, r1
   10114:	211c      	movs	r1, #28
   10116:	2301      	movs	r3, #1
   10118:	041b      	lsls	r3, r3, #16
   1011a:	4298      	cmp	r0, r3
   1011c:	d301      	bcc.n	10122 <__ctzsi2+0x12>
   1011e:	0c00      	lsrs	r0, r0, #16
   10120:	3910      	subs	r1, #16
   10122:	0a1b      	lsrs	r3, r3, #8
   10124:	4298      	cmp	r0, r3
   10126:	d301      	bcc.n	1012c <__ctzsi2+0x1c>
   10128:	0a00      	lsrs	r0, r0, #8
   1012a:	3908      	subs	r1, #8
   1012c:	091b      	lsrs	r3, r3, #4
   1012e:	4298      	cmp	r0, r3
   10130:	d301      	bcc.n	10136 <__ctzsi2+0x26>
   10132:	0900      	lsrs	r0, r0, #4
   10134:	3904      	subs	r1, #4
   10136:	a202      	add	r2, pc, #8	; (adr r2, 10140 <__ctzsi2+0x30>)
   10138:	5c10      	ldrb	r0, [r2, r0]
   1013a:	1a40      	subs	r0, r0, r1
   1013c:	4770      	bx	lr
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	1d1d1c1b 	.word	0x1d1d1c1b
   10144:	1e1e1e1e 	.word	0x1e1e1e1e
   10148:	1f1f1f1f 	.word	0x1f1f1f1f
   1014c:	1f1f1f1f 	.word	0x1f1f1f1f

00010150 <__aeabi_uldivmod>:
   10150:	2b00      	cmp	r3, #0
   10152:	d111      	bne.n	10178 <__aeabi_uldivmod+0x28>
   10154:	2a00      	cmp	r2, #0
   10156:	d10f      	bne.n	10178 <__aeabi_uldivmod+0x28>
   10158:	2900      	cmp	r1, #0
   1015a:	d100      	bne.n	1015e <__aeabi_uldivmod+0xe>
   1015c:	2800      	cmp	r0, #0
   1015e:	d002      	beq.n	10166 <__aeabi_uldivmod+0x16>
   10160:	2100      	movs	r1, #0
   10162:	43c9      	mvns	r1, r1
   10164:	1c08      	adds	r0, r1, #0
   10166:	b407      	push	{r0, r1, r2}
   10168:	4802      	ldr	r0, [pc, #8]	; (10174 <__aeabi_uldivmod+0x24>)
   1016a:	a102      	add	r1, pc, #8	; (adr r1, 10174 <__aeabi_uldivmod+0x24>)
   1016c:	1840      	adds	r0, r0, r1
   1016e:	9002      	str	r0, [sp, #8]
   10170:	bd03      	pop	{r0, r1, pc}
   10172:	46c0      	nop			; (mov r8, r8)
   10174:	fffffee9 	.word	0xfffffee9
   10178:	b403      	push	{r0, r1}
   1017a:	4668      	mov	r0, sp
   1017c:	b501      	push	{r0, lr}
   1017e:	9802      	ldr	r0, [sp, #8]
   10180:	f000 f866 	bl	10250 <__udivmoddi4>
   10184:	9b01      	ldr	r3, [sp, #4]
   10186:	469e      	mov	lr, r3
   10188:	b002      	add	sp, #8
   1018a:	bc0c      	pop	{r2, r3}
   1018c:	4770      	bx	lr
   1018e:	46c0      	nop			; (mov r8, r8)

00010190 <__aeabi_lmul>:
   10190:	b5f0      	push	{r4, r5, r6, r7, lr}
   10192:	46ce      	mov	lr, r9
   10194:	4647      	mov	r7, r8
   10196:	0415      	lsls	r5, r2, #16
   10198:	0c2d      	lsrs	r5, r5, #16
   1019a:	002e      	movs	r6, r5
   1019c:	b580      	push	{r7, lr}
   1019e:	0407      	lsls	r7, r0, #16
   101a0:	0c14      	lsrs	r4, r2, #16
   101a2:	0c3f      	lsrs	r7, r7, #16
   101a4:	4699      	mov	r9, r3
   101a6:	0c03      	lsrs	r3, r0, #16
   101a8:	437e      	muls	r6, r7
   101aa:	435d      	muls	r5, r3
   101ac:	4367      	muls	r7, r4
   101ae:	4363      	muls	r3, r4
   101b0:	197f      	adds	r7, r7, r5
   101b2:	0c34      	lsrs	r4, r6, #16
   101b4:	19e4      	adds	r4, r4, r7
   101b6:	469c      	mov	ip, r3
   101b8:	42a5      	cmp	r5, r4
   101ba:	d903      	bls.n	101c4 <__aeabi_lmul+0x34>
   101bc:	2380      	movs	r3, #128	; 0x80
   101be:	025b      	lsls	r3, r3, #9
   101c0:	4698      	mov	r8, r3
   101c2:	44c4      	add	ip, r8
   101c4:	464b      	mov	r3, r9
   101c6:	4351      	muls	r1, r2
   101c8:	4343      	muls	r3, r0
   101ca:	0436      	lsls	r6, r6, #16
   101cc:	0c36      	lsrs	r6, r6, #16
   101ce:	0c25      	lsrs	r5, r4, #16
   101d0:	0424      	lsls	r4, r4, #16
   101d2:	4465      	add	r5, ip
   101d4:	19a4      	adds	r4, r4, r6
   101d6:	1859      	adds	r1, r3, r1
   101d8:	1949      	adds	r1, r1, r5
   101da:	0020      	movs	r0, r4
   101dc:	bc0c      	pop	{r2, r3}
   101de:	4690      	mov	r8, r2
   101e0:	4699      	mov	r9, r3
   101e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000101e4 <__aeabi_f2uiz>:
   101e4:	219e      	movs	r1, #158	; 0x9e
   101e6:	b510      	push	{r4, lr}
   101e8:	05c9      	lsls	r1, r1, #23
   101ea:	1c04      	adds	r4, r0, #0
   101ec:	f7ff ff68 	bl	100c0 <__aeabi_fcmpge>
   101f0:	2800      	cmp	r0, #0
   101f2:	d103      	bne.n	101fc <__aeabi_f2uiz+0x18>
   101f4:	1c20      	adds	r0, r4, #0
   101f6:	f000 ff29 	bl	1104c <__aeabi_f2iz>
   101fa:	bd10      	pop	{r4, pc}
   101fc:	219e      	movs	r1, #158	; 0x9e
   101fe:	1c20      	adds	r0, r4, #0
   10200:	05c9      	lsls	r1, r1, #23
   10202:	f000 fd87 	bl	10d14 <__aeabi_fsub>
   10206:	f000 ff21 	bl	1104c <__aeabi_f2iz>
   1020a:	2380      	movs	r3, #128	; 0x80
   1020c:	061b      	lsls	r3, r3, #24
   1020e:	469c      	mov	ip, r3
   10210:	4460      	add	r0, ip
   10212:	e7f2      	b.n	101fa <__aeabi_f2uiz+0x16>

00010214 <__aeabi_d2uiz>:
   10214:	b570      	push	{r4, r5, r6, lr}
   10216:	2200      	movs	r2, #0
   10218:	4b0c      	ldr	r3, [pc, #48]	; (1024c <__aeabi_d2uiz+0x38>)
   1021a:	0004      	movs	r4, r0
   1021c:	000d      	movs	r5, r1
   1021e:	f002 fd1d 	bl	12c5c <__aeabi_dcmpge>
   10222:	2800      	cmp	r0, #0
   10224:	d104      	bne.n	10230 <__aeabi_d2uiz+0x1c>
   10226:	0020      	movs	r0, r4
   10228:	0029      	movs	r1, r5
   1022a:	f002 fb59 	bl	128e0 <__aeabi_d2iz>
   1022e:	bd70      	pop	{r4, r5, r6, pc}
   10230:	4b06      	ldr	r3, [pc, #24]	; (1024c <__aeabi_d2uiz+0x38>)
   10232:	2200      	movs	r2, #0
   10234:	0020      	movs	r0, r4
   10236:	0029      	movs	r1, r5
   10238:	f002 f83c 	bl	122b4 <__aeabi_dsub>
   1023c:	f002 fb50 	bl	128e0 <__aeabi_d2iz>
   10240:	2380      	movs	r3, #128	; 0x80
   10242:	061b      	lsls	r3, r3, #24
   10244:	469c      	mov	ip, r3
   10246:	4460      	add	r0, ip
   10248:	e7f1      	b.n	1022e <__aeabi_d2uiz+0x1a>
   1024a:	46c0      	nop			; (mov r8, r8)
   1024c:	41e00000 	.word	0x41e00000

00010250 <__udivmoddi4>:
   10250:	b5f0      	push	{r4, r5, r6, r7, lr}
   10252:	4657      	mov	r7, sl
   10254:	464e      	mov	r6, r9
   10256:	4645      	mov	r5, r8
   10258:	46de      	mov	lr, fp
   1025a:	b5e0      	push	{r5, r6, r7, lr}
   1025c:	0004      	movs	r4, r0
   1025e:	b083      	sub	sp, #12
   10260:	000d      	movs	r5, r1
   10262:	4692      	mov	sl, r2
   10264:	4699      	mov	r9, r3
   10266:	428b      	cmp	r3, r1
   10268:	d82f      	bhi.n	102ca <__udivmoddi4+0x7a>
   1026a:	d02c      	beq.n	102c6 <__udivmoddi4+0x76>
   1026c:	4649      	mov	r1, r9
   1026e:	4650      	mov	r0, sl
   10270:	f002 fcfe 	bl	12c70 <__clzdi2>
   10274:	0029      	movs	r1, r5
   10276:	0006      	movs	r6, r0
   10278:	0020      	movs	r0, r4
   1027a:	f002 fcf9 	bl	12c70 <__clzdi2>
   1027e:	1a33      	subs	r3, r6, r0
   10280:	4698      	mov	r8, r3
   10282:	3b20      	subs	r3, #32
   10284:	469b      	mov	fp, r3
   10286:	d500      	bpl.n	1028a <__udivmoddi4+0x3a>
   10288:	e074      	b.n	10374 <__udivmoddi4+0x124>
   1028a:	4653      	mov	r3, sl
   1028c:	465a      	mov	r2, fp
   1028e:	4093      	lsls	r3, r2
   10290:	001f      	movs	r7, r3
   10292:	4653      	mov	r3, sl
   10294:	4642      	mov	r2, r8
   10296:	4093      	lsls	r3, r2
   10298:	001e      	movs	r6, r3
   1029a:	42af      	cmp	r7, r5
   1029c:	d829      	bhi.n	102f2 <__udivmoddi4+0xa2>
   1029e:	d026      	beq.n	102ee <__udivmoddi4+0x9e>
   102a0:	465b      	mov	r3, fp
   102a2:	1ba4      	subs	r4, r4, r6
   102a4:	41bd      	sbcs	r5, r7
   102a6:	2b00      	cmp	r3, #0
   102a8:	da00      	bge.n	102ac <__udivmoddi4+0x5c>
   102aa:	e079      	b.n	103a0 <__udivmoddi4+0x150>
   102ac:	2200      	movs	r2, #0
   102ae:	2300      	movs	r3, #0
   102b0:	9200      	str	r2, [sp, #0]
   102b2:	9301      	str	r3, [sp, #4]
   102b4:	2301      	movs	r3, #1
   102b6:	465a      	mov	r2, fp
   102b8:	4093      	lsls	r3, r2
   102ba:	9301      	str	r3, [sp, #4]
   102bc:	2301      	movs	r3, #1
   102be:	4642      	mov	r2, r8
   102c0:	4093      	lsls	r3, r2
   102c2:	9300      	str	r3, [sp, #0]
   102c4:	e019      	b.n	102fa <__udivmoddi4+0xaa>
   102c6:	4282      	cmp	r2, r0
   102c8:	d9d0      	bls.n	1026c <__udivmoddi4+0x1c>
   102ca:	2200      	movs	r2, #0
   102cc:	2300      	movs	r3, #0
   102ce:	9200      	str	r2, [sp, #0]
   102d0:	9301      	str	r3, [sp, #4]
   102d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102d4:	2b00      	cmp	r3, #0
   102d6:	d001      	beq.n	102dc <__udivmoddi4+0x8c>
   102d8:	601c      	str	r4, [r3, #0]
   102da:	605d      	str	r5, [r3, #4]
   102dc:	9800      	ldr	r0, [sp, #0]
   102de:	9901      	ldr	r1, [sp, #4]
   102e0:	b003      	add	sp, #12
   102e2:	bc3c      	pop	{r2, r3, r4, r5}
   102e4:	4690      	mov	r8, r2
   102e6:	4699      	mov	r9, r3
   102e8:	46a2      	mov	sl, r4
   102ea:	46ab      	mov	fp, r5
   102ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102ee:	42a3      	cmp	r3, r4
   102f0:	d9d6      	bls.n	102a0 <__udivmoddi4+0x50>
   102f2:	2200      	movs	r2, #0
   102f4:	2300      	movs	r3, #0
   102f6:	9200      	str	r2, [sp, #0]
   102f8:	9301      	str	r3, [sp, #4]
   102fa:	4643      	mov	r3, r8
   102fc:	2b00      	cmp	r3, #0
   102fe:	d0e8      	beq.n	102d2 <__udivmoddi4+0x82>
   10300:	07fb      	lsls	r3, r7, #31
   10302:	0872      	lsrs	r2, r6, #1
   10304:	431a      	orrs	r2, r3
   10306:	4646      	mov	r6, r8
   10308:	087b      	lsrs	r3, r7, #1
   1030a:	e00e      	b.n	1032a <__udivmoddi4+0xda>
   1030c:	42ab      	cmp	r3, r5
   1030e:	d101      	bne.n	10314 <__udivmoddi4+0xc4>
   10310:	42a2      	cmp	r2, r4
   10312:	d80c      	bhi.n	1032e <__udivmoddi4+0xde>
   10314:	1aa4      	subs	r4, r4, r2
   10316:	419d      	sbcs	r5, r3
   10318:	2001      	movs	r0, #1
   1031a:	1924      	adds	r4, r4, r4
   1031c:	416d      	adcs	r5, r5
   1031e:	2100      	movs	r1, #0
   10320:	3e01      	subs	r6, #1
   10322:	1824      	adds	r4, r4, r0
   10324:	414d      	adcs	r5, r1
   10326:	2e00      	cmp	r6, #0
   10328:	d006      	beq.n	10338 <__udivmoddi4+0xe8>
   1032a:	42ab      	cmp	r3, r5
   1032c:	d9ee      	bls.n	1030c <__udivmoddi4+0xbc>
   1032e:	3e01      	subs	r6, #1
   10330:	1924      	adds	r4, r4, r4
   10332:	416d      	adcs	r5, r5
   10334:	2e00      	cmp	r6, #0
   10336:	d1f8      	bne.n	1032a <__udivmoddi4+0xda>
   10338:	465b      	mov	r3, fp
   1033a:	9800      	ldr	r0, [sp, #0]
   1033c:	9901      	ldr	r1, [sp, #4]
   1033e:	1900      	adds	r0, r0, r4
   10340:	4169      	adcs	r1, r5
   10342:	2b00      	cmp	r3, #0
   10344:	db22      	blt.n	1038c <__udivmoddi4+0x13c>
   10346:	002b      	movs	r3, r5
   10348:	465a      	mov	r2, fp
   1034a:	40d3      	lsrs	r3, r2
   1034c:	002a      	movs	r2, r5
   1034e:	4644      	mov	r4, r8
   10350:	40e2      	lsrs	r2, r4
   10352:	001c      	movs	r4, r3
   10354:	465b      	mov	r3, fp
   10356:	0015      	movs	r5, r2
   10358:	2b00      	cmp	r3, #0
   1035a:	db2c      	blt.n	103b6 <__udivmoddi4+0x166>
   1035c:	0026      	movs	r6, r4
   1035e:	409e      	lsls	r6, r3
   10360:	0033      	movs	r3, r6
   10362:	0026      	movs	r6, r4
   10364:	4647      	mov	r7, r8
   10366:	40be      	lsls	r6, r7
   10368:	0032      	movs	r2, r6
   1036a:	1a80      	subs	r0, r0, r2
   1036c:	4199      	sbcs	r1, r3
   1036e:	9000      	str	r0, [sp, #0]
   10370:	9101      	str	r1, [sp, #4]
   10372:	e7ae      	b.n	102d2 <__udivmoddi4+0x82>
   10374:	4642      	mov	r2, r8
   10376:	2320      	movs	r3, #32
   10378:	1a9b      	subs	r3, r3, r2
   1037a:	4652      	mov	r2, sl
   1037c:	40da      	lsrs	r2, r3
   1037e:	4641      	mov	r1, r8
   10380:	0013      	movs	r3, r2
   10382:	464a      	mov	r2, r9
   10384:	408a      	lsls	r2, r1
   10386:	0017      	movs	r7, r2
   10388:	431f      	orrs	r7, r3
   1038a:	e782      	b.n	10292 <__udivmoddi4+0x42>
   1038c:	4642      	mov	r2, r8
   1038e:	2320      	movs	r3, #32
   10390:	1a9b      	subs	r3, r3, r2
   10392:	002a      	movs	r2, r5
   10394:	4646      	mov	r6, r8
   10396:	409a      	lsls	r2, r3
   10398:	0023      	movs	r3, r4
   1039a:	40f3      	lsrs	r3, r6
   1039c:	4313      	orrs	r3, r2
   1039e:	e7d5      	b.n	1034c <__udivmoddi4+0xfc>
   103a0:	4642      	mov	r2, r8
   103a2:	2320      	movs	r3, #32
   103a4:	2100      	movs	r1, #0
   103a6:	1a9b      	subs	r3, r3, r2
   103a8:	2200      	movs	r2, #0
   103aa:	9100      	str	r1, [sp, #0]
   103ac:	9201      	str	r2, [sp, #4]
   103ae:	2201      	movs	r2, #1
   103b0:	40da      	lsrs	r2, r3
   103b2:	9201      	str	r2, [sp, #4]
   103b4:	e782      	b.n	102bc <__udivmoddi4+0x6c>
   103b6:	4642      	mov	r2, r8
   103b8:	2320      	movs	r3, #32
   103ba:	0026      	movs	r6, r4
   103bc:	1a9b      	subs	r3, r3, r2
   103be:	40de      	lsrs	r6, r3
   103c0:	002f      	movs	r7, r5
   103c2:	46b4      	mov	ip, r6
   103c4:	4097      	lsls	r7, r2
   103c6:	4666      	mov	r6, ip
   103c8:	003b      	movs	r3, r7
   103ca:	4333      	orrs	r3, r6
   103cc:	e7c9      	b.n	10362 <__udivmoddi4+0x112>
   103ce:	46c0      	nop			; (mov r8, r8)

000103d0 <__aeabi_fadd>:
   103d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   103d2:	46c6      	mov	lr, r8
   103d4:	024e      	lsls	r6, r1, #9
   103d6:	0247      	lsls	r7, r0, #9
   103d8:	0a76      	lsrs	r6, r6, #9
   103da:	0a7b      	lsrs	r3, r7, #9
   103dc:	0044      	lsls	r4, r0, #1
   103de:	0fc5      	lsrs	r5, r0, #31
   103e0:	00f7      	lsls	r7, r6, #3
   103e2:	0048      	lsls	r0, r1, #1
   103e4:	4698      	mov	r8, r3
   103e6:	b500      	push	{lr}
   103e8:	0e24      	lsrs	r4, r4, #24
   103ea:	002a      	movs	r2, r5
   103ec:	00db      	lsls	r3, r3, #3
   103ee:	0e00      	lsrs	r0, r0, #24
   103f0:	0fc9      	lsrs	r1, r1, #31
   103f2:	46bc      	mov	ip, r7
   103f4:	428d      	cmp	r5, r1
   103f6:	d067      	beq.n	104c8 <__aeabi_fadd+0xf8>
   103f8:	1a22      	subs	r2, r4, r0
   103fa:	2a00      	cmp	r2, #0
   103fc:	dc00      	bgt.n	10400 <__aeabi_fadd+0x30>
   103fe:	e0a5      	b.n	1054c <__aeabi_fadd+0x17c>
   10400:	2800      	cmp	r0, #0
   10402:	d13a      	bne.n	1047a <__aeabi_fadd+0xaa>
   10404:	2f00      	cmp	r7, #0
   10406:	d100      	bne.n	1040a <__aeabi_fadd+0x3a>
   10408:	e093      	b.n	10532 <__aeabi_fadd+0x162>
   1040a:	1e51      	subs	r1, r2, #1
   1040c:	2900      	cmp	r1, #0
   1040e:	d000      	beq.n	10412 <__aeabi_fadd+0x42>
   10410:	e0bc      	b.n	1058c <__aeabi_fadd+0x1bc>
   10412:	2401      	movs	r4, #1
   10414:	1bdb      	subs	r3, r3, r7
   10416:	015a      	lsls	r2, r3, #5
   10418:	d546      	bpl.n	104a8 <__aeabi_fadd+0xd8>
   1041a:	019b      	lsls	r3, r3, #6
   1041c:	099e      	lsrs	r6, r3, #6
   1041e:	0030      	movs	r0, r6
   10420:	f7ff fe58 	bl	100d4 <__clzsi2>
   10424:	3805      	subs	r0, #5
   10426:	4086      	lsls	r6, r0
   10428:	4284      	cmp	r4, r0
   1042a:	dd00      	ble.n	1042e <__aeabi_fadd+0x5e>
   1042c:	e09d      	b.n	1056a <__aeabi_fadd+0x19a>
   1042e:	1b04      	subs	r4, r0, r4
   10430:	0032      	movs	r2, r6
   10432:	2020      	movs	r0, #32
   10434:	3401      	adds	r4, #1
   10436:	40e2      	lsrs	r2, r4
   10438:	1b04      	subs	r4, r0, r4
   1043a:	40a6      	lsls	r6, r4
   1043c:	0033      	movs	r3, r6
   1043e:	1e5e      	subs	r6, r3, #1
   10440:	41b3      	sbcs	r3, r6
   10442:	2400      	movs	r4, #0
   10444:	4313      	orrs	r3, r2
   10446:	075a      	lsls	r2, r3, #29
   10448:	d004      	beq.n	10454 <__aeabi_fadd+0x84>
   1044a:	220f      	movs	r2, #15
   1044c:	401a      	ands	r2, r3
   1044e:	2a04      	cmp	r2, #4
   10450:	d000      	beq.n	10454 <__aeabi_fadd+0x84>
   10452:	3304      	adds	r3, #4
   10454:	015a      	lsls	r2, r3, #5
   10456:	d529      	bpl.n	104ac <__aeabi_fadd+0xdc>
   10458:	3401      	adds	r4, #1
   1045a:	2cff      	cmp	r4, #255	; 0xff
   1045c:	d100      	bne.n	10460 <__aeabi_fadd+0x90>
   1045e:	e081      	b.n	10564 <__aeabi_fadd+0x194>
   10460:	002a      	movs	r2, r5
   10462:	019b      	lsls	r3, r3, #6
   10464:	0a5b      	lsrs	r3, r3, #9
   10466:	b2e4      	uxtb	r4, r4
   10468:	025b      	lsls	r3, r3, #9
   1046a:	05e4      	lsls	r4, r4, #23
   1046c:	0a58      	lsrs	r0, r3, #9
   1046e:	07d2      	lsls	r2, r2, #31
   10470:	4320      	orrs	r0, r4
   10472:	4310      	orrs	r0, r2
   10474:	bc04      	pop	{r2}
   10476:	4690      	mov	r8, r2
   10478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1047a:	2cff      	cmp	r4, #255	; 0xff
   1047c:	d0e3      	beq.n	10446 <__aeabi_fadd+0x76>
   1047e:	2180      	movs	r1, #128	; 0x80
   10480:	0038      	movs	r0, r7
   10482:	04c9      	lsls	r1, r1, #19
   10484:	4308      	orrs	r0, r1
   10486:	4684      	mov	ip, r0
   10488:	2a1b      	cmp	r2, #27
   1048a:	dd00      	ble.n	1048e <__aeabi_fadd+0xbe>
   1048c:	e082      	b.n	10594 <__aeabi_fadd+0x1c4>
   1048e:	2020      	movs	r0, #32
   10490:	4661      	mov	r1, ip
   10492:	40d1      	lsrs	r1, r2
   10494:	1a82      	subs	r2, r0, r2
   10496:	4660      	mov	r0, ip
   10498:	4090      	lsls	r0, r2
   1049a:	0002      	movs	r2, r0
   1049c:	1e50      	subs	r0, r2, #1
   1049e:	4182      	sbcs	r2, r0
   104a0:	430a      	orrs	r2, r1
   104a2:	1a9b      	subs	r3, r3, r2
   104a4:	015a      	lsls	r2, r3, #5
   104a6:	d4b8      	bmi.n	1041a <__aeabi_fadd+0x4a>
   104a8:	075a      	lsls	r2, r3, #29
   104aa:	d1ce      	bne.n	1044a <__aeabi_fadd+0x7a>
   104ac:	08de      	lsrs	r6, r3, #3
   104ae:	002a      	movs	r2, r5
   104b0:	2cff      	cmp	r4, #255	; 0xff
   104b2:	d13a      	bne.n	1052a <__aeabi_fadd+0x15a>
   104b4:	2e00      	cmp	r6, #0
   104b6:	d100      	bne.n	104ba <__aeabi_fadd+0xea>
   104b8:	e0ae      	b.n	10618 <__aeabi_fadd+0x248>
   104ba:	2380      	movs	r3, #128	; 0x80
   104bc:	03db      	lsls	r3, r3, #15
   104be:	4333      	orrs	r3, r6
   104c0:	025b      	lsls	r3, r3, #9
   104c2:	0a5b      	lsrs	r3, r3, #9
   104c4:	24ff      	movs	r4, #255	; 0xff
   104c6:	e7cf      	b.n	10468 <__aeabi_fadd+0x98>
   104c8:	1a21      	subs	r1, r4, r0
   104ca:	2900      	cmp	r1, #0
   104cc:	dd52      	ble.n	10574 <__aeabi_fadd+0x1a4>
   104ce:	2800      	cmp	r0, #0
   104d0:	d031      	beq.n	10536 <__aeabi_fadd+0x166>
   104d2:	2cff      	cmp	r4, #255	; 0xff
   104d4:	d0b7      	beq.n	10446 <__aeabi_fadd+0x76>
   104d6:	2080      	movs	r0, #128	; 0x80
   104d8:	003e      	movs	r6, r7
   104da:	04c0      	lsls	r0, r0, #19
   104dc:	4306      	orrs	r6, r0
   104de:	46b4      	mov	ip, r6
   104e0:	291b      	cmp	r1, #27
   104e2:	dd00      	ble.n	104e6 <__aeabi_fadd+0x116>
   104e4:	e0aa      	b.n	1063c <__aeabi_fadd+0x26c>
   104e6:	2620      	movs	r6, #32
   104e8:	4660      	mov	r0, ip
   104ea:	40c8      	lsrs	r0, r1
   104ec:	1a71      	subs	r1, r6, r1
   104ee:	4666      	mov	r6, ip
   104f0:	408e      	lsls	r6, r1
   104f2:	0031      	movs	r1, r6
   104f4:	1e4e      	subs	r6, r1, #1
   104f6:	41b1      	sbcs	r1, r6
   104f8:	4301      	orrs	r1, r0
   104fa:	185b      	adds	r3, r3, r1
   104fc:	0159      	lsls	r1, r3, #5
   104fe:	d5d3      	bpl.n	104a8 <__aeabi_fadd+0xd8>
   10500:	3401      	adds	r4, #1
   10502:	2cff      	cmp	r4, #255	; 0xff
   10504:	d100      	bne.n	10508 <__aeabi_fadd+0x138>
   10506:	e087      	b.n	10618 <__aeabi_fadd+0x248>
   10508:	2201      	movs	r2, #1
   1050a:	4978      	ldr	r1, [pc, #480]	; (106ec <__aeabi_fadd+0x31c>)
   1050c:	401a      	ands	r2, r3
   1050e:	085b      	lsrs	r3, r3, #1
   10510:	400b      	ands	r3, r1
   10512:	4313      	orrs	r3, r2
   10514:	e797      	b.n	10446 <__aeabi_fadd+0x76>
   10516:	2c00      	cmp	r4, #0
   10518:	d000      	beq.n	1051c <__aeabi_fadd+0x14c>
   1051a:	e0a7      	b.n	1066c <__aeabi_fadd+0x29c>
   1051c:	2b00      	cmp	r3, #0
   1051e:	d000      	beq.n	10522 <__aeabi_fadd+0x152>
   10520:	e0b6      	b.n	10690 <__aeabi_fadd+0x2c0>
   10522:	1e3b      	subs	r3, r7, #0
   10524:	d162      	bne.n	105ec <__aeabi_fadd+0x21c>
   10526:	2600      	movs	r6, #0
   10528:	2200      	movs	r2, #0
   1052a:	0273      	lsls	r3, r6, #9
   1052c:	0a5b      	lsrs	r3, r3, #9
   1052e:	b2e4      	uxtb	r4, r4
   10530:	e79a      	b.n	10468 <__aeabi_fadd+0x98>
   10532:	0014      	movs	r4, r2
   10534:	e787      	b.n	10446 <__aeabi_fadd+0x76>
   10536:	2f00      	cmp	r7, #0
   10538:	d04d      	beq.n	105d6 <__aeabi_fadd+0x206>
   1053a:	1e48      	subs	r0, r1, #1
   1053c:	2800      	cmp	r0, #0
   1053e:	d157      	bne.n	105f0 <__aeabi_fadd+0x220>
   10540:	4463      	add	r3, ip
   10542:	2401      	movs	r4, #1
   10544:	015a      	lsls	r2, r3, #5
   10546:	d5af      	bpl.n	104a8 <__aeabi_fadd+0xd8>
   10548:	2402      	movs	r4, #2
   1054a:	e7dd      	b.n	10508 <__aeabi_fadd+0x138>
   1054c:	2a00      	cmp	r2, #0
   1054e:	d124      	bne.n	1059a <__aeabi_fadd+0x1ca>
   10550:	1c62      	adds	r2, r4, #1
   10552:	b2d2      	uxtb	r2, r2
   10554:	2a01      	cmp	r2, #1
   10556:	ddde      	ble.n	10516 <__aeabi_fadd+0x146>
   10558:	1bde      	subs	r6, r3, r7
   1055a:	0172      	lsls	r2, r6, #5
   1055c:	d535      	bpl.n	105ca <__aeabi_fadd+0x1fa>
   1055e:	1afe      	subs	r6, r7, r3
   10560:	000d      	movs	r5, r1
   10562:	e75c      	b.n	1041e <__aeabi_fadd+0x4e>
   10564:	002a      	movs	r2, r5
   10566:	2300      	movs	r3, #0
   10568:	e77e      	b.n	10468 <__aeabi_fadd+0x98>
   1056a:	0033      	movs	r3, r6
   1056c:	4a60      	ldr	r2, [pc, #384]	; (106f0 <__aeabi_fadd+0x320>)
   1056e:	1a24      	subs	r4, r4, r0
   10570:	4013      	ands	r3, r2
   10572:	e768      	b.n	10446 <__aeabi_fadd+0x76>
   10574:	2900      	cmp	r1, #0
   10576:	d163      	bne.n	10640 <__aeabi_fadd+0x270>
   10578:	1c61      	adds	r1, r4, #1
   1057a:	b2c8      	uxtb	r0, r1
   1057c:	2801      	cmp	r0, #1
   1057e:	dd4e      	ble.n	1061e <__aeabi_fadd+0x24e>
   10580:	29ff      	cmp	r1, #255	; 0xff
   10582:	d049      	beq.n	10618 <__aeabi_fadd+0x248>
   10584:	4463      	add	r3, ip
   10586:	085b      	lsrs	r3, r3, #1
   10588:	000c      	movs	r4, r1
   1058a:	e75c      	b.n	10446 <__aeabi_fadd+0x76>
   1058c:	2aff      	cmp	r2, #255	; 0xff
   1058e:	d041      	beq.n	10614 <__aeabi_fadd+0x244>
   10590:	000a      	movs	r2, r1
   10592:	e779      	b.n	10488 <__aeabi_fadd+0xb8>
   10594:	2201      	movs	r2, #1
   10596:	1a9b      	subs	r3, r3, r2
   10598:	e784      	b.n	104a4 <__aeabi_fadd+0xd4>
   1059a:	2c00      	cmp	r4, #0
   1059c:	d01d      	beq.n	105da <__aeabi_fadd+0x20a>
   1059e:	28ff      	cmp	r0, #255	; 0xff
   105a0:	d022      	beq.n	105e8 <__aeabi_fadd+0x218>
   105a2:	2480      	movs	r4, #128	; 0x80
   105a4:	04e4      	lsls	r4, r4, #19
   105a6:	4252      	negs	r2, r2
   105a8:	4323      	orrs	r3, r4
   105aa:	2a1b      	cmp	r2, #27
   105ac:	dd00      	ble.n	105b0 <__aeabi_fadd+0x1e0>
   105ae:	e08a      	b.n	106c6 <__aeabi_fadd+0x2f6>
   105b0:	001c      	movs	r4, r3
   105b2:	2520      	movs	r5, #32
   105b4:	40d4      	lsrs	r4, r2
   105b6:	1aaa      	subs	r2, r5, r2
   105b8:	4093      	lsls	r3, r2
   105ba:	1e5a      	subs	r2, r3, #1
   105bc:	4193      	sbcs	r3, r2
   105be:	4323      	orrs	r3, r4
   105c0:	4662      	mov	r2, ip
   105c2:	0004      	movs	r4, r0
   105c4:	1ad3      	subs	r3, r2, r3
   105c6:	000d      	movs	r5, r1
   105c8:	e725      	b.n	10416 <__aeabi_fadd+0x46>
   105ca:	2e00      	cmp	r6, #0
   105cc:	d000      	beq.n	105d0 <__aeabi_fadd+0x200>
   105ce:	e726      	b.n	1041e <__aeabi_fadd+0x4e>
   105d0:	2200      	movs	r2, #0
   105d2:	2400      	movs	r4, #0
   105d4:	e7a9      	b.n	1052a <__aeabi_fadd+0x15a>
   105d6:	000c      	movs	r4, r1
   105d8:	e735      	b.n	10446 <__aeabi_fadd+0x76>
   105da:	2b00      	cmp	r3, #0
   105dc:	d04d      	beq.n	1067a <__aeabi_fadd+0x2aa>
   105de:	43d2      	mvns	r2, r2
   105e0:	2a00      	cmp	r2, #0
   105e2:	d0ed      	beq.n	105c0 <__aeabi_fadd+0x1f0>
   105e4:	28ff      	cmp	r0, #255	; 0xff
   105e6:	d1e0      	bne.n	105aa <__aeabi_fadd+0x1da>
   105e8:	4663      	mov	r3, ip
   105ea:	24ff      	movs	r4, #255	; 0xff
   105ec:	000d      	movs	r5, r1
   105ee:	e72a      	b.n	10446 <__aeabi_fadd+0x76>
   105f0:	29ff      	cmp	r1, #255	; 0xff
   105f2:	d00f      	beq.n	10614 <__aeabi_fadd+0x244>
   105f4:	0001      	movs	r1, r0
   105f6:	e773      	b.n	104e0 <__aeabi_fadd+0x110>
   105f8:	2b00      	cmp	r3, #0
   105fa:	d061      	beq.n	106c0 <__aeabi_fadd+0x2f0>
   105fc:	24ff      	movs	r4, #255	; 0xff
   105fe:	2f00      	cmp	r7, #0
   10600:	d100      	bne.n	10604 <__aeabi_fadd+0x234>
   10602:	e720      	b.n	10446 <__aeabi_fadd+0x76>
   10604:	2280      	movs	r2, #128	; 0x80
   10606:	4641      	mov	r1, r8
   10608:	03d2      	lsls	r2, r2, #15
   1060a:	4211      	tst	r1, r2
   1060c:	d002      	beq.n	10614 <__aeabi_fadd+0x244>
   1060e:	4216      	tst	r6, r2
   10610:	d100      	bne.n	10614 <__aeabi_fadd+0x244>
   10612:	003b      	movs	r3, r7
   10614:	24ff      	movs	r4, #255	; 0xff
   10616:	e716      	b.n	10446 <__aeabi_fadd+0x76>
   10618:	24ff      	movs	r4, #255	; 0xff
   1061a:	2300      	movs	r3, #0
   1061c:	e724      	b.n	10468 <__aeabi_fadd+0x98>
   1061e:	2c00      	cmp	r4, #0
   10620:	d1ea      	bne.n	105f8 <__aeabi_fadd+0x228>
   10622:	2b00      	cmp	r3, #0
   10624:	d058      	beq.n	106d8 <__aeabi_fadd+0x308>
   10626:	2f00      	cmp	r7, #0
   10628:	d100      	bne.n	1062c <__aeabi_fadd+0x25c>
   1062a:	e70c      	b.n	10446 <__aeabi_fadd+0x76>
   1062c:	4463      	add	r3, ip
   1062e:	015a      	lsls	r2, r3, #5
   10630:	d400      	bmi.n	10634 <__aeabi_fadd+0x264>
   10632:	e739      	b.n	104a8 <__aeabi_fadd+0xd8>
   10634:	4a2e      	ldr	r2, [pc, #184]	; (106f0 <__aeabi_fadd+0x320>)
   10636:	000c      	movs	r4, r1
   10638:	4013      	ands	r3, r2
   1063a:	e704      	b.n	10446 <__aeabi_fadd+0x76>
   1063c:	2101      	movs	r1, #1
   1063e:	e75c      	b.n	104fa <__aeabi_fadd+0x12a>
   10640:	2c00      	cmp	r4, #0
   10642:	d11e      	bne.n	10682 <__aeabi_fadd+0x2b2>
   10644:	2b00      	cmp	r3, #0
   10646:	d040      	beq.n	106ca <__aeabi_fadd+0x2fa>
   10648:	43c9      	mvns	r1, r1
   1064a:	2900      	cmp	r1, #0
   1064c:	d00b      	beq.n	10666 <__aeabi_fadd+0x296>
   1064e:	28ff      	cmp	r0, #255	; 0xff
   10650:	d036      	beq.n	106c0 <__aeabi_fadd+0x2f0>
   10652:	291b      	cmp	r1, #27
   10654:	dc47      	bgt.n	106e6 <__aeabi_fadd+0x316>
   10656:	001c      	movs	r4, r3
   10658:	2620      	movs	r6, #32
   1065a:	40cc      	lsrs	r4, r1
   1065c:	1a71      	subs	r1, r6, r1
   1065e:	408b      	lsls	r3, r1
   10660:	1e59      	subs	r1, r3, #1
   10662:	418b      	sbcs	r3, r1
   10664:	4323      	orrs	r3, r4
   10666:	4463      	add	r3, ip
   10668:	0004      	movs	r4, r0
   1066a:	e747      	b.n	104fc <__aeabi_fadd+0x12c>
   1066c:	2b00      	cmp	r3, #0
   1066e:	d118      	bne.n	106a2 <__aeabi_fadd+0x2d2>
   10670:	1e3b      	subs	r3, r7, #0
   10672:	d02d      	beq.n	106d0 <__aeabi_fadd+0x300>
   10674:	000d      	movs	r5, r1
   10676:	24ff      	movs	r4, #255	; 0xff
   10678:	e6e5      	b.n	10446 <__aeabi_fadd+0x76>
   1067a:	003b      	movs	r3, r7
   1067c:	0004      	movs	r4, r0
   1067e:	000d      	movs	r5, r1
   10680:	e6e1      	b.n	10446 <__aeabi_fadd+0x76>
   10682:	28ff      	cmp	r0, #255	; 0xff
   10684:	d01c      	beq.n	106c0 <__aeabi_fadd+0x2f0>
   10686:	2480      	movs	r4, #128	; 0x80
   10688:	04e4      	lsls	r4, r4, #19
   1068a:	4249      	negs	r1, r1
   1068c:	4323      	orrs	r3, r4
   1068e:	e7e0      	b.n	10652 <__aeabi_fadd+0x282>
   10690:	2f00      	cmp	r7, #0
   10692:	d100      	bne.n	10696 <__aeabi_fadd+0x2c6>
   10694:	e6d7      	b.n	10446 <__aeabi_fadd+0x76>
   10696:	1bde      	subs	r6, r3, r7
   10698:	0172      	lsls	r2, r6, #5
   1069a:	d51f      	bpl.n	106dc <__aeabi_fadd+0x30c>
   1069c:	1afb      	subs	r3, r7, r3
   1069e:	000d      	movs	r5, r1
   106a0:	e6d1      	b.n	10446 <__aeabi_fadd+0x76>
   106a2:	24ff      	movs	r4, #255	; 0xff
   106a4:	2f00      	cmp	r7, #0
   106a6:	d100      	bne.n	106aa <__aeabi_fadd+0x2da>
   106a8:	e6cd      	b.n	10446 <__aeabi_fadd+0x76>
   106aa:	2280      	movs	r2, #128	; 0x80
   106ac:	4640      	mov	r0, r8
   106ae:	03d2      	lsls	r2, r2, #15
   106b0:	4210      	tst	r0, r2
   106b2:	d0af      	beq.n	10614 <__aeabi_fadd+0x244>
   106b4:	4216      	tst	r6, r2
   106b6:	d1ad      	bne.n	10614 <__aeabi_fadd+0x244>
   106b8:	003b      	movs	r3, r7
   106ba:	000d      	movs	r5, r1
   106bc:	24ff      	movs	r4, #255	; 0xff
   106be:	e6c2      	b.n	10446 <__aeabi_fadd+0x76>
   106c0:	4663      	mov	r3, ip
   106c2:	24ff      	movs	r4, #255	; 0xff
   106c4:	e6bf      	b.n	10446 <__aeabi_fadd+0x76>
   106c6:	2301      	movs	r3, #1
   106c8:	e77a      	b.n	105c0 <__aeabi_fadd+0x1f0>
   106ca:	003b      	movs	r3, r7
   106cc:	0004      	movs	r4, r0
   106ce:	e6ba      	b.n	10446 <__aeabi_fadd+0x76>
   106d0:	2680      	movs	r6, #128	; 0x80
   106d2:	2200      	movs	r2, #0
   106d4:	03f6      	lsls	r6, r6, #15
   106d6:	e6f0      	b.n	104ba <__aeabi_fadd+0xea>
   106d8:	003b      	movs	r3, r7
   106da:	e6b4      	b.n	10446 <__aeabi_fadd+0x76>
   106dc:	1e33      	subs	r3, r6, #0
   106de:	d000      	beq.n	106e2 <__aeabi_fadd+0x312>
   106e0:	e6e2      	b.n	104a8 <__aeabi_fadd+0xd8>
   106e2:	2200      	movs	r2, #0
   106e4:	e721      	b.n	1052a <__aeabi_fadd+0x15a>
   106e6:	2301      	movs	r3, #1
   106e8:	e7bd      	b.n	10666 <__aeabi_fadd+0x296>
   106ea:	46c0      	nop			; (mov r8, r8)
   106ec:	7dffffff 	.word	0x7dffffff
   106f0:	fbffffff 	.word	0xfbffffff

000106f4 <__aeabi_fdiv>:
   106f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   106f6:	4657      	mov	r7, sl
   106f8:	464e      	mov	r6, r9
   106fa:	46de      	mov	lr, fp
   106fc:	4645      	mov	r5, r8
   106fe:	b5e0      	push	{r5, r6, r7, lr}
   10700:	0244      	lsls	r4, r0, #9
   10702:	0043      	lsls	r3, r0, #1
   10704:	0fc6      	lsrs	r6, r0, #31
   10706:	b083      	sub	sp, #12
   10708:	1c0f      	adds	r7, r1, #0
   1070a:	0a64      	lsrs	r4, r4, #9
   1070c:	0e1b      	lsrs	r3, r3, #24
   1070e:	46b2      	mov	sl, r6
   10710:	d053      	beq.n	107ba <__aeabi_fdiv+0xc6>
   10712:	2bff      	cmp	r3, #255	; 0xff
   10714:	d027      	beq.n	10766 <__aeabi_fdiv+0x72>
   10716:	2280      	movs	r2, #128	; 0x80
   10718:	00e4      	lsls	r4, r4, #3
   1071a:	04d2      	lsls	r2, r2, #19
   1071c:	4314      	orrs	r4, r2
   1071e:	227f      	movs	r2, #127	; 0x7f
   10720:	4252      	negs	r2, r2
   10722:	4690      	mov	r8, r2
   10724:	4498      	add	r8, r3
   10726:	2300      	movs	r3, #0
   10728:	4699      	mov	r9, r3
   1072a:	469b      	mov	fp, r3
   1072c:	027d      	lsls	r5, r7, #9
   1072e:	0078      	lsls	r0, r7, #1
   10730:	0ffb      	lsrs	r3, r7, #31
   10732:	0a6d      	lsrs	r5, r5, #9
   10734:	0e00      	lsrs	r0, r0, #24
   10736:	9300      	str	r3, [sp, #0]
   10738:	d024      	beq.n	10784 <__aeabi_fdiv+0x90>
   1073a:	28ff      	cmp	r0, #255	; 0xff
   1073c:	d046      	beq.n	107cc <__aeabi_fdiv+0xd8>
   1073e:	2380      	movs	r3, #128	; 0x80
   10740:	2100      	movs	r1, #0
   10742:	00ed      	lsls	r5, r5, #3
   10744:	04db      	lsls	r3, r3, #19
   10746:	431d      	orrs	r5, r3
   10748:	387f      	subs	r0, #127	; 0x7f
   1074a:	4647      	mov	r7, r8
   1074c:	1a38      	subs	r0, r7, r0
   1074e:	464f      	mov	r7, r9
   10750:	430f      	orrs	r7, r1
   10752:	00bf      	lsls	r7, r7, #2
   10754:	46b9      	mov	r9, r7
   10756:	0033      	movs	r3, r6
   10758:	9a00      	ldr	r2, [sp, #0]
   1075a:	4f87      	ldr	r7, [pc, #540]	; (10978 <__aeabi_fdiv+0x284>)
   1075c:	4053      	eors	r3, r2
   1075e:	464a      	mov	r2, r9
   10760:	58ba      	ldr	r2, [r7, r2]
   10762:	9301      	str	r3, [sp, #4]
   10764:	4697      	mov	pc, r2
   10766:	2c00      	cmp	r4, #0
   10768:	d14e      	bne.n	10808 <__aeabi_fdiv+0x114>
   1076a:	2308      	movs	r3, #8
   1076c:	4699      	mov	r9, r3
   1076e:	33f7      	adds	r3, #247	; 0xf7
   10770:	4698      	mov	r8, r3
   10772:	3bfd      	subs	r3, #253	; 0xfd
   10774:	469b      	mov	fp, r3
   10776:	027d      	lsls	r5, r7, #9
   10778:	0078      	lsls	r0, r7, #1
   1077a:	0ffb      	lsrs	r3, r7, #31
   1077c:	0a6d      	lsrs	r5, r5, #9
   1077e:	0e00      	lsrs	r0, r0, #24
   10780:	9300      	str	r3, [sp, #0]
   10782:	d1da      	bne.n	1073a <__aeabi_fdiv+0x46>
   10784:	2d00      	cmp	r5, #0
   10786:	d126      	bne.n	107d6 <__aeabi_fdiv+0xe2>
   10788:	2000      	movs	r0, #0
   1078a:	2101      	movs	r1, #1
   1078c:	0033      	movs	r3, r6
   1078e:	9a00      	ldr	r2, [sp, #0]
   10790:	4f7a      	ldr	r7, [pc, #488]	; (1097c <__aeabi_fdiv+0x288>)
   10792:	4053      	eors	r3, r2
   10794:	4642      	mov	r2, r8
   10796:	1a10      	subs	r0, r2, r0
   10798:	464a      	mov	r2, r9
   1079a:	430a      	orrs	r2, r1
   1079c:	0092      	lsls	r2, r2, #2
   1079e:	58ba      	ldr	r2, [r7, r2]
   107a0:	001d      	movs	r5, r3
   107a2:	4697      	mov	pc, r2
   107a4:	9b00      	ldr	r3, [sp, #0]
   107a6:	002c      	movs	r4, r5
   107a8:	469a      	mov	sl, r3
   107aa:	468b      	mov	fp, r1
   107ac:	465b      	mov	r3, fp
   107ae:	2b02      	cmp	r3, #2
   107b0:	d131      	bne.n	10816 <__aeabi_fdiv+0x122>
   107b2:	4653      	mov	r3, sl
   107b4:	21ff      	movs	r1, #255	; 0xff
   107b6:	2400      	movs	r4, #0
   107b8:	e038      	b.n	1082c <__aeabi_fdiv+0x138>
   107ba:	2c00      	cmp	r4, #0
   107bc:	d117      	bne.n	107ee <__aeabi_fdiv+0xfa>
   107be:	2304      	movs	r3, #4
   107c0:	4699      	mov	r9, r3
   107c2:	2300      	movs	r3, #0
   107c4:	4698      	mov	r8, r3
   107c6:	3301      	adds	r3, #1
   107c8:	469b      	mov	fp, r3
   107ca:	e7af      	b.n	1072c <__aeabi_fdiv+0x38>
   107cc:	20ff      	movs	r0, #255	; 0xff
   107ce:	2d00      	cmp	r5, #0
   107d0:	d10b      	bne.n	107ea <__aeabi_fdiv+0xf6>
   107d2:	2102      	movs	r1, #2
   107d4:	e7da      	b.n	1078c <__aeabi_fdiv+0x98>
   107d6:	0028      	movs	r0, r5
   107d8:	f7ff fc7c 	bl	100d4 <__clzsi2>
   107dc:	1f43      	subs	r3, r0, #5
   107de:	409d      	lsls	r5, r3
   107e0:	2376      	movs	r3, #118	; 0x76
   107e2:	425b      	negs	r3, r3
   107e4:	1a18      	subs	r0, r3, r0
   107e6:	2100      	movs	r1, #0
   107e8:	e7af      	b.n	1074a <__aeabi_fdiv+0x56>
   107ea:	2103      	movs	r1, #3
   107ec:	e7ad      	b.n	1074a <__aeabi_fdiv+0x56>
   107ee:	0020      	movs	r0, r4
   107f0:	f7ff fc70 	bl	100d4 <__clzsi2>
   107f4:	1f43      	subs	r3, r0, #5
   107f6:	409c      	lsls	r4, r3
   107f8:	2376      	movs	r3, #118	; 0x76
   107fa:	425b      	negs	r3, r3
   107fc:	1a1b      	subs	r3, r3, r0
   107fe:	4698      	mov	r8, r3
   10800:	2300      	movs	r3, #0
   10802:	4699      	mov	r9, r3
   10804:	469b      	mov	fp, r3
   10806:	e791      	b.n	1072c <__aeabi_fdiv+0x38>
   10808:	230c      	movs	r3, #12
   1080a:	4699      	mov	r9, r3
   1080c:	33f3      	adds	r3, #243	; 0xf3
   1080e:	4698      	mov	r8, r3
   10810:	3bfc      	subs	r3, #252	; 0xfc
   10812:	469b      	mov	fp, r3
   10814:	e78a      	b.n	1072c <__aeabi_fdiv+0x38>
   10816:	2b03      	cmp	r3, #3
   10818:	d100      	bne.n	1081c <__aeabi_fdiv+0x128>
   1081a:	e0a5      	b.n	10968 <__aeabi_fdiv+0x274>
   1081c:	4655      	mov	r5, sl
   1081e:	2b01      	cmp	r3, #1
   10820:	d000      	beq.n	10824 <__aeabi_fdiv+0x130>
   10822:	e081      	b.n	10928 <__aeabi_fdiv+0x234>
   10824:	2301      	movs	r3, #1
   10826:	2100      	movs	r1, #0
   10828:	2400      	movs	r4, #0
   1082a:	402b      	ands	r3, r5
   1082c:	0264      	lsls	r4, r4, #9
   1082e:	05c9      	lsls	r1, r1, #23
   10830:	0a60      	lsrs	r0, r4, #9
   10832:	07db      	lsls	r3, r3, #31
   10834:	4308      	orrs	r0, r1
   10836:	4318      	orrs	r0, r3
   10838:	b003      	add	sp, #12
   1083a:	bc3c      	pop	{r2, r3, r4, r5}
   1083c:	4690      	mov	r8, r2
   1083e:	4699      	mov	r9, r3
   10840:	46a2      	mov	sl, r4
   10842:	46ab      	mov	fp, r5
   10844:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10846:	2480      	movs	r4, #128	; 0x80
   10848:	2300      	movs	r3, #0
   1084a:	03e4      	lsls	r4, r4, #15
   1084c:	21ff      	movs	r1, #255	; 0xff
   1084e:	e7ed      	b.n	1082c <__aeabi_fdiv+0x138>
   10850:	21ff      	movs	r1, #255	; 0xff
   10852:	2400      	movs	r4, #0
   10854:	e7ea      	b.n	1082c <__aeabi_fdiv+0x138>
   10856:	2301      	movs	r3, #1
   10858:	1a59      	subs	r1, r3, r1
   1085a:	291b      	cmp	r1, #27
   1085c:	dd66      	ble.n	1092c <__aeabi_fdiv+0x238>
   1085e:	9a01      	ldr	r2, [sp, #4]
   10860:	4013      	ands	r3, r2
   10862:	2100      	movs	r1, #0
   10864:	2400      	movs	r4, #0
   10866:	e7e1      	b.n	1082c <__aeabi_fdiv+0x138>
   10868:	2380      	movs	r3, #128	; 0x80
   1086a:	03db      	lsls	r3, r3, #15
   1086c:	421c      	tst	r4, r3
   1086e:	d038      	beq.n	108e2 <__aeabi_fdiv+0x1ee>
   10870:	421d      	tst	r5, r3
   10872:	d051      	beq.n	10918 <__aeabi_fdiv+0x224>
   10874:	431c      	orrs	r4, r3
   10876:	0264      	lsls	r4, r4, #9
   10878:	0a64      	lsrs	r4, r4, #9
   1087a:	0033      	movs	r3, r6
   1087c:	21ff      	movs	r1, #255	; 0xff
   1087e:	e7d5      	b.n	1082c <__aeabi_fdiv+0x138>
   10880:	0163      	lsls	r3, r4, #5
   10882:	016c      	lsls	r4, r5, #5
   10884:	42a3      	cmp	r3, r4
   10886:	d23b      	bcs.n	10900 <__aeabi_fdiv+0x20c>
   10888:	261b      	movs	r6, #27
   1088a:	2100      	movs	r1, #0
   1088c:	3801      	subs	r0, #1
   1088e:	2501      	movs	r5, #1
   10890:	001f      	movs	r7, r3
   10892:	0049      	lsls	r1, r1, #1
   10894:	005b      	lsls	r3, r3, #1
   10896:	2f00      	cmp	r7, #0
   10898:	db01      	blt.n	1089e <__aeabi_fdiv+0x1aa>
   1089a:	429c      	cmp	r4, r3
   1089c:	d801      	bhi.n	108a2 <__aeabi_fdiv+0x1ae>
   1089e:	1b1b      	subs	r3, r3, r4
   108a0:	4329      	orrs	r1, r5
   108a2:	3e01      	subs	r6, #1
   108a4:	2e00      	cmp	r6, #0
   108a6:	d1f3      	bne.n	10890 <__aeabi_fdiv+0x19c>
   108a8:	001c      	movs	r4, r3
   108aa:	1e63      	subs	r3, r4, #1
   108ac:	419c      	sbcs	r4, r3
   108ae:	430c      	orrs	r4, r1
   108b0:	0001      	movs	r1, r0
   108b2:	317f      	adds	r1, #127	; 0x7f
   108b4:	2900      	cmp	r1, #0
   108b6:	ddce      	ble.n	10856 <__aeabi_fdiv+0x162>
   108b8:	0763      	lsls	r3, r4, #29
   108ba:	d004      	beq.n	108c6 <__aeabi_fdiv+0x1d2>
   108bc:	230f      	movs	r3, #15
   108be:	4023      	ands	r3, r4
   108c0:	2b04      	cmp	r3, #4
   108c2:	d000      	beq.n	108c6 <__aeabi_fdiv+0x1d2>
   108c4:	3404      	adds	r4, #4
   108c6:	0123      	lsls	r3, r4, #4
   108c8:	d503      	bpl.n	108d2 <__aeabi_fdiv+0x1de>
   108ca:	0001      	movs	r1, r0
   108cc:	4b2c      	ldr	r3, [pc, #176]	; (10980 <__aeabi_fdiv+0x28c>)
   108ce:	3180      	adds	r1, #128	; 0x80
   108d0:	401c      	ands	r4, r3
   108d2:	29fe      	cmp	r1, #254	; 0xfe
   108d4:	dd0d      	ble.n	108f2 <__aeabi_fdiv+0x1fe>
   108d6:	2301      	movs	r3, #1
   108d8:	9a01      	ldr	r2, [sp, #4]
   108da:	21ff      	movs	r1, #255	; 0xff
   108dc:	4013      	ands	r3, r2
   108de:	2400      	movs	r4, #0
   108e0:	e7a4      	b.n	1082c <__aeabi_fdiv+0x138>
   108e2:	2380      	movs	r3, #128	; 0x80
   108e4:	03db      	lsls	r3, r3, #15
   108e6:	431c      	orrs	r4, r3
   108e8:	0264      	lsls	r4, r4, #9
   108ea:	0a64      	lsrs	r4, r4, #9
   108ec:	0033      	movs	r3, r6
   108ee:	21ff      	movs	r1, #255	; 0xff
   108f0:	e79c      	b.n	1082c <__aeabi_fdiv+0x138>
   108f2:	2301      	movs	r3, #1
   108f4:	9a01      	ldr	r2, [sp, #4]
   108f6:	01a4      	lsls	r4, r4, #6
   108f8:	0a64      	lsrs	r4, r4, #9
   108fa:	b2c9      	uxtb	r1, r1
   108fc:	4013      	ands	r3, r2
   108fe:	e795      	b.n	1082c <__aeabi_fdiv+0x138>
   10900:	1b1b      	subs	r3, r3, r4
   10902:	261a      	movs	r6, #26
   10904:	2101      	movs	r1, #1
   10906:	e7c2      	b.n	1088e <__aeabi_fdiv+0x19a>
   10908:	9b00      	ldr	r3, [sp, #0]
   1090a:	468b      	mov	fp, r1
   1090c:	469a      	mov	sl, r3
   1090e:	2400      	movs	r4, #0
   10910:	e74c      	b.n	107ac <__aeabi_fdiv+0xb8>
   10912:	0263      	lsls	r3, r4, #9
   10914:	d5e5      	bpl.n	108e2 <__aeabi_fdiv+0x1ee>
   10916:	2500      	movs	r5, #0
   10918:	2480      	movs	r4, #128	; 0x80
   1091a:	03e4      	lsls	r4, r4, #15
   1091c:	432c      	orrs	r4, r5
   1091e:	0264      	lsls	r4, r4, #9
   10920:	0a64      	lsrs	r4, r4, #9
   10922:	9b00      	ldr	r3, [sp, #0]
   10924:	21ff      	movs	r1, #255	; 0xff
   10926:	e781      	b.n	1082c <__aeabi_fdiv+0x138>
   10928:	9501      	str	r5, [sp, #4]
   1092a:	e7c1      	b.n	108b0 <__aeabi_fdiv+0x1bc>
   1092c:	0023      	movs	r3, r4
   1092e:	2020      	movs	r0, #32
   10930:	40cb      	lsrs	r3, r1
   10932:	1a41      	subs	r1, r0, r1
   10934:	408c      	lsls	r4, r1
   10936:	1e61      	subs	r1, r4, #1
   10938:	418c      	sbcs	r4, r1
   1093a:	431c      	orrs	r4, r3
   1093c:	0763      	lsls	r3, r4, #29
   1093e:	d004      	beq.n	1094a <__aeabi_fdiv+0x256>
   10940:	230f      	movs	r3, #15
   10942:	4023      	ands	r3, r4
   10944:	2b04      	cmp	r3, #4
   10946:	d000      	beq.n	1094a <__aeabi_fdiv+0x256>
   10948:	3404      	adds	r4, #4
   1094a:	0163      	lsls	r3, r4, #5
   1094c:	d505      	bpl.n	1095a <__aeabi_fdiv+0x266>
   1094e:	2301      	movs	r3, #1
   10950:	9a01      	ldr	r2, [sp, #4]
   10952:	2101      	movs	r1, #1
   10954:	4013      	ands	r3, r2
   10956:	2400      	movs	r4, #0
   10958:	e768      	b.n	1082c <__aeabi_fdiv+0x138>
   1095a:	2301      	movs	r3, #1
   1095c:	9a01      	ldr	r2, [sp, #4]
   1095e:	01a4      	lsls	r4, r4, #6
   10960:	0a64      	lsrs	r4, r4, #9
   10962:	4013      	ands	r3, r2
   10964:	2100      	movs	r1, #0
   10966:	e761      	b.n	1082c <__aeabi_fdiv+0x138>
   10968:	2380      	movs	r3, #128	; 0x80
   1096a:	03db      	lsls	r3, r3, #15
   1096c:	431c      	orrs	r4, r3
   1096e:	0264      	lsls	r4, r4, #9
   10970:	0a64      	lsrs	r4, r4, #9
   10972:	4653      	mov	r3, sl
   10974:	21ff      	movs	r1, #255	; 0xff
   10976:	e759      	b.n	1082c <__aeabi_fdiv+0x138>
   10978:	00013b68 	.word	0x00013b68
   1097c:	00013ba8 	.word	0x00013ba8
   10980:	f7ffffff 	.word	0xf7ffffff

00010984 <__eqsf2>:
   10984:	b570      	push	{r4, r5, r6, lr}
   10986:	0042      	lsls	r2, r0, #1
   10988:	0245      	lsls	r5, r0, #9
   1098a:	024e      	lsls	r6, r1, #9
   1098c:	004c      	lsls	r4, r1, #1
   1098e:	0fc3      	lsrs	r3, r0, #31
   10990:	0a6d      	lsrs	r5, r5, #9
   10992:	0e12      	lsrs	r2, r2, #24
   10994:	0a76      	lsrs	r6, r6, #9
   10996:	0e24      	lsrs	r4, r4, #24
   10998:	0fc9      	lsrs	r1, r1, #31
   1099a:	2001      	movs	r0, #1
   1099c:	2aff      	cmp	r2, #255	; 0xff
   1099e:	d006      	beq.n	109ae <__eqsf2+0x2a>
   109a0:	2cff      	cmp	r4, #255	; 0xff
   109a2:	d003      	beq.n	109ac <__eqsf2+0x28>
   109a4:	42a2      	cmp	r2, r4
   109a6:	d101      	bne.n	109ac <__eqsf2+0x28>
   109a8:	42b5      	cmp	r5, r6
   109aa:	d006      	beq.n	109ba <__eqsf2+0x36>
   109ac:	bd70      	pop	{r4, r5, r6, pc}
   109ae:	2d00      	cmp	r5, #0
   109b0:	d1fc      	bne.n	109ac <__eqsf2+0x28>
   109b2:	2cff      	cmp	r4, #255	; 0xff
   109b4:	d1fa      	bne.n	109ac <__eqsf2+0x28>
   109b6:	2e00      	cmp	r6, #0
   109b8:	d1f8      	bne.n	109ac <__eqsf2+0x28>
   109ba:	428b      	cmp	r3, r1
   109bc:	d006      	beq.n	109cc <__eqsf2+0x48>
   109be:	2001      	movs	r0, #1
   109c0:	2a00      	cmp	r2, #0
   109c2:	d1f3      	bne.n	109ac <__eqsf2+0x28>
   109c4:	0028      	movs	r0, r5
   109c6:	1e45      	subs	r5, r0, #1
   109c8:	41a8      	sbcs	r0, r5
   109ca:	e7ef      	b.n	109ac <__eqsf2+0x28>
   109cc:	2000      	movs	r0, #0
   109ce:	e7ed      	b.n	109ac <__eqsf2+0x28>

000109d0 <__gesf2>:
   109d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   109d2:	0042      	lsls	r2, r0, #1
   109d4:	0245      	lsls	r5, r0, #9
   109d6:	024c      	lsls	r4, r1, #9
   109d8:	0fc3      	lsrs	r3, r0, #31
   109da:	0048      	lsls	r0, r1, #1
   109dc:	0a6d      	lsrs	r5, r5, #9
   109de:	0e12      	lsrs	r2, r2, #24
   109e0:	0a64      	lsrs	r4, r4, #9
   109e2:	0e00      	lsrs	r0, r0, #24
   109e4:	0fc9      	lsrs	r1, r1, #31
   109e6:	2aff      	cmp	r2, #255	; 0xff
   109e8:	d01e      	beq.n	10a28 <__gesf2+0x58>
   109ea:	28ff      	cmp	r0, #255	; 0xff
   109ec:	d021      	beq.n	10a32 <__gesf2+0x62>
   109ee:	2a00      	cmp	r2, #0
   109f0:	d10a      	bne.n	10a08 <__gesf2+0x38>
   109f2:	426e      	negs	r6, r5
   109f4:	416e      	adcs	r6, r5
   109f6:	b2f6      	uxtb	r6, r6
   109f8:	2800      	cmp	r0, #0
   109fa:	d10f      	bne.n	10a1c <__gesf2+0x4c>
   109fc:	2c00      	cmp	r4, #0
   109fe:	d10d      	bne.n	10a1c <__gesf2+0x4c>
   10a00:	2000      	movs	r0, #0
   10a02:	2d00      	cmp	r5, #0
   10a04:	d009      	beq.n	10a1a <__gesf2+0x4a>
   10a06:	e005      	b.n	10a14 <__gesf2+0x44>
   10a08:	2800      	cmp	r0, #0
   10a0a:	d101      	bne.n	10a10 <__gesf2+0x40>
   10a0c:	2c00      	cmp	r4, #0
   10a0e:	d001      	beq.n	10a14 <__gesf2+0x44>
   10a10:	428b      	cmp	r3, r1
   10a12:	d011      	beq.n	10a38 <__gesf2+0x68>
   10a14:	2101      	movs	r1, #1
   10a16:	4258      	negs	r0, r3
   10a18:	4308      	orrs	r0, r1
   10a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a1c:	2e00      	cmp	r6, #0
   10a1e:	d0f7      	beq.n	10a10 <__gesf2+0x40>
   10a20:	2001      	movs	r0, #1
   10a22:	3901      	subs	r1, #1
   10a24:	4308      	orrs	r0, r1
   10a26:	e7f8      	b.n	10a1a <__gesf2+0x4a>
   10a28:	2d00      	cmp	r5, #0
   10a2a:	d0de      	beq.n	109ea <__gesf2+0x1a>
   10a2c:	2002      	movs	r0, #2
   10a2e:	4240      	negs	r0, r0
   10a30:	e7f3      	b.n	10a1a <__gesf2+0x4a>
   10a32:	2c00      	cmp	r4, #0
   10a34:	d0db      	beq.n	109ee <__gesf2+0x1e>
   10a36:	e7f9      	b.n	10a2c <__gesf2+0x5c>
   10a38:	4282      	cmp	r2, r0
   10a3a:	dceb      	bgt.n	10a14 <__gesf2+0x44>
   10a3c:	db04      	blt.n	10a48 <__gesf2+0x78>
   10a3e:	42a5      	cmp	r5, r4
   10a40:	d8e8      	bhi.n	10a14 <__gesf2+0x44>
   10a42:	2000      	movs	r0, #0
   10a44:	42a5      	cmp	r5, r4
   10a46:	d2e8      	bcs.n	10a1a <__gesf2+0x4a>
   10a48:	2101      	movs	r1, #1
   10a4a:	1e58      	subs	r0, r3, #1
   10a4c:	4308      	orrs	r0, r1
   10a4e:	e7e4      	b.n	10a1a <__gesf2+0x4a>

00010a50 <__lesf2>:
   10a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a52:	0042      	lsls	r2, r0, #1
   10a54:	024d      	lsls	r5, r1, #9
   10a56:	004c      	lsls	r4, r1, #1
   10a58:	0246      	lsls	r6, r0, #9
   10a5a:	0a76      	lsrs	r6, r6, #9
   10a5c:	0e12      	lsrs	r2, r2, #24
   10a5e:	0fc3      	lsrs	r3, r0, #31
   10a60:	0a6d      	lsrs	r5, r5, #9
   10a62:	0e24      	lsrs	r4, r4, #24
   10a64:	0fc9      	lsrs	r1, r1, #31
   10a66:	2aff      	cmp	r2, #255	; 0xff
   10a68:	d016      	beq.n	10a98 <__lesf2+0x48>
   10a6a:	2cff      	cmp	r4, #255	; 0xff
   10a6c:	d018      	beq.n	10aa0 <__lesf2+0x50>
   10a6e:	2a00      	cmp	r2, #0
   10a70:	d10a      	bne.n	10a88 <__lesf2+0x38>
   10a72:	4270      	negs	r0, r6
   10a74:	4170      	adcs	r0, r6
   10a76:	b2c0      	uxtb	r0, r0
   10a78:	2c00      	cmp	r4, #0
   10a7a:	d015      	beq.n	10aa8 <__lesf2+0x58>
   10a7c:	2800      	cmp	r0, #0
   10a7e:	d005      	beq.n	10a8c <__lesf2+0x3c>
   10a80:	2001      	movs	r0, #1
   10a82:	3901      	subs	r1, #1
   10a84:	4308      	orrs	r0, r1
   10a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a88:	2c00      	cmp	r4, #0
   10a8a:	d013      	beq.n	10ab4 <__lesf2+0x64>
   10a8c:	4299      	cmp	r1, r3
   10a8e:	d014      	beq.n	10aba <__lesf2+0x6a>
   10a90:	2001      	movs	r0, #1
   10a92:	425b      	negs	r3, r3
   10a94:	4318      	orrs	r0, r3
   10a96:	e7f6      	b.n	10a86 <__lesf2+0x36>
   10a98:	2002      	movs	r0, #2
   10a9a:	2e00      	cmp	r6, #0
   10a9c:	d1f3      	bne.n	10a86 <__lesf2+0x36>
   10a9e:	e7e4      	b.n	10a6a <__lesf2+0x1a>
   10aa0:	2002      	movs	r0, #2
   10aa2:	2d00      	cmp	r5, #0
   10aa4:	d1ef      	bne.n	10a86 <__lesf2+0x36>
   10aa6:	e7e2      	b.n	10a6e <__lesf2+0x1e>
   10aa8:	2d00      	cmp	r5, #0
   10aaa:	d1e7      	bne.n	10a7c <__lesf2+0x2c>
   10aac:	2000      	movs	r0, #0
   10aae:	2e00      	cmp	r6, #0
   10ab0:	d0e9      	beq.n	10a86 <__lesf2+0x36>
   10ab2:	e7ed      	b.n	10a90 <__lesf2+0x40>
   10ab4:	2d00      	cmp	r5, #0
   10ab6:	d1e9      	bne.n	10a8c <__lesf2+0x3c>
   10ab8:	e7ea      	b.n	10a90 <__lesf2+0x40>
   10aba:	42a2      	cmp	r2, r4
   10abc:	dc06      	bgt.n	10acc <__lesf2+0x7c>
   10abe:	dbdf      	blt.n	10a80 <__lesf2+0x30>
   10ac0:	42ae      	cmp	r6, r5
   10ac2:	d803      	bhi.n	10acc <__lesf2+0x7c>
   10ac4:	2000      	movs	r0, #0
   10ac6:	42ae      	cmp	r6, r5
   10ac8:	d3da      	bcc.n	10a80 <__lesf2+0x30>
   10aca:	e7dc      	b.n	10a86 <__lesf2+0x36>
   10acc:	2001      	movs	r0, #1
   10ace:	4249      	negs	r1, r1
   10ad0:	4308      	orrs	r0, r1
   10ad2:	e7d8      	b.n	10a86 <__lesf2+0x36>

00010ad4 <__aeabi_fmul>:
   10ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ad6:	4657      	mov	r7, sl
   10ad8:	464e      	mov	r6, r9
   10ada:	4645      	mov	r5, r8
   10adc:	46de      	mov	lr, fp
   10ade:	b5e0      	push	{r5, r6, r7, lr}
   10ae0:	0247      	lsls	r7, r0, #9
   10ae2:	0046      	lsls	r6, r0, #1
   10ae4:	4688      	mov	r8, r1
   10ae6:	0a7f      	lsrs	r7, r7, #9
   10ae8:	0e36      	lsrs	r6, r6, #24
   10aea:	0fc4      	lsrs	r4, r0, #31
   10aec:	2e00      	cmp	r6, #0
   10aee:	d047      	beq.n	10b80 <__aeabi_fmul+0xac>
   10af0:	2eff      	cmp	r6, #255	; 0xff
   10af2:	d024      	beq.n	10b3e <__aeabi_fmul+0x6a>
   10af4:	00fb      	lsls	r3, r7, #3
   10af6:	2780      	movs	r7, #128	; 0x80
   10af8:	04ff      	lsls	r7, r7, #19
   10afa:	431f      	orrs	r7, r3
   10afc:	2300      	movs	r3, #0
   10afe:	4699      	mov	r9, r3
   10b00:	469a      	mov	sl, r3
   10b02:	3e7f      	subs	r6, #127	; 0x7f
   10b04:	4643      	mov	r3, r8
   10b06:	025d      	lsls	r5, r3, #9
   10b08:	0058      	lsls	r0, r3, #1
   10b0a:	0fdb      	lsrs	r3, r3, #31
   10b0c:	0a6d      	lsrs	r5, r5, #9
   10b0e:	0e00      	lsrs	r0, r0, #24
   10b10:	4698      	mov	r8, r3
   10b12:	d043      	beq.n	10b9c <__aeabi_fmul+0xc8>
   10b14:	28ff      	cmp	r0, #255	; 0xff
   10b16:	d03b      	beq.n	10b90 <__aeabi_fmul+0xbc>
   10b18:	00eb      	lsls	r3, r5, #3
   10b1a:	2580      	movs	r5, #128	; 0x80
   10b1c:	2200      	movs	r2, #0
   10b1e:	04ed      	lsls	r5, r5, #19
   10b20:	431d      	orrs	r5, r3
   10b22:	387f      	subs	r0, #127	; 0x7f
   10b24:	1836      	adds	r6, r6, r0
   10b26:	1c73      	adds	r3, r6, #1
   10b28:	4641      	mov	r1, r8
   10b2a:	469b      	mov	fp, r3
   10b2c:	464b      	mov	r3, r9
   10b2e:	4061      	eors	r1, r4
   10b30:	4313      	orrs	r3, r2
   10b32:	2b0f      	cmp	r3, #15
   10b34:	d864      	bhi.n	10c00 <__aeabi_fmul+0x12c>
   10b36:	4875      	ldr	r0, [pc, #468]	; (10d0c <__aeabi_fmul+0x238>)
   10b38:	009b      	lsls	r3, r3, #2
   10b3a:	58c3      	ldr	r3, [r0, r3]
   10b3c:	469f      	mov	pc, r3
   10b3e:	2f00      	cmp	r7, #0
   10b40:	d142      	bne.n	10bc8 <__aeabi_fmul+0xf4>
   10b42:	2308      	movs	r3, #8
   10b44:	4699      	mov	r9, r3
   10b46:	3b06      	subs	r3, #6
   10b48:	26ff      	movs	r6, #255	; 0xff
   10b4a:	469a      	mov	sl, r3
   10b4c:	e7da      	b.n	10b04 <__aeabi_fmul+0x30>
   10b4e:	4641      	mov	r1, r8
   10b50:	2a02      	cmp	r2, #2
   10b52:	d028      	beq.n	10ba6 <__aeabi_fmul+0xd2>
   10b54:	2a03      	cmp	r2, #3
   10b56:	d100      	bne.n	10b5a <__aeabi_fmul+0x86>
   10b58:	e0ce      	b.n	10cf8 <__aeabi_fmul+0x224>
   10b5a:	2a01      	cmp	r2, #1
   10b5c:	d000      	beq.n	10b60 <__aeabi_fmul+0x8c>
   10b5e:	e0ac      	b.n	10cba <__aeabi_fmul+0x1e6>
   10b60:	4011      	ands	r1, r2
   10b62:	2000      	movs	r0, #0
   10b64:	2200      	movs	r2, #0
   10b66:	b2cc      	uxtb	r4, r1
   10b68:	0240      	lsls	r0, r0, #9
   10b6a:	05d2      	lsls	r2, r2, #23
   10b6c:	0a40      	lsrs	r0, r0, #9
   10b6e:	07e4      	lsls	r4, r4, #31
   10b70:	4310      	orrs	r0, r2
   10b72:	4320      	orrs	r0, r4
   10b74:	bc3c      	pop	{r2, r3, r4, r5}
   10b76:	4690      	mov	r8, r2
   10b78:	4699      	mov	r9, r3
   10b7a:	46a2      	mov	sl, r4
   10b7c:	46ab      	mov	fp, r5
   10b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b80:	2f00      	cmp	r7, #0
   10b82:	d115      	bne.n	10bb0 <__aeabi_fmul+0xdc>
   10b84:	2304      	movs	r3, #4
   10b86:	4699      	mov	r9, r3
   10b88:	3b03      	subs	r3, #3
   10b8a:	2600      	movs	r6, #0
   10b8c:	469a      	mov	sl, r3
   10b8e:	e7b9      	b.n	10b04 <__aeabi_fmul+0x30>
   10b90:	20ff      	movs	r0, #255	; 0xff
   10b92:	2202      	movs	r2, #2
   10b94:	2d00      	cmp	r5, #0
   10b96:	d0c5      	beq.n	10b24 <__aeabi_fmul+0x50>
   10b98:	2203      	movs	r2, #3
   10b9a:	e7c3      	b.n	10b24 <__aeabi_fmul+0x50>
   10b9c:	2d00      	cmp	r5, #0
   10b9e:	d119      	bne.n	10bd4 <__aeabi_fmul+0x100>
   10ba0:	2000      	movs	r0, #0
   10ba2:	2201      	movs	r2, #1
   10ba4:	e7be      	b.n	10b24 <__aeabi_fmul+0x50>
   10ba6:	2401      	movs	r4, #1
   10ba8:	22ff      	movs	r2, #255	; 0xff
   10baa:	400c      	ands	r4, r1
   10bac:	2000      	movs	r0, #0
   10bae:	e7db      	b.n	10b68 <__aeabi_fmul+0x94>
   10bb0:	0038      	movs	r0, r7
   10bb2:	f7ff fa8f 	bl	100d4 <__clzsi2>
   10bb6:	2676      	movs	r6, #118	; 0x76
   10bb8:	1f43      	subs	r3, r0, #5
   10bba:	409f      	lsls	r7, r3
   10bbc:	2300      	movs	r3, #0
   10bbe:	4276      	negs	r6, r6
   10bc0:	1a36      	subs	r6, r6, r0
   10bc2:	4699      	mov	r9, r3
   10bc4:	469a      	mov	sl, r3
   10bc6:	e79d      	b.n	10b04 <__aeabi_fmul+0x30>
   10bc8:	230c      	movs	r3, #12
   10bca:	4699      	mov	r9, r3
   10bcc:	3b09      	subs	r3, #9
   10bce:	26ff      	movs	r6, #255	; 0xff
   10bd0:	469a      	mov	sl, r3
   10bd2:	e797      	b.n	10b04 <__aeabi_fmul+0x30>
   10bd4:	0028      	movs	r0, r5
   10bd6:	f7ff fa7d 	bl	100d4 <__clzsi2>
   10bda:	1f43      	subs	r3, r0, #5
   10bdc:	409d      	lsls	r5, r3
   10bde:	2376      	movs	r3, #118	; 0x76
   10be0:	425b      	negs	r3, r3
   10be2:	1a18      	subs	r0, r3, r0
   10be4:	2200      	movs	r2, #0
   10be6:	e79d      	b.n	10b24 <__aeabi_fmul+0x50>
   10be8:	2080      	movs	r0, #128	; 0x80
   10bea:	2400      	movs	r4, #0
   10bec:	03c0      	lsls	r0, r0, #15
   10bee:	22ff      	movs	r2, #255	; 0xff
   10bf0:	e7ba      	b.n	10b68 <__aeabi_fmul+0x94>
   10bf2:	003d      	movs	r5, r7
   10bf4:	4652      	mov	r2, sl
   10bf6:	e7ab      	b.n	10b50 <__aeabi_fmul+0x7c>
   10bf8:	003d      	movs	r5, r7
   10bfa:	0021      	movs	r1, r4
   10bfc:	4652      	mov	r2, sl
   10bfe:	e7a7      	b.n	10b50 <__aeabi_fmul+0x7c>
   10c00:	0c3b      	lsrs	r3, r7, #16
   10c02:	469c      	mov	ip, r3
   10c04:	042a      	lsls	r2, r5, #16
   10c06:	0c12      	lsrs	r2, r2, #16
   10c08:	0c2b      	lsrs	r3, r5, #16
   10c0a:	0014      	movs	r4, r2
   10c0c:	4660      	mov	r0, ip
   10c0e:	4665      	mov	r5, ip
   10c10:	043f      	lsls	r7, r7, #16
   10c12:	0c3f      	lsrs	r7, r7, #16
   10c14:	437c      	muls	r4, r7
   10c16:	4342      	muls	r2, r0
   10c18:	435d      	muls	r5, r3
   10c1a:	437b      	muls	r3, r7
   10c1c:	0c27      	lsrs	r7, r4, #16
   10c1e:	189b      	adds	r3, r3, r2
   10c20:	18ff      	adds	r7, r7, r3
   10c22:	42ba      	cmp	r2, r7
   10c24:	d903      	bls.n	10c2e <__aeabi_fmul+0x15a>
   10c26:	2380      	movs	r3, #128	; 0x80
   10c28:	025b      	lsls	r3, r3, #9
   10c2a:	469c      	mov	ip, r3
   10c2c:	4465      	add	r5, ip
   10c2e:	0424      	lsls	r4, r4, #16
   10c30:	043a      	lsls	r2, r7, #16
   10c32:	0c24      	lsrs	r4, r4, #16
   10c34:	1912      	adds	r2, r2, r4
   10c36:	0193      	lsls	r3, r2, #6
   10c38:	1e5c      	subs	r4, r3, #1
   10c3a:	41a3      	sbcs	r3, r4
   10c3c:	0c3f      	lsrs	r7, r7, #16
   10c3e:	0e92      	lsrs	r2, r2, #26
   10c40:	197d      	adds	r5, r7, r5
   10c42:	431a      	orrs	r2, r3
   10c44:	01ad      	lsls	r5, r5, #6
   10c46:	4315      	orrs	r5, r2
   10c48:	012b      	lsls	r3, r5, #4
   10c4a:	d504      	bpl.n	10c56 <__aeabi_fmul+0x182>
   10c4c:	2301      	movs	r3, #1
   10c4e:	465e      	mov	r6, fp
   10c50:	086a      	lsrs	r2, r5, #1
   10c52:	401d      	ands	r5, r3
   10c54:	4315      	orrs	r5, r2
   10c56:	0032      	movs	r2, r6
   10c58:	327f      	adds	r2, #127	; 0x7f
   10c5a:	2a00      	cmp	r2, #0
   10c5c:	dd25      	ble.n	10caa <__aeabi_fmul+0x1d6>
   10c5e:	076b      	lsls	r3, r5, #29
   10c60:	d004      	beq.n	10c6c <__aeabi_fmul+0x198>
   10c62:	230f      	movs	r3, #15
   10c64:	402b      	ands	r3, r5
   10c66:	2b04      	cmp	r3, #4
   10c68:	d000      	beq.n	10c6c <__aeabi_fmul+0x198>
   10c6a:	3504      	adds	r5, #4
   10c6c:	012b      	lsls	r3, r5, #4
   10c6e:	d503      	bpl.n	10c78 <__aeabi_fmul+0x1a4>
   10c70:	0032      	movs	r2, r6
   10c72:	4b27      	ldr	r3, [pc, #156]	; (10d10 <__aeabi_fmul+0x23c>)
   10c74:	3280      	adds	r2, #128	; 0x80
   10c76:	401d      	ands	r5, r3
   10c78:	2afe      	cmp	r2, #254	; 0xfe
   10c7a:	dc94      	bgt.n	10ba6 <__aeabi_fmul+0xd2>
   10c7c:	2401      	movs	r4, #1
   10c7e:	01a8      	lsls	r0, r5, #6
   10c80:	0a40      	lsrs	r0, r0, #9
   10c82:	b2d2      	uxtb	r2, r2
   10c84:	400c      	ands	r4, r1
   10c86:	e76f      	b.n	10b68 <__aeabi_fmul+0x94>
   10c88:	2080      	movs	r0, #128	; 0x80
   10c8a:	03c0      	lsls	r0, r0, #15
   10c8c:	4207      	tst	r7, r0
   10c8e:	d007      	beq.n	10ca0 <__aeabi_fmul+0x1cc>
   10c90:	4205      	tst	r5, r0
   10c92:	d105      	bne.n	10ca0 <__aeabi_fmul+0x1cc>
   10c94:	4328      	orrs	r0, r5
   10c96:	0240      	lsls	r0, r0, #9
   10c98:	0a40      	lsrs	r0, r0, #9
   10c9a:	4644      	mov	r4, r8
   10c9c:	22ff      	movs	r2, #255	; 0xff
   10c9e:	e763      	b.n	10b68 <__aeabi_fmul+0x94>
   10ca0:	4338      	orrs	r0, r7
   10ca2:	0240      	lsls	r0, r0, #9
   10ca4:	0a40      	lsrs	r0, r0, #9
   10ca6:	22ff      	movs	r2, #255	; 0xff
   10ca8:	e75e      	b.n	10b68 <__aeabi_fmul+0x94>
   10caa:	2401      	movs	r4, #1
   10cac:	1aa3      	subs	r3, r4, r2
   10cae:	2b1b      	cmp	r3, #27
   10cb0:	dd05      	ble.n	10cbe <__aeabi_fmul+0x1ea>
   10cb2:	400c      	ands	r4, r1
   10cb4:	2200      	movs	r2, #0
   10cb6:	2000      	movs	r0, #0
   10cb8:	e756      	b.n	10b68 <__aeabi_fmul+0x94>
   10cba:	465e      	mov	r6, fp
   10cbc:	e7cb      	b.n	10c56 <__aeabi_fmul+0x182>
   10cbe:	002a      	movs	r2, r5
   10cc0:	2020      	movs	r0, #32
   10cc2:	40da      	lsrs	r2, r3
   10cc4:	1ac3      	subs	r3, r0, r3
   10cc6:	409d      	lsls	r5, r3
   10cc8:	002b      	movs	r3, r5
   10cca:	1e5d      	subs	r5, r3, #1
   10ccc:	41ab      	sbcs	r3, r5
   10cce:	4313      	orrs	r3, r2
   10cd0:	075a      	lsls	r2, r3, #29
   10cd2:	d004      	beq.n	10cde <__aeabi_fmul+0x20a>
   10cd4:	220f      	movs	r2, #15
   10cd6:	401a      	ands	r2, r3
   10cd8:	2a04      	cmp	r2, #4
   10cda:	d000      	beq.n	10cde <__aeabi_fmul+0x20a>
   10cdc:	3304      	adds	r3, #4
   10cde:	015a      	lsls	r2, r3, #5
   10ce0:	d504      	bpl.n	10cec <__aeabi_fmul+0x218>
   10ce2:	2401      	movs	r4, #1
   10ce4:	2201      	movs	r2, #1
   10ce6:	400c      	ands	r4, r1
   10ce8:	2000      	movs	r0, #0
   10cea:	e73d      	b.n	10b68 <__aeabi_fmul+0x94>
   10cec:	2401      	movs	r4, #1
   10cee:	019b      	lsls	r3, r3, #6
   10cf0:	0a58      	lsrs	r0, r3, #9
   10cf2:	400c      	ands	r4, r1
   10cf4:	2200      	movs	r2, #0
   10cf6:	e737      	b.n	10b68 <__aeabi_fmul+0x94>
   10cf8:	2080      	movs	r0, #128	; 0x80
   10cfa:	2401      	movs	r4, #1
   10cfc:	03c0      	lsls	r0, r0, #15
   10cfe:	4328      	orrs	r0, r5
   10d00:	0240      	lsls	r0, r0, #9
   10d02:	0a40      	lsrs	r0, r0, #9
   10d04:	400c      	ands	r4, r1
   10d06:	22ff      	movs	r2, #255	; 0xff
   10d08:	e72e      	b.n	10b68 <__aeabi_fmul+0x94>
   10d0a:	46c0      	nop			; (mov r8, r8)
   10d0c:	00013be8 	.word	0x00013be8
   10d10:	f7ffffff 	.word	0xf7ffffff

00010d14 <__aeabi_fsub>:
   10d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d16:	464f      	mov	r7, r9
   10d18:	46d6      	mov	lr, sl
   10d1a:	4646      	mov	r6, r8
   10d1c:	0044      	lsls	r4, r0, #1
   10d1e:	b5c0      	push	{r6, r7, lr}
   10d20:	0fc2      	lsrs	r2, r0, #31
   10d22:	0247      	lsls	r7, r0, #9
   10d24:	0248      	lsls	r0, r1, #9
   10d26:	0a40      	lsrs	r0, r0, #9
   10d28:	4684      	mov	ip, r0
   10d2a:	4666      	mov	r6, ip
   10d2c:	0a7b      	lsrs	r3, r7, #9
   10d2e:	0048      	lsls	r0, r1, #1
   10d30:	0fc9      	lsrs	r1, r1, #31
   10d32:	469a      	mov	sl, r3
   10d34:	0e24      	lsrs	r4, r4, #24
   10d36:	0015      	movs	r5, r2
   10d38:	00db      	lsls	r3, r3, #3
   10d3a:	0e00      	lsrs	r0, r0, #24
   10d3c:	4689      	mov	r9, r1
   10d3e:	00f6      	lsls	r6, r6, #3
   10d40:	28ff      	cmp	r0, #255	; 0xff
   10d42:	d100      	bne.n	10d46 <__aeabi_fsub+0x32>
   10d44:	e08f      	b.n	10e66 <__aeabi_fsub+0x152>
   10d46:	2101      	movs	r1, #1
   10d48:	464f      	mov	r7, r9
   10d4a:	404f      	eors	r7, r1
   10d4c:	0039      	movs	r1, r7
   10d4e:	4291      	cmp	r1, r2
   10d50:	d066      	beq.n	10e20 <__aeabi_fsub+0x10c>
   10d52:	1a22      	subs	r2, r4, r0
   10d54:	2a00      	cmp	r2, #0
   10d56:	dc00      	bgt.n	10d5a <__aeabi_fsub+0x46>
   10d58:	e09d      	b.n	10e96 <__aeabi_fsub+0x182>
   10d5a:	2800      	cmp	r0, #0
   10d5c:	d13d      	bne.n	10dda <__aeabi_fsub+0xc6>
   10d5e:	2e00      	cmp	r6, #0
   10d60:	d100      	bne.n	10d64 <__aeabi_fsub+0x50>
   10d62:	e08b      	b.n	10e7c <__aeabi_fsub+0x168>
   10d64:	1e51      	subs	r1, r2, #1
   10d66:	2900      	cmp	r1, #0
   10d68:	d000      	beq.n	10d6c <__aeabi_fsub+0x58>
   10d6a:	e0b5      	b.n	10ed8 <__aeabi_fsub+0x1c4>
   10d6c:	2401      	movs	r4, #1
   10d6e:	1b9b      	subs	r3, r3, r6
   10d70:	015a      	lsls	r2, r3, #5
   10d72:	d544      	bpl.n	10dfe <__aeabi_fsub+0xea>
   10d74:	019b      	lsls	r3, r3, #6
   10d76:	099f      	lsrs	r7, r3, #6
   10d78:	0038      	movs	r0, r7
   10d7a:	f7ff f9ab 	bl	100d4 <__clzsi2>
   10d7e:	3805      	subs	r0, #5
   10d80:	4087      	lsls	r7, r0
   10d82:	4284      	cmp	r4, r0
   10d84:	dd00      	ble.n	10d88 <__aeabi_fsub+0x74>
   10d86:	e096      	b.n	10eb6 <__aeabi_fsub+0x1a2>
   10d88:	1b04      	subs	r4, r0, r4
   10d8a:	003a      	movs	r2, r7
   10d8c:	2020      	movs	r0, #32
   10d8e:	3401      	adds	r4, #1
   10d90:	40e2      	lsrs	r2, r4
   10d92:	1b04      	subs	r4, r0, r4
   10d94:	40a7      	lsls	r7, r4
   10d96:	003b      	movs	r3, r7
   10d98:	1e5f      	subs	r7, r3, #1
   10d9a:	41bb      	sbcs	r3, r7
   10d9c:	2400      	movs	r4, #0
   10d9e:	4313      	orrs	r3, r2
   10da0:	075a      	lsls	r2, r3, #29
   10da2:	d004      	beq.n	10dae <__aeabi_fsub+0x9a>
   10da4:	220f      	movs	r2, #15
   10da6:	401a      	ands	r2, r3
   10da8:	2a04      	cmp	r2, #4
   10daa:	d000      	beq.n	10dae <__aeabi_fsub+0x9a>
   10dac:	3304      	adds	r3, #4
   10dae:	015a      	lsls	r2, r3, #5
   10db0:	d527      	bpl.n	10e02 <__aeabi_fsub+0xee>
   10db2:	3401      	adds	r4, #1
   10db4:	2cff      	cmp	r4, #255	; 0xff
   10db6:	d100      	bne.n	10dba <__aeabi_fsub+0xa6>
   10db8:	e079      	b.n	10eae <__aeabi_fsub+0x19a>
   10dba:	2201      	movs	r2, #1
   10dbc:	019b      	lsls	r3, r3, #6
   10dbe:	0a5b      	lsrs	r3, r3, #9
   10dc0:	b2e4      	uxtb	r4, r4
   10dc2:	402a      	ands	r2, r5
   10dc4:	025b      	lsls	r3, r3, #9
   10dc6:	05e4      	lsls	r4, r4, #23
   10dc8:	0a58      	lsrs	r0, r3, #9
   10dca:	07d2      	lsls	r2, r2, #31
   10dcc:	4320      	orrs	r0, r4
   10dce:	4310      	orrs	r0, r2
   10dd0:	bc1c      	pop	{r2, r3, r4}
   10dd2:	4690      	mov	r8, r2
   10dd4:	4699      	mov	r9, r3
   10dd6:	46a2      	mov	sl, r4
   10dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dda:	2cff      	cmp	r4, #255	; 0xff
   10ddc:	d0e0      	beq.n	10da0 <__aeabi_fsub+0x8c>
   10dde:	2180      	movs	r1, #128	; 0x80
   10de0:	04c9      	lsls	r1, r1, #19
   10de2:	430e      	orrs	r6, r1
   10de4:	2a1b      	cmp	r2, #27
   10de6:	dc7b      	bgt.n	10ee0 <__aeabi_fsub+0x1cc>
   10de8:	0031      	movs	r1, r6
   10dea:	2020      	movs	r0, #32
   10dec:	40d1      	lsrs	r1, r2
   10dee:	1a82      	subs	r2, r0, r2
   10df0:	4096      	lsls	r6, r2
   10df2:	1e72      	subs	r2, r6, #1
   10df4:	4196      	sbcs	r6, r2
   10df6:	430e      	orrs	r6, r1
   10df8:	1b9b      	subs	r3, r3, r6
   10dfa:	015a      	lsls	r2, r3, #5
   10dfc:	d4ba      	bmi.n	10d74 <__aeabi_fsub+0x60>
   10dfe:	075a      	lsls	r2, r3, #29
   10e00:	d1d0      	bne.n	10da4 <__aeabi_fsub+0x90>
   10e02:	2201      	movs	r2, #1
   10e04:	08df      	lsrs	r7, r3, #3
   10e06:	402a      	ands	r2, r5
   10e08:	2cff      	cmp	r4, #255	; 0xff
   10e0a:	d133      	bne.n	10e74 <__aeabi_fsub+0x160>
   10e0c:	2f00      	cmp	r7, #0
   10e0e:	d100      	bne.n	10e12 <__aeabi_fsub+0xfe>
   10e10:	e0a8      	b.n	10f64 <__aeabi_fsub+0x250>
   10e12:	2380      	movs	r3, #128	; 0x80
   10e14:	03db      	lsls	r3, r3, #15
   10e16:	433b      	orrs	r3, r7
   10e18:	025b      	lsls	r3, r3, #9
   10e1a:	0a5b      	lsrs	r3, r3, #9
   10e1c:	24ff      	movs	r4, #255	; 0xff
   10e1e:	e7d1      	b.n	10dc4 <__aeabi_fsub+0xb0>
   10e20:	1a21      	subs	r1, r4, r0
   10e22:	2900      	cmp	r1, #0
   10e24:	dd4c      	ble.n	10ec0 <__aeabi_fsub+0x1ac>
   10e26:	2800      	cmp	r0, #0
   10e28:	d02a      	beq.n	10e80 <__aeabi_fsub+0x16c>
   10e2a:	2cff      	cmp	r4, #255	; 0xff
   10e2c:	d0b8      	beq.n	10da0 <__aeabi_fsub+0x8c>
   10e2e:	2080      	movs	r0, #128	; 0x80
   10e30:	04c0      	lsls	r0, r0, #19
   10e32:	4306      	orrs	r6, r0
   10e34:	291b      	cmp	r1, #27
   10e36:	dd00      	ble.n	10e3a <__aeabi_fsub+0x126>
   10e38:	e0af      	b.n	10f9a <__aeabi_fsub+0x286>
   10e3a:	0030      	movs	r0, r6
   10e3c:	2720      	movs	r7, #32
   10e3e:	40c8      	lsrs	r0, r1
   10e40:	1a79      	subs	r1, r7, r1
   10e42:	408e      	lsls	r6, r1
   10e44:	1e71      	subs	r1, r6, #1
   10e46:	418e      	sbcs	r6, r1
   10e48:	4306      	orrs	r6, r0
   10e4a:	199b      	adds	r3, r3, r6
   10e4c:	0159      	lsls	r1, r3, #5
   10e4e:	d5d6      	bpl.n	10dfe <__aeabi_fsub+0xea>
   10e50:	3401      	adds	r4, #1
   10e52:	2cff      	cmp	r4, #255	; 0xff
   10e54:	d100      	bne.n	10e58 <__aeabi_fsub+0x144>
   10e56:	e085      	b.n	10f64 <__aeabi_fsub+0x250>
   10e58:	2201      	movs	r2, #1
   10e5a:	497a      	ldr	r1, [pc, #488]	; (11044 <__aeabi_fsub+0x330>)
   10e5c:	401a      	ands	r2, r3
   10e5e:	085b      	lsrs	r3, r3, #1
   10e60:	400b      	ands	r3, r1
   10e62:	4313      	orrs	r3, r2
   10e64:	e79c      	b.n	10da0 <__aeabi_fsub+0x8c>
   10e66:	2e00      	cmp	r6, #0
   10e68:	d000      	beq.n	10e6c <__aeabi_fsub+0x158>
   10e6a:	e770      	b.n	10d4e <__aeabi_fsub+0x3a>
   10e6c:	e76b      	b.n	10d46 <__aeabi_fsub+0x32>
   10e6e:	1e3b      	subs	r3, r7, #0
   10e70:	d1c5      	bne.n	10dfe <__aeabi_fsub+0xea>
   10e72:	2200      	movs	r2, #0
   10e74:	027b      	lsls	r3, r7, #9
   10e76:	0a5b      	lsrs	r3, r3, #9
   10e78:	b2e4      	uxtb	r4, r4
   10e7a:	e7a3      	b.n	10dc4 <__aeabi_fsub+0xb0>
   10e7c:	0014      	movs	r4, r2
   10e7e:	e78f      	b.n	10da0 <__aeabi_fsub+0x8c>
   10e80:	2e00      	cmp	r6, #0
   10e82:	d04d      	beq.n	10f20 <__aeabi_fsub+0x20c>
   10e84:	1e48      	subs	r0, r1, #1
   10e86:	2800      	cmp	r0, #0
   10e88:	d157      	bne.n	10f3a <__aeabi_fsub+0x226>
   10e8a:	199b      	adds	r3, r3, r6
   10e8c:	2401      	movs	r4, #1
   10e8e:	015a      	lsls	r2, r3, #5
   10e90:	d5b5      	bpl.n	10dfe <__aeabi_fsub+0xea>
   10e92:	2402      	movs	r4, #2
   10e94:	e7e0      	b.n	10e58 <__aeabi_fsub+0x144>
   10e96:	2a00      	cmp	r2, #0
   10e98:	d125      	bne.n	10ee6 <__aeabi_fsub+0x1d2>
   10e9a:	1c62      	adds	r2, r4, #1
   10e9c:	b2d2      	uxtb	r2, r2
   10e9e:	2a01      	cmp	r2, #1
   10ea0:	dd72      	ble.n	10f88 <__aeabi_fsub+0x274>
   10ea2:	1b9f      	subs	r7, r3, r6
   10ea4:	017a      	lsls	r2, r7, #5
   10ea6:	d535      	bpl.n	10f14 <__aeabi_fsub+0x200>
   10ea8:	1af7      	subs	r7, r6, r3
   10eaa:	000d      	movs	r5, r1
   10eac:	e764      	b.n	10d78 <__aeabi_fsub+0x64>
   10eae:	2201      	movs	r2, #1
   10eb0:	2300      	movs	r3, #0
   10eb2:	402a      	ands	r2, r5
   10eb4:	e786      	b.n	10dc4 <__aeabi_fsub+0xb0>
   10eb6:	003b      	movs	r3, r7
   10eb8:	4a63      	ldr	r2, [pc, #396]	; (11048 <__aeabi_fsub+0x334>)
   10eba:	1a24      	subs	r4, r4, r0
   10ebc:	4013      	ands	r3, r2
   10ebe:	e76f      	b.n	10da0 <__aeabi_fsub+0x8c>
   10ec0:	2900      	cmp	r1, #0
   10ec2:	d16c      	bne.n	10f9e <__aeabi_fsub+0x28a>
   10ec4:	1c61      	adds	r1, r4, #1
   10ec6:	b2c8      	uxtb	r0, r1
   10ec8:	2801      	cmp	r0, #1
   10eca:	dd4e      	ble.n	10f6a <__aeabi_fsub+0x256>
   10ecc:	29ff      	cmp	r1, #255	; 0xff
   10ece:	d049      	beq.n	10f64 <__aeabi_fsub+0x250>
   10ed0:	199b      	adds	r3, r3, r6
   10ed2:	085b      	lsrs	r3, r3, #1
   10ed4:	000c      	movs	r4, r1
   10ed6:	e763      	b.n	10da0 <__aeabi_fsub+0x8c>
   10ed8:	2aff      	cmp	r2, #255	; 0xff
   10eda:	d041      	beq.n	10f60 <__aeabi_fsub+0x24c>
   10edc:	000a      	movs	r2, r1
   10ede:	e781      	b.n	10de4 <__aeabi_fsub+0xd0>
   10ee0:	2601      	movs	r6, #1
   10ee2:	1b9b      	subs	r3, r3, r6
   10ee4:	e789      	b.n	10dfa <__aeabi_fsub+0xe6>
   10ee6:	2c00      	cmp	r4, #0
   10ee8:	d01c      	beq.n	10f24 <__aeabi_fsub+0x210>
   10eea:	28ff      	cmp	r0, #255	; 0xff
   10eec:	d021      	beq.n	10f32 <__aeabi_fsub+0x21e>
   10eee:	2480      	movs	r4, #128	; 0x80
   10ef0:	04e4      	lsls	r4, r4, #19
   10ef2:	4252      	negs	r2, r2
   10ef4:	4323      	orrs	r3, r4
   10ef6:	2a1b      	cmp	r2, #27
   10ef8:	dd00      	ble.n	10efc <__aeabi_fsub+0x1e8>
   10efa:	e096      	b.n	1102a <__aeabi_fsub+0x316>
   10efc:	001c      	movs	r4, r3
   10efe:	2520      	movs	r5, #32
   10f00:	40d4      	lsrs	r4, r2
   10f02:	1aaa      	subs	r2, r5, r2
   10f04:	4093      	lsls	r3, r2
   10f06:	1e5a      	subs	r2, r3, #1
   10f08:	4193      	sbcs	r3, r2
   10f0a:	4323      	orrs	r3, r4
   10f0c:	1af3      	subs	r3, r6, r3
   10f0e:	0004      	movs	r4, r0
   10f10:	000d      	movs	r5, r1
   10f12:	e72d      	b.n	10d70 <__aeabi_fsub+0x5c>
   10f14:	2f00      	cmp	r7, #0
   10f16:	d000      	beq.n	10f1a <__aeabi_fsub+0x206>
   10f18:	e72e      	b.n	10d78 <__aeabi_fsub+0x64>
   10f1a:	2200      	movs	r2, #0
   10f1c:	2400      	movs	r4, #0
   10f1e:	e7a9      	b.n	10e74 <__aeabi_fsub+0x160>
   10f20:	000c      	movs	r4, r1
   10f22:	e73d      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f24:	2b00      	cmp	r3, #0
   10f26:	d058      	beq.n	10fda <__aeabi_fsub+0x2c6>
   10f28:	43d2      	mvns	r2, r2
   10f2a:	2a00      	cmp	r2, #0
   10f2c:	d0ee      	beq.n	10f0c <__aeabi_fsub+0x1f8>
   10f2e:	28ff      	cmp	r0, #255	; 0xff
   10f30:	d1e1      	bne.n	10ef6 <__aeabi_fsub+0x1e2>
   10f32:	0033      	movs	r3, r6
   10f34:	24ff      	movs	r4, #255	; 0xff
   10f36:	000d      	movs	r5, r1
   10f38:	e732      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f3a:	29ff      	cmp	r1, #255	; 0xff
   10f3c:	d010      	beq.n	10f60 <__aeabi_fsub+0x24c>
   10f3e:	0001      	movs	r1, r0
   10f40:	e778      	b.n	10e34 <__aeabi_fsub+0x120>
   10f42:	2b00      	cmp	r3, #0
   10f44:	d06e      	beq.n	11024 <__aeabi_fsub+0x310>
   10f46:	24ff      	movs	r4, #255	; 0xff
   10f48:	2e00      	cmp	r6, #0
   10f4a:	d100      	bne.n	10f4e <__aeabi_fsub+0x23a>
   10f4c:	e728      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f4e:	2280      	movs	r2, #128	; 0x80
   10f50:	4651      	mov	r1, sl
   10f52:	03d2      	lsls	r2, r2, #15
   10f54:	4211      	tst	r1, r2
   10f56:	d003      	beq.n	10f60 <__aeabi_fsub+0x24c>
   10f58:	4661      	mov	r1, ip
   10f5a:	4211      	tst	r1, r2
   10f5c:	d100      	bne.n	10f60 <__aeabi_fsub+0x24c>
   10f5e:	0033      	movs	r3, r6
   10f60:	24ff      	movs	r4, #255	; 0xff
   10f62:	e71d      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f64:	24ff      	movs	r4, #255	; 0xff
   10f66:	2300      	movs	r3, #0
   10f68:	e72c      	b.n	10dc4 <__aeabi_fsub+0xb0>
   10f6a:	2c00      	cmp	r4, #0
   10f6c:	d1e9      	bne.n	10f42 <__aeabi_fsub+0x22e>
   10f6e:	2b00      	cmp	r3, #0
   10f70:	d063      	beq.n	1103a <__aeabi_fsub+0x326>
   10f72:	2e00      	cmp	r6, #0
   10f74:	d100      	bne.n	10f78 <__aeabi_fsub+0x264>
   10f76:	e713      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f78:	199b      	adds	r3, r3, r6
   10f7a:	015a      	lsls	r2, r3, #5
   10f7c:	d400      	bmi.n	10f80 <__aeabi_fsub+0x26c>
   10f7e:	e73e      	b.n	10dfe <__aeabi_fsub+0xea>
   10f80:	4a31      	ldr	r2, [pc, #196]	; (11048 <__aeabi_fsub+0x334>)
   10f82:	000c      	movs	r4, r1
   10f84:	4013      	ands	r3, r2
   10f86:	e70b      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f88:	2c00      	cmp	r4, #0
   10f8a:	d11e      	bne.n	10fca <__aeabi_fsub+0x2b6>
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	d12f      	bne.n	10ff0 <__aeabi_fsub+0x2dc>
   10f90:	2e00      	cmp	r6, #0
   10f92:	d04f      	beq.n	11034 <__aeabi_fsub+0x320>
   10f94:	0033      	movs	r3, r6
   10f96:	000d      	movs	r5, r1
   10f98:	e702      	b.n	10da0 <__aeabi_fsub+0x8c>
   10f9a:	2601      	movs	r6, #1
   10f9c:	e755      	b.n	10e4a <__aeabi_fsub+0x136>
   10f9e:	2c00      	cmp	r4, #0
   10fa0:	d11f      	bne.n	10fe2 <__aeabi_fsub+0x2ce>
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	d043      	beq.n	1102e <__aeabi_fsub+0x31a>
   10fa6:	43c9      	mvns	r1, r1
   10fa8:	2900      	cmp	r1, #0
   10faa:	d00b      	beq.n	10fc4 <__aeabi_fsub+0x2b0>
   10fac:	28ff      	cmp	r0, #255	; 0xff
   10fae:	d039      	beq.n	11024 <__aeabi_fsub+0x310>
   10fb0:	291b      	cmp	r1, #27
   10fb2:	dc44      	bgt.n	1103e <__aeabi_fsub+0x32a>
   10fb4:	001c      	movs	r4, r3
   10fb6:	2720      	movs	r7, #32
   10fb8:	40cc      	lsrs	r4, r1
   10fba:	1a79      	subs	r1, r7, r1
   10fbc:	408b      	lsls	r3, r1
   10fbe:	1e59      	subs	r1, r3, #1
   10fc0:	418b      	sbcs	r3, r1
   10fc2:	4323      	orrs	r3, r4
   10fc4:	199b      	adds	r3, r3, r6
   10fc6:	0004      	movs	r4, r0
   10fc8:	e740      	b.n	10e4c <__aeabi_fsub+0x138>
   10fca:	2b00      	cmp	r3, #0
   10fcc:	d11a      	bne.n	11004 <__aeabi_fsub+0x2f0>
   10fce:	2e00      	cmp	r6, #0
   10fd0:	d124      	bne.n	1101c <__aeabi_fsub+0x308>
   10fd2:	2780      	movs	r7, #128	; 0x80
   10fd4:	2200      	movs	r2, #0
   10fd6:	03ff      	lsls	r7, r7, #15
   10fd8:	e71b      	b.n	10e12 <__aeabi_fsub+0xfe>
   10fda:	0033      	movs	r3, r6
   10fdc:	0004      	movs	r4, r0
   10fde:	000d      	movs	r5, r1
   10fe0:	e6de      	b.n	10da0 <__aeabi_fsub+0x8c>
   10fe2:	28ff      	cmp	r0, #255	; 0xff
   10fe4:	d01e      	beq.n	11024 <__aeabi_fsub+0x310>
   10fe6:	2480      	movs	r4, #128	; 0x80
   10fe8:	04e4      	lsls	r4, r4, #19
   10fea:	4249      	negs	r1, r1
   10fec:	4323      	orrs	r3, r4
   10fee:	e7df      	b.n	10fb0 <__aeabi_fsub+0x29c>
   10ff0:	2e00      	cmp	r6, #0
   10ff2:	d100      	bne.n	10ff6 <__aeabi_fsub+0x2e2>
   10ff4:	e6d4      	b.n	10da0 <__aeabi_fsub+0x8c>
   10ff6:	1b9f      	subs	r7, r3, r6
   10ff8:	017a      	lsls	r2, r7, #5
   10ffa:	d400      	bmi.n	10ffe <__aeabi_fsub+0x2ea>
   10ffc:	e737      	b.n	10e6e <__aeabi_fsub+0x15a>
   10ffe:	1af3      	subs	r3, r6, r3
   11000:	000d      	movs	r5, r1
   11002:	e6cd      	b.n	10da0 <__aeabi_fsub+0x8c>
   11004:	24ff      	movs	r4, #255	; 0xff
   11006:	2e00      	cmp	r6, #0
   11008:	d100      	bne.n	1100c <__aeabi_fsub+0x2f8>
   1100a:	e6c9      	b.n	10da0 <__aeabi_fsub+0x8c>
   1100c:	2280      	movs	r2, #128	; 0x80
   1100e:	4650      	mov	r0, sl
   11010:	03d2      	lsls	r2, r2, #15
   11012:	4210      	tst	r0, r2
   11014:	d0a4      	beq.n	10f60 <__aeabi_fsub+0x24c>
   11016:	4660      	mov	r0, ip
   11018:	4210      	tst	r0, r2
   1101a:	d1a1      	bne.n	10f60 <__aeabi_fsub+0x24c>
   1101c:	0033      	movs	r3, r6
   1101e:	000d      	movs	r5, r1
   11020:	24ff      	movs	r4, #255	; 0xff
   11022:	e6bd      	b.n	10da0 <__aeabi_fsub+0x8c>
   11024:	0033      	movs	r3, r6
   11026:	24ff      	movs	r4, #255	; 0xff
   11028:	e6ba      	b.n	10da0 <__aeabi_fsub+0x8c>
   1102a:	2301      	movs	r3, #1
   1102c:	e76e      	b.n	10f0c <__aeabi_fsub+0x1f8>
   1102e:	0033      	movs	r3, r6
   11030:	0004      	movs	r4, r0
   11032:	e6b5      	b.n	10da0 <__aeabi_fsub+0x8c>
   11034:	2700      	movs	r7, #0
   11036:	2200      	movs	r2, #0
   11038:	e71c      	b.n	10e74 <__aeabi_fsub+0x160>
   1103a:	0033      	movs	r3, r6
   1103c:	e6b0      	b.n	10da0 <__aeabi_fsub+0x8c>
   1103e:	2301      	movs	r3, #1
   11040:	e7c0      	b.n	10fc4 <__aeabi_fsub+0x2b0>
   11042:	46c0      	nop			; (mov r8, r8)
   11044:	7dffffff 	.word	0x7dffffff
   11048:	fbffffff 	.word	0xfbffffff

0001104c <__aeabi_f2iz>:
   1104c:	0241      	lsls	r1, r0, #9
   1104e:	0043      	lsls	r3, r0, #1
   11050:	0fc2      	lsrs	r2, r0, #31
   11052:	0a49      	lsrs	r1, r1, #9
   11054:	0e1b      	lsrs	r3, r3, #24
   11056:	2000      	movs	r0, #0
   11058:	2b7e      	cmp	r3, #126	; 0x7e
   1105a:	dd0d      	ble.n	11078 <__aeabi_f2iz+0x2c>
   1105c:	2b9d      	cmp	r3, #157	; 0x9d
   1105e:	dc0c      	bgt.n	1107a <__aeabi_f2iz+0x2e>
   11060:	2080      	movs	r0, #128	; 0x80
   11062:	0400      	lsls	r0, r0, #16
   11064:	4301      	orrs	r1, r0
   11066:	2b95      	cmp	r3, #149	; 0x95
   11068:	dc0a      	bgt.n	11080 <__aeabi_f2iz+0x34>
   1106a:	2096      	movs	r0, #150	; 0x96
   1106c:	1ac3      	subs	r3, r0, r3
   1106e:	40d9      	lsrs	r1, r3
   11070:	4248      	negs	r0, r1
   11072:	2a00      	cmp	r2, #0
   11074:	d100      	bne.n	11078 <__aeabi_f2iz+0x2c>
   11076:	0008      	movs	r0, r1
   11078:	4770      	bx	lr
   1107a:	4b03      	ldr	r3, [pc, #12]	; (11088 <__aeabi_f2iz+0x3c>)
   1107c:	18d0      	adds	r0, r2, r3
   1107e:	e7fb      	b.n	11078 <__aeabi_f2iz+0x2c>
   11080:	3b96      	subs	r3, #150	; 0x96
   11082:	4099      	lsls	r1, r3
   11084:	e7f4      	b.n	11070 <__aeabi_f2iz+0x24>
   11086:	46c0      	nop			; (mov r8, r8)
   11088:	7fffffff 	.word	0x7fffffff

0001108c <__aeabi_i2f>:
   1108c:	b570      	push	{r4, r5, r6, lr}
   1108e:	2800      	cmp	r0, #0
   11090:	d030      	beq.n	110f4 <__aeabi_i2f+0x68>
   11092:	17c3      	asrs	r3, r0, #31
   11094:	18c4      	adds	r4, r0, r3
   11096:	405c      	eors	r4, r3
   11098:	0fc5      	lsrs	r5, r0, #31
   1109a:	0020      	movs	r0, r4
   1109c:	f7ff f81a 	bl	100d4 <__clzsi2>
   110a0:	239e      	movs	r3, #158	; 0x9e
   110a2:	1a1b      	subs	r3, r3, r0
   110a4:	2b96      	cmp	r3, #150	; 0x96
   110a6:	dc0d      	bgt.n	110c4 <__aeabi_i2f+0x38>
   110a8:	2296      	movs	r2, #150	; 0x96
   110aa:	1ad2      	subs	r2, r2, r3
   110ac:	4094      	lsls	r4, r2
   110ae:	002a      	movs	r2, r5
   110b0:	0264      	lsls	r4, r4, #9
   110b2:	0a64      	lsrs	r4, r4, #9
   110b4:	b2db      	uxtb	r3, r3
   110b6:	0264      	lsls	r4, r4, #9
   110b8:	05db      	lsls	r3, r3, #23
   110ba:	0a60      	lsrs	r0, r4, #9
   110bc:	07d2      	lsls	r2, r2, #31
   110be:	4318      	orrs	r0, r3
   110c0:	4310      	orrs	r0, r2
   110c2:	bd70      	pop	{r4, r5, r6, pc}
   110c4:	2b99      	cmp	r3, #153	; 0x99
   110c6:	dc19      	bgt.n	110fc <__aeabi_i2f+0x70>
   110c8:	2299      	movs	r2, #153	; 0x99
   110ca:	1ad2      	subs	r2, r2, r3
   110cc:	2a00      	cmp	r2, #0
   110ce:	dd29      	ble.n	11124 <__aeabi_i2f+0x98>
   110d0:	4094      	lsls	r4, r2
   110d2:	0022      	movs	r2, r4
   110d4:	4c14      	ldr	r4, [pc, #80]	; (11128 <__aeabi_i2f+0x9c>)
   110d6:	4014      	ands	r4, r2
   110d8:	0751      	lsls	r1, r2, #29
   110da:	d004      	beq.n	110e6 <__aeabi_i2f+0x5a>
   110dc:	210f      	movs	r1, #15
   110de:	400a      	ands	r2, r1
   110e0:	2a04      	cmp	r2, #4
   110e2:	d000      	beq.n	110e6 <__aeabi_i2f+0x5a>
   110e4:	3404      	adds	r4, #4
   110e6:	0162      	lsls	r2, r4, #5
   110e8:	d413      	bmi.n	11112 <__aeabi_i2f+0x86>
   110ea:	01a4      	lsls	r4, r4, #6
   110ec:	0a64      	lsrs	r4, r4, #9
   110ee:	b2db      	uxtb	r3, r3
   110f0:	002a      	movs	r2, r5
   110f2:	e7e0      	b.n	110b6 <__aeabi_i2f+0x2a>
   110f4:	2200      	movs	r2, #0
   110f6:	2300      	movs	r3, #0
   110f8:	2400      	movs	r4, #0
   110fa:	e7dc      	b.n	110b6 <__aeabi_i2f+0x2a>
   110fc:	2205      	movs	r2, #5
   110fe:	0021      	movs	r1, r4
   11100:	1a12      	subs	r2, r2, r0
   11102:	40d1      	lsrs	r1, r2
   11104:	22b9      	movs	r2, #185	; 0xb9
   11106:	1ad2      	subs	r2, r2, r3
   11108:	4094      	lsls	r4, r2
   1110a:	1e62      	subs	r2, r4, #1
   1110c:	4194      	sbcs	r4, r2
   1110e:	430c      	orrs	r4, r1
   11110:	e7da      	b.n	110c8 <__aeabi_i2f+0x3c>
   11112:	4b05      	ldr	r3, [pc, #20]	; (11128 <__aeabi_i2f+0x9c>)
   11114:	002a      	movs	r2, r5
   11116:	401c      	ands	r4, r3
   11118:	239f      	movs	r3, #159	; 0x9f
   1111a:	01a4      	lsls	r4, r4, #6
   1111c:	1a1b      	subs	r3, r3, r0
   1111e:	0a64      	lsrs	r4, r4, #9
   11120:	b2db      	uxtb	r3, r3
   11122:	e7c8      	b.n	110b6 <__aeabi_i2f+0x2a>
   11124:	0022      	movs	r2, r4
   11126:	e7d5      	b.n	110d4 <__aeabi_i2f+0x48>
   11128:	fbffffff 	.word	0xfbffffff

0001112c <__aeabi_dadd>:
   1112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1112e:	4645      	mov	r5, r8
   11130:	46de      	mov	lr, fp
   11132:	4657      	mov	r7, sl
   11134:	464e      	mov	r6, r9
   11136:	030c      	lsls	r4, r1, #12
   11138:	b5e0      	push	{r5, r6, r7, lr}
   1113a:	004e      	lsls	r6, r1, #1
   1113c:	0fc9      	lsrs	r1, r1, #31
   1113e:	4688      	mov	r8, r1
   11140:	000d      	movs	r5, r1
   11142:	0a61      	lsrs	r1, r4, #9
   11144:	0f44      	lsrs	r4, r0, #29
   11146:	430c      	orrs	r4, r1
   11148:	00c7      	lsls	r7, r0, #3
   1114a:	0319      	lsls	r1, r3, #12
   1114c:	0058      	lsls	r0, r3, #1
   1114e:	0fdb      	lsrs	r3, r3, #31
   11150:	469b      	mov	fp, r3
   11152:	0a4b      	lsrs	r3, r1, #9
   11154:	0f51      	lsrs	r1, r2, #29
   11156:	430b      	orrs	r3, r1
   11158:	0d76      	lsrs	r6, r6, #21
   1115a:	0d40      	lsrs	r0, r0, #21
   1115c:	0019      	movs	r1, r3
   1115e:	00d2      	lsls	r2, r2, #3
   11160:	45d8      	cmp	r8, fp
   11162:	d100      	bne.n	11166 <__aeabi_dadd+0x3a>
   11164:	e0ae      	b.n	112c4 <__aeabi_dadd+0x198>
   11166:	1a35      	subs	r5, r6, r0
   11168:	2d00      	cmp	r5, #0
   1116a:	dc00      	bgt.n	1116e <__aeabi_dadd+0x42>
   1116c:	e0f6      	b.n	1135c <__aeabi_dadd+0x230>
   1116e:	2800      	cmp	r0, #0
   11170:	d10f      	bne.n	11192 <__aeabi_dadd+0x66>
   11172:	4313      	orrs	r3, r2
   11174:	d100      	bne.n	11178 <__aeabi_dadd+0x4c>
   11176:	e0db      	b.n	11330 <__aeabi_dadd+0x204>
   11178:	1e6b      	subs	r3, r5, #1
   1117a:	2b00      	cmp	r3, #0
   1117c:	d000      	beq.n	11180 <__aeabi_dadd+0x54>
   1117e:	e137      	b.n	113f0 <__aeabi_dadd+0x2c4>
   11180:	1aba      	subs	r2, r7, r2
   11182:	4297      	cmp	r7, r2
   11184:	41bf      	sbcs	r7, r7
   11186:	1a64      	subs	r4, r4, r1
   11188:	427f      	negs	r7, r7
   1118a:	1be4      	subs	r4, r4, r7
   1118c:	2601      	movs	r6, #1
   1118e:	0017      	movs	r7, r2
   11190:	e024      	b.n	111dc <__aeabi_dadd+0xb0>
   11192:	4bc6      	ldr	r3, [pc, #792]	; (114ac <__aeabi_dadd+0x380>)
   11194:	429e      	cmp	r6, r3
   11196:	d04d      	beq.n	11234 <__aeabi_dadd+0x108>
   11198:	2380      	movs	r3, #128	; 0x80
   1119a:	041b      	lsls	r3, r3, #16
   1119c:	4319      	orrs	r1, r3
   1119e:	2d38      	cmp	r5, #56	; 0x38
   111a0:	dd00      	ble.n	111a4 <__aeabi_dadd+0x78>
   111a2:	e107      	b.n	113b4 <__aeabi_dadd+0x288>
   111a4:	2d1f      	cmp	r5, #31
   111a6:	dd00      	ble.n	111aa <__aeabi_dadd+0x7e>
   111a8:	e138      	b.n	1141c <__aeabi_dadd+0x2f0>
   111aa:	2020      	movs	r0, #32
   111ac:	1b43      	subs	r3, r0, r5
   111ae:	469a      	mov	sl, r3
   111b0:	000b      	movs	r3, r1
   111b2:	4650      	mov	r0, sl
   111b4:	4083      	lsls	r3, r0
   111b6:	4699      	mov	r9, r3
   111b8:	0013      	movs	r3, r2
   111ba:	4648      	mov	r0, r9
   111bc:	40eb      	lsrs	r3, r5
   111be:	4318      	orrs	r0, r3
   111c0:	0003      	movs	r3, r0
   111c2:	4650      	mov	r0, sl
   111c4:	4082      	lsls	r2, r0
   111c6:	1e50      	subs	r0, r2, #1
   111c8:	4182      	sbcs	r2, r0
   111ca:	40e9      	lsrs	r1, r5
   111cc:	431a      	orrs	r2, r3
   111ce:	1aba      	subs	r2, r7, r2
   111d0:	1a61      	subs	r1, r4, r1
   111d2:	4297      	cmp	r7, r2
   111d4:	41a4      	sbcs	r4, r4
   111d6:	0017      	movs	r7, r2
   111d8:	4264      	negs	r4, r4
   111da:	1b0c      	subs	r4, r1, r4
   111dc:	0223      	lsls	r3, r4, #8
   111de:	d562      	bpl.n	112a6 <__aeabi_dadd+0x17a>
   111e0:	0264      	lsls	r4, r4, #9
   111e2:	0a65      	lsrs	r5, r4, #9
   111e4:	2d00      	cmp	r5, #0
   111e6:	d100      	bne.n	111ea <__aeabi_dadd+0xbe>
   111e8:	e0df      	b.n	113aa <__aeabi_dadd+0x27e>
   111ea:	0028      	movs	r0, r5
   111ec:	f7fe ff72 	bl	100d4 <__clzsi2>
   111f0:	0003      	movs	r3, r0
   111f2:	3b08      	subs	r3, #8
   111f4:	2b1f      	cmp	r3, #31
   111f6:	dd00      	ble.n	111fa <__aeabi_dadd+0xce>
   111f8:	e0d2      	b.n	113a0 <__aeabi_dadd+0x274>
   111fa:	2220      	movs	r2, #32
   111fc:	003c      	movs	r4, r7
   111fe:	1ad2      	subs	r2, r2, r3
   11200:	409d      	lsls	r5, r3
   11202:	40d4      	lsrs	r4, r2
   11204:	409f      	lsls	r7, r3
   11206:	4325      	orrs	r5, r4
   11208:	429e      	cmp	r6, r3
   1120a:	dd00      	ble.n	1120e <__aeabi_dadd+0xe2>
   1120c:	e0c4      	b.n	11398 <__aeabi_dadd+0x26c>
   1120e:	1b9e      	subs	r6, r3, r6
   11210:	1c73      	adds	r3, r6, #1
   11212:	2b1f      	cmp	r3, #31
   11214:	dd00      	ble.n	11218 <__aeabi_dadd+0xec>
   11216:	e0f1      	b.n	113fc <__aeabi_dadd+0x2d0>
   11218:	2220      	movs	r2, #32
   1121a:	0038      	movs	r0, r7
   1121c:	0029      	movs	r1, r5
   1121e:	1ad2      	subs	r2, r2, r3
   11220:	40d8      	lsrs	r0, r3
   11222:	4091      	lsls	r1, r2
   11224:	4097      	lsls	r7, r2
   11226:	002c      	movs	r4, r5
   11228:	4301      	orrs	r1, r0
   1122a:	1e78      	subs	r0, r7, #1
   1122c:	4187      	sbcs	r7, r0
   1122e:	40dc      	lsrs	r4, r3
   11230:	2600      	movs	r6, #0
   11232:	430f      	orrs	r7, r1
   11234:	077b      	lsls	r3, r7, #29
   11236:	d009      	beq.n	1124c <__aeabi_dadd+0x120>
   11238:	230f      	movs	r3, #15
   1123a:	403b      	ands	r3, r7
   1123c:	2b04      	cmp	r3, #4
   1123e:	d005      	beq.n	1124c <__aeabi_dadd+0x120>
   11240:	1d3b      	adds	r3, r7, #4
   11242:	42bb      	cmp	r3, r7
   11244:	41bf      	sbcs	r7, r7
   11246:	427f      	negs	r7, r7
   11248:	19e4      	adds	r4, r4, r7
   1124a:	001f      	movs	r7, r3
   1124c:	0223      	lsls	r3, r4, #8
   1124e:	d52c      	bpl.n	112aa <__aeabi_dadd+0x17e>
   11250:	4b96      	ldr	r3, [pc, #600]	; (114ac <__aeabi_dadd+0x380>)
   11252:	3601      	adds	r6, #1
   11254:	429e      	cmp	r6, r3
   11256:	d100      	bne.n	1125a <__aeabi_dadd+0x12e>
   11258:	e09a      	b.n	11390 <__aeabi_dadd+0x264>
   1125a:	4645      	mov	r5, r8
   1125c:	4b94      	ldr	r3, [pc, #592]	; (114b0 <__aeabi_dadd+0x384>)
   1125e:	08ff      	lsrs	r7, r7, #3
   11260:	401c      	ands	r4, r3
   11262:	0760      	lsls	r0, r4, #29
   11264:	0576      	lsls	r6, r6, #21
   11266:	0264      	lsls	r4, r4, #9
   11268:	4307      	orrs	r7, r0
   1126a:	0b24      	lsrs	r4, r4, #12
   1126c:	0d76      	lsrs	r6, r6, #21
   1126e:	2100      	movs	r1, #0
   11270:	0324      	lsls	r4, r4, #12
   11272:	0b23      	lsrs	r3, r4, #12
   11274:	0d0c      	lsrs	r4, r1, #20
   11276:	4a8f      	ldr	r2, [pc, #572]	; (114b4 <__aeabi_dadd+0x388>)
   11278:	0524      	lsls	r4, r4, #20
   1127a:	431c      	orrs	r4, r3
   1127c:	4014      	ands	r4, r2
   1127e:	0533      	lsls	r3, r6, #20
   11280:	4323      	orrs	r3, r4
   11282:	005b      	lsls	r3, r3, #1
   11284:	07ed      	lsls	r5, r5, #31
   11286:	085b      	lsrs	r3, r3, #1
   11288:	432b      	orrs	r3, r5
   1128a:	0038      	movs	r0, r7
   1128c:	0019      	movs	r1, r3
   1128e:	bc3c      	pop	{r2, r3, r4, r5}
   11290:	4690      	mov	r8, r2
   11292:	4699      	mov	r9, r3
   11294:	46a2      	mov	sl, r4
   11296:	46ab      	mov	fp, r5
   11298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1129a:	4664      	mov	r4, ip
   1129c:	4304      	orrs	r4, r0
   1129e:	d100      	bne.n	112a2 <__aeabi_dadd+0x176>
   112a0:	e211      	b.n	116c6 <__aeabi_dadd+0x59a>
   112a2:	0004      	movs	r4, r0
   112a4:	4667      	mov	r7, ip
   112a6:	077b      	lsls	r3, r7, #29
   112a8:	d1c6      	bne.n	11238 <__aeabi_dadd+0x10c>
   112aa:	4645      	mov	r5, r8
   112ac:	0760      	lsls	r0, r4, #29
   112ae:	08ff      	lsrs	r7, r7, #3
   112b0:	4307      	orrs	r7, r0
   112b2:	08e4      	lsrs	r4, r4, #3
   112b4:	4b7d      	ldr	r3, [pc, #500]	; (114ac <__aeabi_dadd+0x380>)
   112b6:	429e      	cmp	r6, r3
   112b8:	d030      	beq.n	1131c <__aeabi_dadd+0x1f0>
   112ba:	0324      	lsls	r4, r4, #12
   112bc:	0576      	lsls	r6, r6, #21
   112be:	0b24      	lsrs	r4, r4, #12
   112c0:	0d76      	lsrs	r6, r6, #21
   112c2:	e7d4      	b.n	1126e <__aeabi_dadd+0x142>
   112c4:	1a33      	subs	r3, r6, r0
   112c6:	469a      	mov	sl, r3
   112c8:	2b00      	cmp	r3, #0
   112ca:	dd78      	ble.n	113be <__aeabi_dadd+0x292>
   112cc:	2800      	cmp	r0, #0
   112ce:	d031      	beq.n	11334 <__aeabi_dadd+0x208>
   112d0:	4876      	ldr	r0, [pc, #472]	; (114ac <__aeabi_dadd+0x380>)
   112d2:	4286      	cmp	r6, r0
   112d4:	d0ae      	beq.n	11234 <__aeabi_dadd+0x108>
   112d6:	2080      	movs	r0, #128	; 0x80
   112d8:	0400      	lsls	r0, r0, #16
   112da:	4301      	orrs	r1, r0
   112dc:	4653      	mov	r3, sl
   112de:	2b38      	cmp	r3, #56	; 0x38
   112e0:	dc00      	bgt.n	112e4 <__aeabi_dadd+0x1b8>
   112e2:	e0e9      	b.n	114b8 <__aeabi_dadd+0x38c>
   112e4:	430a      	orrs	r2, r1
   112e6:	1e51      	subs	r1, r2, #1
   112e8:	418a      	sbcs	r2, r1
   112ea:	2100      	movs	r1, #0
   112ec:	19d2      	adds	r2, r2, r7
   112ee:	42ba      	cmp	r2, r7
   112f0:	41bf      	sbcs	r7, r7
   112f2:	1909      	adds	r1, r1, r4
   112f4:	427c      	negs	r4, r7
   112f6:	0017      	movs	r7, r2
   112f8:	190c      	adds	r4, r1, r4
   112fa:	0223      	lsls	r3, r4, #8
   112fc:	d5d3      	bpl.n	112a6 <__aeabi_dadd+0x17a>
   112fe:	4b6b      	ldr	r3, [pc, #428]	; (114ac <__aeabi_dadd+0x380>)
   11300:	3601      	adds	r6, #1
   11302:	429e      	cmp	r6, r3
   11304:	d100      	bne.n	11308 <__aeabi_dadd+0x1dc>
   11306:	e13a      	b.n	1157e <__aeabi_dadd+0x452>
   11308:	2001      	movs	r0, #1
   1130a:	4b69      	ldr	r3, [pc, #420]	; (114b0 <__aeabi_dadd+0x384>)
   1130c:	401c      	ands	r4, r3
   1130e:	087b      	lsrs	r3, r7, #1
   11310:	4007      	ands	r7, r0
   11312:	431f      	orrs	r7, r3
   11314:	07e0      	lsls	r0, r4, #31
   11316:	4307      	orrs	r7, r0
   11318:	0864      	lsrs	r4, r4, #1
   1131a:	e78b      	b.n	11234 <__aeabi_dadd+0x108>
   1131c:	0023      	movs	r3, r4
   1131e:	433b      	orrs	r3, r7
   11320:	d100      	bne.n	11324 <__aeabi_dadd+0x1f8>
   11322:	e1cb      	b.n	116bc <__aeabi_dadd+0x590>
   11324:	2280      	movs	r2, #128	; 0x80
   11326:	0312      	lsls	r2, r2, #12
   11328:	4314      	orrs	r4, r2
   1132a:	0324      	lsls	r4, r4, #12
   1132c:	0b24      	lsrs	r4, r4, #12
   1132e:	e79e      	b.n	1126e <__aeabi_dadd+0x142>
   11330:	002e      	movs	r6, r5
   11332:	e77f      	b.n	11234 <__aeabi_dadd+0x108>
   11334:	0008      	movs	r0, r1
   11336:	4310      	orrs	r0, r2
   11338:	d100      	bne.n	1133c <__aeabi_dadd+0x210>
   1133a:	e0b4      	b.n	114a6 <__aeabi_dadd+0x37a>
   1133c:	1e58      	subs	r0, r3, #1
   1133e:	2800      	cmp	r0, #0
   11340:	d000      	beq.n	11344 <__aeabi_dadd+0x218>
   11342:	e0de      	b.n	11502 <__aeabi_dadd+0x3d6>
   11344:	18ba      	adds	r2, r7, r2
   11346:	42ba      	cmp	r2, r7
   11348:	419b      	sbcs	r3, r3
   1134a:	1864      	adds	r4, r4, r1
   1134c:	425b      	negs	r3, r3
   1134e:	18e4      	adds	r4, r4, r3
   11350:	0017      	movs	r7, r2
   11352:	2601      	movs	r6, #1
   11354:	0223      	lsls	r3, r4, #8
   11356:	d5a6      	bpl.n	112a6 <__aeabi_dadd+0x17a>
   11358:	2602      	movs	r6, #2
   1135a:	e7d5      	b.n	11308 <__aeabi_dadd+0x1dc>
   1135c:	2d00      	cmp	r5, #0
   1135e:	d16e      	bne.n	1143e <__aeabi_dadd+0x312>
   11360:	1c70      	adds	r0, r6, #1
   11362:	0540      	lsls	r0, r0, #21
   11364:	0d40      	lsrs	r0, r0, #21
   11366:	2801      	cmp	r0, #1
   11368:	dc00      	bgt.n	1136c <__aeabi_dadd+0x240>
   1136a:	e0f9      	b.n	11560 <__aeabi_dadd+0x434>
   1136c:	1ab8      	subs	r0, r7, r2
   1136e:	4684      	mov	ip, r0
   11370:	4287      	cmp	r7, r0
   11372:	4180      	sbcs	r0, r0
   11374:	1ae5      	subs	r5, r4, r3
   11376:	4240      	negs	r0, r0
   11378:	1a2d      	subs	r5, r5, r0
   1137a:	0228      	lsls	r0, r5, #8
   1137c:	d400      	bmi.n	11380 <__aeabi_dadd+0x254>
   1137e:	e089      	b.n	11494 <__aeabi_dadd+0x368>
   11380:	1bd7      	subs	r7, r2, r7
   11382:	42ba      	cmp	r2, r7
   11384:	4192      	sbcs	r2, r2
   11386:	1b1c      	subs	r4, r3, r4
   11388:	4252      	negs	r2, r2
   1138a:	1aa5      	subs	r5, r4, r2
   1138c:	46d8      	mov	r8, fp
   1138e:	e729      	b.n	111e4 <__aeabi_dadd+0xb8>
   11390:	4645      	mov	r5, r8
   11392:	2400      	movs	r4, #0
   11394:	2700      	movs	r7, #0
   11396:	e76a      	b.n	1126e <__aeabi_dadd+0x142>
   11398:	4c45      	ldr	r4, [pc, #276]	; (114b0 <__aeabi_dadd+0x384>)
   1139a:	1af6      	subs	r6, r6, r3
   1139c:	402c      	ands	r4, r5
   1139e:	e749      	b.n	11234 <__aeabi_dadd+0x108>
   113a0:	003d      	movs	r5, r7
   113a2:	3828      	subs	r0, #40	; 0x28
   113a4:	4085      	lsls	r5, r0
   113a6:	2700      	movs	r7, #0
   113a8:	e72e      	b.n	11208 <__aeabi_dadd+0xdc>
   113aa:	0038      	movs	r0, r7
   113ac:	f7fe fe92 	bl	100d4 <__clzsi2>
   113b0:	3020      	adds	r0, #32
   113b2:	e71d      	b.n	111f0 <__aeabi_dadd+0xc4>
   113b4:	430a      	orrs	r2, r1
   113b6:	1e51      	subs	r1, r2, #1
   113b8:	418a      	sbcs	r2, r1
   113ba:	2100      	movs	r1, #0
   113bc:	e707      	b.n	111ce <__aeabi_dadd+0xa2>
   113be:	2b00      	cmp	r3, #0
   113c0:	d000      	beq.n	113c4 <__aeabi_dadd+0x298>
   113c2:	e0f3      	b.n	115ac <__aeabi_dadd+0x480>
   113c4:	1c70      	adds	r0, r6, #1
   113c6:	0543      	lsls	r3, r0, #21
   113c8:	0d5b      	lsrs	r3, r3, #21
   113ca:	2b01      	cmp	r3, #1
   113cc:	dc00      	bgt.n	113d0 <__aeabi_dadd+0x2a4>
   113ce:	e0ad      	b.n	1152c <__aeabi_dadd+0x400>
   113d0:	4b36      	ldr	r3, [pc, #216]	; (114ac <__aeabi_dadd+0x380>)
   113d2:	4298      	cmp	r0, r3
   113d4:	d100      	bne.n	113d8 <__aeabi_dadd+0x2ac>
   113d6:	e0d1      	b.n	1157c <__aeabi_dadd+0x450>
   113d8:	18ba      	adds	r2, r7, r2
   113da:	42ba      	cmp	r2, r7
   113dc:	41bf      	sbcs	r7, r7
   113de:	1864      	adds	r4, r4, r1
   113e0:	427f      	negs	r7, r7
   113e2:	19e4      	adds	r4, r4, r7
   113e4:	07e7      	lsls	r7, r4, #31
   113e6:	0852      	lsrs	r2, r2, #1
   113e8:	4317      	orrs	r7, r2
   113ea:	0864      	lsrs	r4, r4, #1
   113ec:	0006      	movs	r6, r0
   113ee:	e721      	b.n	11234 <__aeabi_dadd+0x108>
   113f0:	482e      	ldr	r0, [pc, #184]	; (114ac <__aeabi_dadd+0x380>)
   113f2:	4285      	cmp	r5, r0
   113f4:	d100      	bne.n	113f8 <__aeabi_dadd+0x2cc>
   113f6:	e093      	b.n	11520 <__aeabi_dadd+0x3f4>
   113f8:	001d      	movs	r5, r3
   113fa:	e6d0      	b.n	1119e <__aeabi_dadd+0x72>
   113fc:	0029      	movs	r1, r5
   113fe:	3e1f      	subs	r6, #31
   11400:	40f1      	lsrs	r1, r6
   11402:	2b20      	cmp	r3, #32
   11404:	d100      	bne.n	11408 <__aeabi_dadd+0x2dc>
   11406:	e08d      	b.n	11524 <__aeabi_dadd+0x3f8>
   11408:	2240      	movs	r2, #64	; 0x40
   1140a:	1ad3      	subs	r3, r2, r3
   1140c:	409d      	lsls	r5, r3
   1140e:	432f      	orrs	r7, r5
   11410:	1e7d      	subs	r5, r7, #1
   11412:	41af      	sbcs	r7, r5
   11414:	2400      	movs	r4, #0
   11416:	430f      	orrs	r7, r1
   11418:	2600      	movs	r6, #0
   1141a:	e744      	b.n	112a6 <__aeabi_dadd+0x17a>
   1141c:	002b      	movs	r3, r5
   1141e:	0008      	movs	r0, r1
   11420:	3b20      	subs	r3, #32
   11422:	40d8      	lsrs	r0, r3
   11424:	0003      	movs	r3, r0
   11426:	2d20      	cmp	r5, #32
   11428:	d100      	bne.n	1142c <__aeabi_dadd+0x300>
   1142a:	e07d      	b.n	11528 <__aeabi_dadd+0x3fc>
   1142c:	2040      	movs	r0, #64	; 0x40
   1142e:	1b45      	subs	r5, r0, r5
   11430:	40a9      	lsls	r1, r5
   11432:	430a      	orrs	r2, r1
   11434:	1e51      	subs	r1, r2, #1
   11436:	418a      	sbcs	r2, r1
   11438:	2100      	movs	r1, #0
   1143a:	431a      	orrs	r2, r3
   1143c:	e6c7      	b.n	111ce <__aeabi_dadd+0xa2>
   1143e:	2e00      	cmp	r6, #0
   11440:	d050      	beq.n	114e4 <__aeabi_dadd+0x3b8>
   11442:	4e1a      	ldr	r6, [pc, #104]	; (114ac <__aeabi_dadd+0x380>)
   11444:	42b0      	cmp	r0, r6
   11446:	d057      	beq.n	114f8 <__aeabi_dadd+0x3cc>
   11448:	2680      	movs	r6, #128	; 0x80
   1144a:	426b      	negs	r3, r5
   1144c:	4699      	mov	r9, r3
   1144e:	0436      	lsls	r6, r6, #16
   11450:	4334      	orrs	r4, r6
   11452:	464b      	mov	r3, r9
   11454:	2b38      	cmp	r3, #56	; 0x38
   11456:	dd00      	ble.n	1145a <__aeabi_dadd+0x32e>
   11458:	e0d6      	b.n	11608 <__aeabi_dadd+0x4dc>
   1145a:	2b1f      	cmp	r3, #31
   1145c:	dd00      	ble.n	11460 <__aeabi_dadd+0x334>
   1145e:	e135      	b.n	116cc <__aeabi_dadd+0x5a0>
   11460:	2620      	movs	r6, #32
   11462:	1af5      	subs	r5, r6, r3
   11464:	0026      	movs	r6, r4
   11466:	40ae      	lsls	r6, r5
   11468:	46b2      	mov	sl, r6
   1146a:	003e      	movs	r6, r7
   1146c:	40de      	lsrs	r6, r3
   1146e:	46ac      	mov	ip, r5
   11470:	0035      	movs	r5, r6
   11472:	4656      	mov	r6, sl
   11474:	432e      	orrs	r6, r5
   11476:	4665      	mov	r5, ip
   11478:	40af      	lsls	r7, r5
   1147a:	1e7d      	subs	r5, r7, #1
   1147c:	41af      	sbcs	r7, r5
   1147e:	40dc      	lsrs	r4, r3
   11480:	4337      	orrs	r7, r6
   11482:	1bd7      	subs	r7, r2, r7
   11484:	42ba      	cmp	r2, r7
   11486:	4192      	sbcs	r2, r2
   11488:	1b0c      	subs	r4, r1, r4
   1148a:	4252      	negs	r2, r2
   1148c:	1aa4      	subs	r4, r4, r2
   1148e:	0006      	movs	r6, r0
   11490:	46d8      	mov	r8, fp
   11492:	e6a3      	b.n	111dc <__aeabi_dadd+0xb0>
   11494:	4664      	mov	r4, ip
   11496:	4667      	mov	r7, ip
   11498:	432c      	orrs	r4, r5
   1149a:	d000      	beq.n	1149e <__aeabi_dadd+0x372>
   1149c:	e6a2      	b.n	111e4 <__aeabi_dadd+0xb8>
   1149e:	2500      	movs	r5, #0
   114a0:	2600      	movs	r6, #0
   114a2:	2700      	movs	r7, #0
   114a4:	e706      	b.n	112b4 <__aeabi_dadd+0x188>
   114a6:	001e      	movs	r6, r3
   114a8:	e6c4      	b.n	11234 <__aeabi_dadd+0x108>
   114aa:	46c0      	nop			; (mov r8, r8)
   114ac:	000007ff 	.word	0x000007ff
   114b0:	ff7fffff 	.word	0xff7fffff
   114b4:	800fffff 	.word	0x800fffff
   114b8:	2b1f      	cmp	r3, #31
   114ba:	dc63      	bgt.n	11584 <__aeabi_dadd+0x458>
   114bc:	2020      	movs	r0, #32
   114be:	1ac3      	subs	r3, r0, r3
   114c0:	0008      	movs	r0, r1
   114c2:	4098      	lsls	r0, r3
   114c4:	469c      	mov	ip, r3
   114c6:	4683      	mov	fp, r0
   114c8:	4653      	mov	r3, sl
   114ca:	0010      	movs	r0, r2
   114cc:	40d8      	lsrs	r0, r3
   114ce:	0003      	movs	r3, r0
   114d0:	4658      	mov	r0, fp
   114d2:	4318      	orrs	r0, r3
   114d4:	4663      	mov	r3, ip
   114d6:	409a      	lsls	r2, r3
   114d8:	1e53      	subs	r3, r2, #1
   114da:	419a      	sbcs	r2, r3
   114dc:	4653      	mov	r3, sl
   114de:	4302      	orrs	r2, r0
   114e0:	40d9      	lsrs	r1, r3
   114e2:	e703      	b.n	112ec <__aeabi_dadd+0x1c0>
   114e4:	0026      	movs	r6, r4
   114e6:	433e      	orrs	r6, r7
   114e8:	d006      	beq.n	114f8 <__aeabi_dadd+0x3cc>
   114ea:	43eb      	mvns	r3, r5
   114ec:	4699      	mov	r9, r3
   114ee:	2b00      	cmp	r3, #0
   114f0:	d0c7      	beq.n	11482 <__aeabi_dadd+0x356>
   114f2:	4e94      	ldr	r6, [pc, #592]	; (11744 <__aeabi_dadd+0x618>)
   114f4:	42b0      	cmp	r0, r6
   114f6:	d1ac      	bne.n	11452 <__aeabi_dadd+0x326>
   114f8:	000c      	movs	r4, r1
   114fa:	0017      	movs	r7, r2
   114fc:	0006      	movs	r6, r0
   114fe:	46d8      	mov	r8, fp
   11500:	e698      	b.n	11234 <__aeabi_dadd+0x108>
   11502:	4b90      	ldr	r3, [pc, #576]	; (11744 <__aeabi_dadd+0x618>)
   11504:	459a      	cmp	sl, r3
   11506:	d00b      	beq.n	11520 <__aeabi_dadd+0x3f4>
   11508:	4682      	mov	sl, r0
   1150a:	e6e7      	b.n	112dc <__aeabi_dadd+0x1b0>
   1150c:	2800      	cmp	r0, #0
   1150e:	d000      	beq.n	11512 <__aeabi_dadd+0x3e6>
   11510:	e09e      	b.n	11650 <__aeabi_dadd+0x524>
   11512:	0018      	movs	r0, r3
   11514:	4310      	orrs	r0, r2
   11516:	d100      	bne.n	1151a <__aeabi_dadd+0x3ee>
   11518:	e0e9      	b.n	116ee <__aeabi_dadd+0x5c2>
   1151a:	001c      	movs	r4, r3
   1151c:	0017      	movs	r7, r2
   1151e:	46d8      	mov	r8, fp
   11520:	4e88      	ldr	r6, [pc, #544]	; (11744 <__aeabi_dadd+0x618>)
   11522:	e687      	b.n	11234 <__aeabi_dadd+0x108>
   11524:	2500      	movs	r5, #0
   11526:	e772      	b.n	1140e <__aeabi_dadd+0x2e2>
   11528:	2100      	movs	r1, #0
   1152a:	e782      	b.n	11432 <__aeabi_dadd+0x306>
   1152c:	0023      	movs	r3, r4
   1152e:	433b      	orrs	r3, r7
   11530:	2e00      	cmp	r6, #0
   11532:	d000      	beq.n	11536 <__aeabi_dadd+0x40a>
   11534:	e0ab      	b.n	1168e <__aeabi_dadd+0x562>
   11536:	2b00      	cmp	r3, #0
   11538:	d100      	bne.n	1153c <__aeabi_dadd+0x410>
   1153a:	e0e7      	b.n	1170c <__aeabi_dadd+0x5e0>
   1153c:	000b      	movs	r3, r1
   1153e:	4313      	orrs	r3, r2
   11540:	d100      	bne.n	11544 <__aeabi_dadd+0x418>
   11542:	e677      	b.n	11234 <__aeabi_dadd+0x108>
   11544:	18ba      	adds	r2, r7, r2
   11546:	42ba      	cmp	r2, r7
   11548:	41bf      	sbcs	r7, r7
   1154a:	1864      	adds	r4, r4, r1
   1154c:	427f      	negs	r7, r7
   1154e:	19e4      	adds	r4, r4, r7
   11550:	0223      	lsls	r3, r4, #8
   11552:	d400      	bmi.n	11556 <__aeabi_dadd+0x42a>
   11554:	e0f2      	b.n	1173c <__aeabi_dadd+0x610>
   11556:	4b7c      	ldr	r3, [pc, #496]	; (11748 <__aeabi_dadd+0x61c>)
   11558:	0017      	movs	r7, r2
   1155a:	401c      	ands	r4, r3
   1155c:	0006      	movs	r6, r0
   1155e:	e669      	b.n	11234 <__aeabi_dadd+0x108>
   11560:	0020      	movs	r0, r4
   11562:	4338      	orrs	r0, r7
   11564:	2e00      	cmp	r6, #0
   11566:	d1d1      	bne.n	1150c <__aeabi_dadd+0x3e0>
   11568:	2800      	cmp	r0, #0
   1156a:	d15b      	bne.n	11624 <__aeabi_dadd+0x4f8>
   1156c:	001c      	movs	r4, r3
   1156e:	4314      	orrs	r4, r2
   11570:	d100      	bne.n	11574 <__aeabi_dadd+0x448>
   11572:	e0a8      	b.n	116c6 <__aeabi_dadd+0x59a>
   11574:	001c      	movs	r4, r3
   11576:	0017      	movs	r7, r2
   11578:	46d8      	mov	r8, fp
   1157a:	e65b      	b.n	11234 <__aeabi_dadd+0x108>
   1157c:	0006      	movs	r6, r0
   1157e:	2400      	movs	r4, #0
   11580:	2700      	movs	r7, #0
   11582:	e697      	b.n	112b4 <__aeabi_dadd+0x188>
   11584:	4650      	mov	r0, sl
   11586:	000b      	movs	r3, r1
   11588:	3820      	subs	r0, #32
   1158a:	40c3      	lsrs	r3, r0
   1158c:	4699      	mov	r9, r3
   1158e:	4653      	mov	r3, sl
   11590:	2b20      	cmp	r3, #32
   11592:	d100      	bne.n	11596 <__aeabi_dadd+0x46a>
   11594:	e095      	b.n	116c2 <__aeabi_dadd+0x596>
   11596:	2340      	movs	r3, #64	; 0x40
   11598:	4650      	mov	r0, sl
   1159a:	1a1b      	subs	r3, r3, r0
   1159c:	4099      	lsls	r1, r3
   1159e:	430a      	orrs	r2, r1
   115a0:	1e51      	subs	r1, r2, #1
   115a2:	418a      	sbcs	r2, r1
   115a4:	464b      	mov	r3, r9
   115a6:	2100      	movs	r1, #0
   115a8:	431a      	orrs	r2, r3
   115aa:	e69f      	b.n	112ec <__aeabi_dadd+0x1c0>
   115ac:	2e00      	cmp	r6, #0
   115ae:	d130      	bne.n	11612 <__aeabi_dadd+0x4e6>
   115b0:	0026      	movs	r6, r4
   115b2:	433e      	orrs	r6, r7
   115b4:	d067      	beq.n	11686 <__aeabi_dadd+0x55a>
   115b6:	43db      	mvns	r3, r3
   115b8:	469a      	mov	sl, r3
   115ba:	2b00      	cmp	r3, #0
   115bc:	d01c      	beq.n	115f8 <__aeabi_dadd+0x4cc>
   115be:	4e61      	ldr	r6, [pc, #388]	; (11744 <__aeabi_dadd+0x618>)
   115c0:	42b0      	cmp	r0, r6
   115c2:	d060      	beq.n	11686 <__aeabi_dadd+0x55a>
   115c4:	4653      	mov	r3, sl
   115c6:	2b38      	cmp	r3, #56	; 0x38
   115c8:	dd00      	ble.n	115cc <__aeabi_dadd+0x4a0>
   115ca:	e096      	b.n	116fa <__aeabi_dadd+0x5ce>
   115cc:	2b1f      	cmp	r3, #31
   115ce:	dd00      	ble.n	115d2 <__aeabi_dadd+0x4a6>
   115d0:	e09f      	b.n	11712 <__aeabi_dadd+0x5e6>
   115d2:	2620      	movs	r6, #32
   115d4:	1af3      	subs	r3, r6, r3
   115d6:	0026      	movs	r6, r4
   115d8:	409e      	lsls	r6, r3
   115da:	469c      	mov	ip, r3
   115dc:	46b3      	mov	fp, r6
   115de:	4653      	mov	r3, sl
   115e0:	003e      	movs	r6, r7
   115e2:	40de      	lsrs	r6, r3
   115e4:	0033      	movs	r3, r6
   115e6:	465e      	mov	r6, fp
   115e8:	431e      	orrs	r6, r3
   115ea:	4663      	mov	r3, ip
   115ec:	409f      	lsls	r7, r3
   115ee:	1e7b      	subs	r3, r7, #1
   115f0:	419f      	sbcs	r7, r3
   115f2:	4653      	mov	r3, sl
   115f4:	40dc      	lsrs	r4, r3
   115f6:	4337      	orrs	r7, r6
   115f8:	18bf      	adds	r7, r7, r2
   115fa:	4297      	cmp	r7, r2
   115fc:	4192      	sbcs	r2, r2
   115fe:	1864      	adds	r4, r4, r1
   11600:	4252      	negs	r2, r2
   11602:	18a4      	adds	r4, r4, r2
   11604:	0006      	movs	r6, r0
   11606:	e678      	b.n	112fa <__aeabi_dadd+0x1ce>
   11608:	4327      	orrs	r7, r4
   1160a:	1e7c      	subs	r4, r7, #1
   1160c:	41a7      	sbcs	r7, r4
   1160e:	2400      	movs	r4, #0
   11610:	e737      	b.n	11482 <__aeabi_dadd+0x356>
   11612:	4e4c      	ldr	r6, [pc, #304]	; (11744 <__aeabi_dadd+0x618>)
   11614:	42b0      	cmp	r0, r6
   11616:	d036      	beq.n	11686 <__aeabi_dadd+0x55a>
   11618:	2680      	movs	r6, #128	; 0x80
   1161a:	425b      	negs	r3, r3
   1161c:	0436      	lsls	r6, r6, #16
   1161e:	469a      	mov	sl, r3
   11620:	4334      	orrs	r4, r6
   11622:	e7cf      	b.n	115c4 <__aeabi_dadd+0x498>
   11624:	0018      	movs	r0, r3
   11626:	4310      	orrs	r0, r2
   11628:	d100      	bne.n	1162c <__aeabi_dadd+0x500>
   1162a:	e603      	b.n	11234 <__aeabi_dadd+0x108>
   1162c:	1ab8      	subs	r0, r7, r2
   1162e:	4684      	mov	ip, r0
   11630:	4567      	cmp	r7, ip
   11632:	41ad      	sbcs	r5, r5
   11634:	1ae0      	subs	r0, r4, r3
   11636:	426d      	negs	r5, r5
   11638:	1b40      	subs	r0, r0, r5
   1163a:	0205      	lsls	r5, r0, #8
   1163c:	d400      	bmi.n	11640 <__aeabi_dadd+0x514>
   1163e:	e62c      	b.n	1129a <__aeabi_dadd+0x16e>
   11640:	1bd7      	subs	r7, r2, r7
   11642:	42ba      	cmp	r2, r7
   11644:	4192      	sbcs	r2, r2
   11646:	1b1c      	subs	r4, r3, r4
   11648:	4252      	negs	r2, r2
   1164a:	1aa4      	subs	r4, r4, r2
   1164c:	46d8      	mov	r8, fp
   1164e:	e5f1      	b.n	11234 <__aeabi_dadd+0x108>
   11650:	0018      	movs	r0, r3
   11652:	4310      	orrs	r0, r2
   11654:	d100      	bne.n	11658 <__aeabi_dadd+0x52c>
   11656:	e763      	b.n	11520 <__aeabi_dadd+0x3f4>
   11658:	08f8      	lsrs	r0, r7, #3
   1165a:	0767      	lsls	r7, r4, #29
   1165c:	4307      	orrs	r7, r0
   1165e:	2080      	movs	r0, #128	; 0x80
   11660:	08e4      	lsrs	r4, r4, #3
   11662:	0300      	lsls	r0, r0, #12
   11664:	4204      	tst	r4, r0
   11666:	d008      	beq.n	1167a <__aeabi_dadd+0x54e>
   11668:	08dd      	lsrs	r5, r3, #3
   1166a:	4205      	tst	r5, r0
   1166c:	d105      	bne.n	1167a <__aeabi_dadd+0x54e>
   1166e:	08d2      	lsrs	r2, r2, #3
   11670:	0759      	lsls	r1, r3, #29
   11672:	4311      	orrs	r1, r2
   11674:	000f      	movs	r7, r1
   11676:	002c      	movs	r4, r5
   11678:	46d8      	mov	r8, fp
   1167a:	0f7b      	lsrs	r3, r7, #29
   1167c:	00e4      	lsls	r4, r4, #3
   1167e:	431c      	orrs	r4, r3
   11680:	00ff      	lsls	r7, r7, #3
   11682:	4e30      	ldr	r6, [pc, #192]	; (11744 <__aeabi_dadd+0x618>)
   11684:	e5d6      	b.n	11234 <__aeabi_dadd+0x108>
   11686:	000c      	movs	r4, r1
   11688:	0017      	movs	r7, r2
   1168a:	0006      	movs	r6, r0
   1168c:	e5d2      	b.n	11234 <__aeabi_dadd+0x108>
   1168e:	2b00      	cmp	r3, #0
   11690:	d038      	beq.n	11704 <__aeabi_dadd+0x5d8>
   11692:	000b      	movs	r3, r1
   11694:	4313      	orrs	r3, r2
   11696:	d100      	bne.n	1169a <__aeabi_dadd+0x56e>
   11698:	e742      	b.n	11520 <__aeabi_dadd+0x3f4>
   1169a:	08f8      	lsrs	r0, r7, #3
   1169c:	0767      	lsls	r7, r4, #29
   1169e:	4307      	orrs	r7, r0
   116a0:	2080      	movs	r0, #128	; 0x80
   116a2:	08e4      	lsrs	r4, r4, #3
   116a4:	0300      	lsls	r0, r0, #12
   116a6:	4204      	tst	r4, r0
   116a8:	d0e7      	beq.n	1167a <__aeabi_dadd+0x54e>
   116aa:	08cb      	lsrs	r3, r1, #3
   116ac:	4203      	tst	r3, r0
   116ae:	d1e4      	bne.n	1167a <__aeabi_dadd+0x54e>
   116b0:	08d2      	lsrs	r2, r2, #3
   116b2:	0749      	lsls	r1, r1, #29
   116b4:	4311      	orrs	r1, r2
   116b6:	000f      	movs	r7, r1
   116b8:	001c      	movs	r4, r3
   116ba:	e7de      	b.n	1167a <__aeabi_dadd+0x54e>
   116bc:	2700      	movs	r7, #0
   116be:	2400      	movs	r4, #0
   116c0:	e5d5      	b.n	1126e <__aeabi_dadd+0x142>
   116c2:	2100      	movs	r1, #0
   116c4:	e76b      	b.n	1159e <__aeabi_dadd+0x472>
   116c6:	2500      	movs	r5, #0
   116c8:	2700      	movs	r7, #0
   116ca:	e5f3      	b.n	112b4 <__aeabi_dadd+0x188>
   116cc:	464e      	mov	r6, r9
   116ce:	0025      	movs	r5, r4
   116d0:	3e20      	subs	r6, #32
   116d2:	40f5      	lsrs	r5, r6
   116d4:	464b      	mov	r3, r9
   116d6:	002e      	movs	r6, r5
   116d8:	2b20      	cmp	r3, #32
   116da:	d02d      	beq.n	11738 <__aeabi_dadd+0x60c>
   116dc:	2540      	movs	r5, #64	; 0x40
   116de:	1aed      	subs	r5, r5, r3
   116e0:	40ac      	lsls	r4, r5
   116e2:	4327      	orrs	r7, r4
   116e4:	1e7c      	subs	r4, r7, #1
   116e6:	41a7      	sbcs	r7, r4
   116e8:	2400      	movs	r4, #0
   116ea:	4337      	orrs	r7, r6
   116ec:	e6c9      	b.n	11482 <__aeabi_dadd+0x356>
   116ee:	2480      	movs	r4, #128	; 0x80
   116f0:	2500      	movs	r5, #0
   116f2:	0324      	lsls	r4, r4, #12
   116f4:	4e13      	ldr	r6, [pc, #76]	; (11744 <__aeabi_dadd+0x618>)
   116f6:	2700      	movs	r7, #0
   116f8:	e5dc      	b.n	112b4 <__aeabi_dadd+0x188>
   116fa:	4327      	orrs	r7, r4
   116fc:	1e7c      	subs	r4, r7, #1
   116fe:	41a7      	sbcs	r7, r4
   11700:	2400      	movs	r4, #0
   11702:	e779      	b.n	115f8 <__aeabi_dadd+0x4cc>
   11704:	000c      	movs	r4, r1
   11706:	0017      	movs	r7, r2
   11708:	4e0e      	ldr	r6, [pc, #56]	; (11744 <__aeabi_dadd+0x618>)
   1170a:	e593      	b.n	11234 <__aeabi_dadd+0x108>
   1170c:	000c      	movs	r4, r1
   1170e:	0017      	movs	r7, r2
   11710:	e590      	b.n	11234 <__aeabi_dadd+0x108>
   11712:	4656      	mov	r6, sl
   11714:	0023      	movs	r3, r4
   11716:	3e20      	subs	r6, #32
   11718:	40f3      	lsrs	r3, r6
   1171a:	4699      	mov	r9, r3
   1171c:	4653      	mov	r3, sl
   1171e:	2b20      	cmp	r3, #32
   11720:	d00e      	beq.n	11740 <__aeabi_dadd+0x614>
   11722:	2340      	movs	r3, #64	; 0x40
   11724:	4656      	mov	r6, sl
   11726:	1b9b      	subs	r3, r3, r6
   11728:	409c      	lsls	r4, r3
   1172a:	4327      	orrs	r7, r4
   1172c:	1e7c      	subs	r4, r7, #1
   1172e:	41a7      	sbcs	r7, r4
   11730:	464b      	mov	r3, r9
   11732:	2400      	movs	r4, #0
   11734:	431f      	orrs	r7, r3
   11736:	e75f      	b.n	115f8 <__aeabi_dadd+0x4cc>
   11738:	2400      	movs	r4, #0
   1173a:	e7d2      	b.n	116e2 <__aeabi_dadd+0x5b6>
   1173c:	0017      	movs	r7, r2
   1173e:	e5b2      	b.n	112a6 <__aeabi_dadd+0x17a>
   11740:	2400      	movs	r4, #0
   11742:	e7f2      	b.n	1172a <__aeabi_dadd+0x5fe>
   11744:	000007ff 	.word	0x000007ff
   11748:	ff7fffff 	.word	0xff7fffff

0001174c <__aeabi_ddiv>:
   1174c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1174e:	4657      	mov	r7, sl
   11750:	4645      	mov	r5, r8
   11752:	46de      	mov	lr, fp
   11754:	464e      	mov	r6, r9
   11756:	b5e0      	push	{r5, r6, r7, lr}
   11758:	004c      	lsls	r4, r1, #1
   1175a:	030e      	lsls	r6, r1, #12
   1175c:	b087      	sub	sp, #28
   1175e:	4683      	mov	fp, r0
   11760:	4692      	mov	sl, r2
   11762:	001d      	movs	r5, r3
   11764:	4680      	mov	r8, r0
   11766:	0b36      	lsrs	r6, r6, #12
   11768:	0d64      	lsrs	r4, r4, #21
   1176a:	0fcf      	lsrs	r7, r1, #31
   1176c:	2c00      	cmp	r4, #0
   1176e:	d04f      	beq.n	11810 <__aeabi_ddiv+0xc4>
   11770:	4b6f      	ldr	r3, [pc, #444]	; (11930 <__aeabi_ddiv+0x1e4>)
   11772:	429c      	cmp	r4, r3
   11774:	d035      	beq.n	117e2 <__aeabi_ddiv+0x96>
   11776:	2380      	movs	r3, #128	; 0x80
   11778:	0f42      	lsrs	r2, r0, #29
   1177a:	041b      	lsls	r3, r3, #16
   1177c:	00f6      	lsls	r6, r6, #3
   1177e:	4313      	orrs	r3, r2
   11780:	4333      	orrs	r3, r6
   11782:	4699      	mov	r9, r3
   11784:	00c3      	lsls	r3, r0, #3
   11786:	4698      	mov	r8, r3
   11788:	4b6a      	ldr	r3, [pc, #424]	; (11934 <__aeabi_ddiv+0x1e8>)
   1178a:	2600      	movs	r6, #0
   1178c:	469c      	mov	ip, r3
   1178e:	2300      	movs	r3, #0
   11790:	4464      	add	r4, ip
   11792:	9303      	str	r3, [sp, #12]
   11794:	032b      	lsls	r3, r5, #12
   11796:	0b1b      	lsrs	r3, r3, #12
   11798:	469b      	mov	fp, r3
   1179a:	006b      	lsls	r3, r5, #1
   1179c:	0fed      	lsrs	r5, r5, #31
   1179e:	4650      	mov	r0, sl
   117a0:	0d5b      	lsrs	r3, r3, #21
   117a2:	9501      	str	r5, [sp, #4]
   117a4:	d05e      	beq.n	11864 <__aeabi_ddiv+0x118>
   117a6:	4a62      	ldr	r2, [pc, #392]	; (11930 <__aeabi_ddiv+0x1e4>)
   117a8:	4293      	cmp	r3, r2
   117aa:	d053      	beq.n	11854 <__aeabi_ddiv+0x108>
   117ac:	465a      	mov	r2, fp
   117ae:	00d1      	lsls	r1, r2, #3
   117b0:	2280      	movs	r2, #128	; 0x80
   117b2:	0f40      	lsrs	r0, r0, #29
   117b4:	0412      	lsls	r2, r2, #16
   117b6:	4302      	orrs	r2, r0
   117b8:	430a      	orrs	r2, r1
   117ba:	4693      	mov	fp, r2
   117bc:	4652      	mov	r2, sl
   117be:	00d1      	lsls	r1, r2, #3
   117c0:	4a5c      	ldr	r2, [pc, #368]	; (11934 <__aeabi_ddiv+0x1e8>)
   117c2:	4694      	mov	ip, r2
   117c4:	2200      	movs	r2, #0
   117c6:	4463      	add	r3, ip
   117c8:	0038      	movs	r0, r7
   117ca:	4068      	eors	r0, r5
   117cc:	4684      	mov	ip, r0
   117ce:	9002      	str	r0, [sp, #8]
   117d0:	1ae4      	subs	r4, r4, r3
   117d2:	4316      	orrs	r6, r2
   117d4:	2e0f      	cmp	r6, #15
   117d6:	d900      	bls.n	117da <__aeabi_ddiv+0x8e>
   117d8:	e0b4      	b.n	11944 <__aeabi_ddiv+0x1f8>
   117da:	4b57      	ldr	r3, [pc, #348]	; (11938 <__aeabi_ddiv+0x1ec>)
   117dc:	00b6      	lsls	r6, r6, #2
   117de:	599b      	ldr	r3, [r3, r6]
   117e0:	469f      	mov	pc, r3
   117e2:	0003      	movs	r3, r0
   117e4:	4333      	orrs	r3, r6
   117e6:	4699      	mov	r9, r3
   117e8:	d16c      	bne.n	118c4 <__aeabi_ddiv+0x178>
   117ea:	2300      	movs	r3, #0
   117ec:	4698      	mov	r8, r3
   117ee:	3302      	adds	r3, #2
   117f0:	2608      	movs	r6, #8
   117f2:	9303      	str	r3, [sp, #12]
   117f4:	e7ce      	b.n	11794 <__aeabi_ddiv+0x48>
   117f6:	46cb      	mov	fp, r9
   117f8:	4641      	mov	r1, r8
   117fa:	9a03      	ldr	r2, [sp, #12]
   117fc:	9701      	str	r7, [sp, #4]
   117fe:	2a02      	cmp	r2, #2
   11800:	d165      	bne.n	118ce <__aeabi_ddiv+0x182>
   11802:	9b01      	ldr	r3, [sp, #4]
   11804:	4c4a      	ldr	r4, [pc, #296]	; (11930 <__aeabi_ddiv+0x1e4>)
   11806:	469c      	mov	ip, r3
   11808:	2300      	movs	r3, #0
   1180a:	2200      	movs	r2, #0
   1180c:	4698      	mov	r8, r3
   1180e:	e06b      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11810:	0003      	movs	r3, r0
   11812:	4333      	orrs	r3, r6
   11814:	4699      	mov	r9, r3
   11816:	d04e      	beq.n	118b6 <__aeabi_ddiv+0x16a>
   11818:	2e00      	cmp	r6, #0
   1181a:	d100      	bne.n	1181e <__aeabi_ddiv+0xd2>
   1181c:	e1bc      	b.n	11b98 <__aeabi_ddiv+0x44c>
   1181e:	0030      	movs	r0, r6
   11820:	f7fe fc58 	bl	100d4 <__clzsi2>
   11824:	0003      	movs	r3, r0
   11826:	3b0b      	subs	r3, #11
   11828:	2b1c      	cmp	r3, #28
   1182a:	dd00      	ble.n	1182e <__aeabi_ddiv+0xe2>
   1182c:	e1ac      	b.n	11b88 <__aeabi_ddiv+0x43c>
   1182e:	221d      	movs	r2, #29
   11830:	1ad3      	subs	r3, r2, r3
   11832:	465a      	mov	r2, fp
   11834:	0001      	movs	r1, r0
   11836:	40da      	lsrs	r2, r3
   11838:	3908      	subs	r1, #8
   1183a:	408e      	lsls	r6, r1
   1183c:	0013      	movs	r3, r2
   1183e:	4333      	orrs	r3, r6
   11840:	4699      	mov	r9, r3
   11842:	465b      	mov	r3, fp
   11844:	408b      	lsls	r3, r1
   11846:	4698      	mov	r8, r3
   11848:	2300      	movs	r3, #0
   1184a:	4c3c      	ldr	r4, [pc, #240]	; (1193c <__aeabi_ddiv+0x1f0>)
   1184c:	2600      	movs	r6, #0
   1184e:	1a24      	subs	r4, r4, r0
   11850:	9303      	str	r3, [sp, #12]
   11852:	e79f      	b.n	11794 <__aeabi_ddiv+0x48>
   11854:	4651      	mov	r1, sl
   11856:	465a      	mov	r2, fp
   11858:	4311      	orrs	r1, r2
   1185a:	d129      	bne.n	118b0 <__aeabi_ddiv+0x164>
   1185c:	2200      	movs	r2, #0
   1185e:	4693      	mov	fp, r2
   11860:	3202      	adds	r2, #2
   11862:	e7b1      	b.n	117c8 <__aeabi_ddiv+0x7c>
   11864:	4659      	mov	r1, fp
   11866:	4301      	orrs	r1, r0
   11868:	d01e      	beq.n	118a8 <__aeabi_ddiv+0x15c>
   1186a:	465b      	mov	r3, fp
   1186c:	2b00      	cmp	r3, #0
   1186e:	d100      	bne.n	11872 <__aeabi_ddiv+0x126>
   11870:	e19e      	b.n	11bb0 <__aeabi_ddiv+0x464>
   11872:	4658      	mov	r0, fp
   11874:	f7fe fc2e 	bl	100d4 <__clzsi2>
   11878:	0003      	movs	r3, r0
   1187a:	3b0b      	subs	r3, #11
   1187c:	2b1c      	cmp	r3, #28
   1187e:	dd00      	ble.n	11882 <__aeabi_ddiv+0x136>
   11880:	e18f      	b.n	11ba2 <__aeabi_ddiv+0x456>
   11882:	0002      	movs	r2, r0
   11884:	4659      	mov	r1, fp
   11886:	3a08      	subs	r2, #8
   11888:	4091      	lsls	r1, r2
   1188a:	468b      	mov	fp, r1
   1188c:	211d      	movs	r1, #29
   1188e:	1acb      	subs	r3, r1, r3
   11890:	4651      	mov	r1, sl
   11892:	40d9      	lsrs	r1, r3
   11894:	000b      	movs	r3, r1
   11896:	4659      	mov	r1, fp
   11898:	430b      	orrs	r3, r1
   1189a:	4651      	mov	r1, sl
   1189c:	469b      	mov	fp, r3
   1189e:	4091      	lsls	r1, r2
   118a0:	4b26      	ldr	r3, [pc, #152]	; (1193c <__aeabi_ddiv+0x1f0>)
   118a2:	2200      	movs	r2, #0
   118a4:	1a1b      	subs	r3, r3, r0
   118a6:	e78f      	b.n	117c8 <__aeabi_ddiv+0x7c>
   118a8:	2300      	movs	r3, #0
   118aa:	2201      	movs	r2, #1
   118ac:	469b      	mov	fp, r3
   118ae:	e78b      	b.n	117c8 <__aeabi_ddiv+0x7c>
   118b0:	4651      	mov	r1, sl
   118b2:	2203      	movs	r2, #3
   118b4:	e788      	b.n	117c8 <__aeabi_ddiv+0x7c>
   118b6:	2300      	movs	r3, #0
   118b8:	4698      	mov	r8, r3
   118ba:	3301      	adds	r3, #1
   118bc:	2604      	movs	r6, #4
   118be:	2400      	movs	r4, #0
   118c0:	9303      	str	r3, [sp, #12]
   118c2:	e767      	b.n	11794 <__aeabi_ddiv+0x48>
   118c4:	2303      	movs	r3, #3
   118c6:	46b1      	mov	r9, r6
   118c8:	9303      	str	r3, [sp, #12]
   118ca:	260c      	movs	r6, #12
   118cc:	e762      	b.n	11794 <__aeabi_ddiv+0x48>
   118ce:	2a03      	cmp	r2, #3
   118d0:	d100      	bne.n	118d4 <__aeabi_ddiv+0x188>
   118d2:	e25c      	b.n	11d8e <__aeabi_ddiv+0x642>
   118d4:	9b01      	ldr	r3, [sp, #4]
   118d6:	2a01      	cmp	r2, #1
   118d8:	d000      	beq.n	118dc <__aeabi_ddiv+0x190>
   118da:	e1e4      	b.n	11ca6 <__aeabi_ddiv+0x55a>
   118dc:	4013      	ands	r3, r2
   118de:	469c      	mov	ip, r3
   118e0:	2300      	movs	r3, #0
   118e2:	2400      	movs	r4, #0
   118e4:	2200      	movs	r2, #0
   118e6:	4698      	mov	r8, r3
   118e8:	2100      	movs	r1, #0
   118ea:	0312      	lsls	r2, r2, #12
   118ec:	0b13      	lsrs	r3, r2, #12
   118ee:	0d0a      	lsrs	r2, r1, #20
   118f0:	0512      	lsls	r2, r2, #20
   118f2:	431a      	orrs	r2, r3
   118f4:	0523      	lsls	r3, r4, #20
   118f6:	4c12      	ldr	r4, [pc, #72]	; (11940 <__aeabi_ddiv+0x1f4>)
   118f8:	4640      	mov	r0, r8
   118fa:	4022      	ands	r2, r4
   118fc:	4313      	orrs	r3, r2
   118fe:	4662      	mov	r2, ip
   11900:	005b      	lsls	r3, r3, #1
   11902:	07d2      	lsls	r2, r2, #31
   11904:	085b      	lsrs	r3, r3, #1
   11906:	4313      	orrs	r3, r2
   11908:	0019      	movs	r1, r3
   1190a:	b007      	add	sp, #28
   1190c:	bc3c      	pop	{r2, r3, r4, r5}
   1190e:	4690      	mov	r8, r2
   11910:	4699      	mov	r9, r3
   11912:	46a2      	mov	sl, r4
   11914:	46ab      	mov	fp, r5
   11916:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11918:	2300      	movs	r3, #0
   1191a:	2280      	movs	r2, #128	; 0x80
   1191c:	469c      	mov	ip, r3
   1191e:	0312      	lsls	r2, r2, #12
   11920:	4698      	mov	r8, r3
   11922:	4c03      	ldr	r4, [pc, #12]	; (11930 <__aeabi_ddiv+0x1e4>)
   11924:	e7e0      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11926:	2300      	movs	r3, #0
   11928:	4c01      	ldr	r4, [pc, #4]	; (11930 <__aeabi_ddiv+0x1e4>)
   1192a:	2200      	movs	r2, #0
   1192c:	4698      	mov	r8, r3
   1192e:	e7db      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11930:	000007ff 	.word	0x000007ff
   11934:	fffffc01 	.word	0xfffffc01
   11938:	00013c28 	.word	0x00013c28
   1193c:	fffffc0d 	.word	0xfffffc0d
   11940:	800fffff 	.word	0x800fffff
   11944:	45d9      	cmp	r9, fp
   11946:	d900      	bls.n	1194a <__aeabi_ddiv+0x1fe>
   11948:	e139      	b.n	11bbe <__aeabi_ddiv+0x472>
   1194a:	d100      	bne.n	1194e <__aeabi_ddiv+0x202>
   1194c:	e134      	b.n	11bb8 <__aeabi_ddiv+0x46c>
   1194e:	2300      	movs	r3, #0
   11950:	4646      	mov	r6, r8
   11952:	464d      	mov	r5, r9
   11954:	469a      	mov	sl, r3
   11956:	3c01      	subs	r4, #1
   11958:	465b      	mov	r3, fp
   1195a:	0e0a      	lsrs	r2, r1, #24
   1195c:	021b      	lsls	r3, r3, #8
   1195e:	431a      	orrs	r2, r3
   11960:	020b      	lsls	r3, r1, #8
   11962:	0c17      	lsrs	r7, r2, #16
   11964:	9303      	str	r3, [sp, #12]
   11966:	0413      	lsls	r3, r2, #16
   11968:	0c1b      	lsrs	r3, r3, #16
   1196a:	0039      	movs	r1, r7
   1196c:	0028      	movs	r0, r5
   1196e:	4690      	mov	r8, r2
   11970:	9301      	str	r3, [sp, #4]
   11972:	f7fe f9ff 	bl	fd74 <__udivsi3>
   11976:	0002      	movs	r2, r0
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	4683      	mov	fp, r0
   1197c:	435a      	muls	r2, r3
   1197e:	0028      	movs	r0, r5
   11980:	0039      	movs	r1, r7
   11982:	4691      	mov	r9, r2
   11984:	f7fe fa7c 	bl	fe80 <__aeabi_uidivmod>
   11988:	0c35      	lsrs	r5, r6, #16
   1198a:	0409      	lsls	r1, r1, #16
   1198c:	430d      	orrs	r5, r1
   1198e:	45a9      	cmp	r9, r5
   11990:	d90d      	bls.n	119ae <__aeabi_ddiv+0x262>
   11992:	465b      	mov	r3, fp
   11994:	4445      	add	r5, r8
   11996:	3b01      	subs	r3, #1
   11998:	45a8      	cmp	r8, r5
   1199a:	d900      	bls.n	1199e <__aeabi_ddiv+0x252>
   1199c:	e13a      	b.n	11c14 <__aeabi_ddiv+0x4c8>
   1199e:	45a9      	cmp	r9, r5
   119a0:	d800      	bhi.n	119a4 <__aeabi_ddiv+0x258>
   119a2:	e137      	b.n	11c14 <__aeabi_ddiv+0x4c8>
   119a4:	2302      	movs	r3, #2
   119a6:	425b      	negs	r3, r3
   119a8:	469c      	mov	ip, r3
   119aa:	4445      	add	r5, r8
   119ac:	44e3      	add	fp, ip
   119ae:	464b      	mov	r3, r9
   119b0:	1aeb      	subs	r3, r5, r3
   119b2:	0039      	movs	r1, r7
   119b4:	0018      	movs	r0, r3
   119b6:	9304      	str	r3, [sp, #16]
   119b8:	f7fe f9dc 	bl	fd74 <__udivsi3>
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	0005      	movs	r5, r0
   119c0:	4343      	muls	r3, r0
   119c2:	0039      	movs	r1, r7
   119c4:	9804      	ldr	r0, [sp, #16]
   119c6:	4699      	mov	r9, r3
   119c8:	f7fe fa5a 	bl	fe80 <__aeabi_uidivmod>
   119cc:	0433      	lsls	r3, r6, #16
   119ce:	0409      	lsls	r1, r1, #16
   119d0:	0c1b      	lsrs	r3, r3, #16
   119d2:	430b      	orrs	r3, r1
   119d4:	4599      	cmp	r9, r3
   119d6:	d909      	bls.n	119ec <__aeabi_ddiv+0x2a0>
   119d8:	4443      	add	r3, r8
   119da:	1e6a      	subs	r2, r5, #1
   119dc:	4598      	cmp	r8, r3
   119de:	d900      	bls.n	119e2 <__aeabi_ddiv+0x296>
   119e0:	e11a      	b.n	11c18 <__aeabi_ddiv+0x4cc>
   119e2:	4599      	cmp	r9, r3
   119e4:	d800      	bhi.n	119e8 <__aeabi_ddiv+0x29c>
   119e6:	e117      	b.n	11c18 <__aeabi_ddiv+0x4cc>
   119e8:	3d02      	subs	r5, #2
   119ea:	4443      	add	r3, r8
   119ec:	464a      	mov	r2, r9
   119ee:	1a9b      	subs	r3, r3, r2
   119f0:	465a      	mov	r2, fp
   119f2:	0412      	lsls	r2, r2, #16
   119f4:	432a      	orrs	r2, r5
   119f6:	9903      	ldr	r1, [sp, #12]
   119f8:	4693      	mov	fp, r2
   119fa:	0c10      	lsrs	r0, r2, #16
   119fc:	0c0a      	lsrs	r2, r1, #16
   119fe:	4691      	mov	r9, r2
   11a00:	0409      	lsls	r1, r1, #16
   11a02:	465a      	mov	r2, fp
   11a04:	0c09      	lsrs	r1, r1, #16
   11a06:	464e      	mov	r6, r9
   11a08:	000d      	movs	r5, r1
   11a0a:	0412      	lsls	r2, r2, #16
   11a0c:	0c12      	lsrs	r2, r2, #16
   11a0e:	4345      	muls	r5, r0
   11a10:	9105      	str	r1, [sp, #20]
   11a12:	4351      	muls	r1, r2
   11a14:	4372      	muls	r2, r6
   11a16:	4370      	muls	r0, r6
   11a18:	1952      	adds	r2, r2, r5
   11a1a:	0c0e      	lsrs	r6, r1, #16
   11a1c:	18b2      	adds	r2, r6, r2
   11a1e:	4295      	cmp	r5, r2
   11a20:	d903      	bls.n	11a2a <__aeabi_ddiv+0x2de>
   11a22:	2580      	movs	r5, #128	; 0x80
   11a24:	026d      	lsls	r5, r5, #9
   11a26:	46ac      	mov	ip, r5
   11a28:	4460      	add	r0, ip
   11a2a:	0c15      	lsrs	r5, r2, #16
   11a2c:	0409      	lsls	r1, r1, #16
   11a2e:	0412      	lsls	r2, r2, #16
   11a30:	0c09      	lsrs	r1, r1, #16
   11a32:	1828      	adds	r0, r5, r0
   11a34:	1852      	adds	r2, r2, r1
   11a36:	4283      	cmp	r3, r0
   11a38:	d200      	bcs.n	11a3c <__aeabi_ddiv+0x2f0>
   11a3a:	e0ce      	b.n	11bda <__aeabi_ddiv+0x48e>
   11a3c:	d100      	bne.n	11a40 <__aeabi_ddiv+0x2f4>
   11a3e:	e0c8      	b.n	11bd2 <__aeabi_ddiv+0x486>
   11a40:	1a1d      	subs	r5, r3, r0
   11a42:	4653      	mov	r3, sl
   11a44:	1a9e      	subs	r6, r3, r2
   11a46:	45b2      	cmp	sl, r6
   11a48:	4192      	sbcs	r2, r2
   11a4a:	4252      	negs	r2, r2
   11a4c:	1aab      	subs	r3, r5, r2
   11a4e:	469a      	mov	sl, r3
   11a50:	4598      	cmp	r8, r3
   11a52:	d100      	bne.n	11a56 <__aeabi_ddiv+0x30a>
   11a54:	e117      	b.n	11c86 <__aeabi_ddiv+0x53a>
   11a56:	0039      	movs	r1, r7
   11a58:	0018      	movs	r0, r3
   11a5a:	f7fe f98b 	bl	fd74 <__udivsi3>
   11a5e:	9b01      	ldr	r3, [sp, #4]
   11a60:	0005      	movs	r5, r0
   11a62:	4343      	muls	r3, r0
   11a64:	0039      	movs	r1, r7
   11a66:	4650      	mov	r0, sl
   11a68:	9304      	str	r3, [sp, #16]
   11a6a:	f7fe fa09 	bl	fe80 <__aeabi_uidivmod>
   11a6e:	9804      	ldr	r0, [sp, #16]
   11a70:	040b      	lsls	r3, r1, #16
   11a72:	0c31      	lsrs	r1, r6, #16
   11a74:	4319      	orrs	r1, r3
   11a76:	4288      	cmp	r0, r1
   11a78:	d909      	bls.n	11a8e <__aeabi_ddiv+0x342>
   11a7a:	4441      	add	r1, r8
   11a7c:	1e6b      	subs	r3, r5, #1
   11a7e:	4588      	cmp	r8, r1
   11a80:	d900      	bls.n	11a84 <__aeabi_ddiv+0x338>
   11a82:	e107      	b.n	11c94 <__aeabi_ddiv+0x548>
   11a84:	4288      	cmp	r0, r1
   11a86:	d800      	bhi.n	11a8a <__aeabi_ddiv+0x33e>
   11a88:	e104      	b.n	11c94 <__aeabi_ddiv+0x548>
   11a8a:	3d02      	subs	r5, #2
   11a8c:	4441      	add	r1, r8
   11a8e:	9b04      	ldr	r3, [sp, #16]
   11a90:	1acb      	subs	r3, r1, r3
   11a92:	0018      	movs	r0, r3
   11a94:	0039      	movs	r1, r7
   11a96:	9304      	str	r3, [sp, #16]
   11a98:	f7fe f96c 	bl	fd74 <__udivsi3>
   11a9c:	9b01      	ldr	r3, [sp, #4]
   11a9e:	4682      	mov	sl, r0
   11aa0:	4343      	muls	r3, r0
   11aa2:	0039      	movs	r1, r7
   11aa4:	9804      	ldr	r0, [sp, #16]
   11aa6:	9301      	str	r3, [sp, #4]
   11aa8:	f7fe f9ea 	bl	fe80 <__aeabi_uidivmod>
   11aac:	9801      	ldr	r0, [sp, #4]
   11aae:	040b      	lsls	r3, r1, #16
   11ab0:	0431      	lsls	r1, r6, #16
   11ab2:	0c09      	lsrs	r1, r1, #16
   11ab4:	4319      	orrs	r1, r3
   11ab6:	4288      	cmp	r0, r1
   11ab8:	d90d      	bls.n	11ad6 <__aeabi_ddiv+0x38a>
   11aba:	4653      	mov	r3, sl
   11abc:	4441      	add	r1, r8
   11abe:	3b01      	subs	r3, #1
   11ac0:	4588      	cmp	r8, r1
   11ac2:	d900      	bls.n	11ac6 <__aeabi_ddiv+0x37a>
   11ac4:	e0e8      	b.n	11c98 <__aeabi_ddiv+0x54c>
   11ac6:	4288      	cmp	r0, r1
   11ac8:	d800      	bhi.n	11acc <__aeabi_ddiv+0x380>
   11aca:	e0e5      	b.n	11c98 <__aeabi_ddiv+0x54c>
   11acc:	2302      	movs	r3, #2
   11ace:	425b      	negs	r3, r3
   11ad0:	469c      	mov	ip, r3
   11ad2:	4441      	add	r1, r8
   11ad4:	44e2      	add	sl, ip
   11ad6:	9b01      	ldr	r3, [sp, #4]
   11ad8:	042d      	lsls	r5, r5, #16
   11ada:	1ace      	subs	r6, r1, r3
   11adc:	4651      	mov	r1, sl
   11ade:	4329      	orrs	r1, r5
   11ae0:	9d05      	ldr	r5, [sp, #20]
   11ae2:	464f      	mov	r7, r9
   11ae4:	002a      	movs	r2, r5
   11ae6:	040b      	lsls	r3, r1, #16
   11ae8:	0c08      	lsrs	r0, r1, #16
   11aea:	0c1b      	lsrs	r3, r3, #16
   11aec:	435a      	muls	r2, r3
   11aee:	4345      	muls	r5, r0
   11af0:	437b      	muls	r3, r7
   11af2:	4378      	muls	r0, r7
   11af4:	195b      	adds	r3, r3, r5
   11af6:	0c17      	lsrs	r7, r2, #16
   11af8:	18fb      	adds	r3, r7, r3
   11afa:	429d      	cmp	r5, r3
   11afc:	d903      	bls.n	11b06 <__aeabi_ddiv+0x3ba>
   11afe:	2580      	movs	r5, #128	; 0x80
   11b00:	026d      	lsls	r5, r5, #9
   11b02:	46ac      	mov	ip, r5
   11b04:	4460      	add	r0, ip
   11b06:	0c1d      	lsrs	r5, r3, #16
   11b08:	0412      	lsls	r2, r2, #16
   11b0a:	041b      	lsls	r3, r3, #16
   11b0c:	0c12      	lsrs	r2, r2, #16
   11b0e:	1828      	adds	r0, r5, r0
   11b10:	189b      	adds	r3, r3, r2
   11b12:	4286      	cmp	r6, r0
   11b14:	d200      	bcs.n	11b18 <__aeabi_ddiv+0x3cc>
   11b16:	e093      	b.n	11c40 <__aeabi_ddiv+0x4f4>
   11b18:	d100      	bne.n	11b1c <__aeabi_ddiv+0x3d0>
   11b1a:	e08e      	b.n	11c3a <__aeabi_ddiv+0x4ee>
   11b1c:	2301      	movs	r3, #1
   11b1e:	4319      	orrs	r1, r3
   11b20:	4ba0      	ldr	r3, [pc, #640]	; (11da4 <__aeabi_ddiv+0x658>)
   11b22:	18e3      	adds	r3, r4, r3
   11b24:	2b00      	cmp	r3, #0
   11b26:	dc00      	bgt.n	11b2a <__aeabi_ddiv+0x3de>
   11b28:	e099      	b.n	11c5e <__aeabi_ddiv+0x512>
   11b2a:	074a      	lsls	r2, r1, #29
   11b2c:	d000      	beq.n	11b30 <__aeabi_ddiv+0x3e4>
   11b2e:	e09e      	b.n	11c6e <__aeabi_ddiv+0x522>
   11b30:	465a      	mov	r2, fp
   11b32:	01d2      	lsls	r2, r2, #7
   11b34:	d506      	bpl.n	11b44 <__aeabi_ddiv+0x3f8>
   11b36:	465a      	mov	r2, fp
   11b38:	4b9b      	ldr	r3, [pc, #620]	; (11da8 <__aeabi_ddiv+0x65c>)
   11b3a:	401a      	ands	r2, r3
   11b3c:	2380      	movs	r3, #128	; 0x80
   11b3e:	4693      	mov	fp, r2
   11b40:	00db      	lsls	r3, r3, #3
   11b42:	18e3      	adds	r3, r4, r3
   11b44:	4a99      	ldr	r2, [pc, #612]	; (11dac <__aeabi_ddiv+0x660>)
   11b46:	4293      	cmp	r3, r2
   11b48:	dd68      	ble.n	11c1c <__aeabi_ddiv+0x4d0>
   11b4a:	2301      	movs	r3, #1
   11b4c:	9a02      	ldr	r2, [sp, #8]
   11b4e:	4c98      	ldr	r4, [pc, #608]	; (11db0 <__aeabi_ddiv+0x664>)
   11b50:	401a      	ands	r2, r3
   11b52:	2300      	movs	r3, #0
   11b54:	4694      	mov	ip, r2
   11b56:	4698      	mov	r8, r3
   11b58:	2200      	movs	r2, #0
   11b5a:	e6c5      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11b5c:	2280      	movs	r2, #128	; 0x80
   11b5e:	464b      	mov	r3, r9
   11b60:	0312      	lsls	r2, r2, #12
   11b62:	4213      	tst	r3, r2
   11b64:	d00a      	beq.n	11b7c <__aeabi_ddiv+0x430>
   11b66:	465b      	mov	r3, fp
   11b68:	4213      	tst	r3, r2
   11b6a:	d106      	bne.n	11b7a <__aeabi_ddiv+0x42e>
   11b6c:	431a      	orrs	r2, r3
   11b6e:	0312      	lsls	r2, r2, #12
   11b70:	0b12      	lsrs	r2, r2, #12
   11b72:	46ac      	mov	ip, r5
   11b74:	4688      	mov	r8, r1
   11b76:	4c8e      	ldr	r4, [pc, #568]	; (11db0 <__aeabi_ddiv+0x664>)
   11b78:	e6b6      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11b7a:	464b      	mov	r3, r9
   11b7c:	431a      	orrs	r2, r3
   11b7e:	0312      	lsls	r2, r2, #12
   11b80:	0b12      	lsrs	r2, r2, #12
   11b82:	46bc      	mov	ip, r7
   11b84:	4c8a      	ldr	r4, [pc, #552]	; (11db0 <__aeabi_ddiv+0x664>)
   11b86:	e6af      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11b88:	0003      	movs	r3, r0
   11b8a:	465a      	mov	r2, fp
   11b8c:	3b28      	subs	r3, #40	; 0x28
   11b8e:	409a      	lsls	r2, r3
   11b90:	2300      	movs	r3, #0
   11b92:	4691      	mov	r9, r2
   11b94:	4698      	mov	r8, r3
   11b96:	e657      	b.n	11848 <__aeabi_ddiv+0xfc>
   11b98:	4658      	mov	r0, fp
   11b9a:	f7fe fa9b 	bl	100d4 <__clzsi2>
   11b9e:	3020      	adds	r0, #32
   11ba0:	e640      	b.n	11824 <__aeabi_ddiv+0xd8>
   11ba2:	0003      	movs	r3, r0
   11ba4:	4652      	mov	r2, sl
   11ba6:	3b28      	subs	r3, #40	; 0x28
   11ba8:	409a      	lsls	r2, r3
   11baa:	2100      	movs	r1, #0
   11bac:	4693      	mov	fp, r2
   11bae:	e677      	b.n	118a0 <__aeabi_ddiv+0x154>
   11bb0:	f7fe fa90 	bl	100d4 <__clzsi2>
   11bb4:	3020      	adds	r0, #32
   11bb6:	e65f      	b.n	11878 <__aeabi_ddiv+0x12c>
   11bb8:	4588      	cmp	r8, r1
   11bba:	d200      	bcs.n	11bbe <__aeabi_ddiv+0x472>
   11bbc:	e6c7      	b.n	1194e <__aeabi_ddiv+0x202>
   11bbe:	464b      	mov	r3, r9
   11bc0:	07de      	lsls	r6, r3, #31
   11bc2:	085d      	lsrs	r5, r3, #1
   11bc4:	4643      	mov	r3, r8
   11bc6:	085b      	lsrs	r3, r3, #1
   11bc8:	431e      	orrs	r6, r3
   11bca:	4643      	mov	r3, r8
   11bcc:	07db      	lsls	r3, r3, #31
   11bce:	469a      	mov	sl, r3
   11bd0:	e6c2      	b.n	11958 <__aeabi_ddiv+0x20c>
   11bd2:	2500      	movs	r5, #0
   11bd4:	4592      	cmp	sl, r2
   11bd6:	d300      	bcc.n	11bda <__aeabi_ddiv+0x48e>
   11bd8:	e733      	b.n	11a42 <__aeabi_ddiv+0x2f6>
   11bda:	9e03      	ldr	r6, [sp, #12]
   11bdc:	4659      	mov	r1, fp
   11bde:	46b4      	mov	ip, r6
   11be0:	44e2      	add	sl, ip
   11be2:	45b2      	cmp	sl, r6
   11be4:	41ad      	sbcs	r5, r5
   11be6:	426d      	negs	r5, r5
   11be8:	4445      	add	r5, r8
   11bea:	18eb      	adds	r3, r5, r3
   11bec:	3901      	subs	r1, #1
   11bee:	4598      	cmp	r8, r3
   11bf0:	d207      	bcs.n	11c02 <__aeabi_ddiv+0x4b6>
   11bf2:	4298      	cmp	r0, r3
   11bf4:	d900      	bls.n	11bf8 <__aeabi_ddiv+0x4ac>
   11bf6:	e07f      	b.n	11cf8 <__aeabi_ddiv+0x5ac>
   11bf8:	d100      	bne.n	11bfc <__aeabi_ddiv+0x4b0>
   11bfa:	e0bc      	b.n	11d76 <__aeabi_ddiv+0x62a>
   11bfc:	1a1d      	subs	r5, r3, r0
   11bfe:	468b      	mov	fp, r1
   11c00:	e71f      	b.n	11a42 <__aeabi_ddiv+0x2f6>
   11c02:	4598      	cmp	r8, r3
   11c04:	d1fa      	bne.n	11bfc <__aeabi_ddiv+0x4b0>
   11c06:	9d03      	ldr	r5, [sp, #12]
   11c08:	4555      	cmp	r5, sl
   11c0a:	d9f2      	bls.n	11bf2 <__aeabi_ddiv+0x4a6>
   11c0c:	4643      	mov	r3, r8
   11c0e:	468b      	mov	fp, r1
   11c10:	1a1d      	subs	r5, r3, r0
   11c12:	e716      	b.n	11a42 <__aeabi_ddiv+0x2f6>
   11c14:	469b      	mov	fp, r3
   11c16:	e6ca      	b.n	119ae <__aeabi_ddiv+0x262>
   11c18:	0015      	movs	r5, r2
   11c1a:	e6e7      	b.n	119ec <__aeabi_ddiv+0x2a0>
   11c1c:	465a      	mov	r2, fp
   11c1e:	08c9      	lsrs	r1, r1, #3
   11c20:	0752      	lsls	r2, r2, #29
   11c22:	430a      	orrs	r2, r1
   11c24:	055b      	lsls	r3, r3, #21
   11c26:	4690      	mov	r8, r2
   11c28:	0d5c      	lsrs	r4, r3, #21
   11c2a:	465a      	mov	r2, fp
   11c2c:	2301      	movs	r3, #1
   11c2e:	9902      	ldr	r1, [sp, #8]
   11c30:	0252      	lsls	r2, r2, #9
   11c32:	4019      	ands	r1, r3
   11c34:	0b12      	lsrs	r2, r2, #12
   11c36:	468c      	mov	ip, r1
   11c38:	e656      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11c3a:	2b00      	cmp	r3, #0
   11c3c:	d100      	bne.n	11c40 <__aeabi_ddiv+0x4f4>
   11c3e:	e76f      	b.n	11b20 <__aeabi_ddiv+0x3d4>
   11c40:	4446      	add	r6, r8
   11c42:	1e4a      	subs	r2, r1, #1
   11c44:	45b0      	cmp	r8, r6
   11c46:	d929      	bls.n	11c9c <__aeabi_ddiv+0x550>
   11c48:	0011      	movs	r1, r2
   11c4a:	4286      	cmp	r6, r0
   11c4c:	d000      	beq.n	11c50 <__aeabi_ddiv+0x504>
   11c4e:	e765      	b.n	11b1c <__aeabi_ddiv+0x3d0>
   11c50:	9a03      	ldr	r2, [sp, #12]
   11c52:	4293      	cmp	r3, r2
   11c54:	d000      	beq.n	11c58 <__aeabi_ddiv+0x50c>
   11c56:	e761      	b.n	11b1c <__aeabi_ddiv+0x3d0>
   11c58:	e762      	b.n	11b20 <__aeabi_ddiv+0x3d4>
   11c5a:	2101      	movs	r1, #1
   11c5c:	4249      	negs	r1, r1
   11c5e:	2001      	movs	r0, #1
   11c60:	1ac2      	subs	r2, r0, r3
   11c62:	2a38      	cmp	r2, #56	; 0x38
   11c64:	dd21      	ble.n	11caa <__aeabi_ddiv+0x55e>
   11c66:	9b02      	ldr	r3, [sp, #8]
   11c68:	4003      	ands	r3, r0
   11c6a:	469c      	mov	ip, r3
   11c6c:	e638      	b.n	118e0 <__aeabi_ddiv+0x194>
   11c6e:	220f      	movs	r2, #15
   11c70:	400a      	ands	r2, r1
   11c72:	2a04      	cmp	r2, #4
   11c74:	d100      	bne.n	11c78 <__aeabi_ddiv+0x52c>
   11c76:	e75b      	b.n	11b30 <__aeabi_ddiv+0x3e4>
   11c78:	000a      	movs	r2, r1
   11c7a:	1d11      	adds	r1, r2, #4
   11c7c:	4291      	cmp	r1, r2
   11c7e:	4192      	sbcs	r2, r2
   11c80:	4252      	negs	r2, r2
   11c82:	4493      	add	fp, r2
   11c84:	e754      	b.n	11b30 <__aeabi_ddiv+0x3e4>
   11c86:	4b47      	ldr	r3, [pc, #284]	; (11da4 <__aeabi_ddiv+0x658>)
   11c88:	18e3      	adds	r3, r4, r3
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	dde5      	ble.n	11c5a <__aeabi_ddiv+0x50e>
   11c8e:	2201      	movs	r2, #1
   11c90:	4252      	negs	r2, r2
   11c92:	e7f2      	b.n	11c7a <__aeabi_ddiv+0x52e>
   11c94:	001d      	movs	r5, r3
   11c96:	e6fa      	b.n	11a8e <__aeabi_ddiv+0x342>
   11c98:	469a      	mov	sl, r3
   11c9a:	e71c      	b.n	11ad6 <__aeabi_ddiv+0x38a>
   11c9c:	42b0      	cmp	r0, r6
   11c9e:	d839      	bhi.n	11d14 <__aeabi_ddiv+0x5c8>
   11ca0:	d06e      	beq.n	11d80 <__aeabi_ddiv+0x634>
   11ca2:	0011      	movs	r1, r2
   11ca4:	e73a      	b.n	11b1c <__aeabi_ddiv+0x3d0>
   11ca6:	9302      	str	r3, [sp, #8]
   11ca8:	e73a      	b.n	11b20 <__aeabi_ddiv+0x3d4>
   11caa:	2a1f      	cmp	r2, #31
   11cac:	dc3c      	bgt.n	11d28 <__aeabi_ddiv+0x5dc>
   11cae:	2320      	movs	r3, #32
   11cb0:	1a9b      	subs	r3, r3, r2
   11cb2:	000c      	movs	r4, r1
   11cb4:	4658      	mov	r0, fp
   11cb6:	4099      	lsls	r1, r3
   11cb8:	4098      	lsls	r0, r3
   11cba:	1e4b      	subs	r3, r1, #1
   11cbc:	4199      	sbcs	r1, r3
   11cbe:	465b      	mov	r3, fp
   11cc0:	40d4      	lsrs	r4, r2
   11cc2:	40d3      	lsrs	r3, r2
   11cc4:	4320      	orrs	r0, r4
   11cc6:	4308      	orrs	r0, r1
   11cc8:	001a      	movs	r2, r3
   11cca:	0743      	lsls	r3, r0, #29
   11ccc:	d009      	beq.n	11ce2 <__aeabi_ddiv+0x596>
   11cce:	230f      	movs	r3, #15
   11cd0:	4003      	ands	r3, r0
   11cd2:	2b04      	cmp	r3, #4
   11cd4:	d005      	beq.n	11ce2 <__aeabi_ddiv+0x596>
   11cd6:	0001      	movs	r1, r0
   11cd8:	1d08      	adds	r0, r1, #4
   11cda:	4288      	cmp	r0, r1
   11cdc:	419b      	sbcs	r3, r3
   11cde:	425b      	negs	r3, r3
   11ce0:	18d2      	adds	r2, r2, r3
   11ce2:	0213      	lsls	r3, r2, #8
   11ce4:	d53a      	bpl.n	11d5c <__aeabi_ddiv+0x610>
   11ce6:	2301      	movs	r3, #1
   11ce8:	9a02      	ldr	r2, [sp, #8]
   11cea:	2401      	movs	r4, #1
   11cec:	401a      	ands	r2, r3
   11cee:	2300      	movs	r3, #0
   11cf0:	4694      	mov	ip, r2
   11cf2:	4698      	mov	r8, r3
   11cf4:	2200      	movs	r2, #0
   11cf6:	e5f7      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11cf8:	2102      	movs	r1, #2
   11cfa:	4249      	negs	r1, r1
   11cfc:	468c      	mov	ip, r1
   11cfe:	9d03      	ldr	r5, [sp, #12]
   11d00:	44e3      	add	fp, ip
   11d02:	46ac      	mov	ip, r5
   11d04:	44e2      	add	sl, ip
   11d06:	45aa      	cmp	sl, r5
   11d08:	41ad      	sbcs	r5, r5
   11d0a:	426d      	negs	r5, r5
   11d0c:	4445      	add	r5, r8
   11d0e:	18ed      	adds	r5, r5, r3
   11d10:	1a2d      	subs	r5, r5, r0
   11d12:	e696      	b.n	11a42 <__aeabi_ddiv+0x2f6>
   11d14:	1e8a      	subs	r2, r1, #2
   11d16:	9903      	ldr	r1, [sp, #12]
   11d18:	004d      	lsls	r5, r1, #1
   11d1a:	428d      	cmp	r5, r1
   11d1c:	4189      	sbcs	r1, r1
   11d1e:	4249      	negs	r1, r1
   11d20:	4441      	add	r1, r8
   11d22:	1876      	adds	r6, r6, r1
   11d24:	9503      	str	r5, [sp, #12]
   11d26:	e78f      	b.n	11c48 <__aeabi_ddiv+0x4fc>
   11d28:	201f      	movs	r0, #31
   11d2a:	4240      	negs	r0, r0
   11d2c:	1ac3      	subs	r3, r0, r3
   11d2e:	4658      	mov	r0, fp
   11d30:	40d8      	lsrs	r0, r3
   11d32:	0003      	movs	r3, r0
   11d34:	2a20      	cmp	r2, #32
   11d36:	d028      	beq.n	11d8a <__aeabi_ddiv+0x63e>
   11d38:	2040      	movs	r0, #64	; 0x40
   11d3a:	465d      	mov	r5, fp
   11d3c:	1a82      	subs	r2, r0, r2
   11d3e:	4095      	lsls	r5, r2
   11d40:	4329      	orrs	r1, r5
   11d42:	1e4a      	subs	r2, r1, #1
   11d44:	4191      	sbcs	r1, r2
   11d46:	4319      	orrs	r1, r3
   11d48:	2307      	movs	r3, #7
   11d4a:	2200      	movs	r2, #0
   11d4c:	400b      	ands	r3, r1
   11d4e:	d009      	beq.n	11d64 <__aeabi_ddiv+0x618>
   11d50:	230f      	movs	r3, #15
   11d52:	2200      	movs	r2, #0
   11d54:	400b      	ands	r3, r1
   11d56:	0008      	movs	r0, r1
   11d58:	2b04      	cmp	r3, #4
   11d5a:	d1bd      	bne.n	11cd8 <__aeabi_ddiv+0x58c>
   11d5c:	0001      	movs	r1, r0
   11d5e:	0753      	lsls	r3, r2, #29
   11d60:	0252      	lsls	r2, r2, #9
   11d62:	0b12      	lsrs	r2, r2, #12
   11d64:	08c9      	lsrs	r1, r1, #3
   11d66:	4319      	orrs	r1, r3
   11d68:	2301      	movs	r3, #1
   11d6a:	4688      	mov	r8, r1
   11d6c:	9902      	ldr	r1, [sp, #8]
   11d6e:	2400      	movs	r4, #0
   11d70:	4019      	ands	r1, r3
   11d72:	468c      	mov	ip, r1
   11d74:	e5b8      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11d76:	4552      	cmp	r2, sl
   11d78:	d8be      	bhi.n	11cf8 <__aeabi_ddiv+0x5ac>
   11d7a:	468b      	mov	fp, r1
   11d7c:	2500      	movs	r5, #0
   11d7e:	e660      	b.n	11a42 <__aeabi_ddiv+0x2f6>
   11d80:	9d03      	ldr	r5, [sp, #12]
   11d82:	429d      	cmp	r5, r3
   11d84:	d3c6      	bcc.n	11d14 <__aeabi_ddiv+0x5c8>
   11d86:	0011      	movs	r1, r2
   11d88:	e762      	b.n	11c50 <__aeabi_ddiv+0x504>
   11d8a:	2500      	movs	r5, #0
   11d8c:	e7d8      	b.n	11d40 <__aeabi_ddiv+0x5f4>
   11d8e:	2280      	movs	r2, #128	; 0x80
   11d90:	465b      	mov	r3, fp
   11d92:	0312      	lsls	r2, r2, #12
   11d94:	431a      	orrs	r2, r3
   11d96:	9b01      	ldr	r3, [sp, #4]
   11d98:	0312      	lsls	r2, r2, #12
   11d9a:	0b12      	lsrs	r2, r2, #12
   11d9c:	469c      	mov	ip, r3
   11d9e:	4688      	mov	r8, r1
   11da0:	4c03      	ldr	r4, [pc, #12]	; (11db0 <__aeabi_ddiv+0x664>)
   11da2:	e5a1      	b.n	118e8 <__aeabi_ddiv+0x19c>
   11da4:	000003ff 	.word	0x000003ff
   11da8:	feffffff 	.word	0xfeffffff
   11dac:	000007fe 	.word	0x000007fe
   11db0:	000007ff 	.word	0x000007ff

00011db4 <__aeabi_dmul>:
   11db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11db6:	4657      	mov	r7, sl
   11db8:	4645      	mov	r5, r8
   11dba:	46de      	mov	lr, fp
   11dbc:	464e      	mov	r6, r9
   11dbe:	b5e0      	push	{r5, r6, r7, lr}
   11dc0:	030c      	lsls	r4, r1, #12
   11dc2:	4698      	mov	r8, r3
   11dc4:	004e      	lsls	r6, r1, #1
   11dc6:	0b23      	lsrs	r3, r4, #12
   11dc8:	b087      	sub	sp, #28
   11dca:	0007      	movs	r7, r0
   11dcc:	4692      	mov	sl, r2
   11dce:	469b      	mov	fp, r3
   11dd0:	0d76      	lsrs	r6, r6, #21
   11dd2:	0fcd      	lsrs	r5, r1, #31
   11dd4:	2e00      	cmp	r6, #0
   11dd6:	d06b      	beq.n	11eb0 <__aeabi_dmul+0xfc>
   11dd8:	4b6d      	ldr	r3, [pc, #436]	; (11f90 <__aeabi_dmul+0x1dc>)
   11dda:	429e      	cmp	r6, r3
   11ddc:	d035      	beq.n	11e4a <__aeabi_dmul+0x96>
   11dde:	2480      	movs	r4, #128	; 0x80
   11de0:	465b      	mov	r3, fp
   11de2:	0f42      	lsrs	r2, r0, #29
   11de4:	0424      	lsls	r4, r4, #16
   11de6:	00db      	lsls	r3, r3, #3
   11de8:	4314      	orrs	r4, r2
   11dea:	431c      	orrs	r4, r3
   11dec:	00c3      	lsls	r3, r0, #3
   11dee:	4699      	mov	r9, r3
   11df0:	4b68      	ldr	r3, [pc, #416]	; (11f94 <__aeabi_dmul+0x1e0>)
   11df2:	46a3      	mov	fp, r4
   11df4:	469c      	mov	ip, r3
   11df6:	2300      	movs	r3, #0
   11df8:	2700      	movs	r7, #0
   11dfa:	4466      	add	r6, ip
   11dfc:	9302      	str	r3, [sp, #8]
   11dfe:	4643      	mov	r3, r8
   11e00:	031c      	lsls	r4, r3, #12
   11e02:	005a      	lsls	r2, r3, #1
   11e04:	0fdb      	lsrs	r3, r3, #31
   11e06:	4650      	mov	r0, sl
   11e08:	0b24      	lsrs	r4, r4, #12
   11e0a:	0d52      	lsrs	r2, r2, #21
   11e0c:	4698      	mov	r8, r3
   11e0e:	d100      	bne.n	11e12 <__aeabi_dmul+0x5e>
   11e10:	e076      	b.n	11f00 <__aeabi_dmul+0x14c>
   11e12:	4b5f      	ldr	r3, [pc, #380]	; (11f90 <__aeabi_dmul+0x1dc>)
   11e14:	429a      	cmp	r2, r3
   11e16:	d06d      	beq.n	11ef4 <__aeabi_dmul+0x140>
   11e18:	2380      	movs	r3, #128	; 0x80
   11e1a:	0f41      	lsrs	r1, r0, #29
   11e1c:	041b      	lsls	r3, r3, #16
   11e1e:	430b      	orrs	r3, r1
   11e20:	495c      	ldr	r1, [pc, #368]	; (11f94 <__aeabi_dmul+0x1e0>)
   11e22:	00e4      	lsls	r4, r4, #3
   11e24:	468c      	mov	ip, r1
   11e26:	431c      	orrs	r4, r3
   11e28:	00c3      	lsls	r3, r0, #3
   11e2a:	2000      	movs	r0, #0
   11e2c:	4462      	add	r2, ip
   11e2e:	4641      	mov	r1, r8
   11e30:	18b6      	adds	r6, r6, r2
   11e32:	4069      	eors	r1, r5
   11e34:	1c72      	adds	r2, r6, #1
   11e36:	9101      	str	r1, [sp, #4]
   11e38:	4694      	mov	ip, r2
   11e3a:	4307      	orrs	r7, r0
   11e3c:	2f0f      	cmp	r7, #15
   11e3e:	d900      	bls.n	11e42 <__aeabi_dmul+0x8e>
   11e40:	e0b0      	b.n	11fa4 <__aeabi_dmul+0x1f0>
   11e42:	4a55      	ldr	r2, [pc, #340]	; (11f98 <__aeabi_dmul+0x1e4>)
   11e44:	00bf      	lsls	r7, r7, #2
   11e46:	59d2      	ldr	r2, [r2, r7]
   11e48:	4697      	mov	pc, r2
   11e4a:	465b      	mov	r3, fp
   11e4c:	4303      	orrs	r3, r0
   11e4e:	4699      	mov	r9, r3
   11e50:	d000      	beq.n	11e54 <__aeabi_dmul+0xa0>
   11e52:	e087      	b.n	11f64 <__aeabi_dmul+0x1b0>
   11e54:	2300      	movs	r3, #0
   11e56:	469b      	mov	fp, r3
   11e58:	3302      	adds	r3, #2
   11e5a:	2708      	movs	r7, #8
   11e5c:	9302      	str	r3, [sp, #8]
   11e5e:	e7ce      	b.n	11dfe <__aeabi_dmul+0x4a>
   11e60:	4642      	mov	r2, r8
   11e62:	9201      	str	r2, [sp, #4]
   11e64:	2802      	cmp	r0, #2
   11e66:	d067      	beq.n	11f38 <__aeabi_dmul+0x184>
   11e68:	2803      	cmp	r0, #3
   11e6a:	d100      	bne.n	11e6e <__aeabi_dmul+0xba>
   11e6c:	e20e      	b.n	1228c <__aeabi_dmul+0x4d8>
   11e6e:	2801      	cmp	r0, #1
   11e70:	d000      	beq.n	11e74 <__aeabi_dmul+0xc0>
   11e72:	e162      	b.n	1213a <__aeabi_dmul+0x386>
   11e74:	2300      	movs	r3, #0
   11e76:	2400      	movs	r4, #0
   11e78:	2200      	movs	r2, #0
   11e7a:	4699      	mov	r9, r3
   11e7c:	9901      	ldr	r1, [sp, #4]
   11e7e:	4001      	ands	r1, r0
   11e80:	b2cd      	uxtb	r5, r1
   11e82:	2100      	movs	r1, #0
   11e84:	0312      	lsls	r2, r2, #12
   11e86:	0d0b      	lsrs	r3, r1, #20
   11e88:	0b12      	lsrs	r2, r2, #12
   11e8a:	051b      	lsls	r3, r3, #20
   11e8c:	4313      	orrs	r3, r2
   11e8e:	4a43      	ldr	r2, [pc, #268]	; (11f9c <__aeabi_dmul+0x1e8>)
   11e90:	0524      	lsls	r4, r4, #20
   11e92:	4013      	ands	r3, r2
   11e94:	431c      	orrs	r4, r3
   11e96:	0064      	lsls	r4, r4, #1
   11e98:	07ed      	lsls	r5, r5, #31
   11e9a:	0864      	lsrs	r4, r4, #1
   11e9c:	432c      	orrs	r4, r5
   11e9e:	4648      	mov	r0, r9
   11ea0:	0021      	movs	r1, r4
   11ea2:	b007      	add	sp, #28
   11ea4:	bc3c      	pop	{r2, r3, r4, r5}
   11ea6:	4690      	mov	r8, r2
   11ea8:	4699      	mov	r9, r3
   11eaa:	46a2      	mov	sl, r4
   11eac:	46ab      	mov	fp, r5
   11eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eb0:	4303      	orrs	r3, r0
   11eb2:	4699      	mov	r9, r3
   11eb4:	d04f      	beq.n	11f56 <__aeabi_dmul+0x1a2>
   11eb6:	465b      	mov	r3, fp
   11eb8:	2b00      	cmp	r3, #0
   11eba:	d100      	bne.n	11ebe <__aeabi_dmul+0x10a>
   11ebc:	e189      	b.n	121d2 <__aeabi_dmul+0x41e>
   11ebe:	4658      	mov	r0, fp
   11ec0:	f7fe f908 	bl	100d4 <__clzsi2>
   11ec4:	0003      	movs	r3, r0
   11ec6:	3b0b      	subs	r3, #11
   11ec8:	2b1c      	cmp	r3, #28
   11eca:	dd00      	ble.n	11ece <__aeabi_dmul+0x11a>
   11ecc:	e17a      	b.n	121c4 <__aeabi_dmul+0x410>
   11ece:	221d      	movs	r2, #29
   11ed0:	1ad3      	subs	r3, r2, r3
   11ed2:	003a      	movs	r2, r7
   11ed4:	0001      	movs	r1, r0
   11ed6:	465c      	mov	r4, fp
   11ed8:	40da      	lsrs	r2, r3
   11eda:	3908      	subs	r1, #8
   11edc:	408c      	lsls	r4, r1
   11ede:	0013      	movs	r3, r2
   11ee0:	408f      	lsls	r7, r1
   11ee2:	4323      	orrs	r3, r4
   11ee4:	469b      	mov	fp, r3
   11ee6:	46b9      	mov	r9, r7
   11ee8:	2300      	movs	r3, #0
   11eea:	4e2d      	ldr	r6, [pc, #180]	; (11fa0 <__aeabi_dmul+0x1ec>)
   11eec:	2700      	movs	r7, #0
   11eee:	1a36      	subs	r6, r6, r0
   11ef0:	9302      	str	r3, [sp, #8]
   11ef2:	e784      	b.n	11dfe <__aeabi_dmul+0x4a>
   11ef4:	4653      	mov	r3, sl
   11ef6:	4323      	orrs	r3, r4
   11ef8:	d12a      	bne.n	11f50 <__aeabi_dmul+0x19c>
   11efa:	2400      	movs	r4, #0
   11efc:	2002      	movs	r0, #2
   11efe:	e796      	b.n	11e2e <__aeabi_dmul+0x7a>
   11f00:	4653      	mov	r3, sl
   11f02:	4323      	orrs	r3, r4
   11f04:	d020      	beq.n	11f48 <__aeabi_dmul+0x194>
   11f06:	2c00      	cmp	r4, #0
   11f08:	d100      	bne.n	11f0c <__aeabi_dmul+0x158>
   11f0a:	e157      	b.n	121bc <__aeabi_dmul+0x408>
   11f0c:	0020      	movs	r0, r4
   11f0e:	f7fe f8e1 	bl	100d4 <__clzsi2>
   11f12:	0003      	movs	r3, r0
   11f14:	3b0b      	subs	r3, #11
   11f16:	2b1c      	cmp	r3, #28
   11f18:	dd00      	ble.n	11f1c <__aeabi_dmul+0x168>
   11f1a:	e149      	b.n	121b0 <__aeabi_dmul+0x3fc>
   11f1c:	211d      	movs	r1, #29
   11f1e:	1acb      	subs	r3, r1, r3
   11f20:	4651      	mov	r1, sl
   11f22:	0002      	movs	r2, r0
   11f24:	40d9      	lsrs	r1, r3
   11f26:	4653      	mov	r3, sl
   11f28:	3a08      	subs	r2, #8
   11f2a:	4094      	lsls	r4, r2
   11f2c:	4093      	lsls	r3, r2
   11f2e:	430c      	orrs	r4, r1
   11f30:	4a1b      	ldr	r2, [pc, #108]	; (11fa0 <__aeabi_dmul+0x1ec>)
   11f32:	1a12      	subs	r2, r2, r0
   11f34:	2000      	movs	r0, #0
   11f36:	e77a      	b.n	11e2e <__aeabi_dmul+0x7a>
   11f38:	2501      	movs	r5, #1
   11f3a:	9b01      	ldr	r3, [sp, #4]
   11f3c:	4c14      	ldr	r4, [pc, #80]	; (11f90 <__aeabi_dmul+0x1dc>)
   11f3e:	401d      	ands	r5, r3
   11f40:	2300      	movs	r3, #0
   11f42:	2200      	movs	r2, #0
   11f44:	4699      	mov	r9, r3
   11f46:	e79c      	b.n	11e82 <__aeabi_dmul+0xce>
   11f48:	2400      	movs	r4, #0
   11f4a:	2200      	movs	r2, #0
   11f4c:	2001      	movs	r0, #1
   11f4e:	e76e      	b.n	11e2e <__aeabi_dmul+0x7a>
   11f50:	4653      	mov	r3, sl
   11f52:	2003      	movs	r0, #3
   11f54:	e76b      	b.n	11e2e <__aeabi_dmul+0x7a>
   11f56:	2300      	movs	r3, #0
   11f58:	469b      	mov	fp, r3
   11f5a:	3301      	adds	r3, #1
   11f5c:	2704      	movs	r7, #4
   11f5e:	2600      	movs	r6, #0
   11f60:	9302      	str	r3, [sp, #8]
   11f62:	e74c      	b.n	11dfe <__aeabi_dmul+0x4a>
   11f64:	2303      	movs	r3, #3
   11f66:	4681      	mov	r9, r0
   11f68:	270c      	movs	r7, #12
   11f6a:	9302      	str	r3, [sp, #8]
   11f6c:	e747      	b.n	11dfe <__aeabi_dmul+0x4a>
   11f6e:	2280      	movs	r2, #128	; 0x80
   11f70:	2300      	movs	r3, #0
   11f72:	2500      	movs	r5, #0
   11f74:	0312      	lsls	r2, r2, #12
   11f76:	4699      	mov	r9, r3
   11f78:	4c05      	ldr	r4, [pc, #20]	; (11f90 <__aeabi_dmul+0x1dc>)
   11f7a:	e782      	b.n	11e82 <__aeabi_dmul+0xce>
   11f7c:	465c      	mov	r4, fp
   11f7e:	464b      	mov	r3, r9
   11f80:	9802      	ldr	r0, [sp, #8]
   11f82:	e76f      	b.n	11e64 <__aeabi_dmul+0xb0>
   11f84:	465c      	mov	r4, fp
   11f86:	464b      	mov	r3, r9
   11f88:	9501      	str	r5, [sp, #4]
   11f8a:	9802      	ldr	r0, [sp, #8]
   11f8c:	e76a      	b.n	11e64 <__aeabi_dmul+0xb0>
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	000007ff 	.word	0x000007ff
   11f94:	fffffc01 	.word	0xfffffc01
   11f98:	00013c68 	.word	0x00013c68
   11f9c:	800fffff 	.word	0x800fffff
   11fa0:	fffffc0d 	.word	0xfffffc0d
   11fa4:	464a      	mov	r2, r9
   11fa6:	4649      	mov	r1, r9
   11fa8:	0c17      	lsrs	r7, r2, #16
   11faa:	0c1a      	lsrs	r2, r3, #16
   11fac:	041b      	lsls	r3, r3, #16
   11fae:	0c1b      	lsrs	r3, r3, #16
   11fb0:	0408      	lsls	r0, r1, #16
   11fb2:	0019      	movs	r1, r3
   11fb4:	0c00      	lsrs	r0, r0, #16
   11fb6:	4341      	muls	r1, r0
   11fb8:	0015      	movs	r5, r2
   11fba:	4688      	mov	r8, r1
   11fbc:	0019      	movs	r1, r3
   11fbe:	437d      	muls	r5, r7
   11fc0:	4379      	muls	r1, r7
   11fc2:	9503      	str	r5, [sp, #12]
   11fc4:	4689      	mov	r9, r1
   11fc6:	0029      	movs	r1, r5
   11fc8:	0015      	movs	r5, r2
   11fca:	4345      	muls	r5, r0
   11fcc:	444d      	add	r5, r9
   11fce:	9502      	str	r5, [sp, #8]
   11fd0:	4645      	mov	r5, r8
   11fd2:	0c2d      	lsrs	r5, r5, #16
   11fd4:	46aa      	mov	sl, r5
   11fd6:	9d02      	ldr	r5, [sp, #8]
   11fd8:	4455      	add	r5, sl
   11fda:	45a9      	cmp	r9, r5
   11fdc:	d906      	bls.n	11fec <__aeabi_dmul+0x238>
   11fde:	468a      	mov	sl, r1
   11fe0:	2180      	movs	r1, #128	; 0x80
   11fe2:	0249      	lsls	r1, r1, #9
   11fe4:	4689      	mov	r9, r1
   11fe6:	44ca      	add	sl, r9
   11fe8:	4651      	mov	r1, sl
   11fea:	9103      	str	r1, [sp, #12]
   11fec:	0c29      	lsrs	r1, r5, #16
   11fee:	9104      	str	r1, [sp, #16]
   11ff0:	4641      	mov	r1, r8
   11ff2:	0409      	lsls	r1, r1, #16
   11ff4:	042d      	lsls	r5, r5, #16
   11ff6:	0c09      	lsrs	r1, r1, #16
   11ff8:	4688      	mov	r8, r1
   11ffa:	0029      	movs	r1, r5
   11ffc:	0c25      	lsrs	r5, r4, #16
   11ffe:	0424      	lsls	r4, r4, #16
   12000:	4441      	add	r1, r8
   12002:	0c24      	lsrs	r4, r4, #16
   12004:	9105      	str	r1, [sp, #20]
   12006:	0021      	movs	r1, r4
   12008:	4341      	muls	r1, r0
   1200a:	4688      	mov	r8, r1
   1200c:	0021      	movs	r1, r4
   1200e:	4379      	muls	r1, r7
   12010:	468a      	mov	sl, r1
   12012:	4368      	muls	r0, r5
   12014:	4641      	mov	r1, r8
   12016:	4450      	add	r0, sl
   12018:	4681      	mov	r9, r0
   1201a:	0c08      	lsrs	r0, r1, #16
   1201c:	4448      	add	r0, r9
   1201e:	436f      	muls	r7, r5
   12020:	4582      	cmp	sl, r0
   12022:	d903      	bls.n	1202c <__aeabi_dmul+0x278>
   12024:	2180      	movs	r1, #128	; 0x80
   12026:	0249      	lsls	r1, r1, #9
   12028:	4689      	mov	r9, r1
   1202a:	444f      	add	r7, r9
   1202c:	0c01      	lsrs	r1, r0, #16
   1202e:	4689      	mov	r9, r1
   12030:	0039      	movs	r1, r7
   12032:	4449      	add	r1, r9
   12034:	9102      	str	r1, [sp, #8]
   12036:	4641      	mov	r1, r8
   12038:	040f      	lsls	r7, r1, #16
   1203a:	9904      	ldr	r1, [sp, #16]
   1203c:	0c3f      	lsrs	r7, r7, #16
   1203e:	4688      	mov	r8, r1
   12040:	0400      	lsls	r0, r0, #16
   12042:	19c0      	adds	r0, r0, r7
   12044:	4480      	add	r8, r0
   12046:	4641      	mov	r1, r8
   12048:	9104      	str	r1, [sp, #16]
   1204a:	4659      	mov	r1, fp
   1204c:	0c0f      	lsrs	r7, r1, #16
   1204e:	0409      	lsls	r1, r1, #16
   12050:	0c09      	lsrs	r1, r1, #16
   12052:	4688      	mov	r8, r1
   12054:	4359      	muls	r1, r3
   12056:	468a      	mov	sl, r1
   12058:	0039      	movs	r1, r7
   1205a:	4351      	muls	r1, r2
   1205c:	4689      	mov	r9, r1
   1205e:	4641      	mov	r1, r8
   12060:	434a      	muls	r2, r1
   12062:	4651      	mov	r1, sl
   12064:	0c09      	lsrs	r1, r1, #16
   12066:	468b      	mov	fp, r1
   12068:	437b      	muls	r3, r7
   1206a:	18d2      	adds	r2, r2, r3
   1206c:	445a      	add	r2, fp
   1206e:	4293      	cmp	r3, r2
   12070:	d903      	bls.n	1207a <__aeabi_dmul+0x2c6>
   12072:	2380      	movs	r3, #128	; 0x80
   12074:	025b      	lsls	r3, r3, #9
   12076:	469b      	mov	fp, r3
   12078:	44d9      	add	r9, fp
   1207a:	4651      	mov	r1, sl
   1207c:	0409      	lsls	r1, r1, #16
   1207e:	0c09      	lsrs	r1, r1, #16
   12080:	468a      	mov	sl, r1
   12082:	4641      	mov	r1, r8
   12084:	4361      	muls	r1, r4
   12086:	437c      	muls	r4, r7
   12088:	0c13      	lsrs	r3, r2, #16
   1208a:	0412      	lsls	r2, r2, #16
   1208c:	444b      	add	r3, r9
   1208e:	4452      	add	r2, sl
   12090:	46a1      	mov	r9, r4
   12092:	468a      	mov	sl, r1
   12094:	003c      	movs	r4, r7
   12096:	4641      	mov	r1, r8
   12098:	436c      	muls	r4, r5
   1209a:	434d      	muls	r5, r1
   1209c:	4651      	mov	r1, sl
   1209e:	444d      	add	r5, r9
   120a0:	0c0f      	lsrs	r7, r1, #16
   120a2:	197d      	adds	r5, r7, r5
   120a4:	45a9      	cmp	r9, r5
   120a6:	d903      	bls.n	120b0 <__aeabi_dmul+0x2fc>
   120a8:	2180      	movs	r1, #128	; 0x80
   120aa:	0249      	lsls	r1, r1, #9
   120ac:	4688      	mov	r8, r1
   120ae:	4444      	add	r4, r8
   120b0:	9f04      	ldr	r7, [sp, #16]
   120b2:	9903      	ldr	r1, [sp, #12]
   120b4:	46b8      	mov	r8, r7
   120b6:	4441      	add	r1, r8
   120b8:	468b      	mov	fp, r1
   120ba:	4583      	cmp	fp, r0
   120bc:	4180      	sbcs	r0, r0
   120be:	4241      	negs	r1, r0
   120c0:	4688      	mov	r8, r1
   120c2:	4651      	mov	r1, sl
   120c4:	0408      	lsls	r0, r1, #16
   120c6:	042f      	lsls	r7, r5, #16
   120c8:	0c00      	lsrs	r0, r0, #16
   120ca:	183f      	adds	r7, r7, r0
   120cc:	4658      	mov	r0, fp
   120ce:	9902      	ldr	r1, [sp, #8]
   120d0:	1810      	adds	r0, r2, r0
   120d2:	4689      	mov	r9, r1
   120d4:	4290      	cmp	r0, r2
   120d6:	4192      	sbcs	r2, r2
   120d8:	444f      	add	r7, r9
   120da:	46ba      	mov	sl, r7
   120dc:	4252      	negs	r2, r2
   120de:	4699      	mov	r9, r3
   120e0:	4693      	mov	fp, r2
   120e2:	44c2      	add	sl, r8
   120e4:	44d1      	add	r9, sl
   120e6:	44cb      	add	fp, r9
   120e8:	428f      	cmp	r7, r1
   120ea:	41bf      	sbcs	r7, r7
   120ec:	45c2      	cmp	sl, r8
   120ee:	4189      	sbcs	r1, r1
   120f0:	4599      	cmp	r9, r3
   120f2:	419b      	sbcs	r3, r3
   120f4:	4593      	cmp	fp, r2
   120f6:	4192      	sbcs	r2, r2
   120f8:	427f      	negs	r7, r7
   120fa:	4249      	negs	r1, r1
   120fc:	0c2d      	lsrs	r5, r5, #16
   120fe:	4252      	negs	r2, r2
   12100:	430f      	orrs	r7, r1
   12102:	425b      	negs	r3, r3
   12104:	4313      	orrs	r3, r2
   12106:	197f      	adds	r7, r7, r5
   12108:	18ff      	adds	r7, r7, r3
   1210a:	465b      	mov	r3, fp
   1210c:	193c      	adds	r4, r7, r4
   1210e:	0ddb      	lsrs	r3, r3, #23
   12110:	9a05      	ldr	r2, [sp, #20]
   12112:	0264      	lsls	r4, r4, #9
   12114:	431c      	orrs	r4, r3
   12116:	0243      	lsls	r3, r0, #9
   12118:	4313      	orrs	r3, r2
   1211a:	1e5d      	subs	r5, r3, #1
   1211c:	41ab      	sbcs	r3, r5
   1211e:	465a      	mov	r2, fp
   12120:	0dc0      	lsrs	r0, r0, #23
   12122:	4303      	orrs	r3, r0
   12124:	0252      	lsls	r2, r2, #9
   12126:	4313      	orrs	r3, r2
   12128:	01e2      	lsls	r2, r4, #7
   1212a:	d556      	bpl.n	121da <__aeabi_dmul+0x426>
   1212c:	2001      	movs	r0, #1
   1212e:	085a      	lsrs	r2, r3, #1
   12130:	4003      	ands	r3, r0
   12132:	4313      	orrs	r3, r2
   12134:	07e2      	lsls	r2, r4, #31
   12136:	4313      	orrs	r3, r2
   12138:	0864      	lsrs	r4, r4, #1
   1213a:	485a      	ldr	r0, [pc, #360]	; (122a4 <__aeabi_dmul+0x4f0>)
   1213c:	4460      	add	r0, ip
   1213e:	2800      	cmp	r0, #0
   12140:	dd4d      	ble.n	121de <__aeabi_dmul+0x42a>
   12142:	075a      	lsls	r2, r3, #29
   12144:	d009      	beq.n	1215a <__aeabi_dmul+0x3a6>
   12146:	220f      	movs	r2, #15
   12148:	401a      	ands	r2, r3
   1214a:	2a04      	cmp	r2, #4
   1214c:	d005      	beq.n	1215a <__aeabi_dmul+0x3a6>
   1214e:	1d1a      	adds	r2, r3, #4
   12150:	429a      	cmp	r2, r3
   12152:	419b      	sbcs	r3, r3
   12154:	425b      	negs	r3, r3
   12156:	18e4      	adds	r4, r4, r3
   12158:	0013      	movs	r3, r2
   1215a:	01e2      	lsls	r2, r4, #7
   1215c:	d504      	bpl.n	12168 <__aeabi_dmul+0x3b4>
   1215e:	2080      	movs	r0, #128	; 0x80
   12160:	4a51      	ldr	r2, [pc, #324]	; (122a8 <__aeabi_dmul+0x4f4>)
   12162:	00c0      	lsls	r0, r0, #3
   12164:	4014      	ands	r4, r2
   12166:	4460      	add	r0, ip
   12168:	4a50      	ldr	r2, [pc, #320]	; (122ac <__aeabi_dmul+0x4f8>)
   1216a:	4290      	cmp	r0, r2
   1216c:	dd00      	ble.n	12170 <__aeabi_dmul+0x3bc>
   1216e:	e6e3      	b.n	11f38 <__aeabi_dmul+0x184>
   12170:	2501      	movs	r5, #1
   12172:	08db      	lsrs	r3, r3, #3
   12174:	0762      	lsls	r2, r4, #29
   12176:	431a      	orrs	r2, r3
   12178:	0264      	lsls	r4, r4, #9
   1217a:	9b01      	ldr	r3, [sp, #4]
   1217c:	4691      	mov	r9, r2
   1217e:	0b22      	lsrs	r2, r4, #12
   12180:	0544      	lsls	r4, r0, #21
   12182:	0d64      	lsrs	r4, r4, #21
   12184:	401d      	ands	r5, r3
   12186:	e67c      	b.n	11e82 <__aeabi_dmul+0xce>
   12188:	2280      	movs	r2, #128	; 0x80
   1218a:	4659      	mov	r1, fp
   1218c:	0312      	lsls	r2, r2, #12
   1218e:	4211      	tst	r1, r2
   12190:	d008      	beq.n	121a4 <__aeabi_dmul+0x3f0>
   12192:	4214      	tst	r4, r2
   12194:	d106      	bne.n	121a4 <__aeabi_dmul+0x3f0>
   12196:	4322      	orrs	r2, r4
   12198:	0312      	lsls	r2, r2, #12
   1219a:	0b12      	lsrs	r2, r2, #12
   1219c:	4645      	mov	r5, r8
   1219e:	4699      	mov	r9, r3
   121a0:	4c43      	ldr	r4, [pc, #268]	; (122b0 <__aeabi_dmul+0x4fc>)
   121a2:	e66e      	b.n	11e82 <__aeabi_dmul+0xce>
   121a4:	465b      	mov	r3, fp
   121a6:	431a      	orrs	r2, r3
   121a8:	0312      	lsls	r2, r2, #12
   121aa:	0b12      	lsrs	r2, r2, #12
   121ac:	4c40      	ldr	r4, [pc, #256]	; (122b0 <__aeabi_dmul+0x4fc>)
   121ae:	e668      	b.n	11e82 <__aeabi_dmul+0xce>
   121b0:	0003      	movs	r3, r0
   121b2:	4654      	mov	r4, sl
   121b4:	3b28      	subs	r3, #40	; 0x28
   121b6:	409c      	lsls	r4, r3
   121b8:	2300      	movs	r3, #0
   121ba:	e6b9      	b.n	11f30 <__aeabi_dmul+0x17c>
   121bc:	f7fd ff8a 	bl	100d4 <__clzsi2>
   121c0:	3020      	adds	r0, #32
   121c2:	e6a6      	b.n	11f12 <__aeabi_dmul+0x15e>
   121c4:	0003      	movs	r3, r0
   121c6:	3b28      	subs	r3, #40	; 0x28
   121c8:	409f      	lsls	r7, r3
   121ca:	2300      	movs	r3, #0
   121cc:	46bb      	mov	fp, r7
   121ce:	4699      	mov	r9, r3
   121d0:	e68a      	b.n	11ee8 <__aeabi_dmul+0x134>
   121d2:	f7fd ff7f 	bl	100d4 <__clzsi2>
   121d6:	3020      	adds	r0, #32
   121d8:	e674      	b.n	11ec4 <__aeabi_dmul+0x110>
   121da:	46b4      	mov	ip, r6
   121dc:	e7ad      	b.n	1213a <__aeabi_dmul+0x386>
   121de:	2501      	movs	r5, #1
   121e0:	1a2a      	subs	r2, r5, r0
   121e2:	2a38      	cmp	r2, #56	; 0x38
   121e4:	dd06      	ble.n	121f4 <__aeabi_dmul+0x440>
   121e6:	9b01      	ldr	r3, [sp, #4]
   121e8:	2400      	movs	r4, #0
   121ea:	401d      	ands	r5, r3
   121ec:	2300      	movs	r3, #0
   121ee:	2200      	movs	r2, #0
   121f0:	4699      	mov	r9, r3
   121f2:	e646      	b.n	11e82 <__aeabi_dmul+0xce>
   121f4:	2a1f      	cmp	r2, #31
   121f6:	dc21      	bgt.n	1223c <__aeabi_dmul+0x488>
   121f8:	2520      	movs	r5, #32
   121fa:	0020      	movs	r0, r4
   121fc:	1aad      	subs	r5, r5, r2
   121fe:	001e      	movs	r6, r3
   12200:	40ab      	lsls	r3, r5
   12202:	40a8      	lsls	r0, r5
   12204:	40d6      	lsrs	r6, r2
   12206:	1e5d      	subs	r5, r3, #1
   12208:	41ab      	sbcs	r3, r5
   1220a:	4330      	orrs	r0, r6
   1220c:	4318      	orrs	r0, r3
   1220e:	40d4      	lsrs	r4, r2
   12210:	0743      	lsls	r3, r0, #29
   12212:	d009      	beq.n	12228 <__aeabi_dmul+0x474>
   12214:	230f      	movs	r3, #15
   12216:	4003      	ands	r3, r0
   12218:	2b04      	cmp	r3, #4
   1221a:	d005      	beq.n	12228 <__aeabi_dmul+0x474>
   1221c:	0003      	movs	r3, r0
   1221e:	1d18      	adds	r0, r3, #4
   12220:	4298      	cmp	r0, r3
   12222:	419b      	sbcs	r3, r3
   12224:	425b      	negs	r3, r3
   12226:	18e4      	adds	r4, r4, r3
   12228:	0223      	lsls	r3, r4, #8
   1222a:	d521      	bpl.n	12270 <__aeabi_dmul+0x4bc>
   1222c:	2501      	movs	r5, #1
   1222e:	9b01      	ldr	r3, [sp, #4]
   12230:	2401      	movs	r4, #1
   12232:	401d      	ands	r5, r3
   12234:	2300      	movs	r3, #0
   12236:	2200      	movs	r2, #0
   12238:	4699      	mov	r9, r3
   1223a:	e622      	b.n	11e82 <__aeabi_dmul+0xce>
   1223c:	251f      	movs	r5, #31
   1223e:	0021      	movs	r1, r4
   12240:	426d      	negs	r5, r5
   12242:	1a28      	subs	r0, r5, r0
   12244:	40c1      	lsrs	r1, r0
   12246:	0008      	movs	r0, r1
   12248:	2a20      	cmp	r2, #32
   1224a:	d01d      	beq.n	12288 <__aeabi_dmul+0x4d4>
   1224c:	355f      	adds	r5, #95	; 0x5f
   1224e:	1aaa      	subs	r2, r5, r2
   12250:	4094      	lsls	r4, r2
   12252:	4323      	orrs	r3, r4
   12254:	1e5c      	subs	r4, r3, #1
   12256:	41a3      	sbcs	r3, r4
   12258:	2507      	movs	r5, #7
   1225a:	4303      	orrs	r3, r0
   1225c:	401d      	ands	r5, r3
   1225e:	2200      	movs	r2, #0
   12260:	2d00      	cmp	r5, #0
   12262:	d009      	beq.n	12278 <__aeabi_dmul+0x4c4>
   12264:	220f      	movs	r2, #15
   12266:	2400      	movs	r4, #0
   12268:	401a      	ands	r2, r3
   1226a:	0018      	movs	r0, r3
   1226c:	2a04      	cmp	r2, #4
   1226e:	d1d6      	bne.n	1221e <__aeabi_dmul+0x46a>
   12270:	0003      	movs	r3, r0
   12272:	0765      	lsls	r5, r4, #29
   12274:	0264      	lsls	r4, r4, #9
   12276:	0b22      	lsrs	r2, r4, #12
   12278:	08db      	lsrs	r3, r3, #3
   1227a:	432b      	orrs	r3, r5
   1227c:	2501      	movs	r5, #1
   1227e:	4699      	mov	r9, r3
   12280:	9b01      	ldr	r3, [sp, #4]
   12282:	2400      	movs	r4, #0
   12284:	401d      	ands	r5, r3
   12286:	e5fc      	b.n	11e82 <__aeabi_dmul+0xce>
   12288:	2400      	movs	r4, #0
   1228a:	e7e2      	b.n	12252 <__aeabi_dmul+0x49e>
   1228c:	2280      	movs	r2, #128	; 0x80
   1228e:	2501      	movs	r5, #1
   12290:	0312      	lsls	r2, r2, #12
   12292:	4322      	orrs	r2, r4
   12294:	9901      	ldr	r1, [sp, #4]
   12296:	0312      	lsls	r2, r2, #12
   12298:	0b12      	lsrs	r2, r2, #12
   1229a:	400d      	ands	r5, r1
   1229c:	4699      	mov	r9, r3
   1229e:	4c04      	ldr	r4, [pc, #16]	; (122b0 <__aeabi_dmul+0x4fc>)
   122a0:	e5ef      	b.n	11e82 <__aeabi_dmul+0xce>
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	000003ff 	.word	0x000003ff
   122a8:	feffffff 	.word	0xfeffffff
   122ac:	000007fe 	.word	0x000007fe
   122b0:	000007ff 	.word	0x000007ff

000122b4 <__aeabi_dsub>:
   122b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122b6:	4646      	mov	r6, r8
   122b8:	46d6      	mov	lr, sl
   122ba:	464f      	mov	r7, r9
   122bc:	030c      	lsls	r4, r1, #12
   122be:	b5c0      	push	{r6, r7, lr}
   122c0:	0fcd      	lsrs	r5, r1, #31
   122c2:	004e      	lsls	r6, r1, #1
   122c4:	0a61      	lsrs	r1, r4, #9
   122c6:	0f44      	lsrs	r4, r0, #29
   122c8:	430c      	orrs	r4, r1
   122ca:	00c1      	lsls	r1, r0, #3
   122cc:	0058      	lsls	r0, r3, #1
   122ce:	0d40      	lsrs	r0, r0, #21
   122d0:	4684      	mov	ip, r0
   122d2:	468a      	mov	sl, r1
   122d4:	000f      	movs	r7, r1
   122d6:	0319      	lsls	r1, r3, #12
   122d8:	0f50      	lsrs	r0, r2, #29
   122da:	0a49      	lsrs	r1, r1, #9
   122dc:	4301      	orrs	r1, r0
   122de:	48c6      	ldr	r0, [pc, #792]	; (125f8 <__aeabi_dsub+0x344>)
   122e0:	0d76      	lsrs	r6, r6, #21
   122e2:	46a8      	mov	r8, r5
   122e4:	0fdb      	lsrs	r3, r3, #31
   122e6:	00d2      	lsls	r2, r2, #3
   122e8:	4584      	cmp	ip, r0
   122ea:	d100      	bne.n	122ee <__aeabi_dsub+0x3a>
   122ec:	e0d8      	b.n	124a0 <__aeabi_dsub+0x1ec>
   122ee:	2001      	movs	r0, #1
   122f0:	4043      	eors	r3, r0
   122f2:	42ab      	cmp	r3, r5
   122f4:	d100      	bne.n	122f8 <__aeabi_dsub+0x44>
   122f6:	e0a6      	b.n	12446 <__aeabi_dsub+0x192>
   122f8:	4660      	mov	r0, ip
   122fa:	1a35      	subs	r5, r6, r0
   122fc:	2d00      	cmp	r5, #0
   122fe:	dc00      	bgt.n	12302 <__aeabi_dsub+0x4e>
   12300:	e105      	b.n	1250e <__aeabi_dsub+0x25a>
   12302:	2800      	cmp	r0, #0
   12304:	d110      	bne.n	12328 <__aeabi_dsub+0x74>
   12306:	000b      	movs	r3, r1
   12308:	4313      	orrs	r3, r2
   1230a:	d100      	bne.n	1230e <__aeabi_dsub+0x5a>
   1230c:	e0d7      	b.n	124be <__aeabi_dsub+0x20a>
   1230e:	1e6b      	subs	r3, r5, #1
   12310:	2b00      	cmp	r3, #0
   12312:	d000      	beq.n	12316 <__aeabi_dsub+0x62>
   12314:	e14b      	b.n	125ae <__aeabi_dsub+0x2fa>
   12316:	4653      	mov	r3, sl
   12318:	1a9f      	subs	r7, r3, r2
   1231a:	45ba      	cmp	sl, r7
   1231c:	4180      	sbcs	r0, r0
   1231e:	1a64      	subs	r4, r4, r1
   12320:	4240      	negs	r0, r0
   12322:	1a24      	subs	r4, r4, r0
   12324:	2601      	movs	r6, #1
   12326:	e01e      	b.n	12366 <__aeabi_dsub+0xb2>
   12328:	4bb3      	ldr	r3, [pc, #716]	; (125f8 <__aeabi_dsub+0x344>)
   1232a:	429e      	cmp	r6, r3
   1232c:	d048      	beq.n	123c0 <__aeabi_dsub+0x10c>
   1232e:	2380      	movs	r3, #128	; 0x80
   12330:	041b      	lsls	r3, r3, #16
   12332:	4319      	orrs	r1, r3
   12334:	2d38      	cmp	r5, #56	; 0x38
   12336:	dd00      	ble.n	1233a <__aeabi_dsub+0x86>
   12338:	e119      	b.n	1256e <__aeabi_dsub+0x2ba>
   1233a:	2d1f      	cmp	r5, #31
   1233c:	dd00      	ble.n	12340 <__aeabi_dsub+0x8c>
   1233e:	e14c      	b.n	125da <__aeabi_dsub+0x326>
   12340:	2320      	movs	r3, #32
   12342:	000f      	movs	r7, r1
   12344:	1b5b      	subs	r3, r3, r5
   12346:	0010      	movs	r0, r2
   12348:	409a      	lsls	r2, r3
   1234a:	409f      	lsls	r7, r3
   1234c:	40e8      	lsrs	r0, r5
   1234e:	1e53      	subs	r3, r2, #1
   12350:	419a      	sbcs	r2, r3
   12352:	40e9      	lsrs	r1, r5
   12354:	4307      	orrs	r7, r0
   12356:	4317      	orrs	r7, r2
   12358:	4653      	mov	r3, sl
   1235a:	1bdf      	subs	r7, r3, r7
   1235c:	1a61      	subs	r1, r4, r1
   1235e:	45ba      	cmp	sl, r7
   12360:	41a4      	sbcs	r4, r4
   12362:	4264      	negs	r4, r4
   12364:	1b0c      	subs	r4, r1, r4
   12366:	0223      	lsls	r3, r4, #8
   12368:	d400      	bmi.n	1236c <__aeabi_dsub+0xb8>
   1236a:	e0c5      	b.n	124f8 <__aeabi_dsub+0x244>
   1236c:	0264      	lsls	r4, r4, #9
   1236e:	0a65      	lsrs	r5, r4, #9
   12370:	2d00      	cmp	r5, #0
   12372:	d100      	bne.n	12376 <__aeabi_dsub+0xc2>
   12374:	e0f6      	b.n	12564 <__aeabi_dsub+0x2b0>
   12376:	0028      	movs	r0, r5
   12378:	f7fd feac 	bl	100d4 <__clzsi2>
   1237c:	0003      	movs	r3, r0
   1237e:	3b08      	subs	r3, #8
   12380:	2b1f      	cmp	r3, #31
   12382:	dd00      	ble.n	12386 <__aeabi_dsub+0xd2>
   12384:	e0e9      	b.n	1255a <__aeabi_dsub+0x2a6>
   12386:	2220      	movs	r2, #32
   12388:	003c      	movs	r4, r7
   1238a:	1ad2      	subs	r2, r2, r3
   1238c:	409d      	lsls	r5, r3
   1238e:	40d4      	lsrs	r4, r2
   12390:	409f      	lsls	r7, r3
   12392:	4325      	orrs	r5, r4
   12394:	429e      	cmp	r6, r3
   12396:	dd00      	ble.n	1239a <__aeabi_dsub+0xe6>
   12398:	e0db      	b.n	12552 <__aeabi_dsub+0x29e>
   1239a:	1b9e      	subs	r6, r3, r6
   1239c:	1c73      	adds	r3, r6, #1
   1239e:	2b1f      	cmp	r3, #31
   123a0:	dd00      	ble.n	123a4 <__aeabi_dsub+0xf0>
   123a2:	e10a      	b.n	125ba <__aeabi_dsub+0x306>
   123a4:	2220      	movs	r2, #32
   123a6:	0038      	movs	r0, r7
   123a8:	1ad2      	subs	r2, r2, r3
   123aa:	0029      	movs	r1, r5
   123ac:	4097      	lsls	r7, r2
   123ae:	002c      	movs	r4, r5
   123b0:	4091      	lsls	r1, r2
   123b2:	40d8      	lsrs	r0, r3
   123b4:	1e7a      	subs	r2, r7, #1
   123b6:	4197      	sbcs	r7, r2
   123b8:	40dc      	lsrs	r4, r3
   123ba:	2600      	movs	r6, #0
   123bc:	4301      	orrs	r1, r0
   123be:	430f      	orrs	r7, r1
   123c0:	077b      	lsls	r3, r7, #29
   123c2:	d009      	beq.n	123d8 <__aeabi_dsub+0x124>
   123c4:	230f      	movs	r3, #15
   123c6:	403b      	ands	r3, r7
   123c8:	2b04      	cmp	r3, #4
   123ca:	d005      	beq.n	123d8 <__aeabi_dsub+0x124>
   123cc:	1d3b      	adds	r3, r7, #4
   123ce:	42bb      	cmp	r3, r7
   123d0:	41bf      	sbcs	r7, r7
   123d2:	427f      	negs	r7, r7
   123d4:	19e4      	adds	r4, r4, r7
   123d6:	001f      	movs	r7, r3
   123d8:	0223      	lsls	r3, r4, #8
   123da:	d525      	bpl.n	12428 <__aeabi_dsub+0x174>
   123dc:	4b86      	ldr	r3, [pc, #536]	; (125f8 <__aeabi_dsub+0x344>)
   123de:	3601      	adds	r6, #1
   123e0:	429e      	cmp	r6, r3
   123e2:	d100      	bne.n	123e6 <__aeabi_dsub+0x132>
   123e4:	e0af      	b.n	12546 <__aeabi_dsub+0x292>
   123e6:	4b85      	ldr	r3, [pc, #532]	; (125fc <__aeabi_dsub+0x348>)
   123e8:	2501      	movs	r5, #1
   123ea:	401c      	ands	r4, r3
   123ec:	4643      	mov	r3, r8
   123ee:	0762      	lsls	r2, r4, #29
   123f0:	08ff      	lsrs	r7, r7, #3
   123f2:	0264      	lsls	r4, r4, #9
   123f4:	0576      	lsls	r6, r6, #21
   123f6:	4317      	orrs	r7, r2
   123f8:	0b24      	lsrs	r4, r4, #12
   123fa:	0d76      	lsrs	r6, r6, #21
   123fc:	401d      	ands	r5, r3
   123fe:	2100      	movs	r1, #0
   12400:	0324      	lsls	r4, r4, #12
   12402:	0b23      	lsrs	r3, r4, #12
   12404:	0d0c      	lsrs	r4, r1, #20
   12406:	4a7e      	ldr	r2, [pc, #504]	; (12600 <__aeabi_dsub+0x34c>)
   12408:	0524      	lsls	r4, r4, #20
   1240a:	431c      	orrs	r4, r3
   1240c:	4014      	ands	r4, r2
   1240e:	0533      	lsls	r3, r6, #20
   12410:	4323      	orrs	r3, r4
   12412:	005b      	lsls	r3, r3, #1
   12414:	07ed      	lsls	r5, r5, #31
   12416:	085b      	lsrs	r3, r3, #1
   12418:	432b      	orrs	r3, r5
   1241a:	0038      	movs	r0, r7
   1241c:	0019      	movs	r1, r3
   1241e:	bc1c      	pop	{r2, r3, r4}
   12420:	4690      	mov	r8, r2
   12422:	4699      	mov	r9, r3
   12424:	46a2      	mov	sl, r4
   12426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12428:	2501      	movs	r5, #1
   1242a:	4643      	mov	r3, r8
   1242c:	0762      	lsls	r2, r4, #29
   1242e:	08ff      	lsrs	r7, r7, #3
   12430:	4317      	orrs	r7, r2
   12432:	08e4      	lsrs	r4, r4, #3
   12434:	401d      	ands	r5, r3
   12436:	4b70      	ldr	r3, [pc, #448]	; (125f8 <__aeabi_dsub+0x344>)
   12438:	429e      	cmp	r6, r3
   1243a:	d036      	beq.n	124aa <__aeabi_dsub+0x1f6>
   1243c:	0324      	lsls	r4, r4, #12
   1243e:	0576      	lsls	r6, r6, #21
   12440:	0b24      	lsrs	r4, r4, #12
   12442:	0d76      	lsrs	r6, r6, #21
   12444:	e7db      	b.n	123fe <__aeabi_dsub+0x14a>
   12446:	4663      	mov	r3, ip
   12448:	1af3      	subs	r3, r6, r3
   1244a:	2b00      	cmp	r3, #0
   1244c:	dc00      	bgt.n	12450 <__aeabi_dsub+0x19c>
   1244e:	e094      	b.n	1257a <__aeabi_dsub+0x2c6>
   12450:	4660      	mov	r0, ip
   12452:	2800      	cmp	r0, #0
   12454:	d035      	beq.n	124c2 <__aeabi_dsub+0x20e>
   12456:	4868      	ldr	r0, [pc, #416]	; (125f8 <__aeabi_dsub+0x344>)
   12458:	4286      	cmp	r6, r0
   1245a:	d0b1      	beq.n	123c0 <__aeabi_dsub+0x10c>
   1245c:	2780      	movs	r7, #128	; 0x80
   1245e:	043f      	lsls	r7, r7, #16
   12460:	4339      	orrs	r1, r7
   12462:	2b38      	cmp	r3, #56	; 0x38
   12464:	dc00      	bgt.n	12468 <__aeabi_dsub+0x1b4>
   12466:	e0fd      	b.n	12664 <__aeabi_dsub+0x3b0>
   12468:	430a      	orrs	r2, r1
   1246a:	0017      	movs	r7, r2
   1246c:	2100      	movs	r1, #0
   1246e:	1e7a      	subs	r2, r7, #1
   12470:	4197      	sbcs	r7, r2
   12472:	4457      	add	r7, sl
   12474:	4557      	cmp	r7, sl
   12476:	4180      	sbcs	r0, r0
   12478:	1909      	adds	r1, r1, r4
   1247a:	4244      	negs	r4, r0
   1247c:	190c      	adds	r4, r1, r4
   1247e:	0223      	lsls	r3, r4, #8
   12480:	d53a      	bpl.n	124f8 <__aeabi_dsub+0x244>
   12482:	4b5d      	ldr	r3, [pc, #372]	; (125f8 <__aeabi_dsub+0x344>)
   12484:	3601      	adds	r6, #1
   12486:	429e      	cmp	r6, r3
   12488:	d100      	bne.n	1248c <__aeabi_dsub+0x1d8>
   1248a:	e14b      	b.n	12724 <__aeabi_dsub+0x470>
   1248c:	2201      	movs	r2, #1
   1248e:	4b5b      	ldr	r3, [pc, #364]	; (125fc <__aeabi_dsub+0x348>)
   12490:	401c      	ands	r4, r3
   12492:	087b      	lsrs	r3, r7, #1
   12494:	4017      	ands	r7, r2
   12496:	431f      	orrs	r7, r3
   12498:	07e2      	lsls	r2, r4, #31
   1249a:	4317      	orrs	r7, r2
   1249c:	0864      	lsrs	r4, r4, #1
   1249e:	e78f      	b.n	123c0 <__aeabi_dsub+0x10c>
   124a0:	0008      	movs	r0, r1
   124a2:	4310      	orrs	r0, r2
   124a4:	d000      	beq.n	124a8 <__aeabi_dsub+0x1f4>
   124a6:	e724      	b.n	122f2 <__aeabi_dsub+0x3e>
   124a8:	e721      	b.n	122ee <__aeabi_dsub+0x3a>
   124aa:	0023      	movs	r3, r4
   124ac:	433b      	orrs	r3, r7
   124ae:	d100      	bne.n	124b2 <__aeabi_dsub+0x1fe>
   124b0:	e1b9      	b.n	12826 <__aeabi_dsub+0x572>
   124b2:	2280      	movs	r2, #128	; 0x80
   124b4:	0312      	lsls	r2, r2, #12
   124b6:	4314      	orrs	r4, r2
   124b8:	0324      	lsls	r4, r4, #12
   124ba:	0b24      	lsrs	r4, r4, #12
   124bc:	e79f      	b.n	123fe <__aeabi_dsub+0x14a>
   124be:	002e      	movs	r6, r5
   124c0:	e77e      	b.n	123c0 <__aeabi_dsub+0x10c>
   124c2:	0008      	movs	r0, r1
   124c4:	4310      	orrs	r0, r2
   124c6:	d100      	bne.n	124ca <__aeabi_dsub+0x216>
   124c8:	e0ca      	b.n	12660 <__aeabi_dsub+0x3ac>
   124ca:	1e58      	subs	r0, r3, #1
   124cc:	4684      	mov	ip, r0
   124ce:	2800      	cmp	r0, #0
   124d0:	d000      	beq.n	124d4 <__aeabi_dsub+0x220>
   124d2:	e0e7      	b.n	126a4 <__aeabi_dsub+0x3f0>
   124d4:	4452      	add	r2, sl
   124d6:	4552      	cmp	r2, sl
   124d8:	4180      	sbcs	r0, r0
   124da:	1864      	adds	r4, r4, r1
   124dc:	4240      	negs	r0, r0
   124de:	1824      	adds	r4, r4, r0
   124e0:	0017      	movs	r7, r2
   124e2:	2601      	movs	r6, #1
   124e4:	0223      	lsls	r3, r4, #8
   124e6:	d507      	bpl.n	124f8 <__aeabi_dsub+0x244>
   124e8:	2602      	movs	r6, #2
   124ea:	e7cf      	b.n	1248c <__aeabi_dsub+0x1d8>
   124ec:	4664      	mov	r4, ip
   124ee:	432c      	orrs	r4, r5
   124f0:	d100      	bne.n	124f4 <__aeabi_dsub+0x240>
   124f2:	e1b3      	b.n	1285c <__aeabi_dsub+0x5a8>
   124f4:	002c      	movs	r4, r5
   124f6:	4667      	mov	r7, ip
   124f8:	077b      	lsls	r3, r7, #29
   124fa:	d000      	beq.n	124fe <__aeabi_dsub+0x24a>
   124fc:	e762      	b.n	123c4 <__aeabi_dsub+0x110>
   124fe:	0763      	lsls	r3, r4, #29
   12500:	08ff      	lsrs	r7, r7, #3
   12502:	431f      	orrs	r7, r3
   12504:	2501      	movs	r5, #1
   12506:	4643      	mov	r3, r8
   12508:	08e4      	lsrs	r4, r4, #3
   1250a:	401d      	ands	r5, r3
   1250c:	e793      	b.n	12436 <__aeabi_dsub+0x182>
   1250e:	2d00      	cmp	r5, #0
   12510:	d178      	bne.n	12604 <__aeabi_dsub+0x350>
   12512:	1c75      	adds	r5, r6, #1
   12514:	056d      	lsls	r5, r5, #21
   12516:	0d6d      	lsrs	r5, r5, #21
   12518:	2d01      	cmp	r5, #1
   1251a:	dc00      	bgt.n	1251e <__aeabi_dsub+0x26a>
   1251c:	e0f2      	b.n	12704 <__aeabi_dsub+0x450>
   1251e:	4650      	mov	r0, sl
   12520:	1a80      	subs	r0, r0, r2
   12522:	4582      	cmp	sl, r0
   12524:	41bf      	sbcs	r7, r7
   12526:	1a65      	subs	r5, r4, r1
   12528:	427f      	negs	r7, r7
   1252a:	1bed      	subs	r5, r5, r7
   1252c:	4684      	mov	ip, r0
   1252e:	0228      	lsls	r0, r5, #8
   12530:	d400      	bmi.n	12534 <__aeabi_dsub+0x280>
   12532:	e08c      	b.n	1264e <__aeabi_dsub+0x39a>
   12534:	4650      	mov	r0, sl
   12536:	1a17      	subs	r7, r2, r0
   12538:	42ba      	cmp	r2, r7
   1253a:	4192      	sbcs	r2, r2
   1253c:	1b0c      	subs	r4, r1, r4
   1253e:	4255      	negs	r5, r2
   12540:	1b65      	subs	r5, r4, r5
   12542:	4698      	mov	r8, r3
   12544:	e714      	b.n	12370 <__aeabi_dsub+0xbc>
   12546:	2501      	movs	r5, #1
   12548:	4643      	mov	r3, r8
   1254a:	2400      	movs	r4, #0
   1254c:	401d      	ands	r5, r3
   1254e:	2700      	movs	r7, #0
   12550:	e755      	b.n	123fe <__aeabi_dsub+0x14a>
   12552:	4c2a      	ldr	r4, [pc, #168]	; (125fc <__aeabi_dsub+0x348>)
   12554:	1af6      	subs	r6, r6, r3
   12556:	402c      	ands	r4, r5
   12558:	e732      	b.n	123c0 <__aeabi_dsub+0x10c>
   1255a:	003d      	movs	r5, r7
   1255c:	3828      	subs	r0, #40	; 0x28
   1255e:	4085      	lsls	r5, r0
   12560:	2700      	movs	r7, #0
   12562:	e717      	b.n	12394 <__aeabi_dsub+0xe0>
   12564:	0038      	movs	r0, r7
   12566:	f7fd fdb5 	bl	100d4 <__clzsi2>
   1256a:	3020      	adds	r0, #32
   1256c:	e706      	b.n	1237c <__aeabi_dsub+0xc8>
   1256e:	430a      	orrs	r2, r1
   12570:	0017      	movs	r7, r2
   12572:	2100      	movs	r1, #0
   12574:	1e7a      	subs	r2, r7, #1
   12576:	4197      	sbcs	r7, r2
   12578:	e6ee      	b.n	12358 <__aeabi_dsub+0xa4>
   1257a:	2b00      	cmp	r3, #0
   1257c:	d000      	beq.n	12580 <__aeabi_dsub+0x2cc>
   1257e:	e0e5      	b.n	1274c <__aeabi_dsub+0x498>
   12580:	1c73      	adds	r3, r6, #1
   12582:	469c      	mov	ip, r3
   12584:	055b      	lsls	r3, r3, #21
   12586:	0d5b      	lsrs	r3, r3, #21
   12588:	2b01      	cmp	r3, #1
   1258a:	dc00      	bgt.n	1258e <__aeabi_dsub+0x2da>
   1258c:	e09f      	b.n	126ce <__aeabi_dsub+0x41a>
   1258e:	4b1a      	ldr	r3, [pc, #104]	; (125f8 <__aeabi_dsub+0x344>)
   12590:	459c      	cmp	ip, r3
   12592:	d100      	bne.n	12596 <__aeabi_dsub+0x2e2>
   12594:	e0c5      	b.n	12722 <__aeabi_dsub+0x46e>
   12596:	4452      	add	r2, sl
   12598:	4552      	cmp	r2, sl
   1259a:	4180      	sbcs	r0, r0
   1259c:	1864      	adds	r4, r4, r1
   1259e:	4240      	negs	r0, r0
   125a0:	1824      	adds	r4, r4, r0
   125a2:	07e7      	lsls	r7, r4, #31
   125a4:	0852      	lsrs	r2, r2, #1
   125a6:	4317      	orrs	r7, r2
   125a8:	0864      	lsrs	r4, r4, #1
   125aa:	4666      	mov	r6, ip
   125ac:	e708      	b.n	123c0 <__aeabi_dsub+0x10c>
   125ae:	4812      	ldr	r0, [pc, #72]	; (125f8 <__aeabi_dsub+0x344>)
   125b0:	4285      	cmp	r5, r0
   125b2:	d100      	bne.n	125b6 <__aeabi_dsub+0x302>
   125b4:	e085      	b.n	126c2 <__aeabi_dsub+0x40e>
   125b6:	001d      	movs	r5, r3
   125b8:	e6bc      	b.n	12334 <__aeabi_dsub+0x80>
   125ba:	0029      	movs	r1, r5
   125bc:	3e1f      	subs	r6, #31
   125be:	40f1      	lsrs	r1, r6
   125c0:	2b20      	cmp	r3, #32
   125c2:	d100      	bne.n	125c6 <__aeabi_dsub+0x312>
   125c4:	e07f      	b.n	126c6 <__aeabi_dsub+0x412>
   125c6:	2240      	movs	r2, #64	; 0x40
   125c8:	1ad3      	subs	r3, r2, r3
   125ca:	409d      	lsls	r5, r3
   125cc:	432f      	orrs	r7, r5
   125ce:	1e7d      	subs	r5, r7, #1
   125d0:	41af      	sbcs	r7, r5
   125d2:	2400      	movs	r4, #0
   125d4:	430f      	orrs	r7, r1
   125d6:	2600      	movs	r6, #0
   125d8:	e78e      	b.n	124f8 <__aeabi_dsub+0x244>
   125da:	002b      	movs	r3, r5
   125dc:	000f      	movs	r7, r1
   125de:	3b20      	subs	r3, #32
   125e0:	40df      	lsrs	r7, r3
   125e2:	2d20      	cmp	r5, #32
   125e4:	d071      	beq.n	126ca <__aeabi_dsub+0x416>
   125e6:	2340      	movs	r3, #64	; 0x40
   125e8:	1b5d      	subs	r5, r3, r5
   125ea:	40a9      	lsls	r1, r5
   125ec:	430a      	orrs	r2, r1
   125ee:	1e51      	subs	r1, r2, #1
   125f0:	418a      	sbcs	r2, r1
   125f2:	2100      	movs	r1, #0
   125f4:	4317      	orrs	r7, r2
   125f6:	e6af      	b.n	12358 <__aeabi_dsub+0xa4>
   125f8:	000007ff 	.word	0x000007ff
   125fc:	ff7fffff 	.word	0xff7fffff
   12600:	800fffff 	.word	0x800fffff
   12604:	2e00      	cmp	r6, #0
   12606:	d03e      	beq.n	12686 <__aeabi_dsub+0x3d2>
   12608:	4eb3      	ldr	r6, [pc, #716]	; (128d8 <__aeabi_dsub+0x624>)
   1260a:	45b4      	cmp	ip, r6
   1260c:	d045      	beq.n	1269a <__aeabi_dsub+0x3e6>
   1260e:	2680      	movs	r6, #128	; 0x80
   12610:	0436      	lsls	r6, r6, #16
   12612:	426d      	negs	r5, r5
   12614:	4334      	orrs	r4, r6
   12616:	2d38      	cmp	r5, #56	; 0x38
   12618:	dd00      	ble.n	1261c <__aeabi_dsub+0x368>
   1261a:	e0a8      	b.n	1276e <__aeabi_dsub+0x4ba>
   1261c:	2d1f      	cmp	r5, #31
   1261e:	dd00      	ble.n	12622 <__aeabi_dsub+0x36e>
   12620:	e11f      	b.n	12862 <__aeabi_dsub+0x5ae>
   12622:	2620      	movs	r6, #32
   12624:	0027      	movs	r7, r4
   12626:	4650      	mov	r0, sl
   12628:	1b76      	subs	r6, r6, r5
   1262a:	40b7      	lsls	r7, r6
   1262c:	40e8      	lsrs	r0, r5
   1262e:	4307      	orrs	r7, r0
   12630:	4650      	mov	r0, sl
   12632:	40b0      	lsls	r0, r6
   12634:	1e46      	subs	r6, r0, #1
   12636:	41b0      	sbcs	r0, r6
   12638:	40ec      	lsrs	r4, r5
   1263a:	4338      	orrs	r0, r7
   1263c:	1a17      	subs	r7, r2, r0
   1263e:	42ba      	cmp	r2, r7
   12640:	4192      	sbcs	r2, r2
   12642:	1b0c      	subs	r4, r1, r4
   12644:	4252      	negs	r2, r2
   12646:	1aa4      	subs	r4, r4, r2
   12648:	4666      	mov	r6, ip
   1264a:	4698      	mov	r8, r3
   1264c:	e68b      	b.n	12366 <__aeabi_dsub+0xb2>
   1264e:	4664      	mov	r4, ip
   12650:	4667      	mov	r7, ip
   12652:	432c      	orrs	r4, r5
   12654:	d000      	beq.n	12658 <__aeabi_dsub+0x3a4>
   12656:	e68b      	b.n	12370 <__aeabi_dsub+0xbc>
   12658:	2500      	movs	r5, #0
   1265a:	2600      	movs	r6, #0
   1265c:	2700      	movs	r7, #0
   1265e:	e6ea      	b.n	12436 <__aeabi_dsub+0x182>
   12660:	001e      	movs	r6, r3
   12662:	e6ad      	b.n	123c0 <__aeabi_dsub+0x10c>
   12664:	2b1f      	cmp	r3, #31
   12666:	dc60      	bgt.n	1272a <__aeabi_dsub+0x476>
   12668:	2720      	movs	r7, #32
   1266a:	1af8      	subs	r0, r7, r3
   1266c:	000f      	movs	r7, r1
   1266e:	4684      	mov	ip, r0
   12670:	4087      	lsls	r7, r0
   12672:	0010      	movs	r0, r2
   12674:	40d8      	lsrs	r0, r3
   12676:	4307      	orrs	r7, r0
   12678:	4660      	mov	r0, ip
   1267a:	4082      	lsls	r2, r0
   1267c:	1e50      	subs	r0, r2, #1
   1267e:	4182      	sbcs	r2, r0
   12680:	40d9      	lsrs	r1, r3
   12682:	4317      	orrs	r7, r2
   12684:	e6f5      	b.n	12472 <__aeabi_dsub+0x1be>
   12686:	0026      	movs	r6, r4
   12688:	4650      	mov	r0, sl
   1268a:	4306      	orrs	r6, r0
   1268c:	d005      	beq.n	1269a <__aeabi_dsub+0x3e6>
   1268e:	43ed      	mvns	r5, r5
   12690:	2d00      	cmp	r5, #0
   12692:	d0d3      	beq.n	1263c <__aeabi_dsub+0x388>
   12694:	4e90      	ldr	r6, [pc, #576]	; (128d8 <__aeabi_dsub+0x624>)
   12696:	45b4      	cmp	ip, r6
   12698:	d1bd      	bne.n	12616 <__aeabi_dsub+0x362>
   1269a:	000c      	movs	r4, r1
   1269c:	0017      	movs	r7, r2
   1269e:	4666      	mov	r6, ip
   126a0:	4698      	mov	r8, r3
   126a2:	e68d      	b.n	123c0 <__aeabi_dsub+0x10c>
   126a4:	488c      	ldr	r0, [pc, #560]	; (128d8 <__aeabi_dsub+0x624>)
   126a6:	4283      	cmp	r3, r0
   126a8:	d00b      	beq.n	126c2 <__aeabi_dsub+0x40e>
   126aa:	4663      	mov	r3, ip
   126ac:	e6d9      	b.n	12462 <__aeabi_dsub+0x1ae>
   126ae:	2d00      	cmp	r5, #0
   126b0:	d000      	beq.n	126b4 <__aeabi_dsub+0x400>
   126b2:	e096      	b.n	127e2 <__aeabi_dsub+0x52e>
   126b4:	0008      	movs	r0, r1
   126b6:	4310      	orrs	r0, r2
   126b8:	d100      	bne.n	126bc <__aeabi_dsub+0x408>
   126ba:	e0e2      	b.n	12882 <__aeabi_dsub+0x5ce>
   126bc:	000c      	movs	r4, r1
   126be:	0017      	movs	r7, r2
   126c0:	4698      	mov	r8, r3
   126c2:	4e85      	ldr	r6, [pc, #532]	; (128d8 <__aeabi_dsub+0x624>)
   126c4:	e67c      	b.n	123c0 <__aeabi_dsub+0x10c>
   126c6:	2500      	movs	r5, #0
   126c8:	e780      	b.n	125cc <__aeabi_dsub+0x318>
   126ca:	2100      	movs	r1, #0
   126cc:	e78e      	b.n	125ec <__aeabi_dsub+0x338>
   126ce:	0023      	movs	r3, r4
   126d0:	4650      	mov	r0, sl
   126d2:	4303      	orrs	r3, r0
   126d4:	2e00      	cmp	r6, #0
   126d6:	d000      	beq.n	126da <__aeabi_dsub+0x426>
   126d8:	e0a8      	b.n	1282c <__aeabi_dsub+0x578>
   126da:	2b00      	cmp	r3, #0
   126dc:	d100      	bne.n	126e0 <__aeabi_dsub+0x42c>
   126de:	e0de      	b.n	1289e <__aeabi_dsub+0x5ea>
   126e0:	000b      	movs	r3, r1
   126e2:	4313      	orrs	r3, r2
   126e4:	d100      	bne.n	126e8 <__aeabi_dsub+0x434>
   126e6:	e66b      	b.n	123c0 <__aeabi_dsub+0x10c>
   126e8:	4452      	add	r2, sl
   126ea:	4552      	cmp	r2, sl
   126ec:	4180      	sbcs	r0, r0
   126ee:	1864      	adds	r4, r4, r1
   126f0:	4240      	negs	r0, r0
   126f2:	1824      	adds	r4, r4, r0
   126f4:	0017      	movs	r7, r2
   126f6:	0223      	lsls	r3, r4, #8
   126f8:	d400      	bmi.n	126fc <__aeabi_dsub+0x448>
   126fa:	e6fd      	b.n	124f8 <__aeabi_dsub+0x244>
   126fc:	4b77      	ldr	r3, [pc, #476]	; (128dc <__aeabi_dsub+0x628>)
   126fe:	4666      	mov	r6, ip
   12700:	401c      	ands	r4, r3
   12702:	e65d      	b.n	123c0 <__aeabi_dsub+0x10c>
   12704:	0025      	movs	r5, r4
   12706:	4650      	mov	r0, sl
   12708:	4305      	orrs	r5, r0
   1270a:	2e00      	cmp	r6, #0
   1270c:	d1cf      	bne.n	126ae <__aeabi_dsub+0x3fa>
   1270e:	2d00      	cmp	r5, #0
   12710:	d14f      	bne.n	127b2 <__aeabi_dsub+0x4fe>
   12712:	000c      	movs	r4, r1
   12714:	4314      	orrs	r4, r2
   12716:	d100      	bne.n	1271a <__aeabi_dsub+0x466>
   12718:	e0a0      	b.n	1285c <__aeabi_dsub+0x5a8>
   1271a:	000c      	movs	r4, r1
   1271c:	0017      	movs	r7, r2
   1271e:	4698      	mov	r8, r3
   12720:	e64e      	b.n	123c0 <__aeabi_dsub+0x10c>
   12722:	4666      	mov	r6, ip
   12724:	2400      	movs	r4, #0
   12726:	2700      	movs	r7, #0
   12728:	e685      	b.n	12436 <__aeabi_dsub+0x182>
   1272a:	001f      	movs	r7, r3
   1272c:	0008      	movs	r0, r1
   1272e:	3f20      	subs	r7, #32
   12730:	40f8      	lsrs	r0, r7
   12732:	0007      	movs	r7, r0
   12734:	2b20      	cmp	r3, #32
   12736:	d100      	bne.n	1273a <__aeabi_dsub+0x486>
   12738:	e08e      	b.n	12858 <__aeabi_dsub+0x5a4>
   1273a:	2040      	movs	r0, #64	; 0x40
   1273c:	1ac3      	subs	r3, r0, r3
   1273e:	4099      	lsls	r1, r3
   12740:	430a      	orrs	r2, r1
   12742:	1e51      	subs	r1, r2, #1
   12744:	418a      	sbcs	r2, r1
   12746:	2100      	movs	r1, #0
   12748:	4317      	orrs	r7, r2
   1274a:	e692      	b.n	12472 <__aeabi_dsub+0x1be>
   1274c:	2e00      	cmp	r6, #0
   1274e:	d114      	bne.n	1277a <__aeabi_dsub+0x4c6>
   12750:	0026      	movs	r6, r4
   12752:	4650      	mov	r0, sl
   12754:	4306      	orrs	r6, r0
   12756:	d062      	beq.n	1281e <__aeabi_dsub+0x56a>
   12758:	43db      	mvns	r3, r3
   1275a:	2b00      	cmp	r3, #0
   1275c:	d15c      	bne.n	12818 <__aeabi_dsub+0x564>
   1275e:	1887      	adds	r7, r0, r2
   12760:	4297      	cmp	r7, r2
   12762:	4192      	sbcs	r2, r2
   12764:	1864      	adds	r4, r4, r1
   12766:	4252      	negs	r2, r2
   12768:	18a4      	adds	r4, r4, r2
   1276a:	4666      	mov	r6, ip
   1276c:	e687      	b.n	1247e <__aeabi_dsub+0x1ca>
   1276e:	4650      	mov	r0, sl
   12770:	4320      	orrs	r0, r4
   12772:	1e44      	subs	r4, r0, #1
   12774:	41a0      	sbcs	r0, r4
   12776:	2400      	movs	r4, #0
   12778:	e760      	b.n	1263c <__aeabi_dsub+0x388>
   1277a:	4e57      	ldr	r6, [pc, #348]	; (128d8 <__aeabi_dsub+0x624>)
   1277c:	45b4      	cmp	ip, r6
   1277e:	d04e      	beq.n	1281e <__aeabi_dsub+0x56a>
   12780:	2680      	movs	r6, #128	; 0x80
   12782:	0436      	lsls	r6, r6, #16
   12784:	425b      	negs	r3, r3
   12786:	4334      	orrs	r4, r6
   12788:	2b38      	cmp	r3, #56	; 0x38
   1278a:	dd00      	ble.n	1278e <__aeabi_dsub+0x4da>
   1278c:	e07f      	b.n	1288e <__aeabi_dsub+0x5da>
   1278e:	2b1f      	cmp	r3, #31
   12790:	dd00      	ble.n	12794 <__aeabi_dsub+0x4e0>
   12792:	e08b      	b.n	128ac <__aeabi_dsub+0x5f8>
   12794:	2620      	movs	r6, #32
   12796:	0027      	movs	r7, r4
   12798:	4650      	mov	r0, sl
   1279a:	1af6      	subs	r6, r6, r3
   1279c:	40b7      	lsls	r7, r6
   1279e:	40d8      	lsrs	r0, r3
   127a0:	4307      	orrs	r7, r0
   127a2:	4650      	mov	r0, sl
   127a4:	40b0      	lsls	r0, r6
   127a6:	1e46      	subs	r6, r0, #1
   127a8:	41b0      	sbcs	r0, r6
   127aa:	4307      	orrs	r7, r0
   127ac:	40dc      	lsrs	r4, r3
   127ae:	18bf      	adds	r7, r7, r2
   127b0:	e7d6      	b.n	12760 <__aeabi_dsub+0x4ac>
   127b2:	000d      	movs	r5, r1
   127b4:	4315      	orrs	r5, r2
   127b6:	d100      	bne.n	127ba <__aeabi_dsub+0x506>
   127b8:	e602      	b.n	123c0 <__aeabi_dsub+0x10c>
   127ba:	4650      	mov	r0, sl
   127bc:	1a80      	subs	r0, r0, r2
   127be:	4582      	cmp	sl, r0
   127c0:	41bf      	sbcs	r7, r7
   127c2:	1a65      	subs	r5, r4, r1
   127c4:	427f      	negs	r7, r7
   127c6:	1bed      	subs	r5, r5, r7
   127c8:	4684      	mov	ip, r0
   127ca:	0228      	lsls	r0, r5, #8
   127cc:	d400      	bmi.n	127d0 <__aeabi_dsub+0x51c>
   127ce:	e68d      	b.n	124ec <__aeabi_dsub+0x238>
   127d0:	4650      	mov	r0, sl
   127d2:	1a17      	subs	r7, r2, r0
   127d4:	42ba      	cmp	r2, r7
   127d6:	4192      	sbcs	r2, r2
   127d8:	1b0c      	subs	r4, r1, r4
   127da:	4252      	negs	r2, r2
   127dc:	1aa4      	subs	r4, r4, r2
   127de:	4698      	mov	r8, r3
   127e0:	e5ee      	b.n	123c0 <__aeabi_dsub+0x10c>
   127e2:	000d      	movs	r5, r1
   127e4:	4315      	orrs	r5, r2
   127e6:	d100      	bne.n	127ea <__aeabi_dsub+0x536>
   127e8:	e76b      	b.n	126c2 <__aeabi_dsub+0x40e>
   127ea:	4650      	mov	r0, sl
   127ec:	0767      	lsls	r7, r4, #29
   127ee:	08c0      	lsrs	r0, r0, #3
   127f0:	4307      	orrs	r7, r0
   127f2:	2080      	movs	r0, #128	; 0x80
   127f4:	08e4      	lsrs	r4, r4, #3
   127f6:	0300      	lsls	r0, r0, #12
   127f8:	4204      	tst	r4, r0
   127fa:	d007      	beq.n	1280c <__aeabi_dsub+0x558>
   127fc:	08cd      	lsrs	r5, r1, #3
   127fe:	4205      	tst	r5, r0
   12800:	d104      	bne.n	1280c <__aeabi_dsub+0x558>
   12802:	002c      	movs	r4, r5
   12804:	4698      	mov	r8, r3
   12806:	08d7      	lsrs	r7, r2, #3
   12808:	0749      	lsls	r1, r1, #29
   1280a:	430f      	orrs	r7, r1
   1280c:	0f7b      	lsrs	r3, r7, #29
   1280e:	00e4      	lsls	r4, r4, #3
   12810:	431c      	orrs	r4, r3
   12812:	00ff      	lsls	r7, r7, #3
   12814:	4e30      	ldr	r6, [pc, #192]	; (128d8 <__aeabi_dsub+0x624>)
   12816:	e5d3      	b.n	123c0 <__aeabi_dsub+0x10c>
   12818:	4e2f      	ldr	r6, [pc, #188]	; (128d8 <__aeabi_dsub+0x624>)
   1281a:	45b4      	cmp	ip, r6
   1281c:	d1b4      	bne.n	12788 <__aeabi_dsub+0x4d4>
   1281e:	000c      	movs	r4, r1
   12820:	0017      	movs	r7, r2
   12822:	4666      	mov	r6, ip
   12824:	e5cc      	b.n	123c0 <__aeabi_dsub+0x10c>
   12826:	2700      	movs	r7, #0
   12828:	2400      	movs	r4, #0
   1282a:	e5e8      	b.n	123fe <__aeabi_dsub+0x14a>
   1282c:	2b00      	cmp	r3, #0
   1282e:	d039      	beq.n	128a4 <__aeabi_dsub+0x5f0>
   12830:	000b      	movs	r3, r1
   12832:	4313      	orrs	r3, r2
   12834:	d100      	bne.n	12838 <__aeabi_dsub+0x584>
   12836:	e744      	b.n	126c2 <__aeabi_dsub+0x40e>
   12838:	08c0      	lsrs	r0, r0, #3
   1283a:	0767      	lsls	r7, r4, #29
   1283c:	4307      	orrs	r7, r0
   1283e:	2080      	movs	r0, #128	; 0x80
   12840:	08e4      	lsrs	r4, r4, #3
   12842:	0300      	lsls	r0, r0, #12
   12844:	4204      	tst	r4, r0
   12846:	d0e1      	beq.n	1280c <__aeabi_dsub+0x558>
   12848:	08cb      	lsrs	r3, r1, #3
   1284a:	4203      	tst	r3, r0
   1284c:	d1de      	bne.n	1280c <__aeabi_dsub+0x558>
   1284e:	08d7      	lsrs	r7, r2, #3
   12850:	0749      	lsls	r1, r1, #29
   12852:	430f      	orrs	r7, r1
   12854:	001c      	movs	r4, r3
   12856:	e7d9      	b.n	1280c <__aeabi_dsub+0x558>
   12858:	2100      	movs	r1, #0
   1285a:	e771      	b.n	12740 <__aeabi_dsub+0x48c>
   1285c:	2500      	movs	r5, #0
   1285e:	2700      	movs	r7, #0
   12860:	e5e9      	b.n	12436 <__aeabi_dsub+0x182>
   12862:	002e      	movs	r6, r5
   12864:	0027      	movs	r7, r4
   12866:	3e20      	subs	r6, #32
   12868:	40f7      	lsrs	r7, r6
   1286a:	2d20      	cmp	r5, #32
   1286c:	d02f      	beq.n	128ce <__aeabi_dsub+0x61a>
   1286e:	2640      	movs	r6, #64	; 0x40
   12870:	1b75      	subs	r5, r6, r5
   12872:	40ac      	lsls	r4, r5
   12874:	4650      	mov	r0, sl
   12876:	4320      	orrs	r0, r4
   12878:	1e44      	subs	r4, r0, #1
   1287a:	41a0      	sbcs	r0, r4
   1287c:	2400      	movs	r4, #0
   1287e:	4338      	orrs	r0, r7
   12880:	e6dc      	b.n	1263c <__aeabi_dsub+0x388>
   12882:	2480      	movs	r4, #128	; 0x80
   12884:	2500      	movs	r5, #0
   12886:	0324      	lsls	r4, r4, #12
   12888:	4e13      	ldr	r6, [pc, #76]	; (128d8 <__aeabi_dsub+0x624>)
   1288a:	2700      	movs	r7, #0
   1288c:	e5d3      	b.n	12436 <__aeabi_dsub+0x182>
   1288e:	4650      	mov	r0, sl
   12890:	4320      	orrs	r0, r4
   12892:	0007      	movs	r7, r0
   12894:	1e78      	subs	r0, r7, #1
   12896:	4187      	sbcs	r7, r0
   12898:	2400      	movs	r4, #0
   1289a:	18bf      	adds	r7, r7, r2
   1289c:	e760      	b.n	12760 <__aeabi_dsub+0x4ac>
   1289e:	000c      	movs	r4, r1
   128a0:	0017      	movs	r7, r2
   128a2:	e58d      	b.n	123c0 <__aeabi_dsub+0x10c>
   128a4:	000c      	movs	r4, r1
   128a6:	0017      	movs	r7, r2
   128a8:	4e0b      	ldr	r6, [pc, #44]	; (128d8 <__aeabi_dsub+0x624>)
   128aa:	e589      	b.n	123c0 <__aeabi_dsub+0x10c>
   128ac:	001e      	movs	r6, r3
   128ae:	0027      	movs	r7, r4
   128b0:	3e20      	subs	r6, #32
   128b2:	40f7      	lsrs	r7, r6
   128b4:	2b20      	cmp	r3, #32
   128b6:	d00c      	beq.n	128d2 <__aeabi_dsub+0x61e>
   128b8:	2640      	movs	r6, #64	; 0x40
   128ba:	1af3      	subs	r3, r6, r3
   128bc:	409c      	lsls	r4, r3
   128be:	4650      	mov	r0, sl
   128c0:	4320      	orrs	r0, r4
   128c2:	1e44      	subs	r4, r0, #1
   128c4:	41a0      	sbcs	r0, r4
   128c6:	4307      	orrs	r7, r0
   128c8:	2400      	movs	r4, #0
   128ca:	18bf      	adds	r7, r7, r2
   128cc:	e748      	b.n	12760 <__aeabi_dsub+0x4ac>
   128ce:	2400      	movs	r4, #0
   128d0:	e7d0      	b.n	12874 <__aeabi_dsub+0x5c0>
   128d2:	2400      	movs	r4, #0
   128d4:	e7f3      	b.n	128be <__aeabi_dsub+0x60a>
   128d6:	46c0      	nop			; (mov r8, r8)
   128d8:	000007ff 	.word	0x000007ff
   128dc:	ff7fffff 	.word	0xff7fffff

000128e0 <__aeabi_d2iz>:
   128e0:	b530      	push	{r4, r5, lr}
   128e2:	4d13      	ldr	r5, [pc, #76]	; (12930 <__aeabi_d2iz+0x50>)
   128e4:	030a      	lsls	r2, r1, #12
   128e6:	004b      	lsls	r3, r1, #1
   128e8:	0b12      	lsrs	r2, r2, #12
   128ea:	0d5b      	lsrs	r3, r3, #21
   128ec:	0fc9      	lsrs	r1, r1, #31
   128ee:	2400      	movs	r4, #0
   128f0:	42ab      	cmp	r3, r5
   128f2:	dd10      	ble.n	12916 <__aeabi_d2iz+0x36>
   128f4:	4c0f      	ldr	r4, [pc, #60]	; (12934 <__aeabi_d2iz+0x54>)
   128f6:	42a3      	cmp	r3, r4
   128f8:	dc0f      	bgt.n	1291a <__aeabi_d2iz+0x3a>
   128fa:	2480      	movs	r4, #128	; 0x80
   128fc:	4d0e      	ldr	r5, [pc, #56]	; (12938 <__aeabi_d2iz+0x58>)
   128fe:	0364      	lsls	r4, r4, #13
   12900:	4322      	orrs	r2, r4
   12902:	1aed      	subs	r5, r5, r3
   12904:	2d1f      	cmp	r5, #31
   12906:	dd0b      	ble.n	12920 <__aeabi_d2iz+0x40>
   12908:	480c      	ldr	r0, [pc, #48]	; (1293c <__aeabi_d2iz+0x5c>)
   1290a:	1ac3      	subs	r3, r0, r3
   1290c:	40da      	lsrs	r2, r3
   1290e:	4254      	negs	r4, r2
   12910:	2900      	cmp	r1, #0
   12912:	d100      	bne.n	12916 <__aeabi_d2iz+0x36>
   12914:	0014      	movs	r4, r2
   12916:	0020      	movs	r0, r4
   12918:	bd30      	pop	{r4, r5, pc}
   1291a:	4b09      	ldr	r3, [pc, #36]	; (12940 <__aeabi_d2iz+0x60>)
   1291c:	18cc      	adds	r4, r1, r3
   1291e:	e7fa      	b.n	12916 <__aeabi_d2iz+0x36>
   12920:	4c08      	ldr	r4, [pc, #32]	; (12944 <__aeabi_d2iz+0x64>)
   12922:	40e8      	lsrs	r0, r5
   12924:	46a4      	mov	ip, r4
   12926:	4463      	add	r3, ip
   12928:	409a      	lsls	r2, r3
   1292a:	4302      	orrs	r2, r0
   1292c:	e7ef      	b.n	1290e <__aeabi_d2iz+0x2e>
   1292e:	46c0      	nop			; (mov r8, r8)
   12930:	000003fe 	.word	0x000003fe
   12934:	0000041d 	.word	0x0000041d
   12938:	00000433 	.word	0x00000433
   1293c:	00000413 	.word	0x00000413
   12940:	7fffffff 	.word	0x7fffffff
   12944:	fffffbed 	.word	0xfffffbed

00012948 <__aeabi_i2d>:
   12948:	b570      	push	{r4, r5, r6, lr}
   1294a:	2800      	cmp	r0, #0
   1294c:	d030      	beq.n	129b0 <__aeabi_i2d+0x68>
   1294e:	17c3      	asrs	r3, r0, #31
   12950:	18c4      	adds	r4, r0, r3
   12952:	405c      	eors	r4, r3
   12954:	0fc5      	lsrs	r5, r0, #31
   12956:	0020      	movs	r0, r4
   12958:	f7fd fbbc 	bl	100d4 <__clzsi2>
   1295c:	4b17      	ldr	r3, [pc, #92]	; (129bc <__aeabi_i2d+0x74>)
   1295e:	4a18      	ldr	r2, [pc, #96]	; (129c0 <__aeabi_i2d+0x78>)
   12960:	1a1b      	subs	r3, r3, r0
   12962:	1ad2      	subs	r2, r2, r3
   12964:	2a1f      	cmp	r2, #31
   12966:	dd18      	ble.n	1299a <__aeabi_i2d+0x52>
   12968:	4a16      	ldr	r2, [pc, #88]	; (129c4 <__aeabi_i2d+0x7c>)
   1296a:	1ad2      	subs	r2, r2, r3
   1296c:	4094      	lsls	r4, r2
   1296e:	2200      	movs	r2, #0
   12970:	0324      	lsls	r4, r4, #12
   12972:	055b      	lsls	r3, r3, #21
   12974:	0b24      	lsrs	r4, r4, #12
   12976:	0d5b      	lsrs	r3, r3, #21
   12978:	2100      	movs	r1, #0
   1297a:	0010      	movs	r0, r2
   1297c:	0324      	lsls	r4, r4, #12
   1297e:	0d0a      	lsrs	r2, r1, #20
   12980:	0b24      	lsrs	r4, r4, #12
   12982:	0512      	lsls	r2, r2, #20
   12984:	4322      	orrs	r2, r4
   12986:	4c10      	ldr	r4, [pc, #64]	; (129c8 <__aeabi_i2d+0x80>)
   12988:	051b      	lsls	r3, r3, #20
   1298a:	4022      	ands	r2, r4
   1298c:	4313      	orrs	r3, r2
   1298e:	005b      	lsls	r3, r3, #1
   12990:	07ed      	lsls	r5, r5, #31
   12992:	085b      	lsrs	r3, r3, #1
   12994:	432b      	orrs	r3, r5
   12996:	0019      	movs	r1, r3
   12998:	bd70      	pop	{r4, r5, r6, pc}
   1299a:	0021      	movs	r1, r4
   1299c:	4091      	lsls	r1, r2
   1299e:	000a      	movs	r2, r1
   129a0:	210b      	movs	r1, #11
   129a2:	1a08      	subs	r0, r1, r0
   129a4:	40c4      	lsrs	r4, r0
   129a6:	055b      	lsls	r3, r3, #21
   129a8:	0324      	lsls	r4, r4, #12
   129aa:	0b24      	lsrs	r4, r4, #12
   129ac:	0d5b      	lsrs	r3, r3, #21
   129ae:	e7e3      	b.n	12978 <__aeabi_i2d+0x30>
   129b0:	2500      	movs	r5, #0
   129b2:	2300      	movs	r3, #0
   129b4:	2400      	movs	r4, #0
   129b6:	2200      	movs	r2, #0
   129b8:	e7de      	b.n	12978 <__aeabi_i2d+0x30>
   129ba:	46c0      	nop			; (mov r8, r8)
   129bc:	0000041e 	.word	0x0000041e
   129c0:	00000433 	.word	0x00000433
   129c4:	00000413 	.word	0x00000413
   129c8:	800fffff 	.word	0x800fffff

000129cc <__aeabi_ui2d>:
   129cc:	b510      	push	{r4, lr}
   129ce:	1e04      	subs	r4, r0, #0
   129d0:	d028      	beq.n	12a24 <__aeabi_ui2d+0x58>
   129d2:	f7fd fb7f 	bl	100d4 <__clzsi2>
   129d6:	4b15      	ldr	r3, [pc, #84]	; (12a2c <__aeabi_ui2d+0x60>)
   129d8:	4a15      	ldr	r2, [pc, #84]	; (12a30 <__aeabi_ui2d+0x64>)
   129da:	1a1b      	subs	r3, r3, r0
   129dc:	1ad2      	subs	r2, r2, r3
   129de:	2a1f      	cmp	r2, #31
   129e0:	dd15      	ble.n	12a0e <__aeabi_ui2d+0x42>
   129e2:	4a14      	ldr	r2, [pc, #80]	; (12a34 <__aeabi_ui2d+0x68>)
   129e4:	1ad2      	subs	r2, r2, r3
   129e6:	4094      	lsls	r4, r2
   129e8:	2200      	movs	r2, #0
   129ea:	0324      	lsls	r4, r4, #12
   129ec:	055b      	lsls	r3, r3, #21
   129ee:	0b24      	lsrs	r4, r4, #12
   129f0:	0d5b      	lsrs	r3, r3, #21
   129f2:	2100      	movs	r1, #0
   129f4:	0010      	movs	r0, r2
   129f6:	0324      	lsls	r4, r4, #12
   129f8:	0d0a      	lsrs	r2, r1, #20
   129fa:	0b24      	lsrs	r4, r4, #12
   129fc:	0512      	lsls	r2, r2, #20
   129fe:	4322      	orrs	r2, r4
   12a00:	4c0d      	ldr	r4, [pc, #52]	; (12a38 <__aeabi_ui2d+0x6c>)
   12a02:	051b      	lsls	r3, r3, #20
   12a04:	4022      	ands	r2, r4
   12a06:	4313      	orrs	r3, r2
   12a08:	005b      	lsls	r3, r3, #1
   12a0a:	0859      	lsrs	r1, r3, #1
   12a0c:	bd10      	pop	{r4, pc}
   12a0e:	0021      	movs	r1, r4
   12a10:	4091      	lsls	r1, r2
   12a12:	000a      	movs	r2, r1
   12a14:	210b      	movs	r1, #11
   12a16:	1a08      	subs	r0, r1, r0
   12a18:	40c4      	lsrs	r4, r0
   12a1a:	055b      	lsls	r3, r3, #21
   12a1c:	0324      	lsls	r4, r4, #12
   12a1e:	0b24      	lsrs	r4, r4, #12
   12a20:	0d5b      	lsrs	r3, r3, #21
   12a22:	e7e6      	b.n	129f2 <__aeabi_ui2d+0x26>
   12a24:	2300      	movs	r3, #0
   12a26:	2400      	movs	r4, #0
   12a28:	2200      	movs	r2, #0
   12a2a:	e7e2      	b.n	129f2 <__aeabi_ui2d+0x26>
   12a2c:	0000041e 	.word	0x0000041e
   12a30:	00000433 	.word	0x00000433
   12a34:	00000413 	.word	0x00000413
   12a38:	800fffff 	.word	0x800fffff

00012a3c <__aeabi_f2d>:
   12a3c:	0041      	lsls	r1, r0, #1
   12a3e:	0e09      	lsrs	r1, r1, #24
   12a40:	1c4b      	adds	r3, r1, #1
   12a42:	b570      	push	{r4, r5, r6, lr}
   12a44:	b2db      	uxtb	r3, r3
   12a46:	0246      	lsls	r6, r0, #9
   12a48:	0a75      	lsrs	r5, r6, #9
   12a4a:	0fc4      	lsrs	r4, r0, #31
   12a4c:	2b01      	cmp	r3, #1
   12a4e:	dd14      	ble.n	12a7a <__aeabi_f2d+0x3e>
   12a50:	23e0      	movs	r3, #224	; 0xe0
   12a52:	009b      	lsls	r3, r3, #2
   12a54:	076d      	lsls	r5, r5, #29
   12a56:	0b36      	lsrs	r6, r6, #12
   12a58:	18cb      	adds	r3, r1, r3
   12a5a:	2100      	movs	r1, #0
   12a5c:	0d0a      	lsrs	r2, r1, #20
   12a5e:	0028      	movs	r0, r5
   12a60:	0512      	lsls	r2, r2, #20
   12a62:	4d1c      	ldr	r5, [pc, #112]	; (12ad4 <__aeabi_f2d+0x98>)
   12a64:	4332      	orrs	r2, r6
   12a66:	055b      	lsls	r3, r3, #21
   12a68:	402a      	ands	r2, r5
   12a6a:	085b      	lsrs	r3, r3, #1
   12a6c:	4313      	orrs	r3, r2
   12a6e:	005b      	lsls	r3, r3, #1
   12a70:	07e4      	lsls	r4, r4, #31
   12a72:	085b      	lsrs	r3, r3, #1
   12a74:	4323      	orrs	r3, r4
   12a76:	0019      	movs	r1, r3
   12a78:	bd70      	pop	{r4, r5, r6, pc}
   12a7a:	2900      	cmp	r1, #0
   12a7c:	d114      	bne.n	12aa8 <__aeabi_f2d+0x6c>
   12a7e:	2d00      	cmp	r5, #0
   12a80:	d01e      	beq.n	12ac0 <__aeabi_f2d+0x84>
   12a82:	0028      	movs	r0, r5
   12a84:	f7fd fb26 	bl	100d4 <__clzsi2>
   12a88:	280a      	cmp	r0, #10
   12a8a:	dc1c      	bgt.n	12ac6 <__aeabi_f2d+0x8a>
   12a8c:	230b      	movs	r3, #11
   12a8e:	002a      	movs	r2, r5
   12a90:	1a1b      	subs	r3, r3, r0
   12a92:	40da      	lsrs	r2, r3
   12a94:	0003      	movs	r3, r0
   12a96:	3315      	adds	r3, #21
   12a98:	409d      	lsls	r5, r3
   12a9a:	4b0f      	ldr	r3, [pc, #60]	; (12ad8 <__aeabi_f2d+0x9c>)
   12a9c:	0312      	lsls	r2, r2, #12
   12a9e:	1a1b      	subs	r3, r3, r0
   12aa0:	055b      	lsls	r3, r3, #21
   12aa2:	0b16      	lsrs	r6, r2, #12
   12aa4:	0d5b      	lsrs	r3, r3, #21
   12aa6:	e7d8      	b.n	12a5a <__aeabi_f2d+0x1e>
   12aa8:	2d00      	cmp	r5, #0
   12aaa:	d006      	beq.n	12aba <__aeabi_f2d+0x7e>
   12aac:	0b32      	lsrs	r2, r6, #12
   12aae:	2680      	movs	r6, #128	; 0x80
   12ab0:	0336      	lsls	r6, r6, #12
   12ab2:	076d      	lsls	r5, r5, #29
   12ab4:	4316      	orrs	r6, r2
   12ab6:	4b09      	ldr	r3, [pc, #36]	; (12adc <__aeabi_f2d+0xa0>)
   12ab8:	e7cf      	b.n	12a5a <__aeabi_f2d+0x1e>
   12aba:	4b08      	ldr	r3, [pc, #32]	; (12adc <__aeabi_f2d+0xa0>)
   12abc:	2600      	movs	r6, #0
   12abe:	e7cc      	b.n	12a5a <__aeabi_f2d+0x1e>
   12ac0:	2300      	movs	r3, #0
   12ac2:	2600      	movs	r6, #0
   12ac4:	e7c9      	b.n	12a5a <__aeabi_f2d+0x1e>
   12ac6:	0003      	movs	r3, r0
   12ac8:	002a      	movs	r2, r5
   12aca:	3b0b      	subs	r3, #11
   12acc:	409a      	lsls	r2, r3
   12ace:	2500      	movs	r5, #0
   12ad0:	e7e3      	b.n	12a9a <__aeabi_f2d+0x5e>
   12ad2:	46c0      	nop			; (mov r8, r8)
   12ad4:	800fffff 	.word	0x800fffff
   12ad8:	00000389 	.word	0x00000389
   12adc:	000007ff 	.word	0x000007ff

00012ae0 <__aeabi_d2f>:
   12ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ae2:	004c      	lsls	r4, r1, #1
   12ae4:	0d64      	lsrs	r4, r4, #21
   12ae6:	030b      	lsls	r3, r1, #12
   12ae8:	1c62      	adds	r2, r4, #1
   12aea:	0f45      	lsrs	r5, r0, #29
   12aec:	0a5b      	lsrs	r3, r3, #9
   12aee:	0552      	lsls	r2, r2, #21
   12af0:	432b      	orrs	r3, r5
   12af2:	0fc9      	lsrs	r1, r1, #31
   12af4:	00c5      	lsls	r5, r0, #3
   12af6:	0d52      	lsrs	r2, r2, #21
   12af8:	2a01      	cmp	r2, #1
   12afa:	dd28      	ble.n	12b4e <__aeabi_d2f+0x6e>
   12afc:	4a3a      	ldr	r2, [pc, #232]	; (12be8 <__aeabi_d2f+0x108>)
   12afe:	18a6      	adds	r6, r4, r2
   12b00:	2efe      	cmp	r6, #254	; 0xfe
   12b02:	dc1b      	bgt.n	12b3c <__aeabi_d2f+0x5c>
   12b04:	2e00      	cmp	r6, #0
   12b06:	dd3e      	ble.n	12b86 <__aeabi_d2f+0xa6>
   12b08:	0180      	lsls	r0, r0, #6
   12b0a:	0002      	movs	r2, r0
   12b0c:	1e50      	subs	r0, r2, #1
   12b0e:	4182      	sbcs	r2, r0
   12b10:	0f6d      	lsrs	r5, r5, #29
   12b12:	432a      	orrs	r2, r5
   12b14:	00db      	lsls	r3, r3, #3
   12b16:	4313      	orrs	r3, r2
   12b18:	075a      	lsls	r2, r3, #29
   12b1a:	d004      	beq.n	12b26 <__aeabi_d2f+0x46>
   12b1c:	220f      	movs	r2, #15
   12b1e:	401a      	ands	r2, r3
   12b20:	2a04      	cmp	r2, #4
   12b22:	d000      	beq.n	12b26 <__aeabi_d2f+0x46>
   12b24:	3304      	adds	r3, #4
   12b26:	2280      	movs	r2, #128	; 0x80
   12b28:	04d2      	lsls	r2, r2, #19
   12b2a:	401a      	ands	r2, r3
   12b2c:	d05a      	beq.n	12be4 <__aeabi_d2f+0x104>
   12b2e:	3601      	adds	r6, #1
   12b30:	2eff      	cmp	r6, #255	; 0xff
   12b32:	d003      	beq.n	12b3c <__aeabi_d2f+0x5c>
   12b34:	019b      	lsls	r3, r3, #6
   12b36:	0a5b      	lsrs	r3, r3, #9
   12b38:	b2f4      	uxtb	r4, r6
   12b3a:	e001      	b.n	12b40 <__aeabi_d2f+0x60>
   12b3c:	24ff      	movs	r4, #255	; 0xff
   12b3e:	2300      	movs	r3, #0
   12b40:	0258      	lsls	r0, r3, #9
   12b42:	05e4      	lsls	r4, r4, #23
   12b44:	0a40      	lsrs	r0, r0, #9
   12b46:	07c9      	lsls	r1, r1, #31
   12b48:	4320      	orrs	r0, r4
   12b4a:	4308      	orrs	r0, r1
   12b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b4e:	2c00      	cmp	r4, #0
   12b50:	d007      	beq.n	12b62 <__aeabi_d2f+0x82>
   12b52:	431d      	orrs	r5, r3
   12b54:	d0f2      	beq.n	12b3c <__aeabi_d2f+0x5c>
   12b56:	2080      	movs	r0, #128	; 0x80
   12b58:	00db      	lsls	r3, r3, #3
   12b5a:	0480      	lsls	r0, r0, #18
   12b5c:	4303      	orrs	r3, r0
   12b5e:	26ff      	movs	r6, #255	; 0xff
   12b60:	e7da      	b.n	12b18 <__aeabi_d2f+0x38>
   12b62:	432b      	orrs	r3, r5
   12b64:	d003      	beq.n	12b6e <__aeabi_d2f+0x8e>
   12b66:	2305      	movs	r3, #5
   12b68:	08db      	lsrs	r3, r3, #3
   12b6a:	2cff      	cmp	r4, #255	; 0xff
   12b6c:	d003      	beq.n	12b76 <__aeabi_d2f+0x96>
   12b6e:	025b      	lsls	r3, r3, #9
   12b70:	0a5b      	lsrs	r3, r3, #9
   12b72:	b2e4      	uxtb	r4, r4
   12b74:	e7e4      	b.n	12b40 <__aeabi_d2f+0x60>
   12b76:	2b00      	cmp	r3, #0
   12b78:	d032      	beq.n	12be0 <__aeabi_d2f+0x100>
   12b7a:	2080      	movs	r0, #128	; 0x80
   12b7c:	03c0      	lsls	r0, r0, #15
   12b7e:	4303      	orrs	r3, r0
   12b80:	025b      	lsls	r3, r3, #9
   12b82:	0a5b      	lsrs	r3, r3, #9
   12b84:	e7dc      	b.n	12b40 <__aeabi_d2f+0x60>
   12b86:	0032      	movs	r2, r6
   12b88:	3217      	adds	r2, #23
   12b8a:	db14      	blt.n	12bb6 <__aeabi_d2f+0xd6>
   12b8c:	2280      	movs	r2, #128	; 0x80
   12b8e:	271e      	movs	r7, #30
   12b90:	0412      	lsls	r2, r2, #16
   12b92:	4313      	orrs	r3, r2
   12b94:	1bbf      	subs	r7, r7, r6
   12b96:	2f1f      	cmp	r7, #31
   12b98:	dc0f      	bgt.n	12bba <__aeabi_d2f+0xda>
   12b9a:	4a14      	ldr	r2, [pc, #80]	; (12bec <__aeabi_d2f+0x10c>)
   12b9c:	4694      	mov	ip, r2
   12b9e:	4464      	add	r4, ip
   12ba0:	002a      	movs	r2, r5
   12ba2:	40a5      	lsls	r5, r4
   12ba4:	002e      	movs	r6, r5
   12ba6:	40a3      	lsls	r3, r4
   12ba8:	1e75      	subs	r5, r6, #1
   12baa:	41ae      	sbcs	r6, r5
   12bac:	40fa      	lsrs	r2, r7
   12bae:	4333      	orrs	r3, r6
   12bb0:	4313      	orrs	r3, r2
   12bb2:	2600      	movs	r6, #0
   12bb4:	e7b0      	b.n	12b18 <__aeabi_d2f+0x38>
   12bb6:	2400      	movs	r4, #0
   12bb8:	e7d5      	b.n	12b66 <__aeabi_d2f+0x86>
   12bba:	2202      	movs	r2, #2
   12bbc:	4252      	negs	r2, r2
   12bbe:	1b96      	subs	r6, r2, r6
   12bc0:	001a      	movs	r2, r3
   12bc2:	40f2      	lsrs	r2, r6
   12bc4:	2f20      	cmp	r7, #32
   12bc6:	d009      	beq.n	12bdc <__aeabi_d2f+0xfc>
   12bc8:	4809      	ldr	r0, [pc, #36]	; (12bf0 <__aeabi_d2f+0x110>)
   12bca:	4684      	mov	ip, r0
   12bcc:	4464      	add	r4, ip
   12bce:	40a3      	lsls	r3, r4
   12bd0:	432b      	orrs	r3, r5
   12bd2:	1e5d      	subs	r5, r3, #1
   12bd4:	41ab      	sbcs	r3, r5
   12bd6:	2600      	movs	r6, #0
   12bd8:	4313      	orrs	r3, r2
   12bda:	e79d      	b.n	12b18 <__aeabi_d2f+0x38>
   12bdc:	2300      	movs	r3, #0
   12bde:	e7f7      	b.n	12bd0 <__aeabi_d2f+0xf0>
   12be0:	2300      	movs	r3, #0
   12be2:	e7ad      	b.n	12b40 <__aeabi_d2f+0x60>
   12be4:	0034      	movs	r4, r6
   12be6:	e7bf      	b.n	12b68 <__aeabi_d2f+0x88>
   12be8:	fffffc80 	.word	0xfffffc80
   12bec:	fffffc82 	.word	0xfffffc82
   12bf0:	fffffca2 	.word	0xfffffca2

00012bf4 <__aeabi_cdrcmple>:
   12bf4:	4684      	mov	ip, r0
   12bf6:	1c10      	adds	r0, r2, #0
   12bf8:	4662      	mov	r2, ip
   12bfa:	468c      	mov	ip, r1
   12bfc:	1c19      	adds	r1, r3, #0
   12bfe:	4663      	mov	r3, ip
   12c00:	e000      	b.n	12c04 <__aeabi_cdcmpeq>
   12c02:	46c0      	nop			; (mov r8, r8)

00012c04 <__aeabi_cdcmpeq>:
   12c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12c06:	f000 f8dd 	bl	12dc4 <__ledf2>
   12c0a:	2800      	cmp	r0, #0
   12c0c:	d401      	bmi.n	12c12 <__aeabi_cdcmpeq+0xe>
   12c0e:	2100      	movs	r1, #0
   12c10:	42c8      	cmn	r0, r1
   12c12:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00012c14 <__aeabi_dcmpeq>:
   12c14:	b510      	push	{r4, lr}
   12c16:	f000 f837 	bl	12c88 <__eqdf2>
   12c1a:	4240      	negs	r0, r0
   12c1c:	3001      	adds	r0, #1
   12c1e:	bd10      	pop	{r4, pc}

00012c20 <__aeabi_dcmplt>:
   12c20:	b510      	push	{r4, lr}
   12c22:	f000 f8cf 	bl	12dc4 <__ledf2>
   12c26:	2800      	cmp	r0, #0
   12c28:	db01      	blt.n	12c2e <__aeabi_dcmplt+0xe>
   12c2a:	2000      	movs	r0, #0
   12c2c:	bd10      	pop	{r4, pc}
   12c2e:	2001      	movs	r0, #1
   12c30:	bd10      	pop	{r4, pc}
   12c32:	46c0      	nop			; (mov r8, r8)

00012c34 <__aeabi_dcmple>:
   12c34:	b510      	push	{r4, lr}
   12c36:	f000 f8c5 	bl	12dc4 <__ledf2>
   12c3a:	2800      	cmp	r0, #0
   12c3c:	dd01      	ble.n	12c42 <__aeabi_dcmple+0xe>
   12c3e:	2000      	movs	r0, #0
   12c40:	bd10      	pop	{r4, pc}
   12c42:	2001      	movs	r0, #1
   12c44:	bd10      	pop	{r4, pc}
   12c46:	46c0      	nop			; (mov r8, r8)

00012c48 <__aeabi_dcmpgt>:
   12c48:	b510      	push	{r4, lr}
   12c4a:	f000 f857 	bl	12cfc <__gedf2>
   12c4e:	2800      	cmp	r0, #0
   12c50:	dc01      	bgt.n	12c56 <__aeabi_dcmpgt+0xe>
   12c52:	2000      	movs	r0, #0
   12c54:	bd10      	pop	{r4, pc}
   12c56:	2001      	movs	r0, #1
   12c58:	bd10      	pop	{r4, pc}
   12c5a:	46c0      	nop			; (mov r8, r8)

00012c5c <__aeabi_dcmpge>:
   12c5c:	b510      	push	{r4, lr}
   12c5e:	f000 f84d 	bl	12cfc <__gedf2>
   12c62:	2800      	cmp	r0, #0
   12c64:	da01      	bge.n	12c6a <__aeabi_dcmpge+0xe>
   12c66:	2000      	movs	r0, #0
   12c68:	bd10      	pop	{r4, pc}
   12c6a:	2001      	movs	r0, #1
   12c6c:	bd10      	pop	{r4, pc}
   12c6e:	46c0      	nop			; (mov r8, r8)

00012c70 <__clzdi2>:
   12c70:	b510      	push	{r4, lr}
   12c72:	2900      	cmp	r1, #0
   12c74:	d103      	bne.n	12c7e <__clzdi2+0xe>
   12c76:	f7fd fa2d 	bl	100d4 <__clzsi2>
   12c7a:	3020      	adds	r0, #32
   12c7c:	e002      	b.n	12c84 <__clzdi2+0x14>
   12c7e:	1c08      	adds	r0, r1, #0
   12c80:	f7fd fa28 	bl	100d4 <__clzsi2>
   12c84:	bd10      	pop	{r4, pc}
   12c86:	46c0      	nop			; (mov r8, r8)

00012c88 <__eqdf2>:
   12c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c8a:	464f      	mov	r7, r9
   12c8c:	4646      	mov	r6, r8
   12c8e:	46d6      	mov	lr, sl
   12c90:	005c      	lsls	r4, r3, #1
   12c92:	b5c0      	push	{r6, r7, lr}
   12c94:	031f      	lsls	r7, r3, #12
   12c96:	0fdb      	lsrs	r3, r3, #31
   12c98:	469a      	mov	sl, r3
   12c9a:	4b17      	ldr	r3, [pc, #92]	; (12cf8 <__eqdf2+0x70>)
   12c9c:	030e      	lsls	r6, r1, #12
   12c9e:	004d      	lsls	r5, r1, #1
   12ca0:	4684      	mov	ip, r0
   12ca2:	4680      	mov	r8, r0
   12ca4:	0b36      	lsrs	r6, r6, #12
   12ca6:	0d6d      	lsrs	r5, r5, #21
   12ca8:	0fc9      	lsrs	r1, r1, #31
   12caa:	4691      	mov	r9, r2
   12cac:	0b3f      	lsrs	r7, r7, #12
   12cae:	0d64      	lsrs	r4, r4, #21
   12cb0:	2001      	movs	r0, #1
   12cb2:	429d      	cmp	r5, r3
   12cb4:	d008      	beq.n	12cc8 <__eqdf2+0x40>
   12cb6:	429c      	cmp	r4, r3
   12cb8:	d001      	beq.n	12cbe <__eqdf2+0x36>
   12cba:	42a5      	cmp	r5, r4
   12cbc:	d00b      	beq.n	12cd6 <__eqdf2+0x4e>
   12cbe:	bc1c      	pop	{r2, r3, r4}
   12cc0:	4690      	mov	r8, r2
   12cc2:	4699      	mov	r9, r3
   12cc4:	46a2      	mov	sl, r4
   12cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cc8:	4663      	mov	r3, ip
   12cca:	4333      	orrs	r3, r6
   12ccc:	d1f7      	bne.n	12cbe <__eqdf2+0x36>
   12cce:	42ac      	cmp	r4, r5
   12cd0:	d1f5      	bne.n	12cbe <__eqdf2+0x36>
   12cd2:	433a      	orrs	r2, r7
   12cd4:	d1f3      	bne.n	12cbe <__eqdf2+0x36>
   12cd6:	2001      	movs	r0, #1
   12cd8:	42be      	cmp	r6, r7
   12cda:	d1f0      	bne.n	12cbe <__eqdf2+0x36>
   12cdc:	45c8      	cmp	r8, r9
   12cde:	d1ee      	bne.n	12cbe <__eqdf2+0x36>
   12ce0:	4551      	cmp	r1, sl
   12ce2:	d007      	beq.n	12cf4 <__eqdf2+0x6c>
   12ce4:	2d00      	cmp	r5, #0
   12ce6:	d1ea      	bne.n	12cbe <__eqdf2+0x36>
   12ce8:	4663      	mov	r3, ip
   12cea:	431e      	orrs	r6, r3
   12cec:	0030      	movs	r0, r6
   12cee:	1e46      	subs	r6, r0, #1
   12cf0:	41b0      	sbcs	r0, r6
   12cf2:	e7e4      	b.n	12cbe <__eqdf2+0x36>
   12cf4:	2000      	movs	r0, #0
   12cf6:	e7e2      	b.n	12cbe <__eqdf2+0x36>
   12cf8:	000007ff 	.word	0x000007ff

00012cfc <__gedf2>:
   12cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cfe:	4645      	mov	r5, r8
   12d00:	46de      	mov	lr, fp
   12d02:	4657      	mov	r7, sl
   12d04:	464e      	mov	r6, r9
   12d06:	b5e0      	push	{r5, r6, r7, lr}
   12d08:	031f      	lsls	r7, r3, #12
   12d0a:	0b3d      	lsrs	r5, r7, #12
   12d0c:	4f2c      	ldr	r7, [pc, #176]	; (12dc0 <__gedf2+0xc4>)
   12d0e:	030e      	lsls	r6, r1, #12
   12d10:	004c      	lsls	r4, r1, #1
   12d12:	46ab      	mov	fp, r5
   12d14:	005d      	lsls	r5, r3, #1
   12d16:	4684      	mov	ip, r0
   12d18:	0b36      	lsrs	r6, r6, #12
   12d1a:	0d64      	lsrs	r4, r4, #21
   12d1c:	0fc9      	lsrs	r1, r1, #31
   12d1e:	4690      	mov	r8, r2
   12d20:	0d6d      	lsrs	r5, r5, #21
   12d22:	0fdb      	lsrs	r3, r3, #31
   12d24:	42bc      	cmp	r4, r7
   12d26:	d02a      	beq.n	12d7e <__gedf2+0x82>
   12d28:	4f25      	ldr	r7, [pc, #148]	; (12dc0 <__gedf2+0xc4>)
   12d2a:	42bd      	cmp	r5, r7
   12d2c:	d02d      	beq.n	12d8a <__gedf2+0x8e>
   12d2e:	2c00      	cmp	r4, #0
   12d30:	d10f      	bne.n	12d52 <__gedf2+0x56>
   12d32:	4330      	orrs	r0, r6
   12d34:	0007      	movs	r7, r0
   12d36:	4681      	mov	r9, r0
   12d38:	4278      	negs	r0, r7
   12d3a:	4178      	adcs	r0, r7
   12d3c:	b2c0      	uxtb	r0, r0
   12d3e:	2d00      	cmp	r5, #0
   12d40:	d117      	bne.n	12d72 <__gedf2+0x76>
   12d42:	465f      	mov	r7, fp
   12d44:	433a      	orrs	r2, r7
   12d46:	d114      	bne.n	12d72 <__gedf2+0x76>
   12d48:	464b      	mov	r3, r9
   12d4a:	2000      	movs	r0, #0
   12d4c:	2b00      	cmp	r3, #0
   12d4e:	d00a      	beq.n	12d66 <__gedf2+0x6a>
   12d50:	e006      	b.n	12d60 <__gedf2+0x64>
   12d52:	2d00      	cmp	r5, #0
   12d54:	d102      	bne.n	12d5c <__gedf2+0x60>
   12d56:	4658      	mov	r0, fp
   12d58:	4302      	orrs	r2, r0
   12d5a:	d001      	beq.n	12d60 <__gedf2+0x64>
   12d5c:	4299      	cmp	r1, r3
   12d5e:	d018      	beq.n	12d92 <__gedf2+0x96>
   12d60:	4248      	negs	r0, r1
   12d62:	2101      	movs	r1, #1
   12d64:	4308      	orrs	r0, r1
   12d66:	bc3c      	pop	{r2, r3, r4, r5}
   12d68:	4690      	mov	r8, r2
   12d6a:	4699      	mov	r9, r3
   12d6c:	46a2      	mov	sl, r4
   12d6e:	46ab      	mov	fp, r5
   12d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d72:	2800      	cmp	r0, #0
   12d74:	d0f2      	beq.n	12d5c <__gedf2+0x60>
   12d76:	2001      	movs	r0, #1
   12d78:	3b01      	subs	r3, #1
   12d7a:	4318      	orrs	r0, r3
   12d7c:	e7f3      	b.n	12d66 <__gedf2+0x6a>
   12d7e:	0037      	movs	r7, r6
   12d80:	4307      	orrs	r7, r0
   12d82:	d0d1      	beq.n	12d28 <__gedf2+0x2c>
   12d84:	2002      	movs	r0, #2
   12d86:	4240      	negs	r0, r0
   12d88:	e7ed      	b.n	12d66 <__gedf2+0x6a>
   12d8a:	465f      	mov	r7, fp
   12d8c:	4317      	orrs	r7, r2
   12d8e:	d0ce      	beq.n	12d2e <__gedf2+0x32>
   12d90:	e7f8      	b.n	12d84 <__gedf2+0x88>
   12d92:	42ac      	cmp	r4, r5
   12d94:	dce4      	bgt.n	12d60 <__gedf2+0x64>
   12d96:	da03      	bge.n	12da0 <__gedf2+0xa4>
   12d98:	1e48      	subs	r0, r1, #1
   12d9a:	2101      	movs	r1, #1
   12d9c:	4308      	orrs	r0, r1
   12d9e:	e7e2      	b.n	12d66 <__gedf2+0x6a>
   12da0:	455e      	cmp	r6, fp
   12da2:	d8dd      	bhi.n	12d60 <__gedf2+0x64>
   12da4:	d006      	beq.n	12db4 <__gedf2+0xb8>
   12da6:	2000      	movs	r0, #0
   12da8:	455e      	cmp	r6, fp
   12daa:	d2dc      	bcs.n	12d66 <__gedf2+0x6a>
   12dac:	2301      	movs	r3, #1
   12dae:	1e48      	subs	r0, r1, #1
   12db0:	4318      	orrs	r0, r3
   12db2:	e7d8      	b.n	12d66 <__gedf2+0x6a>
   12db4:	45c4      	cmp	ip, r8
   12db6:	d8d3      	bhi.n	12d60 <__gedf2+0x64>
   12db8:	2000      	movs	r0, #0
   12dba:	45c4      	cmp	ip, r8
   12dbc:	d3f6      	bcc.n	12dac <__gedf2+0xb0>
   12dbe:	e7d2      	b.n	12d66 <__gedf2+0x6a>
   12dc0:	000007ff 	.word	0x000007ff

00012dc4 <__ledf2>:
   12dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dc6:	464e      	mov	r6, r9
   12dc8:	4645      	mov	r5, r8
   12dca:	46de      	mov	lr, fp
   12dcc:	4657      	mov	r7, sl
   12dce:	005c      	lsls	r4, r3, #1
   12dd0:	b5e0      	push	{r5, r6, r7, lr}
   12dd2:	031f      	lsls	r7, r3, #12
   12dd4:	0fdb      	lsrs	r3, r3, #31
   12dd6:	4699      	mov	r9, r3
   12dd8:	4b2a      	ldr	r3, [pc, #168]	; (12e84 <__ledf2+0xc0>)
   12dda:	030e      	lsls	r6, r1, #12
   12ddc:	004d      	lsls	r5, r1, #1
   12dde:	0fc9      	lsrs	r1, r1, #31
   12de0:	4684      	mov	ip, r0
   12de2:	0b36      	lsrs	r6, r6, #12
   12de4:	0d6d      	lsrs	r5, r5, #21
   12de6:	468b      	mov	fp, r1
   12de8:	4690      	mov	r8, r2
   12dea:	0b3f      	lsrs	r7, r7, #12
   12dec:	0d64      	lsrs	r4, r4, #21
   12dee:	429d      	cmp	r5, r3
   12df0:	d020      	beq.n	12e34 <__ledf2+0x70>
   12df2:	4b24      	ldr	r3, [pc, #144]	; (12e84 <__ledf2+0xc0>)
   12df4:	429c      	cmp	r4, r3
   12df6:	d022      	beq.n	12e3e <__ledf2+0x7a>
   12df8:	2d00      	cmp	r5, #0
   12dfa:	d112      	bne.n	12e22 <__ledf2+0x5e>
   12dfc:	4330      	orrs	r0, r6
   12dfe:	4243      	negs	r3, r0
   12e00:	4143      	adcs	r3, r0
   12e02:	b2db      	uxtb	r3, r3
   12e04:	2c00      	cmp	r4, #0
   12e06:	d01f      	beq.n	12e48 <__ledf2+0x84>
   12e08:	2b00      	cmp	r3, #0
   12e0a:	d00c      	beq.n	12e26 <__ledf2+0x62>
   12e0c:	464b      	mov	r3, r9
   12e0e:	2001      	movs	r0, #1
   12e10:	3b01      	subs	r3, #1
   12e12:	4303      	orrs	r3, r0
   12e14:	0018      	movs	r0, r3
   12e16:	bc3c      	pop	{r2, r3, r4, r5}
   12e18:	4690      	mov	r8, r2
   12e1a:	4699      	mov	r9, r3
   12e1c:	46a2      	mov	sl, r4
   12e1e:	46ab      	mov	fp, r5
   12e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e22:	2c00      	cmp	r4, #0
   12e24:	d016      	beq.n	12e54 <__ledf2+0x90>
   12e26:	45cb      	cmp	fp, r9
   12e28:	d017      	beq.n	12e5a <__ledf2+0x96>
   12e2a:	465b      	mov	r3, fp
   12e2c:	4259      	negs	r1, r3
   12e2e:	2301      	movs	r3, #1
   12e30:	430b      	orrs	r3, r1
   12e32:	e7ef      	b.n	12e14 <__ledf2+0x50>
   12e34:	0031      	movs	r1, r6
   12e36:	2302      	movs	r3, #2
   12e38:	4301      	orrs	r1, r0
   12e3a:	d1eb      	bne.n	12e14 <__ledf2+0x50>
   12e3c:	e7d9      	b.n	12df2 <__ledf2+0x2e>
   12e3e:	0039      	movs	r1, r7
   12e40:	2302      	movs	r3, #2
   12e42:	4311      	orrs	r1, r2
   12e44:	d1e6      	bne.n	12e14 <__ledf2+0x50>
   12e46:	e7d7      	b.n	12df8 <__ledf2+0x34>
   12e48:	433a      	orrs	r2, r7
   12e4a:	d1dd      	bne.n	12e08 <__ledf2+0x44>
   12e4c:	2300      	movs	r3, #0
   12e4e:	2800      	cmp	r0, #0
   12e50:	d0e0      	beq.n	12e14 <__ledf2+0x50>
   12e52:	e7ea      	b.n	12e2a <__ledf2+0x66>
   12e54:	433a      	orrs	r2, r7
   12e56:	d1e6      	bne.n	12e26 <__ledf2+0x62>
   12e58:	e7e7      	b.n	12e2a <__ledf2+0x66>
   12e5a:	42a5      	cmp	r5, r4
   12e5c:	dce5      	bgt.n	12e2a <__ledf2+0x66>
   12e5e:	db05      	blt.n	12e6c <__ledf2+0xa8>
   12e60:	42be      	cmp	r6, r7
   12e62:	d8e2      	bhi.n	12e2a <__ledf2+0x66>
   12e64:	d007      	beq.n	12e76 <__ledf2+0xb2>
   12e66:	2300      	movs	r3, #0
   12e68:	42be      	cmp	r6, r7
   12e6a:	d2d3      	bcs.n	12e14 <__ledf2+0x50>
   12e6c:	4659      	mov	r1, fp
   12e6e:	2301      	movs	r3, #1
   12e70:	3901      	subs	r1, #1
   12e72:	430b      	orrs	r3, r1
   12e74:	e7ce      	b.n	12e14 <__ledf2+0x50>
   12e76:	45c4      	cmp	ip, r8
   12e78:	d8d7      	bhi.n	12e2a <__ledf2+0x66>
   12e7a:	2300      	movs	r3, #0
   12e7c:	45c4      	cmp	ip, r8
   12e7e:	d3f5      	bcc.n	12e6c <__ledf2+0xa8>
   12e80:	e7c8      	b.n	12e14 <__ledf2+0x50>
   12e82:	46c0      	nop			; (mov r8, r8)
   12e84:	000007ff 	.word	0x000007ff

00012e88 <__libc_init_array>:
   12e88:	b570      	push	{r4, r5, r6, lr}
   12e8a:	2600      	movs	r6, #0
   12e8c:	4d0c      	ldr	r5, [pc, #48]	; (12ec0 <__libc_init_array+0x38>)
   12e8e:	4c0d      	ldr	r4, [pc, #52]	; (12ec4 <__libc_init_array+0x3c>)
   12e90:	1b64      	subs	r4, r4, r5
   12e92:	10a4      	asrs	r4, r4, #2
   12e94:	42a6      	cmp	r6, r4
   12e96:	d109      	bne.n	12eac <__libc_init_array+0x24>
   12e98:	2600      	movs	r6, #0
   12e9a:	f000 ff1f 	bl	13cdc <_init>
   12e9e:	4d0a      	ldr	r5, [pc, #40]	; (12ec8 <__libc_init_array+0x40>)
   12ea0:	4c0a      	ldr	r4, [pc, #40]	; (12ecc <__libc_init_array+0x44>)
   12ea2:	1b64      	subs	r4, r4, r5
   12ea4:	10a4      	asrs	r4, r4, #2
   12ea6:	42a6      	cmp	r6, r4
   12ea8:	d105      	bne.n	12eb6 <__libc_init_array+0x2e>
   12eaa:	bd70      	pop	{r4, r5, r6, pc}
   12eac:	00b3      	lsls	r3, r6, #2
   12eae:	58eb      	ldr	r3, [r5, r3]
   12eb0:	4798      	blx	r3
   12eb2:	3601      	adds	r6, #1
   12eb4:	e7ee      	b.n	12e94 <__libc_init_array+0xc>
   12eb6:	00b3      	lsls	r3, r6, #2
   12eb8:	58eb      	ldr	r3, [r5, r3]
   12eba:	4798      	blx	r3
   12ebc:	3601      	adds	r6, #1
   12ebe:	e7f2      	b.n	12ea6 <__libc_init_array+0x1e>
   12ec0:	00013ce8 	.word	0x00013ce8
   12ec4:	00013ce8 	.word	0x00013ce8
   12ec8:	00013ce8 	.word	0x00013ce8
   12ecc:	00013cec 	.word	0x00013cec

00012ed0 <memcpy>:
   12ed0:	2300      	movs	r3, #0
   12ed2:	b510      	push	{r4, lr}
   12ed4:	429a      	cmp	r2, r3
   12ed6:	d100      	bne.n	12eda <memcpy+0xa>
   12ed8:	bd10      	pop	{r4, pc}
   12eda:	5ccc      	ldrb	r4, [r1, r3]
   12edc:	54c4      	strb	r4, [r0, r3]
   12ede:	3301      	adds	r3, #1
   12ee0:	e7f8      	b.n	12ed4 <memcpy+0x4>

00012ee2 <memset>:
   12ee2:	0003      	movs	r3, r0
   12ee4:	1882      	adds	r2, r0, r2
   12ee6:	4293      	cmp	r3, r2
   12ee8:	d100      	bne.n	12eec <memset+0xa>
   12eea:	4770      	bx	lr
   12eec:	7019      	strb	r1, [r3, #0]
   12eee:	3301      	adds	r3, #1
   12ef0:	e7f9      	b.n	12ee6 <memset+0x4>
	...

00012ef4 <sniprintf>:
   12ef4:	b40c      	push	{r2, r3}
   12ef6:	b530      	push	{r4, r5, lr}
   12ef8:	4b16      	ldr	r3, [pc, #88]	; (12f54 <sniprintf+0x60>)
   12efa:	b09d      	sub	sp, #116	; 0x74
   12efc:	1e0c      	subs	r4, r1, #0
   12efe:	681d      	ldr	r5, [r3, #0]
   12f00:	da08      	bge.n	12f14 <sniprintf+0x20>
   12f02:	238b      	movs	r3, #139	; 0x8b
   12f04:	2001      	movs	r0, #1
   12f06:	602b      	str	r3, [r5, #0]
   12f08:	4240      	negs	r0, r0
   12f0a:	b01d      	add	sp, #116	; 0x74
   12f0c:	bc30      	pop	{r4, r5}
   12f0e:	bc08      	pop	{r3}
   12f10:	b002      	add	sp, #8
   12f12:	4718      	bx	r3
   12f14:	2382      	movs	r3, #130	; 0x82
   12f16:	a902      	add	r1, sp, #8
   12f18:	009b      	lsls	r3, r3, #2
   12f1a:	818b      	strh	r3, [r1, #12]
   12f1c:	2300      	movs	r3, #0
   12f1e:	9002      	str	r0, [sp, #8]
   12f20:	6108      	str	r0, [r1, #16]
   12f22:	429c      	cmp	r4, r3
   12f24:	d000      	beq.n	12f28 <sniprintf+0x34>
   12f26:	1e63      	subs	r3, r4, #1
   12f28:	608b      	str	r3, [r1, #8]
   12f2a:	614b      	str	r3, [r1, #20]
   12f2c:	2301      	movs	r3, #1
   12f2e:	425b      	negs	r3, r3
   12f30:	81cb      	strh	r3, [r1, #14]
   12f32:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12f34:	ab21      	add	r3, sp, #132	; 0x84
   12f36:	0028      	movs	r0, r5
   12f38:	9301      	str	r3, [sp, #4]
   12f3a:	f000 f899 	bl	13070 <_svfiprintf_r>
   12f3e:	1c43      	adds	r3, r0, #1
   12f40:	da01      	bge.n	12f46 <sniprintf+0x52>
   12f42:	238b      	movs	r3, #139	; 0x8b
   12f44:	602b      	str	r3, [r5, #0]
   12f46:	2c00      	cmp	r4, #0
   12f48:	d0df      	beq.n	12f0a <sniprintf+0x16>
   12f4a:	2300      	movs	r3, #0
   12f4c:	9a02      	ldr	r2, [sp, #8]
   12f4e:	7013      	strb	r3, [r2, #0]
   12f50:	e7db      	b.n	12f0a <sniprintf+0x16>
   12f52:	46c0      	nop			; (mov r8, r8)
   12f54:	200001d4 	.word	0x200001d4

00012f58 <siprintf>:
   12f58:	b40e      	push	{r1, r2, r3}
   12f5a:	b510      	push	{r4, lr}
   12f5c:	b09d      	sub	sp, #116	; 0x74
   12f5e:	a902      	add	r1, sp, #8
   12f60:	9002      	str	r0, [sp, #8]
   12f62:	6108      	str	r0, [r1, #16]
   12f64:	480b      	ldr	r0, [pc, #44]	; (12f94 <siprintf+0x3c>)
   12f66:	2482      	movs	r4, #130	; 0x82
   12f68:	6088      	str	r0, [r1, #8]
   12f6a:	6148      	str	r0, [r1, #20]
   12f6c:	2001      	movs	r0, #1
   12f6e:	4240      	negs	r0, r0
   12f70:	ab1f      	add	r3, sp, #124	; 0x7c
   12f72:	81c8      	strh	r0, [r1, #14]
   12f74:	4808      	ldr	r0, [pc, #32]	; (12f98 <siprintf+0x40>)
   12f76:	cb04      	ldmia	r3!, {r2}
   12f78:	00a4      	lsls	r4, r4, #2
   12f7a:	6800      	ldr	r0, [r0, #0]
   12f7c:	9301      	str	r3, [sp, #4]
   12f7e:	818c      	strh	r4, [r1, #12]
   12f80:	f000 f876 	bl	13070 <_svfiprintf_r>
   12f84:	2300      	movs	r3, #0
   12f86:	9a02      	ldr	r2, [sp, #8]
   12f88:	7013      	strb	r3, [r2, #0]
   12f8a:	b01d      	add	sp, #116	; 0x74
   12f8c:	bc10      	pop	{r4}
   12f8e:	bc08      	pop	{r3}
   12f90:	b003      	add	sp, #12
   12f92:	4718      	bx	r3
   12f94:	7fffffff 	.word	0x7fffffff
   12f98:	200001d4 	.word	0x200001d4

00012f9c <strlen>:
   12f9c:	2300      	movs	r3, #0
   12f9e:	5cc2      	ldrb	r2, [r0, r3]
   12fa0:	3301      	adds	r3, #1
   12fa2:	2a00      	cmp	r2, #0
   12fa4:	d1fb      	bne.n	12f9e <strlen+0x2>
   12fa6:	1e58      	subs	r0, r3, #1
   12fa8:	4770      	bx	lr
	...

00012fac <__ssputs_r>:
   12fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fae:	688e      	ldr	r6, [r1, #8]
   12fb0:	b085      	sub	sp, #20
   12fb2:	0007      	movs	r7, r0
   12fb4:	000c      	movs	r4, r1
   12fb6:	9203      	str	r2, [sp, #12]
   12fb8:	9301      	str	r3, [sp, #4]
   12fba:	429e      	cmp	r6, r3
   12fbc:	d839      	bhi.n	13032 <__ssputs_r+0x86>
   12fbe:	2390      	movs	r3, #144	; 0x90
   12fc0:	898a      	ldrh	r2, [r1, #12]
   12fc2:	00db      	lsls	r3, r3, #3
   12fc4:	421a      	tst	r2, r3
   12fc6:	d034      	beq.n	13032 <__ssputs_r+0x86>
   12fc8:	2503      	movs	r5, #3
   12fca:	6909      	ldr	r1, [r1, #16]
   12fcc:	6823      	ldr	r3, [r4, #0]
   12fce:	1a5b      	subs	r3, r3, r1
   12fd0:	9302      	str	r3, [sp, #8]
   12fd2:	6963      	ldr	r3, [r4, #20]
   12fd4:	9802      	ldr	r0, [sp, #8]
   12fd6:	435d      	muls	r5, r3
   12fd8:	0feb      	lsrs	r3, r5, #31
   12fda:	195d      	adds	r5, r3, r5
   12fdc:	9b01      	ldr	r3, [sp, #4]
   12fde:	106d      	asrs	r5, r5, #1
   12fe0:	3301      	adds	r3, #1
   12fe2:	181b      	adds	r3, r3, r0
   12fe4:	42ab      	cmp	r3, r5
   12fe6:	d900      	bls.n	12fea <__ssputs_r+0x3e>
   12fe8:	001d      	movs	r5, r3
   12fea:	0553      	lsls	r3, r2, #21
   12fec:	d532      	bpl.n	13054 <__ssputs_r+0xa8>
   12fee:	0029      	movs	r1, r5
   12ff0:	0038      	movs	r0, r7
   12ff2:	f000 fb31 	bl	13658 <_malloc_r>
   12ff6:	1e06      	subs	r6, r0, #0
   12ff8:	d109      	bne.n	1300e <__ssputs_r+0x62>
   12ffa:	230c      	movs	r3, #12
   12ffc:	603b      	str	r3, [r7, #0]
   12ffe:	2340      	movs	r3, #64	; 0x40
   13000:	2001      	movs	r0, #1
   13002:	89a2      	ldrh	r2, [r4, #12]
   13004:	4240      	negs	r0, r0
   13006:	4313      	orrs	r3, r2
   13008:	81a3      	strh	r3, [r4, #12]
   1300a:	b005      	add	sp, #20
   1300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1300e:	9a02      	ldr	r2, [sp, #8]
   13010:	6921      	ldr	r1, [r4, #16]
   13012:	f7ff ff5d 	bl	12ed0 <memcpy>
   13016:	89a3      	ldrh	r3, [r4, #12]
   13018:	4a14      	ldr	r2, [pc, #80]	; (1306c <__ssputs_r+0xc0>)
   1301a:	401a      	ands	r2, r3
   1301c:	2380      	movs	r3, #128	; 0x80
   1301e:	4313      	orrs	r3, r2
   13020:	81a3      	strh	r3, [r4, #12]
   13022:	9b02      	ldr	r3, [sp, #8]
   13024:	6126      	str	r6, [r4, #16]
   13026:	18f6      	adds	r6, r6, r3
   13028:	6026      	str	r6, [r4, #0]
   1302a:	6165      	str	r5, [r4, #20]
   1302c:	9e01      	ldr	r6, [sp, #4]
   1302e:	1aed      	subs	r5, r5, r3
   13030:	60a5      	str	r5, [r4, #8]
   13032:	9b01      	ldr	r3, [sp, #4]
   13034:	42b3      	cmp	r3, r6
   13036:	d200      	bcs.n	1303a <__ssputs_r+0x8e>
   13038:	001e      	movs	r6, r3
   1303a:	0032      	movs	r2, r6
   1303c:	9903      	ldr	r1, [sp, #12]
   1303e:	6820      	ldr	r0, [r4, #0]
   13040:	f000 faad 	bl	1359e <memmove>
   13044:	68a3      	ldr	r3, [r4, #8]
   13046:	2000      	movs	r0, #0
   13048:	1b9b      	subs	r3, r3, r6
   1304a:	60a3      	str	r3, [r4, #8]
   1304c:	6823      	ldr	r3, [r4, #0]
   1304e:	199e      	adds	r6, r3, r6
   13050:	6026      	str	r6, [r4, #0]
   13052:	e7da      	b.n	1300a <__ssputs_r+0x5e>
   13054:	002a      	movs	r2, r5
   13056:	0038      	movs	r0, r7
   13058:	f000 fb5c 	bl	13714 <_realloc_r>
   1305c:	1e06      	subs	r6, r0, #0
   1305e:	d1e0      	bne.n	13022 <__ssputs_r+0x76>
   13060:	6921      	ldr	r1, [r4, #16]
   13062:	0038      	movs	r0, r7
   13064:	f000 faae 	bl	135c4 <_free_r>
   13068:	e7c7      	b.n	12ffa <__ssputs_r+0x4e>
   1306a:	46c0      	nop			; (mov r8, r8)
   1306c:	fffffb7f 	.word	0xfffffb7f

00013070 <_svfiprintf_r>:
   13070:	b5f0      	push	{r4, r5, r6, r7, lr}
   13072:	b09f      	sub	sp, #124	; 0x7c
   13074:	9002      	str	r0, [sp, #8]
   13076:	9305      	str	r3, [sp, #20]
   13078:	898b      	ldrh	r3, [r1, #12]
   1307a:	000f      	movs	r7, r1
   1307c:	0016      	movs	r6, r2
   1307e:	061b      	lsls	r3, r3, #24
   13080:	d511      	bpl.n	130a6 <_svfiprintf_r+0x36>
   13082:	690b      	ldr	r3, [r1, #16]
   13084:	2b00      	cmp	r3, #0
   13086:	d10e      	bne.n	130a6 <_svfiprintf_r+0x36>
   13088:	2140      	movs	r1, #64	; 0x40
   1308a:	f000 fae5 	bl	13658 <_malloc_r>
   1308e:	6038      	str	r0, [r7, #0]
   13090:	6138      	str	r0, [r7, #16]
   13092:	2800      	cmp	r0, #0
   13094:	d105      	bne.n	130a2 <_svfiprintf_r+0x32>
   13096:	230c      	movs	r3, #12
   13098:	9a02      	ldr	r2, [sp, #8]
   1309a:	3801      	subs	r0, #1
   1309c:	6013      	str	r3, [r2, #0]
   1309e:	b01f      	add	sp, #124	; 0x7c
   130a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   130a2:	2340      	movs	r3, #64	; 0x40
   130a4:	617b      	str	r3, [r7, #20]
   130a6:	2300      	movs	r3, #0
   130a8:	ad06      	add	r5, sp, #24
   130aa:	616b      	str	r3, [r5, #20]
   130ac:	3320      	adds	r3, #32
   130ae:	766b      	strb	r3, [r5, #25]
   130b0:	3310      	adds	r3, #16
   130b2:	76ab      	strb	r3, [r5, #26]
   130b4:	0034      	movs	r4, r6
   130b6:	7823      	ldrb	r3, [r4, #0]
   130b8:	2b00      	cmp	r3, #0
   130ba:	d147      	bne.n	1314c <_svfiprintf_r+0xdc>
   130bc:	1ba3      	subs	r3, r4, r6
   130be:	9304      	str	r3, [sp, #16]
   130c0:	d00d      	beq.n	130de <_svfiprintf_r+0x6e>
   130c2:	1ba3      	subs	r3, r4, r6
   130c4:	0032      	movs	r2, r6
   130c6:	0039      	movs	r1, r7
   130c8:	9802      	ldr	r0, [sp, #8]
   130ca:	f7ff ff6f 	bl	12fac <__ssputs_r>
   130ce:	1c43      	adds	r3, r0, #1
   130d0:	d100      	bne.n	130d4 <_svfiprintf_r+0x64>
   130d2:	e0b5      	b.n	13240 <_svfiprintf_r+0x1d0>
   130d4:	696a      	ldr	r2, [r5, #20]
   130d6:	9b04      	ldr	r3, [sp, #16]
   130d8:	4694      	mov	ip, r2
   130da:	4463      	add	r3, ip
   130dc:	616b      	str	r3, [r5, #20]
   130de:	7823      	ldrb	r3, [r4, #0]
   130e0:	2b00      	cmp	r3, #0
   130e2:	d100      	bne.n	130e6 <_svfiprintf_r+0x76>
   130e4:	e0ac      	b.n	13240 <_svfiprintf_r+0x1d0>
   130e6:	2201      	movs	r2, #1
   130e8:	2300      	movs	r3, #0
   130ea:	4252      	negs	r2, r2
   130ec:	606a      	str	r2, [r5, #4]
   130ee:	a902      	add	r1, sp, #8
   130f0:	3254      	adds	r2, #84	; 0x54
   130f2:	1852      	adds	r2, r2, r1
   130f4:	3401      	adds	r4, #1
   130f6:	602b      	str	r3, [r5, #0]
   130f8:	60eb      	str	r3, [r5, #12]
   130fa:	60ab      	str	r3, [r5, #8]
   130fc:	7013      	strb	r3, [r2, #0]
   130fe:	65ab      	str	r3, [r5, #88]	; 0x58
   13100:	4e58      	ldr	r6, [pc, #352]	; (13264 <_svfiprintf_r+0x1f4>)
   13102:	2205      	movs	r2, #5
   13104:	7821      	ldrb	r1, [r4, #0]
   13106:	0030      	movs	r0, r6
   13108:	f000 fa3e 	bl	13588 <memchr>
   1310c:	1c62      	adds	r2, r4, #1
   1310e:	2800      	cmp	r0, #0
   13110:	d120      	bne.n	13154 <_svfiprintf_r+0xe4>
   13112:	6829      	ldr	r1, [r5, #0]
   13114:	06cb      	lsls	r3, r1, #27
   13116:	d504      	bpl.n	13122 <_svfiprintf_r+0xb2>
   13118:	2353      	movs	r3, #83	; 0x53
   1311a:	ae02      	add	r6, sp, #8
   1311c:	3020      	adds	r0, #32
   1311e:	199b      	adds	r3, r3, r6
   13120:	7018      	strb	r0, [r3, #0]
   13122:	070b      	lsls	r3, r1, #28
   13124:	d504      	bpl.n	13130 <_svfiprintf_r+0xc0>
   13126:	2353      	movs	r3, #83	; 0x53
   13128:	202b      	movs	r0, #43	; 0x2b
   1312a:	ae02      	add	r6, sp, #8
   1312c:	199b      	adds	r3, r3, r6
   1312e:	7018      	strb	r0, [r3, #0]
   13130:	7823      	ldrb	r3, [r4, #0]
   13132:	2b2a      	cmp	r3, #42	; 0x2a
   13134:	d016      	beq.n	13164 <_svfiprintf_r+0xf4>
   13136:	2000      	movs	r0, #0
   13138:	210a      	movs	r1, #10
   1313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1313c:	7822      	ldrb	r2, [r4, #0]
   1313e:	3a30      	subs	r2, #48	; 0x30
   13140:	2a09      	cmp	r2, #9
   13142:	d955      	bls.n	131f0 <_svfiprintf_r+0x180>
   13144:	2800      	cmp	r0, #0
   13146:	d015      	beq.n	13174 <_svfiprintf_r+0x104>
   13148:	9309      	str	r3, [sp, #36]	; 0x24
   1314a:	e013      	b.n	13174 <_svfiprintf_r+0x104>
   1314c:	2b25      	cmp	r3, #37	; 0x25
   1314e:	d0b5      	beq.n	130bc <_svfiprintf_r+0x4c>
   13150:	3401      	adds	r4, #1
   13152:	e7b0      	b.n	130b6 <_svfiprintf_r+0x46>
   13154:	2301      	movs	r3, #1
   13156:	1b80      	subs	r0, r0, r6
   13158:	4083      	lsls	r3, r0
   1315a:	6829      	ldr	r1, [r5, #0]
   1315c:	0014      	movs	r4, r2
   1315e:	430b      	orrs	r3, r1
   13160:	602b      	str	r3, [r5, #0]
   13162:	e7cd      	b.n	13100 <_svfiprintf_r+0x90>
   13164:	9b05      	ldr	r3, [sp, #20]
   13166:	1d18      	adds	r0, r3, #4
   13168:	681b      	ldr	r3, [r3, #0]
   1316a:	9005      	str	r0, [sp, #20]
   1316c:	2b00      	cmp	r3, #0
   1316e:	db39      	blt.n	131e4 <_svfiprintf_r+0x174>
   13170:	9309      	str	r3, [sp, #36]	; 0x24
   13172:	0014      	movs	r4, r2
   13174:	7823      	ldrb	r3, [r4, #0]
   13176:	2b2e      	cmp	r3, #46	; 0x2e
   13178:	d10b      	bne.n	13192 <_svfiprintf_r+0x122>
   1317a:	7863      	ldrb	r3, [r4, #1]
   1317c:	1c62      	adds	r2, r4, #1
   1317e:	2b2a      	cmp	r3, #42	; 0x2a
   13180:	d13e      	bne.n	13200 <_svfiprintf_r+0x190>
   13182:	9b05      	ldr	r3, [sp, #20]
   13184:	3402      	adds	r4, #2
   13186:	1d1a      	adds	r2, r3, #4
   13188:	681b      	ldr	r3, [r3, #0]
   1318a:	9205      	str	r2, [sp, #20]
   1318c:	2b00      	cmp	r3, #0
   1318e:	db34      	blt.n	131fa <_svfiprintf_r+0x18a>
   13190:	9307      	str	r3, [sp, #28]
   13192:	4e35      	ldr	r6, [pc, #212]	; (13268 <_svfiprintf_r+0x1f8>)
   13194:	7821      	ldrb	r1, [r4, #0]
   13196:	2203      	movs	r2, #3
   13198:	0030      	movs	r0, r6
   1319a:	f000 f9f5 	bl	13588 <memchr>
   1319e:	2800      	cmp	r0, #0
   131a0:	d006      	beq.n	131b0 <_svfiprintf_r+0x140>
   131a2:	2340      	movs	r3, #64	; 0x40
   131a4:	1b80      	subs	r0, r0, r6
   131a6:	4083      	lsls	r3, r0
   131a8:	682a      	ldr	r2, [r5, #0]
   131aa:	3401      	adds	r4, #1
   131ac:	4313      	orrs	r3, r2
   131ae:	602b      	str	r3, [r5, #0]
   131b0:	7821      	ldrb	r1, [r4, #0]
   131b2:	2206      	movs	r2, #6
   131b4:	482d      	ldr	r0, [pc, #180]	; (1326c <_svfiprintf_r+0x1fc>)
   131b6:	1c66      	adds	r6, r4, #1
   131b8:	7629      	strb	r1, [r5, #24]
   131ba:	f000 f9e5 	bl	13588 <memchr>
   131be:	2800      	cmp	r0, #0
   131c0:	d046      	beq.n	13250 <_svfiprintf_r+0x1e0>
   131c2:	4b2b      	ldr	r3, [pc, #172]	; (13270 <_svfiprintf_r+0x200>)
   131c4:	2b00      	cmp	r3, #0
   131c6:	d12f      	bne.n	13228 <_svfiprintf_r+0x1b8>
   131c8:	6829      	ldr	r1, [r5, #0]
   131ca:	9b05      	ldr	r3, [sp, #20]
   131cc:	2207      	movs	r2, #7
   131ce:	05c9      	lsls	r1, r1, #23
   131d0:	d528      	bpl.n	13224 <_svfiprintf_r+0x1b4>
   131d2:	189b      	adds	r3, r3, r2
   131d4:	4393      	bics	r3, r2
   131d6:	3308      	adds	r3, #8
   131d8:	9305      	str	r3, [sp, #20]
   131da:	696b      	ldr	r3, [r5, #20]
   131dc:	9a03      	ldr	r2, [sp, #12]
   131de:	189b      	adds	r3, r3, r2
   131e0:	616b      	str	r3, [r5, #20]
   131e2:	e767      	b.n	130b4 <_svfiprintf_r+0x44>
   131e4:	425b      	negs	r3, r3
   131e6:	60eb      	str	r3, [r5, #12]
   131e8:	2302      	movs	r3, #2
   131ea:	430b      	orrs	r3, r1
   131ec:	602b      	str	r3, [r5, #0]
   131ee:	e7c0      	b.n	13172 <_svfiprintf_r+0x102>
   131f0:	434b      	muls	r3, r1
   131f2:	3401      	adds	r4, #1
   131f4:	189b      	adds	r3, r3, r2
   131f6:	2001      	movs	r0, #1
   131f8:	e7a0      	b.n	1313c <_svfiprintf_r+0xcc>
   131fa:	2301      	movs	r3, #1
   131fc:	425b      	negs	r3, r3
   131fe:	e7c7      	b.n	13190 <_svfiprintf_r+0x120>
   13200:	2300      	movs	r3, #0
   13202:	0014      	movs	r4, r2
   13204:	200a      	movs	r0, #10
   13206:	001a      	movs	r2, r3
   13208:	606b      	str	r3, [r5, #4]
   1320a:	7821      	ldrb	r1, [r4, #0]
   1320c:	3930      	subs	r1, #48	; 0x30
   1320e:	2909      	cmp	r1, #9
   13210:	d903      	bls.n	1321a <_svfiprintf_r+0x1aa>
   13212:	2b00      	cmp	r3, #0
   13214:	d0bd      	beq.n	13192 <_svfiprintf_r+0x122>
   13216:	9207      	str	r2, [sp, #28]
   13218:	e7bb      	b.n	13192 <_svfiprintf_r+0x122>
   1321a:	4342      	muls	r2, r0
   1321c:	3401      	adds	r4, #1
   1321e:	1852      	adds	r2, r2, r1
   13220:	2301      	movs	r3, #1
   13222:	e7f2      	b.n	1320a <_svfiprintf_r+0x19a>
   13224:	3307      	adds	r3, #7
   13226:	e7d5      	b.n	131d4 <_svfiprintf_r+0x164>
   13228:	ab05      	add	r3, sp, #20
   1322a:	9300      	str	r3, [sp, #0]
   1322c:	003a      	movs	r2, r7
   1322e:	4b11      	ldr	r3, [pc, #68]	; (13274 <_svfiprintf_r+0x204>)
   13230:	0029      	movs	r1, r5
   13232:	9802      	ldr	r0, [sp, #8]
   13234:	e000      	b.n	13238 <_svfiprintf_r+0x1c8>
   13236:	bf00      	nop
   13238:	9003      	str	r0, [sp, #12]
   1323a:	9b03      	ldr	r3, [sp, #12]
   1323c:	3301      	adds	r3, #1
   1323e:	d1cc      	bne.n	131da <_svfiprintf_r+0x16a>
   13240:	89bb      	ldrh	r3, [r7, #12]
   13242:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13244:	065b      	lsls	r3, r3, #25
   13246:	d400      	bmi.n	1324a <_svfiprintf_r+0x1da>
   13248:	e729      	b.n	1309e <_svfiprintf_r+0x2e>
   1324a:	2001      	movs	r0, #1
   1324c:	4240      	negs	r0, r0
   1324e:	e726      	b.n	1309e <_svfiprintf_r+0x2e>
   13250:	ab05      	add	r3, sp, #20
   13252:	9300      	str	r3, [sp, #0]
   13254:	003a      	movs	r2, r7
   13256:	4b07      	ldr	r3, [pc, #28]	; (13274 <_svfiprintf_r+0x204>)
   13258:	0029      	movs	r1, r5
   1325a:	9802      	ldr	r0, [sp, #8]
   1325c:	f000 f87a 	bl	13354 <_printf_i>
   13260:	e7ea      	b.n	13238 <_svfiprintf_r+0x1c8>
   13262:	46c0      	nop			; (mov r8, r8)
   13264:	00013ca8 	.word	0x00013ca8
   13268:	00013cae 	.word	0x00013cae
   1326c:	00013cb2 	.word	0x00013cb2
   13270:	00000000 	.word	0x00000000
   13274:	00012fad 	.word	0x00012fad

00013278 <_printf_common>:
   13278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1327a:	0015      	movs	r5, r2
   1327c:	9301      	str	r3, [sp, #4]
   1327e:	688a      	ldr	r2, [r1, #8]
   13280:	690b      	ldr	r3, [r1, #16]
   13282:	9000      	str	r0, [sp, #0]
   13284:	000c      	movs	r4, r1
   13286:	4293      	cmp	r3, r2
   13288:	da00      	bge.n	1328c <_printf_common+0x14>
   1328a:	0013      	movs	r3, r2
   1328c:	0022      	movs	r2, r4
   1328e:	602b      	str	r3, [r5, #0]
   13290:	3243      	adds	r2, #67	; 0x43
   13292:	7812      	ldrb	r2, [r2, #0]
   13294:	2a00      	cmp	r2, #0
   13296:	d001      	beq.n	1329c <_printf_common+0x24>
   13298:	3301      	adds	r3, #1
   1329a:	602b      	str	r3, [r5, #0]
   1329c:	6823      	ldr	r3, [r4, #0]
   1329e:	069b      	lsls	r3, r3, #26
   132a0:	d502      	bpl.n	132a8 <_printf_common+0x30>
   132a2:	682b      	ldr	r3, [r5, #0]
   132a4:	3302      	adds	r3, #2
   132a6:	602b      	str	r3, [r5, #0]
   132a8:	2706      	movs	r7, #6
   132aa:	6823      	ldr	r3, [r4, #0]
   132ac:	401f      	ands	r7, r3
   132ae:	d027      	beq.n	13300 <_printf_common+0x88>
   132b0:	0023      	movs	r3, r4
   132b2:	3343      	adds	r3, #67	; 0x43
   132b4:	781b      	ldrb	r3, [r3, #0]
   132b6:	1e5a      	subs	r2, r3, #1
   132b8:	4193      	sbcs	r3, r2
   132ba:	6822      	ldr	r2, [r4, #0]
   132bc:	0692      	lsls	r2, r2, #26
   132be:	d430      	bmi.n	13322 <_printf_common+0xaa>
   132c0:	0022      	movs	r2, r4
   132c2:	9901      	ldr	r1, [sp, #4]
   132c4:	3243      	adds	r2, #67	; 0x43
   132c6:	9800      	ldr	r0, [sp, #0]
   132c8:	9e08      	ldr	r6, [sp, #32]
   132ca:	47b0      	blx	r6
   132cc:	1c43      	adds	r3, r0, #1
   132ce:	d025      	beq.n	1331c <_printf_common+0xa4>
   132d0:	2306      	movs	r3, #6
   132d2:	6820      	ldr	r0, [r4, #0]
   132d4:	682a      	ldr	r2, [r5, #0]
   132d6:	68e1      	ldr	r1, [r4, #12]
   132d8:	4003      	ands	r3, r0
   132da:	2500      	movs	r5, #0
   132dc:	2b04      	cmp	r3, #4
   132de:	d103      	bne.n	132e8 <_printf_common+0x70>
   132e0:	1a8d      	subs	r5, r1, r2
   132e2:	43eb      	mvns	r3, r5
   132e4:	17db      	asrs	r3, r3, #31
   132e6:	401d      	ands	r5, r3
   132e8:	68a3      	ldr	r3, [r4, #8]
   132ea:	6922      	ldr	r2, [r4, #16]
   132ec:	4293      	cmp	r3, r2
   132ee:	dd01      	ble.n	132f4 <_printf_common+0x7c>
   132f0:	1a9b      	subs	r3, r3, r2
   132f2:	18ed      	adds	r5, r5, r3
   132f4:	2700      	movs	r7, #0
   132f6:	42bd      	cmp	r5, r7
   132f8:	d120      	bne.n	1333c <_printf_common+0xc4>
   132fa:	2000      	movs	r0, #0
   132fc:	e010      	b.n	13320 <_printf_common+0xa8>
   132fe:	3701      	adds	r7, #1
   13300:	68e3      	ldr	r3, [r4, #12]
   13302:	682a      	ldr	r2, [r5, #0]
   13304:	1a9b      	subs	r3, r3, r2
   13306:	429f      	cmp	r7, r3
   13308:	dad2      	bge.n	132b0 <_printf_common+0x38>
   1330a:	0022      	movs	r2, r4
   1330c:	2301      	movs	r3, #1
   1330e:	3219      	adds	r2, #25
   13310:	9901      	ldr	r1, [sp, #4]
   13312:	9800      	ldr	r0, [sp, #0]
   13314:	9e08      	ldr	r6, [sp, #32]
   13316:	47b0      	blx	r6
   13318:	1c43      	adds	r3, r0, #1
   1331a:	d1f0      	bne.n	132fe <_printf_common+0x86>
   1331c:	2001      	movs	r0, #1
   1331e:	4240      	negs	r0, r0
   13320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13322:	2030      	movs	r0, #48	; 0x30
   13324:	18e1      	adds	r1, r4, r3
   13326:	3143      	adds	r1, #67	; 0x43
   13328:	7008      	strb	r0, [r1, #0]
   1332a:	0021      	movs	r1, r4
   1332c:	1c5a      	adds	r2, r3, #1
   1332e:	3145      	adds	r1, #69	; 0x45
   13330:	7809      	ldrb	r1, [r1, #0]
   13332:	18a2      	adds	r2, r4, r2
   13334:	3243      	adds	r2, #67	; 0x43
   13336:	3302      	adds	r3, #2
   13338:	7011      	strb	r1, [r2, #0]
   1333a:	e7c1      	b.n	132c0 <_printf_common+0x48>
   1333c:	0022      	movs	r2, r4
   1333e:	2301      	movs	r3, #1
   13340:	321a      	adds	r2, #26
   13342:	9901      	ldr	r1, [sp, #4]
   13344:	9800      	ldr	r0, [sp, #0]
   13346:	9e08      	ldr	r6, [sp, #32]
   13348:	47b0      	blx	r6
   1334a:	1c43      	adds	r3, r0, #1
   1334c:	d0e6      	beq.n	1331c <_printf_common+0xa4>
   1334e:	3701      	adds	r7, #1
   13350:	e7d1      	b.n	132f6 <_printf_common+0x7e>
	...

00013354 <_printf_i>:
   13354:	b5f0      	push	{r4, r5, r6, r7, lr}
   13356:	b08b      	sub	sp, #44	; 0x2c
   13358:	9206      	str	r2, [sp, #24]
   1335a:	000a      	movs	r2, r1
   1335c:	3243      	adds	r2, #67	; 0x43
   1335e:	9307      	str	r3, [sp, #28]
   13360:	9005      	str	r0, [sp, #20]
   13362:	9204      	str	r2, [sp, #16]
   13364:	7e0a      	ldrb	r2, [r1, #24]
   13366:	000c      	movs	r4, r1
   13368:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1336a:	2a6e      	cmp	r2, #110	; 0x6e
   1336c:	d100      	bne.n	13370 <_printf_i+0x1c>
   1336e:	e08f      	b.n	13490 <_printf_i+0x13c>
   13370:	d817      	bhi.n	133a2 <_printf_i+0x4e>
   13372:	2a63      	cmp	r2, #99	; 0x63
   13374:	d02c      	beq.n	133d0 <_printf_i+0x7c>
   13376:	d808      	bhi.n	1338a <_printf_i+0x36>
   13378:	2a00      	cmp	r2, #0
   1337a:	d100      	bne.n	1337e <_printf_i+0x2a>
   1337c:	e099      	b.n	134b2 <_printf_i+0x15e>
   1337e:	2a58      	cmp	r2, #88	; 0x58
   13380:	d054      	beq.n	1342c <_printf_i+0xd8>
   13382:	0026      	movs	r6, r4
   13384:	3642      	adds	r6, #66	; 0x42
   13386:	7032      	strb	r2, [r6, #0]
   13388:	e029      	b.n	133de <_printf_i+0x8a>
   1338a:	2a64      	cmp	r2, #100	; 0x64
   1338c:	d001      	beq.n	13392 <_printf_i+0x3e>
   1338e:	2a69      	cmp	r2, #105	; 0x69
   13390:	d1f7      	bne.n	13382 <_printf_i+0x2e>
   13392:	6821      	ldr	r1, [r4, #0]
   13394:	681a      	ldr	r2, [r3, #0]
   13396:	0608      	lsls	r0, r1, #24
   13398:	d523      	bpl.n	133e2 <_printf_i+0x8e>
   1339a:	1d11      	adds	r1, r2, #4
   1339c:	6019      	str	r1, [r3, #0]
   1339e:	6815      	ldr	r5, [r2, #0]
   133a0:	e025      	b.n	133ee <_printf_i+0x9a>
   133a2:	2a73      	cmp	r2, #115	; 0x73
   133a4:	d100      	bne.n	133a8 <_printf_i+0x54>
   133a6:	e088      	b.n	134ba <_printf_i+0x166>
   133a8:	d808      	bhi.n	133bc <_printf_i+0x68>
   133aa:	2a6f      	cmp	r2, #111	; 0x6f
   133ac:	d029      	beq.n	13402 <_printf_i+0xae>
   133ae:	2a70      	cmp	r2, #112	; 0x70
   133b0:	d1e7      	bne.n	13382 <_printf_i+0x2e>
   133b2:	2220      	movs	r2, #32
   133b4:	6809      	ldr	r1, [r1, #0]
   133b6:	430a      	orrs	r2, r1
   133b8:	6022      	str	r2, [r4, #0]
   133ba:	e003      	b.n	133c4 <_printf_i+0x70>
   133bc:	2a75      	cmp	r2, #117	; 0x75
   133be:	d020      	beq.n	13402 <_printf_i+0xae>
   133c0:	2a78      	cmp	r2, #120	; 0x78
   133c2:	d1de      	bne.n	13382 <_printf_i+0x2e>
   133c4:	0022      	movs	r2, r4
   133c6:	2178      	movs	r1, #120	; 0x78
   133c8:	3245      	adds	r2, #69	; 0x45
   133ca:	7011      	strb	r1, [r2, #0]
   133cc:	4a6c      	ldr	r2, [pc, #432]	; (13580 <_printf_i+0x22c>)
   133ce:	e030      	b.n	13432 <_printf_i+0xde>
   133d0:	000e      	movs	r6, r1
   133d2:	681a      	ldr	r2, [r3, #0]
   133d4:	3642      	adds	r6, #66	; 0x42
   133d6:	1d11      	adds	r1, r2, #4
   133d8:	6019      	str	r1, [r3, #0]
   133da:	6813      	ldr	r3, [r2, #0]
   133dc:	7033      	strb	r3, [r6, #0]
   133de:	2301      	movs	r3, #1
   133e0:	e079      	b.n	134d6 <_printf_i+0x182>
   133e2:	0649      	lsls	r1, r1, #25
   133e4:	d5d9      	bpl.n	1339a <_printf_i+0x46>
   133e6:	1d11      	adds	r1, r2, #4
   133e8:	6019      	str	r1, [r3, #0]
   133ea:	2300      	movs	r3, #0
   133ec:	5ed5      	ldrsh	r5, [r2, r3]
   133ee:	2d00      	cmp	r5, #0
   133f0:	da03      	bge.n	133fa <_printf_i+0xa6>
   133f2:	232d      	movs	r3, #45	; 0x2d
   133f4:	9a04      	ldr	r2, [sp, #16]
   133f6:	426d      	negs	r5, r5
   133f8:	7013      	strb	r3, [r2, #0]
   133fa:	4b62      	ldr	r3, [pc, #392]	; (13584 <_printf_i+0x230>)
   133fc:	270a      	movs	r7, #10
   133fe:	9303      	str	r3, [sp, #12]
   13400:	e02f      	b.n	13462 <_printf_i+0x10e>
   13402:	6820      	ldr	r0, [r4, #0]
   13404:	6819      	ldr	r1, [r3, #0]
   13406:	0605      	lsls	r5, r0, #24
   13408:	d503      	bpl.n	13412 <_printf_i+0xbe>
   1340a:	1d08      	adds	r0, r1, #4
   1340c:	6018      	str	r0, [r3, #0]
   1340e:	680d      	ldr	r5, [r1, #0]
   13410:	e005      	b.n	1341e <_printf_i+0xca>
   13412:	0640      	lsls	r0, r0, #25
   13414:	d5f9      	bpl.n	1340a <_printf_i+0xb6>
   13416:	680d      	ldr	r5, [r1, #0]
   13418:	1d08      	adds	r0, r1, #4
   1341a:	6018      	str	r0, [r3, #0]
   1341c:	b2ad      	uxth	r5, r5
   1341e:	4b59      	ldr	r3, [pc, #356]	; (13584 <_printf_i+0x230>)
   13420:	2708      	movs	r7, #8
   13422:	9303      	str	r3, [sp, #12]
   13424:	2a6f      	cmp	r2, #111	; 0x6f
   13426:	d018      	beq.n	1345a <_printf_i+0x106>
   13428:	270a      	movs	r7, #10
   1342a:	e016      	b.n	1345a <_printf_i+0x106>
   1342c:	3145      	adds	r1, #69	; 0x45
   1342e:	700a      	strb	r2, [r1, #0]
   13430:	4a54      	ldr	r2, [pc, #336]	; (13584 <_printf_i+0x230>)
   13432:	9203      	str	r2, [sp, #12]
   13434:	681a      	ldr	r2, [r3, #0]
   13436:	6821      	ldr	r1, [r4, #0]
   13438:	1d10      	adds	r0, r2, #4
   1343a:	6018      	str	r0, [r3, #0]
   1343c:	6815      	ldr	r5, [r2, #0]
   1343e:	0608      	lsls	r0, r1, #24
   13440:	d522      	bpl.n	13488 <_printf_i+0x134>
   13442:	07cb      	lsls	r3, r1, #31
   13444:	d502      	bpl.n	1344c <_printf_i+0xf8>
   13446:	2320      	movs	r3, #32
   13448:	4319      	orrs	r1, r3
   1344a:	6021      	str	r1, [r4, #0]
   1344c:	2710      	movs	r7, #16
   1344e:	2d00      	cmp	r5, #0
   13450:	d103      	bne.n	1345a <_printf_i+0x106>
   13452:	2320      	movs	r3, #32
   13454:	6822      	ldr	r2, [r4, #0]
   13456:	439a      	bics	r2, r3
   13458:	6022      	str	r2, [r4, #0]
   1345a:	0023      	movs	r3, r4
   1345c:	2200      	movs	r2, #0
   1345e:	3343      	adds	r3, #67	; 0x43
   13460:	701a      	strb	r2, [r3, #0]
   13462:	6863      	ldr	r3, [r4, #4]
   13464:	60a3      	str	r3, [r4, #8]
   13466:	2b00      	cmp	r3, #0
   13468:	db5c      	blt.n	13524 <_printf_i+0x1d0>
   1346a:	2204      	movs	r2, #4
   1346c:	6821      	ldr	r1, [r4, #0]
   1346e:	4391      	bics	r1, r2
   13470:	6021      	str	r1, [r4, #0]
   13472:	2d00      	cmp	r5, #0
   13474:	d158      	bne.n	13528 <_printf_i+0x1d4>
   13476:	9e04      	ldr	r6, [sp, #16]
   13478:	2b00      	cmp	r3, #0
   1347a:	d064      	beq.n	13546 <_printf_i+0x1f2>
   1347c:	0026      	movs	r6, r4
   1347e:	9b03      	ldr	r3, [sp, #12]
   13480:	3642      	adds	r6, #66	; 0x42
   13482:	781b      	ldrb	r3, [r3, #0]
   13484:	7033      	strb	r3, [r6, #0]
   13486:	e05e      	b.n	13546 <_printf_i+0x1f2>
   13488:	0648      	lsls	r0, r1, #25
   1348a:	d5da      	bpl.n	13442 <_printf_i+0xee>
   1348c:	b2ad      	uxth	r5, r5
   1348e:	e7d8      	b.n	13442 <_printf_i+0xee>
   13490:	6809      	ldr	r1, [r1, #0]
   13492:	681a      	ldr	r2, [r3, #0]
   13494:	0608      	lsls	r0, r1, #24
   13496:	d505      	bpl.n	134a4 <_printf_i+0x150>
   13498:	1d11      	adds	r1, r2, #4
   1349a:	6019      	str	r1, [r3, #0]
   1349c:	6813      	ldr	r3, [r2, #0]
   1349e:	6962      	ldr	r2, [r4, #20]
   134a0:	601a      	str	r2, [r3, #0]
   134a2:	e006      	b.n	134b2 <_printf_i+0x15e>
   134a4:	0649      	lsls	r1, r1, #25
   134a6:	d5f7      	bpl.n	13498 <_printf_i+0x144>
   134a8:	1d11      	adds	r1, r2, #4
   134aa:	6019      	str	r1, [r3, #0]
   134ac:	6813      	ldr	r3, [r2, #0]
   134ae:	8aa2      	ldrh	r2, [r4, #20]
   134b0:	801a      	strh	r2, [r3, #0]
   134b2:	2300      	movs	r3, #0
   134b4:	9e04      	ldr	r6, [sp, #16]
   134b6:	6123      	str	r3, [r4, #16]
   134b8:	e054      	b.n	13564 <_printf_i+0x210>
   134ba:	681a      	ldr	r2, [r3, #0]
   134bc:	1d11      	adds	r1, r2, #4
   134be:	6019      	str	r1, [r3, #0]
   134c0:	6816      	ldr	r6, [r2, #0]
   134c2:	2100      	movs	r1, #0
   134c4:	6862      	ldr	r2, [r4, #4]
   134c6:	0030      	movs	r0, r6
   134c8:	f000 f85e 	bl	13588 <memchr>
   134cc:	2800      	cmp	r0, #0
   134ce:	d001      	beq.n	134d4 <_printf_i+0x180>
   134d0:	1b80      	subs	r0, r0, r6
   134d2:	6060      	str	r0, [r4, #4]
   134d4:	6863      	ldr	r3, [r4, #4]
   134d6:	6123      	str	r3, [r4, #16]
   134d8:	2300      	movs	r3, #0
   134da:	9a04      	ldr	r2, [sp, #16]
   134dc:	7013      	strb	r3, [r2, #0]
   134de:	e041      	b.n	13564 <_printf_i+0x210>
   134e0:	6923      	ldr	r3, [r4, #16]
   134e2:	0032      	movs	r2, r6
   134e4:	9906      	ldr	r1, [sp, #24]
   134e6:	9805      	ldr	r0, [sp, #20]
   134e8:	9d07      	ldr	r5, [sp, #28]
   134ea:	47a8      	blx	r5
   134ec:	1c43      	adds	r3, r0, #1
   134ee:	d043      	beq.n	13578 <_printf_i+0x224>
   134f0:	6823      	ldr	r3, [r4, #0]
   134f2:	2500      	movs	r5, #0
   134f4:	079b      	lsls	r3, r3, #30
   134f6:	d40f      	bmi.n	13518 <_printf_i+0x1c4>
   134f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   134fa:	68e0      	ldr	r0, [r4, #12]
   134fc:	4298      	cmp	r0, r3
   134fe:	da3d      	bge.n	1357c <_printf_i+0x228>
   13500:	0018      	movs	r0, r3
   13502:	e03b      	b.n	1357c <_printf_i+0x228>
   13504:	0022      	movs	r2, r4
   13506:	2301      	movs	r3, #1
   13508:	3219      	adds	r2, #25
   1350a:	9906      	ldr	r1, [sp, #24]
   1350c:	9805      	ldr	r0, [sp, #20]
   1350e:	9e07      	ldr	r6, [sp, #28]
   13510:	47b0      	blx	r6
   13512:	1c43      	adds	r3, r0, #1
   13514:	d030      	beq.n	13578 <_printf_i+0x224>
   13516:	3501      	adds	r5, #1
   13518:	68e3      	ldr	r3, [r4, #12]
   1351a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1351c:	1a9b      	subs	r3, r3, r2
   1351e:	429d      	cmp	r5, r3
   13520:	dbf0      	blt.n	13504 <_printf_i+0x1b0>
   13522:	e7e9      	b.n	134f8 <_printf_i+0x1a4>
   13524:	2d00      	cmp	r5, #0
   13526:	d0a9      	beq.n	1347c <_printf_i+0x128>
   13528:	9e04      	ldr	r6, [sp, #16]
   1352a:	0028      	movs	r0, r5
   1352c:	0039      	movs	r1, r7
   1352e:	f7fc fca7 	bl	fe80 <__aeabi_uidivmod>
   13532:	9b03      	ldr	r3, [sp, #12]
   13534:	3e01      	subs	r6, #1
   13536:	5c5b      	ldrb	r3, [r3, r1]
   13538:	0028      	movs	r0, r5
   1353a:	7033      	strb	r3, [r6, #0]
   1353c:	0039      	movs	r1, r7
   1353e:	f7fc fc19 	bl	fd74 <__udivsi3>
   13542:	1e05      	subs	r5, r0, #0
   13544:	d1f1      	bne.n	1352a <_printf_i+0x1d6>
   13546:	2f08      	cmp	r7, #8
   13548:	d109      	bne.n	1355e <_printf_i+0x20a>
   1354a:	6823      	ldr	r3, [r4, #0]
   1354c:	07db      	lsls	r3, r3, #31
   1354e:	d506      	bpl.n	1355e <_printf_i+0x20a>
   13550:	6863      	ldr	r3, [r4, #4]
   13552:	6922      	ldr	r2, [r4, #16]
   13554:	4293      	cmp	r3, r2
   13556:	dc02      	bgt.n	1355e <_printf_i+0x20a>
   13558:	2330      	movs	r3, #48	; 0x30
   1355a:	3e01      	subs	r6, #1
   1355c:	7033      	strb	r3, [r6, #0]
   1355e:	9b04      	ldr	r3, [sp, #16]
   13560:	1b9b      	subs	r3, r3, r6
   13562:	6123      	str	r3, [r4, #16]
   13564:	9b07      	ldr	r3, [sp, #28]
   13566:	aa09      	add	r2, sp, #36	; 0x24
   13568:	9300      	str	r3, [sp, #0]
   1356a:	0021      	movs	r1, r4
   1356c:	9b06      	ldr	r3, [sp, #24]
   1356e:	9805      	ldr	r0, [sp, #20]
   13570:	f7ff fe82 	bl	13278 <_printf_common>
   13574:	1c43      	adds	r3, r0, #1
   13576:	d1b3      	bne.n	134e0 <_printf_i+0x18c>
   13578:	2001      	movs	r0, #1
   1357a:	4240      	negs	r0, r0
   1357c:	b00b      	add	sp, #44	; 0x2c
   1357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13580:	00013cca 	.word	0x00013cca
   13584:	00013cb9 	.word	0x00013cb9

00013588 <memchr>:
   13588:	b2c9      	uxtb	r1, r1
   1358a:	1882      	adds	r2, r0, r2
   1358c:	4290      	cmp	r0, r2
   1358e:	d101      	bne.n	13594 <memchr+0xc>
   13590:	2000      	movs	r0, #0
   13592:	4770      	bx	lr
   13594:	7803      	ldrb	r3, [r0, #0]
   13596:	428b      	cmp	r3, r1
   13598:	d0fb      	beq.n	13592 <memchr+0xa>
   1359a:	3001      	adds	r0, #1
   1359c:	e7f6      	b.n	1358c <memchr+0x4>

0001359e <memmove>:
   1359e:	b510      	push	{r4, lr}
   135a0:	4288      	cmp	r0, r1
   135a2:	d902      	bls.n	135aa <memmove+0xc>
   135a4:	188b      	adds	r3, r1, r2
   135a6:	4298      	cmp	r0, r3
   135a8:	d308      	bcc.n	135bc <memmove+0x1e>
   135aa:	2300      	movs	r3, #0
   135ac:	429a      	cmp	r2, r3
   135ae:	d007      	beq.n	135c0 <memmove+0x22>
   135b0:	5ccc      	ldrb	r4, [r1, r3]
   135b2:	54c4      	strb	r4, [r0, r3]
   135b4:	3301      	adds	r3, #1
   135b6:	e7f9      	b.n	135ac <memmove+0xe>
   135b8:	5c8b      	ldrb	r3, [r1, r2]
   135ba:	5483      	strb	r3, [r0, r2]
   135bc:	3a01      	subs	r2, #1
   135be:	d2fb      	bcs.n	135b8 <memmove+0x1a>
   135c0:	bd10      	pop	{r4, pc}
	...

000135c4 <_free_r>:
   135c4:	b570      	push	{r4, r5, r6, lr}
   135c6:	0005      	movs	r5, r0
   135c8:	2900      	cmp	r1, #0
   135ca:	d010      	beq.n	135ee <_free_r+0x2a>
   135cc:	1f0c      	subs	r4, r1, #4
   135ce:	6823      	ldr	r3, [r4, #0]
   135d0:	2b00      	cmp	r3, #0
   135d2:	da00      	bge.n	135d6 <_free_r+0x12>
   135d4:	18e4      	adds	r4, r4, r3
   135d6:	0028      	movs	r0, r5
   135d8:	f000 f8d4 	bl	13784 <__malloc_lock>
   135dc:	4a1d      	ldr	r2, [pc, #116]	; (13654 <_free_r+0x90>)
   135de:	6813      	ldr	r3, [r2, #0]
   135e0:	2b00      	cmp	r3, #0
   135e2:	d105      	bne.n	135f0 <_free_r+0x2c>
   135e4:	6063      	str	r3, [r4, #4]
   135e6:	6014      	str	r4, [r2, #0]
   135e8:	0028      	movs	r0, r5
   135ea:	f000 f8cc 	bl	13786 <__malloc_unlock>
   135ee:	bd70      	pop	{r4, r5, r6, pc}
   135f0:	42a3      	cmp	r3, r4
   135f2:	d909      	bls.n	13608 <_free_r+0x44>
   135f4:	6821      	ldr	r1, [r4, #0]
   135f6:	1860      	adds	r0, r4, r1
   135f8:	4283      	cmp	r3, r0
   135fa:	d1f3      	bne.n	135e4 <_free_r+0x20>
   135fc:	6818      	ldr	r0, [r3, #0]
   135fe:	685b      	ldr	r3, [r3, #4]
   13600:	1841      	adds	r1, r0, r1
   13602:	6021      	str	r1, [r4, #0]
   13604:	e7ee      	b.n	135e4 <_free_r+0x20>
   13606:	0013      	movs	r3, r2
   13608:	685a      	ldr	r2, [r3, #4]
   1360a:	2a00      	cmp	r2, #0
   1360c:	d001      	beq.n	13612 <_free_r+0x4e>
   1360e:	42a2      	cmp	r2, r4
   13610:	d9f9      	bls.n	13606 <_free_r+0x42>
   13612:	6819      	ldr	r1, [r3, #0]
   13614:	1858      	adds	r0, r3, r1
   13616:	42a0      	cmp	r0, r4
   13618:	d10b      	bne.n	13632 <_free_r+0x6e>
   1361a:	6820      	ldr	r0, [r4, #0]
   1361c:	1809      	adds	r1, r1, r0
   1361e:	1858      	adds	r0, r3, r1
   13620:	6019      	str	r1, [r3, #0]
   13622:	4282      	cmp	r2, r0
   13624:	d1e0      	bne.n	135e8 <_free_r+0x24>
   13626:	6810      	ldr	r0, [r2, #0]
   13628:	6852      	ldr	r2, [r2, #4]
   1362a:	1841      	adds	r1, r0, r1
   1362c:	6019      	str	r1, [r3, #0]
   1362e:	605a      	str	r2, [r3, #4]
   13630:	e7da      	b.n	135e8 <_free_r+0x24>
   13632:	42a0      	cmp	r0, r4
   13634:	d902      	bls.n	1363c <_free_r+0x78>
   13636:	230c      	movs	r3, #12
   13638:	602b      	str	r3, [r5, #0]
   1363a:	e7d5      	b.n	135e8 <_free_r+0x24>
   1363c:	6821      	ldr	r1, [r4, #0]
   1363e:	1860      	adds	r0, r4, r1
   13640:	4282      	cmp	r2, r0
   13642:	d103      	bne.n	1364c <_free_r+0x88>
   13644:	6810      	ldr	r0, [r2, #0]
   13646:	6852      	ldr	r2, [r2, #4]
   13648:	1841      	adds	r1, r0, r1
   1364a:	6021      	str	r1, [r4, #0]
   1364c:	6062      	str	r2, [r4, #4]
   1364e:	605c      	str	r4, [r3, #4]
   13650:	e7ca      	b.n	135e8 <_free_r+0x24>
   13652:	46c0      	nop			; (mov r8, r8)
   13654:	20003c70 	.word	0x20003c70

00013658 <_malloc_r>:
   13658:	2303      	movs	r3, #3
   1365a:	b570      	push	{r4, r5, r6, lr}
   1365c:	1ccd      	adds	r5, r1, #3
   1365e:	439d      	bics	r5, r3
   13660:	3508      	adds	r5, #8
   13662:	0006      	movs	r6, r0
   13664:	2d0c      	cmp	r5, #12
   13666:	d21e      	bcs.n	136a6 <_malloc_r+0x4e>
   13668:	250c      	movs	r5, #12
   1366a:	42a9      	cmp	r1, r5
   1366c:	d81d      	bhi.n	136aa <_malloc_r+0x52>
   1366e:	0030      	movs	r0, r6
   13670:	f000 f888 	bl	13784 <__malloc_lock>
   13674:	4a25      	ldr	r2, [pc, #148]	; (1370c <_malloc_r+0xb4>)
   13676:	6814      	ldr	r4, [r2, #0]
   13678:	0021      	movs	r1, r4
   1367a:	2900      	cmp	r1, #0
   1367c:	d119      	bne.n	136b2 <_malloc_r+0x5a>
   1367e:	4c24      	ldr	r4, [pc, #144]	; (13710 <_malloc_r+0xb8>)
   13680:	6823      	ldr	r3, [r4, #0]
   13682:	2b00      	cmp	r3, #0
   13684:	d103      	bne.n	1368e <_malloc_r+0x36>
   13686:	0030      	movs	r0, r6
   13688:	f000 f86a 	bl	13760 <_sbrk_r>
   1368c:	6020      	str	r0, [r4, #0]
   1368e:	0029      	movs	r1, r5
   13690:	0030      	movs	r0, r6
   13692:	f000 f865 	bl	13760 <_sbrk_r>
   13696:	1c43      	adds	r3, r0, #1
   13698:	d12c      	bne.n	136f4 <_malloc_r+0x9c>
   1369a:	230c      	movs	r3, #12
   1369c:	0030      	movs	r0, r6
   1369e:	6033      	str	r3, [r6, #0]
   136a0:	f000 f871 	bl	13786 <__malloc_unlock>
   136a4:	e003      	b.n	136ae <_malloc_r+0x56>
   136a6:	2d00      	cmp	r5, #0
   136a8:	dadf      	bge.n	1366a <_malloc_r+0x12>
   136aa:	230c      	movs	r3, #12
   136ac:	6033      	str	r3, [r6, #0]
   136ae:	2000      	movs	r0, #0
   136b0:	bd70      	pop	{r4, r5, r6, pc}
   136b2:	680b      	ldr	r3, [r1, #0]
   136b4:	1b5b      	subs	r3, r3, r5
   136b6:	d41a      	bmi.n	136ee <_malloc_r+0x96>
   136b8:	2b0b      	cmp	r3, #11
   136ba:	d903      	bls.n	136c4 <_malloc_r+0x6c>
   136bc:	600b      	str	r3, [r1, #0]
   136be:	18cc      	adds	r4, r1, r3
   136c0:	6025      	str	r5, [r4, #0]
   136c2:	e003      	b.n	136cc <_malloc_r+0x74>
   136c4:	428c      	cmp	r4, r1
   136c6:	d10e      	bne.n	136e6 <_malloc_r+0x8e>
   136c8:	6863      	ldr	r3, [r4, #4]
   136ca:	6013      	str	r3, [r2, #0]
   136cc:	0030      	movs	r0, r6
   136ce:	f000 f85a 	bl	13786 <__malloc_unlock>
   136d2:	0020      	movs	r0, r4
   136d4:	2207      	movs	r2, #7
   136d6:	300b      	adds	r0, #11
   136d8:	1d23      	adds	r3, r4, #4
   136da:	4390      	bics	r0, r2
   136dc:	1ac3      	subs	r3, r0, r3
   136de:	d0e7      	beq.n	136b0 <_malloc_r+0x58>
   136e0:	425a      	negs	r2, r3
   136e2:	50e2      	str	r2, [r4, r3]
   136e4:	e7e4      	b.n	136b0 <_malloc_r+0x58>
   136e6:	684b      	ldr	r3, [r1, #4]
   136e8:	6063      	str	r3, [r4, #4]
   136ea:	000c      	movs	r4, r1
   136ec:	e7ee      	b.n	136cc <_malloc_r+0x74>
   136ee:	000c      	movs	r4, r1
   136f0:	6849      	ldr	r1, [r1, #4]
   136f2:	e7c2      	b.n	1367a <_malloc_r+0x22>
   136f4:	2303      	movs	r3, #3
   136f6:	1cc4      	adds	r4, r0, #3
   136f8:	439c      	bics	r4, r3
   136fa:	42a0      	cmp	r0, r4
   136fc:	d0e0      	beq.n	136c0 <_malloc_r+0x68>
   136fe:	1a21      	subs	r1, r4, r0
   13700:	0030      	movs	r0, r6
   13702:	f000 f82d 	bl	13760 <_sbrk_r>
   13706:	1c43      	adds	r3, r0, #1
   13708:	d1da      	bne.n	136c0 <_malloc_r+0x68>
   1370a:	e7c6      	b.n	1369a <_malloc_r+0x42>
   1370c:	20003c70 	.word	0x20003c70
   13710:	20003c74 	.word	0x20003c74

00013714 <_realloc_r>:
   13714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13716:	0007      	movs	r7, r0
   13718:	000d      	movs	r5, r1
   1371a:	0016      	movs	r6, r2
   1371c:	2900      	cmp	r1, #0
   1371e:	d105      	bne.n	1372c <_realloc_r+0x18>
   13720:	0011      	movs	r1, r2
   13722:	f7ff ff99 	bl	13658 <_malloc_r>
   13726:	0004      	movs	r4, r0
   13728:	0020      	movs	r0, r4
   1372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1372c:	2a00      	cmp	r2, #0
   1372e:	d103      	bne.n	13738 <_realloc_r+0x24>
   13730:	f7ff ff48 	bl	135c4 <_free_r>
   13734:	0034      	movs	r4, r6
   13736:	e7f7      	b.n	13728 <_realloc_r+0x14>
   13738:	f000 f826 	bl	13788 <_malloc_usable_size_r>
   1373c:	002c      	movs	r4, r5
   1373e:	4286      	cmp	r6, r0
   13740:	d9f2      	bls.n	13728 <_realloc_r+0x14>
   13742:	0031      	movs	r1, r6
   13744:	0038      	movs	r0, r7
   13746:	f7ff ff87 	bl	13658 <_malloc_r>
   1374a:	1e04      	subs	r4, r0, #0
   1374c:	d0ec      	beq.n	13728 <_realloc_r+0x14>
   1374e:	0029      	movs	r1, r5
   13750:	0032      	movs	r2, r6
   13752:	f7ff fbbd 	bl	12ed0 <memcpy>
   13756:	0029      	movs	r1, r5
   13758:	0038      	movs	r0, r7
   1375a:	f7ff ff33 	bl	135c4 <_free_r>
   1375e:	e7e3      	b.n	13728 <_realloc_r+0x14>

00013760 <_sbrk_r>:
   13760:	2300      	movs	r3, #0
   13762:	b570      	push	{r4, r5, r6, lr}
   13764:	4c06      	ldr	r4, [pc, #24]	; (13780 <_sbrk_r+0x20>)
   13766:	0005      	movs	r5, r0
   13768:	0008      	movs	r0, r1
   1376a:	6023      	str	r3, [r4, #0]
   1376c:	f7fc f9a4 	bl	fab8 <_sbrk>
   13770:	1c43      	adds	r3, r0, #1
   13772:	d103      	bne.n	1377c <_sbrk_r+0x1c>
   13774:	6823      	ldr	r3, [r4, #0]
   13776:	2b00      	cmp	r3, #0
   13778:	d000      	beq.n	1377c <_sbrk_r+0x1c>
   1377a:	602b      	str	r3, [r5, #0]
   1377c:	bd70      	pop	{r4, r5, r6, pc}
   1377e:	46c0      	nop			; (mov r8, r8)
   13780:	200040ac 	.word	0x200040ac

00013784 <__malloc_lock>:
   13784:	4770      	bx	lr

00013786 <__malloc_unlock>:
   13786:	4770      	bx	lr

00013788 <_malloc_usable_size_r>:
   13788:	1f0b      	subs	r3, r1, #4
   1378a:	681b      	ldr	r3, [r3, #0]
   1378c:	1f18      	subs	r0, r3, #4
   1378e:	2b00      	cmp	r3, #0
   13790:	da01      	bge.n	13796 <_malloc_usable_size_r+0xe>
   13792:	580b      	ldr	r3, [r1, r0]
   13794:	18c0      	adds	r0, r0, r3
   13796:	4770      	bx	lr
   13798:	000017b6 	.word	0x000017b6
   1379c:	0000179e 	.word	0x0000179e
   137a0:	000017b6 	.word	0x000017b6
   137a4:	000017a6 	.word	0x000017a6
   137a8:	000017b6 	.word	0x000017b6
   137ac:	00001796 	.word	0x00001796
   137b0:	000017b6 	.word	0x000017b6
   137b4:	000017b6 	.word	0x000017b6
   137b8:	000017b6 	.word	0x000017b6
   137bc:	000017ae 	.word	0x000017ae
   137c0:	00000002 	.word	0x00000002
   137c4:	00000003 	.word	0x00000003
   137c8:	00000028 	.word	0x00000028
   137cc:	00000029 	.word	0x00000029
   137d0:	00000004 	.word	0x00000004
   137d4:	00000005 	.word	0x00000005
   137d8:	00000006 	.word	0x00000006
   137dc:	00000007 	.word	0x00000007
   137e0:	0000ffff 	.word	0x0000ffff
   137e4:	0000ffff 	.word	0x0000ffff
   137e8:	00000022 	.word	0x00000022
   137ec:	00000023 	.word	0x00000023
   137f0:	0000ffff 	.word	0x0000ffff
   137f4:	0000ffff 	.word	0x0000ffff
   137f8:	0000ffff 	.word	0x0000ffff
   137fc:	0000ffff 	.word	0x0000ffff
   13800:	00000008 	.word	0x00000008
   13804:	00000009 	.word	0x00000009
   13808:	0000000a 	.word	0x0000000a
   1380c:	0000000b 	.word	0x0000000b
   13810:	00001de2 	.word	0x00001de2
   13814:	00001de8 	.word	0x00001de8
   13818:	00001de8 	.word	0x00001de8
   1381c:	00001de8 	.word	0x00001de8
   13820:	00001de8 	.word	0x00001de8
   13824:	00001de8 	.word	0x00001de8
   13828:	00001de8 	.word	0x00001de8
   1382c:	00001de8 	.word	0x00001de8
   13830:	00001de8 	.word	0x00001de8
   13834:	00001de8 	.word	0x00001de8
   13838:	00001de8 	.word	0x00001de8
   1383c:	00001de8 	.word	0x00001de8
   13840:	00001de8 	.word	0x00001de8
   13844:	00001de8 	.word	0x00001de8
   13848:	00001de8 	.word	0x00001de8
   1384c:	00001de8 	.word	0x00001de8
   13850:	00001dc0 	.word	0x00001dc0
   13854:	00001de8 	.word	0x00001de8
   13858:	00001de8 	.word	0x00001de8
   1385c:	00001de8 	.word	0x00001de8
   13860:	00001de8 	.word	0x00001de8
   13864:	00001de8 	.word	0x00001de8
   13868:	00001de8 	.word	0x00001de8
   1386c:	00001de8 	.word	0x00001de8
   13870:	00001de8 	.word	0x00001de8
   13874:	00001de8 	.word	0x00001de8
   13878:	00001de8 	.word	0x00001de8
   1387c:	00001de8 	.word	0x00001de8
   13880:	00001de8 	.word	0x00001de8
   13884:	00001de8 	.word	0x00001de8
   13888:	00001de8 	.word	0x00001de8
   1388c:	00001de8 	.word	0x00001de8
   13890:	00001ddc 	.word	0x00001ddc
   13894:	00001de8 	.word	0x00001de8
   13898:	00001de8 	.word	0x00001de8
   1389c:	00001de8 	.word	0x00001de8
   138a0:	00001de8 	.word	0x00001de8
   138a4:	00001de8 	.word	0x00001de8
   138a8:	00001de8 	.word	0x00001de8
   138ac:	00001de8 	.word	0x00001de8
   138b0:	00001de8 	.word	0x00001de8
   138b4:	00001de8 	.word	0x00001de8
   138b8:	00001de8 	.word	0x00001de8
   138bc:	00001de8 	.word	0x00001de8
   138c0:	00001de8 	.word	0x00001de8
   138c4:	00001de8 	.word	0x00001de8
   138c8:	00001de8 	.word	0x00001de8
   138cc:	00001de8 	.word	0x00001de8
   138d0:	00001dd6 	.word	0x00001dd6
   138d4:	00001d7e 	.word	0x00001d7e
   138d8:	00001d94 	.word	0x00001d94
   138dc:	00001daa 	.word	0x00001daa
   138e0:	00001d64 	.word	0x00001d64
   138e4:	01020300 	.word	0x01020300

000138e8 <_usb_device_irq_bits>:
   138e8:	00080004 00800070 01000001 00000200     ....p...........

000138f8 <_usb_endpoint_irq_bits>:
   138f8:	60100c03 00005f86 00005f9c 00006108     ...`._..._...a..
   13908:	000061d6 000062a4 20776f4c 74736f43     .a...b..Low Cost
   13918:	6e655620 616c6974 00726f74 544e4556      Ventilator.VENT
   13928:	004e4f3a 544e4556 46464f3a 00000000     :ON.VENT:OFF....
   13938:	69253a56 00006c6d 50454550 6369253a     V:%iml..PEEP:%ic
   13948:	3032486d 00000000 253a4549 69252e69     mH20....IE:%i.%i
   13958:	0000313a 3a504950 6d636925 00303248     :1..PIP:%icmH20.
   13968:	3a4d5042 00006925 20544553 3a4d5042     BPM:%i..SET BPM:
   13978:	00006925 20544553 50454550 6369253a     %i..SET PEEP:%ic
   13988:	3032486d 00000000 20544553 3a504950     mH20....SET PIP:
   13998:	6d636925 00303248 20544553 3a453a49     %icmH20.SET I:E:
   139a8:	2e692520 313a6925 00000000 4f525245      %i.%i:1....ERRO
   139b8:	003a5352 574f4c46 00000000 53455250     RS:.FLOW....PRES
   139c8:	534e5320 00000000 20544f4d 4c494146      SNS....MOT FAIL
   139d8:	00000000 20544f4d 504d4554 00000000     ....MOT TEMP....
   139e8:	54544553 414f4c20 00000044 49522050     SETT LOAD...P RI
   139f8:	00004553 00009098 0000904e 0000905e     SE......N...^...
   13a08:	0000906e 0000907e 544e4f43 004c4f52     n...~...CONTROL.
   13a18:	0000a15c 0000a164 0000a16c 0000a174     \...d...l...t...
   13a28:	0000a17c 0000a2b6 0000a1b0 0000a1ee     |...............
   13a38:	0000a22c 0000a26a 45524353 545f4e45     ,...j...SCREEN_T
   13a48:	00004d49 45524353 435f4e45 00004748     IM..SCREEN_CHG..
   13a58:	5f433249 454d4954 0054554f 00494d48     I2C_TIMEOUT.HMI.
   13a68:	00433249 494e4f4d 00524f54 41444954     I2C.MONITOR.TIDA
   13a78:	0000564c 574f4c46 00000053 534e4553     LV..FLOWS...SENS
   13a88:	0000524f 454c4449 00000000 09632509     OR..IDLE.....%c.
   13a98:	25097525 75250975 00000a0d 20726d54     %u.%u.%u....Tmr 
   13aa8:	00637653 51726d54 00000000 0000ccd0     Svc.TmrQ........
   13ab8:	0000ccd0 0000ccd0 0000cd5e 0000cd28     ........^...(...
   13ac8:	0000cd52 0000ccd0 0000ccd0 0000cd5e     R...........^...
   13ad8:	0000cd28 42000800 42000c00 42001000     (......B...B...B
   13ae8:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   13af8:	00000e0d 0000eb32 0000ebac 0000ebac     ....2...........
   13b08:	0000eb50 0000eb4a 0000eb56 0000eb38     P...J...V...8...
   13b18:	0000eb5c 0000eb92 0000eec0 0000ef10     \...............
   13b28:	0000ef10 0000ef0c 0000eeb2 0000eed2     ................
   13b38:	0000eea2 0000eee4 0000eef6 0000ef5e     ............^...
   13b48:	0000ef8c 0000ef8c 0000ef88 0000ef58     ............X...
   13b58:	0000ef64 0000ef52 0000ef6a 0000ef70     d...R...j...p...
   13b68:	00010880 00010850 00010862 000107a4     ....P...b.......
   13b78:	00010862 00010846 00010862 000107a4     b...F...b.......
   13b88:	00010850 00010850 00010846 000107a4     P...P...F.......
   13b98:	000107ac 000107ac 000107ac 00010868     ............h...
   13ba8:	00010850 00010850 00010824 00010908     P...P...$.......
   13bb8:	00010824 00010846 00010824 00010908     $...F...$.......
   13bc8:	00010850 00010850 00010846 00010908     P...P...F.......
   13bd8:	000107ac 000107ac 000107ac 00010912     ................
   13be8:	00010c00 00010b50 00010b50 00010b4e     ....P...P...N...
   13bf8:	00010bf2 00010bf2 00010be8 00010b4e     ............N...
   13c08:	00010bf2 00010be8 00010bf2 00010b4e     ............N...
   13c18:	00010bf8 00010bf8 00010bf8 00010c88     ................
   13c28:	00011944 00011926 000118e0 000117fe     D...&...........
   13c38:	000118e0 00011918 000118e0 000117fe     ................
   13c48:	00011926 00011926 00011918 000117fe     &...&...........
   13c58:	000117f6 000117f6 000117f6 00011b5c     ............\...
   13c68:	00011fa4 00011e64 00011e64 00011e60     ....d...d...`...
   13c78:	00011f7c 00011f7c 00011f6e 00011e60     |...|...n...`...
   13c88:	00011f7c 00011f6e 00011f7c 00011e60     |...n...|...`...
   13c98:	00011f84 00011f84 00011f84 00012188     .............!..
   13ca8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   13cb8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   13cc8:	31300046 35343332 39383736 64636261     F.0123456789abcd
   13cd8:	00006665                                ef..

00013cdc <_init>:
   13cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cde:	46c0      	nop			; (mov r8, r8)
   13ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13ce2:	bc08      	pop	{r3}
   13ce4:	469e      	mov	lr, r3
   13ce6:	4770      	bx	lr

00013ce8 <__init_array_start>:
   13ce8:	000000dd 	.word	0x000000dd

00013cec <_fini>:
   13cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cee:	46c0      	nop			; (mov r8, r8)
   13cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13cf2:	bc08      	pop	{r3}
   13cf4:	469e      	mov	lr, r3
   13cf6:	4770      	bx	lr

00013cf8 <__fini_array_start>:
   13cf8:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <udi_api_cdc_comm>:
2000000c:	018d 0000 0421 0000 0479 0000 0551 0000     ....!...y...Q...
2000001c:	0000 0000                                   ....

20000020 <udi_api_cdc_data>:
20000020:	0309 0000 043d 0000 0545 0000 0551 0000     ....=...E...Q...
20000030:	055d 0000                                   ]...

20000034 <udc_device_desc>:
20000034:	0112 0201 0002 4000 03eb 2404 0100 0000     .......@...$....
20000044:	0100 0000                                   ....

20000048 <udc_device_lpm>:
20000048:	0f05 000c 0701 0210 0002 0000               ............

20000054 <udc_desc_fs>:
20000054:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
20000064:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000074:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000084:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000094:	0040 0000                                   @...

20000098 <udi_apis>:
20000098:	000c 2000 0020 2000                         ...  .. 

200000a0 <udc_config_fs>:
200000a0:	0054 2000 0098 2000                         T.. ... 

200000a8 <udc_config>:
200000a8:	0034 2000 00a0 2000 0048 2000               4.. ... H.. 

200000b4 <udc_string_desc_languageid>:
200000b4:	0304 0409                                   ....

200000b8 <udc_string_desc>:
200000b8:	0300 0000                                   ....

200000bc <uxCriticalNesting>:
200000bc:	aaaa aaaa                                   ....

200000c0 <sht75_crc_table>:
200000c0:	3100 5362 f5c4 97a6 88b9 eadb 4c7d 2e1f     .1bS........}L..
200000d0:	7243 1021 b687 d4e5 cbfa a998 0f3e 6d5c     Cr!.........>.\m
200000e0:	b786 d5e4 7342 1120 0e3f 6c5d cafb a899     ....Bs .?.]l....
200000f0:	f4c5 96a7 3001 5263 4d7c 2f1e 89b8 ebda     .....0cR|M./....
20000100:	0c3d 6e5f c8f9 aa9b b584 d7e6 7140 1322     =._n........@q".
20000110:	4f7e 2d1c 8bba e9d8 f6c7 94a5 3203 5061     ~O.-.........2aP
20000120:	8abb e8d9 4e7f 2c1d 3302 5160 f7c6 95a4     .....N.,.3`Q....
20000130:	c9f8 ab9a 0d3c 6f5e 7041 1223 b485 d6e7     ....<.^oAp#.....
20000140:	4b7a 2918 8fbe eddc f2c3 90a1 3607 5465     zK.).........6eT
20000150:	0839 6a5b ccfd ae9f b180 d3e2 7544 1726     9.[j........Du&.
20000160:	cdfc af9e 0938 6b5a 7445 1627 b081 d2e3     ....8.ZkEt'.....
20000170:	8ebf ecdd 4a7b 2819 3706 5564 f3c2 91a0     ....{J.(.7dU....
20000180:	7647 1425 b283 d0e1 cffe ad9c 0b3a 6958     Gv%.........:.Xi
20000190:	3504 5766 f1c0 93a2 8cbd eedf 4879 2a1b     .5fW........yH.*
200001a0:	f0c1 92a3 3405 5667 4978 2b1a 8dbc efde     .....4gVxI.+....
200001b0:	b382 d1e0 7746 1524 0a3b 6859 ceff ac9d     ....Fw$.;.Yh....

200001c0 <flow_request_to_send.15101>:
200001c0:	8484                                             .

200001c1 <flow_request_to_send.15105>:
200001c1:	0084 1000                                        ...

200001c4 <intro_screen>:
200001c4:	3910 0001                                   .9..

200001c8 <on_screen_buffer.15177>:
200001c8:	41fe 0000                                   .A..

200001cc <cursor_set.15214>:
200001cc:	45fe 0100                                        .E.

200001cf <settings_changed>:
200001cf:	0101                                             .

200001d0 <display_main_page>:
200001d0:	0101                                             .

200001d1 <rising.15116>:
200001d1:	0101                                             .

200001d2 <g_interrupt_enabled>:
200001d2:	0001                                        ..

200001d4 <_impure_ptr>:
200001d4:	01d8 2000                                   ... 

200001d8 <impure_data>:
	...
