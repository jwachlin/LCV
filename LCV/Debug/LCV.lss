
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de84  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000de84  0000de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000184  20000000  0000de8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000053ac  20000184  0000e010  00020184  2**2
                  ALLOC
  4 .stack        00002000  20005530  000133bc  00020184  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   00072cc4  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007ac2  00000000  00000000  00092ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007507  00000000  00000000  0009a98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001520  00000000  00000000  000a1e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001290  00000000  00000000  000a33b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023eb0  00000000  00000000  000a4642  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002272e  00000000  00000000  000c84f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00094ced  00000000  00000000  000eac20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004ee8  00000000  00000000  0017f910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 75 00 20 65 9f 00 00 a9 a1 00 00 a3 a1 00 00     0u. e...........
	...
      2c:	95 1e 00 00 00 00 00 00 00 00 00 00 c1 1f 00 00     ................
      3c:	09 20 00 00 5d a0 00 00 5d a0 00 00 35 77 00 00     . ..]...]...5w..
      4c:	5d a0 00 00 5d a0 00 00 5d a0 00 00 5d a0 00 00     ]...]...]...]...
      5c:	5d a0 00 00 5d a0 00 00 4d 88 00 00 65 88 00 00     ]...]...M...e...
      6c:	7d 88 00 00 95 88 00 00 ad 88 00 00 c5 88 00 00     }...............
      7c:	5d a0 00 00 5d a0 00 00 5d a0 00 00 5d a0 00 00     ]...]...]...]...
      8c:	5d a0 00 00 5d a0 00 00 00 00 00 00 00 00 00 00     ]...]...........
      9c:	55 0b 00 00 5d a0 00 00 3d 11 00 00 5d a0 00 00     U...]...=...]...
      ac:	5d a0 00 00 00 00 00 00                             ].......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000184 	.word	0x20000184
      d4:	00000000 	.word	0x00000000
      d8:	0000de8c 	.word	0x0000de8c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000188 	.word	0x20000188
     108:	0000de8c 	.word	0x0000de8c
     10c:	0000de8c 	.word	0x0000de8c
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
}
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}
	...

0000012c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     12c:	b580      	push	{r7, lr}
     12e:	b082      	sub	sp, #8
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     13a:	1dfb      	adds	r3, r7, #7
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b01      	cmp	r3, #1
     140:	d00a      	beq.n	158 <system_apb_clock_set_mask+0x2c>
     142:	2b02      	cmp	r3, #2
     144:	d00f      	beq.n	166 <system_apb_clock_set_mask+0x3a>
     146:	2b00      	cmp	r3, #0
     148:	d114      	bne.n	174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <system_apb_clock_set_mask+0x58>)
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <system_apb_clock_set_mask+0x58>)
     14e:	6991      	ldr	r1, [r2, #24]
     150:	683a      	ldr	r2, [r7, #0]
     152:	430a      	orrs	r2, r1
     154:	619a      	str	r2, [r3, #24]
			break;
     156:	e00f      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     158:	4b0a      	ldr	r3, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <system_apb_clock_set_mask+0x58>)
     15c:	69d1      	ldr	r1, [r2, #28]
     15e:	683a      	ldr	r2, [r7, #0]
     160:	430a      	orrs	r2, r1
     162:	61da      	str	r2, [r3, #28]
			break;
     164:	e008      	b.n	178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     166:	4b07      	ldr	r3, [pc, #28]	; (184 <system_apb_clock_set_mask+0x58>)
     168:	4a06      	ldr	r2, [pc, #24]	; (184 <system_apb_clock_set_mask+0x58>)
     16a:	6a11      	ldr	r1, [r2, #32]
     16c:	683a      	ldr	r2, [r7, #0]
     16e:	430a      	orrs	r2, r1
     170:	621a      	str	r2, [r3, #32]
			break;
     172:	e001      	b.n	178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     174:	2317      	movs	r3, #23
     176:	e000      	b.n	17a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	0018      	movs	r0, r3
     17c:	46bd      	mov	sp, r7
     17e:	b002      	add	sp, #8
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	40000400 	.word	0x40000400

00000188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     188:	b580      	push	{r7, lr}
     18a:	b082      	sub	sp, #8
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     190:	687b      	ldr	r3, [r7, #4]
     192:	2280      	movs	r2, #128	; 0x80
     194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2201      	movs	r2, #1
     1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	70da      	strb	r2, [r3, #3]
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	0002      	movs	r2, r0
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     1bc:	1dfb      	adds	r3, r7, #7
     1be:	781b      	ldrb	r3, [r3, #0]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d002      	beq.n	1ca <system_voltage_reference_enable+0x1a>
     1c4:	2b01      	cmp	r3, #1
     1c6:	d007      	beq.n	1d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     1c8:	e00d      	b.n	1e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <system_voltage_reference_enable+0x3c>)
     1cc:	4a07      	ldr	r2, [pc, #28]	; (1ec <system_voltage_reference_enable+0x3c>)
     1ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1d0:	2102      	movs	r1, #2
     1d2:	430a      	orrs	r2, r1
     1d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1d6:	e006      	b.n	1e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1da:	4a04      	ldr	r2, [pc, #16]	; (1ec <system_voltage_reference_enable+0x3c>)
     1dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1de:	2104      	movs	r1, #4
     1e0:	430a      	orrs	r2, r1
     1e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     1e4:	46c0      	nop			; (mov r8, r8)
	}
}
     1e6:	46bd      	mov	sp, r7
     1e8:	b002      	add	sp, #8
     1ea:	bd80      	pop	{r7, pc}
     1ec:	40000800 	.word	0x40000800

000001f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b084      	sub	sp, #16
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1fe:	68fb      	ldr	r3, [r7, #12]
     200:	7e5b      	ldrb	r3, [r3, #25]
     202:	b2db      	uxtb	r3, r3
     204:	b25b      	sxtb	r3, r3
     206:	2b00      	cmp	r3, #0
     208:	da01      	bge.n	20e <adc_is_syncing+0x1e>
		return true;
     20a:	2301      	movs	r3, #1
     20c:	e000      	b.n	210 <adc_is_syncing+0x20>
	}

	return false;
     20e:	2300      	movs	r3, #0
}
     210:	0018      	movs	r0, r3
     212:	46bd      	mov	sp, r7
     214:	b004      	add	sp, #16
     216:	bd80      	pop	{r7, pc}

00000218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     220:	687b      	ldr	r3, [r7, #4]
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2200      	movs	r2, #0
     23c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2200      	movs	r2, #0
     254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     256:	687b      	ldr	r3, [r7, #4]
     258:	22c0      	movs	r2, #192	; 0xc0
     25a:	0152      	lsls	r2, r2, #5
     25c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2200      	movs	r2, #0
     262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     276:	687b      	ldr	r3, [r7, #4]
     278:	2200      	movs	r2, #0
     27a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	222a      	movs	r2, #42	; 0x2a
     280:	2100      	movs	r1, #0
     282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2224      	movs	r2, #36	; 0x24
     294:	2100      	movs	r1, #0
     296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	222b      	movs	r2, #43	; 0x2b
     2ae:	2100      	movs	r1, #0
     2b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	222c      	movs	r2, #44	; 0x2c
     2b6:	2100      	movs	r1, #0
     2b8:	5499      	strb	r1, [r3, r2]
}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	46bd      	mov	sp, r7
     2be:	b002      	add	sp, #8
     2c0:	bd80      	pop	{r7, pc}
	...

000002c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b098      	sub	sp, #96	; 0x60
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2cc:	230c      	movs	r3, #12
     2ce:	18fa      	adds	r2, r7, r3
     2d0:	4b15      	ldr	r3, [pc, #84]	; (328 <_adc_configure_ain_pin+0x64>)
     2d2:	0010      	movs	r0, r2
     2d4:	0019      	movs	r1, r3
     2d6:	2350      	movs	r3, #80	; 0x50
     2d8:	001a      	movs	r2, r3
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <_adc_configure_ain_pin+0x68>)
     2dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     2de:	4b14      	ldr	r3, [pc, #80]	; (330 <_adc_configure_ain_pin+0x6c>)
     2e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2b13      	cmp	r3, #19
     2e6:	d81a      	bhi.n	31e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2e8:	230c      	movs	r3, #12
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	0092      	lsls	r2, r2, #2
     2f0:	58d3      	ldr	r3, [r2, r3]
     2f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	0018      	movs	r0, r3
     2fa:	4b0e      	ldr	r3, [pc, #56]	; (334 <_adc_configure_ain_pin+0x70>)
     2fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2fe:	2308      	movs	r3, #8
     300:	18fb      	adds	r3, r7, r3
     302:	2200      	movs	r2, #0
     304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     306:	2308      	movs	r3, #8
     308:	18fb      	adds	r3, r7, r3
     30a:	2201      	movs	r2, #1
     30c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     310:	b2db      	uxtb	r3, r3
     312:	2208      	movs	r2, #8
     314:	18ba      	adds	r2, r7, r2
     316:	0011      	movs	r1, r2
     318:	0018      	movs	r0, r3
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <_adc_configure_ain_pin+0x74>)
     31c:	4798      	blx	r3
	}
}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	46bd      	mov	sp, r7
     322:	b018      	add	sp, #96	; 0x60
     324:	bd80      	pop	{r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	0000d984 	.word	0x0000d984
     32c:	0000d0bd 	.word	0x0000d0bd
     330:	0000ffff 	.word	0x0000ffff
     334:	00000189 	.word	0x00000189
     338:	00009edd 	.word	0x00009edd

0000033c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     33c:	b5f0      	push	{r4, r5, r6, r7, lr}
     33e:	b089      	sub	sp, #36	; 0x24
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
     344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     346:	231f      	movs	r3, #31
     348:	18fb      	adds	r3, r7, r3
     34a:	2200      	movs	r2, #0
     34c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     34e:	2310      	movs	r3, #16
     350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     352:	2317      	movs	r3, #23
     354:	18fb      	adds	r3, r7, r3
     356:	2200      	movs	r2, #0
     358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     360:	230c      	movs	r3, #12
     362:	18fb      	adds	r3, r7, r3
     364:	0018      	movs	r0, r3
     366:	4bce      	ldr	r3, [pc, #824]	; (6a0 <_adc_set_config+0x364>)
     368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     36a:	683b      	ldr	r3, [r7, #0]
     36c:	781a      	ldrb	r2, [r3, #0]
     36e:	230c      	movs	r3, #12
     370:	18fb      	adds	r3, r7, r3
     372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     374:	230c      	movs	r3, #12
     376:	18fb      	adds	r3, r7, r3
     378:	0019      	movs	r1, r3
     37a:	201e      	movs	r0, #30
     37c:	4bc9      	ldr	r3, [pc, #804]	; (6a4 <_adc_set_config+0x368>)
     37e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     380:	201e      	movs	r0, #30
     382:	4bc9      	ldr	r3, [pc, #804]	; (6a8 <_adc_set_config+0x36c>)
     384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     386:	683b      	ldr	r3, [r7, #0]
     388:	222c      	movs	r2, #44	; 0x2c
     38a:	5c9b      	ldrb	r3, [r3, r2]
     38c:	2b00      	cmp	r3, #0
     38e:	d040      	beq.n	412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     390:	2316      	movs	r3, #22
     392:	18fb      	adds	r3, r7, r3
     394:	683a      	ldr	r2, [r7, #0]
     396:	212b      	movs	r1, #43	; 0x2b
     398:	5c52      	ldrb	r2, [r2, r1]
     39a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     3a0:	2315      	movs	r3, #21
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	2216      	movs	r2, #22
     3a6:	18ba      	adds	r2, r7, r2
     3a8:	7812      	ldrb	r2, [r2, #0]
     3aa:	188a      	adds	r2, r1, r2
     3ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	222c      	movs	r2, #44	; 0x2c
     3b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     3b4:	230f      	movs	r3, #15
     3b6:	18fb      	adds	r3, r7, r3
     3b8:	2215      	movs	r2, #21
     3ba:	18ba      	adds	r2, r7, r2
     3bc:	7812      	ldrb	r2, [r2, #0]
     3be:	188a      	adds	r2, r1, r2
     3c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     3c2:	e018      	b.n	3f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3c4:	2316      	movs	r3, #22
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	220f      	movs	r2, #15
     3cc:	4013      	ands	r3, r2
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	7b12      	ldrb	r2, [r2, #12]
     3d2:	189b      	adds	r3, r3, r2
     3d4:	0018      	movs	r0, r3
     3d6:	4bb5      	ldr	r3, [pc, #724]	; (6ac <_adc_set_config+0x370>)
     3d8:	4798      	blx	r3
			start_pin++;
     3da:	2315      	movs	r3, #21
     3dc:	18fb      	adds	r3, r7, r3
     3de:	781a      	ldrb	r2, [r3, #0]
     3e0:	2315      	movs	r3, #21
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	3201      	adds	r2, #1
     3e6:	701a      	strb	r2, [r3, #0]
			offset++;
     3e8:	2316      	movs	r3, #22
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	781a      	ldrb	r2, [r3, #0]
     3ee:	2316      	movs	r3, #22
     3f0:	18fb      	adds	r3, r7, r3
     3f2:	3201      	adds	r2, #1
     3f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     3f6:	2315      	movs	r3, #21
     3f8:	18fa      	adds	r2, r7, r3
     3fa:	230f      	movs	r3, #15
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	7812      	ldrb	r2, [r2, #0]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	429a      	cmp	r2, r3
     404:	d3de      	bcc.n	3c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     406:	683b      	ldr	r3, [r7, #0]
     408:	89db      	ldrh	r3, [r3, #14]
     40a:	0018      	movs	r0, r3
     40c:	4ba7      	ldr	r3, [pc, #668]	; (6ac <_adc_set_config+0x370>)
     40e:	4798      	blx	r3
     410:	e009      	b.n	426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     412:	683b      	ldr	r3, [r7, #0]
     414:	7b1b      	ldrb	r3, [r3, #12]
     416:	0018      	movs	r0, r3
     418:	4ba4      	ldr	r3, [pc, #656]	; (6ac <_adc_set_config+0x370>)
     41a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     41c:	683b      	ldr	r3, [r7, #0]
     41e:	89db      	ldrh	r3, [r3, #14]
     420:	0018      	movs	r0, r3
     422:	4ba2      	ldr	r3, [pc, #648]	; (6ac <_adc_set_config+0x370>)
     424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     426:	683b      	ldr	r3, [r7, #0]
     428:	7d5b      	ldrb	r3, [r3, #21]
     42a:	009b      	lsls	r3, r3, #2
     42c:	b2da      	uxtb	r2, r3
     42e:	693b      	ldr	r3, [r7, #16]
     430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     432:	683b      	ldr	r3, [r7, #0]
     434:	7d9b      	ldrb	r3, [r3, #22]
     436:	01db      	lsls	r3, r3, #7
     438:	b25a      	sxtb	r2, r3
			(config->reference);
     43a:	683b      	ldr	r3, [r7, #0]
     43c:	785b      	ldrb	r3, [r3, #1]
     43e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     440:	4313      	orrs	r3, r2
     442:	b25b      	sxtb	r3, r3
     444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     446:	693b      	ldr	r3, [r7, #16]
     448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     44a:	683b      	ldr	r3, [r7, #0]
     44c:	791b      	ldrb	r3, [r3, #4]
     44e:	2b34      	cmp	r3, #52	; 0x34
     450:	d846      	bhi.n	4e0 <_adc_set_config+0x1a4>
     452:	009a      	lsls	r2, r3, #2
     454:	4b96      	ldr	r3, [pc, #600]	; (6b0 <_adc_set_config+0x374>)
     456:	18d3      	adds	r3, r2, r3
     458:	681b      	ldr	r3, [r3, #0]
     45a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     45c:	231f      	movs	r3, #31
     45e:	18fb      	adds	r3, r7, r3
     460:	683a      	ldr	r2, [r7, #0]
     462:	7c52      	ldrb	r2, [r2, #17]
     464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     466:	2317      	movs	r3, #23
     468:	18fb      	adds	r3, r7, r3
     46a:	683a      	ldr	r2, [r7, #0]
     46c:	7c12      	ldrb	r2, [r2, #16]
     46e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     470:	2310      	movs	r3, #16
     472:	61bb      	str	r3, [r7, #24]
		break;
     474:	e036      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     476:	231f      	movs	r3, #31
     478:	18fb      	adds	r3, r7, r3
     47a:	2201      	movs	r2, #1
     47c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     47e:	2317      	movs	r3, #23
     480:	18fb      	adds	r3, r7, r3
     482:	2202      	movs	r2, #2
     484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     486:	2310      	movs	r3, #16
     488:	61bb      	str	r3, [r7, #24]
		break;
     48a:	e02b      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     48c:	231f      	movs	r3, #31
     48e:	18fb      	adds	r3, r7, r3
     490:	2202      	movs	r2, #2
     492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     494:	2317      	movs	r3, #23
     496:	18fb      	adds	r3, r7, r3
     498:	2204      	movs	r2, #4
     49a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     49c:	2310      	movs	r3, #16
     49e:	61bb      	str	r3, [r7, #24]
		break;
     4a0:	e020      	b.n	4e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4a2:	231f      	movs	r3, #31
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	2201      	movs	r2, #1
     4a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4aa:	2317      	movs	r3, #23
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	2206      	movs	r2, #6
     4b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4b2:	2310      	movs	r3, #16
     4b4:	61bb      	str	r3, [r7, #24]
		break;
     4b6:	e015      	b.n	4e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4b8:	231f      	movs	r3, #31
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	2200      	movs	r2, #0
     4be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4c0:	2317      	movs	r3, #23
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	2208      	movs	r2, #8
     4c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c8:	2310      	movs	r3, #16
     4ca:	61bb      	str	r3, [r7, #24]
		break;
     4cc:	e00a      	b.n	4e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4ce:	2330      	movs	r3, #48	; 0x30
     4d0:	61bb      	str	r3, [r7, #24]
		break;
     4d2:	e007      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4d4:	2320      	movs	r3, #32
     4d6:	61bb      	str	r3, [r7, #24]
		break;
     4d8:	e004      	b.n	4e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4da:	2300      	movs	r3, #0
     4dc:	61bb      	str	r3, [r7, #24]
		break;
     4de:	e001      	b.n	4e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     4e0:	2317      	movs	r3, #23
     4e2:	e1ae      	b.n	842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4e4:	231f      	movs	r3, #31
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	011b      	lsls	r3, r3, #4
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2270      	movs	r2, #112	; 0x70
     4f0:	4013      	ands	r3, r2
     4f2:	b2da      	uxtb	r2, r3
     4f4:	2317      	movs	r3, #23
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	4313      	orrs	r3, r2
     4fc:	b2da      	uxtb	r2, r3
     4fe:	693b      	ldr	r3, [r7, #16]
     500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     502:	683b      	ldr	r3, [r7, #0]
     504:	7ddb      	ldrb	r3, [r3, #23]
     506:	2b3f      	cmp	r3, #63	; 0x3f
     508:	d901      	bls.n	50e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     50a:	2317      	movs	r3, #23
     50c:	e199      	b.n	842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     50e:	683b      	ldr	r3, [r7, #0]
     510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     512:	693b      	ldr	r3, [r7, #16]
     514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     516:	46c0      	nop			; (mov r8, r8)
     518:	687b      	ldr	r3, [r7, #4]
     51a:	0018      	movs	r0, r3
     51c:	4b65      	ldr	r3, [pc, #404]	; (6b4 <_adc_set_config+0x378>)
     51e:	4798      	blx	r3
     520:	1e03      	subs	r3, r0, #0
     522:	d1f9      	bne.n	518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     524:	683b      	ldr	r3, [r7, #0]
     526:	885a      	ldrh	r2, [r3, #2]
     528:	69bb      	ldr	r3, [r7, #24]
     52a:	b29b      	uxth	r3, r3
     52c:	4313      	orrs	r3, r2
     52e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     530:	683b      	ldr	r3, [r7, #0]
     532:	2124      	movs	r1, #36	; 0x24
     534:	5c5b      	ldrb	r3, [r3, r1]
     536:	b29b      	uxth	r3, r3
     538:	00db      	lsls	r3, r3, #3
     53a:	b29b      	uxth	r3, r3
			resolution |
     53c:	4313      	orrs	r3, r2
     53e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     540:	683b      	ldr	r3, [r7, #0]
     542:	7d1b      	ldrb	r3, [r3, #20]
     544:	b29b      	uxth	r3, r3
     546:	009b      	lsls	r3, r3, #2
     548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     54a:	4313      	orrs	r3, r2
     54c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     54e:	683b      	ldr	r3, [r7, #0]
     550:	7c9b      	ldrb	r3, [r3, #18]
     552:	b29b      	uxth	r3, r3
     554:	18db      	adds	r3, r3, r3
     556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     558:	4313      	orrs	r3, r2
     55a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     55c:	683b      	ldr	r3, [r7, #0]
     55e:	7cdb      	ldrb	r3, [r3, #19]
     560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     562:	4313      	orrs	r3, r2
     564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     566:	693b      	ldr	r3, [r7, #16]
     568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	7e1b      	ldrb	r3, [r3, #24]
     56e:	2b00      	cmp	r3, #0
     570:	d100      	bne.n	574 <_adc_set_config+0x238>
     572:	e0c4      	b.n	6fe <_adc_set_config+0x3c2>
		switch (resolution) {
     574:	69bb      	ldr	r3, [r7, #24]
     576:	2b10      	cmp	r3, #16
     578:	d100      	bne.n	57c <_adc_set_config+0x240>
     57a:	e076      	b.n	66a <_adc_set_config+0x32e>
     57c:	d802      	bhi.n	584 <_adc_set_config+0x248>
     57e:	2b00      	cmp	r3, #0
     580:	d04d      	beq.n	61e <_adc_set_config+0x2e2>
     582:	e0bc      	b.n	6fe <_adc_set_config+0x3c2>
     584:	2b20      	cmp	r3, #32
     586:	d023      	beq.n	5d0 <_adc_set_config+0x294>
     588:	2b30      	cmp	r3, #48	; 0x30
     58a:	d000      	beq.n	58e <_adc_set_config+0x252>
     58c:	e0b7      	b.n	6fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     58e:	683b      	ldr	r3, [r7, #0]
     590:	7cdb      	ldrb	r3, [r3, #19]
     592:	2b00      	cmp	r3, #0
     594:	d011      	beq.n	5ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     596:	683b      	ldr	r3, [r7, #0]
     598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     59a:	2b7f      	cmp	r3, #127	; 0x7f
     59c:	dc0b      	bgt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     5a2:	3380      	adds	r3, #128	; 0x80
     5a4:	db07      	blt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     5a6:	683b      	ldr	r3, [r7, #0]
     5a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     5aa:	2b7f      	cmp	r3, #127	; 0x7f
     5ac:	dc03      	bgt.n	5b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     5ae:	683b      	ldr	r3, [r7, #0]
     5b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     5b2:	3380      	adds	r3, #128	; 0x80
     5b4:	da01      	bge.n	5ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5b6:	2317      	movs	r3, #23
     5b8:	e143      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	69db      	ldr	r3, [r3, #28]
     5be:	2bff      	cmp	r3, #255	; 0xff
     5c0:	dc04      	bgt.n	5cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     5c2:	683b      	ldr	r3, [r7, #0]
     5c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     5c6:	2bff      	cmp	r3, #255	; 0xff
     5c8:	dc00      	bgt.n	5cc <_adc_set_config+0x290>
     5ca:	e091      	b.n	6f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5cc:	2317      	movs	r3, #23
     5ce:	e138      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5d0:	683b      	ldr	r3, [r7, #0]
     5d2:	7cdb      	ldrb	r3, [r3, #19]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d015      	beq.n	604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     5d8:	683b      	ldr	r3, [r7, #0]
     5da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     5dc:	4a36      	ldr	r2, [pc, #216]	; (6b8 <_adc_set_config+0x37c>)
     5de:	4293      	cmp	r3, r2
     5e0:	dc0e      	bgt.n	600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     5e6:	4a35      	ldr	r2, [pc, #212]	; (6bc <_adc_set_config+0x380>)
     5e8:	4293      	cmp	r3, r2
     5ea:	db09      	blt.n	600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     5f0:	4a31      	ldr	r2, [pc, #196]	; (6b8 <_adc_set_config+0x37c>)
     5f2:	4293      	cmp	r3, r2
     5f4:	dc04      	bgt.n	600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     5f6:	683b      	ldr	r3, [r7, #0]
     5f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     5fa:	4a30      	ldr	r2, [pc, #192]	; (6bc <_adc_set_config+0x380>)
     5fc:	4293      	cmp	r3, r2
     5fe:	da01      	bge.n	604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
     602:	e11e      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     604:	683b      	ldr	r3, [r7, #0]
     606:	69db      	ldr	r3, [r3, #28]
     608:	4a2d      	ldr	r2, [pc, #180]	; (6c0 <_adc_set_config+0x384>)
     60a:	4293      	cmp	r3, r2
     60c:	dc05      	bgt.n	61a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     60e:	683b      	ldr	r3, [r7, #0]
     610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     612:	4a2b      	ldr	r2, [pc, #172]	; (6c0 <_adc_set_config+0x384>)
     614:	4293      	cmp	r3, r2
     616:	dc00      	bgt.n	61a <_adc_set_config+0x2de>
     618:	e06c      	b.n	6f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     61a:	2317      	movs	r3, #23
     61c:	e111      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     61e:	683b      	ldr	r3, [r7, #0]
     620:	7cdb      	ldrb	r3, [r3, #19]
     622:	2b00      	cmp	r3, #0
     624:	d015      	beq.n	652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     626:	683b      	ldr	r3, [r7, #0]
     628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     62a:	4a26      	ldr	r2, [pc, #152]	; (6c4 <_adc_set_config+0x388>)
     62c:	4293      	cmp	r3, r2
     62e:	dc0e      	bgt.n	64e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     630:	683b      	ldr	r3, [r7, #0]
     632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     634:	4a24      	ldr	r2, [pc, #144]	; (6c8 <_adc_set_config+0x38c>)
     636:	4293      	cmp	r3, r2
     638:	db09      	blt.n	64e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     63e:	4a21      	ldr	r2, [pc, #132]	; (6c4 <_adc_set_config+0x388>)
     640:	4293      	cmp	r3, r2
     642:	dc04      	bgt.n	64e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     644:	683b      	ldr	r3, [r7, #0]
     646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     648:	4a1f      	ldr	r2, [pc, #124]	; (6c8 <_adc_set_config+0x38c>)
     64a:	4293      	cmp	r3, r2
     64c:	da01      	bge.n	652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     64e:	2317      	movs	r3, #23
     650:	e0f7      	b.n	842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     652:	683b      	ldr	r3, [r7, #0]
     654:	69db      	ldr	r3, [r3, #28]
     656:	4a1d      	ldr	r2, [pc, #116]	; (6cc <_adc_set_config+0x390>)
     658:	4293      	cmp	r3, r2
     65a:	dc04      	bgt.n	666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     65c:	683b      	ldr	r3, [r7, #0]
     65e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     660:	4a1a      	ldr	r2, [pc, #104]	; (6cc <_adc_set_config+0x390>)
     662:	4293      	cmp	r3, r2
     664:	dd48      	ble.n	6f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     666:	2317      	movs	r3, #23
     668:	e0eb      	b.n	842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	7cdb      	ldrb	r3, [r3, #19]
     66e:	2b00      	cmp	r3, #0
     670:	d032      	beq.n	6d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     672:	683b      	ldr	r3, [r7, #0]
     674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     676:	4a16      	ldr	r2, [pc, #88]	; (6d0 <_adc_set_config+0x394>)
     678:	4293      	cmp	r3, r2
     67a:	dc0e      	bgt.n	69a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     67c:	683b      	ldr	r3, [r7, #0]
     67e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     680:	4a14      	ldr	r2, [pc, #80]	; (6d4 <_adc_set_config+0x398>)
     682:	4293      	cmp	r3, r2
     684:	db09      	blt.n	69a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     686:	683b      	ldr	r3, [r7, #0]
     688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     68a:	4a11      	ldr	r2, [pc, #68]	; (6d0 <_adc_set_config+0x394>)
     68c:	4293      	cmp	r3, r2
     68e:	dc04      	bgt.n	69a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     690:	683b      	ldr	r3, [r7, #0]
     692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     694:	4a0f      	ldr	r2, [pc, #60]	; (6d4 <_adc_set_config+0x398>)
     696:	4293      	cmp	r3, r2
     698:	da1e      	bge.n	6d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     69a:	2317      	movs	r3, #23
     69c:	e0d1      	b.n	842 <_adc_set_config+0x506>
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00000115 	.word	0x00000115
     6a4:	00009ba9 	.word	0x00009ba9
     6a8:	00009bed 	.word	0x00009bed
     6ac:	000002c5 	.word	0x000002c5
     6b0:	0000d9d4 	.word	0x0000d9d4
     6b4:	000001f1 	.word	0x000001f1
     6b8:	000001ff 	.word	0x000001ff
     6bc:	fffffe00 	.word	0xfffffe00
     6c0:	000003ff 	.word	0x000003ff
     6c4:	000007ff 	.word	0x000007ff
     6c8:	fffff800 	.word	0xfffff800
     6cc:	00000fff 	.word	0x00000fff
     6d0:	00007fff 	.word	0x00007fff
     6d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     6d8:	683b      	ldr	r3, [r7, #0]
     6da:	69db      	ldr	r3, [r3, #28]
     6dc:	4a5b      	ldr	r2, [pc, #364]	; (84c <_adc_set_config+0x510>)
     6de:	4293      	cmp	r3, r2
     6e0:	dc04      	bgt.n	6ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     6e6:	4a59      	ldr	r2, [pc, #356]	; (84c <_adc_set_config+0x510>)
     6e8:	4293      	cmp	r3, r2
     6ea:	dd07      	ble.n	6fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6ec:	2317      	movs	r3, #23
     6ee:	e0a8      	b.n	842 <_adc_set_config+0x506>
			break;
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	e004      	b.n	6fe <_adc_set_config+0x3c2>
			break;
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	e002      	b.n	6fe <_adc_set_config+0x3c2>
			break;
     6f8:	46c0      	nop			; (mov r8, r8)
     6fa:	e000      	b.n	6fe <_adc_set_config+0x3c2>
			}
			break;
     6fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	687b      	ldr	r3, [r7, #4]
     702:	0018      	movs	r0, r3
     704:	4b52      	ldr	r3, [pc, #328]	; (850 <_adc_set_config+0x514>)
     706:	4798      	blx	r3
     708:	1e03      	subs	r3, r0, #0
     70a:	d1f9      	bne.n	700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	7e1a      	ldrb	r2, [r3, #24]
     710:	693b      	ldr	r3, [r7, #16]
     712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     714:	46c0      	nop			; (mov r8, r8)
     716:	687b      	ldr	r3, [r7, #4]
     718:	0018      	movs	r0, r3
     71a:	4b4d      	ldr	r3, [pc, #308]	; (850 <_adc_set_config+0x514>)
     71c:	4798      	blx	r3
     71e:	1e03      	subs	r3, r0, #0
     720:	d1f9      	bne.n	716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     722:	683b      	ldr	r3, [r7, #0]
     724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     726:	b29a      	uxth	r2, r3
     728:	693b      	ldr	r3, [r7, #16]
     72a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	0018      	movs	r0, r3
     732:	4b47      	ldr	r3, [pc, #284]	; (850 <_adc_set_config+0x514>)
     734:	4798      	blx	r3
     736:	1e03      	subs	r3, r0, #0
     738:	d1f9      	bne.n	72e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	6a1b      	ldr	r3, [r3, #32]
     73e:	b29a      	uxth	r2, r3
     740:	693b      	ldr	r3, [r7, #16]
     742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     744:	2314      	movs	r3, #20
     746:	18fb      	adds	r3, r7, r3
     748:	683a      	ldr	r2, [r7, #0]
     74a:	212c      	movs	r1, #44	; 0x2c
     74c:	5c52      	ldrb	r2, [r2, r1]
     74e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     750:	2314      	movs	r3, #20
     752:	18fb      	adds	r3, r7, r3
     754:	781b      	ldrb	r3, [r3, #0]
     756:	2b00      	cmp	r3, #0
     758:	d006      	beq.n	768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     75a:	2314      	movs	r3, #20
     75c:	18fb      	adds	r3, r7, r3
     75e:	781a      	ldrb	r2, [r3, #0]
     760:	2314      	movs	r3, #20
     762:	18fb      	adds	r3, r7, r3
     764:	3a01      	subs	r2, #1
     766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     768:	2314      	movs	r3, #20
     76a:	18fb      	adds	r3, r7, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2b0f      	cmp	r3, #15
     770:	d804      	bhi.n	77c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     772:	683b      	ldr	r3, [r7, #0]
     774:	222b      	movs	r2, #43	; 0x2b
     776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     778:	2b0f      	cmp	r3, #15
     77a:	d901      	bls.n	780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     77c:	2317      	movs	r3, #23
     77e:	e060      	b.n	842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     780:	46c0      	nop			; (mov r8, r8)
     782:	687b      	ldr	r3, [r7, #4]
     784:	0018      	movs	r0, r3
     786:	4b32      	ldr	r3, [pc, #200]	; (850 <_adc_set_config+0x514>)
     788:	4798      	blx	r3
     78a:	1e03      	subs	r3, r0, #0
     78c:	d1f9      	bne.n	782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     78e:	683b      	ldr	r3, [r7, #0]
     790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     792:	683a      	ldr	r2, [r7, #0]
     794:	212b      	movs	r1, #43	; 0x2b
     796:	5c52      	ldrb	r2, [r2, r1]
     798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     79a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     79c:	2214      	movs	r2, #20
     79e:	18ba      	adds	r2, r7, r2
     7a0:	7812      	ldrb	r2, [r2, #0]
     7a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     7a4:	4313      	orrs	r3, r2
			config->negative_input |
     7a6:	683a      	ldr	r2, [r7, #0]
     7a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7aa:	4313      	orrs	r3, r2
			config->positive_input;
     7ac:	683a      	ldr	r2, [r7, #0]
     7ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     7b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     7b2:	693b      	ldr	r3, [r7, #16]
     7b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	222a      	movs	r2, #42	; 0x2a
     7ba:	5c9a      	ldrb	r2, [r3, r2]
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7c0:	693b      	ldr	r3, [r7, #16]
     7c2:	220f      	movs	r2, #15
     7c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	2224      	movs	r2, #36	; 0x24
     7ca:	5c9b      	ldrb	r3, [r3, r2]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d01e      	beq.n	80e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7d0:	683b      	ldr	r3, [r7, #0]
     7d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     7d4:	4a1f      	ldr	r2, [pc, #124]	; (854 <_adc_set_config+0x518>)
     7d6:	4293      	cmp	r3, r2
     7d8:	d901      	bls.n	7de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     7da:	2317      	movs	r3, #23
     7dc:	e031      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     7e2:	693b      	ldr	r3, [r7, #16]
     7e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7e6:	683b      	ldr	r3, [r7, #0]
     7e8:	2228      	movs	r2, #40	; 0x28
     7ea:	5e9b      	ldrsh	r3, [r3, r2]
     7ec:	4a1a      	ldr	r2, [pc, #104]	; (858 <_adc_set_config+0x51c>)
     7ee:	4293      	cmp	r3, r2
     7f0:	dc05      	bgt.n	7fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	2228      	movs	r2, #40	; 0x28
     7f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     7f8:	4a18      	ldr	r2, [pc, #96]	; (85c <_adc_set_config+0x520>)
     7fa:	4293      	cmp	r3, r2
     7fc:	da01      	bge.n	802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     7fe:	2317      	movs	r3, #23
     800:	e01f      	b.n	842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     802:	683b      	ldr	r3, [r7, #0]
     804:	2228      	movs	r2, #40	; 0x28
     806:	5e9b      	ldrsh	r3, [r3, r2]
     808:	b29a      	uxth	r2, r3
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <_adc_set_config+0x524>)
     810:	681b      	ldr	r3, [r3, #0]
     812:	08db      	lsrs	r3, r3, #3
     814:	b29b      	uxth	r3, r3
     816:	021b      	lsls	r3, r3, #8
     818:	b29a      	uxth	r2, r3
     81a:	23e0      	movs	r3, #224	; 0xe0
     81c:	00db      	lsls	r3, r3, #3
     81e:	4013      	ands	r3, r2
     820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     822:	4b10      	ldr	r3, [pc, #64]	; (864 <_adc_set_config+0x528>)
     824:	685c      	ldr	r4, [r3, #4]
     826:	681b      	ldr	r3, [r3, #0]
     828:	0161      	lsls	r1, r4, #5
     82a:	0edd      	lsrs	r5, r3, #27
     82c:	430d      	orrs	r5, r1
     82e:	0ee6      	lsrs	r6, r4, #27
     830:	b2ab      	uxth	r3, r5
     832:	21ff      	movs	r1, #255	; 0xff
     834:	400b      	ands	r3, r1
     836:	b29b      	uxth	r3, r3
			) |
     838:	4313      	orrs	r3, r2
     83a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     83c:	693b      	ldr	r3, [r7, #16]
     83e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     840:	2300      	movs	r3, #0
}
     842:	0018      	movs	r0, r3
     844:	46bd      	mov	sp, r7
     846:	b009      	add	sp, #36	; 0x24
     848:	bdf0      	pop	{r4, r5, r6, r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	0000ffff 	.word	0x0000ffff
     850:	000001f1 	.word	0x000001f1
     854:	00000fff 	.word	0x00000fff
     858:	000007ff 	.word	0x000007ff
     85c:	fffff800 	.word	0xfffff800
     860:	00806024 	.word	0x00806024
     864:	00806020 	.word	0x00806020

00000868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     868:	b580      	push	{r7, lr}
     86a:	b086      	sub	sp, #24
     86c:	af00      	add	r7, sp, #0
     86e:	60f8      	str	r0, [r7, #12]
     870:	60b9      	str	r1, [r7, #8]
     872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     874:	68fb      	ldr	r3, [r7, #12]
     876:	68ba      	ldr	r2, [r7, #8]
     878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     87a:	2380      	movs	r3, #128	; 0x80
     87c:	025b      	lsls	r3, r3, #9
     87e:	0019      	movs	r1, r3
     880:	2002      	movs	r0, #2
     882:	4b32      	ldr	r3, [pc, #200]	; (94c <adc_init+0xe4>)
     884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     886:	68bb      	ldr	r3, [r7, #8]
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2301      	movs	r3, #1
     890:	4013      	ands	r3, r2
     892:	d001      	beq.n	898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     894:	2305      	movs	r3, #5
     896:	e055      	b.n	944 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     898:	68bb      	ldr	r3, [r7, #8]
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	b2db      	uxtb	r3, r3
     89e:	001a      	movs	r2, r3
     8a0:	2302      	movs	r3, #2
     8a2:	4013      	ands	r3, r2
     8a4:	d001      	beq.n	8aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     8a6:	231c      	movs	r3, #28
     8a8:	e04c      	b.n	944 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	785a      	ldrb	r2, [r3, #1]
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	791b      	ldrb	r3, [r3, #4]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d102      	bne.n	8c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     8ba:	2001      	movs	r0, #1
     8bc:	4b24      	ldr	r3, [pc, #144]	; (950 <adc_init+0xe8>)
     8be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8c0:	2317      	movs	r3, #23
     8c2:	18fb      	adds	r3, r7, r3
     8c4:	2200      	movs	r2, #0
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	e00e      	b.n	8e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
     8ca:	2317      	movs	r3, #23
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	3202      	adds	r2, #2
     8d4:	0092      	lsls	r2, r2, #2
     8d6:	2100      	movs	r1, #0
     8d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8da:	2317      	movs	r3, #23
     8dc:	18fb      	adds	r3, r7, r3
     8de:	781a      	ldrb	r2, [r3, #0]
     8e0:	2317      	movs	r3, #23
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	3201      	adds	r2, #1
     8e6:	701a      	strb	r2, [r3, #0]
     8e8:	2317      	movs	r3, #23
     8ea:	18fb      	adds	r3, r7, r3
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	2b02      	cmp	r3, #2
     8f0:	d9eb      	bls.n	8ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	2200      	movs	r2, #0
     8f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	2200      	movs	r2, #0
     8fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     8fe:	68fb      	ldr	r3, [r7, #12]
     900:	2200      	movs	r2, #0
     902:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     904:	68fb      	ldr	r3, [r7, #12]
     906:	2200      	movs	r2, #0
     908:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
     90a:	4b12      	ldr	r3, [pc, #72]	; (954 <adc_init+0xec>)
     90c:	68fa      	ldr	r2, [r7, #12]
     90e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     910:	687b      	ldr	r3, [r7, #4]
     912:	222a      	movs	r2, #42	; 0x2a
     914:	5c9b      	ldrb	r3, [r3, r2]
     916:	2b00      	cmp	r3, #0
     918:	d10a      	bne.n	930 <adc_init+0xc8>
			!config->freerunning) {
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	7d1b      	ldrb	r3, [r3, #20]
     91e:	2201      	movs	r2, #1
     920:	4053      	eors	r3, r2
     922:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     924:	2b00      	cmp	r3, #0
     926:	d003      	beq.n	930 <adc_init+0xc8>
		module_inst->software_trigger = true;
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	2201      	movs	r2, #1
     92c:	775a      	strb	r2, [r3, #29]
     92e:	e002      	b.n	936 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
     930:	68fb      	ldr	r3, [r7, #12]
     932:	2200      	movs	r2, #0
     934:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     936:	687a      	ldr	r2, [r7, #4]
     938:	68fb      	ldr	r3, [r7, #12]
     93a:	0011      	movs	r1, r2
     93c:	0018      	movs	r0, r3
     93e:	4b06      	ldr	r3, [pc, #24]	; (958 <adc_init+0xf0>)
     940:	4798      	blx	r3
     942:	0003      	movs	r3, r0
}
     944:	0018      	movs	r0, r3
     946:	46bd      	mov	sp, r7
     948:	b006      	add	sp, #24
     94a:	bd80      	pop	{r7, pc}
     94c:	0000012d 	.word	0x0000012d
     950:	000001b1 	.word	0x000001b1
     954:	200054c4 	.word	0x200054c4
     958:	0000033d 	.word	0x0000033d

0000095c <adc_is_syncing>:
{
     95c:	b580      	push	{r7, lr}
     95e:	b084      	sub	sp, #16
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     964:	687b      	ldr	r3, [r7, #4]
     966:	681b      	ldr	r3, [r3, #0]
     968:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	7e5b      	ldrb	r3, [r3, #25]
     96e:	b2db      	uxtb	r3, r3
     970:	b25b      	sxtb	r3, r3
     972:	2b00      	cmp	r3, #0
     974:	da01      	bge.n	97a <adc_is_syncing+0x1e>
		return true;
     976:	2301      	movs	r3, #1
     978:	e000      	b.n	97c <adc_is_syncing+0x20>
	return false;
     97a:	2300      	movs	r3, #0
}
     97c:	0018      	movs	r0, r3
     97e:	46bd      	mov	sp, r7
     980:	b004      	add	sp, #16
     982:	bd80      	pop	{r7, pc}

00000984 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     984:	b580      	push	{r7, lr}
     986:	b084      	sub	sp, #16
     988:	af00      	add	r7, sp, #0
     98a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	681b      	ldr	r3, [r3, #0]
     990:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     992:	46c0      	nop			; (mov r8, r8)
     994:	687b      	ldr	r3, [r7, #4]
     996:	0018      	movs	r0, r3
     998:	4b0b      	ldr	r3, [pc, #44]	; (9c8 <adc_start_conversion+0x44>)
     99a:	4798      	blx	r3
     99c:	1e03      	subs	r3, r0, #0
     99e:	d1f9      	bne.n	994 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9a0:	68fb      	ldr	r3, [r7, #12]
     9a2:	7b1b      	ldrb	r3, [r3, #12]
     9a4:	b2db      	uxtb	r3, r3
     9a6:	2202      	movs	r2, #2
     9a8:	4313      	orrs	r3, r2
     9aa:	b2da      	uxtb	r2, r3
     9ac:	68fb      	ldr	r3, [r7, #12]
     9ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	0018      	movs	r0, r3
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <adc_start_conversion+0x44>)
     9b8:	4798      	blx	r3
     9ba:	1e03      	subs	r3, r0, #0
     9bc:	d1f9      	bne.n	9b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	46bd      	mov	sp, r7
     9c2:	b004      	add	sp, #16
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000095d 	.word	0x0000095d

000009cc <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	000a      	movs	r2, r1
     9d6:	1cfb      	adds	r3, r7, #3
     9d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	1cfa      	adds	r2, r7, #3
     9e4:	7812      	ldrb	r2, [r2, #0]
     9e6:	75da      	strb	r2, [r3, #23]
}
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	46bd      	mov	sp, r7
     9ec:	b004      	add	sp, #16
     9ee:	bd80      	pop	{r7, pc}

000009f0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b084      	sub	sp, #16
     9f4:	af00      	add	r7, sp, #0
     9f6:	6078      	str	r0, [r7, #4]
     9f8:	000a      	movs	r2, r1
     9fa:	1cfb      	adds	r3, r7, #3
     9fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	681b      	ldr	r3, [r3, #0]
     a02:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a04:	68fb      	ldr	r3, [r7, #12]
     a06:	1cfa      	adds	r2, r7, #3
     a08:	7812      	ldrb	r2, [r2, #0]
     a0a:	759a      	strb	r2, [r3, #22]
}
     a0c:	46c0      	nop			; (mov r8, r8)
     a0e:	46bd      	mov	sp, r7
     a10:	b004      	add	sp, #16
     a12:	bd80      	pop	{r7, pc}

00000a14 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     a14:	b580      	push	{r7, lr}
     a16:	b084      	sub	sp, #16
     a18:	af00      	add	r7, sp, #0
     a1a:	0002      	movs	r2, r0
     a1c:	1dfb      	adds	r3, r7, #7
     a1e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     a20:	1dfb      	adds	r3, r7, #7
     a22:	781a      	ldrb	r2, [r3, #0]
     a24:	4b47      	ldr	r3, [pc, #284]	; (b44 <_adc_interrupt_handler+0x130>)
     a26:	0092      	lsls	r2, r2, #2
     a28:	58d3      	ldr	r3, [r2, r3]
     a2a:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	7e1b      	ldrb	r3, [r3, #24]
     a32:	b2da      	uxtb	r2, r3
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	7ddb      	ldrb	r3, [r3, #23]
     a3a:	b2db      	uxtb	r3, r3
     a3c:	4013      	ands	r3, r2
     a3e:	b2db      	uxtb	r3, r3
     a40:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     a42:	68bb      	ldr	r3, [r7, #8]
     a44:	2201      	movs	r2, #1
     a46:	4013      	ands	r3, r2
     a48:	d045      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	2201      	movs	r2, #1
     a50:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	0018      	movs	r0, r3
     a58:	4b3b      	ldr	r3, [pc, #236]	; (b48 <_adc_interrupt_handler+0x134>)
     a5a:	4798      	blx	r3
     a5c:	1e03      	subs	r3, r0, #0
     a5e:	d1f9      	bne.n	a54 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	695b      	ldr	r3, [r3, #20]
     a64:	1c99      	adds	r1, r3, #2
     a66:	68fa      	ldr	r2, [r7, #12]
     a68:	6151      	str	r1, [r2, #20]
     a6a:	68fa      	ldr	r2, [r7, #12]
     a6c:	6812      	ldr	r2, [r2, #0]
     a6e:	8b52      	ldrh	r2, [r2, #26]
     a70:	b292      	uxth	r2, r2
     a72:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	8b1b      	ldrh	r3, [r3, #24]
     a78:	b29b      	uxth	r3, r3
     a7a:	3b01      	subs	r3, #1
     a7c:	b29b      	uxth	r3, r3
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	1c19      	adds	r1, r3, #0
     a82:	8311      	strh	r1, [r2, #24]
     a84:	2b00      	cmp	r3, #0
     a86:	d008      	beq.n	a9a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	7f5b      	ldrb	r3, [r3, #29]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d022      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	0018      	movs	r0, r3
     a94:	4b2d      	ldr	r3, [pc, #180]	; (b4c <_adc_interrupt_handler+0x138>)
     a96:	4798      	blx	r3
     a98:	e01d      	b.n	ad6 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     a9a:	68fb      	ldr	r3, [r7, #12]
     a9c:	2101      	movs	r1, #1
     a9e:	0018      	movs	r0, r3
     aa0:	4b2b      	ldr	r3, [pc, #172]	; (b50 <_adc_interrupt_handler+0x13c>)
     aa2:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	7f1b      	ldrb	r3, [r3, #28]
     aa8:	b2db      	uxtb	r3, r3
     aaa:	2b05      	cmp	r3, #5
     aac:	d113      	bne.n	ad6 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	2200      	movs	r2, #0
     ab2:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     ab4:	68fb      	ldr	r3, [r7, #12]
     ab6:	7edb      	ldrb	r3, [r3, #27]
     ab8:	001a      	movs	r2, r3
     aba:	2301      	movs	r3, #1
     abc:	4013      	ands	r3, r2
     abe:	d00a      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     ac0:	68fb      	ldr	r3, [r7, #12]
     ac2:	7e9b      	ldrb	r3, [r3, #26]
     ac4:	001a      	movs	r2, r3
     ac6:	2301      	movs	r3, #1
     ac8:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     aca:	d004      	beq.n	ad6 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	68fa      	ldr	r2, [r7, #12]
     ad2:	0010      	movs	r0, r2
     ad4:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     ad6:	68bb      	ldr	r3, [r7, #8]
     ad8:	2204      	movs	r2, #4
     ada:	4013      	ands	r3, r2
     adc:	d014      	beq.n	b08 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     ade:	68fb      	ldr	r3, [r7, #12]
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	2204      	movs	r2, #4
     ae4:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ae6:	68fb      	ldr	r3, [r7, #12]
     ae8:	7edb      	ldrb	r3, [r3, #27]
     aea:	001a      	movs	r2, r3
     aec:	2302      	movs	r3, #2
     aee:	4013      	ands	r3, r2
     af0:	d00a      	beq.n	b08 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     af2:	68fb      	ldr	r3, [r7, #12]
     af4:	7e9b      	ldrb	r3, [r3, #26]
     af6:	001a      	movs	r2, r3
     af8:	2302      	movs	r3, #2
     afa:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     afc:	d004      	beq.n	b08 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	68db      	ldr	r3, [r3, #12]
     b02:	68fa      	ldr	r2, [r7, #12]
     b04:	0010      	movs	r0, r2
     b06:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     b08:	68bb      	ldr	r3, [r7, #8]
     b0a:	2202      	movs	r2, #2
     b0c:	4013      	ands	r3, r2
     b0e:	d014      	beq.n	b3a <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b10:	68fb      	ldr	r3, [r7, #12]
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	2202      	movs	r2, #2
     b16:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	7edb      	ldrb	r3, [r3, #27]
     b1c:	001a      	movs	r2, r3
     b1e:	2304      	movs	r3, #4
     b20:	4013      	ands	r3, r2
     b22:	d00a      	beq.n	b3a <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     b24:	68fb      	ldr	r3, [r7, #12]
     b26:	7e9b      	ldrb	r3, [r3, #26]
     b28:	001a      	movs	r2, r3
     b2a:	2304      	movs	r3, #4
     b2c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b2e:	d004      	beq.n	b3a <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	691b      	ldr	r3, [r3, #16]
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	0010      	movs	r0, r2
     b38:	4798      	blx	r3
		}
	}
}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	46bd      	mov	sp, r7
     b3e:	b004      	add	sp, #16
     b40:	bd80      	pop	{r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	200054c4 	.word	0x200054c4
     b48:	0000095d 	.word	0x0000095d
     b4c:	00000985 	.word	0x00000985
     b50:	000009f1 	.word	0x000009f1

00000b54 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     b58:	2000      	movs	r0, #0
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <ADC_Handler+0x10>)
     b5c:	4798      	blx	r3
}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	46bd      	mov	sp, r7
     b62:	bd80      	pop	{r7, pc}
     b64:	00000a15 	.word	0x00000a15

00000b68 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b084      	sub	sp, #16
     b6c:	af00      	add	r7, sp, #0
     b6e:	60f8      	str	r0, [r7, #12]
     b70:	60b9      	str	r1, [r7, #8]
     b72:	1dfb      	adds	r3, r7, #7
     b74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b76:	1dfb      	adds	r3, r7, #7
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	3202      	adds	r2, #2
     b7e:	0092      	lsls	r2, r2, #2
     b80:	68b9      	ldr	r1, [r7, #8]
     b82:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     b84:	68fb      	ldr	r3, [r7, #12]
     b86:	7e9b      	ldrb	r3, [r3, #26]
     b88:	b25a      	sxtb	r2, r3
     b8a:	1dfb      	adds	r3, r7, #7
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	2101      	movs	r1, #1
     b90:	4099      	lsls	r1, r3
     b92:	000b      	movs	r3, r1
     b94:	b25b      	sxtb	r3, r3
     b96:	4313      	orrs	r3, r2
     b98:	b25b      	sxtb	r3, r3
     b9a:	b2da      	uxtb	r2, r3
     b9c:	68fb      	ldr	r3, [r7, #12]
     b9e:	769a      	strb	r2, [r3, #26]
}
     ba0:	46c0      	nop			; (mov r8, r8)
     ba2:	46bd      	mov	sp, r7
     ba4:	b004      	add	sp, #16
     ba6:	bd80      	pop	{r7, pc}

00000ba8 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     ba8:	b580      	push	{r7, lr}
     baa:	b084      	sub	sp, #16
     bac:	af00      	add	r7, sp, #0
     bae:	60f8      	str	r0, [r7, #12]
     bb0:	60b9      	str	r1, [r7, #8]
     bb2:	1dbb      	adds	r3, r7, #6
     bb4:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     bb6:	68fb      	ldr	r3, [r7, #12]
     bb8:	8b1b      	ldrh	r3, [r3, #24]
     bba:	b29b      	uxth	r3, r3
     bbc:	2b00      	cmp	r3, #0
     bbe:	d104      	bne.n	bca <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
     bc0:	68fb      	ldr	r3, [r7, #12]
     bc2:	7f1b      	ldrb	r3, [r3, #28]
     bc4:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
     bc6:	2b05      	cmp	r3, #5
     bc8:	d101      	bne.n	bce <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
     bca:	2305      	movs	r3, #5
     bcc:	e017      	b.n	bfe <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	2205      	movs	r2, #5
     bd2:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
     bd4:	68fb      	ldr	r3, [r7, #12]
     bd6:	1dba      	adds	r2, r7, #6
     bd8:	8812      	ldrh	r2, [r2, #0]
     bda:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
     bdc:	68fb      	ldr	r3, [r7, #12]
     bde:	68ba      	ldr	r2, [r7, #8]
     be0:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	2101      	movs	r1, #1
     be6:	0018      	movs	r0, r3
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <adc_read_buffer_job+0x60>)
     bea:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	7f5b      	ldrb	r3, [r3, #29]
     bf0:	2b00      	cmp	r3, #0
     bf2:	d003      	beq.n	bfc <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
     bf4:	68fb      	ldr	r3, [r7, #12]
     bf6:	0018      	movs	r0, r3
     bf8:	4b04      	ldr	r3, [pc, #16]	; (c0c <adc_read_buffer_job+0x64>)
     bfa:	4798      	blx	r3
	}

	return STATUS_OK;
     bfc:	2300      	movs	r3, #0
}
     bfe:	0018      	movs	r0, r3
     c00:	46bd      	mov	sp, r7
     c02:	b004      	add	sp, #16
     c04:	bd80      	pop	{r7, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	000009cd 	.word	0x000009cd
     c0c:	00000985 	.word	0x00000985

00000c10 <adc_get_job_status>:
 * \return Status of the job.
 */
enum status_code adc_get_job_status(
		struct adc_module *module_inst,
		enum adc_job_type type)
{
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
     c18:	000a      	movs	r2, r1
     c1a:	1cfb      	adds	r3, r7, #3
     c1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
     c1e:	1cfb      	adds	r3, r7, #3
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b00      	cmp	r3, #0
     c24:	d103      	bne.n	c2e <adc_get_job_status+0x1e>
		return module_inst->job_status;
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	7f1b      	ldrb	r3, [r3, #28]
     c2a:	b2db      	uxtb	r3, r3
     c2c:	e000      	b.n	c30 <adc_get_job_status+0x20>
	} else {
		return STATUS_ERR_INVALID_ARG;
     c2e:	2317      	movs	r3, #23
	}
}
     c30:	0018      	movs	r0, r3
     c32:	46bd      	mov	sp, r7
     c34:	b002      	add	sp, #8
     c36:	bd80      	pop	{r7, pc}

00000c38 <system_gclk_chan_get_config_defaults>:
{
     c38:	b580      	push	{r7, lr}
     c3a:	b082      	sub	sp, #8
     c3c:	af00      	add	r7, sp, #0
     c3e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	2200      	movs	r2, #0
     c44:	701a      	strb	r2, [r3, #0]
}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	46bd      	mov	sp, r7
     c4a:	b002      	add	sp, #8
     c4c:	bd80      	pop	{r7, pc}
	...

00000c50 <system_apb_clock_set_mask>:
{
     c50:	b580      	push	{r7, lr}
     c52:	b082      	sub	sp, #8
     c54:	af00      	add	r7, sp, #0
     c56:	0002      	movs	r2, r0
     c58:	6039      	str	r1, [r7, #0]
     c5a:	1dfb      	adds	r3, r7, #7
     c5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     c5e:	1dfb      	adds	r3, r7, #7
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b01      	cmp	r3, #1
     c64:	d00a      	beq.n	c7c <system_apb_clock_set_mask+0x2c>
     c66:	2b02      	cmp	r3, #2
     c68:	d00f      	beq.n	c8a <system_apb_clock_set_mask+0x3a>
     c6a:	2b00      	cmp	r3, #0
     c6c:	d114      	bne.n	c98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     c6e:	4b0e      	ldr	r3, [pc, #56]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c70:	4a0d      	ldr	r2, [pc, #52]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c72:	6991      	ldr	r1, [r2, #24]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	430a      	orrs	r2, r1
     c78:	619a      	str	r2, [r3, #24]
			break;
     c7a:	e00f      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c7e:	4a0a      	ldr	r2, [pc, #40]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c80:	69d1      	ldr	r1, [r2, #28]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	430a      	orrs	r2, r1
     c86:	61da      	str	r2, [r3, #28]
			break;
     c88:	e008      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c8c:	4a06      	ldr	r2, [pc, #24]	; (ca8 <system_apb_clock_set_mask+0x58>)
     c8e:	6a11      	ldr	r1, [r2, #32]
     c90:	683a      	ldr	r2, [r7, #0]
     c92:	430a      	orrs	r2, r1
     c94:	621a      	str	r2, [r3, #32]
			break;
     c96:	e001      	b.n	c9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     c98:	2317      	movs	r3, #23
     c9a:	e000      	b.n	c9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     c9c:	2300      	movs	r3, #0
}
     c9e:	0018      	movs	r0, r3
     ca0:	46bd      	mov	sp, r7
     ca2:	b002      	add	sp, #8
     ca4:	bd80      	pop	{r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	40000400 	.word	0x40000400

00000cac <system_pinmux_get_config_defaults>:
{
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	2280      	movs	r2, #128	; 0x80
     cb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	2200      	movs	r2, #0
     cbe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	2201      	movs	r2, #1
     cc4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	2200      	movs	r2, #0
     cca:	70da      	strb	r2, [r3, #3]
}
     ccc:	46c0      	nop			; (mov r8, r8)
     cce:	46bd      	mov	sp, r7
     cd0:	b002      	add	sp, #8
     cd2:	bd80      	pop	{r7, pc}

00000cd4 <system_voltage_reference_enable>:
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b082      	sub	sp, #8
     cd8:	af00      	add	r7, sp, #0
     cda:	0002      	movs	r2, r0
     cdc:	1dfb      	adds	r3, r7, #7
     cde:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d002      	beq.n	cee <system_voltage_reference_enable+0x1a>
     ce8:	2b01      	cmp	r3, #1
     cea:	d007      	beq.n	cfc <system_voltage_reference_enable+0x28>
			return;
     cec:	e00d      	b.n	d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     cee:	4b08      	ldr	r3, [pc, #32]	; (d10 <system_voltage_reference_enable+0x3c>)
     cf0:	4a07      	ldr	r2, [pc, #28]	; (d10 <system_voltage_reference_enable+0x3c>)
     cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
     cf4:	2102      	movs	r1, #2
     cf6:	430a      	orrs	r2, r1
     cf8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     cfa:	e006      	b.n	d0a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <system_voltage_reference_enable+0x3c>)
     cfe:	4a04      	ldr	r2, [pc, #16]	; (d10 <system_voltage_reference_enable+0x3c>)
     d00:	6c12      	ldr	r2, [r2, #64]	; 0x40
     d02:	2104      	movs	r1, #4
     d04:	430a      	orrs	r2, r1
     d06:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     d08:	46c0      	nop			; (mov r8, r8)
}
     d0a:	46bd      	mov	sp, r7
     d0c:	b002      	add	sp, #8
     d0e:	bd80      	pop	{r7, pc}
     d10:	40000800 	.word	0x40000800

00000d14 <_dac_set_config>:
 *
 */
static void _dac_set_config(
		struct dac_module *const module_inst,
		struct dac_config *const config)
{
     d14:	b580      	push	{r7, lr}
     d16:	b086      	sub	sp, #24
     d18:	af00      	add	r7, sp, #0
     d1a:	6078      	str	r0, [r7, #4]
     d1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(config);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	60fb      	str	r3, [r7, #12]

	/* Set selected DAC output to be enabled when enabling the module */
	module_inst->output = config->output;
     d24:	683b      	ldr	r3, [r7, #0]
     d26:	785a      	ldrb	r2, [r3, #1]
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	711a      	strb	r2, [r3, #4]
	module_inst->start_on_event = false;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2200      	movs	r2, #0
     d30:	719a      	strb	r2, [r3, #6]

	uint32_t new_ctrla = 0;
     d32:	2300      	movs	r3, #0
     d34:	617b      	str	r3, [r7, #20]
	uint32_t new_ctrlb = 0;
     d36:	2300      	movs	r3, #0
     d38:	613b      	str	r3, [r7, #16]

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	799b      	ldrb	r3, [r3, #6]
     d3e:	2b00      	cmp	r3, #0
     d40:	d003      	beq.n	d4a <_dac_set_config+0x36>
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     d42:	697b      	ldr	r3, [r7, #20]
     d44:	2204      	movs	r2, #4
     d46:	4313      	orrs	r3, r2
     d48:	617b      	str	r3, [r7, #20]
	}

	/* Set reference voltage */
	new_ctrlb |= config->reference;
     d4a:	683b      	ldr	r3, [r7, #0]
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	001a      	movs	r2, r3
     d50:	693b      	ldr	r3, [r7, #16]
     d52:	4313      	orrs	r3, r2
     d54:	613b      	str	r3, [r7, #16]

	/* Left adjust data if configured */
	if (config->left_adjust) {
     d56:	683b      	ldr	r3, [r7, #0]
     d58:	789b      	ldrb	r3, [r3, #2]
     d5a:	2b00      	cmp	r3, #0
     d5c:	d003      	beq.n	d66 <_dac_set_config+0x52>
		new_ctrlb |= DAC_CTRLB_LEFTADJ;
     d5e:	693b      	ldr	r3, [r7, #16]
     d60:	2204      	movs	r2, #4
     d62:	4313      	orrs	r3, r2
     d64:	613b      	str	r3, [r7, #16]
	}

#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	/* Bypass DATABUF write protection if configured */
	if (config->databuf_protection_bypass) {
     d66:	683b      	ldr	r3, [r7, #0]
     d68:	791b      	ldrb	r3, [r3, #4]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d003      	beq.n	d76 <_dac_set_config+0x62>
		new_ctrlb |= DAC_CTRLB_BDWP;
     d6e:	693b      	ldr	r3, [r7, #16]
     d70:	2210      	movs	r2, #16
     d72:	4313      	orrs	r3, r2
     d74:	613b      	str	r3, [r7, #16]
	}
#endif

	/* Voltage pump disable if configured */
	if (config->voltage_pump_disable) {
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	795b      	ldrb	r3, [r3, #5]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d003      	beq.n	d86 <_dac_set_config+0x72>
		new_ctrlb |= DAC_CTRLB_VPD;
     d7e:	693b      	ldr	r3, [r7, #16]
     d80:	2208      	movs	r2, #8
     d82:	4313      	orrs	r3, r2
     d84:	613b      	str	r3, [r7, #16]
	}

	/* Apply the new configuration to the hardware module */
	dac_module->CTRLA.reg = new_ctrla;
     d86:	697b      	ldr	r3, [r7, #20]
     d88:	b2da      	uxtb	r2, r3
     d8a:	68fb      	ldr	r3, [r7, #12]
     d8c:	701a      	strb	r2, [r3, #0]

	while (dac_is_syncing(module_inst)) {
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	0018      	movs	r0, r3
     d94:	4b05      	ldr	r3, [pc, #20]	; (dac <_dac_set_config+0x98>)
     d96:	4798      	blx	r3
     d98:	1e03      	subs	r3, r0, #0
     d9a:	d1f9      	bne.n	d90 <_dac_set_config+0x7c>
		/* Wait until the synchronization is complete */
	}

	dac_module->CTRLB.reg = new_ctrlb;
     d9c:	693b      	ldr	r3, [r7, #16]
     d9e:	b2da      	uxtb	r2, r3
     da0:	68fb      	ldr	r3, [r7, #12]
     da2:	705a      	strb	r2, [r3, #1]
}
     da4:	46c0      	nop			; (mov r8, r8)
     da6:	46bd      	mov	sp, r7
     da8:	b006      	add	sp, #24
     daa:	bd80      	pop	{r7, pc}
     dac:	00000db1 	.word	0x00000db1

00000db0 <dac_is_syncing>:
 * \retval true If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
bool dac_is_syncing(
		struct dac_module *const dev_inst)
{
     db0:	b580      	push	{r7, lr}
     db2:	b084      	sub	sp, #16
     db4:	af00      	add	r7, sp, #0
     db6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	60fb      	str	r3, [r7, #12]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
     dbe:	68fb      	ldr	r3, [r7, #12]
     dc0:	79db      	ldrb	r3, [r3, #7]
     dc2:	b2db      	uxtb	r3, r3
     dc4:	b25b      	sxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	da01      	bge.n	dce <dac_is_syncing+0x1e>
#endif
		return true;
     dca:	2301      	movs	r3, #1
     dcc:	e000      	b.n	dd0 <dac_is_syncing+0x20>
	}

	return false;
     dce:	2300      	movs	r3, #0
}
     dd0:	0018      	movs	r0, r3
     dd2:	46bd      	mov	sp, r7
     dd4:	b004      	add	sp, #16
     dd6:	bd80      	pop	{r7, pc}

00000dd8 <dac_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_get_config_defaults(
		struct dac_config *const config)
{
     dd8:	b580      	push	{r7, lr}
     dda:	b082      	sub	sp, #8
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	2200      	movs	r2, #0
     de4:	701a      	strb	r2, [r3, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	2201      	movs	r2, #1
     dea:	705a      	strb	r2, [r3, #1]
	config->left_adjust    = false;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	2200      	movs	r2, #0
     df0:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
     df2:	687b      	ldr	r3, [r7, #4]
     df4:	2200      	movs	r2, #0
     df6:	711a      	strb	r2, [r3, #4]
#endif
	config->voltage_pump_disable = false;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	2200      	movs	r2, #0
     dfc:	715a      	strb	r2, [r3, #5]
	config->clock_source   = GCLK_GENERATOR_0;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	2200      	movs	r2, #0
     e02:	70da      	strb	r2, [r3, #3]
	config->run_in_standby = false;
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	2200      	movs	r2, #0
     e08:	719a      	strb	r2, [r3, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	46bd      	mov	sp, r7
     e0e:	b002      	add	sp, #8
     e10:	bd80      	pop	{r7, pc}
	...

00000e14 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     e14:	b580      	push	{r7, lr}
     e16:	b086      	sub	sp, #24
     e18:	af00      	add	r7, sp, #0
     e1a:	60f8      	str	r0, [r7, #12]
     e1c:	60b9      	str	r1, [r7, #8]
     e1e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	68ba      	ldr	r2, [r7, #8]
     e24:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
#if (SAMC21)
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
     e26:	2380      	movs	r3, #128	; 0x80
     e28:	02db      	lsls	r3, r3, #11
     e2a:	0019      	movs	r1, r3
     e2c:	2002      	movs	r0, #2
     e2e:	4b35      	ldr	r3, [pc, #212]	; (f04 <dac_init+0xf0>)
     e30:	4798      	blx	r3
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     e32:	68bb      	ldr	r3, [r7, #8]
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	001a      	movs	r2, r3
     e3a:	2302      	movs	r3, #2
     e3c:	4013      	ands	r3, r2
     e3e:	d001      	beq.n	e44 <dac_init+0x30>
		return STATUS_ERR_DENIED;
     e40:	231c      	movs	r3, #28
     e42:	e05b      	b.n	efc <dac_init+0xe8>
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     e44:	68bb      	ldr	r3, [r7, #8]
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	b2db      	uxtb	r3, r3
     e4a:	001a      	movs	r2, r3
     e4c:	2301      	movs	r3, #1
     e4e:	4013      	ands	r3, r2
     e50:	d001      	beq.n	e56 <dac_init+0x42>
		return STATUS_BUSY;
     e52:	2305      	movs	r3, #5
     e54:	e052      	b.n	efc <dac_init+0xe8>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     e56:	2314      	movs	r3, #20
     e58:	18fb      	adds	r3, r7, r3
     e5a:	0018      	movs	r0, r3
     e5c:	4b2a      	ldr	r3, [pc, #168]	; (f08 <dac_init+0xf4>)
     e5e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	78da      	ldrb	r2, [r3, #3]
     e64:	2314      	movs	r3, #20
     e66:	18fb      	adds	r3, r7, r3
     e68:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     e6a:	2314      	movs	r3, #20
     e6c:	18fb      	adds	r3, r7, r3
     e6e:	0019      	movs	r1, r3
     e70:	2021      	movs	r0, #33	; 0x21
     e72:	4b26      	ldr	r3, [pc, #152]	; (f0c <dac_init+0xf8>)
     e74:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     e76:	2021      	movs	r0, #33	; 0x21
     e78:	4b25      	ldr	r3, [pc, #148]	; (f10 <dac_init+0xfc>)
     e7a:	4798      	blx	r3

	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e7c:	2310      	movs	r3, #16
     e7e:	18fb      	adds	r3, r7, r3
     e80:	0018      	movs	r0, r3
     e82:	4b24      	ldr	r3, [pc, #144]	; (f14 <dac_init+0x100>)
     e84:	4798      	blx	r3

	/* Set up the DAC VOUT pin */
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     e86:	2310      	movs	r3, #16
     e88:	18fb      	adds	r3, r7, r3
     e8a:	2201      	movs	r2, #1
     e8c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e8e:	2310      	movs	r3, #16
     e90:	18fb      	adds	r3, r7, r3
     e92:	2200      	movs	r2, #0
     e94:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e96:	2310      	movs	r3, #16
     e98:	18fb      	adds	r3, r7, r3
     e9a:	2200      	movs	r2, #0
     e9c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     e9e:	2310      	movs	r3, #16
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	0019      	movs	r1, r3
     ea4:	2002      	movs	r0, #2
     ea6:	4b1c      	ldr	r3, [pc, #112]	; (f18 <dac_init+0x104>)
     ea8:	4798      	blx	r3

	/* Write configuration to module */
	_dac_set_config(module_inst, config);
     eaa:	687a      	ldr	r2, [r7, #4]
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	0011      	movs	r1, r2
     eb0:	0018      	movs	r0, r3
     eb2:	4b1a      	ldr	r3, [pc, #104]	; (f1c <dac_init+0x108>)
     eb4:	4798      	blx	r3

	/* Store reference selection for later use */
	module_inst->reference = config->reference;
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	781a      	ldrb	r2, [r3, #0]
     eba:	68fb      	ldr	r3, [r7, #12]
     ebc:	715a      	strb	r2, [r3, #5]

#if DAC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
     ebe:	2317      	movs	r3, #23
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	2200      	movs	r2, #0
     ec4:	701a      	strb	r2, [r3, #0]
     ec6:	e010      	b.n	eea <dac_init+0xd6>
		module_inst->callback[i] = NULL;
     ec8:	2317      	movs	r3, #23
     eca:	18fb      	adds	r3, r7, r3
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	68fa      	ldr	r2, [r7, #12]
     ed0:	3304      	adds	r3, #4
     ed2:	009b      	lsls	r3, r3, #2
     ed4:	18d3      	adds	r3, r2, r3
     ed6:	3304      	adds	r3, #4
     ed8:	2200      	movs	r2, #0
     eda:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < DAC_CALLBACK_N; i++) {
     edc:	2317      	movs	r3, #23
     ede:	18fb      	adds	r3, r7, r3
     ee0:	781a      	ldrb	r2, [r3, #0]
     ee2:	2317      	movs	r3, #23
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	3201      	adds	r2, #1
     ee8:	701a      	strb	r2, [r3, #0]
     eea:	2317      	movs	r3, #23
     eec:	18fb      	adds	r3, r7, r3
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	2b02      	cmp	r3, #2
     ef2:	d9e9      	bls.n	ec8 <dac_init+0xb4>
	};

	_dac_instances[0] = module_inst;
     ef4:	4b0a      	ldr	r3, [pc, #40]	; (f20 <dac_init+0x10c>)
     ef6:	68fa      	ldr	r2, [r7, #12]
     ef8:	601a      	str	r2, [r3, #0]
#endif

	return STATUS_OK;
     efa:	2300      	movs	r3, #0
}
     efc:	0018      	movs	r0, r3
     efe:	46bd      	mov	sp, r7
     f00:	b006      	add	sp, #24
     f02:	bd80      	pop	{r7, pc}
     f04:	00000c51 	.word	0x00000c51
     f08:	00000c39 	.word	0x00000c39
     f0c:	00009ba9 	.word	0x00009ba9
     f10:	00009bed 	.word	0x00009bed
     f14:	00000cad 	.word	0x00000cad
     f18:	00009edd 	.word	0x00009edd
     f1c:	00000d15 	.word	0x00000d15
     f20:	200054c8 	.word	0x200054c8

00000f24 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     f24:	b580      	push	{r7, lr}
     f26:	b084      	sub	sp, #16
     f28:	af00      	add	r7, sp, #0
     f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     f2c:	687b      	ldr	r3, [r7, #4]
     f2e:	681b      	ldr	r3, [r3, #0]
     f30:	60fb      	str	r3, [r7, #12]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     f32:	68fb      	ldr	r3, [r7, #12]
     f34:	785b      	ldrb	r3, [r3, #1]
     f36:	b2da      	uxtb	r2, r3
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	791b      	ldrb	r3, [r3, #4]
     f3c:	4313      	orrs	r3, r2
     f3e:	b2da      	uxtb	r2, r3
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	705a      	strb	r2, [r3, #1]

	while (dac_is_syncing(module_inst)) {
     f44:	46c0      	nop			; (mov r8, r8)
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	0018      	movs	r0, r3
     f4a:	4b0b      	ldr	r3, [pc, #44]	; (f78 <dac_enable+0x54>)
     f4c:	4798      	blx	r3
     f4e:	1e03      	subs	r3, r0, #0
     f50:	d1f9      	bne.n	f46 <dac_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     f52:	68fb      	ldr	r3, [r7, #12]
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	b2db      	uxtb	r3, r3
     f58:	2202      	movs	r2, #2
     f5a:	4313      	orrs	r3, r2
     f5c:	b2da      	uxtb	r2, r3
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	701a      	strb	r2, [r3, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	795b      	ldrb	r3, [r3, #5]
     f66:	2b00      	cmp	r3, #0
     f68:	d102      	bne.n	f70 <dac_enable+0x4c>
	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
		};
	}
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     f6a:	2001      	movs	r0, #1
     f6c:	4b03      	ldr	r3, [pc, #12]	; (f7c <dac_enable+0x58>)
     f6e:	4798      	blx	r3
	}

#endif
}
     f70:	46c0      	nop			; (mov r8, r8)
     f72:	46bd      	mov	sp, r7
     f74:	b004      	add	sp, #16
     f76:	bd80      	pop	{r7, pc}
     f78:	00000db1 	.word	0x00000db1
     f7c:	00000cd5 	.word	0x00000cd5

00000f80 <dac_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
     f80:	b580      	push	{r7, lr}
     f82:	b082      	sub	sp, #8
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
}
     f88:	46c0      	nop			; (mov r8, r8)
     f8a:	46bd      	mov	sp, r7
     f8c:	b002      	add	sp, #8
     f8e:	bd80      	pop	{r7, pc}

00000f90 <dac_chan_set_config>:
 */
void dac_chan_set_config(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
     f90:	b580      	push	{r7, lr}
     f92:	b084      	sub	sp, #16
     f94:	af00      	add	r7, sp, #0
     f96:	60f8      	str	r0, [r7, #12]
     f98:	607a      	str	r2, [r7, #4]
     f9a:	230b      	movs	r3, #11
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	1c0a      	adds	r2, r1, #0
     fa0:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	46bd      	mov	sp, r7
     fa6:	b004      	add	sp, #16
     fa8:	bd80      	pop	{r7, pc}

00000faa <dac_chan_enable>:
 *
 */
void dac_chan_enable(
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
     faa:	b580      	push	{r7, lr}
     fac:	b082      	sub	sp, #8
     fae:	af00      	add	r7, sp, #0
     fb0:	6078      	str	r0, [r7, #4]
     fb2:	000a      	movs	r2, r1
     fb4:	1cfb      	adds	r3, r7, #3
     fb6:	701a      	strb	r2, [r3, #0]
	/* No channel support yet */
	UNUSED(channel);
}
     fb8:	46c0      	nop			; (mov r8, r8)
     fba:	46bd      	mov	sp, r7
     fbc:	b002      	add	sp, #8
     fbe:	bd80      	pop	{r7, pc}

00000fc0 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b084      	sub	sp, #16
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	0008      	movs	r0, r1
     fca:	0011      	movs	r1, r2
     fcc:	1cfb      	adds	r3, r7, #3
     fce:	1c02      	adds	r2, r0, #0
     fd0:	701a      	strb	r2, [r3, #0]
     fd2:	003b      	movs	r3, r7
     fd4:	1c0a      	adds	r2, r1, #0
     fd6:	801a      	strh	r2, [r3, #0]
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	60fb      	str	r3, [r7, #12]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	0018      	movs	r0, r3
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <dac_chan_write+0x50>)
     fe6:	4798      	blx	r3
     fe8:	1e03      	subs	r3, r0, #0
     fea:	d1f9      	bne.n	fe0 <dac_chan_write+0x20>
	};

	if (module_inst->start_on_event) {
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	799b      	ldrb	r3, [r3, #6]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d004      	beq.n	ffe <dac_chan_write+0x3e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
     ff4:	68fb      	ldr	r3, [r7, #12]
     ff6:	003a      	movs	r2, r7
     ff8:	8812      	ldrh	r2, [r2, #0]
     ffa:	819a      	strh	r2, [r3, #12]
     ffc:	e003      	b.n	1006 <dac_chan_write+0x46>
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	003a      	movs	r2, r7
    1002:	8812      	ldrh	r2, [r2, #0]
    1004:	811a      	strh	r2, [r3, #8]
	}

	return STATUS_OK;
    1006:	2300      	movs	r3, #0
}
    1008:	0018      	movs	r0, r3
    100a:	46bd      	mov	sp, r7
    100c:	b004      	add	sp, #16
    100e:	bd80      	pop	{r7, pc}
    1010:	00000db1 	.word	0x00000db1

00001014 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1014:	b580      	push	{r7, lr}
    1016:	b082      	sub	sp, #8
    1018:	af00      	add	r7, sp, #0
    101a:	0002      	movs	r2, r0
    101c:	1dfb      	adds	r3, r7, #7
    101e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1020:	4a07      	ldr	r2, [pc, #28]	; (1040 <system_interrupt_disable+0x2c>)
    1022:	1dfb      	adds	r3, r7, #7
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	0019      	movs	r1, r3
    1028:	231f      	movs	r3, #31
    102a:	400b      	ands	r3, r1
    102c:	2101      	movs	r1, #1
    102e:	4099      	lsls	r1, r3
    1030:	000b      	movs	r3, r1
    1032:	0019      	movs	r1, r3
    1034:	2380      	movs	r3, #128	; 0x80
    1036:	50d1      	str	r1, [r2, r3]
}
    1038:	46c0      	nop			; (mov r8, r8)
    103a:	46bd      	mov	sp, r7
    103c:	b002      	add	sp, #8
    103e:	bd80      	pop	{r7, pc}
    1040:	e000e100 	.word	0xe000e100

00001044 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    1044:	b580      	push	{r7, lr}
    1046:	b084      	sub	sp, #16
    1048:	af00      	add	r7, sp, #0
    104a:	0002      	movs	r2, r0
    104c:	1dfb      	adds	r3, r7, #7
    104e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    1050:	1dfb      	adds	r3, r7, #7
    1052:	781a      	ldrb	r2, [r3, #0]
    1054:	4b37      	ldr	r3, [pc, #220]	; (1134 <_dac_interrupt_handler+0xf0>)
    1056:	0092      	lsls	r2, r2, #2
    1058:	58d3      	ldr	r3, [r2, r3]
    105a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    1062:	68bb      	ldr	r3, [r7, #8]
    1064:	799b      	ldrb	r3, [r3, #6]
    1066:	b2db      	uxtb	r3, r3
    1068:	001a      	movs	r2, r3
    106a:	2301      	movs	r3, #1
    106c:	4013      	ands	r3, r2
    106e:	d00e      	beq.n	108e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    1070:	68bb      	ldr	r3, [r7, #8]
    1072:	2201      	movs	r2, #1
    1074:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	3314      	adds	r3, #20
    107a:	2b00      	cmp	r3, #0
    107c:	d007      	beq.n	108e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    1082:	2b00      	cmp	r3, #0
    1084:	d003      	beq.n	108e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	699b      	ldr	r3, [r3, #24]
    108a:	2000      	movs	r0, #0
    108c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    108e:	68bb      	ldr	r3, [r7, #8]
    1090:	799b      	ldrb	r3, [r3, #6]
    1092:	b2db      	uxtb	r3, r3
    1094:	001a      	movs	r2, r3
    1096:	2302      	movs	r3, #2
    1098:	4013      	ands	r3, r2
    109a:	d047      	beq.n	112c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    109c:	68bb      	ldr	r3, [r7, #8]
    109e:	2202      	movs	r2, #2
    10a0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	899b      	ldrh	r3, [r3, #12]
    10a6:	b29b      	uxth	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	d033      	beq.n	1114 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	689a      	ldr	r2, [r3, #8]
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	89db      	ldrh	r3, [r3, #14]
    10b4:	b29b      	uxth	r3, r3
    10b6:	1c59      	adds	r1, r3, #1
    10b8:	b288      	uxth	r0, r1
    10ba:	68f9      	ldr	r1, [r7, #12]
    10bc:	81c8      	strh	r0, [r1, #14]
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18d3      	adds	r3, r2, r3
    10c2:	881b      	ldrh	r3, [r3, #0]
    10c4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    10c6:	68bb      	ldr	r3, [r7, #8]
    10c8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	899b      	ldrh	r3, [r3, #12]
    10ce:	b29b      	uxth	r3, r3
    10d0:	3b01      	subs	r3, #1
    10d2:	b29a      	uxth	r2, r3
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	899b      	ldrh	r3, [r3, #12]
    10dc:	b29b      	uxth	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	d118      	bne.n	1114 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2220      	movs	r2, #32
    10e6:	2100      	movs	r1, #0
    10e8:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    10ea:	68bb      	ldr	r3, [r7, #8]
    10ec:	2202      	movs	r2, #2
    10ee:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    10f0:	68bb      	ldr	r3, [r7, #8]
    10f2:	2202      	movs	r2, #2
    10f4:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    10f6:	2019      	movs	r0, #25
    10f8:	4b0f      	ldr	r3, [pc, #60]	; (1138 <_dac_interrupt_handler+0xf4>)
    10fa:	4798      	blx	r3

				if ((module->callback) &&
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	3314      	adds	r3, #20
    1100:	2b00      	cmp	r3, #0
    1102:	d007      	beq.n	1114 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    1104:	68fb      	ldr	r3, [r7, #12]
    1106:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    1108:	2b00      	cmp	r3, #0
    110a:	d003      	beq.n	1114 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	69db      	ldr	r3, [r3, #28]
    1110:	2000      	movs	r0, #0
    1112:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	3314      	adds	r3, #20
    1118:	2b00      	cmp	r3, #0
    111a:	d007      	beq.n	112c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    1120:	2b00      	cmp	r3, #0
    1122:	d003      	beq.n	112c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	695b      	ldr	r3, [r3, #20]
    1128:	2000      	movs	r0, #0
    112a:	4798      	blx	r3
		}
	}
}
    112c:	46c0      	nop			; (mov r8, r8)
    112e:	46bd      	mov	sp, r7
    1130:	b004      	add	sp, #16
    1132:	bd80      	pop	{r7, pc}
    1134:	200054c8 	.word	0x200054c8
    1138:	00001015 	.word	0x00001015

0000113c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    1140:	2000      	movs	r0, #0
    1142:	4b02      	ldr	r3, [pc, #8]	; (114c <DAC_Handler+0x10>)
    1144:	4798      	blx	r3
}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	46bd      	mov	sp, r7
    114a:	bd80      	pop	{r7, pc}
    114c:	00001045 	.word	0x00001045

00001150 <system_gclk_chan_get_config_defaults>:
{
    1150:	b580      	push	{r7, lr}
    1152:	b082      	sub	sp, #8
    1154:	af00      	add	r7, sp, #0
    1156:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	2200      	movs	r2, #0
    115c:	701a      	strb	r2, [r3, #0]
}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	46bd      	mov	sp, r7
    1162:	b002      	add	sp, #8
    1164:	bd80      	pop	{r7, pc}
	...

00001168 <system_apb_clock_set_mask>:
{
    1168:	b580      	push	{r7, lr}
    116a:	b082      	sub	sp, #8
    116c:	af00      	add	r7, sp, #0
    116e:	0002      	movs	r2, r0
    1170:	6039      	str	r1, [r7, #0]
    1172:	1dfb      	adds	r3, r7, #7
    1174:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1176:	1dfb      	adds	r3, r7, #7
    1178:	781b      	ldrb	r3, [r3, #0]
    117a:	2b01      	cmp	r3, #1
    117c:	d00a      	beq.n	1194 <system_apb_clock_set_mask+0x2c>
    117e:	2b02      	cmp	r3, #2
    1180:	d00f      	beq.n	11a2 <system_apb_clock_set_mask+0x3a>
    1182:	2b00      	cmp	r3, #0
    1184:	d114      	bne.n	11b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1186:	4b0e      	ldr	r3, [pc, #56]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1188:	4a0d      	ldr	r2, [pc, #52]	; (11c0 <system_apb_clock_set_mask+0x58>)
    118a:	6991      	ldr	r1, [r2, #24]
    118c:	683a      	ldr	r2, [r7, #0]
    118e:	430a      	orrs	r2, r1
    1190:	619a      	str	r2, [r3, #24]
			break;
    1192:	e00f      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1196:	4a0a      	ldr	r2, [pc, #40]	; (11c0 <system_apb_clock_set_mask+0x58>)
    1198:	69d1      	ldr	r1, [r2, #28]
    119a:	683a      	ldr	r2, [r7, #0]
    119c:	430a      	orrs	r2, r1
    119e:	61da      	str	r2, [r3, #28]
			break;
    11a0:	e008      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    11a2:	4b07      	ldr	r3, [pc, #28]	; (11c0 <system_apb_clock_set_mask+0x58>)
    11a4:	4a06      	ldr	r2, [pc, #24]	; (11c0 <system_apb_clock_set_mask+0x58>)
    11a6:	6a11      	ldr	r1, [r2, #32]
    11a8:	683a      	ldr	r2, [r7, #0]
    11aa:	430a      	orrs	r2, r1
    11ac:	621a      	str	r2, [r3, #32]
			break;
    11ae:	e001      	b.n	11b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    11b0:	2317      	movs	r3, #23
    11b2:	e000      	b.n	11b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    11b4:	2300      	movs	r3, #0
}
    11b6:	0018      	movs	r0, r3
    11b8:	46bd      	mov	sp, r7
    11ba:	b002      	add	sp, #8
    11bc:	bd80      	pop	{r7, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	40000400 	.word	0x40000400

000011c4 <system_pinmux_get_config_defaults>:
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	2200      	movs	r2, #0
    11d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	2201      	movs	r2, #1
    11dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	2200      	movs	r2, #0
    11e2:	70da      	strb	r2, [r3, #3]
}
    11e4:	46c0      	nop			; (mov r8, r8)
    11e6:	46bd      	mov	sp, r7
    11e8:	b002      	add	sp, #8
    11ea:	bd80      	pop	{r7, pc}

000011ec <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    11ec:	b580      	push	{r7, lr}
    11ee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    11f0:	4b05      	ldr	r3, [pc, #20]	; (1208 <system_is_debugger_present+0x1c>)
    11f2:	789b      	ldrb	r3, [r3, #2]
    11f4:	b2db      	uxtb	r3, r3
    11f6:	001a      	movs	r2, r3
    11f8:	2302      	movs	r3, #2
    11fa:	4013      	ands	r3, r2
    11fc:	1e5a      	subs	r2, r3, #1
    11fe:	4193      	sbcs	r3, r2
    1200:	b2db      	uxtb	r3, r3
}
    1202:	0018      	movs	r0, r3
    1204:	46bd      	mov	sp, r7
    1206:	bd80      	pop	{r7, pc}
    1208:	41002000 	.word	0x41002000

0000120c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	b097      	sub	sp, #92	; 0x5c
    1210:	af00      	add	r7, sp, #0
    1212:	6178      	str	r0, [r7, #20]
    1214:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1216:	2300      	movs	r3, #0
    1218:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    121a:	2300      	movs	r3, #0
    121c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    121e:	2300      	movs	r3, #0
    1220:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    1222:	233b      	movs	r3, #59	; 0x3b
    1224:	2210      	movs	r2, #16
    1226:	4694      	mov	ip, r2
    1228:	44bc      	add	ip, r7
    122a:	4463      	add	r3, ip
    122c:	2200      	movs	r2, #0
    122e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1230:	697b      	ldr	r3, [r7, #20]
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    1236:	697b      	ldr	r3, [r7, #20]
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    123c:	2323      	movs	r3, #35	; 0x23
    123e:	2210      	movs	r2, #16
    1240:	18ba      	adds	r2, r7, r2
    1242:	18d4      	adds	r4, r2, r3
    1244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1246:	0018      	movs	r0, r3
    1248:	4bc0      	ldr	r3, [pc, #768]	; (154c <_i2c_master_set_config+0x340>)
    124a:	4798      	blx	r3
    124c:	0003      	movs	r3, r0
    124e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1250:	230c      	movs	r3, #12
    1252:	2210      	movs	r2, #16
    1254:	4694      	mov	ip, r2
    1256:	44bc      	add	ip, r7
    1258:	4463      	add	r3, ip
    125a:	0018      	movs	r0, r3
    125c:	4bbc      	ldr	r3, [pc, #752]	; (1550 <_i2c_master_set_config+0x344>)
    125e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1260:	693b      	ldr	r3, [r7, #16]
    1262:	69db      	ldr	r3, [r3, #28]
    1264:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    1266:	693b      	ldr	r3, [r7, #16]
    1268:	6a1b      	ldr	r3, [r3, #32]
    126a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    126c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    126e:	2b00      	cmp	r3, #0
    1270:	d106      	bne.n	1280 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1274:	2100      	movs	r1, #0
    1276:	0018      	movs	r0, r3
    1278:	4bb6      	ldr	r3, [pc, #728]	; (1554 <_i2c_master_set_config+0x348>)
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
    127e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1282:	b2da      	uxtb	r2, r3
    1284:	230c      	movs	r3, #12
    1286:	2110      	movs	r1, #16
    1288:	468c      	mov	ip, r1
    128a:	44bc      	add	ip, r7
    128c:	4463      	add	r3, ip
    128e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1290:	230c      	movs	r3, #12
    1292:	2210      	movs	r2, #16
    1294:	4694      	mov	ip, r2
    1296:	44bc      	add	ip, r7
    1298:	4463      	add	r3, ip
    129a:	2202      	movs	r2, #2
    129c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    129e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    12a0:	0c1b      	lsrs	r3, r3, #16
    12a2:	b2db      	uxtb	r3, r3
    12a4:	220c      	movs	r2, #12
    12a6:	2110      	movs	r1, #16
    12a8:	468c      	mov	ip, r1
    12aa:	44bc      	add	ip, r7
    12ac:	4462      	add	r2, ip
    12ae:	0011      	movs	r1, r2
    12b0:	0018      	movs	r0, r3
    12b2:	4ba9      	ldr	r3, [pc, #676]	; (1558 <_i2c_master_set_config+0x34c>)
    12b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    12b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12b8:	2b00      	cmp	r3, #0
    12ba:	d106      	bne.n	12ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    12bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12be:	2101      	movs	r1, #1
    12c0:	0018      	movs	r0, r3
    12c2:	4ba4      	ldr	r3, [pc, #656]	; (1554 <_i2c_master_set_config+0x348>)
    12c4:	4798      	blx	r3
    12c6:	0003      	movs	r3, r0
    12c8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    12ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12cc:	b2da      	uxtb	r2, r3
    12ce:	230c      	movs	r3, #12
    12d0:	2110      	movs	r1, #16
    12d2:	468c      	mov	ip, r1
    12d4:	44bc      	add	ip, r7
    12d6:	4463      	add	r3, ip
    12d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12da:	230c      	movs	r3, #12
    12dc:	2210      	movs	r2, #16
    12de:	4694      	mov	ip, r2
    12e0:	44bc      	add	ip, r7
    12e2:	4463      	add	r3, ip
    12e4:	2202      	movs	r2, #2
    12e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    12e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12ea:	0c1b      	lsrs	r3, r3, #16
    12ec:	b2db      	uxtb	r3, r3
    12ee:	220c      	movs	r2, #12
    12f0:	2110      	movs	r1, #16
    12f2:	468c      	mov	ip, r1
    12f4:	44bc      	add	ip, r7
    12f6:	4462      	add	r2, ip
    12f8:	0011      	movs	r1, r2
    12fa:	0018      	movs	r0, r3
    12fc:	4b96      	ldr	r3, [pc, #600]	; (1558 <_i2c_master_set_config+0x34c>)
    12fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1300:	693b      	ldr	r3, [r7, #16]
    1302:	8a9a      	ldrh	r2, [r3, #20]
    1304:	697b      	ldr	r3, [r7, #20]
    1306:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1308:	693b      	ldr	r3, [r7, #16]
    130a:	8ada      	ldrh	r2, [r3, #22]
    130c:	697b      	ldr	r3, [r7, #20]
    130e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1310:	693b      	ldr	r3, [r7, #16]
    1312:	7e1b      	ldrb	r3, [r3, #24]
    1314:	2b00      	cmp	r3, #0
    1316:	d103      	bne.n	1320 <_i2c_master_set_config+0x114>
    1318:	4b90      	ldr	r3, [pc, #576]	; (155c <_i2c_master_set_config+0x350>)
    131a:	4798      	blx	r3
    131c:	1e03      	subs	r3, r0, #0
    131e:	d002      	beq.n	1326 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	657b      	str	r3, [r7, #84]	; 0x54
    1324:	e001      	b.n	132a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1326:	2300      	movs	r3, #0
    1328:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    132a:	693b      	ldr	r3, [r7, #16]
    132c:	691b      	ldr	r3, [r3, #16]
    132e:	2b00      	cmp	r3, #0
    1330:	d004      	beq.n	133c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1332:	693b      	ldr	r3, [r7, #16]
    1334:	691b      	ldr	r3, [r3, #16]
    1336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1338:	4313      	orrs	r3, r2
    133a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    133c:	693b      	ldr	r3, [r7, #16]
    133e:	689b      	ldr	r3, [r3, #8]
    1340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1342:	4313      	orrs	r3, r2
    1344:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1346:	693b      	ldr	r3, [r7, #16]
    1348:	2224      	movs	r2, #36	; 0x24
    134a:	5c9b      	ldrb	r3, [r3, r2]
    134c:	2b00      	cmp	r3, #0
    134e:	d004      	beq.n	135a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	05d2      	lsls	r2, r2, #23
    1356:	4313      	orrs	r3, r2
    1358:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    135a:	693b      	ldr	r3, [r7, #16]
    135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    135e:	2b00      	cmp	r3, #0
    1360:	d004      	beq.n	136c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1362:	693b      	ldr	r3, [r7, #16]
    1364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1368:	4313      	orrs	r3, r2
    136a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    136c:	693b      	ldr	r3, [r7, #16]
    136e:	222c      	movs	r2, #44	; 0x2c
    1370:	5c9b      	ldrb	r3, [r3, r2]
    1372:	2b00      	cmp	r3, #0
    1374:	d105      	bne.n	1382 <_i2c_master_set_config+0x176>
    1376:	693b      	ldr	r3, [r7, #16]
    1378:	689a      	ldr	r2, [r3, #8]
    137a:	2380      	movs	r3, #128	; 0x80
    137c:	049b      	lsls	r3, r3, #18
    137e:	429a      	cmp	r2, r3
    1380:	d104      	bne.n	138c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	0512      	lsls	r2, r2, #20
    1388:	4313      	orrs	r3, r2
    138a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    138c:	693b      	ldr	r3, [r7, #16]
    138e:	222d      	movs	r2, #45	; 0x2d
    1390:	5c9b      	ldrb	r3, [r3, r2]
    1392:	2b00      	cmp	r3, #0
    1394:	d004      	beq.n	13a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1398:	2280      	movs	r2, #128	; 0x80
    139a:	0412      	lsls	r2, r2, #16
    139c:	4313      	orrs	r3, r2
    139e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    13a0:	693b      	ldr	r3, [r7, #16]
    13a2:	222e      	movs	r2, #46	; 0x2e
    13a4:	5c9b      	ldrb	r3, [r3, r2]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d004      	beq.n	13b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    13aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    13ac:	2280      	movs	r2, #128	; 0x80
    13ae:	03d2      	lsls	r2, r2, #15
    13b0:	4313      	orrs	r3, r2
    13b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    13b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    13ba:	431a      	orrs	r2, r3
    13bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    13c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c2:	2280      	movs	r2, #128	; 0x80
    13c4:	0052      	lsls	r2, r2, #1
    13c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    13c8:	2323      	movs	r3, #35	; 0x23
    13ca:	2210      	movs	r2, #16
    13cc:	4694      	mov	ip, r2
    13ce:	44bc      	add	ip, r7
    13d0:	4463      	add	r3, ip
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	3314      	adds	r3, #20
    13d6:	b2db      	uxtb	r3, r3
    13d8:	0018      	movs	r0, r3
    13da:	4b61      	ldr	r3, [pc, #388]	; (1560 <_i2c_master_set_config+0x354>)
    13dc:	4798      	blx	r3
    13de:	0003      	movs	r3, r0
    13e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    13e2:	693b      	ldr	r3, [r7, #16]
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	22fa      	movs	r2, #250	; 0xfa
    13e8:	0092      	lsls	r2, r2, #2
    13ea:	4353      	muls	r3, r2
    13ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    13ee:	693b      	ldr	r3, [r7, #16]
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	22fa      	movs	r2, #250	; 0xfa
    13f4:	0092      	lsls	r2, r2, #2
    13f6:	4353      	muls	r3, r2
    13f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    13fa:	693b      	ldr	r3, [r7, #16]
    13fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    13fe:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    1400:	4b58      	ldr	r3, [pc, #352]	; (1564 <_i2c_master_set_config+0x358>)
    1402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1404:	4798      	blx	r3
    1406:	0005      	movs	r5, r0
    1408:	000e      	movs	r6, r1
    140a:	4b56      	ldr	r3, [pc, #344]	; (1564 <_i2c_master_set_config+0x358>)
    140c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    140e:	4798      	blx	r3
    1410:	60b8      	str	r0, [r7, #8]
    1412:	60f9      	str	r1, [r7, #12]
    1414:	4b53      	ldr	r3, [pc, #332]	; (1564 <_i2c_master_set_config+0x358>)
    1416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1418:	4798      	blx	r3
    141a:	4c53      	ldr	r4, [pc, #332]	; (1568 <_i2c_master_set_config+0x35c>)
    141c:	4a53      	ldr	r2, [pc, #332]	; (156c <_i2c_master_set_config+0x360>)
    141e:	4b54      	ldr	r3, [pc, #336]	; (1570 <_i2c_master_set_config+0x364>)
    1420:	47a0      	blx	r4
    1422:	0003      	movs	r3, r0
    1424:	000c      	movs	r4, r1
    1426:	603b      	str	r3, [r7, #0]
    1428:	607c      	str	r4, [r7, #4]
    142a:	4b4e      	ldr	r3, [pc, #312]	; (1564 <_i2c_master_set_config+0x358>)
    142c:	6a38      	ldr	r0, [r7, #32]
    142e:	4798      	blx	r3
    1430:	0002      	movs	r2, r0
    1432:	000b      	movs	r3, r1
    1434:	4c4c      	ldr	r4, [pc, #304]	; (1568 <_i2c_master_set_config+0x35c>)
    1436:	6838      	ldr	r0, [r7, #0]
    1438:	6879      	ldr	r1, [r7, #4]
    143a:	47a0      	blx	r4
    143c:	0003      	movs	r3, r0
    143e:	000c      	movs	r4, r1
    1440:	0018      	movs	r0, r3
    1442:	0021      	movs	r1, r4
    1444:	4c4b      	ldr	r4, [pc, #300]	; (1574 <_i2c_master_set_config+0x368>)
    1446:	2200      	movs	r2, #0
    1448:	4b4b      	ldr	r3, [pc, #300]	; (1578 <_i2c_master_set_config+0x36c>)
    144a:	47a0      	blx	r4
    144c:	0003      	movs	r3, r0
    144e:	000c      	movs	r4, r1
    1450:	001a      	movs	r2, r3
    1452:	0023      	movs	r3, r4
    1454:	4c44      	ldr	r4, [pc, #272]	; (1568 <_i2c_master_set_config+0x35c>)
    1456:	68b8      	ldr	r0, [r7, #8]
    1458:	68f9      	ldr	r1, [r7, #12]
    145a:	47a0      	blx	r4
    145c:	0003      	movs	r3, r0
    145e:	000c      	movs	r4, r1
    1460:	001a      	movs	r2, r3
    1462:	0023      	movs	r3, r4
    1464:	4c45      	ldr	r4, [pc, #276]	; (157c <_i2c_master_set_config+0x370>)
    1466:	0028      	movs	r0, r5
    1468:	0031      	movs	r1, r6
    146a:	47a0      	blx	r4
    146c:	0003      	movs	r3, r0
    146e:	000c      	movs	r4, r1
    1470:	001d      	movs	r5, r3
    1472:	0026      	movs	r6, r4
    1474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1476:	005a      	lsls	r2, r3, #1
    1478:	4b3a      	ldr	r3, [pc, #232]	; (1564 <_i2c_master_set_config+0x358>)
    147a:	0010      	movs	r0, r2
    147c:	4798      	blx	r3
    147e:	0002      	movs	r2, r0
    1480:	000b      	movs	r3, r1
    1482:	4c3c      	ldr	r4, [pc, #240]	; (1574 <_i2c_master_set_config+0x368>)
    1484:	0028      	movs	r0, r5
    1486:	0031      	movs	r1, r6
    1488:	47a0      	blx	r4
    148a:	0003      	movs	r3, r0
    148c:	000c      	movs	r4, r1
    148e:	0018      	movs	r0, r3
    1490:	0021      	movs	r1, r4
    1492:	4c3a      	ldr	r4, [pc, #232]	; (157c <_i2c_master_set_config+0x370>)
    1494:	2200      	movs	r2, #0
    1496:	4b3a      	ldr	r3, [pc, #232]	; (1580 <_i2c_master_set_config+0x374>)
    1498:	47a0      	blx	r4
    149a:	0003      	movs	r3, r0
    149c:	000c      	movs	r4, r1
    149e:	001d      	movs	r5, r3
    14a0:	0026      	movs	r6, r4
    14a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    14a4:	005a      	lsls	r2, r3, #1
    14a6:	4b2f      	ldr	r3, [pc, #188]	; (1564 <_i2c_master_set_config+0x358>)
    14a8:	0010      	movs	r0, r2
    14aa:	4798      	blx	r3
    14ac:	0002      	movs	r2, r0
    14ae:	000b      	movs	r3, r1
    14b0:	4c34      	ldr	r4, [pc, #208]	; (1584 <_i2c_master_set_config+0x378>)
    14b2:	0028      	movs	r0, r5
    14b4:	0031      	movs	r1, r6
    14b6:	47a0      	blx	r4
    14b8:	0003      	movs	r3, r0
    14ba:	000c      	movs	r4, r1
    14bc:	0019      	movs	r1, r3
    14be:	0022      	movs	r2, r4
    14c0:	4b31      	ldr	r3, [pc, #196]	; (1588 <_i2c_master_set_config+0x37c>)
    14c2:	0008      	movs	r0, r1
    14c4:	0011      	movs	r1, r2
    14c6:	4798      	blx	r3
    14c8:	0003      	movs	r3, r0
    14ca:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    14cc:	693b      	ldr	r3, [r7, #16]
    14ce:	689a      	ldr	r2, [r3, #8]
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	049b      	lsls	r3, r3, #18
    14d4:	429a      	cmp	r2, r3
    14d6:	d16a      	bne.n	15ae <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    14d8:	4b22      	ldr	r3, [pc, #136]	; (1564 <_i2c_master_set_config+0x358>)
    14da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    14dc:	4798      	blx	r3
    14de:	4c25      	ldr	r4, [pc, #148]	; (1574 <_i2c_master_set_config+0x368>)
    14e0:	0002      	movs	r2, r0
    14e2:	000b      	movs	r3, r1
    14e4:	47a0      	blx	r4
    14e6:	0003      	movs	r3, r0
    14e8:	000c      	movs	r4, r1
    14ea:	001d      	movs	r5, r3
    14ec:	0026      	movs	r6, r4
    14ee:	4b1d      	ldr	r3, [pc, #116]	; (1564 <_i2c_master_set_config+0x358>)
    14f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    14f2:	4798      	blx	r3
    14f4:	4c1c      	ldr	r4, [pc, #112]	; (1568 <_i2c_master_set_config+0x35c>)
    14f6:	2200      	movs	r2, #0
    14f8:	4b24      	ldr	r3, [pc, #144]	; (158c <_i2c_master_set_config+0x380>)
    14fa:	47a0      	blx	r4
    14fc:	0003      	movs	r3, r0
    14fe:	000c      	movs	r4, r1
    1500:	001a      	movs	r2, r3
    1502:	0023      	movs	r3, r4
    1504:	4c1f      	ldr	r4, [pc, #124]	; (1584 <_i2c_master_set_config+0x378>)
    1506:	0028      	movs	r0, r5
    1508:	0031      	movs	r1, r6
    150a:	47a0      	blx	r4
    150c:	0003      	movs	r3, r0
    150e:	000c      	movs	r4, r1
    1510:	0018      	movs	r0, r3
    1512:	0021      	movs	r1, r4
    1514:	4c19      	ldr	r4, [pc, #100]	; (157c <_i2c_master_set_config+0x370>)
    1516:	2200      	movs	r2, #0
    1518:	4b19      	ldr	r3, [pc, #100]	; (1580 <_i2c_master_set_config+0x374>)
    151a:	47a0      	blx	r4
    151c:	0003      	movs	r3, r0
    151e:	000c      	movs	r4, r1
    1520:	0019      	movs	r1, r3
    1522:	0022      	movs	r2, r4
    1524:	4b18      	ldr	r3, [pc, #96]	; (1588 <_i2c_master_set_config+0x37c>)
    1526:	0008      	movs	r0, r1
    1528:	0011      	movs	r1, r2
    152a:	4798      	blx	r3
    152c:	0003      	movs	r3, r0
    152e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1532:	2b00      	cmp	r3, #0
    1534:	d02e      	beq.n	1594 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1536:	4b16      	ldr	r3, [pc, #88]	; (1590 <_i2c_master_set_config+0x384>)
    1538:	6a79      	ldr	r1, [r7, #36]	; 0x24
    153a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    153c:	4798      	blx	r3
    153e:	0003      	movs	r3, r0
    1540:	1e9a      	subs	r2, r3, #2
    1542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1544:	1ad3      	subs	r3, r2, r3
    1546:	653b      	str	r3, [r7, #80]	; 0x50
    1548:	e031      	b.n	15ae <_i2c_master_set_config+0x3a2>
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	00008739 	.word	0x00008739
    1550:	000011c5 	.word	0x000011c5
    1554:	0000857d 	.word	0x0000857d
    1558:	00009edd 	.word	0x00009edd
    155c:	000011ed 	.word	0x000011ed
    1560:	00009d15 	.word	0x00009d15
    1564:	0000cdf9 	.word	0x0000cdf9
    1568:	0000c1e1 	.word	0x0000c1e1
    156c:	e826d695 	.word	0xe826d695
    1570:	3e112e0b 	.word	0x3e112e0b
    1574:	0000b359 	.word	0x0000b359
    1578:	40240000 	.word	0x40240000
    157c:	0000c6e1 	.word	0x0000c6e1
    1580:	3ff00000 	.word	0x3ff00000
    1584:	0000b979 	.word	0x0000b979
    1588:	0000cd0d 	.word	0x0000cd0d
    158c:	40080000 	.word	0x40080000
    1590:	0000a1b1 	.word	0x0000a1b1
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1596:	005a      	lsls	r2, r3, #1
    1598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    159a:	18d3      	adds	r3, r2, r3
    159c:	1e5a      	subs	r2, r3, #1
    159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15a0:	0059      	lsls	r1, r3, #1
    15a2:	4b1d      	ldr	r3, [pc, #116]	; (1618 <_i2c_master_set_config+0x40c>)
    15a4:	0010      	movs	r0, r2
    15a6:	4798      	blx	r3
    15a8:	0003      	movs	r3, r0
    15aa:	3b01      	subs	r3, #1
    15ac:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15b0:	2bff      	cmp	r3, #255	; 0xff
    15b2:	dc08      	bgt.n	15c6 <_i2c_master_set_config+0x3ba>
    15b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15b6:	2b00      	cmp	r3, #0
    15b8:	db05      	blt.n	15c6 <_i2c_master_set_config+0x3ba>
    15ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15bc:	2bff      	cmp	r3, #255	; 0xff
    15be:	dc02      	bgt.n	15c6 <_i2c_master_set_config+0x3ba>
    15c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15c2:	2b00      	cmp	r3, #0
    15c4:	da06      	bge.n	15d4 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    15c6:	233b      	movs	r3, #59	; 0x3b
    15c8:	2210      	movs	r2, #16
    15ca:	4694      	mov	ip, r2
    15cc:	44bc      	add	ip, r7
    15ce:	4463      	add	r3, ip
    15d0:	2240      	movs	r2, #64	; 0x40
    15d2:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    15d4:	233b      	movs	r3, #59	; 0x3b
    15d6:	2210      	movs	r2, #16
    15d8:	4694      	mov	ip, r2
    15da:	44bc      	add	ip, r7
    15dc:	4463      	add	r3, ip
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	2b40      	cmp	r3, #64	; 0x40
    15e2:	d00e      	beq.n	1602 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    15e6:	22ff      	movs	r2, #255	; 0xff
    15e8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    15ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    15ec:	041b      	lsls	r3, r3, #16
    15ee:	0019      	movs	r1, r3
    15f0:	23ff      	movs	r3, #255	; 0xff
    15f2:	041b      	lsls	r3, r3, #16
    15f4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15f6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    15f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    15fa:	0612      	lsls	r2, r2, #24
    15fc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    15fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1600:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1602:	233b      	movs	r3, #59	; 0x3b
    1604:	2210      	movs	r2, #16
    1606:	4694      	mov	ip, r2
    1608:	44bc      	add	ip, r7
    160a:	4463      	add	r3, ip
    160c:	781b      	ldrb	r3, [r3, #0]
}
    160e:	0018      	movs	r0, r3
    1610:	46bd      	mov	sp, r7
    1612:	b017      	add	sp, #92	; 0x5c
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	0000a1b1 	.word	0x0000a1b1

0000161c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    161c:	b590      	push	{r4, r7, lr}
    161e:	b08b      	sub	sp, #44	; 0x2c
    1620:	af00      	add	r7, sp, #0
    1622:	60f8      	str	r0, [r7, #12]
    1624:	60b9      	str	r1, [r7, #8]
    1626:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	68ba      	ldr	r2, [r7, #8]
    162c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	0018      	movs	r0, r3
    163a:	4b3b      	ldr	r3, [pc, #236]	; (1728 <i2c_master_init+0x10c>)
    163c:	4798      	blx	r3
    163e:	0003      	movs	r3, r0
    1640:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1642:	6a3b      	ldr	r3, [r7, #32]
    1644:	3302      	adds	r3, #2
    1646:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1648:	6a3b      	ldr	r3, [r7, #32]
    164a:	3314      	adds	r3, #20
    164c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    164e:	2201      	movs	r2, #1
    1650:	69fb      	ldr	r3, [r7, #28]
    1652:	409a      	lsls	r2, r3
    1654:	0013      	movs	r3, r2
    1656:	0019      	movs	r1, r3
    1658:	2002      	movs	r0, #2
    165a:	4b34      	ldr	r3, [pc, #208]	; (172c <i2c_master_init+0x110>)
    165c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    165e:	2314      	movs	r3, #20
    1660:	18fb      	adds	r3, r7, r3
    1662:	0018      	movs	r0, r3
    1664:	4b32      	ldr	r3, [pc, #200]	; (1730 <i2c_master_init+0x114>)
    1666:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	7b1a      	ldrb	r2, [r3, #12]
    166c:	2314      	movs	r3, #20
    166e:	18fb      	adds	r3, r7, r3
    1670:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1672:	69bb      	ldr	r3, [r7, #24]
    1674:	b2db      	uxtb	r3, r3
    1676:	2214      	movs	r2, #20
    1678:	18ba      	adds	r2, r7, r2
    167a:	0011      	movs	r1, r2
    167c:	0018      	movs	r0, r3
    167e:	4b2d      	ldr	r3, [pc, #180]	; (1734 <i2c_master_init+0x118>)
    1680:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1682:	69bb      	ldr	r3, [r7, #24]
    1684:	b2db      	uxtb	r3, r3
    1686:	0018      	movs	r0, r3
    1688:	4b2b      	ldr	r3, [pc, #172]	; (1738 <i2c_master_init+0x11c>)
    168a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	7b1b      	ldrb	r3, [r3, #12]
    1690:	2100      	movs	r1, #0
    1692:	0018      	movs	r0, r3
    1694:	4b29      	ldr	r3, [pc, #164]	; (173c <i2c_master_init+0x120>)
    1696:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	2202      	movs	r2, #2
    169e:	4013      	ands	r3, r2
    16a0:	d001      	beq.n	16a6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    16a2:	231c      	movs	r3, #28
    16a4:	e03b      	b.n	171e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    16a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	2201      	movs	r2, #1
    16ac:	4013      	ands	r3, r2
    16ae:	d001      	beq.n	16b4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    16b0:	2305      	movs	r3, #5
    16b2:	e034      	b.n	171e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	2217      	movs	r2, #23
    16ba:	18bc      	adds	r4, r7, r2
    16bc:	0018      	movs	r0, r3
    16be:	4b1a      	ldr	r3, [pc, #104]	; (1728 <i2c_master_init+0x10c>)
    16c0:	4798      	blx	r3
    16c2:	0003      	movs	r3, r0
    16c4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    16c6:	4a1e      	ldr	r2, [pc, #120]	; (1740 <i2c_master_init+0x124>)
    16c8:	2317      	movs	r3, #23
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	0011      	movs	r1, r2
    16d0:	0018      	movs	r0, r3
    16d2:	4b1c      	ldr	r3, [pc, #112]	; (1744 <i2c_master_init+0x128>)
    16d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16d6:	2317      	movs	r3, #23
    16d8:	18fb      	adds	r3, r7, r3
    16da:	781a      	ldrb	r2, [r3, #0]
    16dc:	4b1a      	ldr	r3, [pc, #104]	; (1748 <i2c_master_init+0x12c>)
    16de:	0092      	lsls	r2, r2, #2
    16e0:	68f9      	ldr	r1, [r7, #12]
    16e2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    16e4:	68fb      	ldr	r3, [r7, #12]
    16e6:	2200      	movs	r2, #0
    16e8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    16ea:	68fb      	ldr	r3, [r7, #12]
    16ec:	2200      	movs	r2, #0
    16ee:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    16f0:	68fb      	ldr	r3, [r7, #12]
    16f2:	2200      	movs	r2, #0
    16f4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	2200      	movs	r2, #0
    16fa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	2225      	movs	r2, #37	; 0x25
    1700:	2100      	movs	r1, #0
    1702:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	2200      	movs	r2, #0
    1708:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    170c:	2214      	movs	r2, #20
    170e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	68fb      	ldr	r3, [r7, #12]
    1714:	0011      	movs	r1, r2
    1716:	0018      	movs	r0, r3
    1718:	4b0c      	ldr	r3, [pc, #48]	; (174c <i2c_master_init+0x130>)
    171a:	4798      	blx	r3
    171c:	0003      	movs	r3, r0
}
    171e:	0018      	movs	r0, r3
    1720:	46bd      	mov	sp, r7
    1722:	b00b      	add	sp, #44	; 0x2c
    1724:	bd90      	pop	{r4, r7, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00008739 	.word	0x00008739
    172c:	00001169 	.word	0x00001169
    1730:	00001151 	.word	0x00001151
    1734:	00009ba9 	.word	0x00009ba9
    1738:	00009bed 	.word	0x00009bed
    173c:	000084f1 	.word	0x000084f1
    1740:	00001ba1 	.word	0x00001ba1
    1744:	0000879d 	.word	0x0000879d
    1748:	20005514 	.word	0x20005514
    174c:	0000120d 	.word	0x0000120d

00001750 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1750:	b580      	push	{r7, lr}
    1752:	b084      	sub	sp, #16
    1754:	af00      	add	r7, sp, #0
    1756:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    175e:	230e      	movs	r3, #14
    1760:	18fb      	adds	r3, r7, r3
    1762:	2200      	movs	r2, #0
    1764:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1766:	e00f      	b.n	1788 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1768:	230e      	movs	r3, #14
    176a:	18fb      	adds	r3, r7, r3
    176c:	220e      	movs	r2, #14
    176e:	18ba      	adds	r2, r7, r2
    1770:	8812      	ldrh	r2, [r2, #0]
    1772:	3201      	adds	r2, #1
    1774:	801a      	strh	r2, [r3, #0]
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	891b      	ldrh	r3, [r3, #8]
    177a:	220e      	movs	r2, #14
    177c:	18ba      	adds	r2, r7, r2
    177e:	8812      	ldrh	r2, [r2, #0]
    1780:	429a      	cmp	r2, r3
    1782:	d301      	bcc.n	1788 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1784:	2312      	movs	r3, #18
    1786:	e00e      	b.n	17a6 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1788:	68bb      	ldr	r3, [r7, #8]
    178a:	7e1b      	ldrb	r3, [r3, #24]
    178c:	b2db      	uxtb	r3, r3
    178e:	001a      	movs	r2, r3
    1790:	2301      	movs	r3, #1
    1792:	4013      	ands	r3, r2
    1794:	d106      	bne.n	17a4 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1796:	68bb      	ldr	r3, [r7, #8]
    1798:	7e1b      	ldrb	r3, [r3, #24]
    179a:	b2db      	uxtb	r3, r3
    179c:	001a      	movs	r2, r3
    179e:	2302      	movs	r3, #2
    17a0:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17a2:	d0e1      	beq.n	1768 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    17a4:	2300      	movs	r3, #0
}
    17a6:	0018      	movs	r0, r3
    17a8:	46bd      	mov	sp, r7
    17aa:	b004      	add	sp, #16
    17ac:	bd80      	pop	{r7, pc}
	...

000017b0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    17b0:	b590      	push	{r4, r7, lr}
    17b2:	b085      	sub	sp, #20
    17b4:	af00      	add	r7, sp, #0
    17b6:	6078      	str	r0, [r7, #4]
    17b8:	000a      	movs	r2, r1
    17ba:	1cfb      	adds	r3, r7, #3
    17bc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17be:	687b      	ldr	r3, [r7, #4]
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17c4:	68fb      	ldr	r3, [r7, #12]
    17c6:	685b      	ldr	r3, [r3, #4]
    17c8:	2280      	movs	r2, #128	; 0x80
    17ca:	02d2      	lsls	r2, r2, #11
    17cc:	431a      	orrs	r2, r3
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    17d2:	1cfb      	adds	r3, r7, #3
    17d4:	781a      	ldrb	r2, [r3, #0]
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17da:	230b      	movs	r3, #11
    17dc:	18fc      	adds	r4, r7, r3
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	0018      	movs	r0, r3
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <_i2c_master_send_hs_master_code+0x50>)
    17e4:	4798      	blx	r3
    17e6:	0003      	movs	r3, r0
    17e8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	2201      	movs	r2, #1
    17ee:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    17f0:	230b      	movs	r3, #11
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	781b      	ldrb	r3, [r3, #0]
}
    17f6:	0018      	movs	r0, r3
    17f8:	46bd      	mov	sp, r7
    17fa:	b005      	add	sp, #20
    17fc:	bd90      	pop	{r4, r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	00001751 	.word	0x00001751

00001804 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1804:	b580      	push	{r7, lr}
    1806:	b084      	sub	sp, #16
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	69db      	ldr	r3, [r3, #28]
    1816:	2207      	movs	r2, #7
    1818:	4013      	ands	r3, r2
    181a:	1e5a      	subs	r2, r3, #1
    181c:	4193      	sbcs	r3, r2
    181e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1820:	0018      	movs	r0, r3
    1822:	46bd      	mov	sp, r7
    1824:	b004      	add	sp, #16
    1826:	bd80      	pop	{r7, pc}

00001828 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1828:	b580      	push	{r7, lr}
    182a:	b082      	sub	sp, #8
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1830:	46c0      	nop			; (mov r8, r8)
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	0018      	movs	r0, r3
    1836:	4b04      	ldr	r3, [pc, #16]	; (1848 <_i2c_master_wait_for_sync+0x20>)
    1838:	4798      	blx	r3
    183a:	1e03      	subs	r3, r0, #0
    183c:	d1f9      	bne.n	1832 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	46bd      	mov	sp, r7
    1842:	b002      	add	sp, #8
    1844:	bd80      	pop	{r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	00001805 	.word	0x00001805

0000184c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	011b      	lsls	r3, r3, #4
    1860:	0fdb      	lsrs	r3, r3, #31
    1862:	b2db      	uxtb	r3, r3
    1864:	001a      	movs	r2, r3
    1866:	230b      	movs	r3, #11
    1868:	18fb      	adds	r3, r7, r3
    186a:	1e51      	subs	r1, r2, #1
    186c:	418a      	sbcs	r2, r1
    186e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1870:	2308      	movs	r3, #8
    1872:	18fb      	adds	r3, r7, r3
    1874:	687a      	ldr	r2, [r7, #4]
    1876:	8b52      	ldrh	r2, [r2, #26]
    1878:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	8b9b      	ldrh	r3, [r3, #28]
    187e:	b29a      	uxth	r2, r3
    1880:	2308      	movs	r3, #8
    1882:	18fb      	adds	r3, r7, r3
    1884:	2108      	movs	r1, #8
    1886:	1879      	adds	r1, r7, r1
    1888:	8809      	ldrh	r1, [r1, #0]
    188a:	1a8a      	subs	r2, r1, r2
    188c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	8b9b      	ldrh	r3, [r3, #28]
    1892:	b29b      	uxth	r3, r3
    1894:	3b01      	subs	r3, #1
    1896:	b29a      	uxth	r2, r3
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    189c:	230b      	movs	r3, #11
    189e:	18fb      	adds	r3, r7, r3
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d010      	beq.n	18c8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	7adb      	ldrb	r3, [r3, #11]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d01c      	beq.n	18e8 <_i2c_master_read+0x9c>
    18ae:	687b      	ldr	r3, [r7, #4]
    18b0:	8b9b      	ldrh	r3, [r3, #28]
    18b2:	b29b      	uxth	r3, r3
    18b4:	2b01      	cmp	r3, #1
    18b6:	d117      	bne.n	18e8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	685b      	ldr	r3, [r3, #4]
    18bc:	2280      	movs	r2, #128	; 0x80
    18be:	02d2      	lsls	r2, r2, #11
    18c0:	431a      	orrs	r2, r3
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	605a      	str	r2, [r3, #4]
    18c6:	e00f      	b.n	18e8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	7adb      	ldrb	r3, [r3, #11]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d00b      	beq.n	18e8 <_i2c_master_read+0x9c>
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	8b9b      	ldrh	r3, [r3, #28]
    18d4:	b29b      	uxth	r3, r3
    18d6:	2b00      	cmp	r3, #0
    18d8:	d106      	bne.n	18e8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	685b      	ldr	r3, [r3, #4]
    18de:	2280      	movs	r2, #128	; 0x80
    18e0:	02d2      	lsls	r2, r2, #11
    18e2:	431a      	orrs	r2, r3
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	8b9b      	ldrh	r3, [r3, #28]
    18ec:	b29b      	uxth	r3, r3
    18ee:	2b00      	cmp	r3, #0
    18f0:	d10e      	bne.n	1910 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	7a9b      	ldrb	r3, [r3, #10]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d00a      	beq.n	1910 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	0018      	movs	r0, r3
    18fe:	4b0e      	ldr	r3, [pc, #56]	; (1938 <_i2c_master_read+0xec>)
    1900:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	22c0      	movs	r2, #192	; 0xc0
    1908:	0292      	lsls	r2, r2, #10
    190a:	431a      	orrs	r2, r3
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	0018      	movs	r0, r3
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <_i2c_master_read+0xec>)
    1916:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	6a1a      	ldr	r2, [r3, #32]
    191c:	2308      	movs	r3, #8
    191e:	18fb      	adds	r3, r7, r3
    1920:	881b      	ldrh	r3, [r3, #0]
    1922:	18d3      	adds	r3, r2, r3
    1924:	68fa      	ldr	r2, [r7, #12]
    1926:	2128      	movs	r1, #40	; 0x28
    1928:	5c52      	ldrb	r2, [r2, r1]
    192a:	b2d2      	uxtb	r2, r2
    192c:	701a      	strb	r2, [r3, #0]
}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	46bd      	mov	sp, r7
    1932:	b004      	add	sp, #16
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00001829 	.word	0x00001829

0000193c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    193c:	b580      	push	{r7, lr}
    193e:	b084      	sub	sp, #16
    1940:	af00      	add	r7, sp, #0
    1942:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	8b5b      	ldrh	r3, [r3, #26]
    194e:	b29b      	uxth	r3, r3
    1950:	001a      	movs	r2, r3
    1952:	2304      	movs	r3, #4
    1954:	4013      	ands	r3, r2
    1956:	d004      	beq.n	1962 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	2225      	movs	r2, #37	; 0x25
    195c:	211e      	movs	r1, #30
    195e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1960:	e024      	b.n	19ac <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1962:	230a      	movs	r3, #10
    1964:	18fb      	adds	r3, r7, r3
    1966:	687a      	ldr	r2, [r7, #4]
    1968:	8b52      	ldrh	r2, [r2, #26]
    196a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	8b9b      	ldrh	r3, [r3, #28]
    1970:	b29a      	uxth	r2, r3
    1972:	230a      	movs	r3, #10
    1974:	18fb      	adds	r3, r7, r3
    1976:	210a      	movs	r1, #10
    1978:	1879      	adds	r1, r7, r1
    197a:	8809      	ldrh	r1, [r1, #0]
    197c:	1a8a      	subs	r2, r1, r2
    197e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	8b9b      	ldrh	r3, [r3, #28]
    1984:	b29b      	uxth	r3, r3
    1986:	3b01      	subs	r3, #1
    1988:	b29a      	uxth	r2, r3
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    198e:	687b      	ldr	r3, [r7, #4]
    1990:	0018      	movs	r0, r3
    1992:	4b08      	ldr	r3, [pc, #32]	; (19b4 <_i2c_master_write+0x78>)
    1994:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	6a1a      	ldr	r2, [r3, #32]
    199a:	230a      	movs	r3, #10
    199c:	18fb      	adds	r3, r7, r3
    199e:	881b      	ldrh	r3, [r3, #0]
    19a0:	18d3      	adds	r3, r2, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	b2d9      	uxtb	r1, r3
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	2228      	movs	r2, #40	; 0x28
    19aa:	5499      	strb	r1, [r3, r2]
}
    19ac:	46bd      	mov	sp, r7
    19ae:	b004      	add	sp, #16
    19b0:	bd80      	pop	{r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00001829 	.word	0x00001829

000019b8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	b084      	sub	sp, #16
    19bc:	af00      	add	r7, sp, #0
    19be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	7e1b      	ldrb	r3, [r3, #24]
    19ca:	b2db      	uxtb	r3, r3
    19cc:	001a      	movs	r2, r3
    19ce:	2301      	movs	r3, #1
    19d0:	4013      	ands	r3, r2
    19d2:	d02b      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    19d4:	68fb      	ldr	r3, [r7, #12]
    19d6:	2201      	movs	r2, #1
    19d8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	8b5b      	ldrh	r3, [r3, #26]
    19de:	b29b      	uxth	r3, r3
    19e0:	001a      	movs	r2, r3
    19e2:	2302      	movs	r3, #2
    19e4:	4013      	ands	r3, r2
    19e6:	d004      	beq.n	19f2 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	2225      	movs	r2, #37	; 0x25
    19ec:	2141      	movs	r1, #65	; 0x41
    19ee:	5499      	strb	r1, [r3, r2]
    19f0:	e01c      	b.n	1a2c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	8b5b      	ldrh	r3, [r3, #26]
    19f6:	b29b      	uxth	r3, r3
    19f8:	001a      	movs	r2, r3
    19fa:	2304      	movs	r3, #4
    19fc:	4013      	ands	r3, r2
    19fe:	d015      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	2225      	movs	r2, #37	; 0x25
    1a04:	2118      	movs	r1, #24
    1a06:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	2200      	movs	r2, #0
    1a0c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	7a9b      	ldrb	r3, [r3, #10]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d00a      	beq.n	1a2c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1a16:	687b      	ldr	r3, [r7, #4]
    1a18:	0018      	movs	r0, r3
    1a1a:	4b13      	ldr	r3, [pc, #76]	; (1a68 <_i2c_master_async_address_response+0xb0>)
    1a1c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	685b      	ldr	r3, [r3, #4]
    1a22:	22c0      	movs	r2, #192	; 0xc0
    1a24:	0292      	lsls	r2, r2, #10
    1a26:	431a      	orrs	r2, r3
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	8b9b      	ldrh	r3, [r3, #28]
    1a30:	b29a      	uxth	r2, r3
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	2225      	movs	r2, #37	; 0x25
    1a3a:	5c9b      	ldrb	r3, [r3, r2]
    1a3c:	b2db      	uxtb	r3, r3
    1a3e:	2b05      	cmp	r3, #5
    1a40:	d10e      	bne.n	1a60 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	2224      	movs	r2, #36	; 0x24
    1a46:	5c9b      	ldrb	r3, [r3, r2]
    1a48:	b2db      	uxtb	r3, r3
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d104      	bne.n	1a58 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	0018      	movs	r0, r3
    1a52:	4b06      	ldr	r3, [pc, #24]	; (1a6c <_i2c_master_async_address_response+0xb4>)
    1a54:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1a56:	e003      	b.n	1a60 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	0018      	movs	r0, r3
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <_i2c_master_async_address_response+0xb8>)
    1a5e:	4798      	blx	r3
}
    1a60:	46c0      	nop			; (mov r8, r8)
    1a62:	46bd      	mov	sp, r7
    1a64:	b004      	add	sp, #16
    1a66:	bd80      	pop	{r7, pc}
    1a68:	00001829 	.word	0x00001829
    1a6c:	0000193d 	.word	0x0000193d
    1a70:	0000184d 	.word	0x0000184d

00001a74 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b084      	sub	sp, #16
    1a78:	af00      	add	r7, sp, #0
    1a7a:	60f8      	str	r0, [r7, #12]
    1a7c:	60b9      	str	r1, [r7, #8]
    1a7e:	1dfb      	adds	r3, r7, #7
    1a80:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    1a82:	1dfb      	adds	r3, r7, #7
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	68fa      	ldr	r2, [r7, #12]
    1a88:	3302      	adds	r3, #2
    1a8a:	009b      	lsls	r3, r3, #2
    1a8c:	18d3      	adds	r3, r2, r3
    1a8e:	3304      	adds	r3, #4
    1a90:	68ba      	ldr	r2, [r7, #8]
    1a92:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    1a94:	68fb      	ldr	r3, [r7, #12]
    1a96:	7e1b      	ldrb	r3, [r3, #24]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	b25a      	sxtb	r2, r3
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	781b      	ldrb	r3, [r3, #0]
    1aa0:	2101      	movs	r1, #1
    1aa2:	4099      	lsls	r1, r3
    1aa4:	000b      	movs	r3, r1
    1aa6:	b25b      	sxtb	r3, r3
    1aa8:	4313      	orrs	r3, r2
    1aaa:	b25b      	sxtb	r3, r3
    1aac:	b2da      	uxtb	r2, r3
    1aae:	68fb      	ldr	r3, [r7, #12]
    1ab0:	761a      	strb	r2, [r3, #24]
}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46bd      	mov	sp, r7
    1ab6:	b004      	add	sp, #16
    1ab8:	bd80      	pop	{r7, pc}
	...

00001abc <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1abc:	b580      	push	{r7, lr}
    1abe:	b084      	sub	sp, #16
    1ac0:	af00      	add	r7, sp, #0
    1ac2:	6078      	str	r0, [r7, #4]
    1ac4:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	681b      	ldr	r3, [r3, #0]
    1aca:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1acc:	683b      	ldr	r3, [r7, #0]
    1ace:	7a5b      	ldrb	r3, [r3, #9]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d006      	beq.n	1ae2 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	7a9a      	ldrb	r2, [r3, #10]
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	0011      	movs	r1, r2
    1adc:	0018      	movs	r0, r3
    1ade:	4b1e      	ldr	r3, [pc, #120]	; (1b58 <_i2c_master_write_packet+0x9c>)
    1ae0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ae2:	68fb      	ldr	r3, [r7, #12]
    1ae4:	685b      	ldr	r3, [r3, #4]
    1ae6:	4a1d      	ldr	r2, [pc, #116]	; (1b5c <_i2c_master_write_packet+0xa0>)
    1ae8:	401a      	ands	r2, r3
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	685a      	ldr	r2, [r3, #4]
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    1af6:	683b      	ldr	r3, [r7, #0]
    1af8:	885a      	ldrh	r2, [r3, #2]
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	2224      	movs	r2, #36	; 0x24
    1b02:	2100      	movs	r1, #0
    1b04:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2225      	movs	r2, #37	; 0x25
    1b0a:	2105      	movs	r1, #5
    1b0c:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    1b0e:	68fb      	ldr	r3, [r7, #12]
    1b10:	2203      	movs	r2, #3
    1b12:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    1b14:	683b      	ldr	r3, [r7, #0]
    1b16:	7a1b      	ldrb	r3, [r3, #8]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d00d      	beq.n	1b38 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	881b      	ldrh	r3, [r3, #0]
    1b20:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b22:	683b      	ldr	r3, [r7, #0]
    1b24:	7a5b      	ldrb	r3, [r3, #9]
    1b26:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b28:	4313      	orrs	r3, r2
    1b2a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1b2c:	2380      	movs	r3, #128	; 0x80
    1b2e:	021b      	lsls	r3, r3, #8
    1b30:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b32:	68fb      	ldr	r3, [r7, #12]
    1b34:	625a      	str	r2, [r3, #36]	; 0x24
    1b36:	e009      	b.n	1b4c <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b38:	683b      	ldr	r3, [r7, #0]
    1b3a:	881b      	ldrh	r3, [r3, #0]
    1b3c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	7a5b      	ldrb	r3, [r3, #9]
    1b42:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1b44:	4313      	orrs	r3, r2
    1b46:	001a      	movs	r2, r3
    1b48:	68fb      	ldr	r3, [r7, #12]
    1b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    1b4c:	2300      	movs	r3, #0
}
    1b4e:	0018      	movs	r0, r3
    1b50:	46bd      	mov	sp, r7
    1b52:	b004      	add	sp, #16
    1b54:	bd80      	pop	{r7, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	000017b1 	.word	0x000017b1
    1b5c:	fffbffff 	.word	0xfffbffff

00001b60 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	6078      	str	r0, [r7, #4]
    1b68:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	8b9b      	ldrh	r3, [r3, #28]
    1b6e:	b29b      	uxth	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	d001      	beq.n	1b78 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    1b74:	2305      	movs	r3, #5
    1b76:	e00c      	b.n	1b92 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	2201      	movs	r2, #1
    1b7c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	2201      	movs	r2, #1
    1b82:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    1b84:	683a      	ldr	r2, [r7, #0]
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	0011      	movs	r1, r2
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b03      	ldr	r3, [pc, #12]	; (1b9c <i2c_master_write_packet_job+0x3c>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
}
    1b92:	0018      	movs	r0, r3
    1b94:	46bd      	mov	sp, r7
    1b96:	b002      	add	sp, #8
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	00001abd 	.word	0x00001abd

00001ba0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b086      	sub	sp, #24
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	0002      	movs	r2, r0
    1ba8:	1dfb      	adds	r3, r7, #7
    1baa:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1bac:	1dfb      	adds	r3, r7, #7
    1bae:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1bb0:	4b93      	ldr	r3, [pc, #588]	; (1e00 <_i2c_master_interrupt_handler+0x260>)
    1bb2:	0092      	lsls	r2, r2, #2
    1bb4:	58d3      	ldr	r3, [r2, r3]
    1bb6:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1bb8:	697b      	ldr	r3, [r7, #20]
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1bbe:	693b      	ldr	r3, [r7, #16]
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	011b      	lsls	r3, r3, #4
    1bc4:	0fdb      	lsrs	r3, r3, #31
    1bc6:	b2db      	uxtb	r3, r3
    1bc8:	001a      	movs	r2, r3
    1bca:	230f      	movs	r3, #15
    1bcc:	18fb      	adds	r3, r7, r3
    1bce:	1e51      	subs	r1, r2, #1
    1bd0:	418a      	sbcs	r2, r1
    1bd2:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1bd4:	230e      	movs	r3, #14
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	697a      	ldr	r2, [r7, #20]
    1bda:	7e52      	ldrb	r2, [r2, #25]
    1bdc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1bde:	697b      	ldr	r3, [r7, #20]
    1be0:	7e1b      	ldrb	r3, [r3, #24]
    1be2:	b2da      	uxtb	r2, r3
    1be4:	230e      	movs	r3, #14
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	210e      	movs	r1, #14
    1bea:	1879      	adds	r1, r7, r1
    1bec:	7809      	ldrb	r1, [r1, #0]
    1bee:	400a      	ands	r2, r1
    1bf0:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1bf2:	697b      	ldr	r3, [r7, #20]
    1bf4:	8b5b      	ldrh	r3, [r3, #26]
    1bf6:	b29b      	uxth	r3, r3
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d109      	bne.n	1c10 <_i2c_master_interrupt_handler+0x70>
    1bfc:	697b      	ldr	r3, [r7, #20]
    1bfe:	8b9b      	ldrh	r3, [r3, #28]
    1c00:	b29b      	uxth	r3, r3
    1c02:	2b00      	cmp	r3, #0
    1c04:	d004      	beq.n	1c10 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1c06:	697b      	ldr	r3, [r7, #20]
    1c08:	0018      	movs	r0, r3
    1c0a:	4b7e      	ldr	r3, [pc, #504]	; (1e04 <_i2c_master_interrupt_handler+0x264>)
    1c0c:	4798      	blx	r3
    1c0e:	e070      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c10:	697b      	ldr	r3, [r7, #20]
    1c12:	8b5b      	ldrh	r3, [r3, #26]
    1c14:	b29b      	uxth	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	d039      	beq.n	1c8e <_i2c_master_interrupt_handler+0xee>
    1c1a:	697b      	ldr	r3, [r7, #20]
    1c1c:	8b9b      	ldrh	r3, [r3, #28]
    1c1e:	b29b      	uxth	r3, r3
    1c20:	2b00      	cmp	r3, #0
    1c22:	d134      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1c24:	697b      	ldr	r3, [r7, #20]
    1c26:	2225      	movs	r2, #37	; 0x25
    1c28:	5c9b      	ldrb	r3, [r3, r2]
    1c2a:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c2c:	2b05      	cmp	r3, #5
    1c2e:	d12e      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c30:	697b      	ldr	r3, [r7, #20]
    1c32:	2224      	movs	r2, #36	; 0x24
    1c34:	5c9b      	ldrb	r3, [r3, r2]
    1c36:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d128      	bne.n	1c8e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1c3c:	693b      	ldr	r3, [r7, #16]
    1c3e:	2203      	movs	r2, #3
    1c40:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1c42:	697b      	ldr	r3, [r7, #20]
    1c44:	2200      	movs	r2, #0
    1c46:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	2225      	movs	r2, #37	; 0x25
    1c4c:	2100      	movs	r1, #0
    1c4e:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1c50:	697b      	ldr	r3, [r7, #20]
    1c52:	7a9b      	ldrb	r3, [r3, #10]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d00b      	beq.n	1c70 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1c58:	697b      	ldr	r3, [r7, #20]
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b6a      	ldr	r3, [pc, #424]	; (1e08 <_i2c_master_interrupt_handler+0x268>)
    1c5e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c60:	693b      	ldr	r3, [r7, #16]
    1c62:	685b      	ldr	r3, [r3, #4]
    1c64:	22c0      	movs	r2, #192	; 0xc0
    1c66:	0292      	lsls	r2, r2, #10
    1c68:	431a      	orrs	r2, r3
    1c6a:	693b      	ldr	r3, [r7, #16]
    1c6c:	605a      	str	r2, [r3, #4]
    1c6e:	e002      	b.n	1c76 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c70:	693b      	ldr	r3, [r7, #16]
    1c72:	2201      	movs	r2, #1
    1c74:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c76:	230e      	movs	r3, #14
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	2201      	movs	r2, #1
    1c7e:	4013      	ands	r3, r2
    1c80:	d037      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c82:	697b      	ldr	r3, [r7, #20]
    1c84:	68db      	ldr	r3, [r3, #12]
    1c86:	697a      	ldr	r2, [r7, #20]
    1c88:	0010      	movs	r0, r2
    1c8a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c8c:	e031      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1c8e:	697b      	ldr	r3, [r7, #20]
    1c90:	8b5b      	ldrh	r3, [r3, #26]
    1c92:	b29b      	uxth	r3, r3
    1c94:	2b00      	cmp	r3, #0
    1c96:	d02c      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
    1c98:	697b      	ldr	r3, [r7, #20]
    1c9a:	8b9b      	ldrh	r3, [r3, #28]
    1c9c:	b29b      	uxth	r3, r3
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d027      	beq.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1ca2:	693b      	ldr	r3, [r7, #16]
    1ca4:	8b5b      	ldrh	r3, [r3, #26]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	001a      	movs	r2, r3
    1caa:	2320      	movs	r3, #32
    1cac:	4013      	ands	r3, r2
    1cae:	d111      	bne.n	1cd4 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cb0:	230f      	movs	r3, #15
    1cb2:	18fb      	adds	r3, r7, r3
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	2201      	movs	r2, #1
    1cb8:	4053      	eors	r3, r2
    1cba:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d104      	bne.n	1cca <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1cc0:	697b      	ldr	r3, [r7, #20]
    1cc2:	8b9b      	ldrh	r3, [r3, #28]
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	2b01      	cmp	r3, #1
    1cc8:	d004      	beq.n	1cd4 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1cca:	697b      	ldr	r3, [r7, #20]
    1ccc:	2225      	movs	r2, #37	; 0x25
    1cce:	2141      	movs	r1, #65	; 0x41
    1cd0:	5499      	strb	r1, [r3, r2]
    1cd2:	e00e      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1cd4:	697b      	ldr	r3, [r7, #20]
    1cd6:	2224      	movs	r2, #36	; 0x24
    1cd8:	5c9b      	ldrb	r3, [r3, r2]
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d104      	bne.n	1cea <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1ce0:	697b      	ldr	r3, [r7, #20]
    1ce2:	0018      	movs	r0, r3
    1ce4:	4b49      	ldr	r3, [pc, #292]	; (1e0c <_i2c_master_interrupt_handler+0x26c>)
    1ce6:	4798      	blx	r3
    1ce8:	e003      	b.n	1cf2 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1cea:	697b      	ldr	r3, [r7, #20]
    1cec:	0018      	movs	r0, r3
    1cee:	4b48      	ldr	r3, [pc, #288]	; (1e10 <_i2c_master_interrupt_handler+0x270>)
    1cf0:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1cf2:	697b      	ldr	r3, [r7, #20]
    1cf4:	8b5b      	ldrh	r3, [r3, #26]
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d047      	beq.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
    1cfc:	697b      	ldr	r3, [r7, #20]
    1cfe:	8b9b      	ldrh	r3, [r3, #28]
    1d00:	b29b      	uxth	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	d142      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1d06:	697b      	ldr	r3, [r7, #20]
    1d08:	2225      	movs	r2, #37	; 0x25
    1d0a:	5c9b      	ldrb	r3, [r3, r2]
    1d0c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1d0e:	2b05      	cmp	r3, #5
    1d10:	d13c      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1d12:	697b      	ldr	r3, [r7, #20]
    1d14:	2224      	movs	r2, #36	; 0x24
    1d16:	5c9b      	ldrb	r3, [r3, r2]
    1d18:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1d1a:	2b01      	cmp	r3, #1
    1d1c:	d136      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1d1e:	693b      	ldr	r3, [r7, #16]
    1d20:	7e1b      	ldrb	r3, [r3, #24]
    1d22:	b2db      	uxtb	r3, r3
    1d24:	001a      	movs	r2, r3
    1d26:	2302      	movs	r3, #2
    1d28:	4013      	ands	r3, r2
    1d2a:	d002      	beq.n	1d32 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d2c:	693b      	ldr	r3, [r7, #16]
    1d2e:	2202      	movs	r2, #2
    1d30:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1d32:	693b      	ldr	r3, [r7, #16]
    1d34:	2203      	movs	r2, #3
    1d36:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1d38:	697b      	ldr	r3, [r7, #20]
    1d3a:	2200      	movs	r2, #0
    1d3c:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1d3e:	697b      	ldr	r3, [r7, #20]
    1d40:	2225      	movs	r2, #37	; 0x25
    1d42:	2100      	movs	r1, #0
    1d44:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1d46:	230e      	movs	r3, #14
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	2202      	movs	r2, #2
    1d4e:	4013      	ands	r3, r2
    1d50:	d00b      	beq.n	1d6a <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1d52:	697b      	ldr	r3, [r7, #20]
    1d54:	2224      	movs	r2, #36	; 0x24
    1d56:	5c9b      	ldrb	r3, [r3, r2]
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	2b01      	cmp	r3, #1
    1d5c:	d105      	bne.n	1d6a <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1d5e:	697b      	ldr	r3, [r7, #20]
    1d60:	691b      	ldr	r3, [r3, #16]
    1d62:	697a      	ldr	r2, [r7, #20]
    1d64:	0010      	movs	r0, r2
    1d66:	4798      	blx	r3
    1d68:	e010      	b.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1d6a:	230e      	movs	r3, #14
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	781b      	ldrb	r3, [r3, #0]
    1d70:	2201      	movs	r2, #1
    1d72:	4013      	ands	r3, r2
    1d74:	d00a      	beq.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1d76:	697b      	ldr	r3, [r7, #20]
    1d78:	2224      	movs	r2, #36	; 0x24
    1d7a:	5c9b      	ldrb	r3, [r3, r2]
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d104      	bne.n	1d8c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1d82:	697b      	ldr	r3, [r7, #20]
    1d84:	68db      	ldr	r3, [r3, #12]
    1d86:	697a      	ldr	r2, [r7, #20]
    1d88:	0010      	movs	r0, r2
    1d8a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1d8c:	697b      	ldr	r3, [r7, #20]
    1d8e:	2225      	movs	r2, #37	; 0x25
    1d90:	5c9b      	ldrb	r3, [r3, r2]
    1d92:	b2db      	uxtb	r3, r3
    1d94:	2b05      	cmp	r3, #5
    1d96:	d02e      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
    1d98:	697b      	ldr	r3, [r7, #20]
    1d9a:	2225      	movs	r2, #37	; 0x25
    1d9c:	5c9b      	ldrb	r3, [r3, r2]
    1d9e:	b2db      	uxtb	r3, r3
    1da0:	2b00      	cmp	r3, #0
    1da2:	d028      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1da4:	693b      	ldr	r3, [r7, #16]
    1da6:	2203      	movs	r2, #3
    1da8:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1daa:	697b      	ldr	r3, [r7, #20]
    1dac:	2200      	movs	r2, #0
    1dae:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1db0:	697b      	ldr	r3, [r7, #20]
    1db2:	2200      	movs	r2, #0
    1db4:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1db6:	697b      	ldr	r3, [r7, #20]
    1db8:	2225      	movs	r2, #37	; 0x25
    1dba:	5c9b      	ldrb	r3, [r3, r2]
    1dbc:	b2db      	uxtb	r3, r3
    1dbe:	2b41      	cmp	r3, #65	; 0x41
    1dc0:	d00e      	beq.n	1de0 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1dc2:	697b      	ldr	r3, [r7, #20]
    1dc4:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d00a      	beq.n	1de0 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1dca:	697b      	ldr	r3, [r7, #20]
    1dcc:	0018      	movs	r0, r3
    1dce:	4b0e      	ldr	r3, [pc, #56]	; (1e08 <_i2c_master_interrupt_handler+0x268>)
    1dd0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1dd2:	693b      	ldr	r3, [r7, #16]
    1dd4:	685b      	ldr	r3, [r3, #4]
    1dd6:	22e0      	movs	r2, #224	; 0xe0
    1dd8:	02d2      	lsls	r2, r2, #11
    1dda:	431a      	orrs	r2, r3
    1ddc:	693b      	ldr	r3, [r7, #16]
    1dde:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1de0:	230e      	movs	r3, #14
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2204      	movs	r2, #4
    1de8:	4013      	ands	r3, r2
    1dea:	d004      	beq.n	1df6 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1dec:	697b      	ldr	r3, [r7, #20]
    1dee:	695b      	ldr	r3, [r3, #20]
    1df0:	697a      	ldr	r2, [r7, #20]
    1df2:	0010      	movs	r0, r2
    1df4:	4798      	blx	r3
		}
	}
}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	46bd      	mov	sp, r7
    1dfa:	b006      	add	sp, #24
    1dfc:	bd80      	pop	{r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20005514 	.word	0x20005514
    1e04:	000019b9 	.word	0x000019b9
    1e08:	00001829 	.word	0x00001829
    1e0c:	0000193d 	.word	0x0000193d
    1e10:	0000184d 	.word	0x0000184d

00001e14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	60f8      	str	r0, [r7, #12]
    1e1c:	60b9      	str	r1, [r7, #8]
    1e1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    1e20:	68fb      	ldr	r3, [r7, #12]
    1e22:	3b04      	subs	r3, #4
    1e24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	2280      	movs	r2, #128	; 0x80
    1e2a:	0452      	lsls	r2, r2, #17
    1e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	3b04      	subs	r3, #4
    1e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1e34:	68ba      	ldr	r2, [r7, #8]
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	3b04      	subs	r3, #4
    1e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1e40:	4a08      	ldr	r2, [pc, #32]	; (1e64 <pxPortInitialiseStack+0x50>)
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    1e46:	68fb      	ldr	r3, [r7, #12]
    1e48:	3b14      	subs	r3, #20
    1e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1e4c:	687a      	ldr	r2, [r7, #4]
    1e4e:	68fb      	ldr	r3, [r7, #12]
    1e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1e52:	68fb      	ldr	r3, [r7, #12]
    1e54:	3b20      	subs	r3, #32
    1e56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1e58:	68fb      	ldr	r3, [r7, #12]
}
    1e5a:	0018      	movs	r0, r3
    1e5c:	46bd      	mov	sp, r7
    1e5e:	b004      	add	sp, #16
    1e60:	bd80      	pop	{r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00001e69 	.word	0x00001e69

00001e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	b082      	sub	sp, #8
    1e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    1e6e:	2300      	movs	r3, #0
    1e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <prvTaskExitError+0x28>)
    1e74:	681b      	ldr	r3, [r3, #0]
    1e76:	3301      	adds	r3, #1
    1e78:	d001      	beq.n	1e7e <prvTaskExitError+0x16>
    1e7a:	b672      	cpsid	i
    1e7c:	e7fe      	b.n	1e7c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    1e7e:	b672      	cpsid	i
	while( ulDummy == 0 )
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d0fc      	beq.n	1e82 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    1e88:	46c0      	nop			; (mov r8, r8)
    1e8a:	46bd      	mov	sp, r7
    1e8c:	b002      	add	sp, #8
    1e8e:	bd80      	pop	{r7, pc}
    1e90:	2000000c 	.word	0x2000000c

00001e94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1e94:	b580      	push	{r7, lr}
    1e96:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	46bd      	mov	sp, r7
    1e9c:	bd80      	pop	{r7, pc}
	...

00001ea0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1ea0:	4a0b      	ldr	r2, [pc, #44]	; (1ed0 <pxCurrentTCBConst2>)
    1ea2:	6813      	ldr	r3, [r2, #0]
    1ea4:	6818      	ldr	r0, [r3, #0]
    1ea6:	3020      	adds	r0, #32
    1ea8:	f380 8809 	msr	PSP, r0
    1eac:	2002      	movs	r0, #2
    1eae:	f380 8814 	msr	CONTROL, r0
    1eb2:	f3bf 8f6f 	isb	sy
    1eb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1eb8:	46ae      	mov	lr, r5
    1eba:	bc08      	pop	{r3}
    1ebc:	bc04      	pop	{r2}
    1ebe:	b662      	cpsie	i
    1ec0:	4718      	bx	r3
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	46c0      	nop			; (mov r8, r8)
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46c0      	nop			; (mov r8, r8)
    1ece:	46c0      	nop			; (mov r8, r8)

00001ed0 <pxCurrentTCBConst2>:
    1ed0:	2000533c 	.word	0x2000533c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    1ed4:	46c0      	nop			; (mov r8, r8)
    1ed6:	46c0      	nop			; (mov r8, r8)

00001ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1edc:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <xPortStartScheduler+0x40>)
    1ede:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <xPortStartScheduler+0x40>)
    1ee0:	6812      	ldr	r2, [r2, #0]
    1ee2:	21ff      	movs	r1, #255	; 0xff
    1ee4:	0409      	lsls	r1, r1, #16
    1ee6:	430a      	orrs	r2, r1
    1ee8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1eea:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <xPortStartScheduler+0x40>)
    1eec:	4a0a      	ldr	r2, [pc, #40]	; (1f18 <xPortStartScheduler+0x40>)
    1eee:	6812      	ldr	r2, [r2, #0]
    1ef0:	21ff      	movs	r1, #255	; 0xff
    1ef2:	0609      	lsls	r1, r1, #24
    1ef4:	430a      	orrs	r2, r1
    1ef6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <xPortStartScheduler+0x44>)
    1efa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <xPortStartScheduler+0x48>)
    1efe:	2200      	movs	r2, #0
    1f00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1f02:	4b08      	ldr	r3, [pc, #32]	; (1f24 <xPortStartScheduler+0x4c>)
    1f04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    1f06:	4b08      	ldr	r3, [pc, #32]	; (1f28 <xPortStartScheduler+0x50>)
    1f08:	4798      	blx	r3
	prvTaskExitError();
    1f0a:	4b08      	ldr	r3, [pc, #32]	; (1f2c <xPortStartScheduler+0x54>)
    1f0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    1f0e:	2300      	movs	r3, #0
}
    1f10:	0018      	movs	r0, r3
    1f12:	46bd      	mov	sp, r7
    1f14:	bd80      	pop	{r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	e000ed20 	.word	0xe000ed20
    1f1c:	00002049 	.word	0x00002049
    1f20:	2000000c 	.word	0x2000000c
    1f24:	00001ea1 	.word	0x00001ea1
    1f28:	000067b5 	.word	0x000067b5
    1f2c:	00001e69 	.word	0x00001e69

00001f30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    1f30:	b580      	push	{r7, lr}
    1f32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <vPortYield+0x1c>)
    1f36:	2280      	movs	r2, #128	; 0x80
    1f38:	0552      	lsls	r2, r2, #21
    1f3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    1f3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f40:	f3bf 8f6f 	isb	sy
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	bd80      	pop	{r7, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	e000ed04 	.word	0xe000ed04

00001f50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    1f54:	b672      	cpsid	i
    uxCriticalNesting++;
    1f56:	4b06      	ldr	r3, [pc, #24]	; (1f70 <vPortEnterCritical+0x20>)
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	1c5a      	adds	r2, r3, #1
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <vPortEnterCritical+0x20>)
    1f5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1f60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1f64:	f3bf 8f6f 	isb	sy
}
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	46bd      	mov	sp, r7
    1f6c:	bd80      	pop	{r7, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	2000000c 	.word	0x2000000c

00001f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    1f74:	b580      	push	{r7, lr}
    1f76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    1f78:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <vPortExitCritical+0x2c>)
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d101      	bne.n	1f84 <vPortExitCritical+0x10>
    1f80:	b672      	cpsid	i
    1f82:	e7fe      	b.n	1f82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    1f84:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <vPortExitCritical+0x2c>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	1e5a      	subs	r2, r3, #1
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <vPortExitCritical+0x2c>)
    1f8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    1f8e:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <vPortExitCritical+0x2c>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d100      	bne.n	1f98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    1f96:	b662      	cpsie	i
    }
}
    1f98:	46c0      	nop			; (mov r8, r8)
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	2000000c 	.word	0x2000000c

00001fa4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1fa4:	f3ef 8010 	mrs	r0, PRIMASK
    1fa8:	b672      	cpsid	i
    1faa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    1fac:	46c0      	nop			; (mov r8, r8)
    1fae:	0018      	movs	r0, r3

00001fb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    1fb0:	f380 8810 	msr	PRIMASK, r0
    1fb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    1fb6:	46c0      	nop			; (mov r8, r8)
	...

00001fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1fc0:	f3ef 8009 	mrs	r0, PSP
    1fc4:	4b0e      	ldr	r3, [pc, #56]	; (2000 <pxCurrentTCBConst>)
    1fc6:	681a      	ldr	r2, [r3, #0]
    1fc8:	3820      	subs	r0, #32
    1fca:	6010      	str	r0, [r2, #0]
    1fcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fce:	4644      	mov	r4, r8
    1fd0:	464d      	mov	r5, r9
    1fd2:	4656      	mov	r6, sl
    1fd4:	465f      	mov	r7, fp
    1fd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1fd8:	b508      	push	{r3, lr}
    1fda:	b672      	cpsid	i
    1fdc:	f004 fbea 	bl	67b4 <vTaskSwitchContext>
    1fe0:	b662      	cpsie	i
    1fe2:	bc0c      	pop	{r2, r3}
    1fe4:	6811      	ldr	r1, [r2, #0]
    1fe6:	6808      	ldr	r0, [r1, #0]
    1fe8:	3010      	adds	r0, #16
    1fea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1fec:	46a0      	mov	r8, r4
    1fee:	46a9      	mov	r9, r5
    1ff0:	46b2      	mov	sl, r6
    1ff2:	46bb      	mov	fp, r7
    1ff4:	f380 8809 	msr	PSP, r0
    1ff8:	3820      	subs	r0, #32
    1ffa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1ffc:	4718      	bx	r3
    1ffe:	46c0      	nop			; (mov r8, r8)

00002000 <pxCurrentTCBConst>:
    2000:	2000533c 	.word	0x2000533c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	46c0      	nop			; (mov r8, r8)

00002008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    200e:	4b0a      	ldr	r3, [pc, #40]	; (2038 <SysTick_Handler+0x30>)
    2010:	4798      	blx	r3
    2012:	0003      	movs	r3, r0
    2014:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2016:	4b09      	ldr	r3, [pc, #36]	; (203c <SysTick_Handler+0x34>)
    2018:	4798      	blx	r3
    201a:	1e03      	subs	r3, r0, #0
    201c:	d003      	beq.n	2026 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    201e:	4b08      	ldr	r3, [pc, #32]	; (2040 <SysTick_Handler+0x38>)
    2020:	2280      	movs	r2, #128	; 0x80
    2022:	0552      	lsls	r2, r2, #21
    2024:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	0018      	movs	r0, r3
    202a:	4b06      	ldr	r3, [pc, #24]	; (2044 <SysTick_Handler+0x3c>)
    202c:	4798      	blx	r3
}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	46bd      	mov	sp, r7
    2032:	b002      	add	sp, #8
    2034:	bd80      	pop	{r7, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	00001fa5 	.word	0x00001fa5
    203c:	0000662d 	.word	0x0000662d
    2040:	e000ed04 	.word	0xe000ed04
    2044:	00001fb1 	.word	0x00001fb1

00002048 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    2048:	b580      	push	{r7, lr}
    204a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    204c:	4b07      	ldr	r3, [pc, #28]	; (206c <prvSetupTimerInterrupt+0x24>)
    204e:	2200      	movs	r2, #0
    2050:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2052:	4b07      	ldr	r3, [pc, #28]	; (2070 <prvSetupTimerInterrupt+0x28>)
    2054:	2200      	movs	r2, #0
    2056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <prvSetupTimerInterrupt+0x2c>)
    205a:	4a07      	ldr	r2, [pc, #28]	; (2078 <prvSetupTimerInterrupt+0x30>)
    205c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    205e:	4b03      	ldr	r3, [pc, #12]	; (206c <prvSetupTimerInterrupt+0x24>)
    2060:	2207      	movs	r2, #7
    2062:	601a      	str	r2, [r3, #0]
}
    2064:	46c0      	nop			; (mov r8, r8)
    2066:	46bd      	mov	sp, r7
    2068:	bd80      	pop	{r7, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	e000e010 	.word	0xe000e010
    2070:	e000e018 	.word	0xe000e018
    2074:	e000e014 	.word	0xe000e014
    2078:	0000bb7f 	.word	0x0000bb7f

0000207c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    207c:	b580      	push	{r7, lr}
    207e:	b086      	sub	sp, #24
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    2084:	2300      	movs	r3, #0
    2086:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
    2088:	4b4c      	ldr	r3, [pc, #304]	; (21bc <pvPortMalloc+0x140>)
    208a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    208c:	4b4c      	ldr	r3, [pc, #304]	; (21c0 <pvPortMalloc+0x144>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2b00      	cmp	r3, #0
    2092:	d101      	bne.n	2098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    2094:	4b4b      	ldr	r3, [pc, #300]	; (21c4 <pvPortMalloc+0x148>)
    2096:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    2098:	4b4b      	ldr	r3, [pc, #300]	; (21c8 <pvPortMalloc+0x14c>)
    209a:	681b      	ldr	r3, [r3, #0]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	4013      	ands	r3, r2
    20a0:	d000      	beq.n	20a4 <pvPortMalloc+0x28>
    20a2:	e079      	b.n	2198 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d012      	beq.n	20d0 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
    20aa:	2208      	movs	r2, #8
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	189b      	adds	r3, r3, r2
    20b0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	2207      	movs	r2, #7
    20b6:	4013      	ands	r3, r2
    20b8:	d00a      	beq.n	20d0 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    20ba:	687b      	ldr	r3, [r7, #4]
    20bc:	2207      	movs	r2, #7
    20be:	4393      	bics	r3, r2
    20c0:	3308      	adds	r3, #8
    20c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	2207      	movs	r2, #7
    20c8:	4013      	ands	r3, r2
    20ca:	d001      	beq.n	20d0 <pvPortMalloc+0x54>
    20cc:	b672      	cpsid	i
    20ce:	e7fe      	b.n	20ce <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d060      	beq.n	2198 <pvPortMalloc+0x11c>
    20d6:	4b3d      	ldr	r3, [pc, #244]	; (21cc <pvPortMalloc+0x150>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	429a      	cmp	r2, r3
    20de:	d85b      	bhi.n	2198 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    20e0:	4b3b      	ldr	r3, [pc, #236]	; (21d0 <pvPortMalloc+0x154>)
    20e2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
    20e4:	4b3a      	ldr	r3, [pc, #232]	; (21d0 <pvPortMalloc+0x154>)
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    20ea:	e004      	b.n	20f6 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
    20ec:	697b      	ldr	r3, [r7, #20]
    20ee:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
    20f0:	697b      	ldr	r3, [r7, #20]
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    20f6:	697b      	ldr	r3, [r7, #20]
    20f8:	685a      	ldr	r2, [r3, #4]
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	429a      	cmp	r2, r3
    20fe:	d203      	bcs.n	2108 <pvPortMalloc+0x8c>
    2100:	697b      	ldr	r3, [r7, #20]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	2b00      	cmp	r3, #0
    2106:	d1f1      	bne.n	20ec <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    2108:	4b2d      	ldr	r3, [pc, #180]	; (21c0 <pvPortMalloc+0x144>)
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	697a      	ldr	r2, [r7, #20]
    210e:	429a      	cmp	r2, r3
    2110:	d042      	beq.n	2198 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2112:	693b      	ldr	r3, [r7, #16]
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	2208      	movs	r2, #8
    2118:	189b      	adds	r3, r3, r2
    211a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    211c:	697b      	ldr	r3, [r7, #20]
    211e:	681a      	ldr	r2, [r3, #0]
    2120:	693b      	ldr	r3, [r7, #16]
    2122:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2124:	697b      	ldr	r3, [r7, #20]
    2126:	685a      	ldr	r2, [r3, #4]
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	1ad2      	subs	r2, r2, r3
    212c:	2308      	movs	r3, #8
    212e:	005b      	lsls	r3, r3, #1
    2130:	429a      	cmp	r2, r3
    2132:	d916      	bls.n	2162 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2134:	697a      	ldr	r2, [r7, #20]
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	18d3      	adds	r3, r2, r3
    213a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2207      	movs	r2, #7
    2140:	4013      	ands	r3, r2
    2142:	d001      	beq.n	2148 <pvPortMalloc+0xcc>
    2144:	b672      	cpsid	i
    2146:	e7fe      	b.n	2146 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2148:	697b      	ldr	r3, [r7, #20]
    214a:	685a      	ldr	r2, [r3, #4]
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	1ad2      	subs	r2, r2, r3
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    2154:	697b      	ldr	r3, [r7, #20]
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    215a:	68bb      	ldr	r3, [r7, #8]
    215c:	0018      	movs	r0, r3
    215e:	4b1d      	ldr	r3, [pc, #116]	; (21d4 <pvPortMalloc+0x158>)
    2160:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    2162:	4b1a      	ldr	r3, [pc, #104]	; (21cc <pvPortMalloc+0x150>)
    2164:	681a      	ldr	r2, [r3, #0]
    2166:	697b      	ldr	r3, [r7, #20]
    2168:	685b      	ldr	r3, [r3, #4]
    216a:	1ad2      	subs	r2, r2, r3
    216c:	4b17      	ldr	r3, [pc, #92]	; (21cc <pvPortMalloc+0x150>)
    216e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    2170:	4b16      	ldr	r3, [pc, #88]	; (21cc <pvPortMalloc+0x150>)
    2172:	681a      	ldr	r2, [r3, #0]
    2174:	4b18      	ldr	r3, [pc, #96]	; (21d8 <pvPortMalloc+0x15c>)
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	429a      	cmp	r2, r3
    217a:	d203      	bcs.n	2184 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    217c:	4b13      	ldr	r3, [pc, #76]	; (21cc <pvPortMalloc+0x150>)
    217e:	681a      	ldr	r2, [r3, #0]
    2180:	4b15      	ldr	r3, [pc, #84]	; (21d8 <pvPortMalloc+0x15c>)
    2182:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    2184:	697b      	ldr	r3, [r7, #20]
    2186:	685a      	ldr	r2, [r3, #4]
    2188:	4b0f      	ldr	r3, [pc, #60]	; (21c8 <pvPortMalloc+0x14c>)
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	431a      	orrs	r2, r3
    218e:	697b      	ldr	r3, [r7, #20]
    2190:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2200      	movs	r2, #0
    2196:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2198:	4b10      	ldr	r3, [pc, #64]	; (21dc <pvPortMalloc+0x160>)
    219a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	2b00      	cmp	r3, #0
    21a0:	d101      	bne.n	21a6 <pvPortMalloc+0x12a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    21a2:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <pvPortMalloc+0x164>)
    21a4:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    21a6:	68fb      	ldr	r3, [r7, #12]
    21a8:	2207      	movs	r2, #7
    21aa:	4013      	ands	r3, r2
    21ac:	d001      	beq.n	21b2 <pvPortMalloc+0x136>
    21ae:	b672      	cpsid	i
    21b0:	e7fe      	b.n	21b0 <pvPortMalloc+0x134>
	return pvReturn;
    21b2:	68fb      	ldr	r3, [r7, #12]
}
    21b4:	0018      	movs	r0, r3
    21b6:	46bd      	mov	sp, r7
    21b8:	b006      	add	sp, #24
    21ba:	bd80      	pop	{r7, pc}
    21bc:	000064c5 	.word	0x000064c5
    21c0:	20004fc8 	.word	0x20004fc8
    21c4:	00002281 	.word	0x00002281
    21c8:	20004fd4 	.word	0x20004fd4
    21cc:	20004fcc 	.word	0x20004fcc
    21d0:	20004fc0 	.word	0x20004fc0
    21d4:	00002341 	.word	0x00002341
    21d8:	20004fd0 	.word	0x20004fd0
    21dc:	000064dd 	.word	0x000064dd
    21e0:	0000a175 	.word	0x0000a175

000021e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    21e4:	b580      	push	{r7, lr}
    21e6:	b084      	sub	sp, #16
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d035      	beq.n	2262 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    21f6:	2308      	movs	r3, #8
    21f8:	425b      	negs	r3, r3
    21fa:	68fa      	ldr	r2, [r7, #12]
    21fc:	18d3      	adds	r3, r2, r3
    21fe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    2204:	68bb      	ldr	r3, [r7, #8]
    2206:	685a      	ldr	r2, [r3, #4]
    2208:	4b18      	ldr	r3, [pc, #96]	; (226c <vPortFree+0x88>)
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	4013      	ands	r3, r2
    220e:	d101      	bne.n	2214 <vPortFree+0x30>
    2210:	b672      	cpsid	i
    2212:	e7fe      	b.n	2212 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    2214:	68bb      	ldr	r3, [r7, #8]
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	2b00      	cmp	r3, #0
    221a:	d001      	beq.n	2220 <vPortFree+0x3c>
    221c:	b672      	cpsid	i
    221e:	e7fe      	b.n	221e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    2220:	68bb      	ldr	r3, [r7, #8]
    2222:	685a      	ldr	r2, [r3, #4]
    2224:	4b11      	ldr	r3, [pc, #68]	; (226c <vPortFree+0x88>)
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	4013      	ands	r3, r2
    222a:	d01a      	beq.n	2262 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    222c:	68bb      	ldr	r3, [r7, #8]
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	2b00      	cmp	r3, #0
    2232:	d116      	bne.n	2262 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    2234:	68bb      	ldr	r3, [r7, #8]
    2236:	685a      	ldr	r2, [r3, #4]
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <vPortFree+0x88>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	43db      	mvns	r3, r3
    223e:	401a      	ands	r2, r3
    2240:	68bb      	ldr	r3, [r7, #8]
    2242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    2244:	4b0a      	ldr	r3, [pc, #40]	; (2270 <vPortFree+0x8c>)
    2246:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    2248:	68bb      	ldr	r3, [r7, #8]
    224a:	685a      	ldr	r2, [r3, #4]
    224c:	4b09      	ldr	r3, [pc, #36]	; (2274 <vPortFree+0x90>)
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	18d2      	adds	r2, r2, r3
    2252:	4b08      	ldr	r3, [pc, #32]	; (2274 <vPortFree+0x90>)
    2254:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2256:	68bb      	ldr	r3, [r7, #8]
    2258:	0018      	movs	r0, r3
    225a:	4b07      	ldr	r3, [pc, #28]	; (2278 <vPortFree+0x94>)
    225c:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
    225e:	4b07      	ldr	r3, [pc, #28]	; (227c <vPortFree+0x98>)
    2260:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	46bd      	mov	sp, r7
    2266:	b004      	add	sp, #16
    2268:	bd80      	pop	{r7, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	20004fd4 	.word	0x20004fd4
    2270:	000064c5 	.word	0x000064c5
    2274:	20004fcc 	.word	0x20004fcc
    2278:	00002341 	.word	0x00002341
    227c:	000064dd 	.word	0x000064dd

00002280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    2280:	b580      	push	{r7, lr}
    2282:	b084      	sub	sp, #16
    2284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    2286:	4b27      	ldr	r3, [pc, #156]	; (2324 <prvHeapInit+0xa4>)
    2288:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    228a:	4b27      	ldr	r3, [pc, #156]	; (2328 <prvHeapInit+0xa8>)
    228c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    228e:	68fb      	ldr	r3, [r7, #12]
    2290:	2207      	movs	r2, #7
    2292:	4013      	ands	r3, r2
    2294:	d00c      	beq.n	22b0 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    2296:	68fb      	ldr	r3, [r7, #12]
    2298:	3307      	adds	r3, #7
    229a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    229c:	68fb      	ldr	r3, [r7, #12]
    229e:	2207      	movs	r2, #7
    22a0:	4393      	bics	r3, r2
    22a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    22a4:	68ba      	ldr	r2, [r7, #8]
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	1ad2      	subs	r2, r2, r3
    22aa:	4b1f      	ldr	r3, [pc, #124]	; (2328 <prvHeapInit+0xa8>)
    22ac:	18d3      	adds	r3, r2, r3
    22ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    22b4:	4b1d      	ldr	r3, [pc, #116]	; (232c <prvHeapInit+0xac>)
    22b6:	687a      	ldr	r2, [r7, #4]
    22b8:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
    22ba:	4b1c      	ldr	r3, [pc, #112]	; (232c <prvHeapInit+0xac>)
    22bc:	2200      	movs	r2, #0
    22be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	68bb      	ldr	r3, [r7, #8]
    22c4:	18d3      	adds	r3, r2, r3
    22c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    22c8:	2208      	movs	r2, #8
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	1a9b      	subs	r3, r3, r2
    22ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	2207      	movs	r2, #7
    22d4:	4393      	bics	r3, r2
    22d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    22d8:	68fa      	ldr	r2, [r7, #12]
    22da:	4b15      	ldr	r3, [pc, #84]	; (2330 <prvHeapInit+0xb0>)
    22dc:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <prvHeapInit+0xb0>)
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	2200      	movs	r2, #0
    22e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    22e6:	4b12      	ldr	r3, [pc, #72]	; (2330 <prvHeapInit+0xb0>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	2200      	movs	r2, #0
    22ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	68fa      	ldr	r2, [r7, #12]
    22f6:	1ad2      	subs	r2, r2, r3
    22f8:	683b      	ldr	r3, [r7, #0]
    22fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    22fc:	4b0c      	ldr	r3, [pc, #48]	; (2330 <prvHeapInit+0xb0>)
    22fe:	681a      	ldr	r2, [r3, #0]
    2300:	683b      	ldr	r3, [r7, #0]
    2302:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2304:	683b      	ldr	r3, [r7, #0]
    2306:	685a      	ldr	r2, [r3, #4]
    2308:	4b0a      	ldr	r3, [pc, #40]	; (2334 <prvHeapInit+0xb4>)
    230a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    230c:	683b      	ldr	r3, [r7, #0]
    230e:	685a      	ldr	r2, [r3, #4]
    2310:	4b09      	ldr	r3, [pc, #36]	; (2338 <prvHeapInit+0xb8>)
    2312:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2314:	4b09      	ldr	r3, [pc, #36]	; (233c <prvHeapInit+0xbc>)
    2316:	2280      	movs	r2, #128	; 0x80
    2318:	0612      	lsls	r2, r2, #24
    231a:	601a      	str	r2, [r3, #0]
}
    231c:	46c0      	nop			; (mov r8, r8)
    231e:	46bd      	mov	sp, r7
    2320:	b004      	add	sp, #16
    2322:	bd80      	pop	{r7, pc}
    2324:	00004e20 	.word	0x00004e20
    2328:	200001a0 	.word	0x200001a0
    232c:	20004fc0 	.word	0x20004fc0
    2330:	20004fc8 	.word	0x20004fc8
    2334:	20004fd0 	.word	0x20004fd0
    2338:	20004fcc 	.word	0x20004fcc
    233c:	20004fd4 	.word	0x20004fd4

00002340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    2340:	b580      	push	{r7, lr}
    2342:	b084      	sub	sp, #16
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2348:	4b27      	ldr	r3, [pc, #156]	; (23e8 <prvInsertBlockIntoFreeList+0xa8>)
    234a:	60fb      	str	r3, [r7, #12]
    234c:	e002      	b.n	2354 <prvInsertBlockIntoFreeList+0x14>
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	681b      	ldr	r3, [r3, #0]
    2352:	60fb      	str	r3, [r7, #12]
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	681a      	ldr	r2, [r3, #0]
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	429a      	cmp	r2, r3
    235c:	d3f7      	bcc.n	234e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    235e:	68fb      	ldr	r3, [r7, #12]
    2360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	685b      	ldr	r3, [r3, #4]
    2366:	68ba      	ldr	r2, [r7, #8]
    2368:	18d2      	adds	r2, r2, r3
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	429a      	cmp	r2, r3
    236e:	d108      	bne.n	2382 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	685a      	ldr	r2, [r3, #4]
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	685b      	ldr	r3, [r3, #4]
    2378:	18d2      	adds	r2, r2, r3
    237a:	68fb      	ldr	r3, [r7, #12]
    237c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    2386:	687b      	ldr	r3, [r7, #4]
    2388:	685b      	ldr	r3, [r3, #4]
    238a:	68ba      	ldr	r2, [r7, #8]
    238c:	18d2      	adds	r2, r2, r3
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	429a      	cmp	r2, r3
    2394:	d118      	bne.n	23c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    2396:	68fb      	ldr	r3, [r7, #12]
    2398:	681a      	ldr	r2, [r3, #0]
    239a:	4b14      	ldr	r3, [pc, #80]	; (23ec <prvInsertBlockIntoFreeList+0xac>)
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	429a      	cmp	r2, r3
    23a0:	d00d      	beq.n	23be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	685a      	ldr	r2, [r3, #4]
    23a6:	68fb      	ldr	r3, [r7, #12]
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	685b      	ldr	r3, [r3, #4]
    23ac:	18d2      	adds	r2, r2, r3
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    23b2:	68fb      	ldr	r3, [r7, #12]
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	681a      	ldr	r2, [r3, #0]
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	601a      	str	r2, [r3, #0]
    23bc:	e008      	b.n	23d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    23be:	4b0b      	ldr	r3, [pc, #44]	; (23ec <prvInsertBlockIntoFreeList+0xac>)
    23c0:	681a      	ldr	r2, [r3, #0]
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e003      	b.n	23d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    23c8:	68fb      	ldr	r3, [r7, #12]
    23ca:	681a      	ldr	r2, [r3, #0]
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    23d0:	68fa      	ldr	r2, [r7, #12]
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	429a      	cmp	r2, r3
    23d6:	d002      	beq.n	23de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	46bd      	mov	sp, r7
    23e2:	b004      	add	sp, #16
    23e4:	bd80      	pop	{r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	20004fc0 	.word	0x20004fc0
    23ec:	20004fc8 	.word	0x20004fc8

000023f0 <system_interrupt_enable>:
{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
    23f6:	0002      	movs	r2, r0
    23f8:	1dfb      	adds	r3, r7, #7
    23fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    23fc:	4b06      	ldr	r3, [pc, #24]	; (2418 <system_interrupt_enable+0x28>)
    23fe:	1dfa      	adds	r2, r7, #7
    2400:	7812      	ldrb	r2, [r2, #0]
    2402:	0011      	movs	r1, r2
    2404:	221f      	movs	r2, #31
    2406:	400a      	ands	r2, r1
    2408:	2101      	movs	r1, #1
    240a:	4091      	lsls	r1, r2
    240c:	000a      	movs	r2, r1
    240e:	601a      	str	r2, [r3, #0]
}
    2410:	46c0      	nop			; (mov r8, r8)
    2412:	46bd      	mov	sp, r7
    2414:	b002      	add	sp, #8
    2416:	bd80      	pop	{r7, pc}
    2418:	e000e100 	.word	0xe000e100

0000241c <adc_is_syncing>:
{
    241c:	b580      	push	{r7, lr}
    241e:	b084      	sub	sp, #16
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    242a:	68fb      	ldr	r3, [r7, #12]
    242c:	7e5b      	ldrb	r3, [r3, #25]
    242e:	b2db      	uxtb	r3, r3
    2430:	b25b      	sxtb	r3, r3
    2432:	2b00      	cmp	r3, #0
    2434:	da01      	bge.n	243a <adc_is_syncing+0x1e>
		return true;
    2436:	2301      	movs	r3, #1
    2438:	e000      	b.n	243c <adc_is_syncing+0x20>
	return false;
    243a:	2300      	movs	r3, #0
}
    243c:	0018      	movs	r0, r3
    243e:	46bd      	mov	sp, r7
    2440:	b004      	add	sp, #16
    2442:	bd80      	pop	{r7, pc}

00002444 <adc_enable>:
{
    2444:	b580      	push	{r7, lr}
    2446:	b084      	sub	sp, #16
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	681b      	ldr	r3, [r3, #0]
    2450:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	687b      	ldr	r3, [r7, #4]
    2456:	0018      	movs	r0, r3
    2458:	4b10      	ldr	r3, [pc, #64]	; (249c <adc_enable+0x58>)
    245a:	4798      	blx	r3
    245c:	1e03      	subs	r3, r0, #0
    245e:	d1f9      	bne.n	2454 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2460:	2017      	movs	r0, #23
    2462:	4b0f      	ldr	r3, [pc, #60]	; (24a0 <adc_enable+0x5c>)
    2464:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	220f      	movs	r2, #15
    246a:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	220f      	movs	r2, #15
    2470:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2472:	68fb      	ldr	r3, [r7, #12]
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	b2db      	uxtb	r3, r3
    2478:	2202      	movs	r2, #2
    247a:	4313      	orrs	r3, r2
    247c:	b2da      	uxtb	r2, r3
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	0018      	movs	r0, r3
    2488:	4b04      	ldr	r3, [pc, #16]	; (249c <adc_enable+0x58>)
    248a:	4798      	blx	r3
    248c:	1e03      	subs	r3, r0, #0
    248e:	d1f9      	bne.n	2484 <adc_enable+0x40>
	return STATUS_OK;
    2490:	2300      	movs	r3, #0
}
    2492:	0018      	movs	r0, r3
    2494:	46bd      	mov	sp, r7
    2496:	b004      	add	sp, #16
    2498:	bd80      	pop	{r7, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	0000241d 	.word	0x0000241d
    24a0:	000023f1 	.word	0x000023f1

000024a4 <adc_enable_interrupt>:
{
    24a4:	b580      	push	{r7, lr}
    24a6:	b084      	sub	sp, #16
    24a8:	af00      	add	r7, sp, #0
    24aa:	6078      	str	r0, [r7, #4]
    24ac:	000a      	movs	r2, r1
    24ae:	1cfb      	adds	r3, r7, #3
    24b0:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	681b      	ldr	r3, [r3, #0]
    24b6:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	1cfa      	adds	r2, r7, #3
    24bc:	7812      	ldrb	r2, [r2, #0]
    24be:	75da      	strb	r2, [r3, #23]
}
    24c0:	46c0      	nop			; (mov r8, r8)
    24c2:	46bd      	mov	sp, r7
    24c4:	b004      	add	sp, #16
    24c6:	bd80      	pop	{r7, pc}

000024c8 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	000a      	movs	r2, r1
    24d2:	1cfb      	adds	r3, r7, #3
    24d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	7edb      	ldrb	r3, [r3, #27]
    24da:	b25a      	sxtb	r2, r3
    24dc:	1cfb      	adds	r3, r7, #3
    24de:	781b      	ldrb	r3, [r3, #0]
    24e0:	2101      	movs	r1, #1
    24e2:	4099      	lsls	r1, r3
    24e4:	000b      	movs	r3, r1
    24e6:	b25b      	sxtb	r3, r3
    24e8:	4313      	orrs	r3, r2
    24ea:	b25b      	sxtb	r3, r3
    24ec:	b2da      	uxtb	r2, r3
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
    24f2:	1cfb      	adds	r3, r7, #3
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b01      	cmp	r3, #1
    24f8:	d104      	bne.n	2504 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	2104      	movs	r1, #4
    24fe:	0018      	movs	r0, r3
    2500:	4b07      	ldr	r3, [pc, #28]	; (2520 <adc_enable_callback+0x58>)
    2502:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
    2504:	1cfb      	adds	r3, r7, #3
    2506:	781b      	ldrb	r3, [r3, #0]
    2508:	2b02      	cmp	r3, #2
    250a:	d104      	bne.n	2516 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	2102      	movs	r1, #2
    2510:	0018      	movs	r0, r3
    2512:	4b03      	ldr	r3, [pc, #12]	; (2520 <adc_enable_callback+0x58>)
    2514:	4798      	blx	r3
	}
}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	46bd      	mov	sp, r7
    251a:	b002      	add	sp, #8
    251c:	bd80      	pop	{r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	000024a5 	.word	0x000024a5

00002524 <adc_cb>:
 static volatile uint16_t flow_meas_raw;

 static volatile bool setup = false;

 static void adc_cb(struct adc_module *const module)
 {
    2524:	b580      	push	{r7, lr}
    2526:	b082      	sub	sp, #8
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	2100      	movs	r1, #0
    2530:	0018      	movs	r0, r3
    2532:	4b13      	ldr	r3, [pc, #76]	; (2580 <adc_cb+0x5c>)
    2534:	4798      	blx	r3
    2536:	1e03      	subs	r3, r0, #0
    2538:	d11d      	bne.n	2576 <adc_cb+0x52>
	{
		// Motor first
		motor_temp_meas_raw = adc_buffer[0];
    253a:	4b12      	ldr	r3, [pc, #72]	; (2584 <adc_cb+0x60>)
    253c:	881b      	ldrh	r3, [r3, #0]
    253e:	b29a      	uxth	r2, r3
    2540:	4b11      	ldr	r3, [pc, #68]	; (2588 <adc_cb+0x64>)
    2542:	801a      	strh	r2, [r3, #0]
		// Control potentiometer
		potentiometer_meas_raw = adc_buffer[1];
    2544:	4b0f      	ldr	r3, [pc, #60]	; (2584 <adc_cb+0x60>)
    2546:	885b      	ldrh	r3, [r3, #2]
    2548:	b29a      	uxth	r2, r3
    254a:	4b10      	ldr	r3, [pc, #64]	; (258c <adc_cb+0x68>)
    254c:	801a      	strh	r2, [r3, #0]
		// Three pressure sensors in a raw
		pressure_raw_int[0] = adc_buffer[2];
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <adc_cb+0x60>)
    2550:	889b      	ldrh	r3, [r3, #4]
    2552:	b29a      	uxth	r2, r3
    2554:	4b0e      	ldr	r3, [pc, #56]	; (2590 <adc_cb+0x6c>)
    2556:	801a      	strh	r2, [r3, #0]
		pressure_raw_int[1] = adc_buffer[3];
    2558:	4b0a      	ldr	r3, [pc, #40]	; (2584 <adc_cb+0x60>)
    255a:	88db      	ldrh	r3, [r3, #6]
    255c:	b29a      	uxth	r2, r3
    255e:	4b0c      	ldr	r3, [pc, #48]	; (2590 <adc_cb+0x6c>)
    2560:	805a      	strh	r2, [r3, #2]
		pressure_raw_int[2] = adc_buffer[4];
    2562:	4b08      	ldr	r3, [pc, #32]	; (2584 <adc_cb+0x60>)
    2564:	891b      	ldrh	r3, [r3, #8]
    2566:	b29a      	uxth	r2, r3
    2568:	4b09      	ldr	r3, [pc, #36]	; (2590 <adc_cb+0x6c>)
    256a:	809a      	strh	r2, [r3, #4]
		// Flow sensor at ain[10]
		flow_meas_raw = adc_buffer[8];
    256c:	4b05      	ldr	r3, [pc, #20]	; (2584 <adc_cb+0x60>)
    256e:	8a1b      	ldrh	r3, [r3, #16]
    2570:	b29a      	uxth	r2, r3
    2572:	4b08      	ldr	r3, [pc, #32]	; (2594 <adc_cb+0x70>)
    2574:	801a      	strh	r2, [r3, #0]
	}
 }
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	46bd      	mov	sp, r7
    257a:	b002      	add	sp, #8
    257c:	bd80      	pop	{r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	00000c11 	.word	0x00000c11
    2584:	20004ff8 	.word	0x20004ff8
    2588:	20005014 	.word	0x20005014
    258c:	20005012 	.word	0x20005012
    2590:	2000500c 	.word	0x2000500c
    2594:	20005016 	.word	0x20005016

00002598 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    2598:	b580      	push	{r7, lr}
    259a:	b08c      	sub	sp, #48	; 0x30
    259c:	af00      	add	r7, sp, #0
	struct adc_config config;

	adc_get_config_defaults(&config);
    259e:	003b      	movs	r3, r7
    25a0:	0018      	movs	r0, r3
    25a2:	4b21      	ldr	r3, [pc, #132]	; (2628 <adc_interface_init+0x90>)
    25a4:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    25a6:	003b      	movs	r3, r7
    25a8:	2202      	movs	r2, #2
    25aa:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    25ac:	003b      	movs	r3, r7
    25ae:	22c0      	movs	r2, #192	; 0xc0
    25b0:	0152      	lsls	r2, r2, #5
    25b2:	81da      	strh	r2, [r3, #14]
	config.differential_mode = false;
    25b4:	003b      	movs	r3, r7
    25b6:	2200      	movs	r2, #0
    25b8:	74da      	strb	r2, [r3, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock TODO is this fast enough?
    25ba:	003b      	movs	r3, r7
    25bc:	2201      	movs	r2, #1
    25be:	701a      	strb	r2, [r3, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV256;
    25c0:	003b      	movs	r3, r7
    25c2:	22c0      	movs	r2, #192	; 0xc0
    25c4:	00d2      	lsls	r2, r2, #3
    25c6:	805a      	strh	r2, [r3, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    25c8:	003b      	movs	r3, r7
    25ca:	2200      	movs	r2, #0
    25cc:	609a      	str	r2, [r3, #8]
	config.resolution = ADC_RESOLUTION_12BIT;
    25ce:	003b      	movs	r3, r7
    25d0:	2200      	movs	r2, #0
    25d2:	711a      	strb	r2, [r3, #4]
	config.reference = ADC_REFERENCE_AREFA; // 3.3V
    25d4:	003b      	movs	r3, r7
    25d6:	2203      	movs	r2, #3
    25d8:	705a      	strb	r2, [r3, #1]

	// Scan from 2 through 10
	config.pin_scan.offset_start_scan = 0;
    25da:	003b      	movs	r3, r7
    25dc:	222b      	movs	r2, #43	; 0x2b
    25de:	2100      	movs	r1, #0
    25e0:	5499      	strb	r1, [r3, r2]
	config.pin_scan.inputs_to_scan = 9;
    25e2:	003b      	movs	r3, r7
    25e4:	222c      	movs	r2, #44	; 0x2c
    25e6:	2109      	movs	r1, #9
    25e8:	5499      	strb	r1, [r3, r2]

	adc_init(&adc_module_instance, ADC, &config);
    25ea:	003a      	movs	r2, r7
    25ec:	490f      	ldr	r1, [pc, #60]	; (262c <adc_interface_init+0x94>)
    25ee:	4b10      	ldr	r3, [pc, #64]	; (2630 <adc_interface_init+0x98>)
    25f0:	0018      	movs	r0, r3
    25f2:	4b10      	ldr	r3, [pc, #64]	; (2634 <adc_interface_init+0x9c>)
    25f4:	4798      	blx	r3
	adc_enable(&adc_module_instance);
    25f6:	4b0e      	ldr	r3, [pc, #56]	; (2630 <adc_interface_init+0x98>)
    25f8:	0018      	movs	r0, r3
    25fa:	4b0f      	ldr	r3, [pc, #60]	; (2638 <adc_interface_init+0xa0>)
    25fc:	4798      	blx	r3

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    25fe:	490f      	ldr	r1, [pc, #60]	; (263c <adc_interface_init+0xa4>)
    2600:	4b0b      	ldr	r3, [pc, #44]	; (2630 <adc_interface_init+0x98>)
    2602:	2200      	movs	r2, #0
    2604:	0018      	movs	r0, r3
    2606:	4b0e      	ldr	r3, [pc, #56]	; (2640 <adc_interface_init+0xa8>)
    2608:	4798      	blx	r3
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);
    260a:	4b09      	ldr	r3, [pc, #36]	; (2630 <adc_interface_init+0x98>)
    260c:	2100      	movs	r1, #0
    260e:	0018      	movs	r0, r3
    2610:	4b0c      	ldr	r3, [pc, #48]	; (2644 <adc_interface_init+0xac>)
    2612:	4798      	blx	r3

	setup = true;
    2614:	4b0c      	ldr	r3, [pc, #48]	; (2648 <adc_interface_init+0xb0>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]

	// Start the conversion
	adc_request_update();
    261a:	4b0c      	ldr	r3, [pc, #48]	; (264c <adc_interface_init+0xb4>)
    261c:	4798      	blx	r3
 }
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	46bd      	mov	sp, r7
    2622:	b00c      	add	sp, #48	; 0x30
    2624:	bd80      	pop	{r7, pc}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	00000219 	.word	0x00000219
    262c:	42004000 	.word	0x42004000
    2630:	20004fd8 	.word	0x20004fd8
    2634:	00000869 	.word	0x00000869
    2638:	00002445 	.word	0x00002445
    263c:	00002525 	.word	0x00002525
    2640:	00000b69 	.word	0x00000b69
    2644:	000024c9 	.word	0x000024c9
    2648:	20005018 	.word	0x20005018
    264c:	00002651 	.word	0x00002651

00002650 <adc_request_update>:

 void adc_request_update(void)
 {
    2650:	b580      	push	{r7, lr}
    2652:	af00      	add	r7, sp, #0
	// Trigger new measurement
	if(setup)
    2654:	4b06      	ldr	r3, [pc, #24]	; (2670 <adc_request_update+0x20>)
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d005      	beq.n	266a <adc_request_update+0x1a>
	{
		adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    265e:	4905      	ldr	r1, [pc, #20]	; (2674 <adc_request_update+0x24>)
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <adc_request_update+0x28>)
    2662:	2209      	movs	r2, #9
    2664:	0018      	movs	r0, r3
    2666:	4b05      	ldr	r3, [pc, #20]	; (267c <adc_request_update+0x2c>)
    2668:	4798      	blx	r3
	}
 }
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	46bd      	mov	sp, r7
    266e:	bd80      	pop	{r7, pc}
    2670:	20005018 	.word	0x20005018
    2674:	20004ff8 	.word	0x20004ff8
    2678:	20004fd8 	.word	0x20004fd8
    267c:	00000ba9 	.word	0x00000ba9

00002680 <get_pressure_sensor_cmH2O>:
 *	\param channel The sensor channel
 *	
 *	\return The pressure from the channel in cm-H2O if channel valid or 0 otherwise
 */
 float get_pressure_sensor_cmH2O(uint8_t channel)
 {
    2680:	b590      	push	{r4, r7, lr}
    2682:	b087      	sub	sp, #28
    2684:	af00      	add	r7, sp, #0
    2686:	0002      	movs	r2, r0
    2688:	1dfb      	adds	r3, r7, #7
    268a:	701a      	strb	r2, [r3, #0]
	// Pressure sensors output 0.5-4.5V corresponding to 0-5psig
	// Scaled down to 3.3V range with 10K/(10K+5.6K) divider
	if(channel >= NUM_PRESSURE_SENSOR_CHANNELS)
    268c:	1dfb      	adds	r3, r7, #7
    268e:	781b      	ldrb	r3, [r3, #0]
    2690:	2b02      	cmp	r3, #2
    2692:	d901      	bls.n	2698 <get_pressure_sensor_cmH2O+0x18>
	{
		return 0.0;
    2694:	2300      	movs	r3, #0
    2696:	e05e      	b.n	2756 <get_pressure_sensor_cmH2O+0xd6>
	}
	uint16_t raw_adc =  pressure_raw_int[channel];
    2698:	1dfb      	adds	r3, r7, #7
    269a:	7819      	ldrb	r1, [r3, #0]
    269c:	2316      	movs	r3, #22
    269e:	18fb      	adds	r3, r7, r3
    26a0:	4a2f      	ldr	r2, [pc, #188]	; (2760 <get_pressure_sensor_cmH2O+0xe0>)
    26a2:	0049      	lsls	r1, r1, #1
    26a4:	5a8a      	ldrh	r2, [r1, r2]
    26a6:	801a      	strh	r2, [r3, #0]

	float pressure_voltage_scaled_up = ((raw_adc / ADC_MAX) * 3.3) * (15.6 / 10.0);
    26a8:	2316      	movs	r3, #22
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	881a      	ldrh	r2, [r3, #0]
    26ae:	4b2d      	ldr	r3, [pc, #180]	; (2764 <get_pressure_sensor_cmH2O+0xe4>)
    26b0:	0010      	movs	r0, r2
    26b2:	4798      	blx	r3
    26b4:	4c2c      	ldr	r4, [pc, #176]	; (2768 <get_pressure_sensor_cmH2O+0xe8>)
    26b6:	2200      	movs	r2, #0
    26b8:	4b2c      	ldr	r3, [pc, #176]	; (276c <get_pressure_sensor_cmH2O+0xec>)
    26ba:	47a0      	blx	r4
    26bc:	0003      	movs	r3, r0
    26be:	000c      	movs	r4, r1
    26c0:	0018      	movs	r0, r3
    26c2:	0021      	movs	r1, r4
    26c4:	4c2a      	ldr	r4, [pc, #168]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    26c6:	4a2b      	ldr	r2, [pc, #172]	; (2774 <get_pressure_sensor_cmH2O+0xf4>)
    26c8:	4b2b      	ldr	r3, [pc, #172]	; (2778 <get_pressure_sensor_cmH2O+0xf8>)
    26ca:	47a0      	blx	r4
    26cc:	0003      	movs	r3, r0
    26ce:	000c      	movs	r4, r1
    26d0:	0018      	movs	r0, r3
    26d2:	0021      	movs	r1, r4
    26d4:	4c26      	ldr	r4, [pc, #152]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    26d6:	4a29      	ldr	r2, [pc, #164]	; (277c <get_pressure_sensor_cmH2O+0xfc>)
    26d8:	4b29      	ldr	r3, [pc, #164]	; (2780 <get_pressure_sensor_cmH2O+0x100>)
    26da:	47a0      	blx	r4
    26dc:	0003      	movs	r3, r0
    26de:	000c      	movs	r4, r1
    26e0:	0019      	movs	r1, r3
    26e2:	0022      	movs	r2, r4
    26e4:	4b27      	ldr	r3, [pc, #156]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    26e6:	0008      	movs	r0, r1
    26e8:	0011      	movs	r1, r2
    26ea:	4798      	blx	r3
    26ec:	1c03      	adds	r3, r0, #0
    26ee:	613b      	str	r3, [r7, #16]

	float pressure_psi = 5.0 * (pressure_voltage_scaled_up - 0.5) / 4.0;
    26f0:	4b25      	ldr	r3, [pc, #148]	; (2788 <get_pressure_sensor_cmH2O+0x108>)
    26f2:	6938      	ldr	r0, [r7, #16]
    26f4:	4798      	blx	r3
    26f6:	4c25      	ldr	r4, [pc, #148]	; (278c <get_pressure_sensor_cmH2O+0x10c>)
    26f8:	2200      	movs	r2, #0
    26fa:	4b25      	ldr	r3, [pc, #148]	; (2790 <get_pressure_sensor_cmH2O+0x110>)
    26fc:	47a0      	blx	r4
    26fe:	0003      	movs	r3, r0
    2700:	000c      	movs	r4, r1
    2702:	0018      	movs	r0, r3
    2704:	0021      	movs	r1, r4
    2706:	4c1a      	ldr	r4, [pc, #104]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    2708:	2200      	movs	r2, #0
    270a:	4b22      	ldr	r3, [pc, #136]	; (2794 <get_pressure_sensor_cmH2O+0x114>)
    270c:	47a0      	blx	r4
    270e:	0003      	movs	r3, r0
    2710:	000c      	movs	r4, r1
    2712:	0018      	movs	r0, r3
    2714:	0021      	movs	r1, r4
    2716:	4c14      	ldr	r4, [pc, #80]	; (2768 <get_pressure_sensor_cmH2O+0xe8>)
    2718:	2200      	movs	r2, #0
    271a:	4b1f      	ldr	r3, [pc, #124]	; (2798 <get_pressure_sensor_cmH2O+0x118>)
    271c:	47a0      	blx	r4
    271e:	0003      	movs	r3, r0
    2720:	000c      	movs	r4, r1
    2722:	0019      	movs	r1, r3
    2724:	0022      	movs	r2, r4
    2726:	4b17      	ldr	r3, [pc, #92]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    2728:	0008      	movs	r0, r1
    272a:	0011      	movs	r1, r2
    272c:	4798      	blx	r3
    272e:	1c03      	adds	r3, r0, #0
    2730:	60fb      	str	r3, [r7, #12]

	float pressure_cmH2O = (70.307) * pressure_psi;
    2732:	4b15      	ldr	r3, [pc, #84]	; (2788 <get_pressure_sensor_cmH2O+0x108>)
    2734:	68f8      	ldr	r0, [r7, #12]
    2736:	4798      	blx	r3
    2738:	4c0d      	ldr	r4, [pc, #52]	; (2770 <get_pressure_sensor_cmH2O+0xf0>)
    273a:	4a18      	ldr	r2, [pc, #96]	; (279c <get_pressure_sensor_cmH2O+0x11c>)
    273c:	4b18      	ldr	r3, [pc, #96]	; (27a0 <get_pressure_sensor_cmH2O+0x120>)
    273e:	47a0      	blx	r4
    2740:	0003      	movs	r3, r0
    2742:	000c      	movs	r4, r1
    2744:	0019      	movs	r1, r3
    2746:	0022      	movs	r2, r4
    2748:	4b0e      	ldr	r3, [pc, #56]	; (2784 <get_pressure_sensor_cmH2O+0x104>)
    274a:	0008      	movs	r0, r1
    274c:	0011      	movs	r1, r2
    274e:	4798      	blx	r3
    2750:	1c03      	adds	r3, r0, #0
    2752:	60bb      	str	r3, [r7, #8]
	return pressure_cmH2O;
    2754:	68bb      	ldr	r3, [r7, #8]
 }
    2756:	1c18      	adds	r0, r3, #0
    2758:	46bd      	mov	sp, r7
    275a:	b007      	add	sp, #28
    275c:	bd90      	pop	{r4, r7, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	2000500c 	.word	0x2000500c
    2764:	0000cd75 	.word	0x0000cd75
    2768:	0000b979 	.word	0x0000b979
    276c:	40affe00 	.word	0x40affe00
    2770:	0000c1e1 	.word	0x0000c1e1
    2774:	66666666 	.word	0x66666666
    2778:	400a6666 	.word	0x400a6666
    277c:	8f5c28f6 	.word	0x8f5c28f6
    2780:	3ff8f5c2 	.word	0x3ff8f5c2
    2784:	0000cf0d 	.word	0x0000cf0d
    2788:	0000ce69 	.word	0x0000ce69
    278c:	0000c6e1 	.word	0x0000c6e1
    2790:	3fe00000 	.word	0x3fe00000
    2794:	40140000 	.word	0x40140000
    2798:	40100000 	.word	0x40100000
    279c:	e353f7cf 	.word	0xe353f7cf
    27a0:	405193a5 	.word	0x405193a5

000027a4 <get_pressure_sensor_cmH2O_voted>:
 *	\brief Gets pressure sensor data best estimate and checks for errors
 *
 *	\return The voted pressure in cm-H2O 
 */
 float get_pressure_sensor_cmH2O_voted(void)
 {
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	b089      	sub	sp, #36	; 0x24
    27a8:	af00      	add	r7, sp, #0
	int32_t i;
	// Get pressure
	float pressure_values[3];
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27aa:	2300      	movs	r3, #0
    27ac:	61fb      	str	r3, [r7, #28]
    27ae:	e00c      	b.n	27ca <get_pressure_sensor_cmH2O_voted+0x26>
	{
		pressure_values[i] = get_pressure_sensor_cmH2O(i);
    27b0:	69fb      	ldr	r3, [r7, #28]
    27b2:	b2db      	uxtb	r3, r3
    27b4:	0018      	movs	r0, r3
    27b6:	4b6a      	ldr	r3, [pc, #424]	; (2960 <get_pressure_sensor_cmH2O_voted+0x1bc>)
    27b8:	4798      	blx	r3
    27ba:	1c01      	adds	r1, r0, #0
    27bc:	003b      	movs	r3, r7
    27be:	69fa      	ldr	r2, [r7, #28]
    27c0:	0092      	lsls	r2, r2, #2
    27c2:	50d1      	str	r1, [r2, r3]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27c4:	69fb      	ldr	r3, [r7, #28]
    27c6:	3301      	adds	r3, #1
    27c8:	61fb      	str	r3, [r7, #28]
    27ca:	69fb      	ldr	r3, [r7, #28]
    27cc:	2b02      	cmp	r3, #2
    27ce:	ddef      	ble.n	27b0 <get_pressure_sensor_cmH2O_voted+0xc>
	}
	// Average, eliminate the furthest outlier, and average again to get actual, then check for sensor failure
	float avg_pressure = 0.0;
    27d0:	2300      	movs	r3, #0
    27d2:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    27d4:	2300      	movs	r3, #0
    27d6:	61fb      	str	r3, [r7, #28]
    27d8:	e024      	b.n	2824 <get_pressure_sensor_cmH2O_voted+0x80>
	{
		avg_pressure += 0.33333 *pressure_values[i];
    27da:	4b62      	ldr	r3, [pc, #392]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    27dc:	69b8      	ldr	r0, [r7, #24]
    27de:	4798      	blx	r3
    27e0:	0005      	movs	r5, r0
    27e2:	000e      	movs	r6, r1
    27e4:	003b      	movs	r3, r7
    27e6:	69fa      	ldr	r2, [r7, #28]
    27e8:	0092      	lsls	r2, r2, #2
    27ea:	58d2      	ldr	r2, [r2, r3]
    27ec:	4b5d      	ldr	r3, [pc, #372]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    27ee:	1c10      	adds	r0, r2, #0
    27f0:	4798      	blx	r3
    27f2:	4c5d      	ldr	r4, [pc, #372]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    27f4:	4a5d      	ldr	r2, [pc, #372]	; (296c <get_pressure_sensor_cmH2O_voted+0x1c8>)
    27f6:	4b5e      	ldr	r3, [pc, #376]	; (2970 <get_pressure_sensor_cmH2O_voted+0x1cc>)
    27f8:	47a0      	blx	r4
    27fa:	0003      	movs	r3, r0
    27fc:	000c      	movs	r4, r1
    27fe:	001a      	movs	r2, r3
    2800:	0023      	movs	r3, r4
    2802:	4c5c      	ldr	r4, [pc, #368]	; (2974 <get_pressure_sensor_cmH2O_voted+0x1d0>)
    2804:	0028      	movs	r0, r5
    2806:	0031      	movs	r1, r6
    2808:	47a0      	blx	r4
    280a:	0003      	movs	r3, r0
    280c:	000c      	movs	r4, r1
    280e:	0019      	movs	r1, r3
    2810:	0022      	movs	r2, r4
    2812:	4b59      	ldr	r3, [pc, #356]	; (2978 <get_pressure_sensor_cmH2O_voted+0x1d4>)
    2814:	0008      	movs	r0, r1
    2816:	0011      	movs	r1, r2
    2818:	4798      	blx	r3
    281a:	1c03      	adds	r3, r0, #0
    281c:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    281e:	69fb      	ldr	r3, [r7, #28]
    2820:	3301      	adds	r3, #1
    2822:	61fb      	str	r3, [r7, #28]
    2824:	69fb      	ldr	r3, [r7, #28]
    2826:	2b02      	cmp	r3, #2
    2828:	ddd7      	ble.n	27da <get_pressure_sensor_cmH2O_voted+0x36>
	}
	// Eliminate the furthest outlier of average
	uint8_t biggest_error_index = 0;
    282a:	2317      	movs	r3, #23
    282c:	18fb      	adds	r3, r7, r3
    282e:	2200      	movs	r2, #0
    2830:	701a      	strb	r2, [r3, #0]
	float biggest_error = 0.0;
    2832:	2300      	movs	r3, #0
    2834:	613b      	str	r3, [r7, #16]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2836:	2300      	movs	r3, #0
    2838:	61fb      	str	r3, [r7, #28]
    283a:	e024      	b.n	2886 <get_pressure_sensor_cmH2O_voted+0xe2>
	{
		float this_error = abs(avg_pressure - pressure_values[i]);
    283c:	003b      	movs	r3, r7
    283e:	69fa      	ldr	r2, [r7, #28]
    2840:	0092      	lsls	r2, r2, #2
    2842:	58d2      	ldr	r2, [r2, r3]
    2844:	4b4d      	ldr	r3, [pc, #308]	; (297c <get_pressure_sensor_cmH2O_voted+0x1d8>)
    2846:	1c11      	adds	r1, r2, #0
    2848:	69b8      	ldr	r0, [r7, #24]
    284a:	4798      	blx	r3
    284c:	1c03      	adds	r3, r0, #0
    284e:	1c1a      	adds	r2, r3, #0
    2850:	4b4b      	ldr	r3, [pc, #300]	; (2980 <get_pressure_sensor_cmH2O_voted+0x1dc>)
    2852:	1c10      	adds	r0, r2, #0
    2854:	4798      	blx	r3
    2856:	0003      	movs	r3, r0
    2858:	17d9      	asrs	r1, r3, #31
    285a:	185a      	adds	r2, r3, r1
    285c:	404a      	eors	r2, r1
    285e:	4b49      	ldr	r3, [pc, #292]	; (2984 <get_pressure_sensor_cmH2O_voted+0x1e0>)
    2860:	0010      	movs	r0, r2
    2862:	4798      	blx	r3
    2864:	1c03      	adds	r3, r0, #0
    2866:	60fb      	str	r3, [r7, #12]
		if(this_error > biggest_error)
    2868:	4b47      	ldr	r3, [pc, #284]	; (2988 <get_pressure_sensor_cmH2O_voted+0x1e4>)
    286a:	6939      	ldr	r1, [r7, #16]
    286c:	68f8      	ldr	r0, [r7, #12]
    286e:	4798      	blx	r3
    2870:	1e03      	subs	r3, r0, #0
    2872:	d005      	beq.n	2880 <get_pressure_sensor_cmH2O_voted+0xdc>
		{
			biggest_error = this_error;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	613b      	str	r3, [r7, #16]
			biggest_error_index = i;
    2878:	2317      	movs	r3, #23
    287a:	18fb      	adds	r3, r7, r3
    287c:	69fa      	ldr	r2, [r7, #28]
    287e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2880:	69fb      	ldr	r3, [r7, #28]
    2882:	3301      	adds	r3, #1
    2884:	61fb      	str	r3, [r7, #28]
    2886:	69fb      	ldr	r3, [r7, #28]
    2888:	2b02      	cmp	r3, #2
    288a:	ddd7      	ble.n	283c <get_pressure_sensor_cmH2O_voted+0x98>
		}
	}
	// Average again with closest two values
	avg_pressure = 0.0;
    288c:	2300      	movs	r3, #0
    288e:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    2890:	2300      	movs	r3, #0
    2892:	61fb      	str	r3, [r7, #28]
    2894:	e02a      	b.n	28ec <get_pressure_sensor_cmH2O_voted+0x148>
	{
		if(i != biggest_error_index)
    2896:	2317      	movs	r3, #23
    2898:	18fb      	adds	r3, r7, r3
    289a:	781a      	ldrb	r2, [r3, #0]
    289c:	69fb      	ldr	r3, [r7, #28]
    289e:	429a      	cmp	r2, r3
    28a0:	d021      	beq.n	28e6 <get_pressure_sensor_cmH2O_voted+0x142>
		{
			avg_pressure += 0.5 * pressure_values[i];
    28a2:	4b30      	ldr	r3, [pc, #192]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    28a4:	69b8      	ldr	r0, [r7, #24]
    28a6:	4798      	blx	r3
    28a8:	0005      	movs	r5, r0
    28aa:	000e      	movs	r6, r1
    28ac:	003b      	movs	r3, r7
    28ae:	69fa      	ldr	r2, [r7, #28]
    28b0:	0092      	lsls	r2, r2, #2
    28b2:	58d2      	ldr	r2, [r2, r3]
    28b4:	4b2b      	ldr	r3, [pc, #172]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    28b6:	1c10      	adds	r0, r2, #0
    28b8:	4798      	blx	r3
    28ba:	4c2b      	ldr	r4, [pc, #172]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    28bc:	2200      	movs	r2, #0
    28be:	4b33      	ldr	r3, [pc, #204]	; (298c <get_pressure_sensor_cmH2O_voted+0x1e8>)
    28c0:	47a0      	blx	r4
    28c2:	0003      	movs	r3, r0
    28c4:	000c      	movs	r4, r1
    28c6:	001a      	movs	r2, r3
    28c8:	0023      	movs	r3, r4
    28ca:	4c2a      	ldr	r4, [pc, #168]	; (2974 <get_pressure_sensor_cmH2O_voted+0x1d0>)
    28cc:	0028      	movs	r0, r5
    28ce:	0031      	movs	r1, r6
    28d0:	47a0      	blx	r4
    28d2:	0003      	movs	r3, r0
    28d4:	000c      	movs	r4, r1
    28d6:	0019      	movs	r1, r3
    28d8:	0022      	movs	r2, r4
    28da:	4b27      	ldr	r3, [pc, #156]	; (2978 <get_pressure_sensor_cmH2O_voted+0x1d4>)
    28dc:	0008      	movs	r0, r1
    28de:	0011      	movs	r1, r2
    28e0:	4798      	blx	r3
    28e2:	1c03      	adds	r3, r0, #0
    28e4:	61bb      	str	r3, [r7, #24]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    28e6:	69fb      	ldr	r3, [r7, #28]
    28e8:	3301      	adds	r3, #1
    28ea:	61fb      	str	r3, [r7, #28]
    28ec:	69fb      	ldr	r3, [r7, #28]
    28ee:	2b02      	cmp	r3, #2
    28f0:	ddd1      	ble.n	2896 <get_pressure_sensor_cmH2O_voted+0xf2>
		}
	}
	// Check for sensor failure
	// TODO what is threshold?
	if(abs(pressure_values[biggest_error_index] - avg_pressure) > 0.1*avg_pressure)
    28f2:	2317      	movs	r3, #23
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	781a      	ldrb	r2, [r3, #0]
    28f8:	003b      	movs	r3, r7
    28fa:	0092      	lsls	r2, r2, #2
    28fc:	58d2      	ldr	r2, [r2, r3]
    28fe:	4b1f      	ldr	r3, [pc, #124]	; (297c <get_pressure_sensor_cmH2O_voted+0x1d8>)
    2900:	69b9      	ldr	r1, [r7, #24]
    2902:	1c10      	adds	r0, r2, #0
    2904:	4798      	blx	r3
    2906:	1c03      	adds	r3, r0, #0
    2908:	1c1a      	adds	r2, r3, #0
    290a:	4b1d      	ldr	r3, [pc, #116]	; (2980 <get_pressure_sensor_cmH2O_voted+0x1dc>)
    290c:	1c10      	adds	r0, r2, #0
    290e:	4798      	blx	r3
    2910:	0003      	movs	r3, r0
    2912:	17d9      	asrs	r1, r3, #31
    2914:	185a      	adds	r2, r3, r1
    2916:	404a      	eors	r2, r1
    2918:	4b1d      	ldr	r3, [pc, #116]	; (2990 <get_pressure_sensor_cmH2O_voted+0x1ec>)
    291a:	0010      	movs	r0, r2
    291c:	4798      	blx	r3
    291e:	0005      	movs	r5, r0
    2920:	000e      	movs	r6, r1
    2922:	4b10      	ldr	r3, [pc, #64]	; (2964 <get_pressure_sensor_cmH2O_voted+0x1c0>)
    2924:	69b8      	ldr	r0, [r7, #24]
    2926:	4798      	blx	r3
    2928:	4c0f      	ldr	r4, [pc, #60]	; (2968 <get_pressure_sensor_cmH2O_voted+0x1c4>)
    292a:	4a1a      	ldr	r2, [pc, #104]	; (2994 <get_pressure_sensor_cmH2O_voted+0x1f0>)
    292c:	4b1a      	ldr	r3, [pc, #104]	; (2998 <get_pressure_sensor_cmH2O_voted+0x1f4>)
    292e:	47a0      	blx	r4
    2930:	0003      	movs	r3, r0
    2932:	000c      	movs	r4, r1
    2934:	001a      	movs	r2, r3
    2936:	0023      	movs	r3, r4
    2938:	4c18      	ldr	r4, [pc, #96]	; (299c <get_pressure_sensor_cmH2O_voted+0x1f8>)
    293a:	0028      	movs	r0, r5
    293c:	0031      	movs	r1, r6
    293e:	47a0      	blx	r4
    2940:	1e03      	subs	r3, r0, #0
    2942:	d004      	beq.n	294e <get_pressure_sensor_cmH2O_voted+0x1aa>
	{
		set_alarm(ALARM_PRESSURE_SENSOR, true);
    2944:	2101      	movs	r1, #1
    2946:	2002      	movs	r0, #2
    2948:	4b15      	ldr	r3, [pc, #84]	; (29a0 <get_pressure_sensor_cmH2O_voted+0x1fc>)
    294a:	4798      	blx	r3
    294c:	e003      	b.n	2956 <get_pressure_sensor_cmH2O_voted+0x1b2>
	}
	else
	{
		set_alarm(ALARM_PRESSURE_SENSOR, false);
    294e:	2100      	movs	r1, #0
    2950:	2002      	movs	r0, #2
    2952:	4b13      	ldr	r3, [pc, #76]	; (29a0 <get_pressure_sensor_cmH2O_voted+0x1fc>)
    2954:	4798      	blx	r3
	}
	return avg_pressure;
    2956:	69bb      	ldr	r3, [r7, #24]
 }
    2958:	1c18      	adds	r0, r3, #0
    295a:	46bd      	mov	sp, r7
    295c:	b009      	add	sp, #36	; 0x24
    295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2960:	00002681 	.word	0x00002681
    2964:	0000ce69 	.word	0x0000ce69
    2968:	0000c1e1 	.word	0x0000c1e1
    296c:	5a31a4be 	.word	0x5a31a4be
    2970:	3fd55547 	.word	0x3fd55547
    2974:	0000b359 	.word	0x0000b359
    2978:	0000cf0d 	.word	0x0000cf0d
    297c:	0000af41 	.word	0x0000af41
    2980:	0000b279 	.word	0x0000b279
    2984:	0000b2b9 	.word	0x0000b2b9
    2988:	0000a391 	.word	0x0000a391
    298c:	3fe00000 	.word	0x3fe00000
    2990:	0000cd75 	.word	0x0000cd75
    2994:	9999999a 	.word	0x9999999a
    2998:	3fb99999 	.word	0x3fb99999
    299c:	0000a31d 	.word	0x0000a31d
    29a0:	000029f9 	.word	0x000029f9

000029a4 <get_input_potentiometer_portion>:
 *	\brief Gets portion of full scale from potentiometer input
 *
 *	\return The portion from 0.0 to 1.0
 */
 float get_input_potentiometer_portion(void)
 {
    29a4:	b5b0      	push	{r4, r5, r7, lr}
    29a6:	af00      	add	r7, sp, #0
	return (potentiometer_meas_raw / ADC_MAX);
    29a8:	4b0b      	ldr	r3, [pc, #44]	; (29d8 <get_input_potentiometer_portion+0x34>)
    29aa:	881b      	ldrh	r3, [r3, #0]
    29ac:	b29b      	uxth	r3, r3
    29ae:	001a      	movs	r2, r3
    29b0:	4b0a      	ldr	r3, [pc, #40]	; (29dc <get_input_potentiometer_portion+0x38>)
    29b2:	0010      	movs	r0, r2
    29b4:	4798      	blx	r3
    29b6:	4c0a      	ldr	r4, [pc, #40]	; (29e0 <get_input_potentiometer_portion+0x3c>)
    29b8:	2200      	movs	r2, #0
    29ba:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <get_input_potentiometer_portion+0x40>)
    29bc:	47a0      	blx	r4
    29be:	0003      	movs	r3, r0
    29c0:	000c      	movs	r4, r1
    29c2:	0019      	movs	r1, r3
    29c4:	0022      	movs	r2, r4
    29c6:	4b08      	ldr	r3, [pc, #32]	; (29e8 <get_input_potentiometer_portion+0x44>)
    29c8:	0008      	movs	r0, r1
    29ca:	0011      	movs	r1, r2
    29cc:	4798      	blx	r3
    29ce:	1c03      	adds	r3, r0, #0
 }
    29d0:	1c18      	adds	r0, r3, #0
    29d2:	46bd      	mov	sp, r7
    29d4:	bdb0      	pop	{r4, r5, r7, pc}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	20005012 	.word	0x20005012
    29dc:	0000cd75 	.word	0x0000cd75
    29e0:	0000b979 	.word	0x0000b979
    29e4:	40affe00 	.word	0x40affe00
    29e8:	0000cf0d 	.word	0x0000cf0d

000029ec <get_motor_temp_celsius>:
 *	\brief Gets motor temperature
 *
 *	\return The temperature in Celsius
 */
 float get_motor_temp_celsius(void)
 {
    29ec:	b580      	push	{r7, lr}
    29ee:	af00      	add	r7, sp, #0
	// TODO what is scale?
 }
    29f0:	46c0      	nop			; (mov r8, r8)
    29f2:	1c18      	adds	r0, r3, #0
    29f4:	46bd      	mov	sp, r7
    29f6:	bd80      	pop	{r7, pc}

000029f8 <set_alarm>:
*
*	\param alarm_type The alarm to set
*	\param set If true, alarm is set; if false, alarm is cleared
*/
void set_alarm(ALARM_TYPE_INDEX alarm_type, bool set)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b082      	sub	sp, #8
    29fc:	af00      	add	r7, sp, #0
    29fe:	0002      	movs	r2, r0
    2a00:	1dfb      	adds	r3, r7, #7
    2a02:	701a      	strb	r2, [r3, #0]
    2a04:	1dbb      	adds	r3, r7, #6
    2a06:	1c0a      	adds	r2, r1, #0
    2a08:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    2a0a:	1dfb      	adds	r3, r7, #7
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	2b1f      	cmp	r3, #31
    2a10:	d81c      	bhi.n	2a4c <set_alarm+0x54>
	{
		return;
	}

	if(set)
    2a12:	1dbb      	adds	r3, r7, #6
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d00b      	beq.n	2a32 <set_alarm+0x3a>
	{
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
    2a1a:	1dfb      	adds	r3, r7, #7
    2a1c:	781b      	ldrb	r3, [r3, #0]
    2a1e:	2201      	movs	r2, #1
    2a20:	409a      	lsls	r2, r3
    2a22:	0013      	movs	r3, r2
    2a24:	001a      	movs	r2, r3
    2a26:	4b0b      	ldr	r3, [pc, #44]	; (2a54 <set_alarm+0x5c>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	431a      	orrs	r2, r3
    2a2c:	4b09      	ldr	r3, [pc, #36]	; (2a54 <set_alarm+0x5c>)
    2a2e:	601a      	str	r2, [r3, #0]
    2a30:	e00d      	b.n	2a4e <set_alarm+0x56>
	}
	else
	{
		alarm_bitfield &= ~(1 << (uint32_t) alarm_type);
    2a32:	1dfb      	adds	r3, r7, #7
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2201      	movs	r2, #1
    2a38:	409a      	lsls	r2, r3
    2a3a:	0013      	movs	r3, r2
    2a3c:	43db      	mvns	r3, r3
    2a3e:	001a      	movs	r2, r3
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <set_alarm+0x5c>)
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	401a      	ands	r2, r3
    2a46:	4b03      	ldr	r3, [pc, #12]	; (2a54 <set_alarm+0x5c>)
    2a48:	601a      	str	r2, [r3, #0]
    2a4a:	e000      	b.n	2a4e <set_alarm+0x56>
		return;
    2a4c:	46c0      	nop			; (mov r8, r8)
	}
	
}
    2a4e:	46bd      	mov	sp, r7
    2a50:	b002      	add	sp, #8
    2a52:	bd80      	pop	{r7, pc}
    2a54:	2000501c 	.word	0x2000501c

00002a58 <check_alarm>:
*	\param alarm_type The alarm to check
*
*	\return True if the alarm is set, false if not
*/
bool check_alarm(ALARM_TYPE_INDEX alarm_type)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b082      	sub	sp, #8
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	0002      	movs	r2, r0
    2a60:	1dfb      	adds	r3, r7, #7
    2a62:	701a      	strb	r2, [r3, #0]
	if((uint32_t) alarm_type > 31)
    2a64:	1dfb      	adds	r3, r7, #7
    2a66:	781b      	ldrb	r3, [r3, #0]
    2a68:	2b1f      	cmp	r3, #31
    2a6a:	d901      	bls.n	2a70 <check_alarm+0x18>
	{
		return false;
    2a6c:	2300      	movs	r3, #0
    2a6e:	e00b      	b.n	2a88 <check_alarm+0x30>
	}

	return (alarm_bitfield & (1 << (uint32_t) alarm_type));
    2a70:	1dfb      	adds	r3, r7, #7
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	2201      	movs	r2, #1
    2a76:	409a      	lsls	r2, r3
    2a78:	0013      	movs	r3, r2
    2a7a:	001a      	movs	r2, r3
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <check_alarm+0x38>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	4013      	ands	r3, r2
    2a82:	1e5a      	subs	r2, r3, #1
    2a84:	4193      	sbcs	r3, r2
    2a86:	b2db      	uxtb	r3, r3
}
    2a88:	0018      	movs	r0, r3
    2a8a:	46bd      	mov	sp, r7
    2a8c:	b002      	add	sp, #8
    2a8e:	bd80      	pop	{r7, pc}
    2a90:	2000501c 	.word	0x2000501c

00002a94 <any_alarms_set>:
*	\brief Checks if any alarm is set
*
*	\return True if any alarm is set
*/
bool any_alarms_set(void)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	af00      	add	r7, sp, #0
	return (alarm_bitfield != 0);
    2a98:	4b03      	ldr	r3, [pc, #12]	; (2aa8 <any_alarms_set+0x14>)
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	1e5a      	subs	r2, r3, #1
    2a9e:	4193      	sbcs	r3, r2
    2aa0:	b2db      	uxtb	r3, r3
    2aa2:	0018      	movs	r0, r3
    2aa4:	46bd      	mov	sp, r7
    2aa6:	bd80      	pop	{r7, pc}
    2aa8:	2000501c 	.word	0x2000501c

00002aac <calculate_new_setpoint>:
 } CONTROL_PROFILE_STAGE;

 static CONTROL_PROFILE_STAGE stage;
 
 static uint32_t calculate_new_setpoint(uint32_t stage_start_time_ms, uint32_t current_time_ms, lcv_state_t * state, lcv_control_t * control)
 {
    2aac:	b5b0      	push	{r4, r5, r7, lr}
    2aae:	b088      	sub	sp, #32
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	60f8      	str	r0, [r7, #12]
    2ab4:	60b9      	str	r1, [r7, #8]
    2ab6:	607a      	str	r2, [r7, #4]
    2ab8:	603b      	str	r3, [r7, #0]
	int32_t time_into_profile = current_time_ms - stage_start_time_ms;
    2aba:	68ba      	ldr	r2, [r7, #8]
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	1ad3      	subs	r3, r2, r3
    2ac0:	61bb      	str	r3, [r7, #24]
	uint32_t new_state_start = stage_start_time_ms;
    2ac2:	68fb      	ldr	r3, [r7, #12]
    2ac4:	61fb      	str	r3, [r7, #28]
	// In PEEP to PIP stage?
	if(time_into_profile < control->peep_to_pip_rampup_ms)
    2ac6:	683b      	ldr	r3, [r7, #0]
    2ac8:	681a      	ldr	r2, [r3, #0]
    2aca:	69bb      	ldr	r3, [r7, #24]
    2acc:	429a      	cmp	r2, r3
    2ace:	dd2c      	ble.n	2b2a <calculate_new_setpoint+0x7e>
	{
		// Linear ramp up
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	689a      	ldr	r2, [r3, #8]
    2ad4:	683b      	ldr	r3, [r7, #0]
    2ad6:	611a      	str	r2, [r3, #16]
		float section_factor = ((float) (time_into_profile) / (float) control->peep_to_pip_rampup_ms);
    2ad8:	4b54      	ldr	r3, [pc, #336]	; (2c2c <calculate_new_setpoint+0x180>)
    2ada:	69b8      	ldr	r0, [r7, #24]
    2adc:	4798      	blx	r3
    2ade:	1c04      	adds	r4, r0, #0
    2ae0:	683b      	ldr	r3, [r7, #0]
    2ae2:	681a      	ldr	r2, [r3, #0]
    2ae4:	4b51      	ldr	r3, [pc, #324]	; (2c2c <calculate_new_setpoint+0x180>)
    2ae6:	0010      	movs	r0, r2
    2ae8:	4798      	blx	r3
    2aea:	1c02      	adds	r2, r0, #0
    2aec:	4b50      	ldr	r3, [pc, #320]	; (2c30 <calculate_new_setpoint+0x184>)
    2aee:	1c11      	adds	r1, r2, #0
    2af0:	1c20      	adds	r0, r4, #0
    2af2:	4798      	blx	r3
    2af4:	1c03      	adds	r3, r0, #0
    2af6:	617b      	str	r3, [r7, #20]
		control->pressure_set_point_cm_h20 += (int32_t)  (section_factor * (state->setting_state.pip_cm_h20 - state->setting_state.peep_cm_h20));
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	691c      	ldr	r4, [r3, #16]
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	68da      	ldr	r2, [r3, #12]
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	689b      	ldr	r3, [r3, #8]
    2b04:	1ad2      	subs	r2, r2, r3
    2b06:	4b49      	ldr	r3, [pc, #292]	; (2c2c <calculate_new_setpoint+0x180>)
    2b08:	0010      	movs	r0, r2
    2b0a:	4798      	blx	r3
    2b0c:	1c02      	adds	r2, r0, #0
    2b0e:	4b49      	ldr	r3, [pc, #292]	; (2c34 <calculate_new_setpoint+0x188>)
    2b10:	6979      	ldr	r1, [r7, #20]
    2b12:	1c10      	adds	r0, r2, #0
    2b14:	4798      	blx	r3
    2b16:	1c03      	adds	r3, r0, #0
    2b18:	1c1a      	adds	r2, r3, #0
    2b1a:	4b47      	ldr	r3, [pc, #284]	; (2c38 <calculate_new_setpoint+0x18c>)
    2b1c:	1c10      	adds	r0, r2, #0
    2b1e:	4798      	blx	r3
    2b20:	0003      	movs	r3, r0
    2b22:	18e2      	adds	r2, r4, r3
    2b24:	683b      	ldr	r3, [r7, #0]
    2b26:	611a      	str	r2, [r3, #16]
    2b28:	e07b      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms))
    2b2a:	683b      	ldr	r3, [r7, #0]
    2b2c:	681a      	ldr	r2, [r3, #0]
    2b2e:	683b      	ldr	r3, [r7, #0]
    2b30:	685b      	ldr	r3, [r3, #4]
    2b32:	18d2      	adds	r2, r2, r3
    2b34:	69bb      	ldr	r3, [r7, #24]
    2b36:	429a      	cmp	r2, r3
    2b38:	dd04      	ble.n	2b44 <calculate_new_setpoint+0x98>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	68da      	ldr	r2, [r3, #12]
    2b3e:	683b      	ldr	r3, [r7, #0]
    2b40:	611a      	str	r2, [r3, #16]
    2b42:	e06e      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms))
    2b44:	683b      	ldr	r3, [r7, #0]
    2b46:	681a      	ldr	r2, [r3, #0]
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	685b      	ldr	r3, [r3, #4]
    2b4c:	18d2      	adds	r2, r2, r3
    2b4e:	683b      	ldr	r3, [r7, #0]
    2b50:	689b      	ldr	r3, [r3, #8]
    2b52:	18d2      	adds	r2, r2, r3
    2b54:	69bb      	ldr	r3, [r7, #24]
    2b56:	429a      	cmp	r2, r3
    2b58:	dd3d      	ble.n	2bd6 <calculate_new_setpoint+0x12a>
	{
		// Linear ramp down
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	68da      	ldr	r2, [r3, #12]
    2b5e:	683b      	ldr	r3, [r7, #0]
    2b60:	611a      	str	r2, [r3, #16]
		
		float section_dt = time_into_profile - (control->peep_to_pip_rampup_ms + control->pip_hold_ms);
    2b62:	683b      	ldr	r3, [r7, #0]
    2b64:	681a      	ldr	r2, [r3, #0]
    2b66:	683b      	ldr	r3, [r7, #0]
    2b68:	685b      	ldr	r3, [r3, #4]
    2b6a:	18d3      	adds	r3, r2, r3
    2b6c:	69ba      	ldr	r2, [r7, #24]
    2b6e:	1ad2      	subs	r2, r2, r3
    2b70:	4b2e      	ldr	r3, [pc, #184]	; (2c2c <calculate_new_setpoint+0x180>)
    2b72:	0010      	movs	r0, r2
    2b74:	4798      	blx	r3
    2b76:	1c03      	adds	r3, r0, #0
    2b78:	613b      	str	r3, [r7, #16]
		control->pressure_set_point_cm_h20 += (section_dt / (float) control->pip_to_peep_rampdown_ms) * (state->setting_state.peep_cm_h20 - state->setting_state.pip_cm_h20);
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	691a      	ldr	r2, [r3, #16]
    2b7e:	4b2b      	ldr	r3, [pc, #172]	; (2c2c <calculate_new_setpoint+0x180>)
    2b80:	0010      	movs	r0, r2
    2b82:	4798      	blx	r3
    2b84:	1c04      	adds	r4, r0, #0
    2b86:	683b      	ldr	r3, [r7, #0]
    2b88:	689a      	ldr	r2, [r3, #8]
    2b8a:	4b28      	ldr	r3, [pc, #160]	; (2c2c <calculate_new_setpoint+0x180>)
    2b8c:	0010      	movs	r0, r2
    2b8e:	4798      	blx	r3
    2b90:	1c02      	adds	r2, r0, #0
    2b92:	4b27      	ldr	r3, [pc, #156]	; (2c30 <calculate_new_setpoint+0x184>)
    2b94:	1c11      	adds	r1, r2, #0
    2b96:	6938      	ldr	r0, [r7, #16]
    2b98:	4798      	blx	r3
    2b9a:	1c03      	adds	r3, r0, #0
    2b9c:	1c1d      	adds	r5, r3, #0
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	689a      	ldr	r2, [r3, #8]
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	68db      	ldr	r3, [r3, #12]
    2ba6:	1ad2      	subs	r2, r2, r3
    2ba8:	4b20      	ldr	r3, [pc, #128]	; (2c2c <calculate_new_setpoint+0x180>)
    2baa:	0010      	movs	r0, r2
    2bac:	4798      	blx	r3
    2bae:	1c02      	adds	r2, r0, #0
    2bb0:	4b20      	ldr	r3, [pc, #128]	; (2c34 <calculate_new_setpoint+0x188>)
    2bb2:	1c11      	adds	r1, r2, #0
    2bb4:	1c28      	adds	r0, r5, #0
    2bb6:	4798      	blx	r3
    2bb8:	1c03      	adds	r3, r0, #0
    2bba:	1c1a      	adds	r2, r3, #0
    2bbc:	4b1f      	ldr	r3, [pc, #124]	; (2c3c <calculate_new_setpoint+0x190>)
    2bbe:	1c11      	adds	r1, r2, #0
    2bc0:	1c20      	adds	r0, r4, #0
    2bc2:	4798      	blx	r3
    2bc4:	1c03      	adds	r3, r0, #0
    2bc6:	1c1a      	adds	r2, r3, #0
    2bc8:	4b1b      	ldr	r3, [pc, #108]	; (2c38 <calculate_new_setpoint+0x18c>)
    2bca:	1c10      	adds	r0, r2, #0
    2bcc:	4798      	blx	r3
    2bce:	0002      	movs	r2, r0
    2bd0:	683b      	ldr	r3, [r7, #0]
    2bd2:	611a      	str	r2, [r3, #16]
    2bd4:	e025      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms))
    2bd6:	683b      	ldr	r3, [r7, #0]
    2bd8:	681a      	ldr	r2, [r3, #0]
    2bda:	683b      	ldr	r3, [r7, #0]
    2bdc:	685b      	ldr	r3, [r3, #4]
    2bde:	18d2      	adds	r2, r2, r3
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	689b      	ldr	r3, [r3, #8]
    2be4:	18d2      	adds	r2, r2, r3
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	68db      	ldr	r3, [r3, #12]
    2bea:	18d2      	adds	r2, r2, r3
    2bec:	69bb      	ldr	r3, [r7, #24]
    2bee:	429a      	cmp	r2, r3
    2bf0:	dd04      	ble.n	2bfc <calculate_new_setpoint+0x150>
	{
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	689a      	ldr	r2, [r3, #8]
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	611a      	str	r2, [r3, #16]
    2bfa:	e012      	b.n	2c22 <calculate_new_setpoint+0x176>
	}
	else
	{
		// Time over this setpoint, return new transition time, keep at PEEP
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	689a      	ldr	r2, [r3, #8]
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	611a      	str	r2, [r3, #16]
		new_state_start = stage_start_time_ms + (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms);
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	681a      	ldr	r2, [r3, #0]
    2c08:	683b      	ldr	r3, [r7, #0]
    2c0a:	685b      	ldr	r3, [r3, #4]
    2c0c:	18d2      	adds	r2, r2, r3
    2c0e:	683b      	ldr	r3, [r7, #0]
    2c10:	689b      	ldr	r3, [r3, #8]
    2c12:	18d2      	adds	r2, r2, r3
    2c14:	683b      	ldr	r3, [r7, #0]
    2c16:	68db      	ldr	r3, [r3, #12]
    2c18:	18d3      	adds	r3, r2, r3
    2c1a:	001a      	movs	r2, r3
    2c1c:	68fb      	ldr	r3, [r7, #12]
    2c1e:	18d3      	adds	r3, r2, r3
    2c20:	61fb      	str	r3, [r7, #28]
	}
	return new_state_start;
    2c22:	69fb      	ldr	r3, [r7, #28]
 }
    2c24:	0018      	movs	r0, r3
    2c26:	46bd      	mov	sp, r7
    2c28:	b008      	add	sp, #32
    2c2a:	bdb0      	pop	{r4, r5, r7, pc}
    2c2c:	0000b2b9 	.word	0x0000b2b9
    2c30:	0000a921 	.word	0x0000a921
    2c34:	0000ad01 	.word	0x0000ad01
    2c38:	0000b279 	.word	0x0000b279
    2c3c:	0000a5fd 	.word	0x0000a5fd

00002c40 <pidf_control>:
 *
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 static float pidf_control(lcv_control_t * control, controller_param_t * params)
 {
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	b089      	sub	sp, #36	; 0x24
    2c44:	af00      	add	r7, sp, #0
    2c46:	60f8      	str	r0, [r7, #12]
    2c48:	60b9      	str	r1, [r7, #8]
	static float error_integral = 0.0;
	static float error_derivative = 0.0;
	static float last_error;

	float error = control->pressure_set_point_cm_h20 - control->pressure_current_cm_h20;
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	691a      	ldr	r2, [r3, #16]
    2c4e:	68fb      	ldr	r3, [r7, #12]
    2c50:	695b      	ldr	r3, [r3, #20]
    2c52:	1ad2      	subs	r2, r2, r3
    2c54:	4b7d      	ldr	r3, [pc, #500]	; (2e4c <pidf_control+0x20c>)
    2c56:	0010      	movs	r0, r2
    2c58:	4798      	blx	r3
    2c5a:	1c03      	adds	r3, r0, #0
    2c5c:	61bb      	str	r3, [r7, #24]

	float alpha = 0.7;
    2c5e:	4b7c      	ldr	r3, [pc, #496]	; (2e50 <pidf_control+0x210>)
    2c60:	617b      	str	r3, [r7, #20]
	error_derivative = alpha*(error-last_error) + (1.0 - alpha)*error_derivative;
    2c62:	4b7c      	ldr	r3, [pc, #496]	; (2e54 <pidf_control+0x214>)
    2c64:	681a      	ldr	r2, [r3, #0]
    2c66:	4b7c      	ldr	r3, [pc, #496]	; (2e58 <pidf_control+0x218>)
    2c68:	1c11      	adds	r1, r2, #0
    2c6a:	69b8      	ldr	r0, [r7, #24]
    2c6c:	4798      	blx	r3
    2c6e:	1c03      	adds	r3, r0, #0
    2c70:	1c1a      	adds	r2, r3, #0
    2c72:	4b7a      	ldr	r3, [pc, #488]	; (2e5c <pidf_control+0x21c>)
    2c74:	6979      	ldr	r1, [r7, #20]
    2c76:	1c10      	adds	r0, r2, #0
    2c78:	4798      	blx	r3
    2c7a:	1c03      	adds	r3, r0, #0
    2c7c:	1c1a      	adds	r2, r3, #0
    2c7e:	4b78      	ldr	r3, [pc, #480]	; (2e60 <pidf_control+0x220>)
    2c80:	1c10      	adds	r0, r2, #0
    2c82:	4798      	blx	r3
    2c84:	0005      	movs	r5, r0
    2c86:	000e      	movs	r6, r1
    2c88:	4b75      	ldr	r3, [pc, #468]	; (2e60 <pidf_control+0x220>)
    2c8a:	6978      	ldr	r0, [r7, #20]
    2c8c:	4798      	blx	r3
    2c8e:	0002      	movs	r2, r0
    2c90:	000b      	movs	r3, r1
    2c92:	4c74      	ldr	r4, [pc, #464]	; (2e64 <pidf_control+0x224>)
    2c94:	2000      	movs	r0, #0
    2c96:	4974      	ldr	r1, [pc, #464]	; (2e68 <pidf_control+0x228>)
    2c98:	47a0      	blx	r4
    2c9a:	0003      	movs	r3, r0
    2c9c:	000c      	movs	r4, r1
    2c9e:	603b      	str	r3, [r7, #0]
    2ca0:	607c      	str	r4, [r7, #4]
    2ca2:	4b72      	ldr	r3, [pc, #456]	; (2e6c <pidf_control+0x22c>)
    2ca4:	681a      	ldr	r2, [r3, #0]
    2ca6:	4b6e      	ldr	r3, [pc, #440]	; (2e60 <pidf_control+0x220>)
    2ca8:	1c10      	adds	r0, r2, #0
    2caa:	4798      	blx	r3
    2cac:	0002      	movs	r2, r0
    2cae:	000b      	movs	r3, r1
    2cb0:	4c6f      	ldr	r4, [pc, #444]	; (2e70 <pidf_control+0x230>)
    2cb2:	6838      	ldr	r0, [r7, #0]
    2cb4:	6879      	ldr	r1, [r7, #4]
    2cb6:	47a0      	blx	r4
    2cb8:	0003      	movs	r3, r0
    2cba:	000c      	movs	r4, r1
    2cbc:	001a      	movs	r2, r3
    2cbe:	0023      	movs	r3, r4
    2cc0:	4c6c      	ldr	r4, [pc, #432]	; (2e74 <pidf_control+0x234>)
    2cc2:	0028      	movs	r0, r5
    2cc4:	0031      	movs	r1, r6
    2cc6:	47a0      	blx	r4
    2cc8:	0003      	movs	r3, r0
    2cca:	000c      	movs	r4, r1
    2ccc:	0019      	movs	r1, r3
    2cce:	0022      	movs	r2, r4
    2cd0:	4b69      	ldr	r3, [pc, #420]	; (2e78 <pidf_control+0x238>)
    2cd2:	0008      	movs	r0, r1
    2cd4:	0011      	movs	r1, r2
    2cd6:	4798      	blx	r3
    2cd8:	1c02      	adds	r2, r0, #0
    2cda:	4b64      	ldr	r3, [pc, #400]	; (2e6c <pidf_control+0x22c>)
    2cdc:	601a      	str	r2, [r3, #0]

	if(abs(error) < params->integral_enable_error_range)
    2cde:	4b67      	ldr	r3, [pc, #412]	; (2e7c <pidf_control+0x23c>)
    2ce0:	69b8      	ldr	r0, [r7, #24]
    2ce2:	4798      	blx	r3
    2ce4:	0003      	movs	r3, r0
    2ce6:	17d9      	asrs	r1, r3, #31
    2ce8:	185a      	adds	r2, r3, r1
    2cea:	404a      	eors	r2, r1
    2cec:	4b57      	ldr	r3, [pc, #348]	; (2e4c <pidf_control+0x20c>)
    2cee:	0010      	movs	r0, r2
    2cf0:	4798      	blx	r3
    2cf2:	68bb      	ldr	r3, [r7, #8]
    2cf4:	695a      	ldr	r2, [r3, #20]
    2cf6:	4b62      	ldr	r3, [pc, #392]	; (2e80 <pidf_control+0x240>)
    2cf8:	1c11      	adds	r1, r2, #0
    2cfa:	4798      	blx	r3
    2cfc:	1e03      	subs	r3, r0, #0
    2cfe:	d049      	beq.n	2d94 <pidf_control+0x154>
	{
		error_integral += error;
    2d00:	4b60      	ldr	r3, [pc, #384]	; (2e84 <pidf_control+0x244>)
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	4b60      	ldr	r3, [pc, #384]	; (2e88 <pidf_control+0x248>)
    2d06:	69b9      	ldr	r1, [r7, #24]
    2d08:	1c10      	adds	r0, r2, #0
    2d0a:	4798      	blx	r3
    2d0c:	1c03      	adds	r3, r0, #0
    2d0e:	1c1a      	adds	r2, r3, #0
    2d10:	4b5c      	ldr	r3, [pc, #368]	; (2e84 <pidf_control+0x244>)
    2d12:	601a      	str	r2, [r3, #0]
		if(abs(error_integral * params->ki) > params->interal_antiwindup)
    2d14:	68bb      	ldr	r3, [r7, #8]
    2d16:	689a      	ldr	r2, [r3, #8]
    2d18:	4b5a      	ldr	r3, [pc, #360]	; (2e84 <pidf_control+0x244>)
    2d1a:	6819      	ldr	r1, [r3, #0]
    2d1c:	4b4f      	ldr	r3, [pc, #316]	; (2e5c <pidf_control+0x21c>)
    2d1e:	1c10      	adds	r0, r2, #0
    2d20:	4798      	blx	r3
    2d22:	1c03      	adds	r3, r0, #0
    2d24:	1c1a      	adds	r2, r3, #0
    2d26:	4b55      	ldr	r3, [pc, #340]	; (2e7c <pidf_control+0x23c>)
    2d28:	1c10      	adds	r0, r2, #0
    2d2a:	4798      	blx	r3
    2d2c:	0003      	movs	r3, r0
    2d2e:	17d9      	asrs	r1, r3, #31
    2d30:	185a      	adds	r2, r3, r1
    2d32:	404a      	eors	r2, r1
    2d34:	4b45      	ldr	r3, [pc, #276]	; (2e4c <pidf_control+0x20c>)
    2d36:	0010      	movs	r0, r2
    2d38:	4798      	blx	r3
    2d3a:	68bb      	ldr	r3, [r7, #8]
    2d3c:	691a      	ldr	r2, [r3, #16]
    2d3e:	4b53      	ldr	r3, [pc, #332]	; (2e8c <pidf_control+0x24c>)
    2d40:	1c11      	adds	r1, r2, #0
    2d42:	4798      	blx	r3
    2d44:	1e03      	subs	r3, r0, #0
    2d46:	d028      	beq.n	2d9a <pidf_control+0x15a>
		{
			error_integral	= (error_integral/abs(error_integral)) * (params->interal_antiwindup) / params->ki;
    2d48:	4b4e      	ldr	r3, [pc, #312]	; (2e84 <pidf_control+0x244>)
    2d4a:	681c      	ldr	r4, [r3, #0]
    2d4c:	4b4d      	ldr	r3, [pc, #308]	; (2e84 <pidf_control+0x244>)
    2d4e:	681a      	ldr	r2, [r3, #0]
    2d50:	4b4a      	ldr	r3, [pc, #296]	; (2e7c <pidf_control+0x23c>)
    2d52:	1c10      	adds	r0, r2, #0
    2d54:	4798      	blx	r3
    2d56:	0003      	movs	r3, r0
    2d58:	17d9      	asrs	r1, r3, #31
    2d5a:	185a      	adds	r2, r3, r1
    2d5c:	404a      	eors	r2, r1
    2d5e:	4b3b      	ldr	r3, [pc, #236]	; (2e4c <pidf_control+0x20c>)
    2d60:	0010      	movs	r0, r2
    2d62:	4798      	blx	r3
    2d64:	1c02      	adds	r2, r0, #0
    2d66:	4b4a      	ldr	r3, [pc, #296]	; (2e90 <pidf_control+0x250>)
    2d68:	1c11      	adds	r1, r2, #0
    2d6a:	1c20      	adds	r0, r4, #0
    2d6c:	4798      	blx	r3
    2d6e:	1c03      	adds	r3, r0, #0
    2d70:	1c18      	adds	r0, r3, #0
    2d72:	68bb      	ldr	r3, [r7, #8]
    2d74:	691a      	ldr	r2, [r3, #16]
    2d76:	4b39      	ldr	r3, [pc, #228]	; (2e5c <pidf_control+0x21c>)
    2d78:	1c11      	adds	r1, r2, #0
    2d7a:	4798      	blx	r3
    2d7c:	1c03      	adds	r3, r0, #0
    2d7e:	1c18      	adds	r0, r3, #0
    2d80:	68bb      	ldr	r3, [r7, #8]
    2d82:	689a      	ldr	r2, [r3, #8]
    2d84:	4b42      	ldr	r3, [pc, #264]	; (2e90 <pidf_control+0x250>)
    2d86:	1c11      	adds	r1, r2, #0
    2d88:	4798      	blx	r3
    2d8a:	1c03      	adds	r3, r0, #0
    2d8c:	1c1a      	adds	r2, r3, #0
    2d8e:	4b3d      	ldr	r3, [pc, #244]	; (2e84 <pidf_control+0x244>)
    2d90:	601a      	str	r2, [r3, #0]
    2d92:	e002      	b.n	2d9a <pidf_control+0x15a>
		}
	}
	else
	{
		error_integral = 0.0;
    2d94:	4b3b      	ldr	r3, [pc, #236]	; (2e84 <pidf_control+0x244>)
    2d96:	2200      	movs	r2, #0
    2d98:	601a      	str	r2, [r3, #0]
	}

	float output = params->kf * control->pressure_set_point_cm_h20 +
    2d9a:	68bb      	ldr	r3, [r7, #8]
    2d9c:	681c      	ldr	r4, [r3, #0]
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	691a      	ldr	r2, [r3, #16]
    2da2:	4b2a      	ldr	r3, [pc, #168]	; (2e4c <pidf_control+0x20c>)
    2da4:	0010      	movs	r0, r2
    2da6:	4798      	blx	r3
    2da8:	1c02      	adds	r2, r0, #0
    2daa:	4b2c      	ldr	r3, [pc, #176]	; (2e5c <pidf_control+0x21c>)
    2dac:	1c11      	adds	r1, r2, #0
    2dae:	1c20      	adds	r0, r4, #0
    2db0:	4798      	blx	r3
    2db2:	1c03      	adds	r3, r0, #0
    2db4:	1c1c      	adds	r4, r3, #0
					params->kp * error +
    2db6:	68bb      	ldr	r3, [r7, #8]
    2db8:	685a      	ldr	r2, [r3, #4]
    2dba:	4b28      	ldr	r3, [pc, #160]	; (2e5c <pidf_control+0x21c>)
    2dbc:	69b9      	ldr	r1, [r7, #24]
    2dbe:	1c10      	adds	r0, r2, #0
    2dc0:	4798      	blx	r3
    2dc2:	1c03      	adds	r3, r0, #0
    2dc4:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    2dc6:	4b30      	ldr	r3, [pc, #192]	; (2e88 <pidf_control+0x248>)
    2dc8:	1c11      	adds	r1, r2, #0
    2dca:	1c20      	adds	r0, r4, #0
    2dcc:	4798      	blx	r3
    2dce:	1c03      	adds	r3, r0, #0
    2dd0:	1c1c      	adds	r4, r3, #0
					params->ki * error_integral +
    2dd2:	68bb      	ldr	r3, [r7, #8]
    2dd4:	689a      	ldr	r2, [r3, #8]
    2dd6:	4b2b      	ldr	r3, [pc, #172]	; (2e84 <pidf_control+0x244>)
    2dd8:	6819      	ldr	r1, [r3, #0]
    2dda:	4b20      	ldr	r3, [pc, #128]	; (2e5c <pidf_control+0x21c>)
    2ddc:	1c10      	adds	r0, r2, #0
    2dde:	4798      	blx	r3
    2de0:	1c03      	adds	r3, r0, #0
    2de2:	1c1a      	adds	r2, r3, #0
					params->kp * error +
    2de4:	4b28      	ldr	r3, [pc, #160]	; (2e88 <pidf_control+0x248>)
    2de6:	1c11      	adds	r1, r2, #0
    2de8:	1c20      	adds	r0, r4, #0
    2dea:	4798      	blx	r3
    2dec:	1c03      	adds	r3, r0, #0
    2dee:	1c1c      	adds	r4, r3, #0
					params->kd * error_derivative;
    2df0:	68bb      	ldr	r3, [r7, #8]
    2df2:	68da      	ldr	r2, [r3, #12]
    2df4:	4b1d      	ldr	r3, [pc, #116]	; (2e6c <pidf_control+0x22c>)
    2df6:	6819      	ldr	r1, [r3, #0]
    2df8:	4b18      	ldr	r3, [pc, #96]	; (2e5c <pidf_control+0x21c>)
    2dfa:	1c10      	adds	r0, r2, #0
    2dfc:	4798      	blx	r3
    2dfe:	1c03      	adds	r3, r0, #0
    2e00:	1c1a      	adds	r2, r3, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    2e02:	4b21      	ldr	r3, [pc, #132]	; (2e88 <pidf_control+0x248>)
    2e04:	1c11      	adds	r1, r2, #0
    2e06:	1c20      	adds	r0, r4, #0
    2e08:	4798      	blx	r3
    2e0a:	1c03      	adds	r3, r0, #0
    2e0c:	61fb      	str	r3, [r7, #28]

	if(output > params->max_output)
    2e0e:	68bb      	ldr	r3, [r7, #8]
    2e10:	699a      	ldr	r2, [r3, #24]
    2e12:	4b1b      	ldr	r3, [pc, #108]	; (2e80 <pidf_control+0x240>)
    2e14:	69f9      	ldr	r1, [r7, #28]
    2e16:	1c10      	adds	r0, r2, #0
    2e18:	4798      	blx	r3
    2e1a:	1e03      	subs	r3, r0, #0
    2e1c:	d002      	beq.n	2e24 <pidf_control+0x1e4>
	{
		output = params->max_output;
    2e1e:	68bb      	ldr	r3, [r7, #8]
    2e20:	699b      	ldr	r3, [r3, #24]
    2e22:	61fb      	str	r3, [r7, #28]
	}

	if(output < params->min_output)
    2e24:	68bb      	ldr	r3, [r7, #8]
    2e26:	69da      	ldr	r2, [r3, #28]
    2e28:	4b18      	ldr	r3, [pc, #96]	; (2e8c <pidf_control+0x24c>)
    2e2a:	69f9      	ldr	r1, [r7, #28]
    2e2c:	1c10      	adds	r0, r2, #0
    2e2e:	4798      	blx	r3
    2e30:	1e03      	subs	r3, r0, #0
    2e32:	d002      	beq.n	2e3a <pidf_control+0x1fa>
	{
		output = params->min_output;
    2e34:	68bb      	ldr	r3, [r7, #8]
    2e36:	69db      	ldr	r3, [r3, #28]
    2e38:	61fb      	str	r3, [r7, #28]
	}

	last_error = error;
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <pidf_control+0x214>)
    2e3c:	69ba      	ldr	r2, [r7, #24]
    2e3e:	601a      	str	r2, [r3, #0]
	return output;
    2e40:	69fb      	ldr	r3, [r7, #28]
 }
    2e42:	1c18      	adds	r0, r3, #0
    2e44:	46bd      	mov	sp, r7
    2e46:	b009      	add	sp, #36	; 0x24
    2e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	0000b2b9 	.word	0x0000b2b9
    2e50:	3f333333 	.word	0x3f333333
    2e54:	20005020 	.word	0x20005020
    2e58:	0000af41 	.word	0x0000af41
    2e5c:	0000ad01 	.word	0x0000ad01
    2e60:	0000ce69 	.word	0x0000ce69
    2e64:	0000c6e1 	.word	0x0000c6e1
    2e68:	3ff00000 	.word	0x3ff00000
    2e6c:	20005024 	.word	0x20005024
    2e70:	0000c1e1 	.word	0x0000c1e1
    2e74:	0000b359 	.word	0x0000b359
    2e78:	0000cf0d 	.word	0x0000cf0d
    2e7c:	0000b279 	.word	0x0000b279
    2e80:	0000a369 	.word	0x0000a369
    2e84:	20005028 	.word	0x20005028
    2e88:	0000a5fd 	.word	0x0000a5fd
    2e8c:	0000a391 	.word	0x0000a391
    2e90:	0000a921 	.word	0x0000a921

00002e94 <calculate_lcv_control_params>:
 *
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 */
 void calculate_lcv_control_params(lcv_state_t * state, lcv_control_t * control)
 {
    2e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e96:	b087      	sub	sp, #28
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
    2e9c:	6039      	str	r1, [r7, #0]
	*	PIP	         ________
	*			   /		  \
	*			 /			    \
	*	PEEP   /				  \____________
	*/
	float breath_cycle_total_time_ms = (60000.0) / state->setting_state.breath_per_min;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	691a      	ldr	r2, [r3, #16]
    2ea2:	4b6b      	ldr	r3, [pc, #428]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2ea4:	0010      	movs	r0, r2
    2ea6:	4798      	blx	r3
    2ea8:	0002      	movs	r2, r0
    2eaa:	000b      	movs	r3, r1
    2eac:	4c69      	ldr	r4, [pc, #420]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2eae:	2000      	movs	r0, #0
    2eb0:	4969      	ldr	r1, [pc, #420]	; (3058 <calculate_lcv_control_params+0x1c4>)
    2eb2:	47a0      	blx	r4
    2eb4:	0003      	movs	r3, r0
    2eb6:	000c      	movs	r4, r1
    2eb8:	0019      	movs	r1, r3
    2eba:	0022      	movs	r2, r4
    2ebc:	4b67      	ldr	r3, [pc, #412]	; (305c <calculate_lcv_control_params+0x1c8>)
    2ebe:	0008      	movs	r0, r1
    2ec0:	0011      	movs	r1, r2
    2ec2:	4798      	blx	r3
    2ec4:	1c03      	adds	r3, r0, #0
    2ec6:	617b      	str	r3, [r7, #20]
	float breath_cycle_total_time_ms_minus_ramps = breath_cycle_total_time_ms - (control->pip_to_peep_rampdown_ms + control->peep_to_pip_rampup_ms);
    2ec8:	683b      	ldr	r3, [r7, #0]
    2eca:	689a      	ldr	r2, [r3, #8]
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	681b      	ldr	r3, [r3, #0]
    2ed0:	18d2      	adds	r2, r2, r3
    2ed2:	4b63      	ldr	r3, [pc, #396]	; (3060 <calculate_lcv_control_params+0x1cc>)
    2ed4:	0010      	movs	r0, r2
    2ed6:	4798      	blx	r3
    2ed8:	1c02      	adds	r2, r0, #0
    2eda:	4b62      	ldr	r3, [pc, #392]	; (3064 <calculate_lcv_control_params+0x1d0>)
    2edc:	1c11      	adds	r1, r2, #0
    2ede:	6978      	ldr	r0, [r7, #20]
    2ee0:	4798      	blx	r3
    2ee2:	1c03      	adds	r3, r0, #0
    2ee4:	613b      	str	r3, [r7, #16]

	if(breath_cycle_total_time_ms_minus_ramps < 0)
    2ee6:	4b60      	ldr	r3, [pc, #384]	; (3068 <calculate_lcv_control_params+0x1d4>)
    2ee8:	2100      	movs	r1, #0
    2eea:	6938      	ldr	r0, [r7, #16]
    2eec:	4798      	blx	r3
    2eee:	1e03      	subs	r3, r0, #0
    2ef0:	d004      	beq.n	2efc <calculate_lcv_control_params+0x68>
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, true);
    2ef2:	2101      	movs	r1, #1
    2ef4:	2006      	movs	r0, #6
    2ef6:	4b5d      	ldr	r3, [pc, #372]	; (306c <calculate_lcv_control_params+0x1d8>)
    2ef8:	4798      	blx	r3
    2efa:	e003      	b.n	2f04 <calculate_lcv_control_params+0x70>
		// TODO pick something reasonable?
	}
	else
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, false);
    2efc:	2100      	movs	r1, #0
    2efe:	2006      	movs	r0, #6
    2f00:	4b5a      	ldr	r3, [pc, #360]	; (306c <calculate_lcv_control_params+0x1d8>)
    2f02:	4798      	blx	r3
	}

	// I:E is a ratio, so 3:1 implies 4 parts needed. Split up what is left according to the I:E ratio
	float section_size_ms;
	if(state->setting_state.ie_ratio_tenths > 10)
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	785b      	ldrb	r3, [r3, #1]
    2f08:	2b0a      	cmp	r3, #10
    2f0a:	d951      	bls.n	2fb0 <calculate_lcv_control_params+0x11c>
	{
		// Typical ratios with more expiratory time
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / ((state->setting_state.ie_ratio_tenths * 0.1) + 1.0);
    2f0c:	4b58      	ldr	r3, [pc, #352]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2f0e:	6938      	ldr	r0, [r7, #16]
    2f10:	4798      	blx	r3
    2f12:	0005      	movs	r5, r0
    2f14:	000e      	movs	r6, r1
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	785b      	ldrb	r3, [r3, #1]
    2f1a:	001a      	movs	r2, r3
    2f1c:	4b4c      	ldr	r3, [pc, #304]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2f1e:	0010      	movs	r0, r2
    2f20:	4798      	blx	r3
    2f22:	4c54      	ldr	r4, [pc, #336]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f24:	4a54      	ldr	r2, [pc, #336]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2f26:	4b55      	ldr	r3, [pc, #340]	; (307c <calculate_lcv_control_params+0x1e8>)
    2f28:	47a0      	blx	r4
    2f2a:	0003      	movs	r3, r0
    2f2c:	000c      	movs	r4, r1
    2f2e:	0018      	movs	r0, r3
    2f30:	0021      	movs	r1, r4
    2f32:	4c53      	ldr	r4, [pc, #332]	; (3080 <calculate_lcv_control_params+0x1ec>)
    2f34:	2200      	movs	r2, #0
    2f36:	4b53      	ldr	r3, [pc, #332]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2f38:	47a0      	blx	r4
    2f3a:	0003      	movs	r3, r0
    2f3c:	000c      	movs	r4, r1
    2f3e:	001a      	movs	r2, r3
    2f40:	0023      	movs	r3, r4
    2f42:	4c44      	ldr	r4, [pc, #272]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2f44:	0028      	movs	r0, r5
    2f46:	0031      	movs	r1, r6
    2f48:	47a0      	blx	r4
    2f4a:	0003      	movs	r3, r0
    2f4c:	000c      	movs	r4, r1
    2f4e:	0019      	movs	r1, r3
    2f50:	0022      	movs	r2, r4
    2f52:	4b42      	ldr	r3, [pc, #264]	; (305c <calculate_lcv_control_params+0x1c8>)
    2f54:	0008      	movs	r0, r1
    2f56:	0011      	movs	r1, r2
    2f58:	4798      	blx	r3
    2f5a:	1c03      	adds	r3, r0, #0
    2f5c:	60fb      	str	r3, [r7, #12]
		
		control->peep_hold_ms =	section_size_ms * (state->setting_state.ie_ratio_tenths * 0.1);
    2f5e:	4b44      	ldr	r3, [pc, #272]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2f60:	68f8      	ldr	r0, [r7, #12]
    2f62:	4798      	blx	r3
    2f64:	0005      	movs	r5, r0
    2f66:	000e      	movs	r6, r1
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	785b      	ldrb	r3, [r3, #1]
    2f6c:	001a      	movs	r2, r3
    2f6e:	4b38      	ldr	r3, [pc, #224]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2f70:	0010      	movs	r0, r2
    2f72:	4798      	blx	r3
    2f74:	4c3f      	ldr	r4, [pc, #252]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f76:	4a40      	ldr	r2, [pc, #256]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2f78:	4b40      	ldr	r3, [pc, #256]	; (307c <calculate_lcv_control_params+0x1e8>)
    2f7a:	47a0      	blx	r4
    2f7c:	0003      	movs	r3, r0
    2f7e:	000c      	movs	r4, r1
    2f80:	001a      	movs	r2, r3
    2f82:	0023      	movs	r3, r4
    2f84:	4c3b      	ldr	r4, [pc, #236]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2f86:	0028      	movs	r0, r5
    2f88:	0031      	movs	r1, r6
    2f8a:	47a0      	blx	r4
    2f8c:	0003      	movs	r3, r0
    2f8e:	000c      	movs	r4, r1
    2f90:	0019      	movs	r1, r3
    2f92:	0022      	movs	r2, r4
    2f94:	4b3c      	ldr	r3, [pc, #240]	; (3088 <calculate_lcv_control_params+0x1f4>)
    2f96:	0008      	movs	r0, r1
    2f98:	0011      	movs	r1, r2
    2f9a:	4798      	blx	r3
    2f9c:	0002      	movs	r2, r0
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	60da      	str	r2, [r3, #12]
		control->pip_hold_ms = section_size_ms; // 1 section by definition
    2fa2:	4b3a      	ldr	r3, [pc, #232]	; (308c <calculate_lcv_control_params+0x1f8>)
    2fa4:	68f8      	ldr	r0, [r7, #12]
    2fa6:	4798      	blx	r3
    2fa8:	0002      	movs	r2, r0
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	605a      	str	r2, [r3, #4]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);

		control->pip_hold_ms =	section_size_ms * ratio_to_use;
		control->peep_hold_ms = section_size_ms; // 1 section by definition
	}
 }
    2fae:	e04b      	b.n	3048 <calculate_lcv_control_params+0x1b4>
		float ratio_to_use = 1.0 / (state->setting_state.ie_ratio_tenths * 0.1);	// Ratio of 0.5:1 means 1:2, which has 3 sections
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	785b      	ldrb	r3, [r3, #1]
    2fb4:	001a      	movs	r2, r3
    2fb6:	4b26      	ldr	r3, [pc, #152]	; (3050 <calculate_lcv_control_params+0x1bc>)
    2fb8:	0010      	movs	r0, r2
    2fba:	4798      	blx	r3
    2fbc:	4c2d      	ldr	r4, [pc, #180]	; (3074 <calculate_lcv_control_params+0x1e0>)
    2fbe:	4a2e      	ldr	r2, [pc, #184]	; (3078 <calculate_lcv_control_params+0x1e4>)
    2fc0:	4b2e      	ldr	r3, [pc, #184]	; (307c <calculate_lcv_control_params+0x1e8>)
    2fc2:	47a0      	blx	r4
    2fc4:	0003      	movs	r3, r0
    2fc6:	000c      	movs	r4, r1
    2fc8:	001a      	movs	r2, r3
    2fca:	0023      	movs	r3, r4
    2fcc:	4c21      	ldr	r4, [pc, #132]	; (3054 <calculate_lcv_control_params+0x1c0>)
    2fce:	2000      	movs	r0, #0
    2fd0:	492c      	ldr	r1, [pc, #176]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2fd2:	47a0      	blx	r4
    2fd4:	0003      	movs	r3, r0
    2fd6:	000c      	movs	r4, r1
    2fd8:	0019      	movs	r1, r3
    2fda:	0022      	movs	r2, r4
    2fdc:	4b1f      	ldr	r3, [pc, #124]	; (305c <calculate_lcv_control_params+0x1c8>)
    2fde:	0008      	movs	r0, r1
    2fe0:	0011      	movs	r1, r2
    2fe2:	4798      	blx	r3
    2fe4:	1c03      	adds	r3, r0, #0
    2fe6:	60bb      	str	r3, [r7, #8]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);
    2fe8:	4b21      	ldr	r3, [pc, #132]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2fea:	6938      	ldr	r0, [r7, #16]
    2fec:	4798      	blx	r3
    2fee:	0005      	movs	r5, r0
    2ff0:	000e      	movs	r6, r1
    2ff2:	4b1f      	ldr	r3, [pc, #124]	; (3070 <calculate_lcv_control_params+0x1dc>)
    2ff4:	68b8      	ldr	r0, [r7, #8]
    2ff6:	4798      	blx	r3
    2ff8:	4c21      	ldr	r4, [pc, #132]	; (3080 <calculate_lcv_control_params+0x1ec>)
    2ffa:	2200      	movs	r2, #0
    2ffc:	4b21      	ldr	r3, [pc, #132]	; (3084 <calculate_lcv_control_params+0x1f0>)
    2ffe:	47a0      	blx	r4
    3000:	0003      	movs	r3, r0
    3002:	000c      	movs	r4, r1
    3004:	001a      	movs	r2, r3
    3006:	0023      	movs	r3, r4
    3008:	4c12      	ldr	r4, [pc, #72]	; (3054 <calculate_lcv_control_params+0x1c0>)
    300a:	0028      	movs	r0, r5
    300c:	0031      	movs	r1, r6
    300e:	47a0      	blx	r4
    3010:	0003      	movs	r3, r0
    3012:	000c      	movs	r4, r1
    3014:	0019      	movs	r1, r3
    3016:	0022      	movs	r2, r4
    3018:	4b10      	ldr	r3, [pc, #64]	; (305c <calculate_lcv_control_params+0x1c8>)
    301a:	0008      	movs	r0, r1
    301c:	0011      	movs	r1, r2
    301e:	4798      	blx	r3
    3020:	1c03      	adds	r3, r0, #0
    3022:	60fb      	str	r3, [r7, #12]
		control->pip_hold_ms =	section_size_ms * ratio_to_use;
    3024:	4b1a      	ldr	r3, [pc, #104]	; (3090 <calculate_lcv_control_params+0x1fc>)
    3026:	68b9      	ldr	r1, [r7, #8]
    3028:	68f8      	ldr	r0, [r7, #12]
    302a:	4798      	blx	r3
    302c:	1c03      	adds	r3, r0, #0
    302e:	1c1a      	adds	r2, r3, #0
    3030:	4b16      	ldr	r3, [pc, #88]	; (308c <calculate_lcv_control_params+0x1f8>)
    3032:	1c10      	adds	r0, r2, #0
    3034:	4798      	blx	r3
    3036:	0002      	movs	r2, r0
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	605a      	str	r2, [r3, #4]
		control->peep_hold_ms = section_size_ms; // 1 section by definition
    303c:	4b13      	ldr	r3, [pc, #76]	; (308c <calculate_lcv_control_params+0x1f8>)
    303e:	68f8      	ldr	r0, [r7, #12]
    3040:	4798      	blx	r3
    3042:	0002      	movs	r2, r0
    3044:	683b      	ldr	r3, [r7, #0]
    3046:	60da      	str	r2, [r3, #12]
 }
    3048:	46c0      	nop			; (mov r8, r8)
    304a:	46bd      	mov	sp, r7
    304c:	b007      	add	sp, #28
    304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3050:	0000cd75 	.word	0x0000cd75
    3054:	0000b979 	.word	0x0000b979
    3058:	40ed4c00 	.word	0x40ed4c00
    305c:	0000cf0d 	.word	0x0000cf0d
    3060:	0000b2b9 	.word	0x0000b2b9
    3064:	0000af41 	.word	0x0000af41
    3068:	0000a369 	.word	0x0000a369
    306c:	000029f9 	.word	0x000029f9
    3070:	0000ce69 	.word	0x0000ce69
    3074:	0000c1e1 	.word	0x0000c1e1
    3078:	9999999a 	.word	0x9999999a
    307c:	3fb99999 	.word	0x3fb99999
    3080:	0000b359 	.word	0x0000b359
    3084:	3ff00000 	.word	0x3ff00000
    3088:	0000cd0d 	.word	0x0000cd0d
    308c:	0000b279 	.word	0x0000b279
    3090:	0000ad01 	.word	0x0000ad01

00003094 <run_controller>:
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 float run_controller(lcv_state_t * state, lcv_control_t * control, controller_param_t * params)
 {
    3094:	b590      	push	{r4, r7, lr}
    3096:	b087      	sub	sp, #28
    3098:	af00      	add	r7, sp, #0
    309a:	60f8      	str	r0, [r7, #12]
    309c:	60b9      	str	r1, [r7, #8]
    309e:	607a      	str	r2, [r7, #4]
	static bool was_enabled = false;
	static uint32_t last_time_ms = 0;
	static start_of_current_profile_time_ms = 0;
	uint32_t current_time_ms = xTaskGetTickCount() * portTICK_PERIOD_MS;
    30a0:	4b1d      	ldr	r3, [pc, #116]	; (3118 <run_controller+0x84>)
    30a2:	4798      	blx	r3
    30a4:	0003      	movs	r3, r0
    30a6:	617b      	str	r3, [r7, #20]

	if(!was_enabled && state->current_state.enable)
    30a8:	4b1c      	ldr	r3, [pc, #112]	; (311c <run_controller+0x88>)
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	2201      	movs	r2, #1
    30ae:	4053      	eors	r3, r2
    30b0:	b2db      	uxtb	r3, r3
    30b2:	2b00      	cmp	r3, #0
    30b4:	d009      	beq.n	30ca <run_controller+0x36>
    30b6:	68fb      	ldr	r3, [r7, #12]
    30b8:	7d1b      	ldrb	r3, [r3, #20]
    30ba:	2201      	movs	r2, #1
    30bc:	4013      	ands	r3, r2
    30be:	b2db      	uxtb	r3, r3
    30c0:	2b00      	cmp	r3, #0
    30c2:	d002      	beq.n	30ca <run_controller+0x36>
	{
		start_of_current_profile_time_ms = current_time_ms;
    30c4:	697a      	ldr	r2, [r7, #20]
    30c6:	4b16      	ldr	r3, [pc, #88]	; (3120 <run_controller+0x8c>)
    30c8:	601a      	str	r2, [r3, #0]
	}

	// First, determine what the new setpoint should be
	// Updates profile if enters a new profile
	start_of_current_profile_time_ms = calculate_new_setpoint(start_of_current_profile_time_ms, current_time_ms, state, control);
    30ca:	4b15      	ldr	r3, [pc, #84]	; (3120 <run_controller+0x8c>)
    30cc:	681b      	ldr	r3, [r3, #0]
    30ce:	0018      	movs	r0, r3
    30d0:	68bb      	ldr	r3, [r7, #8]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	6979      	ldr	r1, [r7, #20]
    30d6:	4c13      	ldr	r4, [pc, #76]	; (3124 <run_controller+0x90>)
    30d8:	47a0      	blx	r4
    30da:	0003      	movs	r3, r0
    30dc:	001a      	movs	r2, r3
    30de:	4b10      	ldr	r3, [pc, #64]	; (3120 <run_controller+0x8c>)
    30e0:	601a      	str	r2, [r3, #0]

	// Then, run the controller to track this setpoint
	float output = pidf_control(control, params);
    30e2:	687a      	ldr	r2, [r7, #4]
    30e4:	68bb      	ldr	r3, [r7, #8]
    30e6:	0011      	movs	r1, r2
    30e8:	0018      	movs	r0, r3
    30ea:	4b0f      	ldr	r3, [pc, #60]	; (3128 <run_controller+0x94>)
    30ec:	4798      	blx	r3
    30ee:	1c03      	adds	r3, r0, #0
    30f0:	613b      	str	r3, [r7, #16]
	last_time_ms = current_time_ms;
    30f2:	4b0e      	ldr	r3, [pc, #56]	; (312c <run_controller+0x98>)
    30f4:	697a      	ldr	r2, [r7, #20]
    30f6:	601a      	str	r2, [r3, #0]
	was_enabled = (state->current_state.enable > 0);
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	7d1b      	ldrb	r3, [r3, #20]
    30fc:	07db      	lsls	r3, r3, #31
    30fe:	0fdb      	lsrs	r3, r3, #31
    3100:	b2db      	uxtb	r3, r3
    3102:	17da      	asrs	r2, r3, #31
    3104:	1ad3      	subs	r3, r2, r3
    3106:	0fdb      	lsrs	r3, r3, #31
    3108:	b2da      	uxtb	r2, r3
    310a:	4b04      	ldr	r3, [pc, #16]	; (311c <run_controller+0x88>)
    310c:	701a      	strb	r2, [r3, #0]
	return output;
    310e:	693b      	ldr	r3, [r7, #16]
    3110:	1c18      	adds	r0, r3, #0
    3112:	46bd      	mov	sp, r7
    3114:	b007      	add	sp, #28
    3116:	bd90      	pop	{r4, r7, pc}
    3118:	00006611 	.word	0x00006611
    311c:	2000502c 	.word	0x2000502c
    3120:	20005030 	.word	0x20005030
    3124:	00002aad 	.word	0x00002aad
    3128:	00002c41 	.word	0x00002c41
    312c:	20005034 	.word	0x20005034

00003130 <crc_8>:
 *
 * The function crc_8() calculates the 8 bit wide CRC of an input string of a
 * given length.
 */

uint8_t crc_8( const unsigned char *input_str, size_t num_bytes ) {
    3130:	b580      	push	{r7, lr}
    3132:	b086      	sub	sp, #24
    3134:	af00      	add	r7, sp, #0
    3136:	6078      	str	r0, [r7, #4]
    3138:	6039      	str	r1, [r7, #0]

	size_t a;
	uint8_t crc;
	const unsigned char *ptr;

	crc = CRC_START_8;
    313a:	2313      	movs	r3, #19
    313c:	18fb      	adds	r3, r7, r3
    313e:	2200      	movs	r2, #0
    3140:	701a      	strb	r2, [r3, #0]
	ptr = input_str;
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	60fb      	str	r3, [r7, #12]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
    3146:	68fb      	ldr	r3, [r7, #12]
    3148:	2b00      	cmp	r3, #0
    314a:	d018      	beq.n	317e <crc_8+0x4e>
    314c:	2300      	movs	r3, #0
    314e:	617b      	str	r3, [r7, #20]
    3150:	e011      	b.n	3176 <crc_8+0x46>

		crc = sht75_crc_table[(*ptr++) ^ crc];
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	1c5a      	adds	r2, r3, #1
    3156:	60fa      	str	r2, [r7, #12]
    3158:	781a      	ldrb	r2, [r3, #0]
    315a:	2313      	movs	r3, #19
    315c:	18fb      	adds	r3, r7, r3
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	4053      	eors	r3, r2
    3162:	b2db      	uxtb	r3, r3
    3164:	0019      	movs	r1, r3
    3166:	2313      	movs	r3, #19
    3168:	18fb      	adds	r3, r7, r3
    316a:	4a08      	ldr	r2, [pc, #32]	; (318c <crc_8+0x5c>)
    316c:	5c52      	ldrb	r2, [r2, r1]
    316e:	701a      	strb	r2, [r3, #0]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
    3170:	697b      	ldr	r3, [r7, #20]
    3172:	3301      	adds	r3, #1
    3174:	617b      	str	r3, [r7, #20]
    3176:	697a      	ldr	r2, [r7, #20]
    3178:	683b      	ldr	r3, [r7, #0]
    317a:	429a      	cmp	r2, r3
    317c:	d3e9      	bcc.n	3152 <crc_8+0x22>
	}

	return crc;
    317e:	2313      	movs	r3, #19
    3180:	18fb      	adds	r3, r7, r3
    3182:	781b      	ldrb	r3, [r3, #0]

}  /* crc_8 */
    3184:	0018      	movs	r0, r3
    3186:	46bd      	mov	sp, r7
    3188:	b006      	add	sp, #24
    318a:	bd80      	pop	{r7, pc}
    318c:	20000010 	.word	0x20000010

00003190 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3190:	b580      	push	{r7, lr}
    3192:	b084      	sub	sp, #16
    3194:	af00      	add	r7, sp, #0
    3196:	0002      	movs	r2, r0
    3198:	1dfb      	adds	r3, r7, #7
    319a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    319c:	230f      	movs	r3, #15
    319e:	18fb      	adds	r3, r7, r3
    31a0:	1dfa      	adds	r2, r7, #7
    31a2:	7812      	ldrb	r2, [r2, #0]
    31a4:	09d2      	lsrs	r2, r2, #7
    31a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    31a8:	230e      	movs	r3, #14
    31aa:	18fb      	adds	r3, r7, r3
    31ac:	1dfa      	adds	r2, r7, #7
    31ae:	7812      	ldrb	r2, [r2, #0]
    31b0:	0952      	lsrs	r2, r2, #5
    31b2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    31b4:	4b0d      	ldr	r3, [pc, #52]	; (31ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    31b6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    31b8:	230f      	movs	r3, #15
    31ba:	18fb      	adds	r3, r7, r3
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	2b00      	cmp	r3, #0
    31c0:	d10f      	bne.n	31e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    31c2:	230f      	movs	r3, #15
    31c4:	18fb      	adds	r3, r7, r3
    31c6:	781b      	ldrb	r3, [r3, #0]
    31c8:	009b      	lsls	r3, r3, #2
    31ca:	2210      	movs	r2, #16
    31cc:	4694      	mov	ip, r2
    31ce:	44bc      	add	ip, r7
    31d0:	4463      	add	r3, ip
    31d2:	3b08      	subs	r3, #8
    31d4:	681a      	ldr	r2, [r3, #0]
    31d6:	230e      	movs	r3, #14
    31d8:	18fb      	adds	r3, r7, r3
    31da:	781b      	ldrb	r3, [r3, #0]
    31dc:	01db      	lsls	r3, r3, #7
    31de:	18d3      	adds	r3, r2, r3
    31e0:	e000      	b.n	31e4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    31e2:	2300      	movs	r3, #0
	}
}
    31e4:	0018      	movs	r0, r3
    31e6:	46bd      	mov	sp, r7
    31e8:	b004      	add	sp, #16
    31ea:	bd80      	pop	{r7, pc}
    31ec:	41004400 	.word	0x41004400

000031f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b082      	sub	sp, #8
    31f4:	af00      	add	r7, sp, #0
    31f6:	0002      	movs	r2, r0
    31f8:	1dfb      	adds	r3, r7, #7
    31fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    31fc:	1dfb      	adds	r3, r7, #7
    31fe:	781b      	ldrb	r3, [r3, #0]
    3200:	0018      	movs	r0, r3
    3202:	4b03      	ldr	r3, [pc, #12]	; (3210 <port_get_group_from_gpio_pin+0x20>)
    3204:	4798      	blx	r3
    3206:	0003      	movs	r3, r0
}
    3208:	0018      	movs	r0, r3
    320a:	46bd      	mov	sp, r7
    320c:	b002      	add	sp, #8
    320e:	bd80      	pop	{r7, pc}
    3210:	00003191 	.word	0x00003191

00003214 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3214:	b580      	push	{r7, lr}
    3216:	b082      	sub	sp, #8
    3218:	af00      	add	r7, sp, #0
    321a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	2200      	movs	r2, #0
    3220:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	2201      	movs	r2, #1
    3226:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	2200      	movs	r2, #0
    322c:	709a      	strb	r2, [r3, #2]
}
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	46bd      	mov	sp, r7
    3232:	b002      	add	sp, #8
    3234:	bd80      	pop	{r7, pc}
	...

00003238 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3238:	b580      	push	{r7, lr}
    323a:	b084      	sub	sp, #16
    323c:	af00      	add	r7, sp, #0
    323e:	0002      	movs	r2, r0
    3240:	1dfb      	adds	r3, r7, #7
    3242:	701a      	strb	r2, [r3, #0]
    3244:	1dbb      	adds	r3, r7, #6
    3246:	1c0a      	adds	r2, r1, #0
    3248:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    324a:	1dfb      	adds	r3, r7, #7
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	0018      	movs	r0, r3
    3250:	4b0d      	ldr	r3, [pc, #52]	; (3288 <port_pin_set_output_level+0x50>)
    3252:	4798      	blx	r3
    3254:	0003      	movs	r3, r0
    3256:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3258:	1dfb      	adds	r3, r7, #7
    325a:	781b      	ldrb	r3, [r3, #0]
    325c:	221f      	movs	r2, #31
    325e:	4013      	ands	r3, r2
    3260:	2201      	movs	r2, #1
    3262:	409a      	lsls	r2, r3
    3264:	0013      	movs	r3, r2
    3266:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3268:	1dbb      	adds	r3, r7, #6
    326a:	781b      	ldrb	r3, [r3, #0]
    326c:	2b00      	cmp	r3, #0
    326e:	d003      	beq.n	3278 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3270:	68fb      	ldr	r3, [r7, #12]
    3272:	68ba      	ldr	r2, [r7, #8]
    3274:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3276:	e002      	b.n	327e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3278:	68fb      	ldr	r3, [r7, #12]
    327a:	68ba      	ldr	r2, [r7, #8]
    327c:	615a      	str	r2, [r3, #20]
}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	46bd      	mov	sp, r7
    3282:	b004      	add	sp, #16
    3284:	bd80      	pop	{r7, pc}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	000031f1 	.word	0x000031f1

0000328c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    328c:	b580      	push	{r7, lr}
    328e:	b082      	sub	sp, #8
    3290:	af00      	add	r7, sp, #0
    3292:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	220a      	movs	r2, #10
    3298:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	2200      	movs	r2, #0
    329e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	2200      	movs	r2, #0
    32a4:	709a      	strb	r2, [r3, #2]
}
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	46bd      	mov	sp, r7
    32aa:	b002      	add	sp, #8
    32ac:	bd80      	pop	{r7, pc}
	...

000032b0 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    32b0:	b580      	push	{r7, lr}
    32b2:	b084      	sub	sp, #16
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
    32b8:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    32ba:	683b      	ldr	r3, [r7, #0]
    32bc:	781a      	ldrb	r2, [r3, #0]
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    32c2:	683b      	ldr	r3, [r7, #0]
    32c4:	785a      	ldrb	r2, [r3, #1]
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    32ca:	683b      	ldr	r3, [r7, #0]
    32cc:	789a      	ldrb	r2, [r3, #2]
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    32d2:	230c      	movs	r3, #12
    32d4:	18fb      	adds	r3, r7, r3
    32d6:	0018      	movs	r0, r3
    32d8:	4b0b      	ldr	r3, [pc, #44]	; (3308 <spi_attach_slave+0x58>)
    32da:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    32dc:	230c      	movs	r3, #12
    32de:	18fb      	adds	r3, r7, r3
    32e0:	2201      	movs	r2, #1
    32e2:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	220c      	movs	r2, #12
    32ea:	18ba      	adds	r2, r7, r2
    32ec:	0011      	movs	r1, r2
    32ee:	0018      	movs	r0, r3
    32f0:	4b06      	ldr	r3, [pc, #24]	; (330c <spi_attach_slave+0x5c>)
    32f2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	2101      	movs	r1, #1
    32fa:	0018      	movs	r0, r3
    32fc:	4b04      	ldr	r3, [pc, #16]	; (3310 <spi_attach_slave+0x60>)
    32fe:	4798      	blx	r3
}
    3300:	46c0      	nop			; (mov r8, r8)
    3302:	46bd      	mov	sp, r7
    3304:	b004      	add	sp, #16
    3306:	bd80      	pop	{r7, pc}
    3308:	00003215 	.word	0x00003215
    330c:	00008911 	.word	0x00008911
    3310:	00003239 	.word	0x00003239

00003314 <parameter_load_cb>:
 #define PARAMETER_STORAGE_WRITE_SIZE				(3+18+1)	// 3 byte header, 18 bytes of data + 1 byte crc8

 static struct spi_slave_inst fram_slave;

 static void parameter_load_cb(uint8_t * buff, uint32_t length)
 {
    3314:	b590      	push	{r4, r7, lr}
    3316:	b089      	sub	sp, #36	; 0x24
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
    331c:	6039      	str	r1, [r7, #0]
	if(length == PARAMETER_STORAGE_READ_SIZE)
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	2b16      	cmp	r3, #22
    3322:	d15a      	bne.n	33da <parameter_load_cb+0xc6>
	{
		uint8_t crc_read = *(buff + PARAMETER_STORAGE_READ_SIZE-1);
    3324:	231f      	movs	r3, #31
    3326:	18fb      	adds	r3, r7, r3
    3328:	687a      	ldr	r2, [r7, #4]
    332a:	7d52      	ldrb	r2, [r2, #21]
    332c:	701a      	strb	r2, [r3, #0]
		uint8_t crc_calc = crc_8((buff+3), PARAMETER_STORAGE_READ_SIZE-4); // Ignore header
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	3303      	adds	r3, #3
    3332:	221e      	movs	r2, #30
    3334:	18bc      	adds	r4, r7, r2
    3336:	2112      	movs	r1, #18
    3338:	0018      	movs	r0, r3
    333a:	4b2a      	ldr	r3, [pc, #168]	; (33e4 <parameter_load_cb+0xd0>)
    333c:	4798      	blx	r3
    333e:	0003      	movs	r3, r0
    3340:	7023      	strb	r3, [r4, #0]
		if(crc_calc == crc_read)
    3342:	231e      	movs	r3, #30
    3344:	18fa      	adds	r2, r7, r3
    3346:	231f      	movs	r3, #31
    3348:	18fb      	adds	r3, r7, r3
    334a:	7812      	ldrb	r2, [r2, #0]
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	429a      	cmp	r2, r3
    3350:	d143      	bne.n	33da <parameter_load_cb+0xc6>
		{
			// Unpack
			lcv_parameters_t params;
			params.enable = *(buff+3);
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	3303      	adds	r3, #3
    3356:	781b      	ldrb	r3, [r3, #0]
    3358:	1c1a      	adds	r2, r3, #0
    335a:	2301      	movs	r3, #1
    335c:	4013      	ands	r3, r2
    335e:	b2da      	uxtb	r2, r3
    3360:	2308      	movs	r3, #8
    3362:	18fb      	adds	r3, r7, r3
    3364:	2101      	movs	r1, #1
    3366:	400a      	ands	r2, r1
    3368:	0010      	movs	r0, r2
    336a:	781a      	ldrb	r2, [r3, #0]
    336c:	2101      	movs	r1, #1
    336e:	438a      	bics	r2, r1
    3370:	1c11      	adds	r1, r2, #0
    3372:	1c02      	adds	r2, r0, #0
    3374:	430a      	orrs	r2, r1
    3376:	701a      	strb	r2, [r3, #0]
			params.ie_ratio_tenths = *(buff+4);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	791a      	ldrb	r2, [r3, #4]
    337c:	2308      	movs	r3, #8
    337e:	18fb      	adds	r3, r7, r3
    3380:	705a      	strb	r2, [r3, #1]
			memcpy(&params.tidal_volume_ml, (buff+5), 4);
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	1d59      	adds	r1, r3, #5
    3386:	2308      	movs	r3, #8
    3388:	18fb      	adds	r3, r7, r3
    338a:	3304      	adds	r3, #4
    338c:	2204      	movs	r2, #4
    338e:	0018      	movs	r0, r3
    3390:	4b15      	ldr	r3, [pc, #84]	; (33e8 <parameter_load_cb+0xd4>)
    3392:	4798      	blx	r3
			memcpy(&params.peep_cm_h20, (buff+9), 4);
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	3309      	adds	r3, #9
    3398:	0019      	movs	r1, r3
    339a:	2308      	movs	r3, #8
    339c:	18fb      	adds	r3, r7, r3
    339e:	3308      	adds	r3, #8
    33a0:	2204      	movs	r2, #4
    33a2:	0018      	movs	r0, r3
    33a4:	4b10      	ldr	r3, [pc, #64]	; (33e8 <parameter_load_cb+0xd4>)
    33a6:	4798      	blx	r3
			memcpy(&params.pip_cm_h20, (buff+13), 4);
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	330d      	adds	r3, #13
    33ac:	0019      	movs	r1, r3
    33ae:	2308      	movs	r3, #8
    33b0:	18fb      	adds	r3, r7, r3
    33b2:	330c      	adds	r3, #12
    33b4:	2204      	movs	r2, #4
    33b6:	0018      	movs	r0, r3
    33b8:	4b0b      	ldr	r3, [pc, #44]	; (33e8 <parameter_load_cb+0xd4>)
    33ba:	4798      	blx	r3
			memcpy(&params.breath_per_min, (buff+17), 4);
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	3311      	adds	r3, #17
    33c0:	0019      	movs	r1, r3
    33c2:	2308      	movs	r3, #8
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	3310      	adds	r3, #16
    33c8:	2204      	movs	r2, #4
    33ca:	0018      	movs	r0, r3
    33cc:	4b06      	ldr	r3, [pc, #24]	; (33e8 <parameter_load_cb+0xd4>)
    33ce:	4798      	blx	r3

			update_settings(&params);
    33d0:	2308      	movs	r3, #8
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	0018      	movs	r0, r3
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <parameter_load_cb+0xd8>)
    33d8:	4798      	blx	r3
		}
	}
 }
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	46bd      	mov	sp, r7
    33de:	b009      	add	sp, #36	; 0x24
    33e0:	bd90      	pop	{r4, r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	00003131 	.word	0x00003131
    33e8:	0000d0bd 	.word	0x0000d0bd
    33ec:	000045e5 	.word	0x000045e5

000033f0 <dummy_spi_cb>:

 static void dummy_spi_cb(uint8_t * buff, uint32_t length)
 {
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
    33f8:	6039      	str	r1, [r7, #0]
	// Do nothing
 }
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	46bd      	mov	sp, r7
    33fe:	b002      	add	sp, #8
    3400:	bd80      	pop	{r7, pc}
	...

00003404 <write_enable>:

 static void write_enable(void)
 {
    3404:	b5f0      	push	{r4, r5, r6, r7, lr}
    3406:	b087      	sub	sp, #28
    3408:	af00      	add	r7, sp, #0
	spi_transaction_t transaction;
	uint8_t wren = FRAM_WREN;
    340a:	1dfb      	adds	r3, r7, #7
    340c:	2206      	movs	r2, #6
    340e:	701a      	strb	r2, [r3, #0]
	transaction.tx_buff = &wren;
    3410:	2308      	movs	r3, #8
    3412:	18fb      	adds	r3, r7, r3
    3414:	1dfa      	adds	r2, r7, #7
    3416:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = 1;
    3418:	2308      	movs	r3, #8
    341a:	18fb      	adds	r3, r7, r3
    341c:	2201      	movs	r2, #1
    341e:	609a      	str	r2, [r3, #8]
	transaction.cb = dummy_spi_cb;
    3420:	2308      	movs	r3, #8
    3422:	18fb      	adds	r3, r7, r3
    3424:	4a1a      	ldr	r2, [pc, #104]	; (3490 <write_enable+0x8c>)
    3426:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    3428:	2308      	movs	r3, #8
    342a:	18fb      	adds	r3, r7, r3
    342c:	4a19      	ldr	r2, [pc, #100]	; (3494 <write_enable+0x90>)
    342e:	8811      	ldrh	r1, [r2, #0]
    3430:	8019      	strh	r1, [r3, #0]
    3432:	7892      	ldrb	r2, [r2, #2]
    3434:	709a      	strb	r2, [r3, #2]

	spi_transact(transaction);
    3436:	2308      	movs	r3, #8
    3438:	18fb      	adds	r3, r7, r3
    343a:	6818      	ldr	r0, [r3, #0]
    343c:	6859      	ldr	r1, [r3, #4]
    343e:	689a      	ldr	r2, [r3, #8]
    3440:	68db      	ldr	r3, [r3, #12]
    3442:	4c15      	ldr	r4, [pc, #84]	; (3498 <write_enable+0x94>)
    3444:	47a0      	blx	r4
	delay_us(200); // wait TODO set up queueing
    3446:	2000      	movs	r0, #0
    3448:	4b14      	ldr	r3, [pc, #80]	; (349c <write_enable+0x98>)
    344a:	4798      	blx	r3
    344c:	0003      	movs	r3, r0
    344e:	001d      	movs	r5, r3
    3450:	2300      	movs	r3, #0
    3452:	001e      	movs	r6, r3
    3454:	4c12      	ldr	r4, [pc, #72]	; (34a0 <write_enable+0x9c>)
    3456:	22c8      	movs	r2, #200	; 0xc8
    3458:	2300      	movs	r3, #0
    345a:	0028      	movs	r0, r5
    345c:	0031      	movs	r1, r6
    345e:	47a0      	blx	r4
    3460:	0003      	movs	r3, r0
    3462:	000c      	movs	r4, r1
    3464:	0019      	movs	r1, r3
    3466:	0022      	movs	r2, r4
    3468:	4b0e      	ldr	r3, [pc, #56]	; (34a4 <write_enable+0xa0>)
    346a:	2400      	movs	r4, #0
    346c:	18c9      	adds	r1, r1, r3
    346e:	4162      	adcs	r2, r4
    3470:	0008      	movs	r0, r1
    3472:	0011      	movs	r1, r2
    3474:	4c0c      	ldr	r4, [pc, #48]	; (34a8 <write_enable+0xa4>)
    3476:	4a0d      	ldr	r2, [pc, #52]	; (34ac <write_enable+0xa8>)
    3478:	2300      	movs	r3, #0
    347a:	47a0      	blx	r4
    347c:	0003      	movs	r3, r0
    347e:	000c      	movs	r4, r1
    3480:	0018      	movs	r0, r3
    3482:	4b0b      	ldr	r3, [pc, #44]	; (34b0 <write_enable+0xac>)
    3484:	4798      	blx	r3
 }
    3486:	46c0      	nop			; (mov r8, r8)
    3488:	46bd      	mov	sp, r7
    348a:	b007      	add	sp, #28
    348c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	000033f1 	.word	0x000033f1
    3494:	20005038 	.word	0x20005038
    3498:	0000419d 	.word	0x0000419d
    349c:	00009ad1 	.word	0x00009ad1
    34a0:	0000a3f9 	.word	0x0000a3f9
    34a4:	006acfbf 	.word	0x006acfbf
    34a8:	0000a3b9 	.word	0x0000a3b9
    34ac:	006acfc0 	.word	0x006acfc0
    34b0:	20000001 	.word	0x20000001

000034b4 <fram_init>:

 void fram_init(void)
 {
    34b4:	b580      	push	{r7, lr}
    34b6:	b082      	sub	sp, #8
    34b8:	af00      	add	r7, sp, #0
	spi_interface_init();
    34ba:	4b09      	ldr	r3, [pc, #36]	; (34e0 <fram_init+0x2c>)
    34bc:	4798      	blx	r3

	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    34be:	1d3b      	adds	r3, r7, #4
    34c0:	0018      	movs	r0, r3
    34c2:	4b08      	ldr	r3, [pc, #32]	; (34e4 <fram_init+0x30>)
    34c4:	4798      	blx	r3
	slave_dev_config.ss_pin = FRAM_CS_GPIO;
    34c6:	1d3b      	adds	r3, r7, #4
    34c8:	220b      	movs	r2, #11
    34ca:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&fram_slave, &slave_dev_config);
    34cc:	1d3a      	adds	r2, r7, #4
    34ce:	4b06      	ldr	r3, [pc, #24]	; (34e8 <fram_init+0x34>)
    34d0:	0011      	movs	r1, r2
    34d2:	0018      	movs	r0, r3
    34d4:	4b05      	ldr	r3, [pc, #20]	; (34ec <fram_init+0x38>)
    34d6:	4798      	blx	r3
 }
    34d8:	46c0      	nop			; (mov r8, r8)
    34da:	46bd      	mov	sp, r7
    34dc:	b002      	add	sp, #8
    34de:	bd80      	pop	{r7, pc}
    34e0:	00004101 	.word	0x00004101
    34e4:	0000328d 	.word	0x0000328d
    34e8:	20005038 	.word	0x20005038
    34ec:	000032b1 	.word	0x000032b1

000034f0 <fram_load_parameters_asynch>:

 bool fram_load_parameters_asynch(void)
 {
    34f0:	b590      	push	{r4, r7, lr}
    34f2:	b08b      	sub	sp, #44	; 0x2c
    34f4:	af00      	add	r7, sp, #0
	uint8_t tx_buff[PARAMETER_STORAGE_READ_SIZE];
	spi_transaction_t transaction;

	// Data
	uint16_t address = (PARAMETER_STORAGE_ADDRESS) & ADDRESS_MASK;
    34f6:	2326      	movs	r3, #38	; 0x26
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	2200      	movs	r2, #0
    34fc:	801a      	strh	r2, [r3, #0]
	tx_buff[0] = FRAM_READ;
    34fe:	2310      	movs	r3, #16
    3500:	18fb      	adds	r3, r7, r3
    3502:	2203      	movs	r2, #3
    3504:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = (address & 0xFF00) >> 8;  // address is MSB first
    3506:	2326      	movs	r3, #38	; 0x26
    3508:	18fb      	adds	r3, r7, r3
    350a:	881b      	ldrh	r3, [r3, #0]
    350c:	0a1b      	lsrs	r3, r3, #8
    350e:	b29b      	uxth	r3, r3
    3510:	b2da      	uxtb	r2, r3
    3512:	2310      	movs	r3, #16
    3514:	18fb      	adds	r3, r7, r3
    3516:	705a      	strb	r2, [r3, #1]
	tx_buff[2] = (address & 0x00FF);
    3518:	2326      	movs	r3, #38	; 0x26
    351a:	18fb      	adds	r3, r7, r3
    351c:	881b      	ldrh	r3, [r3, #0]
    351e:	b2da      	uxtb	r2, r3
    3520:	2310      	movs	r3, #16
    3522:	18fb      	adds	r3, r7, r3
    3524:	709a      	strb	r2, [r3, #2]

	transaction.tx_buff = tx_buff;
    3526:	003b      	movs	r3, r7
    3528:	2210      	movs	r2, #16
    352a:	18ba      	adds	r2, r7, r2
    352c:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = PARAMETER_STORAGE_READ_SIZE;
    352e:	003b      	movs	r3, r7
    3530:	2216      	movs	r2, #22
    3532:	609a      	str	r2, [r3, #8]
	transaction.cb = parameter_load_cb;
    3534:	003b      	movs	r3, r7
    3536:	4a0a      	ldr	r2, [pc, #40]	; (3560 <fram_load_parameters_asynch+0x70>)
    3538:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    353a:	003b      	movs	r3, r7
    353c:	4a09      	ldr	r2, [pc, #36]	; (3564 <fram_load_parameters_asynch+0x74>)
    353e:	8811      	ldrh	r1, [r2, #0]
    3540:	8019      	strh	r1, [r3, #0]
    3542:	7892      	ldrb	r2, [r2, #2]
    3544:	709a      	strb	r2, [r3, #2]

	return spi_transact(transaction);
    3546:	003b      	movs	r3, r7
    3548:	6818      	ldr	r0, [r3, #0]
    354a:	6859      	ldr	r1, [r3, #4]
    354c:	689a      	ldr	r2, [r3, #8]
    354e:	68db      	ldr	r3, [r3, #12]
    3550:	4c05      	ldr	r4, [pc, #20]	; (3568 <fram_load_parameters_asynch+0x78>)
    3552:	47a0      	blx	r4
    3554:	0003      	movs	r3, r0
 }
    3556:	0018      	movs	r0, r3
    3558:	46bd      	mov	sp, r7
    355a:	b00b      	add	sp, #44	; 0x2c
    355c:	bd90      	pop	{r4, r7, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	00003315 	.word	0x00003315
    3564:	20005038 	.word	0x20005038
    3568:	0000419d 	.word	0x0000419d

0000356c <fram_save_parameters_asynch>:

 bool fram_save_parameters_asynch(lcv_parameters_t * param)
 {
    356c:	b590      	push	{r4, r7, lr}
    356e:	b08d      	sub	sp, #52	; 0x34
    3570:	af00      	add	r7, sp, #0
    3572:	6078      	str	r0, [r7, #4]
	uint8_t tx_buff[PARAMETER_STORAGE_WRITE_SIZE];
	spi_transaction_t transaction;

	write_enable();
    3574:	4b3d      	ldr	r3, [pc, #244]	; (366c <fram_save_parameters_asynch+0x100>)
    3576:	4798      	blx	r3

	// Data
	uint16_t address = (PARAMETER_STORAGE_ADDRESS) & ADDRESS_MASK;
    3578:	232e      	movs	r3, #46	; 0x2e
    357a:	18fb      	adds	r3, r7, r3
    357c:	2200      	movs	r2, #0
    357e:	801a      	strh	r2, [r3, #0]
	tx_buff[0] = FRAM_WRITE;
    3580:	2318      	movs	r3, #24
    3582:	18fb      	adds	r3, r7, r3
    3584:	2202      	movs	r2, #2
    3586:	701a      	strb	r2, [r3, #0]
	tx_buff[1] = (address & 0xFF00) >> 8; // address is MSB first
    3588:	232e      	movs	r3, #46	; 0x2e
    358a:	18fb      	adds	r3, r7, r3
    358c:	881b      	ldrh	r3, [r3, #0]
    358e:	0a1b      	lsrs	r3, r3, #8
    3590:	b29b      	uxth	r3, r3
    3592:	b2da      	uxtb	r2, r3
    3594:	2318      	movs	r3, #24
    3596:	18fb      	adds	r3, r7, r3
    3598:	705a      	strb	r2, [r3, #1]
	tx_buff[2] = (address & 0x00FF);
    359a:	232e      	movs	r3, #46	; 0x2e
    359c:	18fb      	adds	r3, r7, r3
    359e:	881b      	ldrh	r3, [r3, #0]
    35a0:	b2da      	uxtb	r2, r3
    35a2:	2318      	movs	r3, #24
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	709a      	strb	r2, [r3, #2]

	tx_buff[3] = param->enable;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	781b      	ldrb	r3, [r3, #0]
    35ac:	07db      	lsls	r3, r3, #31
    35ae:	0fdb      	lsrs	r3, r3, #31
    35b0:	b2db      	uxtb	r3, r3
    35b2:	001a      	movs	r2, r3
    35b4:	2318      	movs	r3, #24
    35b6:	18fb      	adds	r3, r7, r3
    35b8:	70da      	strb	r2, [r3, #3]
	tx_buff[4] = param->ie_ratio_tenths;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	785a      	ldrb	r2, [r3, #1]
    35be:	2318      	movs	r3, #24
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	711a      	strb	r2, [r3, #4]
	memcpy(&tx_buff[5], &param->tidal_volume_ml, 4);
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	1d19      	adds	r1, r3, #4
    35c8:	2318      	movs	r3, #24
    35ca:	18fb      	adds	r3, r7, r3
    35cc:	3305      	adds	r3, #5
    35ce:	2204      	movs	r2, #4
    35d0:	0018      	movs	r0, r3
    35d2:	4b27      	ldr	r3, [pc, #156]	; (3670 <fram_save_parameters_asynch+0x104>)
    35d4:	4798      	blx	r3
	memcpy(&tx_buff[9], &param->peep_cm_h20, 4);
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	3308      	adds	r3, #8
    35da:	0019      	movs	r1, r3
    35dc:	2318      	movs	r3, #24
    35de:	18fb      	adds	r3, r7, r3
    35e0:	3309      	adds	r3, #9
    35e2:	2204      	movs	r2, #4
    35e4:	0018      	movs	r0, r3
    35e6:	4b22      	ldr	r3, [pc, #136]	; (3670 <fram_save_parameters_asynch+0x104>)
    35e8:	4798      	blx	r3
	memcpy(&tx_buff[13], &param->pip_cm_h20, 4);
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	330c      	adds	r3, #12
    35ee:	0019      	movs	r1, r3
    35f0:	2318      	movs	r3, #24
    35f2:	18fb      	adds	r3, r7, r3
    35f4:	330d      	adds	r3, #13
    35f6:	2204      	movs	r2, #4
    35f8:	0018      	movs	r0, r3
    35fa:	4b1d      	ldr	r3, [pc, #116]	; (3670 <fram_save_parameters_asynch+0x104>)
    35fc:	4798      	blx	r3
	memcpy(&tx_buff[17], &param->breath_per_min, 4);
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	3310      	adds	r3, #16
    3602:	0019      	movs	r1, r3
    3604:	2318      	movs	r3, #24
    3606:	18fb      	adds	r3, r7, r3
    3608:	3311      	adds	r3, #17
    360a:	2204      	movs	r2, #4
    360c:	0018      	movs	r0, r3
    360e:	4b18      	ldr	r3, [pc, #96]	; (3670 <fram_save_parameters_asynch+0x104>)
    3610:	4798      	blx	r3
	// Calculate CRC8
	tx_buff[21] = crc_8(&tx_buff[3], PARAMETER_STORAGE_WRITE_SIZE-4); // Ignore header
    3612:	2318      	movs	r3, #24
    3614:	18fb      	adds	r3, r7, r3
    3616:	3303      	adds	r3, #3
    3618:	2112      	movs	r1, #18
    361a:	0018      	movs	r0, r3
    361c:	4b15      	ldr	r3, [pc, #84]	; (3674 <fram_save_parameters_asynch+0x108>)
    361e:	4798      	blx	r3
    3620:	0003      	movs	r3, r0
    3622:	001a      	movs	r2, r3
    3624:	2318      	movs	r3, #24
    3626:	18fb      	adds	r3, r7, r3
    3628:	755a      	strb	r2, [r3, #21]

	transaction.tx_buff = tx_buff;
    362a:	2308      	movs	r3, #8
    362c:	18fb      	adds	r3, r7, r3
    362e:	2218      	movs	r2, #24
    3630:	18ba      	adds	r2, r7, r2
    3632:	605a      	str	r2, [r3, #4]
	transaction.buffer_length = PARAMETER_STORAGE_WRITE_SIZE;
    3634:	2308      	movs	r3, #8
    3636:	18fb      	adds	r3, r7, r3
    3638:	2216      	movs	r2, #22
    363a:	609a      	str	r2, [r3, #8]
	transaction.cb = dummy_spi_cb;
    363c:	2308      	movs	r3, #8
    363e:	18fb      	adds	r3, r7, r3
    3640:	4a0d      	ldr	r2, [pc, #52]	; (3678 <fram_save_parameters_asynch+0x10c>)
    3642:	60da      	str	r2, [r3, #12]
	transaction.slave_device = fram_slave;
    3644:	2308      	movs	r3, #8
    3646:	18fb      	adds	r3, r7, r3
    3648:	4a0c      	ldr	r2, [pc, #48]	; (367c <fram_save_parameters_asynch+0x110>)
    364a:	8811      	ldrh	r1, [r2, #0]
    364c:	8019      	strh	r1, [r3, #0]
    364e:	7892      	ldrb	r2, [r2, #2]
    3650:	709a      	strb	r2, [r3, #2]

	return spi_transact(transaction);
    3652:	2308      	movs	r3, #8
    3654:	18fb      	adds	r3, r7, r3
    3656:	6818      	ldr	r0, [r3, #0]
    3658:	6859      	ldr	r1, [r3, #4]
    365a:	689a      	ldr	r2, [r3, #8]
    365c:	68db      	ldr	r3, [r3, #12]
    365e:	4c08      	ldr	r4, [pc, #32]	; (3680 <fram_save_parameters_asynch+0x114>)
    3660:	47a0      	blx	r4
    3662:	0003      	movs	r3, r0
 }
    3664:	0018      	movs	r0, r3
    3666:	46bd      	mov	sp, r7
    3668:	b00d      	add	sp, #52	; 0x34
    366a:	bd90      	pop	{r4, r7, pc}
    366c:	00003405 	.word	0x00003405
    3670:	0000d0bd 	.word	0x0000d0bd
    3674:	00003131 	.word	0x00003131
    3678:	000033f1 	.word	0x000033f1
    367c:	20005038 	.word	0x20005038
    3680:	0000419d 	.word	0x0000419d

00003684 <lcd_init>:
 static char main_screen_buffer[SCREEN_BUFFER_SIZE] = {0};

 static char * intro_screen = "Low Cost Ventilator";

 bool lcd_init(void)
 {
    3684:	b590      	push	{r4, r7, lr}
    3686:	b085      	sub	sp, #20
    3688:	af00      	add	r7, sp, #0
	// Turn on screen
	static uint8_t on_screen_buffer[2] = {LCD_PREFIX, LCD_COMMAND_DISPLAY_ON};
	power_on_packet.address = LCD_I2C_ADDRESS;
    368a:	4b1a      	ldr	r3, [pc, #104]	; (36f4 <lcd_init+0x70>)
    368c:	2228      	movs	r2, #40	; 0x28
    368e:	801a      	strh	r2, [r3, #0]
	power_on_packet.data = on_screen_buffer;
    3690:	4b18      	ldr	r3, [pc, #96]	; (36f4 <lcd_init+0x70>)
    3692:	4a19      	ldr	r2, [pc, #100]	; (36f8 <lcd_init+0x74>)
    3694:	605a      	str	r2, [r3, #4]
	power_on_packet.data_length = 2;
    3696:	4b17      	ldr	r3, [pc, #92]	; (36f4 <lcd_init+0x70>)
    3698:	2202      	movs	r2, #2
    369a:	805a      	strh	r2, [r3, #2]
	power_on_packet.high_speed = false;
    369c:	4b15      	ldr	r3, [pc, #84]	; (36f4 <lcd_init+0x70>)
    369e:	2200      	movs	r2, #0
    36a0:	725a      	strb	r2, [r3, #9]
	power_on_packet.ten_bit_address = false;
    36a2:	4b14      	ldr	r3, [pc, #80]	; (36f4 <lcd_init+0x70>)
    36a4:	2200      	movs	r2, #0
    36a6:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = power_on_packet;
    36a8:	1d3b      	adds	r3, r7, #4
    36aa:	4a12      	ldr	r2, [pc, #72]	; (36f4 <lcd_init+0x70>)
    36ac:	ca13      	ldmia	r2!, {r0, r1, r4}
    36ae:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    36b0:	1d3b      	adds	r3, r7, #4
    36b2:	6818      	ldr	r0, [r3, #0]
    36b4:	6859      	ldr	r1, [r3, #4]
    36b6:	689a      	ldr	r2, [r3, #8]
    36b8:	4b10      	ldr	r3, [pc, #64]	; (36fc <lcd_init+0x78>)
    36ba:	4798      	blx	r3
	
	set_backlight(2);
    36bc:	2002      	movs	r0, #2
    36be:	4b10      	ldr	r3, [pc, #64]	; (3700 <lcd_init+0x7c>)
    36c0:	4798      	blx	r3

	set_contrast(40);
    36c2:	2028      	movs	r0, #40	; 0x28
    36c4:	4b0f      	ldr	r3, [pc, #60]	; (3704 <lcd_init+0x80>)
    36c6:	4798      	blx	r3

	// Set up initial screen
	memcpy(main_screen_buffer, intro_screen, strlen(intro_screen));
    36c8:	4b0f      	ldr	r3, [pc, #60]	; (3708 <lcd_init+0x84>)
    36ca:	681c      	ldr	r4, [r3, #0]
    36cc:	4b0e      	ldr	r3, [pc, #56]	; (3708 <lcd_init+0x84>)
    36ce:	681b      	ldr	r3, [r3, #0]
    36d0:	0018      	movs	r0, r3
    36d2:	4b0e      	ldr	r3, [pc, #56]	; (370c <lcd_init+0x88>)
    36d4:	4798      	blx	r3
    36d6:	0002      	movs	r2, r0
    36d8:	4b0d      	ldr	r3, [pc, #52]	; (3710 <lcd_init+0x8c>)
    36da:	0021      	movs	r1, r4
    36dc:	0018      	movs	r0, r3
    36de:	4b0d      	ldr	r3, [pc, #52]	; (3714 <lcd_init+0x90>)
    36e0:	4798      	blx	r3
	send_buffer(MAIN_SCREEN);
    36e2:	2000      	movs	r0, #0
    36e4:	4b0c      	ldr	r3, [pc, #48]	; (3718 <lcd_init+0x94>)
    36e6:	4798      	blx	r3
 }
    36e8:	46c0      	nop			; (mov r8, r8)
    36ea:	0018      	movs	r0, r3
    36ec:	46bd      	mov	sp, r7
    36ee:	b005      	add	sp, #20
    36f0:	bd90      	pop	{r4, r7, pc}
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	20005060 	.word	0x20005060
    36f8:	20000114 	.word	0x20000114
    36fc:	00004f99 	.word	0x00004f99
    3700:	00003951 	.word	0x00003951
    3704:	000038d1 	.word	0x000038d1
    3708:	20000110 	.word	0x20000110
    370c:	0000d189 	.word	0x0000d189
    3710:	200050d4 	.word	0x200050d4
    3714:	0000d0bd 	.word	0x0000d0bd
    3718:	0000371d 	.word	0x0000371d

0000371c <send_buffer>:
	}
	return false;
}

bool send_buffer(SCREEN_TYPE screen)
{
    371c:	b590      	push	{r4, r7, lr}
    371e:	b087      	sub	sp, #28
    3720:	af00      	add	r7, sp, #0
    3722:	0002      	movs	r2, r0
    3724:	1dfb      	adds	r3, r7, #7
    3726:	701a      	strb	r2, [r3, #0]
    */
	// reorganize to this format
	static uint8_t lines_1_3_buffer[40];
	static uint8_t lines_2_4_buffer[40];

	if(screen == MAIN_SCREEN)
    3728:	1dfb      	adds	r3, r7, #7
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	2b00      	cmp	r3, #0
    372e:	d118      	bne.n	3762 <send_buffer+0x46>
	{
		memcpy(&lines_1_3_buffer[0], &main_screen_buffer[0], 20);
    3730:	4955      	ldr	r1, [pc, #340]	; (3888 <send_buffer+0x16c>)
    3732:	4b56      	ldr	r3, [pc, #344]	; (388c <send_buffer+0x170>)
    3734:	2214      	movs	r2, #20
    3736:	0018      	movs	r0, r3
    3738:	4b55      	ldr	r3, [pc, #340]	; (3890 <send_buffer+0x174>)
    373a:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &main_screen_buffer[40], 20);
    373c:	4955      	ldr	r1, [pc, #340]	; (3894 <send_buffer+0x178>)
    373e:	4b56      	ldr	r3, [pc, #344]	; (3898 <send_buffer+0x17c>)
    3740:	2214      	movs	r2, #20
    3742:	0018      	movs	r0, r3
    3744:	4b52      	ldr	r3, [pc, #328]	; (3890 <send_buffer+0x174>)
    3746:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &main_screen_buffer[20], 20);
    3748:	4954      	ldr	r1, [pc, #336]	; (389c <send_buffer+0x180>)
    374a:	4b55      	ldr	r3, [pc, #340]	; (38a0 <send_buffer+0x184>)
    374c:	2214      	movs	r2, #20
    374e:	0018      	movs	r0, r3
    3750:	4b4f      	ldr	r3, [pc, #316]	; (3890 <send_buffer+0x174>)
    3752:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &main_screen_buffer[60], 20);
    3754:	4953      	ldr	r1, [pc, #332]	; (38a4 <send_buffer+0x188>)
    3756:	4b54      	ldr	r3, [pc, #336]	; (38a8 <send_buffer+0x18c>)
    3758:	2214      	movs	r2, #20
    375a:	0018      	movs	r0, r3
    375c:	4b4c      	ldr	r3, [pc, #304]	; (3890 <send_buffer+0x174>)
    375e:	4798      	blx	r3
    3760:	e01e      	b.n	37a0 <send_buffer+0x84>
	}
	else if(screen == ALARM_SCREEN)
    3762:	1dfb      	adds	r3, r7, #7
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	2b01      	cmp	r3, #1
    3768:	d118      	bne.n	379c <send_buffer+0x80>
	{
		memcpy(&lines_1_3_buffer[0], &alarm_screen_buffer[0], 20);
    376a:	4950      	ldr	r1, [pc, #320]	; (38ac <send_buffer+0x190>)
    376c:	4b47      	ldr	r3, [pc, #284]	; (388c <send_buffer+0x170>)
    376e:	2214      	movs	r2, #20
    3770:	0018      	movs	r0, r3
    3772:	4b47      	ldr	r3, [pc, #284]	; (3890 <send_buffer+0x174>)
    3774:	4798      	blx	r3
		memcpy(&lines_1_3_buffer[20], &alarm_screen_buffer[40], 20);
    3776:	494e      	ldr	r1, [pc, #312]	; (38b0 <send_buffer+0x194>)
    3778:	4b47      	ldr	r3, [pc, #284]	; (3898 <send_buffer+0x17c>)
    377a:	2214      	movs	r2, #20
    377c:	0018      	movs	r0, r3
    377e:	4b44      	ldr	r3, [pc, #272]	; (3890 <send_buffer+0x174>)
    3780:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
    3782:	494c      	ldr	r1, [pc, #304]	; (38b4 <send_buffer+0x198>)
    3784:	4b46      	ldr	r3, [pc, #280]	; (38a0 <send_buffer+0x184>)
    3786:	2214      	movs	r2, #20
    3788:	0018      	movs	r0, r3
    378a:	4b41      	ldr	r3, [pc, #260]	; (3890 <send_buffer+0x174>)
    378c:	4798      	blx	r3
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
    378e:	494a      	ldr	r1, [pc, #296]	; (38b8 <send_buffer+0x19c>)
    3790:	4b45      	ldr	r3, [pc, #276]	; (38a8 <send_buffer+0x18c>)
    3792:	2214      	movs	r2, #20
    3794:	0018      	movs	r0, r3
    3796:	4b3e      	ldr	r3, [pc, #248]	; (3890 <send_buffer+0x174>)
    3798:	4798      	blx	r3
    379a:	e001      	b.n	37a0 <send_buffer+0x84>
	}
	else
	{
		return false;
    379c:	2300      	movs	r3, #0
    379e:	e06f      	b.n	3880 <send_buffer+0x164>
	}

	// Clear any trailing 0s from string creation as those are special characters on the LCD
	for(int32_t i = 0; i < 40; i++)
    37a0:	2300      	movs	r3, #0
    37a2:	617b      	str	r3, [r7, #20]
    37a4:	e018      	b.n	37d8 <send_buffer+0xbc>
	{
		if(lines_1_3_buffer[i] < 0x07)
    37a6:	4a39      	ldr	r2, [pc, #228]	; (388c <send_buffer+0x170>)
    37a8:	697b      	ldr	r3, [r7, #20]
    37aa:	18d3      	adds	r3, r2, r3
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b06      	cmp	r3, #6
    37b0:	d804      	bhi.n	37bc <send_buffer+0xa0>
		{
			lines_1_3_buffer[i] = 0x20; // ASCII space
    37b2:	4a36      	ldr	r2, [pc, #216]	; (388c <send_buffer+0x170>)
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	18d3      	adds	r3, r2, r3
    37b8:	2220      	movs	r2, #32
    37ba:	701a      	strb	r2, [r3, #0]
		}
		if(lines_2_4_buffer[i] < 0x07)
    37bc:	4a38      	ldr	r2, [pc, #224]	; (38a0 <send_buffer+0x184>)
    37be:	697b      	ldr	r3, [r7, #20]
    37c0:	18d3      	adds	r3, r2, r3
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	2b06      	cmp	r3, #6
    37c6:	d804      	bhi.n	37d2 <send_buffer+0xb6>
		{
			lines_2_4_buffer[i] = 0x20; // ASCII space
    37c8:	4a35      	ldr	r2, [pc, #212]	; (38a0 <send_buffer+0x184>)
    37ca:	697b      	ldr	r3, [r7, #20]
    37cc:	18d3      	adds	r3, r2, r3
    37ce:	2220      	movs	r2, #32
    37d0:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < 40; i++)
    37d2:	697b      	ldr	r3, [r7, #20]
    37d4:	3301      	adds	r3, #1
    37d6:	617b      	str	r3, [r7, #20]
    37d8:	697b      	ldr	r3, [r7, #20]
    37da:	2b27      	cmp	r3, #39	; 0x27
    37dc:	dde3      	ble.n	37a6 <send_buffer+0x8a>

	i2c_transaction_t transaction;

	// First set cursor to start
	static uint8_t cursor_set[3] = {LCD_PREFIX, LCD_COMMAND_SET_CURSOR, 0x00};
	cursor_set_packet.address = LCD_I2C_ADDRESS;
    37de:	4b37      	ldr	r3, [pc, #220]	; (38bc <send_buffer+0x1a0>)
    37e0:	2228      	movs	r2, #40	; 0x28
    37e2:	801a      	strh	r2, [r3, #0]
	cursor_set_packet.data = cursor_set;
    37e4:	4b35      	ldr	r3, [pc, #212]	; (38bc <send_buffer+0x1a0>)
    37e6:	4a36      	ldr	r2, [pc, #216]	; (38c0 <send_buffer+0x1a4>)
    37e8:	605a      	str	r2, [r3, #4]
	cursor_set_packet.data_length = 3;
    37ea:	4b34      	ldr	r3, [pc, #208]	; (38bc <send_buffer+0x1a0>)
    37ec:	2203      	movs	r2, #3
    37ee:	805a      	strh	r2, [r3, #2]
	cursor_set_packet.high_speed = false;
    37f0:	4b32      	ldr	r3, [pc, #200]	; (38bc <send_buffer+0x1a0>)
    37f2:	2200      	movs	r2, #0
    37f4:	725a      	strb	r2, [r3, #9]
	cursor_set_packet.ten_bit_address = false;
    37f6:	4b31      	ldr	r3, [pc, #196]	; (38bc <send_buffer+0x1a0>)
    37f8:	2200      	movs	r2, #0
    37fa:	721a      	strb	r2, [r3, #8]
	transaction.packet = cursor_set_packet;
    37fc:	2308      	movs	r3, #8
    37fe:	18fb      	adds	r3, r7, r3
    3800:	4a2e      	ldr	r2, [pc, #184]	; (38bc <send_buffer+0x1a0>)
    3802:	ca13      	ldmia	r2!, {r0, r1, r4}
    3804:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    3806:	2308      	movs	r3, #8
    3808:	18fb      	adds	r3, r7, r3
    380a:	6818      	ldr	r0, [r3, #0]
    380c:	6859      	ldr	r1, [r3, #4]
    380e:	689a      	ldr	r2, [r3, #8]
    3810:	4b2c      	ldr	r3, [pc, #176]	; (38c4 <send_buffer+0x1a8>)
    3812:	4798      	blx	r3

	// Send first and third lines
	screen_buffer_first_half_packet.address = LCD_I2C_ADDRESS;
    3814:	4b2c      	ldr	r3, [pc, #176]	; (38c8 <send_buffer+0x1ac>)
    3816:	2228      	movs	r2, #40	; 0x28
    3818:	801a      	strh	r2, [r3, #0]
	screen_buffer_first_half_packet.data = lines_1_3_buffer;
    381a:	4b2b      	ldr	r3, [pc, #172]	; (38c8 <send_buffer+0x1ac>)
    381c:	4a1b      	ldr	r2, [pc, #108]	; (388c <send_buffer+0x170>)
    381e:	605a      	str	r2, [r3, #4]
	screen_buffer_first_half_packet.data_length = 40;
    3820:	4b29      	ldr	r3, [pc, #164]	; (38c8 <send_buffer+0x1ac>)
    3822:	2228      	movs	r2, #40	; 0x28
    3824:	805a      	strh	r2, [r3, #2]
	screen_buffer_first_half_packet.high_speed = false;
    3826:	4b28      	ldr	r3, [pc, #160]	; (38c8 <send_buffer+0x1ac>)
    3828:	2200      	movs	r2, #0
    382a:	725a      	strb	r2, [r3, #9]
	screen_buffer_first_half_packet.ten_bit_address = false;
    382c:	4b26      	ldr	r3, [pc, #152]	; (38c8 <send_buffer+0x1ac>)
    382e:	2200      	movs	r2, #0
    3830:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_first_half_packet;
    3832:	2308      	movs	r3, #8
    3834:	18fb      	adds	r3, r7, r3
    3836:	4a24      	ldr	r2, [pc, #144]	; (38c8 <send_buffer+0x1ac>)
    3838:	ca13      	ldmia	r2!, {r0, r1, r4}
    383a:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    383c:	2308      	movs	r3, #8
    383e:	18fb      	adds	r3, r7, r3
    3840:	6818      	ldr	r0, [r3, #0]
    3842:	6859      	ldr	r1, [r3, #4]
    3844:	689a      	ldr	r2, [r3, #8]
    3846:	4b1f      	ldr	r3, [pc, #124]	; (38c4 <send_buffer+0x1a8>)
    3848:	4798      	blx	r3

	// Send second and fourth lines
	screen_buffer_second_half_packet.address = LCD_I2C_ADDRESS;
    384a:	4b20      	ldr	r3, [pc, #128]	; (38cc <send_buffer+0x1b0>)
    384c:	2228      	movs	r2, #40	; 0x28
    384e:	801a      	strh	r2, [r3, #0]
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
    3850:	4b1e      	ldr	r3, [pc, #120]	; (38cc <send_buffer+0x1b0>)
    3852:	4a13      	ldr	r2, [pc, #76]	; (38a0 <send_buffer+0x184>)
    3854:	605a      	str	r2, [r3, #4]
	screen_buffer_second_half_packet.data_length = 40;
    3856:	4b1d      	ldr	r3, [pc, #116]	; (38cc <send_buffer+0x1b0>)
    3858:	2228      	movs	r2, #40	; 0x28
    385a:	805a      	strh	r2, [r3, #2]
	screen_buffer_second_half_packet.high_speed = false;
    385c:	4b1b      	ldr	r3, [pc, #108]	; (38cc <send_buffer+0x1b0>)
    385e:	2200      	movs	r2, #0
    3860:	725a      	strb	r2, [r3, #9]
	screen_buffer_second_half_packet.ten_bit_address = false;
    3862:	4b1a      	ldr	r3, [pc, #104]	; (38cc <send_buffer+0x1b0>)
    3864:	2200      	movs	r2, #0
    3866:	721a      	strb	r2, [r3, #8]
	transaction.packet = screen_buffer_second_half_packet;
    3868:	2308      	movs	r3, #8
    386a:	18fb      	adds	r3, r7, r3
    386c:	4a17      	ldr	r2, [pc, #92]	; (38cc <send_buffer+0x1b0>)
    386e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3870:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    3872:	2308      	movs	r3, #8
    3874:	18fb      	adds	r3, r7, r3
    3876:	6818      	ldr	r0, [r3, #0]
    3878:	6859      	ldr	r1, [r3, #4]
    387a:	689a      	ldr	r2, [r3, #8]
    387c:	4b11      	ldr	r3, [pc, #68]	; (38c4 <send_buffer+0x1a8>)
    387e:	4798      	blx	r3
}
    3880:	0018      	movs	r0, r3
    3882:	46bd      	mov	sp, r7
    3884:	b007      	add	sp, #28
    3886:	bd90      	pop	{r4, r7, pc}
    3888:	200050d4 	.word	0x200050d4
    388c:	20005124 	.word	0x20005124
    3890:	0000d0bd 	.word	0x0000d0bd
    3894:	200050fc 	.word	0x200050fc
    3898:	20005138 	.word	0x20005138
    389c:	200050e8 	.word	0x200050e8
    38a0:	2000514c 	.word	0x2000514c
    38a4:	20005110 	.word	0x20005110
    38a8:	20005160 	.word	0x20005160
    38ac:	20005084 	.word	0x20005084
    38b0:	200050ac 	.word	0x200050ac
    38b4:	20005098 	.word	0x20005098
    38b8:	200050c0 	.word	0x200050c0
    38bc:	20005054 	.word	0x20005054
    38c0:	20000118 	.word	0x20000118
    38c4:	00004f99 	.word	0x00004f99
    38c8:	2000503c 	.word	0x2000503c
    38cc:	20005048 	.word	0x20005048

000038d0 <set_contrast>:

bool set_contrast(uint8_t level)
{
    38d0:	b590      	push	{r4, r7, lr}
    38d2:	b087      	sub	sp, #28
    38d4:	af00      	add	r7, sp, #0
    38d6:	0002      	movs	r2, r0
    38d8:	1dfb      	adds	r3, r7, #7
    38da:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 50)
    38dc:	1dfb      	adds	r3, r7, #7
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d003      	beq.n	38ec <set_contrast+0x1c>
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b32      	cmp	r3, #50	; 0x32
    38ea:	d901      	bls.n	38f0 <set_contrast+0x20>
	{
		return false;
    38ec:	2300      	movs	r3, #0
    38ee:	e025      	b.n	393c <set_contrast+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    38f0:	4b14      	ldr	r3, [pc, #80]	; (3944 <set_contrast+0x74>)
    38f2:	22fe      	movs	r2, #254	; 0xfe
    38f4:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_CONTRAST;
    38f6:	4b13      	ldr	r3, [pc, #76]	; (3944 <set_contrast+0x74>)
    38f8:	2252      	movs	r2, #82	; 0x52
    38fa:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    38fc:	4b11      	ldr	r3, [pc, #68]	; (3944 <set_contrast+0x74>)
    38fe:	1dfa      	adds	r2, r7, #7
    3900:	7812      	ldrb	r2, [r2, #0]
    3902:	709a      	strb	r2, [r3, #2]
	contrast_packet.address = LCD_I2C_ADDRESS;
    3904:	4b10      	ldr	r3, [pc, #64]	; (3948 <set_contrast+0x78>)
    3906:	2228      	movs	r2, #40	; 0x28
    3908:	801a      	strh	r2, [r3, #0]
	contrast_packet.data = data_to_send;
    390a:	4b0f      	ldr	r3, [pc, #60]	; (3948 <set_contrast+0x78>)
    390c:	4a0d      	ldr	r2, [pc, #52]	; (3944 <set_contrast+0x74>)
    390e:	605a      	str	r2, [r3, #4]
	contrast_packet.data_length = 3;
    3910:	4b0d      	ldr	r3, [pc, #52]	; (3948 <set_contrast+0x78>)
    3912:	2203      	movs	r2, #3
    3914:	805a      	strh	r2, [r3, #2]
	contrast_packet.high_speed = false;
    3916:	4b0c      	ldr	r3, [pc, #48]	; (3948 <set_contrast+0x78>)
    3918:	2200      	movs	r2, #0
    391a:	725a      	strb	r2, [r3, #9]
	contrast_packet.ten_bit_address = false;
    391c:	4b0a      	ldr	r3, [pc, #40]	; (3948 <set_contrast+0x78>)
    391e:	2200      	movs	r2, #0
    3920:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = contrast_packet;
    3922:	230c      	movs	r3, #12
    3924:	18fb      	adds	r3, r7, r3
    3926:	4a08      	ldr	r2, [pc, #32]	; (3948 <set_contrast+0x78>)
    3928:	ca13      	ldmia	r2!, {r0, r1, r4}
    392a:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    392c:	230c      	movs	r3, #12
    392e:	18fb      	adds	r3, r7, r3
    3930:	6818      	ldr	r0, [r3, #0]
    3932:	6859      	ldr	r1, [r3, #4]
    3934:	689a      	ldr	r2, [r3, #8]
    3936:	4b05      	ldr	r3, [pc, #20]	; (394c <set_contrast+0x7c>)
    3938:	4798      	blx	r3
	return true;
    393a:	2301      	movs	r3, #1
}
    393c:	0018      	movs	r0, r3
    393e:	46bd      	mov	sp, r7
    3940:	b007      	add	sp, #28
    3942:	bd90      	pop	{r4, r7, pc}
    3944:	20005174 	.word	0x20005174
    3948:	2000506c 	.word	0x2000506c
    394c:	00004f99 	.word	0x00004f99

00003950 <set_backlight>:

bool set_backlight(uint8_t level)
{
    3950:	b590      	push	{r4, r7, lr}
    3952:	b087      	sub	sp, #28
    3954:	af00      	add	r7, sp, #0
    3956:	0002      	movs	r2, r0
    3958:	1dfb      	adds	r3, r7, #7
    395a:	701a      	strb	r2, [r3, #0]
	if(level < 1 || level > 8)
    395c:	1dfb      	adds	r3, r7, #7
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	d003      	beq.n	396c <set_backlight+0x1c>
    3964:	1dfb      	adds	r3, r7, #7
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	2b08      	cmp	r3, #8
    396a:	d901      	bls.n	3970 <set_backlight+0x20>
	{
		return false;
    396c:	2300      	movs	r3, #0
    396e:	e025      	b.n	39bc <set_backlight+0x6c>
	}
	static uint8_t data_to_send[3];
	data_to_send[0] = LCD_PREFIX;
    3970:	4b14      	ldr	r3, [pc, #80]	; (39c4 <set_backlight+0x74>)
    3972:	22fe      	movs	r2, #254	; 0xfe
    3974:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_BRIGHTNESS;
    3976:	4b13      	ldr	r3, [pc, #76]	; (39c4 <set_backlight+0x74>)
    3978:	2253      	movs	r2, #83	; 0x53
    397a:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    397c:	4b11      	ldr	r3, [pc, #68]	; (39c4 <set_backlight+0x74>)
    397e:	1dfa      	adds	r2, r7, #7
    3980:	7812      	ldrb	r2, [r2, #0]
    3982:	709a      	strb	r2, [r3, #2]
	backlight_packet.address = LCD_I2C_ADDRESS;
    3984:	4b10      	ldr	r3, [pc, #64]	; (39c8 <set_backlight+0x78>)
    3986:	2228      	movs	r2, #40	; 0x28
    3988:	801a      	strh	r2, [r3, #0]
	backlight_packet.data = data_to_send;
    398a:	4b0f      	ldr	r3, [pc, #60]	; (39c8 <set_backlight+0x78>)
    398c:	4a0d      	ldr	r2, [pc, #52]	; (39c4 <set_backlight+0x74>)
    398e:	605a      	str	r2, [r3, #4]
	backlight_packet.data_length = 3;
    3990:	4b0d      	ldr	r3, [pc, #52]	; (39c8 <set_backlight+0x78>)
    3992:	2203      	movs	r2, #3
    3994:	805a      	strh	r2, [r3, #2]
	backlight_packet.high_speed = false;
    3996:	4b0c      	ldr	r3, [pc, #48]	; (39c8 <set_backlight+0x78>)
    3998:	2200      	movs	r2, #0
    399a:	725a      	strb	r2, [r3, #9]
	backlight_packet.ten_bit_address = false;
    399c:	4b0a      	ldr	r3, [pc, #40]	; (39c8 <set_backlight+0x78>)
    399e:	2200      	movs	r2, #0
    39a0:	721a      	strb	r2, [r3, #8]
	i2c_transaction_t transaction;
	transaction.packet = backlight_packet;
    39a2:	230c      	movs	r3, #12
    39a4:	18fb      	adds	r3, r7, r3
    39a6:	4a08      	ldr	r2, [pc, #32]	; (39c8 <set_backlight+0x78>)
    39a8:	ca13      	ldmia	r2!, {r0, r1, r4}
    39aa:	c313      	stmia	r3!, {r0, r1, r4}
	add_lcd_i2c_transaction_to_queue(transaction);
    39ac:	230c      	movs	r3, #12
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	6818      	ldr	r0, [r3, #0]
    39b2:	6859      	ldr	r1, [r3, #4]
    39b4:	689a      	ldr	r2, [r3, #8]
    39b6:	4b05      	ldr	r3, [pc, #20]	; (39cc <set_backlight+0x7c>)
    39b8:	4798      	blx	r3
	return true;
    39ba:	2301      	movs	r3, #1
}
    39bc:	0018      	movs	r0, r3
    39be:	46bd      	mov	sp, r7
    39c0:	b007      	add	sp, #28
    39c2:	bd90      	pop	{r4, r7, pc}
    39c4:	20005178 	.word	0x20005178
    39c8:	20005078 	.word	0x20005078
    39cc:	00004f99 	.word	0x00004f99

000039d0 <update_main_buffer>:

void update_main_buffer(lcv_parameters_t * new_settings,  SETTINGS_INPUT_STAGE stage)
{
    39d0:	b590      	push	{r4, r7, lr}
    39d2:	b08d      	sub	sp, #52	; 0x34
    39d4:	af02      	add	r7, sp, #8
    39d6:	6078      	str	r0, [r7, #4]
    39d8:	000a      	movs	r2, r1
    39da:	1cfb      	adds	r3, r7, #3
    39dc:	701a      	strb	r2, [r3, #0]
	lcv_parameters_t current_settings = get_current_settings();
    39de:	230c      	movs	r3, #12
    39e0:	18fb      	adds	r3, r7, r3
    39e2:	0018      	movs	r0, r3
    39e4:	4b59      	ldr	r3, [pc, #356]	; (3b4c <update_main_buffer+0x17c>)
    39e6:	4798      	blx	r3

	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    39e8:	2300      	movs	r3, #0
    39ea:	627b      	str	r3, [r7, #36]	; 0x24
    39ec:	e007      	b.n	39fe <update_main_buffer+0x2e>
	{
		main_screen_buffer[i] = 0x20; // ASCII space
    39ee:	4a58      	ldr	r2, [pc, #352]	; (3b50 <update_main_buffer+0x180>)
    39f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39f2:	18d3      	adds	r3, r2, r3
    39f4:	2220      	movs	r2, #32
    39f6:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    39f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39fa:	3301      	adds	r3, #1
    39fc:	627b      	str	r3, [r7, #36]	; 0x24
    39fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a00:	2b4f      	cmp	r3, #79	; 0x4f
    3a02:	ddf4      	ble.n	39ee <update_main_buffer+0x1e>
	}

	// Update info
	// NOTE: snprintf here doesn't support floats
	if(current_settings.enable)
    3a04:	230c      	movs	r3, #12
    3a06:	18fb      	adds	r3, r7, r3
    3a08:	781b      	ldrb	r3, [r3, #0]
    3a0a:	2201      	movs	r2, #1
    3a0c:	4013      	ands	r3, r2
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2b00      	cmp	r3, #0
    3a12:	d004      	beq.n	3a1e <update_main_buffer+0x4e>
	{
		snprintf(&main_screen_buffer[0],9,"VENT:ON");
    3a14:	4b4e      	ldr	r3, [pc, #312]	; (3b50 <update_main_buffer+0x180>)
    3a16:	4a4f      	ldr	r2, [pc, #316]	; (3b54 <update_main_buffer+0x184>)
    3a18:	ca03      	ldmia	r2!, {r0, r1}
    3a1a:	c303      	stmia	r3!, {r0, r1}
    3a1c:	e005      	b.n	3a2a <update_main_buffer+0x5a>
	}
	else
	{
		snprintf(&main_screen_buffer[0],9,"VENT:OFF");
    3a1e:	4b4c      	ldr	r3, [pc, #304]	; (3b50 <update_main_buffer+0x180>)
    3a20:	4a4d      	ldr	r2, [pc, #308]	; (3b58 <update_main_buffer+0x188>)
    3a22:	ca03      	ldmia	r2!, {r0, r1}
    3a24:	c303      	stmia	r3!, {r0, r1}
    3a26:	7812      	ldrb	r2, [r2, #0]
    3a28:	701a      	strb	r2, [r3, #0]
	}

	snprintf(&main_screen_buffer[10],10, "V:%iml", current_settings.tidal_volume_ml);
    3a2a:	230c      	movs	r3, #12
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	685b      	ldr	r3, [r3, #4]
    3a30:	4a4a      	ldr	r2, [pc, #296]	; (3b5c <update_main_buffer+0x18c>)
    3a32:	484b      	ldr	r0, [pc, #300]	; (3b60 <update_main_buffer+0x190>)
    3a34:	210a      	movs	r1, #10
    3a36:	4c4b      	ldr	r4, [pc, #300]	; (3b64 <update_main_buffer+0x194>)
    3a38:	47a0      	blx	r4

	snprintf(&main_screen_buffer[20],13, "PEEP:%icmH20", current_settings.peep_cm_h20);
    3a3a:	230c      	movs	r3, #12
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	689b      	ldr	r3, [r3, #8]
    3a40:	4a49      	ldr	r2, [pc, #292]	; (3b68 <update_main_buffer+0x198>)
    3a42:	484a      	ldr	r0, [pc, #296]	; (3b6c <update_main_buffer+0x19c>)
    3a44:	210d      	movs	r1, #13
    3a46:	4c47      	ldr	r4, [pc, #284]	; (3b64 <update_main_buffer+0x194>)
    3a48:	47a0      	blx	r4

	uint8_t current_inspiratory_ones = current_settings.ie_ratio_tenths / 10;
    3a4a:	230c      	movs	r3, #12
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	785a      	ldrb	r2, [r3, #1]
    3a50:	2323      	movs	r3, #35	; 0x23
    3a52:	18fc      	adds	r4, r7, r3
    3a54:	4b46      	ldr	r3, [pc, #280]	; (3b70 <update_main_buffer+0x1a0>)
    3a56:	210a      	movs	r1, #10
    3a58:	0010      	movs	r0, r2
    3a5a:	4798      	blx	r3
    3a5c:	0003      	movs	r3, r0
    3a5e:	7023      	strb	r3, [r4, #0]
	uint8_t current_inspiratory_tenths = current_settings.ie_ratio_tenths - (10*current_inspiratory_ones);
    3a60:	230c      	movs	r3, #12
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	7859      	ldrb	r1, [r3, #1]
    3a66:	2323      	movs	r3, #35	; 0x23
    3a68:	18fb      	adds	r3, r7, r3
    3a6a:	781b      	ldrb	r3, [r3, #0]
    3a6c:	220a      	movs	r2, #10
    3a6e:	4252      	negs	r2, r2
    3a70:	4353      	muls	r3, r2
    3a72:	b2da      	uxtb	r2, r3
    3a74:	2322      	movs	r3, #34	; 0x22
    3a76:	18fb      	adds	r3, r7, r3
    3a78:	188a      	adds	r2, r1, r2
    3a7a:	701a      	strb	r2, [r3, #0]
	snprintf(&main_screen_buffer[32],9, "IE:%i.%i:1", current_inspiratory_ones, current_inspiratory_tenths);
    3a7c:	2323      	movs	r3, #35	; 0x23
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	7819      	ldrb	r1, [r3, #0]
    3a82:	2322      	movs	r3, #34	; 0x22
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	4a3a      	ldr	r2, [pc, #232]	; (3b74 <update_main_buffer+0x1a4>)
    3a8a:	483b      	ldr	r0, [pc, #236]	; (3b78 <update_main_buffer+0x1a8>)
    3a8c:	9300      	str	r3, [sp, #0]
    3a8e:	000b      	movs	r3, r1
    3a90:	2109      	movs	r1, #9
    3a92:	4c34      	ldr	r4, [pc, #208]	; (3b64 <update_main_buffer+0x194>)
    3a94:	47a0      	blx	r4

	snprintf(&main_screen_buffer[40],13, "PIP:%icmH20", current_settings.pip_cm_h20);
    3a96:	230c      	movs	r3, #12
    3a98:	18fb      	adds	r3, r7, r3
    3a9a:	68db      	ldr	r3, [r3, #12]
    3a9c:	4a37      	ldr	r2, [pc, #220]	; (3b7c <update_main_buffer+0x1ac>)
    3a9e:	4838      	ldr	r0, [pc, #224]	; (3b80 <update_main_buffer+0x1b0>)
    3aa0:	210d      	movs	r1, #13
    3aa2:	4c30      	ldr	r4, [pc, #192]	; (3b64 <update_main_buffer+0x194>)
    3aa4:	47a0      	blx	r4

	snprintf(&main_screen_buffer[52],7, "BPM:%i", current_settings.breath_per_min);
    3aa6:	230c      	movs	r3, #12
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	691b      	ldr	r3, [r3, #16]
    3aac:	4a35      	ldr	r2, [pc, #212]	; (3b84 <update_main_buffer+0x1b4>)
    3aae:	4836      	ldr	r0, [pc, #216]	; (3b88 <update_main_buffer+0x1b8>)
    3ab0:	2107      	movs	r1, #7
    3ab2:	4c2c      	ldr	r4, [pc, #176]	; (3b64 <update_main_buffer+0x194>)
    3ab4:	47a0      	blx	r4

	// Fill in settings input display
	uint8_t setting_inspiratory_ones = new_settings->ie_ratio_tenths / 10;
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	785a      	ldrb	r2, [r3, #1]
    3aba:	2321      	movs	r3, #33	; 0x21
    3abc:	18fc      	adds	r4, r7, r3
    3abe:	4b2c      	ldr	r3, [pc, #176]	; (3b70 <update_main_buffer+0x1a0>)
    3ac0:	210a      	movs	r1, #10
    3ac2:	0010      	movs	r0, r2
    3ac4:	4798      	blx	r3
    3ac6:	0003      	movs	r3, r0
    3ac8:	7023      	strb	r3, [r4, #0]
	uint8_t setting_inspiratory_tenths = new_settings->ie_ratio_tenths - (10*setting_inspiratory_ones);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	7859      	ldrb	r1, [r3, #1]
    3ace:	2321      	movs	r3, #33	; 0x21
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	220a      	movs	r2, #10
    3ad6:	4252      	negs	r2, r2
    3ad8:	4353      	muls	r3, r2
    3ada:	b2da      	uxtb	r2, r3
    3adc:	2320      	movs	r3, #32
    3ade:	18fb      	adds	r3, r7, r3
    3ae0:	188a      	adds	r2, r1, r2
    3ae2:	701a      	strb	r2, [r3, #0]

	switch (stage)
    3ae4:	1cfb      	adds	r3, r7, #3
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	2b04      	cmp	r3, #4
    3aea:	d827      	bhi.n	3b3c <update_main_buffer+0x16c>
    3aec:	009a      	lsls	r2, r3, #2
    3aee:	4b27      	ldr	r3, [pc, #156]	; (3b8c <update_main_buffer+0x1bc>)
    3af0:	18d3      	adds	r3, r2, r3
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
			break;

		case STAGE_BPM:
			sprintf(&main_screen_buffer[60], "SET BPM:%i", new_settings->breath_per_min);
    3af6:	687b      	ldr	r3, [r7, #4]
    3af8:	691a      	ldr	r2, [r3, #16]
    3afa:	4925      	ldr	r1, [pc, #148]	; (3b90 <update_main_buffer+0x1c0>)
    3afc:	4b25      	ldr	r3, [pc, #148]	; (3b94 <update_main_buffer+0x1c4>)
    3afe:	0018      	movs	r0, r3
    3b00:	4b25      	ldr	r3, [pc, #148]	; (3b98 <update_main_buffer+0x1c8>)
    3b02:	4798      	blx	r3
			break;
    3b04:	e01d      	b.n	3b42 <update_main_buffer+0x172>

		case STAGE_PEEP:
			sprintf(&main_screen_buffer[60], "SET PEEP:%icmH20", new_settings->peep_cm_h20);
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	689a      	ldr	r2, [r3, #8]
    3b0a:	4924      	ldr	r1, [pc, #144]	; (3b9c <update_main_buffer+0x1cc>)
    3b0c:	4b21      	ldr	r3, [pc, #132]	; (3b94 <update_main_buffer+0x1c4>)
    3b0e:	0018      	movs	r0, r3
    3b10:	4b21      	ldr	r3, [pc, #132]	; (3b98 <update_main_buffer+0x1c8>)
    3b12:	4798      	blx	r3
			break;
    3b14:	e015      	b.n	3b42 <update_main_buffer+0x172>

		case STAGE_PIP:
			sprintf(&main_screen_buffer[60], "SET PIP:%icmH20", new_settings->pip_cm_h20);
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	68da      	ldr	r2, [r3, #12]
    3b1a:	4921      	ldr	r1, [pc, #132]	; (3ba0 <update_main_buffer+0x1d0>)
    3b1c:	4b1d      	ldr	r3, [pc, #116]	; (3b94 <update_main_buffer+0x1c4>)
    3b1e:	0018      	movs	r0, r3
    3b20:	4b1d      	ldr	r3, [pc, #116]	; (3b98 <update_main_buffer+0x1c8>)
    3b22:	4798      	blx	r3
			break;
    3b24:	e00d      	b.n	3b42 <update_main_buffer+0x172>

		case STAGE_IE:
			sprintf(&main_screen_buffer[60], "SET I:E: %i.%i:1", setting_inspiratory_ones, setting_inspiratory_tenths);
    3b26:	2321      	movs	r3, #33	; 0x21
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	781a      	ldrb	r2, [r3, #0]
    3b2c:	2320      	movs	r3, #32
    3b2e:	18fb      	adds	r3, r7, r3
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	491c      	ldr	r1, [pc, #112]	; (3ba4 <update_main_buffer+0x1d4>)
    3b34:	4817      	ldr	r0, [pc, #92]	; (3b94 <update_main_buffer+0x1c4>)
    3b36:	4c18      	ldr	r4, [pc, #96]	; (3b98 <update_main_buffer+0x1c8>)
    3b38:	47a0      	blx	r4
			break;
    3b3a:	e002      	b.n	3b42 <update_main_buffer+0x172>
		
		default:
			break;
    3b3c:	46c0      	nop			; (mov r8, r8)
    3b3e:	e000      	b.n	3b42 <update_main_buffer+0x172>
			break;
    3b40:	46c0      	nop			; (mov r8, r8)
	}
}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	46bd      	mov	sp, r7
    3b46:	b00b      	add	sp, #44	; 0x2c
    3b48:	bd90      	pop	{r4, r7, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	000045c5 	.word	0x000045c5
    3b50:	200050d4 	.word	0x200050d4
    3b54:	0000dabc 	.word	0x0000dabc
    3b58:	0000dac4 	.word	0x0000dac4
    3b5c:	0000dad0 	.word	0x0000dad0
    3b60:	200050de 	.word	0x200050de
    3b64:	0000d0e1 	.word	0x0000d0e1
    3b68:	0000dad8 	.word	0x0000dad8
    3b6c:	200050e8 	.word	0x200050e8
    3b70:	0000a1b1 	.word	0x0000a1b1
    3b74:	0000dae8 	.word	0x0000dae8
    3b78:	200050f4 	.word	0x200050f4
    3b7c:	0000daf4 	.word	0x0000daf4
    3b80:	200050fc 	.word	0x200050fc
    3b84:	0000db00 	.word	0x0000db00
    3b88:	20005108 	.word	0x20005108
    3b8c:	0000db94 	.word	0x0000db94
    3b90:	0000db08 	.word	0x0000db08
    3b94:	20005110 	.word	0x20005110
    3b98:	0000d145 	.word	0x0000d145
    3b9c:	0000db14 	.word	0x0000db14
    3ba0:	0000db28 	.word	0x0000db28
    3ba4:	0000db38 	.word	0x0000db38

00003ba8 <update_alarm_buffer>:

void update_alarm_buffer(void)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b082      	sub	sp, #8
    3bac:	af00      	add	r7, sp, #0
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    3bae:	2300      	movs	r3, #0
    3bb0:	607b      	str	r3, [r7, #4]
    3bb2:	e007      	b.n	3bc4 <update_alarm_buffer+0x1c>
	{
		alarm_screen_buffer[i] = 0x20; // ASCII space
    3bb4:	4a2e      	ldr	r2, [pc, #184]	; (3c70 <update_alarm_buffer+0xc8>)
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	18d3      	adds	r3, r2, r3
    3bba:	2220      	movs	r2, #32
    3bbc:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    3bbe:	687b      	ldr	r3, [r7, #4]
    3bc0:	3301      	adds	r3, #1
    3bc2:	607b      	str	r3, [r7, #4]
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	2b4f      	cmp	r3, #79	; 0x4f
    3bc8:	ddf4      	ble.n	3bb4 <update_alarm_buffer+0xc>
	}

	snprintf(&alarm_screen_buffer[0],9,"ERRORS:");
    3bca:	4b29      	ldr	r3, [pc, #164]	; (3c70 <update_alarm_buffer+0xc8>)
    3bcc:	4a29      	ldr	r2, [pc, #164]	; (3c74 <update_alarm_buffer+0xcc>)
    3bce:	ca03      	ldmia	r2!, {r0, r1}
    3bd0:	c303      	stmia	r3!, {r0, r1}

	if(check_alarm(ALARM_FLOW_SENSOR))
    3bd2:	2000      	movs	r0, #0
    3bd4:	4b28      	ldr	r3, [pc, #160]	; (3c78 <update_alarm_buffer+0xd0>)
    3bd6:	4798      	blx	r3
    3bd8:	1e03      	subs	r3, r0, #0
    3bda:	d007      	beq.n	3bec <update_alarm_buffer+0x44>
	{
		snprintf(&alarm_screen_buffer[10],10,"FLOW");
    3bdc:	4a27      	ldr	r2, [pc, #156]	; (3c7c <update_alarm_buffer+0xd4>)
    3bde:	4b28      	ldr	r3, [pc, #160]	; (3c80 <update_alarm_buffer+0xd8>)
    3be0:	0010      	movs	r0, r2
    3be2:	0019      	movs	r1, r3
    3be4:	2305      	movs	r3, #5
    3be6:	001a      	movs	r2, r3
    3be8:	4b26      	ldr	r3, [pc, #152]	; (3c84 <update_alarm_buffer+0xdc>)
    3bea:	4798      	blx	r3
	}

	if(check_alarm(ALARM_PRESSURE_SENSOR))
    3bec:	2002      	movs	r0, #2
    3bee:	4b22      	ldr	r3, [pc, #136]	; (3c78 <update_alarm_buffer+0xd0>)
    3bf0:	4798      	blx	r3
    3bf2:	1e03      	subs	r3, r0, #0
    3bf4:	d005      	beq.n	3c02 <update_alarm_buffer+0x5a>
	{
		snprintf(&alarm_screen_buffer[20],10,"PRES SNS");
    3bf6:	4b24      	ldr	r3, [pc, #144]	; (3c88 <update_alarm_buffer+0xe0>)
    3bf8:	4a24      	ldr	r2, [pc, #144]	; (3c8c <update_alarm_buffer+0xe4>)
    3bfa:	ca03      	ldmia	r2!, {r0, r1}
    3bfc:	c303      	stmia	r3!, {r0, r1}
    3bfe:	7812      	ldrb	r2, [r2, #0]
    3c00:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_MOTOR_ERROR))
    3c02:	2003      	movs	r0, #3
    3c04:	4b1c      	ldr	r3, [pc, #112]	; (3c78 <update_alarm_buffer+0xd0>)
    3c06:	4798      	blx	r3
    3c08:	1e03      	subs	r3, r0, #0
    3c0a:	d007      	beq.n	3c1c <update_alarm_buffer+0x74>
	{
		snprintf(&alarm_screen_buffer[30],10,"MOT FAIL");
    3c0c:	4a20      	ldr	r2, [pc, #128]	; (3c90 <update_alarm_buffer+0xe8>)
    3c0e:	4b21      	ldr	r3, [pc, #132]	; (3c94 <update_alarm_buffer+0xec>)
    3c10:	0010      	movs	r0, r2
    3c12:	0019      	movs	r1, r3
    3c14:	2309      	movs	r3, #9
    3c16:	001a      	movs	r2, r3
    3c18:	4b1a      	ldr	r3, [pc, #104]	; (3c84 <update_alarm_buffer+0xdc>)
    3c1a:	4798      	blx	r3
	}

	if(check_alarm(ALARM_MOTOR_TEMP))
    3c1c:	2004      	movs	r0, #4
    3c1e:	4b16      	ldr	r3, [pc, #88]	; (3c78 <update_alarm_buffer+0xd0>)
    3c20:	4798      	blx	r3
    3c22:	1e03      	subs	r3, r0, #0
    3c24:	d005      	beq.n	3c32 <update_alarm_buffer+0x8a>
	{
		snprintf(&alarm_screen_buffer[40],10,"MOT TEMP");
    3c26:	4b1c      	ldr	r3, [pc, #112]	; (3c98 <update_alarm_buffer+0xf0>)
    3c28:	4a1c      	ldr	r2, [pc, #112]	; (3c9c <update_alarm_buffer+0xf4>)
    3c2a:	ca03      	ldmia	r2!, {r0, r1}
    3c2c:	c303      	stmia	r3!, {r0, r1}
    3c2e:	7812      	ldrb	r2, [r2, #0]
    3c30:	701a      	strb	r2, [r3, #0]
	}

	if(check_alarm(ALARM_SETTINGS_LOAD))
    3c32:	2005      	movs	r0, #5
    3c34:	4b10      	ldr	r3, [pc, #64]	; (3c78 <update_alarm_buffer+0xd0>)
    3c36:	4798      	blx	r3
    3c38:	1e03      	subs	r3, r0, #0
    3c3a:	d007      	beq.n	3c4c <update_alarm_buffer+0xa4>
	{
		snprintf(&alarm_screen_buffer[50],10,"SETT LOAD");
    3c3c:	4a18      	ldr	r2, [pc, #96]	; (3ca0 <update_alarm_buffer+0xf8>)
    3c3e:	4b19      	ldr	r3, [pc, #100]	; (3ca4 <update_alarm_buffer+0xfc>)
    3c40:	0010      	movs	r0, r2
    3c42:	0019      	movs	r1, r3
    3c44:	230a      	movs	r3, #10
    3c46:	001a      	movs	r2, r3
    3c48:	4b0e      	ldr	r3, [pc, #56]	; (3c84 <update_alarm_buffer+0xdc>)
    3c4a:	4798      	blx	r3
	}

	if(check_alarm(ALARM_P_RAMP_SETTINGS_INVALID))
    3c4c:	2006      	movs	r0, #6
    3c4e:	4b0a      	ldr	r3, [pc, #40]	; (3c78 <update_alarm_buffer+0xd0>)
    3c50:	4798      	blx	r3
    3c52:	1e03      	subs	r3, r0, #0
    3c54:	d007      	beq.n	3c66 <update_alarm_buffer+0xbe>
	{
		snprintf(&alarm_screen_buffer[60],10,"P RISE");
    3c56:	4b14      	ldr	r3, [pc, #80]	; (3ca8 <update_alarm_buffer+0x100>)
    3c58:	4a14      	ldr	r2, [pc, #80]	; (3cac <update_alarm_buffer+0x104>)
    3c5a:	6811      	ldr	r1, [r2, #0]
    3c5c:	6019      	str	r1, [r3, #0]
    3c5e:	8891      	ldrh	r1, [r2, #4]
    3c60:	8099      	strh	r1, [r3, #4]
    3c62:	7992      	ldrb	r2, [r2, #6]
    3c64:	719a      	strb	r2, [r3, #6]
	}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	46bd      	mov	sp, r7
    3c6a:	b002      	add	sp, #8
    3c6c:	bd80      	pop	{r7, pc}
    3c6e:	46c0      	nop			; (mov r8, r8)
    3c70:	20005084 	.word	0x20005084
    3c74:	0000db4c 	.word	0x0000db4c
    3c78:	00002a59 	.word	0x00002a59
    3c7c:	2000508e 	.word	0x2000508e
    3c80:	0000db54 	.word	0x0000db54
    3c84:	0000d0bd 	.word	0x0000d0bd
    3c88:	20005098 	.word	0x20005098
    3c8c:	0000db5c 	.word	0x0000db5c
    3c90:	200050a2 	.word	0x200050a2
    3c94:	0000db68 	.word	0x0000db68
    3c98:	200050ac 	.word	0x200050ac
    3c9c:	0000db74 	.word	0x0000db74
    3ca0:	200050b6 	.word	0x200050b6
    3ca4:	0000db80 	.word	0x0000db80
    3ca8:	200050c0 	.word	0x200050c0
    3cac:	0000db8c 	.word	0x0000db8c

00003cb0 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b082      	sub	sp, #8
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    3cb8:	687b      	ldr	r3, [r7, #4]
    3cba:	095b      	lsrs	r3, r3, #5
}
    3cbc:	0018      	movs	r0, r3
    3cbe:	46bd      	mov	sp, r7
    3cc0:	b002      	add	sp, #8
    3cc2:	bd80      	pop	{r7, pc}

00003cc4 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b082      	sub	sp, #8
    3cc8:	af00      	add	r7, sp, #0
    3cca:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    3ccc:	687b      	ldr	r3, [r7, #4]
    3cce:	01db      	lsls	r3, r3, #7
    3cd0:	4a03      	ldr	r2, [pc, #12]	; (3ce0 <arch_ioport_port_to_base+0x1c>)
    3cd2:	4694      	mov	ip, r2
    3cd4:	4463      	add	r3, ip
}
    3cd6:	0018      	movs	r0, r3
    3cd8:	46bd      	mov	sp, r7
    3cda:	b002      	add	sp, #8
    3cdc:	bd80      	pop	{r7, pc}
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	41004400 	.word	0x41004400

00003ce4 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b05      	ldr	r3, [pc, #20]	; (3d08 <arch_ioport_pin_to_base+0x24>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	0018      	movs	r0, r3
    3cf8:	4b04      	ldr	r3, [pc, #16]	; (3d0c <arch_ioport_pin_to_base+0x28>)
    3cfa:	4798      	blx	r3
    3cfc:	0003      	movs	r3, r0
}
    3cfe:	0018      	movs	r0, r3
    3d00:	46bd      	mov	sp, r7
    3d02:	b002      	add	sp, #8
    3d04:	bd80      	pop	{r7, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	00003cb1 	.word	0x00003cb1
    3d0c:	00003cc5 	.word	0x00003cc5

00003d10 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b082      	sub	sp, #8
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	221f      	movs	r2, #31
    3d1c:	4013      	ands	r3, r2
    3d1e:	2201      	movs	r2, #1
    3d20:	409a      	lsls	r2, r3
    3d22:	0013      	movs	r3, r2
}
    3d24:	0018      	movs	r0, r3
    3d26:	46bd      	mov	sp, r7
    3d28:	b002      	add	sp, #8
    3d2a:	bd80      	pop	{r7, pc}

00003d2c <arch_ioport_set_pin_level>:
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    3d2c:	b590      	push	{r4, r7, lr}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
    3d34:	000a      	movs	r2, r1
    3d36:	1cfb      	adds	r3, r7, #3
    3d38:	701a      	strb	r2, [r3, #0]
	if (level) {
    3d3a:	1cfb      	adds	r3, r7, #3
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d00b      	beq.n	3d5a <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	0018      	movs	r0, r3
    3d46:	4b0c      	ldr	r3, [pc, #48]	; (3d78 <arch_ioport_set_pin_level+0x4c>)
    3d48:	4798      	blx	r3
    3d4a:	0004      	movs	r4, r0
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	0018      	movs	r0, r3
    3d50:	4b0a      	ldr	r3, [pc, #40]	; (3d7c <arch_ioport_set_pin_level+0x50>)
    3d52:	4798      	blx	r3
    3d54:	0003      	movs	r3, r0
    3d56:	61a3      	str	r3, [r4, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
	}
}
    3d58:	e00a      	b.n	3d70 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	0018      	movs	r0, r3
    3d5e:	4b06      	ldr	r3, [pc, #24]	; (3d78 <arch_ioport_set_pin_level+0x4c>)
    3d60:	4798      	blx	r3
    3d62:	0004      	movs	r4, r0
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	0018      	movs	r0, r3
    3d68:	4b04      	ldr	r3, [pc, #16]	; (3d7c <arch_ioport_set_pin_level+0x50>)
    3d6a:	4798      	blx	r3
    3d6c:	0003      	movs	r3, r0
    3d6e:	6163      	str	r3, [r4, #20]
}
    3d70:	46c0      	nop			; (mov r8, r8)
    3d72:	46bd      	mov	sp, r7
    3d74:	b003      	add	sp, #12
    3d76:	bd90      	pop	{r4, r7, pc}
    3d78:	00003ce5 	.word	0x00003ce5
    3d7c:	00003d11 	.word	0x00003d11

00003d80 <arch_ioport_get_pin_level>:
		base->OUTCLR.reg = mask;
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
    3d80:	b590      	push	{r4, r7, lr}
    3d82:	b083      	sub	sp, #12
    3d84:	af00      	add	r7, sp, #0
    3d86:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	0018      	movs	r0, r3
    3d8c:	4b08      	ldr	r3, [pc, #32]	; (3db0 <arch_ioport_get_pin_level+0x30>)
    3d8e:	4798      	blx	r3
    3d90:	0003      	movs	r3, r0
    3d92:	6a1c      	ldr	r4, [r3, #32]
    3d94:	687b      	ldr	r3, [r7, #4]
    3d96:	0018      	movs	r0, r3
    3d98:	4b06      	ldr	r3, [pc, #24]	; (3db4 <arch_ioport_get_pin_level+0x34>)
    3d9a:	4798      	blx	r3
    3d9c:	0003      	movs	r3, r0
    3d9e:	4023      	ands	r3, r4
    3da0:	1e5a      	subs	r2, r3, #1
    3da2:	4193      	sbcs	r3, r2
    3da4:	b2db      	uxtb	r3, r3
}
    3da6:	0018      	movs	r0, r3
    3da8:	46bd      	mov	sp, r7
    3daa:	b003      	add	sp, #12
    3dac:	bd90      	pop	{r4, r7, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00003ce5 	.word	0x00003ce5
    3db4:	00003d11 	.word	0x00003d11

00003db8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b082      	sub	sp, #8
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    3dc0:	000a      	movs	r2, r1
    3dc2:	1cfb      	adds	r3, r7, #3
    3dc4:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    3dc6:	1cfb      	adds	r3, r7, #3
    3dc8:	781a      	ldrb	r2, [r3, #0]
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	0011      	movs	r1, r2
    3dce:	0018      	movs	r0, r3
    3dd0:	4b02      	ldr	r3, [pc, #8]	; (3ddc <ioport_set_pin_level+0x24>)
    3dd2:	4798      	blx	r3
}
    3dd4:	46c0      	nop			; (mov r8, r8)
    3dd6:	46bd      	mov	sp, r7
    3dd8:	b002      	add	sp, #8
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	00003d2d 	.word	0x00003d2d

00003de0 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b082      	sub	sp, #8
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	0018      	movs	r0, r3
    3dec:	4b03      	ldr	r3, [pc, #12]	; (3dfc <ioport_get_pin_level+0x1c>)
    3dee:	4798      	blx	r3
    3df0:	0003      	movs	r3, r0
}
    3df2:	0018      	movs	r0, r3
    3df4:	46bd      	mov	sp, r7
    3df6:	b002      	add	sp, #8
    3df8:	bd80      	pop	{r7, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	00003d81 	.word	0x00003d81

00003e00 <init_motor_interface>:
 #include "motor_interface.h"

 static struct dac_module module;

 void init_motor_interface(void)
 {
    3e00:	b580      	push	{r7, lr}
    3e02:	b084      	sub	sp, #16
    3e04:	af00      	add	r7, sp, #0
	disable_motor();
    3e06:	4b16      	ldr	r3, [pc, #88]	; (3e60 <init_motor_interface+0x60>)
    3e08:	4798      	blx	r3

	// Set up DAC
	struct dac_chan_config channel_config;
	dac_chan_get_config_defaults(&channel_config);
    3e0a:	230c      	movs	r3, #12
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	0018      	movs	r0, r3
    3e10:	4b14      	ldr	r3, [pc, #80]	; (3e64 <init_motor_interface+0x64>)
    3e12:	4798      	blx	r3

	struct dac_config config;
	dac_get_config_defaults(&config);
    3e14:	1d3b      	adds	r3, r7, #4
    3e16:	0018      	movs	r0, r3
    3e18:	4b13      	ldr	r3, [pc, #76]	; (3e68 <init_motor_interface+0x68>)
    3e1a:	4798      	blx	r3
	config.reference = DAC_REFERENCE_AVCC;
    3e1c:	1d3b      	adds	r3, r7, #4
    3e1e:	2240      	movs	r2, #64	; 0x40
    3e20:	701a      	strb	r2, [r3, #0]

	dac_init(&module, DAC, &config);
    3e22:	1d3a      	adds	r2, r7, #4
    3e24:	4911      	ldr	r1, [pc, #68]	; (3e6c <init_motor_interface+0x6c>)
    3e26:	4b12      	ldr	r3, [pc, #72]	; (3e70 <init_motor_interface+0x70>)
    3e28:	0018      	movs	r0, r3
    3e2a:	4b12      	ldr	r3, [pc, #72]	; (3e74 <init_motor_interface+0x74>)
    3e2c:	4798      	blx	r3
	
	dac_chan_set_config(&module, DAC_CHANNEL_0, &channel_config);
    3e2e:	230c      	movs	r3, #12
    3e30:	18fa      	adds	r2, r7, r3
    3e32:	4b0f      	ldr	r3, [pc, #60]	; (3e70 <init_motor_interface+0x70>)
    3e34:	2100      	movs	r1, #0
    3e36:	0018      	movs	r0, r3
    3e38:	4b0f      	ldr	r3, [pc, #60]	; (3e78 <init_motor_interface+0x78>)
    3e3a:	4798      	blx	r3
	dac_chan_enable(&module, DAC_CHANNEL_0);
    3e3c:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <init_motor_interface+0x70>)
    3e3e:	2100      	movs	r1, #0
    3e40:	0018      	movs	r0, r3
    3e42:	4b0e      	ldr	r3, [pc, #56]	; (3e7c <init_motor_interface+0x7c>)
    3e44:	4798      	blx	r3

	dac_enable(&module);
    3e46:	4b0a      	ldr	r3, [pc, #40]	; (3e70 <init_motor_interface+0x70>)
    3e48:	0018      	movs	r0, r3
    3e4a:	4b0d      	ldr	r3, [pc, #52]	; (3e80 <init_motor_interface+0x80>)
    3e4c:	4798      	blx	r3

	drive_motor(0.0);
    3e4e:	2300      	movs	r3, #0
    3e50:	1c18      	adds	r0, r3, #0
    3e52:	4b0c      	ldr	r3, [pc, #48]	; (3e84 <init_motor_interface+0x84>)
    3e54:	4798      	blx	r3
 }
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	46bd      	mov	sp, r7
    3e5a:	b004      	add	sp, #16
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	00003f09 	.word	0x00003f09
    3e64:	00000f81 	.word	0x00000f81
    3e68:	00000dd9 	.word	0x00000dd9
    3e6c:	42004800 	.word	0x42004800
    3e70:	2000517c 	.word	0x2000517c
    3e74:	00000e15 	.word	0x00000e15
    3e78:	00000f91 	.word	0x00000f91
    3e7c:	00000fab 	.word	0x00000fab
    3e80:	00000f25 	.word	0x00000f25
    3e84:	00003f21 	.word	0x00003f21

00003e88 <motor_status_monitor>:

 void motor_status_monitor(void)
 {
    3e88:	b580      	push	{r7, lr}
    3e8a:	af00      	add	r7, sp, #0
	if(ioport_get_pin_level(MOTOR_READY_GPIO) == LOW)
    3e8c:	2001      	movs	r0, #1
    3e8e:	4b13      	ldr	r3, [pc, #76]	; (3edc <motor_status_monitor+0x54>)
    3e90:	4798      	blx	r3
    3e92:	0003      	movs	r3, r0
    3e94:	001a      	movs	r2, r3
    3e96:	2301      	movs	r3, #1
    3e98:	4053      	eors	r3, r2
    3e9a:	b2db      	uxtb	r3, r3
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d004      	beq.n	3eaa <motor_status_monitor+0x22>
	{
		set_alarm(ALARM_MOTOR_ERROR, true);
    3ea0:	2101      	movs	r1, #1
    3ea2:	2003      	movs	r0, #3
    3ea4:	4b0e      	ldr	r3, [pc, #56]	; (3ee0 <motor_status_monitor+0x58>)
    3ea6:	4798      	blx	r3
    3ea8:	e003      	b.n	3eb2 <motor_status_monitor+0x2a>
	}
	else
	{
		set_alarm(ALARM_MOTOR_ERROR, false);
    3eaa:	2100      	movs	r1, #0
    3eac:	2003      	movs	r0, #3
    3eae:	4b0c      	ldr	r3, [pc, #48]	; (3ee0 <motor_status_monitor+0x58>)
    3eb0:	4798      	blx	r3
	}

	if(get_motor_temp_celsius() > 100)
    3eb2:	4b0c      	ldr	r3, [pc, #48]	; (3ee4 <motor_status_monitor+0x5c>)
    3eb4:	4798      	blx	r3
    3eb6:	1c02      	adds	r2, r0, #0
    3eb8:	4b0b      	ldr	r3, [pc, #44]	; (3ee8 <motor_status_monitor+0x60>)
    3eba:	490c      	ldr	r1, [pc, #48]	; (3eec <motor_status_monitor+0x64>)
    3ebc:	1c10      	adds	r0, r2, #0
    3ebe:	4798      	blx	r3
    3ec0:	1e03      	subs	r3, r0, #0
    3ec2:	d004      	beq.n	3ece <motor_status_monitor+0x46>
	{
		set_alarm(ALARM_MOTOR_TEMP, true);
    3ec4:	2101      	movs	r1, #1
    3ec6:	2004      	movs	r0, #4
    3ec8:	4b05      	ldr	r3, [pc, #20]	; (3ee0 <motor_status_monitor+0x58>)
    3eca:	4798      	blx	r3
	}
	else
	{
		set_alarm(ALARM_MOTOR_TEMP, false);
	}
 }
    3ecc:	e003      	b.n	3ed6 <motor_status_monitor+0x4e>
		set_alarm(ALARM_MOTOR_TEMP, false);
    3ece:	2100      	movs	r1, #0
    3ed0:	2004      	movs	r0, #4
    3ed2:	4b03      	ldr	r3, [pc, #12]	; (3ee0 <motor_status_monitor+0x58>)
    3ed4:	4798      	blx	r3
 }
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	46bd      	mov	sp, r7
    3eda:	bd80      	pop	{r7, pc}
    3edc:	00003de1 	.word	0x00003de1
    3ee0:	000029f9 	.word	0x000029f9
    3ee4:	000029ed 	.word	0x000029ed
    3ee8:	0000a391 	.word	0x0000a391
    3eec:	42c80000 	.word	0x42c80000

00003ef0 <enable_motor>:

 void enable_motor(void)
 {
    3ef0:	b580      	push	{r7, lr}
    3ef2:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, MOTOR_ENABLE_ACTIVE_LEVEL);
    3ef4:	2101      	movs	r1, #1
    3ef6:	2000      	movs	r0, #0
    3ef8:	4b02      	ldr	r3, [pc, #8]	; (3f04 <enable_motor+0x14>)
    3efa:	4798      	blx	r3
 }
    3efc:	46c0      	nop			; (mov r8, r8)
    3efe:	46bd      	mov	sp, r7
    3f00:	bd80      	pop	{r7, pc}
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	00003db9 	.word	0x00003db9

00003f08 <disable_motor>:

 void disable_motor(void)
 {
    3f08:	b580      	push	{r7, lr}
    3f0a:	af00      	add	r7, sp, #0
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    3f0c:	2100      	movs	r1, #0
    3f0e:	2000      	movs	r0, #0
    3f10:	4b02      	ldr	r3, [pc, #8]	; (3f1c <disable_motor+0x14>)
    3f12:	4798      	blx	r3
 }
    3f14:	46c0      	nop			; (mov r8, r8)
    3f16:	46bd      	mov	sp, r7
    3f18:	bd80      	pop	{r7, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	00003db9 	.word	0x00003db9

00003f20 <drive_motor>:

 void drive_motor(float command)
 {
    3f20:	b590      	push	{r4, r7, lr}
    3f22:	b085      	sub	sp, #20
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
	uint16_t dac_out = command * 1023;
    3f28:	4b0c      	ldr	r3, [pc, #48]	; (3f5c <drive_motor+0x3c>)
    3f2a:	490d      	ldr	r1, [pc, #52]	; (3f60 <drive_motor+0x40>)
    3f2c:	6878      	ldr	r0, [r7, #4]
    3f2e:	4798      	blx	r3
    3f30:	1c03      	adds	r3, r0, #0
    3f32:	1c1a      	adds	r2, r3, #0
    3f34:	230e      	movs	r3, #14
    3f36:	18fc      	adds	r4, r7, r3
    3f38:	4b0a      	ldr	r3, [pc, #40]	; (3f64 <drive_motor+0x44>)
    3f3a:	1c10      	adds	r0, r2, #0
    3f3c:	4798      	blx	r3
    3f3e:	0003      	movs	r3, r0
    3f40:	8023      	strh	r3, [r4, #0]
	dac_chan_write(&module, DAC_CHANNEL_0, dac_out);
    3f42:	230e      	movs	r3, #14
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	881a      	ldrh	r2, [r3, #0]
    3f48:	4b07      	ldr	r3, [pc, #28]	; (3f68 <drive_motor+0x48>)
    3f4a:	2100      	movs	r1, #0
    3f4c:	0018      	movs	r0, r3
    3f4e:	4b07      	ldr	r3, [pc, #28]	; (3f6c <drive_motor+0x4c>)
    3f50:	4798      	blx	r3
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	46bd      	mov	sp, r7
    3f56:	b005      	add	sp, #20
    3f58:	bd90      	pop	{r4, r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	0000ad01 	.word	0x0000ad01
    3f60:	447fc000 	.word	0x447fc000
    3f64:	0000a44d 	.word	0x0000a44d
    3f68:	2000517c 	.word	0x2000517c
    3f6c:	00000fc1 	.word	0x00000fc1

00003f70 <system_interrupt_enable>:
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	0002      	movs	r2, r0
    3f78:	1dfb      	adds	r3, r7, #7
    3f7a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3f7c:	4b06      	ldr	r3, [pc, #24]	; (3f98 <system_interrupt_enable+0x28>)
    3f7e:	1dfa      	adds	r2, r7, #7
    3f80:	7812      	ldrb	r2, [r2, #0]
    3f82:	0011      	movs	r1, r2
    3f84:	221f      	movs	r2, #31
    3f86:	400a      	ands	r2, r1
    3f88:	2101      	movs	r1, #1
    3f8a:	4091      	lsls	r1, r2
    3f8c:	000a      	movs	r2, r1
    3f8e:	601a      	str	r2, [r3, #0]
}
    3f90:	46c0      	nop			; (mov r8, r8)
    3f92:	46bd      	mov	sp, r7
    3f94:	b002      	add	sp, #8
    3f96:	bd80      	pop	{r7, pc}
    3f98:	e000e100 	.word	0xe000e100

00003f9c <spi_is_syncing>:
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b084      	sub	sp, #16
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	69db      	ldr	r3, [r3, #28]
    3fae:	1e5a      	subs	r2, r3, #1
    3fb0:	4193      	sbcs	r3, r2
    3fb2:	b2db      	uxtb	r3, r3
}
    3fb4:	0018      	movs	r0, r3
    3fb6:	46bd      	mov	sp, r7
    3fb8:	b004      	add	sp, #16
    3fba:	bd80      	pop	{r7, pc}

00003fbc <spi_get_config_defaults>:
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	2201      	movs	r2, #1
    3fc8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	2200      	movs	r2, #0
    3fce:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	2200      	movs	r2, #0
    3fd4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	22c0      	movs	r2, #192	; 0xc0
    3fda:	0392      	lsls	r2, r2, #14
    3fdc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	2200      	movs	r2, #0
    3fe2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	2200      	movs	r2, #0
    3fe8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	2201      	movs	r2, #1
    3fee:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	2201      	movs	r2, #1
    3ff4:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	2200      	movs	r2, #0
    3ffa:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	2224      	movs	r2, #36	; 0x24
    4000:	2100      	movs	r1, #0
    4002:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	3318      	adds	r3, #24
    4008:	220c      	movs	r2, #12
    400a:	2100      	movs	r1, #0
    400c:	0018      	movs	r0, r3
    400e:	4b0a      	ldr	r3, [pc, #40]	; (4038 <spi_get_config_defaults+0x7c>)
    4010:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	4a09      	ldr	r2, [pc, #36]	; (403c <spi_get_config_defaults+0x80>)
    4016:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	2200      	movs	r2, #0
    401c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	2200      	movs	r2, #0
    4022:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4024:	687b      	ldr	r3, [r7, #4]
    4026:	2200      	movs	r2, #0
    4028:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	2200      	movs	r2, #0
    402e:	635a      	str	r2, [r3, #52]	; 0x34
};
    4030:	46c0      	nop			; (mov r8, r8)
    4032:	46bd      	mov	sp, r7
    4034:	b002      	add	sp, #8
    4036:	bd80      	pop	{r7, pc}
    4038:	0000d0cf 	.word	0x0000d0cf
    403c:	000186a0 	.word	0x000186a0

00004040 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    4040:	b580      	push	{r7, lr}
    4042:	b084      	sub	sp, #16
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4048:	687b      	ldr	r3, [r7, #4]
    404a:	681b      	ldr	r3, [r3, #0]
    404c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	0018      	movs	r0, r3
    4054:	4b0b      	ldr	r3, [pc, #44]	; (4084 <spi_enable+0x44>)
    4056:	4798      	blx	r3
    4058:	0003      	movs	r3, r0
    405a:	0018      	movs	r0, r3
    405c:	4b0a      	ldr	r3, [pc, #40]	; (4088 <spi_enable+0x48>)
    405e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4060:	46c0      	nop			; (mov r8, r8)
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	0018      	movs	r0, r3
    4066:	4b09      	ldr	r3, [pc, #36]	; (408c <spi_enable+0x4c>)
    4068:	4798      	blx	r3
    406a:	1e03      	subs	r3, r0, #0
    406c:	d1f9      	bne.n	4062 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	681b      	ldr	r3, [r3, #0]
    4072:	2202      	movs	r2, #2
    4074:	431a      	orrs	r2, r3
    4076:	68fb      	ldr	r3, [r7, #12]
    4078:	601a      	str	r2, [r3, #0]
}
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	46bd      	mov	sp, r7
    407e:	b004      	add	sp, #16
    4080:	bd80      	pop	{r7, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	00008809 	.word	0x00008809
    4088:	00003f71 	.word	0x00003f71
    408c:	00003f9d 	.word	0x00003f9d

00004090 <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
    4090:	b580      	push	{r7, lr}
    4092:	b082      	sub	sp, #8
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
    4098:	000a      	movs	r2, r1
    409a:	1cfb      	adds	r3, r7, #3
    409c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	2237      	movs	r2, #55	; 0x37
    40a2:	5c9b      	ldrb	r3, [r3, r2]
    40a4:	b25a      	sxtb	r2, r3
    40a6:	1cfb      	adds	r3, r7, #3
    40a8:	781b      	ldrb	r3, [r3, #0]
    40aa:	2101      	movs	r1, #1
    40ac:	4099      	lsls	r1, r3
    40ae:	000b      	movs	r3, r1
    40b0:	b25b      	sxtb	r3, r3
    40b2:	4313      	orrs	r3, r2
    40b4:	b25b      	sxtb	r3, r3
    40b6:	b2d9      	uxtb	r1, r3
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	2237      	movs	r2, #55	; 0x37
    40bc:	5499      	strb	r1, [r3, r2]
}
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	46bd      	mov	sp, r7
    40c2:	b002      	add	sp, #8
    40c4:	bd80      	pop	{r7, pc}
	...

000040c8 <callback_spi_master>:
 static volatile uint8_t rx_buffer[MAX_BUFFER_SIZE];

 static volatile spi_transaction_t current_transaction;

 static void callback_spi_master( struct spi_module *const module)
 {
    40c8:	b580      	push	{r7, lr}
    40ca:	b082      	sub	sp, #8
    40cc:	af00      	add	r7, sp, #0
    40ce:	6078      	str	r0, [r7, #4]
	 spi_select_slave(module, &current_transaction.slave_device, false);
    40d0:	4908      	ldr	r1, [pc, #32]	; (40f4 <callback_spi_master+0x2c>)
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	2200      	movs	r2, #0
    40d6:	0018      	movs	r0, r3
    40d8:	4b07      	ldr	r3, [pc, #28]	; (40f8 <callback_spi_master+0x30>)
    40da:	4798      	blx	r3
	 // callback
	 current_transaction.cb(rx_buffer, current_transaction.buffer_length);
    40dc:	4b05      	ldr	r3, [pc, #20]	; (40f4 <callback_spi_master+0x2c>)
    40de:	68da      	ldr	r2, [r3, #12]
    40e0:	4b04      	ldr	r3, [pc, #16]	; (40f4 <callback_spi_master+0x2c>)
    40e2:	6899      	ldr	r1, [r3, #8]
    40e4:	4b05      	ldr	r3, [pc, #20]	; (40fc <callback_spi_master+0x34>)
    40e6:	0018      	movs	r0, r3
    40e8:	4790      	blx	r2
 }
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	46bd      	mov	sp, r7
    40ee:	b002      	add	sp, #8
    40f0:	bd80      	pop	{r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	2000525c 	.word	0x2000525c
    40f8:	00007e01 	.word	0x00007e01
    40fc:	2000521c 	.word	0x2000521c

00004100 <spi_interface_init>:

 void spi_interface_init(void)
 {
    4100:	b580      	push	{r7, lr}
    4102:	b08e      	sub	sp, #56	; 0x38
    4104:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    4106:	003b      	movs	r3, r7
    4108:	0018      	movs	r0, r3
    410a:	4b1b      	ldr	r3, [pc, #108]	; (4178 <spi_interface_init+0x78>)
    410c:	4798      	blx	r3
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_C; // MOSI [0], SCK [1], MISO [2]
    410e:	003b      	movs	r3, r7
    4110:	2280      	movs	r2, #128	; 0x80
    4112:	0392      	lsls	r2, r2, #14
    4114:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = FRAM_MOSI_PINMUX;
    4116:	003b      	movs	r3, r7
    4118:	2280      	movs	r2, #128	; 0x80
    411a:	0052      	lsls	r2, r2, #1
    411c:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = FRAM_SCK_PINMUX;
    411e:	003b      	movs	r3, r7
    4120:	2280      	movs	r2, #128	; 0x80
    4122:	0092      	lsls	r2, r2, #2
    4124:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = FRAM_MISO_PINMUX;
    4126:	003b      	movs	r3, r7
    4128:	2280      	movs	r2, #128	; 0x80
    412a:	00d2      	lsls	r2, r2, #3
    412c:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
    412e:	003b      	movs	r3, r7
    4130:	2201      	movs	r2, #1
    4132:	4252      	negs	r2, r2
    4134:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.generator_source = GCLK_GENERATOR_0; // 48MHz
    4136:	003b      	movs	r3, r7
    4138:	2224      	movs	r2, #36	; 0x24
    413a:	2100      	movs	r1, #0
    413c:	5499      	strb	r1, [r3, r2]
	config_spi_master.mode_specific.master.baudrate = 100000; // 6MHz, FRAM can handle 20 MHz
    413e:	003b      	movs	r3, r7
    4140:	4a0e      	ldr	r2, [pc, #56]	; (417c <spi_interface_init+0x7c>)
    4142:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, SPI_SERCOM, &config_spi_master);
    4144:	003a      	movs	r2, r7
    4146:	490e      	ldr	r1, [pc, #56]	; (4180 <spi_interface_init+0x80>)
    4148:	4b0e      	ldr	r3, [pc, #56]	; (4184 <spi_interface_init+0x84>)
    414a:	0018      	movs	r0, r3
    414c:	4b0e      	ldr	r3, [pc, #56]	; (4188 <spi_interface_init+0x88>)
    414e:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    4150:	4b0c      	ldr	r3, [pc, #48]	; (4184 <spi_interface_init+0x84>)
    4152:	0018      	movs	r0, r3
    4154:	4b0d      	ldr	r3, [pc, #52]	; (418c <spi_interface_init+0x8c>)
    4156:	4798      	blx	r3

	// Set up callbacks
	spi_register_callback(&spi_master_instance, callback_spi_master,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    4158:	490d      	ldr	r1, [pc, #52]	; (4190 <spi_interface_init+0x90>)
    415a:	4b0a      	ldr	r3, [pc, #40]	; (4184 <spi_interface_init+0x84>)
    415c:	2202      	movs	r2, #2
    415e:	0018      	movs	r0, r3
    4160:	4b0c      	ldr	r3, [pc, #48]	; (4194 <spi_interface_init+0x94>)
    4162:	4798      	blx	r3
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <spi_interface_init+0x84>)
    4166:	2102      	movs	r1, #2
    4168:	0018      	movs	r0, r3
    416a:	4b0b      	ldr	r3, [pc, #44]	; (4198 <spi_interface_init+0x98>)
    416c:	4798      	blx	r3

	// Note: first spi seems to fail...
	//spi_write(&spi_master_instance, 0);
 }
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	46bd      	mov	sp, r7
    4172:	b00e      	add	sp, #56	; 0x38
    4174:	bd80      	pop	{r7, pc}
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	00003fbd 	.word	0x00003fbd
    417c:	000186a0 	.word	0x000186a0
    4180:	42000800 	.word	0x42000800
    4184:	200051a0 	.word	0x200051a0
    4188:	00007c5d 	.word	0x00007c5d
    418c:	00004041 	.word	0x00004041
    4190:	000040c9 	.word	0x000040c9
    4194:	00007f55 	.word	0x00007f55
    4198:	00004091 	.word	0x00004091

0000419c <spi_transact>:

 bool spi_transact(spi_transaction_t transaction)
 {
    419c:	b590      	push	{r4, r7, lr}
    419e:	b085      	sub	sp, #20
    41a0:	af00      	add	r7, sp, #0
    41a2:	003c      	movs	r4, r7
    41a4:	6020      	str	r0, [r4, #0]
    41a6:	6061      	str	r1, [r4, #4]
    41a8:	60a2      	str	r2, [r4, #8]
    41aa:	60e3      	str	r3, [r4, #12]
	if(current_transaction.buffer_length > MAX_BUFFER_SIZE )
    41ac:	4b13      	ldr	r3, [pc, #76]	; (41fc <spi_transact+0x60>)
    41ae:	689b      	ldr	r3, [r3, #8]
    41b0:	2b40      	cmp	r3, #64	; 0x40
    41b2:	d901      	bls.n	41b8 <spi_transact+0x1c>
	{
		return false;
    41b4:	2300      	movs	r3, #0
    41b6:	e01c      	b.n	41f2 <spi_transact+0x56>
	}

	current_transaction = transaction;
    41b8:	4b10      	ldr	r3, [pc, #64]	; (41fc <spi_transact+0x60>)
    41ba:	003a      	movs	r2, r7
    41bc:	ca13      	ldmia	r2!, {r0, r1, r4}
    41be:	c313      	stmia	r3!, {r0, r1, r4}
    41c0:	6812      	ldr	r2, [r2, #0]
    41c2:	601a      	str	r2, [r3, #0]
	memcpy(tx_buffer, current_transaction.tx_buff, current_transaction.buffer_length);
    41c4:	4b0d      	ldr	r3, [pc, #52]	; (41fc <spi_transact+0x60>)
    41c6:	6859      	ldr	r1, [r3, #4]
    41c8:	4b0c      	ldr	r3, [pc, #48]	; (41fc <spi_transact+0x60>)
    41ca:	689a      	ldr	r2, [r3, #8]
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <spi_transact+0x64>)
    41ce:	0018      	movs	r0, r3
    41d0:	4b0c      	ldr	r3, [pc, #48]	; (4204 <spi_transact+0x68>)
    41d2:	4798      	blx	r3

	spi_select_slave(&spi_master_instance, &current_transaction.slave_device, true);
    41d4:	4909      	ldr	r1, [pc, #36]	; (41fc <spi_transact+0x60>)
    41d6:	4b0c      	ldr	r3, [pc, #48]	; (4208 <spi_transact+0x6c>)
    41d8:	2201      	movs	r2, #1
    41da:	0018      	movs	r0, r3
    41dc:	4b0b      	ldr	r3, [pc, #44]	; (420c <spi_transact+0x70>)
    41de:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_instance, tx_buffer, rx_buffer, current_transaction.buffer_length);
    41e0:	4b06      	ldr	r3, [pc, #24]	; (41fc <spi_transact+0x60>)
    41e2:	689b      	ldr	r3, [r3, #8]
    41e4:	b29b      	uxth	r3, r3
    41e6:	4a0a      	ldr	r2, [pc, #40]	; (4210 <spi_transact+0x74>)
    41e8:	4905      	ldr	r1, [pc, #20]	; (4200 <spi_transact+0x64>)
    41ea:	4807      	ldr	r0, [pc, #28]	; (4208 <spi_transact+0x6c>)
    41ec:	4c09      	ldr	r4, [pc, #36]	; (4214 <spi_transact+0x78>)
    41ee:	47a0      	blx	r4
	return true;
    41f0:	2301      	movs	r3, #1
    41f2:	0018      	movs	r0, r3
    41f4:	46bd      	mov	sp, r7
    41f6:	b005      	add	sp, #20
    41f8:	bd90      	pop	{r4, r7, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	2000525c 	.word	0x2000525c
    4200:	200051dc 	.word	0x200051dc
    4204:	0000d0bd 	.word	0x0000d0bd
    4208:	200051a0 	.word	0x200051a0
    420c:	00007e01 	.word	0x00007e01
    4210:	2000521c 	.word	0x2000521c
    4214:	00007f9d 	.word	0x00007f9d

00004218 <arch_ioport_pin_to_port_id>:
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	095b      	lsrs	r3, r3, #5
}
    4224:	0018      	movs	r0, r3
    4226:	46bd      	mov	sp, r7
    4228:	b002      	add	sp, #8
    422a:	bd80      	pop	{r7, pc}

0000422c <arch_ioport_port_to_base>:
{
    422c:	b580      	push	{r7, lr}
    422e:	b082      	sub	sp, #8
    4230:	af00      	add	r7, sp, #0
    4232:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	01db      	lsls	r3, r3, #7
    4238:	4a03      	ldr	r2, [pc, #12]	; (4248 <arch_ioport_port_to_base+0x1c>)
    423a:	4694      	mov	ip, r2
    423c:	4463      	add	r3, ip
}
    423e:	0018      	movs	r0, r3
    4240:	46bd      	mov	sp, r7
    4242:	b002      	add	sp, #8
    4244:	bd80      	pop	{r7, pc}
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	41004400 	.word	0x41004400

0000424c <arch_ioport_pin_to_base>:
{
    424c:	b580      	push	{r7, lr}
    424e:	b082      	sub	sp, #8
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	0018      	movs	r0, r3
    4258:	4b05      	ldr	r3, [pc, #20]	; (4270 <arch_ioport_pin_to_base+0x24>)
    425a:	4798      	blx	r3
    425c:	0003      	movs	r3, r0
    425e:	0018      	movs	r0, r3
    4260:	4b04      	ldr	r3, [pc, #16]	; (4274 <arch_ioport_pin_to_base+0x28>)
    4262:	4798      	blx	r3
    4264:	0003      	movs	r3, r0
}
    4266:	0018      	movs	r0, r3
    4268:	46bd      	mov	sp, r7
    426a:	b002      	add	sp, #8
    426c:	bd80      	pop	{r7, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	00004219 	.word	0x00004219
    4274:	0000422d 	.word	0x0000422d

00004278 <arch_ioport_pin_to_mask>:
{
    4278:	b580      	push	{r7, lr}
    427a:	b082      	sub	sp, #8
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	221f      	movs	r2, #31
    4284:	4013      	ands	r3, r2
    4286:	2201      	movs	r2, #1
    4288:	409a      	lsls	r2, r3
    428a:	0013      	movs	r3, r2
}
    428c:	0018      	movs	r0, r3
    428e:	46bd      	mov	sp, r7
    4290:	b002      	add	sp, #8
    4292:	bd80      	pop	{r7, pc}

00004294 <arch_ioport_set_pin_level>:
{
    4294:	b590      	push	{r4, r7, lr}
    4296:	b083      	sub	sp, #12
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
    429c:	000a      	movs	r2, r1
    429e:	1cfb      	adds	r3, r7, #3
    42a0:	701a      	strb	r2, [r3, #0]
	if (level) {
    42a2:	1cfb      	adds	r3, r7, #3
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d00b      	beq.n	42c2 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	0018      	movs	r0, r3
    42ae:	4b0c      	ldr	r3, [pc, #48]	; (42e0 <arch_ioport_set_pin_level+0x4c>)
    42b0:	4798      	blx	r3
    42b2:	0004      	movs	r4, r0
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	0018      	movs	r0, r3
    42b8:	4b0a      	ldr	r3, [pc, #40]	; (42e4 <arch_ioport_set_pin_level+0x50>)
    42ba:	4798      	blx	r3
    42bc:	0003      	movs	r3, r0
    42be:	61a3      	str	r3, [r4, #24]
}
    42c0:	e00a      	b.n	42d8 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    42c2:	687b      	ldr	r3, [r7, #4]
    42c4:	0018      	movs	r0, r3
    42c6:	4b06      	ldr	r3, [pc, #24]	; (42e0 <arch_ioport_set_pin_level+0x4c>)
    42c8:	4798      	blx	r3
    42ca:	0004      	movs	r4, r0
    42cc:	687b      	ldr	r3, [r7, #4]
    42ce:	0018      	movs	r0, r3
    42d0:	4b04      	ldr	r3, [pc, #16]	; (42e4 <arch_ioport_set_pin_level+0x50>)
    42d2:	4798      	blx	r3
    42d4:	0003      	movs	r3, r0
    42d6:	6163      	str	r3, [r4, #20]
}
    42d8:	46c0      	nop			; (mov r8, r8)
    42da:	46bd      	mov	sp, r7
    42dc:	b003      	add	sp, #12
    42de:	bd90      	pop	{r4, r7, pc}
    42e0:	0000424d 	.word	0x0000424d
    42e4:	00004279 	.word	0x00004279

000042e8 <arch_ioport_get_pin_level>:
{
    42e8:	b590      	push	{r4, r7, lr}
    42ea:	b083      	sub	sp, #12
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	0018      	movs	r0, r3
    42f4:	4b08      	ldr	r3, [pc, #32]	; (4318 <arch_ioport_get_pin_level+0x30>)
    42f6:	4798      	blx	r3
    42f8:	0003      	movs	r3, r0
    42fa:	6a1c      	ldr	r4, [r3, #32]
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	0018      	movs	r0, r3
    4300:	4b06      	ldr	r3, [pc, #24]	; (431c <arch_ioport_get_pin_level+0x34>)
    4302:	4798      	blx	r3
    4304:	0003      	movs	r3, r0
    4306:	4023      	ands	r3, r4
    4308:	1e5a      	subs	r2, r3, #1
    430a:	4193      	sbcs	r3, r2
    430c:	b2db      	uxtb	r3, r3
}
    430e:	0018      	movs	r0, r3
    4310:	46bd      	mov	sp, r7
    4312:	b003      	add	sp, #12
    4314:	bd90      	pop	{r4, r7, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	0000424d 	.word	0x0000424d
    431c:	00004279 	.word	0x00004279

00004320 <ioport_set_pin_level>:
{
    4320:	b580      	push	{r7, lr}
    4322:	b082      	sub	sp, #8
    4324:	af00      	add	r7, sp, #0
    4326:	6078      	str	r0, [r7, #4]
    4328:	000a      	movs	r2, r1
    432a:	1cfb      	adds	r3, r7, #3
    432c:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    432e:	1cfb      	adds	r3, r7, #3
    4330:	781a      	ldrb	r2, [r3, #0]
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	0011      	movs	r1, r2
    4336:	0018      	movs	r0, r3
    4338:	4b02      	ldr	r3, [pc, #8]	; (4344 <ioport_set_pin_level+0x24>)
    433a:	4798      	blx	r3
}
    433c:	46c0      	nop			; (mov r8, r8)
    433e:	46bd      	mov	sp, r7
    4340:	b002      	add	sp, #8
    4342:	bd80      	pop	{r7, pc}
    4344:	00004295 	.word	0x00004295

00004348 <ioport_get_pin_level>:
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
    434e:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	0018      	movs	r0, r3
    4354:	4b03      	ldr	r3, [pc, #12]	; (4364 <ioport_get_pin_level+0x1c>)
    4356:	4798      	blx	r3
    4358:	0003      	movs	r3, r0
}
    435a:	0018      	movs	r0, r3
    435c:	46bd      	mov	sp, r7
    435e:	b002      	add	sp, #8
    4360:	bd80      	pop	{r7, pc}
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	000042e9 	.word	0x000042e9

00004368 <update_parameters_from_sensors>:
static lcv_control_t lcv_control;

static volatile bool settings_changed = true;

static void update_parameters_from_sensors(lcv_state_t * state, lcv_control_t * control)
{
    4368:	b580      	push	{r7, lr}
    436a:	b082      	sub	sp, #8
    436c:	af00      	add	r7, sp, #0
    436e:	6078      	str	r0, [r7, #4]
    4370:	6039      	str	r1, [r7, #0]
	adc_request_update();
    4372:	4b18      	ldr	r3, [pc, #96]	; (43d4 <update_parameters_from_sensors+0x6c>)
    4374:	4798      	blx	r3
	state->current_state.enable = system_is_enabled();
    4376:	4b18      	ldr	r3, [pc, #96]	; (43d8 <update_parameters_from_sensors+0x70>)
    4378:	4798      	blx	r3
    437a:	0003      	movs	r3, r0
    437c:	0019      	movs	r1, r3
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	2201      	movs	r2, #1
    4382:	4011      	ands	r1, r2
    4384:	0008      	movs	r0, r1
    4386:	7d1a      	ldrb	r2, [r3, #20]
    4388:	2101      	movs	r1, #1
    438a:	438a      	bics	r2, r1
    438c:	1c11      	adds	r1, r2, #0
    438e:	1c02      	adds	r2, r0, #0
    4390:	430a      	orrs	r2, r1
    4392:	751a      	strb	r2, [r3, #20]
	state->setting_state.enable = state->current_state.enable;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	7d1b      	ldrb	r3, [r3, #20]
    4398:	07db      	lsls	r3, r3, #31
    439a:	0fdb      	lsrs	r3, r3, #31
    439c:	b2da      	uxtb	r2, r3
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	2101      	movs	r1, #1
    43a2:	400a      	ands	r2, r1
    43a4:	0010      	movs	r0, r2
    43a6:	781a      	ldrb	r2, [r3, #0]
    43a8:	2101      	movs	r1, #1
    43aa:	438a      	bics	r2, r1
    43ac:	1c11      	adds	r1, r2, #0
    43ae:	1c02      	adds	r2, r0, #0
    43b0:	430a      	orrs	r2, r1
    43b2:	701a      	strb	r2, [r3, #0]

	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    43b4:	4b09      	ldr	r3, [pc, #36]	; (43dc <update_parameters_from_sensors+0x74>)
    43b6:	4798      	blx	r3
    43b8:	1c02      	adds	r2, r0, #0
    43ba:	4b09      	ldr	r3, [pc, #36]	; (43e0 <update_parameters_from_sensors+0x78>)
    43bc:	1c10      	adds	r0, r2, #0
    43be:	4798      	blx	r3
    43c0:	0002      	movs	r2, r0
    43c2:	683b      	ldr	r3, [r7, #0]
    43c4:	615a      	str	r2, [r3, #20]

	motor_status_monitor();
    43c6:	4b07      	ldr	r3, [pc, #28]	; (43e4 <update_parameters_from_sensors+0x7c>)
    43c8:	4798      	blx	r3
}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	46bd      	mov	sp, r7
    43ce:	b002      	add	sp, #8
    43d0:	bd80      	pop	{r7, pc}
    43d2:	46c0      	nop			; (mov r8, r8)
    43d4:	00002651 	.word	0x00002651
    43d8:	00004f69 	.word	0x00004f69
    43dc:	000027a5 	.word	0x000027a5
    43e0:	0000b279 	.word	0x0000b279
    43e4:	00003e89 	.word	0x00003e89

000043e8 <control_task>:

static void control_task(void * pvParameters)
{
    43e8:	b590      	push	{r4, r7, lr}
    43ea:	b08f      	sub	sp, #60	; 0x3c
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	// Set up FRAM and SPI
	fram_init();
    43f0:	4b4f      	ldr	r3, [pc, #316]	; (4530 <control_task+0x148>)
    43f2:	4798      	blx	r3

	// Set default TODO what should these be?
	lcv_state.setting_state.enable = 0;
    43f4:	4b4f      	ldr	r3, [pc, #316]	; (4534 <control_task+0x14c>)
    43f6:	781a      	ldrb	r2, [r3, #0]
    43f8:	2101      	movs	r1, #1
    43fa:	438a      	bics	r2, r1
    43fc:	701a      	strb	r2, [r3, #0]
	lcv_state.setting_state.ie_ratio_tenths = 30;
    43fe:	4b4d      	ldr	r3, [pc, #308]	; (4534 <control_task+0x14c>)
    4400:	221e      	movs	r2, #30
    4402:	705a      	strb	r2, [r3, #1]
	lcv_state.setting_state.peep_cm_h20 = 14;
    4404:	4b4b      	ldr	r3, [pc, #300]	; (4534 <control_task+0x14c>)
    4406:	220e      	movs	r2, #14
    4408:	609a      	str	r2, [r3, #8]
	lcv_state.setting_state.pip_cm_h20 = 30;
    440a:	4b4a      	ldr	r3, [pc, #296]	; (4534 <control_task+0x14c>)
    440c:	221e      	movs	r2, #30
    440e:	60da      	str	r2, [r3, #12]
	lcv_state.setting_state.breath_per_min = 20;
    4410:	4b48      	ldr	r3, [pc, #288]	; (4534 <control_task+0x14c>)
    4412:	2214      	movs	r2, #20
    4414:	611a      	str	r2, [r3, #16]

	// Load from FRAM asynchronously
	fram_load_parameters_asynch();
    4416:	4b48      	ldr	r3, [pc, #288]	; (4538 <control_task+0x150>)
    4418:	4798      	blx	r3
	vTaskDelay(pdMS_TO_TICKS(5));
    441a:	2005      	movs	r0, #5
    441c:	4b47      	ldr	r3, [pc, #284]	; (453c <control_task+0x154>)
    441e:	4798      	blx	r3

	// Assume nothing until feedback
	lcv_state.current_state = lcv_state.setting_state;
    4420:	4b44      	ldr	r3, [pc, #272]	; (4534 <control_task+0x14c>)
    4422:	4a44      	ldr	r2, [pc, #272]	; (4534 <control_task+0x14c>)
    4424:	3314      	adds	r3, #20
    4426:	ca13      	ldmia	r2!, {r0, r1, r4}
    4428:	c313      	stmia	r3!, {r0, r1, r4}
    442a:	ca03      	ldmia	r2!, {r0, r1}
    442c:	c303      	stmia	r3!, {r0, r1}

	// Set initial control settings
	lcv_control.peep_to_pip_rampup_ms = 200;
    442e:	4b44      	ldr	r3, [pc, #272]	; (4540 <control_task+0x158>)
    4430:	22c8      	movs	r2, #200	; 0xc8
    4432:	601a      	str	r2, [r3, #0]
	lcv_control.pip_to_peep_rampdown_ms = 200;
    4434:	4b42      	ldr	r3, [pc, #264]	; (4540 <control_task+0x158>)
    4436:	22c8      	movs	r2, #200	; 0xc8
    4438:	609a      	str	r2, [r3, #8]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    443a:	4a41      	ldr	r2, [pc, #260]	; (4540 <control_task+0x158>)
    443c:	4b3d      	ldr	r3, [pc, #244]	; (4534 <control_task+0x14c>)
    443e:	0011      	movs	r1, r2
    4440:	0018      	movs	r0, r3
    4442:	4b40      	ldr	r3, [pc, #256]	; (4544 <control_task+0x15c>)
    4444:	4798      	blx	r3

	const TickType_t xFrequency = pdMS_TO_TICKS(10);	// 100 Hz rate
    4446:	230a      	movs	r3, #10
    4448:	637b      	str	r3, [r7, #52]	; 0x34
	TickType_t xLastWakeTime = xTaskGetTickCount();
    444a:	4b3f      	ldr	r3, [pc, #252]	; (4548 <control_task+0x160>)
    444c:	4798      	blx	r3
    444e:	0003      	movs	r3, r0
    4450:	62fb      	str	r3, [r7, #44]	; 0x2c

	controller_param_t control_params;
	control_params.kf = 0.03;
    4452:	230c      	movs	r3, #12
    4454:	18fb      	adds	r3, r7, r3
    4456:	4a3d      	ldr	r2, [pc, #244]	; (454c <control_task+0x164>)
    4458:	601a      	str	r2, [r3, #0]
	control_params.kp = 0.0;
    445a:	230c      	movs	r3, #12
    445c:	18fb      	adds	r3, r7, r3
    445e:	2200      	movs	r2, #0
    4460:	605a      	str	r2, [r3, #4]
	control_params.kd = 0.0;
    4462:	230c      	movs	r3, #12
    4464:	18fb      	adds	r3, r7, r3
    4466:	2200      	movs	r2, #0
    4468:	60da      	str	r2, [r3, #12]
	control_params.ki = 0.0;
    446a:	230c      	movs	r3, #12
    446c:	18fb      	adds	r3, r7, r3
    446e:	2200      	movs	r2, #0
    4470:	609a      	str	r2, [r3, #8]
	control_params.integral_enable_error_range = 10.0;
    4472:	230c      	movs	r3, #12
    4474:	18fb      	adds	r3, r7, r3
    4476:	4a36      	ldr	r2, [pc, #216]	; (4550 <control_task+0x168>)
    4478:	615a      	str	r2, [r3, #20]
	control_params.interal_antiwindup = 0.3;
    447a:	230c      	movs	r3, #12
    447c:	18fb      	adds	r3, r7, r3
    447e:	4a35      	ldr	r2, [pc, #212]	; (4554 <control_task+0x16c>)
    4480:	611a      	str	r2, [r3, #16]
	control_params.max_output = 1.0;
    4482:	230c      	movs	r3, #12
    4484:	18fb      	adds	r3, r7, r3
    4486:	22fe      	movs	r2, #254	; 0xfe
    4488:	0592      	lsls	r2, r2, #22
    448a:	619a      	str	r2, [r3, #24]
	control_params.min_output = 0.0;
    448c:	230c      	movs	r3, #12
    448e:	18fb      	adds	r3, r7, r3
    4490:	2200      	movs	r2, #0
    4492:	61da      	str	r2, [r3, #28]

	init_motor_interface();
    4494:	4b30      	ldr	r3, [pc, #192]	; (4558 <control_task+0x170>)
    4496:	4798      	blx	r3

	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    4498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    449a:	232c      	movs	r3, #44	; 0x2c
    449c:	18fb      	adds	r3, r7, r3
    449e:	0011      	movs	r1, r2
    44a0:	0018      	movs	r0, r3
    44a2:	4b2e      	ldr	r3, [pc, #184]	; (455c <control_task+0x174>)
    44a4:	4798      	blx	r3

		// Ensure at least control is not locked be feeding here
		wdt_reset_count();
    44a6:	4b2e      	ldr	r3, [pc, #184]	; (4560 <control_task+0x178>)
    44a8:	4798      	blx	r3

		// Feed hardware watchdog
		ioport_set_pin_level(WATCHDOG_GPIO, !ioport_get_pin_level(WATCHDOG_GPIO));
    44aa:	2015      	movs	r0, #21
    44ac:	4b2d      	ldr	r3, [pc, #180]	; (4564 <control_task+0x17c>)
    44ae:	4798      	blx	r3
    44b0:	0003      	movs	r3, r0
    44b2:	1e5a      	subs	r2, r3, #1
    44b4:	4193      	sbcs	r3, r2
    44b6:	b2db      	uxtb	r3, r3
    44b8:	2201      	movs	r2, #1
    44ba:	4053      	eors	r3, r2
    44bc:	b2db      	uxtb	r3, r3
    44be:	1c1a      	adds	r2, r3, #0
    44c0:	2301      	movs	r3, #1
    44c2:	4013      	ands	r3, r2
    44c4:	b2db      	uxtb	r3, r3
    44c6:	0019      	movs	r1, r3
    44c8:	2015      	movs	r0, #21
    44ca:	4b27      	ldr	r3, [pc, #156]	; (4568 <control_task+0x180>)
    44cc:	4798      	blx	r3

		// Update sensor data if possible
		update_parameters_from_sensors(&lcv_state, &lcv_control);
    44ce:	4a1c      	ldr	r2, [pc, #112]	; (4540 <control_task+0x158>)
    44d0:	4b18      	ldr	r3, [pc, #96]	; (4534 <control_task+0x14c>)
    44d2:	0011      	movs	r1, r2
    44d4:	0018      	movs	r0, r3
    44d6:	4b25      	ldr	r3, [pc, #148]	; (456c <control_task+0x184>)
    44d8:	4798      	blx	r3

		// Save if changed 
		if(settings_changed)
    44da:	4b25      	ldr	r3, [pc, #148]	; (4570 <control_task+0x188>)
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	b2db      	uxtb	r3, r3
    44e0:	2b00      	cmp	r3, #0
    44e2:	d006      	beq.n	44f2 <control_task+0x10a>
		{
			fram_save_parameters_asynch(&lcv_state.setting_state);
    44e4:	4b13      	ldr	r3, [pc, #76]	; (4534 <control_task+0x14c>)
    44e6:	0018      	movs	r0, r3
    44e8:	4b22      	ldr	r3, [pc, #136]	; (4574 <control_task+0x18c>)
    44ea:	4798      	blx	r3
			settings_changed = false;
    44ec:	4b20      	ldr	r3, [pc, #128]	; (4570 <control_task+0x188>)
    44ee:	2200      	movs	r2, #0
    44f0:	701a      	strb	r2, [r3, #0]
		}

		float motor_output = run_controller(&lcv_state, &lcv_control, &control_params);
    44f2:	230c      	movs	r3, #12
    44f4:	18fa      	adds	r2, r7, r3
    44f6:	4912      	ldr	r1, [pc, #72]	; (4540 <control_task+0x158>)
    44f8:	4b0e      	ldr	r3, [pc, #56]	; (4534 <control_task+0x14c>)
    44fa:	0018      	movs	r0, r3
    44fc:	4b1e      	ldr	r3, [pc, #120]	; (4578 <control_task+0x190>)
    44fe:	4798      	blx	r3
    4500:	1c03      	adds	r3, r0, #0
    4502:	633b      	str	r3, [r7, #48]	; 0x30
		if(lcv_state.current_state.enable)
    4504:	4b0b      	ldr	r3, [pc, #44]	; (4534 <control_task+0x14c>)
    4506:	7d1b      	ldrb	r3, [r3, #20]
    4508:	2201      	movs	r2, #1
    450a:	4013      	ands	r3, r2
    450c:	b2db      	uxtb	r3, r3
    450e:	2b00      	cmp	r3, #0
    4510:	d006      	beq.n	4520 <control_task+0x138>
		{
			enable_motor();
    4512:	4b1a      	ldr	r3, [pc, #104]	; (457c <control_task+0x194>)
    4514:	4798      	blx	r3
			drive_motor(motor_output);
    4516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4518:	1c18      	adds	r0, r3, #0
    451a:	4b19      	ldr	r3, [pc, #100]	; (4580 <control_task+0x198>)
    451c:	4798      	blx	r3
    451e:	e7bb      	b.n	4498 <control_task+0xb0>
		}
		else
		{
			disable_motor();
    4520:	4b18      	ldr	r3, [pc, #96]	; (4584 <control_task+0x19c>)
    4522:	4798      	blx	r3
			drive_motor(0.0);
    4524:	2300      	movs	r3, #0
    4526:	1c18      	adds	r0, r3, #0
    4528:	4b15      	ldr	r3, [pc, #84]	; (4580 <control_task+0x198>)
    452a:	4798      	blx	r3
	{
    452c:	e7b4      	b.n	4498 <control_task+0xb0>
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000034b5 	.word	0x000034b5
    4534:	20005270 	.word	0x20005270
    4538:	000034f1 	.word	0x000034f1
    453c:	00006119 	.word	0x00006119
    4540:	20005298 	.word	0x20005298
    4544:	00002e95 	.word	0x00002e95
    4548:	00006611 	.word	0x00006611
    454c:	3cf5c28f 	.word	0x3cf5c28f
    4550:	41200000 	.word	0x41200000
    4554:	3e99999a 	.word	0x3e99999a
    4558:	00003e01 	.word	0x00003e01
    455c:	00006051 	.word	0x00006051
    4560:	000076ed 	.word	0x000076ed
    4564:	00004349 	.word	0x00004349
    4568:	00004321 	.word	0x00004321
    456c:	00004369 	.word	0x00004369
    4570:	2000011b 	.word	0x2000011b
    4574:	0000356d 	.word	0x0000356d
    4578:	00003095 	.word	0x00003095
    457c:	00003ef1 	.word	0x00003ef1
    4580:	00003f21 	.word	0x00003f21
    4584:	00003f09 	.word	0x00003f09

00004588 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    4588:	b590      	push	{r4, r7, lr}
    458a:	b085      	sub	sp, #20
    458c:	af02      	add	r7, sp, #8
    458e:	0002      	movs	r2, r0
    4590:	6039      	str	r1, [r7, #0]
    4592:	1dbb      	adds	r3, r7, #6
    4594:	801a      	strh	r2, [r3, #0]
	xTaskCreate(control_task, (const char * const) "CONTROL",
    4596:	1dbb      	adds	r3, r7, #6
    4598:	881a      	ldrh	r2, [r3, #0]
    459a:	4906      	ldr	r1, [pc, #24]	; (45b4 <create_control_task+0x2c>)
    459c:	4806      	ldr	r0, [pc, #24]	; (45b8 <create_control_task+0x30>)
    459e:	4b07      	ldr	r3, [pc, #28]	; (45bc <create_control_task+0x34>)
    45a0:	9301      	str	r3, [sp, #4]
    45a2:	683b      	ldr	r3, [r7, #0]
    45a4:	9300      	str	r3, [sp, #0]
    45a6:	2300      	movs	r3, #0
    45a8:	4c05      	ldr	r4, [pc, #20]	; (45c0 <create_control_task+0x38>)
    45aa:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
}
    45ac:	46c0      	nop			; (mov r8, r8)
    45ae:	46bd      	mov	sp, r7
    45b0:	b003      	add	sp, #12
    45b2:	bd90      	pop	{r4, r7, pc}
    45b4:	0000dba8 	.word	0x0000dba8
    45b8:	000043e9 	.word	0x000043e9
    45bc:	2000526c 	.word	0x2000526c
    45c0:	00005dbd 	.word	0x00005dbd

000045c4 <get_current_settings>:
*	\brief Gets the current settings
*
*	\return The current settings
*/
lcv_parameters_t get_current_settings(void)
{
    45c4:	b590      	push	{r4, r7, lr}
    45c6:	b083      	sub	sp, #12
    45c8:	af00      	add	r7, sp, #0
    45ca:	6078      	str	r0, [r7, #4]
	return lcv_state.setting_state;
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	4a04      	ldr	r2, [pc, #16]	; (45e0 <get_current_settings+0x1c>)
    45d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    45d2:	c313      	stmia	r3!, {r0, r1, r4}
    45d4:	ca03      	ldmia	r2!, {r0, r1}
    45d6:	c303      	stmia	r3!, {r0, r1}
}
    45d8:	6878      	ldr	r0, [r7, #4]
    45da:	46bd      	mov	sp, r7
    45dc:	b003      	add	sp, #12
    45de:	bd90      	pop	{r4, r7, pc}
    45e0:	20005270 	.word	0x20005270

000045e4 <update_settings>:
*	\brief Updates the current settings
*
*	\param new_settings Pointer to the new settings
*/
void update_settings(lcv_parameters_t * new_settings)
{
    45e4:	b590      	push	{r4, r7, lr}
    45e6:	b083      	sub	sp, #12
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
	// NOTE: may be called from ISR
	lcv_state.setting_state = *new_settings;
    45ec:	4b09      	ldr	r3, [pc, #36]	; (4614 <update_settings+0x30>)
    45ee:	687a      	ldr	r2, [r7, #4]
    45f0:	ca13      	ldmia	r2!, {r0, r1, r4}
    45f2:	c313      	stmia	r3!, {r0, r1, r4}
    45f4:	ca03      	ldmia	r2!, {r0, r1}
    45f6:	c303      	stmia	r3!, {r0, r1}

	settings_changed = true;
    45f8:	4b07      	ldr	r3, [pc, #28]	; (4618 <update_settings+0x34>)
    45fa:	2201      	movs	r2, #1
    45fc:	701a      	strb	r2, [r3, #0]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    45fe:	4a07      	ldr	r2, [pc, #28]	; (461c <update_settings+0x38>)
    4600:	4b04      	ldr	r3, [pc, #16]	; (4614 <update_settings+0x30>)
    4602:	0011      	movs	r1, r2
    4604:	0018      	movs	r0, r3
    4606:	4b06      	ldr	r3, [pc, #24]	; (4620 <update_settings+0x3c>)
    4608:	4798      	blx	r3
    460a:	46c0      	nop			; (mov r8, r8)
    460c:	46bd      	mov	sp, r7
    460e:	b003      	add	sp, #12
    4610:	bd90      	pop	{r4, r7, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	20005270 	.word	0x20005270
    4618:	2000011b 	.word	0x2000011b
    461c:	20005298 	.word	0x20005298
    4620:	00002e95 	.word	0x00002e95

00004624 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	0002      	movs	r2, r0
    462c:	1dfb      	adds	r3, r7, #7
    462e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    4630:	4b06      	ldr	r3, [pc, #24]	; (464c <NVIC_EnableIRQ+0x28>)
    4632:	1dfa      	adds	r2, r7, #7
    4634:	7812      	ldrb	r2, [r2, #0]
    4636:	0011      	movs	r1, r2
    4638:	221f      	movs	r2, #31
    463a:	400a      	ands	r2, r1
    463c:	2101      	movs	r1, #1
    463e:	4091      	lsls	r1, r2
    4640:	000a      	movs	r2, r1
    4642:	601a      	str	r2, [r3, #0]
}
    4644:	46c0      	nop			; (mov r8, r8)
    4646:	46bd      	mov	sp, r7
    4648:	b002      	add	sp, #8
    464a:	bd80      	pop	{r7, pc}
    464c:	e000e100 	.word	0xe000e100

00004650 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
    4656:	0002      	movs	r2, r0
    4658:	1dfb      	adds	r3, r7, #7
    465a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    465c:	4a08      	ldr	r2, [pc, #32]	; (4680 <NVIC_ClearPendingIRQ+0x30>)
    465e:	1dfb      	adds	r3, r7, #7
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	0019      	movs	r1, r3
    4664:	231f      	movs	r3, #31
    4666:	400b      	ands	r3, r1
    4668:	2101      	movs	r1, #1
    466a:	4099      	lsls	r1, r3
    466c:	000b      	movs	r3, r1
    466e:	0019      	movs	r1, r3
    4670:	23c0      	movs	r3, #192	; 0xc0
    4672:	005b      	lsls	r3, r3, #1
    4674:	50d1      	str	r1, [r2, r3]
}
    4676:	46c0      	nop			; (mov r8, r8)
    4678:	46bd      	mov	sp, r7
    467a:	b002      	add	sp, #8
    467c:	bd80      	pop	{r7, pc}
    467e:	46c0      	nop			; (mov r8, r8)
    4680:	e000e100 	.word	0xe000e100

00004684 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    4684:	b5b0      	push	{r4, r5, r7, lr}
    4686:	b082      	sub	sp, #8
    4688:	af00      	add	r7, sp, #0
    468a:	0002      	movs	r2, r0
    468c:	6039      	str	r1, [r7, #0]
    468e:	1dfb      	adds	r3, r7, #7
    4690:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    4692:	1dfb      	adds	r3, r7, #7
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	2b7f      	cmp	r3, #127	; 0x7f
    4698:	d932      	bls.n	4700 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    469a:	4c2f      	ldr	r4, [pc, #188]	; (4758 <NVIC_SetPriority+0xd4>)
    469c:	1dfb      	adds	r3, r7, #7
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	001a      	movs	r2, r3
    46a2:	230f      	movs	r3, #15
    46a4:	4013      	ands	r3, r2
    46a6:	3b08      	subs	r3, #8
    46a8:	0899      	lsrs	r1, r3, #2
    46aa:	4a2b      	ldr	r2, [pc, #172]	; (4758 <NVIC_SetPriority+0xd4>)
    46ac:	1dfb      	adds	r3, r7, #7
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	0018      	movs	r0, r3
    46b2:	230f      	movs	r3, #15
    46b4:	4003      	ands	r3, r0
    46b6:	3b08      	subs	r3, #8
    46b8:	089b      	lsrs	r3, r3, #2
    46ba:	3306      	adds	r3, #6
    46bc:	009b      	lsls	r3, r3, #2
    46be:	18d3      	adds	r3, r2, r3
    46c0:	3304      	adds	r3, #4
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	1dfa      	adds	r2, r7, #7
    46c6:	7812      	ldrb	r2, [r2, #0]
    46c8:	0010      	movs	r0, r2
    46ca:	2203      	movs	r2, #3
    46cc:	4002      	ands	r2, r0
    46ce:	00d2      	lsls	r2, r2, #3
    46d0:	20ff      	movs	r0, #255	; 0xff
    46d2:	4090      	lsls	r0, r2
    46d4:	0002      	movs	r2, r0
    46d6:	43d2      	mvns	r2, r2
    46d8:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    46da:	683b      	ldr	r3, [r7, #0]
    46dc:	019b      	lsls	r3, r3, #6
    46de:	20ff      	movs	r0, #255	; 0xff
    46e0:	4018      	ands	r0, r3
    46e2:	1dfb      	adds	r3, r7, #7
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	001d      	movs	r5, r3
    46e8:	2303      	movs	r3, #3
    46ea:	402b      	ands	r3, r5
    46ec:	00db      	lsls	r3, r3, #3
    46ee:	4098      	lsls	r0, r3
    46f0:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    46f2:	431a      	orrs	r2, r3
    46f4:	1d8b      	adds	r3, r1, #6
    46f6:	009b      	lsls	r3, r3, #2
    46f8:	18e3      	adds	r3, r4, r3
    46fa:	3304      	adds	r3, #4
    46fc:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
    46fe:	e027      	b.n	4750 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4700:	4c16      	ldr	r4, [pc, #88]	; (475c <NVIC_SetPriority+0xd8>)
    4702:	1dfb      	adds	r3, r7, #7
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	b25b      	sxtb	r3, r3
    4708:	089b      	lsrs	r3, r3, #2
    470a:	4914      	ldr	r1, [pc, #80]	; (475c <NVIC_SetPriority+0xd8>)
    470c:	1dfa      	adds	r2, r7, #7
    470e:	7812      	ldrb	r2, [r2, #0]
    4710:	b252      	sxtb	r2, r2
    4712:	0892      	lsrs	r2, r2, #2
    4714:	32c0      	adds	r2, #192	; 0xc0
    4716:	0092      	lsls	r2, r2, #2
    4718:	5852      	ldr	r2, [r2, r1]
    471a:	1df9      	adds	r1, r7, #7
    471c:	7809      	ldrb	r1, [r1, #0]
    471e:	0008      	movs	r0, r1
    4720:	2103      	movs	r1, #3
    4722:	4001      	ands	r1, r0
    4724:	00c9      	lsls	r1, r1, #3
    4726:	20ff      	movs	r0, #255	; 0xff
    4728:	4088      	lsls	r0, r1
    472a:	0001      	movs	r1, r0
    472c:	43c9      	mvns	r1, r1
    472e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4730:	683a      	ldr	r2, [r7, #0]
    4732:	0192      	lsls	r2, r2, #6
    4734:	20ff      	movs	r0, #255	; 0xff
    4736:	4010      	ands	r0, r2
    4738:	1dfa      	adds	r2, r7, #7
    473a:	7812      	ldrb	r2, [r2, #0]
    473c:	0015      	movs	r5, r2
    473e:	2203      	movs	r2, #3
    4740:	402a      	ands	r2, r5
    4742:	00d2      	lsls	r2, r2, #3
    4744:	4090      	lsls	r0, r2
    4746:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4748:	430a      	orrs	r2, r1
    474a:	33c0      	adds	r3, #192	; 0xc0
    474c:	009b      	lsls	r3, r3, #2
    474e:	511a      	str	r2, [r3, r4]
}
    4750:	46c0      	nop			; (mov r8, r8)
    4752:	46bd      	mov	sp, r7
    4754:	b002      	add	sp, #8
    4756:	bdb0      	pop	{r4, r5, r7, pc}
    4758:	e000ed00 	.word	0xe000ed00
    475c:	e000e100 	.word	0xe000e100

00004760 <system_interrupt_enable>:
{
    4760:	b580      	push	{r7, lr}
    4762:	b082      	sub	sp, #8
    4764:	af00      	add	r7, sp, #0
    4766:	0002      	movs	r2, r0
    4768:	1dfb      	adds	r3, r7, #7
    476a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    476c:	4b06      	ldr	r3, [pc, #24]	; (4788 <system_interrupt_enable+0x28>)
    476e:	1dfa      	adds	r2, r7, #7
    4770:	7812      	ldrb	r2, [r2, #0]
    4772:	0011      	movs	r1, r2
    4774:	221f      	movs	r2, #31
    4776:	400a      	ands	r2, r1
    4778:	2101      	movs	r1, #1
    477a:	4091      	lsls	r1, r2
    477c:	000a      	movs	r2, r1
    477e:	601a      	str	r2, [r3, #0]
}
    4780:	46c0      	nop			; (mov r8, r8)
    4782:	46bd      	mov	sp, r7
    4784:	b002      	add	sp, #8
    4786:	bd80      	pop	{r7, pc}
    4788:	e000e100 	.word	0xe000e100

0000478c <arch_ioport_pin_to_port_id>:
{
    478c:	b580      	push	{r7, lr}
    478e:	b082      	sub	sp, #8
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	095b      	lsrs	r3, r3, #5
}
    4798:	0018      	movs	r0, r3
    479a:	46bd      	mov	sp, r7
    479c:	b002      	add	sp, #8
    479e:	bd80      	pop	{r7, pc}

000047a0 <arch_ioport_port_to_base>:
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b082      	sub	sp, #8
    47a4:	af00      	add	r7, sp, #0
    47a6:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	01db      	lsls	r3, r3, #7
    47ac:	4a03      	ldr	r2, [pc, #12]	; (47bc <arch_ioport_port_to_base+0x1c>)
    47ae:	4694      	mov	ip, r2
    47b0:	4463      	add	r3, ip
}
    47b2:	0018      	movs	r0, r3
    47b4:	46bd      	mov	sp, r7
    47b6:	b002      	add	sp, #8
    47b8:	bd80      	pop	{r7, pc}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	41004400 	.word	0x41004400

000047c0 <arch_ioport_pin_to_base>:
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b082      	sub	sp, #8
    47c4:	af00      	add	r7, sp, #0
    47c6:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	0018      	movs	r0, r3
    47cc:	4b05      	ldr	r3, [pc, #20]	; (47e4 <arch_ioport_pin_to_base+0x24>)
    47ce:	4798      	blx	r3
    47d0:	0003      	movs	r3, r0
    47d2:	0018      	movs	r0, r3
    47d4:	4b04      	ldr	r3, [pc, #16]	; (47e8 <arch_ioport_pin_to_base+0x28>)
    47d6:	4798      	blx	r3
    47d8:	0003      	movs	r3, r0
}
    47da:	0018      	movs	r0, r3
    47dc:	46bd      	mov	sp, r7
    47de:	b002      	add	sp, #8
    47e0:	bd80      	pop	{r7, pc}
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	0000478d 	.word	0x0000478d
    47e8:	000047a1 	.word	0x000047a1

000047ec <arch_ioport_pin_to_mask>:
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	221f      	movs	r2, #31
    47f8:	4013      	ands	r3, r2
    47fa:	2201      	movs	r2, #1
    47fc:	409a      	lsls	r2, r3
    47fe:	0013      	movs	r3, r2
}
    4800:	0018      	movs	r0, r3
    4802:	46bd      	mov	sp, r7
    4804:	b002      	add	sp, #8
    4806:	bd80      	pop	{r7, pc}

00004808 <arch_ioport_get_pin_level>:
{
    4808:	b590      	push	{r4, r7, lr}
    480a:	b083      	sub	sp, #12
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	0018      	movs	r0, r3
    4814:	4b08      	ldr	r3, [pc, #32]	; (4838 <arch_ioport_get_pin_level+0x30>)
    4816:	4798      	blx	r3
    4818:	0003      	movs	r3, r0
    481a:	6a1c      	ldr	r4, [r3, #32]
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	0018      	movs	r0, r3
    4820:	4b06      	ldr	r3, [pc, #24]	; (483c <arch_ioport_get_pin_level+0x34>)
    4822:	4798      	blx	r3
    4824:	0003      	movs	r3, r0
    4826:	4023      	ands	r3, r4
    4828:	1e5a      	subs	r2, r3, #1
    482a:	4193      	sbcs	r3, r2
    482c:	b2db      	uxtb	r3, r3
}
    482e:	0018      	movs	r0, r3
    4830:	46bd      	mov	sp, r7
    4832:	b003      	add	sp, #12
    4834:	bd90      	pop	{r4, r7, pc}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	000047c1 	.word	0x000047c1
    483c:	000047ed 	.word	0x000047ed

00004840 <ioport_get_pin_level>:
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	0018      	movs	r0, r3
    484c:	4b03      	ldr	r3, [pc, #12]	; (485c <ioport_get_pin_level+0x1c>)
    484e:	4798      	blx	r3
    4850:	0003      	movs	r3, r0
}
    4852:	0018      	movs	r0, r3
    4854:	46bd      	mov	sp, r7
    4856:	b002      	add	sp, #8
    4858:	bd80      	pop	{r7, pc}
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	00004809 	.word	0x00004809

00004860 <i2c_master_is_syncing>:
{
    4860:	b580      	push	{r7, lr}
    4862:	b084      	sub	sp, #16
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    486e:	68fb      	ldr	r3, [r7, #12]
    4870:	69db      	ldr	r3, [r3, #28]
    4872:	2207      	movs	r2, #7
    4874:	4013      	ands	r3, r2
    4876:	1e5a      	subs	r2, r3, #1
    4878:	4193      	sbcs	r3, r2
    487a:	b2db      	uxtb	r3, r3
}
    487c:	0018      	movs	r0, r3
    487e:	46bd      	mov	sp, r7
    4880:	b004      	add	sp, #16
    4882:	bd80      	pop	{r7, pc}

00004884 <_i2c_master_wait_for_sync>:
{
    4884:	b580      	push	{r7, lr}
    4886:	b082      	sub	sp, #8
    4888:	af00      	add	r7, sp, #0
    488a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    488c:	46c0      	nop			; (mov r8, r8)
    488e:	687b      	ldr	r3, [r7, #4]
    4890:	0018      	movs	r0, r3
    4892:	4b04      	ldr	r3, [pc, #16]	; (48a4 <_i2c_master_wait_for_sync+0x20>)
    4894:	4798      	blx	r3
    4896:	1e03      	subs	r3, r0, #0
    4898:	d1f9      	bne.n	488e <_i2c_master_wait_for_sync+0xa>
}
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	46bd      	mov	sp, r7
    489e:	b002      	add	sp, #8
    48a0:	bd80      	pop	{r7, pc}
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	00004861 	.word	0x00004861

000048a8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    48a8:	b580      	push	{r7, lr}
    48aa:	b082      	sub	sp, #8
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    48b0:	687b      	ldr	r3, [r7, #4]
    48b2:	2264      	movs	r2, #100	; 0x64
    48b4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    48b6:	687b      	ldr	r3, [r7, #4]
    48b8:	4a1b      	ldr	r2, [pc, #108]	; (4928 <i2c_master_get_config_defaults+0x80>)
    48ba:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	2200      	movs	r2, #0
    48c0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	2200      	movs	r2, #0
    48c6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	2200      	movs	r2, #0
    48cc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	2280      	movs	r2, #128	; 0x80
    48d2:	0392      	lsls	r2, r2, #14
    48d4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    48d6:	687b      	ldr	r3, [r7, #4]
    48d8:	2201      	movs	r2, #1
    48da:	4252      	negs	r2, r2
    48dc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	2201      	movs	r2, #1
    48e2:	4252      	negs	r2, r2
    48e4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	2200      	movs	r2, #0
    48ea:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	2200      	movs	r2, #0
    48f0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	2224      	movs	r2, #36	; 0x24
    48f6:	2100      	movs	r1, #0
    48f8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	2200      	movs	r2, #0
    48fe:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    4900:	687b      	ldr	r3, [r7, #4]
    4902:	222c      	movs	r2, #44	; 0x2c
    4904:	2100      	movs	r1, #0
    4906:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	222d      	movs	r2, #45	; 0x2d
    490c:	2100      	movs	r1, #0
    490e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	222e      	movs	r2, #46	; 0x2e
    4914:	2100      	movs	r1, #0
    4916:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	22d7      	movs	r2, #215	; 0xd7
    491c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    491e:	46c0      	nop			; (mov r8, r8)
    4920:	46bd      	mov	sp, r7
    4922:	b002      	add	sp, #8
    4924:	bd80      	pop	{r7, pc}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	00000d48 	.word	0x00000d48

0000492c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    492c:	b580      	push	{r7, lr}
    492e:	b084      	sub	sp, #16
    4930:	af00      	add	r7, sp, #0
    4932:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    493a:	2300      	movs	r3, #0
    493c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	0018      	movs	r0, r3
    4942:	4b14      	ldr	r3, [pc, #80]	; (4994 <i2c_master_enable+0x68>)
    4944:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4946:	68bb      	ldr	r3, [r7, #8]
    4948:	681b      	ldr	r3, [r3, #0]
    494a:	2202      	movs	r2, #2
    494c:	431a      	orrs	r2, r3
    494e:	68bb      	ldr	r3, [r7, #8]
    4950:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	681b      	ldr	r3, [r3, #0]
    4956:	0018      	movs	r0, r3
    4958:	4b0f      	ldr	r3, [pc, #60]	; (4998 <i2c_master_enable+0x6c>)
    495a:	4798      	blx	r3
    495c:	0003      	movs	r3, r0
    495e:	0018      	movs	r0, r3
    4960:	4b0e      	ldr	r3, [pc, #56]	; (499c <i2c_master_enable+0x70>)
    4962:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4964:	e00c      	b.n	4980 <i2c_master_enable+0x54>
		timeout_counter++;
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	3301      	adds	r3, #1
    496a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	88db      	ldrh	r3, [r3, #6]
    4970:	001a      	movs	r2, r3
    4972:	68fb      	ldr	r3, [r7, #12]
    4974:	429a      	cmp	r2, r3
    4976:	d803      	bhi.n	4980 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4978:	68bb      	ldr	r3, [r7, #8]
    497a:	2210      	movs	r2, #16
    497c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    497e:	e006      	b.n	498e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4980:	68bb      	ldr	r3, [r7, #8]
    4982:	8b5b      	ldrh	r3, [r3, #26]
    4984:	b29b      	uxth	r3, r3
    4986:	001a      	movs	r2, r3
    4988:	2310      	movs	r3, #16
    498a:	4013      	ands	r3, r2
    498c:	d0eb      	beq.n	4966 <i2c_master_enable+0x3a>
		}
	}
}
    498e:	46bd      	mov	sp, r7
    4990:	b004      	add	sp, #16
    4992:	bd80      	pop	{r7, pc}
    4994:	00004885 	.word	0x00004885
    4998:	00008809 	.word	0x00008809
    499c:	00004761 	.word	0x00004761

000049a0 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b082      	sub	sp, #8
    49a4:	af00      	add	r7, sp, #0
    49a6:	6078      	str	r0, [r7, #4]
    49a8:	000a      	movs	r2, r1
    49aa:	1cfb      	adds	r3, r7, #3
    49ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	7e5b      	ldrb	r3, [r3, #25]
    49b2:	b2db      	uxtb	r3, r3
    49b4:	b25a      	sxtb	r2, r3
    49b6:	1cfb      	adds	r3, r7, #3
    49b8:	781b      	ldrb	r3, [r3, #0]
    49ba:	2101      	movs	r1, #1
    49bc:	4099      	lsls	r1, r3
    49be:	000b      	movs	r3, r1
    49c0:	b25b      	sxtb	r3, r3
    49c2:	4313      	orrs	r3, r2
    49c4:	b25b      	sxtb	r3, r3
    49c6:	b2da      	uxtb	r2, r3
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	765a      	strb	r2, [r3, #25]
}
    49cc:	46c0      	nop			; (mov r8, r8)
    49ce:	46bd      	mov	sp, r7
    49d0:	b002      	add	sp, #8
    49d2:	bd80      	pop	{r7, pc}

000049d4 <i2c_master_get_job_status>:
 *                                      data, indicating that slave does not
 *                                      want more data and was not able to read
 */
static inline enum status_code i2c_master_get_job_status(
		struct i2c_master_module *const module)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b082      	sub	sp, #8
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	2225      	movs	r2, #37	; 0x25
    49e0:	5c9b      	ldrb	r3, [r3, r2]
    49e2:	b2db      	uxtb	r3, r3
}
    49e4:	0018      	movs	r0, r3
    49e6:	46bd      	mov	sp, r7
    49e8:	b002      	add	sp, #8
    49ea:	bd80      	pop	{r7, pc}

000049ec <handle_hmi_input>:
static const lcv_parameters_t upper_settings_range = {.enable = 0, .tidal_volume_ml = 2500,
.peep_cm_h20 = 20, .pip_cm_h20 = 35, .breath_per_min = 60, .ie_ratio_tenths=40};


static void handle_hmi_input(void)
{
    49ec:	b590      	push	{r4, r7, lr}
    49ee:	b083      	sub	sp, #12
    49f0:	af00      	add	r7, sp, #0
	static bool last_button_status = false;
	// Check for stage change
	bool new_button_status = get_pushbutton_level();
    49f2:	1dfc      	adds	r4, r7, #7
    49f4:	4b66      	ldr	r3, [pc, #408]	; (4b90 <handle_hmi_input+0x1a4>)
    49f6:	4798      	blx	r3
    49f8:	0003      	movs	r3, r0
    49fa:	7023      	strb	r3, [r4, #0]

	if(!last_button_status && new_button_status)
    49fc:	4b65      	ldr	r3, [pc, #404]	; (4b94 <handle_hmi_input+0x1a8>)
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2201      	movs	r2, #1
    4a02:	4053      	eors	r3, r2
    4a04:	b2db      	uxtb	r3, r3
    4a06:	2b00      	cmp	r3, #0
    4a08:	d028      	beq.n	4a5c <handle_hmi_input+0x70>
    4a0a:	1dfb      	adds	r3, r7, #7
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d024      	beq.n	4a5c <handle_hmi_input+0x70>
	{
		switch (stage)
    4a12:	4b61      	ldr	r3, [pc, #388]	; (4b98 <handle_hmi_input+0x1ac>)
    4a14:	781b      	ldrb	r3, [r3, #0]
    4a16:	2b04      	cmp	r3, #4
    4a18:	d81c      	bhi.n	4a54 <handle_hmi_input+0x68>
    4a1a:	009a      	lsls	r2, r3, #2
    4a1c:	4b5f      	ldr	r3, [pc, #380]	; (4b9c <handle_hmi_input+0x1b0>)
    4a1e:	18d3      	adds	r3, r2, r3
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	469f      	mov	pc, r3
		{
			case STAGE_NONE:
				stage = STAGE_BPM;
    4a24:	4b5c      	ldr	r3, [pc, #368]	; (4b98 <handle_hmi_input+0x1ac>)
    4a26:	2201      	movs	r2, #1
    4a28:	701a      	strb	r2, [r3, #0]
				break;
    4a2a:	e017      	b.n	4a5c <handle_hmi_input+0x70>

			case STAGE_BPM:
				stage = STAGE_PEEP;
    4a2c:	4b5a      	ldr	r3, [pc, #360]	; (4b98 <handle_hmi_input+0x1ac>)
    4a2e:	2202      	movs	r2, #2
    4a30:	701a      	strb	r2, [r3, #0]
				break;
    4a32:	e013      	b.n	4a5c <handle_hmi_input+0x70>

			case STAGE_PEEP:
				stage = STAGE_PIP;
    4a34:	4b58      	ldr	r3, [pc, #352]	; (4b98 <handle_hmi_input+0x1ac>)
    4a36:	2203      	movs	r2, #3
    4a38:	701a      	strb	r2, [r3, #0]
				break;
    4a3a:	e00f      	b.n	4a5c <handle_hmi_input+0x70>

			case STAGE_PIP:
				stage = STAGE_IE;
    4a3c:	4b56      	ldr	r3, [pc, #344]	; (4b98 <handle_hmi_input+0x1ac>)
    4a3e:	2204      	movs	r2, #4
    4a40:	701a      	strb	r2, [r3, #0]
				break;
    4a42:	e00b      	b.n	4a5c <handle_hmi_input+0x70>

			case STAGE_IE:
				// Save settings
				update_settings(&settings_input);
    4a44:	4b56      	ldr	r3, [pc, #344]	; (4ba0 <handle_hmi_input+0x1b4>)
    4a46:	0018      	movs	r0, r3
    4a48:	4b56      	ldr	r3, [pc, #344]	; (4ba4 <handle_hmi_input+0x1b8>)
    4a4a:	4798      	blx	r3
				stage = STAGE_NONE;
    4a4c:	4b52      	ldr	r3, [pc, #328]	; (4b98 <handle_hmi_input+0x1ac>)
    4a4e:	2200      	movs	r2, #0
    4a50:	701a      	strb	r2, [r3, #0]
				break;
    4a52:	e003      	b.n	4a5c <handle_hmi_input+0x70>
			
			default:
				stage = STAGE_NONE;
    4a54:	4b50      	ldr	r3, [pc, #320]	; (4b98 <handle_hmi_input+0x1ac>)
    4a56:	2200      	movs	r2, #0
    4a58:	701a      	strb	r2, [r3, #0]
				break;
    4a5a:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Handle the stage

	float knob_portion = get_input_potentiometer_portion();
    4a5c:	4b52      	ldr	r3, [pc, #328]	; (4ba8 <handle_hmi_input+0x1bc>)
    4a5e:	4798      	blx	r3
    4a60:	1c03      	adds	r3, r0, #0
    4a62:	603b      	str	r3, [r7, #0]

	switch (stage)
    4a64:	4b4c      	ldr	r3, [pc, #304]	; (4b98 <handle_hmi_input+0x1ac>)
    4a66:	781b      	ldrb	r3, [r3, #0]
    4a68:	2b04      	cmp	r3, #4
    4a6a:	d900      	bls.n	4a6e <handle_hmi_input+0x82>
    4a6c:	e083      	b.n	4b76 <handle_hmi_input+0x18a>
    4a6e:	009a      	lsls	r2, r3, #2
    4a70:	4b4e      	ldr	r3, [pc, #312]	; (4bac <handle_hmi_input+0x1c0>)
    4a72:	18d3      	adds	r3, r2, r3
    4a74:	681b      	ldr	r3, [r3, #0]
    4a76:	469f      	mov	pc, r3
	{
		case STAGE_NONE:
		break;

		case STAGE_BPM:
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    4a78:	2206      	movs	r2, #6
    4a7a:	4b4d      	ldr	r3, [pc, #308]	; (4bb0 <handle_hmi_input+0x1c4>)
    4a7c:	0010      	movs	r0, r2
    4a7e:	4798      	blx	r3
    4a80:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.breath_per_min - lower_settings_range.breath_per_min);
    4a82:	223c      	movs	r2, #60	; 0x3c
    4a84:	2306      	movs	r3, #6
    4a86:	1ad2      	subs	r2, r2, r3
    4a88:	4b49      	ldr	r3, [pc, #292]	; (4bb0 <handle_hmi_input+0x1c4>)
    4a8a:	0010      	movs	r0, r2
    4a8c:	4798      	blx	r3
    4a8e:	1c02      	adds	r2, r0, #0
    4a90:	4b48      	ldr	r3, [pc, #288]	; (4bb4 <handle_hmi_input+0x1c8>)
    4a92:	6839      	ldr	r1, [r7, #0]
    4a94:	1c10      	adds	r0, r2, #0
    4a96:	4798      	blx	r3
    4a98:	1c03      	adds	r3, r0, #0
    4a9a:	1c1a      	adds	r2, r3, #0
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    4a9c:	4b46      	ldr	r3, [pc, #280]	; (4bb8 <handle_hmi_input+0x1cc>)
    4a9e:	1c11      	adds	r1, r2, #0
    4aa0:	1c20      	adds	r0, r4, #0
    4aa2:	4798      	blx	r3
    4aa4:	1c03      	adds	r3, r0, #0
    4aa6:	1c1a      	adds	r2, r3, #0
    4aa8:	4b44      	ldr	r3, [pc, #272]	; (4bbc <handle_hmi_input+0x1d0>)
    4aaa:	1c10      	adds	r0, r2, #0
    4aac:	4798      	blx	r3
    4aae:	0002      	movs	r2, r0
    4ab0:	4b3b      	ldr	r3, [pc, #236]	; (4ba0 <handle_hmi_input+0x1b4>)
    4ab2:	611a      	str	r2, [r3, #16]
			break;
    4ab4:	e064      	b.n	4b80 <handle_hmi_input+0x194>

		case STAGE_PEEP:
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    4ab6:	2203      	movs	r2, #3
    4ab8:	4b3d      	ldr	r3, [pc, #244]	; (4bb0 <handle_hmi_input+0x1c4>)
    4aba:	0010      	movs	r0, r2
    4abc:	4798      	blx	r3
    4abe:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.peep_cm_h20 - lower_settings_range.peep_cm_h20);
    4ac0:	2214      	movs	r2, #20
    4ac2:	2303      	movs	r3, #3
    4ac4:	1ad2      	subs	r2, r2, r3
    4ac6:	4b3a      	ldr	r3, [pc, #232]	; (4bb0 <handle_hmi_input+0x1c4>)
    4ac8:	0010      	movs	r0, r2
    4aca:	4798      	blx	r3
    4acc:	1c02      	adds	r2, r0, #0
    4ace:	4b39      	ldr	r3, [pc, #228]	; (4bb4 <handle_hmi_input+0x1c8>)
    4ad0:	6839      	ldr	r1, [r7, #0]
    4ad2:	1c10      	adds	r0, r2, #0
    4ad4:	4798      	blx	r3
    4ad6:	1c03      	adds	r3, r0, #0
    4ad8:	1c1a      	adds	r2, r3, #0
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    4ada:	4b37      	ldr	r3, [pc, #220]	; (4bb8 <handle_hmi_input+0x1cc>)
    4adc:	1c11      	adds	r1, r2, #0
    4ade:	1c20      	adds	r0, r4, #0
    4ae0:	4798      	blx	r3
    4ae2:	1c03      	adds	r3, r0, #0
    4ae4:	1c1a      	adds	r2, r3, #0
    4ae6:	4b35      	ldr	r3, [pc, #212]	; (4bbc <handle_hmi_input+0x1d0>)
    4ae8:	1c10      	adds	r0, r2, #0
    4aea:	4798      	blx	r3
    4aec:	0002      	movs	r2, r0
    4aee:	4b2c      	ldr	r3, [pc, #176]	; (4ba0 <handle_hmi_input+0x1b4>)
    4af0:	609a      	str	r2, [r3, #8]
			break;
    4af2:	e045      	b.n	4b80 <handle_hmi_input+0x194>

		case STAGE_PIP:
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    4af4:	220a      	movs	r2, #10
    4af6:	4b2e      	ldr	r3, [pc, #184]	; (4bb0 <handle_hmi_input+0x1c4>)
    4af8:	0010      	movs	r0, r2
    4afa:	4798      	blx	r3
    4afc:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.pip_cm_h20 - lower_settings_range.pip_cm_h20);
    4afe:	2223      	movs	r2, #35	; 0x23
    4b00:	230a      	movs	r3, #10
    4b02:	1ad2      	subs	r2, r2, r3
    4b04:	4b2a      	ldr	r3, [pc, #168]	; (4bb0 <handle_hmi_input+0x1c4>)
    4b06:	0010      	movs	r0, r2
    4b08:	4798      	blx	r3
    4b0a:	1c02      	adds	r2, r0, #0
    4b0c:	4b29      	ldr	r3, [pc, #164]	; (4bb4 <handle_hmi_input+0x1c8>)
    4b0e:	6839      	ldr	r1, [r7, #0]
    4b10:	1c10      	adds	r0, r2, #0
    4b12:	4798      	blx	r3
    4b14:	1c03      	adds	r3, r0, #0
    4b16:	1c1a      	adds	r2, r3, #0
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    4b18:	4b27      	ldr	r3, [pc, #156]	; (4bb8 <handle_hmi_input+0x1cc>)
    4b1a:	1c11      	adds	r1, r2, #0
    4b1c:	1c20      	adds	r0, r4, #0
    4b1e:	4798      	blx	r3
    4b20:	1c03      	adds	r3, r0, #0
    4b22:	1c1a      	adds	r2, r3, #0
    4b24:	4b25      	ldr	r3, [pc, #148]	; (4bbc <handle_hmi_input+0x1d0>)
    4b26:	1c10      	adds	r0, r2, #0
    4b28:	4798      	blx	r3
    4b2a:	0002      	movs	r2, r0
    4b2c:	4b1c      	ldr	r3, [pc, #112]	; (4ba0 <handle_hmi_input+0x1b4>)
    4b2e:	60da      	str	r2, [r3, #12]
			break;
    4b30:	e026      	b.n	4b80 <handle_hmi_input+0x194>

		case STAGE_IE:
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    4b32:	2305      	movs	r3, #5
    4b34:	001a      	movs	r2, r3
    4b36:	4b1e      	ldr	r3, [pc, #120]	; (4bb0 <handle_hmi_input+0x1c4>)
    4b38:	0010      	movs	r0, r2
    4b3a:	4798      	blx	r3
    4b3c:	1c04      	adds	r4, r0, #0
			knob_portion * (upper_settings_range.ie_ratio_tenths - lower_settings_range.ie_ratio_tenths);
    4b3e:	2328      	movs	r3, #40	; 0x28
    4b40:	001a      	movs	r2, r3
    4b42:	2305      	movs	r3, #5
    4b44:	1ad2      	subs	r2, r2, r3
    4b46:	4b1a      	ldr	r3, [pc, #104]	; (4bb0 <handle_hmi_input+0x1c4>)
    4b48:	0010      	movs	r0, r2
    4b4a:	4798      	blx	r3
    4b4c:	1c02      	adds	r2, r0, #0
    4b4e:	4b19      	ldr	r3, [pc, #100]	; (4bb4 <handle_hmi_input+0x1c8>)
    4b50:	6839      	ldr	r1, [r7, #0]
    4b52:	1c10      	adds	r0, r2, #0
    4b54:	4798      	blx	r3
    4b56:	1c03      	adds	r3, r0, #0
    4b58:	1c1a      	adds	r2, r3, #0
			settings_input.ie_ratio_tenths = (int32_t) lower_settings_range.ie_ratio_tenths +
    4b5a:	4b17      	ldr	r3, [pc, #92]	; (4bb8 <handle_hmi_input+0x1cc>)
    4b5c:	1c11      	adds	r1, r2, #0
    4b5e:	1c20      	adds	r0, r4, #0
    4b60:	4798      	blx	r3
    4b62:	1c03      	adds	r3, r0, #0
    4b64:	1c1a      	adds	r2, r3, #0
    4b66:	4b16      	ldr	r3, [pc, #88]	; (4bc0 <handle_hmi_input+0x1d4>)
    4b68:	1c10      	adds	r0, r2, #0
    4b6a:	4798      	blx	r3
    4b6c:	0003      	movs	r3, r0
    4b6e:	b2da      	uxtb	r2, r3
    4b70:	4b0b      	ldr	r3, [pc, #44]	; (4ba0 <handle_hmi_input+0x1b4>)
    4b72:	705a      	strb	r2, [r3, #1]
			break;
    4b74:	e004      	b.n	4b80 <handle_hmi_input+0x194>
		
		default:
			stage = STAGE_NONE;
    4b76:	4b08      	ldr	r3, [pc, #32]	; (4b98 <handle_hmi_input+0x1ac>)
    4b78:	2200      	movs	r2, #0
    4b7a:	701a      	strb	r2, [r3, #0]
			break;
    4b7c:	e000      	b.n	4b80 <handle_hmi_input+0x194>
		break;
    4b7e:	46c0      	nop			; (mov r8, r8)
	}

	last_button_status = new_button_status;
    4b80:	4b04      	ldr	r3, [pc, #16]	; (4b94 <handle_hmi_input+0x1a8>)
    4b82:	1dfa      	adds	r2, r7, #7
    4b84:	7812      	ldrb	r2, [r2, #0]
    4b86:	701a      	strb	r2, [r3, #0]
}
    4b88:	46c0      	nop			; (mov r8, r8)
    4b8a:	46bd      	mov	sp, r7
    4b8c:	b003      	add	sp, #12
    4b8e:	bd90      	pop	{r4, r7, pc}
    4b90:	00004f81 	.word	0x00004f81
    4b94:	20005308 	.word	0x20005308
    4b98:	200052f0 	.word	0x200052f0
    4b9c:	0000dbb0 	.word	0x0000dbb0
    4ba0:	200052f4 	.word	0x200052f4
    4ba4:	000045e5 	.word	0x000045e5
    4ba8:	000029a5 	.word	0x000029a5
    4bac:	0000dbc4 	.word	0x0000dbc4
    4bb0:	0000b2b9 	.word	0x0000b2b9
    4bb4:	0000ad01 	.word	0x0000ad01
    4bb8:	0000a5fd 	.word	0x0000a5fd
    4bbc:	0000b279 	.word	0x0000b279
    4bc0:	0000a44d 	.word	0x0000a44d

00004bc4 <vScreenChangeTimerCallback>:

static void vScreenChangeTimerCallback( TimerHandle_t xTimer )
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	display_main_page = !display_main_page;
    4bcc:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <vScreenChangeTimerCallback+0x2c>)
    4bce:	781b      	ldrb	r3, [r3, #0]
    4bd0:	1e5a      	subs	r2, r3, #1
    4bd2:	4193      	sbcs	r3, r2
    4bd4:	b2db      	uxtb	r3, r3
    4bd6:	2201      	movs	r2, #1
    4bd8:	4053      	eors	r3, r2
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	1c1a      	adds	r2, r3, #0
    4bde:	2301      	movs	r3, #1
    4be0:	4013      	ands	r3, r2
    4be2:	b2da      	uxtb	r2, r3
    4be4:	4b02      	ldr	r3, [pc, #8]	; (4bf0 <vScreenChangeTimerCallback+0x2c>)
    4be6:	701a      	strb	r2, [r3, #0]
}
    4be8:	46c0      	nop			; (mov r8, r8)
    4bea:	46bd      	mov	sp, r7
    4bec:	b002      	add	sp, #8
    4bee:	bd80      	pop	{r7, pc}
    4bf0:	2000011c 	.word	0x2000011c

00004bf4 <vScreenRefreshTimerCallback>:

static void vScreenRefreshTimerCallback( TimerHandle_t xTimer )
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	
	// Don't display alarm page if no alarms
	if(!display_main_page)
    4bfc:	4b10      	ldr	r3, [pc, #64]	; (4c40 <vScreenRefreshTimerCallback+0x4c>)
    4bfe:	781b      	ldrb	r3, [r3, #0]
    4c00:	2201      	movs	r2, #1
    4c02:	4053      	eors	r3, r2
    4c04:	b2db      	uxtb	r3, r3
    4c06:	2b00      	cmp	r3, #0
    4c08:	d00b      	beq.n	4c22 <vScreenRefreshTimerCallback+0x2e>
	{
		if(!any_alarms_set())
    4c0a:	4b0e      	ldr	r3, [pc, #56]	; (4c44 <vScreenRefreshTimerCallback+0x50>)
    4c0c:	4798      	blx	r3
    4c0e:	0003      	movs	r3, r0
    4c10:	001a      	movs	r2, r3
    4c12:	2301      	movs	r3, #1
    4c14:	4053      	eors	r3, r2
    4c16:	b2db      	uxtb	r3, r3
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d002      	beq.n	4c22 <vScreenRefreshTimerCallback+0x2e>
		{
			display_main_page = true;
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <vScreenRefreshTimerCallback+0x4c>)
    4c1e:	2201      	movs	r2, #1
    4c20:	701a      	strb	r2, [r3, #0]
		}
	}

	if(display_main_page)
    4c22:	4b07      	ldr	r3, [pc, #28]	; (4c40 <vScreenRefreshTimerCallback+0x4c>)
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d003      	beq.n	4c32 <vScreenRefreshTimerCallback+0x3e>
	{
		send_buffer(MAIN_SCREEN);
    4c2a:	2000      	movs	r0, #0
    4c2c:	4b06      	ldr	r3, [pc, #24]	; (4c48 <vScreenRefreshTimerCallback+0x54>)
    4c2e:	4798      	blx	r3
	}
	else
	{
		send_buffer(ALARM_SCREEN);
	}
}
    4c30:	e002      	b.n	4c38 <vScreenRefreshTimerCallback+0x44>
		send_buffer(ALARM_SCREEN);
    4c32:	2001      	movs	r0, #1
    4c34:	4b04      	ldr	r3, [pc, #16]	; (4c48 <vScreenRefreshTimerCallback+0x54>)
    4c36:	4798      	blx	r3
}
    4c38:	46c0      	nop			; (mov r8, r8)
    4c3a:	46bd      	mov	sp, r7
    4c3c:	b002      	add	sp, #8
    4c3e:	bd80      	pop	{r7, pc}
    4c40:	2000011c 	.word	0x2000011c
    4c44:	00002a95 	.word	0x00002a95
    4c48:	0000371d 	.word	0x0000371d

00004c4c <vI2CTimeoutTimerCallback>:

static void vI2CTimeoutTimerCallback( TimerHandle_t xTimer )
{
    4c4c:	b580      	push	{r7, lr}
    4c4e:	b082      	sub	sp, #8
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
	UNUSED(xTimer);
	vTaskResume(lcd_i2c_task_handle);
    4c54:	4b04      	ldr	r3, [pc, #16]	; (4c68 <vI2CTimeoutTimerCallback+0x1c>)
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	0018      	movs	r0, r3
    4c5a:	4b04      	ldr	r3, [pc, #16]	; (4c6c <vI2CTimeoutTimerCallback+0x20>)
    4c5c:	4798      	blx	r3
}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	46bd      	mov	sp, r7
    4c62:	b002      	add	sp, #8
    4c64:	bd80      	pop	{r7, pc}
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	200052b4 	.word	0x200052b4
    4c6c:	000062bd 	.word	0x000062bd

00004c70 <handle_i2c_write_complete>:

void handle_i2c_write_complete(struct i2c_master_module *const module)
{
    4c70:	b590      	push	{r4, r7, lr}
    4c72:	b085      	sub	sp, #20
    4c74:	af00      	add	r7, sp, #0
    4c76:	6078      	str	r0, [r7, #4]
	 enum status_code status = i2c_master_get_job_status(module);
    4c78:	230f      	movs	r3, #15
    4c7a:	18fc      	adds	r4, r7, r3
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	0018      	movs	r0, r3
    4c80:	4b06      	ldr	r3, [pc, #24]	; (4c9c <handle_i2c_write_complete+0x2c>)
    4c82:	4798      	blx	r3
    4c84:	0003      	movs	r3, r0
    4c86:	7023      	strb	r3, [r4, #0]

	xTaskResumeFromISR(lcd_i2c_task_handle);
    4c88:	4b05      	ldr	r3, [pc, #20]	; (4ca0 <handle_i2c_write_complete+0x30>)
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	0018      	movs	r0, r3
    4c8e:	4b05      	ldr	r3, [pc, #20]	; (4ca4 <handle_i2c_write_complete+0x34>)
    4c90:	4798      	blx	r3
}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	46bd      	mov	sp, r7
    4c96:	b005      	add	sp, #20
    4c98:	bd90      	pop	{r4, r7, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	000049d5 	.word	0x000049d5
    4ca0:	200052b4 	.word	0x200052b4
    4ca4:	00006371 	.word	0x00006371

00004ca8 <lcd_i2c_hw_setup>:

static void lcd_i2c_hw_setup(void)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b08e      	sub	sp, #56	; 0x38
    4cac:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    4cae:	1d3b      	adds	r3, r7, #4
    4cb0:	0018      	movs	r0, r3
    4cb2:	4b21      	ldr	r3, [pc, #132]	; (4d38 <lcd_i2c_hw_setup+0x90>)
    4cb4:	4798      	blx	r3
	config_i2c_master.generator_source = GCLK_GENERATOR_1;	// 8 MHz
    4cb6:	1d3b      	adds	r3, r7, #4
    4cb8:	2201      	movs	r2, #1
    4cba:	731a      	strb	r2, [r3, #12]
	config_i2c_master.baud_rate = 45; // Set in # of kHz
    4cbc:	1d3b      	adds	r3, r7, #4
    4cbe:	222d      	movs	r2, #45	; 0x2d
    4cc0:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535;
    4cc2:	1d3b      	adds	r3, r7, #4
    4cc4:	2201      	movs	r2, #1
    4cc6:	4252      	negs	r2, r2
    4cc8:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA16C_SERCOM1_PAD0;
    4cca:	1d3b      	adds	r3, r7, #4
    4ccc:	2210      	movs	r2, #16
    4cce:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA17C_SERCOM1_PAD1;
    4cd0:	1d3b      	adds	r3, r7, #4
    4cd2:	2211      	movs	r2, #17
    4cd4:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, LCD_SERCOM, &config_i2c_master) != STATUS_OK);
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	1d3a      	adds	r2, r7, #4
    4cda:	4918      	ldr	r1, [pc, #96]	; (4d3c <lcd_i2c_hw_setup+0x94>)
    4cdc:	4b18      	ldr	r3, [pc, #96]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4cde:	0018      	movs	r0, r3
    4ce0:	4b18      	ldr	r3, [pc, #96]	; (4d44 <lcd_i2c_hw_setup+0x9c>)
    4ce2:	4798      	blx	r3
    4ce4:	1e03      	subs	r3, r0, #0
    4ce6:	d1f7      	bne.n	4cd8 <lcd_i2c_hw_setup+0x30>

	// Uses FreeRTOS, so need to limit priority
	irq_register_handler(LCD_SERCOM_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
    4ce8:	200a      	movs	r0, #10
    4cea:	4b17      	ldr	r3, [pc, #92]	; (4d48 <lcd_i2c_hw_setup+0xa0>)
    4cec:	4798      	blx	r3
    4cee:	2104      	movs	r1, #4
    4cf0:	200a      	movs	r0, #10
    4cf2:	4b16      	ldr	r3, [pc, #88]	; (4d4c <lcd_i2c_hw_setup+0xa4>)
    4cf4:	4798      	blx	r3
    4cf6:	200a      	movs	r0, #10
    4cf8:	4b15      	ldr	r3, [pc, #84]	; (4d50 <lcd_i2c_hw_setup+0xa8>)
    4cfa:	4798      	blx	r3
	i2c_master_register_callback(&i2c_master_instance, handle_i2c_write_complete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    4cfc:	4915      	ldr	r1, [pc, #84]	; (4d54 <lcd_i2c_hw_setup+0xac>)
    4cfe:	4b10      	ldr	r3, [pc, #64]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4d00:	2200      	movs	r2, #0
    4d02:	0018      	movs	r0, r3
    4d04:	4b14      	ldr	r3, [pc, #80]	; (4d58 <lcd_i2c_hw_setup+0xb0>)
    4d06:	4798      	blx	r3
	i2c_master_register_callback(&i2c_master_instance, handle_i2c_write_complete, I2C_MASTER_CALLBACK_ERROR);
    4d08:	4912      	ldr	r1, [pc, #72]	; (4d54 <lcd_i2c_hw_setup+0xac>)
    4d0a:	4b0d      	ldr	r3, [pc, #52]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4d0c:	2202      	movs	r2, #2
    4d0e:	0018      	movs	r0, r3
    4d10:	4b11      	ldr	r3, [pc, #68]	; (4d58 <lcd_i2c_hw_setup+0xb0>)
    4d12:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    4d14:	4b0a      	ldr	r3, [pc, #40]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4d16:	2100      	movs	r1, #0
    4d18:	0018      	movs	r0, r3
    4d1a:	4b10      	ldr	r3, [pc, #64]	; (4d5c <lcd_i2c_hw_setup+0xb4>)
    4d1c:	4798      	blx	r3
	i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_ERROR);
    4d1e:	4b08      	ldr	r3, [pc, #32]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4d20:	2102      	movs	r1, #2
    4d22:	0018      	movs	r0, r3
    4d24:	4b0d      	ldr	r3, [pc, #52]	; (4d5c <lcd_i2c_hw_setup+0xb4>)
    4d26:	4798      	blx	r3

	i2c_master_enable(&i2c_master_instance);
    4d28:	4b05      	ldr	r3, [pc, #20]	; (4d40 <lcd_i2c_hw_setup+0x98>)
    4d2a:	0018      	movs	r0, r3
    4d2c:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <lcd_i2c_hw_setup+0xb8>)
    4d2e:	4798      	blx	r3
}
    4d30:	46c0      	nop			; (mov r8, r8)
    4d32:	46bd      	mov	sp, r7
    4d34:	b00e      	add	sp, #56	; 0x38
    4d36:	bd80      	pop	{r7, pc}
    4d38:	000048a9 	.word	0x000048a9
    4d3c:	42000c00 	.word	0x42000c00
    4d40:	200052c8 	.word	0x200052c8
    4d44:	0000161d 	.word	0x0000161d
    4d48:	00004651 	.word	0x00004651
    4d4c:	00004685 	.word	0x00004685
    4d50:	00004625 	.word	0x00004625
    4d54:	00004c71 	.word	0x00004c71
    4d58:	00001a75 	.word	0x00001a75
    4d5c:	000049a1 	.word	0x000049a1
    4d60:	0000492d 	.word	0x0000492d

00004d64 <hmi_task>:

static void hmi_task(void * pvParameters)
{
    4d64:	b590      	push	{r4, r7, lr}
    4d66:	b087      	sub	sp, #28
    4d68:	af02      	add	r7, sp, #8
    4d6a:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	lcd_i2c_hw_setup();
    4d6c:	4b29      	ldr	r3, [pc, #164]	; (4e14 <hmi_task+0xb0>)
    4d6e:	4798      	blx	r3
	lcd_init();
    4d70:	4b29      	ldr	r3, [pc, #164]	; (4e18 <hmi_task+0xb4>)
    4d72:	4798      	blx	r3

	screen_update_handle = xTimerCreate("SCREEN_TIM",
    4d74:	4829      	ldr	r0, [pc, #164]	; (4e1c <hmi_task+0xb8>)
    4d76:	4b2a      	ldr	r3, [pc, #168]	; (4e20 <hmi_task+0xbc>)
    4d78:	9300      	str	r3, [sp, #0]
    4d7a:	2300      	movs	r3, #0
    4d7c:	2201      	movs	r2, #1
    4d7e:	211e      	movs	r1, #30
    4d80:	4c28      	ldr	r4, [pc, #160]	; (4e24 <hmi_task+0xc0>)
    4d82:	47a0      	blx	r4
    4d84:	0002      	movs	r2, r0
    4d86:	4b28      	ldr	r3, [pc, #160]	; (4e28 <hmi_task+0xc4>)
    4d88:	601a      	str	r2, [r3, #0]
				pdMS_TO_TICKS(30),
				pdTRUE,
				(void *) 0,
				vScreenRefreshTimerCallback);
	if(screen_update_handle)
    4d8a:	4b27      	ldr	r3, [pc, #156]	; (4e28 <hmi_task+0xc4>)
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d00b      	beq.n	4daa <hmi_task+0x46>
	{
		xTimerStart(screen_update_handle, 0);
    4d92:	4b25      	ldr	r3, [pc, #148]	; (4e28 <hmi_task+0xc4>)
    4d94:	681c      	ldr	r4, [r3, #0]
    4d96:	4b25      	ldr	r3, [pc, #148]	; (4e2c <hmi_task+0xc8>)
    4d98:	4798      	blx	r3
    4d9a:	0002      	movs	r2, r0
    4d9c:	2300      	movs	r3, #0
    4d9e:	9300      	str	r3, [sp, #0]
    4da0:	2300      	movs	r3, #0
    4da2:	2101      	movs	r1, #1
    4da4:	0020      	movs	r0, r4
    4da6:	4c22      	ldr	r4, [pc, #136]	; (4e30 <hmi_task+0xcc>)
    4da8:	47a0      	blx	r4
	}

	screen_change_handle = xTimerCreate("SCREEN_CHG",
    4daa:	23fa      	movs	r3, #250	; 0xfa
    4dac:	00d9      	lsls	r1, r3, #3
    4dae:	4821      	ldr	r0, [pc, #132]	; (4e34 <hmi_task+0xd0>)
    4db0:	4b21      	ldr	r3, [pc, #132]	; (4e38 <hmi_task+0xd4>)
    4db2:	9300      	str	r3, [sp, #0]
    4db4:	2300      	movs	r3, #0
    4db6:	2201      	movs	r2, #1
    4db8:	4c1a      	ldr	r4, [pc, #104]	; (4e24 <hmi_task+0xc0>)
    4dba:	47a0      	blx	r4
    4dbc:	0002      	movs	r2, r0
    4dbe:	4b1f      	ldr	r3, [pc, #124]	; (4e3c <hmi_task+0xd8>)
    4dc0:	601a      	str	r2, [r3, #0]
		pdMS_TO_TICKS(2000),
		pdTRUE,
		(void *) 0,
		vScreenChangeTimerCallback);
	if(screen_change_handle)
    4dc2:	4b1e      	ldr	r3, [pc, #120]	; (4e3c <hmi_task+0xd8>)
    4dc4:	681b      	ldr	r3, [r3, #0]
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d00b      	beq.n	4de2 <hmi_task+0x7e>
	{
		xTimerStart(screen_change_handle, 0);
    4dca:	4b1c      	ldr	r3, [pc, #112]	; (4e3c <hmi_task+0xd8>)
    4dcc:	681c      	ldr	r4, [r3, #0]
    4dce:	4b17      	ldr	r3, [pc, #92]	; (4e2c <hmi_task+0xc8>)
    4dd0:	4798      	blx	r3
    4dd2:	0002      	movs	r2, r0
    4dd4:	2300      	movs	r3, #0
    4dd6:	9300      	str	r3, [sp, #0]
    4dd8:	2300      	movs	r3, #0
    4dda:	2101      	movs	r1, #1
    4ddc:	0020      	movs	r0, r4
    4dde:	4c14      	ldr	r4, [pc, #80]	; (4e30 <hmi_task+0xcc>)
    4de0:	47a0      	blx	r4
	}

	const TickType_t xFrequency = pdMS_TO_TICKS(20);	// 50 Hz rate
    4de2:	2314      	movs	r3, #20
    4de4:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
    4de6:	4b11      	ldr	r3, [pc, #68]	; (4e2c <hmi_task+0xc8>)
    4de8:	4798      	blx	r3
    4dea:	0003      	movs	r3, r0
    4dec:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    4dee:	68fa      	ldr	r2, [r7, #12]
    4df0:	2308      	movs	r3, #8
    4df2:	18fb      	adds	r3, r7, r3
    4df4:	0011      	movs	r1, r2
    4df6:	0018      	movs	r0, r3
    4df8:	4b11      	ldr	r3, [pc, #68]	; (4e40 <hmi_task+0xdc>)
    4dfa:	4798      	blx	r3

		handle_hmi_input();
    4dfc:	4b11      	ldr	r3, [pc, #68]	; (4e44 <hmi_task+0xe0>)
    4dfe:	4798      	blx	r3
		// Actual display write and screen changes happens in timers. Here we just update buffers
		update_main_buffer(&settings_input, stage);
    4e00:	4b11      	ldr	r3, [pc, #68]	; (4e48 <hmi_task+0xe4>)
    4e02:	781a      	ldrb	r2, [r3, #0]
    4e04:	4b11      	ldr	r3, [pc, #68]	; (4e4c <hmi_task+0xe8>)
    4e06:	0011      	movs	r1, r2
    4e08:	0018      	movs	r0, r3
    4e0a:	4b11      	ldr	r3, [pc, #68]	; (4e50 <hmi_task+0xec>)
    4e0c:	4798      	blx	r3
		update_alarm_buffer();
    4e0e:	4b11      	ldr	r3, [pc, #68]	; (4e54 <hmi_task+0xf0>)
    4e10:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    4e12:	e7ec      	b.n	4dee <hmi_task+0x8a>
    4e14:	00004ca9 	.word	0x00004ca9
    4e18:	00003685 	.word	0x00003685
    4e1c:	0000dbd8 	.word	0x0000dbd8
    4e20:	00004bf5 	.word	0x00004bf5
    4e24:	00006e8d 	.word	0x00006e8d
    4e28:	200052b8 	.word	0x200052b8
    4e2c:	00006611 	.word	0x00006611
    4e30:	00006f31 	.word	0x00006f31
    4e34:	0000dbe4 	.word	0x0000dbe4
    4e38:	00004bc5 	.word	0x00004bc5
    4e3c:	200052bc 	.word	0x200052bc
    4e40:	00006051 	.word	0x00006051
    4e44:	000049ed 	.word	0x000049ed
    4e48:	200052f0 	.word	0x200052f0
    4e4c:	200052f4 	.word	0x200052f4
    4e50:	000039d1 	.word	0x000039d1
    4e54:	00003ba9 	.word	0x00003ba9

00004e58 <lcd_i2c_task>:

	}
}

static void lcd_i2c_task(void * pvParameters)
{
    4e58:	b590      	push	{r4, r7, lr}
    4e5a:	b089      	sub	sp, #36	; 0x24
    4e5c:	af02      	add	r7, sp, #8
    4e5e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	i2c_timeout_timer_handle = xTimerCreate("I2C_TIMEOUT",
    4e60:	4817      	ldr	r0, [pc, #92]	; (4ec0 <lcd_i2c_task+0x68>)
    4e62:	4b18      	ldr	r3, [pc, #96]	; (4ec4 <lcd_i2c_task+0x6c>)
    4e64:	9300      	str	r3, [sp, #0]
    4e66:	2300      	movs	r3, #0
    4e68:	2200      	movs	r2, #0
    4e6a:	211e      	movs	r1, #30
    4e6c:	4c16      	ldr	r4, [pc, #88]	; (4ec8 <lcd_i2c_task+0x70>)
    4e6e:	47a0      	blx	r4
    4e70:	0002      	movs	r2, r0
    4e72:	4b16      	ldr	r3, [pc, #88]	; (4ecc <lcd_i2c_task+0x74>)
    4e74:	601a      	str	r2, [r3, #0]

	i2c_transaction_t transaction;

	for (;;)
	{
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    4e76:	4b16      	ldr	r3, [pc, #88]	; (4ed0 <lcd_i2c_task+0x78>)
    4e78:	6818      	ldr	r0, [r3, #0]
    4e7a:	2301      	movs	r3, #1
    4e7c:	425a      	negs	r2, r3
    4e7e:	230c      	movs	r3, #12
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	0019      	movs	r1, r3
    4e84:	4b13      	ldr	r3, [pc, #76]	; (4ed4 <lcd_i2c_task+0x7c>)
    4e86:	4798      	blx	r3
    4e88:	0003      	movs	r3, r0
    4e8a:	2b01      	cmp	r3, #1
    4e8c:	d1f3      	bne.n	4e76 <lcd_i2c_task+0x1e>
		{
			// Send transaction
			i2c_master_write_packet_job(&i2c_master_instance, &transaction.packet);
    4e8e:	230c      	movs	r3, #12
    4e90:	18fa      	adds	r2, r7, r3
    4e92:	4b11      	ldr	r3, [pc, #68]	; (4ed8 <lcd_i2c_task+0x80>)
    4e94:	0011      	movs	r1, r2
    4e96:	0018      	movs	r0, r3
    4e98:	4b10      	ldr	r3, [pc, #64]	; (4edc <lcd_i2c_task+0x84>)
    4e9a:	4798      	blx	r3

			// Set up timeout timer
			xTimerReset(i2c_timeout_timer_handle, 0);
    4e9c:	4b0b      	ldr	r3, [pc, #44]	; (4ecc <lcd_i2c_task+0x74>)
    4e9e:	681c      	ldr	r4, [r3, #0]
    4ea0:	4b0f      	ldr	r3, [pc, #60]	; (4ee0 <lcd_i2c_task+0x88>)
    4ea2:	4798      	blx	r3
    4ea4:	0002      	movs	r2, r0
    4ea6:	2300      	movs	r3, #0
    4ea8:	9300      	str	r3, [sp, #0]
    4eaa:	2300      	movs	r3, #0
    4eac:	2102      	movs	r1, #2
    4eae:	0020      	movs	r0, r4
    4eb0:	4c0c      	ldr	r4, [pc, #48]	; (4ee4 <lcd_i2c_task+0x8c>)
    4eb2:	47a0      	blx	r4

			vTaskSuspend(lcd_i2c_task_handle);
    4eb4:	4b0c      	ldr	r3, [pc, #48]	; (4ee8 <lcd_i2c_task+0x90>)
    4eb6:	681b      	ldr	r3, [r3, #0]
    4eb8:	0018      	movs	r0, r3
    4eba:	4b0c      	ldr	r3, [pc, #48]	; (4eec <lcd_i2c_task+0x94>)
    4ebc:	4798      	blx	r3
		if(xQueueReceive(lcd_i2c_queue, &transaction,portMAX_DELAY) == pdTRUE)
    4ebe:	e7da      	b.n	4e76 <lcd_i2c_task+0x1e>
    4ec0:	0000dbf0 	.word	0x0000dbf0
    4ec4:	00004c4d 	.word	0x00004c4d
    4ec8:	00006e8d 	.word	0x00006e8d
    4ecc:	200052c0 	.word	0x200052c0
    4ed0:	200052c4 	.word	0x200052c4
    4ed4:	00005825 	.word	0x00005825
    4ed8:	200052c8 	.word	0x200052c8
    4edc:	00001b61 	.word	0x00001b61
    4ee0:	00006611 	.word	0x00006611
    4ee4:	00006f31 	.word	0x00006f31
    4ee8:	200052b4 	.word	0x200052b4
    4eec:	00006175 	.word	0x00006175

00004ef0 <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    4ef0:	b590      	push	{r4, r7, lr}
    4ef2:	b085      	sub	sp, #20
    4ef4:	af02      	add	r7, sp, #8
    4ef6:	0002      	movs	r2, r0
    4ef8:	6039      	str	r1, [r7, #0]
    4efa:	1dbb      	adds	r3, r7, #6
    4efc:	801a      	strh	r2, [r3, #0]
	lcd_i2c_queue = xQueueCreate(LCD_I2C_QUEUE_SIZE, sizeof(i2c_transaction_t));
    4efe:	2200      	movs	r2, #0
    4f00:	210c      	movs	r1, #12
    4f02:	200a      	movs	r0, #10
    4f04:	4b0f      	ldr	r3, [pc, #60]	; (4f44 <create_hmi_task+0x54>)
    4f06:	4798      	blx	r3
    4f08:	0002      	movs	r2, r0
    4f0a:	4b0f      	ldr	r3, [pc, #60]	; (4f48 <create_hmi_task+0x58>)
    4f0c:	601a      	str	r2, [r3, #0]

	xTaskCreate(hmi_task, (const char * const) "HMI",
    4f0e:	1dbb      	adds	r3, r7, #6
    4f10:	881a      	ldrh	r2, [r3, #0]
    4f12:	490e      	ldr	r1, [pc, #56]	; (4f4c <create_hmi_task+0x5c>)
    4f14:	480e      	ldr	r0, [pc, #56]	; (4f50 <create_hmi_task+0x60>)
    4f16:	4b0f      	ldr	r3, [pc, #60]	; (4f54 <create_hmi_task+0x64>)
    4f18:	9301      	str	r3, [sp, #4]
    4f1a:	683b      	ldr	r3, [r7, #0]
    4f1c:	9300      	str	r3, [sp, #0]
    4f1e:	2300      	movs	r3, #0
    4f20:	4c0d      	ldr	r4, [pc, #52]	; (4f58 <create_hmi_task+0x68>)
    4f22:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);

	xTaskCreate(lcd_i2c_task, (const char * const) "I2C",
    4f24:	2380      	movs	r3, #128	; 0x80
    4f26:	005a      	lsls	r2, r3, #1
    4f28:	490c      	ldr	r1, [pc, #48]	; (4f5c <create_hmi_task+0x6c>)
    4f2a:	480d      	ldr	r0, [pc, #52]	; (4f60 <create_hmi_task+0x70>)
    4f2c:	4b0d      	ldr	r3, [pc, #52]	; (4f64 <create_hmi_task+0x74>)
    4f2e:	9301      	str	r3, [sp, #4]
    4f30:	683b      	ldr	r3, [r7, #0]
    4f32:	9300      	str	r3, [sp, #0]
    4f34:	2300      	movs	r3, #0
    4f36:	4c08      	ldr	r4, [pc, #32]	; (4f58 <create_hmi_task+0x68>)
    4f38:	47a0      	blx	r4
		256, NULL, task_priority, &lcd_i2c_task_handle);
}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	46bd      	mov	sp, r7
    4f3e:	b003      	add	sp, #12
    4f40:	bd90      	pop	{r4, r7, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	00005461 	.word	0x00005461
    4f48:	200052c4 	.word	0x200052c4
    4f4c:	0000dbfc 	.word	0x0000dbfc
    4f50:	00004d65 	.word	0x00004d65
    4f54:	200052b0 	.word	0x200052b0
    4f58:	00005dbd 	.word	0x00005dbd
    4f5c:	0000dc00 	.word	0x0000dc00
    4f60:	00004e59 	.word	0x00004e59
    4f64:	200052b4 	.word	0x200052b4

00004f68 <system_is_enabled>:
*	\brief Checks is the system enable switch is on
*
*	\return True if enabled, false otherwise
*/
bool system_is_enabled(void)
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	af00      	add	r7, sp, #0
	return (ioport_get_pin_level(INPUT_ENABLE_GPIO) == IOPORT_PIN_LEVEL_HIGH);
    4f6c:	202b      	movs	r0, #43	; 0x2b
    4f6e:	4b03      	ldr	r3, [pc, #12]	; (4f7c <system_is_enabled+0x14>)
    4f70:	4798      	blx	r3
    4f72:	0003      	movs	r3, r0
}
    4f74:	0018      	movs	r0, r3
    4f76:	46bd      	mov	sp, r7
    4f78:	bd80      	pop	{r7, pc}
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	00004841 	.word	0x00004841

00004f80 <get_pushbutton_level>:
*	\brief Checks the level of the pushbutton
*
*	\return True if high, false if low
*/
bool get_pushbutton_level(void)
{
    4f80:	b580      	push	{r7, lr}
    4f82:	af00      	add	r7, sp, #0
	return ioport_get_pin_level(INPUT_PUSHBUTTON_GPIO);
    4f84:	200c      	movs	r0, #12
    4f86:	4b03      	ldr	r3, [pc, #12]	; (4f94 <get_pushbutton_level+0x14>)
    4f88:	4798      	blx	r3
    4f8a:	0003      	movs	r3, r0
}
    4f8c:	0018      	movs	r0, r3
    4f8e:	46bd      	mov	sp, r7
    4f90:	bd80      	pop	{r7, pc}
    4f92:	46c0      	nop			; (mov r8, r8)
    4f94:	00004841 	.word	0x00004841

00004f98 <add_lcd_i2c_transaction_to_queue>:

void add_lcd_i2c_transaction_to_queue(i2c_transaction_t transaction)
{
    4f98:	b590      	push	{r4, r7, lr}
    4f9a:	b085      	sub	sp, #20
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	1d3b      	adds	r3, r7, #4
    4fa0:	6018      	str	r0, [r3, #0]
    4fa2:	6059      	str	r1, [r3, #4]
    4fa4:	609a      	str	r2, [r3, #8]
	if(lcd_i2c_queue)
    4fa6:	4b07      	ldr	r3, [pc, #28]	; (4fc4 <add_lcd_i2c_transaction_to_queue+0x2c>)
    4fa8:	681b      	ldr	r3, [r3, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d006      	beq.n	4fbc <add_lcd_i2c_transaction_to_queue+0x24>
	{
		xQueueSend(lcd_i2c_queue, &transaction, 0);
    4fae:	4b05      	ldr	r3, [pc, #20]	; (4fc4 <add_lcd_i2c_transaction_to_queue+0x2c>)
    4fb0:	6818      	ldr	r0, [r3, #0]
    4fb2:	1d39      	adds	r1, r7, #4
    4fb4:	2300      	movs	r3, #0
    4fb6:	2200      	movs	r2, #0
    4fb8:	4c03      	ldr	r4, [pc, #12]	; (4fc8 <add_lcd_i2c_transaction_to_queue+0x30>)
    4fba:	47a0      	blx	r4
	}
    4fbc:	46c0      	nop			; (mov r8, r8)
    4fbe:	46bd      	mov	sp, r7
    4fc0:	b005      	add	sp, #20
    4fc2:	bd90      	pop	{r4, r7, pc}
    4fc4:	200052c4 	.word	0x200052c4
    4fc8:	00005525 	.word	0x00005525

00004fcc <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b082      	sub	sp, #8
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    4fd4:	23fa      	movs	r3, #250	; 0xfa
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	0018      	movs	r0, r3
    4fda:	4b01      	ldr	r3, [pc, #4]	; (4fe0 <monitor_task+0x14>)
    4fdc:	4798      	blx	r3
    4fde:	e7f9      	b.n	4fd4 <monitor_task+0x8>
    4fe0:	00006119 	.word	0x00006119

00004fe4 <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    4fe4:	b590      	push	{r4, r7, lr}
    4fe6:	b085      	sub	sp, #20
    4fe8:	af02      	add	r7, sp, #8
    4fea:	0002      	movs	r2, r0
    4fec:	6039      	str	r1, [r7, #0]
    4fee:	1dbb      	adds	r3, r7, #6
    4ff0:	801a      	strh	r2, [r3, #0]
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    4ff2:	1dbb      	adds	r3, r7, #6
    4ff4:	881a      	ldrh	r2, [r3, #0]
    4ff6:	4906      	ldr	r1, [pc, #24]	; (5010 <create_monitor_task+0x2c>)
    4ff8:	4806      	ldr	r0, [pc, #24]	; (5014 <create_monitor_task+0x30>)
    4ffa:	4b07      	ldr	r3, [pc, #28]	; (5018 <create_monitor_task+0x34>)
    4ffc:	9301      	str	r3, [sp, #4]
    4ffe:	683b      	ldr	r3, [r7, #0]
    5000:	9300      	str	r3, [sp, #0]
    5002:	2300      	movs	r3, #0
    5004:	4c05      	ldr	r4, [pc, #20]	; (501c <create_monitor_task+0x38>)
    5006:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    5008:	46c0      	nop			; (mov r8, r8)
    500a:	46bd      	mov	sp, r7
    500c:	b003      	add	sp, #12
    500e:	bd90      	pop	{r4, r7, pc}
    5010:	0000dc04 	.word	0x0000dc04
    5014:	00004fcd 	.word	0x00004fcd
    5018:	2000530c 	.word	0x2000530c
    501c:	00005dbd 	.word	0x00005dbd

00005020 <system_interrupt_enable>:
{
    5020:	b580      	push	{r7, lr}
    5022:	b082      	sub	sp, #8
    5024:	af00      	add	r7, sp, #0
    5026:	0002      	movs	r2, r0
    5028:	1dfb      	adds	r3, r7, #7
    502a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    502c:	4b06      	ldr	r3, [pc, #24]	; (5048 <system_interrupt_enable+0x28>)
    502e:	1dfa      	adds	r2, r7, #7
    5030:	7812      	ldrb	r2, [r2, #0]
    5032:	0011      	movs	r1, r2
    5034:	221f      	movs	r2, #31
    5036:	400a      	ands	r2, r1
    5038:	2101      	movs	r1, #1
    503a:	4091      	lsls	r1, r2
    503c:	000a      	movs	r2, r1
    503e:	601a      	str	r2, [r3, #0]
}
    5040:	46c0      	nop			; (mov r8, r8)
    5042:	46bd      	mov	sp, r7
    5044:	b002      	add	sp, #8
    5046:	bd80      	pop	{r7, pc}
    5048:	e000e100 	.word	0xe000e100

0000504c <i2c_master_is_syncing>:
{
    504c:	b580      	push	{r7, lr}
    504e:	b084      	sub	sp, #16
    5050:	af00      	add	r7, sp, #0
    5052:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	681b      	ldr	r3, [r3, #0]
    5058:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	69db      	ldr	r3, [r3, #28]
    505e:	2207      	movs	r2, #7
    5060:	4013      	ands	r3, r2
    5062:	1e5a      	subs	r2, r3, #1
    5064:	4193      	sbcs	r3, r2
    5066:	b2db      	uxtb	r3, r3
}
    5068:	0018      	movs	r0, r3
    506a:	46bd      	mov	sp, r7
    506c:	b004      	add	sp, #16
    506e:	bd80      	pop	{r7, pc}

00005070 <_i2c_master_wait_for_sync>:
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    5078:	46c0      	nop			; (mov r8, r8)
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	0018      	movs	r0, r3
    507e:	4b04      	ldr	r3, [pc, #16]	; (5090 <_i2c_master_wait_for_sync+0x20>)
    5080:	4798      	blx	r3
    5082:	1e03      	subs	r3, r0, #0
    5084:	d1f9      	bne.n	507a <_i2c_master_wait_for_sync+0xa>
}
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	46bd      	mov	sp, r7
    508a:	b002      	add	sp, #8
    508c:	bd80      	pop	{r7, pc}
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	0000504d 	.word	0x0000504d

00005094 <i2c_master_get_config_defaults>:
{
    5094:	b580      	push	{r7, lr}
    5096:	b082      	sub	sp, #8
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	2264      	movs	r2, #100	; 0x64
    50a0:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	4a1b      	ldr	r2, [pc, #108]	; (5114 <i2c_master_get_config_defaults+0x80>)
    50a6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	2200      	movs	r2, #0
    50ac:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	2200      	movs	r2, #0
    50b2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    50b4:	687b      	ldr	r3, [r7, #4]
    50b6:	2200      	movs	r2, #0
    50b8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	2280      	movs	r2, #128	; 0x80
    50be:	0392      	lsls	r2, r2, #14
    50c0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	2201      	movs	r2, #1
    50c6:	4252      	negs	r2, r2
    50c8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	2201      	movs	r2, #1
    50ce:	4252      	negs	r2, r2
    50d0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    50d2:	687b      	ldr	r3, [r7, #4]
    50d4:	2200      	movs	r2, #0
    50d6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	2200      	movs	r2, #0
    50dc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    50de:	687b      	ldr	r3, [r7, #4]
    50e0:	2224      	movs	r2, #36	; 0x24
    50e2:	2100      	movs	r1, #0
    50e4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	2200      	movs	r2, #0
    50ea:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	222c      	movs	r2, #44	; 0x2c
    50f0:	2100      	movs	r1, #0
    50f2:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
    50f4:	687b      	ldr	r3, [r7, #4]
    50f6:	222d      	movs	r2, #45	; 0x2d
    50f8:	2100      	movs	r1, #0
    50fa:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	222e      	movs	r2, #46	; 0x2e
    5100:	2100      	movs	r1, #0
    5102:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
    5104:	687b      	ldr	r3, [r7, #4]
    5106:	22d7      	movs	r2, #215	; 0xd7
    5108:	861a      	strh	r2, [r3, #48]	; 0x30
}
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	46bd      	mov	sp, r7
    510e:	b002      	add	sp, #8
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	00000d48 	.word	0x00000d48

00005118 <i2c_master_enable>:
{
    5118:	b580      	push	{r7, lr}
    511a:	b084      	sub	sp, #16
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
    5126:	2300      	movs	r3, #0
    5128:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	0018      	movs	r0, r3
    512e:	4b14      	ldr	r3, [pc, #80]	; (5180 <i2c_master_enable+0x68>)
    5130:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5132:	68bb      	ldr	r3, [r7, #8]
    5134:	681b      	ldr	r3, [r3, #0]
    5136:	2202      	movs	r2, #2
    5138:	431a      	orrs	r2, r3
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	0018      	movs	r0, r3
    5144:	4b0f      	ldr	r3, [pc, #60]	; (5184 <i2c_master_enable+0x6c>)
    5146:	4798      	blx	r3
    5148:	0003      	movs	r3, r0
    514a:	0018      	movs	r0, r3
    514c:	4b0e      	ldr	r3, [pc, #56]	; (5188 <i2c_master_enable+0x70>)
    514e:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5150:	e00c      	b.n	516c <i2c_master_enable+0x54>
		timeout_counter++;
    5152:	68fb      	ldr	r3, [r7, #12]
    5154:	3301      	adds	r3, #1
    5156:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	88db      	ldrh	r3, [r3, #6]
    515c:	001a      	movs	r2, r3
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	429a      	cmp	r2, r3
    5162:	d803      	bhi.n	516c <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5164:	68bb      	ldr	r3, [r7, #8]
    5166:	2210      	movs	r2, #16
    5168:	835a      	strh	r2, [r3, #26]
			return;
    516a:	e006      	b.n	517a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    516c:	68bb      	ldr	r3, [r7, #8]
    516e:	8b5b      	ldrh	r3, [r3, #26]
    5170:	b29b      	uxth	r3, r3
    5172:	001a      	movs	r2, r3
    5174:	2310      	movs	r3, #16
    5176:	4013      	ands	r3, r2
    5178:	d0eb      	beq.n	5152 <i2c_master_enable+0x3a>
}
    517a:	46bd      	mov	sp, r7
    517c:	b004      	add	sp, #16
    517e:	bd80      	pop	{r7, pc}
    5180:	00005071 	.word	0x00005071
    5184:	00008809 	.word	0x00008809
    5188:	00005021 	.word	0x00005021

0000518c <sensor_hw_init>:
*	\brief Sets up sensor interface hardware
*
*	Sets up ADC for communication with pressure sensors and flow meter
*/
static void sensor_hw_init(void)
{
    518c:	b580      	push	{r7, lr}
    518e:	b08e      	sub	sp, #56	; 0x38
    5190:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    5192:	1d3b      	adds	r3, r7, #4
    5194:	0018      	movs	r0, r3
    5196:	4b11      	ldr	r3, [pc, #68]	; (51dc <sensor_hw_init+0x50>)
    5198:	4798      	blx	r3
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
    519a:	1d3b      	adds	r3, r7, #4
    519c:	2264      	movs	r2, #100	; 0x64
    519e:	601a      	str	r2, [r3, #0]
	config_i2c_master.buffer_timeout = 65535; 
    51a0:	1d3b      	adds	r3, r7, #4
    51a2:	2201      	movs	r2, #1
    51a4:	4252      	negs	r2, r2
    51a6:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    51a8:	1d3b      	adds	r3, r7, #4
    51aa:	2216      	movs	r2, #22
    51ac:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    51ae:	1d3b      	adds	r3, r7, #4
    51b0:	2217      	movs	r2, #23
    51b2:	621a      	str	r2, [r3, #32]
	
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    51b4:	46c0      	nop			; (mov r8, r8)
    51b6:	1d3a      	adds	r2, r7, #4
    51b8:	4909      	ldr	r1, [pc, #36]	; (51e0 <sensor_hw_init+0x54>)
    51ba:	4b0a      	ldr	r3, [pc, #40]	; (51e4 <sensor_hw_init+0x58>)
    51bc:	0018      	movs	r0, r3
    51be:	4b0a      	ldr	r3, [pc, #40]	; (51e8 <sensor_hw_init+0x5c>)
    51c0:	4798      	blx	r3
    51c2:	1e03      	subs	r3, r0, #0
    51c4:	d1f7      	bne.n	51b6 <sensor_hw_init+0x2a>
	i2c_master_enable(&i2c_master_instance);
    51c6:	4b07      	ldr	r3, [pc, #28]	; (51e4 <sensor_hw_init+0x58>)
    51c8:	0018      	movs	r0, r3
    51ca:	4b08      	ldr	r3, [pc, #32]	; (51ec <sensor_hw_init+0x60>)
    51cc:	4798      	blx	r3

	adc_interface_init();
    51ce:	4b08      	ldr	r3, [pc, #32]	; (51f0 <sensor_hw_init+0x64>)
    51d0:	4798      	blx	r3
}
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	46bd      	mov	sp, r7
    51d6:	b00e      	add	sp, #56	; 0x38
    51d8:	bd80      	pop	{r7, pc}
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	00005095 	.word	0x00005095
    51e0:	42001400 	.word	0x42001400
    51e4:	20005314 	.word	0x20005314
    51e8:	0000161d 	.word	0x0000161d
    51ec:	00005119 	.word	0x00005119
    51f0:	00002599 	.word	0x00002599

000051f4 <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b082      	sub	sp, #8
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

	sensor_hw_init();
    51fc:	4b03      	ldr	r3, [pc, #12]	; (520c <sensor_task+0x18>)
    51fe:	4798      	blx	r3
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    5200:	23fa      	movs	r3, #250	; 0xfa
    5202:	009b      	lsls	r3, r3, #2
    5204:	0018      	movs	r0, r3
    5206:	4b02      	ldr	r3, [pc, #8]	; (5210 <sensor_task+0x1c>)
    5208:	4798      	blx	r3
    520a:	e7f9      	b.n	5200 <sensor_task+0xc>
    520c:	0000518d 	.word	0x0000518d
    5210:	00006119 	.word	0x00006119

00005214 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    5214:	b590      	push	{r4, r7, lr}
    5216:	b085      	sub	sp, #20
    5218:	af02      	add	r7, sp, #8
    521a:	0002      	movs	r2, r0
    521c:	6039      	str	r1, [r7, #0]
    521e:	1dbb      	adds	r3, r7, #6
    5220:	801a      	strh	r2, [r3, #0]
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    5222:	1dbb      	adds	r3, r7, #6
    5224:	881a      	ldrh	r2, [r3, #0]
    5226:	4906      	ldr	r1, [pc, #24]	; (5240 <create_sensor_task+0x2c>)
    5228:	4806      	ldr	r0, [pc, #24]	; (5244 <create_sensor_task+0x30>)
    522a:	4b07      	ldr	r3, [pc, #28]	; (5248 <create_sensor_task+0x34>)
    522c:	9301      	str	r3, [sp, #4]
    522e:	683b      	ldr	r3, [r7, #0]
    5230:	9300      	str	r3, [sp, #0]
    5232:	2300      	movs	r3, #0
    5234:	4c05      	ldr	r4, [pc, #20]	; (524c <create_sensor_task+0x38>)
    5236:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
    5238:	46c0      	nop			; (mov r8, r8)
    523a:	46bd      	mov	sp, r7
    523c:	b003      	add	sp, #12
    523e:	bd90      	pop	{r4, r7, pc}
    5240:	0000dc0c 	.word	0x0000dc0c
    5244:	000051f5 	.word	0x000051f5
    5248:	20005310 	.word	0x20005310
    524c:	00005dbd 	.word	0x00005dbd

00005250 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    5250:	b580      	push	{r7, lr}
    5252:	b082      	sub	sp, #8
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	3308      	adds	r3, #8
    525c:	001a      	movs	r2, r3
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	2201      	movs	r2, #1
    5266:	4252      	negs	r2, r2
    5268:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	3308      	adds	r3, #8
    526e:	001a      	movs	r2, r3
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5274:	687b      	ldr	r3, [r7, #4]
    5276:	3308      	adds	r3, #8
    5278:	001a      	movs	r2, r3
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	2200      	movs	r2, #0
    5282:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    5284:	46c0      	nop			; (mov r8, r8)
    5286:	46bd      	mov	sp, r7
    5288:	b002      	add	sp, #8
    528a:	bd80      	pop	{r7, pc}

0000528c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    528c:	b580      	push	{r7, lr}
    528e:	b082      	sub	sp, #8
    5290:	af00      	add	r7, sp, #0
    5292:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    5294:	687b      	ldr	r3, [r7, #4]
    5296:	2200      	movs	r2, #0
    5298:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    529a:	46c0      	nop			; (mov r8, r8)
    529c:	46bd      	mov	sp, r7
    529e:	b002      	add	sp, #8
    52a0:	bd80      	pop	{r7, pc}

000052a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    52a2:	b580      	push	{r7, lr}
    52a4:	b084      	sub	sp, #16
    52a6:	af00      	add	r7, sp, #0
    52a8:	6078      	str	r0, [r7, #4]
    52aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	685b      	ldr	r3, [r3, #4]
    52b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    52b2:	683b      	ldr	r3, [r7, #0]
    52b4:	68fa      	ldr	r2, [r7, #12]
    52b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    52b8:	68fb      	ldr	r3, [r7, #12]
    52ba:	689a      	ldr	r2, [r3, #8]
    52bc:	683b      	ldr	r3, [r7, #0]
    52be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    52c0:	68fb      	ldr	r3, [r7, #12]
    52c2:	689b      	ldr	r3, [r3, #8]
    52c4:	683a      	ldr	r2, [r7, #0]
    52c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    52c8:	68fb      	ldr	r3, [r7, #12]
    52ca:	683a      	ldr	r2, [r7, #0]
    52cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	687a      	ldr	r2, [r7, #4]
    52d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	1c5a      	adds	r2, r3, #1
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	601a      	str	r2, [r3, #0]
}
    52de:	46c0      	nop			; (mov r8, r8)
    52e0:	46bd      	mov	sp, r7
    52e2:	b004      	add	sp, #16
    52e4:	bd80      	pop	{r7, pc}

000052e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    52e6:	b580      	push	{r7, lr}
    52e8:	b084      	sub	sp, #16
    52ea:	af00      	add	r7, sp, #0
    52ec:	6078      	str	r0, [r7, #4]
    52ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	681b      	ldr	r3, [r3, #0]
    52f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    52f6:	68bb      	ldr	r3, [r7, #8]
    52f8:	3301      	adds	r3, #1
    52fa:	d103      	bne.n	5304 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	691b      	ldr	r3, [r3, #16]
    5300:	60fb      	str	r3, [r7, #12]
    5302:	e00c      	b.n	531e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	3308      	adds	r3, #8
    5308:	60fb      	str	r3, [r7, #12]
    530a:	e002      	b.n	5312 <vListInsert+0x2c>
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	685b      	ldr	r3, [r3, #4]
    5310:	60fb      	str	r3, [r7, #12]
    5312:	68fb      	ldr	r3, [r7, #12]
    5314:	685b      	ldr	r3, [r3, #4]
    5316:	681a      	ldr	r2, [r3, #0]
    5318:	68bb      	ldr	r3, [r7, #8]
    531a:	429a      	cmp	r2, r3
    531c:	d9f6      	bls.n	530c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    531e:	68fb      	ldr	r3, [r7, #12]
    5320:	685a      	ldr	r2, [r3, #4]
    5322:	683b      	ldr	r3, [r7, #0]
    5324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    5326:	683b      	ldr	r3, [r7, #0]
    5328:	685b      	ldr	r3, [r3, #4]
    532a:	683a      	ldr	r2, [r7, #0]
    532c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    532e:	683b      	ldr	r3, [r7, #0]
    5330:	68fa      	ldr	r2, [r7, #12]
    5332:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	683a      	ldr	r2, [r7, #0]
    5338:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    533a:	683b      	ldr	r3, [r7, #0]
    533c:	687a      	ldr	r2, [r7, #4]
    533e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	1c5a      	adds	r2, r3, #1
    5346:	687b      	ldr	r3, [r7, #4]
    5348:	601a      	str	r2, [r3, #0]
}
    534a:	46c0      	nop			; (mov r8, r8)
    534c:	46bd      	mov	sp, r7
    534e:	b004      	add	sp, #16
    5350:	bd80      	pop	{r7, pc}

00005352 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    5352:	b580      	push	{r7, lr}
    5354:	b084      	sub	sp, #16
    5356:	af00      	add	r7, sp, #0
    5358:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	691b      	ldr	r3, [r3, #16]
    535e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	687a      	ldr	r2, [r7, #4]
    5366:	6892      	ldr	r2, [r2, #8]
    5368:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	689b      	ldr	r3, [r3, #8]
    536e:	687a      	ldr	r2, [r7, #4]
    5370:	6852      	ldr	r2, [r2, #4]
    5372:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    5374:	68fb      	ldr	r3, [r7, #12]
    5376:	685a      	ldr	r2, [r3, #4]
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	429a      	cmp	r2, r3
    537c:	d103      	bne.n	5386 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    537e:	687b      	ldr	r3, [r7, #4]
    5380:	689a      	ldr	r2, [r3, #8]
    5382:	68fb      	ldr	r3, [r7, #12]
    5384:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	2200      	movs	r2, #0
    538a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    538c:	68fb      	ldr	r3, [r7, #12]
    538e:	681b      	ldr	r3, [r3, #0]
    5390:	1e5a      	subs	r2, r3, #1
    5392:	68fb      	ldr	r3, [r7, #12]
    5394:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    5396:	68fb      	ldr	r3, [r7, #12]
    5398:	681b      	ldr	r3, [r3, #0]
}
    539a:	0018      	movs	r0, r3
    539c:	46bd      	mov	sp, r7
    539e:	b004      	add	sp, #16
    53a0:	bd80      	pop	{r7, pc}
	...

000053a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    53a4:	b580      	push	{r7, lr}
    53a6:	b084      	sub	sp, #16
    53a8:	af00      	add	r7, sp, #0
    53aa:	6078      	str	r0, [r7, #4]
    53ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    53b2:	68fb      	ldr	r3, [r7, #12]
    53b4:	2b00      	cmp	r3, #0
    53b6:	d101      	bne.n	53bc <xQueueGenericReset+0x18>
    53b8:	b672      	cpsid	i
    53ba:	e7fe      	b.n	53ba <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    53bc:	4b23      	ldr	r3, [pc, #140]	; (544c <xQueueGenericReset+0xa8>)
    53be:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    53c0:	68fb      	ldr	r3, [r7, #12]
    53c2:	681a      	ldr	r2, [r3, #0]
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    53cc:	434b      	muls	r3, r1
    53ce:	18d2      	adds	r2, r2, r3
    53d0:	68fb      	ldr	r3, [r7, #12]
    53d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    53d4:	68fb      	ldr	r3, [r7, #12]
    53d6:	2200      	movs	r2, #0
    53d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    53da:	68fb      	ldr	r3, [r7, #12]
    53dc:	681a      	ldr	r2, [r3, #0]
    53de:	68fb      	ldr	r3, [r7, #12]
    53e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    53e2:	68fb      	ldr	r3, [r7, #12]
    53e4:	681a      	ldr	r2, [r3, #0]
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    53ea:	1e59      	subs	r1, r3, #1
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    53f0:	434b      	muls	r3, r1
    53f2:	18d2      	adds	r2, r2, r3
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    53f8:	68fb      	ldr	r3, [r7, #12]
    53fa:	2244      	movs	r2, #68	; 0x44
    53fc:	21ff      	movs	r1, #255	; 0xff
    53fe:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    5400:	68fb      	ldr	r3, [r7, #12]
    5402:	2245      	movs	r2, #69	; 0x45
    5404:	21ff      	movs	r1, #255	; 0xff
    5406:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    5408:	683b      	ldr	r3, [r7, #0]
    540a:	2b00      	cmp	r3, #0
    540c:	d10d      	bne.n	542a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	691b      	ldr	r3, [r3, #16]
    5412:	2b00      	cmp	r3, #0
    5414:	d013      	beq.n	543e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5416:	68fb      	ldr	r3, [r7, #12]
    5418:	3310      	adds	r3, #16
    541a:	0018      	movs	r0, r3
    541c:	4b0c      	ldr	r3, [pc, #48]	; (5450 <xQueueGenericReset+0xac>)
    541e:	4798      	blx	r3
    5420:	1e03      	subs	r3, r0, #0
    5422:	d00c      	beq.n	543e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5424:	4b0b      	ldr	r3, [pc, #44]	; (5454 <xQueueGenericReset+0xb0>)
    5426:	4798      	blx	r3
    5428:	e009      	b.n	543e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    542a:	68fb      	ldr	r3, [r7, #12]
    542c:	3310      	adds	r3, #16
    542e:	0018      	movs	r0, r3
    5430:	4b09      	ldr	r3, [pc, #36]	; (5458 <xQueueGenericReset+0xb4>)
    5432:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5434:	68fb      	ldr	r3, [r7, #12]
    5436:	3324      	adds	r3, #36	; 0x24
    5438:	0018      	movs	r0, r3
    543a:	4b07      	ldr	r3, [pc, #28]	; (5458 <xQueueGenericReset+0xb4>)
    543c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    543e:	4b07      	ldr	r3, [pc, #28]	; (545c <xQueueGenericReset+0xb8>)
    5440:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    5442:	2301      	movs	r3, #1
}
    5444:	0018      	movs	r0, r3
    5446:	46bd      	mov	sp, r7
    5448:	b004      	add	sp, #16
    544a:	bd80      	pop	{r7, pc}
    544c:	00001f51 	.word	0x00001f51
    5450:	00006945 	.word	0x00006945
    5454:	00001f31 	.word	0x00001f31
    5458:	00005251 	.word	0x00005251
    545c:	00001f75 	.word	0x00001f75

00005460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    5460:	b590      	push	{r4, r7, lr}
    5462:	b08b      	sub	sp, #44	; 0x2c
    5464:	af02      	add	r7, sp, #8
    5466:	60f8      	str	r0, [r7, #12]
    5468:	60b9      	str	r1, [r7, #8]
    546a:	1dfb      	adds	r3, r7, #7
    546c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    546e:	68fb      	ldr	r3, [r7, #12]
    5470:	2b00      	cmp	r3, #0
    5472:	d101      	bne.n	5478 <xQueueGenericCreate+0x18>
    5474:	b672      	cpsid	i
    5476:	e7fe      	b.n	5476 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    5478:	68bb      	ldr	r3, [r7, #8]
    547a:	2b00      	cmp	r3, #0
    547c:	d102      	bne.n	5484 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    547e:	2300      	movs	r3, #0
    5480:	61fb      	str	r3, [r7, #28]
    5482:	e003      	b.n	548c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5484:	68fb      	ldr	r3, [r7, #12]
    5486:	68ba      	ldr	r2, [r7, #8]
    5488:	4353      	muls	r3, r2
    548a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    548c:	69fb      	ldr	r3, [r7, #28]
    548e:	3354      	adds	r3, #84	; 0x54
    5490:	0018      	movs	r0, r3
    5492:	4b0c      	ldr	r3, [pc, #48]	; (54c4 <xQueueGenericCreate+0x64>)
    5494:	4798      	blx	r3
    5496:	0003      	movs	r3, r0
    5498:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    549a:	69bb      	ldr	r3, [r7, #24]
    549c:	2b00      	cmp	r3, #0
    549e:	d00c      	beq.n	54ba <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    54a0:	69bb      	ldr	r3, [r7, #24]
    54a2:	3354      	adds	r3, #84	; 0x54
    54a4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    54a6:	1dfb      	adds	r3, r7, #7
    54a8:	781c      	ldrb	r4, [r3, #0]
    54aa:	697a      	ldr	r2, [r7, #20]
    54ac:	68b9      	ldr	r1, [r7, #8]
    54ae:	68f8      	ldr	r0, [r7, #12]
    54b0:	69bb      	ldr	r3, [r7, #24]
    54b2:	9300      	str	r3, [sp, #0]
    54b4:	0023      	movs	r3, r4
    54b6:	4c04      	ldr	r4, [pc, #16]	; (54c8 <xQueueGenericCreate+0x68>)
    54b8:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    54ba:	69bb      	ldr	r3, [r7, #24]
	}
    54bc:	0018      	movs	r0, r3
    54be:	46bd      	mov	sp, r7
    54c0:	b009      	add	sp, #36	; 0x24
    54c2:	bd90      	pop	{r4, r7, pc}
    54c4:	0000207d 	.word	0x0000207d
    54c8:	000054cd 	.word	0x000054cd

000054cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b084      	sub	sp, #16
    54d0:	af00      	add	r7, sp, #0
    54d2:	60f8      	str	r0, [r7, #12]
    54d4:	60b9      	str	r1, [r7, #8]
    54d6:	607a      	str	r2, [r7, #4]
    54d8:	001a      	movs	r2, r3
    54da:	1cfb      	adds	r3, r7, #3
    54dc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    54de:	68bb      	ldr	r3, [r7, #8]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d103      	bne.n	54ec <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    54e4:	69bb      	ldr	r3, [r7, #24]
    54e6:	69ba      	ldr	r2, [r7, #24]
    54e8:	601a      	str	r2, [r3, #0]
    54ea:	e002      	b.n	54f2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    54ec:	69bb      	ldr	r3, [r7, #24]
    54ee:	687a      	ldr	r2, [r7, #4]
    54f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    54f2:	69bb      	ldr	r3, [r7, #24]
    54f4:	68fa      	ldr	r2, [r7, #12]
    54f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    54f8:	69bb      	ldr	r3, [r7, #24]
    54fa:	68ba      	ldr	r2, [r7, #8]
    54fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    54fe:	69bb      	ldr	r3, [r7, #24]
    5500:	2101      	movs	r1, #1
    5502:	0018      	movs	r0, r3
    5504:	4b06      	ldr	r3, [pc, #24]	; (5520 <prvInitialiseNewQueue+0x54>)
    5506:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    5508:	69bb      	ldr	r3, [r7, #24]
    550a:	1cfa      	adds	r2, r7, #3
    550c:	2150      	movs	r1, #80	; 0x50
    550e:	7812      	ldrb	r2, [r2, #0]
    5510:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    5512:	69bb      	ldr	r3, [r7, #24]
    5514:	2200      	movs	r2, #0
    5516:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    5518:	46c0      	nop			; (mov r8, r8)
    551a:	46bd      	mov	sp, r7
    551c:	b004      	add	sp, #16
    551e:	bd80      	pop	{r7, pc}
    5520:	000053a5 	.word	0x000053a5

00005524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    5524:	b580      	push	{r7, lr}
    5526:	b08a      	sub	sp, #40	; 0x28
    5528:	af00      	add	r7, sp, #0
    552a:	60f8      	str	r0, [r7, #12]
    552c:	60b9      	str	r1, [r7, #8]
    552e:	607a      	str	r2, [r7, #4]
    5530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    5532:	2300      	movs	r3, #0
    5534:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    553a:	6a3b      	ldr	r3, [r7, #32]
    553c:	2b00      	cmp	r3, #0
    553e:	d101      	bne.n	5544 <xQueueGenericSend+0x20>
    5540:	b672      	cpsid	i
    5542:	e7fe      	b.n	5542 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5544:	68bb      	ldr	r3, [r7, #8]
    5546:	2b00      	cmp	r3, #0
    5548:	d103      	bne.n	5552 <xQueueGenericSend+0x2e>
    554a:	6a3b      	ldr	r3, [r7, #32]
    554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    554e:	2b00      	cmp	r3, #0
    5550:	d101      	bne.n	5556 <xQueueGenericSend+0x32>
    5552:	2301      	movs	r3, #1
    5554:	e000      	b.n	5558 <xQueueGenericSend+0x34>
    5556:	2300      	movs	r3, #0
    5558:	2b00      	cmp	r3, #0
    555a:	d101      	bne.n	5560 <xQueueGenericSend+0x3c>
    555c:	b672      	cpsid	i
    555e:	e7fe      	b.n	555e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    5560:	683b      	ldr	r3, [r7, #0]
    5562:	2b02      	cmp	r3, #2
    5564:	d103      	bne.n	556e <xQueueGenericSend+0x4a>
    5566:	6a3b      	ldr	r3, [r7, #32]
    5568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    556a:	2b01      	cmp	r3, #1
    556c:	d101      	bne.n	5572 <xQueueGenericSend+0x4e>
    556e:	2301      	movs	r3, #1
    5570:	e000      	b.n	5574 <xQueueGenericSend+0x50>
    5572:	2300      	movs	r3, #0
    5574:	2b00      	cmp	r3, #0
    5576:	d101      	bne.n	557c <xQueueGenericSend+0x58>
    5578:	b672      	cpsid	i
    557a:	e7fe      	b.n	557a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    557c:	4b53      	ldr	r3, [pc, #332]	; (56cc <xQueueGenericSend+0x1a8>)
    557e:	4798      	blx	r3
    5580:	1e03      	subs	r3, r0, #0
    5582:	d102      	bne.n	558a <xQueueGenericSend+0x66>
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	2b00      	cmp	r3, #0
    5588:	d101      	bne.n	558e <xQueueGenericSend+0x6a>
    558a:	2301      	movs	r3, #1
    558c:	e000      	b.n	5590 <xQueueGenericSend+0x6c>
    558e:	2300      	movs	r3, #0
    5590:	2b00      	cmp	r3, #0
    5592:	d101      	bne.n	5598 <xQueueGenericSend+0x74>
    5594:	b672      	cpsid	i
    5596:	e7fe      	b.n	5596 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5598:	4b4d      	ldr	r3, [pc, #308]	; (56d0 <xQueueGenericSend+0x1ac>)
    559a:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    559c:	6a3b      	ldr	r3, [r7, #32]
    559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    55a0:	6a3b      	ldr	r3, [r7, #32]
    55a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    55a4:	429a      	cmp	r2, r3
    55a6:	d302      	bcc.n	55ae <xQueueGenericSend+0x8a>
    55a8:	683b      	ldr	r3, [r7, #0]
    55aa:	2b02      	cmp	r3, #2
    55ac:	d12d      	bne.n	560a <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    55ae:	683a      	ldr	r2, [r7, #0]
    55b0:	68b9      	ldr	r1, [r7, #8]
    55b2:	6a3b      	ldr	r3, [r7, #32]
    55b4:	0018      	movs	r0, r3
    55b6:	4b47      	ldr	r3, [pc, #284]	; (56d4 <xQueueGenericSend+0x1b0>)
    55b8:	4798      	blx	r3
    55ba:	0003      	movs	r3, r0
    55bc:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    55be:	6a3b      	ldr	r3, [r7, #32]
    55c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    55c2:	2b00      	cmp	r3, #0
    55c4:	d00a      	beq.n	55dc <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    55c6:	683a      	ldr	r2, [r7, #0]
    55c8:	6a3b      	ldr	r3, [r7, #32]
    55ca:	0011      	movs	r1, r2
    55cc:	0018      	movs	r0, r3
    55ce:	4b42      	ldr	r3, [pc, #264]	; (56d8 <xQueueGenericSend+0x1b4>)
    55d0:	4798      	blx	r3
    55d2:	1e03      	subs	r3, r0, #0
    55d4:	d015      	beq.n	5602 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    55d6:	4b41      	ldr	r3, [pc, #260]	; (56dc <xQueueGenericSend+0x1b8>)
    55d8:	4798      	blx	r3
    55da:	e012      	b.n	5602 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    55dc:	6a3b      	ldr	r3, [r7, #32]
    55de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    55e0:	2b00      	cmp	r3, #0
    55e2:	d009      	beq.n	55f8 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    55e4:	6a3b      	ldr	r3, [r7, #32]
    55e6:	3324      	adds	r3, #36	; 0x24
    55e8:	0018      	movs	r0, r3
    55ea:	4b3d      	ldr	r3, [pc, #244]	; (56e0 <xQueueGenericSend+0x1bc>)
    55ec:	4798      	blx	r3
    55ee:	1e03      	subs	r3, r0, #0
    55f0:	d007      	beq.n	5602 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    55f2:	4b3a      	ldr	r3, [pc, #232]	; (56dc <xQueueGenericSend+0x1b8>)
    55f4:	4798      	blx	r3
    55f6:	e004      	b.n	5602 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    55f8:	69fb      	ldr	r3, [r7, #28]
    55fa:	2b00      	cmp	r3, #0
    55fc:	d001      	beq.n	5602 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    55fe:	4b37      	ldr	r3, [pc, #220]	; (56dc <xQueueGenericSend+0x1b8>)
    5600:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    5602:	4b38      	ldr	r3, [pc, #224]	; (56e4 <xQueueGenericSend+0x1c0>)
    5604:	4798      	blx	r3
				return pdPASS;
    5606:	2301      	movs	r3, #1
    5608:	e05c      	b.n	56c4 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	2b00      	cmp	r3, #0
    560e:	d103      	bne.n	5618 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5610:	4b34      	ldr	r3, [pc, #208]	; (56e4 <xQueueGenericSend+0x1c0>)
    5612:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    5614:	2300      	movs	r3, #0
    5616:	e055      	b.n	56c4 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    5618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    561a:	2b00      	cmp	r3, #0
    561c:	d106      	bne.n	562c <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    561e:	2314      	movs	r3, #20
    5620:	18fb      	adds	r3, r7, r3
    5622:	0018      	movs	r0, r3
    5624:	4b30      	ldr	r3, [pc, #192]	; (56e8 <xQueueGenericSend+0x1c4>)
    5626:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    5628:	2301      	movs	r3, #1
    562a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    562c:	4b2d      	ldr	r3, [pc, #180]	; (56e4 <xQueueGenericSend+0x1c0>)
    562e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5630:	4b2e      	ldr	r3, [pc, #184]	; (56ec <xQueueGenericSend+0x1c8>)
    5632:	4798      	blx	r3
		prvLockQueue( pxQueue );
    5634:	4b26      	ldr	r3, [pc, #152]	; (56d0 <xQueueGenericSend+0x1ac>)
    5636:	4798      	blx	r3
    5638:	6a3b      	ldr	r3, [r7, #32]
    563a:	2244      	movs	r2, #68	; 0x44
    563c:	5c9b      	ldrb	r3, [r3, r2]
    563e:	b25b      	sxtb	r3, r3
    5640:	3301      	adds	r3, #1
    5642:	d103      	bne.n	564c <xQueueGenericSend+0x128>
    5644:	6a3b      	ldr	r3, [r7, #32]
    5646:	2244      	movs	r2, #68	; 0x44
    5648:	2100      	movs	r1, #0
    564a:	5499      	strb	r1, [r3, r2]
    564c:	6a3b      	ldr	r3, [r7, #32]
    564e:	2245      	movs	r2, #69	; 0x45
    5650:	5c9b      	ldrb	r3, [r3, r2]
    5652:	b25b      	sxtb	r3, r3
    5654:	3301      	adds	r3, #1
    5656:	d103      	bne.n	5660 <xQueueGenericSend+0x13c>
    5658:	6a3b      	ldr	r3, [r7, #32]
    565a:	2245      	movs	r2, #69	; 0x45
    565c:	2100      	movs	r1, #0
    565e:	5499      	strb	r1, [r3, r2]
    5660:	4b20      	ldr	r3, [pc, #128]	; (56e4 <xQueueGenericSend+0x1c0>)
    5662:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5664:	1d3a      	adds	r2, r7, #4
    5666:	2314      	movs	r3, #20
    5668:	18fb      	adds	r3, r7, r3
    566a:	0011      	movs	r1, r2
    566c:	0018      	movs	r0, r3
    566e:	4b20      	ldr	r3, [pc, #128]	; (56f0 <xQueueGenericSend+0x1cc>)
    5670:	4798      	blx	r3
    5672:	1e03      	subs	r3, r0, #0
    5674:	d11f      	bne.n	56b6 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5676:	6a3b      	ldr	r3, [r7, #32]
    5678:	0018      	movs	r0, r3
    567a:	4b1e      	ldr	r3, [pc, #120]	; (56f4 <xQueueGenericSend+0x1d0>)
    567c:	4798      	blx	r3
    567e:	1e03      	subs	r3, r0, #0
    5680:	d012      	beq.n	56a8 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5682:	6a3b      	ldr	r3, [r7, #32]
    5684:	3310      	adds	r3, #16
    5686:	687a      	ldr	r2, [r7, #4]
    5688:	0011      	movs	r1, r2
    568a:	0018      	movs	r0, r3
    568c:	4b1a      	ldr	r3, [pc, #104]	; (56f8 <xQueueGenericSend+0x1d4>)
    568e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    5690:	6a3b      	ldr	r3, [r7, #32]
    5692:	0018      	movs	r0, r3
    5694:	4b19      	ldr	r3, [pc, #100]	; (56fc <xQueueGenericSend+0x1d8>)
    5696:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    5698:	4b19      	ldr	r3, [pc, #100]	; (5700 <xQueueGenericSend+0x1dc>)
    569a:	4798      	blx	r3
    569c:	1e03      	subs	r3, r0, #0
    569e:	d000      	beq.n	56a2 <xQueueGenericSend+0x17e>
    56a0:	e77a      	b.n	5598 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    56a2:	4b0e      	ldr	r3, [pc, #56]	; (56dc <xQueueGenericSend+0x1b8>)
    56a4:	4798      	blx	r3
    56a6:	e777      	b.n	5598 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    56a8:	6a3b      	ldr	r3, [r7, #32]
    56aa:	0018      	movs	r0, r3
    56ac:	4b13      	ldr	r3, [pc, #76]	; (56fc <xQueueGenericSend+0x1d8>)
    56ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
    56b0:	4b13      	ldr	r3, [pc, #76]	; (5700 <xQueueGenericSend+0x1dc>)
    56b2:	4798      	blx	r3
    56b4:	e770      	b.n	5598 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    56b6:	6a3b      	ldr	r3, [r7, #32]
    56b8:	0018      	movs	r0, r3
    56ba:	4b10      	ldr	r3, [pc, #64]	; (56fc <xQueueGenericSend+0x1d8>)
    56bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    56be:	4b10      	ldr	r3, [pc, #64]	; (5700 <xQueueGenericSend+0x1dc>)
    56c0:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    56c2:	2300      	movs	r3, #0
		}
	}
}
    56c4:	0018      	movs	r0, r3
    56c6:	46bd      	mov	sp, r7
    56c8:	b00a      	add	sp, #40	; 0x28
    56ca:	bd80      	pop	{r7, pc}
    56cc:	00006c85 	.word	0x00006c85
    56d0:	00001f51 	.word	0x00001f51
    56d4:	000059c5 	.word	0x000059c5
    56d8:	00005d19 	.word	0x00005d19
    56dc:	00001f31 	.word	0x00001f31
    56e0:	00006945 	.word	0x00006945
    56e4:	00001f75 	.word	0x00001f75
    56e8:	00006a05 	.word	0x00006a05
    56ec:	000064c5 	.word	0x000064c5
    56f0:	00006a2d 	.word	0x00006a2d
    56f4:	00005c19 	.word	0x00005c19
    56f8:	000068ad 	.word	0x000068ad
    56fc:	00005af5 	.word	0x00005af5
    5700:	000064dd 	.word	0x000064dd

00005704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    5704:	b580      	push	{r7, lr}
    5706:	b088      	sub	sp, #32
    5708:	af00      	add	r7, sp, #0
    570a:	60f8      	str	r0, [r7, #12]
    570c:	60b9      	str	r1, [r7, #8]
    570e:	607a      	str	r2, [r7, #4]
    5710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    5716:	69bb      	ldr	r3, [r7, #24]
    5718:	2b00      	cmp	r3, #0
    571a:	d101      	bne.n	5720 <xQueueGenericSendFromISR+0x1c>
    571c:	b672      	cpsid	i
    571e:	e7fe      	b.n	571e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5720:	68bb      	ldr	r3, [r7, #8]
    5722:	2b00      	cmp	r3, #0
    5724:	d103      	bne.n	572e <xQueueGenericSendFromISR+0x2a>
    5726:	69bb      	ldr	r3, [r7, #24]
    5728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    572a:	2b00      	cmp	r3, #0
    572c:	d101      	bne.n	5732 <xQueueGenericSendFromISR+0x2e>
    572e:	2301      	movs	r3, #1
    5730:	e000      	b.n	5734 <xQueueGenericSendFromISR+0x30>
    5732:	2300      	movs	r3, #0
    5734:	2b00      	cmp	r3, #0
    5736:	d101      	bne.n	573c <xQueueGenericSendFromISR+0x38>
    5738:	b672      	cpsid	i
    573a:	e7fe      	b.n	573a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    573c:	683b      	ldr	r3, [r7, #0]
    573e:	2b02      	cmp	r3, #2
    5740:	d103      	bne.n	574a <xQueueGenericSendFromISR+0x46>
    5742:	69bb      	ldr	r3, [r7, #24]
    5744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5746:	2b01      	cmp	r3, #1
    5748:	d101      	bne.n	574e <xQueueGenericSendFromISR+0x4a>
    574a:	2301      	movs	r3, #1
    574c:	e000      	b.n	5750 <xQueueGenericSendFromISR+0x4c>
    574e:	2300      	movs	r3, #0
    5750:	2b00      	cmp	r3, #0
    5752:	d101      	bne.n	5758 <xQueueGenericSendFromISR+0x54>
    5754:	b672      	cpsid	i
    5756:	e7fe      	b.n	5756 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5758:	4b2d      	ldr	r3, [pc, #180]	; (5810 <xQueueGenericSendFromISR+0x10c>)
    575a:	4798      	blx	r3
    575c:	0003      	movs	r3, r0
    575e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5760:	69bb      	ldr	r3, [r7, #24]
    5762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5764:	69bb      	ldr	r3, [r7, #24]
    5766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5768:	429a      	cmp	r2, r3
    576a:	d302      	bcc.n	5772 <xQueueGenericSendFromISR+0x6e>
    576c:	683b      	ldr	r3, [r7, #0]
    576e:	2b02      	cmp	r3, #2
    5770:	d142      	bne.n	57f8 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    5772:	2313      	movs	r3, #19
    5774:	18fb      	adds	r3, r7, r3
    5776:	69ba      	ldr	r2, [r7, #24]
    5778:	2145      	movs	r1, #69	; 0x45
    577a:	5c52      	ldrb	r2, [r2, r1]
    577c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    577e:	683a      	ldr	r2, [r7, #0]
    5780:	68b9      	ldr	r1, [r7, #8]
    5782:	69bb      	ldr	r3, [r7, #24]
    5784:	0018      	movs	r0, r3
    5786:	4b23      	ldr	r3, [pc, #140]	; (5814 <xQueueGenericSendFromISR+0x110>)
    5788:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    578a:	2313      	movs	r3, #19
    578c:	18fb      	adds	r3, r7, r3
    578e:	781b      	ldrb	r3, [r3, #0]
    5790:	b25b      	sxtb	r3, r3
    5792:	3301      	adds	r3, #1
    5794:	d124      	bne.n	57e0 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    5796:	69bb      	ldr	r3, [r7, #24]
    5798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    579a:	2b00      	cmp	r3, #0
    579c:	d00e      	beq.n	57bc <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    579e:	683a      	ldr	r2, [r7, #0]
    57a0:	69bb      	ldr	r3, [r7, #24]
    57a2:	0011      	movs	r1, r2
    57a4:	0018      	movs	r0, r3
    57a6:	4b1c      	ldr	r3, [pc, #112]	; (5818 <xQueueGenericSendFromISR+0x114>)
    57a8:	4798      	blx	r3
    57aa:	1e03      	subs	r3, r0, #0
    57ac:	d021      	beq.n	57f2 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	2b00      	cmp	r3, #0
    57b2:	d01e      	beq.n	57f2 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	2201      	movs	r2, #1
    57b8:	601a      	str	r2, [r3, #0]
    57ba:	e01a      	b.n	57f2 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    57bc:	69bb      	ldr	r3, [r7, #24]
    57be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57c0:	2b00      	cmp	r3, #0
    57c2:	d016      	beq.n	57f2 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    57c4:	69bb      	ldr	r3, [r7, #24]
    57c6:	3324      	adds	r3, #36	; 0x24
    57c8:	0018      	movs	r0, r3
    57ca:	4b14      	ldr	r3, [pc, #80]	; (581c <xQueueGenericSendFromISR+0x118>)
    57cc:	4798      	blx	r3
    57ce:	1e03      	subs	r3, r0, #0
    57d0:	d00f      	beq.n	57f2 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	2b00      	cmp	r3, #0
    57d6:	d00c      	beq.n	57f2 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	2201      	movs	r2, #1
    57dc:	601a      	str	r2, [r3, #0]
    57de:	e008      	b.n	57f2 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    57e0:	2313      	movs	r3, #19
    57e2:	18fb      	adds	r3, r7, r3
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	3301      	adds	r3, #1
    57e8:	b2db      	uxtb	r3, r3
    57ea:	b259      	sxtb	r1, r3
    57ec:	69bb      	ldr	r3, [r7, #24]
    57ee:	2245      	movs	r2, #69	; 0x45
    57f0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    57f2:	2301      	movs	r3, #1
    57f4:	61fb      	str	r3, [r7, #28]
		{
    57f6:	e001      	b.n	57fc <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    57f8:	2300      	movs	r3, #0
    57fa:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    57fc:	697b      	ldr	r3, [r7, #20]
    57fe:	0018      	movs	r0, r3
    5800:	4b07      	ldr	r3, [pc, #28]	; (5820 <xQueueGenericSendFromISR+0x11c>)
    5802:	4798      	blx	r3

	return xReturn;
    5804:	69fb      	ldr	r3, [r7, #28]
}
    5806:	0018      	movs	r0, r3
    5808:	46bd      	mov	sp, r7
    580a:	b008      	add	sp, #32
    580c:	bd80      	pop	{r7, pc}
    580e:	46c0      	nop			; (mov r8, r8)
    5810:	00001fa5 	.word	0x00001fa5
    5814:	000059c5 	.word	0x000059c5
    5818:	00005d19 	.word	0x00005d19
    581c:	00006945 	.word	0x00006945
    5820:	00001fb1 	.word	0x00001fb1

00005824 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    5824:	b580      	push	{r7, lr}
    5826:	b08a      	sub	sp, #40	; 0x28
    5828:	af00      	add	r7, sp, #0
    582a:	60f8      	str	r0, [r7, #12]
    582c:	60b9      	str	r1, [r7, #8]
    582e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    5830:	2300      	movs	r3, #0
    5832:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5834:	68fb      	ldr	r3, [r7, #12]
    5836:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    5838:	6a3b      	ldr	r3, [r7, #32]
    583a:	2b00      	cmp	r3, #0
    583c:	d101      	bne.n	5842 <xQueueReceive+0x1e>
    583e:	b672      	cpsid	i
    5840:	e7fe      	b.n	5840 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5842:	68bb      	ldr	r3, [r7, #8]
    5844:	2b00      	cmp	r3, #0
    5846:	d103      	bne.n	5850 <xQueueReceive+0x2c>
    5848:	6a3b      	ldr	r3, [r7, #32]
    584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    584c:	2b00      	cmp	r3, #0
    584e:	d101      	bne.n	5854 <xQueueReceive+0x30>
    5850:	2301      	movs	r3, #1
    5852:	e000      	b.n	5856 <xQueueReceive+0x32>
    5854:	2300      	movs	r3, #0
    5856:	2b00      	cmp	r3, #0
    5858:	d101      	bne.n	585e <xQueueReceive+0x3a>
    585a:	b672      	cpsid	i
    585c:	e7fe      	b.n	585c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    585e:	4b4c      	ldr	r3, [pc, #304]	; (5990 <xQueueReceive+0x16c>)
    5860:	4798      	blx	r3
    5862:	1e03      	subs	r3, r0, #0
    5864:	d102      	bne.n	586c <xQueueReceive+0x48>
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	2b00      	cmp	r3, #0
    586a:	d101      	bne.n	5870 <xQueueReceive+0x4c>
    586c:	2301      	movs	r3, #1
    586e:	e000      	b.n	5872 <xQueueReceive+0x4e>
    5870:	2300      	movs	r3, #0
    5872:	2b00      	cmp	r3, #0
    5874:	d101      	bne.n	587a <xQueueReceive+0x56>
    5876:	b672      	cpsid	i
    5878:	e7fe      	b.n	5878 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    587a:	4b46      	ldr	r3, [pc, #280]	; (5994 <xQueueReceive+0x170>)
    587c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    587e:	6a3b      	ldr	r3, [r7, #32]
    5880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5882:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5884:	69fb      	ldr	r3, [r7, #28]
    5886:	2b00      	cmp	r3, #0
    5888:	d01a      	beq.n	58c0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    588a:	68ba      	ldr	r2, [r7, #8]
    588c:	6a3b      	ldr	r3, [r7, #32]
    588e:	0011      	movs	r1, r2
    5890:	0018      	movs	r0, r3
    5892:	4b41      	ldr	r3, [pc, #260]	; (5998 <xQueueReceive+0x174>)
    5894:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    5896:	69fb      	ldr	r3, [r7, #28]
    5898:	1e5a      	subs	r2, r3, #1
    589a:	6a3b      	ldr	r3, [r7, #32]
    589c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    589e:	6a3b      	ldr	r3, [r7, #32]
    58a0:	691b      	ldr	r3, [r3, #16]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d008      	beq.n	58b8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    58a6:	6a3b      	ldr	r3, [r7, #32]
    58a8:	3310      	adds	r3, #16
    58aa:	0018      	movs	r0, r3
    58ac:	4b3b      	ldr	r3, [pc, #236]	; (599c <xQueueReceive+0x178>)
    58ae:	4798      	blx	r3
    58b0:	1e03      	subs	r3, r0, #0
    58b2:	d001      	beq.n	58b8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    58b4:	4b3a      	ldr	r3, [pc, #232]	; (59a0 <xQueueReceive+0x17c>)
    58b6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    58b8:	4b3a      	ldr	r3, [pc, #232]	; (59a4 <xQueueReceive+0x180>)
    58ba:	4798      	blx	r3
				return pdPASS;
    58bc:	2301      	movs	r3, #1
    58be:	e062      	b.n	5986 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    58c0:	687b      	ldr	r3, [r7, #4]
    58c2:	2b00      	cmp	r3, #0
    58c4:	d103      	bne.n	58ce <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    58c6:	4b37      	ldr	r3, [pc, #220]	; (59a4 <xQueueReceive+0x180>)
    58c8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    58ca:	2300      	movs	r3, #0
    58cc:	e05b      	b.n	5986 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    58ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58d0:	2b00      	cmp	r3, #0
    58d2:	d106      	bne.n	58e2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    58d4:	2314      	movs	r3, #20
    58d6:	18fb      	adds	r3, r7, r3
    58d8:	0018      	movs	r0, r3
    58da:	4b33      	ldr	r3, [pc, #204]	; (59a8 <xQueueReceive+0x184>)
    58dc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    58de:	2301      	movs	r3, #1
    58e0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    58e2:	4b30      	ldr	r3, [pc, #192]	; (59a4 <xQueueReceive+0x180>)
    58e4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    58e6:	4b31      	ldr	r3, [pc, #196]	; (59ac <xQueueReceive+0x188>)
    58e8:	4798      	blx	r3
		prvLockQueue( pxQueue );
    58ea:	4b2a      	ldr	r3, [pc, #168]	; (5994 <xQueueReceive+0x170>)
    58ec:	4798      	blx	r3
    58ee:	6a3b      	ldr	r3, [r7, #32]
    58f0:	2244      	movs	r2, #68	; 0x44
    58f2:	5c9b      	ldrb	r3, [r3, r2]
    58f4:	b25b      	sxtb	r3, r3
    58f6:	3301      	adds	r3, #1
    58f8:	d103      	bne.n	5902 <xQueueReceive+0xde>
    58fa:	6a3b      	ldr	r3, [r7, #32]
    58fc:	2244      	movs	r2, #68	; 0x44
    58fe:	2100      	movs	r1, #0
    5900:	5499      	strb	r1, [r3, r2]
    5902:	6a3b      	ldr	r3, [r7, #32]
    5904:	2245      	movs	r2, #69	; 0x45
    5906:	5c9b      	ldrb	r3, [r3, r2]
    5908:	b25b      	sxtb	r3, r3
    590a:	3301      	adds	r3, #1
    590c:	d103      	bne.n	5916 <xQueueReceive+0xf2>
    590e:	6a3b      	ldr	r3, [r7, #32]
    5910:	2245      	movs	r2, #69	; 0x45
    5912:	2100      	movs	r1, #0
    5914:	5499      	strb	r1, [r3, r2]
    5916:	4b23      	ldr	r3, [pc, #140]	; (59a4 <xQueueReceive+0x180>)
    5918:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    591a:	1d3a      	adds	r2, r7, #4
    591c:	2314      	movs	r3, #20
    591e:	18fb      	adds	r3, r7, r3
    5920:	0011      	movs	r1, r2
    5922:	0018      	movs	r0, r3
    5924:	4b22      	ldr	r3, [pc, #136]	; (59b0 <xQueueReceive+0x18c>)
    5926:	4798      	blx	r3
    5928:	1e03      	subs	r3, r0, #0
    592a:	d11e      	bne.n	596a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    592c:	6a3b      	ldr	r3, [r7, #32]
    592e:	0018      	movs	r0, r3
    5930:	4b20      	ldr	r3, [pc, #128]	; (59b4 <xQueueReceive+0x190>)
    5932:	4798      	blx	r3
    5934:	1e03      	subs	r3, r0, #0
    5936:	d011      	beq.n	595c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5938:	6a3b      	ldr	r3, [r7, #32]
    593a:	3324      	adds	r3, #36	; 0x24
    593c:	687a      	ldr	r2, [r7, #4]
    593e:	0011      	movs	r1, r2
    5940:	0018      	movs	r0, r3
    5942:	4b1d      	ldr	r3, [pc, #116]	; (59b8 <xQueueReceive+0x194>)
    5944:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    5946:	6a3b      	ldr	r3, [r7, #32]
    5948:	0018      	movs	r0, r3
    594a:	4b1c      	ldr	r3, [pc, #112]	; (59bc <xQueueReceive+0x198>)
    594c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    594e:	4b1c      	ldr	r3, [pc, #112]	; (59c0 <xQueueReceive+0x19c>)
    5950:	4798      	blx	r3
    5952:	1e03      	subs	r3, r0, #0
    5954:	d191      	bne.n	587a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    5956:	4b12      	ldr	r3, [pc, #72]	; (59a0 <xQueueReceive+0x17c>)
    5958:	4798      	blx	r3
    595a:	e78e      	b.n	587a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    595c:	6a3b      	ldr	r3, [r7, #32]
    595e:	0018      	movs	r0, r3
    5960:	4b16      	ldr	r3, [pc, #88]	; (59bc <xQueueReceive+0x198>)
    5962:	4798      	blx	r3
				( void ) xTaskResumeAll();
    5964:	4b16      	ldr	r3, [pc, #88]	; (59c0 <xQueueReceive+0x19c>)
    5966:	4798      	blx	r3
    5968:	e787      	b.n	587a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    596a:	6a3b      	ldr	r3, [r7, #32]
    596c:	0018      	movs	r0, r3
    596e:	4b13      	ldr	r3, [pc, #76]	; (59bc <xQueueReceive+0x198>)
    5970:	4798      	blx	r3
			( void ) xTaskResumeAll();
    5972:	4b13      	ldr	r3, [pc, #76]	; (59c0 <xQueueReceive+0x19c>)
    5974:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5976:	6a3b      	ldr	r3, [r7, #32]
    5978:	0018      	movs	r0, r3
    597a:	4b0e      	ldr	r3, [pc, #56]	; (59b4 <xQueueReceive+0x190>)
    597c:	4798      	blx	r3
    597e:	1e03      	subs	r3, r0, #0
    5980:	d100      	bne.n	5984 <xQueueReceive+0x160>
    5982:	e77a      	b.n	587a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    5984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    5986:	0018      	movs	r0, r3
    5988:	46bd      	mov	sp, r7
    598a:	b00a      	add	sp, #40	; 0x28
    598c:	bd80      	pop	{r7, pc}
    598e:	46c0      	nop			; (mov r8, r8)
    5990:	00006c85 	.word	0x00006c85
    5994:	00001f51 	.word	0x00001f51
    5998:	00005aa5 	.word	0x00005aa5
    599c:	00006945 	.word	0x00006945
    59a0:	00001f31 	.word	0x00001f31
    59a4:	00001f75 	.word	0x00001f75
    59a8:	00006a05 	.word	0x00006a05
    59ac:	000064c5 	.word	0x000064c5
    59b0:	00006a2d 	.word	0x00006a2d
    59b4:	00005be5 	.word	0x00005be5
    59b8:	000068ad 	.word	0x000068ad
    59bc:	00005af5 	.word	0x00005af5
    59c0:	000064dd 	.word	0x000064dd

000059c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    59c4:	b580      	push	{r7, lr}
    59c6:	b086      	sub	sp, #24
    59c8:	af00      	add	r7, sp, #0
    59ca:	60f8      	str	r0, [r7, #12]
    59cc:	60b9      	str	r1, [r7, #8]
    59ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    59d0:	2300      	movs	r3, #0
    59d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    59d4:	68fb      	ldr	r3, [r7, #12]
    59d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    59d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    59de:	2b00      	cmp	r3, #0
    59e0:	d10e      	bne.n	5a00 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    59e2:	68fb      	ldr	r3, [r7, #12]
    59e4:	681b      	ldr	r3, [r3, #0]
    59e6:	2b00      	cmp	r3, #0
    59e8:	d14e      	bne.n	5a88 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    59ea:	68fb      	ldr	r3, [r7, #12]
    59ec:	685b      	ldr	r3, [r3, #4]
    59ee:	0018      	movs	r0, r3
    59f0:	4b2a      	ldr	r3, [pc, #168]	; (5a9c <prvCopyDataToQueue+0xd8>)
    59f2:	4798      	blx	r3
    59f4:	0003      	movs	r3, r0
    59f6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    59f8:	68fb      	ldr	r3, [r7, #12]
    59fa:	2200      	movs	r2, #0
    59fc:	605a      	str	r2, [r3, #4]
    59fe:	e043      	b.n	5a88 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d119      	bne.n	5a3a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	6898      	ldr	r0, [r3, #8]
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5a0e:	68bb      	ldr	r3, [r7, #8]
    5a10:	0019      	movs	r1, r3
    5a12:	4b23      	ldr	r3, [pc, #140]	; (5aa0 <prvCopyDataToQueue+0xdc>)
    5a14:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    5a16:	68fb      	ldr	r3, [r7, #12]
    5a18:	689a      	ldr	r2, [r3, #8]
    5a1a:	68fb      	ldr	r3, [r7, #12]
    5a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a1e:	18d2      	adds	r2, r2, r3
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    5a24:	68fb      	ldr	r3, [r7, #12]
    5a26:	689a      	ldr	r2, [r3, #8]
    5a28:	68fb      	ldr	r3, [r7, #12]
    5a2a:	685b      	ldr	r3, [r3, #4]
    5a2c:	429a      	cmp	r2, r3
    5a2e:	d32b      	bcc.n	5a88 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5a30:	68fb      	ldr	r3, [r7, #12]
    5a32:	681a      	ldr	r2, [r3, #0]
    5a34:	68fb      	ldr	r3, [r7, #12]
    5a36:	609a      	str	r2, [r3, #8]
    5a38:	e026      	b.n	5a88 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	68d8      	ldr	r0, [r3, #12]
    5a3e:	68fb      	ldr	r3, [r7, #12]
    5a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5a42:	68bb      	ldr	r3, [r7, #8]
    5a44:	0019      	movs	r1, r3
    5a46:	4b16      	ldr	r3, [pc, #88]	; (5aa0 <prvCopyDataToQueue+0xdc>)
    5a48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    5a4a:	68fb      	ldr	r3, [r7, #12]
    5a4c:	68da      	ldr	r2, [r3, #12]
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a52:	425b      	negs	r3, r3
    5a54:	18d2      	adds	r2, r2, r3
    5a56:	68fb      	ldr	r3, [r7, #12]
    5a58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	68da      	ldr	r2, [r3, #12]
    5a5e:	68fb      	ldr	r3, [r7, #12]
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	429a      	cmp	r2, r3
    5a64:	d207      	bcs.n	5a76 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	685a      	ldr	r2, [r3, #4]
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a6e:	425b      	negs	r3, r3
    5a70:	18d2      	adds	r2, r2, r3
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	2b02      	cmp	r3, #2
    5a7a:	d105      	bne.n	5a88 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5a7c:	693b      	ldr	r3, [r7, #16]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d002      	beq.n	5a88 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    5a82:	693b      	ldr	r3, [r7, #16]
    5a84:	3b01      	subs	r3, #1
    5a86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    5a88:	693b      	ldr	r3, [r7, #16]
    5a8a:	1c5a      	adds	r2, r3, #1
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    5a90:	697b      	ldr	r3, [r7, #20]
}
    5a92:	0018      	movs	r0, r3
    5a94:	46bd      	mov	sp, r7
    5a96:	b006      	add	sp, #24
    5a98:	bd80      	pop	{r7, pc}
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	00006cbd 	.word	0x00006cbd
    5aa0:	0000d0bd 	.word	0x0000d0bd

00005aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
    5aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d018      	beq.n	5ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	68da      	ldr	r2, [r3, #12]
    5aba:	687b      	ldr	r3, [r7, #4]
    5abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5abe:	18d2      	adds	r2, r2, r3
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	68da      	ldr	r2, [r3, #12]
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	685b      	ldr	r3, [r3, #4]
    5acc:	429a      	cmp	r2, r3
    5ace:	d303      	bcc.n	5ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	681a      	ldr	r2, [r3, #0]
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	68d9      	ldr	r1, [r3, #12]
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    5ae0:	683b      	ldr	r3, [r7, #0]
    5ae2:	0018      	movs	r0, r3
    5ae4:	4b02      	ldr	r3, [pc, #8]	; (5af0 <prvCopyDataFromQueue+0x4c>)
    5ae6:	4798      	blx	r3
	}
}
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	46bd      	mov	sp, r7
    5aec:	b002      	add	sp, #8
    5aee:	bd80      	pop	{r7, pc}
    5af0:	0000d0bd 	.word	0x0000d0bd

00005af4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b084      	sub	sp, #16
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    5afc:	4b34      	ldr	r3, [pc, #208]	; (5bd0 <prvUnlockQueue+0xdc>)
    5afe:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    5b00:	230f      	movs	r3, #15
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	2145      	movs	r1, #69	; 0x45
    5b08:	5c52      	ldrb	r2, [r2, r1]
    5b0a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    5b0c:	e022      	b.n	5b54 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5b12:	2b00      	cmp	r3, #0
    5b14:	d009      	beq.n	5b2a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    5b16:	687b      	ldr	r3, [r7, #4]
    5b18:	2100      	movs	r1, #0
    5b1a:	0018      	movs	r0, r3
    5b1c:	4b2d      	ldr	r3, [pc, #180]	; (5bd4 <prvUnlockQueue+0xe0>)
    5b1e:	4798      	blx	r3
    5b20:	1e03      	subs	r3, r0, #0
    5b22:	d00f      	beq.n	5b44 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    5b24:	4b2c      	ldr	r3, [pc, #176]	; (5bd8 <prvUnlockQueue+0xe4>)
    5b26:	4798      	blx	r3
    5b28:	e00c      	b.n	5b44 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d017      	beq.n	5b62 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	3324      	adds	r3, #36	; 0x24
    5b36:	0018      	movs	r0, r3
    5b38:	4b28      	ldr	r3, [pc, #160]	; (5bdc <prvUnlockQueue+0xe8>)
    5b3a:	4798      	blx	r3
    5b3c:	1e03      	subs	r3, r0, #0
    5b3e:	d001      	beq.n	5b44 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    5b40:	4b25      	ldr	r3, [pc, #148]	; (5bd8 <prvUnlockQueue+0xe4>)
    5b42:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    5b44:	230f      	movs	r3, #15
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	781b      	ldrb	r3, [r3, #0]
    5b4a:	3b01      	subs	r3, #1
    5b4c:	b2da      	uxtb	r2, r3
    5b4e:	230f      	movs	r3, #15
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    5b54:	230f      	movs	r3, #15
    5b56:	18fb      	adds	r3, r7, r3
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	b25b      	sxtb	r3, r3
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	dcd6      	bgt.n	5b0e <prvUnlockQueue+0x1a>
    5b60:	e000      	b.n	5b64 <prvUnlockQueue+0x70>
						break;
    5b62:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	2245      	movs	r2, #69	; 0x45
    5b68:	21ff      	movs	r1, #255	; 0xff
    5b6a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    5b6c:	4b1c      	ldr	r3, [pc, #112]	; (5be0 <prvUnlockQueue+0xec>)
    5b6e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    5b70:	4b17      	ldr	r3, [pc, #92]	; (5bd0 <prvUnlockQueue+0xdc>)
    5b72:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    5b74:	230e      	movs	r3, #14
    5b76:	18fb      	adds	r3, r7, r3
    5b78:	687a      	ldr	r2, [r7, #4]
    5b7a:	2144      	movs	r1, #68	; 0x44
    5b7c:	5c52      	ldrb	r2, [r2, r1]
    5b7e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    5b80:	e014      	b.n	5bac <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	691b      	ldr	r3, [r3, #16]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d017      	beq.n	5bba <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	3310      	adds	r3, #16
    5b8e:	0018      	movs	r0, r3
    5b90:	4b12      	ldr	r3, [pc, #72]	; (5bdc <prvUnlockQueue+0xe8>)
    5b92:	4798      	blx	r3
    5b94:	1e03      	subs	r3, r0, #0
    5b96:	d001      	beq.n	5b9c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    5b98:	4b0f      	ldr	r3, [pc, #60]	; (5bd8 <prvUnlockQueue+0xe4>)
    5b9a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    5b9c:	230e      	movs	r3, #14
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	3b01      	subs	r3, #1
    5ba4:	b2da      	uxtb	r2, r3
    5ba6:	230e      	movs	r3, #14
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    5bac:	230e      	movs	r3, #14
    5bae:	18fb      	adds	r3, r7, r3
    5bb0:	781b      	ldrb	r3, [r3, #0]
    5bb2:	b25b      	sxtb	r3, r3
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	dce4      	bgt.n	5b82 <prvUnlockQueue+0x8e>
    5bb8:	e000      	b.n	5bbc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    5bba:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	2244      	movs	r2, #68	; 0x44
    5bc0:	21ff      	movs	r1, #255	; 0xff
    5bc2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    5bc4:	4b06      	ldr	r3, [pc, #24]	; (5be0 <prvUnlockQueue+0xec>)
    5bc6:	4798      	blx	r3
}
    5bc8:	46c0      	nop			; (mov r8, r8)
    5bca:	46bd      	mov	sp, r7
    5bcc:	b004      	add	sp, #16
    5bce:	bd80      	pop	{r7, pc}
    5bd0:	00001f51 	.word	0x00001f51
    5bd4:	00005d19 	.word	0x00005d19
    5bd8:	00006ad9 	.word	0x00006ad9
    5bdc:	00006945 	.word	0x00006945
    5be0:	00001f75 	.word	0x00001f75

00005be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b084      	sub	sp, #16
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    5bec:	4b08      	ldr	r3, [pc, #32]	; (5c10 <prvIsQueueEmpty+0x2c>)
    5bee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d102      	bne.n	5bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    5bf8:	2301      	movs	r3, #1
    5bfa:	60fb      	str	r3, [r7, #12]
    5bfc:	e001      	b.n	5c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    5bfe:	2300      	movs	r3, #0
    5c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5c02:	4b04      	ldr	r3, [pc, #16]	; (5c14 <prvIsQueueEmpty+0x30>)
    5c04:	4798      	blx	r3

	return xReturn;
    5c06:	68fb      	ldr	r3, [r7, #12]
}
    5c08:	0018      	movs	r0, r3
    5c0a:	46bd      	mov	sp, r7
    5c0c:	b004      	add	sp, #16
    5c0e:	bd80      	pop	{r7, pc}
    5c10:	00001f51 	.word	0x00001f51
    5c14:	00001f75 	.word	0x00001f75

00005c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	b084      	sub	sp, #16
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    5c20:	4b09      	ldr	r3, [pc, #36]	; (5c48 <prvIsQueueFull+0x30>)
    5c22:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5c2c:	429a      	cmp	r2, r3
    5c2e:	d102      	bne.n	5c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    5c30:	2301      	movs	r3, #1
    5c32:	60fb      	str	r3, [r7, #12]
    5c34:	e001      	b.n	5c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    5c36:	2300      	movs	r3, #0
    5c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5c3a:	4b04      	ldr	r3, [pc, #16]	; (5c4c <prvIsQueueFull+0x34>)
    5c3c:	4798      	blx	r3

	return xReturn;
    5c3e:	68fb      	ldr	r3, [r7, #12]
}
    5c40:	0018      	movs	r0, r3
    5c42:	46bd      	mov	sp, r7
    5c44:	b004      	add	sp, #16
    5c46:	bd80      	pop	{r7, pc}
    5c48:	00001f51 	.word	0x00001f51
    5c4c:	00001f75 	.word	0x00001f75

00005c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    5c50:	b580      	push	{r7, lr}
    5c52:	b084      	sub	sp, #16
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
    5c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    5c5a:	2300      	movs	r3, #0
    5c5c:	60fb      	str	r3, [r7, #12]
    5c5e:	e015      	b.n	5c8c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    5c60:	4b0e      	ldr	r3, [pc, #56]	; (5c9c <vQueueAddToRegistry+0x4c>)
    5c62:	68fa      	ldr	r2, [r7, #12]
    5c64:	00d2      	lsls	r2, r2, #3
    5c66:	58d3      	ldr	r3, [r2, r3]
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d10c      	bne.n	5c86 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    5c6c:	4b0b      	ldr	r3, [pc, #44]	; (5c9c <vQueueAddToRegistry+0x4c>)
    5c6e:	68fa      	ldr	r2, [r7, #12]
    5c70:	00d2      	lsls	r2, r2, #3
    5c72:	6839      	ldr	r1, [r7, #0]
    5c74:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    5c76:	4a09      	ldr	r2, [pc, #36]	; (5c9c <vQueueAddToRegistry+0x4c>)
    5c78:	68fb      	ldr	r3, [r7, #12]
    5c7a:	00db      	lsls	r3, r3, #3
    5c7c:	18d3      	adds	r3, r2, r3
    5c7e:	3304      	adds	r3, #4
    5c80:	687a      	ldr	r2, [r7, #4]
    5c82:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    5c84:	e005      	b.n	5c92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	3301      	adds	r3, #1
    5c8a:	60fb      	str	r3, [r7, #12]
    5c8c:	68fb      	ldr	r3, [r7, #12]
    5c8e:	2b07      	cmp	r3, #7
    5c90:	d9e6      	bls.n	5c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	46bd      	mov	sp, r7
    5c96:	b004      	add	sp, #16
    5c98:	bd80      	pop	{r7, pc}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	200054cc 	.word	0x200054cc

00005ca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b086      	sub	sp, #24
    5ca4:	af00      	add	r7, sp, #0
    5ca6:	60f8      	str	r0, [r7, #12]
    5ca8:	60b9      	str	r1, [r7, #8]
    5caa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5cac:	68fb      	ldr	r3, [r7, #12]
    5cae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    5cb0:	4b15      	ldr	r3, [pc, #84]	; (5d08 <vQueueWaitForMessageRestricted+0x68>)
    5cb2:	4798      	blx	r3
    5cb4:	697b      	ldr	r3, [r7, #20]
    5cb6:	2244      	movs	r2, #68	; 0x44
    5cb8:	5c9b      	ldrb	r3, [r3, r2]
    5cba:	b25b      	sxtb	r3, r3
    5cbc:	3301      	adds	r3, #1
    5cbe:	d103      	bne.n	5cc8 <vQueueWaitForMessageRestricted+0x28>
    5cc0:	697b      	ldr	r3, [r7, #20]
    5cc2:	2244      	movs	r2, #68	; 0x44
    5cc4:	2100      	movs	r1, #0
    5cc6:	5499      	strb	r1, [r3, r2]
    5cc8:	697b      	ldr	r3, [r7, #20]
    5cca:	2245      	movs	r2, #69	; 0x45
    5ccc:	5c9b      	ldrb	r3, [r3, r2]
    5cce:	b25b      	sxtb	r3, r3
    5cd0:	3301      	adds	r3, #1
    5cd2:	d103      	bne.n	5cdc <vQueueWaitForMessageRestricted+0x3c>
    5cd4:	697b      	ldr	r3, [r7, #20]
    5cd6:	2245      	movs	r2, #69	; 0x45
    5cd8:	2100      	movs	r1, #0
    5cda:	5499      	strb	r1, [r3, r2]
    5cdc:	4b0b      	ldr	r3, [pc, #44]	; (5d0c <vQueueWaitForMessageRestricted+0x6c>)
    5cde:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    5ce0:	697b      	ldr	r3, [r7, #20]
    5ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d106      	bne.n	5cf6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    5ce8:	697b      	ldr	r3, [r7, #20]
    5cea:	3324      	adds	r3, #36	; 0x24
    5cec:	687a      	ldr	r2, [r7, #4]
    5cee:	68b9      	ldr	r1, [r7, #8]
    5cf0:	0018      	movs	r0, r3
    5cf2:	4b07      	ldr	r3, [pc, #28]	; (5d10 <vQueueWaitForMessageRestricted+0x70>)
    5cf4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    5cf6:	697b      	ldr	r3, [r7, #20]
    5cf8:	0018      	movs	r0, r3
    5cfa:	4b06      	ldr	r3, [pc, #24]	; (5d14 <vQueueWaitForMessageRestricted+0x74>)
    5cfc:	4798      	blx	r3
	}
    5cfe:	46c0      	nop			; (mov r8, r8)
    5d00:	46bd      	mov	sp, r7
    5d02:	b006      	add	sp, #24
    5d04:	bd80      	pop	{r7, pc}
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	00001f51 	.word	0x00001f51
    5d0c:	00001f75 	.word	0x00001f75
    5d10:	000068f1 	.word	0x000068f1
    5d14:	00005af5 	.word	0x00005af5

00005d18 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b086      	sub	sp, #24
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
    5d20:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    5d28:	2300      	movs	r3, #0
    5d2a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    5d2c:	693b      	ldr	r3, [r7, #16]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d101      	bne.n	5d36 <prvNotifyQueueSetContainer+0x1e>
    5d32:	b672      	cpsid	i
    5d34:	e7fe      	b.n	5d34 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    5d36:	693b      	ldr	r3, [r7, #16]
    5d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5d3a:	693b      	ldr	r3, [r7, #16]
    5d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d3e:	429a      	cmp	r2, r3
    5d40:	d301      	bcc.n	5d46 <prvNotifyQueueSetContainer+0x2e>
    5d42:	b672      	cpsid	i
    5d44:	e7fe      	b.n	5d44 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    5d46:	693b      	ldr	r3, [r7, #16]
    5d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5d4a:	693b      	ldr	r3, [r7, #16]
    5d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5d4e:	429a      	cmp	r2, r3
    5d50:	d22a      	bcs.n	5da8 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    5d52:	230f      	movs	r3, #15
    5d54:	18fb      	adds	r3, r7, r3
    5d56:	693a      	ldr	r2, [r7, #16]
    5d58:	2145      	movs	r1, #69	; 0x45
    5d5a:	5c52      	ldrb	r2, [r2, r1]
    5d5c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	1d39      	adds	r1, r7, #4
    5d62:	693b      	ldr	r3, [r7, #16]
    5d64:	0018      	movs	r0, r3
    5d66:	4b13      	ldr	r3, [pc, #76]	; (5db4 <prvNotifyQueueSetContainer+0x9c>)
    5d68:	4798      	blx	r3
    5d6a:	0003      	movs	r3, r0
    5d6c:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    5d6e:	230f      	movs	r3, #15
    5d70:	18fb      	adds	r3, r7, r3
    5d72:	781b      	ldrb	r3, [r3, #0]
    5d74:	b25b      	sxtb	r3, r3
    5d76:	3301      	adds	r3, #1
    5d78:	d10d      	bne.n	5d96 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    5d7a:	693b      	ldr	r3, [r7, #16]
    5d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d012      	beq.n	5da8 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    5d82:	693b      	ldr	r3, [r7, #16]
    5d84:	3324      	adds	r3, #36	; 0x24
    5d86:	0018      	movs	r0, r3
    5d88:	4b0b      	ldr	r3, [pc, #44]	; (5db8 <prvNotifyQueueSetContainer+0xa0>)
    5d8a:	4798      	blx	r3
    5d8c:	1e03      	subs	r3, r0, #0
    5d8e:	d00b      	beq.n	5da8 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    5d90:	2301      	movs	r3, #1
    5d92:	617b      	str	r3, [r7, #20]
    5d94:	e008      	b.n	5da8 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    5d96:	230f      	movs	r3, #15
    5d98:	18fb      	adds	r3, r7, r3
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	3301      	adds	r3, #1
    5d9e:	b2db      	uxtb	r3, r3
    5da0:	b259      	sxtb	r1, r3
    5da2:	693b      	ldr	r3, [r7, #16]
    5da4:	2245      	movs	r2, #69	; 0x45
    5da6:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    5da8:	697b      	ldr	r3, [r7, #20]
	}
    5daa:	0018      	movs	r0, r3
    5dac:	46bd      	mov	sp, r7
    5dae:	b006      	add	sp, #24
    5db0:	bd80      	pop	{r7, pc}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	000059c5 	.word	0x000059c5
    5db8:	00006945 	.word	0x00006945

00005dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    5dbc:	b590      	push	{r4, r7, lr}
    5dbe:	b08d      	sub	sp, #52	; 0x34
    5dc0:	af04      	add	r7, sp, #16
    5dc2:	60f8      	str	r0, [r7, #12]
    5dc4:	60b9      	str	r1, [r7, #8]
    5dc6:	603b      	str	r3, [r7, #0]
    5dc8:	1dbb      	adds	r3, r7, #6
    5dca:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5dcc:	1dbb      	adds	r3, r7, #6
    5dce:	881b      	ldrh	r3, [r3, #0]
    5dd0:	009b      	lsls	r3, r3, #2
    5dd2:	0018      	movs	r0, r3
    5dd4:	4b1d      	ldr	r3, [pc, #116]	; (5e4c <xTaskCreate+0x90>)
    5dd6:	4798      	blx	r3
    5dd8:	0003      	movs	r3, r0
    5dda:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    5ddc:	697b      	ldr	r3, [r7, #20]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d010      	beq.n	5e04 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    5de2:	2058      	movs	r0, #88	; 0x58
    5de4:	4b19      	ldr	r3, [pc, #100]	; (5e4c <xTaskCreate+0x90>)
    5de6:	4798      	blx	r3
    5de8:	0003      	movs	r3, r0
    5dea:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    5dec:	69fb      	ldr	r3, [r7, #28]
    5dee:	2b00      	cmp	r3, #0
    5df0:	d003      	beq.n	5dfa <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    5df2:	69fb      	ldr	r3, [r7, #28]
    5df4:	697a      	ldr	r2, [r7, #20]
    5df6:	631a      	str	r2, [r3, #48]	; 0x30
    5df8:	e006      	b.n	5e08 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    5dfa:	697b      	ldr	r3, [r7, #20]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b14      	ldr	r3, [pc, #80]	; (5e50 <xTaskCreate+0x94>)
    5e00:	4798      	blx	r3
    5e02:	e001      	b.n	5e08 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    5e04:	2300      	movs	r3, #0
    5e06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    5e08:	69fb      	ldr	r3, [r7, #28]
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d016      	beq.n	5e3c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    5e0e:	1dbb      	adds	r3, r7, #6
    5e10:	881a      	ldrh	r2, [r3, #0]
    5e12:	683c      	ldr	r4, [r7, #0]
    5e14:	68b9      	ldr	r1, [r7, #8]
    5e16:	68f8      	ldr	r0, [r7, #12]
    5e18:	2300      	movs	r3, #0
    5e1a:	9303      	str	r3, [sp, #12]
    5e1c:	69fb      	ldr	r3, [r7, #28]
    5e1e:	9302      	str	r3, [sp, #8]
    5e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5e22:	9301      	str	r3, [sp, #4]
    5e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e26:	9300      	str	r3, [sp, #0]
    5e28:	0023      	movs	r3, r4
    5e2a:	4c0a      	ldr	r4, [pc, #40]	; (5e54 <xTaskCreate+0x98>)
    5e2c:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    5e2e:	69fb      	ldr	r3, [r7, #28]
    5e30:	0018      	movs	r0, r3
    5e32:	4b09      	ldr	r3, [pc, #36]	; (5e58 <xTaskCreate+0x9c>)
    5e34:	4798      	blx	r3
			xReturn = pdPASS;
    5e36:	2301      	movs	r3, #1
    5e38:	61bb      	str	r3, [r7, #24]
    5e3a:	e002      	b.n	5e42 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5e3c:	2301      	movs	r3, #1
    5e3e:	425b      	negs	r3, r3
    5e40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    5e42:	69bb      	ldr	r3, [r7, #24]
	}
    5e44:	0018      	movs	r0, r3
    5e46:	46bd      	mov	sp, r7
    5e48:	b009      	add	sp, #36	; 0x24
    5e4a:	bd90      	pop	{r4, r7, pc}
    5e4c:	0000207d 	.word	0x0000207d
    5e50:	000021e5 	.word	0x000021e5
    5e54:	00005e5d 	.word	0x00005e5d
    5e58:	00005f6d 	.word	0x00005f6d

00005e5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b086      	sub	sp, #24
    5e60:	af00      	add	r7, sp, #0
    5e62:	60f8      	str	r0, [r7, #12]
    5e64:	60b9      	str	r1, [r7, #8]
    5e66:	607a      	str	r2, [r7, #4]
    5e68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    5e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5e6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	009b      	lsls	r3, r3, #2
    5e72:	001a      	movs	r2, r3
    5e74:	21a5      	movs	r1, #165	; 0xa5
    5e76:	4b39      	ldr	r3, [pc, #228]	; (5f5c <prvInitialiseNewTask+0x100>)
    5e78:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    5e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	4937      	ldr	r1, [pc, #220]	; (5f60 <prvInitialiseNewTask+0x104>)
    5e82:	468c      	mov	ip, r1
    5e84:	4463      	add	r3, ip
    5e86:	009b      	lsls	r3, r3, #2
    5e88:	18d3      	adds	r3, r2, r3
    5e8a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    5e8c:	693b      	ldr	r3, [r7, #16]
    5e8e:	2207      	movs	r2, #7
    5e90:	4393      	bics	r3, r2
    5e92:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    5e94:	693b      	ldr	r3, [r7, #16]
    5e96:	2207      	movs	r2, #7
    5e98:	4013      	ands	r3, r2
    5e9a:	d001      	beq.n	5ea0 <prvInitialiseNewTask+0x44>
    5e9c:	b672      	cpsid	i
    5e9e:	e7fe      	b.n	5e9e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    5ea0:	2300      	movs	r3, #0
    5ea2:	617b      	str	r3, [r7, #20]
    5ea4:	e013      	b.n	5ece <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    5ea6:	68ba      	ldr	r2, [r7, #8]
    5ea8:	697b      	ldr	r3, [r7, #20]
    5eaa:	18d3      	adds	r3, r2, r3
    5eac:	7818      	ldrb	r0, [r3, #0]
    5eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5eb0:	2134      	movs	r1, #52	; 0x34
    5eb2:	697b      	ldr	r3, [r7, #20]
    5eb4:	18d3      	adds	r3, r2, r3
    5eb6:	185b      	adds	r3, r3, r1
    5eb8:	1c02      	adds	r2, r0, #0
    5eba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    5ebc:	68ba      	ldr	r2, [r7, #8]
    5ebe:	697b      	ldr	r3, [r7, #20]
    5ec0:	18d3      	adds	r3, r2, r3
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d006      	beq.n	5ed6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    5ec8:	697b      	ldr	r3, [r7, #20]
    5eca:	3301      	adds	r3, #1
    5ecc:	617b      	str	r3, [r7, #20]
    5ece:	697b      	ldr	r3, [r7, #20]
    5ed0:	2b09      	cmp	r3, #9
    5ed2:	d9e8      	bls.n	5ea6 <prvInitialiseNewTask+0x4a>
    5ed4:	e000      	b.n	5ed8 <prvInitialiseNewTask+0x7c>
		{
			break;
    5ed6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    5ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5eda:	223d      	movs	r2, #61	; 0x3d
    5edc:	2100      	movs	r1, #0
    5ede:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    5ee0:	6a3b      	ldr	r3, [r7, #32]
    5ee2:	2b04      	cmp	r3, #4
    5ee4:	d901      	bls.n	5eea <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    5ee6:	2304      	movs	r3, #4
    5ee8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    5eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5eec:	6a3a      	ldr	r2, [r7, #32]
    5eee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    5ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5ef2:	6a3a      	ldr	r2, [r7, #32]
    5ef4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    5ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5ef8:	2200      	movs	r2, #0
    5efa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    5efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5efe:	3304      	adds	r3, #4
    5f00:	0018      	movs	r0, r3
    5f02:	4b18      	ldr	r3, [pc, #96]	; (5f64 <prvInitialiseNewTask+0x108>)
    5f04:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    5f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f08:	3318      	adds	r3, #24
    5f0a:	0018      	movs	r0, r3
    5f0c:	4b15      	ldr	r3, [pc, #84]	; (5f64 <prvInitialiseNewTask+0x108>)
    5f0e:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    5f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5f14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f16:	6a3b      	ldr	r3, [r7, #32]
    5f18:	2205      	movs	r2, #5
    5f1a:	1ad2      	subs	r2, r2, r3
    5f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    5f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5f24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    5f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f28:	2200      	movs	r2, #0
    5f2a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f2e:	2254      	movs	r2, #84	; 0x54
    5f30:	2100      	movs	r1, #0
    5f32:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5f34:	683a      	ldr	r2, [r7, #0]
    5f36:	68f9      	ldr	r1, [r7, #12]
    5f38:	693b      	ldr	r3, [r7, #16]
    5f3a:	0018      	movs	r0, r3
    5f3c:	4b0a      	ldr	r3, [pc, #40]	; (5f68 <prvInitialiseNewTask+0x10c>)
    5f3e:	4798      	blx	r3
    5f40:	0002      	movs	r2, r0
    5f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f44:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    5f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d002      	beq.n	5f52 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    5f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    5f52:	46c0      	nop			; (mov r8, r8)
    5f54:	46bd      	mov	sp, r7
    5f56:	b006      	add	sp, #24
    5f58:	bd80      	pop	{r7, pc}
    5f5a:	46c0      	nop			; (mov r8, r8)
    5f5c:	0000d0cf 	.word	0x0000d0cf
    5f60:	3fffffff 	.word	0x3fffffff
    5f64:	0000528d 	.word	0x0000528d
    5f68:	00001e15 	.word	0x00001e15

00005f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	b082      	sub	sp, #8
    5f70:	af00      	add	r7, sp, #0
    5f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    5f74:	4b2b      	ldr	r3, [pc, #172]	; (6024 <prvAddNewTaskToReadyList+0xb8>)
    5f76:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    5f78:	4b2b      	ldr	r3, [pc, #172]	; (6028 <prvAddNewTaskToReadyList+0xbc>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	1c5a      	adds	r2, r3, #1
    5f7e:	4b2a      	ldr	r3, [pc, #168]	; (6028 <prvAddNewTaskToReadyList+0xbc>)
    5f80:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    5f82:	4b2a      	ldr	r3, [pc, #168]	; (602c <prvAddNewTaskToReadyList+0xc0>)
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d109      	bne.n	5f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    5f8a:	4b28      	ldr	r3, [pc, #160]	; (602c <prvAddNewTaskToReadyList+0xc0>)
    5f8c:	687a      	ldr	r2, [r7, #4]
    5f8e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5f90:	4b25      	ldr	r3, [pc, #148]	; (6028 <prvAddNewTaskToReadyList+0xbc>)
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	2b01      	cmp	r3, #1
    5f96:	d110      	bne.n	5fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    5f98:	4b25      	ldr	r3, [pc, #148]	; (6030 <prvAddNewTaskToReadyList+0xc4>)
    5f9a:	4798      	blx	r3
    5f9c:	e00d      	b.n	5fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    5f9e:	4b25      	ldr	r3, [pc, #148]	; (6034 <prvAddNewTaskToReadyList+0xc8>)
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d109      	bne.n	5fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    5fa6:	4b21      	ldr	r3, [pc, #132]	; (602c <prvAddNewTaskToReadyList+0xc0>)
    5fa8:	681b      	ldr	r3, [r3, #0]
    5faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5fb0:	429a      	cmp	r2, r3
    5fb2:	d802      	bhi.n	5fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    5fb4:	4b1d      	ldr	r3, [pc, #116]	; (602c <prvAddNewTaskToReadyList+0xc0>)
    5fb6:	687a      	ldr	r2, [r7, #4]
    5fb8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    5fba:	4b1f      	ldr	r3, [pc, #124]	; (6038 <prvAddNewTaskToReadyList+0xcc>)
    5fbc:	681b      	ldr	r3, [r3, #0]
    5fbe:	1c5a      	adds	r2, r3, #1
    5fc0:	4b1d      	ldr	r3, [pc, #116]	; (6038 <prvAddNewTaskToReadyList+0xcc>)
    5fc2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5fc4:	4b1c      	ldr	r3, [pc, #112]	; (6038 <prvAddNewTaskToReadyList+0xcc>)
    5fc6:	681a      	ldr	r2, [r3, #0]
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    5fcc:	687b      	ldr	r3, [r7, #4]
    5fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5fd0:	4b1a      	ldr	r3, [pc, #104]	; (603c <prvAddNewTaskToReadyList+0xd0>)
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	429a      	cmp	r2, r3
    5fd6:	d903      	bls.n	5fe0 <prvAddNewTaskToReadyList+0x74>
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5fdc:	4b17      	ldr	r3, [pc, #92]	; (603c <prvAddNewTaskToReadyList+0xd0>)
    5fde:	601a      	str	r2, [r3, #0]
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5fe4:	0013      	movs	r3, r2
    5fe6:	009b      	lsls	r3, r3, #2
    5fe8:	189b      	adds	r3, r3, r2
    5fea:	009b      	lsls	r3, r3, #2
    5fec:	4a14      	ldr	r2, [pc, #80]	; (6040 <prvAddNewTaskToReadyList+0xd4>)
    5fee:	189a      	adds	r2, r3, r2
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	3304      	adds	r3, #4
    5ff4:	0019      	movs	r1, r3
    5ff6:	0010      	movs	r0, r2
    5ff8:	4b12      	ldr	r3, [pc, #72]	; (6044 <prvAddNewTaskToReadyList+0xd8>)
    5ffa:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    5ffc:	4b12      	ldr	r3, [pc, #72]	; (6048 <prvAddNewTaskToReadyList+0xdc>)
    5ffe:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    6000:	4b0c      	ldr	r3, [pc, #48]	; (6034 <prvAddNewTaskToReadyList+0xc8>)
    6002:	681b      	ldr	r3, [r3, #0]
    6004:	2b00      	cmp	r3, #0
    6006:	d008      	beq.n	601a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    6008:	4b08      	ldr	r3, [pc, #32]	; (602c <prvAddNewTaskToReadyList+0xc0>)
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    600e:	687b      	ldr	r3, [r7, #4]
    6010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6012:	429a      	cmp	r2, r3
    6014:	d201      	bcs.n	601a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    6016:	4b0d      	ldr	r3, [pc, #52]	; (604c <prvAddNewTaskToReadyList+0xe0>)
    6018:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	46bd      	mov	sp, r7
    601e:	b002      	add	sp, #8
    6020:	bd80      	pop	{r7, pc}
    6022:	46c0      	nop			; (mov r8, r8)
    6024:	00001f51 	.word	0x00001f51
    6028:	20005414 	.word	0x20005414
    602c:	2000533c 	.word	0x2000533c
    6030:	00006b1d 	.word	0x00006b1d
    6034:	20005420 	.word	0x20005420
    6038:	20005430 	.word	0x20005430
    603c:	2000541c 	.word	0x2000541c
    6040:	20005340 	.word	0x20005340
    6044:	000052a3 	.word	0x000052a3
    6048:	00001f75 	.word	0x00001f75
    604c:	00001f31 	.word	0x00001f31

00006050 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    6050:	b580      	push	{r7, lr}
    6052:	b086      	sub	sp, #24
    6054:	af00      	add	r7, sp, #0
    6056:	6078      	str	r0, [r7, #4]
    6058:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    605a:	2300      	movs	r3, #0
    605c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	2b00      	cmp	r3, #0
    6062:	d101      	bne.n	6068 <vTaskDelayUntil+0x18>
    6064:	b672      	cpsid	i
    6066:	e7fe      	b.n	6066 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    6068:	683b      	ldr	r3, [r7, #0]
    606a:	2b00      	cmp	r3, #0
    606c:	d101      	bne.n	6072 <vTaskDelayUntil+0x22>
    606e:	b672      	cpsid	i
    6070:	e7fe      	b.n	6070 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    6072:	4b23      	ldr	r3, [pc, #140]	; (6100 <vTaskDelayUntil+0xb0>)
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	2b00      	cmp	r3, #0
    6078:	d001      	beq.n	607e <vTaskDelayUntil+0x2e>
    607a:	b672      	cpsid	i
    607c:	e7fe      	b.n	607c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    607e:	4b21      	ldr	r3, [pc, #132]	; (6104 <vTaskDelayUntil+0xb4>)
    6080:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    6082:	4b21      	ldr	r3, [pc, #132]	; (6108 <vTaskDelayUntil+0xb8>)
    6084:	681b      	ldr	r3, [r3, #0]
    6086:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	681a      	ldr	r2, [r3, #0]
    608c:	683b      	ldr	r3, [r7, #0]
    608e:	18d3      	adds	r3, r2, r3
    6090:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    6092:	687b      	ldr	r3, [r7, #4]
    6094:	681a      	ldr	r2, [r3, #0]
    6096:	693b      	ldr	r3, [r7, #16]
    6098:	429a      	cmp	r2, r3
    609a:	d90b      	bls.n	60b4 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	681a      	ldr	r2, [r3, #0]
    60a0:	68fb      	ldr	r3, [r7, #12]
    60a2:	429a      	cmp	r2, r3
    60a4:	d911      	bls.n	60ca <vTaskDelayUntil+0x7a>
    60a6:	68fa      	ldr	r2, [r7, #12]
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	429a      	cmp	r2, r3
    60ac:	d90d      	bls.n	60ca <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    60ae:	2301      	movs	r3, #1
    60b0:	617b      	str	r3, [r7, #20]
    60b2:	e00a      	b.n	60ca <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	681a      	ldr	r2, [r3, #0]
    60b8:	68fb      	ldr	r3, [r7, #12]
    60ba:	429a      	cmp	r2, r3
    60bc:	d803      	bhi.n	60c6 <vTaskDelayUntil+0x76>
    60be:	68fa      	ldr	r2, [r7, #12]
    60c0:	693b      	ldr	r3, [r7, #16]
    60c2:	429a      	cmp	r2, r3
    60c4:	d901      	bls.n	60ca <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    60c6:	2301      	movs	r3, #1
    60c8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	68fa      	ldr	r2, [r7, #12]
    60ce:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    60d0:	697b      	ldr	r3, [r7, #20]
    60d2:	2b00      	cmp	r3, #0
    60d4:	d006      	beq.n	60e4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    60d6:	68fa      	ldr	r2, [r7, #12]
    60d8:	693b      	ldr	r3, [r7, #16]
    60da:	1ad3      	subs	r3, r2, r3
    60dc:	2100      	movs	r1, #0
    60de:	0018      	movs	r0, r3
    60e0:	4b0a      	ldr	r3, [pc, #40]	; (610c <vTaskDelayUntil+0xbc>)
    60e2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    60e4:	4b0a      	ldr	r3, [pc, #40]	; (6110 <vTaskDelayUntil+0xc0>)
    60e6:	4798      	blx	r3
    60e8:	0003      	movs	r3, r0
    60ea:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    60ec:	68bb      	ldr	r3, [r7, #8]
    60ee:	2b00      	cmp	r3, #0
    60f0:	d101      	bne.n	60f6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    60f2:	4b08      	ldr	r3, [pc, #32]	; (6114 <vTaskDelayUntil+0xc4>)
    60f4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	46bd      	mov	sp, r7
    60fa:	b006      	add	sp, #24
    60fc:	bd80      	pop	{r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	2000543c 	.word	0x2000543c
    6104:	000064c5 	.word	0x000064c5
    6108:	20005418 	.word	0x20005418
    610c:	00006d7d 	.word	0x00006d7d
    6110:	000064dd 	.word	0x000064dd
    6114:	00001f31 	.word	0x00001f31

00006118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    6118:	b580      	push	{r7, lr}
    611a:	b084      	sub	sp, #16
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    6120:	2300      	movs	r3, #0
    6122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	2b00      	cmp	r3, #0
    6128:	d010      	beq.n	614c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    612a:	4b0d      	ldr	r3, [pc, #52]	; (6160 <vTaskDelay+0x48>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	2b00      	cmp	r3, #0
    6130:	d001      	beq.n	6136 <vTaskDelay+0x1e>
    6132:	b672      	cpsid	i
    6134:	e7fe      	b.n	6134 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    6136:	4b0b      	ldr	r3, [pc, #44]	; (6164 <vTaskDelay+0x4c>)
    6138:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    613a:	687b      	ldr	r3, [r7, #4]
    613c:	2100      	movs	r1, #0
    613e:	0018      	movs	r0, r3
    6140:	4b09      	ldr	r3, [pc, #36]	; (6168 <vTaskDelay+0x50>)
    6142:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    6144:	4b09      	ldr	r3, [pc, #36]	; (616c <vTaskDelay+0x54>)
    6146:	4798      	blx	r3
    6148:	0003      	movs	r3, r0
    614a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    614c:	68fb      	ldr	r3, [r7, #12]
    614e:	2b00      	cmp	r3, #0
    6150:	d101      	bne.n	6156 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    6152:	4b07      	ldr	r3, [pc, #28]	; (6170 <vTaskDelay+0x58>)
    6154:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	46bd      	mov	sp, r7
    615a:	b004      	add	sp, #16
    615c:	bd80      	pop	{r7, pc}
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	2000543c 	.word	0x2000543c
    6164:	000064c5 	.word	0x000064c5
    6168:	00006d7d 	.word	0x00006d7d
    616c:	000064dd 	.word	0x000064dd
    6170:	00001f31 	.word	0x00001f31

00006174 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    6174:	b580      	push	{r7, lr}
    6176:	b084      	sub	sp, #16
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    617c:	4b2b      	ldr	r3, [pc, #172]	; (622c <vTaskSuspend+0xb8>)
    617e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	2b00      	cmp	r3, #0
    6184:	d102      	bne.n	618c <vTaskSuspend+0x18>
    6186:	4b2a      	ldr	r3, [pc, #168]	; (6230 <vTaskSuspend+0xbc>)
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	e000      	b.n	618e <vTaskSuspend+0x1a>
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6190:	68fb      	ldr	r3, [r7, #12]
    6192:	3304      	adds	r3, #4
    6194:	0018      	movs	r0, r3
    6196:	4b27      	ldr	r3, [pc, #156]	; (6234 <vTaskSuspend+0xc0>)
    6198:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    619a:	68fb      	ldr	r3, [r7, #12]
    619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    619e:	2b00      	cmp	r3, #0
    61a0:	d004      	beq.n	61ac <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    61a2:	68fb      	ldr	r3, [r7, #12]
    61a4:	3318      	adds	r3, #24
    61a6:	0018      	movs	r0, r3
    61a8:	4b22      	ldr	r3, [pc, #136]	; (6234 <vTaskSuspend+0xc0>)
    61aa:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    61ac:	68fb      	ldr	r3, [r7, #12]
    61ae:	1d1a      	adds	r2, r3, #4
    61b0:	4b21      	ldr	r3, [pc, #132]	; (6238 <vTaskSuspend+0xc4>)
    61b2:	0011      	movs	r1, r2
    61b4:	0018      	movs	r0, r3
    61b6:	4b21      	ldr	r3, [pc, #132]	; (623c <vTaskSuspend+0xc8>)
    61b8:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	2254      	movs	r2, #84	; 0x54
    61be:	5c9b      	ldrb	r3, [r3, r2]
    61c0:	b2db      	uxtb	r3, r3
    61c2:	2b01      	cmp	r3, #1
    61c4:	d103      	bne.n	61ce <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    61c6:	68fb      	ldr	r3, [r7, #12]
    61c8:	2254      	movs	r2, #84	; 0x54
    61ca:	2100      	movs	r1, #0
    61cc:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    61ce:	4b1c      	ldr	r3, [pc, #112]	; (6240 <vTaskSuspend+0xcc>)
    61d0:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    61d2:	4b1c      	ldr	r3, [pc, #112]	; (6244 <vTaskSuspend+0xd0>)
    61d4:	681b      	ldr	r3, [r3, #0]
    61d6:	2b00      	cmp	r3, #0
    61d8:	d005      	beq.n	61e6 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    61da:	4b14      	ldr	r3, [pc, #80]	; (622c <vTaskSuspend+0xb8>)
    61dc:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    61de:	4b1a      	ldr	r3, [pc, #104]	; (6248 <vTaskSuspend+0xd4>)
    61e0:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    61e2:	4b17      	ldr	r3, [pc, #92]	; (6240 <vTaskSuspend+0xcc>)
    61e4:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    61e6:	4b12      	ldr	r3, [pc, #72]	; (6230 <vTaskSuspend+0xbc>)
    61e8:	681b      	ldr	r3, [r3, #0]
    61ea:	68fa      	ldr	r2, [r7, #12]
    61ec:	429a      	cmp	r2, r3
    61ee:	d118      	bne.n	6222 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
    61f0:	4b14      	ldr	r3, [pc, #80]	; (6244 <vTaskSuspend+0xd0>)
    61f2:	681b      	ldr	r3, [r3, #0]
    61f4:	2b00      	cmp	r3, #0
    61f6:	d008      	beq.n	620a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    61f8:	4b14      	ldr	r3, [pc, #80]	; (624c <vTaskSuspend+0xd8>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	2b00      	cmp	r3, #0
    61fe:	d001      	beq.n	6204 <vTaskSuspend+0x90>
    6200:	b672      	cpsid	i
    6202:	e7fe      	b.n	6202 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
    6204:	4b12      	ldr	r3, [pc, #72]	; (6250 <vTaskSuspend+0xdc>)
    6206:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6208:	e00b      	b.n	6222 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    620a:	4b0b      	ldr	r3, [pc, #44]	; (6238 <vTaskSuspend+0xc4>)
    620c:	681a      	ldr	r2, [r3, #0]
    620e:	4b11      	ldr	r3, [pc, #68]	; (6254 <vTaskSuspend+0xe0>)
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	429a      	cmp	r2, r3
    6214:	d103      	bne.n	621e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
    6216:	4b06      	ldr	r3, [pc, #24]	; (6230 <vTaskSuspend+0xbc>)
    6218:	2200      	movs	r2, #0
    621a:	601a      	str	r2, [r3, #0]
	}
    621c:	e001      	b.n	6222 <vTaskSuspend+0xae>
					vTaskSwitchContext();
    621e:	4b0e      	ldr	r3, [pc, #56]	; (6258 <vTaskSuspend+0xe4>)
    6220:	4798      	blx	r3
	}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	46bd      	mov	sp, r7
    6226:	b004      	add	sp, #16
    6228:	bd80      	pop	{r7, pc}
    622a:	46c0      	nop			; (mov r8, r8)
    622c:	00001f51 	.word	0x00001f51
    6230:	2000533c 	.word	0x2000533c
    6234:	00005353 	.word	0x00005353
    6238:	20005400 	.word	0x20005400
    623c:	000052a3 	.word	0x000052a3
    6240:	00001f75 	.word	0x00001f75
    6244:	20005420 	.word	0x20005420
    6248:	00006c3d 	.word	0x00006c3d
    624c:	2000543c 	.word	0x2000543c
    6250:	00001f31 	.word	0x00001f31
    6254:	20005414 	.word	0x20005414
    6258:	000067b5 	.word	0x000067b5

0000625c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    625c:	b580      	push	{r7, lr}
    625e:	b084      	sub	sp, #16
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    6264:	2300      	movs	r3, #0
    6266:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	2b00      	cmp	r3, #0
    6270:	d101      	bne.n	6276 <prvTaskIsTaskSuspended+0x1a>
    6272:	b672      	cpsid	i
    6274:	e7fe      	b.n	6274 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    6276:	68bb      	ldr	r3, [r7, #8]
    6278:	695a      	ldr	r2, [r3, #20]
    627a:	4b0e      	ldr	r3, [pc, #56]	; (62b4 <prvTaskIsTaskSuspended+0x58>)
    627c:	429a      	cmp	r2, r3
    627e:	d101      	bne.n	6284 <prvTaskIsTaskSuspended+0x28>
    6280:	2301      	movs	r3, #1
    6282:	e000      	b.n	6286 <prvTaskIsTaskSuspended+0x2a>
    6284:	2300      	movs	r3, #0
    6286:	2b00      	cmp	r3, #0
    6288:	d00f      	beq.n	62aa <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    628a:	68bb      	ldr	r3, [r7, #8]
    628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    628e:	4b0a      	ldr	r3, [pc, #40]	; (62b8 <prvTaskIsTaskSuspended+0x5c>)
    6290:	429a      	cmp	r2, r3
    6292:	d00a      	beq.n	62aa <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    6294:	68bb      	ldr	r3, [r7, #8]
    6296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6298:	2b00      	cmp	r3, #0
    629a:	d101      	bne.n	62a0 <prvTaskIsTaskSuspended+0x44>
    629c:	2301      	movs	r3, #1
    629e:	e000      	b.n	62a2 <prvTaskIsTaskSuspended+0x46>
    62a0:	2300      	movs	r3, #0
    62a2:	2b00      	cmp	r3, #0
    62a4:	d001      	beq.n	62aa <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
    62a6:	2301      	movs	r3, #1
    62a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    62aa:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    62ac:	0018      	movs	r0, r3
    62ae:	46bd      	mov	sp, r7
    62b0:	b004      	add	sp, #16
    62b2:	bd80      	pop	{r7, pc}
    62b4:	20005400 	.word	0x20005400
    62b8:	200053d4 	.word	0x200053d4

000062bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    62bc:	b580      	push	{r7, lr}
    62be:	b084      	sub	sp, #16
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	2b00      	cmp	r3, #0
    62cc:	d101      	bne.n	62d2 <vTaskResume+0x16>
    62ce:	b672      	cpsid	i
    62d0:	e7fe      	b.n	62d0 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    62d2:	68fb      	ldr	r3, [r7, #12]
    62d4:	2b00      	cmp	r3, #0
    62d6:	d034      	beq.n	6342 <vTaskResume+0x86>
    62d8:	4b1c      	ldr	r3, [pc, #112]	; (634c <vTaskResume+0x90>)
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	68fa      	ldr	r2, [r7, #12]
    62de:	429a      	cmp	r2, r3
    62e0:	d02f      	beq.n	6342 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    62e2:	4b1b      	ldr	r3, [pc, #108]	; (6350 <vTaskResume+0x94>)
    62e4:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    62e6:	68fb      	ldr	r3, [r7, #12]
    62e8:	0018      	movs	r0, r3
    62ea:	4b1a      	ldr	r3, [pc, #104]	; (6354 <vTaskResume+0x98>)
    62ec:	4798      	blx	r3
    62ee:	1e03      	subs	r3, r0, #0
    62f0:	d025      	beq.n	633e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    62f2:	68fb      	ldr	r3, [r7, #12]
    62f4:	3304      	adds	r3, #4
    62f6:	0018      	movs	r0, r3
    62f8:	4b17      	ldr	r3, [pc, #92]	; (6358 <vTaskResume+0x9c>)
    62fa:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    62fc:	68fb      	ldr	r3, [r7, #12]
    62fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6300:	4b16      	ldr	r3, [pc, #88]	; (635c <vTaskResume+0xa0>)
    6302:	681b      	ldr	r3, [r3, #0]
    6304:	429a      	cmp	r2, r3
    6306:	d903      	bls.n	6310 <vTaskResume+0x54>
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    630c:	4b13      	ldr	r3, [pc, #76]	; (635c <vTaskResume+0xa0>)
    630e:	601a      	str	r2, [r3, #0]
    6310:	68fb      	ldr	r3, [r7, #12]
    6312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6314:	0013      	movs	r3, r2
    6316:	009b      	lsls	r3, r3, #2
    6318:	189b      	adds	r3, r3, r2
    631a:	009b      	lsls	r3, r3, #2
    631c:	4a10      	ldr	r2, [pc, #64]	; (6360 <vTaskResume+0xa4>)
    631e:	189a      	adds	r2, r3, r2
    6320:	68fb      	ldr	r3, [r7, #12]
    6322:	3304      	adds	r3, #4
    6324:	0019      	movs	r1, r3
    6326:	0010      	movs	r0, r2
    6328:	4b0e      	ldr	r3, [pc, #56]	; (6364 <vTaskResume+0xa8>)
    632a:	4798      	blx	r3

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6330:	4b06      	ldr	r3, [pc, #24]	; (634c <vTaskResume+0x90>)
    6332:	681b      	ldr	r3, [r3, #0]
    6334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6336:	429a      	cmp	r2, r3
    6338:	d301      	bcc.n	633e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    633a:	4b0b      	ldr	r3, [pc, #44]	; (6368 <vTaskResume+0xac>)
    633c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    633e:	4b0b      	ldr	r3, [pc, #44]	; (636c <vTaskResume+0xb0>)
    6340:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	46bd      	mov	sp, r7
    6346:	b004      	add	sp, #16
    6348:	bd80      	pop	{r7, pc}
    634a:	46c0      	nop			; (mov r8, r8)
    634c:	2000533c 	.word	0x2000533c
    6350:	00001f51 	.word	0x00001f51
    6354:	0000625d 	.word	0x0000625d
    6358:	00005353 	.word	0x00005353
    635c:	2000541c 	.word	0x2000541c
    6360:	20005340 	.word	0x20005340
    6364:	000052a3 	.word	0x000052a3
    6368:	00001f31 	.word	0x00001f31
    636c:	00001f75 	.word	0x00001f75

00006370 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    6370:	b580      	push	{r7, lr}
    6372:	b086      	sub	sp, #24
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    6378:	2300      	movs	r3, #0
    637a:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	2b00      	cmp	r3, #0
    6384:	d101      	bne.n	638a <xTaskResumeFromISR+0x1a>
    6386:	b672      	cpsid	i
    6388:	e7fe      	b.n	6388 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    638a:	4b23      	ldr	r3, [pc, #140]	; (6418 <xTaskResumeFromISR+0xa8>)
    638c:	4798      	blx	r3
    638e:	0003      	movs	r3, r0
    6390:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    6392:	693b      	ldr	r3, [r7, #16]
    6394:	0018      	movs	r0, r3
    6396:	4b21      	ldr	r3, [pc, #132]	; (641c <xTaskResumeFromISR+0xac>)
    6398:	4798      	blx	r3
    639a:	1e03      	subs	r3, r0, #0
    639c:	d032      	beq.n	6404 <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    639e:	4b20      	ldr	r3, [pc, #128]	; (6420 <xTaskResumeFromISR+0xb0>)
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d126      	bne.n	63f4 <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    63a6:	693b      	ldr	r3, [r7, #16]
    63a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    63aa:	4b1e      	ldr	r3, [pc, #120]	; (6424 <xTaskResumeFromISR+0xb4>)
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    63b0:	429a      	cmp	r2, r3
    63b2:	d301      	bcc.n	63b8 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
    63b4:	2301      	movs	r3, #1
    63b6:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    63b8:	693b      	ldr	r3, [r7, #16]
    63ba:	3304      	adds	r3, #4
    63bc:	0018      	movs	r0, r3
    63be:	4b1a      	ldr	r3, [pc, #104]	; (6428 <xTaskResumeFromISR+0xb8>)
    63c0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    63c2:	693b      	ldr	r3, [r7, #16]
    63c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    63c6:	4b19      	ldr	r3, [pc, #100]	; (642c <xTaskResumeFromISR+0xbc>)
    63c8:	681b      	ldr	r3, [r3, #0]
    63ca:	429a      	cmp	r2, r3
    63cc:	d903      	bls.n	63d6 <xTaskResumeFromISR+0x66>
    63ce:	693b      	ldr	r3, [r7, #16]
    63d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    63d2:	4b16      	ldr	r3, [pc, #88]	; (642c <xTaskResumeFromISR+0xbc>)
    63d4:	601a      	str	r2, [r3, #0]
    63d6:	693b      	ldr	r3, [r7, #16]
    63d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    63da:	0013      	movs	r3, r2
    63dc:	009b      	lsls	r3, r3, #2
    63de:	189b      	adds	r3, r3, r2
    63e0:	009b      	lsls	r3, r3, #2
    63e2:	4a13      	ldr	r2, [pc, #76]	; (6430 <xTaskResumeFromISR+0xc0>)
    63e4:	189a      	adds	r2, r3, r2
    63e6:	693b      	ldr	r3, [r7, #16]
    63e8:	3304      	adds	r3, #4
    63ea:	0019      	movs	r1, r3
    63ec:	0010      	movs	r0, r2
    63ee:	4b11      	ldr	r3, [pc, #68]	; (6434 <xTaskResumeFromISR+0xc4>)
    63f0:	4798      	blx	r3
    63f2:	e007      	b.n	6404 <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    63f4:	693b      	ldr	r3, [r7, #16]
    63f6:	3318      	adds	r3, #24
    63f8:	001a      	movs	r2, r3
    63fa:	4b0f      	ldr	r3, [pc, #60]	; (6438 <xTaskResumeFromISR+0xc8>)
    63fc:	0011      	movs	r1, r2
    63fe:	0018      	movs	r0, r3
    6400:	4b0c      	ldr	r3, [pc, #48]	; (6434 <xTaskResumeFromISR+0xc4>)
    6402:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6404:	68fb      	ldr	r3, [r7, #12]
    6406:	0018      	movs	r0, r3
    6408:	4b0c      	ldr	r3, [pc, #48]	; (643c <xTaskResumeFromISR+0xcc>)
    640a:	4798      	blx	r3

		return xYieldRequired;
    640c:	697b      	ldr	r3, [r7, #20]
	}
    640e:	0018      	movs	r0, r3
    6410:	46bd      	mov	sp, r7
    6412:	b006      	add	sp, #24
    6414:	bd80      	pop	{r7, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	00001fa5 	.word	0x00001fa5
    641c:	0000625d 	.word	0x0000625d
    6420:	2000543c 	.word	0x2000543c
    6424:	2000533c 	.word	0x2000533c
    6428:	00005353 	.word	0x00005353
    642c:	2000541c 	.word	0x2000541c
    6430:	20005340 	.word	0x20005340
    6434:	000052a3 	.word	0x000052a3
    6438:	200053d4 	.word	0x200053d4
    643c:	00001fb1 	.word	0x00001fb1

00006440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    6440:	b590      	push	{r4, r7, lr}
    6442:	b085      	sub	sp, #20
    6444:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    6446:	4916      	ldr	r1, [pc, #88]	; (64a0 <vTaskStartScheduler+0x60>)
    6448:	4816      	ldr	r0, [pc, #88]	; (64a4 <vTaskStartScheduler+0x64>)
    644a:	4b17      	ldr	r3, [pc, #92]	; (64a8 <vTaskStartScheduler+0x68>)
    644c:	9301      	str	r3, [sp, #4]
    644e:	2300      	movs	r3, #0
    6450:	9300      	str	r3, [sp, #0]
    6452:	2300      	movs	r3, #0
    6454:	2282      	movs	r2, #130	; 0x82
    6456:	4c15      	ldr	r4, [pc, #84]	; (64ac <vTaskStartScheduler+0x6c>)
    6458:	47a0      	blx	r4
    645a:	0003      	movs	r3, r0
    645c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	2b01      	cmp	r3, #1
    6462:	d103      	bne.n	646c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    6464:	4b12      	ldr	r3, [pc, #72]	; (64b0 <vTaskStartScheduler+0x70>)
    6466:	4798      	blx	r3
    6468:	0003      	movs	r3, r0
    646a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    646c:	687b      	ldr	r3, [r7, #4]
    646e:	2b01      	cmp	r3, #1
    6470:	d10d      	bne.n	648e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    6472:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    6474:	4b0f      	ldr	r3, [pc, #60]	; (64b4 <vTaskStartScheduler+0x74>)
    6476:	2201      	movs	r2, #1
    6478:	4252      	negs	r2, r2
    647a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    647c:	4b0e      	ldr	r3, [pc, #56]	; (64b8 <vTaskStartScheduler+0x78>)
    647e:	2201      	movs	r2, #1
    6480:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    6482:	4b0e      	ldr	r3, [pc, #56]	; (64bc <vTaskStartScheduler+0x7c>)
    6484:	2200      	movs	r2, #0
    6486:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    6488:	4b0d      	ldr	r3, [pc, #52]	; (64c0 <vTaskStartScheduler+0x80>)
    648a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    648c:	e004      	b.n	6498 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	3301      	adds	r3, #1
    6492:	d101      	bne.n	6498 <vTaskStartScheduler+0x58>
    6494:	b672      	cpsid	i
    6496:	e7fe      	b.n	6496 <vTaskStartScheduler+0x56>
}
    6498:	46c0      	nop			; (mov r8, r8)
    649a:	46bd      	mov	sp, r7
    649c:	b003      	add	sp, #12
    649e:	bd90      	pop	{r4, r7, pc}
    64a0:	0000dc14 	.word	0x0000dc14
    64a4:	00006aed 	.word	0x00006aed
    64a8:	20005438 	.word	0x20005438
    64ac:	00005dbd 	.word	0x00005dbd
    64b0:	00006e31 	.word	0x00006e31
    64b4:	20005434 	.word	0x20005434
    64b8:	20005420 	.word	0x20005420
    64bc:	20005418 	.word	0x20005418
    64c0:	00001ed9 	.word	0x00001ed9

000064c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    64c4:	b580      	push	{r7, lr}
    64c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    64c8:	4b03      	ldr	r3, [pc, #12]	; (64d8 <vTaskSuspendAll+0x14>)
    64ca:	681b      	ldr	r3, [r3, #0]
    64cc:	1c5a      	adds	r2, r3, #1
    64ce:	4b02      	ldr	r3, [pc, #8]	; (64d8 <vTaskSuspendAll+0x14>)
    64d0:	601a      	str	r2, [r3, #0]
}
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	46bd      	mov	sp, r7
    64d6:	bd80      	pop	{r7, pc}
    64d8:	2000543c 	.word	0x2000543c

000064dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    64dc:	b580      	push	{r7, lr}
    64de:	b084      	sub	sp, #16
    64e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    64e2:	2300      	movs	r3, #0
    64e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    64e6:	2300      	movs	r3, #0
    64e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    64ea:	4b3a      	ldr	r3, [pc, #232]	; (65d4 <xTaskResumeAll+0xf8>)
    64ec:	681b      	ldr	r3, [r3, #0]
    64ee:	2b00      	cmp	r3, #0
    64f0:	d101      	bne.n	64f6 <xTaskResumeAll+0x1a>
    64f2:	b672      	cpsid	i
    64f4:	e7fe      	b.n	64f4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    64f6:	4b38      	ldr	r3, [pc, #224]	; (65d8 <xTaskResumeAll+0xfc>)
    64f8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    64fa:	4b36      	ldr	r3, [pc, #216]	; (65d4 <xTaskResumeAll+0xf8>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	1e5a      	subs	r2, r3, #1
    6500:	4b34      	ldr	r3, [pc, #208]	; (65d4 <xTaskResumeAll+0xf8>)
    6502:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6504:	4b33      	ldr	r3, [pc, #204]	; (65d4 <xTaskResumeAll+0xf8>)
    6506:	681b      	ldr	r3, [r3, #0]
    6508:	2b00      	cmp	r3, #0
    650a:	d15b      	bne.n	65c4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    650c:	4b33      	ldr	r3, [pc, #204]	; (65dc <xTaskResumeAll+0x100>)
    650e:	681b      	ldr	r3, [r3, #0]
    6510:	2b00      	cmp	r3, #0
    6512:	d057      	beq.n	65c4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    6514:	e02f      	b.n	6576 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    6516:	4b32      	ldr	r3, [pc, #200]	; (65e0 <xTaskResumeAll+0x104>)
    6518:	68db      	ldr	r3, [r3, #12]
    651a:	68db      	ldr	r3, [r3, #12]
    651c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	3318      	adds	r3, #24
    6522:	0018      	movs	r0, r3
    6524:	4b2f      	ldr	r3, [pc, #188]	; (65e4 <xTaskResumeAll+0x108>)
    6526:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	3304      	adds	r3, #4
    652c:	0018      	movs	r0, r3
    652e:	4b2d      	ldr	r3, [pc, #180]	; (65e4 <xTaskResumeAll+0x108>)
    6530:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    6532:	68fb      	ldr	r3, [r7, #12]
    6534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6536:	4b2c      	ldr	r3, [pc, #176]	; (65e8 <xTaskResumeAll+0x10c>)
    6538:	681b      	ldr	r3, [r3, #0]
    653a:	429a      	cmp	r2, r3
    653c:	d903      	bls.n	6546 <xTaskResumeAll+0x6a>
    653e:	68fb      	ldr	r3, [r7, #12]
    6540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6542:	4b29      	ldr	r3, [pc, #164]	; (65e8 <xTaskResumeAll+0x10c>)
    6544:	601a      	str	r2, [r3, #0]
    6546:	68fb      	ldr	r3, [r7, #12]
    6548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    654a:	0013      	movs	r3, r2
    654c:	009b      	lsls	r3, r3, #2
    654e:	189b      	adds	r3, r3, r2
    6550:	009b      	lsls	r3, r3, #2
    6552:	4a26      	ldr	r2, [pc, #152]	; (65ec <xTaskResumeAll+0x110>)
    6554:	189a      	adds	r2, r3, r2
    6556:	68fb      	ldr	r3, [r7, #12]
    6558:	3304      	adds	r3, #4
    655a:	0019      	movs	r1, r3
    655c:	0010      	movs	r0, r2
    655e:	4b24      	ldr	r3, [pc, #144]	; (65f0 <xTaskResumeAll+0x114>)
    6560:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6566:	4b23      	ldr	r3, [pc, #140]	; (65f4 <xTaskResumeAll+0x118>)
    6568:	681b      	ldr	r3, [r3, #0]
    656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    656c:	429a      	cmp	r2, r3
    656e:	d302      	bcc.n	6576 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    6570:	4b21      	ldr	r3, [pc, #132]	; (65f8 <xTaskResumeAll+0x11c>)
    6572:	2201      	movs	r2, #1
    6574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    6576:	4b1a      	ldr	r3, [pc, #104]	; (65e0 <xTaskResumeAll+0x104>)
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	2b00      	cmp	r3, #0
    657c:	d1cb      	bne.n	6516 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	2b00      	cmp	r3, #0
    6582:	d001      	beq.n	6588 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    6584:	4b1d      	ldr	r3, [pc, #116]	; (65fc <xTaskResumeAll+0x120>)
    6586:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    6588:	4b1d      	ldr	r3, [pc, #116]	; (6600 <xTaskResumeAll+0x124>)
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	2b00      	cmp	r3, #0
    6592:	d00f      	beq.n	65b4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    6594:	4b1b      	ldr	r3, [pc, #108]	; (6604 <xTaskResumeAll+0x128>)
    6596:	4798      	blx	r3
    6598:	1e03      	subs	r3, r0, #0
    659a:	d002      	beq.n	65a2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    659c:	4b16      	ldr	r3, [pc, #88]	; (65f8 <xTaskResumeAll+0x11c>)
    659e:	2201      	movs	r2, #1
    65a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	3b01      	subs	r3, #1
    65a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	2b00      	cmp	r3, #0
    65ac:	d1f2      	bne.n	6594 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    65ae:	4b14      	ldr	r3, [pc, #80]	; (6600 <xTaskResumeAll+0x124>)
    65b0:	2200      	movs	r2, #0
    65b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    65b4:	4b10      	ldr	r3, [pc, #64]	; (65f8 <xTaskResumeAll+0x11c>)
    65b6:	681b      	ldr	r3, [r3, #0]
    65b8:	2b00      	cmp	r3, #0
    65ba:	d003      	beq.n	65c4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    65bc:	2301      	movs	r3, #1
    65be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    65c0:	4b11      	ldr	r3, [pc, #68]	; (6608 <xTaskResumeAll+0x12c>)
    65c2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    65c4:	4b11      	ldr	r3, [pc, #68]	; (660c <xTaskResumeAll+0x130>)
    65c6:	4798      	blx	r3

	return xAlreadyYielded;
    65c8:	68bb      	ldr	r3, [r7, #8]
}
    65ca:	0018      	movs	r0, r3
    65cc:	46bd      	mov	sp, r7
    65ce:	b004      	add	sp, #16
    65d0:	bd80      	pop	{r7, pc}
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	2000543c 	.word	0x2000543c
    65d8:	00001f51 	.word	0x00001f51
    65dc:	20005414 	.word	0x20005414
    65e0:	200053d4 	.word	0x200053d4
    65e4:	00005353 	.word	0x00005353
    65e8:	2000541c 	.word	0x2000541c
    65ec:	20005340 	.word	0x20005340
    65f0:	000052a3 	.word	0x000052a3
    65f4:	2000533c 	.word	0x2000533c
    65f8:	20005428 	.word	0x20005428
    65fc:	00006c3d 	.word	0x00006c3d
    6600:	20005424 	.word	0x20005424
    6604:	0000662d 	.word	0x0000662d
    6608:	00001f31 	.word	0x00001f31
    660c:	00001f75 	.word	0x00001f75

00006610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    6610:	b580      	push	{r7, lr}
    6612:	b082      	sub	sp, #8
    6614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    6616:	4b04      	ldr	r3, [pc, #16]	; (6628 <xTaskGetTickCount+0x18>)
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    661c:	687b      	ldr	r3, [r7, #4]
}
    661e:	0018      	movs	r0, r3
    6620:	46bd      	mov	sp, r7
    6622:	b002      	add	sp, #8
    6624:	bd80      	pop	{r7, pc}
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	20005418 	.word	0x20005418

0000662c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    662c:	b580      	push	{r7, lr}
    662e:	b086      	sub	sp, #24
    6630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    6632:	2300      	movs	r3, #0
    6634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6636:	4b50      	ldr	r3, [pc, #320]	; (6778 <xTaskIncrementTick+0x14c>)
    6638:	681b      	ldr	r3, [r3, #0]
    663a:	2b00      	cmp	r3, #0
    663c:	d000      	beq.n	6640 <xTaskIncrementTick+0x14>
    663e:	e089      	b.n	6754 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    6640:	4b4e      	ldr	r3, [pc, #312]	; (677c <xTaskIncrementTick+0x150>)
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	3301      	adds	r3, #1
    6646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    6648:	4b4c      	ldr	r3, [pc, #304]	; (677c <xTaskIncrementTick+0x150>)
    664a:	693a      	ldr	r2, [r7, #16]
    664c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    664e:	693b      	ldr	r3, [r7, #16]
    6650:	2b00      	cmp	r3, #0
    6652:	d117      	bne.n	6684 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    6654:	4b4a      	ldr	r3, [pc, #296]	; (6780 <xTaskIncrementTick+0x154>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	2b00      	cmp	r3, #0
    665c:	d001      	beq.n	6662 <xTaskIncrementTick+0x36>
    665e:	b672      	cpsid	i
    6660:	e7fe      	b.n	6660 <xTaskIncrementTick+0x34>
    6662:	4b47      	ldr	r3, [pc, #284]	; (6780 <xTaskIncrementTick+0x154>)
    6664:	681b      	ldr	r3, [r3, #0]
    6666:	60fb      	str	r3, [r7, #12]
    6668:	4b46      	ldr	r3, [pc, #280]	; (6784 <xTaskIncrementTick+0x158>)
    666a:	681a      	ldr	r2, [r3, #0]
    666c:	4b44      	ldr	r3, [pc, #272]	; (6780 <xTaskIncrementTick+0x154>)
    666e:	601a      	str	r2, [r3, #0]
    6670:	4b44      	ldr	r3, [pc, #272]	; (6784 <xTaskIncrementTick+0x158>)
    6672:	68fa      	ldr	r2, [r7, #12]
    6674:	601a      	str	r2, [r3, #0]
    6676:	4b44      	ldr	r3, [pc, #272]	; (6788 <xTaskIncrementTick+0x15c>)
    6678:	681b      	ldr	r3, [r3, #0]
    667a:	1c5a      	adds	r2, r3, #1
    667c:	4b42      	ldr	r3, [pc, #264]	; (6788 <xTaskIncrementTick+0x15c>)
    667e:	601a      	str	r2, [r3, #0]
    6680:	4b42      	ldr	r3, [pc, #264]	; (678c <xTaskIncrementTick+0x160>)
    6682:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    6684:	4b42      	ldr	r3, [pc, #264]	; (6790 <xTaskIncrementTick+0x164>)
    6686:	681b      	ldr	r3, [r3, #0]
    6688:	693a      	ldr	r2, [r7, #16]
    668a:	429a      	cmp	r2, r3
    668c:	d34e      	bcc.n	672c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    668e:	4b3c      	ldr	r3, [pc, #240]	; (6780 <xTaskIncrementTick+0x154>)
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	2b00      	cmp	r3, #0
    6696:	d101      	bne.n	669c <xTaskIncrementTick+0x70>
    6698:	2301      	movs	r3, #1
    669a:	e000      	b.n	669e <xTaskIncrementTick+0x72>
    669c:	2300      	movs	r3, #0
    669e:	2b00      	cmp	r3, #0
    66a0:	d004      	beq.n	66ac <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    66a2:	4b3b      	ldr	r3, [pc, #236]	; (6790 <xTaskIncrementTick+0x164>)
    66a4:	2201      	movs	r2, #1
    66a6:	4252      	negs	r2, r2
    66a8:	601a      	str	r2, [r3, #0]
					break;
    66aa:	e03f      	b.n	672c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    66ac:	4b34      	ldr	r3, [pc, #208]	; (6780 <xTaskIncrementTick+0x154>)
    66ae:	681b      	ldr	r3, [r3, #0]
    66b0:	68db      	ldr	r3, [r3, #12]
    66b2:	68db      	ldr	r3, [r3, #12]
    66b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    66b6:	68bb      	ldr	r3, [r7, #8]
    66b8:	685b      	ldr	r3, [r3, #4]
    66ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    66bc:	693a      	ldr	r2, [r7, #16]
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	429a      	cmp	r2, r3
    66c2:	d203      	bcs.n	66cc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    66c4:	4b32      	ldr	r3, [pc, #200]	; (6790 <xTaskIncrementTick+0x164>)
    66c6:	687a      	ldr	r2, [r7, #4]
    66c8:	601a      	str	r2, [r3, #0]
						break;
    66ca:	e02f      	b.n	672c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    66cc:	68bb      	ldr	r3, [r7, #8]
    66ce:	3304      	adds	r3, #4
    66d0:	0018      	movs	r0, r3
    66d2:	4b30      	ldr	r3, [pc, #192]	; (6794 <xTaskIncrementTick+0x168>)
    66d4:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    66d6:	68bb      	ldr	r3, [r7, #8]
    66d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66da:	2b00      	cmp	r3, #0
    66dc:	d004      	beq.n	66e8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    66de:	68bb      	ldr	r3, [r7, #8]
    66e0:	3318      	adds	r3, #24
    66e2:	0018      	movs	r0, r3
    66e4:	4b2b      	ldr	r3, [pc, #172]	; (6794 <xTaskIncrementTick+0x168>)
    66e6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    66e8:	68bb      	ldr	r3, [r7, #8]
    66ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    66ec:	4b2a      	ldr	r3, [pc, #168]	; (6798 <xTaskIncrementTick+0x16c>)
    66ee:	681b      	ldr	r3, [r3, #0]
    66f0:	429a      	cmp	r2, r3
    66f2:	d903      	bls.n	66fc <xTaskIncrementTick+0xd0>
    66f4:	68bb      	ldr	r3, [r7, #8]
    66f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    66f8:	4b27      	ldr	r3, [pc, #156]	; (6798 <xTaskIncrementTick+0x16c>)
    66fa:	601a      	str	r2, [r3, #0]
    66fc:	68bb      	ldr	r3, [r7, #8]
    66fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6700:	0013      	movs	r3, r2
    6702:	009b      	lsls	r3, r3, #2
    6704:	189b      	adds	r3, r3, r2
    6706:	009b      	lsls	r3, r3, #2
    6708:	4a24      	ldr	r2, [pc, #144]	; (679c <xTaskIncrementTick+0x170>)
    670a:	189a      	adds	r2, r3, r2
    670c:	68bb      	ldr	r3, [r7, #8]
    670e:	3304      	adds	r3, #4
    6710:	0019      	movs	r1, r3
    6712:	0010      	movs	r0, r2
    6714:	4b22      	ldr	r3, [pc, #136]	; (67a0 <xTaskIncrementTick+0x174>)
    6716:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6718:	68bb      	ldr	r3, [r7, #8]
    671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    671c:	4b21      	ldr	r3, [pc, #132]	; (67a4 <xTaskIncrementTick+0x178>)
    671e:	681b      	ldr	r3, [r3, #0]
    6720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6722:	429a      	cmp	r2, r3
    6724:	d3b3      	bcc.n	668e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    6726:	2301      	movs	r3, #1
    6728:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    672a:	e7b0      	b.n	668e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    672c:	4b1d      	ldr	r3, [pc, #116]	; (67a4 <xTaskIncrementTick+0x178>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6732:	491a      	ldr	r1, [pc, #104]	; (679c <xTaskIncrementTick+0x170>)
    6734:	0013      	movs	r3, r2
    6736:	009b      	lsls	r3, r3, #2
    6738:	189b      	adds	r3, r3, r2
    673a:	009b      	lsls	r3, r3, #2
    673c:	585b      	ldr	r3, [r3, r1]
    673e:	2b01      	cmp	r3, #1
    6740:	d901      	bls.n	6746 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
    6742:	2301      	movs	r3, #1
    6744:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    6746:	4b18      	ldr	r3, [pc, #96]	; (67a8 <xTaskIncrementTick+0x17c>)
    6748:	681b      	ldr	r3, [r3, #0]
    674a:	2b00      	cmp	r3, #0
    674c:	d109      	bne.n	6762 <xTaskIncrementTick+0x136>
			{
				vApplicationTickHook();
    674e:	4b17      	ldr	r3, [pc, #92]	; (67ac <xTaskIncrementTick+0x180>)
    6750:	4798      	blx	r3
    6752:	e006      	b.n	6762 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    6754:	4b14      	ldr	r3, [pc, #80]	; (67a8 <xTaskIncrementTick+0x17c>)
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	1c5a      	adds	r2, r3, #1
    675a:	4b13      	ldr	r3, [pc, #76]	; (67a8 <xTaskIncrementTick+0x17c>)
    675c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    675e:	4b13      	ldr	r3, [pc, #76]	; (67ac <xTaskIncrementTick+0x180>)
    6760:	4798      	blx	r3
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    6762:	4b13      	ldr	r3, [pc, #76]	; (67b0 <xTaskIncrementTick+0x184>)
    6764:	681b      	ldr	r3, [r3, #0]
    6766:	2b00      	cmp	r3, #0
    6768:	d001      	beq.n	676e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
    676a:	2301      	movs	r3, #1
    676c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    676e:	697b      	ldr	r3, [r7, #20]
}
    6770:	0018      	movs	r0, r3
    6772:	46bd      	mov	sp, r7
    6774:	b006      	add	sp, #24
    6776:	bd80      	pop	{r7, pc}
    6778:	2000543c 	.word	0x2000543c
    677c:	20005418 	.word	0x20005418
    6780:	200053cc 	.word	0x200053cc
    6784:	200053d0 	.word	0x200053d0
    6788:	2000542c 	.word	0x2000542c
    678c:	00006c3d 	.word	0x00006c3d
    6790:	20005434 	.word	0x20005434
    6794:	00005353 	.word	0x00005353
    6798:	2000541c 	.word	0x2000541c
    679c:	20005340 	.word	0x20005340
    67a0:	000052a3 	.word	0x000052a3
    67a4:	2000533c 	.word	0x2000533c
    67a8:	20005424 	.word	0x20005424
    67ac:	0000a191 	.word	0x0000a191
    67b0:	20005428 	.word	0x20005428

000067b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b084      	sub	sp, #16
    67b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    67ba:	4b35      	ldr	r3, [pc, #212]	; (6890 <vTaskSwitchContext+0xdc>)
    67bc:	681b      	ldr	r3, [r3, #0]
    67be:	2b00      	cmp	r3, #0
    67c0:	d003      	beq.n	67ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    67c2:	4b34      	ldr	r3, [pc, #208]	; (6894 <vTaskSwitchContext+0xe0>)
    67c4:	2201      	movs	r2, #1
    67c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    67c8:	e05d      	b.n	6886 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
    67ca:	4b32      	ldr	r3, [pc, #200]	; (6894 <vTaskSwitchContext+0xe0>)
    67cc:	2200      	movs	r2, #0
    67ce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    67d0:	4b31      	ldr	r3, [pc, #196]	; (6898 <vTaskSwitchContext+0xe4>)
    67d2:	681b      	ldr	r3, [r3, #0]
    67d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67d6:	60bb      	str	r3, [r7, #8]
    67d8:	4b30      	ldr	r3, [pc, #192]	; (689c <vTaskSwitchContext+0xe8>)
    67da:	607b      	str	r3, [r7, #4]
    67dc:	68bb      	ldr	r3, [r7, #8]
    67de:	681a      	ldr	r2, [r3, #0]
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	429a      	cmp	r2, r3
    67e4:	d111      	bne.n	680a <vTaskSwitchContext+0x56>
    67e6:	68bb      	ldr	r3, [r7, #8]
    67e8:	3304      	adds	r3, #4
    67ea:	681a      	ldr	r2, [r3, #0]
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	429a      	cmp	r2, r3
    67f0:	d10b      	bne.n	680a <vTaskSwitchContext+0x56>
    67f2:	68bb      	ldr	r3, [r7, #8]
    67f4:	3308      	adds	r3, #8
    67f6:	681a      	ldr	r2, [r3, #0]
    67f8:	687b      	ldr	r3, [r7, #4]
    67fa:	429a      	cmp	r2, r3
    67fc:	d105      	bne.n	680a <vTaskSwitchContext+0x56>
    67fe:	68bb      	ldr	r3, [r7, #8]
    6800:	330c      	adds	r3, #12
    6802:	681a      	ldr	r2, [r3, #0]
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	429a      	cmp	r2, r3
    6808:	d008      	beq.n	681c <vTaskSwitchContext+0x68>
    680a:	4b23      	ldr	r3, [pc, #140]	; (6898 <vTaskSwitchContext+0xe4>)
    680c:	681a      	ldr	r2, [r3, #0]
    680e:	4b22      	ldr	r3, [pc, #136]	; (6898 <vTaskSwitchContext+0xe4>)
    6810:	681b      	ldr	r3, [r3, #0]
    6812:	3334      	adds	r3, #52	; 0x34
    6814:	0019      	movs	r1, r3
    6816:	0010      	movs	r0, r2
    6818:	4b21      	ldr	r3, [pc, #132]	; (68a0 <vTaskSwitchContext+0xec>)
    681a:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    681c:	4b21      	ldr	r3, [pc, #132]	; (68a4 <vTaskSwitchContext+0xf0>)
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	60fb      	str	r3, [r7, #12]
    6822:	e007      	b.n	6834 <vTaskSwitchContext+0x80>
    6824:	68fb      	ldr	r3, [r7, #12]
    6826:	2b00      	cmp	r3, #0
    6828:	d101      	bne.n	682e <vTaskSwitchContext+0x7a>
    682a:	b672      	cpsid	i
    682c:	e7fe      	b.n	682c <vTaskSwitchContext+0x78>
    682e:	68fb      	ldr	r3, [r7, #12]
    6830:	3b01      	subs	r3, #1
    6832:	60fb      	str	r3, [r7, #12]
    6834:	491c      	ldr	r1, [pc, #112]	; (68a8 <vTaskSwitchContext+0xf4>)
    6836:	68fa      	ldr	r2, [r7, #12]
    6838:	0013      	movs	r3, r2
    683a:	009b      	lsls	r3, r3, #2
    683c:	189b      	adds	r3, r3, r2
    683e:	009b      	lsls	r3, r3, #2
    6840:	585b      	ldr	r3, [r3, r1]
    6842:	2b00      	cmp	r3, #0
    6844:	d0ee      	beq.n	6824 <vTaskSwitchContext+0x70>
    6846:	68fa      	ldr	r2, [r7, #12]
    6848:	0013      	movs	r3, r2
    684a:	009b      	lsls	r3, r3, #2
    684c:	189b      	adds	r3, r3, r2
    684e:	009b      	lsls	r3, r3, #2
    6850:	4a15      	ldr	r2, [pc, #84]	; (68a8 <vTaskSwitchContext+0xf4>)
    6852:	189b      	adds	r3, r3, r2
    6854:	603b      	str	r3, [r7, #0]
    6856:	683b      	ldr	r3, [r7, #0]
    6858:	685b      	ldr	r3, [r3, #4]
    685a:	685a      	ldr	r2, [r3, #4]
    685c:	683b      	ldr	r3, [r7, #0]
    685e:	605a      	str	r2, [r3, #4]
    6860:	683b      	ldr	r3, [r7, #0]
    6862:	685a      	ldr	r2, [r3, #4]
    6864:	683b      	ldr	r3, [r7, #0]
    6866:	3308      	adds	r3, #8
    6868:	429a      	cmp	r2, r3
    686a:	d104      	bne.n	6876 <vTaskSwitchContext+0xc2>
    686c:	683b      	ldr	r3, [r7, #0]
    686e:	685b      	ldr	r3, [r3, #4]
    6870:	685a      	ldr	r2, [r3, #4]
    6872:	683b      	ldr	r3, [r7, #0]
    6874:	605a      	str	r2, [r3, #4]
    6876:	683b      	ldr	r3, [r7, #0]
    6878:	685b      	ldr	r3, [r3, #4]
    687a:	68da      	ldr	r2, [r3, #12]
    687c:	4b06      	ldr	r3, [pc, #24]	; (6898 <vTaskSwitchContext+0xe4>)
    687e:	601a      	str	r2, [r3, #0]
    6880:	4b08      	ldr	r3, [pc, #32]	; (68a4 <vTaskSwitchContext+0xf0>)
    6882:	68fa      	ldr	r2, [r7, #12]
    6884:	601a      	str	r2, [r3, #0]
}
    6886:	46c0      	nop			; (mov r8, r8)
    6888:	46bd      	mov	sp, r7
    688a:	b004      	add	sp, #16
    688c:	bd80      	pop	{r7, pc}
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	2000543c 	.word	0x2000543c
    6894:	20005428 	.word	0x20005428
    6898:	2000533c 	.word	0x2000533c
    689c:	a5a5a5a5 	.word	0xa5a5a5a5
    68a0:	0000a19b 	.word	0x0000a19b
    68a4:	2000541c 	.word	0x2000541c
    68a8:	20005340 	.word	0x20005340

000068ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b082      	sub	sp, #8
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
    68b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d101      	bne.n	68c0 <vTaskPlaceOnEventList+0x14>
    68bc:	b672      	cpsid	i
    68be:	e7fe      	b.n	68be <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    68c0:	4b08      	ldr	r3, [pc, #32]	; (68e4 <vTaskPlaceOnEventList+0x38>)
    68c2:	681b      	ldr	r3, [r3, #0]
    68c4:	3318      	adds	r3, #24
    68c6:	001a      	movs	r2, r3
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	0011      	movs	r1, r2
    68cc:	0018      	movs	r0, r3
    68ce:	4b06      	ldr	r3, [pc, #24]	; (68e8 <vTaskPlaceOnEventList+0x3c>)
    68d0:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    68d2:	683b      	ldr	r3, [r7, #0]
    68d4:	2101      	movs	r1, #1
    68d6:	0018      	movs	r0, r3
    68d8:	4b04      	ldr	r3, [pc, #16]	; (68ec <vTaskPlaceOnEventList+0x40>)
    68da:	4798      	blx	r3
}
    68dc:	46c0      	nop			; (mov r8, r8)
    68de:	46bd      	mov	sp, r7
    68e0:	b002      	add	sp, #8
    68e2:	bd80      	pop	{r7, pc}
    68e4:	2000533c 	.word	0x2000533c
    68e8:	000052e7 	.word	0x000052e7
    68ec:	00006d7d 	.word	0x00006d7d

000068f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	60f8      	str	r0, [r7, #12]
    68f8:	60b9      	str	r1, [r7, #8]
    68fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	2b00      	cmp	r3, #0
    6900:	d101      	bne.n	6906 <vTaskPlaceOnEventListRestricted+0x16>
    6902:	b672      	cpsid	i
    6904:	e7fe      	b.n	6904 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    6906:	4b0c      	ldr	r3, [pc, #48]	; (6938 <vTaskPlaceOnEventListRestricted+0x48>)
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	3318      	adds	r3, #24
    690c:	001a      	movs	r2, r3
    690e:	68fb      	ldr	r3, [r7, #12]
    6910:	0011      	movs	r1, r2
    6912:	0018      	movs	r0, r3
    6914:	4b09      	ldr	r3, [pc, #36]	; (693c <vTaskPlaceOnEventListRestricted+0x4c>)
    6916:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	2b00      	cmp	r3, #0
    691c:	d002      	beq.n	6924 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    691e:	2301      	movs	r3, #1
    6920:	425b      	negs	r3, r3
    6922:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    6924:	687a      	ldr	r2, [r7, #4]
    6926:	68bb      	ldr	r3, [r7, #8]
    6928:	0011      	movs	r1, r2
    692a:	0018      	movs	r0, r3
    692c:	4b04      	ldr	r3, [pc, #16]	; (6940 <vTaskPlaceOnEventListRestricted+0x50>)
    692e:	4798      	blx	r3
	}
    6930:	46c0      	nop			; (mov r8, r8)
    6932:	46bd      	mov	sp, r7
    6934:	b004      	add	sp, #16
    6936:	bd80      	pop	{r7, pc}
    6938:	2000533c 	.word	0x2000533c
    693c:	000052a3 	.word	0x000052a3
    6940:	00006d7d 	.word	0x00006d7d

00006944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    6944:	b580      	push	{r7, lr}
    6946:	b084      	sub	sp, #16
    6948:	af00      	add	r7, sp, #0
    694a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	68db      	ldr	r3, [r3, #12]
    6950:	68db      	ldr	r3, [r3, #12]
    6952:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    6954:	68bb      	ldr	r3, [r7, #8]
    6956:	2b00      	cmp	r3, #0
    6958:	d101      	bne.n	695e <xTaskRemoveFromEventList+0x1a>
    695a:	b672      	cpsid	i
    695c:	e7fe      	b.n	695c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    695e:	68bb      	ldr	r3, [r7, #8]
    6960:	3318      	adds	r3, #24
    6962:	0018      	movs	r0, r3
    6964:	4b1f      	ldr	r3, [pc, #124]	; (69e4 <xTaskRemoveFromEventList+0xa0>)
    6966:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6968:	4b1f      	ldr	r3, [pc, #124]	; (69e8 <xTaskRemoveFromEventList+0xa4>)
    696a:	681b      	ldr	r3, [r3, #0]
    696c:	2b00      	cmp	r3, #0
    696e:	d11d      	bne.n	69ac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    6970:	68bb      	ldr	r3, [r7, #8]
    6972:	3304      	adds	r3, #4
    6974:	0018      	movs	r0, r3
    6976:	4b1b      	ldr	r3, [pc, #108]	; (69e4 <xTaskRemoveFromEventList+0xa0>)
    6978:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    697a:	68bb      	ldr	r3, [r7, #8]
    697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    697e:	4b1b      	ldr	r3, [pc, #108]	; (69ec <xTaskRemoveFromEventList+0xa8>)
    6980:	681b      	ldr	r3, [r3, #0]
    6982:	429a      	cmp	r2, r3
    6984:	d903      	bls.n	698e <xTaskRemoveFromEventList+0x4a>
    6986:	68bb      	ldr	r3, [r7, #8]
    6988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    698a:	4b18      	ldr	r3, [pc, #96]	; (69ec <xTaskRemoveFromEventList+0xa8>)
    698c:	601a      	str	r2, [r3, #0]
    698e:	68bb      	ldr	r3, [r7, #8]
    6990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6992:	0013      	movs	r3, r2
    6994:	009b      	lsls	r3, r3, #2
    6996:	189b      	adds	r3, r3, r2
    6998:	009b      	lsls	r3, r3, #2
    699a:	4a15      	ldr	r2, [pc, #84]	; (69f0 <xTaskRemoveFromEventList+0xac>)
    699c:	189a      	adds	r2, r3, r2
    699e:	68bb      	ldr	r3, [r7, #8]
    69a0:	3304      	adds	r3, #4
    69a2:	0019      	movs	r1, r3
    69a4:	0010      	movs	r0, r2
    69a6:	4b13      	ldr	r3, [pc, #76]	; (69f4 <xTaskRemoveFromEventList+0xb0>)
    69a8:	4798      	blx	r3
    69aa:	e007      	b.n	69bc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    69ac:	68bb      	ldr	r3, [r7, #8]
    69ae:	3318      	adds	r3, #24
    69b0:	001a      	movs	r2, r3
    69b2:	4b11      	ldr	r3, [pc, #68]	; (69f8 <xTaskRemoveFromEventList+0xb4>)
    69b4:	0011      	movs	r1, r2
    69b6:	0018      	movs	r0, r3
    69b8:	4b0e      	ldr	r3, [pc, #56]	; (69f4 <xTaskRemoveFromEventList+0xb0>)
    69ba:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    69bc:	68bb      	ldr	r3, [r7, #8]
    69be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    69c0:	4b0e      	ldr	r3, [pc, #56]	; (69fc <xTaskRemoveFromEventList+0xb8>)
    69c2:	681b      	ldr	r3, [r3, #0]
    69c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    69c6:	429a      	cmp	r2, r3
    69c8:	d905      	bls.n	69d6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    69ca:	2301      	movs	r3, #1
    69cc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    69ce:	4b0c      	ldr	r3, [pc, #48]	; (6a00 <xTaskRemoveFromEventList+0xbc>)
    69d0:	2201      	movs	r2, #1
    69d2:	601a      	str	r2, [r3, #0]
    69d4:	e001      	b.n	69da <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    69d6:	2300      	movs	r3, #0
    69d8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    69da:	68fb      	ldr	r3, [r7, #12]
}
    69dc:	0018      	movs	r0, r3
    69de:	46bd      	mov	sp, r7
    69e0:	b004      	add	sp, #16
    69e2:	bd80      	pop	{r7, pc}
    69e4:	00005353 	.word	0x00005353
    69e8:	2000543c 	.word	0x2000543c
    69ec:	2000541c 	.word	0x2000541c
    69f0:	20005340 	.word	0x20005340
    69f4:	000052a3 	.word	0x000052a3
    69f8:	200053d4 	.word	0x200053d4
    69fc:	2000533c 	.word	0x2000533c
    6a00:	20005428 	.word	0x20005428

00006a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b082      	sub	sp, #8
    6a08:	af00      	add	r7, sp, #0
    6a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6a0c:	4b05      	ldr	r3, [pc, #20]	; (6a24 <vTaskInternalSetTimeOutState+0x20>)
    6a0e:	681a      	ldr	r2, [r3, #0]
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    6a14:	4b04      	ldr	r3, [pc, #16]	; (6a28 <vTaskInternalSetTimeOutState+0x24>)
    6a16:	681a      	ldr	r2, [r3, #0]
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	605a      	str	r2, [r3, #4]
}
    6a1c:	46c0      	nop			; (mov r8, r8)
    6a1e:	46bd      	mov	sp, r7
    6a20:	b002      	add	sp, #8
    6a22:	bd80      	pop	{r7, pc}
    6a24:	2000542c 	.word	0x2000542c
    6a28:	20005418 	.word	0x20005418

00006a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b086      	sub	sp, #24
    6a30:	af00      	add	r7, sp, #0
    6a32:	6078      	str	r0, [r7, #4]
    6a34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d101      	bne.n	6a40 <xTaskCheckForTimeOut+0x14>
    6a3c:	b672      	cpsid	i
    6a3e:	e7fe      	b.n	6a3e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    6a40:	683b      	ldr	r3, [r7, #0]
    6a42:	2b00      	cmp	r3, #0
    6a44:	d101      	bne.n	6a4a <xTaskCheckForTimeOut+0x1e>
    6a46:	b672      	cpsid	i
    6a48:	e7fe      	b.n	6a48 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    6a4a:	4b1e      	ldr	r3, [pc, #120]	; (6ac4 <xTaskCheckForTimeOut+0x98>)
    6a4c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    6a4e:	4b1e      	ldr	r3, [pc, #120]	; (6ac8 <xTaskCheckForTimeOut+0x9c>)
    6a50:	681b      	ldr	r3, [r3, #0]
    6a52:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	685b      	ldr	r3, [r3, #4]
    6a58:	693a      	ldr	r2, [r7, #16]
    6a5a:	1ad3      	subs	r3, r2, r3
    6a5c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    6a5e:	683b      	ldr	r3, [r7, #0]
    6a60:	681b      	ldr	r3, [r3, #0]
    6a62:	3301      	adds	r3, #1
    6a64:	d102      	bne.n	6a6c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    6a66:	2300      	movs	r3, #0
    6a68:	617b      	str	r3, [r7, #20]
    6a6a:	e024      	b.n	6ab6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	681a      	ldr	r2, [r3, #0]
    6a70:	4b16      	ldr	r3, [pc, #88]	; (6acc <xTaskCheckForTimeOut+0xa0>)
    6a72:	681b      	ldr	r3, [r3, #0]
    6a74:	429a      	cmp	r2, r3
    6a76:	d007      	beq.n	6a88 <xTaskCheckForTimeOut+0x5c>
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	685a      	ldr	r2, [r3, #4]
    6a7c:	693b      	ldr	r3, [r7, #16]
    6a7e:	429a      	cmp	r2, r3
    6a80:	d802      	bhi.n	6a88 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    6a82:	2301      	movs	r3, #1
    6a84:	617b      	str	r3, [r7, #20]
    6a86:	e016      	b.n	6ab6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    6a88:	683b      	ldr	r3, [r7, #0]
    6a8a:	681a      	ldr	r2, [r3, #0]
    6a8c:	68fb      	ldr	r3, [r7, #12]
    6a8e:	429a      	cmp	r2, r3
    6a90:	d90c      	bls.n	6aac <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    6a92:	683b      	ldr	r3, [r7, #0]
    6a94:	681a      	ldr	r2, [r3, #0]
    6a96:	68fb      	ldr	r3, [r7, #12]
    6a98:	1ad2      	subs	r2, r2, r3
    6a9a:	683b      	ldr	r3, [r7, #0]
    6a9c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	0018      	movs	r0, r3
    6aa2:	4b0b      	ldr	r3, [pc, #44]	; (6ad0 <xTaskCheckForTimeOut+0xa4>)
    6aa4:	4798      	blx	r3
			xReturn = pdFALSE;
    6aa6:	2300      	movs	r3, #0
    6aa8:	617b      	str	r3, [r7, #20]
    6aaa:	e004      	b.n	6ab6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    6aac:	683b      	ldr	r3, [r7, #0]
    6aae:	2200      	movs	r2, #0
    6ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    6ab2:	2301      	movs	r3, #1
    6ab4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    6ab6:	4b07      	ldr	r3, [pc, #28]	; (6ad4 <xTaskCheckForTimeOut+0xa8>)
    6ab8:	4798      	blx	r3

	return xReturn;
    6aba:	697b      	ldr	r3, [r7, #20]
}
    6abc:	0018      	movs	r0, r3
    6abe:	46bd      	mov	sp, r7
    6ac0:	b006      	add	sp, #24
    6ac2:	bd80      	pop	{r7, pc}
    6ac4:	00001f51 	.word	0x00001f51
    6ac8:	20005418 	.word	0x20005418
    6acc:	2000542c 	.word	0x2000542c
    6ad0:	00006a05 	.word	0x00006a05
    6ad4:	00001f75 	.word	0x00001f75

00006ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    6ad8:	b580      	push	{r7, lr}
    6ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    6adc:	4b02      	ldr	r3, [pc, #8]	; (6ae8 <vTaskMissedYield+0x10>)
    6ade:	2201      	movs	r2, #1
    6ae0:	601a      	str	r2, [r3, #0]
}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	46bd      	mov	sp, r7
    6ae6:	bd80      	pop	{r7, pc}
    6ae8:	20005428 	.word	0x20005428

00006aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    6aec:	b580      	push	{r7, lr}
    6aee:	b082      	sub	sp, #8
    6af0:	af00      	add	r7, sp, #0
    6af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    6af4:	4b05      	ldr	r3, [pc, #20]	; (6b0c <prvIdleTask+0x20>)
    6af6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    6af8:	4b05      	ldr	r3, [pc, #20]	; (6b10 <prvIdleTask+0x24>)
    6afa:	681b      	ldr	r3, [r3, #0]
    6afc:	2b01      	cmp	r3, #1
    6afe:	d901      	bls.n	6b04 <prvIdleTask+0x18>
			{
				taskYIELD();
    6b00:	4b04      	ldr	r3, [pc, #16]	; (6b14 <prvIdleTask+0x28>)
    6b02:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    6b04:	4b04      	ldr	r3, [pc, #16]	; (6b18 <prvIdleTask+0x2c>)
    6b06:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    6b08:	e7f4      	b.n	6af4 <prvIdleTask+0x8>
    6b0a:	46c0      	nop			; (mov r8, r8)
    6b0c:	00006ba9 	.word	0x00006ba9
    6b10:	20005340 	.word	0x20005340
    6b14:	00001f31 	.word	0x00001f31
    6b18:	0000a17d 	.word	0x0000a17d

00006b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b082      	sub	sp, #8
    6b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    6b22:	2300      	movs	r3, #0
    6b24:	607b      	str	r3, [r7, #4]
    6b26:	e00c      	b.n	6b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    6b28:	687a      	ldr	r2, [r7, #4]
    6b2a:	0013      	movs	r3, r2
    6b2c:	009b      	lsls	r3, r3, #2
    6b2e:	189b      	adds	r3, r3, r2
    6b30:	009b      	lsls	r3, r3, #2
    6b32:	4a14      	ldr	r2, [pc, #80]	; (6b84 <prvInitialiseTaskLists+0x68>)
    6b34:	189b      	adds	r3, r3, r2
    6b36:	0018      	movs	r0, r3
    6b38:	4b13      	ldr	r3, [pc, #76]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b3a:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	3301      	adds	r3, #1
    6b40:	607b      	str	r3, [r7, #4]
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	2b04      	cmp	r3, #4
    6b46:	d9ef      	bls.n	6b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    6b48:	4b10      	ldr	r3, [pc, #64]	; (6b8c <prvInitialiseTaskLists+0x70>)
    6b4a:	0018      	movs	r0, r3
    6b4c:	4b0e      	ldr	r3, [pc, #56]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b4e:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    6b50:	4b0f      	ldr	r3, [pc, #60]	; (6b90 <prvInitialiseTaskLists+0x74>)
    6b52:	0018      	movs	r0, r3
    6b54:	4b0c      	ldr	r3, [pc, #48]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b56:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    6b58:	4b0e      	ldr	r3, [pc, #56]	; (6b94 <prvInitialiseTaskLists+0x78>)
    6b5a:	0018      	movs	r0, r3
    6b5c:	4b0a      	ldr	r3, [pc, #40]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b5e:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    6b60:	4b0d      	ldr	r3, [pc, #52]	; (6b98 <prvInitialiseTaskLists+0x7c>)
    6b62:	0018      	movs	r0, r3
    6b64:	4b08      	ldr	r3, [pc, #32]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b66:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    6b68:	4b0c      	ldr	r3, [pc, #48]	; (6b9c <prvInitialiseTaskLists+0x80>)
    6b6a:	0018      	movs	r0, r3
    6b6c:	4b06      	ldr	r3, [pc, #24]	; (6b88 <prvInitialiseTaskLists+0x6c>)
    6b6e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    6b70:	4b0b      	ldr	r3, [pc, #44]	; (6ba0 <prvInitialiseTaskLists+0x84>)
    6b72:	4a06      	ldr	r2, [pc, #24]	; (6b8c <prvInitialiseTaskLists+0x70>)
    6b74:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    6b76:	4b0b      	ldr	r3, [pc, #44]	; (6ba4 <prvInitialiseTaskLists+0x88>)
    6b78:	4a05      	ldr	r2, [pc, #20]	; (6b90 <prvInitialiseTaskLists+0x74>)
    6b7a:	601a      	str	r2, [r3, #0]
}
    6b7c:	46c0      	nop			; (mov r8, r8)
    6b7e:	46bd      	mov	sp, r7
    6b80:	b002      	add	sp, #8
    6b82:	bd80      	pop	{r7, pc}
    6b84:	20005340 	.word	0x20005340
    6b88:	00005251 	.word	0x00005251
    6b8c:	200053a4 	.word	0x200053a4
    6b90:	200053b8 	.word	0x200053b8
    6b94:	200053d4 	.word	0x200053d4
    6b98:	200053e8 	.word	0x200053e8
    6b9c:	20005400 	.word	0x20005400
    6ba0:	200053cc 	.word	0x200053cc
    6ba4:	200053d0 	.word	0x200053d0

00006ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    6ba8:	b580      	push	{r7, lr}
    6baa:	b082      	sub	sp, #8
    6bac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    6bae:	e01a      	b.n	6be6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    6bb0:	4b11      	ldr	r3, [pc, #68]	; (6bf8 <prvCheckTasksWaitingTermination+0x50>)
    6bb2:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    6bb4:	4b11      	ldr	r3, [pc, #68]	; (6bfc <prvCheckTasksWaitingTermination+0x54>)
    6bb6:	68db      	ldr	r3, [r3, #12]
    6bb8:	68db      	ldr	r3, [r3, #12]
    6bba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	3304      	adds	r3, #4
    6bc0:	0018      	movs	r0, r3
    6bc2:	4b0f      	ldr	r3, [pc, #60]	; (6c00 <prvCheckTasksWaitingTermination+0x58>)
    6bc4:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    6bc6:	4b0f      	ldr	r3, [pc, #60]	; (6c04 <prvCheckTasksWaitingTermination+0x5c>)
    6bc8:	681b      	ldr	r3, [r3, #0]
    6bca:	1e5a      	subs	r2, r3, #1
    6bcc:	4b0d      	ldr	r3, [pc, #52]	; (6c04 <prvCheckTasksWaitingTermination+0x5c>)
    6bce:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    6bd0:	4b0d      	ldr	r3, [pc, #52]	; (6c08 <prvCheckTasksWaitingTermination+0x60>)
    6bd2:	681b      	ldr	r3, [r3, #0]
    6bd4:	1e5a      	subs	r2, r3, #1
    6bd6:	4b0c      	ldr	r3, [pc, #48]	; (6c08 <prvCheckTasksWaitingTermination+0x60>)
    6bd8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    6bda:	4b0c      	ldr	r3, [pc, #48]	; (6c0c <prvCheckTasksWaitingTermination+0x64>)
    6bdc:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	0018      	movs	r0, r3
    6be2:	4b0b      	ldr	r3, [pc, #44]	; (6c10 <prvCheckTasksWaitingTermination+0x68>)
    6be4:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    6be6:	4b08      	ldr	r3, [pc, #32]	; (6c08 <prvCheckTasksWaitingTermination+0x60>)
    6be8:	681b      	ldr	r3, [r3, #0]
    6bea:	2b00      	cmp	r3, #0
    6bec:	d1e0      	bne.n	6bb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b002      	add	sp, #8
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	00001f51 	.word	0x00001f51
    6bfc:	200053e8 	.word	0x200053e8
    6c00:	00005353 	.word	0x00005353
    6c04:	20005414 	.word	0x20005414
    6c08:	200053fc 	.word	0x200053fc
    6c0c:	00001f75 	.word	0x00001f75
    6c10:	00006c15 	.word	0x00006c15

00006c14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    6c14:	b580      	push	{r7, lr}
    6c16:	b082      	sub	sp, #8
    6c18:	af00      	add	r7, sp, #0
    6c1a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6c20:	0018      	movs	r0, r3
    6c22:	4b05      	ldr	r3, [pc, #20]	; (6c38 <prvDeleteTCB+0x24>)
    6c24:	4798      	blx	r3
			vPortFree( pxTCB );
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	0018      	movs	r0, r3
    6c2a:	4b03      	ldr	r3, [pc, #12]	; (6c38 <prvDeleteTCB+0x24>)
    6c2c:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    6c2e:	46c0      	nop			; (mov r8, r8)
    6c30:	46bd      	mov	sp, r7
    6c32:	b002      	add	sp, #8
    6c34:	bd80      	pop	{r7, pc}
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	000021e5 	.word	0x000021e5

00006c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b082      	sub	sp, #8
    6c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    6c42:	4b0e      	ldr	r3, [pc, #56]	; (6c7c <prvResetNextTaskUnblockTime+0x40>)
    6c44:	681b      	ldr	r3, [r3, #0]
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d101      	bne.n	6c50 <prvResetNextTaskUnblockTime+0x14>
    6c4c:	2301      	movs	r3, #1
    6c4e:	e000      	b.n	6c52 <prvResetNextTaskUnblockTime+0x16>
    6c50:	2300      	movs	r3, #0
    6c52:	2b00      	cmp	r3, #0
    6c54:	d004      	beq.n	6c60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    6c56:	4b0a      	ldr	r3, [pc, #40]	; (6c80 <prvResetNextTaskUnblockTime+0x44>)
    6c58:	2201      	movs	r2, #1
    6c5a:	4252      	negs	r2, r2
    6c5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    6c5e:	e008      	b.n	6c72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    6c60:	4b06      	ldr	r3, [pc, #24]	; (6c7c <prvResetNextTaskUnblockTime+0x40>)
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	68db      	ldr	r3, [r3, #12]
    6c66:	68db      	ldr	r3, [r3, #12]
    6c68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	685a      	ldr	r2, [r3, #4]
    6c6e:	4b04      	ldr	r3, [pc, #16]	; (6c80 <prvResetNextTaskUnblockTime+0x44>)
    6c70:	601a      	str	r2, [r3, #0]
}
    6c72:	46c0      	nop			; (mov r8, r8)
    6c74:	46bd      	mov	sp, r7
    6c76:	b002      	add	sp, #8
    6c78:	bd80      	pop	{r7, pc}
    6c7a:	46c0      	nop			; (mov r8, r8)
    6c7c:	200053cc 	.word	0x200053cc
    6c80:	20005434 	.word	0x20005434

00006c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    6c84:	b580      	push	{r7, lr}
    6c86:	b082      	sub	sp, #8
    6c88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    6c8a:	4b0a      	ldr	r3, [pc, #40]	; (6cb4 <xTaskGetSchedulerState+0x30>)
    6c8c:	681b      	ldr	r3, [r3, #0]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d102      	bne.n	6c98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    6c92:	2301      	movs	r3, #1
    6c94:	607b      	str	r3, [r7, #4]
    6c96:	e008      	b.n	6caa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6c98:	4b07      	ldr	r3, [pc, #28]	; (6cb8 <xTaskGetSchedulerState+0x34>)
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d102      	bne.n	6ca6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    6ca0:	2302      	movs	r3, #2
    6ca2:	607b      	str	r3, [r7, #4]
    6ca4:	e001      	b.n	6caa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    6ca6:	2300      	movs	r3, #0
    6ca8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    6caa:	687b      	ldr	r3, [r7, #4]
	}
    6cac:	0018      	movs	r0, r3
    6cae:	46bd      	mov	sp, r7
    6cb0:	b002      	add	sp, #8
    6cb2:	bd80      	pop	{r7, pc}
    6cb4:	20005420 	.word	0x20005420
    6cb8:	2000543c 	.word	0x2000543c

00006cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b084      	sub	sp, #16
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    6cc8:	2300      	movs	r3, #0
    6cca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d044      	beq.n	6d5c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    6cd2:	4b25      	ldr	r3, [pc, #148]	; (6d68 <xTaskPriorityDisinherit+0xac>)
    6cd4:	681b      	ldr	r3, [r3, #0]
    6cd6:	68ba      	ldr	r2, [r7, #8]
    6cd8:	429a      	cmp	r2, r3
    6cda:	d001      	beq.n	6ce0 <xTaskPriorityDisinherit+0x24>
    6cdc:	b672      	cpsid	i
    6cde:	e7fe      	b.n	6cde <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    6ce0:	68bb      	ldr	r3, [r7, #8]
    6ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d101      	bne.n	6cec <xTaskPriorityDisinherit+0x30>
    6ce8:	b672      	cpsid	i
    6cea:	e7fe      	b.n	6cea <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    6cec:	68bb      	ldr	r3, [r7, #8]
    6cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6cf0:	1e5a      	subs	r2, r3, #1
    6cf2:	68bb      	ldr	r3, [r7, #8]
    6cf4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    6cf6:	68bb      	ldr	r3, [r7, #8]
    6cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6cfa:	68bb      	ldr	r3, [r7, #8]
    6cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6cfe:	429a      	cmp	r2, r3
    6d00:	d02c      	beq.n	6d5c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    6d02:	68bb      	ldr	r3, [r7, #8]
    6d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6d06:	2b00      	cmp	r3, #0
    6d08:	d128      	bne.n	6d5c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6d0a:	68bb      	ldr	r3, [r7, #8]
    6d0c:	3304      	adds	r3, #4
    6d0e:	0018      	movs	r0, r3
    6d10:	4b16      	ldr	r3, [pc, #88]	; (6d6c <xTaskPriorityDisinherit+0xb0>)
    6d12:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    6d14:	68bb      	ldr	r3, [r7, #8]
    6d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    6d18:	68bb      	ldr	r3, [r7, #8]
    6d1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6d1c:	68bb      	ldr	r3, [r7, #8]
    6d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d20:	2205      	movs	r2, #5
    6d22:	1ad2      	subs	r2, r2, r3
    6d24:	68bb      	ldr	r3, [r7, #8]
    6d26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    6d28:	68bb      	ldr	r3, [r7, #8]
    6d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6d2c:	4b10      	ldr	r3, [pc, #64]	; (6d70 <xTaskPriorityDisinherit+0xb4>)
    6d2e:	681b      	ldr	r3, [r3, #0]
    6d30:	429a      	cmp	r2, r3
    6d32:	d903      	bls.n	6d3c <xTaskPriorityDisinherit+0x80>
    6d34:	68bb      	ldr	r3, [r7, #8]
    6d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6d38:	4b0d      	ldr	r3, [pc, #52]	; (6d70 <xTaskPriorityDisinherit+0xb4>)
    6d3a:	601a      	str	r2, [r3, #0]
    6d3c:	68bb      	ldr	r3, [r7, #8]
    6d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6d40:	0013      	movs	r3, r2
    6d42:	009b      	lsls	r3, r3, #2
    6d44:	189b      	adds	r3, r3, r2
    6d46:	009b      	lsls	r3, r3, #2
    6d48:	4a0a      	ldr	r2, [pc, #40]	; (6d74 <xTaskPriorityDisinherit+0xb8>)
    6d4a:	189a      	adds	r2, r3, r2
    6d4c:	68bb      	ldr	r3, [r7, #8]
    6d4e:	3304      	adds	r3, #4
    6d50:	0019      	movs	r1, r3
    6d52:	0010      	movs	r0, r2
    6d54:	4b08      	ldr	r3, [pc, #32]	; (6d78 <xTaskPriorityDisinherit+0xbc>)
    6d56:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    6d58:	2301      	movs	r3, #1
    6d5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    6d5c:	68fb      	ldr	r3, [r7, #12]
	}
    6d5e:	0018      	movs	r0, r3
    6d60:	46bd      	mov	sp, r7
    6d62:	b004      	add	sp, #16
    6d64:	bd80      	pop	{r7, pc}
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	2000533c 	.word	0x2000533c
    6d6c:	00005353 	.word	0x00005353
    6d70:	2000541c 	.word	0x2000541c
    6d74:	20005340 	.word	0x20005340
    6d78:	000052a3 	.word	0x000052a3

00006d7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	b084      	sub	sp, #16
    6d80:	af00      	add	r7, sp, #0
    6d82:	6078      	str	r0, [r7, #4]
    6d84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    6d86:	4b21      	ldr	r3, [pc, #132]	; (6e0c <prvAddCurrentTaskToDelayedList+0x90>)
    6d88:	681b      	ldr	r3, [r3, #0]
    6d8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6d8c:	4b20      	ldr	r3, [pc, #128]	; (6e10 <prvAddCurrentTaskToDelayedList+0x94>)
    6d8e:	681b      	ldr	r3, [r3, #0]
    6d90:	3304      	adds	r3, #4
    6d92:	0018      	movs	r0, r3
    6d94:	4b1f      	ldr	r3, [pc, #124]	; (6e14 <prvAddCurrentTaskToDelayedList+0x98>)
    6d96:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	3301      	adds	r3, #1
    6d9c:	d10b      	bne.n	6db6 <prvAddCurrentTaskToDelayedList+0x3a>
    6d9e:	683b      	ldr	r3, [r7, #0]
    6da0:	2b00      	cmp	r3, #0
    6da2:	d008      	beq.n	6db6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6da4:	4b1a      	ldr	r3, [pc, #104]	; (6e10 <prvAddCurrentTaskToDelayedList+0x94>)
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	1d1a      	adds	r2, r3, #4
    6daa:	4b1b      	ldr	r3, [pc, #108]	; (6e18 <prvAddCurrentTaskToDelayedList+0x9c>)
    6dac:	0011      	movs	r1, r2
    6dae:	0018      	movs	r0, r3
    6db0:	4b1a      	ldr	r3, [pc, #104]	; (6e1c <prvAddCurrentTaskToDelayedList+0xa0>)
    6db2:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    6db4:	e026      	b.n	6e04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    6db6:	68fa      	ldr	r2, [r7, #12]
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	18d3      	adds	r3, r2, r3
    6dbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    6dbe:	4b14      	ldr	r3, [pc, #80]	; (6e10 <prvAddCurrentTaskToDelayedList+0x94>)
    6dc0:	681b      	ldr	r3, [r3, #0]
    6dc2:	68ba      	ldr	r2, [r7, #8]
    6dc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    6dc6:	68ba      	ldr	r2, [r7, #8]
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	429a      	cmp	r2, r3
    6dcc:	d209      	bcs.n	6de2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6dce:	4b14      	ldr	r3, [pc, #80]	; (6e20 <prvAddCurrentTaskToDelayedList+0xa4>)
    6dd0:	681a      	ldr	r2, [r3, #0]
    6dd2:	4b0f      	ldr	r3, [pc, #60]	; (6e10 <prvAddCurrentTaskToDelayedList+0x94>)
    6dd4:	681b      	ldr	r3, [r3, #0]
    6dd6:	3304      	adds	r3, #4
    6dd8:	0019      	movs	r1, r3
    6dda:	0010      	movs	r0, r2
    6ddc:	4b11      	ldr	r3, [pc, #68]	; (6e24 <prvAddCurrentTaskToDelayedList+0xa8>)
    6dde:	4798      	blx	r3
}
    6de0:	e010      	b.n	6e04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6de2:	4b11      	ldr	r3, [pc, #68]	; (6e28 <prvAddCurrentTaskToDelayedList+0xac>)
    6de4:	681a      	ldr	r2, [r3, #0]
    6de6:	4b0a      	ldr	r3, [pc, #40]	; (6e10 <prvAddCurrentTaskToDelayedList+0x94>)
    6de8:	681b      	ldr	r3, [r3, #0]
    6dea:	3304      	adds	r3, #4
    6dec:	0019      	movs	r1, r3
    6dee:	0010      	movs	r0, r2
    6df0:	4b0c      	ldr	r3, [pc, #48]	; (6e24 <prvAddCurrentTaskToDelayedList+0xa8>)
    6df2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    6df4:	4b0d      	ldr	r3, [pc, #52]	; (6e2c <prvAddCurrentTaskToDelayedList+0xb0>)
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	68ba      	ldr	r2, [r7, #8]
    6dfa:	429a      	cmp	r2, r3
    6dfc:	d202      	bcs.n	6e04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    6dfe:	4b0b      	ldr	r3, [pc, #44]	; (6e2c <prvAddCurrentTaskToDelayedList+0xb0>)
    6e00:	68ba      	ldr	r2, [r7, #8]
    6e02:	601a      	str	r2, [r3, #0]
}
    6e04:	46c0      	nop			; (mov r8, r8)
    6e06:	46bd      	mov	sp, r7
    6e08:	b004      	add	sp, #16
    6e0a:	bd80      	pop	{r7, pc}
    6e0c:	20005418 	.word	0x20005418
    6e10:	2000533c 	.word	0x2000533c
    6e14:	00005353 	.word	0x00005353
    6e18:	20005400 	.word	0x20005400
    6e1c:	000052a3 	.word	0x000052a3
    6e20:	200053d0 	.word	0x200053d0
    6e24:	000052e7 	.word	0x000052e7
    6e28:	200053cc 	.word	0x200053cc
    6e2c:	20005434 	.word	0x20005434

00006e30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    6e30:	b590      	push	{r4, r7, lr}
    6e32:	b085      	sub	sp, #20
    6e34:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    6e36:	2300      	movs	r3, #0
    6e38:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    6e3a:	4b0e      	ldr	r3, [pc, #56]	; (6e74 <xTimerCreateTimerTask+0x44>)
    6e3c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    6e3e:	4b0e      	ldr	r3, [pc, #56]	; (6e78 <xTimerCreateTimerTask+0x48>)
    6e40:	681b      	ldr	r3, [r3, #0]
    6e42:	2b00      	cmp	r3, #0
    6e44:	d00c      	beq.n	6e60 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    6e46:	2382      	movs	r3, #130	; 0x82
    6e48:	005a      	lsls	r2, r3, #1
    6e4a:	490c      	ldr	r1, [pc, #48]	; (6e7c <xTimerCreateTimerTask+0x4c>)
    6e4c:	480c      	ldr	r0, [pc, #48]	; (6e80 <xTimerCreateTimerTask+0x50>)
    6e4e:	4b0d      	ldr	r3, [pc, #52]	; (6e84 <xTimerCreateTimerTask+0x54>)
    6e50:	9301      	str	r3, [sp, #4]
    6e52:	2304      	movs	r3, #4
    6e54:	9300      	str	r3, [sp, #0]
    6e56:	2300      	movs	r3, #0
    6e58:	4c0b      	ldr	r4, [pc, #44]	; (6e88 <xTimerCreateTimerTask+0x58>)
    6e5a:	47a0      	blx	r4
    6e5c:	0003      	movs	r3, r0
    6e5e:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d101      	bne.n	6e6a <xTimerCreateTimerTask+0x3a>
    6e66:	b672      	cpsid	i
    6e68:	e7fe      	b.n	6e68 <xTimerCreateTimerTask+0x38>
	return xReturn;
    6e6a:	687b      	ldr	r3, [r7, #4]
}
    6e6c:	0018      	movs	r0, r3
    6e6e:	46bd      	mov	sp, r7
    6e70:	b003      	add	sp, #12
    6e72:	bd90      	pop	{r4, r7, pc}
    6e74:	00007441 	.word	0x00007441
    6e78:	20005470 	.word	0x20005470
    6e7c:	0000dc2c 	.word	0x0000dc2c
    6e80:	00007055 	.word	0x00007055
    6e84:	20005474 	.word	0x20005474
    6e88:	00005dbd 	.word	0x00005dbd

00006e8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    6e8c:	b590      	push	{r4, r7, lr}
    6e8e:	b089      	sub	sp, #36	; 0x24
    6e90:	af02      	add	r7, sp, #8
    6e92:	60f8      	str	r0, [r7, #12]
    6e94:	60b9      	str	r1, [r7, #8]
    6e96:	607a      	str	r2, [r7, #4]
    6e98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    6e9a:	202c      	movs	r0, #44	; 0x2c
    6e9c:	4b0b      	ldr	r3, [pc, #44]	; (6ecc <xTimerCreate+0x40>)
    6e9e:	4798      	blx	r3
    6ea0:	0003      	movs	r3, r0
    6ea2:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    6ea4:	697b      	ldr	r3, [r7, #20]
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d00a      	beq.n	6ec0 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    6eaa:	683c      	ldr	r4, [r7, #0]
    6eac:	687a      	ldr	r2, [r7, #4]
    6eae:	68b9      	ldr	r1, [r7, #8]
    6eb0:	68f8      	ldr	r0, [r7, #12]
    6eb2:	697b      	ldr	r3, [r7, #20]
    6eb4:	9301      	str	r3, [sp, #4]
    6eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6eb8:	9300      	str	r3, [sp, #0]
    6eba:	0023      	movs	r3, r4
    6ebc:	4c04      	ldr	r4, [pc, #16]	; (6ed0 <xTimerCreate+0x44>)
    6ebe:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    6ec0:	697b      	ldr	r3, [r7, #20]
	}
    6ec2:	0018      	movs	r0, r3
    6ec4:	46bd      	mov	sp, r7
    6ec6:	b007      	add	sp, #28
    6ec8:	bd90      	pop	{r4, r7, pc}
    6eca:	46c0      	nop			; (mov r8, r8)
    6ecc:	0000207d 	.word	0x0000207d
    6ed0:	00006ed5 	.word	0x00006ed5

00006ed4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b084      	sub	sp, #16
    6ed8:	af00      	add	r7, sp, #0
    6eda:	60f8      	str	r0, [r7, #12]
    6edc:	60b9      	str	r1, [r7, #8]
    6ede:	607a      	str	r2, [r7, #4]
    6ee0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    6ee2:	68bb      	ldr	r3, [r7, #8]
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d101      	bne.n	6eec <prvInitialiseNewTimer+0x18>
    6ee8:	b672      	cpsid	i
    6eea:	e7fe      	b.n	6eea <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    6eec:	69fb      	ldr	r3, [r7, #28]
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d015      	beq.n	6f1e <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    6ef2:	4b0d      	ldr	r3, [pc, #52]	; (6f28 <prvInitialiseNewTimer+0x54>)
    6ef4:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    6ef6:	69fb      	ldr	r3, [r7, #28]
    6ef8:	68fa      	ldr	r2, [r7, #12]
    6efa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    6efc:	69fb      	ldr	r3, [r7, #28]
    6efe:	68ba      	ldr	r2, [r7, #8]
    6f00:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    6f02:	69fb      	ldr	r3, [r7, #28]
    6f04:	687a      	ldr	r2, [r7, #4]
    6f06:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    6f08:	69fb      	ldr	r3, [r7, #28]
    6f0a:	683a      	ldr	r2, [r7, #0]
    6f0c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    6f0e:	69fb      	ldr	r3, [r7, #28]
    6f10:	69ba      	ldr	r2, [r7, #24]
    6f12:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    6f14:	69fb      	ldr	r3, [r7, #28]
    6f16:	3304      	adds	r3, #4
    6f18:	0018      	movs	r0, r3
    6f1a:	4b04      	ldr	r3, [pc, #16]	; (6f2c <prvInitialiseNewTimer+0x58>)
    6f1c:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	46bd      	mov	sp, r7
    6f22:	b004      	add	sp, #16
    6f24:	bd80      	pop	{r7, pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	00007441 	.word	0x00007441
    6f2c:	0000528d 	.word	0x0000528d

00006f30 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    6f30:	b590      	push	{r4, r7, lr}
    6f32:	b08b      	sub	sp, #44	; 0x2c
    6f34:	af00      	add	r7, sp, #0
    6f36:	60f8      	str	r0, [r7, #12]
    6f38:	60b9      	str	r1, [r7, #8]
    6f3a:	607a      	str	r2, [r7, #4]
    6f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    6f3e:	2300      	movs	r3, #0
    6f40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    6f42:	68fb      	ldr	r3, [r7, #12]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d101      	bne.n	6f4c <xTimerGenericCommand+0x1c>
    6f48:	b672      	cpsid	i
    6f4a:	e7fe      	b.n	6f4a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    6f4c:	4b1e      	ldr	r3, [pc, #120]	; (6fc8 <xTimerGenericCommand+0x98>)
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	2b00      	cmp	r3, #0
    6f52:	d033      	beq.n	6fbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    6f54:	2314      	movs	r3, #20
    6f56:	18fb      	adds	r3, r7, r3
    6f58:	68ba      	ldr	r2, [r7, #8]
    6f5a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6f5c:	2314      	movs	r3, #20
    6f5e:	18fb      	adds	r3, r7, r3
    6f60:	687a      	ldr	r2, [r7, #4]
    6f62:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    6f64:	2314      	movs	r3, #20
    6f66:	18fb      	adds	r3, r7, r3
    6f68:	68fa      	ldr	r2, [r7, #12]
    6f6a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    6f6c:	68bb      	ldr	r3, [r7, #8]
    6f6e:	2b05      	cmp	r3, #5
    6f70:	dc1a      	bgt.n	6fa8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    6f72:	4b16      	ldr	r3, [pc, #88]	; (6fcc <xTimerGenericCommand+0x9c>)
    6f74:	4798      	blx	r3
    6f76:	0003      	movs	r3, r0
    6f78:	2b02      	cmp	r3, #2
    6f7a:	d10a      	bne.n	6f92 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    6f7c:	4b12      	ldr	r3, [pc, #72]	; (6fc8 <xTimerGenericCommand+0x98>)
    6f7e:	6818      	ldr	r0, [r3, #0]
    6f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6f82:	2314      	movs	r3, #20
    6f84:	18f9      	adds	r1, r7, r3
    6f86:	2300      	movs	r3, #0
    6f88:	4c11      	ldr	r4, [pc, #68]	; (6fd0 <xTimerGenericCommand+0xa0>)
    6f8a:	47a0      	blx	r4
    6f8c:	0003      	movs	r3, r0
    6f8e:	627b      	str	r3, [r7, #36]	; 0x24
    6f90:	e014      	b.n	6fbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    6f92:	4b0d      	ldr	r3, [pc, #52]	; (6fc8 <xTimerGenericCommand+0x98>)
    6f94:	6818      	ldr	r0, [r3, #0]
    6f96:	2314      	movs	r3, #20
    6f98:	18f9      	adds	r1, r7, r3
    6f9a:	2300      	movs	r3, #0
    6f9c:	2200      	movs	r2, #0
    6f9e:	4c0c      	ldr	r4, [pc, #48]	; (6fd0 <xTimerGenericCommand+0xa0>)
    6fa0:	47a0      	blx	r4
    6fa2:	0003      	movs	r3, r0
    6fa4:	627b      	str	r3, [r7, #36]	; 0x24
    6fa6:	e009      	b.n	6fbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    6fa8:	4b07      	ldr	r3, [pc, #28]	; (6fc8 <xTimerGenericCommand+0x98>)
    6faa:	6818      	ldr	r0, [r3, #0]
    6fac:	683a      	ldr	r2, [r7, #0]
    6fae:	2314      	movs	r3, #20
    6fb0:	18f9      	adds	r1, r7, r3
    6fb2:	2300      	movs	r3, #0
    6fb4:	4c07      	ldr	r4, [pc, #28]	; (6fd4 <xTimerGenericCommand+0xa4>)
    6fb6:	47a0      	blx	r4
    6fb8:	0003      	movs	r3, r0
    6fba:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    6fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6fbe:	0018      	movs	r0, r3
    6fc0:	46bd      	mov	sp, r7
    6fc2:	b00b      	add	sp, #44	; 0x2c
    6fc4:	bd90      	pop	{r4, r7, pc}
    6fc6:	46c0      	nop			; (mov r8, r8)
    6fc8:	20005470 	.word	0x20005470
    6fcc:	00006c85 	.word	0x00006c85
    6fd0:	00005525 	.word	0x00005525
    6fd4:	00005705 	.word	0x00005705

00006fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    6fd8:	b590      	push	{r4, r7, lr}
    6fda:	b087      	sub	sp, #28
    6fdc:	af02      	add	r7, sp, #8
    6fde:	6078      	str	r0, [r7, #4]
    6fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    6fe2:	4b18      	ldr	r3, [pc, #96]	; (7044 <prvProcessExpiredTimer+0x6c>)
    6fe4:	681b      	ldr	r3, [r3, #0]
    6fe6:	68db      	ldr	r3, [r3, #12]
    6fe8:	68db      	ldr	r3, [r3, #12]
    6fea:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6fec:	68fb      	ldr	r3, [r7, #12]
    6fee:	3304      	adds	r3, #4
    6ff0:	0018      	movs	r0, r3
    6ff2:	4b15      	ldr	r3, [pc, #84]	; (7048 <prvProcessExpiredTimer+0x70>)
    6ff4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    6ff6:	68fb      	ldr	r3, [r7, #12]
    6ff8:	69db      	ldr	r3, [r3, #28]
    6ffa:	2b01      	cmp	r3, #1
    6ffc:	d119      	bne.n	7032 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    6ffe:	68fb      	ldr	r3, [r7, #12]
    7000:	699a      	ldr	r2, [r3, #24]
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	18d1      	adds	r1, r2, r3
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	683a      	ldr	r2, [r7, #0]
    700a:	68f8      	ldr	r0, [r7, #12]
    700c:	4c0f      	ldr	r4, [pc, #60]	; (704c <prvProcessExpiredTimer+0x74>)
    700e:	47a0      	blx	r4
    7010:	1e03      	subs	r3, r0, #0
    7012:	d00e      	beq.n	7032 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    7014:	687a      	ldr	r2, [r7, #4]
    7016:	68f8      	ldr	r0, [r7, #12]
    7018:	2300      	movs	r3, #0
    701a:	9300      	str	r3, [sp, #0]
    701c:	2300      	movs	r3, #0
    701e:	2100      	movs	r1, #0
    7020:	4c0b      	ldr	r4, [pc, #44]	; (7050 <prvProcessExpiredTimer+0x78>)
    7022:	47a0      	blx	r4
    7024:	0003      	movs	r3, r0
    7026:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    7028:	68bb      	ldr	r3, [r7, #8]
    702a:	2b00      	cmp	r3, #0
    702c:	d101      	bne.n	7032 <prvProcessExpiredTimer+0x5a>
    702e:	b672      	cpsid	i
    7030:	e7fe      	b.n	7030 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    7032:	68fb      	ldr	r3, [r7, #12]
    7034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7036:	68fa      	ldr	r2, [r7, #12]
    7038:	0010      	movs	r0, r2
    703a:	4798      	blx	r3
}
    703c:	46c0      	nop			; (mov r8, r8)
    703e:	46bd      	mov	sp, r7
    7040:	b005      	add	sp, #20
    7042:	bd90      	pop	{r4, r7, pc}
    7044:	20005468 	.word	0x20005468
    7048:	00005353 	.word	0x00005353
    704c:	000071b5 	.word	0x000071b5
    7050:	00006f31 	.word	0x00006f31

00007054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    7054:	b580      	push	{r7, lr}
    7056:	b084      	sub	sp, #16
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    705c:	2308      	movs	r3, #8
    705e:	18fb      	adds	r3, r7, r3
    7060:	0018      	movs	r0, r3
    7062:	4b06      	ldr	r3, [pc, #24]	; (707c <prvTimerTask+0x28>)
    7064:	4798      	blx	r3
    7066:	0003      	movs	r3, r0
    7068:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    706a:	68ba      	ldr	r2, [r7, #8]
    706c:	68fb      	ldr	r3, [r7, #12]
    706e:	0011      	movs	r1, r2
    7070:	0018      	movs	r0, r3
    7072:	4b03      	ldr	r3, [pc, #12]	; (7080 <prvTimerTask+0x2c>)
    7074:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    7076:	4b03      	ldr	r3, [pc, #12]	; (7084 <prvTimerTask+0x30>)
    7078:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    707a:	e7ef      	b.n	705c <prvTimerTask+0x8>
    707c:	0000712d 	.word	0x0000712d
    7080:	00007089 	.word	0x00007089
    7084:	0000723d 	.word	0x0000723d

00007088 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    7088:	b580      	push	{r7, lr}
    708a:	b084      	sub	sp, #16
    708c:	af00      	add	r7, sp, #0
    708e:	6078      	str	r0, [r7, #4]
    7090:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    7092:	4b1e      	ldr	r3, [pc, #120]	; (710c <prvProcessTimerOrBlockTask+0x84>)
    7094:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    7096:	2308      	movs	r3, #8
    7098:	18fb      	adds	r3, r7, r3
    709a:	0018      	movs	r0, r3
    709c:	4b1c      	ldr	r3, [pc, #112]	; (7110 <prvProcessTimerOrBlockTask+0x88>)
    709e:	4798      	blx	r3
    70a0:	0003      	movs	r3, r0
    70a2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    70a4:	68bb      	ldr	r3, [r7, #8]
    70a6:	2b00      	cmp	r3, #0
    70a8:	d129      	bne.n	70fe <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    70aa:	683b      	ldr	r3, [r7, #0]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d10c      	bne.n	70ca <prvProcessTimerOrBlockTask+0x42>
    70b0:	687a      	ldr	r2, [r7, #4]
    70b2:	68fb      	ldr	r3, [r7, #12]
    70b4:	429a      	cmp	r2, r3
    70b6:	d808      	bhi.n	70ca <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    70b8:	4b16      	ldr	r3, [pc, #88]	; (7114 <prvProcessTimerOrBlockTask+0x8c>)
    70ba:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    70bc:	68fa      	ldr	r2, [r7, #12]
    70be:	687b      	ldr	r3, [r7, #4]
    70c0:	0011      	movs	r1, r2
    70c2:	0018      	movs	r0, r3
    70c4:	4b14      	ldr	r3, [pc, #80]	; (7118 <prvProcessTimerOrBlockTask+0x90>)
    70c6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    70c8:	e01b      	b.n	7102 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    70ca:	683b      	ldr	r3, [r7, #0]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d006      	beq.n	70de <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    70d0:	4b12      	ldr	r3, [pc, #72]	; (711c <prvProcessTimerOrBlockTask+0x94>)
    70d2:	681b      	ldr	r3, [r3, #0]
    70d4:	681b      	ldr	r3, [r3, #0]
    70d6:	425a      	negs	r2, r3
    70d8:	4153      	adcs	r3, r2
    70da:	b2db      	uxtb	r3, r3
    70dc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    70de:	4b10      	ldr	r3, [pc, #64]	; (7120 <prvProcessTimerOrBlockTask+0x98>)
    70e0:	6818      	ldr	r0, [r3, #0]
    70e2:	687a      	ldr	r2, [r7, #4]
    70e4:	68fb      	ldr	r3, [r7, #12]
    70e6:	1ad3      	subs	r3, r2, r3
    70e8:	683a      	ldr	r2, [r7, #0]
    70ea:	0019      	movs	r1, r3
    70ec:	4b0d      	ldr	r3, [pc, #52]	; (7124 <prvProcessTimerOrBlockTask+0x9c>)
    70ee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    70f0:	4b08      	ldr	r3, [pc, #32]	; (7114 <prvProcessTimerOrBlockTask+0x8c>)
    70f2:	4798      	blx	r3
    70f4:	1e03      	subs	r3, r0, #0
    70f6:	d104      	bne.n	7102 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    70f8:	4b0b      	ldr	r3, [pc, #44]	; (7128 <prvProcessTimerOrBlockTask+0xa0>)
    70fa:	4798      	blx	r3
}
    70fc:	e001      	b.n	7102 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    70fe:	4b05      	ldr	r3, [pc, #20]	; (7114 <prvProcessTimerOrBlockTask+0x8c>)
    7100:	4798      	blx	r3
}
    7102:	46c0      	nop			; (mov r8, r8)
    7104:	46bd      	mov	sp, r7
    7106:	b004      	add	sp, #16
    7108:	bd80      	pop	{r7, pc}
    710a:	46c0      	nop			; (mov r8, r8)
    710c:	000064c5 	.word	0x000064c5
    7110:	0000716d 	.word	0x0000716d
    7114:	000064dd 	.word	0x000064dd
    7118:	00006fd9 	.word	0x00006fd9
    711c:	2000546c 	.word	0x2000546c
    7120:	20005470 	.word	0x20005470
    7124:	00005ca1 	.word	0x00005ca1
    7128:	00001f31 	.word	0x00001f31

0000712c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    712c:	b580      	push	{r7, lr}
    712e:	b084      	sub	sp, #16
    7130:	af00      	add	r7, sp, #0
    7132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    7134:	4b0c      	ldr	r3, [pc, #48]	; (7168 <prvGetNextExpireTime+0x3c>)
    7136:	681b      	ldr	r3, [r3, #0]
    7138:	681b      	ldr	r3, [r3, #0]
    713a:	425a      	negs	r2, r3
    713c:	4153      	adcs	r3, r2
    713e:	b2db      	uxtb	r3, r3
    7140:	001a      	movs	r2, r3
    7142:	687b      	ldr	r3, [r7, #4]
    7144:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    7146:	687b      	ldr	r3, [r7, #4]
    7148:	681b      	ldr	r3, [r3, #0]
    714a:	2b00      	cmp	r3, #0
    714c:	d105      	bne.n	715a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    714e:	4b06      	ldr	r3, [pc, #24]	; (7168 <prvGetNextExpireTime+0x3c>)
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	68db      	ldr	r3, [r3, #12]
    7154:	681b      	ldr	r3, [r3, #0]
    7156:	60fb      	str	r3, [r7, #12]
    7158:	e001      	b.n	715e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    715a:	2300      	movs	r3, #0
    715c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    715e:	68fb      	ldr	r3, [r7, #12]
}
    7160:	0018      	movs	r0, r3
    7162:	46bd      	mov	sp, r7
    7164:	b004      	add	sp, #16
    7166:	bd80      	pop	{r7, pc}
    7168:	20005468 	.word	0x20005468

0000716c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    716c:	b580      	push	{r7, lr}
    716e:	b084      	sub	sp, #16
    7170:	af00      	add	r7, sp, #0
    7172:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    7174:	4b0c      	ldr	r3, [pc, #48]	; (71a8 <prvSampleTimeNow+0x3c>)
    7176:	4798      	blx	r3
    7178:	0003      	movs	r3, r0
    717a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    717c:	4b0b      	ldr	r3, [pc, #44]	; (71ac <prvSampleTimeNow+0x40>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	68fa      	ldr	r2, [r7, #12]
    7182:	429a      	cmp	r2, r3
    7184:	d205      	bcs.n	7192 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    7186:	4b0a      	ldr	r3, [pc, #40]	; (71b0 <prvSampleTimeNow+0x44>)
    7188:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	2201      	movs	r2, #1
    718e:	601a      	str	r2, [r3, #0]
    7190:	e002      	b.n	7198 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	2200      	movs	r2, #0
    7196:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    7198:	4b04      	ldr	r3, [pc, #16]	; (71ac <prvSampleTimeNow+0x40>)
    719a:	68fa      	ldr	r2, [r7, #12]
    719c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    719e:	68fb      	ldr	r3, [r7, #12]
}
    71a0:	0018      	movs	r0, r3
    71a2:	46bd      	mov	sp, r7
    71a4:	b004      	add	sp, #16
    71a6:	bd80      	pop	{r7, pc}
    71a8:	00006611 	.word	0x00006611
    71ac:	20005478 	.word	0x20005478
    71b0:	00007381 	.word	0x00007381

000071b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    71b4:	b580      	push	{r7, lr}
    71b6:	b086      	sub	sp, #24
    71b8:	af00      	add	r7, sp, #0
    71ba:	60f8      	str	r0, [r7, #12]
    71bc:	60b9      	str	r1, [r7, #8]
    71be:	607a      	str	r2, [r7, #4]
    71c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    71c2:	2300      	movs	r3, #0
    71c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    71c6:	68fb      	ldr	r3, [r7, #12]
    71c8:	68ba      	ldr	r2, [r7, #8]
    71ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    71cc:	68fb      	ldr	r3, [r7, #12]
    71ce:	68fa      	ldr	r2, [r7, #12]
    71d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    71d2:	68ba      	ldr	r2, [r7, #8]
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	429a      	cmp	r2, r3
    71d8:	d812      	bhi.n	7200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    71da:	687a      	ldr	r2, [r7, #4]
    71dc:	683b      	ldr	r3, [r7, #0]
    71de:	1ad2      	subs	r2, r2, r3
    71e0:	68fb      	ldr	r3, [r7, #12]
    71e2:	699b      	ldr	r3, [r3, #24]
    71e4:	429a      	cmp	r2, r3
    71e6:	d302      	bcc.n	71ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    71e8:	2301      	movs	r3, #1
    71ea:	617b      	str	r3, [r7, #20]
    71ec:	e01b      	b.n	7226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    71ee:	4b10      	ldr	r3, [pc, #64]	; (7230 <prvInsertTimerInActiveList+0x7c>)
    71f0:	681a      	ldr	r2, [r3, #0]
    71f2:	68fb      	ldr	r3, [r7, #12]
    71f4:	3304      	adds	r3, #4
    71f6:	0019      	movs	r1, r3
    71f8:	0010      	movs	r0, r2
    71fa:	4b0e      	ldr	r3, [pc, #56]	; (7234 <prvInsertTimerInActiveList+0x80>)
    71fc:	4798      	blx	r3
    71fe:	e012      	b.n	7226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    7200:	687a      	ldr	r2, [r7, #4]
    7202:	683b      	ldr	r3, [r7, #0]
    7204:	429a      	cmp	r2, r3
    7206:	d206      	bcs.n	7216 <prvInsertTimerInActiveList+0x62>
    7208:	68ba      	ldr	r2, [r7, #8]
    720a:	683b      	ldr	r3, [r7, #0]
    720c:	429a      	cmp	r2, r3
    720e:	d302      	bcc.n	7216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    7210:	2301      	movs	r3, #1
    7212:	617b      	str	r3, [r7, #20]
    7214:	e007      	b.n	7226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    7216:	4b08      	ldr	r3, [pc, #32]	; (7238 <prvInsertTimerInActiveList+0x84>)
    7218:	681a      	ldr	r2, [r3, #0]
    721a:	68fb      	ldr	r3, [r7, #12]
    721c:	3304      	adds	r3, #4
    721e:	0019      	movs	r1, r3
    7220:	0010      	movs	r0, r2
    7222:	4b04      	ldr	r3, [pc, #16]	; (7234 <prvInsertTimerInActiveList+0x80>)
    7224:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    7226:	697b      	ldr	r3, [r7, #20]
}
    7228:	0018      	movs	r0, r3
    722a:	46bd      	mov	sp, r7
    722c:	b006      	add	sp, #24
    722e:	bd80      	pop	{r7, pc}
    7230:	2000546c 	.word	0x2000546c
    7234:	000052e7 	.word	0x000052e7
    7238:	20005468 	.word	0x20005468

0000723c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    723c:	b590      	push	{r4, r7, lr}
    723e:	b08d      	sub	sp, #52	; 0x34
    7240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    7242:	e07e      	b.n	7342 <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    7244:	2308      	movs	r3, #8
    7246:	18fb      	adds	r3, r7, r3
    7248:	681b      	ldr	r3, [r3, #0]
    724a:	2b00      	cmp	r3, #0
    724c:	da10      	bge.n	7270 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    724e:	2308      	movs	r3, #8
    7250:	18fb      	adds	r3, r7, r3
    7252:	3304      	adds	r3, #4
    7254:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    7256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7258:	2b00      	cmp	r3, #0
    725a:	d101      	bne.n	7260 <prvProcessReceivedCommands+0x24>
    725c:	b672      	cpsid	i
    725e:	e7fe      	b.n	725e <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    7260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7262:	681a      	ldr	r2, [r3, #0]
    7264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7266:	6858      	ldr	r0, [r3, #4]
    7268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    726a:	689b      	ldr	r3, [r3, #8]
    726c:	0019      	movs	r1, r3
    726e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    7270:	2308      	movs	r3, #8
    7272:	18fb      	adds	r3, r7, r3
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	2b00      	cmp	r3, #0
    7278:	db63      	blt.n	7342 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    727a:	2308      	movs	r3, #8
    727c:	18fb      	adds	r3, r7, r3
    727e:	689b      	ldr	r3, [r3, #8]
    7280:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    7282:	6a3b      	ldr	r3, [r7, #32]
    7284:	695b      	ldr	r3, [r3, #20]
    7286:	2b00      	cmp	r3, #0
    7288:	d004      	beq.n	7294 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    728a:	6a3b      	ldr	r3, [r7, #32]
    728c:	3304      	adds	r3, #4
    728e:	0018      	movs	r0, r3
    7290:	4b33      	ldr	r3, [pc, #204]	; (7360 <prvProcessReceivedCommands+0x124>)
    7292:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    7294:	1d3b      	adds	r3, r7, #4
    7296:	0018      	movs	r0, r3
    7298:	4b32      	ldr	r3, [pc, #200]	; (7364 <prvProcessReceivedCommands+0x128>)
    729a:	4798      	blx	r3
    729c:	0003      	movs	r3, r0
    729e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
    72a0:	2308      	movs	r3, #8
    72a2:	18fb      	adds	r3, r7, r3
    72a4:	681b      	ldr	r3, [r3, #0]
    72a6:	2b09      	cmp	r3, #9
    72a8:	d84a      	bhi.n	7340 <prvProcessReceivedCommands+0x104>
    72aa:	009a      	lsls	r2, r3, #2
    72ac:	4b2e      	ldr	r3, [pc, #184]	; (7368 <prvProcessReceivedCommands+0x12c>)
    72ae:	18d3      	adds	r3, r2, r3
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    72b4:	2308      	movs	r3, #8
    72b6:	18fb      	adds	r3, r7, r3
    72b8:	685a      	ldr	r2, [r3, #4]
    72ba:	6a3b      	ldr	r3, [r7, #32]
    72bc:	699b      	ldr	r3, [r3, #24]
    72be:	18d1      	adds	r1, r2, r3
    72c0:	2308      	movs	r3, #8
    72c2:	18fb      	adds	r3, r7, r3
    72c4:	685b      	ldr	r3, [r3, #4]
    72c6:	69fa      	ldr	r2, [r7, #28]
    72c8:	6a38      	ldr	r0, [r7, #32]
    72ca:	4c28      	ldr	r4, [pc, #160]	; (736c <prvProcessReceivedCommands+0x130>)
    72cc:	47a0      	blx	r4
    72ce:	1e03      	subs	r3, r0, #0
    72d0:	d037      	beq.n	7342 <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    72d2:	6a3b      	ldr	r3, [r7, #32]
    72d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72d6:	6a3a      	ldr	r2, [r7, #32]
    72d8:	0010      	movs	r0, r2
    72da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    72dc:	6a3b      	ldr	r3, [r7, #32]
    72de:	69db      	ldr	r3, [r3, #28]
    72e0:	2b01      	cmp	r3, #1
    72e2:	d12e      	bne.n	7342 <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    72e4:	2308      	movs	r3, #8
    72e6:	18fb      	adds	r3, r7, r3
    72e8:	685a      	ldr	r2, [r3, #4]
    72ea:	6a3b      	ldr	r3, [r7, #32]
    72ec:	699b      	ldr	r3, [r3, #24]
    72ee:	18d2      	adds	r2, r2, r3
    72f0:	6a38      	ldr	r0, [r7, #32]
    72f2:	2300      	movs	r3, #0
    72f4:	9300      	str	r3, [sp, #0]
    72f6:	2300      	movs	r3, #0
    72f8:	2100      	movs	r1, #0
    72fa:	4c1d      	ldr	r4, [pc, #116]	; (7370 <prvProcessReceivedCommands+0x134>)
    72fc:	47a0      	blx	r4
    72fe:	0003      	movs	r3, r0
    7300:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
    7302:	69bb      	ldr	r3, [r7, #24]
    7304:	2b00      	cmp	r3, #0
    7306:	d11c      	bne.n	7342 <prvProcessReceivedCommands+0x106>
    7308:	b672      	cpsid	i
    730a:	e7fe      	b.n	730a <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    730c:	2308      	movs	r3, #8
    730e:	18fb      	adds	r3, r7, r3
    7310:	685a      	ldr	r2, [r3, #4]
    7312:	6a3b      	ldr	r3, [r7, #32]
    7314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    7316:	6a3b      	ldr	r3, [r7, #32]
    7318:	699b      	ldr	r3, [r3, #24]
    731a:	2b00      	cmp	r3, #0
    731c:	d101      	bne.n	7322 <prvProcessReceivedCommands+0xe6>
    731e:	b672      	cpsid	i
    7320:	e7fe      	b.n	7320 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    7322:	6a3b      	ldr	r3, [r7, #32]
    7324:	699a      	ldr	r2, [r3, #24]
    7326:	69fb      	ldr	r3, [r7, #28]
    7328:	18d1      	adds	r1, r2, r3
    732a:	69fb      	ldr	r3, [r7, #28]
    732c:	69fa      	ldr	r2, [r7, #28]
    732e:	6a38      	ldr	r0, [r7, #32]
    7330:	4c0e      	ldr	r4, [pc, #56]	; (736c <prvProcessReceivedCommands+0x130>)
    7332:	47a0      	blx	r4
					break;
    7334:	e005      	b.n	7342 <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    7336:	6a3b      	ldr	r3, [r7, #32]
    7338:	0018      	movs	r0, r3
    733a:	4b0e      	ldr	r3, [pc, #56]	; (7374 <prvProcessReceivedCommands+0x138>)
    733c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    733e:	e000      	b.n	7342 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
    7340:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    7342:	4b0d      	ldr	r3, [pc, #52]	; (7378 <prvProcessReceivedCommands+0x13c>)
    7344:	681b      	ldr	r3, [r3, #0]
    7346:	2208      	movs	r2, #8
    7348:	18b9      	adds	r1, r7, r2
    734a:	2200      	movs	r2, #0
    734c:	0018      	movs	r0, r3
    734e:	4b0b      	ldr	r3, [pc, #44]	; (737c <prvProcessReceivedCommands+0x140>)
    7350:	4798      	blx	r3
    7352:	1e03      	subs	r3, r0, #0
    7354:	d000      	beq.n	7358 <prvProcessReceivedCommands+0x11c>
    7356:	e775      	b.n	7244 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    7358:	46c0      	nop			; (mov r8, r8)
    735a:	46bd      	mov	sp, r7
    735c:	b00b      	add	sp, #44	; 0x2c
    735e:	bd90      	pop	{r4, r7, pc}
    7360:	00005353 	.word	0x00005353
    7364:	0000716d 	.word	0x0000716d
    7368:	0000dc3c 	.word	0x0000dc3c
    736c:	000071b5 	.word	0x000071b5
    7370:	00006f31 	.word	0x00006f31
    7374:	000021e5 	.word	0x000021e5
    7378:	20005470 	.word	0x20005470
    737c:	00005825 	.word	0x00005825

00007380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    7380:	b590      	push	{r4, r7, lr}
    7382:	b089      	sub	sp, #36	; 0x24
    7384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7386:	e03e      	b.n	7406 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    7388:	4b28      	ldr	r3, [pc, #160]	; (742c <prvSwitchTimerLists+0xac>)
    738a:	681b      	ldr	r3, [r3, #0]
    738c:	68db      	ldr	r3, [r3, #12]
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    7392:	4b26      	ldr	r3, [pc, #152]	; (742c <prvSwitchTimerLists+0xac>)
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	68db      	ldr	r3, [r3, #12]
    7398:	68db      	ldr	r3, [r3, #12]
    739a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    739c:	693b      	ldr	r3, [r7, #16]
    739e:	3304      	adds	r3, #4
    73a0:	0018      	movs	r0, r3
    73a2:	4b23      	ldr	r3, [pc, #140]	; (7430 <prvSwitchTimerLists+0xb0>)
    73a4:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    73a6:	693b      	ldr	r3, [r7, #16]
    73a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73aa:	693a      	ldr	r2, [r7, #16]
    73ac:	0010      	movs	r0, r2
    73ae:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    73b0:	693b      	ldr	r3, [r7, #16]
    73b2:	69db      	ldr	r3, [r3, #28]
    73b4:	2b01      	cmp	r3, #1
    73b6:	d126      	bne.n	7406 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    73b8:	693b      	ldr	r3, [r7, #16]
    73ba:	699a      	ldr	r2, [r3, #24]
    73bc:	697b      	ldr	r3, [r7, #20]
    73be:	18d3      	adds	r3, r2, r3
    73c0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    73c2:	68fa      	ldr	r2, [r7, #12]
    73c4:	697b      	ldr	r3, [r7, #20]
    73c6:	429a      	cmp	r2, r3
    73c8:	d90e      	bls.n	73e8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    73ca:	693b      	ldr	r3, [r7, #16]
    73cc:	68fa      	ldr	r2, [r7, #12]
    73ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    73d0:	693b      	ldr	r3, [r7, #16]
    73d2:	693a      	ldr	r2, [r7, #16]
    73d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    73d6:	4b15      	ldr	r3, [pc, #84]	; (742c <prvSwitchTimerLists+0xac>)
    73d8:	681a      	ldr	r2, [r3, #0]
    73da:	693b      	ldr	r3, [r7, #16]
    73dc:	3304      	adds	r3, #4
    73de:	0019      	movs	r1, r3
    73e0:	0010      	movs	r0, r2
    73e2:	4b14      	ldr	r3, [pc, #80]	; (7434 <prvSwitchTimerLists+0xb4>)
    73e4:	4798      	blx	r3
    73e6:	e00e      	b.n	7406 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    73e8:	697a      	ldr	r2, [r7, #20]
    73ea:	6938      	ldr	r0, [r7, #16]
    73ec:	2300      	movs	r3, #0
    73ee:	9300      	str	r3, [sp, #0]
    73f0:	2300      	movs	r3, #0
    73f2:	2100      	movs	r1, #0
    73f4:	4c10      	ldr	r4, [pc, #64]	; (7438 <prvSwitchTimerLists+0xb8>)
    73f6:	47a0      	blx	r4
    73f8:	0003      	movs	r3, r0
    73fa:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    73fc:	68bb      	ldr	r3, [r7, #8]
    73fe:	2b00      	cmp	r3, #0
    7400:	d101      	bne.n	7406 <prvSwitchTimerLists+0x86>
    7402:	b672      	cpsid	i
    7404:	e7fe      	b.n	7404 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    7406:	4b09      	ldr	r3, [pc, #36]	; (742c <prvSwitchTimerLists+0xac>)
    7408:	681b      	ldr	r3, [r3, #0]
    740a:	681b      	ldr	r3, [r3, #0]
    740c:	2b00      	cmp	r3, #0
    740e:	d1bb      	bne.n	7388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    7410:	4b06      	ldr	r3, [pc, #24]	; (742c <prvSwitchTimerLists+0xac>)
    7412:	681b      	ldr	r3, [r3, #0]
    7414:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    7416:	4b09      	ldr	r3, [pc, #36]	; (743c <prvSwitchTimerLists+0xbc>)
    7418:	681a      	ldr	r2, [r3, #0]
    741a:	4b04      	ldr	r3, [pc, #16]	; (742c <prvSwitchTimerLists+0xac>)
    741c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    741e:	4b07      	ldr	r3, [pc, #28]	; (743c <prvSwitchTimerLists+0xbc>)
    7420:	687a      	ldr	r2, [r7, #4]
    7422:	601a      	str	r2, [r3, #0]
}
    7424:	46c0      	nop			; (mov r8, r8)
    7426:	46bd      	mov	sp, r7
    7428:	b007      	add	sp, #28
    742a:	bd90      	pop	{r4, r7, pc}
    742c:	20005468 	.word	0x20005468
    7430:	00005353 	.word	0x00005353
    7434:	000052e7 	.word	0x000052e7
    7438:	00006f31 	.word	0x00006f31
    743c:	2000546c 	.word	0x2000546c

00007440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    7440:	b580      	push	{r7, lr}
    7442:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    7444:	4b15      	ldr	r3, [pc, #84]	; (749c <prvCheckForValidListAndQueue+0x5c>)
    7446:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    7448:	4b15      	ldr	r3, [pc, #84]	; (74a0 <prvCheckForValidListAndQueue+0x60>)
    744a:	681b      	ldr	r3, [r3, #0]
    744c:	2b00      	cmp	r3, #0
    744e:	d120      	bne.n	7492 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    7450:	4b14      	ldr	r3, [pc, #80]	; (74a4 <prvCheckForValidListAndQueue+0x64>)
    7452:	0018      	movs	r0, r3
    7454:	4b14      	ldr	r3, [pc, #80]	; (74a8 <prvCheckForValidListAndQueue+0x68>)
    7456:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    7458:	4b14      	ldr	r3, [pc, #80]	; (74ac <prvCheckForValidListAndQueue+0x6c>)
    745a:	0018      	movs	r0, r3
    745c:	4b12      	ldr	r3, [pc, #72]	; (74a8 <prvCheckForValidListAndQueue+0x68>)
    745e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    7460:	4b13      	ldr	r3, [pc, #76]	; (74b0 <prvCheckForValidListAndQueue+0x70>)
    7462:	4a10      	ldr	r2, [pc, #64]	; (74a4 <prvCheckForValidListAndQueue+0x64>)
    7464:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    7466:	4b13      	ldr	r3, [pc, #76]	; (74b4 <prvCheckForValidListAndQueue+0x74>)
    7468:	4a10      	ldr	r2, [pc, #64]	; (74ac <prvCheckForValidListAndQueue+0x6c>)
    746a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    746c:	2200      	movs	r2, #0
    746e:	2110      	movs	r1, #16
    7470:	2005      	movs	r0, #5
    7472:	4b11      	ldr	r3, [pc, #68]	; (74b8 <prvCheckForValidListAndQueue+0x78>)
    7474:	4798      	blx	r3
    7476:	0002      	movs	r2, r0
    7478:	4b09      	ldr	r3, [pc, #36]	; (74a0 <prvCheckForValidListAndQueue+0x60>)
    747a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    747c:	4b08      	ldr	r3, [pc, #32]	; (74a0 <prvCheckForValidListAndQueue+0x60>)
    747e:	681b      	ldr	r3, [r3, #0]
    7480:	2b00      	cmp	r3, #0
    7482:	d006      	beq.n	7492 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    7484:	4b06      	ldr	r3, [pc, #24]	; (74a0 <prvCheckForValidListAndQueue+0x60>)
    7486:	681b      	ldr	r3, [r3, #0]
    7488:	4a0c      	ldr	r2, [pc, #48]	; (74bc <prvCheckForValidListAndQueue+0x7c>)
    748a:	0011      	movs	r1, r2
    748c:	0018      	movs	r0, r3
    748e:	4b0c      	ldr	r3, [pc, #48]	; (74c0 <prvCheckForValidListAndQueue+0x80>)
    7490:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    7492:	4b0c      	ldr	r3, [pc, #48]	; (74c4 <prvCheckForValidListAndQueue+0x84>)
    7494:	4798      	blx	r3
}
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	46bd      	mov	sp, r7
    749a:	bd80      	pop	{r7, pc}
    749c:	00001f51 	.word	0x00001f51
    74a0:	20005470 	.word	0x20005470
    74a4:	20005440 	.word	0x20005440
    74a8:	00005251 	.word	0x00005251
    74ac:	20005454 	.word	0x20005454
    74b0:	20005468 	.word	0x20005468
    74b4:	2000546c 	.word	0x2000546c
    74b8:	00005461 	.word	0x00005461
    74bc:	0000dc34 	.word	0x0000dc34
    74c0:	00005c51 	.word	0x00005c51
    74c4:	00001f75 	.word	0x00001f75

000074c8 <system_apb_clock_set_mask>:
{
    74c8:	b580      	push	{r7, lr}
    74ca:	b082      	sub	sp, #8
    74cc:	af00      	add	r7, sp, #0
    74ce:	0002      	movs	r2, r0
    74d0:	6039      	str	r1, [r7, #0]
    74d2:	1dfb      	adds	r3, r7, #7
    74d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    74d6:	1dfb      	adds	r3, r7, #7
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	2b01      	cmp	r3, #1
    74dc:	d00a      	beq.n	74f4 <system_apb_clock_set_mask+0x2c>
    74de:	2b02      	cmp	r3, #2
    74e0:	d00f      	beq.n	7502 <system_apb_clock_set_mask+0x3a>
    74e2:	2b00      	cmp	r3, #0
    74e4:	d114      	bne.n	7510 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    74e6:	4b0e      	ldr	r3, [pc, #56]	; (7520 <system_apb_clock_set_mask+0x58>)
    74e8:	4a0d      	ldr	r2, [pc, #52]	; (7520 <system_apb_clock_set_mask+0x58>)
    74ea:	6991      	ldr	r1, [r2, #24]
    74ec:	683a      	ldr	r2, [r7, #0]
    74ee:	430a      	orrs	r2, r1
    74f0:	619a      	str	r2, [r3, #24]
			break;
    74f2:	e00f      	b.n	7514 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    74f4:	4b0a      	ldr	r3, [pc, #40]	; (7520 <system_apb_clock_set_mask+0x58>)
    74f6:	4a0a      	ldr	r2, [pc, #40]	; (7520 <system_apb_clock_set_mask+0x58>)
    74f8:	69d1      	ldr	r1, [r2, #28]
    74fa:	683a      	ldr	r2, [r7, #0]
    74fc:	430a      	orrs	r2, r1
    74fe:	61da      	str	r2, [r3, #28]
			break;
    7500:	e008      	b.n	7514 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7502:	4b07      	ldr	r3, [pc, #28]	; (7520 <system_apb_clock_set_mask+0x58>)
    7504:	4a06      	ldr	r2, [pc, #24]	; (7520 <system_apb_clock_set_mask+0x58>)
    7506:	6a11      	ldr	r1, [r2, #32]
    7508:	683a      	ldr	r2, [r7, #0]
    750a:	430a      	orrs	r2, r1
    750c:	621a      	str	r2, [r3, #32]
			break;
    750e:	e001      	b.n	7514 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7510:	2317      	movs	r3, #23
    7512:	e000      	b.n	7516 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7514:	2300      	movs	r3, #0
}
    7516:	0018      	movs	r0, r3
    7518:	46bd      	mov	sp, r7
    751a:	b002      	add	sp, #8
    751c:	bd80      	pop	{r7, pc}
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	40000400 	.word	0x40000400

00007524 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    7524:	b580      	push	{r7, lr}
    7526:	b082      	sub	sp, #8
    7528:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    752a:	4b07      	ldr	r3, [pc, #28]	; (7548 <wdt_is_syncing+0x24>)
    752c:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    752e:	687b      	ldr	r3, [r7, #4]
    7530:	79db      	ldrb	r3, [r3, #7]
    7532:	b2db      	uxtb	r3, r3
    7534:	b25b      	sxtb	r3, r3
    7536:	2b00      	cmp	r3, #0
    7538:	da01      	bge.n	753e <wdt_is_syncing+0x1a>
#endif
		return true;
    753a:	2301      	movs	r3, #1
    753c:	e000      	b.n	7540 <wdt_is_syncing+0x1c>
	}

	return false;
    753e:	2300      	movs	r3, #0
}
    7540:	0018      	movs	r0, r3
    7542:	46bd      	mov	sp, r7
    7544:	b002      	add	sp, #8
    7546:	bd80      	pop	{r7, pc}
    7548:	40001000 	.word	0x40001000

0000754c <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    754c:	b580      	push	{r7, lr}
    754e:	b082      	sub	sp, #8
    7550:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    7552:	4b07      	ldr	r3, [pc, #28]	; (7570 <wdt_is_locked+0x24>)
    7554:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    7556:	687b      	ldr	r3, [r7, #4]
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	b2db      	uxtb	r3, r3
    755c:	001a      	movs	r2, r3
    755e:	2380      	movs	r3, #128	; 0x80
    7560:	4013      	ands	r3, r2
    7562:	1e5a      	subs	r2, r3, #1
    7564:	4193      	sbcs	r3, r2
    7566:	b2db      	uxtb	r3, r3
#endif
}
    7568:	0018      	movs	r0, r3
    756a:	46bd      	mov	sp, r7
    756c:	b002      	add	sp, #8
    756e:	bd80      	pop	{r7, pc}
    7570:	40001000 	.word	0x40001000

00007574 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    7574:	b580      	push	{r7, lr}
    7576:	b086      	sub	sp, #24
    7578:	af00      	add	r7, sp, #0
    757a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    757c:	4b54      	ldr	r3, [pc, #336]	; (76d0 <wdt_set_config+0x15c>)
    757e:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    7580:	2110      	movs	r1, #16
    7582:	2000      	movs	r0, #0
    7584:	4b53      	ldr	r3, [pc, #332]	; (76d4 <wdt_set_config+0x160>)
    7586:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    7588:	4b53      	ldr	r3, [pc, #332]	; (76d8 <wdt_set_config+0x164>)
    758a:	4798      	blx	r3
    758c:	1e03      	subs	r3, r0, #0
    758e:	d001      	beq.n	7594 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    7590:	2310      	movs	r3, #16
    7592:	e098      	b.n	76c6 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    7594:	687b      	ldr	r3, [r7, #4]
    7596:	78db      	ldrb	r3, [r3, #3]
    7598:	2b00      	cmp	r3, #0
    759a:	d101      	bne.n	75a0 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    759c:	2317      	movs	r3, #23
    759e:	e092      	b.n	76c6 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    75a0:	687b      	ldr	r3, [r7, #4]
    75a2:	78da      	ldrb	r2, [r3, #3]
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	791b      	ldrb	r3, [r3, #4]
    75a8:	429a      	cmp	r2, r3
    75aa:	d305      	bcc.n	75b8 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	78da      	ldrb	r2, [r3, #3]
    75b0:	687b      	ldr	r3, [r7, #4]
    75b2:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    75b4:	429a      	cmp	r2, r3
    75b6:	d201      	bcs.n	75bc <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    75b8:	2317      	movs	r3, #23
    75ba:	e084      	b.n	76c6 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    75bc:	693b      	ldr	r3, [r7, #16]
    75be:	781b      	ldrb	r3, [r3, #0]
    75c0:	b2db      	uxtb	r3, r3
    75c2:	2202      	movs	r2, #2
    75c4:	4393      	bics	r3, r2
    75c6:	b2da      	uxtb	r2, r3
    75c8:	693b      	ldr	r3, [r7, #16]
    75ca:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    75cc:	46c0      	nop			; (mov r8, r8)
    75ce:	4b43      	ldr	r3, [pc, #268]	; (76dc <wdt_set_config+0x168>)
    75d0:	4798      	blx	r3
    75d2:	1e03      	subs	r3, r0, #0
    75d4:	d1fb      	bne.n	75ce <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	785b      	ldrb	r3, [r3, #1]
    75da:	2201      	movs	r2, #1
    75dc:	4053      	eors	r3, r2
    75de:	b2db      	uxtb	r3, r3
    75e0:	2b00      	cmp	r3, #0
    75e2:	d001      	beq.n	75e8 <wdt_set_config+0x74>
		return STATUS_OK;
    75e4:	2300      	movs	r3, #0
    75e6:	e06e      	b.n	76c6 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	789a      	ldrb	r2, [r3, #2]
    75ec:	230c      	movs	r3, #12
    75ee:	18fb      	adds	r3, r7, r3
    75f0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    75f2:	230c      	movs	r3, #12
    75f4:	18fb      	adds	r3, r7, r3
    75f6:	0019      	movs	r1, r3
    75f8:	2003      	movs	r0, #3
    75fa:	4b39      	ldr	r3, [pc, #228]	; (76e0 <wdt_set_config+0x16c>)
    75fc:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    75fe:	2003      	movs	r0, #3
    7600:	4b38      	ldr	r3, [pc, #224]	; (76e4 <wdt_set_config+0x170>)
    7602:	4798      	blx	r3
	if (config->always_on) {
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	781b      	ldrb	r3, [r3, #0]
    7608:	2b00      	cmp	r3, #0
    760a:	d002      	beq.n	7612 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    760c:	2003      	movs	r0, #3
    760e:	4b36      	ldr	r3, [pc, #216]	; (76e8 <wdt_set_config+0x174>)
    7610:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    7612:	2300      	movs	r3, #0
    7614:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	78db      	ldrb	r3, [r3, #3]
    761a:	3b01      	subs	r3, #1
    761c:	001a      	movs	r2, r3
    761e:	697b      	ldr	r3, [r7, #20]
    7620:	4313      	orrs	r3, r2
    7622:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	791b      	ldrb	r3, [r3, #4]
    7628:	2b00      	cmp	r3, #0
    762a:	d010      	beq.n	764e <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    762c:	693b      	ldr	r3, [r7, #16]
    762e:	781b      	ldrb	r3, [r3, #0]
    7630:	b2db      	uxtb	r3, r3
    7632:	2204      	movs	r2, #4
    7634:	4313      	orrs	r3, r2
    7636:	b2da      	uxtb	r2, r3
    7638:	693b      	ldr	r3, [r7, #16]
    763a:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	791b      	ldrb	r3, [r3, #4]
    7640:	3b01      	subs	r3, #1
    7642:	011b      	lsls	r3, r3, #4
    7644:	001a      	movs	r2, r3
    7646:	697b      	ldr	r3, [r7, #20]
    7648:	4313      	orrs	r3, r2
    764a:	617b      	str	r3, [r7, #20]
    764c:	e007      	b.n	765e <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    764e:	693b      	ldr	r3, [r7, #16]
    7650:	781b      	ldrb	r3, [r3, #0]
    7652:	b2db      	uxtb	r3, r3
    7654:	2204      	movs	r2, #4
    7656:	4393      	bics	r3, r2
    7658:	b2da      	uxtb	r2, r3
    765a:	693b      	ldr	r3, [r7, #16]
    765c:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    765e:	46c0      	nop			; (mov r8, r8)
    7660:	4b1e      	ldr	r3, [pc, #120]	; (76dc <wdt_set_config+0x168>)
    7662:	4798      	blx	r3
    7664:	1e03      	subs	r3, r0, #0
    7666:	d1fb      	bne.n	7660 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    7668:	697b      	ldr	r3, [r7, #20]
    766a:	b2da      	uxtb	r2, r3
    766c:	693b      	ldr	r3, [r7, #16]
    766e:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	795b      	ldrb	r3, [r3, #5]
    7674:	2b00      	cmp	r3, #0
    7676:	d00a      	beq.n	768e <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    7678:	46c0      	nop			; (mov r8, r8)
    767a:	4b18      	ldr	r3, [pc, #96]	; (76dc <wdt_set_config+0x168>)
    767c:	4798      	blx	r3
    767e:	1e03      	subs	r3, r0, #0
    7680:	d1fb      	bne.n	767a <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	795b      	ldrb	r3, [r3, #5]
    7686:	3b01      	subs	r3, #1
    7688:	b2da      	uxtb	r2, r3
    768a:	693b      	ldr	r3, [r7, #16]
    768c:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	2b00      	cmp	r3, #0
    7694:	d009      	beq.n	76aa <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    7696:	693b      	ldr	r3, [r7, #16]
    7698:	781b      	ldrb	r3, [r3, #0]
    769a:	b2db      	uxtb	r3, r3
    769c:	2280      	movs	r2, #128	; 0x80
    769e:	4252      	negs	r2, r2
    76a0:	4313      	orrs	r3, r2
    76a2:	b2da      	uxtb	r2, r3
    76a4:	693b      	ldr	r3, [r7, #16]
    76a6:	701a      	strb	r2, [r3, #0]
    76a8:	e007      	b.n	76ba <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    76aa:	693b      	ldr	r3, [r7, #16]
    76ac:	781b      	ldrb	r3, [r3, #0]
    76ae:	b2db      	uxtb	r3, r3
    76b0:	2202      	movs	r2, #2
    76b2:	4313      	orrs	r3, r2
    76b4:	b2da      	uxtb	r2, r3
    76b6:	693b      	ldr	r3, [r7, #16]
    76b8:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	4b07      	ldr	r3, [pc, #28]	; (76dc <wdt_set_config+0x168>)
    76be:	4798      	blx	r3
    76c0:	1e03      	subs	r3, r0, #0
    76c2:	d1fb      	bne.n	76bc <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    76c4:	2300      	movs	r3, #0
}
    76c6:	0018      	movs	r0, r3
    76c8:	46bd      	mov	sp, r7
    76ca:	b006      	add	sp, #24
    76cc:	bd80      	pop	{r7, pc}
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	40001000 	.word	0x40001000
    76d4:	000074c9 	.word	0x000074c9
    76d8:	0000754d 	.word	0x0000754d
    76dc:	00007525 	.word	0x00007525
    76e0:	00009ba9 	.word	0x00009ba9
    76e4:	00009bed 	.word	0x00009bed
    76e8:	00009ccd 	.word	0x00009ccd

000076ec <wdt_reset_count>:
 * period count elapsed. This function should be called after the window
 * period (if one was set in the module configuration) but before the timeout
 * period to prevent a reset of the system.
 */
void wdt_reset_count(void)
{
    76ec:	b580      	push	{r7, lr}
    76ee:	b082      	sub	sp, #8
    76f0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    76f2:	4b07      	ldr	r3, [pc, #28]	; (7710 <wdt_reset_count+0x24>)
    76f4:	607b      	str	r3, [r7, #4]

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	22a5      	movs	r2, #165	; 0xa5
    76fa:	721a      	strb	r2, [r3, #8]

	while (wdt_is_syncing()) {
    76fc:	46c0      	nop			; (mov r8, r8)
    76fe:	4b05      	ldr	r3, [pc, #20]	; (7714 <wdt_reset_count+0x28>)
    7700:	4798      	blx	r3
    7702:	1e03      	subs	r3, r0, #0
    7704:	d1fb      	bne.n	76fe <wdt_reset_count+0x12>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    7706:	46c0      	nop			; (mov r8, r8)
    7708:	46bd      	mov	sp, r7
    770a:	b002      	add	sp, #8
    770c:	bd80      	pop	{r7, pc}
    770e:	46c0      	nop			; (mov r8, r8)
    7710:	40001000 	.word	0x40001000
    7714:	00007525 	.word	0x00007525

00007718 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    7718:	b580      	push	{r7, lr}
    771a:	b082      	sub	sp, #8
    771c:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    771e:	4b04      	ldr	r3, [pc, #16]	; (7730 <wdt_clear_early_warning+0x18>)
    7720:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	2201      	movs	r2, #1
    7726:	719a      	strb	r2, [r3, #6]
}
    7728:	46c0      	nop			; (mov r8, r8)
    772a:	46bd      	mov	sp, r7
    772c:	b002      	add	sp, #8
    772e:	bd80      	pop	{r7, pc}
    7730:	40001000 	.word	0x40001000

00007734 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    7734:	b580      	push	{r7, lr}
    7736:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    7738:	4b05      	ldr	r3, [pc, #20]	; (7750 <WDT_Handler+0x1c>)
    773a:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    773c:	4b05      	ldr	r3, [pc, #20]	; (7754 <WDT_Handler+0x20>)
    773e:	681b      	ldr	r3, [r3, #0]
    7740:	2b00      	cmp	r3, #0
    7742:	d002      	beq.n	774a <WDT_Handler+0x16>
		wdt_early_warning_callback();
    7744:	4b03      	ldr	r3, [pc, #12]	; (7754 <WDT_Handler+0x20>)
    7746:	681b      	ldr	r3, [r3, #0]
    7748:	4798      	blx	r3
	}
}
    774a:	46c0      	nop			; (mov r8, r8)
    774c:	46bd      	mov	sp, r7
    774e:	bd80      	pop	{r7, pc}
    7750:	00007719 	.word	0x00007719
    7754:	2000550c 	.word	0x2000550c

00007758 <system_pinmux_get_config_defaults>:
{
    7758:	b580      	push	{r7, lr}
    775a:	b082      	sub	sp, #8
    775c:	af00      	add	r7, sp, #0
    775e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7760:	687b      	ldr	r3, [r7, #4]
    7762:	2280      	movs	r2, #128	; 0x80
    7764:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7766:	687b      	ldr	r3, [r7, #4]
    7768:	2200      	movs	r2, #0
    776a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    776c:	687b      	ldr	r3, [r7, #4]
    776e:	2201      	movs	r2, #1
    7770:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	2200      	movs	r2, #0
    7776:	70da      	strb	r2, [r3, #3]
}
    7778:	46c0      	nop			; (mov r8, r8)
    777a:	46bd      	mov	sp, r7
    777c:	b002      	add	sp, #8
    777e:	bd80      	pop	{r7, pc}

00007780 <system_pinmux_get_group_from_gpio_pin>:
{
    7780:	b580      	push	{r7, lr}
    7782:	b084      	sub	sp, #16
    7784:	af00      	add	r7, sp, #0
    7786:	0002      	movs	r2, r0
    7788:	1dfb      	adds	r3, r7, #7
    778a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    778c:	230f      	movs	r3, #15
    778e:	18fb      	adds	r3, r7, r3
    7790:	1dfa      	adds	r2, r7, #7
    7792:	7812      	ldrb	r2, [r2, #0]
    7794:	09d2      	lsrs	r2, r2, #7
    7796:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7798:	230e      	movs	r3, #14
    779a:	18fb      	adds	r3, r7, r3
    779c:	1dfa      	adds	r2, r7, #7
    779e:	7812      	ldrb	r2, [r2, #0]
    77a0:	0952      	lsrs	r2, r2, #5
    77a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    77a4:	4b0d      	ldr	r3, [pc, #52]	; (77dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    77a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    77a8:	230f      	movs	r3, #15
    77aa:	18fb      	adds	r3, r7, r3
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d10f      	bne.n	77d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    77b2:	230f      	movs	r3, #15
    77b4:	18fb      	adds	r3, r7, r3
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	009b      	lsls	r3, r3, #2
    77ba:	2210      	movs	r2, #16
    77bc:	4694      	mov	ip, r2
    77be:	44bc      	add	ip, r7
    77c0:	4463      	add	r3, ip
    77c2:	3b08      	subs	r3, #8
    77c4:	681a      	ldr	r2, [r3, #0]
    77c6:	230e      	movs	r3, #14
    77c8:	18fb      	adds	r3, r7, r3
    77ca:	781b      	ldrb	r3, [r3, #0]
    77cc:	01db      	lsls	r3, r3, #7
    77ce:	18d3      	adds	r3, r2, r3
    77d0:	e000      	b.n	77d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    77d2:	2300      	movs	r3, #0
}
    77d4:	0018      	movs	r0, r3
    77d6:	46bd      	mov	sp, r7
    77d8:	b004      	add	sp, #16
    77da:	bd80      	pop	{r7, pc}
    77dc:	41004400 	.word	0x41004400

000077e0 <port_get_group_from_gpio_pin>:
{
    77e0:	b580      	push	{r7, lr}
    77e2:	b082      	sub	sp, #8
    77e4:	af00      	add	r7, sp, #0
    77e6:	0002      	movs	r2, r0
    77e8:	1dfb      	adds	r3, r7, #7
    77ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    77ec:	1dfb      	adds	r3, r7, #7
    77ee:	781b      	ldrb	r3, [r3, #0]
    77f0:	0018      	movs	r0, r3
    77f2:	4b03      	ldr	r3, [pc, #12]	; (7800 <port_get_group_from_gpio_pin+0x20>)
    77f4:	4798      	blx	r3
    77f6:	0003      	movs	r3, r0
}
    77f8:	0018      	movs	r0, r3
    77fa:	46bd      	mov	sp, r7
    77fc:	b002      	add	sp, #8
    77fe:	bd80      	pop	{r7, pc}
    7800:	00007781 	.word	0x00007781

00007804 <port_pin_set_output_level>:
{
    7804:	b580      	push	{r7, lr}
    7806:	b084      	sub	sp, #16
    7808:	af00      	add	r7, sp, #0
    780a:	0002      	movs	r2, r0
    780c:	1dfb      	adds	r3, r7, #7
    780e:	701a      	strb	r2, [r3, #0]
    7810:	1dbb      	adds	r3, r7, #6
    7812:	1c0a      	adds	r2, r1, #0
    7814:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    7816:	1dfb      	adds	r3, r7, #7
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	0018      	movs	r0, r3
    781c:	4b0d      	ldr	r3, [pc, #52]	; (7854 <port_pin_set_output_level+0x50>)
    781e:	4798      	blx	r3
    7820:	0003      	movs	r3, r0
    7822:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7824:	1dfb      	adds	r3, r7, #7
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	221f      	movs	r2, #31
    782a:	4013      	ands	r3, r2
    782c:	2201      	movs	r2, #1
    782e:	409a      	lsls	r2, r3
    7830:	0013      	movs	r3, r2
    7832:	60bb      	str	r3, [r7, #8]
	if (level) {
    7834:	1dbb      	adds	r3, r7, #6
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	2b00      	cmp	r3, #0
    783a:	d003      	beq.n	7844 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	68ba      	ldr	r2, [r7, #8]
    7840:	619a      	str	r2, [r3, #24]
}
    7842:	e002      	b.n	784a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    7844:	68fb      	ldr	r3, [r7, #12]
    7846:	68ba      	ldr	r2, [r7, #8]
    7848:	615a      	str	r2, [r3, #20]
}
    784a:	46c0      	nop			; (mov r8, r8)
    784c:	46bd      	mov	sp, r7
    784e:	b004      	add	sp, #16
    7850:	bd80      	pop	{r7, pc}
    7852:	46c0      	nop			; (mov r8, r8)
    7854:	000077e1 	.word	0x000077e1

00007858 <system_gclk_chan_get_config_defaults>:
{
    7858:	b580      	push	{r7, lr}
    785a:	b082      	sub	sp, #8
    785c:	af00      	add	r7, sp, #0
    785e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	2200      	movs	r2, #0
    7864:	701a      	strb	r2, [r3, #0]
}
    7866:	46c0      	nop			; (mov r8, r8)
    7868:	46bd      	mov	sp, r7
    786a:	b002      	add	sp, #8
    786c:	bd80      	pop	{r7, pc}
	...

00007870 <system_apb_clock_set_mask>:
{
    7870:	b580      	push	{r7, lr}
    7872:	b082      	sub	sp, #8
    7874:	af00      	add	r7, sp, #0
    7876:	0002      	movs	r2, r0
    7878:	6039      	str	r1, [r7, #0]
    787a:	1dfb      	adds	r3, r7, #7
    787c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    787e:	1dfb      	adds	r3, r7, #7
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2b01      	cmp	r3, #1
    7884:	d00a      	beq.n	789c <system_apb_clock_set_mask+0x2c>
    7886:	2b02      	cmp	r3, #2
    7888:	d00f      	beq.n	78aa <system_apb_clock_set_mask+0x3a>
    788a:	2b00      	cmp	r3, #0
    788c:	d114      	bne.n	78b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    788e:	4b0e      	ldr	r3, [pc, #56]	; (78c8 <system_apb_clock_set_mask+0x58>)
    7890:	4a0d      	ldr	r2, [pc, #52]	; (78c8 <system_apb_clock_set_mask+0x58>)
    7892:	6991      	ldr	r1, [r2, #24]
    7894:	683a      	ldr	r2, [r7, #0]
    7896:	430a      	orrs	r2, r1
    7898:	619a      	str	r2, [r3, #24]
			break;
    789a:	e00f      	b.n	78bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    789c:	4b0a      	ldr	r3, [pc, #40]	; (78c8 <system_apb_clock_set_mask+0x58>)
    789e:	4a0a      	ldr	r2, [pc, #40]	; (78c8 <system_apb_clock_set_mask+0x58>)
    78a0:	69d1      	ldr	r1, [r2, #28]
    78a2:	683a      	ldr	r2, [r7, #0]
    78a4:	430a      	orrs	r2, r1
    78a6:	61da      	str	r2, [r3, #28]
			break;
    78a8:	e008      	b.n	78bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    78aa:	4b07      	ldr	r3, [pc, #28]	; (78c8 <system_apb_clock_set_mask+0x58>)
    78ac:	4a06      	ldr	r2, [pc, #24]	; (78c8 <system_apb_clock_set_mask+0x58>)
    78ae:	6a11      	ldr	r1, [r2, #32]
    78b0:	683a      	ldr	r2, [r7, #0]
    78b2:	430a      	orrs	r2, r1
    78b4:	621a      	str	r2, [r3, #32]
			break;
    78b6:	e001      	b.n	78bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    78b8:	2317      	movs	r3, #23
    78ba:	e000      	b.n	78be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    78bc:	2300      	movs	r3, #0
}
    78be:	0018      	movs	r0, r3
    78c0:	46bd      	mov	sp, r7
    78c2:	b002      	add	sp, #8
    78c4:	bd80      	pop	{r7, pc}
    78c6:	46c0      	nop			; (mov r8, r8)
    78c8:	40000400 	.word	0x40000400

000078cc <system_is_debugger_present>:
{
    78cc:	b580      	push	{r7, lr}
    78ce:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    78d0:	4b05      	ldr	r3, [pc, #20]	; (78e8 <system_is_debugger_present+0x1c>)
    78d2:	789b      	ldrb	r3, [r3, #2]
    78d4:	b2db      	uxtb	r3, r3
    78d6:	001a      	movs	r2, r3
    78d8:	2302      	movs	r3, #2
    78da:	4013      	ands	r3, r2
    78dc:	1e5a      	subs	r2, r3, #1
    78de:	4193      	sbcs	r3, r2
    78e0:	b2db      	uxtb	r3, r3
}
    78e2:	0018      	movs	r0, r3
    78e4:	46bd      	mov	sp, r7
    78e6:	bd80      	pop	{r7, pc}
    78e8:	41002000 	.word	0x41002000

000078ec <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    78ec:	b580      	push	{r7, lr}
    78ee:	b084      	sub	sp, #16
    78f0:	af00      	add	r7, sp, #0
    78f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	681b      	ldr	r3, [r3, #0]
    78f8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    78fa:	68fb      	ldr	r3, [r7, #12]
    78fc:	7e1b      	ldrb	r3, [r3, #24]
    78fe:	b2db      	uxtb	r3, r3
    7900:	001a      	movs	r2, r3
    7902:	2301      	movs	r3, #1
    7904:	4013      	ands	r3, r2
    7906:	1e5a      	subs	r2, r3, #1
    7908:	4193      	sbcs	r3, r2
    790a:	b2db      	uxtb	r3, r3
}
    790c:	0018      	movs	r0, r3
    790e:	46bd      	mov	sp, r7
    7910:	b004      	add	sp, #16
    7912:	bd80      	pop	{r7, pc}

00007914 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    7914:	b580      	push	{r7, lr}
    7916:	b084      	sub	sp, #16
    7918:	af00      	add	r7, sp, #0
    791a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	681b      	ldr	r3, [r3, #0]
    7920:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7922:	68fb      	ldr	r3, [r7, #12]
    7924:	7e1b      	ldrb	r3, [r3, #24]
    7926:	b2db      	uxtb	r3, r3
    7928:	001a      	movs	r2, r3
    792a:	2304      	movs	r3, #4
    792c:	4013      	ands	r3, r2
    792e:	1e5a      	subs	r2, r3, #1
    7930:	4193      	sbcs	r3, r2
    7932:	b2db      	uxtb	r3, r3
}
    7934:	0018      	movs	r0, r3
    7936:	46bd      	mov	sp, r7
    7938:	b004      	add	sp, #16
    793a:	bd80      	pop	{r7, pc}

0000793c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    793c:	b580      	push	{r7, lr}
    793e:	b084      	sub	sp, #16
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
    7944:	000a      	movs	r2, r1
    7946:	1cbb      	adds	r3, r7, #2
    7948:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    794a:	687b      	ldr	r3, [r7, #4]
    794c:	681b      	ldr	r3, [r3, #0]
    794e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	0018      	movs	r0, r3
    7954:	4b0a      	ldr	r3, [pc, #40]	; (7980 <spi_write+0x44>)
    7956:	4798      	blx	r3
    7958:	0003      	movs	r3, r0
    795a:	001a      	movs	r2, r3
    795c:	2301      	movs	r3, #1
    795e:	4053      	eors	r3, r2
    7960:	b2db      	uxtb	r3, r3
    7962:	2b00      	cmp	r3, #0
    7964:	d001      	beq.n	796a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    7966:	2305      	movs	r3, #5
    7968:	e006      	b.n	7978 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    796a:	1cbb      	adds	r3, r7, #2
    796c:	881b      	ldrh	r3, [r3, #0]
    796e:	05db      	lsls	r3, r3, #23
    7970:	0dda      	lsrs	r2, r3, #23
    7972:	68fb      	ldr	r3, [r7, #12]
    7974:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    7976:	2300      	movs	r3, #0
}
    7978:	0018      	movs	r0, r3
    797a:	46bd      	mov	sp, r7
    797c:	b004      	add	sp, #16
    797e:	bd80      	pop	{r7, pc}
    7980:	000078ed 	.word	0x000078ed

00007984 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    7984:	b580      	push	{r7, lr}
    7986:	b084      	sub	sp, #16
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
    798c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	681b      	ldr	r3, [r3, #0]
    7992:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	0018      	movs	r0, r3
    7998:	4b1b      	ldr	r3, [pc, #108]	; (7a08 <spi_read+0x84>)
    799a:	4798      	blx	r3
    799c:	0003      	movs	r3, r0
    799e:	001a      	movs	r2, r3
    79a0:	2301      	movs	r3, #1
    79a2:	4053      	eors	r3, r2
    79a4:	b2db      	uxtb	r3, r3
    79a6:	2b00      	cmp	r3, #0
    79a8:	d001      	beq.n	79ae <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    79aa:	2310      	movs	r3, #16
    79ac:	e027      	b.n	79fe <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    79ae:	230f      	movs	r3, #15
    79b0:	18fb      	adds	r3, r7, r3
    79b2:	2200      	movs	r2, #0
    79b4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    79b6:	68bb      	ldr	r3, [r7, #8]
    79b8:	8b5b      	ldrh	r3, [r3, #26]
    79ba:	b29b      	uxth	r3, r3
    79bc:	001a      	movs	r2, r3
    79be:	2304      	movs	r3, #4
    79c0:	4013      	ands	r3, r2
    79c2:	d006      	beq.n	79d2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    79c4:	230f      	movs	r3, #15
    79c6:	18fb      	adds	r3, r7, r3
    79c8:	221e      	movs	r2, #30
    79ca:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    79cc:	68bb      	ldr	r3, [r7, #8]
    79ce:	2204      	movs	r2, #4
    79d0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	799b      	ldrb	r3, [r3, #6]
    79d6:	2b01      	cmp	r3, #1
    79d8:	d108      	bne.n	79ec <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    79da:	68bb      	ldr	r3, [r7, #8]
    79dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79de:	b29b      	uxth	r3, r3
    79e0:	05db      	lsls	r3, r3, #23
    79e2:	0ddb      	lsrs	r3, r3, #23
    79e4:	b29a      	uxth	r2, r3
    79e6:	683b      	ldr	r3, [r7, #0]
    79e8:	801a      	strh	r2, [r3, #0]
    79ea:	e005      	b.n	79f8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    79ec:	68bb      	ldr	r3, [r7, #8]
    79ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79f0:	b2db      	uxtb	r3, r3
    79f2:	b29a      	uxth	r2, r3
    79f4:	683b      	ldr	r3, [r7, #0]
    79f6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    79f8:	230f      	movs	r3, #15
    79fa:	18fb      	adds	r3, r7, r3
    79fc:	781b      	ldrb	r3, [r3, #0]
}
    79fe:	0018      	movs	r0, r3
    7a00:	46bd      	mov	sp, r7
    7a02:	b004      	add	sp, #16
    7a04:	bd80      	pop	{r7, pc}
    7a06:	46c0      	nop			; (mov r8, r8)
    7a08:	00007915 	.word	0x00007915

00007a0c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    7a0c:	b590      	push	{r4, r7, lr}
    7a0e:	b093      	sub	sp, #76	; 0x4c
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
    7a14:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	681b      	ldr	r3, [r3, #0]
    7a1a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7a22:	231c      	movs	r3, #28
    7a24:	18fb      	adds	r3, r7, r3
    7a26:	0018      	movs	r0, r3
    7a28:	4b85      	ldr	r3, [pc, #532]	; (7c40 <_spi_set_config+0x234>)
    7a2a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a2c:	231c      	movs	r3, #28
    7a2e:	18fb      	adds	r3, r7, r3
    7a30:	2200      	movs	r2, #0
    7a32:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d103      	bne.n	7a44 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7a3c:	231c      	movs	r3, #28
    7a3e:	18fb      	adds	r3, r7, r3
    7a40:	2200      	movs	r2, #0
    7a42:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7a44:	683b      	ldr	r3, [r7, #0]
    7a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    7a48:	230c      	movs	r3, #12
    7a4a:	18fb      	adds	r3, r7, r3
    7a4c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7a4e:	683b      	ldr	r3, [r7, #0]
    7a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    7a52:	230c      	movs	r3, #12
    7a54:	18fb      	adds	r3, r7, r3
    7a56:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    7a58:	683b      	ldr	r3, [r7, #0]
    7a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    7a5c:	230c      	movs	r3, #12
    7a5e:	18fb      	adds	r3, r7, r3
    7a60:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    7a62:	683b      	ldr	r3, [r7, #0]
    7a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    7a66:	230c      	movs	r3, #12
    7a68:	18fb      	adds	r3, r7, r3
    7a6a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7a6c:	2347      	movs	r3, #71	; 0x47
    7a6e:	18fb      	adds	r3, r7, r3
    7a70:	2200      	movs	r2, #0
    7a72:	701a      	strb	r2, [r3, #0]
    7a74:	e02c      	b.n	7ad0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7a76:	2347      	movs	r3, #71	; 0x47
    7a78:	18fb      	adds	r3, r7, r3
    7a7a:	781a      	ldrb	r2, [r3, #0]
    7a7c:	230c      	movs	r3, #12
    7a7e:	18fb      	adds	r3, r7, r3
    7a80:	0092      	lsls	r2, r2, #2
    7a82:	58d3      	ldr	r3, [r2, r3]
    7a84:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d109      	bne.n	7aa0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7a8c:	2347      	movs	r3, #71	; 0x47
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	781a      	ldrb	r2, [r3, #0]
    7a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7a94:	0011      	movs	r1, r2
    7a96:	0018      	movs	r0, r3
    7a98:	4b6a      	ldr	r3, [pc, #424]	; (7c44 <_spi_set_config+0x238>)
    7a9a:	4798      	blx	r3
    7a9c:	0003      	movs	r3, r0
    7a9e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7aa2:	3301      	adds	r3, #1
    7aa4:	d00d      	beq.n	7ac2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7aa8:	b2da      	uxtb	r2, r3
    7aaa:	231c      	movs	r3, #28
    7aac:	18fb      	adds	r3, r7, r3
    7aae:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7ab2:	0c1b      	lsrs	r3, r3, #16
    7ab4:	b2db      	uxtb	r3, r3
    7ab6:	221c      	movs	r2, #28
    7ab8:	18ba      	adds	r2, r7, r2
    7aba:	0011      	movs	r1, r2
    7abc:	0018      	movs	r0, r3
    7abe:	4b62      	ldr	r3, [pc, #392]	; (7c48 <_spi_set_config+0x23c>)
    7ac0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    7ac2:	2347      	movs	r3, #71	; 0x47
    7ac4:	18fb      	adds	r3, r7, r3
    7ac6:	781a      	ldrb	r2, [r3, #0]
    7ac8:	2347      	movs	r3, #71	; 0x47
    7aca:	18fb      	adds	r3, r7, r3
    7acc:	3201      	adds	r2, #1
    7ace:	701a      	strb	r2, [r3, #0]
    7ad0:	2347      	movs	r3, #71	; 0x47
    7ad2:	18fb      	adds	r3, r7, r3
    7ad4:	781b      	ldrb	r3, [r3, #0]
    7ad6:	2b03      	cmp	r3, #3
    7ad8:	d9cd      	bls.n	7a76 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    7ada:	683b      	ldr	r3, [r7, #0]
    7adc:	781a      	ldrb	r2, [r3, #0]
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    7ae2:	683b      	ldr	r3, [r7, #0]
    7ae4:	7c1a      	ldrb	r2, [r3, #16]
    7ae6:	687b      	ldr	r3, [r7, #4]
    7ae8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    7aea:	683b      	ldr	r3, [r7, #0]
    7aec:	7c9a      	ldrb	r2, [r3, #18]
    7aee:	687b      	ldr	r3, [r7, #4]
    7af0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    7af2:	683b      	ldr	r3, [r7, #0]
    7af4:	7d1a      	ldrb	r2, [r3, #20]
    7af6:	687b      	ldr	r3, [r7, #4]
    7af8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7afa:	230a      	movs	r3, #10
    7afc:	18fb      	adds	r3, r7, r3
    7afe:	2200      	movs	r2, #0
    7b00:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    7b02:	2300      	movs	r3, #0
    7b04:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    7b06:	2300      	movs	r3, #0
    7b08:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    7b0a:	683b      	ldr	r3, [r7, #0]
    7b0c:	781b      	ldrb	r3, [r3, #0]
    7b0e:	2b01      	cmp	r3, #1
    7b10:	d129      	bne.n	7b66 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7b12:	687b      	ldr	r3, [r7, #4]
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	0018      	movs	r0, r3
    7b18:	4b4c      	ldr	r3, [pc, #304]	; (7c4c <_spi_set_config+0x240>)
    7b1a:	4798      	blx	r3
    7b1c:	0003      	movs	r3, r0
    7b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b22:	3314      	adds	r3, #20
    7b24:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7b28:	b2db      	uxtb	r3, r3
    7b2a:	0018      	movs	r0, r3
    7b2c:	4b48      	ldr	r3, [pc, #288]	; (7c50 <_spi_set_config+0x244>)
    7b2e:	4798      	blx	r3
    7b30:	0003      	movs	r3, r0
    7b32:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    7b34:	683b      	ldr	r3, [r7, #0]
    7b36:	699b      	ldr	r3, [r3, #24]
    7b38:	2223      	movs	r2, #35	; 0x23
    7b3a:	18bc      	adds	r4, r7, r2
    7b3c:	220a      	movs	r2, #10
    7b3e:	18ba      	adds	r2, r7, r2
    7b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7b42:	0018      	movs	r0, r3
    7b44:	4b43      	ldr	r3, [pc, #268]	; (7c54 <_spi_set_config+0x248>)
    7b46:	4798      	blx	r3
    7b48:	0003      	movs	r3, r0
    7b4a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    7b4c:	2323      	movs	r3, #35	; 0x23
    7b4e:	18fb      	adds	r3, r7, r3
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	2b00      	cmp	r3, #0
    7b54:	d001      	beq.n	7b5a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    7b56:	2317      	movs	r3, #23
    7b58:	e06d      	b.n	7c36 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    7b5a:	230a      	movs	r3, #10
    7b5c:	18fb      	adds	r3, r7, r3
    7b5e:	881b      	ldrh	r3, [r3, #0]
    7b60:	b2da      	uxtb	r2, r3
    7b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b64:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    7b66:	683b      	ldr	r3, [r7, #0]
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d11a      	bne.n	7ba4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    7b6e:	683b      	ldr	r3, [r7, #0]
    7b70:	699b      	ldr	r3, [r3, #24]
    7b72:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    7b74:	683b      	ldr	r3, [r7, #0]
    7b76:	8b9b      	ldrh	r3, [r3, #28]
    7b78:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    7b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7b7e:	683a      	ldr	r2, [r7, #0]
    7b80:	7f92      	ldrb	r2, [r2, #30]
    7b82:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7b84:	683a      	ldr	r2, [r7, #0]
    7b86:	7fd2      	ldrb	r2, [r2, #31]
    7b88:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7b8a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    7b8c:	431a      	orrs	r2, r3
    7b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7b90:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    7b92:	683b      	ldr	r3, [r7, #0]
    7b94:	2220      	movs	r2, #32
    7b96:	5c9b      	ldrb	r3, [r3, r2]
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d003      	beq.n	7ba4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7b9e:	2240      	movs	r2, #64	; 0x40
    7ba0:	4313      	orrs	r3, r2
    7ba2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    7ba4:	683b      	ldr	r3, [r7, #0]
    7ba6:	685b      	ldr	r3, [r3, #4]
    7ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7baa:	4313      	orrs	r3, r2
    7bac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    7bae:	683b      	ldr	r3, [r7, #0]
    7bb0:	689b      	ldr	r3, [r3, #8]
    7bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7bb4:	4313      	orrs	r3, r2
    7bb6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    7bb8:	683b      	ldr	r3, [r7, #0]
    7bba:	68db      	ldr	r3, [r3, #12]
    7bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7bbe:	4313      	orrs	r3, r2
    7bc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    7bc2:	683b      	ldr	r3, [r7, #0]
    7bc4:	7c1b      	ldrb	r3, [r3, #16]
    7bc6:	001a      	movs	r2, r3
    7bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7bca:	4313      	orrs	r3, r2
    7bcc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7bce:	683b      	ldr	r3, [r7, #0]
    7bd0:	7c5b      	ldrb	r3, [r3, #17]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d103      	bne.n	7bde <_spi_set_config+0x1d2>
    7bd6:	4b20      	ldr	r3, [pc, #128]	; (7c58 <_spi_set_config+0x24c>)
    7bd8:	4798      	blx	r3
    7bda:	1e03      	subs	r3, r0, #0
    7bdc:	d003      	beq.n	7be6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7be0:	2280      	movs	r2, #128	; 0x80
    7be2:	4313      	orrs	r3, r2
    7be4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    7be6:	683b      	ldr	r3, [r7, #0]
    7be8:	7c9b      	ldrb	r3, [r3, #18]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d004      	beq.n	7bf8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7bf0:	2280      	movs	r2, #128	; 0x80
    7bf2:	0292      	lsls	r2, r2, #10
    7bf4:	4313      	orrs	r3, r2
    7bf6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    7bf8:	683b      	ldr	r3, [r7, #0]
    7bfa:	7cdb      	ldrb	r3, [r3, #19]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d004      	beq.n	7c0a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c02:	2280      	movs	r2, #128	; 0x80
    7c04:	0092      	lsls	r2, r2, #2
    7c06:	4313      	orrs	r3, r2
    7c08:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    7c0a:	683b      	ldr	r3, [r7, #0]
    7c0c:	7d1b      	ldrb	r3, [r3, #20]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d004      	beq.n	7c1c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c14:	2280      	movs	r2, #128	; 0x80
    7c16:	0192      	lsls	r2, r2, #6
    7c18:	4313      	orrs	r3, r2
    7c1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    7c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c1e:	681a      	ldr	r2, [r3, #0]
    7c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c22:	431a      	orrs	r2, r3
    7c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c26:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    7c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c2a:	685a      	ldr	r2, [r3, #4]
    7c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c2e:	431a      	orrs	r2, r3
    7c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c32:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    7c34:	2300      	movs	r3, #0
}
    7c36:	0018      	movs	r0, r3
    7c38:	46bd      	mov	sp, r7
    7c3a:	b013      	add	sp, #76	; 0x4c
    7c3c:	bd90      	pop	{r4, r7, pc}
    7c3e:	46c0      	nop			; (mov r8, r8)
    7c40:	00007759 	.word	0x00007759
    7c44:	0000857d 	.word	0x0000857d
    7c48:	00009edd 	.word	0x00009edd
    7c4c:	00008739 	.word	0x00008739
    7c50:	00009d15 	.word	0x00009d15
    7c54:	00008473 	.word	0x00008473
    7c58:	000078cd 	.word	0x000078cd

00007c5c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7c5c:	b590      	push	{r4, r7, lr}
    7c5e:	b08b      	sub	sp, #44	; 0x2c
    7c60:	af00      	add	r7, sp, #0
    7c62:	60f8      	str	r0, [r7, #12]
    7c64:	60b9      	str	r1, [r7, #8]
    7c66:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7c68:	68fb      	ldr	r3, [r7, #12]
    7c6a:	68ba      	ldr	r2, [r7, #8]
    7c6c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7c6e:	68fb      	ldr	r3, [r7, #12]
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7c74:	6a3b      	ldr	r3, [r7, #32]
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	2202      	movs	r2, #2
    7c7a:	4013      	ands	r3, r2
    7c7c:	d001      	beq.n	7c82 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7c7e:	231c      	movs	r3, #28
    7c80:	e0a6      	b.n	7dd0 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7c82:	6a3b      	ldr	r3, [r7, #32]
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	2201      	movs	r2, #1
    7c88:	4013      	ands	r3, r2
    7c8a:	d001      	beq.n	7c90 <spi_init+0x34>
		return STATUS_BUSY;
    7c8c:	2305      	movs	r3, #5
    7c8e:	e09f      	b.n	7dd0 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7c90:	68fb      	ldr	r3, [r7, #12]
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	0018      	movs	r0, r3
    7c96:	4b50      	ldr	r3, [pc, #320]	; (7dd8 <spi_init+0x17c>)
    7c98:	4798      	blx	r3
    7c9a:	0003      	movs	r3, r0
    7c9c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7c9e:	69fb      	ldr	r3, [r7, #28]
    7ca0:	3302      	adds	r3, #2
    7ca2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7ca4:	69fb      	ldr	r3, [r7, #28]
    7ca6:	3314      	adds	r3, #20
    7ca8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7caa:	2201      	movs	r2, #1
    7cac:	69bb      	ldr	r3, [r7, #24]
    7cae:	409a      	lsls	r2, r3
    7cb0:	0013      	movs	r3, r2
    7cb2:	0019      	movs	r1, r3
    7cb4:	2002      	movs	r0, #2
    7cb6:	4b49      	ldr	r3, [pc, #292]	; (7ddc <spi_init+0x180>)
    7cb8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7cba:	2310      	movs	r3, #16
    7cbc:	18fb      	adds	r3, r7, r3
    7cbe:	0018      	movs	r0, r3
    7cc0:	4b47      	ldr	r3, [pc, #284]	; (7de0 <spi_init+0x184>)
    7cc2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	2224      	movs	r2, #36	; 0x24
    7cc8:	5c9a      	ldrb	r2, [r3, r2]
    7cca:	2310      	movs	r3, #16
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7cd0:	697b      	ldr	r3, [r7, #20]
    7cd2:	b2db      	uxtb	r3, r3
    7cd4:	2210      	movs	r2, #16
    7cd6:	18ba      	adds	r2, r7, r2
    7cd8:	0011      	movs	r1, r2
    7cda:	0018      	movs	r0, r3
    7cdc:	4b41      	ldr	r3, [pc, #260]	; (7de4 <spi_init+0x188>)
    7cde:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7ce0:	697b      	ldr	r3, [r7, #20]
    7ce2:	b2db      	uxtb	r3, r3
    7ce4:	0018      	movs	r0, r3
    7ce6:	4b40      	ldr	r3, [pc, #256]	; (7de8 <spi_init+0x18c>)
    7ce8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7cea:	687b      	ldr	r3, [r7, #4]
    7cec:	2224      	movs	r2, #36	; 0x24
    7cee:	5c9b      	ldrb	r3, [r3, r2]
    7cf0:	2100      	movs	r1, #0
    7cf2:	0018      	movs	r0, r3
    7cf4:	4b3d      	ldr	r3, [pc, #244]	; (7dec <spi_init+0x190>)
    7cf6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	2b01      	cmp	r3, #1
    7cfe:	d105      	bne.n	7d0c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7d00:	6a3b      	ldr	r3, [r7, #32]
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	220c      	movs	r2, #12
    7d06:	431a      	orrs	r2, r3
    7d08:	6a3b      	ldr	r3, [r7, #32]
    7d0a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	781b      	ldrb	r3, [r3, #0]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d105      	bne.n	7d20 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7d14:	6a3b      	ldr	r3, [r7, #32]
    7d16:	681b      	ldr	r3, [r3, #0]
    7d18:	2208      	movs	r2, #8
    7d1a:	431a      	orrs	r2, r3
    7d1c:	6a3b      	ldr	r3, [r7, #32]
    7d1e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7d20:	2327      	movs	r3, #39	; 0x27
    7d22:	18fb      	adds	r3, r7, r3
    7d24:	2200      	movs	r2, #0
    7d26:	701a      	strb	r2, [r3, #0]
    7d28:	e010      	b.n	7d4c <spi_init+0xf0>
		module->callback[i]        = NULL;
    7d2a:	2327      	movs	r3, #39	; 0x27
    7d2c:	18fb      	adds	r3, r7, r3
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	68fa      	ldr	r2, [r7, #12]
    7d32:	3302      	adds	r3, #2
    7d34:	009b      	lsls	r3, r3, #2
    7d36:	18d3      	adds	r3, r2, r3
    7d38:	3304      	adds	r3, #4
    7d3a:	2200      	movs	r2, #0
    7d3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7d3e:	2327      	movs	r3, #39	; 0x27
    7d40:	18fb      	adds	r3, r7, r3
    7d42:	781a      	ldrb	r2, [r3, #0]
    7d44:	2327      	movs	r3, #39	; 0x27
    7d46:	18fb      	adds	r3, r7, r3
    7d48:	3201      	adds	r2, #1
    7d4a:	701a      	strb	r2, [r3, #0]
    7d4c:	2327      	movs	r3, #39	; 0x27
    7d4e:	18fb      	adds	r3, r7, r3
    7d50:	781b      	ldrb	r3, [r3, #0]
    7d52:	2b06      	cmp	r3, #6
    7d54:	d9e9      	bls.n	7d2a <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    7d56:	68fb      	ldr	r3, [r7, #12]
    7d58:	2200      	movs	r2, #0
    7d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7d5c:	68fb      	ldr	r3, [r7, #12]
    7d5e:	2200      	movs	r2, #0
    7d60:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7d62:	68fb      	ldr	r3, [r7, #12]
    7d64:	2200      	movs	r2, #0
    7d66:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7d68:	68fb      	ldr	r3, [r7, #12]
    7d6a:	2200      	movs	r2, #0
    7d6c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    7d6e:	68fb      	ldr	r3, [r7, #12]
    7d70:	2236      	movs	r2, #54	; 0x36
    7d72:	2100      	movs	r1, #0
    7d74:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    7d76:	68fb      	ldr	r3, [r7, #12]
    7d78:	2237      	movs	r2, #55	; 0x37
    7d7a:	2100      	movs	r1, #0
    7d7c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    7d7e:	68fb      	ldr	r3, [r7, #12]
    7d80:	2238      	movs	r2, #56	; 0x38
    7d82:	2100      	movs	r1, #0
    7d84:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    7d86:	68fb      	ldr	r3, [r7, #12]
    7d88:	2203      	movs	r2, #3
    7d8a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    7d8c:	68fb      	ldr	r3, [r7, #12]
    7d8e:	2200      	movs	r2, #0
    7d90:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7d92:	68fb      	ldr	r3, [r7, #12]
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	2213      	movs	r2, #19
    7d98:	18bc      	adds	r4, r7, r2
    7d9a:	0018      	movs	r0, r3
    7d9c:	4b0e      	ldr	r3, [pc, #56]	; (7dd8 <spi_init+0x17c>)
    7d9e:	4798      	blx	r3
    7da0:	0003      	movs	r3, r0
    7da2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7da4:	4a12      	ldr	r2, [pc, #72]	; (7df0 <spi_init+0x194>)
    7da6:	2313      	movs	r3, #19
    7da8:	18fb      	adds	r3, r7, r3
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	0011      	movs	r1, r2
    7dae:	0018      	movs	r0, r3
    7db0:	4b10      	ldr	r3, [pc, #64]	; (7df4 <spi_init+0x198>)
    7db2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7db4:	2313      	movs	r3, #19
    7db6:	18fb      	adds	r3, r7, r3
    7db8:	781a      	ldrb	r2, [r3, #0]
    7dba:	4b0f      	ldr	r3, [pc, #60]	; (7df8 <spi_init+0x19c>)
    7dbc:	0092      	lsls	r2, r2, #2
    7dbe:	68f9      	ldr	r1, [r7, #12]
    7dc0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    7dc2:	687a      	ldr	r2, [r7, #4]
    7dc4:	68fb      	ldr	r3, [r7, #12]
    7dc6:	0011      	movs	r1, r2
    7dc8:	0018      	movs	r0, r3
    7dca:	4b0c      	ldr	r3, [pc, #48]	; (7dfc <spi_init+0x1a0>)
    7dcc:	4798      	blx	r3
    7dce:	0003      	movs	r3, r0
}
    7dd0:	0018      	movs	r0, r3
    7dd2:	46bd      	mov	sp, r7
    7dd4:	b00b      	add	sp, #44	; 0x2c
    7dd6:	bd90      	pop	{r4, r7, pc}
    7dd8:	00008739 	.word	0x00008739
    7ddc:	00007871 	.word	0x00007871
    7de0:	00007859 	.word	0x00007859
    7de4:	00009ba9 	.word	0x00009ba9
    7de8:	00009bed 	.word	0x00009bed
    7dec:	000084f1 	.word	0x000084f1
    7df0:	00008151 	.word	0x00008151
    7df4:	0000879d 	.word	0x0000879d
    7df8:	20005514 	.word	0x20005514
    7dfc:	00007a0d 	.word	0x00007a0d

00007e00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b086      	sub	sp, #24
    7e04:	af00      	add	r7, sp, #0
    7e06:	60f8      	str	r0, [r7, #12]
    7e08:	60b9      	str	r1, [r7, #8]
    7e0a:	1dfb      	adds	r3, r7, #7
    7e0c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7e0e:	68fb      	ldr	r3, [r7, #12]
    7e10:	795b      	ldrb	r3, [r3, #5]
    7e12:	2b01      	cmp	r3, #1
    7e14:	d001      	beq.n	7e1a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    7e16:	2315      	movs	r3, #21
    7e18:	e05c      	b.n	7ed4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    7e1a:	68fb      	ldr	r3, [r7, #12]
    7e1c:	7a1b      	ldrb	r3, [r3, #8]
    7e1e:	2201      	movs	r2, #1
    7e20:	4053      	eors	r3, r2
    7e22:	b2db      	uxtb	r3, r3
    7e24:	2b00      	cmp	r3, #0
    7e26:	d054      	beq.n	7ed2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    7e28:	1dfb      	adds	r3, r7, #7
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d04a      	beq.n	7ec6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    7e30:	68bb      	ldr	r3, [r7, #8]
    7e32:	785b      	ldrb	r3, [r3, #1]
    7e34:	2b00      	cmp	r3, #0
    7e36:	d03f      	beq.n	7eb8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    7e38:	68fb      	ldr	r3, [r7, #12]
    7e3a:	0018      	movs	r0, r3
    7e3c:	4b27      	ldr	r3, [pc, #156]	; (7edc <spi_select_slave+0xdc>)
    7e3e:	4798      	blx	r3
    7e40:	0003      	movs	r3, r0
    7e42:	001a      	movs	r2, r3
    7e44:	2301      	movs	r3, #1
    7e46:	4053      	eors	r3, r2
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d007      	beq.n	7e5e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    7e4e:	68bb      	ldr	r3, [r7, #8]
    7e50:	781b      	ldrb	r3, [r3, #0]
    7e52:	2101      	movs	r1, #1
    7e54:	0018      	movs	r0, r3
    7e56:	4b22      	ldr	r3, [pc, #136]	; (7ee0 <spi_select_slave+0xe0>)
    7e58:	4798      	blx	r3
					return STATUS_BUSY;
    7e5a:	2305      	movs	r3, #5
    7e5c:	e03a      	b.n	7ed4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7e5e:	68bb      	ldr	r3, [r7, #8]
    7e60:	781b      	ldrb	r3, [r3, #0]
    7e62:	2100      	movs	r1, #0
    7e64:	0018      	movs	r0, r3
    7e66:	4b1e      	ldr	r3, [pc, #120]	; (7ee0 <spi_select_slave+0xe0>)
    7e68:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    7e6a:	68bb      	ldr	r3, [r7, #8]
    7e6c:	789b      	ldrb	r3, [r3, #2]
    7e6e:	b29a      	uxth	r2, r3
    7e70:	68fb      	ldr	r3, [r7, #12]
    7e72:	0011      	movs	r1, r2
    7e74:	0018      	movs	r0, r3
    7e76:	4b1b      	ldr	r3, [pc, #108]	; (7ee4 <spi_select_slave+0xe4>)
    7e78:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    7e7a:	68fb      	ldr	r3, [r7, #12]
    7e7c:	79db      	ldrb	r3, [r3, #7]
    7e7e:	2201      	movs	r2, #1
    7e80:	4053      	eors	r3, r2
    7e82:	b2db      	uxtb	r3, r3
    7e84:	2b00      	cmp	r3, #0
    7e86:	d024      	beq.n	7ed2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    7e88:	46c0      	nop			; (mov r8, r8)
    7e8a:	68fb      	ldr	r3, [r7, #12]
    7e8c:	0018      	movs	r0, r3
    7e8e:	4b16      	ldr	r3, [pc, #88]	; (7ee8 <spi_select_slave+0xe8>)
    7e90:	4798      	blx	r3
    7e92:	0003      	movs	r3, r0
    7e94:	001a      	movs	r2, r3
    7e96:	2301      	movs	r3, #1
    7e98:	4053      	eors	r3, r2
    7e9a:	b2db      	uxtb	r3, r3
    7e9c:	2b00      	cmp	r3, #0
    7e9e:	d1f4      	bne.n	7e8a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    7ea0:	2316      	movs	r3, #22
    7ea2:	18fb      	adds	r3, r7, r3
    7ea4:	2200      	movs	r2, #0
    7ea6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    7ea8:	2316      	movs	r3, #22
    7eaa:	18fa      	adds	r2, r7, r3
    7eac:	68fb      	ldr	r3, [r7, #12]
    7eae:	0011      	movs	r1, r2
    7eb0:	0018      	movs	r0, r3
    7eb2:	4b0e      	ldr	r3, [pc, #56]	; (7eec <spi_select_slave+0xec>)
    7eb4:	4798      	blx	r3
    7eb6:	e00c      	b.n	7ed2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7eb8:	68bb      	ldr	r3, [r7, #8]
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	2100      	movs	r1, #0
    7ebe:	0018      	movs	r0, r3
    7ec0:	4b07      	ldr	r3, [pc, #28]	; (7ee0 <spi_select_slave+0xe0>)
    7ec2:	4798      	blx	r3
    7ec4:	e005      	b.n	7ed2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    7ec6:	68bb      	ldr	r3, [r7, #8]
    7ec8:	781b      	ldrb	r3, [r3, #0]
    7eca:	2101      	movs	r1, #1
    7ecc:	0018      	movs	r0, r3
    7ece:	4b04      	ldr	r3, [pc, #16]	; (7ee0 <spi_select_slave+0xe0>)
    7ed0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    7ed2:	2300      	movs	r3, #0
}
    7ed4:	0018      	movs	r0, r3
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b006      	add	sp, #24
    7eda:	bd80      	pop	{r7, pc}
    7edc:	000078ed 	.word	0x000078ed
    7ee0:	00007805 	.word	0x00007805
    7ee4:	0000793d 	.word	0x0000793d
    7ee8:	00007915 	.word	0x00007915
    7eec:	00007985 	.word	0x00007985

00007ef0 <_spi_transceive_buffer>:
static void _spi_transceive_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    7ef0:	b580      	push	{r7, lr}
    7ef2:	b086      	sub	sp, #24
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	60f8      	str	r0, [r7, #12]
    7ef8:	60b9      	str	r1, [r7, #8]
    7efa:	607a      	str	r2, [r7, #4]
    7efc:	001a      	movs	r2, r3
    7efe:	1cbb      	adds	r3, r7, #2
    7f00:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    7f02:	68fb      	ldr	r3, [r7, #12]
    7f04:	1cba      	adds	r2, r7, #2
    7f06:	8812      	ldrh	r2, [r2, #0]
    7f08:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    7f0a:	68fb      	ldr	r3, [r7, #12]
    7f0c:	1cba      	adds	r2, r7, #2
    7f0e:	8812      	ldrh	r2, [r2, #0]
    7f10:	861a      	strh	r2, [r3, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    7f12:	68fb      	ldr	r3, [r7, #12]
    7f14:	687a      	ldr	r2, [r7, #4]
    7f16:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    7f18:	68fb      	ldr	r3, [r7, #12]
    7f1a:	68ba      	ldr	r2, [r7, #8]
    7f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    7f1e:	68fb      	ldr	r3, [r7, #12]
    7f20:	2238      	movs	r2, #56	; 0x38
    7f22:	2105      	movs	r1, #5
    7f24:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_BOTH;
    7f26:	68fb      	ldr	r3, [r7, #12]
    7f28:	2202      	movs	r2, #2
    7f2a:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    7f2c:	68fb      	ldr	r3, [r7, #12]
    7f2e:	681b      	ldr	r3, [r3, #0]
    7f30:	617b      	str	r3, [r7, #20]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    7f32:	697b      	ldr	r3, [r7, #20]
    7f34:	2205      	movs	r2, #5
    7f36:	759a      	strb	r2, [r3, #22]
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    7f38:	68fb      	ldr	r3, [r7, #12]
    7f3a:	795b      	ldrb	r3, [r3, #5]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d105      	bne.n	7f4c <_spi_transceive_buffer+0x5c>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7f40:	697b      	ldr	r3, [r7, #20]
    7f42:	2202      	movs	r2, #2
    7f44:	761a      	strb	r2, [r3, #24]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7f46:	697b      	ldr	r3, [r7, #20]
    7f48:	2202      	movs	r2, #2
    7f4a:	759a      	strb	r2, [r3, #22]
	}
#  endif
}
    7f4c:	46c0      	nop			; (mov r8, r8)
    7f4e:	46bd      	mov	sp, r7
    7f50:	b006      	add	sp, #24
    7f52:	bd80      	pop	{r7, pc}

00007f54 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b084      	sub	sp, #16
    7f58:	af00      	add	r7, sp, #0
    7f5a:	60f8      	str	r0, [r7, #12]
    7f5c:	60b9      	str	r1, [r7, #8]
    7f5e:	1dfb      	adds	r3, r7, #7
    7f60:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7f62:	1dfb      	adds	r3, r7, #7
    7f64:	781b      	ldrb	r3, [r3, #0]
    7f66:	68fa      	ldr	r2, [r7, #12]
    7f68:	3302      	adds	r3, #2
    7f6a:	009b      	lsls	r3, r3, #2
    7f6c:	18d3      	adds	r3, r2, r3
    7f6e:	3304      	adds	r3, #4
    7f70:	68ba      	ldr	r2, [r7, #8]
    7f72:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    7f74:	68fb      	ldr	r3, [r7, #12]
    7f76:	2236      	movs	r2, #54	; 0x36
    7f78:	5c9b      	ldrb	r3, [r3, r2]
    7f7a:	b25a      	sxtb	r2, r3
    7f7c:	1dfb      	adds	r3, r7, #7
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2101      	movs	r1, #1
    7f82:	4099      	lsls	r1, r3
    7f84:	000b      	movs	r3, r1
    7f86:	b25b      	sxtb	r3, r3
    7f88:	4313      	orrs	r3, r2
    7f8a:	b25b      	sxtb	r3, r3
    7f8c:	b2d9      	uxtb	r1, r3
    7f8e:	68fb      	ldr	r3, [r7, #12]
    7f90:	2236      	movs	r2, #54	; 0x36
    7f92:	5499      	strb	r1, [r3, r2]
}
    7f94:	46c0      	nop			; (mov r8, r8)
    7f96:	46bd      	mov	sp, r7
    7f98:	b004      	add	sp, #16
    7f9a:	bd80      	pop	{r7, pc}

00007f9c <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    7f9c:	b590      	push	{r4, r7, lr}
    7f9e:	b085      	sub	sp, #20
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	60f8      	str	r0, [r7, #12]
    7fa4:	60b9      	str	r1, [r7, #8]
    7fa6:	607a      	str	r2, [r7, #4]
    7fa8:	001a      	movs	r2, r3
    7faa:	1cbb      	adds	r3, r7, #2
    7fac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    7fae:	1cbb      	adds	r3, r7, #2
    7fb0:	881b      	ldrh	r3, [r3, #0]
    7fb2:	2b00      	cmp	r3, #0
    7fb4:	d101      	bne.n	7fba <spi_transceive_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
    7fb6:	2317      	movs	r3, #23
    7fb8:	e018      	b.n	7fec <spi_transceive_buffer_job+0x50>
	}

	if (!(module->receiver_enabled)) {
    7fba:	68fb      	ldr	r3, [r7, #12]
    7fbc:	79db      	ldrb	r3, [r3, #7]
    7fbe:	2201      	movs	r2, #1
    7fc0:	4053      	eors	r3, r2
    7fc2:	b2db      	uxtb	r3, r3
    7fc4:	2b00      	cmp	r3, #0
    7fc6:	d001      	beq.n	7fcc <spi_transceive_buffer_job+0x30>
		return STATUS_ERR_DENIED;
    7fc8:	231c      	movs	r3, #28
    7fca:	e00f      	b.n	7fec <spi_transceive_buffer_job+0x50>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	2238      	movs	r2, #56	; 0x38
    7fd0:	5c9b      	ldrb	r3, [r3, r2]
    7fd2:	b2db      	uxtb	r3, r3
    7fd4:	2b05      	cmp	r3, #5
    7fd6:	d101      	bne.n	7fdc <spi_transceive_buffer_job+0x40>
		return STATUS_BUSY;
    7fd8:	2305      	movs	r3, #5
    7fda:	e007      	b.n	7fec <spi_transceive_buffer_job+0x50>
	}

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
    7fdc:	1cbb      	adds	r3, r7, #2
    7fde:	881b      	ldrh	r3, [r3, #0]
    7fe0:	687a      	ldr	r2, [r7, #4]
    7fe2:	68b9      	ldr	r1, [r7, #8]
    7fe4:	68f8      	ldr	r0, [r7, #12]
    7fe6:	4c03      	ldr	r4, [pc, #12]	; (7ff4 <spi_transceive_buffer_job+0x58>)
    7fe8:	47a0      	blx	r4

	return STATUS_OK;
    7fea:	2300      	movs	r3, #0
}
    7fec:	0018      	movs	r0, r3
    7fee:	46bd      	mov	sp, r7
    7ff0:	b005      	add	sp, #20
    7ff2:	bd90      	pop	{r4, r7, pc}
    7ff4:	00007ef1 	.word	0x00007ef1

00007ff8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b084      	sub	sp, #16
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	681b      	ldr	r3, [r3, #0]
    8004:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    800a:	781b      	ldrb	r3, [r3, #0]
    800c:	b2da      	uxtb	r2, r3
    800e:	230e      	movs	r3, #14
    8010:	18fb      	adds	r3, r7, r3
    8012:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8018:	1c5a      	adds	r2, r3, #1
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    801e:	687b      	ldr	r3, [r7, #4]
    8020:	799b      	ldrb	r3, [r3, #6]
    8022:	2b01      	cmp	r3, #1
    8024:	d113      	bne.n	804e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	b2db      	uxtb	r3, r3
    802e:	021b      	lsls	r3, r3, #8
    8030:	b21a      	sxth	r2, r3
    8032:	230e      	movs	r3, #14
    8034:	18fb      	adds	r3, r7, r3
    8036:	2100      	movs	r1, #0
    8038:	5e5b      	ldrsh	r3, [r3, r1]
    803a:	4313      	orrs	r3, r2
    803c:	b21a      	sxth	r2, r3
    803e:	230e      	movs	r3, #14
    8040:	18fb      	adds	r3, r7, r3
    8042:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    8044:	687b      	ldr	r3, [r7, #4]
    8046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8048:	1c5a      	adds	r2, r3, #1
    804a:	687b      	ldr	r3, [r7, #4]
    804c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    804e:	230e      	movs	r3, #14
    8050:	18fb      	adds	r3, r7, r3
    8052:	881b      	ldrh	r3, [r3, #0]
    8054:	05db      	lsls	r3, r3, #23
    8056:	0dda      	lsrs	r2, r3, #23
    8058:	68bb      	ldr	r3, [r7, #8]
    805a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8060:	b29b      	uxth	r3, r3
    8062:	3b01      	subs	r3, #1
    8064:	b29a      	uxth	r2, r3
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	869a      	strh	r2, [r3, #52]	; 0x34
}
    806a:	46c0      	nop			; (mov r8, r8)
    806c:	46bd      	mov	sp, r7
    806e:	b004      	add	sp, #16
    8070:	bd80      	pop	{r7, pc}
	...

00008074 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    8074:	b580      	push	{r7, lr}
    8076:	b084      	sub	sp, #16
    8078:	af00      	add	r7, sp, #0
    807a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	681b      	ldr	r3, [r3, #0]
    8080:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    8082:	4b08      	ldr	r3, [pc, #32]	; (80a4 <_spi_write_dummy+0x30>)
    8084:	881b      	ldrh	r3, [r3, #0]
    8086:	001a      	movs	r2, r3
    8088:	68fb      	ldr	r3, [r7, #12]
    808a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8090:	b29b      	uxth	r3, r3
    8092:	3b01      	subs	r3, #1
    8094:	b29a      	uxth	r2, r3
    8096:	687b      	ldr	r3, [r7, #4]
    8098:	865a      	strh	r2, [r3, #50]	; 0x32
}
    809a:	46c0      	nop			; (mov r8, r8)
    809c:	46bd      	mov	sp, r7
    809e:	b004      	add	sp, #16
    80a0:	bd80      	pop	{r7, pc}
    80a2:	46c0      	nop			; (mov r8, r8)
    80a4:	20005510 	.word	0x20005510

000080a8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    80a8:	b580      	push	{r7, lr}
    80aa:	b084      	sub	sp, #16
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	681b      	ldr	r3, [r3, #0]
    80b4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    80b6:	230a      	movs	r3, #10
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	2200      	movs	r2, #0
    80bc:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    80be:	68fb      	ldr	r3, [r7, #12]
    80c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    80c2:	230a      	movs	r3, #10
    80c4:	18fb      	adds	r3, r7, r3
    80c6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    80cc:	b29b      	uxth	r3, r3
    80ce:	3b01      	subs	r3, #1
    80d0:	b29a      	uxth	r2, r3
    80d2:	687b      	ldr	r3, [r7, #4]
    80d4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    80d6:	46c0      	nop			; (mov r8, r8)
    80d8:	46bd      	mov	sp, r7
    80da:	b004      	add	sp, #16
    80dc:	bd80      	pop	{r7, pc}

000080de <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    80de:	b580      	push	{r7, lr}
    80e0:	b084      	sub	sp, #16
    80e2:	af00      	add	r7, sp, #0
    80e4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    80ec:	68fb      	ldr	r3, [r7, #12]
    80ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    80f0:	b29a      	uxth	r2, r3
    80f2:	230a      	movs	r3, #10
    80f4:	18fb      	adds	r3, r7, r3
    80f6:	05d2      	lsls	r2, r2, #23
    80f8:	0dd2      	lsrs	r2, r2, #23
    80fa:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8100:	220a      	movs	r2, #10
    8102:	18ba      	adds	r2, r7, r2
    8104:	8812      	ldrh	r2, [r2, #0]
    8106:	b2d2      	uxtb	r2, r2
    8108:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    810e:	1c5a      	adds	r2, r3, #1
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	799b      	ldrb	r3, [r3, #6]
    8118:	2b01      	cmp	r3, #1
    811a:	d10d      	bne.n	8138 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8120:	220a      	movs	r2, #10
    8122:	18ba      	adds	r2, r7, r2
    8124:	8812      	ldrh	r2, [r2, #0]
    8126:	0a12      	lsrs	r2, r2, #8
    8128:	b292      	uxth	r2, r2
    812a:	b2d2      	uxtb	r2, r2
    812c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8132:	1c5a      	adds	r2, r3, #1
    8134:	687b      	ldr	r3, [r7, #4]
    8136:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    813c:	b29b      	uxth	r3, r3
    813e:	3b01      	subs	r3, #1
    8140:	b29a      	uxth	r2, r3
    8142:	687b      	ldr	r3, [r7, #4]
    8144:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8146:	46c0      	nop			; (mov r8, r8)
    8148:	46bd      	mov	sp, r7
    814a:	b004      	add	sp, #16
    814c:	bd80      	pop	{r7, pc}
	...

00008150 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    8150:	b580      	push	{r7, lr}
    8152:	b086      	sub	sp, #24
    8154:	af00      	add	r7, sp, #0
    8156:	0002      	movs	r2, r0
    8158:	1dfb      	adds	r3, r7, #7
    815a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    815c:	1dfb      	adds	r3, r7, #7
    815e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    8160:	4bb9      	ldr	r3, [pc, #740]	; (8448 <_spi_interrupt_handler+0x2f8>)
    8162:	0092      	lsls	r2, r2, #2
    8164:	58d3      	ldr	r3, [r2, r3]
    8166:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8168:	697b      	ldr	r3, [r7, #20]
    816a:	681b      	ldr	r3, [r3, #0]
    816c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    816e:	697b      	ldr	r3, [r7, #20]
    8170:	2237      	movs	r2, #55	; 0x37
    8172:	5c9a      	ldrb	r2, [r3, r2]
    8174:	697b      	ldr	r3, [r7, #20]
    8176:	2136      	movs	r1, #54	; 0x36
    8178:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    817a:	230f      	movs	r3, #15
    817c:	18fb      	adds	r3, r7, r3
    817e:	400a      	ands	r2, r1
    8180:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8182:	693b      	ldr	r3, [r7, #16]
    8184:	7e1b      	ldrb	r3, [r3, #24]
    8186:	b2da      	uxtb	r2, r3
    8188:	230c      	movs	r3, #12
    818a:	18fb      	adds	r3, r7, r3
    818c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    818e:	693b      	ldr	r3, [r7, #16]
    8190:	7d9b      	ldrb	r3, [r3, #22]
    8192:	b2db      	uxtb	r3, r3
    8194:	b29a      	uxth	r2, r3
    8196:	230c      	movs	r3, #12
    8198:	18fb      	adds	r3, r7, r3
    819a:	210c      	movs	r1, #12
    819c:	1879      	adds	r1, r7, r1
    819e:	8809      	ldrh	r1, [r1, #0]
    81a0:	400a      	ands	r2, r1
    81a2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    81a4:	230c      	movs	r3, #12
    81a6:	18fb      	adds	r3, r7, r3
    81a8:	881b      	ldrh	r3, [r3, #0]
    81aa:	2201      	movs	r2, #1
    81ac:	4013      	ands	r3, r2
    81ae:	d041      	beq.n	8234 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    81b0:	697b      	ldr	r3, [r7, #20]
    81b2:	795b      	ldrb	r3, [r3, #5]
    81b4:	2b01      	cmp	r3, #1
    81b6:	d110      	bne.n	81da <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    81b8:	697b      	ldr	r3, [r7, #20]
    81ba:	7a5b      	ldrb	r3, [r3, #9]
    81bc:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    81be:	2b00      	cmp	r3, #0
    81c0:	d10b      	bne.n	81da <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    81c2:	697b      	ldr	r3, [r7, #20]
    81c4:	0018      	movs	r0, r3
    81c6:	4ba1      	ldr	r3, [pc, #644]	; (844c <_spi_interrupt_handler+0x2fc>)
    81c8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    81ca:	697b      	ldr	r3, [r7, #20]
    81cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    81ce:	b29b      	uxth	r3, r3
    81d0:	2b00      	cmp	r3, #0
    81d2:	d102      	bne.n	81da <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    81d4:	693b      	ldr	r3, [r7, #16]
    81d6:	2201      	movs	r2, #1
    81d8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    81da:	697b      	ldr	r3, [r7, #20]
    81dc:	795b      	ldrb	r3, [r3, #5]
		if (0
    81de:	2b01      	cmp	r3, #1
    81e0:	d104      	bne.n	81ec <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    81e2:	697b      	ldr	r3, [r7, #20]
    81e4:	7a5b      	ldrb	r3, [r3, #9]
    81e6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    81e8:	2b00      	cmp	r3, #0
    81ea:	d108      	bne.n	81fe <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    81ec:	697b      	ldr	r3, [r7, #20]
    81ee:	795b      	ldrb	r3, [r3, #5]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d11f      	bne.n	8234 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    81f4:	697b      	ldr	r3, [r7, #20]
    81f6:	7a5b      	ldrb	r3, [r3, #9]
    81f8:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    81fa:	2b00      	cmp	r3, #0
    81fc:	d01a      	beq.n	8234 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    81fe:	697b      	ldr	r3, [r7, #20]
    8200:	0018      	movs	r0, r3
    8202:	4b93      	ldr	r3, [pc, #588]	; (8450 <_spi_interrupt_handler+0x300>)
    8204:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8206:	697b      	ldr	r3, [r7, #20]
    8208:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    820a:	b29b      	uxth	r3, r3
    820c:	2b00      	cmp	r3, #0
    820e:	d111      	bne.n	8234 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8210:	693b      	ldr	r3, [r7, #16]
    8212:	2201      	movs	r2, #1
    8214:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8216:	697b      	ldr	r3, [r7, #20]
    8218:	7a5b      	ldrb	r3, [r3, #9]
    821a:	b2db      	uxtb	r3, r3
    821c:	2b01      	cmp	r3, #1
    821e:	d109      	bne.n	8234 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    8220:	697b      	ldr	r3, [r7, #20]
    8222:	79db      	ldrb	r3, [r3, #7]
    8224:	2201      	movs	r2, #1
    8226:	4053      	eors	r3, r2
    8228:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    822a:	2b00      	cmp	r3, #0
    822c:	d002      	beq.n	8234 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    822e:	693b      	ldr	r3, [r7, #16]
    8230:	2202      	movs	r2, #2
    8232:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8234:	230c      	movs	r3, #12
    8236:	18fb      	adds	r3, r7, r3
    8238:	881b      	ldrh	r3, [r3, #0]
    823a:	2204      	movs	r2, #4
    823c:	4013      	ands	r3, r2
    823e:	d100      	bne.n	8242 <_spi_interrupt_handler+0xf2>
    8240:	e07e      	b.n	8340 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8242:	693b      	ldr	r3, [r7, #16]
    8244:	8b5b      	ldrh	r3, [r3, #26]
    8246:	b29b      	uxth	r3, r3
    8248:	001a      	movs	r2, r3
    824a:	2304      	movs	r3, #4
    824c:	4013      	ands	r3, r2
    824e:	d022      	beq.n	8296 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    8250:	697b      	ldr	r3, [r7, #20]
    8252:	7a5b      	ldrb	r3, [r3, #9]
    8254:	b2db      	uxtb	r3, r3
    8256:	2b01      	cmp	r3, #1
    8258:	d014      	beq.n	8284 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    825a:	697b      	ldr	r3, [r7, #20]
    825c:	2238      	movs	r2, #56	; 0x38
    825e:	211e      	movs	r1, #30
    8260:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    8262:	697b      	ldr	r3, [r7, #20]
    8264:	2203      	movs	r2, #3
    8266:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    8268:	693b      	ldr	r3, [r7, #16]
    826a:	2205      	movs	r2, #5
    826c:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    826e:	230f      	movs	r3, #15
    8270:	18fb      	adds	r3, r7, r3
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	2208      	movs	r2, #8
    8276:	4013      	ands	r3, r2
    8278:	d004      	beq.n	8284 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    827a:	697b      	ldr	r3, [r7, #20]
    827c:	699b      	ldr	r3, [r3, #24]
    827e:	697a      	ldr	r2, [r7, #20]
    8280:	0010      	movs	r0, r2
    8282:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    8284:	693b      	ldr	r3, [r7, #16]
    8286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8288:	230a      	movs	r3, #10
    828a:	18fb      	adds	r3, r7, r3
    828c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    828e:	693b      	ldr	r3, [r7, #16]
    8290:	2204      	movs	r2, #4
    8292:	835a      	strh	r2, [r3, #26]
    8294:	e054      	b.n	8340 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    8296:	697b      	ldr	r3, [r7, #20]
    8298:	7a5b      	ldrb	r3, [r3, #9]
    829a:	b2db      	uxtb	r3, r3
    829c:	2b01      	cmp	r3, #1
    829e:	d11e      	bne.n	82de <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    82a0:	697b      	ldr	r3, [r7, #20]
    82a2:	0018      	movs	r0, r3
    82a4:	4b6b      	ldr	r3, [pc, #428]	; (8454 <_spi_interrupt_handler+0x304>)
    82a6:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    82a8:	697b      	ldr	r3, [r7, #20]
    82aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    82ac:	b29b      	uxth	r3, r3
    82ae:	2b00      	cmp	r3, #0
    82b0:	d146      	bne.n	8340 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    82b2:	693b      	ldr	r3, [r7, #16]
    82b4:	2204      	movs	r2, #4
    82b6:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    82b8:	697b      	ldr	r3, [r7, #20]
    82ba:	2238      	movs	r2, #56	; 0x38
    82bc:	2100      	movs	r1, #0
    82be:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    82c0:	697b      	ldr	r3, [r7, #20]
    82c2:	2203      	movs	r2, #3
    82c4:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    82c6:	230f      	movs	r3, #15
    82c8:	18fb      	adds	r3, r7, r3
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	2201      	movs	r2, #1
    82ce:	4013      	ands	r3, r2
    82d0:	d036      	beq.n	8340 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    82d2:	697b      	ldr	r3, [r7, #20]
    82d4:	68db      	ldr	r3, [r3, #12]
    82d6:	697a      	ldr	r2, [r7, #20]
    82d8:	0010      	movs	r0, r2
    82da:	4798      	blx	r3
    82dc:	e030      	b.n	8340 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    82de:	697b      	ldr	r3, [r7, #20]
    82e0:	0018      	movs	r0, r3
    82e2:	4b5d      	ldr	r3, [pc, #372]	; (8458 <_spi_interrupt_handler+0x308>)
    82e4:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    82e6:	697b      	ldr	r3, [r7, #20]
    82e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    82ea:	b29b      	uxth	r3, r3
    82ec:	2b00      	cmp	r3, #0
    82ee:	d127      	bne.n	8340 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    82f0:	697b      	ldr	r3, [r7, #20]
    82f2:	2238      	movs	r2, #56	; 0x38
    82f4:	2100      	movs	r1, #0
    82f6:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    82f8:	693b      	ldr	r3, [r7, #16]
    82fa:	2204      	movs	r2, #4
    82fc:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    82fe:	697b      	ldr	r3, [r7, #20]
    8300:	7a5b      	ldrb	r3, [r3, #9]
    8302:	b2db      	uxtb	r3, r3
    8304:	2b02      	cmp	r3, #2
    8306:	d10b      	bne.n	8320 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8308:	230f      	movs	r3, #15
    830a:	18fb      	adds	r3, r7, r3
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	2204      	movs	r2, #4
    8310:	4013      	ands	r3, r2
    8312:	d015      	beq.n	8340 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    8314:	697b      	ldr	r3, [r7, #20]
    8316:	695b      	ldr	r3, [r3, #20]
    8318:	697a      	ldr	r2, [r7, #20]
    831a:	0010      	movs	r0, r2
    831c:	4798      	blx	r3
    831e:	e00f      	b.n	8340 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    8320:	697b      	ldr	r3, [r7, #20]
    8322:	7a5b      	ldrb	r3, [r3, #9]
    8324:	b2db      	uxtb	r3, r3
    8326:	2b00      	cmp	r3, #0
    8328:	d10a      	bne.n	8340 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    832a:	230f      	movs	r3, #15
    832c:	18fb      	adds	r3, r7, r3
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	2202      	movs	r2, #2
    8332:	4013      	ands	r3, r2
    8334:	d004      	beq.n	8340 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8336:	697b      	ldr	r3, [r7, #20]
    8338:	691b      	ldr	r3, [r3, #16]
    833a:	697a      	ldr	r2, [r7, #20]
    833c:	0010      	movs	r0, r2
    833e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    8340:	230c      	movs	r3, #12
    8342:	18fb      	adds	r3, r7, r3
    8344:	881b      	ldrh	r3, [r3, #0]
    8346:	2202      	movs	r2, #2
    8348:	4013      	ands	r3, r2
    834a:	d046      	beq.n	83da <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    834c:	697b      	ldr	r3, [r7, #20]
    834e:	795b      	ldrb	r3, [r3, #5]
    8350:	2b00      	cmp	r3, #0
    8352:	d11d      	bne.n	8390 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    8354:	693b      	ldr	r3, [r7, #16]
    8356:	2207      	movs	r2, #7
    8358:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    835a:	693b      	ldr	r3, [r7, #16]
    835c:	2202      	movs	r2, #2
    835e:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    8360:	697b      	ldr	r3, [r7, #20]
    8362:	2203      	movs	r2, #3
    8364:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    8366:	697b      	ldr	r3, [r7, #20]
    8368:	2200      	movs	r2, #0
    836a:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    836c:	697b      	ldr	r3, [r7, #20]
    836e:	2200      	movs	r2, #0
    8370:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    8372:	697b      	ldr	r3, [r7, #20]
    8374:	2238      	movs	r2, #56	; 0x38
    8376:	2100      	movs	r1, #0
    8378:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    837a:	230f      	movs	r3, #15
    837c:	18fb      	adds	r3, r7, r3
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	2210      	movs	r2, #16
    8382:	4013      	ands	r3, r2
    8384:	d004      	beq.n	8390 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    8386:	697b      	ldr	r3, [r7, #20]
    8388:	69db      	ldr	r3, [r3, #28]
    838a:	697a      	ldr	r2, [r7, #20]
    838c:	0010      	movs	r0, r2
    838e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8390:	697b      	ldr	r3, [r7, #20]
    8392:	795b      	ldrb	r3, [r3, #5]
    8394:	2b01      	cmp	r3, #1
    8396:	d120      	bne.n	83da <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    8398:	697b      	ldr	r3, [r7, #20]
    839a:	7a5b      	ldrb	r3, [r3, #9]
    839c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    839e:	2b01      	cmp	r3, #1
    83a0:	d11b      	bne.n	83da <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    83a2:	697b      	ldr	r3, [r7, #20]
    83a4:	79db      	ldrb	r3, [r3, #7]
    83a6:	2201      	movs	r2, #1
    83a8:	4053      	eors	r3, r2
    83aa:	b2db      	uxtb	r3, r3
    83ac:	2b00      	cmp	r3, #0
    83ae:	d014      	beq.n	83da <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    83b0:	693b      	ldr	r3, [r7, #16]
    83b2:	2202      	movs	r2, #2
    83b4:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    83b6:	697b      	ldr	r3, [r7, #20]
    83b8:	2203      	movs	r2, #3
    83ba:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    83bc:	697b      	ldr	r3, [r7, #20]
    83be:	2238      	movs	r2, #56	; 0x38
    83c0:	2100      	movs	r1, #0
    83c2:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    83c4:	230f      	movs	r3, #15
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	2201      	movs	r2, #1
    83cc:	4013      	ands	r3, r2
    83ce:	d004      	beq.n	83da <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    83d0:	697b      	ldr	r3, [r7, #20]
    83d2:	68db      	ldr	r3, [r3, #12]
    83d4:	697a      	ldr	r2, [r7, #20]
    83d6:	0010      	movs	r0, r2
    83d8:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    83da:	230c      	movs	r3, #12
    83dc:	18fb      	adds	r3, r7, r3
    83de:	881b      	ldrh	r3, [r3, #0]
    83e0:	2208      	movs	r2, #8
    83e2:	4013      	ands	r3, r2
    83e4:	d014      	beq.n	8410 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    83e6:	697b      	ldr	r3, [r7, #20]
    83e8:	795b      	ldrb	r3, [r3, #5]
    83ea:	2b00      	cmp	r3, #0
    83ec:	d110      	bne.n	8410 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    83ee:	693b      	ldr	r3, [r7, #16]
    83f0:	2208      	movs	r2, #8
    83f2:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    83f4:	693b      	ldr	r3, [r7, #16]
    83f6:	2208      	movs	r2, #8
    83f8:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    83fa:	230f      	movs	r3, #15
    83fc:	18fb      	adds	r3, r7, r3
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	2220      	movs	r2, #32
    8402:	4013      	ands	r3, r2
    8404:	d004      	beq.n	8410 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    8406:	697b      	ldr	r3, [r7, #20]
    8408:	6a1b      	ldr	r3, [r3, #32]
    840a:	697a      	ldr	r2, [r7, #20]
    840c:	0010      	movs	r0, r2
    840e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8410:	230c      	movs	r3, #12
    8412:	18fb      	adds	r3, r7, r3
    8414:	881b      	ldrh	r3, [r3, #0]
    8416:	2280      	movs	r2, #128	; 0x80
    8418:	4013      	ands	r3, r2
    841a:	d010      	beq.n	843e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    841c:	693b      	ldr	r3, [r7, #16]
    841e:	2280      	movs	r2, #128	; 0x80
    8420:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8422:	693b      	ldr	r3, [r7, #16]
    8424:	2280      	movs	r2, #128	; 0x80
    8426:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    8428:	230f      	movs	r3, #15
    842a:	18fb      	adds	r3, r7, r3
    842c:	781b      	ldrb	r3, [r3, #0]
    842e:	2240      	movs	r2, #64	; 0x40
    8430:	4013      	ands	r3, r2
    8432:	d004      	beq.n	843e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8434:	697b      	ldr	r3, [r7, #20]
    8436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8438:	697a      	ldr	r2, [r7, #20]
    843a:	0010      	movs	r0, r2
    843c:	4798      	blx	r3
		}
	}
#  endif
}
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	46bd      	mov	sp, r7
    8442:	b006      	add	sp, #24
    8444:	bd80      	pop	{r7, pc}
    8446:	46c0      	nop			; (mov r8, r8)
    8448:	20005514 	.word	0x20005514
    844c:	00008075 	.word	0x00008075
    8450:	00007ff9 	.word	0x00007ff9
    8454:	000080a9 	.word	0x000080a9
    8458:	000080df 	.word	0x000080df

0000845c <system_gclk_chan_get_config_defaults>:
{
    845c:	b580      	push	{r7, lr}
    845e:	b082      	sub	sp, #8
    8460:	af00      	add	r7, sp, #0
    8462:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	2200      	movs	r2, #0
    8468:	701a      	strb	r2, [r3, #0]
}
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	46bd      	mov	sp, r7
    846e:	b002      	add	sp, #8
    8470:	bd80      	pop	{r7, pc}

00008472 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    8472:	b580      	push	{r7, lr}
    8474:	b086      	sub	sp, #24
    8476:	af00      	add	r7, sp, #0
    8478:	60f8      	str	r0, [r7, #12]
    847a:	60b9      	str	r1, [r7, #8]
    847c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    847e:	2316      	movs	r3, #22
    8480:	18fb      	adds	r3, r7, r3
    8482:	2200      	movs	r2, #0
    8484:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    8486:	68bb      	ldr	r3, [r7, #8]
    8488:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    848a:	68bb      	ldr	r3, [r7, #8]
    848c:	085a      	lsrs	r2, r3, #1
    848e:	68fb      	ldr	r3, [r7, #12]
    8490:	429a      	cmp	r2, r3
    8492:	d201      	bcs.n	8498 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    8494:	2340      	movs	r3, #64	; 0x40
    8496:	e026      	b.n	84e6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    8498:	68bb      	ldr	r3, [r7, #8]
    849a:	085b      	lsrs	r3, r3, #1
    849c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    849e:	e00a      	b.n	84b6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    84a0:	693a      	ldr	r2, [r7, #16]
    84a2:	68fb      	ldr	r3, [r7, #12]
    84a4:	1ad3      	subs	r3, r2, r3
    84a6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    84a8:	2316      	movs	r3, #22
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	881a      	ldrh	r2, [r3, #0]
    84ae:	2316      	movs	r3, #22
    84b0:	18fb      	adds	r3, r7, r3
    84b2:	3201      	adds	r2, #1
    84b4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    84b6:	693a      	ldr	r2, [r7, #16]
    84b8:	68fb      	ldr	r3, [r7, #12]
    84ba:	429a      	cmp	r2, r3
    84bc:	d2f0      	bcs.n	84a0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    84be:	2316      	movs	r3, #22
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	2216      	movs	r2, #22
    84c4:	18ba      	adds	r2, r7, r2
    84c6:	8812      	ldrh	r2, [r2, #0]
    84c8:	3a01      	subs	r2, #1
    84ca:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    84cc:	2316      	movs	r3, #22
    84ce:	18fb      	adds	r3, r7, r3
    84d0:	881b      	ldrh	r3, [r3, #0]
    84d2:	2bff      	cmp	r3, #255	; 0xff
    84d4:	d901      	bls.n	84da <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    84d6:	2340      	movs	r3, #64	; 0x40
    84d8:	e005      	b.n	84e6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	2216      	movs	r2, #22
    84de:	18ba      	adds	r2, r7, r2
    84e0:	8812      	ldrh	r2, [r2, #0]
    84e2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    84e4:	2300      	movs	r3, #0
	}
}
    84e6:	0018      	movs	r0, r3
    84e8:	46bd      	mov	sp, r7
    84ea:	b006      	add	sp, #24
    84ec:	bd80      	pop	{r7, pc}
	...

000084f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    84f0:	b580      	push	{r7, lr}
    84f2:	b084      	sub	sp, #16
    84f4:	af00      	add	r7, sp, #0
    84f6:	0002      	movs	r2, r0
    84f8:	1dfb      	adds	r3, r7, #7
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	1dbb      	adds	r3, r7, #6
    84fe:	1c0a      	adds	r2, r1, #0
    8500:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    8502:	4b1a      	ldr	r3, [pc, #104]	; (856c <sercom_set_gclk_generator+0x7c>)
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	2201      	movs	r2, #1
    8508:	4053      	eors	r3, r2
    850a:	b2db      	uxtb	r3, r3
    850c:	2b00      	cmp	r3, #0
    850e:	d103      	bne.n	8518 <sercom_set_gclk_generator+0x28>
    8510:	1dbb      	adds	r3, r7, #6
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	2b00      	cmp	r3, #0
    8516:	d01b      	beq.n	8550 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8518:	230c      	movs	r3, #12
    851a:	18fb      	adds	r3, r7, r3
    851c:	0018      	movs	r0, r3
    851e:	4b14      	ldr	r3, [pc, #80]	; (8570 <sercom_set_gclk_generator+0x80>)
    8520:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    8522:	230c      	movs	r3, #12
    8524:	18fb      	adds	r3, r7, r3
    8526:	1dfa      	adds	r2, r7, #7
    8528:	7812      	ldrb	r2, [r2, #0]
    852a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    852c:	230c      	movs	r3, #12
    852e:	18fb      	adds	r3, r7, r3
    8530:	0019      	movs	r1, r3
    8532:	2013      	movs	r0, #19
    8534:	4b0f      	ldr	r3, [pc, #60]	; (8574 <sercom_set_gclk_generator+0x84>)
    8536:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    8538:	2013      	movs	r0, #19
    853a:	4b0f      	ldr	r3, [pc, #60]	; (8578 <sercom_set_gclk_generator+0x88>)
    853c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    853e:	4b0b      	ldr	r3, [pc, #44]	; (856c <sercom_set_gclk_generator+0x7c>)
    8540:	1dfa      	adds	r2, r7, #7
    8542:	7812      	ldrb	r2, [r2, #0]
    8544:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    8546:	4b09      	ldr	r3, [pc, #36]	; (856c <sercom_set_gclk_generator+0x7c>)
    8548:	2201      	movs	r2, #1
    854a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    854c:	2300      	movs	r3, #0
    854e:	e008      	b.n	8562 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    8550:	4b06      	ldr	r3, [pc, #24]	; (856c <sercom_set_gclk_generator+0x7c>)
    8552:	785b      	ldrb	r3, [r3, #1]
    8554:	1dfa      	adds	r2, r7, #7
    8556:	7812      	ldrb	r2, [r2, #0]
    8558:	429a      	cmp	r2, r3
    855a:	d101      	bne.n	8560 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    855c:	2300      	movs	r3, #0
    855e:	e000      	b.n	8562 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    8560:	231d      	movs	r3, #29
}
    8562:	0018      	movs	r0, r3
    8564:	46bd      	mov	sp, r7
    8566:	b004      	add	sp, #16
    8568:	bd80      	pop	{r7, pc}
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	2000547c 	.word	0x2000547c
    8570:	0000845d 	.word	0x0000845d
    8574:	00009ba9 	.word	0x00009ba9
    8578:	00009bed 	.word	0x00009bed

0000857c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    857c:	b580      	push	{r7, lr}
    857e:	b082      	sub	sp, #8
    8580:	af00      	add	r7, sp, #0
    8582:	6078      	str	r0, [r7, #4]
    8584:	000a      	movs	r2, r1
    8586:	1cfb      	adds	r3, r7, #3
    8588:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    858a:	687b      	ldr	r3, [r7, #4]
    858c:	4a4d      	ldr	r2, [pc, #308]	; (86c4 <_sercom_get_default_pad+0x148>)
    858e:	4293      	cmp	r3, r2
    8590:	d03f      	beq.n	8612 <_sercom_get_default_pad+0x96>
    8592:	4a4c      	ldr	r2, [pc, #304]	; (86c4 <_sercom_get_default_pad+0x148>)
    8594:	4293      	cmp	r3, r2
    8596:	d806      	bhi.n	85a6 <_sercom_get_default_pad+0x2a>
    8598:	4a4b      	ldr	r2, [pc, #300]	; (86c8 <_sercom_get_default_pad+0x14c>)
    859a:	4293      	cmp	r3, r2
    859c:	d00f      	beq.n	85be <_sercom_get_default_pad+0x42>
    859e:	4a4b      	ldr	r2, [pc, #300]	; (86cc <_sercom_get_default_pad+0x150>)
    85a0:	4293      	cmp	r3, r2
    85a2:	d021      	beq.n	85e8 <_sercom_get_default_pad+0x6c>
    85a4:	e089      	b.n	86ba <_sercom_get_default_pad+0x13e>
    85a6:	4a4a      	ldr	r2, [pc, #296]	; (86d0 <_sercom_get_default_pad+0x154>)
    85a8:	4293      	cmp	r3, r2
    85aa:	d100      	bne.n	85ae <_sercom_get_default_pad+0x32>
    85ac:	e05b      	b.n	8666 <_sercom_get_default_pad+0xea>
    85ae:	4a49      	ldr	r2, [pc, #292]	; (86d4 <_sercom_get_default_pad+0x158>)
    85b0:	4293      	cmp	r3, r2
    85b2:	d100      	bne.n	85b6 <_sercom_get_default_pad+0x3a>
    85b4:	e06c      	b.n	8690 <_sercom_get_default_pad+0x114>
    85b6:	4a48      	ldr	r2, [pc, #288]	; (86d8 <_sercom_get_default_pad+0x15c>)
    85b8:	4293      	cmp	r3, r2
    85ba:	d03f      	beq.n	863c <_sercom_get_default_pad+0xc0>
    85bc:	e07d      	b.n	86ba <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    85be:	1cfb      	adds	r3, r7, #3
    85c0:	781b      	ldrb	r3, [r3, #0]
    85c2:	2b01      	cmp	r3, #1
    85c4:	d00a      	beq.n	85dc <_sercom_get_default_pad+0x60>
    85c6:	dc02      	bgt.n	85ce <_sercom_get_default_pad+0x52>
    85c8:	2b00      	cmp	r3, #0
    85ca:	d005      	beq.n	85d8 <_sercom_get_default_pad+0x5c>
    85cc:	e075      	b.n	86ba <_sercom_get_default_pad+0x13e>
    85ce:	2b02      	cmp	r3, #2
    85d0:	d006      	beq.n	85e0 <_sercom_get_default_pad+0x64>
    85d2:	2b03      	cmp	r3, #3
    85d4:	d006      	beq.n	85e4 <_sercom_get_default_pad+0x68>
    85d6:	e070      	b.n	86ba <_sercom_get_default_pad+0x13e>
    85d8:	4b40      	ldr	r3, [pc, #256]	; (86dc <_sercom_get_default_pad+0x160>)
    85da:	e06f      	b.n	86bc <_sercom_get_default_pad+0x140>
    85dc:	4b40      	ldr	r3, [pc, #256]	; (86e0 <_sercom_get_default_pad+0x164>)
    85de:	e06d      	b.n	86bc <_sercom_get_default_pad+0x140>
    85e0:	4b40      	ldr	r3, [pc, #256]	; (86e4 <_sercom_get_default_pad+0x168>)
    85e2:	e06b      	b.n	86bc <_sercom_get_default_pad+0x140>
    85e4:	4b40      	ldr	r3, [pc, #256]	; (86e8 <_sercom_get_default_pad+0x16c>)
    85e6:	e069      	b.n	86bc <_sercom_get_default_pad+0x140>
    85e8:	1cfb      	adds	r3, r7, #3
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	2b01      	cmp	r3, #1
    85ee:	d00a      	beq.n	8606 <_sercom_get_default_pad+0x8a>
    85f0:	dc02      	bgt.n	85f8 <_sercom_get_default_pad+0x7c>
    85f2:	2b00      	cmp	r3, #0
    85f4:	d005      	beq.n	8602 <_sercom_get_default_pad+0x86>
    85f6:	e060      	b.n	86ba <_sercom_get_default_pad+0x13e>
    85f8:	2b02      	cmp	r3, #2
    85fa:	d006      	beq.n	860a <_sercom_get_default_pad+0x8e>
    85fc:	2b03      	cmp	r3, #3
    85fe:	d006      	beq.n	860e <_sercom_get_default_pad+0x92>
    8600:	e05b      	b.n	86ba <_sercom_get_default_pad+0x13e>
    8602:	2303      	movs	r3, #3
    8604:	e05a      	b.n	86bc <_sercom_get_default_pad+0x140>
    8606:	4b39      	ldr	r3, [pc, #228]	; (86ec <_sercom_get_default_pad+0x170>)
    8608:	e058      	b.n	86bc <_sercom_get_default_pad+0x140>
    860a:	4b39      	ldr	r3, [pc, #228]	; (86f0 <_sercom_get_default_pad+0x174>)
    860c:	e056      	b.n	86bc <_sercom_get_default_pad+0x140>
    860e:	4b39      	ldr	r3, [pc, #228]	; (86f4 <_sercom_get_default_pad+0x178>)
    8610:	e054      	b.n	86bc <_sercom_get_default_pad+0x140>
    8612:	1cfb      	adds	r3, r7, #3
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	2b01      	cmp	r3, #1
    8618:	d00a      	beq.n	8630 <_sercom_get_default_pad+0xb4>
    861a:	dc02      	bgt.n	8622 <_sercom_get_default_pad+0xa6>
    861c:	2b00      	cmp	r3, #0
    861e:	d005      	beq.n	862c <_sercom_get_default_pad+0xb0>
    8620:	e04b      	b.n	86ba <_sercom_get_default_pad+0x13e>
    8622:	2b02      	cmp	r3, #2
    8624:	d006      	beq.n	8634 <_sercom_get_default_pad+0xb8>
    8626:	2b03      	cmp	r3, #3
    8628:	d006      	beq.n	8638 <_sercom_get_default_pad+0xbc>
    862a:	e046      	b.n	86ba <_sercom_get_default_pad+0x13e>
    862c:	4b32      	ldr	r3, [pc, #200]	; (86f8 <_sercom_get_default_pad+0x17c>)
    862e:	e045      	b.n	86bc <_sercom_get_default_pad+0x140>
    8630:	4b32      	ldr	r3, [pc, #200]	; (86fc <_sercom_get_default_pad+0x180>)
    8632:	e043      	b.n	86bc <_sercom_get_default_pad+0x140>
    8634:	4b32      	ldr	r3, [pc, #200]	; (8700 <_sercom_get_default_pad+0x184>)
    8636:	e041      	b.n	86bc <_sercom_get_default_pad+0x140>
    8638:	4b32      	ldr	r3, [pc, #200]	; (8704 <_sercom_get_default_pad+0x188>)
    863a:	e03f      	b.n	86bc <_sercom_get_default_pad+0x140>
    863c:	1cfb      	adds	r3, r7, #3
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	2b01      	cmp	r3, #1
    8642:	d00a      	beq.n	865a <_sercom_get_default_pad+0xde>
    8644:	dc02      	bgt.n	864c <_sercom_get_default_pad+0xd0>
    8646:	2b00      	cmp	r3, #0
    8648:	d005      	beq.n	8656 <_sercom_get_default_pad+0xda>
    864a:	e036      	b.n	86ba <_sercom_get_default_pad+0x13e>
    864c:	2b02      	cmp	r3, #2
    864e:	d006      	beq.n	865e <_sercom_get_default_pad+0xe2>
    8650:	2b03      	cmp	r3, #3
    8652:	d006      	beq.n	8662 <_sercom_get_default_pad+0xe6>
    8654:	e031      	b.n	86ba <_sercom_get_default_pad+0x13e>
    8656:	4b2c      	ldr	r3, [pc, #176]	; (8708 <_sercom_get_default_pad+0x18c>)
    8658:	e030      	b.n	86bc <_sercom_get_default_pad+0x140>
    865a:	4b2c      	ldr	r3, [pc, #176]	; (870c <_sercom_get_default_pad+0x190>)
    865c:	e02e      	b.n	86bc <_sercom_get_default_pad+0x140>
    865e:	4b2c      	ldr	r3, [pc, #176]	; (8710 <_sercom_get_default_pad+0x194>)
    8660:	e02c      	b.n	86bc <_sercom_get_default_pad+0x140>
    8662:	4b2c      	ldr	r3, [pc, #176]	; (8714 <_sercom_get_default_pad+0x198>)
    8664:	e02a      	b.n	86bc <_sercom_get_default_pad+0x140>
    8666:	1cfb      	adds	r3, r7, #3
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2b01      	cmp	r3, #1
    866c:	d00a      	beq.n	8684 <_sercom_get_default_pad+0x108>
    866e:	dc02      	bgt.n	8676 <_sercom_get_default_pad+0xfa>
    8670:	2b00      	cmp	r3, #0
    8672:	d005      	beq.n	8680 <_sercom_get_default_pad+0x104>
    8674:	e021      	b.n	86ba <_sercom_get_default_pad+0x13e>
    8676:	2b02      	cmp	r3, #2
    8678:	d006      	beq.n	8688 <_sercom_get_default_pad+0x10c>
    867a:	2b03      	cmp	r3, #3
    867c:	d006      	beq.n	868c <_sercom_get_default_pad+0x110>
    867e:	e01c      	b.n	86ba <_sercom_get_default_pad+0x13e>
    8680:	4b25      	ldr	r3, [pc, #148]	; (8718 <_sercom_get_default_pad+0x19c>)
    8682:	e01b      	b.n	86bc <_sercom_get_default_pad+0x140>
    8684:	4b25      	ldr	r3, [pc, #148]	; (871c <_sercom_get_default_pad+0x1a0>)
    8686:	e019      	b.n	86bc <_sercom_get_default_pad+0x140>
    8688:	4b25      	ldr	r3, [pc, #148]	; (8720 <_sercom_get_default_pad+0x1a4>)
    868a:	e017      	b.n	86bc <_sercom_get_default_pad+0x140>
    868c:	4b25      	ldr	r3, [pc, #148]	; (8724 <_sercom_get_default_pad+0x1a8>)
    868e:	e015      	b.n	86bc <_sercom_get_default_pad+0x140>
    8690:	1cfb      	adds	r3, r7, #3
    8692:	781b      	ldrb	r3, [r3, #0]
    8694:	2b01      	cmp	r3, #1
    8696:	d00a      	beq.n	86ae <_sercom_get_default_pad+0x132>
    8698:	dc02      	bgt.n	86a0 <_sercom_get_default_pad+0x124>
    869a:	2b00      	cmp	r3, #0
    869c:	d005      	beq.n	86aa <_sercom_get_default_pad+0x12e>
    869e:	e00c      	b.n	86ba <_sercom_get_default_pad+0x13e>
    86a0:	2b02      	cmp	r3, #2
    86a2:	d006      	beq.n	86b2 <_sercom_get_default_pad+0x136>
    86a4:	2b03      	cmp	r3, #3
    86a6:	d006      	beq.n	86b6 <_sercom_get_default_pad+0x13a>
    86a8:	e007      	b.n	86ba <_sercom_get_default_pad+0x13e>
    86aa:	4b1f      	ldr	r3, [pc, #124]	; (8728 <_sercom_get_default_pad+0x1ac>)
    86ac:	e006      	b.n	86bc <_sercom_get_default_pad+0x140>
    86ae:	4b1f      	ldr	r3, [pc, #124]	; (872c <_sercom_get_default_pad+0x1b0>)
    86b0:	e004      	b.n	86bc <_sercom_get_default_pad+0x140>
    86b2:	4b1f      	ldr	r3, [pc, #124]	; (8730 <_sercom_get_default_pad+0x1b4>)
    86b4:	e002      	b.n	86bc <_sercom_get_default_pad+0x140>
    86b6:	4b1f      	ldr	r3, [pc, #124]	; (8734 <_sercom_get_default_pad+0x1b8>)
    86b8:	e000      	b.n	86bc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    86ba:	2300      	movs	r3, #0
}
    86bc:	0018      	movs	r0, r3
    86be:	46bd      	mov	sp, r7
    86c0:	b002      	add	sp, #8
    86c2:	bd80      	pop	{r7, pc}
    86c4:	42001000 	.word	0x42001000
    86c8:	42000800 	.word	0x42000800
    86cc:	42000c00 	.word	0x42000c00
    86d0:	42001800 	.word	0x42001800
    86d4:	42001c00 	.word	0x42001c00
    86d8:	42001400 	.word	0x42001400
    86dc:	00040003 	.word	0x00040003
    86e0:	00050003 	.word	0x00050003
    86e4:	00060003 	.word	0x00060003
    86e8:	00070003 	.word	0x00070003
    86ec:	00010003 	.word	0x00010003
    86f0:	001e0003 	.word	0x001e0003
    86f4:	001f0003 	.word	0x001f0003
    86f8:	00080003 	.word	0x00080003
    86fc:	00090003 	.word	0x00090003
    8700:	000a0003 	.word	0x000a0003
    8704:	000b0003 	.word	0x000b0003
    8708:	00100003 	.word	0x00100003
    870c:	00110003 	.word	0x00110003
    8710:	00120003 	.word	0x00120003
    8714:	00130003 	.word	0x00130003
    8718:	000c0003 	.word	0x000c0003
    871c:	000d0003 	.word	0x000d0003
    8720:	000e0003 	.word	0x000e0003
    8724:	000f0003 	.word	0x000f0003
    8728:	00160003 	.word	0x00160003
    872c:	00170003 	.word	0x00170003
    8730:	00180003 	.word	0x00180003
    8734:	00190003 	.word	0x00190003

00008738 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    8738:	b590      	push	{r4, r7, lr}
    873a:	b08b      	sub	sp, #44	; 0x2c
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    8740:	230c      	movs	r3, #12
    8742:	18fb      	adds	r3, r7, r3
    8744:	4a0f      	ldr	r2, [pc, #60]	; (8784 <_sercom_get_sercom_inst_index+0x4c>)
    8746:	ca13      	ldmia	r2!, {r0, r1, r4}
    8748:	c313      	stmia	r3!, {r0, r1, r4}
    874a:	ca13      	ldmia	r2!, {r0, r1, r4}
    874c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    874e:	2300      	movs	r3, #0
    8750:	627b      	str	r3, [r7, #36]	; 0x24
    8752:	e00e      	b.n	8772 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    8754:	230c      	movs	r3, #12
    8756:	18fb      	adds	r3, r7, r3
    8758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    875a:	0092      	lsls	r2, r2, #2
    875c:	58d3      	ldr	r3, [r2, r3]
    875e:	001a      	movs	r2, r3
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	429a      	cmp	r2, r3
    8764:	d102      	bne.n	876c <_sercom_get_sercom_inst_index+0x34>
			return i;
    8766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8768:	b2db      	uxtb	r3, r3
    876a:	e006      	b.n	877a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    876e:	3301      	adds	r3, #1
    8770:	627b      	str	r3, [r7, #36]	; 0x24
    8772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8774:	2b05      	cmp	r3, #5
    8776:	d9ed      	bls.n	8754 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    8778:	2300      	movs	r3, #0
}
    877a:	0018      	movs	r0, r3
    877c:	46bd      	mov	sp, r7
    877e:	b00b      	add	sp, #44	; 0x2c
    8780:	bd90      	pop	{r4, r7, pc}
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	0000dc64 	.word	0x0000dc64

00008788 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    8788:	b580      	push	{r7, lr}
    878a:	b082      	sub	sp, #8
    878c:	af00      	add	r7, sp, #0
    878e:	0002      	movs	r2, r0
    8790:	1dfb      	adds	r3, r7, #7
    8792:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    8794:	46c0      	nop			; (mov r8, r8)
    8796:	46bd      	mov	sp, r7
    8798:	b002      	add	sp, #8
    879a:	bd80      	pop	{r7, pc}

0000879c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    879c:	b580      	push	{r7, lr}
    879e:	b084      	sub	sp, #16
    87a0:	af00      	add	r7, sp, #0
    87a2:	0002      	movs	r2, r0
    87a4:	6039      	str	r1, [r7, #0]
    87a6:	1dfb      	adds	r3, r7, #7
    87a8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    87aa:	4b13      	ldr	r3, [pc, #76]	; (87f8 <_sercom_set_handler+0x5c>)
    87ac:	781b      	ldrb	r3, [r3, #0]
    87ae:	2201      	movs	r2, #1
    87b0:	4053      	eors	r3, r2
    87b2:	b2db      	uxtb	r3, r3
    87b4:	2b00      	cmp	r3, #0
    87b6:	d015      	beq.n	87e4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    87b8:	2300      	movs	r3, #0
    87ba:	60fb      	str	r3, [r7, #12]
    87bc:	e00c      	b.n	87d8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    87be:	4b0f      	ldr	r3, [pc, #60]	; (87fc <_sercom_set_handler+0x60>)
    87c0:	68fa      	ldr	r2, [r7, #12]
    87c2:	0092      	lsls	r2, r2, #2
    87c4:	490e      	ldr	r1, [pc, #56]	; (8800 <_sercom_set_handler+0x64>)
    87c6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    87c8:	4b0e      	ldr	r3, [pc, #56]	; (8804 <_sercom_set_handler+0x68>)
    87ca:	68fa      	ldr	r2, [r7, #12]
    87cc:	0092      	lsls	r2, r2, #2
    87ce:	2100      	movs	r1, #0
    87d0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    87d2:	68fb      	ldr	r3, [r7, #12]
    87d4:	3301      	adds	r3, #1
    87d6:	60fb      	str	r3, [r7, #12]
    87d8:	68fb      	ldr	r3, [r7, #12]
    87da:	2b05      	cmp	r3, #5
    87dc:	d9ef      	bls.n	87be <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    87de:	4b06      	ldr	r3, [pc, #24]	; (87f8 <_sercom_set_handler+0x5c>)
    87e0:	2201      	movs	r2, #1
    87e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    87e4:	1dfb      	adds	r3, r7, #7
    87e6:	781a      	ldrb	r2, [r3, #0]
    87e8:	4b04      	ldr	r3, [pc, #16]	; (87fc <_sercom_set_handler+0x60>)
    87ea:	0092      	lsls	r2, r2, #2
    87ec:	6839      	ldr	r1, [r7, #0]
    87ee:	50d1      	str	r1, [r2, r3]
}
    87f0:	46c0      	nop			; (mov r8, r8)
    87f2:	46bd      	mov	sp, r7
    87f4:	b004      	add	sp, #16
    87f6:	bd80      	pop	{r7, pc}
    87f8:	2000547e 	.word	0x2000547e
    87fc:	20005480 	.word	0x20005480
    8800:	00008789 	.word	0x00008789
    8804:	20005514 	.word	0x20005514

00008808 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    8808:	b590      	push	{r4, r7, lr}
    880a:	b085      	sub	sp, #20
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    8810:	2308      	movs	r3, #8
    8812:	18fb      	adds	r3, r7, r3
    8814:	4a0b      	ldr	r2, [pc, #44]	; (8844 <_sercom_get_interrupt_vector+0x3c>)
    8816:	6811      	ldr	r1, [r2, #0]
    8818:	6019      	str	r1, [r3, #0]
    881a:	8892      	ldrh	r2, [r2, #4]
    881c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    881e:	230f      	movs	r3, #15
    8820:	18fc      	adds	r4, r7, r3
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	0018      	movs	r0, r3
    8826:	4b08      	ldr	r3, [pc, #32]	; (8848 <_sercom_get_interrupt_vector+0x40>)
    8828:	4798      	blx	r3
    882a:	0003      	movs	r3, r0
    882c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    882e:	230f      	movs	r3, #15
    8830:	18fb      	adds	r3, r7, r3
    8832:	781b      	ldrb	r3, [r3, #0]
    8834:	2208      	movs	r2, #8
    8836:	18ba      	adds	r2, r7, r2
    8838:	5cd3      	ldrb	r3, [r2, r3]
    883a:	b25b      	sxtb	r3, r3
}
    883c:	0018      	movs	r0, r3
    883e:	46bd      	mov	sp, r7
    8840:	b005      	add	sp, #20
    8842:	bd90      	pop	{r4, r7, pc}
    8844:	0000dc7c 	.word	0x0000dc7c
    8848:	00008739 	.word	0x00008739

0000884c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    884c:	b580      	push	{r7, lr}
    884e:	af00      	add	r7, sp, #0
    8850:	4b03      	ldr	r3, [pc, #12]	; (8860 <SERCOM0_Handler+0x14>)
    8852:	681b      	ldr	r3, [r3, #0]
    8854:	2000      	movs	r0, #0
    8856:	4798      	blx	r3
    8858:	46c0      	nop			; (mov r8, r8)
    885a:	46bd      	mov	sp, r7
    885c:	bd80      	pop	{r7, pc}
    885e:	46c0      	nop			; (mov r8, r8)
    8860:	20005480 	.word	0x20005480

00008864 <SERCOM1_Handler>:
    8864:	b580      	push	{r7, lr}
    8866:	af00      	add	r7, sp, #0
    8868:	4b03      	ldr	r3, [pc, #12]	; (8878 <SERCOM1_Handler+0x14>)
    886a:	685b      	ldr	r3, [r3, #4]
    886c:	2001      	movs	r0, #1
    886e:	4798      	blx	r3
    8870:	46c0      	nop			; (mov r8, r8)
    8872:	46bd      	mov	sp, r7
    8874:	bd80      	pop	{r7, pc}
    8876:	46c0      	nop			; (mov r8, r8)
    8878:	20005480 	.word	0x20005480

0000887c <SERCOM2_Handler>:
    887c:	b580      	push	{r7, lr}
    887e:	af00      	add	r7, sp, #0
    8880:	4b03      	ldr	r3, [pc, #12]	; (8890 <SERCOM2_Handler+0x14>)
    8882:	689b      	ldr	r3, [r3, #8]
    8884:	2002      	movs	r0, #2
    8886:	4798      	blx	r3
    8888:	46c0      	nop			; (mov r8, r8)
    888a:	46bd      	mov	sp, r7
    888c:	bd80      	pop	{r7, pc}
    888e:	46c0      	nop			; (mov r8, r8)
    8890:	20005480 	.word	0x20005480

00008894 <SERCOM3_Handler>:
    8894:	b580      	push	{r7, lr}
    8896:	af00      	add	r7, sp, #0
    8898:	4b03      	ldr	r3, [pc, #12]	; (88a8 <SERCOM3_Handler+0x14>)
    889a:	68db      	ldr	r3, [r3, #12]
    889c:	2003      	movs	r0, #3
    889e:	4798      	blx	r3
    88a0:	46c0      	nop			; (mov r8, r8)
    88a2:	46bd      	mov	sp, r7
    88a4:	bd80      	pop	{r7, pc}
    88a6:	46c0      	nop			; (mov r8, r8)
    88a8:	20005480 	.word	0x20005480

000088ac <SERCOM4_Handler>:
    88ac:	b580      	push	{r7, lr}
    88ae:	af00      	add	r7, sp, #0
    88b0:	4b03      	ldr	r3, [pc, #12]	; (88c0 <SERCOM4_Handler+0x14>)
    88b2:	691b      	ldr	r3, [r3, #16]
    88b4:	2004      	movs	r0, #4
    88b6:	4798      	blx	r3
    88b8:	46c0      	nop			; (mov r8, r8)
    88ba:	46bd      	mov	sp, r7
    88bc:	bd80      	pop	{r7, pc}
    88be:	46c0      	nop			; (mov r8, r8)
    88c0:	20005480 	.word	0x20005480

000088c4 <SERCOM5_Handler>:
    88c4:	b580      	push	{r7, lr}
    88c6:	af00      	add	r7, sp, #0
    88c8:	4b03      	ldr	r3, [pc, #12]	; (88d8 <SERCOM5_Handler+0x14>)
    88ca:	695b      	ldr	r3, [r3, #20]
    88cc:	2005      	movs	r0, #5
    88ce:	4798      	blx	r3
    88d0:	46c0      	nop			; (mov r8, r8)
    88d2:	46bd      	mov	sp, r7
    88d4:	bd80      	pop	{r7, pc}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	20005480 	.word	0x20005480

000088dc <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
    88dc:	b580      	push	{r7, lr}
    88de:	af00      	add	r7, sp, #0
}
    88e0:	46c0      	nop			; (mov r8, r8)
    88e2:	46bd      	mov	sp, r7
    88e4:	bd80      	pop	{r7, pc}

000088e6 <system_pinmux_get_config_defaults>:
{
    88e6:	b580      	push	{r7, lr}
    88e8:	b082      	sub	sp, #8
    88ea:	af00      	add	r7, sp, #0
    88ec:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    88ee:	687b      	ldr	r3, [r7, #4]
    88f0:	2280      	movs	r2, #128	; 0x80
    88f2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    88f4:	687b      	ldr	r3, [r7, #4]
    88f6:	2200      	movs	r2, #0
    88f8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	2201      	movs	r2, #1
    88fe:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	2200      	movs	r2, #0
    8904:	70da      	strb	r2, [r3, #3]
}
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	46bd      	mov	sp, r7
    890a:	b002      	add	sp, #8
    890c:	bd80      	pop	{r7, pc}
	...

00008910 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8910:	b580      	push	{r7, lr}
    8912:	b084      	sub	sp, #16
    8914:	af00      	add	r7, sp, #0
    8916:	0002      	movs	r2, r0
    8918:	6039      	str	r1, [r7, #0]
    891a:	1dfb      	adds	r3, r7, #7
    891c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    891e:	230c      	movs	r3, #12
    8920:	18fb      	adds	r3, r7, r3
    8922:	0018      	movs	r0, r3
    8924:	4b10      	ldr	r3, [pc, #64]	; (8968 <port_pin_set_config+0x58>)
    8926:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    8928:	230c      	movs	r3, #12
    892a:	18fb      	adds	r3, r7, r3
    892c:	2280      	movs	r2, #128	; 0x80
    892e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8930:	683b      	ldr	r3, [r7, #0]
    8932:	781a      	ldrb	r2, [r3, #0]
    8934:	230c      	movs	r3, #12
    8936:	18fb      	adds	r3, r7, r3
    8938:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    893a:	683b      	ldr	r3, [r7, #0]
    893c:	785a      	ldrb	r2, [r3, #1]
    893e:	230c      	movs	r3, #12
    8940:	18fb      	adds	r3, r7, r3
    8942:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8944:	683b      	ldr	r3, [r7, #0]
    8946:	789a      	ldrb	r2, [r3, #2]
    8948:	230c      	movs	r3, #12
    894a:	18fb      	adds	r3, r7, r3
    894c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    894e:	230c      	movs	r3, #12
    8950:	18fa      	adds	r2, r7, r3
    8952:	1dfb      	adds	r3, r7, #7
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	0011      	movs	r1, r2
    8958:	0018      	movs	r0, r3
    895a:	4b04      	ldr	r3, [pc, #16]	; (896c <port_pin_set_config+0x5c>)
    895c:	4798      	blx	r3
}
    895e:	46c0      	nop			; (mov r8, r8)
    8960:	46bd      	mov	sp, r7
    8962:	b004      	add	sp, #16
    8964:	bd80      	pop	{r7, pc}
    8966:	46c0      	nop			; (mov r8, r8)
    8968:	000088e7 	.word	0x000088e7
    896c:	00009edd 	.word	0x00009edd

00008970 <arch_ioport_pin_to_port_id>:
{
    8970:	b580      	push	{r7, lr}
    8972:	b082      	sub	sp, #8
    8974:	af00      	add	r7, sp, #0
    8976:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	095b      	lsrs	r3, r3, #5
}
    897c:	0018      	movs	r0, r3
    897e:	46bd      	mov	sp, r7
    8980:	b002      	add	sp, #8
    8982:	bd80      	pop	{r7, pc}

00008984 <arch_ioport_port_to_base>:
{
    8984:	b580      	push	{r7, lr}
    8986:	b082      	sub	sp, #8
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	01db      	lsls	r3, r3, #7
    8990:	4a03      	ldr	r2, [pc, #12]	; (89a0 <arch_ioport_port_to_base+0x1c>)
    8992:	4694      	mov	ip, r2
    8994:	4463      	add	r3, ip
}
    8996:	0018      	movs	r0, r3
    8998:	46bd      	mov	sp, r7
    899a:	b002      	add	sp, #8
    899c:	bd80      	pop	{r7, pc}
    899e:	46c0      	nop			; (mov r8, r8)
    89a0:	41004400 	.word	0x41004400

000089a4 <arch_ioport_pin_to_base>:
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b082      	sub	sp, #8
    89a8:	af00      	add	r7, sp, #0
    89aa:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	0018      	movs	r0, r3
    89b0:	4b05      	ldr	r3, [pc, #20]	; (89c8 <arch_ioport_pin_to_base+0x24>)
    89b2:	4798      	blx	r3
    89b4:	0003      	movs	r3, r0
    89b6:	0018      	movs	r0, r3
    89b8:	4b04      	ldr	r3, [pc, #16]	; (89cc <arch_ioport_pin_to_base+0x28>)
    89ba:	4798      	blx	r3
    89bc:	0003      	movs	r3, r0
}
    89be:	0018      	movs	r0, r3
    89c0:	46bd      	mov	sp, r7
    89c2:	b002      	add	sp, #8
    89c4:	bd80      	pop	{r7, pc}
    89c6:	46c0      	nop			; (mov r8, r8)
    89c8:	00008971 	.word	0x00008971
    89cc:	00008985 	.word	0x00008985

000089d0 <arch_ioport_pin_to_mask>:
{
    89d0:	b580      	push	{r7, lr}
    89d2:	b082      	sub	sp, #8
    89d4:	af00      	add	r7, sp, #0
    89d6:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	221f      	movs	r2, #31
    89dc:	4013      	ands	r3, r2
    89de:	2201      	movs	r2, #1
    89e0:	409a      	lsls	r2, r3
    89e2:	0013      	movs	r3, r2
}
    89e4:	0018      	movs	r0, r3
    89e6:	46bd      	mov	sp, r7
    89e8:	b002      	add	sp, #8
    89ea:	bd80      	pop	{r7, pc}

000089ec <arch_ioport_init>:
{
    89ec:	b580      	push	{r7, lr}
    89ee:	af00      	add	r7, sp, #0
}
    89f0:	46c0      	nop			; (mov r8, r8)
    89f2:	46bd      	mov	sp, r7
    89f4:	bd80      	pop	{r7, pc}
	...

000089f8 <arch_ioport_disable_port>:
{
    89f8:	b580      	push	{r7, lr}
    89fa:	b084      	sub	sp, #16
    89fc:	af00      	add	r7, sp, #0
    89fe:	6078      	str	r0, [r7, #4]
    8a00:	6039      	str	r1, [r7, #0]
	volatile PortGroup *base = arch_ioport_port_to_base(port);
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	0018      	movs	r0, r3
    8a06:	4b15      	ldr	r3, [pc, #84]	; (8a5c <arch_ioport_disable_port+0x64>)
    8a08:	4798      	blx	r3
    8a0a:	0003      	movs	r3, r0
    8a0c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < 32; i++) {
    8a0e:	2300      	movs	r3, #0
    8a10:	60fb      	str	r3, [r7, #12]
    8a12:	e01b      	b.n	8a4c <arch_ioport_disable_port+0x54>
		if (mask & (1 << i)) {
    8a14:	2201      	movs	r2, #1
    8a16:	68fb      	ldr	r3, [r7, #12]
    8a18:	409a      	lsls	r2, r3
    8a1a:	0013      	movs	r3, r2
    8a1c:	001a      	movs	r2, r3
    8a1e:	683b      	ldr	r3, [r7, #0]
    8a20:	4013      	ands	r3, r2
    8a22:	d010      	beq.n	8a46 <arch_ioport_disable_port+0x4e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    8a24:	68ba      	ldr	r2, [r7, #8]
    8a26:	2140      	movs	r1, #64	; 0x40
    8a28:	68fb      	ldr	r3, [r7, #12]
    8a2a:	18d3      	adds	r3, r2, r3
    8a2c:	185b      	adds	r3, r3, r1
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	b2db      	uxtb	r3, r3
    8a32:	2201      	movs	r2, #1
    8a34:	4313      	orrs	r3, r2
    8a36:	b2d8      	uxtb	r0, r3
    8a38:	68ba      	ldr	r2, [r7, #8]
    8a3a:	2140      	movs	r1, #64	; 0x40
    8a3c:	68fb      	ldr	r3, [r7, #12]
    8a3e:	18d3      	adds	r3, r2, r3
    8a40:	185b      	adds	r3, r3, r1
    8a42:	1c02      	adds	r2, r0, #0
    8a44:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 32; i++) {
    8a46:	68fb      	ldr	r3, [r7, #12]
    8a48:	3301      	adds	r3, #1
    8a4a:	60fb      	str	r3, [r7, #12]
    8a4c:	68fb      	ldr	r3, [r7, #12]
    8a4e:	2b1f      	cmp	r3, #31
    8a50:	d9e0      	bls.n	8a14 <arch_ioport_disable_port+0x1c>
}
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	46bd      	mov	sp, r7
    8a56:	b004      	add	sp, #16
    8a58:	bd80      	pop	{r7, pc}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	00008985 	.word	0x00008985

00008a60 <arch_ioport_disable_pin>:
{
    8a60:	b590      	push	{r4, r7, lr}
    8a62:	b083      	sub	sp, #12
    8a64:	af00      	add	r7, sp, #0
    8a66:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	0018      	movs	r0, r3
    8a6c:	4b07      	ldr	r3, [pc, #28]	; (8a8c <arch_ioport_disable_pin+0x2c>)
    8a6e:	4798      	blx	r3
    8a70:	0004      	movs	r4, r0
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	0018      	movs	r0, r3
    8a76:	4b06      	ldr	r3, [pc, #24]	; (8a90 <arch_ioport_disable_pin+0x30>)
    8a78:	4798      	blx	r3
    8a7a:	0003      	movs	r3, r0
    8a7c:	0019      	movs	r1, r3
    8a7e:	0020      	movs	r0, r4
    8a80:	4b04      	ldr	r3, [pc, #16]	; (8a94 <arch_ioport_disable_pin+0x34>)
    8a82:	4798      	blx	r3
}
    8a84:	46c0      	nop			; (mov r8, r8)
    8a86:	46bd      	mov	sp, r7
    8a88:	b003      	add	sp, #12
    8a8a:	bd90      	pop	{r4, r7, pc}
    8a8c:	00008971 	.word	0x00008971
    8a90:	000089d1 	.word	0x000089d1
    8a94:	000089f9 	.word	0x000089f9

00008a98 <arch_ioport_set_port_mode>:
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b08a      	sub	sp, #40	; 0x28
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	60f8      	str	r0, [r7, #12]
    8aa0:	60b9      	str	r1, [r7, #8]
    8aa2:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
    8aa4:	68fb      	ldr	r3, [r7, #12]
    8aa6:	0018      	movs	r0, r3
    8aa8:	4b2b      	ldr	r3, [pc, #172]	; (8b58 <arch_ioport_set_port_mode+0xc0>)
    8aaa:	4798      	blx	r3
    8aac:	0003      	movs	r3, r0
    8aae:	623b      	str	r3, [r7, #32]
	uint32_t config_mask = 0;
    8ab0:	2300      	movs	r3, #0
    8ab2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
    8ab4:	2300      	movs	r3, #0
    8ab6:	61fb      	str	r3, [r7, #28]
	config_mask |= PORT_WRCONFIG_INEN;
    8ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8aba:	2280      	movs	r2, #128	; 0x80
    8abc:	0292      	lsls	r2, r2, #10
    8abe:	4313      	orrs	r3, r2
    8ac0:	627b      	str	r3, [r7, #36]	; 0x24
	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
    8ac2:	687b      	ldr	r3, [r7, #4]
    8ac4:	2220      	movs	r2, #32
    8ac6:	4013      	ands	r3, r2
    8ac8:	d103      	bne.n	8ad2 <arch_ioport_set_port_mode+0x3a>
    8aca:	687b      	ldr	r3, [r7, #4]
    8acc:	2210      	movs	r2, #16
    8ace:	4013      	ands	r3, r2
    8ad0:	d004      	beq.n	8adc <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
    8ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ad4:	2280      	movs	r2, #128	; 0x80
    8ad6:	02d2      	lsls	r2, r2, #11
    8ad8:	4313      	orrs	r3, r2
    8ada:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	2280      	movs	r2, #128	; 0x80
    8ae0:	4013      	ands	r3, r2
    8ae2:	d004      	beq.n	8aee <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
    8ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ae6:	2280      	movs	r2, #128	; 0x80
    8ae8:	03d2      	lsls	r2, r2, #15
    8aea:	4313      	orrs	r3, r2
    8aec:	627b      	str	r3, [r7, #36]	; 0x24
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	061a      	lsls	r2, r3, #24
    8af2:	23f0      	movs	r3, #240	; 0xf0
    8af4:	051b      	lsls	r3, r3, #20
    8af6:	4013      	ands	r3, r2
    8af8:	61fb      	str	r3, [r7, #28]
	uint32_t lower_pin_mask = (mask & 0xFFFF);
    8afa:	68bb      	ldr	r3, [r7, #8]
    8afc:	041b      	lsls	r3, r3, #16
    8afe:	0c1b      	lsrs	r3, r3, #16
    8b00:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
    8b02:	68bb      	ldr	r3, [r7, #8]
    8b04:	0c1b      	lsrs	r3, r3, #16
    8b06:	617b      	str	r3, [r7, #20]
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b08:	69ba      	ldr	r2, [r7, #24]
    8b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b0c:	431a      	orrs	r2, r3
			config_mask | config_mux |
    8b0e:	69fb      	ldr	r3, [r7, #28]
    8b10:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8b12:	22a0      	movs	r2, #160	; 0xa0
    8b14:	05d2      	lsls	r2, r2, #23
    8b16:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    8b18:	6a3b      	ldr	r3, [r7, #32]
    8b1a:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b1c:	697a      	ldr	r2, [r7, #20]
    8b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b20:	431a      	orrs	r2, r3
			config_mask | config_mux |
    8b22:	69fb      	ldr	r3, [r7, #28]
    8b24:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8b26:	22d0      	movs	r2, #208	; 0xd0
    8b28:	0612      	lsls	r2, r2, #24
    8b2a:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
    8b2c:	6a3b      	ldr	r3, [r7, #32]
    8b2e:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_PULLDOWN) {
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	2220      	movs	r2, #32
    8b34:	4013      	ands	r3, r2
    8b36:	d003      	beq.n	8b40 <arch_ioport_set_port_mode+0xa8>
		base->OUTCLR.reg = mask;
    8b38:	6a3b      	ldr	r3, [r7, #32]
    8b3a:	68ba      	ldr	r2, [r7, #8]
    8b3c:	615a      	str	r2, [r3, #20]
}
    8b3e:	e006      	b.n	8b4e <arch_ioport_set_port_mode+0xb6>
	else if (mode & IOPORT_MODE_PULLUP) {
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	2210      	movs	r2, #16
    8b44:	4013      	ands	r3, r2
    8b46:	d002      	beq.n	8b4e <arch_ioport_set_port_mode+0xb6>
		base->OUTSET.reg = mask;
    8b48:	6a3b      	ldr	r3, [r7, #32]
    8b4a:	68ba      	ldr	r2, [r7, #8]
    8b4c:	619a      	str	r2, [r3, #24]
}
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	46bd      	mov	sp, r7
    8b52:	b00a      	add	sp, #40	; 0x28
    8b54:	bd80      	pop	{r7, pc}
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	00008985 	.word	0x00008985

00008b5c <arch_ioport_set_pin_mode>:
{
    8b5c:	b590      	push	{r4, r7, lr}
    8b5e:	b083      	sub	sp, #12
    8b60:	af00      	add	r7, sp, #0
    8b62:	6078      	str	r0, [r7, #4]
    8b64:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
    8b66:	687b      	ldr	r3, [r7, #4]
    8b68:	0018      	movs	r0, r3
    8b6a:	4b08      	ldr	r3, [pc, #32]	; (8b8c <arch_ioport_set_pin_mode+0x30>)
    8b6c:	4798      	blx	r3
    8b6e:	0004      	movs	r4, r0
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	0018      	movs	r0, r3
    8b74:	4b06      	ldr	r3, [pc, #24]	; (8b90 <arch_ioport_set_pin_mode+0x34>)
    8b76:	4798      	blx	r3
    8b78:	0001      	movs	r1, r0
    8b7a:	683b      	ldr	r3, [r7, #0]
    8b7c:	001a      	movs	r2, r3
    8b7e:	0020      	movs	r0, r4
    8b80:	4b04      	ldr	r3, [pc, #16]	; (8b94 <arch_ioport_set_pin_mode+0x38>)
    8b82:	4798      	blx	r3
}
    8b84:	46c0      	nop			; (mov r8, r8)
    8b86:	46bd      	mov	sp, r7
    8b88:	b003      	add	sp, #12
    8b8a:	bd90      	pop	{r4, r7, pc}
    8b8c:	00008971 	.word	0x00008971
    8b90:	000089d1 	.word	0x000089d1
    8b94:	00008a99 	.word	0x00008a99

00008b98 <arch_ioport_set_pin_dir>:
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b084      	sub	sp, #16
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
    8ba0:	000a      	movs	r2, r1
    8ba2:	1cfb      	adds	r3, r7, #3
    8ba4:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    8ba6:	687b      	ldr	r3, [r7, #4]
    8ba8:	0018      	movs	r0, r3
    8baa:	4b18      	ldr	r3, [pc, #96]	; (8c0c <arch_ioport_set_pin_dir+0x74>)
    8bac:	4798      	blx	r3
    8bae:	0003      	movs	r3, r0
    8bb0:	60fb      	str	r3, [r7, #12]
	if (dir == IOPORT_DIR_OUTPUT) {
    8bb2:	1cfb      	adds	r3, r7, #3
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	2b01      	cmp	r3, #1
    8bb8:	d107      	bne.n	8bca <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    8bba:	687b      	ldr	r3, [r7, #4]
    8bbc:	0018      	movs	r0, r3
    8bbe:	4b14      	ldr	r3, [pc, #80]	; (8c10 <arch_ioport_set_pin_dir+0x78>)
    8bc0:	4798      	blx	r3
    8bc2:	0002      	movs	r2, r0
    8bc4:	68fb      	ldr	r3, [r7, #12]
    8bc6:	609a      	str	r2, [r3, #8]
    8bc8:	e00a      	b.n	8be0 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    8bca:	1cfb      	adds	r3, r7, #3
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d106      	bne.n	8be0 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	0018      	movs	r0, r3
    8bd6:	4b0e      	ldr	r3, [pc, #56]	; (8c10 <arch_ioport_set_pin_dir+0x78>)
    8bd8:	4798      	blx	r3
    8bda:	0002      	movs	r2, r0
    8bdc:	68fb      	ldr	r3, [r7, #12]
    8bde:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    8be0:	68fa      	ldr	r2, [r7, #12]
    8be2:	2140      	movs	r1, #64	; 0x40
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	18d3      	adds	r3, r2, r3
    8be8:	185b      	adds	r3, r3, r1
    8bea:	781b      	ldrb	r3, [r3, #0]
    8bec:	b2db      	uxtb	r3, r3
    8bee:	2202      	movs	r2, #2
    8bf0:	4313      	orrs	r3, r2
    8bf2:	b2d8      	uxtb	r0, r3
    8bf4:	68fa      	ldr	r2, [r7, #12]
    8bf6:	2140      	movs	r1, #64	; 0x40
    8bf8:	687b      	ldr	r3, [r7, #4]
    8bfa:	18d3      	adds	r3, r2, r3
    8bfc:	185b      	adds	r3, r3, r1
    8bfe:	1c02      	adds	r2, r0, #0
    8c00:	701a      	strb	r2, [r3, #0]
}
    8c02:	46c0      	nop			; (mov r8, r8)
    8c04:	46bd      	mov	sp, r7
    8c06:	b004      	add	sp, #16
    8c08:	bd80      	pop	{r7, pc}
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	000089a5 	.word	0x000089a5
    8c10:	000089d1 	.word	0x000089d1

00008c14 <arch_ioport_set_pin_level>:
{
    8c14:	b590      	push	{r4, r7, lr}
    8c16:	b083      	sub	sp, #12
    8c18:	af00      	add	r7, sp, #0
    8c1a:	6078      	str	r0, [r7, #4]
    8c1c:	000a      	movs	r2, r1
    8c1e:	1cfb      	adds	r3, r7, #3
    8c20:	701a      	strb	r2, [r3, #0]
	if (level) {
    8c22:	1cfb      	adds	r3, r7, #3
    8c24:	781b      	ldrb	r3, [r3, #0]
    8c26:	2b00      	cmp	r3, #0
    8c28:	d00b      	beq.n	8c42 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    8c2a:	687b      	ldr	r3, [r7, #4]
    8c2c:	0018      	movs	r0, r3
    8c2e:	4b0c      	ldr	r3, [pc, #48]	; (8c60 <arch_ioport_set_pin_level+0x4c>)
    8c30:	4798      	blx	r3
    8c32:	0004      	movs	r4, r0
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	0018      	movs	r0, r3
    8c38:	4b0a      	ldr	r3, [pc, #40]	; (8c64 <arch_ioport_set_pin_level+0x50>)
    8c3a:	4798      	blx	r3
    8c3c:	0003      	movs	r3, r0
    8c3e:	61a3      	str	r3, [r4, #24]
}
    8c40:	e00a      	b.n	8c58 <arch_ioport_set_pin_level+0x44>
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	0018      	movs	r0, r3
    8c46:	4b06      	ldr	r3, [pc, #24]	; (8c60 <arch_ioport_set_pin_level+0x4c>)
    8c48:	4798      	blx	r3
    8c4a:	0004      	movs	r4, r0
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	0018      	movs	r0, r3
    8c50:	4b04      	ldr	r3, [pc, #16]	; (8c64 <arch_ioport_set_pin_level+0x50>)
    8c52:	4798      	blx	r3
    8c54:	0003      	movs	r3, r0
    8c56:	6163      	str	r3, [r4, #20]
}
    8c58:	46c0      	nop			; (mov r8, r8)
    8c5a:	46bd      	mov	sp, r7
    8c5c:	b003      	add	sp, #12
    8c5e:	bd90      	pop	{r4, r7, pc}
    8c60:	000089a5 	.word	0x000089a5
    8c64:	000089d1 	.word	0x000089d1

00008c68 <ioport_init>:
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	af00      	add	r7, sp, #0
	arch_ioport_init();
    8c6c:	4b02      	ldr	r3, [pc, #8]	; (8c78 <ioport_init+0x10>)
    8c6e:	4798      	blx	r3
}
    8c70:	46c0      	nop			; (mov r8, r8)
    8c72:	46bd      	mov	sp, r7
    8c74:	bd80      	pop	{r7, pc}
    8c76:	46c0      	nop			; (mov r8, r8)
    8c78:	000089ed 	.word	0x000089ed

00008c7c <ioport_disable_pin>:
{
    8c7c:	b580      	push	{r7, lr}
    8c7e:	b082      	sub	sp, #8
    8c80:	af00      	add	r7, sp, #0
    8c82:	6078      	str	r0, [r7, #4]
	arch_ioport_disable_pin(pin);
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	0018      	movs	r0, r3
    8c88:	4b02      	ldr	r3, [pc, #8]	; (8c94 <ioport_disable_pin+0x18>)
    8c8a:	4798      	blx	r3
}
    8c8c:	46c0      	nop			; (mov r8, r8)
    8c8e:	46bd      	mov	sp, r7
    8c90:	b002      	add	sp, #8
    8c92:	bd80      	pop	{r7, pc}
    8c94:	00008a61 	.word	0x00008a61

00008c98 <ioport_set_pin_mode>:
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	b082      	sub	sp, #8
    8c9c:	af00      	add	r7, sp, #0
    8c9e:	6078      	str	r0, [r7, #4]
    8ca0:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
    8ca2:	683a      	ldr	r2, [r7, #0]
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	0011      	movs	r1, r2
    8ca8:	0018      	movs	r0, r3
    8caa:	4b03      	ldr	r3, [pc, #12]	; (8cb8 <ioport_set_pin_mode+0x20>)
    8cac:	4798      	blx	r3
}
    8cae:	46c0      	nop			; (mov r8, r8)
    8cb0:	46bd      	mov	sp, r7
    8cb2:	b002      	add	sp, #8
    8cb4:	bd80      	pop	{r7, pc}
    8cb6:	46c0      	nop			; (mov r8, r8)
    8cb8:	00008b5d 	.word	0x00008b5d

00008cbc <ioport_set_pin_dir>:
{
    8cbc:	b580      	push	{r7, lr}
    8cbe:	b082      	sub	sp, #8
    8cc0:	af00      	add	r7, sp, #0
    8cc2:	6078      	str	r0, [r7, #4]
    8cc4:	000a      	movs	r2, r1
    8cc6:	1cfb      	adds	r3, r7, #3
    8cc8:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    8cca:	1cfb      	adds	r3, r7, #3
    8ccc:	781a      	ldrb	r2, [r3, #0]
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	0011      	movs	r1, r2
    8cd2:	0018      	movs	r0, r3
    8cd4:	4b02      	ldr	r3, [pc, #8]	; (8ce0 <ioport_set_pin_dir+0x24>)
    8cd6:	4798      	blx	r3
}
    8cd8:	46c0      	nop			; (mov r8, r8)
    8cda:	46bd      	mov	sp, r7
    8cdc:	b002      	add	sp, #8
    8cde:	bd80      	pop	{r7, pc}
    8ce0:	00008b99 	.word	0x00008b99

00008ce4 <ioport_set_pin_level>:
{
    8ce4:	b580      	push	{r7, lr}
    8ce6:	b082      	sub	sp, #8
    8ce8:	af00      	add	r7, sp, #0
    8cea:	6078      	str	r0, [r7, #4]
    8cec:	000a      	movs	r2, r1
    8cee:	1cfb      	adds	r3, r7, #3
    8cf0:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    8cf2:	1cfb      	adds	r3, r7, #3
    8cf4:	781a      	ldrb	r2, [r3, #0]
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	0011      	movs	r1, r2
    8cfa:	0018      	movs	r0, r3
    8cfc:	4b02      	ldr	r3, [pc, #8]	; (8d08 <ioport_set_pin_level+0x24>)
    8cfe:	4798      	blx	r3
}
    8d00:	46c0      	nop			; (mov r8, r8)
    8d02:	46bd      	mov	sp, r7
    8d04:	b002      	add	sp, #8
    8d06:	bd80      	pop	{r7, pc}
    8d08:	00008c15 	.word	0x00008c15

00008d0c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8d0c:	b580      	push	{r7, lr}
    8d0e:	af00      	add	r7, sp, #0
	ioport_init();
    8d10:	4b56      	ldr	r3, [pc, #344]	; (8e6c <system_board_init+0x160>)
    8d12:	4798      	blx	r3
	
	// Set up motor
	ioport_set_pin_dir(MOTOR_ENABLE_GPIO, IOPORT_DIR_OUTPUT);
    8d14:	2101      	movs	r1, #1
    8d16:	2000      	movs	r0, #0
    8d18:	4b55      	ldr	r3, [pc, #340]	; (8e70 <system_board_init+0x164>)
    8d1a:	4798      	blx	r3
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
    8d1c:	2100      	movs	r1, #0
    8d1e:	2000      	movs	r0, #0
    8d20:	4b54      	ldr	r3, [pc, #336]	; (8e74 <system_board_init+0x168>)
    8d22:	4798      	blx	r3
	ioport_set_pin_dir(MOTOR_READY_GPIO, IOPORT_DIR_INPUT);
    8d24:	2100      	movs	r1, #0
    8d26:	2001      	movs	r0, #1
    8d28:	4b51      	ldr	r3, [pc, #324]	; (8e70 <system_board_init+0x164>)
    8d2a:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_READY_GPIO, IOPORT_MODE_PULLDOWN);
    8d2c:	2120      	movs	r1, #32
    8d2e:	2001      	movs	r0, #1
    8d30:	4b51      	ldr	r3, [pc, #324]	; (8e78 <system_board_init+0x16c>)
    8d32:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_SPEED_GPIO, MOTOR_SPEED_GPIO_FLAGS);
    8d34:	2101      	movs	r1, #1
    8d36:	2002      	movs	r0, #2
    8d38:	4b4f      	ldr	r3, [pc, #316]	; (8e78 <system_board_init+0x16c>)
    8d3a:	4798      	blx	r3
	ioport_disable_pin(MOTOR_SPEED_GPIO);
    8d3c:	2002      	movs	r0, #2
    8d3e:	4b4f      	ldr	r3, [pc, #316]	; (8e7c <system_board_init+0x170>)
    8d40:	4798      	blx	r3
	ioport_set_pin_mode(MOTOR_NTC_GPIO, MOTOR_NTC_GPIO_FLAGS);
    8d42:	2101      	movs	r1, #1
    8d44:	2028      	movs	r0, #40	; 0x28
    8d46:	4b4c      	ldr	r3, [pc, #304]	; (8e78 <system_board_init+0x16c>)
    8d48:	4798      	blx	r3
	ioport_disable_pin(MOTOR_NTC_GPIO);
    8d4a:	2028      	movs	r0, #40	; 0x28
    8d4c:	4b4b      	ldr	r3, [pc, #300]	; (8e7c <system_board_init+0x170>)
    8d4e:	4798      	blx	r3
	
	// Control inputs
	ioport_set_pin_mode(INPUT_POTENTIOMETER_GPIO, INPUT_POTENTIOMETER_GPIO_FLAGS);
    8d50:	2101      	movs	r1, #1
    8d52:	2029      	movs	r0, #41	; 0x29
    8d54:	4b48      	ldr	r3, [pc, #288]	; (8e78 <system_board_init+0x16c>)
    8d56:	4798      	blx	r3
	ioport_disable_pin(INPUT_POTENTIOMETER_GPIO);
    8d58:	2029      	movs	r0, #41	; 0x29
    8d5a:	4b48      	ldr	r3, [pc, #288]	; (8e7c <system_board_init+0x170>)
    8d5c:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_PUSHBUTTON_GPIO, IOPORT_DIR_INPUT);
    8d5e:	2100      	movs	r1, #0
    8d60:	200c      	movs	r0, #12
    8d62:	4b43      	ldr	r3, [pc, #268]	; (8e70 <system_board_init+0x164>)
    8d64:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_PUSHBUTTON_GPIO, IOPORT_MODE_PULLDOWN);
    8d66:	2120      	movs	r1, #32
    8d68:	200c      	movs	r0, #12
    8d6a:	4b43      	ldr	r3, [pc, #268]	; (8e78 <system_board_init+0x16c>)
    8d6c:	4798      	blx	r3
	ioport_set_pin_dir(INPUT_ENABLE_GPIO, IOPORT_DIR_INPUT);
    8d6e:	2100      	movs	r1, #0
    8d70:	202b      	movs	r0, #43	; 0x2b
    8d72:	4b3f      	ldr	r3, [pc, #252]	; (8e70 <system_board_init+0x164>)
    8d74:	4798      	blx	r3
	ioport_set_pin_mode(INPUT_ENABLE_GPIO, IOPORT_MODE_PULLDOWN);
    8d76:	2120      	movs	r1, #32
    8d78:	202b      	movs	r0, #43	; 0x2b
    8d7a:	4b3f      	ldr	r3, [pc, #252]	; (8e78 <system_board_init+0x16c>)
    8d7c:	4798      	blx	r3
	
	// Pressure sensors
	ioport_set_pin_mode(PRESSURE_SENSOR_0_GPIO, PRESSURE_SENSOR_0_GPIO_FLAGS);
    8d7e:	2101      	movs	r1, #1
    8d80:	2004      	movs	r0, #4
    8d82:	4b3d      	ldr	r3, [pc, #244]	; (8e78 <system_board_init+0x16c>)
    8d84:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_0_GPIO);
    8d86:	2004      	movs	r0, #4
    8d88:	4b3c      	ldr	r3, [pc, #240]	; (8e7c <system_board_init+0x170>)
    8d8a:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_1_GPIO, PRESSURE_SENSOR_1_GPIO_FLAGS);
    8d8c:	2101      	movs	r1, #1
    8d8e:	2005      	movs	r0, #5
    8d90:	4b39      	ldr	r3, [pc, #228]	; (8e78 <system_board_init+0x16c>)
    8d92:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_1_GPIO);
    8d94:	2005      	movs	r0, #5
    8d96:	4b39      	ldr	r3, [pc, #228]	; (8e7c <system_board_init+0x170>)
    8d98:	4798      	blx	r3
	ioport_set_pin_mode(PRESSURE_SENSOR_2_GPIO, PRESSURE_SENSOR_2_GPIO_FLAGS);
    8d9a:	2101      	movs	r1, #1
    8d9c:	2006      	movs	r0, #6
    8d9e:	4b36      	ldr	r3, [pc, #216]	; (8e78 <system_board_init+0x16c>)
    8da0:	4798      	blx	r3
	ioport_disable_pin(PRESSURE_SENSOR_2_GPIO);
    8da2:	2006      	movs	r0, #6
    8da4:	4b35      	ldr	r3, [pc, #212]	; (8e7c <system_board_init+0x170>)
    8da6:	4798      	blx	r3
	
	// Flow meter
	ioport_set_pin_mode(FLOW_SENSOR_SDA_GPIO, FLOW_SENSOR_SDA_GPIO_FLAGS);
    8da8:	2102      	movs	r1, #2
    8daa:	2016      	movs	r0, #22
    8dac:	4b32      	ldr	r3, [pc, #200]	; (8e78 <system_board_init+0x16c>)
    8dae:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SDA_GPIO);
    8db0:	2016      	movs	r0, #22
    8db2:	4b32      	ldr	r3, [pc, #200]	; (8e7c <system_board_init+0x170>)
    8db4:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_SCL_GPIO, FLOW_SENSOR_SCL_GPIO_FLAGS);
    8db6:	2102      	movs	r1, #2
    8db8:	2017      	movs	r0, #23
    8dba:	4b2f      	ldr	r3, [pc, #188]	; (8e78 <system_board_init+0x16c>)
    8dbc:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_SCL_GPIO);
    8dbe:	2017      	movs	r0, #23
    8dc0:	4b2e      	ldr	r3, [pc, #184]	; (8e7c <system_board_init+0x170>)
    8dc2:	4798      	blx	r3
	ioport_set_pin_mode(FLOW_SENSOR_ANALOG_GPIO, FLOW_SENSOR_ANALOG_GPIO_FLAGS);
    8dc4:	2101      	movs	r1, #1
    8dc6:	2022      	movs	r0, #34	; 0x22
    8dc8:	4b2b      	ldr	r3, [pc, #172]	; (8e78 <system_board_init+0x16c>)
    8dca:	4798      	blx	r3
	ioport_disable_pin(FLOW_SENSOR_ANALOG_GPIO);
    8dcc:	2022      	movs	r0, #34	; 0x22
    8dce:	4b2b      	ldr	r3, [pc, #172]	; (8e7c <system_board_init+0x170>)
    8dd0:	4798      	blx	r3
	
	// Screen
	ioport_set_pin_mode(LCD_SDA_GPIO, LCD_SDA_GPIO_FLAGS);
    8dd2:	2102      	movs	r1, #2
    8dd4:	2010      	movs	r0, #16
    8dd6:	4b28      	ldr	r3, [pc, #160]	; (8e78 <system_board_init+0x16c>)
    8dd8:	4798      	blx	r3
	ioport_disable_pin(LCD_SDA_GPIO);
    8dda:	2010      	movs	r0, #16
    8ddc:	4b27      	ldr	r3, [pc, #156]	; (8e7c <system_board_init+0x170>)
    8dde:	4798      	blx	r3
	ioport_set_pin_mode(LCD_SCL_GPIO, LCD_SCL_GPIO_FLAGS);
    8de0:	2102      	movs	r1, #2
    8de2:	2011      	movs	r0, #17
    8de4:	4b24      	ldr	r3, [pc, #144]	; (8e78 <system_board_init+0x16c>)
    8de6:	4798      	blx	r3
	ioport_disable_pin(LCD_SCL_GPIO);
    8de8:	2011      	movs	r0, #17
    8dea:	4b24      	ldr	r3, [pc, #144]	; (8e7c <system_board_init+0x170>)
    8dec:	4798      	blx	r3
	
	// FRAM interface
	ioport_set_pin_dir(FRAM_CS_GPIO, IOPORT_DIR_OUTPUT);
    8dee:	2101      	movs	r1, #1
    8df0:	200b      	movs	r0, #11
    8df2:	4b1f      	ldr	r3, [pc, #124]	; (8e70 <system_board_init+0x164>)
    8df4:	4798      	blx	r3
	ioport_set_pin_level(FRAM_CS_GPIO, !FRAM_CS_SELECT_LEVEL);
    8df6:	2101      	movs	r1, #1
    8df8:	200b      	movs	r0, #11
    8dfa:	4b1e      	ldr	r3, [pc, #120]	; (8e74 <system_board_init+0x168>)
    8dfc:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_SCK_GPIO, FRAM_SCK_GPIO_FLAGS);
    8dfe:	2102      	movs	r1, #2
    8e00:	2009      	movs	r0, #9
    8e02:	4b1d      	ldr	r3, [pc, #116]	; (8e78 <system_board_init+0x16c>)
    8e04:	4798      	blx	r3
	ioport_disable_pin(FRAM_SCK_GPIO);
    8e06:	2009      	movs	r0, #9
    8e08:	4b1c      	ldr	r3, [pc, #112]	; (8e7c <system_board_init+0x170>)
    8e0a:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MISO_GPIO, FRAM_MISO_GPIO_FLAGS);
    8e0c:	2102      	movs	r1, #2
    8e0e:	200a      	movs	r0, #10
    8e10:	4b19      	ldr	r3, [pc, #100]	; (8e78 <system_board_init+0x16c>)
    8e12:	4798      	blx	r3
	ioport_disable_pin(FRAM_MISO_GPIO);
    8e14:	200a      	movs	r0, #10
    8e16:	4b19      	ldr	r3, [pc, #100]	; (8e7c <system_board_init+0x170>)
    8e18:	4798      	blx	r3
	ioport_set_pin_mode(FRAM_MOSI_GPIO, FRAM_MOSI_GPIO_FLAGS);
    8e1a:	2102      	movs	r1, #2
    8e1c:	2008      	movs	r0, #8
    8e1e:	4b16      	ldr	r3, [pc, #88]	; (8e78 <system_board_init+0x16c>)
    8e20:	4798      	blx	r3
	ioport_disable_pin(FRAM_MOSI_GPIO);
    8e22:	2008      	movs	r0, #8
    8e24:	4b15      	ldr	r3, [pc, #84]	; (8e7c <system_board_init+0x170>)
    8e26:	4798      	blx	r3
	
	// Alarm pins
	ioport_set_pin_dir(BUZZER_GPIO, IOPORT_DIR_OUTPUT);
    8e28:	2101      	movs	r1, #1
    8e2a:	2036      	movs	r0, #54	; 0x36
    8e2c:	4b10      	ldr	r3, [pc, #64]	; (8e70 <system_board_init+0x164>)
    8e2e:	4798      	blx	r3
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
    8e30:	2100      	movs	r1, #0
    8e32:	2036      	movs	r0, #54	; 0x36
    8e34:	4b0f      	ldr	r3, [pc, #60]	; (8e74 <system_board_init+0x168>)
    8e36:	4798      	blx	r3
	ioport_set_pin_dir(WATCHDOG_GPIO, IOPORT_DIR_OUTPUT);
    8e38:	2101      	movs	r1, #1
    8e3a:	2015      	movs	r0, #21
    8e3c:	4b0c      	ldr	r3, [pc, #48]	; (8e70 <system_board_init+0x164>)
    8e3e:	4798      	blx	r3
	ioport_set_pin_level(WATCHDOG_GPIO, !WATCHDOG_GPIO_ACTIVE_LEVEL);
    8e40:	2100      	movs	r1, #0
    8e42:	2015      	movs	r0, #21
    8e44:	4b0b      	ldr	r3, [pc, #44]	; (8e74 <system_board_init+0x168>)
    8e46:	4798      	blx	r3

	// Power monitoring
	ioport_set_pin_dir(POWER_MONITOR_GPIO, IOPORT_DIR_INPUT);
    8e48:	2100      	movs	r1, #0
    8e4a:	201c      	movs	r0, #28
    8e4c:	4b08      	ldr	r3, [pc, #32]	; (8e70 <system_board_init+0x164>)
    8e4e:	4798      	blx	r3
	ioport_set_pin_mode(POWER_MONITOR_GPIO, IOPORT_MODE_PULLDOWN);
    8e50:	2120      	movs	r1, #32
    8e52:	201c      	movs	r0, #28
    8e54:	4b08      	ldr	r3, [pc, #32]	; (8e78 <system_board_init+0x16c>)
    8e56:	4798      	blx	r3
	
	// Vref
	ioport_set_pin_mode(VREFA_GPIO, VREFA_GPIO_FLAGS);
    8e58:	2102      	movs	r1, #2
    8e5a:	2003      	movs	r0, #3
    8e5c:	4b06      	ldr	r3, [pc, #24]	; (8e78 <system_board_init+0x16c>)
    8e5e:	4798      	blx	r3
	ioport_disable_pin(VREFA_GPIO);
    8e60:	2003      	movs	r0, #3
    8e62:	4b06      	ldr	r3, [pc, #24]	; (8e7c <system_board_init+0x170>)
    8e64:	4798      	blx	r3
    8e66:	46c0      	nop			; (mov r8, r8)
    8e68:	46bd      	mov	sp, r7
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	00008c69 	.word	0x00008c69
    8e70:	00008cbd 	.word	0x00008cbd
    8e74:	00008ce5 	.word	0x00008ce5
    8e78:	00008c99 	.word	0x00008c99
    8e7c:	00008c7d 	.word	0x00008c7d

00008e80 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    8e80:	b580      	push	{r7, lr}
    8e82:	b082      	sub	sp, #8
    8e84:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    8e86:	4b10      	ldr	r3, [pc, #64]	; (8ec8 <cpu_irq_enter_critical+0x48>)
    8e88:	681b      	ldr	r3, [r3, #0]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d112      	bne.n	8eb4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8e8e:	f3ef 8310 	mrs	r3, PRIMASK
    8e92:	607b      	str	r3, [r7, #4]
  return(result);
    8e94:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    8e96:	2b00      	cmp	r3, #0
    8e98:	d109      	bne.n	8eae <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    8e9a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8e9c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8ea0:	4b0a      	ldr	r3, [pc, #40]	; (8ecc <cpu_irq_enter_critical+0x4c>)
    8ea2:	2200      	movs	r2, #0
    8ea4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8ea6:	4b0a      	ldr	r3, [pc, #40]	; (8ed0 <cpu_irq_enter_critical+0x50>)
    8ea8:	2201      	movs	r2, #1
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	e002      	b.n	8eb4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8eae:	4b08      	ldr	r3, [pc, #32]	; (8ed0 <cpu_irq_enter_critical+0x50>)
    8eb0:	2200      	movs	r2, #0
    8eb2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8eb4:	4b04      	ldr	r3, [pc, #16]	; (8ec8 <cpu_irq_enter_critical+0x48>)
    8eb6:	681b      	ldr	r3, [r3, #0]
    8eb8:	1c5a      	adds	r2, r3, #1
    8eba:	4b03      	ldr	r3, [pc, #12]	; (8ec8 <cpu_irq_enter_critical+0x48>)
    8ebc:	601a      	str	r2, [r3, #0]
}
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	46bd      	mov	sp, r7
    8ec2:	b002      	add	sp, #8
    8ec4:	bd80      	pop	{r7, pc}
    8ec6:	46c0      	nop			; (mov r8, r8)
    8ec8:	20005498 	.word	0x20005498
    8ecc:	2000011d 	.word	0x2000011d
    8ed0:	2000549c 	.word	0x2000549c

00008ed4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8ed8:	4b0b      	ldr	r3, [pc, #44]	; (8f08 <cpu_irq_leave_critical+0x34>)
    8eda:	681b      	ldr	r3, [r3, #0]
    8edc:	1e5a      	subs	r2, r3, #1
    8ede:	4b0a      	ldr	r3, [pc, #40]	; (8f08 <cpu_irq_leave_critical+0x34>)
    8ee0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8ee2:	4b09      	ldr	r3, [pc, #36]	; (8f08 <cpu_irq_leave_critical+0x34>)
    8ee4:	681b      	ldr	r3, [r3, #0]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d10a      	bne.n	8f00 <cpu_irq_leave_critical+0x2c>
    8eea:	4b08      	ldr	r3, [pc, #32]	; (8f0c <cpu_irq_leave_critical+0x38>)
    8eec:	781b      	ldrb	r3, [r3, #0]
    8eee:	b2db      	uxtb	r3, r3
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d005      	beq.n	8f00 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    8ef4:	4b06      	ldr	r3, [pc, #24]	; (8f10 <cpu_irq_leave_critical+0x3c>)
    8ef6:	2201      	movs	r2, #1
    8ef8:	701a      	strb	r2, [r3, #0]
    8efa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8efe:	b662      	cpsie	i
	}
}
    8f00:	46c0      	nop			; (mov r8, r8)
    8f02:	46bd      	mov	sp, r7
    8f04:	bd80      	pop	{r7, pc}
    8f06:	46c0      	nop			; (mov r8, r8)
    8f08:	20005498 	.word	0x20005498
    8f0c:	2000549c 	.word	0x2000549c
    8f10:	2000011d 	.word	0x2000011d

00008f14 <system_gclk_gen_get_config_defaults>:
{
    8f14:	b580      	push	{r7, lr}
    8f16:	b082      	sub	sp, #8
    8f18:	af00      	add	r7, sp, #0
    8f1a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	2201      	movs	r2, #1
    8f20:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	2200      	movs	r2, #0
    8f26:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	2206      	movs	r2, #6
    8f2c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	2200      	movs	r2, #0
    8f32:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2200      	movs	r2, #0
    8f38:	725a      	strb	r2, [r3, #9]
}
    8f3a:	46c0      	nop			; (mov r8, r8)
    8f3c:	46bd      	mov	sp, r7
    8f3e:	b002      	add	sp, #8
    8f40:	bd80      	pop	{r7, pc}
	...

00008f44 <system_clock_source_xosc_get_config_defaults>:
{
    8f44:	b580      	push	{r7, lr}
    8f46:	b082      	sub	sp, #8
    8f48:	af00      	add	r7, sp, #0
    8f4a:	6078      	str	r0, [r7, #4]
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	2200      	movs	r2, #0
    8f50:	701a      	strb	r2, [r3, #0]
	config->startup_time      = SYSTEM_XOSC_STARTUP_16384;
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	220e      	movs	r2, #14
    8f56:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control = false;
    8f58:	687b      	ldr	r3, [r7, #4]
    8f5a:	2200      	movs	r2, #0
    8f5c:	709a      	strb	r2, [r3, #2]
	config->frequency         = 12000000UL;
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	4a05      	ldr	r2, [pc, #20]	; (8f78 <system_clock_source_xosc_get_config_defaults+0x34>)
    8f62:	605a      	str	r2, [r3, #4]
	config->run_in_standby    = false;
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	2200      	movs	r2, #0
    8f68:	721a      	strb	r2, [r3, #8]
	config->on_demand         = false;
    8f6a:	687b      	ldr	r3, [r7, #4]
    8f6c:	2200      	movs	r2, #0
    8f6e:	725a      	strb	r2, [r3, #9]
}
    8f70:	46c0      	nop			; (mov r8, r8)
    8f72:	46bd      	mov	sp, r7
    8f74:	b002      	add	sp, #8
    8f76:	bd80      	pop	{r7, pc}
    8f78:	00b71b00 	.word	0x00b71b00

00008f7c <system_clock_source_osc8m_get_config_defaults>:
{
    8f7c:	b580      	push	{r7, lr}
    8f7e:	b082      	sub	sp, #8
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	2203      	movs	r2, #3
    8f88:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	2200      	movs	r2, #0
    8f8e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    8f90:	687b      	ldr	r3, [r7, #4]
    8f92:	2201      	movs	r2, #1
    8f94:	709a      	strb	r2, [r3, #2]
}
    8f96:	46c0      	nop			; (mov r8, r8)
    8f98:	46bd      	mov	sp, r7
    8f9a:	b002      	add	sp, #8
    8f9c:	bd80      	pop	{r7, pc}

00008f9e <system_clock_source_dfll_get_config_defaults>:
{
    8f9e:	b580      	push	{r7, lr}
    8fa0:	b082      	sub	sp, #8
    8fa2:	af00      	add	r7, sp, #0
    8fa4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	2200      	movs	r2, #0
    8faa:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	2200      	movs	r2, #0
    8fb0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8fb2:	687b      	ldr	r3, [r7, #4]
    8fb4:	2200      	movs	r2, #0
    8fb6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	2200      	movs	r2, #0
    8fbc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8fbe:	687b      	ldr	r3, [r7, #4]
    8fc0:	2200      	movs	r2, #0
    8fc2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	2201      	movs	r2, #1
    8fc8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	2207      	movs	r2, #7
    8fce:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	223f      	movs	r2, #63	; 0x3f
    8fd4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    8fd6:	687b      	ldr	r3, [r7, #4]
    8fd8:	2201      	movs	r2, #1
    8fda:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	2201      	movs	r2, #1
    8fe0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	2206      	movs	r2, #6
    8fe6:	821a      	strh	r2, [r3, #16]
}
    8fe8:	46c0      	nop			; (mov r8, r8)
    8fea:	46bd      	mov	sp, r7
    8fec:	b002      	add	sp, #8
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <system_cpu_clock_set_divider>:
{
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b082      	sub	sp, #8
    8ff4:	af00      	add	r7, sp, #0
    8ff6:	0002      	movs	r2, r0
    8ff8:	1dfb      	adds	r3, r7, #7
    8ffa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    8ffc:	4a03      	ldr	r2, [pc, #12]	; (900c <system_cpu_clock_set_divider+0x1c>)
    8ffe:	1dfb      	adds	r3, r7, #7
    9000:	781b      	ldrb	r3, [r3, #0]
    9002:	7213      	strb	r3, [r2, #8]
}
    9004:	46c0      	nop			; (mov r8, r8)
    9006:	46bd      	mov	sp, r7
    9008:	b002      	add	sp, #8
    900a:	bd80      	pop	{r7, pc}
    900c:	40000400 	.word	0x40000400

00009010 <system_apb_clock_set_divider>:
{
    9010:	b580      	push	{r7, lr}
    9012:	b082      	sub	sp, #8
    9014:	af00      	add	r7, sp, #0
    9016:	0002      	movs	r2, r0
    9018:	1dfb      	adds	r3, r7, #7
    901a:	701a      	strb	r2, [r3, #0]
    901c:	1dbb      	adds	r3, r7, #6
    901e:	1c0a      	adds	r2, r1, #0
    9020:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9022:	1dfb      	adds	r3, r7, #7
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	2b01      	cmp	r3, #1
    9028:	d008      	beq.n	903c <system_apb_clock_set_divider+0x2c>
    902a:	2b02      	cmp	r3, #2
    902c:	d00b      	beq.n	9046 <system_apb_clock_set_divider+0x36>
    902e:	2b00      	cmp	r3, #0
    9030:	d10e      	bne.n	9050 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    9032:	4a0b      	ldr	r2, [pc, #44]	; (9060 <system_apb_clock_set_divider+0x50>)
    9034:	1dbb      	adds	r3, r7, #6
    9036:	781b      	ldrb	r3, [r3, #0]
    9038:	7253      	strb	r3, [r2, #9]
			break;
    903a:	e00b      	b.n	9054 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    903c:	4a08      	ldr	r2, [pc, #32]	; (9060 <system_apb_clock_set_divider+0x50>)
    903e:	1dbb      	adds	r3, r7, #6
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	7293      	strb	r3, [r2, #10]
			break;
    9044:	e006      	b.n	9054 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    9046:	4a06      	ldr	r2, [pc, #24]	; (9060 <system_apb_clock_set_divider+0x50>)
    9048:	1dbb      	adds	r3, r7, #6
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	72d3      	strb	r3, [r2, #11]
			break;
    904e:	e001      	b.n	9054 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    9050:	2317      	movs	r3, #23
    9052:	e000      	b.n	9056 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    9054:	2300      	movs	r3, #0
}
    9056:	0018      	movs	r0, r3
    9058:	46bd      	mov	sp, r7
    905a:	b002      	add	sp, #8
    905c:	bd80      	pop	{r7, pc}
    905e:	46c0      	nop			; (mov r8, r8)
    9060:	40000400 	.word	0x40000400

00009064 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    9064:	b580      	push	{r7, lr}
    9066:	b082      	sub	sp, #8
    9068:	af00      	add	r7, sp, #0
    906a:	0002      	movs	r2, r0
    906c:	1dfb      	adds	r3, r7, #7
    906e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9070:	4a08      	ldr	r2, [pc, #32]	; (9094 <system_flash_set_waitstates+0x30>)
    9072:	1dfb      	adds	r3, r7, #7
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	210f      	movs	r1, #15
    9078:	400b      	ands	r3, r1
    907a:	b2d9      	uxtb	r1, r3
    907c:	6853      	ldr	r3, [r2, #4]
    907e:	200f      	movs	r0, #15
    9080:	4001      	ands	r1, r0
    9082:	0049      	lsls	r1, r1, #1
    9084:	201e      	movs	r0, #30
    9086:	4383      	bics	r3, r0
    9088:	430b      	orrs	r3, r1
    908a:	6053      	str	r3, [r2, #4]
}
    908c:	46c0      	nop			; (mov r8, r8)
    908e:	46bd      	mov	sp, r7
    9090:	b002      	add	sp, #8
    9092:	bd80      	pop	{r7, pc}
    9094:	41004000 	.word	0x41004000

00009098 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    9098:	b580      	push	{r7, lr}
    909a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    909c:	46c0      	nop			; (mov r8, r8)
    909e:	4b04      	ldr	r3, [pc, #16]	; (90b0 <_system_dfll_wait_for_sync+0x18>)
    90a0:	68db      	ldr	r3, [r3, #12]
    90a2:	2210      	movs	r2, #16
    90a4:	4013      	ands	r3, r2
    90a6:	d0fa      	beq.n	909e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    90a8:	46c0      	nop			; (mov r8, r8)
    90aa:	46bd      	mov	sp, r7
    90ac:	bd80      	pop	{r7, pc}
    90ae:	46c0      	nop			; (mov r8, r8)
    90b0:	40000800 	.word	0x40000800

000090b4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    90b4:	b580      	push	{r7, lr}
    90b6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    90b8:	4b0c      	ldr	r3, [pc, #48]	; (90ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    90ba:	2202      	movs	r2, #2
    90bc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    90be:	4b0c      	ldr	r3, [pc, #48]	; (90f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    90c0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    90c2:	4a0a      	ldr	r2, [pc, #40]	; (90ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    90c4:	4b0b      	ldr	r3, [pc, #44]	; (90f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    90c6:	689b      	ldr	r3, [r3, #8]
    90c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    90ca:	4a08      	ldr	r2, [pc, #32]	; (90ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    90cc:	4b09      	ldr	r3, [pc, #36]	; (90f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    90ce:	685b      	ldr	r3, [r3, #4]
    90d0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    90d2:	4b06      	ldr	r3, [pc, #24]	; (90ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    90d4:	2200      	movs	r2, #0
    90d6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    90d8:	4b05      	ldr	r3, [pc, #20]	; (90f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    90da:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    90dc:	4a03      	ldr	r2, [pc, #12]	; (90ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    90de:	4b05      	ldr	r3, [pc, #20]	; (90f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    90e0:	681b      	ldr	r3, [r3, #0]
    90e2:	b29b      	uxth	r3, r3
    90e4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	46bd      	mov	sp, r7
    90ea:	bd80      	pop	{r7, pc}
    90ec:	40000800 	.word	0x40000800
    90f0:	00009099 	.word	0x00009099
    90f4:	200054a0 	.word	0x200054a0

000090f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    90f8:	b580      	push	{r7, lr}
    90fa:	b082      	sub	sp, #8
    90fc:	af00      	add	r7, sp, #0
    90fe:	0002      	movs	r2, r0
    9100:	1dfb      	adds	r3, r7, #7
    9102:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9104:	1dfb      	adds	r3, r7, #7
    9106:	781b      	ldrb	r3, [r3, #0]
    9108:	2b08      	cmp	r3, #8
    910a:	d841      	bhi.n	9190 <system_clock_source_get_hz+0x98>
    910c:	009a      	lsls	r2, r3, #2
    910e:	4b23      	ldr	r3, [pc, #140]	; (919c <system_clock_source_get_hz+0xa4>)
    9110:	18d3      	adds	r3, r2, r3
    9112:	681b      	ldr	r3, [r3, #0]
    9114:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    9116:	4b22      	ldr	r3, [pc, #136]	; (91a0 <system_clock_source_get_hz+0xa8>)
    9118:	691b      	ldr	r3, [r3, #16]
    911a:	e03a      	b.n	9192 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    911c:	4b21      	ldr	r3, [pc, #132]	; (91a4 <system_clock_source_get_hz+0xac>)
    911e:	6a1b      	ldr	r3, [r3, #32]
    9120:	059b      	lsls	r3, r3, #22
    9122:	0f9b      	lsrs	r3, r3, #30
    9124:	b2db      	uxtb	r3, r3
    9126:	001a      	movs	r2, r3
    9128:	4b1f      	ldr	r3, [pc, #124]	; (91a8 <system_clock_source_get_hz+0xb0>)
    912a:	40d3      	lsrs	r3, r2
    912c:	e031      	b.n	9192 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    912e:	2380      	movs	r3, #128	; 0x80
    9130:	021b      	lsls	r3, r3, #8
    9132:	e02e      	b.n	9192 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    9134:	2380      	movs	r3, #128	; 0x80
    9136:	021b      	lsls	r3, r3, #8
    9138:	e02b      	b.n	9192 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    913a:	4b19      	ldr	r3, [pc, #100]	; (91a0 <system_clock_source_get_hz+0xa8>)
    913c:	695b      	ldr	r3, [r3, #20]
    913e:	e028      	b.n	9192 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9140:	4b17      	ldr	r3, [pc, #92]	; (91a0 <system_clock_source_get_hz+0xa8>)
    9142:	681b      	ldr	r3, [r3, #0]
    9144:	2202      	movs	r2, #2
    9146:	4013      	ands	r3, r2
    9148:	d101      	bne.n	914e <system_clock_source_get_hz+0x56>
			return 0;
    914a:	2300      	movs	r3, #0
    914c:	e021      	b.n	9192 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    914e:	4b17      	ldr	r3, [pc, #92]	; (91ac <system_clock_source_get_hz+0xb4>)
    9150:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    9152:	4b13      	ldr	r3, [pc, #76]	; (91a0 <system_clock_source_get_hz+0xa8>)
    9154:	681b      	ldr	r3, [r3, #0]
    9156:	2224      	movs	r2, #36	; 0x24
    9158:	4013      	ands	r3, r2
    915a:	2b04      	cmp	r3, #4
    915c:	d109      	bne.n	9172 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    915e:	2000      	movs	r0, #0
    9160:	4b13      	ldr	r3, [pc, #76]	; (91b0 <system_clock_source_get_hz+0xb8>)
    9162:	4798      	blx	r3
    9164:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    9166:	4b0e      	ldr	r3, [pc, #56]	; (91a0 <system_clock_source_get_hz+0xa8>)
    9168:	689b      	ldr	r3, [r3, #8]
    916a:	041b      	lsls	r3, r3, #16
    916c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    916e:	4353      	muls	r3, r2
    9170:	e00f      	b.n	9192 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    9172:	4b10      	ldr	r3, [pc, #64]	; (91b4 <system_clock_source_get_hz+0xbc>)
    9174:	e00d      	b.n	9192 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9176:	4a0b      	ldr	r2, [pc, #44]	; (91a4 <system_clock_source_get_hz+0xac>)
    9178:	2350      	movs	r3, #80	; 0x50
    917a:	5cd3      	ldrb	r3, [r2, r3]
    917c:	b2db      	uxtb	r3, r3
    917e:	001a      	movs	r2, r3
    9180:	2304      	movs	r3, #4
    9182:	4013      	ands	r3, r2
    9184:	d101      	bne.n	918a <system_clock_source_get_hz+0x92>
			return 0;
    9186:	2300      	movs	r3, #0
    9188:	e003      	b.n	9192 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    918a:	4b05      	ldr	r3, [pc, #20]	; (91a0 <system_clock_source_get_hz+0xa8>)
    918c:	68db      	ldr	r3, [r3, #12]
    918e:	e000      	b.n	9192 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    9190:	2300      	movs	r3, #0
	}
}
    9192:	0018      	movs	r0, r3
    9194:	46bd      	mov	sp, r7
    9196:	b002      	add	sp, #8
    9198:	bd80      	pop	{r7, pc}
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	0000dc84 	.word	0x0000dc84
    91a0:	200054a0 	.word	0x200054a0
    91a4:	40000800 	.word	0x40000800
    91a8:	007a1200 	.word	0x007a1200
    91ac:	00009099 	.word	0x00009099
    91b0:	00009d15 	.word	0x00009d15
    91b4:	02dc6c00 	.word	0x02dc6c00

000091b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    91b8:	b580      	push	{r7, lr}
    91ba:	b084      	sub	sp, #16
    91bc:	af00      	add	r7, sp, #0
    91be:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    91c0:	4b1a      	ldr	r3, [pc, #104]	; (922c <system_clock_source_osc8m_set_config+0x74>)
    91c2:	6a1b      	ldr	r3, [r3, #32]
    91c4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	1c1a      	adds	r2, r3, #0
    91cc:	2303      	movs	r3, #3
    91ce:	4013      	ands	r3, r2
    91d0:	b2da      	uxtb	r2, r3
    91d2:	230d      	movs	r3, #13
    91d4:	18fb      	adds	r3, r7, r3
    91d6:	2103      	movs	r1, #3
    91d8:	400a      	ands	r2, r1
    91da:	0010      	movs	r0, r2
    91dc:	781a      	ldrb	r2, [r3, #0]
    91de:	2103      	movs	r1, #3
    91e0:	438a      	bics	r2, r1
    91e2:	1c11      	adds	r1, r2, #0
    91e4:	1c02      	adds	r2, r0, #0
    91e6:	430a      	orrs	r2, r1
    91e8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    91ea:	687b      	ldr	r3, [r7, #4]
    91ec:	789a      	ldrb	r2, [r3, #2]
    91ee:	230c      	movs	r3, #12
    91f0:	18fb      	adds	r3, r7, r3
    91f2:	01d0      	lsls	r0, r2, #7
    91f4:	781a      	ldrb	r2, [r3, #0]
    91f6:	217f      	movs	r1, #127	; 0x7f
    91f8:	400a      	ands	r2, r1
    91fa:	1c11      	adds	r1, r2, #0
    91fc:	1c02      	adds	r2, r0, #0
    91fe:	430a      	orrs	r2, r1
    9200:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9202:	687b      	ldr	r3, [r7, #4]
    9204:	785a      	ldrb	r2, [r3, #1]
    9206:	230c      	movs	r3, #12
    9208:	18fb      	adds	r3, r7, r3
    920a:	2101      	movs	r1, #1
    920c:	400a      	ands	r2, r1
    920e:	0190      	lsls	r0, r2, #6
    9210:	781a      	ldrb	r2, [r3, #0]
    9212:	2140      	movs	r1, #64	; 0x40
    9214:	438a      	bics	r2, r1
    9216:	1c11      	adds	r1, r2, #0
    9218:	1c02      	adds	r2, r0, #0
    921a:	430a      	orrs	r2, r1
    921c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    921e:	4b03      	ldr	r3, [pc, #12]	; (922c <system_clock_source_osc8m_set_config+0x74>)
    9220:	68fa      	ldr	r2, [r7, #12]
    9222:	621a      	str	r2, [r3, #32]
}
    9224:	46c0      	nop			; (mov r8, r8)
    9226:	46bd      	mov	sp, r7
    9228:	b004      	add	sp, #16
    922a:	bd80      	pop	{r7, pc}
    922c:	40000800 	.word	0x40000800

00009230 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    9230:	b580      	push	{r7, lr}
    9232:	b084      	sub	sp, #16
    9234:	af00      	add	r7, sp, #0
    9236:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC_Type temp = SYSCTRL->XOSC;
    9238:	4a50      	ldr	r2, [pc, #320]	; (937c <system_clock_source_xosc_set_config+0x14c>)
    923a:	230c      	movs	r3, #12
    923c:	18fb      	adds	r3, r7, r3
    923e:	8a12      	ldrh	r2, [r2, #16]
    9240:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	785b      	ldrb	r3, [r3, #1]
    9246:	1c1a      	adds	r2, r3, #0
    9248:	230f      	movs	r3, #15
    924a:	4013      	ands	r3, r2
    924c:	b2da      	uxtb	r2, r3
    924e:	230c      	movs	r3, #12
    9250:	18fb      	adds	r3, r7, r3
    9252:	0110      	lsls	r0, r2, #4
    9254:	785a      	ldrb	r2, [r3, #1]
    9256:	210f      	movs	r1, #15
    9258:	400a      	ands	r2, r1
    925a:	1c11      	adds	r1, r2, #0
    925c:	1c02      	adds	r2, r0, #0
    925e:	430a      	orrs	r2, r1
    9260:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	781b      	ldrb	r3, [r3, #0]
    9266:	2b00      	cmp	r3, #0
    9268:	d106      	bne.n	9278 <system_clock_source_xosc_set_config+0x48>
		temp.bit.XTALEN = 1;
    926a:	230c      	movs	r3, #12
    926c:	18fb      	adds	r3, r7, r3
    926e:	781a      	ldrb	r2, [r3, #0]
    9270:	2104      	movs	r1, #4
    9272:	430a      	orrs	r2, r1
    9274:	701a      	strb	r2, [r3, #0]
    9276:	e005      	b.n	9284 <system_clock_source_xosc_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    9278:	230c      	movs	r3, #12
    927a:	18fb      	adds	r3, r7, r3
    927c:	781a      	ldrb	r2, [r3, #0]
    927e:	2104      	movs	r1, #4
    9280:	438a      	bics	r2, r1
    9282:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AMPGC = config->auto_gain_control;
    9284:	687b      	ldr	r3, [r7, #4]
    9286:	789a      	ldrb	r2, [r3, #2]
    9288:	230c      	movs	r3, #12
    928a:	18fb      	adds	r3, r7, r3
    928c:	2101      	movs	r1, #1
    928e:	400a      	ands	r2, r1
    9290:	00d0      	lsls	r0, r2, #3
    9292:	785a      	ldrb	r2, [r3, #1]
    9294:	2108      	movs	r1, #8
    9296:	438a      	bics	r2, r1
    9298:	1c11      	adds	r1, r2, #0
    929a:	1c02      	adds	r2, r0, #0
    929c:	430a      	orrs	r2, r1
    929e:	705a      	strb	r2, [r3, #1]

	/* Set gain */
	if (config->frequency <= 2000000) {
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	685b      	ldr	r3, [r3, #4]
    92a4:	4a36      	ldr	r2, [pc, #216]	; (9380 <system_clock_source_xosc_set_config+0x150>)
    92a6:	4293      	cmp	r3, r2
    92a8:	d806      	bhi.n	92b8 <system_clock_source_xosc_set_config+0x88>
		temp.bit.GAIN = 0;
    92aa:	230c      	movs	r3, #12
    92ac:	18fb      	adds	r3, r7, r3
    92ae:	785a      	ldrb	r2, [r3, #1]
    92b0:	2107      	movs	r1, #7
    92b2:	438a      	bics	r2, r1
    92b4:	705a      	strb	r2, [r3, #1]
    92b6:	e03a      	b.n	932e <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 4000000) {
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	685b      	ldr	r3, [r3, #4]
    92bc:	4a31      	ldr	r2, [pc, #196]	; (9384 <system_clock_source_xosc_set_config+0x154>)
    92be:	4293      	cmp	r3, r2
    92c0:	d809      	bhi.n	92d6 <system_clock_source_xosc_set_config+0xa6>
		temp.bit.GAIN = 1;
    92c2:	230c      	movs	r3, #12
    92c4:	18fb      	adds	r3, r7, r3
    92c6:	785a      	ldrb	r2, [r3, #1]
    92c8:	2107      	movs	r1, #7
    92ca:	438a      	bics	r2, r1
    92cc:	1c11      	adds	r1, r2, #0
    92ce:	2201      	movs	r2, #1
    92d0:	430a      	orrs	r2, r1
    92d2:	705a      	strb	r2, [r3, #1]
    92d4:	e02b      	b.n	932e <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 8000000) {
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	685b      	ldr	r3, [r3, #4]
    92da:	4a2b      	ldr	r2, [pc, #172]	; (9388 <system_clock_source_xosc_set_config+0x158>)
    92dc:	4293      	cmp	r3, r2
    92de:	d809      	bhi.n	92f4 <system_clock_source_xosc_set_config+0xc4>
		temp.bit.GAIN = 2;
    92e0:	230c      	movs	r3, #12
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	785a      	ldrb	r2, [r3, #1]
    92e6:	2107      	movs	r1, #7
    92e8:	438a      	bics	r2, r1
    92ea:	1c11      	adds	r1, r2, #0
    92ec:	2202      	movs	r2, #2
    92ee:	430a      	orrs	r2, r1
    92f0:	705a      	strb	r2, [r3, #1]
    92f2:	e01c      	b.n	932e <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 16000000) {
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	685b      	ldr	r3, [r3, #4]
    92f8:	4a24      	ldr	r2, [pc, #144]	; (938c <system_clock_source_xosc_set_config+0x15c>)
    92fa:	4293      	cmp	r3, r2
    92fc:	d809      	bhi.n	9312 <system_clock_source_xosc_set_config+0xe2>
		temp.bit.GAIN = 3;
    92fe:	230c      	movs	r3, #12
    9300:	18fb      	adds	r3, r7, r3
    9302:	785a      	ldrb	r2, [r3, #1]
    9304:	2107      	movs	r1, #7
    9306:	438a      	bics	r2, r1
    9308:	1c11      	adds	r1, r2, #0
    930a:	2203      	movs	r2, #3
    930c:	430a      	orrs	r2, r1
    930e:	705a      	strb	r2, [r3, #1]
    9310:	e00d      	b.n	932e <system_clock_source_xosc_set_config+0xfe>
	} else if (config->frequency <= 32000000) {
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	685b      	ldr	r3, [r3, #4]
    9316:	4a1e      	ldr	r2, [pc, #120]	; (9390 <system_clock_source_xosc_set_config+0x160>)
    9318:	4293      	cmp	r3, r2
    931a:	d808      	bhi.n	932e <system_clock_source_xosc_set_config+0xfe>
		temp.bit.GAIN = 4;
    931c:	230c      	movs	r3, #12
    931e:	18fb      	adds	r3, r7, r3
    9320:	785a      	ldrb	r2, [r3, #1]
    9322:	2107      	movs	r1, #7
    9324:	438a      	bics	r2, r1
    9326:	1c11      	adds	r1, r2, #0
    9328:	2204      	movs	r2, #4
    932a:	430a      	orrs	r2, r1
    932c:	705a      	strb	r2, [r3, #1]
	}

	temp.bit.ONDEMAND = config->on_demand;
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	7a5a      	ldrb	r2, [r3, #9]
    9332:	230c      	movs	r3, #12
    9334:	18fb      	adds	r3, r7, r3
    9336:	01d0      	lsls	r0, r2, #7
    9338:	781a      	ldrb	r2, [r3, #0]
    933a:	217f      	movs	r1, #127	; 0x7f
    933c:	400a      	ands	r2, r1
    933e:	1c11      	adds	r1, r2, #0
    9340:	1c02      	adds	r2, r0, #0
    9342:	430a      	orrs	r2, r1
    9344:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9346:	687b      	ldr	r3, [r7, #4]
    9348:	7a1a      	ldrb	r2, [r3, #8]
    934a:	230c      	movs	r3, #12
    934c:	18fb      	adds	r3, r7, r3
    934e:	2101      	movs	r1, #1
    9350:	400a      	ands	r2, r1
    9352:	0190      	lsls	r0, r2, #6
    9354:	781a      	ldrb	r2, [r3, #0]
    9356:	2140      	movs	r1, #64	; 0x40
    9358:	438a      	bics	r2, r1
    935a:	1c11      	adds	r1, r2, #0
    935c:	1c02      	adds	r2, r0, #0
    935e:	430a      	orrs	r2, r1
    9360:	701a      	strb	r2, [r3, #0]

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	685a      	ldr	r2, [r3, #4]
    9366:	4b0b      	ldr	r3, [pc, #44]	; (9394 <system_clock_source_xosc_set_config+0x164>)
    9368:	611a      	str	r2, [r3, #16]

	SYSCTRL->XOSC = temp;
    936a:	4a04      	ldr	r2, [pc, #16]	; (937c <system_clock_source_xosc_set_config+0x14c>)
    936c:	230c      	movs	r3, #12
    936e:	18fb      	adds	r3, r7, r3
    9370:	881b      	ldrh	r3, [r3, #0]
    9372:	8213      	strh	r3, [r2, #16]
}
    9374:	46c0      	nop			; (mov r8, r8)
    9376:	46bd      	mov	sp, r7
    9378:	b004      	add	sp, #16
    937a:	bd80      	pop	{r7, pc}
    937c:	40000800 	.word	0x40000800
    9380:	001e8480 	.word	0x001e8480
    9384:	003d0900 	.word	0x003d0900
    9388:	007a1200 	.word	0x007a1200
    938c:	00f42400 	.word	0x00f42400
    9390:	01e84800 	.word	0x01e84800
    9394:	200054a0 	.word	0x200054a0

00009398 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    9398:	b580      	push	{r7, lr}
    939a:	b082      	sub	sp, #8
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    93a0:	687b      	ldr	r3, [r7, #4]
    93a2:	7a1b      	ldrb	r3, [r3, #8]
    93a4:	029b      	lsls	r3, r3, #10
    93a6:	041b      	lsls	r3, r3, #16
    93a8:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	895b      	ldrh	r3, [r3, #10]
    93ae:	059b      	lsls	r3, r3, #22
    93b0:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    93b2:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    93b4:	4b2a      	ldr	r3, [pc, #168]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    93b6:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    93c0:	4313      	orrs	r3, r2
    93c2:	b2db      	uxtb	r3, r3
    93c4:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    93ca:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    93cc:	687a      	ldr	r2, [r7, #4]
    93ce:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    93d0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	785b      	ldrb	r3, [r3, #1]
    93d6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    93d8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    93da:	4b21      	ldr	r3, [pc, #132]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    93dc:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	2b04      	cmp	r3, #4
    93e4:	d116      	bne.n	9414 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	7b1b      	ldrb	r3, [r3, #12]
    93ea:	069b      	lsls	r3, r3, #26
    93ec:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	89db      	ldrh	r3, [r3, #14]
    93f2:	041b      	lsls	r3, r3, #16
    93f4:	0019      	movs	r1, r3
    93f6:	4b1b      	ldr	r3, [pc, #108]	; (9464 <system_clock_source_dfll_set_config+0xcc>)
    93f8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    93fa:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    93fc:	687a      	ldr	r2, [r7, #4]
    93fe:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9400:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    9402:	4b17      	ldr	r3, [pc, #92]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    9404:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    9406:	4b16      	ldr	r3, [pc, #88]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	687a      	ldr	r2, [r7, #4]
    940c:	7812      	ldrb	r2, [r2, #0]
    940e:	431a      	orrs	r2, r3
    9410:	4b13      	ldr	r3, [pc, #76]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    9412:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	2b20      	cmp	r3, #32
    941a:	d11c      	bne.n	9456 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    941c:	687b      	ldr	r3, [r7, #4]
    941e:	7b1b      	ldrb	r3, [r3, #12]
    9420:	069b      	lsls	r3, r3, #26
    9422:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	89db      	ldrh	r3, [r3, #14]
    9428:	041b      	lsls	r3, r3, #16
    942a:	0019      	movs	r1, r3
    942c:	4b0d      	ldr	r3, [pc, #52]	; (9464 <system_clock_source_dfll_set_config+0xcc>)
    942e:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9430:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9432:	687a      	ldr	r2, [r7, #4]
    9434:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9436:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    9438:	4b09      	ldr	r3, [pc, #36]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    943a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    943c:	4b08      	ldr	r3, [pc, #32]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    943e:	681b      	ldr	r3, [r3, #0]
    9440:	687a      	ldr	r2, [r7, #4]
    9442:	7812      	ldrb	r2, [r2, #0]
    9444:	2104      	movs	r1, #4
    9446:	430a      	orrs	r2, r1
    9448:	b2d2      	uxtb	r2, r2
    944a:	4313      	orrs	r3, r2
    944c:	2280      	movs	r2, #128	; 0x80
    944e:	00d2      	lsls	r2, r2, #3
    9450:	431a      	orrs	r2, r3
    9452:	4b03      	ldr	r3, [pc, #12]	; (9460 <system_clock_source_dfll_set_config+0xc8>)
    9454:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    9456:	46c0      	nop			; (mov r8, r8)
    9458:	46bd      	mov	sp, r7
    945a:	b002      	add	sp, #8
    945c:	bd80      	pop	{r7, pc}
    945e:	46c0      	nop			; (mov r8, r8)
    9460:	200054a0 	.word	0x200054a0
    9464:	03ff0000 	.word	0x03ff0000

00009468 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    9468:	b580      	push	{r7, lr}
    946a:	b082      	sub	sp, #8
    946c:	af00      	add	r7, sp, #0
    946e:	0002      	movs	r2, r0
    9470:	1dfb      	adds	r3, r7, #7
    9472:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9474:	1dfb      	adds	r3, r7, #7
    9476:	781b      	ldrb	r3, [r3, #0]
    9478:	2b08      	cmp	r3, #8
    947a:	d83b      	bhi.n	94f4 <system_clock_source_enable+0x8c>
    947c:	009a      	lsls	r2, r3, #2
    947e:	4b21      	ldr	r3, [pc, #132]	; (9504 <system_clock_source_enable+0x9c>)
    9480:	18d3      	adds	r3, r2, r3
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    9486:	4b20      	ldr	r3, [pc, #128]	; (9508 <system_clock_source_enable+0xa0>)
    9488:	4a1f      	ldr	r2, [pc, #124]	; (9508 <system_clock_source_enable+0xa0>)
    948a:	6a12      	ldr	r2, [r2, #32]
    948c:	2102      	movs	r1, #2
    948e:	430a      	orrs	r2, r1
    9490:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    9492:	2300      	movs	r3, #0
    9494:	e031      	b.n	94fa <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    9496:	4b1c      	ldr	r3, [pc, #112]	; (9508 <system_clock_source_enable+0xa0>)
    9498:	4a1b      	ldr	r2, [pc, #108]	; (9508 <system_clock_source_enable+0xa0>)
    949a:	6992      	ldr	r2, [r2, #24]
    949c:	2102      	movs	r1, #2
    949e:	430a      	orrs	r2, r1
    94a0:	619a      	str	r2, [r3, #24]
		break;
    94a2:	e029      	b.n	94f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    94a4:	4a18      	ldr	r2, [pc, #96]	; (9508 <system_clock_source_enable+0xa0>)
    94a6:	4b18      	ldr	r3, [pc, #96]	; (9508 <system_clock_source_enable+0xa0>)
    94a8:	8a1b      	ldrh	r3, [r3, #16]
    94aa:	b29b      	uxth	r3, r3
    94ac:	2102      	movs	r1, #2
    94ae:	430b      	orrs	r3, r1
    94b0:	b29b      	uxth	r3, r3
    94b2:	8213      	strh	r3, [r2, #16]
		break;
    94b4:	e020      	b.n	94f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    94b6:	4a14      	ldr	r2, [pc, #80]	; (9508 <system_clock_source_enable+0xa0>)
    94b8:	4b13      	ldr	r3, [pc, #76]	; (9508 <system_clock_source_enable+0xa0>)
    94ba:	8a9b      	ldrh	r3, [r3, #20]
    94bc:	b29b      	uxth	r3, r3
    94be:	2102      	movs	r1, #2
    94c0:	430b      	orrs	r3, r1
    94c2:	b29b      	uxth	r3, r3
    94c4:	8293      	strh	r3, [r2, #20]
		break;
    94c6:	e017      	b.n	94f8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    94c8:	4b10      	ldr	r3, [pc, #64]	; (950c <system_clock_source_enable+0xa4>)
    94ca:	681b      	ldr	r3, [r3, #0]
    94cc:	2202      	movs	r2, #2
    94ce:	431a      	orrs	r2, r3
    94d0:	4b0e      	ldr	r3, [pc, #56]	; (950c <system_clock_source_enable+0xa4>)
    94d2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    94d4:	4b0e      	ldr	r3, [pc, #56]	; (9510 <system_clock_source_enable+0xa8>)
    94d6:	4798      	blx	r3
		break;
    94d8:	e00e      	b.n	94f8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    94da:	4a0b      	ldr	r2, [pc, #44]	; (9508 <system_clock_source_enable+0xa0>)
    94dc:	490a      	ldr	r1, [pc, #40]	; (9508 <system_clock_source_enable+0xa0>)
    94de:	2344      	movs	r3, #68	; 0x44
    94e0:	5ccb      	ldrb	r3, [r1, r3]
    94e2:	b2db      	uxtb	r3, r3
    94e4:	2102      	movs	r1, #2
    94e6:	430b      	orrs	r3, r1
    94e8:	b2d9      	uxtb	r1, r3
    94ea:	2344      	movs	r3, #68	; 0x44
    94ec:	54d1      	strb	r1, [r2, r3]
		break;
    94ee:	e003      	b.n	94f8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    94f0:	2300      	movs	r3, #0
    94f2:	e002      	b.n	94fa <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    94f4:	2317      	movs	r3, #23
    94f6:	e000      	b.n	94fa <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    94f8:	2300      	movs	r3, #0
}
    94fa:	0018      	movs	r0, r3
    94fc:	46bd      	mov	sp, r7
    94fe:	b002      	add	sp, #8
    9500:	bd80      	pop	{r7, pc}
    9502:	46c0      	nop			; (mov r8, r8)
    9504:	0000dca8 	.word	0x0000dca8
    9508:	40000800 	.word	0x40000800
    950c:	200054a0 	.word	0x200054a0
    9510:	000090b5 	.word	0x000090b5

00009514 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    9514:	b580      	push	{r7, lr}
    9516:	b084      	sub	sp, #16
    9518:	af00      	add	r7, sp, #0
    951a:	0002      	movs	r2, r0
    951c:	1dfb      	adds	r3, r7, #7
    951e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    9520:	2300      	movs	r3, #0
    9522:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    9524:	1dfb      	adds	r3, r7, #7
    9526:	781b      	ldrb	r3, [r3, #0]
    9528:	2b08      	cmp	r3, #8
    952a:	d821      	bhi.n	9570 <system_clock_source_is_ready+0x5c>
    952c:	009a      	lsls	r2, r3, #2
    952e:	4b18      	ldr	r3, [pc, #96]	; (9590 <system_clock_source_is_ready+0x7c>)
    9530:	18d3      	adds	r3, r2, r3
    9532:	681b      	ldr	r3, [r3, #0]
    9534:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    9536:	2308      	movs	r3, #8
    9538:	60fb      	str	r3, [r7, #12]
		break;
    953a:	e01b      	b.n	9574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    953c:	2304      	movs	r3, #4
    953e:	60fb      	str	r3, [r7, #12]
		break;
    9540:	e018      	b.n	9574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    9542:	2301      	movs	r3, #1
    9544:	60fb      	str	r3, [r7, #12]
		break;
    9546:	e015      	b.n	9574 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    9548:	2302      	movs	r3, #2
    954a:	60fb      	str	r3, [r7, #12]
		break;
    954c:	e012      	b.n	9574 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    954e:	2310      	movs	r3, #16
    9550:	60fb      	str	r3, [r7, #12]
		}
		break;
    9552:	e00f      	b.n	9574 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    9554:	4a0f      	ldr	r2, [pc, #60]	; (9594 <system_clock_source_is_ready+0x80>)
    9556:	2350      	movs	r3, #80	; 0x50
    9558:	5cd3      	ldrb	r3, [r2, r3]
    955a:	b2db      	uxtb	r3, r3
    955c:	001a      	movs	r2, r3
    955e:	2303      	movs	r3, #3
    9560:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    9562:	3b03      	subs	r3, #3
    9564:	425a      	negs	r2, r3
    9566:	4153      	adcs	r3, r2
    9568:	b2db      	uxtb	r3, r3
    956a:	e00c      	b.n	9586 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    956c:	2301      	movs	r3, #1
    956e:	e00a      	b.n	9586 <system_clock_source_is_ready+0x72>

	default:
		return false;
    9570:	2300      	movs	r3, #0
    9572:	e008      	b.n	9586 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9574:	4b07      	ldr	r3, [pc, #28]	; (9594 <system_clock_source_is_ready+0x80>)
    9576:	68db      	ldr	r3, [r3, #12]
    9578:	68fa      	ldr	r2, [r7, #12]
    957a:	401a      	ands	r2, r3
    957c:	68fb      	ldr	r3, [r7, #12]
    957e:	1ad3      	subs	r3, r2, r3
    9580:	425a      	negs	r2, r3
    9582:	4153      	adcs	r3, r2
    9584:	b2db      	uxtb	r3, r3
}
    9586:	0018      	movs	r0, r3
    9588:	46bd      	mov	sp, r7
    958a:	b004      	add	sp, #16
    958c:	bd80      	pop	{r7, pc}
    958e:	46c0      	nop			; (mov r8, r8)
    9590:	0000dccc 	.word	0x0000dccc
    9594:	40000800 	.word	0x40000800

00009598 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    9598:	b580      	push	{r7, lr}
    959a:	b082      	sub	sp, #8
    959c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    959e:	003b      	movs	r3, r7
    95a0:	2202      	movs	r2, #2
    95a2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    95a4:	2300      	movs	r3, #0
    95a6:	607b      	str	r3, [r7, #4]
    95a8:	e009      	b.n	95be <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    95aa:	687b      	ldr	r3, [r7, #4]
    95ac:	b2db      	uxtb	r3, r3
    95ae:	003a      	movs	r2, r7
    95b0:	0011      	movs	r1, r2
    95b2:	0018      	movs	r0, r3
    95b4:	4b05      	ldr	r3, [pc, #20]	; (95cc <_switch_peripheral_gclk+0x34>)
    95b6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    95b8:	687b      	ldr	r3, [r7, #4]
    95ba:	3301      	adds	r3, #1
    95bc:	607b      	str	r3, [r7, #4]
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	2b24      	cmp	r3, #36	; 0x24
    95c2:	d9f2      	bls.n	95aa <_switch_peripheral_gclk+0x12>
	}
}
    95c4:	46c0      	nop			; (mov r8, r8)
    95c6:	46bd      	mov	sp, r7
    95c8:	b002      	add	sp, #8
    95ca:	bd80      	pop	{r7, pc}
    95cc:	00009ba9 	.word	0x00009ba9

000095d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    95d0:	b580      	push	{r7, lr}
    95d2:	b0aa      	sub	sp, #168	; 0xa8
    95d4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    95d6:	4b96      	ldr	r3, [pc, #600]	; (9830 <system_clock_init+0x260>)
    95d8:	22c2      	movs	r2, #194	; 0xc2
    95da:	00d2      	lsls	r2, r2, #3
    95dc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    95de:	2001      	movs	r0, #1
    95e0:	4b94      	ldr	r3, [pc, #592]	; (9834 <system_clock_init+0x264>)
    95e2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    95e4:	4b94      	ldr	r3, [pc, #592]	; (9838 <system_clock_init+0x268>)
    95e6:	4798      	blx	r3

	/* XOSC */
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);
    95e8:	2398      	movs	r3, #152	; 0x98
    95ea:	18fb      	adds	r3, r7, r3
    95ec:	0018      	movs	r0, r3
    95ee:	4b93      	ldr	r3, [pc, #588]	; (983c <system_clock_init+0x26c>)
    95f0:	4798      	blx	r3

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
    95f2:	2398      	movs	r3, #152	; 0x98
    95f4:	18fb      	adds	r3, r7, r3
    95f6:	2200      	movs	r2, #0
    95f8:	701a      	strb	r2, [r3, #0]
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    95fa:	2398      	movs	r3, #152	; 0x98
    95fc:	18fb      	adds	r3, r7, r3
    95fe:	220f      	movs	r2, #15
    9600:	705a      	strb	r2, [r3, #1]
	xosc_conf.frequency         = CONF_CLOCK_XOSC_EXTERNAL_FREQUENCY;
    9602:	2398      	movs	r3, #152	; 0x98
    9604:	18fb      	adds	r3, r7, r3
    9606:	4a8e      	ldr	r2, [pc, #568]	; (9840 <system_clock_init+0x270>)
    9608:	605a      	str	r2, [r3, #4]
	xosc_conf.run_in_standby    = CONF_CLOCK_XOSC_RUN_IN_STANDBY;
    960a:	2398      	movs	r3, #152	; 0x98
    960c:	18fb      	adds	r3, r7, r3
    960e:	2200      	movs	r2, #0
    9610:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc_set_config(&xosc_conf);
    9612:	2398      	movs	r3, #152	; 0x98
    9614:	18fb      	adds	r3, r7, r3
    9616:	0018      	movs	r0, r3
    9618:	4b8a      	ldr	r3, [pc, #552]	; (9844 <system_clock_init+0x274>)
    961a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    961c:	2000      	movs	r0, #0
    961e:	4b8a      	ldr	r3, [pc, #552]	; (9848 <system_clock_init+0x278>)
    9620:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC));
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	2000      	movs	r0, #0
    9626:	4b89      	ldr	r3, [pc, #548]	; (984c <system_clock_init+0x27c>)
    9628:	4798      	blx	r3
    962a:	0003      	movs	r3, r0
    962c:	001a      	movs	r2, r3
    962e:	2301      	movs	r3, #1
    9630:	4053      	eors	r3, r2
    9632:	b2db      	uxtb	r3, r3
    9634:	2b00      	cmp	r3, #0
    9636:	d1f5      	bne.n	9624 <system_clock_init+0x54>
	if (CONF_CLOCK_XOSC_ON_DEMAND || CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL) {
		SYSCTRL->XOSC.reg |=
    9638:	497d      	ldr	r1, [pc, #500]	; (9830 <system_clock_init+0x260>)
    963a:	4b7d      	ldr	r3, [pc, #500]	; (9830 <system_clock_init+0x260>)
    963c:	8a1b      	ldrh	r3, [r3, #16]
    963e:	b29b      	uxth	r3, r3
    9640:	2288      	movs	r2, #136	; 0x88
    9642:	0112      	lsls	r2, r2, #4
    9644:	4313      	orrs	r3, r2
    9646:	b29b      	uxth	r3, r3
    9648:	820b      	strh	r3, [r1, #16]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    964a:	2384      	movs	r3, #132	; 0x84
    964c:	18fb      	adds	r3, r7, r3
    964e:	0018      	movs	r0, r3
    9650:	4b7f      	ldr	r3, [pc, #508]	; (9850 <system_clock_init+0x280>)
    9652:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9654:	2384      	movs	r3, #132	; 0x84
    9656:	18fb      	adds	r3, r7, r3
    9658:	2200      	movs	r2, #0
    965a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    965c:	2384      	movs	r3, #132	; 0x84
    965e:	18fb      	adds	r3, r7, r3
    9660:	2200      	movs	r2, #0
    9662:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    9664:	4b7b      	ldr	r3, [pc, #492]	; (9854 <system_clock_init+0x284>)
    9666:	681b      	ldr	r3, [r3, #0]
    9668:	0e9b      	lsrs	r3, r3, #26
    966a:	22a4      	movs	r2, #164	; 0xa4
    966c:	18ba      	adds	r2, r7, r2
    966e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    9670:	23a4      	movs	r3, #164	; 0xa4
    9672:	18fb      	adds	r3, r7, r3
    9674:	681b      	ldr	r3, [r3, #0]
    9676:	2b3f      	cmp	r3, #63	; 0x3f
    9678:	d103      	bne.n	9682 <system_clock_init+0xb2>
		coarse = 0x1f;
    967a:	231f      	movs	r3, #31
    967c:	22a4      	movs	r2, #164	; 0xa4
    967e:	18ba      	adds	r2, r7, r2
    9680:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    9682:	23a4      	movs	r3, #164	; 0xa4
    9684:	18fb      	adds	r3, r7, r3
    9686:	681b      	ldr	r3, [r3, #0]
    9688:	b2da      	uxtb	r2, r3
    968a:	2384      	movs	r3, #132	; 0x84
    968c:	18fb      	adds	r3, r7, r3
    968e:	721a      	strb	r2, [r3, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    9690:	2384      	movs	r3, #132	; 0x84
    9692:	18fb      	adds	r3, r7, r3
    9694:	2280      	movs	r2, #128	; 0x80
    9696:	0092      	lsls	r2, r2, #2
    9698:	815a      	strh	r2, [r3, #10]
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    969a:	2384      	movs	r3, #132	; 0x84
    969c:	18fb      	adds	r3, r7, r3
    969e:	2200      	movs	r2, #0
    96a0:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    96a2:	2384      	movs	r3, #132	; 0x84
    96a4:	18fb      	adds	r3, r7, r3
    96a6:	2200      	movs	r2, #0
    96a8:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    96aa:	2384      	movs	r3, #132	; 0x84
    96ac:	18fb      	adds	r3, r7, r3
    96ae:	2200      	movs	r2, #0
    96b0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    96b2:	2384      	movs	r3, #132	; 0x84
    96b4:	18fb      	adds	r3, r7, r3
    96b6:	2200      	movs	r2, #0
    96b8:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    96ba:	2384      	movs	r3, #132	; 0x84
    96bc:	18fb      	adds	r3, r7, r3
    96be:	2207      	movs	r2, #7
    96c0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    96c2:	2384      	movs	r3, #132	; 0x84
    96c4:	18fb      	adds	r3, r7, r3
    96c6:	223f      	movs	r2, #63	; 0x3f
    96c8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    96ca:	2384      	movs	r3, #132	; 0x84
    96cc:	18fb      	adds	r3, r7, r3
    96ce:	0018      	movs	r0, r3
    96d0:	4b61      	ldr	r3, [pc, #388]	; (9858 <system_clock_init+0x288>)
    96d2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    96d4:	2380      	movs	r3, #128	; 0x80
    96d6:	18fb      	adds	r3, r7, r3
    96d8:	0018      	movs	r0, r3
    96da:	4b60      	ldr	r3, [pc, #384]	; (985c <system_clock_init+0x28c>)
    96dc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    96de:	2380      	movs	r3, #128	; 0x80
    96e0:	18fb      	adds	r3, r7, r3
    96e2:	2200      	movs	r2, #0
    96e4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    96e6:	2380      	movs	r3, #128	; 0x80
    96e8:	18fb      	adds	r3, r7, r3
    96ea:	2201      	movs	r2, #1
    96ec:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    96ee:	2380      	movs	r3, #128	; 0x80
    96f0:	18fb      	adds	r3, r7, r3
    96f2:	2200      	movs	r2, #0
    96f4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    96f6:	2380      	movs	r3, #128	; 0x80
    96f8:	18fb      	adds	r3, r7, r3
    96fa:	0018      	movs	r0, r3
    96fc:	4b58      	ldr	r3, [pc, #352]	; (9860 <system_clock_init+0x290>)
    96fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    9700:	2006      	movs	r0, #6
    9702:	4b51      	ldr	r3, [pc, #324]	; (9848 <system_clock_init+0x278>)
    9704:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    9706:	4b57      	ldr	r3, [pc, #348]	; (9864 <system_clock_init+0x294>)
    9708:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    970a:	2368      	movs	r3, #104	; 0x68
    970c:	18fb      	adds	r3, r7, r3
    970e:	0018      	movs	r0, r3
    9710:	4b55      	ldr	r3, [pc, #340]	; (9868 <system_clock_init+0x298>)
    9712:	4798      	blx	r3
    9714:	2368      	movs	r3, #104	; 0x68
    9716:	18fb      	adds	r3, r7, r3
    9718:	2206      	movs	r2, #6
    971a:	701a      	strb	r2, [r3, #0]
    971c:	2368      	movs	r3, #104	; 0x68
    971e:	18fb      	adds	r3, r7, r3
    9720:	2201      	movs	r2, #1
    9722:	605a      	str	r2, [r3, #4]
    9724:	2368      	movs	r3, #104	; 0x68
    9726:	18fb      	adds	r3, r7, r3
    9728:	2200      	movs	r2, #0
    972a:	721a      	strb	r2, [r3, #8]
    972c:	2368      	movs	r3, #104	; 0x68
    972e:	18fb      	adds	r3, r7, r3
    9730:	2200      	movs	r2, #0
    9732:	725a      	strb	r2, [r3, #9]
    9734:	2368      	movs	r3, #104	; 0x68
    9736:	18fb      	adds	r3, r7, r3
    9738:	0019      	movs	r1, r3
    973a:	2001      	movs	r0, #1
    973c:	4b4b      	ldr	r3, [pc, #300]	; (986c <system_clock_init+0x29c>)
    973e:	4798      	blx	r3
    9740:	2001      	movs	r0, #1
    9742:	4b4b      	ldr	r3, [pc, #300]	; (9870 <system_clock_init+0x2a0>)
    9744:	4798      	blx	r3
    9746:	2350      	movs	r3, #80	; 0x50
    9748:	18fb      	adds	r3, r7, r3
    974a:	0018      	movs	r0, r3
    974c:	4b46      	ldr	r3, [pc, #280]	; (9868 <system_clock_init+0x298>)
    974e:	4798      	blx	r3
    9750:	2350      	movs	r3, #80	; 0x50
    9752:	18fb      	adds	r3, r7, r3
    9754:	2200      	movs	r2, #0
    9756:	701a      	strb	r2, [r3, #0]
    9758:	2350      	movs	r3, #80	; 0x50
    975a:	18fb      	adds	r3, r7, r3
    975c:	2201      	movs	r2, #1
    975e:	605a      	str	r2, [r3, #4]
    9760:	2350      	movs	r3, #80	; 0x50
    9762:	18fb      	adds	r3, r7, r3
    9764:	2200      	movs	r2, #0
    9766:	721a      	strb	r2, [r3, #8]
    9768:	2350      	movs	r3, #80	; 0x50
    976a:	18fb      	adds	r3, r7, r3
    976c:	2200      	movs	r2, #0
    976e:	725a      	strb	r2, [r3, #9]
    9770:	2350      	movs	r3, #80	; 0x50
    9772:	18fb      	adds	r3, r7, r3
    9774:	0019      	movs	r1, r3
    9776:	2003      	movs	r0, #3
    9778:	4b3c      	ldr	r3, [pc, #240]	; (986c <system_clock_init+0x29c>)
    977a:	4798      	blx	r3
    977c:	2003      	movs	r0, #3
    977e:	4b3c      	ldr	r3, [pc, #240]	; (9870 <system_clock_init+0x2a0>)
    9780:	4798      	blx	r3
    9782:	2344      	movs	r3, #68	; 0x44
    9784:	18fb      	adds	r3, r7, r3
    9786:	0018      	movs	r0, r3
    9788:	4b37      	ldr	r3, [pc, #220]	; (9868 <system_clock_init+0x298>)
    978a:	4798      	blx	r3
    978c:	2344      	movs	r3, #68	; 0x44
    978e:	18fb      	adds	r3, r7, r3
    9790:	2206      	movs	r2, #6
    9792:	701a      	strb	r2, [r3, #0]
    9794:	2344      	movs	r3, #68	; 0x44
    9796:	18fb      	adds	r3, r7, r3
    9798:	22ff      	movs	r2, #255	; 0xff
    979a:	605a      	str	r2, [r3, #4]
    979c:	2344      	movs	r3, #68	; 0x44
    979e:	18fb      	adds	r3, r7, r3
    97a0:	2200      	movs	r2, #0
    97a2:	721a      	strb	r2, [r3, #8]
    97a4:	2344      	movs	r3, #68	; 0x44
    97a6:	18fb      	adds	r3, r7, r3
    97a8:	2200      	movs	r2, #0
    97aa:	725a      	strb	r2, [r3, #9]
    97ac:	2344      	movs	r3, #68	; 0x44
    97ae:	18fb      	adds	r3, r7, r3
    97b0:	0019      	movs	r1, r3
    97b2:	2004      	movs	r0, #4
    97b4:	4b2d      	ldr	r3, [pc, #180]	; (986c <system_clock_init+0x29c>)
    97b6:	4798      	blx	r3
    97b8:	2004      	movs	r0, #4
    97ba:	4b2d      	ldr	r3, [pc, #180]	; (9870 <system_clock_init+0x2a0>)
    97bc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    97be:	2007      	movs	r0, #7
    97c0:	4b21      	ldr	r3, [pc, #132]	; (9848 <system_clock_init+0x278>)
    97c2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    97c4:	46c0      	nop			; (mov r8, r8)
    97c6:	2007      	movs	r0, #7
    97c8:	4b20      	ldr	r3, [pc, #128]	; (984c <system_clock_init+0x27c>)
    97ca:	4798      	blx	r3
    97cc:	0003      	movs	r3, r0
    97ce:	001a      	movs	r2, r3
    97d0:	2301      	movs	r3, #1
    97d2:	4053      	eors	r3, r2
    97d4:	b2db      	uxtb	r3, r3
    97d6:	2b00      	cmp	r3, #0
    97d8:	d1f5      	bne.n	97c6 <system_clock_init+0x1f6>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    97da:	2000      	movs	r0, #0
    97dc:	4b25      	ldr	r3, [pc, #148]	; (9874 <system_clock_init+0x2a4>)
    97de:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    97e0:	2100      	movs	r1, #0
    97e2:	2000      	movs	r0, #0
    97e4:	4b24      	ldr	r3, [pc, #144]	; (9878 <system_clock_init+0x2a8>)
    97e6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    97e8:	2100      	movs	r1, #0
    97ea:	2001      	movs	r0, #1
    97ec:	4b22      	ldr	r3, [pc, #136]	; (9878 <system_clock_init+0x2a8>)
    97ee:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    97f0:	2100      	movs	r1, #0
    97f2:	2002      	movs	r0, #2
    97f4:	4b20      	ldr	r3, [pc, #128]	; (9878 <system_clock_init+0x2a8>)
    97f6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    97f8:	1d3b      	adds	r3, r7, #4
    97fa:	0018      	movs	r0, r3
    97fc:	4b1a      	ldr	r3, [pc, #104]	; (9868 <system_clock_init+0x298>)
    97fe:	4798      	blx	r3
    9800:	1d3b      	adds	r3, r7, #4
    9802:	2207      	movs	r2, #7
    9804:	701a      	strb	r2, [r3, #0]
    9806:	1d3b      	adds	r3, r7, #4
    9808:	2201      	movs	r2, #1
    980a:	605a      	str	r2, [r3, #4]
    980c:	1d3b      	adds	r3, r7, #4
    980e:	2200      	movs	r2, #0
    9810:	721a      	strb	r2, [r3, #8]
    9812:	1d3b      	adds	r3, r7, #4
    9814:	2200      	movs	r2, #0
    9816:	725a      	strb	r2, [r3, #9]
    9818:	1d3b      	adds	r3, r7, #4
    981a:	0019      	movs	r1, r3
    981c:	2000      	movs	r0, #0
    981e:	4b13      	ldr	r3, [pc, #76]	; (986c <system_clock_init+0x29c>)
    9820:	4798      	blx	r3
    9822:	2000      	movs	r0, #0
    9824:	4b12      	ldr	r3, [pc, #72]	; (9870 <system_clock_init+0x2a0>)
    9826:	4798      	blx	r3
#endif
}
    9828:	46c0      	nop			; (mov r8, r8)
    982a:	46bd      	mov	sp, r7
    982c:	b02a      	add	sp, #168	; 0xa8
    982e:	bd80      	pop	{r7, pc}
    9830:	40000800 	.word	0x40000800
    9834:	00009065 	.word	0x00009065
    9838:	00009599 	.word	0x00009599
    983c:	00008f45 	.word	0x00008f45
    9840:	00b71b00 	.word	0x00b71b00
    9844:	00009231 	.word	0x00009231
    9848:	00009469 	.word	0x00009469
    984c:	00009515 	.word	0x00009515
    9850:	00008f9f 	.word	0x00008f9f
    9854:	00806024 	.word	0x00806024
    9858:	00009399 	.word	0x00009399
    985c:	00008f7d 	.word	0x00008f7d
    9860:	000091b9 	.word	0x000091b9
    9864:	00009921 	.word	0x00009921
    9868:	00008f15 	.word	0x00008f15
    986c:	00009951 	.word	0x00009951
    9870:	00009a75 	.word	0x00009a75
    9874:	00008ff1 	.word	0x00008ff1
    9878:	00009011 	.word	0x00009011

0000987c <system_apb_clock_set_mask>:
{
    987c:	b580      	push	{r7, lr}
    987e:	b082      	sub	sp, #8
    9880:	af00      	add	r7, sp, #0
    9882:	0002      	movs	r2, r0
    9884:	6039      	str	r1, [r7, #0]
    9886:	1dfb      	adds	r3, r7, #7
    9888:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    988a:	1dfb      	adds	r3, r7, #7
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	2b01      	cmp	r3, #1
    9890:	d00a      	beq.n	98a8 <system_apb_clock_set_mask+0x2c>
    9892:	2b02      	cmp	r3, #2
    9894:	d00f      	beq.n	98b6 <system_apb_clock_set_mask+0x3a>
    9896:	2b00      	cmp	r3, #0
    9898:	d114      	bne.n	98c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    989a:	4b0e      	ldr	r3, [pc, #56]	; (98d4 <system_apb_clock_set_mask+0x58>)
    989c:	4a0d      	ldr	r2, [pc, #52]	; (98d4 <system_apb_clock_set_mask+0x58>)
    989e:	6991      	ldr	r1, [r2, #24]
    98a0:	683a      	ldr	r2, [r7, #0]
    98a2:	430a      	orrs	r2, r1
    98a4:	619a      	str	r2, [r3, #24]
			break;
    98a6:	e00f      	b.n	98c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    98a8:	4b0a      	ldr	r3, [pc, #40]	; (98d4 <system_apb_clock_set_mask+0x58>)
    98aa:	4a0a      	ldr	r2, [pc, #40]	; (98d4 <system_apb_clock_set_mask+0x58>)
    98ac:	69d1      	ldr	r1, [r2, #28]
    98ae:	683a      	ldr	r2, [r7, #0]
    98b0:	430a      	orrs	r2, r1
    98b2:	61da      	str	r2, [r3, #28]
			break;
    98b4:	e008      	b.n	98c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    98b6:	4b07      	ldr	r3, [pc, #28]	; (98d4 <system_apb_clock_set_mask+0x58>)
    98b8:	4a06      	ldr	r2, [pc, #24]	; (98d4 <system_apb_clock_set_mask+0x58>)
    98ba:	6a11      	ldr	r1, [r2, #32]
    98bc:	683a      	ldr	r2, [r7, #0]
    98be:	430a      	orrs	r2, r1
    98c0:	621a      	str	r2, [r3, #32]
			break;
    98c2:	e001      	b.n	98c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    98c4:	2317      	movs	r3, #23
    98c6:	e000      	b.n	98ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    98c8:	2300      	movs	r3, #0
}
    98ca:	0018      	movs	r0, r3
    98cc:	46bd      	mov	sp, r7
    98ce:	b002      	add	sp, #8
    98d0:	bd80      	pop	{r7, pc}
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	40000400 	.word	0x40000400

000098d8 <system_interrupt_enter_critical_section>:
{
    98d8:	b580      	push	{r7, lr}
    98da:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    98dc:	4b02      	ldr	r3, [pc, #8]	; (98e8 <system_interrupt_enter_critical_section+0x10>)
    98de:	4798      	blx	r3
}
    98e0:	46c0      	nop			; (mov r8, r8)
    98e2:	46bd      	mov	sp, r7
    98e4:	bd80      	pop	{r7, pc}
    98e6:	46c0      	nop			; (mov r8, r8)
    98e8:	00008e81 	.word	0x00008e81

000098ec <system_interrupt_leave_critical_section>:
{
    98ec:	b580      	push	{r7, lr}
    98ee:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    98f0:	4b02      	ldr	r3, [pc, #8]	; (98fc <system_interrupt_leave_critical_section+0x10>)
    98f2:	4798      	blx	r3
}
    98f4:	46c0      	nop			; (mov r8, r8)
    98f6:	46bd      	mov	sp, r7
    98f8:	bd80      	pop	{r7, pc}
    98fa:	46c0      	nop			; (mov r8, r8)
    98fc:	00008ed5 	.word	0x00008ed5

00009900 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    9900:	b580      	push	{r7, lr}
    9902:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9904:	4b05      	ldr	r3, [pc, #20]	; (991c <system_gclk_is_syncing+0x1c>)
    9906:	785b      	ldrb	r3, [r3, #1]
    9908:	b2db      	uxtb	r3, r3
    990a:	b25b      	sxtb	r3, r3
    990c:	2b00      	cmp	r3, #0
    990e:	da01      	bge.n	9914 <system_gclk_is_syncing+0x14>
		return true;
    9910:	2301      	movs	r3, #1
    9912:	e000      	b.n	9916 <system_gclk_is_syncing+0x16>
	}

	return false;
    9914:	2300      	movs	r3, #0
}
    9916:	0018      	movs	r0, r3
    9918:	46bd      	mov	sp, r7
    991a:	bd80      	pop	{r7, pc}
    991c:	40000c00 	.word	0x40000c00

00009920 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    9920:	b580      	push	{r7, lr}
    9922:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    9924:	2108      	movs	r1, #8
    9926:	2000      	movs	r0, #0
    9928:	4b07      	ldr	r3, [pc, #28]	; (9948 <system_gclk_init+0x28>)
    992a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    992c:	4b07      	ldr	r3, [pc, #28]	; (994c <system_gclk_init+0x2c>)
    992e:	2201      	movs	r2, #1
    9930:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    9932:	46c0      	nop			; (mov r8, r8)
    9934:	4b05      	ldr	r3, [pc, #20]	; (994c <system_gclk_init+0x2c>)
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	b2db      	uxtb	r3, r3
    993a:	001a      	movs	r2, r3
    993c:	2301      	movs	r3, #1
    993e:	4013      	ands	r3, r2
    9940:	d1f8      	bne.n	9934 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    9942:	46c0      	nop			; (mov r8, r8)
    9944:	46bd      	mov	sp, r7
    9946:	bd80      	pop	{r7, pc}
    9948:	0000987d 	.word	0x0000987d
    994c:	40000c00 	.word	0x40000c00

00009950 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    9950:	b580      	push	{r7, lr}
    9952:	b086      	sub	sp, #24
    9954:	af00      	add	r7, sp, #0
    9956:	0002      	movs	r2, r0
    9958:	6039      	str	r1, [r7, #0]
    995a:	1dfb      	adds	r3, r7, #7
    995c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    995e:	1dfb      	adds	r3, r7, #7
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    9964:	1dfb      	adds	r3, r7, #7
    9966:	781b      	ldrb	r3, [r3, #0]
    9968:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    996a:	683b      	ldr	r3, [r7, #0]
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	021b      	lsls	r3, r3, #8
    9970:	001a      	movs	r2, r3
    9972:	697b      	ldr	r3, [r7, #20]
    9974:	4313      	orrs	r3, r2
    9976:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    9978:	683b      	ldr	r3, [r7, #0]
    997a:	785b      	ldrb	r3, [r3, #1]
    997c:	2b00      	cmp	r3, #0
    997e:	d004      	beq.n	998a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    9980:	697b      	ldr	r3, [r7, #20]
    9982:	2280      	movs	r2, #128	; 0x80
    9984:	02d2      	lsls	r2, r2, #11
    9986:	4313      	orrs	r3, r2
    9988:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    998a:	683b      	ldr	r3, [r7, #0]
    998c:	7a5b      	ldrb	r3, [r3, #9]
    998e:	2b00      	cmp	r3, #0
    9990:	d004      	beq.n	999c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    9992:	697b      	ldr	r3, [r7, #20]
    9994:	2280      	movs	r2, #128	; 0x80
    9996:	0312      	lsls	r2, r2, #12
    9998:	4313      	orrs	r3, r2
    999a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    999c:	683b      	ldr	r3, [r7, #0]
    999e:	685b      	ldr	r3, [r3, #4]
    99a0:	2b01      	cmp	r3, #1
    99a2:	d92c      	bls.n	99fe <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    99a4:	683b      	ldr	r3, [r7, #0]
    99a6:	685a      	ldr	r2, [r3, #4]
    99a8:	683b      	ldr	r3, [r7, #0]
    99aa:	685b      	ldr	r3, [r3, #4]
    99ac:	3b01      	subs	r3, #1
    99ae:	4013      	ands	r3, r2
    99b0:	d11a      	bne.n	99e8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    99b2:	2300      	movs	r3, #0
    99b4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    99b6:	2302      	movs	r3, #2
    99b8:	60bb      	str	r3, [r7, #8]
    99ba:	e005      	b.n	99c8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    99bc:	68fb      	ldr	r3, [r7, #12]
    99be:	3301      	adds	r3, #1
    99c0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    99c2:	68bb      	ldr	r3, [r7, #8]
    99c4:	005b      	lsls	r3, r3, #1
    99c6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    99c8:	683b      	ldr	r3, [r7, #0]
    99ca:	685a      	ldr	r2, [r3, #4]
    99cc:	68bb      	ldr	r3, [r7, #8]
    99ce:	429a      	cmp	r2, r3
    99d0:	d8f4      	bhi.n	99bc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    99d2:	68fb      	ldr	r3, [r7, #12]
    99d4:	021b      	lsls	r3, r3, #8
    99d6:	693a      	ldr	r2, [r7, #16]
    99d8:	4313      	orrs	r3, r2
    99da:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    99dc:	697b      	ldr	r3, [r7, #20]
    99de:	2280      	movs	r2, #128	; 0x80
    99e0:	0352      	lsls	r2, r2, #13
    99e2:	4313      	orrs	r3, r2
    99e4:	617b      	str	r3, [r7, #20]
    99e6:	e00a      	b.n	99fe <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    99e8:	683b      	ldr	r3, [r7, #0]
    99ea:	685b      	ldr	r3, [r3, #4]
    99ec:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    99ee:	693a      	ldr	r2, [r7, #16]
    99f0:	4313      	orrs	r3, r2
    99f2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    99f4:	697b      	ldr	r3, [r7, #20]
    99f6:	2280      	movs	r2, #128	; 0x80
    99f8:	0292      	lsls	r2, r2, #10
    99fa:	4313      	orrs	r3, r2
    99fc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    99fe:	683b      	ldr	r3, [r7, #0]
    9a00:	7a1b      	ldrb	r3, [r3, #8]
    9a02:	2b00      	cmp	r3, #0
    9a04:	d004      	beq.n	9a10 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    9a06:	697b      	ldr	r3, [r7, #20]
    9a08:	2280      	movs	r2, #128	; 0x80
    9a0a:	0392      	lsls	r2, r2, #14
    9a0c:	4313      	orrs	r3, r2
    9a0e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    9a10:	46c0      	nop			; (mov r8, r8)
    9a12:	4b13      	ldr	r3, [pc, #76]	; (9a60 <system_gclk_gen_set_config+0x110>)
    9a14:	4798      	blx	r3
    9a16:	1e03      	subs	r3, r0, #0
    9a18:	d1fb      	bne.n	9a12 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    9a1a:	4b12      	ldr	r3, [pc, #72]	; (9a64 <system_gclk_gen_set_config+0x114>)
    9a1c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9a1e:	4a12      	ldr	r2, [pc, #72]	; (9a68 <system_gclk_gen_set_config+0x118>)
    9a20:	1dfb      	adds	r3, r7, #7
    9a22:	781b      	ldrb	r3, [r3, #0]
    9a24:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    9a26:	46c0      	nop			; (mov r8, r8)
    9a28:	4b0d      	ldr	r3, [pc, #52]	; (9a60 <system_gclk_gen_set_config+0x110>)
    9a2a:	4798      	blx	r3
    9a2c:	1e03      	subs	r3, r0, #0
    9a2e:	d1fb      	bne.n	9a28 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    9a30:	4b0e      	ldr	r3, [pc, #56]	; (9a6c <system_gclk_gen_set_config+0x11c>)
    9a32:	693a      	ldr	r2, [r7, #16]
    9a34:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    9a36:	46c0      	nop			; (mov r8, r8)
    9a38:	4b09      	ldr	r3, [pc, #36]	; (9a60 <system_gclk_gen_set_config+0x110>)
    9a3a:	4798      	blx	r3
    9a3c:	1e03      	subs	r3, r0, #0
    9a3e:	d1fb      	bne.n	9a38 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    9a40:	4b0a      	ldr	r3, [pc, #40]	; (9a6c <system_gclk_gen_set_config+0x11c>)
    9a42:	4a0a      	ldr	r2, [pc, #40]	; (9a6c <system_gclk_gen_set_config+0x11c>)
    9a44:	6851      	ldr	r1, [r2, #4]
    9a46:	2280      	movs	r2, #128	; 0x80
    9a48:	0252      	lsls	r2, r2, #9
    9a4a:	4011      	ands	r1, r2
    9a4c:	697a      	ldr	r2, [r7, #20]
    9a4e:	430a      	orrs	r2, r1
    9a50:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    9a52:	4b07      	ldr	r3, [pc, #28]	; (9a70 <system_gclk_gen_set_config+0x120>)
    9a54:	4798      	blx	r3
}
    9a56:	46c0      	nop			; (mov r8, r8)
    9a58:	46bd      	mov	sp, r7
    9a5a:	b006      	add	sp, #24
    9a5c:	bd80      	pop	{r7, pc}
    9a5e:	46c0      	nop			; (mov r8, r8)
    9a60:	00009901 	.word	0x00009901
    9a64:	000098d9 	.word	0x000098d9
    9a68:	40000c08 	.word	0x40000c08
    9a6c:	40000c00 	.word	0x40000c00
    9a70:	000098ed 	.word	0x000098ed

00009a74 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    9a74:	b580      	push	{r7, lr}
    9a76:	b082      	sub	sp, #8
    9a78:	af00      	add	r7, sp, #0
    9a7a:	0002      	movs	r2, r0
    9a7c:	1dfb      	adds	r3, r7, #7
    9a7e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    9a80:	46c0      	nop			; (mov r8, r8)
    9a82:	4b0e      	ldr	r3, [pc, #56]	; (9abc <system_gclk_gen_enable+0x48>)
    9a84:	4798      	blx	r3
    9a86:	1e03      	subs	r3, r0, #0
    9a88:	d1fb      	bne.n	9a82 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    9a8a:	4b0d      	ldr	r3, [pc, #52]	; (9ac0 <system_gclk_gen_enable+0x4c>)
    9a8c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9a8e:	4a0d      	ldr	r2, [pc, #52]	; (9ac4 <system_gclk_gen_enable+0x50>)
    9a90:	1dfb      	adds	r3, r7, #7
    9a92:	781b      	ldrb	r3, [r3, #0]
    9a94:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9a96:	46c0      	nop			; (mov r8, r8)
    9a98:	4b08      	ldr	r3, [pc, #32]	; (9abc <system_gclk_gen_enable+0x48>)
    9a9a:	4798      	blx	r3
    9a9c:	1e03      	subs	r3, r0, #0
    9a9e:	d1fb      	bne.n	9a98 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    9aa0:	4b09      	ldr	r3, [pc, #36]	; (9ac8 <system_gclk_gen_enable+0x54>)
    9aa2:	4a09      	ldr	r2, [pc, #36]	; (9ac8 <system_gclk_gen_enable+0x54>)
    9aa4:	6852      	ldr	r2, [r2, #4]
    9aa6:	2180      	movs	r1, #128	; 0x80
    9aa8:	0249      	lsls	r1, r1, #9
    9aaa:	430a      	orrs	r2, r1
    9aac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    9aae:	4b07      	ldr	r3, [pc, #28]	; (9acc <system_gclk_gen_enable+0x58>)
    9ab0:	4798      	blx	r3
}
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	46bd      	mov	sp, r7
    9ab6:	b002      	add	sp, #8
    9ab8:	bd80      	pop	{r7, pc}
    9aba:	46c0      	nop			; (mov r8, r8)
    9abc:	00009901 	.word	0x00009901
    9ac0:	000098d9 	.word	0x000098d9
    9ac4:	40000c04 	.word	0x40000c04
    9ac8:	40000c00 	.word	0x40000c00
    9acc:	000098ed 	.word	0x000098ed

00009ad0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b086      	sub	sp, #24
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	0002      	movs	r2, r0
    9ad8:	1dfb      	adds	r3, r7, #7
    9ada:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    9adc:	46c0      	nop			; (mov r8, r8)
    9ade:	4b2a      	ldr	r3, [pc, #168]	; (9b88 <system_gclk_gen_get_hz+0xb8>)
    9ae0:	4798      	blx	r3
    9ae2:	1e03      	subs	r3, r0, #0
    9ae4:	d1fb      	bne.n	9ade <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    9ae6:	4b29      	ldr	r3, [pc, #164]	; (9b8c <system_gclk_gen_get_hz+0xbc>)
    9ae8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9aea:	4a29      	ldr	r2, [pc, #164]	; (9b90 <system_gclk_gen_get_hz+0xc0>)
    9aec:	1dfb      	adds	r3, r7, #7
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9af2:	46c0      	nop			; (mov r8, r8)
    9af4:	4b24      	ldr	r3, [pc, #144]	; (9b88 <system_gclk_gen_get_hz+0xb8>)
    9af6:	4798      	blx	r3
    9af8:	1e03      	subs	r3, r0, #0
    9afa:	d1fb      	bne.n	9af4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9afc:	4b25      	ldr	r3, [pc, #148]	; (9b94 <system_gclk_gen_get_hz+0xc4>)
    9afe:	685b      	ldr	r3, [r3, #4]
    9b00:	04db      	lsls	r3, r3, #19
    9b02:	0edb      	lsrs	r3, r3, #27
    9b04:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    9b06:	0018      	movs	r0, r3
    9b08:	4b23      	ldr	r3, [pc, #140]	; (9b98 <system_gclk_gen_get_hz+0xc8>)
    9b0a:	4798      	blx	r3
    9b0c:	0003      	movs	r3, r0
    9b0e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9b10:	4a1f      	ldr	r2, [pc, #124]	; (9b90 <system_gclk_gen_get_hz+0xc0>)
    9b12:	1dfb      	adds	r3, r7, #7
    9b14:	781b      	ldrb	r3, [r3, #0]
    9b16:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    9b18:	4b1e      	ldr	r3, [pc, #120]	; (9b94 <system_gclk_gen_get_hz+0xc4>)
    9b1a:	685b      	ldr	r3, [r3, #4]
    9b1c:	02db      	lsls	r3, r3, #11
    9b1e:	0fdb      	lsrs	r3, r3, #31
    9b20:	b2da      	uxtb	r2, r3
    9b22:	2313      	movs	r3, #19
    9b24:	18fb      	adds	r3, r7, r3
    9b26:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9b28:	4a1c      	ldr	r2, [pc, #112]	; (9b9c <system_gclk_gen_get_hz+0xcc>)
    9b2a:	1dfb      	adds	r3, r7, #7
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9b30:	46c0      	nop			; (mov r8, r8)
    9b32:	4b15      	ldr	r3, [pc, #84]	; (9b88 <system_gclk_gen_get_hz+0xb8>)
    9b34:	4798      	blx	r3
    9b36:	1e03      	subs	r3, r0, #0
    9b38:	d1fb      	bne.n	9b32 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9b3a:	4b16      	ldr	r3, [pc, #88]	; (9b94 <system_gclk_gen_get_hz+0xc4>)
    9b3c:	689b      	ldr	r3, [r3, #8]
    9b3e:	021b      	lsls	r3, r3, #8
    9b40:	0c1b      	lsrs	r3, r3, #16
    9b42:	b29b      	uxth	r3, r3
    9b44:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    9b46:	4b16      	ldr	r3, [pc, #88]	; (9ba0 <system_gclk_gen_get_hz+0xd0>)
    9b48:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    9b4a:	2313      	movs	r3, #19
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	781b      	ldrb	r3, [r3, #0]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d109      	bne.n	9b68 <system_gclk_gen_get_hz+0x98>
    9b54:	68fb      	ldr	r3, [r7, #12]
    9b56:	2b01      	cmp	r3, #1
    9b58:	d906      	bls.n	9b68 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    9b5a:	4b12      	ldr	r3, [pc, #72]	; (9ba4 <system_gclk_gen_get_hz+0xd4>)
    9b5c:	68f9      	ldr	r1, [r7, #12]
    9b5e:	6978      	ldr	r0, [r7, #20]
    9b60:	4798      	blx	r3
    9b62:	0003      	movs	r3, r0
    9b64:	617b      	str	r3, [r7, #20]
    9b66:	e00a      	b.n	9b7e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    9b68:	2313      	movs	r3, #19
    9b6a:	18fb      	adds	r3, r7, r3
    9b6c:	781b      	ldrb	r3, [r3, #0]
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d005      	beq.n	9b7e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    9b72:	68fb      	ldr	r3, [r7, #12]
    9b74:	3301      	adds	r3, #1
    9b76:	697a      	ldr	r2, [r7, #20]
    9b78:	40da      	lsrs	r2, r3
    9b7a:	0013      	movs	r3, r2
    9b7c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    9b7e:	697b      	ldr	r3, [r7, #20]
}
    9b80:	0018      	movs	r0, r3
    9b82:	46bd      	mov	sp, r7
    9b84:	b006      	add	sp, #24
    9b86:	bd80      	pop	{r7, pc}
    9b88:	00009901 	.word	0x00009901
    9b8c:	000098d9 	.word	0x000098d9
    9b90:	40000c04 	.word	0x40000c04
    9b94:	40000c00 	.word	0x40000c00
    9b98:	000090f9 	.word	0x000090f9
    9b9c:	40000c08 	.word	0x40000c08
    9ba0:	000098ed 	.word	0x000098ed
    9ba4:	0000a1b1 	.word	0x0000a1b1

00009ba8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    9ba8:	b580      	push	{r7, lr}
    9baa:	b084      	sub	sp, #16
    9bac:	af00      	add	r7, sp, #0
    9bae:	0002      	movs	r2, r0
    9bb0:	6039      	str	r1, [r7, #0]
    9bb2:	1dfb      	adds	r3, r7, #7
    9bb4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    9bb6:	1dfb      	adds	r3, r7, #7
    9bb8:	781b      	ldrb	r3, [r3, #0]
    9bba:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9bbc:	683b      	ldr	r3, [r7, #0]
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	021b      	lsls	r3, r3, #8
    9bc2:	001a      	movs	r2, r3
    9bc4:	68fb      	ldr	r3, [r7, #12]
    9bc6:	4313      	orrs	r3, r2
    9bc8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    9bca:	1dfb      	adds	r3, r7, #7
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	0018      	movs	r0, r3
    9bd0:	4b04      	ldr	r3, [pc, #16]	; (9be4 <system_gclk_chan_set_config+0x3c>)
    9bd2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9bd4:	4b04      	ldr	r3, [pc, #16]	; (9be8 <system_gclk_chan_set_config+0x40>)
    9bd6:	68fa      	ldr	r2, [r7, #12]
    9bd8:	b292      	uxth	r2, r2
    9bda:	805a      	strh	r2, [r3, #2]
}
    9bdc:	46c0      	nop			; (mov r8, r8)
    9bde:	46bd      	mov	sp, r7
    9be0:	b004      	add	sp, #16
    9be2:	bd80      	pop	{r7, pc}
    9be4:	00009c35 	.word	0x00009c35
    9be8:	40000c00 	.word	0x40000c00

00009bec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9bec:	b580      	push	{r7, lr}
    9bee:	b082      	sub	sp, #8
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	0002      	movs	r2, r0
    9bf4:	1dfb      	adds	r3, r7, #7
    9bf6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9bf8:	4b0a      	ldr	r3, [pc, #40]	; (9c24 <system_gclk_chan_enable+0x38>)
    9bfa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9bfc:	4a0a      	ldr	r2, [pc, #40]	; (9c28 <system_gclk_chan_enable+0x3c>)
    9bfe:	1dfb      	adds	r3, r7, #7
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9c04:	4909      	ldr	r1, [pc, #36]	; (9c2c <system_gclk_chan_enable+0x40>)
    9c06:	4b09      	ldr	r3, [pc, #36]	; (9c2c <system_gclk_chan_enable+0x40>)
    9c08:	885b      	ldrh	r3, [r3, #2]
    9c0a:	b29b      	uxth	r3, r3
    9c0c:	2280      	movs	r2, #128	; 0x80
    9c0e:	01d2      	lsls	r2, r2, #7
    9c10:	4313      	orrs	r3, r2
    9c12:	b29b      	uxth	r3, r3
    9c14:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    9c16:	4b06      	ldr	r3, [pc, #24]	; (9c30 <system_gclk_chan_enable+0x44>)
    9c18:	4798      	blx	r3
}
    9c1a:	46c0      	nop			; (mov r8, r8)
    9c1c:	46bd      	mov	sp, r7
    9c1e:	b002      	add	sp, #8
    9c20:	bd80      	pop	{r7, pc}
    9c22:	46c0      	nop			; (mov r8, r8)
    9c24:	000098d9 	.word	0x000098d9
    9c28:	40000c02 	.word	0x40000c02
    9c2c:	40000c00 	.word	0x40000c00
    9c30:	000098ed 	.word	0x000098ed

00009c34 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    9c34:	b580      	push	{r7, lr}
    9c36:	b084      	sub	sp, #16
    9c38:	af00      	add	r7, sp, #0
    9c3a:	0002      	movs	r2, r0
    9c3c:	1dfb      	adds	r3, r7, #7
    9c3e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9c40:	4b1c      	ldr	r3, [pc, #112]	; (9cb4 <system_gclk_chan_disable+0x80>)
    9c42:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9c44:	4a1c      	ldr	r2, [pc, #112]	; (9cb8 <system_gclk_chan_disable+0x84>)
    9c46:	1dfb      	adds	r3, r7, #7
    9c48:	781b      	ldrb	r3, [r3, #0]
    9c4a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9c4c:	4b1b      	ldr	r3, [pc, #108]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c4e:	885b      	ldrh	r3, [r3, #2]
    9c50:	051b      	lsls	r3, r3, #20
    9c52:	0f1b      	lsrs	r3, r3, #28
    9c54:	b2db      	uxtb	r3, r3
    9c56:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    9c58:	4a18      	ldr	r2, [pc, #96]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c5a:	8853      	ldrh	r3, [r2, #2]
    9c5c:	4918      	ldr	r1, [pc, #96]	; (9cc0 <system_gclk_chan_disable+0x8c>)
    9c5e:	400b      	ands	r3, r1
    9c60:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    9c62:	4a16      	ldr	r2, [pc, #88]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c64:	4b15      	ldr	r3, [pc, #84]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c66:	885b      	ldrh	r3, [r3, #2]
    9c68:	b29b      	uxth	r3, r3
    9c6a:	4916      	ldr	r1, [pc, #88]	; (9cc4 <system_gclk_chan_disable+0x90>)
    9c6c:	400b      	ands	r3, r1
    9c6e:	b29b      	uxth	r3, r3
    9c70:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    9c72:	46c0      	nop			; (mov r8, r8)
    9c74:	4b11      	ldr	r3, [pc, #68]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c76:	885b      	ldrh	r3, [r3, #2]
    9c78:	b29b      	uxth	r3, r3
    9c7a:	001a      	movs	r2, r3
    9c7c:	2380      	movs	r3, #128	; 0x80
    9c7e:	01db      	lsls	r3, r3, #7
    9c80:	4013      	ands	r3, r2
    9c82:	d1f7      	bne.n	9c74 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    9c84:	4a0d      	ldr	r2, [pc, #52]	; (9cbc <system_gclk_chan_disable+0x88>)
    9c86:	68fb      	ldr	r3, [r7, #12]
    9c88:	b2db      	uxtb	r3, r3
    9c8a:	1c19      	adds	r1, r3, #0
    9c8c:	230f      	movs	r3, #15
    9c8e:	400b      	ands	r3, r1
    9c90:	b2d9      	uxtb	r1, r3
    9c92:	8853      	ldrh	r3, [r2, #2]
    9c94:	1c08      	adds	r0, r1, #0
    9c96:	210f      	movs	r1, #15
    9c98:	4001      	ands	r1, r0
    9c9a:	0208      	lsls	r0, r1, #8
    9c9c:	4908      	ldr	r1, [pc, #32]	; (9cc0 <system_gclk_chan_disable+0x8c>)
    9c9e:	400b      	ands	r3, r1
    9ca0:	1c19      	adds	r1, r3, #0
    9ca2:	1c03      	adds	r3, r0, #0
    9ca4:	430b      	orrs	r3, r1
    9ca6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    9ca8:	4b07      	ldr	r3, [pc, #28]	; (9cc8 <system_gclk_chan_disable+0x94>)
    9caa:	4798      	blx	r3
}
    9cac:	46c0      	nop			; (mov r8, r8)
    9cae:	46bd      	mov	sp, r7
    9cb0:	b004      	add	sp, #16
    9cb2:	bd80      	pop	{r7, pc}
    9cb4:	000098d9 	.word	0x000098d9
    9cb8:	40000c02 	.word	0x40000c02
    9cbc:	40000c00 	.word	0x40000c00
    9cc0:	fffff0ff 	.word	0xfffff0ff
    9cc4:	ffffbfff 	.word	0xffffbfff
    9cc8:	000098ed 	.word	0x000098ed

00009ccc <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    9ccc:	b580      	push	{r7, lr}
    9cce:	b082      	sub	sp, #8
    9cd0:	af00      	add	r7, sp, #0
    9cd2:	0002      	movs	r2, r0
    9cd4:	1dfb      	adds	r3, r7, #7
    9cd6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9cd8:	4b09      	ldr	r3, [pc, #36]	; (9d00 <system_gclk_chan_lock+0x34>)
    9cda:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9cdc:	4a09      	ldr	r2, [pc, #36]	; (9d04 <system_gclk_chan_lock+0x38>)
    9cde:	1dfb      	adds	r3, r7, #7
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    9ce4:	4a08      	ldr	r2, [pc, #32]	; (9d08 <system_gclk_chan_lock+0x3c>)
    9ce6:	4b08      	ldr	r3, [pc, #32]	; (9d08 <system_gclk_chan_lock+0x3c>)
    9ce8:	885b      	ldrh	r3, [r3, #2]
    9cea:	b29b      	uxth	r3, r3
    9cec:	4907      	ldr	r1, [pc, #28]	; (9d0c <system_gclk_chan_lock+0x40>)
    9cee:	430b      	orrs	r3, r1
    9cf0:	b29b      	uxth	r3, r3
    9cf2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    9cf4:	4b06      	ldr	r3, [pc, #24]	; (9d10 <system_gclk_chan_lock+0x44>)
    9cf6:	4798      	blx	r3
}
    9cf8:	46c0      	nop			; (mov r8, r8)
    9cfa:	46bd      	mov	sp, r7
    9cfc:	b002      	add	sp, #8
    9cfe:	bd80      	pop	{r7, pc}
    9d00:	000098d9 	.word	0x000098d9
    9d04:	40000c02 	.word	0x40000c02
    9d08:	40000c00 	.word	0x40000c00
    9d0c:	ffffc000 	.word	0xffffc000
    9d10:	000098ed 	.word	0x000098ed

00009d14 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    9d14:	b580      	push	{r7, lr}
    9d16:	b084      	sub	sp, #16
    9d18:	af00      	add	r7, sp, #0
    9d1a:	0002      	movs	r2, r0
    9d1c:	1dfb      	adds	r3, r7, #7
    9d1e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    9d20:	4b0d      	ldr	r3, [pc, #52]	; (9d58 <system_gclk_chan_get_hz+0x44>)
    9d22:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9d24:	4a0d      	ldr	r2, [pc, #52]	; (9d5c <system_gclk_chan_get_hz+0x48>)
    9d26:	1dfb      	adds	r3, r7, #7
    9d28:	781b      	ldrb	r3, [r3, #0]
    9d2a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    9d2c:	4b0c      	ldr	r3, [pc, #48]	; (9d60 <system_gclk_chan_get_hz+0x4c>)
    9d2e:	885b      	ldrh	r3, [r3, #2]
    9d30:	051b      	lsls	r3, r3, #20
    9d32:	0f1b      	lsrs	r3, r3, #28
    9d34:	b2da      	uxtb	r2, r3
    9d36:	230f      	movs	r3, #15
    9d38:	18fb      	adds	r3, r7, r3
    9d3a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    9d3c:	4b09      	ldr	r3, [pc, #36]	; (9d64 <system_gclk_chan_get_hz+0x50>)
    9d3e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9d40:	230f      	movs	r3, #15
    9d42:	18fb      	adds	r3, r7, r3
    9d44:	781b      	ldrb	r3, [r3, #0]
    9d46:	0018      	movs	r0, r3
    9d48:	4b07      	ldr	r3, [pc, #28]	; (9d68 <system_gclk_chan_get_hz+0x54>)
    9d4a:	4798      	blx	r3
    9d4c:	0003      	movs	r3, r0
}
    9d4e:	0018      	movs	r0, r3
    9d50:	46bd      	mov	sp, r7
    9d52:	b004      	add	sp, #16
    9d54:	bd80      	pop	{r7, pc}
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	000098d9 	.word	0x000098d9
    9d5c:	40000c02 	.word	0x40000c02
    9d60:	40000c00 	.word	0x40000c00
    9d64:	000098ed 	.word	0x000098ed
    9d68:	00009ad1 	.word	0x00009ad1

00009d6c <system_pinmux_get_group_from_gpio_pin>:
{
    9d6c:	b580      	push	{r7, lr}
    9d6e:	b084      	sub	sp, #16
    9d70:	af00      	add	r7, sp, #0
    9d72:	0002      	movs	r2, r0
    9d74:	1dfb      	adds	r3, r7, #7
    9d76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9d78:	230f      	movs	r3, #15
    9d7a:	18fb      	adds	r3, r7, r3
    9d7c:	1dfa      	adds	r2, r7, #7
    9d7e:	7812      	ldrb	r2, [r2, #0]
    9d80:	09d2      	lsrs	r2, r2, #7
    9d82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9d84:	230e      	movs	r3, #14
    9d86:	18fb      	adds	r3, r7, r3
    9d88:	1dfa      	adds	r2, r7, #7
    9d8a:	7812      	ldrb	r2, [r2, #0]
    9d8c:	0952      	lsrs	r2, r2, #5
    9d8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9d90:	4b0d      	ldr	r3, [pc, #52]	; (9dc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9d92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9d94:	230f      	movs	r3, #15
    9d96:	18fb      	adds	r3, r7, r3
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d10f      	bne.n	9dbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9d9e:	230f      	movs	r3, #15
    9da0:	18fb      	adds	r3, r7, r3
    9da2:	781b      	ldrb	r3, [r3, #0]
    9da4:	009b      	lsls	r3, r3, #2
    9da6:	2210      	movs	r2, #16
    9da8:	4694      	mov	ip, r2
    9daa:	44bc      	add	ip, r7
    9dac:	4463      	add	r3, ip
    9dae:	3b08      	subs	r3, #8
    9db0:	681a      	ldr	r2, [r3, #0]
    9db2:	230e      	movs	r3, #14
    9db4:	18fb      	adds	r3, r7, r3
    9db6:	781b      	ldrb	r3, [r3, #0]
    9db8:	01db      	lsls	r3, r3, #7
    9dba:	18d3      	adds	r3, r2, r3
    9dbc:	e000      	b.n	9dc0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9dbe:	2300      	movs	r3, #0
}
    9dc0:	0018      	movs	r0, r3
    9dc2:	46bd      	mov	sp, r7
    9dc4:	b004      	add	sp, #16
    9dc6:	bd80      	pop	{r7, pc}
    9dc8:	41004400 	.word	0x41004400

00009dcc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    9dcc:	b580      	push	{r7, lr}
    9dce:	b088      	sub	sp, #32
    9dd0:	af00      	add	r7, sp, #0
    9dd2:	60f8      	str	r0, [r7, #12]
    9dd4:	60b9      	str	r1, [r7, #8]
    9dd6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    9dd8:	2300      	movs	r3, #0
    9dda:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9ddc:	687b      	ldr	r3, [r7, #4]
    9dde:	78db      	ldrb	r3, [r3, #3]
    9de0:	2201      	movs	r2, #1
    9de2:	4053      	eors	r3, r2
    9de4:	b2db      	uxtb	r3, r3
    9de6:	2b00      	cmp	r3, #0
    9de8:	d035      	beq.n	9e56 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	2b80      	cmp	r3, #128	; 0x80
    9df0:	d00b      	beq.n	9e0a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    9df2:	69fb      	ldr	r3, [r7, #28]
    9df4:	2280      	movs	r2, #128	; 0x80
    9df6:	0252      	lsls	r2, r2, #9
    9df8:	4313      	orrs	r3, r2
    9dfa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	061b      	lsls	r3, r3, #24
    9e02:	001a      	movs	r2, r3
    9e04:	69fb      	ldr	r3, [r7, #28]
    9e06:	4313      	orrs	r3, r2
    9e08:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	785b      	ldrb	r3, [r3, #1]
    9e0e:	2b00      	cmp	r3, #0
    9e10:	d003      	beq.n	9e1a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9e12:	687b      	ldr	r3, [r7, #4]
    9e14:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9e16:	2b02      	cmp	r3, #2
    9e18:	d110      	bne.n	9e3c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9e1a:	69fb      	ldr	r3, [r7, #28]
    9e1c:	2280      	movs	r2, #128	; 0x80
    9e1e:	0292      	lsls	r2, r2, #10
    9e20:	4313      	orrs	r3, r2
    9e22:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	789b      	ldrb	r3, [r3, #2]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d004      	beq.n	9e36 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9e2c:	69fb      	ldr	r3, [r7, #28]
    9e2e:	2280      	movs	r2, #128	; 0x80
    9e30:	02d2      	lsls	r2, r2, #11
    9e32:	4313      	orrs	r3, r2
    9e34:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9e36:	68fb      	ldr	r3, [r7, #12]
    9e38:	68ba      	ldr	r2, [r7, #8]
    9e3a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	785b      	ldrb	r3, [r3, #1]
    9e40:	2b01      	cmp	r3, #1
    9e42:	d003      	beq.n	9e4c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9e44:	687b      	ldr	r3, [r7, #4]
    9e46:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9e48:	2b02      	cmp	r3, #2
    9e4a:	d107      	bne.n	9e5c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9e4c:	69fb      	ldr	r3, [r7, #28]
    9e4e:	4a22      	ldr	r2, [pc, #136]	; (9ed8 <_system_pinmux_config+0x10c>)
    9e50:	4013      	ands	r3, r2
    9e52:	61fb      	str	r3, [r7, #28]
    9e54:	e002      	b.n	9e5c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    9e56:	68fb      	ldr	r3, [r7, #12]
    9e58:	68ba      	ldr	r2, [r7, #8]
    9e5a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9e5c:	68bb      	ldr	r3, [r7, #8]
    9e5e:	041b      	lsls	r3, r3, #16
    9e60:	0c1b      	lsrs	r3, r3, #16
    9e62:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9e64:	68bb      	ldr	r3, [r7, #8]
    9e66:	0c1b      	lsrs	r3, r3, #16
    9e68:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9e6a:	69ba      	ldr	r2, [r7, #24]
    9e6c:	69fb      	ldr	r3, [r7, #28]
    9e6e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9e70:	22a0      	movs	r2, #160	; 0xa0
    9e72:	05d2      	lsls	r2, r2, #23
    9e74:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9e76:	68fb      	ldr	r3, [r7, #12]
    9e78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9e7a:	697a      	ldr	r2, [r7, #20]
    9e7c:	69fb      	ldr	r3, [r7, #28]
    9e7e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9e80:	22d0      	movs	r2, #208	; 0xd0
    9e82:	0612      	lsls	r2, r2, #24
    9e84:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9e86:	68fb      	ldr	r3, [r7, #12]
    9e88:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	78db      	ldrb	r3, [r3, #3]
    9e8e:	2201      	movs	r2, #1
    9e90:	4053      	eors	r3, r2
    9e92:	b2db      	uxtb	r3, r3
    9e94:	2b00      	cmp	r3, #0
    9e96:	d01a      	beq.n	9ece <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    9e98:	69fa      	ldr	r2, [r7, #28]
    9e9a:	2380      	movs	r3, #128	; 0x80
    9e9c:	02db      	lsls	r3, r3, #11
    9e9e:	4013      	ands	r3, r2
    9ea0:	d00a      	beq.n	9eb8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    9ea2:	687b      	ldr	r3, [r7, #4]
    9ea4:	789b      	ldrb	r3, [r3, #2]
    9ea6:	2b01      	cmp	r3, #1
    9ea8:	d103      	bne.n	9eb2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    9eaa:	68fb      	ldr	r3, [r7, #12]
    9eac:	68ba      	ldr	r2, [r7, #8]
    9eae:	619a      	str	r2, [r3, #24]
    9eb0:	e002      	b.n	9eb8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    9eb2:	68fb      	ldr	r3, [r7, #12]
    9eb4:	68ba      	ldr	r2, [r7, #8]
    9eb6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	785b      	ldrb	r3, [r3, #1]
    9ebc:	2b01      	cmp	r3, #1
    9ebe:	d003      	beq.n	9ec8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9ec4:	2b02      	cmp	r3, #2
    9ec6:	d102      	bne.n	9ece <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    9ec8:	68fb      	ldr	r3, [r7, #12]
    9eca:	68ba      	ldr	r2, [r7, #8]
    9ecc:	609a      	str	r2, [r3, #8]
		}
	}
}
    9ece:	46c0      	nop			; (mov r8, r8)
    9ed0:	46bd      	mov	sp, r7
    9ed2:	b008      	add	sp, #32
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	46c0      	nop			; (mov r8, r8)
    9ed8:	fffbffff 	.word	0xfffbffff

00009edc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b084      	sub	sp, #16
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	0002      	movs	r2, r0
    9ee4:	6039      	str	r1, [r7, #0]
    9ee6:	1dfb      	adds	r3, r7, #7
    9ee8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9eea:	1dfb      	adds	r3, r7, #7
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	0018      	movs	r0, r3
    9ef0:	4b0a      	ldr	r3, [pc, #40]	; (9f1c <system_pinmux_pin_set_config+0x40>)
    9ef2:	4798      	blx	r3
    9ef4:	0003      	movs	r3, r0
    9ef6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9ef8:	1dfb      	adds	r3, r7, #7
    9efa:	781b      	ldrb	r3, [r3, #0]
    9efc:	221f      	movs	r2, #31
    9efe:	4013      	ands	r3, r2
    9f00:	2201      	movs	r2, #1
    9f02:	409a      	lsls	r2, r3
    9f04:	0013      	movs	r3, r2
    9f06:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    9f08:	683a      	ldr	r2, [r7, #0]
    9f0a:	68b9      	ldr	r1, [r7, #8]
    9f0c:	68fb      	ldr	r3, [r7, #12]
    9f0e:	0018      	movs	r0, r3
    9f10:	4b03      	ldr	r3, [pc, #12]	; (9f20 <system_pinmux_pin_set_config+0x44>)
    9f12:	4798      	blx	r3
}
    9f14:	46c0      	nop			; (mov r8, r8)
    9f16:	46bd      	mov	sp, r7
    9f18:	b004      	add	sp, #16
    9f1a:	bd80      	pop	{r7, pc}
    9f1c:	00009d6d 	.word	0x00009d6d
    9f20:	00009dcd 	.word	0x00009dcd

00009f24 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	af00      	add	r7, sp, #0
	return;
    9f28:	46c0      	nop			; (mov r8, r8)
}
    9f2a:	46bd      	mov	sp, r7
    9f2c:	bd80      	pop	{r7, pc}
	...

00009f30 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    9f30:	b580      	push	{r7, lr}
    9f32:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9f34:	4b06      	ldr	r3, [pc, #24]	; (9f50 <system_init+0x20>)
    9f36:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9f38:	4b06      	ldr	r3, [pc, #24]	; (9f54 <system_init+0x24>)
    9f3a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9f3c:	4b06      	ldr	r3, [pc, #24]	; (9f58 <system_init+0x28>)
    9f3e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    9f40:	4b06      	ldr	r3, [pc, #24]	; (9f5c <system_init+0x2c>)
    9f42:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9f44:	4b06      	ldr	r3, [pc, #24]	; (9f60 <system_init+0x30>)
    9f46:	4798      	blx	r3
}
    9f48:	46c0      	nop			; (mov r8, r8)
    9f4a:	46bd      	mov	sp, r7
    9f4c:	bd80      	pop	{r7, pc}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	000095d1 	.word	0x000095d1
    9f54:	00008d0d 	.word	0x00008d0d
    9f58:	00009f25 	.word	0x00009f25
    9f5c:	00009f25 	.word	0x00009f25
    9f60:	00009f25 	.word	0x00009f25

00009f64 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	b082      	sub	sp, #8
    9f68:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9f6a:	4b2f      	ldr	r3, [pc, #188]	; (a028 <Reset_Handler+0xc4>)
    9f6c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9f6e:	4b2f      	ldr	r3, [pc, #188]	; (a02c <Reset_Handler+0xc8>)
    9f70:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9f72:	687a      	ldr	r2, [r7, #4]
    9f74:	683b      	ldr	r3, [r7, #0]
    9f76:	429a      	cmp	r2, r3
    9f78:	d00c      	beq.n	9f94 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9f7a:	e007      	b.n	9f8c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9f7c:	683b      	ldr	r3, [r7, #0]
    9f7e:	1d1a      	adds	r2, r3, #4
    9f80:	603a      	str	r2, [r7, #0]
    9f82:	687a      	ldr	r2, [r7, #4]
    9f84:	1d11      	adds	r1, r2, #4
    9f86:	6079      	str	r1, [r7, #4]
    9f88:	6812      	ldr	r2, [r2, #0]
    9f8a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    9f8c:	683a      	ldr	r2, [r7, #0]
    9f8e:	4b28      	ldr	r3, [pc, #160]	; (a030 <Reset_Handler+0xcc>)
    9f90:	429a      	cmp	r2, r3
    9f92:	d3f3      	bcc.n	9f7c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9f94:	4b27      	ldr	r3, [pc, #156]	; (a034 <Reset_Handler+0xd0>)
    9f96:	603b      	str	r3, [r7, #0]
    9f98:	e004      	b.n	9fa4 <Reset_Handler+0x40>
                *pDest++ = 0;
    9f9a:	683b      	ldr	r3, [r7, #0]
    9f9c:	1d1a      	adds	r2, r3, #4
    9f9e:	603a      	str	r2, [r7, #0]
    9fa0:	2200      	movs	r2, #0
    9fa2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    9fa4:	683a      	ldr	r2, [r7, #0]
    9fa6:	4b24      	ldr	r3, [pc, #144]	; (a038 <Reset_Handler+0xd4>)
    9fa8:	429a      	cmp	r2, r3
    9faa:	d3f6      	bcc.n	9f9a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    9fac:	4b23      	ldr	r3, [pc, #140]	; (a03c <Reset_Handler+0xd8>)
    9fae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9fb0:	4b23      	ldr	r3, [pc, #140]	; (a040 <Reset_Handler+0xdc>)
    9fb2:	687a      	ldr	r2, [r7, #4]
    9fb4:	21ff      	movs	r1, #255	; 0xff
    9fb6:	438a      	bics	r2, r1
    9fb8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9fba:	4a22      	ldr	r2, [pc, #136]	; (a044 <Reset_Handler+0xe0>)
    9fbc:	2390      	movs	r3, #144	; 0x90
    9fbe:	005b      	lsls	r3, r3, #1
    9fc0:	2102      	movs	r1, #2
    9fc2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9fc4:	4a20      	ldr	r2, [pc, #128]	; (a048 <Reset_Handler+0xe4>)
    9fc6:	78d3      	ldrb	r3, [r2, #3]
    9fc8:	2103      	movs	r1, #3
    9fca:	438b      	bics	r3, r1
    9fcc:	1c19      	adds	r1, r3, #0
    9fce:	2302      	movs	r3, #2
    9fd0:	430b      	orrs	r3, r1
    9fd2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9fd4:	4a1c      	ldr	r2, [pc, #112]	; (a048 <Reset_Handler+0xe4>)
    9fd6:	78d3      	ldrb	r3, [r2, #3]
    9fd8:	210c      	movs	r1, #12
    9fda:	438b      	bics	r3, r1
    9fdc:	1c19      	adds	r1, r3, #0
    9fde:	2308      	movs	r3, #8
    9fe0:	430b      	orrs	r3, r1
    9fe2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9fe4:	4a19      	ldr	r2, [pc, #100]	; (a04c <Reset_Handler+0xe8>)
    9fe6:	7b93      	ldrb	r3, [r2, #14]
    9fe8:	2130      	movs	r1, #48	; 0x30
    9fea:	438b      	bics	r3, r1
    9fec:	1c19      	adds	r1, r3, #0
    9fee:	2320      	movs	r3, #32
    9ff0:	430b      	orrs	r3, r1
    9ff2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9ff4:	4a15      	ldr	r2, [pc, #84]	; (a04c <Reset_Handler+0xe8>)
    9ff6:	7b93      	ldrb	r3, [r2, #14]
    9ff8:	210c      	movs	r1, #12
    9ffa:	438b      	bics	r3, r1
    9ffc:	1c19      	adds	r1, r3, #0
    9ffe:	2308      	movs	r3, #8
    a000:	430b      	orrs	r3, r1
    a002:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a004:	4a11      	ldr	r2, [pc, #68]	; (a04c <Reset_Handler+0xe8>)
    a006:	7b93      	ldrb	r3, [r2, #14]
    a008:	2103      	movs	r1, #3
    a00a:	438b      	bics	r3, r1
    a00c:	1c19      	adds	r1, r3, #0
    a00e:	2302      	movs	r3, #2
    a010:	430b      	orrs	r3, r1
    a012:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    a014:	4a0e      	ldr	r2, [pc, #56]	; (a050 <Reset_Handler+0xec>)
    a016:	6853      	ldr	r3, [r2, #4]
    a018:	2180      	movs	r1, #128	; 0x80
    a01a:	430b      	orrs	r3, r1
    a01c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    a01e:	4b0d      	ldr	r3, [pc, #52]	; (a054 <Reset_Handler+0xf0>)
    a020:	4798      	blx	r3

        /* Branch to main function */
        main();
    a022:	4b0d      	ldr	r3, [pc, #52]	; (a058 <Reset_Handler+0xf4>)
    a024:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    a026:	e7fe      	b.n	a026 <Reset_Handler+0xc2>
    a028:	0000de8c 	.word	0x0000de8c
    a02c:	20000000 	.word	0x20000000
    a030:	20000184 	.word	0x20000184
    a034:	20000184 	.word	0x20000184
    a038:	20005530 	.word	0x20005530
    a03c:	00000000 	.word	0x00000000
    a040:	e000ed00 	.word	0xe000ed00
    a044:	41007000 	.word	0x41007000
    a048:	41005000 	.word	0x41005000
    a04c:	41004800 	.word	0x41004800
    a050:	41004000 	.word	0x41004000
    a054:	0000d075 	.word	0x0000d075
    a058:	0000a10d 	.word	0x0000a10d

0000a05c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    a05c:	b580      	push	{r7, lr}
    a05e:	af00      	add	r7, sp, #0
        while (1) {
    a060:	e7fe      	b.n	a060 <Dummy_Handler+0x4>
	...

0000a064 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    a064:	b580      	push	{r7, lr}
    a066:	b084      	sub	sp, #16
    a068:	af00      	add	r7, sp, #0
    a06a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    a06c:	4b0a      	ldr	r3, [pc, #40]	; (a098 <_sbrk+0x34>)
    a06e:	681b      	ldr	r3, [r3, #0]
    a070:	2b00      	cmp	r3, #0
    a072:	d102      	bne.n	a07a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    a074:	4b08      	ldr	r3, [pc, #32]	; (a098 <_sbrk+0x34>)
    a076:	4a09      	ldr	r2, [pc, #36]	; (a09c <_sbrk+0x38>)
    a078:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    a07a:	4b07      	ldr	r3, [pc, #28]	; (a098 <_sbrk+0x34>)
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    a080:	4b05      	ldr	r3, [pc, #20]	; (a098 <_sbrk+0x34>)
    a082:	681a      	ldr	r2, [r3, #0]
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	18d2      	adds	r2, r2, r3
    a088:	4b03      	ldr	r3, [pc, #12]	; (a098 <_sbrk+0x34>)
    a08a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    a08c:	68fb      	ldr	r3, [r7, #12]
}
    a08e:	0018      	movs	r0, r3
    a090:	46bd      	mov	sp, r7
    a092:	b004      	add	sp, #16
    a094:	bd80      	pop	{r7, pc}
    a096:	46c0      	nop			; (mov r8, r8)
    a098:	200054b8 	.word	0x200054b8
    a09c:	20007530 	.word	0x20007530

0000a0a0 <wdt_get_config_defaults>:
{
    a0a0:	b580      	push	{r7, lr}
    a0a2:	b082      	sub	sp, #8
    a0a4:	af00      	add	r7, sp, #0
    a0a6:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    a0a8:	687b      	ldr	r3, [r7, #4]
    a0aa:	2200      	movs	r2, #0
    a0ac:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	2201      	movs	r2, #1
    a0b2:	705a      	strb	r2, [r3, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    a0b4:	687b      	ldr	r3, [r7, #4]
    a0b6:	2204      	movs	r2, #4
    a0b8:	709a      	strb	r2, [r3, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    a0ba:	687b      	ldr	r3, [r7, #4]
    a0bc:	220c      	movs	r2, #12
    a0be:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	2200      	movs	r2, #0
    a0c4:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	2200      	movs	r2, #0
    a0ca:	715a      	strb	r2, [r3, #5]
}
    a0cc:	46c0      	nop			; (mov r8, r8)
    a0ce:	46bd      	mov	sp, r7
    a0d0:	b002      	add	sp, #8
    a0d2:	bd80      	pop	{r7, pc}

0000a0d4 <configure_wdt>:

#include <asf.h>
#include "task_monitor.h"

static void configure_wdt(void)
{
    a0d4:	b580      	push	{r7, lr}
    a0d6:	b082      	sub	sp, #8
    a0d8:	af00      	add	r7, sp, #0
	struct wdt_conf config_wdt;
	wdt_get_config_defaults(&config_wdt);
    a0da:	003b      	movs	r3, r7
    a0dc:	0018      	movs	r0, r3
    a0de:	4b09      	ldr	r3, [pc, #36]	; (a104 <configure_wdt+0x30>)
    a0e0:	4798      	blx	r3
	config_wdt.always_on = false; // Can be disabled TODO in final, maybe lock this in, but makes debugging difficult
    a0e2:	003b      	movs	r3, r7
    a0e4:	2200      	movs	r2, #0
    a0e6:	701a      	strb	r2, [r3, #0]
	config_wdt.clock_source = GCLK_GENERATOR_4; // 8MHz / 255 = 32.372 kHz
    a0e8:	003b      	movs	r3, r7
    a0ea:	2204      	movs	r2, #4
    a0ec:	709a      	strb	r2, [r3, #2]
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
    a0ee:	003b      	movs	r3, r7
    a0f0:	220c      	movs	r2, #12
    a0f2:	70da      	strb	r2, [r3, #3]
	wdt_set_config(&config_wdt);
    a0f4:	003b      	movs	r3, r7
    a0f6:	0018      	movs	r0, r3
    a0f8:	4b03      	ldr	r3, [pc, #12]	; (a108 <configure_wdt+0x34>)
    a0fa:	4798      	blx	r3
}
    a0fc:	46c0      	nop			; (mov r8, r8)
    a0fe:	46bd      	mov	sp, r7
    a100:	b002      	add	sp, #8
    a102:	bd80      	pop	{r7, pc}
    a104:	0000a0a1 	.word	0x0000a0a1
    a108:	00007575 	.word	0x00007575

0000a10c <main>:

int main (void)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	af00      	add	r7, sp, #0
	system_init();
    a110:	4b10      	ldr	r3, [pc, #64]	; (a154 <main+0x48>)
    a112:	4798      	blx	r3
	delay_init();
    a114:	4b10      	ldr	r3, [pc, #64]	; (a158 <main+0x4c>)
    a116:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();
    a118:	4b10      	ldr	r3, [pc, #64]	; (a15c <main+0x50>)
    a11a:	4798      	blx	r3
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    a11c:	2380      	movs	r3, #128	; 0x80
    a11e:	005b      	lsls	r3, r3, #1
    a120:	2103      	movs	r1, #3
    a122:	0018      	movs	r0, r3
    a124:	4b0e      	ldr	r3, [pc, #56]	; (a160 <main+0x54>)
    a126:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    a128:	2380      	movs	r3, #128	; 0x80
    a12a:	009b      	lsls	r3, r3, #2
    a12c:	2102      	movs	r1, #2
    a12e:	0018      	movs	r0, r3
    a130:	4b0c      	ldr	r3, [pc, #48]	; (a164 <main+0x58>)
    a132:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    a134:	2380      	movs	r3, #128	; 0x80
    a136:	009b      	lsls	r3, r3, #2
    a138:	2102      	movs	r1, #2
    a13a:	0018      	movs	r0, r3
    a13c:	4b0a      	ldr	r3, [pc, #40]	; (a168 <main+0x5c>)
    a13e:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    a140:	2380      	movs	r3, #128	; 0x80
    a142:	009b      	lsls	r3, r3, #2
    a144:	2101      	movs	r1, #1
    a146:	0018      	movs	r0, r3
    a148:	4b08      	ldr	r3, [pc, #32]	; (a16c <main+0x60>)
    a14a:	4798      	blx	r3

	vTaskStartScheduler();
    a14c:	4b08      	ldr	r3, [pc, #32]	; (a170 <main+0x64>)
    a14e:	4798      	blx	r3
	
	// Should never get here, FreeRTOS tasks should have begun
	for (;;)
    a150:	e7fe      	b.n	a150 <main+0x44>
    a152:	46c0      	nop			; (mov r8, r8)
    a154:	00009f31 	.word	0x00009f31
    a158:	000088dd 	.word	0x000088dd
    a15c:	0000a0d5 	.word	0x0000a0d5
    a160:	00004fe5 	.word	0x00004fe5
    a164:	00004589 	.word	0x00004589
    a168:	00005215 	.word	0x00005215
    a16c:	00004ef1 	.word	0x00004ef1
    a170:	00006441 	.word	0x00006441

0000a174 <vApplicationMallocFailedHook>:
/******* FreeRTOS User-Defined Hooks *******/

void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
    a174:	b580      	push	{r7, lr}
    a176:	af00      	add	r7, sp, #0
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    a178:	b672      	cpsid	i
	for (;;)
    a17a:	e7fe      	b.n	a17a <vApplicationMallocFailedHook+0x6>

0000a17c <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    a17c:	b580      	push	{r7, lr}
    a17e:	af00      	add	r7, sp, #0
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    a180:	4b02      	ldr	r3, [pc, #8]	; (a18c <vApplicationIdleHook+0x10>)
    a182:	4798      	blx	r3
}
    a184:	46c0      	nop			; (mov r8, r8)
    a186:	46bd      	mov	sp, r7
    a188:	bd80      	pop	{r7, pc}
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	000076ed 	.word	0x000076ed

0000a190 <vApplicationTickHook>:

void vApplicationTickHook(void);

void vApplicationTickHook(void)
{
    a190:	b580      	push	{r7, lr}
    a192:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    a194:	46c0      	nop			; (mov r8, r8)
    a196:	46bd      	mov	sp, r7
    a198:	bd80      	pop	{r7, pc}

0000a19a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
    a19a:	b580      	push	{r7, lr}
    a19c:	af00      	add	r7, sp, #0
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    a19e:	b672      	cpsid	i
	for (;;)
    a1a0:	e7fe      	b.n	a1a0 <vApplicationStackOverflowHook+0x6>

0000a1a2 <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    a1a2:	b580      	push	{r7, lr}
    a1a4:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	for (;;)
    a1a6:	e7fe      	b.n	a1a6 <HardFault_Handler+0x4>

0000a1a8 <NMI_Handler>:
	{
	}
}

ISR(NMI_Handler)
{
    a1a8:	b580      	push	{r7, lr}
    a1aa:	af00      	add	r7, sp, #0
	// Yikes, something really bad happened
	for (;;)
    a1ac:	e7fe      	b.n	a1ac <NMI_Handler+0x4>
	...

0000a1b0 <__udivsi3>:
    a1b0:	2200      	movs	r2, #0
    a1b2:	0843      	lsrs	r3, r0, #1
    a1b4:	428b      	cmp	r3, r1
    a1b6:	d374      	bcc.n	a2a2 <__udivsi3+0xf2>
    a1b8:	0903      	lsrs	r3, r0, #4
    a1ba:	428b      	cmp	r3, r1
    a1bc:	d35f      	bcc.n	a27e <__udivsi3+0xce>
    a1be:	0a03      	lsrs	r3, r0, #8
    a1c0:	428b      	cmp	r3, r1
    a1c2:	d344      	bcc.n	a24e <__udivsi3+0x9e>
    a1c4:	0b03      	lsrs	r3, r0, #12
    a1c6:	428b      	cmp	r3, r1
    a1c8:	d328      	bcc.n	a21c <__udivsi3+0x6c>
    a1ca:	0c03      	lsrs	r3, r0, #16
    a1cc:	428b      	cmp	r3, r1
    a1ce:	d30d      	bcc.n	a1ec <__udivsi3+0x3c>
    a1d0:	22ff      	movs	r2, #255	; 0xff
    a1d2:	0209      	lsls	r1, r1, #8
    a1d4:	ba12      	rev	r2, r2
    a1d6:	0c03      	lsrs	r3, r0, #16
    a1d8:	428b      	cmp	r3, r1
    a1da:	d302      	bcc.n	a1e2 <__udivsi3+0x32>
    a1dc:	1212      	asrs	r2, r2, #8
    a1de:	0209      	lsls	r1, r1, #8
    a1e0:	d065      	beq.n	a2ae <__udivsi3+0xfe>
    a1e2:	0b03      	lsrs	r3, r0, #12
    a1e4:	428b      	cmp	r3, r1
    a1e6:	d319      	bcc.n	a21c <__udivsi3+0x6c>
    a1e8:	e000      	b.n	a1ec <__udivsi3+0x3c>
    a1ea:	0a09      	lsrs	r1, r1, #8
    a1ec:	0bc3      	lsrs	r3, r0, #15
    a1ee:	428b      	cmp	r3, r1
    a1f0:	d301      	bcc.n	a1f6 <__udivsi3+0x46>
    a1f2:	03cb      	lsls	r3, r1, #15
    a1f4:	1ac0      	subs	r0, r0, r3
    a1f6:	4152      	adcs	r2, r2
    a1f8:	0b83      	lsrs	r3, r0, #14
    a1fa:	428b      	cmp	r3, r1
    a1fc:	d301      	bcc.n	a202 <__udivsi3+0x52>
    a1fe:	038b      	lsls	r3, r1, #14
    a200:	1ac0      	subs	r0, r0, r3
    a202:	4152      	adcs	r2, r2
    a204:	0b43      	lsrs	r3, r0, #13
    a206:	428b      	cmp	r3, r1
    a208:	d301      	bcc.n	a20e <__udivsi3+0x5e>
    a20a:	034b      	lsls	r3, r1, #13
    a20c:	1ac0      	subs	r0, r0, r3
    a20e:	4152      	adcs	r2, r2
    a210:	0b03      	lsrs	r3, r0, #12
    a212:	428b      	cmp	r3, r1
    a214:	d301      	bcc.n	a21a <__udivsi3+0x6a>
    a216:	030b      	lsls	r3, r1, #12
    a218:	1ac0      	subs	r0, r0, r3
    a21a:	4152      	adcs	r2, r2
    a21c:	0ac3      	lsrs	r3, r0, #11
    a21e:	428b      	cmp	r3, r1
    a220:	d301      	bcc.n	a226 <__udivsi3+0x76>
    a222:	02cb      	lsls	r3, r1, #11
    a224:	1ac0      	subs	r0, r0, r3
    a226:	4152      	adcs	r2, r2
    a228:	0a83      	lsrs	r3, r0, #10
    a22a:	428b      	cmp	r3, r1
    a22c:	d301      	bcc.n	a232 <__udivsi3+0x82>
    a22e:	028b      	lsls	r3, r1, #10
    a230:	1ac0      	subs	r0, r0, r3
    a232:	4152      	adcs	r2, r2
    a234:	0a43      	lsrs	r3, r0, #9
    a236:	428b      	cmp	r3, r1
    a238:	d301      	bcc.n	a23e <__udivsi3+0x8e>
    a23a:	024b      	lsls	r3, r1, #9
    a23c:	1ac0      	subs	r0, r0, r3
    a23e:	4152      	adcs	r2, r2
    a240:	0a03      	lsrs	r3, r0, #8
    a242:	428b      	cmp	r3, r1
    a244:	d301      	bcc.n	a24a <__udivsi3+0x9a>
    a246:	020b      	lsls	r3, r1, #8
    a248:	1ac0      	subs	r0, r0, r3
    a24a:	4152      	adcs	r2, r2
    a24c:	d2cd      	bcs.n	a1ea <__udivsi3+0x3a>
    a24e:	09c3      	lsrs	r3, r0, #7
    a250:	428b      	cmp	r3, r1
    a252:	d301      	bcc.n	a258 <__udivsi3+0xa8>
    a254:	01cb      	lsls	r3, r1, #7
    a256:	1ac0      	subs	r0, r0, r3
    a258:	4152      	adcs	r2, r2
    a25a:	0983      	lsrs	r3, r0, #6
    a25c:	428b      	cmp	r3, r1
    a25e:	d301      	bcc.n	a264 <__udivsi3+0xb4>
    a260:	018b      	lsls	r3, r1, #6
    a262:	1ac0      	subs	r0, r0, r3
    a264:	4152      	adcs	r2, r2
    a266:	0943      	lsrs	r3, r0, #5
    a268:	428b      	cmp	r3, r1
    a26a:	d301      	bcc.n	a270 <__udivsi3+0xc0>
    a26c:	014b      	lsls	r3, r1, #5
    a26e:	1ac0      	subs	r0, r0, r3
    a270:	4152      	adcs	r2, r2
    a272:	0903      	lsrs	r3, r0, #4
    a274:	428b      	cmp	r3, r1
    a276:	d301      	bcc.n	a27c <__udivsi3+0xcc>
    a278:	010b      	lsls	r3, r1, #4
    a27a:	1ac0      	subs	r0, r0, r3
    a27c:	4152      	adcs	r2, r2
    a27e:	08c3      	lsrs	r3, r0, #3
    a280:	428b      	cmp	r3, r1
    a282:	d301      	bcc.n	a288 <__udivsi3+0xd8>
    a284:	00cb      	lsls	r3, r1, #3
    a286:	1ac0      	subs	r0, r0, r3
    a288:	4152      	adcs	r2, r2
    a28a:	0883      	lsrs	r3, r0, #2
    a28c:	428b      	cmp	r3, r1
    a28e:	d301      	bcc.n	a294 <__udivsi3+0xe4>
    a290:	008b      	lsls	r3, r1, #2
    a292:	1ac0      	subs	r0, r0, r3
    a294:	4152      	adcs	r2, r2
    a296:	0843      	lsrs	r3, r0, #1
    a298:	428b      	cmp	r3, r1
    a29a:	d301      	bcc.n	a2a0 <__udivsi3+0xf0>
    a29c:	004b      	lsls	r3, r1, #1
    a29e:	1ac0      	subs	r0, r0, r3
    a2a0:	4152      	adcs	r2, r2
    a2a2:	1a41      	subs	r1, r0, r1
    a2a4:	d200      	bcs.n	a2a8 <__udivsi3+0xf8>
    a2a6:	4601      	mov	r1, r0
    a2a8:	4152      	adcs	r2, r2
    a2aa:	4610      	mov	r0, r2
    a2ac:	4770      	bx	lr
    a2ae:	e7ff      	b.n	a2b0 <__udivsi3+0x100>
    a2b0:	b501      	push	{r0, lr}
    a2b2:	2000      	movs	r0, #0
    a2b4:	f000 f806 	bl	a2c4 <__aeabi_idiv0>
    a2b8:	bd02      	pop	{r1, pc}
    a2ba:	46c0      	nop			; (mov r8, r8)

0000a2bc <__aeabi_uidivmod>:
    a2bc:	2900      	cmp	r1, #0
    a2be:	d0f7      	beq.n	a2b0 <__udivsi3+0x100>
    a2c0:	e776      	b.n	a1b0 <__udivsi3>
    a2c2:	4770      	bx	lr

0000a2c4 <__aeabi_idiv0>:
    a2c4:	4770      	bx	lr
    a2c6:	46c0      	nop			; (mov r8, r8)

0000a2c8 <__aeabi_cdrcmple>:
    a2c8:	4684      	mov	ip, r0
    a2ca:	1c10      	adds	r0, r2, #0
    a2cc:	4662      	mov	r2, ip
    a2ce:	468c      	mov	ip, r1
    a2d0:	1c19      	adds	r1, r3, #0
    a2d2:	4663      	mov	r3, ip
    a2d4:	e000      	b.n	a2d8 <__aeabi_cdcmpeq>
    a2d6:	46c0      	nop			; (mov r8, r8)

0000a2d8 <__aeabi_cdcmpeq>:
    a2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a2da:	f001 ff1f 	bl	c11c <__ledf2>
    a2de:	2800      	cmp	r0, #0
    a2e0:	d401      	bmi.n	a2e6 <__aeabi_cdcmpeq+0xe>
    a2e2:	2100      	movs	r1, #0
    a2e4:	42c8      	cmn	r0, r1
    a2e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a2e8 <__aeabi_dcmpeq>:
    a2e8:	b510      	push	{r4, lr}
    a2ea:	f001 fe79 	bl	bfe0 <__eqdf2>
    a2ee:	4240      	negs	r0, r0
    a2f0:	3001      	adds	r0, #1
    a2f2:	bd10      	pop	{r4, pc}

0000a2f4 <__aeabi_dcmplt>:
    a2f4:	b510      	push	{r4, lr}
    a2f6:	f001 ff11 	bl	c11c <__ledf2>
    a2fa:	2800      	cmp	r0, #0
    a2fc:	db01      	blt.n	a302 <__aeabi_dcmplt+0xe>
    a2fe:	2000      	movs	r0, #0
    a300:	bd10      	pop	{r4, pc}
    a302:	2001      	movs	r0, #1
    a304:	bd10      	pop	{r4, pc}
    a306:	46c0      	nop			; (mov r8, r8)

0000a308 <__aeabi_dcmple>:
    a308:	b510      	push	{r4, lr}
    a30a:	f001 ff07 	bl	c11c <__ledf2>
    a30e:	2800      	cmp	r0, #0
    a310:	dd01      	ble.n	a316 <__aeabi_dcmple+0xe>
    a312:	2000      	movs	r0, #0
    a314:	bd10      	pop	{r4, pc}
    a316:	2001      	movs	r0, #1
    a318:	bd10      	pop	{r4, pc}
    a31a:	46c0      	nop			; (mov r8, r8)

0000a31c <__aeabi_dcmpgt>:
    a31c:	b510      	push	{r4, lr}
    a31e:	f001 fe99 	bl	c054 <__gedf2>
    a322:	2800      	cmp	r0, #0
    a324:	dc01      	bgt.n	a32a <__aeabi_dcmpgt+0xe>
    a326:	2000      	movs	r0, #0
    a328:	bd10      	pop	{r4, pc}
    a32a:	2001      	movs	r0, #1
    a32c:	bd10      	pop	{r4, pc}
    a32e:	46c0      	nop			; (mov r8, r8)

0000a330 <__aeabi_dcmpge>:
    a330:	b510      	push	{r4, lr}
    a332:	f001 fe8f 	bl	c054 <__gedf2>
    a336:	2800      	cmp	r0, #0
    a338:	da01      	bge.n	a33e <__aeabi_dcmpge+0xe>
    a33a:	2000      	movs	r0, #0
    a33c:	bd10      	pop	{r4, pc}
    a33e:	2001      	movs	r0, #1
    a340:	bd10      	pop	{r4, pc}
    a342:	46c0      	nop			; (mov r8, r8)

0000a344 <__aeabi_cfrcmple>:
    a344:	4684      	mov	ip, r0
    a346:	1c08      	adds	r0, r1, #0
    a348:	4661      	mov	r1, ip
    a34a:	e7ff      	b.n	a34c <__aeabi_cfcmpeq>

0000a34c <__aeabi_cfcmpeq>:
    a34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a34e:	f000 fc95 	bl	ac7c <__lesf2>
    a352:	2800      	cmp	r0, #0
    a354:	d401      	bmi.n	a35a <__aeabi_cfcmpeq+0xe>
    a356:	2100      	movs	r1, #0
    a358:	42c8      	cmn	r0, r1
    a35a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a35c <__aeabi_fcmpeq>:
    a35c:	b510      	push	{r4, lr}
    a35e:	f000 fc27 	bl	abb0 <__eqsf2>
    a362:	4240      	negs	r0, r0
    a364:	3001      	adds	r0, #1
    a366:	bd10      	pop	{r4, pc}

0000a368 <__aeabi_fcmplt>:
    a368:	b510      	push	{r4, lr}
    a36a:	f000 fc87 	bl	ac7c <__lesf2>
    a36e:	2800      	cmp	r0, #0
    a370:	db01      	blt.n	a376 <__aeabi_fcmplt+0xe>
    a372:	2000      	movs	r0, #0
    a374:	bd10      	pop	{r4, pc}
    a376:	2001      	movs	r0, #1
    a378:	bd10      	pop	{r4, pc}
    a37a:	46c0      	nop			; (mov r8, r8)

0000a37c <__aeabi_fcmple>:
    a37c:	b510      	push	{r4, lr}
    a37e:	f000 fc7d 	bl	ac7c <__lesf2>
    a382:	2800      	cmp	r0, #0
    a384:	dd01      	ble.n	a38a <__aeabi_fcmple+0xe>
    a386:	2000      	movs	r0, #0
    a388:	bd10      	pop	{r4, pc}
    a38a:	2001      	movs	r0, #1
    a38c:	bd10      	pop	{r4, pc}
    a38e:	46c0      	nop			; (mov r8, r8)

0000a390 <__aeabi_fcmpgt>:
    a390:	b510      	push	{r4, lr}
    a392:	f000 fc33 	bl	abfc <__gesf2>
    a396:	2800      	cmp	r0, #0
    a398:	dc01      	bgt.n	a39e <__aeabi_fcmpgt+0xe>
    a39a:	2000      	movs	r0, #0
    a39c:	bd10      	pop	{r4, pc}
    a39e:	2001      	movs	r0, #1
    a3a0:	bd10      	pop	{r4, pc}
    a3a2:	46c0      	nop			; (mov r8, r8)

0000a3a4 <__aeabi_fcmpge>:
    a3a4:	b510      	push	{r4, lr}
    a3a6:	f000 fc29 	bl	abfc <__gesf2>
    a3aa:	2800      	cmp	r0, #0
    a3ac:	da01      	bge.n	a3b2 <__aeabi_fcmpge+0xe>
    a3ae:	2000      	movs	r0, #0
    a3b0:	bd10      	pop	{r4, pc}
    a3b2:	2001      	movs	r0, #1
    a3b4:	bd10      	pop	{r4, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)

0000a3b8 <__aeabi_uldivmod>:
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d111      	bne.n	a3e0 <__aeabi_uldivmod+0x28>
    a3bc:	2a00      	cmp	r2, #0
    a3be:	d10f      	bne.n	a3e0 <__aeabi_uldivmod+0x28>
    a3c0:	2900      	cmp	r1, #0
    a3c2:	d100      	bne.n	a3c6 <__aeabi_uldivmod+0xe>
    a3c4:	2800      	cmp	r0, #0
    a3c6:	d002      	beq.n	a3ce <__aeabi_uldivmod+0x16>
    a3c8:	2100      	movs	r1, #0
    a3ca:	43c9      	mvns	r1, r1
    a3cc:	1c08      	adds	r0, r1, #0
    a3ce:	b407      	push	{r0, r1, r2}
    a3d0:	4802      	ldr	r0, [pc, #8]	; (a3dc <__aeabi_uldivmod+0x24>)
    a3d2:	a102      	add	r1, pc, #8	; (adr r1, a3dc <__aeabi_uldivmod+0x24>)
    a3d4:	1840      	adds	r0, r0, r1
    a3d6:	9002      	str	r0, [sp, #8]
    a3d8:	bd03      	pop	{r0, r1, pc}
    a3da:	46c0      	nop			; (mov r8, r8)
    a3dc:	fffffee9 	.word	0xfffffee9
    a3e0:	b403      	push	{r0, r1}
    a3e2:	4668      	mov	r0, sp
    a3e4:	b501      	push	{r0, lr}
    a3e6:	9802      	ldr	r0, [sp, #8]
    a3e8:	f000 f848 	bl	a47c <__udivmoddi4>
    a3ec:	9b01      	ldr	r3, [sp, #4]
    a3ee:	469e      	mov	lr, r3
    a3f0:	b002      	add	sp, #8
    a3f2:	bc0c      	pop	{r2, r3}
    a3f4:	4770      	bx	lr
    a3f6:	46c0      	nop			; (mov r8, r8)

0000a3f8 <__aeabi_lmul>:
    a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3fa:	46ce      	mov	lr, r9
    a3fc:	4647      	mov	r7, r8
    a3fe:	0415      	lsls	r5, r2, #16
    a400:	0c2d      	lsrs	r5, r5, #16
    a402:	002e      	movs	r6, r5
    a404:	b580      	push	{r7, lr}
    a406:	0407      	lsls	r7, r0, #16
    a408:	0c14      	lsrs	r4, r2, #16
    a40a:	0c3f      	lsrs	r7, r7, #16
    a40c:	4699      	mov	r9, r3
    a40e:	0c03      	lsrs	r3, r0, #16
    a410:	437e      	muls	r6, r7
    a412:	435d      	muls	r5, r3
    a414:	4367      	muls	r7, r4
    a416:	4363      	muls	r3, r4
    a418:	197f      	adds	r7, r7, r5
    a41a:	0c34      	lsrs	r4, r6, #16
    a41c:	19e4      	adds	r4, r4, r7
    a41e:	469c      	mov	ip, r3
    a420:	42a5      	cmp	r5, r4
    a422:	d903      	bls.n	a42c <__aeabi_lmul+0x34>
    a424:	2380      	movs	r3, #128	; 0x80
    a426:	025b      	lsls	r3, r3, #9
    a428:	4698      	mov	r8, r3
    a42a:	44c4      	add	ip, r8
    a42c:	464b      	mov	r3, r9
    a42e:	4351      	muls	r1, r2
    a430:	4343      	muls	r3, r0
    a432:	0436      	lsls	r6, r6, #16
    a434:	0c36      	lsrs	r6, r6, #16
    a436:	0c25      	lsrs	r5, r4, #16
    a438:	0424      	lsls	r4, r4, #16
    a43a:	4465      	add	r5, ip
    a43c:	19a4      	adds	r4, r4, r6
    a43e:	1859      	adds	r1, r3, r1
    a440:	1949      	adds	r1, r1, r5
    a442:	0020      	movs	r0, r4
    a444:	bc0c      	pop	{r2, r3}
    a446:	4690      	mov	r8, r2
    a448:	4699      	mov	r9, r3
    a44a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a44c <__aeabi_f2uiz>:
    a44c:	219e      	movs	r1, #158	; 0x9e
    a44e:	b510      	push	{r4, lr}
    a450:	05c9      	lsls	r1, r1, #23
    a452:	1c04      	adds	r4, r0, #0
    a454:	f7ff ffa6 	bl	a3a4 <__aeabi_fcmpge>
    a458:	2800      	cmp	r0, #0
    a45a:	d103      	bne.n	a464 <__aeabi_f2uiz+0x18>
    a45c:	1c20      	adds	r0, r4, #0
    a45e:	f000 ff0b 	bl	b278 <__aeabi_f2iz>
    a462:	bd10      	pop	{r4, pc}
    a464:	219e      	movs	r1, #158	; 0x9e
    a466:	1c20      	adds	r0, r4, #0
    a468:	05c9      	lsls	r1, r1, #23
    a46a:	f000 fd69 	bl	af40 <__aeabi_fsub>
    a46e:	f000 ff03 	bl	b278 <__aeabi_f2iz>
    a472:	2380      	movs	r3, #128	; 0x80
    a474:	061b      	lsls	r3, r3, #24
    a476:	469c      	mov	ip, r3
    a478:	4460      	add	r0, ip
    a47a:	e7f2      	b.n	a462 <__aeabi_f2uiz+0x16>

0000a47c <__udivmoddi4>:
    a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a47e:	4657      	mov	r7, sl
    a480:	464e      	mov	r6, r9
    a482:	4645      	mov	r5, r8
    a484:	46de      	mov	lr, fp
    a486:	b5e0      	push	{r5, r6, r7, lr}
    a488:	0004      	movs	r4, r0
    a48a:	b083      	sub	sp, #12
    a48c:	000d      	movs	r5, r1
    a48e:	4692      	mov	sl, r2
    a490:	4699      	mov	r9, r3
    a492:	428b      	cmp	r3, r1
    a494:	d82f      	bhi.n	a4f6 <__udivmoddi4+0x7a>
    a496:	d02c      	beq.n	a4f2 <__udivmoddi4+0x76>
    a498:	4649      	mov	r1, r9
    a49a:	4650      	mov	r0, sl
    a49c:	f002 fdde 	bl	d05c <__clzdi2>
    a4a0:	0029      	movs	r1, r5
    a4a2:	0006      	movs	r6, r0
    a4a4:	0020      	movs	r0, r4
    a4a6:	f002 fdd9 	bl	d05c <__clzdi2>
    a4aa:	1a33      	subs	r3, r6, r0
    a4ac:	4698      	mov	r8, r3
    a4ae:	3b20      	subs	r3, #32
    a4b0:	469b      	mov	fp, r3
    a4b2:	d500      	bpl.n	a4b6 <__udivmoddi4+0x3a>
    a4b4:	e074      	b.n	a5a0 <__udivmoddi4+0x124>
    a4b6:	4653      	mov	r3, sl
    a4b8:	465a      	mov	r2, fp
    a4ba:	4093      	lsls	r3, r2
    a4bc:	001f      	movs	r7, r3
    a4be:	4653      	mov	r3, sl
    a4c0:	4642      	mov	r2, r8
    a4c2:	4093      	lsls	r3, r2
    a4c4:	001e      	movs	r6, r3
    a4c6:	42af      	cmp	r7, r5
    a4c8:	d829      	bhi.n	a51e <__udivmoddi4+0xa2>
    a4ca:	d026      	beq.n	a51a <__udivmoddi4+0x9e>
    a4cc:	465b      	mov	r3, fp
    a4ce:	1ba4      	subs	r4, r4, r6
    a4d0:	41bd      	sbcs	r5, r7
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	da00      	bge.n	a4d8 <__udivmoddi4+0x5c>
    a4d6:	e079      	b.n	a5cc <__udivmoddi4+0x150>
    a4d8:	2200      	movs	r2, #0
    a4da:	2300      	movs	r3, #0
    a4dc:	9200      	str	r2, [sp, #0]
    a4de:	9301      	str	r3, [sp, #4]
    a4e0:	2301      	movs	r3, #1
    a4e2:	465a      	mov	r2, fp
    a4e4:	4093      	lsls	r3, r2
    a4e6:	9301      	str	r3, [sp, #4]
    a4e8:	2301      	movs	r3, #1
    a4ea:	4642      	mov	r2, r8
    a4ec:	4093      	lsls	r3, r2
    a4ee:	9300      	str	r3, [sp, #0]
    a4f0:	e019      	b.n	a526 <__udivmoddi4+0xaa>
    a4f2:	4282      	cmp	r2, r0
    a4f4:	d9d0      	bls.n	a498 <__udivmoddi4+0x1c>
    a4f6:	2200      	movs	r2, #0
    a4f8:	2300      	movs	r3, #0
    a4fa:	9200      	str	r2, [sp, #0]
    a4fc:	9301      	str	r3, [sp, #4]
    a4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a500:	2b00      	cmp	r3, #0
    a502:	d001      	beq.n	a508 <__udivmoddi4+0x8c>
    a504:	601c      	str	r4, [r3, #0]
    a506:	605d      	str	r5, [r3, #4]
    a508:	9800      	ldr	r0, [sp, #0]
    a50a:	9901      	ldr	r1, [sp, #4]
    a50c:	b003      	add	sp, #12
    a50e:	bc3c      	pop	{r2, r3, r4, r5}
    a510:	4690      	mov	r8, r2
    a512:	4699      	mov	r9, r3
    a514:	46a2      	mov	sl, r4
    a516:	46ab      	mov	fp, r5
    a518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a51a:	42a3      	cmp	r3, r4
    a51c:	d9d6      	bls.n	a4cc <__udivmoddi4+0x50>
    a51e:	2200      	movs	r2, #0
    a520:	2300      	movs	r3, #0
    a522:	9200      	str	r2, [sp, #0]
    a524:	9301      	str	r3, [sp, #4]
    a526:	4643      	mov	r3, r8
    a528:	2b00      	cmp	r3, #0
    a52a:	d0e8      	beq.n	a4fe <__udivmoddi4+0x82>
    a52c:	07fb      	lsls	r3, r7, #31
    a52e:	0872      	lsrs	r2, r6, #1
    a530:	431a      	orrs	r2, r3
    a532:	4646      	mov	r6, r8
    a534:	087b      	lsrs	r3, r7, #1
    a536:	e00e      	b.n	a556 <__udivmoddi4+0xda>
    a538:	42ab      	cmp	r3, r5
    a53a:	d101      	bne.n	a540 <__udivmoddi4+0xc4>
    a53c:	42a2      	cmp	r2, r4
    a53e:	d80c      	bhi.n	a55a <__udivmoddi4+0xde>
    a540:	1aa4      	subs	r4, r4, r2
    a542:	419d      	sbcs	r5, r3
    a544:	2001      	movs	r0, #1
    a546:	1924      	adds	r4, r4, r4
    a548:	416d      	adcs	r5, r5
    a54a:	2100      	movs	r1, #0
    a54c:	3e01      	subs	r6, #1
    a54e:	1824      	adds	r4, r4, r0
    a550:	414d      	adcs	r5, r1
    a552:	2e00      	cmp	r6, #0
    a554:	d006      	beq.n	a564 <__udivmoddi4+0xe8>
    a556:	42ab      	cmp	r3, r5
    a558:	d9ee      	bls.n	a538 <__udivmoddi4+0xbc>
    a55a:	3e01      	subs	r6, #1
    a55c:	1924      	adds	r4, r4, r4
    a55e:	416d      	adcs	r5, r5
    a560:	2e00      	cmp	r6, #0
    a562:	d1f8      	bne.n	a556 <__udivmoddi4+0xda>
    a564:	465b      	mov	r3, fp
    a566:	9800      	ldr	r0, [sp, #0]
    a568:	9901      	ldr	r1, [sp, #4]
    a56a:	1900      	adds	r0, r0, r4
    a56c:	4169      	adcs	r1, r5
    a56e:	2b00      	cmp	r3, #0
    a570:	db22      	blt.n	a5b8 <__udivmoddi4+0x13c>
    a572:	002b      	movs	r3, r5
    a574:	465a      	mov	r2, fp
    a576:	40d3      	lsrs	r3, r2
    a578:	002a      	movs	r2, r5
    a57a:	4644      	mov	r4, r8
    a57c:	40e2      	lsrs	r2, r4
    a57e:	001c      	movs	r4, r3
    a580:	465b      	mov	r3, fp
    a582:	0015      	movs	r5, r2
    a584:	2b00      	cmp	r3, #0
    a586:	db2c      	blt.n	a5e2 <__udivmoddi4+0x166>
    a588:	0026      	movs	r6, r4
    a58a:	409e      	lsls	r6, r3
    a58c:	0033      	movs	r3, r6
    a58e:	0026      	movs	r6, r4
    a590:	4647      	mov	r7, r8
    a592:	40be      	lsls	r6, r7
    a594:	0032      	movs	r2, r6
    a596:	1a80      	subs	r0, r0, r2
    a598:	4199      	sbcs	r1, r3
    a59a:	9000      	str	r0, [sp, #0]
    a59c:	9101      	str	r1, [sp, #4]
    a59e:	e7ae      	b.n	a4fe <__udivmoddi4+0x82>
    a5a0:	4642      	mov	r2, r8
    a5a2:	2320      	movs	r3, #32
    a5a4:	1a9b      	subs	r3, r3, r2
    a5a6:	4652      	mov	r2, sl
    a5a8:	40da      	lsrs	r2, r3
    a5aa:	4641      	mov	r1, r8
    a5ac:	0013      	movs	r3, r2
    a5ae:	464a      	mov	r2, r9
    a5b0:	408a      	lsls	r2, r1
    a5b2:	0017      	movs	r7, r2
    a5b4:	431f      	orrs	r7, r3
    a5b6:	e782      	b.n	a4be <__udivmoddi4+0x42>
    a5b8:	4642      	mov	r2, r8
    a5ba:	2320      	movs	r3, #32
    a5bc:	1a9b      	subs	r3, r3, r2
    a5be:	002a      	movs	r2, r5
    a5c0:	4646      	mov	r6, r8
    a5c2:	409a      	lsls	r2, r3
    a5c4:	0023      	movs	r3, r4
    a5c6:	40f3      	lsrs	r3, r6
    a5c8:	4313      	orrs	r3, r2
    a5ca:	e7d5      	b.n	a578 <__udivmoddi4+0xfc>
    a5cc:	4642      	mov	r2, r8
    a5ce:	2320      	movs	r3, #32
    a5d0:	2100      	movs	r1, #0
    a5d2:	1a9b      	subs	r3, r3, r2
    a5d4:	2200      	movs	r2, #0
    a5d6:	9100      	str	r1, [sp, #0]
    a5d8:	9201      	str	r2, [sp, #4]
    a5da:	2201      	movs	r2, #1
    a5dc:	40da      	lsrs	r2, r3
    a5de:	9201      	str	r2, [sp, #4]
    a5e0:	e782      	b.n	a4e8 <__udivmoddi4+0x6c>
    a5e2:	4642      	mov	r2, r8
    a5e4:	2320      	movs	r3, #32
    a5e6:	0026      	movs	r6, r4
    a5e8:	1a9b      	subs	r3, r3, r2
    a5ea:	40de      	lsrs	r6, r3
    a5ec:	002f      	movs	r7, r5
    a5ee:	46b4      	mov	ip, r6
    a5f0:	4097      	lsls	r7, r2
    a5f2:	4666      	mov	r6, ip
    a5f4:	003b      	movs	r3, r7
    a5f6:	4333      	orrs	r3, r6
    a5f8:	e7c9      	b.n	a58e <__udivmoddi4+0x112>
    a5fa:	46c0      	nop			; (mov r8, r8)

0000a5fc <__aeabi_fadd>:
    a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5fe:	46c6      	mov	lr, r8
    a600:	024e      	lsls	r6, r1, #9
    a602:	0247      	lsls	r7, r0, #9
    a604:	0a76      	lsrs	r6, r6, #9
    a606:	0a7b      	lsrs	r3, r7, #9
    a608:	0044      	lsls	r4, r0, #1
    a60a:	0fc5      	lsrs	r5, r0, #31
    a60c:	00f7      	lsls	r7, r6, #3
    a60e:	0048      	lsls	r0, r1, #1
    a610:	4698      	mov	r8, r3
    a612:	b500      	push	{lr}
    a614:	0e24      	lsrs	r4, r4, #24
    a616:	002a      	movs	r2, r5
    a618:	00db      	lsls	r3, r3, #3
    a61a:	0e00      	lsrs	r0, r0, #24
    a61c:	0fc9      	lsrs	r1, r1, #31
    a61e:	46bc      	mov	ip, r7
    a620:	428d      	cmp	r5, r1
    a622:	d067      	beq.n	a6f4 <__aeabi_fadd+0xf8>
    a624:	1a22      	subs	r2, r4, r0
    a626:	2a00      	cmp	r2, #0
    a628:	dc00      	bgt.n	a62c <__aeabi_fadd+0x30>
    a62a:	e0a5      	b.n	a778 <__aeabi_fadd+0x17c>
    a62c:	2800      	cmp	r0, #0
    a62e:	d13a      	bne.n	a6a6 <__aeabi_fadd+0xaa>
    a630:	2f00      	cmp	r7, #0
    a632:	d100      	bne.n	a636 <__aeabi_fadd+0x3a>
    a634:	e093      	b.n	a75e <__aeabi_fadd+0x162>
    a636:	1e51      	subs	r1, r2, #1
    a638:	2900      	cmp	r1, #0
    a63a:	d000      	beq.n	a63e <__aeabi_fadd+0x42>
    a63c:	e0bc      	b.n	a7b8 <__aeabi_fadd+0x1bc>
    a63e:	2401      	movs	r4, #1
    a640:	1bdb      	subs	r3, r3, r7
    a642:	015a      	lsls	r2, r3, #5
    a644:	d546      	bpl.n	a6d4 <__aeabi_fadd+0xd8>
    a646:	019b      	lsls	r3, r3, #6
    a648:	099e      	lsrs	r6, r3, #6
    a64a:	0030      	movs	r0, r6
    a64c:	f002 fce8 	bl	d020 <__clzsi2>
    a650:	3805      	subs	r0, #5
    a652:	4086      	lsls	r6, r0
    a654:	4284      	cmp	r4, r0
    a656:	dd00      	ble.n	a65a <__aeabi_fadd+0x5e>
    a658:	e09d      	b.n	a796 <__aeabi_fadd+0x19a>
    a65a:	1b04      	subs	r4, r0, r4
    a65c:	0032      	movs	r2, r6
    a65e:	2020      	movs	r0, #32
    a660:	3401      	adds	r4, #1
    a662:	40e2      	lsrs	r2, r4
    a664:	1b04      	subs	r4, r0, r4
    a666:	40a6      	lsls	r6, r4
    a668:	0033      	movs	r3, r6
    a66a:	1e5e      	subs	r6, r3, #1
    a66c:	41b3      	sbcs	r3, r6
    a66e:	2400      	movs	r4, #0
    a670:	4313      	orrs	r3, r2
    a672:	075a      	lsls	r2, r3, #29
    a674:	d004      	beq.n	a680 <__aeabi_fadd+0x84>
    a676:	220f      	movs	r2, #15
    a678:	401a      	ands	r2, r3
    a67a:	2a04      	cmp	r2, #4
    a67c:	d000      	beq.n	a680 <__aeabi_fadd+0x84>
    a67e:	3304      	adds	r3, #4
    a680:	015a      	lsls	r2, r3, #5
    a682:	d529      	bpl.n	a6d8 <__aeabi_fadd+0xdc>
    a684:	3401      	adds	r4, #1
    a686:	2cff      	cmp	r4, #255	; 0xff
    a688:	d100      	bne.n	a68c <__aeabi_fadd+0x90>
    a68a:	e081      	b.n	a790 <__aeabi_fadd+0x194>
    a68c:	002a      	movs	r2, r5
    a68e:	019b      	lsls	r3, r3, #6
    a690:	0a5b      	lsrs	r3, r3, #9
    a692:	b2e4      	uxtb	r4, r4
    a694:	025b      	lsls	r3, r3, #9
    a696:	05e4      	lsls	r4, r4, #23
    a698:	0a58      	lsrs	r0, r3, #9
    a69a:	07d2      	lsls	r2, r2, #31
    a69c:	4320      	orrs	r0, r4
    a69e:	4310      	orrs	r0, r2
    a6a0:	bc04      	pop	{r2}
    a6a2:	4690      	mov	r8, r2
    a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6a6:	2cff      	cmp	r4, #255	; 0xff
    a6a8:	d0e3      	beq.n	a672 <__aeabi_fadd+0x76>
    a6aa:	2180      	movs	r1, #128	; 0x80
    a6ac:	0038      	movs	r0, r7
    a6ae:	04c9      	lsls	r1, r1, #19
    a6b0:	4308      	orrs	r0, r1
    a6b2:	4684      	mov	ip, r0
    a6b4:	2a1b      	cmp	r2, #27
    a6b6:	dd00      	ble.n	a6ba <__aeabi_fadd+0xbe>
    a6b8:	e082      	b.n	a7c0 <__aeabi_fadd+0x1c4>
    a6ba:	2020      	movs	r0, #32
    a6bc:	4661      	mov	r1, ip
    a6be:	40d1      	lsrs	r1, r2
    a6c0:	1a82      	subs	r2, r0, r2
    a6c2:	4660      	mov	r0, ip
    a6c4:	4090      	lsls	r0, r2
    a6c6:	0002      	movs	r2, r0
    a6c8:	1e50      	subs	r0, r2, #1
    a6ca:	4182      	sbcs	r2, r0
    a6cc:	430a      	orrs	r2, r1
    a6ce:	1a9b      	subs	r3, r3, r2
    a6d0:	015a      	lsls	r2, r3, #5
    a6d2:	d4b8      	bmi.n	a646 <__aeabi_fadd+0x4a>
    a6d4:	075a      	lsls	r2, r3, #29
    a6d6:	d1ce      	bne.n	a676 <__aeabi_fadd+0x7a>
    a6d8:	08de      	lsrs	r6, r3, #3
    a6da:	002a      	movs	r2, r5
    a6dc:	2cff      	cmp	r4, #255	; 0xff
    a6de:	d13a      	bne.n	a756 <__aeabi_fadd+0x15a>
    a6e0:	2e00      	cmp	r6, #0
    a6e2:	d100      	bne.n	a6e6 <__aeabi_fadd+0xea>
    a6e4:	e0ae      	b.n	a844 <__aeabi_fadd+0x248>
    a6e6:	2380      	movs	r3, #128	; 0x80
    a6e8:	03db      	lsls	r3, r3, #15
    a6ea:	4333      	orrs	r3, r6
    a6ec:	025b      	lsls	r3, r3, #9
    a6ee:	0a5b      	lsrs	r3, r3, #9
    a6f0:	24ff      	movs	r4, #255	; 0xff
    a6f2:	e7cf      	b.n	a694 <__aeabi_fadd+0x98>
    a6f4:	1a21      	subs	r1, r4, r0
    a6f6:	2900      	cmp	r1, #0
    a6f8:	dd52      	ble.n	a7a0 <__aeabi_fadd+0x1a4>
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d031      	beq.n	a762 <__aeabi_fadd+0x166>
    a6fe:	2cff      	cmp	r4, #255	; 0xff
    a700:	d0b7      	beq.n	a672 <__aeabi_fadd+0x76>
    a702:	2080      	movs	r0, #128	; 0x80
    a704:	003e      	movs	r6, r7
    a706:	04c0      	lsls	r0, r0, #19
    a708:	4306      	orrs	r6, r0
    a70a:	46b4      	mov	ip, r6
    a70c:	291b      	cmp	r1, #27
    a70e:	dd00      	ble.n	a712 <__aeabi_fadd+0x116>
    a710:	e0aa      	b.n	a868 <__aeabi_fadd+0x26c>
    a712:	2620      	movs	r6, #32
    a714:	4660      	mov	r0, ip
    a716:	40c8      	lsrs	r0, r1
    a718:	1a71      	subs	r1, r6, r1
    a71a:	4666      	mov	r6, ip
    a71c:	408e      	lsls	r6, r1
    a71e:	0031      	movs	r1, r6
    a720:	1e4e      	subs	r6, r1, #1
    a722:	41b1      	sbcs	r1, r6
    a724:	4301      	orrs	r1, r0
    a726:	185b      	adds	r3, r3, r1
    a728:	0159      	lsls	r1, r3, #5
    a72a:	d5d3      	bpl.n	a6d4 <__aeabi_fadd+0xd8>
    a72c:	3401      	adds	r4, #1
    a72e:	2cff      	cmp	r4, #255	; 0xff
    a730:	d100      	bne.n	a734 <__aeabi_fadd+0x138>
    a732:	e087      	b.n	a844 <__aeabi_fadd+0x248>
    a734:	2201      	movs	r2, #1
    a736:	4978      	ldr	r1, [pc, #480]	; (a918 <__aeabi_fadd+0x31c>)
    a738:	401a      	ands	r2, r3
    a73a:	085b      	lsrs	r3, r3, #1
    a73c:	400b      	ands	r3, r1
    a73e:	4313      	orrs	r3, r2
    a740:	e797      	b.n	a672 <__aeabi_fadd+0x76>
    a742:	2c00      	cmp	r4, #0
    a744:	d000      	beq.n	a748 <__aeabi_fadd+0x14c>
    a746:	e0a7      	b.n	a898 <__aeabi_fadd+0x29c>
    a748:	2b00      	cmp	r3, #0
    a74a:	d000      	beq.n	a74e <__aeabi_fadd+0x152>
    a74c:	e0b6      	b.n	a8bc <__aeabi_fadd+0x2c0>
    a74e:	1e3b      	subs	r3, r7, #0
    a750:	d162      	bne.n	a818 <__aeabi_fadd+0x21c>
    a752:	2600      	movs	r6, #0
    a754:	2200      	movs	r2, #0
    a756:	0273      	lsls	r3, r6, #9
    a758:	0a5b      	lsrs	r3, r3, #9
    a75a:	b2e4      	uxtb	r4, r4
    a75c:	e79a      	b.n	a694 <__aeabi_fadd+0x98>
    a75e:	0014      	movs	r4, r2
    a760:	e787      	b.n	a672 <__aeabi_fadd+0x76>
    a762:	2f00      	cmp	r7, #0
    a764:	d04d      	beq.n	a802 <__aeabi_fadd+0x206>
    a766:	1e48      	subs	r0, r1, #1
    a768:	2800      	cmp	r0, #0
    a76a:	d157      	bne.n	a81c <__aeabi_fadd+0x220>
    a76c:	4463      	add	r3, ip
    a76e:	2401      	movs	r4, #1
    a770:	015a      	lsls	r2, r3, #5
    a772:	d5af      	bpl.n	a6d4 <__aeabi_fadd+0xd8>
    a774:	2402      	movs	r4, #2
    a776:	e7dd      	b.n	a734 <__aeabi_fadd+0x138>
    a778:	2a00      	cmp	r2, #0
    a77a:	d124      	bne.n	a7c6 <__aeabi_fadd+0x1ca>
    a77c:	1c62      	adds	r2, r4, #1
    a77e:	b2d2      	uxtb	r2, r2
    a780:	2a01      	cmp	r2, #1
    a782:	ddde      	ble.n	a742 <__aeabi_fadd+0x146>
    a784:	1bde      	subs	r6, r3, r7
    a786:	0172      	lsls	r2, r6, #5
    a788:	d535      	bpl.n	a7f6 <__aeabi_fadd+0x1fa>
    a78a:	1afe      	subs	r6, r7, r3
    a78c:	000d      	movs	r5, r1
    a78e:	e75c      	b.n	a64a <__aeabi_fadd+0x4e>
    a790:	002a      	movs	r2, r5
    a792:	2300      	movs	r3, #0
    a794:	e77e      	b.n	a694 <__aeabi_fadd+0x98>
    a796:	0033      	movs	r3, r6
    a798:	4a60      	ldr	r2, [pc, #384]	; (a91c <__aeabi_fadd+0x320>)
    a79a:	1a24      	subs	r4, r4, r0
    a79c:	4013      	ands	r3, r2
    a79e:	e768      	b.n	a672 <__aeabi_fadd+0x76>
    a7a0:	2900      	cmp	r1, #0
    a7a2:	d163      	bne.n	a86c <__aeabi_fadd+0x270>
    a7a4:	1c61      	adds	r1, r4, #1
    a7a6:	b2c8      	uxtb	r0, r1
    a7a8:	2801      	cmp	r0, #1
    a7aa:	dd4e      	ble.n	a84a <__aeabi_fadd+0x24e>
    a7ac:	29ff      	cmp	r1, #255	; 0xff
    a7ae:	d049      	beq.n	a844 <__aeabi_fadd+0x248>
    a7b0:	4463      	add	r3, ip
    a7b2:	085b      	lsrs	r3, r3, #1
    a7b4:	000c      	movs	r4, r1
    a7b6:	e75c      	b.n	a672 <__aeabi_fadd+0x76>
    a7b8:	2aff      	cmp	r2, #255	; 0xff
    a7ba:	d041      	beq.n	a840 <__aeabi_fadd+0x244>
    a7bc:	000a      	movs	r2, r1
    a7be:	e779      	b.n	a6b4 <__aeabi_fadd+0xb8>
    a7c0:	2201      	movs	r2, #1
    a7c2:	1a9b      	subs	r3, r3, r2
    a7c4:	e784      	b.n	a6d0 <__aeabi_fadd+0xd4>
    a7c6:	2c00      	cmp	r4, #0
    a7c8:	d01d      	beq.n	a806 <__aeabi_fadd+0x20a>
    a7ca:	28ff      	cmp	r0, #255	; 0xff
    a7cc:	d022      	beq.n	a814 <__aeabi_fadd+0x218>
    a7ce:	2480      	movs	r4, #128	; 0x80
    a7d0:	04e4      	lsls	r4, r4, #19
    a7d2:	4252      	negs	r2, r2
    a7d4:	4323      	orrs	r3, r4
    a7d6:	2a1b      	cmp	r2, #27
    a7d8:	dd00      	ble.n	a7dc <__aeabi_fadd+0x1e0>
    a7da:	e08a      	b.n	a8f2 <__aeabi_fadd+0x2f6>
    a7dc:	001c      	movs	r4, r3
    a7de:	2520      	movs	r5, #32
    a7e0:	40d4      	lsrs	r4, r2
    a7e2:	1aaa      	subs	r2, r5, r2
    a7e4:	4093      	lsls	r3, r2
    a7e6:	1e5a      	subs	r2, r3, #1
    a7e8:	4193      	sbcs	r3, r2
    a7ea:	4323      	orrs	r3, r4
    a7ec:	4662      	mov	r2, ip
    a7ee:	0004      	movs	r4, r0
    a7f0:	1ad3      	subs	r3, r2, r3
    a7f2:	000d      	movs	r5, r1
    a7f4:	e725      	b.n	a642 <__aeabi_fadd+0x46>
    a7f6:	2e00      	cmp	r6, #0
    a7f8:	d000      	beq.n	a7fc <__aeabi_fadd+0x200>
    a7fa:	e726      	b.n	a64a <__aeabi_fadd+0x4e>
    a7fc:	2200      	movs	r2, #0
    a7fe:	2400      	movs	r4, #0
    a800:	e7a9      	b.n	a756 <__aeabi_fadd+0x15a>
    a802:	000c      	movs	r4, r1
    a804:	e735      	b.n	a672 <__aeabi_fadd+0x76>
    a806:	2b00      	cmp	r3, #0
    a808:	d04d      	beq.n	a8a6 <__aeabi_fadd+0x2aa>
    a80a:	43d2      	mvns	r2, r2
    a80c:	2a00      	cmp	r2, #0
    a80e:	d0ed      	beq.n	a7ec <__aeabi_fadd+0x1f0>
    a810:	28ff      	cmp	r0, #255	; 0xff
    a812:	d1e0      	bne.n	a7d6 <__aeabi_fadd+0x1da>
    a814:	4663      	mov	r3, ip
    a816:	24ff      	movs	r4, #255	; 0xff
    a818:	000d      	movs	r5, r1
    a81a:	e72a      	b.n	a672 <__aeabi_fadd+0x76>
    a81c:	29ff      	cmp	r1, #255	; 0xff
    a81e:	d00f      	beq.n	a840 <__aeabi_fadd+0x244>
    a820:	0001      	movs	r1, r0
    a822:	e773      	b.n	a70c <__aeabi_fadd+0x110>
    a824:	2b00      	cmp	r3, #0
    a826:	d061      	beq.n	a8ec <__aeabi_fadd+0x2f0>
    a828:	24ff      	movs	r4, #255	; 0xff
    a82a:	2f00      	cmp	r7, #0
    a82c:	d100      	bne.n	a830 <__aeabi_fadd+0x234>
    a82e:	e720      	b.n	a672 <__aeabi_fadd+0x76>
    a830:	2280      	movs	r2, #128	; 0x80
    a832:	4641      	mov	r1, r8
    a834:	03d2      	lsls	r2, r2, #15
    a836:	4211      	tst	r1, r2
    a838:	d002      	beq.n	a840 <__aeabi_fadd+0x244>
    a83a:	4216      	tst	r6, r2
    a83c:	d100      	bne.n	a840 <__aeabi_fadd+0x244>
    a83e:	003b      	movs	r3, r7
    a840:	24ff      	movs	r4, #255	; 0xff
    a842:	e716      	b.n	a672 <__aeabi_fadd+0x76>
    a844:	24ff      	movs	r4, #255	; 0xff
    a846:	2300      	movs	r3, #0
    a848:	e724      	b.n	a694 <__aeabi_fadd+0x98>
    a84a:	2c00      	cmp	r4, #0
    a84c:	d1ea      	bne.n	a824 <__aeabi_fadd+0x228>
    a84e:	2b00      	cmp	r3, #0
    a850:	d058      	beq.n	a904 <__aeabi_fadd+0x308>
    a852:	2f00      	cmp	r7, #0
    a854:	d100      	bne.n	a858 <__aeabi_fadd+0x25c>
    a856:	e70c      	b.n	a672 <__aeabi_fadd+0x76>
    a858:	4463      	add	r3, ip
    a85a:	015a      	lsls	r2, r3, #5
    a85c:	d400      	bmi.n	a860 <__aeabi_fadd+0x264>
    a85e:	e739      	b.n	a6d4 <__aeabi_fadd+0xd8>
    a860:	4a2e      	ldr	r2, [pc, #184]	; (a91c <__aeabi_fadd+0x320>)
    a862:	000c      	movs	r4, r1
    a864:	4013      	ands	r3, r2
    a866:	e704      	b.n	a672 <__aeabi_fadd+0x76>
    a868:	2101      	movs	r1, #1
    a86a:	e75c      	b.n	a726 <__aeabi_fadd+0x12a>
    a86c:	2c00      	cmp	r4, #0
    a86e:	d11e      	bne.n	a8ae <__aeabi_fadd+0x2b2>
    a870:	2b00      	cmp	r3, #0
    a872:	d040      	beq.n	a8f6 <__aeabi_fadd+0x2fa>
    a874:	43c9      	mvns	r1, r1
    a876:	2900      	cmp	r1, #0
    a878:	d00b      	beq.n	a892 <__aeabi_fadd+0x296>
    a87a:	28ff      	cmp	r0, #255	; 0xff
    a87c:	d036      	beq.n	a8ec <__aeabi_fadd+0x2f0>
    a87e:	291b      	cmp	r1, #27
    a880:	dc47      	bgt.n	a912 <__aeabi_fadd+0x316>
    a882:	001c      	movs	r4, r3
    a884:	2620      	movs	r6, #32
    a886:	40cc      	lsrs	r4, r1
    a888:	1a71      	subs	r1, r6, r1
    a88a:	408b      	lsls	r3, r1
    a88c:	1e59      	subs	r1, r3, #1
    a88e:	418b      	sbcs	r3, r1
    a890:	4323      	orrs	r3, r4
    a892:	4463      	add	r3, ip
    a894:	0004      	movs	r4, r0
    a896:	e747      	b.n	a728 <__aeabi_fadd+0x12c>
    a898:	2b00      	cmp	r3, #0
    a89a:	d118      	bne.n	a8ce <__aeabi_fadd+0x2d2>
    a89c:	1e3b      	subs	r3, r7, #0
    a89e:	d02d      	beq.n	a8fc <__aeabi_fadd+0x300>
    a8a0:	000d      	movs	r5, r1
    a8a2:	24ff      	movs	r4, #255	; 0xff
    a8a4:	e6e5      	b.n	a672 <__aeabi_fadd+0x76>
    a8a6:	003b      	movs	r3, r7
    a8a8:	0004      	movs	r4, r0
    a8aa:	000d      	movs	r5, r1
    a8ac:	e6e1      	b.n	a672 <__aeabi_fadd+0x76>
    a8ae:	28ff      	cmp	r0, #255	; 0xff
    a8b0:	d01c      	beq.n	a8ec <__aeabi_fadd+0x2f0>
    a8b2:	2480      	movs	r4, #128	; 0x80
    a8b4:	04e4      	lsls	r4, r4, #19
    a8b6:	4249      	negs	r1, r1
    a8b8:	4323      	orrs	r3, r4
    a8ba:	e7e0      	b.n	a87e <__aeabi_fadd+0x282>
    a8bc:	2f00      	cmp	r7, #0
    a8be:	d100      	bne.n	a8c2 <__aeabi_fadd+0x2c6>
    a8c0:	e6d7      	b.n	a672 <__aeabi_fadd+0x76>
    a8c2:	1bde      	subs	r6, r3, r7
    a8c4:	0172      	lsls	r2, r6, #5
    a8c6:	d51f      	bpl.n	a908 <__aeabi_fadd+0x30c>
    a8c8:	1afb      	subs	r3, r7, r3
    a8ca:	000d      	movs	r5, r1
    a8cc:	e6d1      	b.n	a672 <__aeabi_fadd+0x76>
    a8ce:	24ff      	movs	r4, #255	; 0xff
    a8d0:	2f00      	cmp	r7, #0
    a8d2:	d100      	bne.n	a8d6 <__aeabi_fadd+0x2da>
    a8d4:	e6cd      	b.n	a672 <__aeabi_fadd+0x76>
    a8d6:	2280      	movs	r2, #128	; 0x80
    a8d8:	4640      	mov	r0, r8
    a8da:	03d2      	lsls	r2, r2, #15
    a8dc:	4210      	tst	r0, r2
    a8de:	d0af      	beq.n	a840 <__aeabi_fadd+0x244>
    a8e0:	4216      	tst	r6, r2
    a8e2:	d1ad      	bne.n	a840 <__aeabi_fadd+0x244>
    a8e4:	003b      	movs	r3, r7
    a8e6:	000d      	movs	r5, r1
    a8e8:	24ff      	movs	r4, #255	; 0xff
    a8ea:	e6c2      	b.n	a672 <__aeabi_fadd+0x76>
    a8ec:	4663      	mov	r3, ip
    a8ee:	24ff      	movs	r4, #255	; 0xff
    a8f0:	e6bf      	b.n	a672 <__aeabi_fadd+0x76>
    a8f2:	2301      	movs	r3, #1
    a8f4:	e77a      	b.n	a7ec <__aeabi_fadd+0x1f0>
    a8f6:	003b      	movs	r3, r7
    a8f8:	0004      	movs	r4, r0
    a8fa:	e6ba      	b.n	a672 <__aeabi_fadd+0x76>
    a8fc:	2680      	movs	r6, #128	; 0x80
    a8fe:	2200      	movs	r2, #0
    a900:	03f6      	lsls	r6, r6, #15
    a902:	e6f0      	b.n	a6e6 <__aeabi_fadd+0xea>
    a904:	003b      	movs	r3, r7
    a906:	e6b4      	b.n	a672 <__aeabi_fadd+0x76>
    a908:	1e33      	subs	r3, r6, #0
    a90a:	d000      	beq.n	a90e <__aeabi_fadd+0x312>
    a90c:	e6e2      	b.n	a6d4 <__aeabi_fadd+0xd8>
    a90e:	2200      	movs	r2, #0
    a910:	e721      	b.n	a756 <__aeabi_fadd+0x15a>
    a912:	2301      	movs	r3, #1
    a914:	e7bd      	b.n	a892 <__aeabi_fadd+0x296>
    a916:	46c0      	nop			; (mov r8, r8)
    a918:	7dffffff 	.word	0x7dffffff
    a91c:	fbffffff 	.word	0xfbffffff

0000a920 <__aeabi_fdiv>:
    a920:	b5f0      	push	{r4, r5, r6, r7, lr}
    a922:	4657      	mov	r7, sl
    a924:	464e      	mov	r6, r9
    a926:	46de      	mov	lr, fp
    a928:	4645      	mov	r5, r8
    a92a:	b5e0      	push	{r5, r6, r7, lr}
    a92c:	0244      	lsls	r4, r0, #9
    a92e:	0043      	lsls	r3, r0, #1
    a930:	0fc6      	lsrs	r6, r0, #31
    a932:	b083      	sub	sp, #12
    a934:	1c0f      	adds	r7, r1, #0
    a936:	0a64      	lsrs	r4, r4, #9
    a938:	0e1b      	lsrs	r3, r3, #24
    a93a:	46b2      	mov	sl, r6
    a93c:	d053      	beq.n	a9e6 <__aeabi_fdiv+0xc6>
    a93e:	2bff      	cmp	r3, #255	; 0xff
    a940:	d027      	beq.n	a992 <__aeabi_fdiv+0x72>
    a942:	2280      	movs	r2, #128	; 0x80
    a944:	00e4      	lsls	r4, r4, #3
    a946:	04d2      	lsls	r2, r2, #19
    a948:	4314      	orrs	r4, r2
    a94a:	227f      	movs	r2, #127	; 0x7f
    a94c:	4252      	negs	r2, r2
    a94e:	4690      	mov	r8, r2
    a950:	4498      	add	r8, r3
    a952:	2300      	movs	r3, #0
    a954:	4699      	mov	r9, r3
    a956:	469b      	mov	fp, r3
    a958:	027d      	lsls	r5, r7, #9
    a95a:	0078      	lsls	r0, r7, #1
    a95c:	0ffb      	lsrs	r3, r7, #31
    a95e:	0a6d      	lsrs	r5, r5, #9
    a960:	0e00      	lsrs	r0, r0, #24
    a962:	9300      	str	r3, [sp, #0]
    a964:	d024      	beq.n	a9b0 <__aeabi_fdiv+0x90>
    a966:	28ff      	cmp	r0, #255	; 0xff
    a968:	d046      	beq.n	a9f8 <__aeabi_fdiv+0xd8>
    a96a:	2380      	movs	r3, #128	; 0x80
    a96c:	2100      	movs	r1, #0
    a96e:	00ed      	lsls	r5, r5, #3
    a970:	04db      	lsls	r3, r3, #19
    a972:	431d      	orrs	r5, r3
    a974:	387f      	subs	r0, #127	; 0x7f
    a976:	4647      	mov	r7, r8
    a978:	1a38      	subs	r0, r7, r0
    a97a:	464f      	mov	r7, r9
    a97c:	430f      	orrs	r7, r1
    a97e:	00bf      	lsls	r7, r7, #2
    a980:	46b9      	mov	r9, r7
    a982:	0033      	movs	r3, r6
    a984:	9a00      	ldr	r2, [sp, #0]
    a986:	4f87      	ldr	r7, [pc, #540]	; (aba4 <__aeabi_fdiv+0x284>)
    a988:	4053      	eors	r3, r2
    a98a:	464a      	mov	r2, r9
    a98c:	58ba      	ldr	r2, [r7, r2]
    a98e:	9301      	str	r3, [sp, #4]
    a990:	4697      	mov	pc, r2
    a992:	2c00      	cmp	r4, #0
    a994:	d14e      	bne.n	aa34 <__aeabi_fdiv+0x114>
    a996:	2308      	movs	r3, #8
    a998:	4699      	mov	r9, r3
    a99a:	33f7      	adds	r3, #247	; 0xf7
    a99c:	4698      	mov	r8, r3
    a99e:	3bfd      	subs	r3, #253	; 0xfd
    a9a0:	469b      	mov	fp, r3
    a9a2:	027d      	lsls	r5, r7, #9
    a9a4:	0078      	lsls	r0, r7, #1
    a9a6:	0ffb      	lsrs	r3, r7, #31
    a9a8:	0a6d      	lsrs	r5, r5, #9
    a9aa:	0e00      	lsrs	r0, r0, #24
    a9ac:	9300      	str	r3, [sp, #0]
    a9ae:	d1da      	bne.n	a966 <__aeabi_fdiv+0x46>
    a9b0:	2d00      	cmp	r5, #0
    a9b2:	d126      	bne.n	aa02 <__aeabi_fdiv+0xe2>
    a9b4:	2000      	movs	r0, #0
    a9b6:	2101      	movs	r1, #1
    a9b8:	0033      	movs	r3, r6
    a9ba:	9a00      	ldr	r2, [sp, #0]
    a9bc:	4f7a      	ldr	r7, [pc, #488]	; (aba8 <__aeabi_fdiv+0x288>)
    a9be:	4053      	eors	r3, r2
    a9c0:	4642      	mov	r2, r8
    a9c2:	1a10      	subs	r0, r2, r0
    a9c4:	464a      	mov	r2, r9
    a9c6:	430a      	orrs	r2, r1
    a9c8:	0092      	lsls	r2, r2, #2
    a9ca:	58ba      	ldr	r2, [r7, r2]
    a9cc:	001d      	movs	r5, r3
    a9ce:	4697      	mov	pc, r2
    a9d0:	9b00      	ldr	r3, [sp, #0]
    a9d2:	002c      	movs	r4, r5
    a9d4:	469a      	mov	sl, r3
    a9d6:	468b      	mov	fp, r1
    a9d8:	465b      	mov	r3, fp
    a9da:	2b02      	cmp	r3, #2
    a9dc:	d131      	bne.n	aa42 <__aeabi_fdiv+0x122>
    a9de:	4653      	mov	r3, sl
    a9e0:	21ff      	movs	r1, #255	; 0xff
    a9e2:	2400      	movs	r4, #0
    a9e4:	e038      	b.n	aa58 <__aeabi_fdiv+0x138>
    a9e6:	2c00      	cmp	r4, #0
    a9e8:	d117      	bne.n	aa1a <__aeabi_fdiv+0xfa>
    a9ea:	2304      	movs	r3, #4
    a9ec:	4699      	mov	r9, r3
    a9ee:	2300      	movs	r3, #0
    a9f0:	4698      	mov	r8, r3
    a9f2:	3301      	adds	r3, #1
    a9f4:	469b      	mov	fp, r3
    a9f6:	e7af      	b.n	a958 <__aeabi_fdiv+0x38>
    a9f8:	20ff      	movs	r0, #255	; 0xff
    a9fa:	2d00      	cmp	r5, #0
    a9fc:	d10b      	bne.n	aa16 <__aeabi_fdiv+0xf6>
    a9fe:	2102      	movs	r1, #2
    aa00:	e7da      	b.n	a9b8 <__aeabi_fdiv+0x98>
    aa02:	0028      	movs	r0, r5
    aa04:	f002 fb0c 	bl	d020 <__clzsi2>
    aa08:	1f43      	subs	r3, r0, #5
    aa0a:	409d      	lsls	r5, r3
    aa0c:	2376      	movs	r3, #118	; 0x76
    aa0e:	425b      	negs	r3, r3
    aa10:	1a18      	subs	r0, r3, r0
    aa12:	2100      	movs	r1, #0
    aa14:	e7af      	b.n	a976 <__aeabi_fdiv+0x56>
    aa16:	2103      	movs	r1, #3
    aa18:	e7ad      	b.n	a976 <__aeabi_fdiv+0x56>
    aa1a:	0020      	movs	r0, r4
    aa1c:	f002 fb00 	bl	d020 <__clzsi2>
    aa20:	1f43      	subs	r3, r0, #5
    aa22:	409c      	lsls	r4, r3
    aa24:	2376      	movs	r3, #118	; 0x76
    aa26:	425b      	negs	r3, r3
    aa28:	1a1b      	subs	r3, r3, r0
    aa2a:	4698      	mov	r8, r3
    aa2c:	2300      	movs	r3, #0
    aa2e:	4699      	mov	r9, r3
    aa30:	469b      	mov	fp, r3
    aa32:	e791      	b.n	a958 <__aeabi_fdiv+0x38>
    aa34:	230c      	movs	r3, #12
    aa36:	4699      	mov	r9, r3
    aa38:	33f3      	adds	r3, #243	; 0xf3
    aa3a:	4698      	mov	r8, r3
    aa3c:	3bfc      	subs	r3, #252	; 0xfc
    aa3e:	469b      	mov	fp, r3
    aa40:	e78a      	b.n	a958 <__aeabi_fdiv+0x38>
    aa42:	2b03      	cmp	r3, #3
    aa44:	d100      	bne.n	aa48 <__aeabi_fdiv+0x128>
    aa46:	e0a5      	b.n	ab94 <__aeabi_fdiv+0x274>
    aa48:	4655      	mov	r5, sl
    aa4a:	2b01      	cmp	r3, #1
    aa4c:	d000      	beq.n	aa50 <__aeabi_fdiv+0x130>
    aa4e:	e081      	b.n	ab54 <__aeabi_fdiv+0x234>
    aa50:	2301      	movs	r3, #1
    aa52:	2100      	movs	r1, #0
    aa54:	2400      	movs	r4, #0
    aa56:	402b      	ands	r3, r5
    aa58:	0264      	lsls	r4, r4, #9
    aa5a:	05c9      	lsls	r1, r1, #23
    aa5c:	0a60      	lsrs	r0, r4, #9
    aa5e:	07db      	lsls	r3, r3, #31
    aa60:	4308      	orrs	r0, r1
    aa62:	4318      	orrs	r0, r3
    aa64:	b003      	add	sp, #12
    aa66:	bc3c      	pop	{r2, r3, r4, r5}
    aa68:	4690      	mov	r8, r2
    aa6a:	4699      	mov	r9, r3
    aa6c:	46a2      	mov	sl, r4
    aa6e:	46ab      	mov	fp, r5
    aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa72:	2480      	movs	r4, #128	; 0x80
    aa74:	2300      	movs	r3, #0
    aa76:	03e4      	lsls	r4, r4, #15
    aa78:	21ff      	movs	r1, #255	; 0xff
    aa7a:	e7ed      	b.n	aa58 <__aeabi_fdiv+0x138>
    aa7c:	21ff      	movs	r1, #255	; 0xff
    aa7e:	2400      	movs	r4, #0
    aa80:	e7ea      	b.n	aa58 <__aeabi_fdiv+0x138>
    aa82:	2301      	movs	r3, #1
    aa84:	1a59      	subs	r1, r3, r1
    aa86:	291b      	cmp	r1, #27
    aa88:	dd66      	ble.n	ab58 <__aeabi_fdiv+0x238>
    aa8a:	9a01      	ldr	r2, [sp, #4]
    aa8c:	4013      	ands	r3, r2
    aa8e:	2100      	movs	r1, #0
    aa90:	2400      	movs	r4, #0
    aa92:	e7e1      	b.n	aa58 <__aeabi_fdiv+0x138>
    aa94:	2380      	movs	r3, #128	; 0x80
    aa96:	03db      	lsls	r3, r3, #15
    aa98:	421c      	tst	r4, r3
    aa9a:	d038      	beq.n	ab0e <__aeabi_fdiv+0x1ee>
    aa9c:	421d      	tst	r5, r3
    aa9e:	d051      	beq.n	ab44 <__aeabi_fdiv+0x224>
    aaa0:	431c      	orrs	r4, r3
    aaa2:	0264      	lsls	r4, r4, #9
    aaa4:	0a64      	lsrs	r4, r4, #9
    aaa6:	0033      	movs	r3, r6
    aaa8:	21ff      	movs	r1, #255	; 0xff
    aaaa:	e7d5      	b.n	aa58 <__aeabi_fdiv+0x138>
    aaac:	0163      	lsls	r3, r4, #5
    aaae:	016c      	lsls	r4, r5, #5
    aab0:	42a3      	cmp	r3, r4
    aab2:	d23b      	bcs.n	ab2c <__aeabi_fdiv+0x20c>
    aab4:	261b      	movs	r6, #27
    aab6:	2100      	movs	r1, #0
    aab8:	3801      	subs	r0, #1
    aaba:	2501      	movs	r5, #1
    aabc:	001f      	movs	r7, r3
    aabe:	0049      	lsls	r1, r1, #1
    aac0:	005b      	lsls	r3, r3, #1
    aac2:	2f00      	cmp	r7, #0
    aac4:	db01      	blt.n	aaca <__aeabi_fdiv+0x1aa>
    aac6:	429c      	cmp	r4, r3
    aac8:	d801      	bhi.n	aace <__aeabi_fdiv+0x1ae>
    aaca:	1b1b      	subs	r3, r3, r4
    aacc:	4329      	orrs	r1, r5
    aace:	3e01      	subs	r6, #1
    aad0:	2e00      	cmp	r6, #0
    aad2:	d1f3      	bne.n	aabc <__aeabi_fdiv+0x19c>
    aad4:	001c      	movs	r4, r3
    aad6:	1e63      	subs	r3, r4, #1
    aad8:	419c      	sbcs	r4, r3
    aada:	430c      	orrs	r4, r1
    aadc:	0001      	movs	r1, r0
    aade:	317f      	adds	r1, #127	; 0x7f
    aae0:	2900      	cmp	r1, #0
    aae2:	ddce      	ble.n	aa82 <__aeabi_fdiv+0x162>
    aae4:	0763      	lsls	r3, r4, #29
    aae6:	d004      	beq.n	aaf2 <__aeabi_fdiv+0x1d2>
    aae8:	230f      	movs	r3, #15
    aaea:	4023      	ands	r3, r4
    aaec:	2b04      	cmp	r3, #4
    aaee:	d000      	beq.n	aaf2 <__aeabi_fdiv+0x1d2>
    aaf0:	3404      	adds	r4, #4
    aaf2:	0123      	lsls	r3, r4, #4
    aaf4:	d503      	bpl.n	aafe <__aeabi_fdiv+0x1de>
    aaf6:	0001      	movs	r1, r0
    aaf8:	4b2c      	ldr	r3, [pc, #176]	; (abac <__aeabi_fdiv+0x28c>)
    aafa:	3180      	adds	r1, #128	; 0x80
    aafc:	401c      	ands	r4, r3
    aafe:	29fe      	cmp	r1, #254	; 0xfe
    ab00:	dd0d      	ble.n	ab1e <__aeabi_fdiv+0x1fe>
    ab02:	2301      	movs	r3, #1
    ab04:	9a01      	ldr	r2, [sp, #4]
    ab06:	21ff      	movs	r1, #255	; 0xff
    ab08:	4013      	ands	r3, r2
    ab0a:	2400      	movs	r4, #0
    ab0c:	e7a4      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab0e:	2380      	movs	r3, #128	; 0x80
    ab10:	03db      	lsls	r3, r3, #15
    ab12:	431c      	orrs	r4, r3
    ab14:	0264      	lsls	r4, r4, #9
    ab16:	0a64      	lsrs	r4, r4, #9
    ab18:	0033      	movs	r3, r6
    ab1a:	21ff      	movs	r1, #255	; 0xff
    ab1c:	e79c      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab1e:	2301      	movs	r3, #1
    ab20:	9a01      	ldr	r2, [sp, #4]
    ab22:	01a4      	lsls	r4, r4, #6
    ab24:	0a64      	lsrs	r4, r4, #9
    ab26:	b2c9      	uxtb	r1, r1
    ab28:	4013      	ands	r3, r2
    ab2a:	e795      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab2c:	1b1b      	subs	r3, r3, r4
    ab2e:	261a      	movs	r6, #26
    ab30:	2101      	movs	r1, #1
    ab32:	e7c2      	b.n	aaba <__aeabi_fdiv+0x19a>
    ab34:	9b00      	ldr	r3, [sp, #0]
    ab36:	468b      	mov	fp, r1
    ab38:	469a      	mov	sl, r3
    ab3a:	2400      	movs	r4, #0
    ab3c:	e74c      	b.n	a9d8 <__aeabi_fdiv+0xb8>
    ab3e:	0263      	lsls	r3, r4, #9
    ab40:	d5e5      	bpl.n	ab0e <__aeabi_fdiv+0x1ee>
    ab42:	2500      	movs	r5, #0
    ab44:	2480      	movs	r4, #128	; 0x80
    ab46:	03e4      	lsls	r4, r4, #15
    ab48:	432c      	orrs	r4, r5
    ab4a:	0264      	lsls	r4, r4, #9
    ab4c:	0a64      	lsrs	r4, r4, #9
    ab4e:	9b00      	ldr	r3, [sp, #0]
    ab50:	21ff      	movs	r1, #255	; 0xff
    ab52:	e781      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab54:	9501      	str	r5, [sp, #4]
    ab56:	e7c1      	b.n	aadc <__aeabi_fdiv+0x1bc>
    ab58:	0023      	movs	r3, r4
    ab5a:	2020      	movs	r0, #32
    ab5c:	40cb      	lsrs	r3, r1
    ab5e:	1a41      	subs	r1, r0, r1
    ab60:	408c      	lsls	r4, r1
    ab62:	1e61      	subs	r1, r4, #1
    ab64:	418c      	sbcs	r4, r1
    ab66:	431c      	orrs	r4, r3
    ab68:	0763      	lsls	r3, r4, #29
    ab6a:	d004      	beq.n	ab76 <__aeabi_fdiv+0x256>
    ab6c:	230f      	movs	r3, #15
    ab6e:	4023      	ands	r3, r4
    ab70:	2b04      	cmp	r3, #4
    ab72:	d000      	beq.n	ab76 <__aeabi_fdiv+0x256>
    ab74:	3404      	adds	r4, #4
    ab76:	0163      	lsls	r3, r4, #5
    ab78:	d505      	bpl.n	ab86 <__aeabi_fdiv+0x266>
    ab7a:	2301      	movs	r3, #1
    ab7c:	9a01      	ldr	r2, [sp, #4]
    ab7e:	2101      	movs	r1, #1
    ab80:	4013      	ands	r3, r2
    ab82:	2400      	movs	r4, #0
    ab84:	e768      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab86:	2301      	movs	r3, #1
    ab88:	9a01      	ldr	r2, [sp, #4]
    ab8a:	01a4      	lsls	r4, r4, #6
    ab8c:	0a64      	lsrs	r4, r4, #9
    ab8e:	4013      	ands	r3, r2
    ab90:	2100      	movs	r1, #0
    ab92:	e761      	b.n	aa58 <__aeabi_fdiv+0x138>
    ab94:	2380      	movs	r3, #128	; 0x80
    ab96:	03db      	lsls	r3, r3, #15
    ab98:	431c      	orrs	r4, r3
    ab9a:	0264      	lsls	r4, r4, #9
    ab9c:	0a64      	lsrs	r4, r4, #9
    ab9e:	4653      	mov	r3, sl
    aba0:	21ff      	movs	r1, #255	; 0xff
    aba2:	e759      	b.n	aa58 <__aeabi_fdiv+0x138>
    aba4:	0000dcf0 	.word	0x0000dcf0
    aba8:	0000dd30 	.word	0x0000dd30
    abac:	f7ffffff 	.word	0xf7ffffff

0000abb0 <__eqsf2>:
    abb0:	b570      	push	{r4, r5, r6, lr}
    abb2:	0042      	lsls	r2, r0, #1
    abb4:	0245      	lsls	r5, r0, #9
    abb6:	024e      	lsls	r6, r1, #9
    abb8:	004c      	lsls	r4, r1, #1
    abba:	0fc3      	lsrs	r3, r0, #31
    abbc:	0a6d      	lsrs	r5, r5, #9
    abbe:	0e12      	lsrs	r2, r2, #24
    abc0:	0a76      	lsrs	r6, r6, #9
    abc2:	0e24      	lsrs	r4, r4, #24
    abc4:	0fc9      	lsrs	r1, r1, #31
    abc6:	2001      	movs	r0, #1
    abc8:	2aff      	cmp	r2, #255	; 0xff
    abca:	d006      	beq.n	abda <__eqsf2+0x2a>
    abcc:	2cff      	cmp	r4, #255	; 0xff
    abce:	d003      	beq.n	abd8 <__eqsf2+0x28>
    abd0:	42a2      	cmp	r2, r4
    abd2:	d101      	bne.n	abd8 <__eqsf2+0x28>
    abd4:	42b5      	cmp	r5, r6
    abd6:	d006      	beq.n	abe6 <__eqsf2+0x36>
    abd8:	bd70      	pop	{r4, r5, r6, pc}
    abda:	2d00      	cmp	r5, #0
    abdc:	d1fc      	bne.n	abd8 <__eqsf2+0x28>
    abde:	2cff      	cmp	r4, #255	; 0xff
    abe0:	d1fa      	bne.n	abd8 <__eqsf2+0x28>
    abe2:	2e00      	cmp	r6, #0
    abe4:	d1f8      	bne.n	abd8 <__eqsf2+0x28>
    abe6:	428b      	cmp	r3, r1
    abe8:	d006      	beq.n	abf8 <__eqsf2+0x48>
    abea:	2001      	movs	r0, #1
    abec:	2a00      	cmp	r2, #0
    abee:	d1f3      	bne.n	abd8 <__eqsf2+0x28>
    abf0:	0028      	movs	r0, r5
    abf2:	1e45      	subs	r5, r0, #1
    abf4:	41a8      	sbcs	r0, r5
    abf6:	e7ef      	b.n	abd8 <__eqsf2+0x28>
    abf8:	2000      	movs	r0, #0
    abfa:	e7ed      	b.n	abd8 <__eqsf2+0x28>

0000abfc <__gesf2>:
    abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    abfe:	0042      	lsls	r2, r0, #1
    ac00:	0245      	lsls	r5, r0, #9
    ac02:	024c      	lsls	r4, r1, #9
    ac04:	0fc3      	lsrs	r3, r0, #31
    ac06:	0048      	lsls	r0, r1, #1
    ac08:	0a6d      	lsrs	r5, r5, #9
    ac0a:	0e12      	lsrs	r2, r2, #24
    ac0c:	0a64      	lsrs	r4, r4, #9
    ac0e:	0e00      	lsrs	r0, r0, #24
    ac10:	0fc9      	lsrs	r1, r1, #31
    ac12:	2aff      	cmp	r2, #255	; 0xff
    ac14:	d01e      	beq.n	ac54 <__gesf2+0x58>
    ac16:	28ff      	cmp	r0, #255	; 0xff
    ac18:	d021      	beq.n	ac5e <__gesf2+0x62>
    ac1a:	2a00      	cmp	r2, #0
    ac1c:	d10a      	bne.n	ac34 <__gesf2+0x38>
    ac1e:	426e      	negs	r6, r5
    ac20:	416e      	adcs	r6, r5
    ac22:	b2f6      	uxtb	r6, r6
    ac24:	2800      	cmp	r0, #0
    ac26:	d10f      	bne.n	ac48 <__gesf2+0x4c>
    ac28:	2c00      	cmp	r4, #0
    ac2a:	d10d      	bne.n	ac48 <__gesf2+0x4c>
    ac2c:	2000      	movs	r0, #0
    ac2e:	2d00      	cmp	r5, #0
    ac30:	d009      	beq.n	ac46 <__gesf2+0x4a>
    ac32:	e005      	b.n	ac40 <__gesf2+0x44>
    ac34:	2800      	cmp	r0, #0
    ac36:	d101      	bne.n	ac3c <__gesf2+0x40>
    ac38:	2c00      	cmp	r4, #0
    ac3a:	d001      	beq.n	ac40 <__gesf2+0x44>
    ac3c:	428b      	cmp	r3, r1
    ac3e:	d011      	beq.n	ac64 <__gesf2+0x68>
    ac40:	2101      	movs	r1, #1
    ac42:	4258      	negs	r0, r3
    ac44:	4308      	orrs	r0, r1
    ac46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac48:	2e00      	cmp	r6, #0
    ac4a:	d0f7      	beq.n	ac3c <__gesf2+0x40>
    ac4c:	2001      	movs	r0, #1
    ac4e:	3901      	subs	r1, #1
    ac50:	4308      	orrs	r0, r1
    ac52:	e7f8      	b.n	ac46 <__gesf2+0x4a>
    ac54:	2d00      	cmp	r5, #0
    ac56:	d0de      	beq.n	ac16 <__gesf2+0x1a>
    ac58:	2002      	movs	r0, #2
    ac5a:	4240      	negs	r0, r0
    ac5c:	e7f3      	b.n	ac46 <__gesf2+0x4a>
    ac5e:	2c00      	cmp	r4, #0
    ac60:	d0db      	beq.n	ac1a <__gesf2+0x1e>
    ac62:	e7f9      	b.n	ac58 <__gesf2+0x5c>
    ac64:	4282      	cmp	r2, r0
    ac66:	dceb      	bgt.n	ac40 <__gesf2+0x44>
    ac68:	db04      	blt.n	ac74 <__gesf2+0x78>
    ac6a:	42a5      	cmp	r5, r4
    ac6c:	d8e8      	bhi.n	ac40 <__gesf2+0x44>
    ac6e:	2000      	movs	r0, #0
    ac70:	42a5      	cmp	r5, r4
    ac72:	d2e8      	bcs.n	ac46 <__gesf2+0x4a>
    ac74:	2101      	movs	r1, #1
    ac76:	1e58      	subs	r0, r3, #1
    ac78:	4308      	orrs	r0, r1
    ac7a:	e7e4      	b.n	ac46 <__gesf2+0x4a>

0000ac7c <__lesf2>:
    ac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac7e:	0042      	lsls	r2, r0, #1
    ac80:	024d      	lsls	r5, r1, #9
    ac82:	004c      	lsls	r4, r1, #1
    ac84:	0246      	lsls	r6, r0, #9
    ac86:	0a76      	lsrs	r6, r6, #9
    ac88:	0e12      	lsrs	r2, r2, #24
    ac8a:	0fc3      	lsrs	r3, r0, #31
    ac8c:	0a6d      	lsrs	r5, r5, #9
    ac8e:	0e24      	lsrs	r4, r4, #24
    ac90:	0fc9      	lsrs	r1, r1, #31
    ac92:	2aff      	cmp	r2, #255	; 0xff
    ac94:	d016      	beq.n	acc4 <__lesf2+0x48>
    ac96:	2cff      	cmp	r4, #255	; 0xff
    ac98:	d018      	beq.n	accc <__lesf2+0x50>
    ac9a:	2a00      	cmp	r2, #0
    ac9c:	d10a      	bne.n	acb4 <__lesf2+0x38>
    ac9e:	4270      	negs	r0, r6
    aca0:	4170      	adcs	r0, r6
    aca2:	b2c0      	uxtb	r0, r0
    aca4:	2c00      	cmp	r4, #0
    aca6:	d015      	beq.n	acd4 <__lesf2+0x58>
    aca8:	2800      	cmp	r0, #0
    acaa:	d005      	beq.n	acb8 <__lesf2+0x3c>
    acac:	2001      	movs	r0, #1
    acae:	3901      	subs	r1, #1
    acb0:	4308      	orrs	r0, r1
    acb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acb4:	2c00      	cmp	r4, #0
    acb6:	d013      	beq.n	ace0 <__lesf2+0x64>
    acb8:	4299      	cmp	r1, r3
    acba:	d014      	beq.n	ace6 <__lesf2+0x6a>
    acbc:	2001      	movs	r0, #1
    acbe:	425b      	negs	r3, r3
    acc0:	4318      	orrs	r0, r3
    acc2:	e7f6      	b.n	acb2 <__lesf2+0x36>
    acc4:	2002      	movs	r0, #2
    acc6:	2e00      	cmp	r6, #0
    acc8:	d1f3      	bne.n	acb2 <__lesf2+0x36>
    acca:	e7e4      	b.n	ac96 <__lesf2+0x1a>
    accc:	2002      	movs	r0, #2
    acce:	2d00      	cmp	r5, #0
    acd0:	d1ef      	bne.n	acb2 <__lesf2+0x36>
    acd2:	e7e2      	b.n	ac9a <__lesf2+0x1e>
    acd4:	2d00      	cmp	r5, #0
    acd6:	d1e7      	bne.n	aca8 <__lesf2+0x2c>
    acd8:	2000      	movs	r0, #0
    acda:	2e00      	cmp	r6, #0
    acdc:	d0e9      	beq.n	acb2 <__lesf2+0x36>
    acde:	e7ed      	b.n	acbc <__lesf2+0x40>
    ace0:	2d00      	cmp	r5, #0
    ace2:	d1e9      	bne.n	acb8 <__lesf2+0x3c>
    ace4:	e7ea      	b.n	acbc <__lesf2+0x40>
    ace6:	42a2      	cmp	r2, r4
    ace8:	dc06      	bgt.n	acf8 <__lesf2+0x7c>
    acea:	dbdf      	blt.n	acac <__lesf2+0x30>
    acec:	42ae      	cmp	r6, r5
    acee:	d803      	bhi.n	acf8 <__lesf2+0x7c>
    acf0:	2000      	movs	r0, #0
    acf2:	42ae      	cmp	r6, r5
    acf4:	d3da      	bcc.n	acac <__lesf2+0x30>
    acf6:	e7dc      	b.n	acb2 <__lesf2+0x36>
    acf8:	2001      	movs	r0, #1
    acfa:	4249      	negs	r1, r1
    acfc:	4308      	orrs	r0, r1
    acfe:	e7d8      	b.n	acb2 <__lesf2+0x36>

0000ad00 <__aeabi_fmul>:
    ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad02:	4657      	mov	r7, sl
    ad04:	464e      	mov	r6, r9
    ad06:	4645      	mov	r5, r8
    ad08:	46de      	mov	lr, fp
    ad0a:	b5e0      	push	{r5, r6, r7, lr}
    ad0c:	0247      	lsls	r7, r0, #9
    ad0e:	0046      	lsls	r6, r0, #1
    ad10:	4688      	mov	r8, r1
    ad12:	0a7f      	lsrs	r7, r7, #9
    ad14:	0e36      	lsrs	r6, r6, #24
    ad16:	0fc4      	lsrs	r4, r0, #31
    ad18:	2e00      	cmp	r6, #0
    ad1a:	d047      	beq.n	adac <__aeabi_fmul+0xac>
    ad1c:	2eff      	cmp	r6, #255	; 0xff
    ad1e:	d024      	beq.n	ad6a <__aeabi_fmul+0x6a>
    ad20:	00fb      	lsls	r3, r7, #3
    ad22:	2780      	movs	r7, #128	; 0x80
    ad24:	04ff      	lsls	r7, r7, #19
    ad26:	431f      	orrs	r7, r3
    ad28:	2300      	movs	r3, #0
    ad2a:	4699      	mov	r9, r3
    ad2c:	469a      	mov	sl, r3
    ad2e:	3e7f      	subs	r6, #127	; 0x7f
    ad30:	4643      	mov	r3, r8
    ad32:	025d      	lsls	r5, r3, #9
    ad34:	0058      	lsls	r0, r3, #1
    ad36:	0fdb      	lsrs	r3, r3, #31
    ad38:	0a6d      	lsrs	r5, r5, #9
    ad3a:	0e00      	lsrs	r0, r0, #24
    ad3c:	4698      	mov	r8, r3
    ad3e:	d043      	beq.n	adc8 <__aeabi_fmul+0xc8>
    ad40:	28ff      	cmp	r0, #255	; 0xff
    ad42:	d03b      	beq.n	adbc <__aeabi_fmul+0xbc>
    ad44:	00eb      	lsls	r3, r5, #3
    ad46:	2580      	movs	r5, #128	; 0x80
    ad48:	2200      	movs	r2, #0
    ad4a:	04ed      	lsls	r5, r5, #19
    ad4c:	431d      	orrs	r5, r3
    ad4e:	387f      	subs	r0, #127	; 0x7f
    ad50:	1836      	adds	r6, r6, r0
    ad52:	1c73      	adds	r3, r6, #1
    ad54:	4641      	mov	r1, r8
    ad56:	469b      	mov	fp, r3
    ad58:	464b      	mov	r3, r9
    ad5a:	4061      	eors	r1, r4
    ad5c:	4313      	orrs	r3, r2
    ad5e:	2b0f      	cmp	r3, #15
    ad60:	d864      	bhi.n	ae2c <__aeabi_fmul+0x12c>
    ad62:	4875      	ldr	r0, [pc, #468]	; (af38 <__aeabi_fmul+0x238>)
    ad64:	009b      	lsls	r3, r3, #2
    ad66:	58c3      	ldr	r3, [r0, r3]
    ad68:	469f      	mov	pc, r3
    ad6a:	2f00      	cmp	r7, #0
    ad6c:	d142      	bne.n	adf4 <__aeabi_fmul+0xf4>
    ad6e:	2308      	movs	r3, #8
    ad70:	4699      	mov	r9, r3
    ad72:	3b06      	subs	r3, #6
    ad74:	26ff      	movs	r6, #255	; 0xff
    ad76:	469a      	mov	sl, r3
    ad78:	e7da      	b.n	ad30 <__aeabi_fmul+0x30>
    ad7a:	4641      	mov	r1, r8
    ad7c:	2a02      	cmp	r2, #2
    ad7e:	d028      	beq.n	add2 <__aeabi_fmul+0xd2>
    ad80:	2a03      	cmp	r2, #3
    ad82:	d100      	bne.n	ad86 <__aeabi_fmul+0x86>
    ad84:	e0ce      	b.n	af24 <__aeabi_fmul+0x224>
    ad86:	2a01      	cmp	r2, #1
    ad88:	d000      	beq.n	ad8c <__aeabi_fmul+0x8c>
    ad8a:	e0ac      	b.n	aee6 <__aeabi_fmul+0x1e6>
    ad8c:	4011      	ands	r1, r2
    ad8e:	2000      	movs	r0, #0
    ad90:	2200      	movs	r2, #0
    ad92:	b2cc      	uxtb	r4, r1
    ad94:	0240      	lsls	r0, r0, #9
    ad96:	05d2      	lsls	r2, r2, #23
    ad98:	0a40      	lsrs	r0, r0, #9
    ad9a:	07e4      	lsls	r4, r4, #31
    ad9c:	4310      	orrs	r0, r2
    ad9e:	4320      	orrs	r0, r4
    ada0:	bc3c      	pop	{r2, r3, r4, r5}
    ada2:	4690      	mov	r8, r2
    ada4:	4699      	mov	r9, r3
    ada6:	46a2      	mov	sl, r4
    ada8:	46ab      	mov	fp, r5
    adaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adac:	2f00      	cmp	r7, #0
    adae:	d115      	bne.n	addc <__aeabi_fmul+0xdc>
    adb0:	2304      	movs	r3, #4
    adb2:	4699      	mov	r9, r3
    adb4:	3b03      	subs	r3, #3
    adb6:	2600      	movs	r6, #0
    adb8:	469a      	mov	sl, r3
    adba:	e7b9      	b.n	ad30 <__aeabi_fmul+0x30>
    adbc:	20ff      	movs	r0, #255	; 0xff
    adbe:	2202      	movs	r2, #2
    adc0:	2d00      	cmp	r5, #0
    adc2:	d0c5      	beq.n	ad50 <__aeabi_fmul+0x50>
    adc4:	2203      	movs	r2, #3
    adc6:	e7c3      	b.n	ad50 <__aeabi_fmul+0x50>
    adc8:	2d00      	cmp	r5, #0
    adca:	d119      	bne.n	ae00 <__aeabi_fmul+0x100>
    adcc:	2000      	movs	r0, #0
    adce:	2201      	movs	r2, #1
    add0:	e7be      	b.n	ad50 <__aeabi_fmul+0x50>
    add2:	2401      	movs	r4, #1
    add4:	22ff      	movs	r2, #255	; 0xff
    add6:	400c      	ands	r4, r1
    add8:	2000      	movs	r0, #0
    adda:	e7db      	b.n	ad94 <__aeabi_fmul+0x94>
    addc:	0038      	movs	r0, r7
    adde:	f002 f91f 	bl	d020 <__clzsi2>
    ade2:	2676      	movs	r6, #118	; 0x76
    ade4:	1f43      	subs	r3, r0, #5
    ade6:	409f      	lsls	r7, r3
    ade8:	2300      	movs	r3, #0
    adea:	4276      	negs	r6, r6
    adec:	1a36      	subs	r6, r6, r0
    adee:	4699      	mov	r9, r3
    adf0:	469a      	mov	sl, r3
    adf2:	e79d      	b.n	ad30 <__aeabi_fmul+0x30>
    adf4:	230c      	movs	r3, #12
    adf6:	4699      	mov	r9, r3
    adf8:	3b09      	subs	r3, #9
    adfa:	26ff      	movs	r6, #255	; 0xff
    adfc:	469a      	mov	sl, r3
    adfe:	e797      	b.n	ad30 <__aeabi_fmul+0x30>
    ae00:	0028      	movs	r0, r5
    ae02:	f002 f90d 	bl	d020 <__clzsi2>
    ae06:	1f43      	subs	r3, r0, #5
    ae08:	409d      	lsls	r5, r3
    ae0a:	2376      	movs	r3, #118	; 0x76
    ae0c:	425b      	negs	r3, r3
    ae0e:	1a18      	subs	r0, r3, r0
    ae10:	2200      	movs	r2, #0
    ae12:	e79d      	b.n	ad50 <__aeabi_fmul+0x50>
    ae14:	2080      	movs	r0, #128	; 0x80
    ae16:	2400      	movs	r4, #0
    ae18:	03c0      	lsls	r0, r0, #15
    ae1a:	22ff      	movs	r2, #255	; 0xff
    ae1c:	e7ba      	b.n	ad94 <__aeabi_fmul+0x94>
    ae1e:	003d      	movs	r5, r7
    ae20:	4652      	mov	r2, sl
    ae22:	e7ab      	b.n	ad7c <__aeabi_fmul+0x7c>
    ae24:	003d      	movs	r5, r7
    ae26:	0021      	movs	r1, r4
    ae28:	4652      	mov	r2, sl
    ae2a:	e7a7      	b.n	ad7c <__aeabi_fmul+0x7c>
    ae2c:	0c3b      	lsrs	r3, r7, #16
    ae2e:	469c      	mov	ip, r3
    ae30:	042a      	lsls	r2, r5, #16
    ae32:	0c12      	lsrs	r2, r2, #16
    ae34:	0c2b      	lsrs	r3, r5, #16
    ae36:	0014      	movs	r4, r2
    ae38:	4660      	mov	r0, ip
    ae3a:	4665      	mov	r5, ip
    ae3c:	043f      	lsls	r7, r7, #16
    ae3e:	0c3f      	lsrs	r7, r7, #16
    ae40:	437c      	muls	r4, r7
    ae42:	4342      	muls	r2, r0
    ae44:	435d      	muls	r5, r3
    ae46:	437b      	muls	r3, r7
    ae48:	0c27      	lsrs	r7, r4, #16
    ae4a:	189b      	adds	r3, r3, r2
    ae4c:	18ff      	adds	r7, r7, r3
    ae4e:	42ba      	cmp	r2, r7
    ae50:	d903      	bls.n	ae5a <__aeabi_fmul+0x15a>
    ae52:	2380      	movs	r3, #128	; 0x80
    ae54:	025b      	lsls	r3, r3, #9
    ae56:	469c      	mov	ip, r3
    ae58:	4465      	add	r5, ip
    ae5a:	0424      	lsls	r4, r4, #16
    ae5c:	043a      	lsls	r2, r7, #16
    ae5e:	0c24      	lsrs	r4, r4, #16
    ae60:	1912      	adds	r2, r2, r4
    ae62:	0193      	lsls	r3, r2, #6
    ae64:	1e5c      	subs	r4, r3, #1
    ae66:	41a3      	sbcs	r3, r4
    ae68:	0c3f      	lsrs	r7, r7, #16
    ae6a:	0e92      	lsrs	r2, r2, #26
    ae6c:	197d      	adds	r5, r7, r5
    ae6e:	431a      	orrs	r2, r3
    ae70:	01ad      	lsls	r5, r5, #6
    ae72:	4315      	orrs	r5, r2
    ae74:	012b      	lsls	r3, r5, #4
    ae76:	d504      	bpl.n	ae82 <__aeabi_fmul+0x182>
    ae78:	2301      	movs	r3, #1
    ae7a:	465e      	mov	r6, fp
    ae7c:	086a      	lsrs	r2, r5, #1
    ae7e:	401d      	ands	r5, r3
    ae80:	4315      	orrs	r5, r2
    ae82:	0032      	movs	r2, r6
    ae84:	327f      	adds	r2, #127	; 0x7f
    ae86:	2a00      	cmp	r2, #0
    ae88:	dd25      	ble.n	aed6 <__aeabi_fmul+0x1d6>
    ae8a:	076b      	lsls	r3, r5, #29
    ae8c:	d004      	beq.n	ae98 <__aeabi_fmul+0x198>
    ae8e:	230f      	movs	r3, #15
    ae90:	402b      	ands	r3, r5
    ae92:	2b04      	cmp	r3, #4
    ae94:	d000      	beq.n	ae98 <__aeabi_fmul+0x198>
    ae96:	3504      	adds	r5, #4
    ae98:	012b      	lsls	r3, r5, #4
    ae9a:	d503      	bpl.n	aea4 <__aeabi_fmul+0x1a4>
    ae9c:	0032      	movs	r2, r6
    ae9e:	4b27      	ldr	r3, [pc, #156]	; (af3c <__aeabi_fmul+0x23c>)
    aea0:	3280      	adds	r2, #128	; 0x80
    aea2:	401d      	ands	r5, r3
    aea4:	2afe      	cmp	r2, #254	; 0xfe
    aea6:	dc94      	bgt.n	add2 <__aeabi_fmul+0xd2>
    aea8:	2401      	movs	r4, #1
    aeaa:	01a8      	lsls	r0, r5, #6
    aeac:	0a40      	lsrs	r0, r0, #9
    aeae:	b2d2      	uxtb	r2, r2
    aeb0:	400c      	ands	r4, r1
    aeb2:	e76f      	b.n	ad94 <__aeabi_fmul+0x94>
    aeb4:	2080      	movs	r0, #128	; 0x80
    aeb6:	03c0      	lsls	r0, r0, #15
    aeb8:	4207      	tst	r7, r0
    aeba:	d007      	beq.n	aecc <__aeabi_fmul+0x1cc>
    aebc:	4205      	tst	r5, r0
    aebe:	d105      	bne.n	aecc <__aeabi_fmul+0x1cc>
    aec0:	4328      	orrs	r0, r5
    aec2:	0240      	lsls	r0, r0, #9
    aec4:	0a40      	lsrs	r0, r0, #9
    aec6:	4644      	mov	r4, r8
    aec8:	22ff      	movs	r2, #255	; 0xff
    aeca:	e763      	b.n	ad94 <__aeabi_fmul+0x94>
    aecc:	4338      	orrs	r0, r7
    aece:	0240      	lsls	r0, r0, #9
    aed0:	0a40      	lsrs	r0, r0, #9
    aed2:	22ff      	movs	r2, #255	; 0xff
    aed4:	e75e      	b.n	ad94 <__aeabi_fmul+0x94>
    aed6:	2401      	movs	r4, #1
    aed8:	1aa3      	subs	r3, r4, r2
    aeda:	2b1b      	cmp	r3, #27
    aedc:	dd05      	ble.n	aeea <__aeabi_fmul+0x1ea>
    aede:	400c      	ands	r4, r1
    aee0:	2200      	movs	r2, #0
    aee2:	2000      	movs	r0, #0
    aee4:	e756      	b.n	ad94 <__aeabi_fmul+0x94>
    aee6:	465e      	mov	r6, fp
    aee8:	e7cb      	b.n	ae82 <__aeabi_fmul+0x182>
    aeea:	002a      	movs	r2, r5
    aeec:	2020      	movs	r0, #32
    aeee:	40da      	lsrs	r2, r3
    aef0:	1ac3      	subs	r3, r0, r3
    aef2:	409d      	lsls	r5, r3
    aef4:	002b      	movs	r3, r5
    aef6:	1e5d      	subs	r5, r3, #1
    aef8:	41ab      	sbcs	r3, r5
    aefa:	4313      	orrs	r3, r2
    aefc:	075a      	lsls	r2, r3, #29
    aefe:	d004      	beq.n	af0a <__aeabi_fmul+0x20a>
    af00:	220f      	movs	r2, #15
    af02:	401a      	ands	r2, r3
    af04:	2a04      	cmp	r2, #4
    af06:	d000      	beq.n	af0a <__aeabi_fmul+0x20a>
    af08:	3304      	adds	r3, #4
    af0a:	015a      	lsls	r2, r3, #5
    af0c:	d504      	bpl.n	af18 <__aeabi_fmul+0x218>
    af0e:	2401      	movs	r4, #1
    af10:	2201      	movs	r2, #1
    af12:	400c      	ands	r4, r1
    af14:	2000      	movs	r0, #0
    af16:	e73d      	b.n	ad94 <__aeabi_fmul+0x94>
    af18:	2401      	movs	r4, #1
    af1a:	019b      	lsls	r3, r3, #6
    af1c:	0a58      	lsrs	r0, r3, #9
    af1e:	400c      	ands	r4, r1
    af20:	2200      	movs	r2, #0
    af22:	e737      	b.n	ad94 <__aeabi_fmul+0x94>
    af24:	2080      	movs	r0, #128	; 0x80
    af26:	2401      	movs	r4, #1
    af28:	03c0      	lsls	r0, r0, #15
    af2a:	4328      	orrs	r0, r5
    af2c:	0240      	lsls	r0, r0, #9
    af2e:	0a40      	lsrs	r0, r0, #9
    af30:	400c      	ands	r4, r1
    af32:	22ff      	movs	r2, #255	; 0xff
    af34:	e72e      	b.n	ad94 <__aeabi_fmul+0x94>
    af36:	46c0      	nop			; (mov r8, r8)
    af38:	0000dd70 	.word	0x0000dd70
    af3c:	f7ffffff 	.word	0xf7ffffff

0000af40 <__aeabi_fsub>:
    af40:	b5f0      	push	{r4, r5, r6, r7, lr}
    af42:	464f      	mov	r7, r9
    af44:	46d6      	mov	lr, sl
    af46:	4646      	mov	r6, r8
    af48:	0044      	lsls	r4, r0, #1
    af4a:	b5c0      	push	{r6, r7, lr}
    af4c:	0fc2      	lsrs	r2, r0, #31
    af4e:	0247      	lsls	r7, r0, #9
    af50:	0248      	lsls	r0, r1, #9
    af52:	0a40      	lsrs	r0, r0, #9
    af54:	4684      	mov	ip, r0
    af56:	4666      	mov	r6, ip
    af58:	0a7b      	lsrs	r3, r7, #9
    af5a:	0048      	lsls	r0, r1, #1
    af5c:	0fc9      	lsrs	r1, r1, #31
    af5e:	469a      	mov	sl, r3
    af60:	0e24      	lsrs	r4, r4, #24
    af62:	0015      	movs	r5, r2
    af64:	00db      	lsls	r3, r3, #3
    af66:	0e00      	lsrs	r0, r0, #24
    af68:	4689      	mov	r9, r1
    af6a:	00f6      	lsls	r6, r6, #3
    af6c:	28ff      	cmp	r0, #255	; 0xff
    af6e:	d100      	bne.n	af72 <__aeabi_fsub+0x32>
    af70:	e08f      	b.n	b092 <__aeabi_fsub+0x152>
    af72:	2101      	movs	r1, #1
    af74:	464f      	mov	r7, r9
    af76:	404f      	eors	r7, r1
    af78:	0039      	movs	r1, r7
    af7a:	4291      	cmp	r1, r2
    af7c:	d066      	beq.n	b04c <__aeabi_fsub+0x10c>
    af7e:	1a22      	subs	r2, r4, r0
    af80:	2a00      	cmp	r2, #0
    af82:	dc00      	bgt.n	af86 <__aeabi_fsub+0x46>
    af84:	e09d      	b.n	b0c2 <__aeabi_fsub+0x182>
    af86:	2800      	cmp	r0, #0
    af88:	d13d      	bne.n	b006 <__aeabi_fsub+0xc6>
    af8a:	2e00      	cmp	r6, #0
    af8c:	d100      	bne.n	af90 <__aeabi_fsub+0x50>
    af8e:	e08b      	b.n	b0a8 <__aeabi_fsub+0x168>
    af90:	1e51      	subs	r1, r2, #1
    af92:	2900      	cmp	r1, #0
    af94:	d000      	beq.n	af98 <__aeabi_fsub+0x58>
    af96:	e0b5      	b.n	b104 <__aeabi_fsub+0x1c4>
    af98:	2401      	movs	r4, #1
    af9a:	1b9b      	subs	r3, r3, r6
    af9c:	015a      	lsls	r2, r3, #5
    af9e:	d544      	bpl.n	b02a <__aeabi_fsub+0xea>
    afa0:	019b      	lsls	r3, r3, #6
    afa2:	099f      	lsrs	r7, r3, #6
    afa4:	0038      	movs	r0, r7
    afa6:	f002 f83b 	bl	d020 <__clzsi2>
    afaa:	3805      	subs	r0, #5
    afac:	4087      	lsls	r7, r0
    afae:	4284      	cmp	r4, r0
    afb0:	dd00      	ble.n	afb4 <__aeabi_fsub+0x74>
    afb2:	e096      	b.n	b0e2 <__aeabi_fsub+0x1a2>
    afb4:	1b04      	subs	r4, r0, r4
    afb6:	003a      	movs	r2, r7
    afb8:	2020      	movs	r0, #32
    afba:	3401      	adds	r4, #1
    afbc:	40e2      	lsrs	r2, r4
    afbe:	1b04      	subs	r4, r0, r4
    afc0:	40a7      	lsls	r7, r4
    afc2:	003b      	movs	r3, r7
    afc4:	1e5f      	subs	r7, r3, #1
    afc6:	41bb      	sbcs	r3, r7
    afc8:	2400      	movs	r4, #0
    afca:	4313      	orrs	r3, r2
    afcc:	075a      	lsls	r2, r3, #29
    afce:	d004      	beq.n	afda <__aeabi_fsub+0x9a>
    afd0:	220f      	movs	r2, #15
    afd2:	401a      	ands	r2, r3
    afd4:	2a04      	cmp	r2, #4
    afd6:	d000      	beq.n	afda <__aeabi_fsub+0x9a>
    afd8:	3304      	adds	r3, #4
    afda:	015a      	lsls	r2, r3, #5
    afdc:	d527      	bpl.n	b02e <__aeabi_fsub+0xee>
    afde:	3401      	adds	r4, #1
    afe0:	2cff      	cmp	r4, #255	; 0xff
    afe2:	d100      	bne.n	afe6 <__aeabi_fsub+0xa6>
    afe4:	e079      	b.n	b0da <__aeabi_fsub+0x19a>
    afe6:	2201      	movs	r2, #1
    afe8:	019b      	lsls	r3, r3, #6
    afea:	0a5b      	lsrs	r3, r3, #9
    afec:	b2e4      	uxtb	r4, r4
    afee:	402a      	ands	r2, r5
    aff0:	025b      	lsls	r3, r3, #9
    aff2:	05e4      	lsls	r4, r4, #23
    aff4:	0a58      	lsrs	r0, r3, #9
    aff6:	07d2      	lsls	r2, r2, #31
    aff8:	4320      	orrs	r0, r4
    affa:	4310      	orrs	r0, r2
    affc:	bc1c      	pop	{r2, r3, r4}
    affe:	4690      	mov	r8, r2
    b000:	4699      	mov	r9, r3
    b002:	46a2      	mov	sl, r4
    b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b006:	2cff      	cmp	r4, #255	; 0xff
    b008:	d0e0      	beq.n	afcc <__aeabi_fsub+0x8c>
    b00a:	2180      	movs	r1, #128	; 0x80
    b00c:	04c9      	lsls	r1, r1, #19
    b00e:	430e      	orrs	r6, r1
    b010:	2a1b      	cmp	r2, #27
    b012:	dc7b      	bgt.n	b10c <__aeabi_fsub+0x1cc>
    b014:	0031      	movs	r1, r6
    b016:	2020      	movs	r0, #32
    b018:	40d1      	lsrs	r1, r2
    b01a:	1a82      	subs	r2, r0, r2
    b01c:	4096      	lsls	r6, r2
    b01e:	1e72      	subs	r2, r6, #1
    b020:	4196      	sbcs	r6, r2
    b022:	430e      	orrs	r6, r1
    b024:	1b9b      	subs	r3, r3, r6
    b026:	015a      	lsls	r2, r3, #5
    b028:	d4ba      	bmi.n	afa0 <__aeabi_fsub+0x60>
    b02a:	075a      	lsls	r2, r3, #29
    b02c:	d1d0      	bne.n	afd0 <__aeabi_fsub+0x90>
    b02e:	2201      	movs	r2, #1
    b030:	08df      	lsrs	r7, r3, #3
    b032:	402a      	ands	r2, r5
    b034:	2cff      	cmp	r4, #255	; 0xff
    b036:	d133      	bne.n	b0a0 <__aeabi_fsub+0x160>
    b038:	2f00      	cmp	r7, #0
    b03a:	d100      	bne.n	b03e <__aeabi_fsub+0xfe>
    b03c:	e0a8      	b.n	b190 <__aeabi_fsub+0x250>
    b03e:	2380      	movs	r3, #128	; 0x80
    b040:	03db      	lsls	r3, r3, #15
    b042:	433b      	orrs	r3, r7
    b044:	025b      	lsls	r3, r3, #9
    b046:	0a5b      	lsrs	r3, r3, #9
    b048:	24ff      	movs	r4, #255	; 0xff
    b04a:	e7d1      	b.n	aff0 <__aeabi_fsub+0xb0>
    b04c:	1a21      	subs	r1, r4, r0
    b04e:	2900      	cmp	r1, #0
    b050:	dd4c      	ble.n	b0ec <__aeabi_fsub+0x1ac>
    b052:	2800      	cmp	r0, #0
    b054:	d02a      	beq.n	b0ac <__aeabi_fsub+0x16c>
    b056:	2cff      	cmp	r4, #255	; 0xff
    b058:	d0b8      	beq.n	afcc <__aeabi_fsub+0x8c>
    b05a:	2080      	movs	r0, #128	; 0x80
    b05c:	04c0      	lsls	r0, r0, #19
    b05e:	4306      	orrs	r6, r0
    b060:	291b      	cmp	r1, #27
    b062:	dd00      	ble.n	b066 <__aeabi_fsub+0x126>
    b064:	e0af      	b.n	b1c6 <__aeabi_fsub+0x286>
    b066:	0030      	movs	r0, r6
    b068:	2720      	movs	r7, #32
    b06a:	40c8      	lsrs	r0, r1
    b06c:	1a79      	subs	r1, r7, r1
    b06e:	408e      	lsls	r6, r1
    b070:	1e71      	subs	r1, r6, #1
    b072:	418e      	sbcs	r6, r1
    b074:	4306      	orrs	r6, r0
    b076:	199b      	adds	r3, r3, r6
    b078:	0159      	lsls	r1, r3, #5
    b07a:	d5d6      	bpl.n	b02a <__aeabi_fsub+0xea>
    b07c:	3401      	adds	r4, #1
    b07e:	2cff      	cmp	r4, #255	; 0xff
    b080:	d100      	bne.n	b084 <__aeabi_fsub+0x144>
    b082:	e085      	b.n	b190 <__aeabi_fsub+0x250>
    b084:	2201      	movs	r2, #1
    b086:	497a      	ldr	r1, [pc, #488]	; (b270 <__aeabi_fsub+0x330>)
    b088:	401a      	ands	r2, r3
    b08a:	085b      	lsrs	r3, r3, #1
    b08c:	400b      	ands	r3, r1
    b08e:	4313      	orrs	r3, r2
    b090:	e79c      	b.n	afcc <__aeabi_fsub+0x8c>
    b092:	2e00      	cmp	r6, #0
    b094:	d000      	beq.n	b098 <__aeabi_fsub+0x158>
    b096:	e770      	b.n	af7a <__aeabi_fsub+0x3a>
    b098:	e76b      	b.n	af72 <__aeabi_fsub+0x32>
    b09a:	1e3b      	subs	r3, r7, #0
    b09c:	d1c5      	bne.n	b02a <__aeabi_fsub+0xea>
    b09e:	2200      	movs	r2, #0
    b0a0:	027b      	lsls	r3, r7, #9
    b0a2:	0a5b      	lsrs	r3, r3, #9
    b0a4:	b2e4      	uxtb	r4, r4
    b0a6:	e7a3      	b.n	aff0 <__aeabi_fsub+0xb0>
    b0a8:	0014      	movs	r4, r2
    b0aa:	e78f      	b.n	afcc <__aeabi_fsub+0x8c>
    b0ac:	2e00      	cmp	r6, #0
    b0ae:	d04d      	beq.n	b14c <__aeabi_fsub+0x20c>
    b0b0:	1e48      	subs	r0, r1, #1
    b0b2:	2800      	cmp	r0, #0
    b0b4:	d157      	bne.n	b166 <__aeabi_fsub+0x226>
    b0b6:	199b      	adds	r3, r3, r6
    b0b8:	2401      	movs	r4, #1
    b0ba:	015a      	lsls	r2, r3, #5
    b0bc:	d5b5      	bpl.n	b02a <__aeabi_fsub+0xea>
    b0be:	2402      	movs	r4, #2
    b0c0:	e7e0      	b.n	b084 <__aeabi_fsub+0x144>
    b0c2:	2a00      	cmp	r2, #0
    b0c4:	d125      	bne.n	b112 <__aeabi_fsub+0x1d2>
    b0c6:	1c62      	adds	r2, r4, #1
    b0c8:	b2d2      	uxtb	r2, r2
    b0ca:	2a01      	cmp	r2, #1
    b0cc:	dd72      	ble.n	b1b4 <__aeabi_fsub+0x274>
    b0ce:	1b9f      	subs	r7, r3, r6
    b0d0:	017a      	lsls	r2, r7, #5
    b0d2:	d535      	bpl.n	b140 <__aeabi_fsub+0x200>
    b0d4:	1af7      	subs	r7, r6, r3
    b0d6:	000d      	movs	r5, r1
    b0d8:	e764      	b.n	afa4 <__aeabi_fsub+0x64>
    b0da:	2201      	movs	r2, #1
    b0dc:	2300      	movs	r3, #0
    b0de:	402a      	ands	r2, r5
    b0e0:	e786      	b.n	aff0 <__aeabi_fsub+0xb0>
    b0e2:	003b      	movs	r3, r7
    b0e4:	4a63      	ldr	r2, [pc, #396]	; (b274 <__aeabi_fsub+0x334>)
    b0e6:	1a24      	subs	r4, r4, r0
    b0e8:	4013      	ands	r3, r2
    b0ea:	e76f      	b.n	afcc <__aeabi_fsub+0x8c>
    b0ec:	2900      	cmp	r1, #0
    b0ee:	d16c      	bne.n	b1ca <__aeabi_fsub+0x28a>
    b0f0:	1c61      	adds	r1, r4, #1
    b0f2:	b2c8      	uxtb	r0, r1
    b0f4:	2801      	cmp	r0, #1
    b0f6:	dd4e      	ble.n	b196 <__aeabi_fsub+0x256>
    b0f8:	29ff      	cmp	r1, #255	; 0xff
    b0fa:	d049      	beq.n	b190 <__aeabi_fsub+0x250>
    b0fc:	199b      	adds	r3, r3, r6
    b0fe:	085b      	lsrs	r3, r3, #1
    b100:	000c      	movs	r4, r1
    b102:	e763      	b.n	afcc <__aeabi_fsub+0x8c>
    b104:	2aff      	cmp	r2, #255	; 0xff
    b106:	d041      	beq.n	b18c <__aeabi_fsub+0x24c>
    b108:	000a      	movs	r2, r1
    b10a:	e781      	b.n	b010 <__aeabi_fsub+0xd0>
    b10c:	2601      	movs	r6, #1
    b10e:	1b9b      	subs	r3, r3, r6
    b110:	e789      	b.n	b026 <__aeabi_fsub+0xe6>
    b112:	2c00      	cmp	r4, #0
    b114:	d01c      	beq.n	b150 <__aeabi_fsub+0x210>
    b116:	28ff      	cmp	r0, #255	; 0xff
    b118:	d021      	beq.n	b15e <__aeabi_fsub+0x21e>
    b11a:	2480      	movs	r4, #128	; 0x80
    b11c:	04e4      	lsls	r4, r4, #19
    b11e:	4252      	negs	r2, r2
    b120:	4323      	orrs	r3, r4
    b122:	2a1b      	cmp	r2, #27
    b124:	dd00      	ble.n	b128 <__aeabi_fsub+0x1e8>
    b126:	e096      	b.n	b256 <__aeabi_fsub+0x316>
    b128:	001c      	movs	r4, r3
    b12a:	2520      	movs	r5, #32
    b12c:	40d4      	lsrs	r4, r2
    b12e:	1aaa      	subs	r2, r5, r2
    b130:	4093      	lsls	r3, r2
    b132:	1e5a      	subs	r2, r3, #1
    b134:	4193      	sbcs	r3, r2
    b136:	4323      	orrs	r3, r4
    b138:	1af3      	subs	r3, r6, r3
    b13a:	0004      	movs	r4, r0
    b13c:	000d      	movs	r5, r1
    b13e:	e72d      	b.n	af9c <__aeabi_fsub+0x5c>
    b140:	2f00      	cmp	r7, #0
    b142:	d000      	beq.n	b146 <__aeabi_fsub+0x206>
    b144:	e72e      	b.n	afa4 <__aeabi_fsub+0x64>
    b146:	2200      	movs	r2, #0
    b148:	2400      	movs	r4, #0
    b14a:	e7a9      	b.n	b0a0 <__aeabi_fsub+0x160>
    b14c:	000c      	movs	r4, r1
    b14e:	e73d      	b.n	afcc <__aeabi_fsub+0x8c>
    b150:	2b00      	cmp	r3, #0
    b152:	d058      	beq.n	b206 <__aeabi_fsub+0x2c6>
    b154:	43d2      	mvns	r2, r2
    b156:	2a00      	cmp	r2, #0
    b158:	d0ee      	beq.n	b138 <__aeabi_fsub+0x1f8>
    b15a:	28ff      	cmp	r0, #255	; 0xff
    b15c:	d1e1      	bne.n	b122 <__aeabi_fsub+0x1e2>
    b15e:	0033      	movs	r3, r6
    b160:	24ff      	movs	r4, #255	; 0xff
    b162:	000d      	movs	r5, r1
    b164:	e732      	b.n	afcc <__aeabi_fsub+0x8c>
    b166:	29ff      	cmp	r1, #255	; 0xff
    b168:	d010      	beq.n	b18c <__aeabi_fsub+0x24c>
    b16a:	0001      	movs	r1, r0
    b16c:	e778      	b.n	b060 <__aeabi_fsub+0x120>
    b16e:	2b00      	cmp	r3, #0
    b170:	d06e      	beq.n	b250 <__aeabi_fsub+0x310>
    b172:	24ff      	movs	r4, #255	; 0xff
    b174:	2e00      	cmp	r6, #0
    b176:	d100      	bne.n	b17a <__aeabi_fsub+0x23a>
    b178:	e728      	b.n	afcc <__aeabi_fsub+0x8c>
    b17a:	2280      	movs	r2, #128	; 0x80
    b17c:	4651      	mov	r1, sl
    b17e:	03d2      	lsls	r2, r2, #15
    b180:	4211      	tst	r1, r2
    b182:	d003      	beq.n	b18c <__aeabi_fsub+0x24c>
    b184:	4661      	mov	r1, ip
    b186:	4211      	tst	r1, r2
    b188:	d100      	bne.n	b18c <__aeabi_fsub+0x24c>
    b18a:	0033      	movs	r3, r6
    b18c:	24ff      	movs	r4, #255	; 0xff
    b18e:	e71d      	b.n	afcc <__aeabi_fsub+0x8c>
    b190:	24ff      	movs	r4, #255	; 0xff
    b192:	2300      	movs	r3, #0
    b194:	e72c      	b.n	aff0 <__aeabi_fsub+0xb0>
    b196:	2c00      	cmp	r4, #0
    b198:	d1e9      	bne.n	b16e <__aeabi_fsub+0x22e>
    b19a:	2b00      	cmp	r3, #0
    b19c:	d063      	beq.n	b266 <__aeabi_fsub+0x326>
    b19e:	2e00      	cmp	r6, #0
    b1a0:	d100      	bne.n	b1a4 <__aeabi_fsub+0x264>
    b1a2:	e713      	b.n	afcc <__aeabi_fsub+0x8c>
    b1a4:	199b      	adds	r3, r3, r6
    b1a6:	015a      	lsls	r2, r3, #5
    b1a8:	d400      	bmi.n	b1ac <__aeabi_fsub+0x26c>
    b1aa:	e73e      	b.n	b02a <__aeabi_fsub+0xea>
    b1ac:	4a31      	ldr	r2, [pc, #196]	; (b274 <__aeabi_fsub+0x334>)
    b1ae:	000c      	movs	r4, r1
    b1b0:	4013      	ands	r3, r2
    b1b2:	e70b      	b.n	afcc <__aeabi_fsub+0x8c>
    b1b4:	2c00      	cmp	r4, #0
    b1b6:	d11e      	bne.n	b1f6 <__aeabi_fsub+0x2b6>
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d12f      	bne.n	b21c <__aeabi_fsub+0x2dc>
    b1bc:	2e00      	cmp	r6, #0
    b1be:	d04f      	beq.n	b260 <__aeabi_fsub+0x320>
    b1c0:	0033      	movs	r3, r6
    b1c2:	000d      	movs	r5, r1
    b1c4:	e702      	b.n	afcc <__aeabi_fsub+0x8c>
    b1c6:	2601      	movs	r6, #1
    b1c8:	e755      	b.n	b076 <__aeabi_fsub+0x136>
    b1ca:	2c00      	cmp	r4, #0
    b1cc:	d11f      	bne.n	b20e <__aeabi_fsub+0x2ce>
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	d043      	beq.n	b25a <__aeabi_fsub+0x31a>
    b1d2:	43c9      	mvns	r1, r1
    b1d4:	2900      	cmp	r1, #0
    b1d6:	d00b      	beq.n	b1f0 <__aeabi_fsub+0x2b0>
    b1d8:	28ff      	cmp	r0, #255	; 0xff
    b1da:	d039      	beq.n	b250 <__aeabi_fsub+0x310>
    b1dc:	291b      	cmp	r1, #27
    b1de:	dc44      	bgt.n	b26a <__aeabi_fsub+0x32a>
    b1e0:	001c      	movs	r4, r3
    b1e2:	2720      	movs	r7, #32
    b1e4:	40cc      	lsrs	r4, r1
    b1e6:	1a79      	subs	r1, r7, r1
    b1e8:	408b      	lsls	r3, r1
    b1ea:	1e59      	subs	r1, r3, #1
    b1ec:	418b      	sbcs	r3, r1
    b1ee:	4323      	orrs	r3, r4
    b1f0:	199b      	adds	r3, r3, r6
    b1f2:	0004      	movs	r4, r0
    b1f4:	e740      	b.n	b078 <__aeabi_fsub+0x138>
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d11a      	bne.n	b230 <__aeabi_fsub+0x2f0>
    b1fa:	2e00      	cmp	r6, #0
    b1fc:	d124      	bne.n	b248 <__aeabi_fsub+0x308>
    b1fe:	2780      	movs	r7, #128	; 0x80
    b200:	2200      	movs	r2, #0
    b202:	03ff      	lsls	r7, r7, #15
    b204:	e71b      	b.n	b03e <__aeabi_fsub+0xfe>
    b206:	0033      	movs	r3, r6
    b208:	0004      	movs	r4, r0
    b20a:	000d      	movs	r5, r1
    b20c:	e6de      	b.n	afcc <__aeabi_fsub+0x8c>
    b20e:	28ff      	cmp	r0, #255	; 0xff
    b210:	d01e      	beq.n	b250 <__aeabi_fsub+0x310>
    b212:	2480      	movs	r4, #128	; 0x80
    b214:	04e4      	lsls	r4, r4, #19
    b216:	4249      	negs	r1, r1
    b218:	4323      	orrs	r3, r4
    b21a:	e7df      	b.n	b1dc <__aeabi_fsub+0x29c>
    b21c:	2e00      	cmp	r6, #0
    b21e:	d100      	bne.n	b222 <__aeabi_fsub+0x2e2>
    b220:	e6d4      	b.n	afcc <__aeabi_fsub+0x8c>
    b222:	1b9f      	subs	r7, r3, r6
    b224:	017a      	lsls	r2, r7, #5
    b226:	d400      	bmi.n	b22a <__aeabi_fsub+0x2ea>
    b228:	e737      	b.n	b09a <__aeabi_fsub+0x15a>
    b22a:	1af3      	subs	r3, r6, r3
    b22c:	000d      	movs	r5, r1
    b22e:	e6cd      	b.n	afcc <__aeabi_fsub+0x8c>
    b230:	24ff      	movs	r4, #255	; 0xff
    b232:	2e00      	cmp	r6, #0
    b234:	d100      	bne.n	b238 <__aeabi_fsub+0x2f8>
    b236:	e6c9      	b.n	afcc <__aeabi_fsub+0x8c>
    b238:	2280      	movs	r2, #128	; 0x80
    b23a:	4650      	mov	r0, sl
    b23c:	03d2      	lsls	r2, r2, #15
    b23e:	4210      	tst	r0, r2
    b240:	d0a4      	beq.n	b18c <__aeabi_fsub+0x24c>
    b242:	4660      	mov	r0, ip
    b244:	4210      	tst	r0, r2
    b246:	d1a1      	bne.n	b18c <__aeabi_fsub+0x24c>
    b248:	0033      	movs	r3, r6
    b24a:	000d      	movs	r5, r1
    b24c:	24ff      	movs	r4, #255	; 0xff
    b24e:	e6bd      	b.n	afcc <__aeabi_fsub+0x8c>
    b250:	0033      	movs	r3, r6
    b252:	24ff      	movs	r4, #255	; 0xff
    b254:	e6ba      	b.n	afcc <__aeabi_fsub+0x8c>
    b256:	2301      	movs	r3, #1
    b258:	e76e      	b.n	b138 <__aeabi_fsub+0x1f8>
    b25a:	0033      	movs	r3, r6
    b25c:	0004      	movs	r4, r0
    b25e:	e6b5      	b.n	afcc <__aeabi_fsub+0x8c>
    b260:	2700      	movs	r7, #0
    b262:	2200      	movs	r2, #0
    b264:	e71c      	b.n	b0a0 <__aeabi_fsub+0x160>
    b266:	0033      	movs	r3, r6
    b268:	e6b0      	b.n	afcc <__aeabi_fsub+0x8c>
    b26a:	2301      	movs	r3, #1
    b26c:	e7c0      	b.n	b1f0 <__aeabi_fsub+0x2b0>
    b26e:	46c0      	nop			; (mov r8, r8)
    b270:	7dffffff 	.word	0x7dffffff
    b274:	fbffffff 	.word	0xfbffffff

0000b278 <__aeabi_f2iz>:
    b278:	0241      	lsls	r1, r0, #9
    b27a:	0043      	lsls	r3, r0, #1
    b27c:	0fc2      	lsrs	r2, r0, #31
    b27e:	0a49      	lsrs	r1, r1, #9
    b280:	0e1b      	lsrs	r3, r3, #24
    b282:	2000      	movs	r0, #0
    b284:	2b7e      	cmp	r3, #126	; 0x7e
    b286:	dd0d      	ble.n	b2a4 <__aeabi_f2iz+0x2c>
    b288:	2b9d      	cmp	r3, #157	; 0x9d
    b28a:	dc0c      	bgt.n	b2a6 <__aeabi_f2iz+0x2e>
    b28c:	2080      	movs	r0, #128	; 0x80
    b28e:	0400      	lsls	r0, r0, #16
    b290:	4301      	orrs	r1, r0
    b292:	2b95      	cmp	r3, #149	; 0x95
    b294:	dc0a      	bgt.n	b2ac <__aeabi_f2iz+0x34>
    b296:	2096      	movs	r0, #150	; 0x96
    b298:	1ac3      	subs	r3, r0, r3
    b29a:	40d9      	lsrs	r1, r3
    b29c:	4248      	negs	r0, r1
    b29e:	2a00      	cmp	r2, #0
    b2a0:	d100      	bne.n	b2a4 <__aeabi_f2iz+0x2c>
    b2a2:	0008      	movs	r0, r1
    b2a4:	4770      	bx	lr
    b2a6:	4b03      	ldr	r3, [pc, #12]	; (b2b4 <__aeabi_f2iz+0x3c>)
    b2a8:	18d0      	adds	r0, r2, r3
    b2aa:	e7fb      	b.n	b2a4 <__aeabi_f2iz+0x2c>
    b2ac:	3b96      	subs	r3, #150	; 0x96
    b2ae:	4099      	lsls	r1, r3
    b2b0:	e7f4      	b.n	b29c <__aeabi_f2iz+0x24>
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	7fffffff 	.word	0x7fffffff

0000b2b8 <__aeabi_i2f>:
    b2b8:	b570      	push	{r4, r5, r6, lr}
    b2ba:	2800      	cmp	r0, #0
    b2bc:	d030      	beq.n	b320 <__aeabi_i2f+0x68>
    b2be:	17c3      	asrs	r3, r0, #31
    b2c0:	18c4      	adds	r4, r0, r3
    b2c2:	405c      	eors	r4, r3
    b2c4:	0fc5      	lsrs	r5, r0, #31
    b2c6:	0020      	movs	r0, r4
    b2c8:	f001 feaa 	bl	d020 <__clzsi2>
    b2cc:	239e      	movs	r3, #158	; 0x9e
    b2ce:	1a1b      	subs	r3, r3, r0
    b2d0:	2b96      	cmp	r3, #150	; 0x96
    b2d2:	dc0d      	bgt.n	b2f0 <__aeabi_i2f+0x38>
    b2d4:	2296      	movs	r2, #150	; 0x96
    b2d6:	1ad2      	subs	r2, r2, r3
    b2d8:	4094      	lsls	r4, r2
    b2da:	002a      	movs	r2, r5
    b2dc:	0264      	lsls	r4, r4, #9
    b2de:	0a64      	lsrs	r4, r4, #9
    b2e0:	b2db      	uxtb	r3, r3
    b2e2:	0264      	lsls	r4, r4, #9
    b2e4:	05db      	lsls	r3, r3, #23
    b2e6:	0a60      	lsrs	r0, r4, #9
    b2e8:	07d2      	lsls	r2, r2, #31
    b2ea:	4318      	orrs	r0, r3
    b2ec:	4310      	orrs	r0, r2
    b2ee:	bd70      	pop	{r4, r5, r6, pc}
    b2f0:	2b99      	cmp	r3, #153	; 0x99
    b2f2:	dc19      	bgt.n	b328 <__aeabi_i2f+0x70>
    b2f4:	2299      	movs	r2, #153	; 0x99
    b2f6:	1ad2      	subs	r2, r2, r3
    b2f8:	2a00      	cmp	r2, #0
    b2fa:	dd29      	ble.n	b350 <__aeabi_i2f+0x98>
    b2fc:	4094      	lsls	r4, r2
    b2fe:	0022      	movs	r2, r4
    b300:	4c14      	ldr	r4, [pc, #80]	; (b354 <__aeabi_i2f+0x9c>)
    b302:	4014      	ands	r4, r2
    b304:	0751      	lsls	r1, r2, #29
    b306:	d004      	beq.n	b312 <__aeabi_i2f+0x5a>
    b308:	210f      	movs	r1, #15
    b30a:	400a      	ands	r2, r1
    b30c:	2a04      	cmp	r2, #4
    b30e:	d000      	beq.n	b312 <__aeabi_i2f+0x5a>
    b310:	3404      	adds	r4, #4
    b312:	0162      	lsls	r2, r4, #5
    b314:	d413      	bmi.n	b33e <__aeabi_i2f+0x86>
    b316:	01a4      	lsls	r4, r4, #6
    b318:	0a64      	lsrs	r4, r4, #9
    b31a:	b2db      	uxtb	r3, r3
    b31c:	002a      	movs	r2, r5
    b31e:	e7e0      	b.n	b2e2 <__aeabi_i2f+0x2a>
    b320:	2200      	movs	r2, #0
    b322:	2300      	movs	r3, #0
    b324:	2400      	movs	r4, #0
    b326:	e7dc      	b.n	b2e2 <__aeabi_i2f+0x2a>
    b328:	2205      	movs	r2, #5
    b32a:	0021      	movs	r1, r4
    b32c:	1a12      	subs	r2, r2, r0
    b32e:	40d1      	lsrs	r1, r2
    b330:	22b9      	movs	r2, #185	; 0xb9
    b332:	1ad2      	subs	r2, r2, r3
    b334:	4094      	lsls	r4, r2
    b336:	1e62      	subs	r2, r4, #1
    b338:	4194      	sbcs	r4, r2
    b33a:	430c      	orrs	r4, r1
    b33c:	e7da      	b.n	b2f4 <__aeabi_i2f+0x3c>
    b33e:	4b05      	ldr	r3, [pc, #20]	; (b354 <__aeabi_i2f+0x9c>)
    b340:	002a      	movs	r2, r5
    b342:	401c      	ands	r4, r3
    b344:	239f      	movs	r3, #159	; 0x9f
    b346:	01a4      	lsls	r4, r4, #6
    b348:	1a1b      	subs	r3, r3, r0
    b34a:	0a64      	lsrs	r4, r4, #9
    b34c:	b2db      	uxtb	r3, r3
    b34e:	e7c8      	b.n	b2e2 <__aeabi_i2f+0x2a>
    b350:	0022      	movs	r2, r4
    b352:	e7d5      	b.n	b300 <__aeabi_i2f+0x48>
    b354:	fbffffff 	.word	0xfbffffff

0000b358 <__aeabi_dadd>:
    b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b35a:	4645      	mov	r5, r8
    b35c:	46de      	mov	lr, fp
    b35e:	4657      	mov	r7, sl
    b360:	464e      	mov	r6, r9
    b362:	030c      	lsls	r4, r1, #12
    b364:	b5e0      	push	{r5, r6, r7, lr}
    b366:	004e      	lsls	r6, r1, #1
    b368:	0fc9      	lsrs	r1, r1, #31
    b36a:	4688      	mov	r8, r1
    b36c:	000d      	movs	r5, r1
    b36e:	0a61      	lsrs	r1, r4, #9
    b370:	0f44      	lsrs	r4, r0, #29
    b372:	430c      	orrs	r4, r1
    b374:	00c7      	lsls	r7, r0, #3
    b376:	0319      	lsls	r1, r3, #12
    b378:	0058      	lsls	r0, r3, #1
    b37a:	0fdb      	lsrs	r3, r3, #31
    b37c:	469b      	mov	fp, r3
    b37e:	0a4b      	lsrs	r3, r1, #9
    b380:	0f51      	lsrs	r1, r2, #29
    b382:	430b      	orrs	r3, r1
    b384:	0d76      	lsrs	r6, r6, #21
    b386:	0d40      	lsrs	r0, r0, #21
    b388:	0019      	movs	r1, r3
    b38a:	00d2      	lsls	r2, r2, #3
    b38c:	45d8      	cmp	r8, fp
    b38e:	d100      	bne.n	b392 <__aeabi_dadd+0x3a>
    b390:	e0ae      	b.n	b4f0 <__aeabi_dadd+0x198>
    b392:	1a35      	subs	r5, r6, r0
    b394:	2d00      	cmp	r5, #0
    b396:	dc00      	bgt.n	b39a <__aeabi_dadd+0x42>
    b398:	e0f6      	b.n	b588 <__aeabi_dadd+0x230>
    b39a:	2800      	cmp	r0, #0
    b39c:	d10f      	bne.n	b3be <__aeabi_dadd+0x66>
    b39e:	4313      	orrs	r3, r2
    b3a0:	d100      	bne.n	b3a4 <__aeabi_dadd+0x4c>
    b3a2:	e0db      	b.n	b55c <__aeabi_dadd+0x204>
    b3a4:	1e6b      	subs	r3, r5, #1
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d000      	beq.n	b3ac <__aeabi_dadd+0x54>
    b3aa:	e137      	b.n	b61c <__aeabi_dadd+0x2c4>
    b3ac:	1aba      	subs	r2, r7, r2
    b3ae:	4297      	cmp	r7, r2
    b3b0:	41bf      	sbcs	r7, r7
    b3b2:	1a64      	subs	r4, r4, r1
    b3b4:	427f      	negs	r7, r7
    b3b6:	1be4      	subs	r4, r4, r7
    b3b8:	2601      	movs	r6, #1
    b3ba:	0017      	movs	r7, r2
    b3bc:	e024      	b.n	b408 <__aeabi_dadd+0xb0>
    b3be:	4bc6      	ldr	r3, [pc, #792]	; (b6d8 <__aeabi_dadd+0x380>)
    b3c0:	429e      	cmp	r6, r3
    b3c2:	d04d      	beq.n	b460 <__aeabi_dadd+0x108>
    b3c4:	2380      	movs	r3, #128	; 0x80
    b3c6:	041b      	lsls	r3, r3, #16
    b3c8:	4319      	orrs	r1, r3
    b3ca:	2d38      	cmp	r5, #56	; 0x38
    b3cc:	dd00      	ble.n	b3d0 <__aeabi_dadd+0x78>
    b3ce:	e107      	b.n	b5e0 <__aeabi_dadd+0x288>
    b3d0:	2d1f      	cmp	r5, #31
    b3d2:	dd00      	ble.n	b3d6 <__aeabi_dadd+0x7e>
    b3d4:	e138      	b.n	b648 <__aeabi_dadd+0x2f0>
    b3d6:	2020      	movs	r0, #32
    b3d8:	1b43      	subs	r3, r0, r5
    b3da:	469a      	mov	sl, r3
    b3dc:	000b      	movs	r3, r1
    b3de:	4650      	mov	r0, sl
    b3e0:	4083      	lsls	r3, r0
    b3e2:	4699      	mov	r9, r3
    b3e4:	0013      	movs	r3, r2
    b3e6:	4648      	mov	r0, r9
    b3e8:	40eb      	lsrs	r3, r5
    b3ea:	4318      	orrs	r0, r3
    b3ec:	0003      	movs	r3, r0
    b3ee:	4650      	mov	r0, sl
    b3f0:	4082      	lsls	r2, r0
    b3f2:	1e50      	subs	r0, r2, #1
    b3f4:	4182      	sbcs	r2, r0
    b3f6:	40e9      	lsrs	r1, r5
    b3f8:	431a      	orrs	r2, r3
    b3fa:	1aba      	subs	r2, r7, r2
    b3fc:	1a61      	subs	r1, r4, r1
    b3fe:	4297      	cmp	r7, r2
    b400:	41a4      	sbcs	r4, r4
    b402:	0017      	movs	r7, r2
    b404:	4264      	negs	r4, r4
    b406:	1b0c      	subs	r4, r1, r4
    b408:	0223      	lsls	r3, r4, #8
    b40a:	d562      	bpl.n	b4d2 <__aeabi_dadd+0x17a>
    b40c:	0264      	lsls	r4, r4, #9
    b40e:	0a65      	lsrs	r5, r4, #9
    b410:	2d00      	cmp	r5, #0
    b412:	d100      	bne.n	b416 <__aeabi_dadd+0xbe>
    b414:	e0df      	b.n	b5d6 <__aeabi_dadd+0x27e>
    b416:	0028      	movs	r0, r5
    b418:	f001 fe02 	bl	d020 <__clzsi2>
    b41c:	0003      	movs	r3, r0
    b41e:	3b08      	subs	r3, #8
    b420:	2b1f      	cmp	r3, #31
    b422:	dd00      	ble.n	b426 <__aeabi_dadd+0xce>
    b424:	e0d2      	b.n	b5cc <__aeabi_dadd+0x274>
    b426:	2220      	movs	r2, #32
    b428:	003c      	movs	r4, r7
    b42a:	1ad2      	subs	r2, r2, r3
    b42c:	409d      	lsls	r5, r3
    b42e:	40d4      	lsrs	r4, r2
    b430:	409f      	lsls	r7, r3
    b432:	4325      	orrs	r5, r4
    b434:	429e      	cmp	r6, r3
    b436:	dd00      	ble.n	b43a <__aeabi_dadd+0xe2>
    b438:	e0c4      	b.n	b5c4 <__aeabi_dadd+0x26c>
    b43a:	1b9e      	subs	r6, r3, r6
    b43c:	1c73      	adds	r3, r6, #1
    b43e:	2b1f      	cmp	r3, #31
    b440:	dd00      	ble.n	b444 <__aeabi_dadd+0xec>
    b442:	e0f1      	b.n	b628 <__aeabi_dadd+0x2d0>
    b444:	2220      	movs	r2, #32
    b446:	0038      	movs	r0, r7
    b448:	0029      	movs	r1, r5
    b44a:	1ad2      	subs	r2, r2, r3
    b44c:	40d8      	lsrs	r0, r3
    b44e:	4091      	lsls	r1, r2
    b450:	4097      	lsls	r7, r2
    b452:	002c      	movs	r4, r5
    b454:	4301      	orrs	r1, r0
    b456:	1e78      	subs	r0, r7, #1
    b458:	4187      	sbcs	r7, r0
    b45a:	40dc      	lsrs	r4, r3
    b45c:	2600      	movs	r6, #0
    b45e:	430f      	orrs	r7, r1
    b460:	077b      	lsls	r3, r7, #29
    b462:	d009      	beq.n	b478 <__aeabi_dadd+0x120>
    b464:	230f      	movs	r3, #15
    b466:	403b      	ands	r3, r7
    b468:	2b04      	cmp	r3, #4
    b46a:	d005      	beq.n	b478 <__aeabi_dadd+0x120>
    b46c:	1d3b      	adds	r3, r7, #4
    b46e:	42bb      	cmp	r3, r7
    b470:	41bf      	sbcs	r7, r7
    b472:	427f      	negs	r7, r7
    b474:	19e4      	adds	r4, r4, r7
    b476:	001f      	movs	r7, r3
    b478:	0223      	lsls	r3, r4, #8
    b47a:	d52c      	bpl.n	b4d6 <__aeabi_dadd+0x17e>
    b47c:	4b96      	ldr	r3, [pc, #600]	; (b6d8 <__aeabi_dadd+0x380>)
    b47e:	3601      	adds	r6, #1
    b480:	429e      	cmp	r6, r3
    b482:	d100      	bne.n	b486 <__aeabi_dadd+0x12e>
    b484:	e09a      	b.n	b5bc <__aeabi_dadd+0x264>
    b486:	4645      	mov	r5, r8
    b488:	4b94      	ldr	r3, [pc, #592]	; (b6dc <__aeabi_dadd+0x384>)
    b48a:	08ff      	lsrs	r7, r7, #3
    b48c:	401c      	ands	r4, r3
    b48e:	0760      	lsls	r0, r4, #29
    b490:	0576      	lsls	r6, r6, #21
    b492:	0264      	lsls	r4, r4, #9
    b494:	4307      	orrs	r7, r0
    b496:	0b24      	lsrs	r4, r4, #12
    b498:	0d76      	lsrs	r6, r6, #21
    b49a:	2100      	movs	r1, #0
    b49c:	0324      	lsls	r4, r4, #12
    b49e:	0b23      	lsrs	r3, r4, #12
    b4a0:	0d0c      	lsrs	r4, r1, #20
    b4a2:	4a8f      	ldr	r2, [pc, #572]	; (b6e0 <__aeabi_dadd+0x388>)
    b4a4:	0524      	lsls	r4, r4, #20
    b4a6:	431c      	orrs	r4, r3
    b4a8:	4014      	ands	r4, r2
    b4aa:	0533      	lsls	r3, r6, #20
    b4ac:	4323      	orrs	r3, r4
    b4ae:	005b      	lsls	r3, r3, #1
    b4b0:	07ed      	lsls	r5, r5, #31
    b4b2:	085b      	lsrs	r3, r3, #1
    b4b4:	432b      	orrs	r3, r5
    b4b6:	0038      	movs	r0, r7
    b4b8:	0019      	movs	r1, r3
    b4ba:	bc3c      	pop	{r2, r3, r4, r5}
    b4bc:	4690      	mov	r8, r2
    b4be:	4699      	mov	r9, r3
    b4c0:	46a2      	mov	sl, r4
    b4c2:	46ab      	mov	fp, r5
    b4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4c6:	4664      	mov	r4, ip
    b4c8:	4304      	orrs	r4, r0
    b4ca:	d100      	bne.n	b4ce <__aeabi_dadd+0x176>
    b4cc:	e211      	b.n	b8f2 <__aeabi_dadd+0x59a>
    b4ce:	0004      	movs	r4, r0
    b4d0:	4667      	mov	r7, ip
    b4d2:	077b      	lsls	r3, r7, #29
    b4d4:	d1c6      	bne.n	b464 <__aeabi_dadd+0x10c>
    b4d6:	4645      	mov	r5, r8
    b4d8:	0760      	lsls	r0, r4, #29
    b4da:	08ff      	lsrs	r7, r7, #3
    b4dc:	4307      	orrs	r7, r0
    b4de:	08e4      	lsrs	r4, r4, #3
    b4e0:	4b7d      	ldr	r3, [pc, #500]	; (b6d8 <__aeabi_dadd+0x380>)
    b4e2:	429e      	cmp	r6, r3
    b4e4:	d030      	beq.n	b548 <__aeabi_dadd+0x1f0>
    b4e6:	0324      	lsls	r4, r4, #12
    b4e8:	0576      	lsls	r6, r6, #21
    b4ea:	0b24      	lsrs	r4, r4, #12
    b4ec:	0d76      	lsrs	r6, r6, #21
    b4ee:	e7d4      	b.n	b49a <__aeabi_dadd+0x142>
    b4f0:	1a33      	subs	r3, r6, r0
    b4f2:	469a      	mov	sl, r3
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	dd78      	ble.n	b5ea <__aeabi_dadd+0x292>
    b4f8:	2800      	cmp	r0, #0
    b4fa:	d031      	beq.n	b560 <__aeabi_dadd+0x208>
    b4fc:	4876      	ldr	r0, [pc, #472]	; (b6d8 <__aeabi_dadd+0x380>)
    b4fe:	4286      	cmp	r6, r0
    b500:	d0ae      	beq.n	b460 <__aeabi_dadd+0x108>
    b502:	2080      	movs	r0, #128	; 0x80
    b504:	0400      	lsls	r0, r0, #16
    b506:	4301      	orrs	r1, r0
    b508:	4653      	mov	r3, sl
    b50a:	2b38      	cmp	r3, #56	; 0x38
    b50c:	dc00      	bgt.n	b510 <__aeabi_dadd+0x1b8>
    b50e:	e0e9      	b.n	b6e4 <__aeabi_dadd+0x38c>
    b510:	430a      	orrs	r2, r1
    b512:	1e51      	subs	r1, r2, #1
    b514:	418a      	sbcs	r2, r1
    b516:	2100      	movs	r1, #0
    b518:	19d2      	adds	r2, r2, r7
    b51a:	42ba      	cmp	r2, r7
    b51c:	41bf      	sbcs	r7, r7
    b51e:	1909      	adds	r1, r1, r4
    b520:	427c      	negs	r4, r7
    b522:	0017      	movs	r7, r2
    b524:	190c      	adds	r4, r1, r4
    b526:	0223      	lsls	r3, r4, #8
    b528:	d5d3      	bpl.n	b4d2 <__aeabi_dadd+0x17a>
    b52a:	4b6b      	ldr	r3, [pc, #428]	; (b6d8 <__aeabi_dadd+0x380>)
    b52c:	3601      	adds	r6, #1
    b52e:	429e      	cmp	r6, r3
    b530:	d100      	bne.n	b534 <__aeabi_dadd+0x1dc>
    b532:	e13a      	b.n	b7aa <__aeabi_dadd+0x452>
    b534:	2001      	movs	r0, #1
    b536:	4b69      	ldr	r3, [pc, #420]	; (b6dc <__aeabi_dadd+0x384>)
    b538:	401c      	ands	r4, r3
    b53a:	087b      	lsrs	r3, r7, #1
    b53c:	4007      	ands	r7, r0
    b53e:	431f      	orrs	r7, r3
    b540:	07e0      	lsls	r0, r4, #31
    b542:	4307      	orrs	r7, r0
    b544:	0864      	lsrs	r4, r4, #1
    b546:	e78b      	b.n	b460 <__aeabi_dadd+0x108>
    b548:	0023      	movs	r3, r4
    b54a:	433b      	orrs	r3, r7
    b54c:	d100      	bne.n	b550 <__aeabi_dadd+0x1f8>
    b54e:	e1cb      	b.n	b8e8 <__aeabi_dadd+0x590>
    b550:	2280      	movs	r2, #128	; 0x80
    b552:	0312      	lsls	r2, r2, #12
    b554:	4314      	orrs	r4, r2
    b556:	0324      	lsls	r4, r4, #12
    b558:	0b24      	lsrs	r4, r4, #12
    b55a:	e79e      	b.n	b49a <__aeabi_dadd+0x142>
    b55c:	002e      	movs	r6, r5
    b55e:	e77f      	b.n	b460 <__aeabi_dadd+0x108>
    b560:	0008      	movs	r0, r1
    b562:	4310      	orrs	r0, r2
    b564:	d100      	bne.n	b568 <__aeabi_dadd+0x210>
    b566:	e0b4      	b.n	b6d2 <__aeabi_dadd+0x37a>
    b568:	1e58      	subs	r0, r3, #1
    b56a:	2800      	cmp	r0, #0
    b56c:	d000      	beq.n	b570 <__aeabi_dadd+0x218>
    b56e:	e0de      	b.n	b72e <__aeabi_dadd+0x3d6>
    b570:	18ba      	adds	r2, r7, r2
    b572:	42ba      	cmp	r2, r7
    b574:	419b      	sbcs	r3, r3
    b576:	1864      	adds	r4, r4, r1
    b578:	425b      	negs	r3, r3
    b57a:	18e4      	adds	r4, r4, r3
    b57c:	0017      	movs	r7, r2
    b57e:	2601      	movs	r6, #1
    b580:	0223      	lsls	r3, r4, #8
    b582:	d5a6      	bpl.n	b4d2 <__aeabi_dadd+0x17a>
    b584:	2602      	movs	r6, #2
    b586:	e7d5      	b.n	b534 <__aeabi_dadd+0x1dc>
    b588:	2d00      	cmp	r5, #0
    b58a:	d16e      	bne.n	b66a <__aeabi_dadd+0x312>
    b58c:	1c70      	adds	r0, r6, #1
    b58e:	0540      	lsls	r0, r0, #21
    b590:	0d40      	lsrs	r0, r0, #21
    b592:	2801      	cmp	r0, #1
    b594:	dc00      	bgt.n	b598 <__aeabi_dadd+0x240>
    b596:	e0f9      	b.n	b78c <__aeabi_dadd+0x434>
    b598:	1ab8      	subs	r0, r7, r2
    b59a:	4684      	mov	ip, r0
    b59c:	4287      	cmp	r7, r0
    b59e:	4180      	sbcs	r0, r0
    b5a0:	1ae5      	subs	r5, r4, r3
    b5a2:	4240      	negs	r0, r0
    b5a4:	1a2d      	subs	r5, r5, r0
    b5a6:	0228      	lsls	r0, r5, #8
    b5a8:	d400      	bmi.n	b5ac <__aeabi_dadd+0x254>
    b5aa:	e089      	b.n	b6c0 <__aeabi_dadd+0x368>
    b5ac:	1bd7      	subs	r7, r2, r7
    b5ae:	42ba      	cmp	r2, r7
    b5b0:	4192      	sbcs	r2, r2
    b5b2:	1b1c      	subs	r4, r3, r4
    b5b4:	4252      	negs	r2, r2
    b5b6:	1aa5      	subs	r5, r4, r2
    b5b8:	46d8      	mov	r8, fp
    b5ba:	e729      	b.n	b410 <__aeabi_dadd+0xb8>
    b5bc:	4645      	mov	r5, r8
    b5be:	2400      	movs	r4, #0
    b5c0:	2700      	movs	r7, #0
    b5c2:	e76a      	b.n	b49a <__aeabi_dadd+0x142>
    b5c4:	4c45      	ldr	r4, [pc, #276]	; (b6dc <__aeabi_dadd+0x384>)
    b5c6:	1af6      	subs	r6, r6, r3
    b5c8:	402c      	ands	r4, r5
    b5ca:	e749      	b.n	b460 <__aeabi_dadd+0x108>
    b5cc:	003d      	movs	r5, r7
    b5ce:	3828      	subs	r0, #40	; 0x28
    b5d0:	4085      	lsls	r5, r0
    b5d2:	2700      	movs	r7, #0
    b5d4:	e72e      	b.n	b434 <__aeabi_dadd+0xdc>
    b5d6:	0038      	movs	r0, r7
    b5d8:	f001 fd22 	bl	d020 <__clzsi2>
    b5dc:	3020      	adds	r0, #32
    b5de:	e71d      	b.n	b41c <__aeabi_dadd+0xc4>
    b5e0:	430a      	orrs	r2, r1
    b5e2:	1e51      	subs	r1, r2, #1
    b5e4:	418a      	sbcs	r2, r1
    b5e6:	2100      	movs	r1, #0
    b5e8:	e707      	b.n	b3fa <__aeabi_dadd+0xa2>
    b5ea:	2b00      	cmp	r3, #0
    b5ec:	d000      	beq.n	b5f0 <__aeabi_dadd+0x298>
    b5ee:	e0f3      	b.n	b7d8 <__aeabi_dadd+0x480>
    b5f0:	1c70      	adds	r0, r6, #1
    b5f2:	0543      	lsls	r3, r0, #21
    b5f4:	0d5b      	lsrs	r3, r3, #21
    b5f6:	2b01      	cmp	r3, #1
    b5f8:	dc00      	bgt.n	b5fc <__aeabi_dadd+0x2a4>
    b5fa:	e0ad      	b.n	b758 <__aeabi_dadd+0x400>
    b5fc:	4b36      	ldr	r3, [pc, #216]	; (b6d8 <__aeabi_dadd+0x380>)
    b5fe:	4298      	cmp	r0, r3
    b600:	d100      	bne.n	b604 <__aeabi_dadd+0x2ac>
    b602:	e0d1      	b.n	b7a8 <__aeabi_dadd+0x450>
    b604:	18ba      	adds	r2, r7, r2
    b606:	42ba      	cmp	r2, r7
    b608:	41bf      	sbcs	r7, r7
    b60a:	1864      	adds	r4, r4, r1
    b60c:	427f      	negs	r7, r7
    b60e:	19e4      	adds	r4, r4, r7
    b610:	07e7      	lsls	r7, r4, #31
    b612:	0852      	lsrs	r2, r2, #1
    b614:	4317      	orrs	r7, r2
    b616:	0864      	lsrs	r4, r4, #1
    b618:	0006      	movs	r6, r0
    b61a:	e721      	b.n	b460 <__aeabi_dadd+0x108>
    b61c:	482e      	ldr	r0, [pc, #184]	; (b6d8 <__aeabi_dadd+0x380>)
    b61e:	4285      	cmp	r5, r0
    b620:	d100      	bne.n	b624 <__aeabi_dadd+0x2cc>
    b622:	e093      	b.n	b74c <__aeabi_dadd+0x3f4>
    b624:	001d      	movs	r5, r3
    b626:	e6d0      	b.n	b3ca <__aeabi_dadd+0x72>
    b628:	0029      	movs	r1, r5
    b62a:	3e1f      	subs	r6, #31
    b62c:	40f1      	lsrs	r1, r6
    b62e:	2b20      	cmp	r3, #32
    b630:	d100      	bne.n	b634 <__aeabi_dadd+0x2dc>
    b632:	e08d      	b.n	b750 <__aeabi_dadd+0x3f8>
    b634:	2240      	movs	r2, #64	; 0x40
    b636:	1ad3      	subs	r3, r2, r3
    b638:	409d      	lsls	r5, r3
    b63a:	432f      	orrs	r7, r5
    b63c:	1e7d      	subs	r5, r7, #1
    b63e:	41af      	sbcs	r7, r5
    b640:	2400      	movs	r4, #0
    b642:	430f      	orrs	r7, r1
    b644:	2600      	movs	r6, #0
    b646:	e744      	b.n	b4d2 <__aeabi_dadd+0x17a>
    b648:	002b      	movs	r3, r5
    b64a:	0008      	movs	r0, r1
    b64c:	3b20      	subs	r3, #32
    b64e:	40d8      	lsrs	r0, r3
    b650:	0003      	movs	r3, r0
    b652:	2d20      	cmp	r5, #32
    b654:	d100      	bne.n	b658 <__aeabi_dadd+0x300>
    b656:	e07d      	b.n	b754 <__aeabi_dadd+0x3fc>
    b658:	2040      	movs	r0, #64	; 0x40
    b65a:	1b45      	subs	r5, r0, r5
    b65c:	40a9      	lsls	r1, r5
    b65e:	430a      	orrs	r2, r1
    b660:	1e51      	subs	r1, r2, #1
    b662:	418a      	sbcs	r2, r1
    b664:	2100      	movs	r1, #0
    b666:	431a      	orrs	r2, r3
    b668:	e6c7      	b.n	b3fa <__aeabi_dadd+0xa2>
    b66a:	2e00      	cmp	r6, #0
    b66c:	d050      	beq.n	b710 <__aeabi_dadd+0x3b8>
    b66e:	4e1a      	ldr	r6, [pc, #104]	; (b6d8 <__aeabi_dadd+0x380>)
    b670:	42b0      	cmp	r0, r6
    b672:	d057      	beq.n	b724 <__aeabi_dadd+0x3cc>
    b674:	2680      	movs	r6, #128	; 0x80
    b676:	426b      	negs	r3, r5
    b678:	4699      	mov	r9, r3
    b67a:	0436      	lsls	r6, r6, #16
    b67c:	4334      	orrs	r4, r6
    b67e:	464b      	mov	r3, r9
    b680:	2b38      	cmp	r3, #56	; 0x38
    b682:	dd00      	ble.n	b686 <__aeabi_dadd+0x32e>
    b684:	e0d6      	b.n	b834 <__aeabi_dadd+0x4dc>
    b686:	2b1f      	cmp	r3, #31
    b688:	dd00      	ble.n	b68c <__aeabi_dadd+0x334>
    b68a:	e135      	b.n	b8f8 <__aeabi_dadd+0x5a0>
    b68c:	2620      	movs	r6, #32
    b68e:	1af5      	subs	r5, r6, r3
    b690:	0026      	movs	r6, r4
    b692:	40ae      	lsls	r6, r5
    b694:	46b2      	mov	sl, r6
    b696:	003e      	movs	r6, r7
    b698:	40de      	lsrs	r6, r3
    b69a:	46ac      	mov	ip, r5
    b69c:	0035      	movs	r5, r6
    b69e:	4656      	mov	r6, sl
    b6a0:	432e      	orrs	r6, r5
    b6a2:	4665      	mov	r5, ip
    b6a4:	40af      	lsls	r7, r5
    b6a6:	1e7d      	subs	r5, r7, #1
    b6a8:	41af      	sbcs	r7, r5
    b6aa:	40dc      	lsrs	r4, r3
    b6ac:	4337      	orrs	r7, r6
    b6ae:	1bd7      	subs	r7, r2, r7
    b6b0:	42ba      	cmp	r2, r7
    b6b2:	4192      	sbcs	r2, r2
    b6b4:	1b0c      	subs	r4, r1, r4
    b6b6:	4252      	negs	r2, r2
    b6b8:	1aa4      	subs	r4, r4, r2
    b6ba:	0006      	movs	r6, r0
    b6bc:	46d8      	mov	r8, fp
    b6be:	e6a3      	b.n	b408 <__aeabi_dadd+0xb0>
    b6c0:	4664      	mov	r4, ip
    b6c2:	4667      	mov	r7, ip
    b6c4:	432c      	orrs	r4, r5
    b6c6:	d000      	beq.n	b6ca <__aeabi_dadd+0x372>
    b6c8:	e6a2      	b.n	b410 <__aeabi_dadd+0xb8>
    b6ca:	2500      	movs	r5, #0
    b6cc:	2600      	movs	r6, #0
    b6ce:	2700      	movs	r7, #0
    b6d0:	e706      	b.n	b4e0 <__aeabi_dadd+0x188>
    b6d2:	001e      	movs	r6, r3
    b6d4:	e6c4      	b.n	b460 <__aeabi_dadd+0x108>
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	000007ff 	.word	0x000007ff
    b6dc:	ff7fffff 	.word	0xff7fffff
    b6e0:	800fffff 	.word	0x800fffff
    b6e4:	2b1f      	cmp	r3, #31
    b6e6:	dc63      	bgt.n	b7b0 <__aeabi_dadd+0x458>
    b6e8:	2020      	movs	r0, #32
    b6ea:	1ac3      	subs	r3, r0, r3
    b6ec:	0008      	movs	r0, r1
    b6ee:	4098      	lsls	r0, r3
    b6f0:	469c      	mov	ip, r3
    b6f2:	4683      	mov	fp, r0
    b6f4:	4653      	mov	r3, sl
    b6f6:	0010      	movs	r0, r2
    b6f8:	40d8      	lsrs	r0, r3
    b6fa:	0003      	movs	r3, r0
    b6fc:	4658      	mov	r0, fp
    b6fe:	4318      	orrs	r0, r3
    b700:	4663      	mov	r3, ip
    b702:	409a      	lsls	r2, r3
    b704:	1e53      	subs	r3, r2, #1
    b706:	419a      	sbcs	r2, r3
    b708:	4653      	mov	r3, sl
    b70a:	4302      	orrs	r2, r0
    b70c:	40d9      	lsrs	r1, r3
    b70e:	e703      	b.n	b518 <__aeabi_dadd+0x1c0>
    b710:	0026      	movs	r6, r4
    b712:	433e      	orrs	r6, r7
    b714:	d006      	beq.n	b724 <__aeabi_dadd+0x3cc>
    b716:	43eb      	mvns	r3, r5
    b718:	4699      	mov	r9, r3
    b71a:	2b00      	cmp	r3, #0
    b71c:	d0c7      	beq.n	b6ae <__aeabi_dadd+0x356>
    b71e:	4e94      	ldr	r6, [pc, #592]	; (b970 <__aeabi_dadd+0x618>)
    b720:	42b0      	cmp	r0, r6
    b722:	d1ac      	bne.n	b67e <__aeabi_dadd+0x326>
    b724:	000c      	movs	r4, r1
    b726:	0017      	movs	r7, r2
    b728:	0006      	movs	r6, r0
    b72a:	46d8      	mov	r8, fp
    b72c:	e698      	b.n	b460 <__aeabi_dadd+0x108>
    b72e:	4b90      	ldr	r3, [pc, #576]	; (b970 <__aeabi_dadd+0x618>)
    b730:	459a      	cmp	sl, r3
    b732:	d00b      	beq.n	b74c <__aeabi_dadd+0x3f4>
    b734:	4682      	mov	sl, r0
    b736:	e6e7      	b.n	b508 <__aeabi_dadd+0x1b0>
    b738:	2800      	cmp	r0, #0
    b73a:	d000      	beq.n	b73e <__aeabi_dadd+0x3e6>
    b73c:	e09e      	b.n	b87c <__aeabi_dadd+0x524>
    b73e:	0018      	movs	r0, r3
    b740:	4310      	orrs	r0, r2
    b742:	d100      	bne.n	b746 <__aeabi_dadd+0x3ee>
    b744:	e0e9      	b.n	b91a <__aeabi_dadd+0x5c2>
    b746:	001c      	movs	r4, r3
    b748:	0017      	movs	r7, r2
    b74a:	46d8      	mov	r8, fp
    b74c:	4e88      	ldr	r6, [pc, #544]	; (b970 <__aeabi_dadd+0x618>)
    b74e:	e687      	b.n	b460 <__aeabi_dadd+0x108>
    b750:	2500      	movs	r5, #0
    b752:	e772      	b.n	b63a <__aeabi_dadd+0x2e2>
    b754:	2100      	movs	r1, #0
    b756:	e782      	b.n	b65e <__aeabi_dadd+0x306>
    b758:	0023      	movs	r3, r4
    b75a:	433b      	orrs	r3, r7
    b75c:	2e00      	cmp	r6, #0
    b75e:	d000      	beq.n	b762 <__aeabi_dadd+0x40a>
    b760:	e0ab      	b.n	b8ba <__aeabi_dadd+0x562>
    b762:	2b00      	cmp	r3, #0
    b764:	d100      	bne.n	b768 <__aeabi_dadd+0x410>
    b766:	e0e7      	b.n	b938 <__aeabi_dadd+0x5e0>
    b768:	000b      	movs	r3, r1
    b76a:	4313      	orrs	r3, r2
    b76c:	d100      	bne.n	b770 <__aeabi_dadd+0x418>
    b76e:	e677      	b.n	b460 <__aeabi_dadd+0x108>
    b770:	18ba      	adds	r2, r7, r2
    b772:	42ba      	cmp	r2, r7
    b774:	41bf      	sbcs	r7, r7
    b776:	1864      	adds	r4, r4, r1
    b778:	427f      	negs	r7, r7
    b77a:	19e4      	adds	r4, r4, r7
    b77c:	0223      	lsls	r3, r4, #8
    b77e:	d400      	bmi.n	b782 <__aeabi_dadd+0x42a>
    b780:	e0f2      	b.n	b968 <__aeabi_dadd+0x610>
    b782:	4b7c      	ldr	r3, [pc, #496]	; (b974 <__aeabi_dadd+0x61c>)
    b784:	0017      	movs	r7, r2
    b786:	401c      	ands	r4, r3
    b788:	0006      	movs	r6, r0
    b78a:	e669      	b.n	b460 <__aeabi_dadd+0x108>
    b78c:	0020      	movs	r0, r4
    b78e:	4338      	orrs	r0, r7
    b790:	2e00      	cmp	r6, #0
    b792:	d1d1      	bne.n	b738 <__aeabi_dadd+0x3e0>
    b794:	2800      	cmp	r0, #0
    b796:	d15b      	bne.n	b850 <__aeabi_dadd+0x4f8>
    b798:	001c      	movs	r4, r3
    b79a:	4314      	orrs	r4, r2
    b79c:	d100      	bne.n	b7a0 <__aeabi_dadd+0x448>
    b79e:	e0a8      	b.n	b8f2 <__aeabi_dadd+0x59a>
    b7a0:	001c      	movs	r4, r3
    b7a2:	0017      	movs	r7, r2
    b7a4:	46d8      	mov	r8, fp
    b7a6:	e65b      	b.n	b460 <__aeabi_dadd+0x108>
    b7a8:	0006      	movs	r6, r0
    b7aa:	2400      	movs	r4, #0
    b7ac:	2700      	movs	r7, #0
    b7ae:	e697      	b.n	b4e0 <__aeabi_dadd+0x188>
    b7b0:	4650      	mov	r0, sl
    b7b2:	000b      	movs	r3, r1
    b7b4:	3820      	subs	r0, #32
    b7b6:	40c3      	lsrs	r3, r0
    b7b8:	4699      	mov	r9, r3
    b7ba:	4653      	mov	r3, sl
    b7bc:	2b20      	cmp	r3, #32
    b7be:	d100      	bne.n	b7c2 <__aeabi_dadd+0x46a>
    b7c0:	e095      	b.n	b8ee <__aeabi_dadd+0x596>
    b7c2:	2340      	movs	r3, #64	; 0x40
    b7c4:	4650      	mov	r0, sl
    b7c6:	1a1b      	subs	r3, r3, r0
    b7c8:	4099      	lsls	r1, r3
    b7ca:	430a      	orrs	r2, r1
    b7cc:	1e51      	subs	r1, r2, #1
    b7ce:	418a      	sbcs	r2, r1
    b7d0:	464b      	mov	r3, r9
    b7d2:	2100      	movs	r1, #0
    b7d4:	431a      	orrs	r2, r3
    b7d6:	e69f      	b.n	b518 <__aeabi_dadd+0x1c0>
    b7d8:	2e00      	cmp	r6, #0
    b7da:	d130      	bne.n	b83e <__aeabi_dadd+0x4e6>
    b7dc:	0026      	movs	r6, r4
    b7de:	433e      	orrs	r6, r7
    b7e0:	d067      	beq.n	b8b2 <__aeabi_dadd+0x55a>
    b7e2:	43db      	mvns	r3, r3
    b7e4:	469a      	mov	sl, r3
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	d01c      	beq.n	b824 <__aeabi_dadd+0x4cc>
    b7ea:	4e61      	ldr	r6, [pc, #388]	; (b970 <__aeabi_dadd+0x618>)
    b7ec:	42b0      	cmp	r0, r6
    b7ee:	d060      	beq.n	b8b2 <__aeabi_dadd+0x55a>
    b7f0:	4653      	mov	r3, sl
    b7f2:	2b38      	cmp	r3, #56	; 0x38
    b7f4:	dd00      	ble.n	b7f8 <__aeabi_dadd+0x4a0>
    b7f6:	e096      	b.n	b926 <__aeabi_dadd+0x5ce>
    b7f8:	2b1f      	cmp	r3, #31
    b7fa:	dd00      	ble.n	b7fe <__aeabi_dadd+0x4a6>
    b7fc:	e09f      	b.n	b93e <__aeabi_dadd+0x5e6>
    b7fe:	2620      	movs	r6, #32
    b800:	1af3      	subs	r3, r6, r3
    b802:	0026      	movs	r6, r4
    b804:	409e      	lsls	r6, r3
    b806:	469c      	mov	ip, r3
    b808:	46b3      	mov	fp, r6
    b80a:	4653      	mov	r3, sl
    b80c:	003e      	movs	r6, r7
    b80e:	40de      	lsrs	r6, r3
    b810:	0033      	movs	r3, r6
    b812:	465e      	mov	r6, fp
    b814:	431e      	orrs	r6, r3
    b816:	4663      	mov	r3, ip
    b818:	409f      	lsls	r7, r3
    b81a:	1e7b      	subs	r3, r7, #1
    b81c:	419f      	sbcs	r7, r3
    b81e:	4653      	mov	r3, sl
    b820:	40dc      	lsrs	r4, r3
    b822:	4337      	orrs	r7, r6
    b824:	18bf      	adds	r7, r7, r2
    b826:	4297      	cmp	r7, r2
    b828:	4192      	sbcs	r2, r2
    b82a:	1864      	adds	r4, r4, r1
    b82c:	4252      	negs	r2, r2
    b82e:	18a4      	adds	r4, r4, r2
    b830:	0006      	movs	r6, r0
    b832:	e678      	b.n	b526 <__aeabi_dadd+0x1ce>
    b834:	4327      	orrs	r7, r4
    b836:	1e7c      	subs	r4, r7, #1
    b838:	41a7      	sbcs	r7, r4
    b83a:	2400      	movs	r4, #0
    b83c:	e737      	b.n	b6ae <__aeabi_dadd+0x356>
    b83e:	4e4c      	ldr	r6, [pc, #304]	; (b970 <__aeabi_dadd+0x618>)
    b840:	42b0      	cmp	r0, r6
    b842:	d036      	beq.n	b8b2 <__aeabi_dadd+0x55a>
    b844:	2680      	movs	r6, #128	; 0x80
    b846:	425b      	negs	r3, r3
    b848:	0436      	lsls	r6, r6, #16
    b84a:	469a      	mov	sl, r3
    b84c:	4334      	orrs	r4, r6
    b84e:	e7cf      	b.n	b7f0 <__aeabi_dadd+0x498>
    b850:	0018      	movs	r0, r3
    b852:	4310      	orrs	r0, r2
    b854:	d100      	bne.n	b858 <__aeabi_dadd+0x500>
    b856:	e603      	b.n	b460 <__aeabi_dadd+0x108>
    b858:	1ab8      	subs	r0, r7, r2
    b85a:	4684      	mov	ip, r0
    b85c:	4567      	cmp	r7, ip
    b85e:	41ad      	sbcs	r5, r5
    b860:	1ae0      	subs	r0, r4, r3
    b862:	426d      	negs	r5, r5
    b864:	1b40      	subs	r0, r0, r5
    b866:	0205      	lsls	r5, r0, #8
    b868:	d400      	bmi.n	b86c <__aeabi_dadd+0x514>
    b86a:	e62c      	b.n	b4c6 <__aeabi_dadd+0x16e>
    b86c:	1bd7      	subs	r7, r2, r7
    b86e:	42ba      	cmp	r2, r7
    b870:	4192      	sbcs	r2, r2
    b872:	1b1c      	subs	r4, r3, r4
    b874:	4252      	negs	r2, r2
    b876:	1aa4      	subs	r4, r4, r2
    b878:	46d8      	mov	r8, fp
    b87a:	e5f1      	b.n	b460 <__aeabi_dadd+0x108>
    b87c:	0018      	movs	r0, r3
    b87e:	4310      	orrs	r0, r2
    b880:	d100      	bne.n	b884 <__aeabi_dadd+0x52c>
    b882:	e763      	b.n	b74c <__aeabi_dadd+0x3f4>
    b884:	08f8      	lsrs	r0, r7, #3
    b886:	0767      	lsls	r7, r4, #29
    b888:	4307      	orrs	r7, r0
    b88a:	2080      	movs	r0, #128	; 0x80
    b88c:	08e4      	lsrs	r4, r4, #3
    b88e:	0300      	lsls	r0, r0, #12
    b890:	4204      	tst	r4, r0
    b892:	d008      	beq.n	b8a6 <__aeabi_dadd+0x54e>
    b894:	08dd      	lsrs	r5, r3, #3
    b896:	4205      	tst	r5, r0
    b898:	d105      	bne.n	b8a6 <__aeabi_dadd+0x54e>
    b89a:	08d2      	lsrs	r2, r2, #3
    b89c:	0759      	lsls	r1, r3, #29
    b89e:	4311      	orrs	r1, r2
    b8a0:	000f      	movs	r7, r1
    b8a2:	002c      	movs	r4, r5
    b8a4:	46d8      	mov	r8, fp
    b8a6:	0f7b      	lsrs	r3, r7, #29
    b8a8:	00e4      	lsls	r4, r4, #3
    b8aa:	431c      	orrs	r4, r3
    b8ac:	00ff      	lsls	r7, r7, #3
    b8ae:	4e30      	ldr	r6, [pc, #192]	; (b970 <__aeabi_dadd+0x618>)
    b8b0:	e5d6      	b.n	b460 <__aeabi_dadd+0x108>
    b8b2:	000c      	movs	r4, r1
    b8b4:	0017      	movs	r7, r2
    b8b6:	0006      	movs	r6, r0
    b8b8:	e5d2      	b.n	b460 <__aeabi_dadd+0x108>
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d038      	beq.n	b930 <__aeabi_dadd+0x5d8>
    b8be:	000b      	movs	r3, r1
    b8c0:	4313      	orrs	r3, r2
    b8c2:	d100      	bne.n	b8c6 <__aeabi_dadd+0x56e>
    b8c4:	e742      	b.n	b74c <__aeabi_dadd+0x3f4>
    b8c6:	08f8      	lsrs	r0, r7, #3
    b8c8:	0767      	lsls	r7, r4, #29
    b8ca:	4307      	orrs	r7, r0
    b8cc:	2080      	movs	r0, #128	; 0x80
    b8ce:	08e4      	lsrs	r4, r4, #3
    b8d0:	0300      	lsls	r0, r0, #12
    b8d2:	4204      	tst	r4, r0
    b8d4:	d0e7      	beq.n	b8a6 <__aeabi_dadd+0x54e>
    b8d6:	08cb      	lsrs	r3, r1, #3
    b8d8:	4203      	tst	r3, r0
    b8da:	d1e4      	bne.n	b8a6 <__aeabi_dadd+0x54e>
    b8dc:	08d2      	lsrs	r2, r2, #3
    b8de:	0749      	lsls	r1, r1, #29
    b8e0:	4311      	orrs	r1, r2
    b8e2:	000f      	movs	r7, r1
    b8e4:	001c      	movs	r4, r3
    b8e6:	e7de      	b.n	b8a6 <__aeabi_dadd+0x54e>
    b8e8:	2700      	movs	r7, #0
    b8ea:	2400      	movs	r4, #0
    b8ec:	e5d5      	b.n	b49a <__aeabi_dadd+0x142>
    b8ee:	2100      	movs	r1, #0
    b8f0:	e76b      	b.n	b7ca <__aeabi_dadd+0x472>
    b8f2:	2500      	movs	r5, #0
    b8f4:	2700      	movs	r7, #0
    b8f6:	e5f3      	b.n	b4e0 <__aeabi_dadd+0x188>
    b8f8:	464e      	mov	r6, r9
    b8fa:	0025      	movs	r5, r4
    b8fc:	3e20      	subs	r6, #32
    b8fe:	40f5      	lsrs	r5, r6
    b900:	464b      	mov	r3, r9
    b902:	002e      	movs	r6, r5
    b904:	2b20      	cmp	r3, #32
    b906:	d02d      	beq.n	b964 <__aeabi_dadd+0x60c>
    b908:	2540      	movs	r5, #64	; 0x40
    b90a:	1aed      	subs	r5, r5, r3
    b90c:	40ac      	lsls	r4, r5
    b90e:	4327      	orrs	r7, r4
    b910:	1e7c      	subs	r4, r7, #1
    b912:	41a7      	sbcs	r7, r4
    b914:	2400      	movs	r4, #0
    b916:	4337      	orrs	r7, r6
    b918:	e6c9      	b.n	b6ae <__aeabi_dadd+0x356>
    b91a:	2480      	movs	r4, #128	; 0x80
    b91c:	2500      	movs	r5, #0
    b91e:	0324      	lsls	r4, r4, #12
    b920:	4e13      	ldr	r6, [pc, #76]	; (b970 <__aeabi_dadd+0x618>)
    b922:	2700      	movs	r7, #0
    b924:	e5dc      	b.n	b4e0 <__aeabi_dadd+0x188>
    b926:	4327      	orrs	r7, r4
    b928:	1e7c      	subs	r4, r7, #1
    b92a:	41a7      	sbcs	r7, r4
    b92c:	2400      	movs	r4, #0
    b92e:	e779      	b.n	b824 <__aeabi_dadd+0x4cc>
    b930:	000c      	movs	r4, r1
    b932:	0017      	movs	r7, r2
    b934:	4e0e      	ldr	r6, [pc, #56]	; (b970 <__aeabi_dadd+0x618>)
    b936:	e593      	b.n	b460 <__aeabi_dadd+0x108>
    b938:	000c      	movs	r4, r1
    b93a:	0017      	movs	r7, r2
    b93c:	e590      	b.n	b460 <__aeabi_dadd+0x108>
    b93e:	4656      	mov	r6, sl
    b940:	0023      	movs	r3, r4
    b942:	3e20      	subs	r6, #32
    b944:	40f3      	lsrs	r3, r6
    b946:	4699      	mov	r9, r3
    b948:	4653      	mov	r3, sl
    b94a:	2b20      	cmp	r3, #32
    b94c:	d00e      	beq.n	b96c <__aeabi_dadd+0x614>
    b94e:	2340      	movs	r3, #64	; 0x40
    b950:	4656      	mov	r6, sl
    b952:	1b9b      	subs	r3, r3, r6
    b954:	409c      	lsls	r4, r3
    b956:	4327      	orrs	r7, r4
    b958:	1e7c      	subs	r4, r7, #1
    b95a:	41a7      	sbcs	r7, r4
    b95c:	464b      	mov	r3, r9
    b95e:	2400      	movs	r4, #0
    b960:	431f      	orrs	r7, r3
    b962:	e75f      	b.n	b824 <__aeabi_dadd+0x4cc>
    b964:	2400      	movs	r4, #0
    b966:	e7d2      	b.n	b90e <__aeabi_dadd+0x5b6>
    b968:	0017      	movs	r7, r2
    b96a:	e5b2      	b.n	b4d2 <__aeabi_dadd+0x17a>
    b96c:	2400      	movs	r4, #0
    b96e:	e7f2      	b.n	b956 <__aeabi_dadd+0x5fe>
    b970:	000007ff 	.word	0x000007ff
    b974:	ff7fffff 	.word	0xff7fffff

0000b978 <__aeabi_ddiv>:
    b978:	b5f0      	push	{r4, r5, r6, r7, lr}
    b97a:	4657      	mov	r7, sl
    b97c:	4645      	mov	r5, r8
    b97e:	46de      	mov	lr, fp
    b980:	464e      	mov	r6, r9
    b982:	b5e0      	push	{r5, r6, r7, lr}
    b984:	004c      	lsls	r4, r1, #1
    b986:	030e      	lsls	r6, r1, #12
    b988:	b087      	sub	sp, #28
    b98a:	4683      	mov	fp, r0
    b98c:	4692      	mov	sl, r2
    b98e:	001d      	movs	r5, r3
    b990:	4680      	mov	r8, r0
    b992:	0b36      	lsrs	r6, r6, #12
    b994:	0d64      	lsrs	r4, r4, #21
    b996:	0fcf      	lsrs	r7, r1, #31
    b998:	2c00      	cmp	r4, #0
    b99a:	d04f      	beq.n	ba3c <__aeabi_ddiv+0xc4>
    b99c:	4b6f      	ldr	r3, [pc, #444]	; (bb5c <__aeabi_ddiv+0x1e4>)
    b99e:	429c      	cmp	r4, r3
    b9a0:	d035      	beq.n	ba0e <__aeabi_ddiv+0x96>
    b9a2:	2380      	movs	r3, #128	; 0x80
    b9a4:	0f42      	lsrs	r2, r0, #29
    b9a6:	041b      	lsls	r3, r3, #16
    b9a8:	00f6      	lsls	r6, r6, #3
    b9aa:	4313      	orrs	r3, r2
    b9ac:	4333      	orrs	r3, r6
    b9ae:	4699      	mov	r9, r3
    b9b0:	00c3      	lsls	r3, r0, #3
    b9b2:	4698      	mov	r8, r3
    b9b4:	4b6a      	ldr	r3, [pc, #424]	; (bb60 <__aeabi_ddiv+0x1e8>)
    b9b6:	2600      	movs	r6, #0
    b9b8:	469c      	mov	ip, r3
    b9ba:	2300      	movs	r3, #0
    b9bc:	4464      	add	r4, ip
    b9be:	9303      	str	r3, [sp, #12]
    b9c0:	032b      	lsls	r3, r5, #12
    b9c2:	0b1b      	lsrs	r3, r3, #12
    b9c4:	469b      	mov	fp, r3
    b9c6:	006b      	lsls	r3, r5, #1
    b9c8:	0fed      	lsrs	r5, r5, #31
    b9ca:	4650      	mov	r0, sl
    b9cc:	0d5b      	lsrs	r3, r3, #21
    b9ce:	9501      	str	r5, [sp, #4]
    b9d0:	d05e      	beq.n	ba90 <__aeabi_ddiv+0x118>
    b9d2:	4a62      	ldr	r2, [pc, #392]	; (bb5c <__aeabi_ddiv+0x1e4>)
    b9d4:	4293      	cmp	r3, r2
    b9d6:	d053      	beq.n	ba80 <__aeabi_ddiv+0x108>
    b9d8:	465a      	mov	r2, fp
    b9da:	00d1      	lsls	r1, r2, #3
    b9dc:	2280      	movs	r2, #128	; 0x80
    b9de:	0f40      	lsrs	r0, r0, #29
    b9e0:	0412      	lsls	r2, r2, #16
    b9e2:	4302      	orrs	r2, r0
    b9e4:	430a      	orrs	r2, r1
    b9e6:	4693      	mov	fp, r2
    b9e8:	4652      	mov	r2, sl
    b9ea:	00d1      	lsls	r1, r2, #3
    b9ec:	4a5c      	ldr	r2, [pc, #368]	; (bb60 <__aeabi_ddiv+0x1e8>)
    b9ee:	4694      	mov	ip, r2
    b9f0:	2200      	movs	r2, #0
    b9f2:	4463      	add	r3, ip
    b9f4:	0038      	movs	r0, r7
    b9f6:	4068      	eors	r0, r5
    b9f8:	4684      	mov	ip, r0
    b9fa:	9002      	str	r0, [sp, #8]
    b9fc:	1ae4      	subs	r4, r4, r3
    b9fe:	4316      	orrs	r6, r2
    ba00:	2e0f      	cmp	r6, #15
    ba02:	d900      	bls.n	ba06 <__aeabi_ddiv+0x8e>
    ba04:	e0b4      	b.n	bb70 <__aeabi_ddiv+0x1f8>
    ba06:	4b57      	ldr	r3, [pc, #348]	; (bb64 <__aeabi_ddiv+0x1ec>)
    ba08:	00b6      	lsls	r6, r6, #2
    ba0a:	599b      	ldr	r3, [r3, r6]
    ba0c:	469f      	mov	pc, r3
    ba0e:	0003      	movs	r3, r0
    ba10:	4333      	orrs	r3, r6
    ba12:	4699      	mov	r9, r3
    ba14:	d16c      	bne.n	baf0 <__aeabi_ddiv+0x178>
    ba16:	2300      	movs	r3, #0
    ba18:	4698      	mov	r8, r3
    ba1a:	3302      	adds	r3, #2
    ba1c:	2608      	movs	r6, #8
    ba1e:	9303      	str	r3, [sp, #12]
    ba20:	e7ce      	b.n	b9c0 <__aeabi_ddiv+0x48>
    ba22:	46cb      	mov	fp, r9
    ba24:	4641      	mov	r1, r8
    ba26:	9a03      	ldr	r2, [sp, #12]
    ba28:	9701      	str	r7, [sp, #4]
    ba2a:	2a02      	cmp	r2, #2
    ba2c:	d165      	bne.n	bafa <__aeabi_ddiv+0x182>
    ba2e:	9b01      	ldr	r3, [sp, #4]
    ba30:	4c4a      	ldr	r4, [pc, #296]	; (bb5c <__aeabi_ddiv+0x1e4>)
    ba32:	469c      	mov	ip, r3
    ba34:	2300      	movs	r3, #0
    ba36:	2200      	movs	r2, #0
    ba38:	4698      	mov	r8, r3
    ba3a:	e06b      	b.n	bb14 <__aeabi_ddiv+0x19c>
    ba3c:	0003      	movs	r3, r0
    ba3e:	4333      	orrs	r3, r6
    ba40:	4699      	mov	r9, r3
    ba42:	d04e      	beq.n	bae2 <__aeabi_ddiv+0x16a>
    ba44:	2e00      	cmp	r6, #0
    ba46:	d100      	bne.n	ba4a <__aeabi_ddiv+0xd2>
    ba48:	e1bc      	b.n	bdc4 <__aeabi_ddiv+0x44c>
    ba4a:	0030      	movs	r0, r6
    ba4c:	f001 fae8 	bl	d020 <__clzsi2>
    ba50:	0003      	movs	r3, r0
    ba52:	3b0b      	subs	r3, #11
    ba54:	2b1c      	cmp	r3, #28
    ba56:	dd00      	ble.n	ba5a <__aeabi_ddiv+0xe2>
    ba58:	e1ac      	b.n	bdb4 <__aeabi_ddiv+0x43c>
    ba5a:	221d      	movs	r2, #29
    ba5c:	1ad3      	subs	r3, r2, r3
    ba5e:	465a      	mov	r2, fp
    ba60:	0001      	movs	r1, r0
    ba62:	40da      	lsrs	r2, r3
    ba64:	3908      	subs	r1, #8
    ba66:	408e      	lsls	r6, r1
    ba68:	0013      	movs	r3, r2
    ba6a:	4333      	orrs	r3, r6
    ba6c:	4699      	mov	r9, r3
    ba6e:	465b      	mov	r3, fp
    ba70:	408b      	lsls	r3, r1
    ba72:	4698      	mov	r8, r3
    ba74:	2300      	movs	r3, #0
    ba76:	4c3c      	ldr	r4, [pc, #240]	; (bb68 <__aeabi_ddiv+0x1f0>)
    ba78:	2600      	movs	r6, #0
    ba7a:	1a24      	subs	r4, r4, r0
    ba7c:	9303      	str	r3, [sp, #12]
    ba7e:	e79f      	b.n	b9c0 <__aeabi_ddiv+0x48>
    ba80:	4651      	mov	r1, sl
    ba82:	465a      	mov	r2, fp
    ba84:	4311      	orrs	r1, r2
    ba86:	d129      	bne.n	badc <__aeabi_ddiv+0x164>
    ba88:	2200      	movs	r2, #0
    ba8a:	4693      	mov	fp, r2
    ba8c:	3202      	adds	r2, #2
    ba8e:	e7b1      	b.n	b9f4 <__aeabi_ddiv+0x7c>
    ba90:	4659      	mov	r1, fp
    ba92:	4301      	orrs	r1, r0
    ba94:	d01e      	beq.n	bad4 <__aeabi_ddiv+0x15c>
    ba96:	465b      	mov	r3, fp
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d100      	bne.n	ba9e <__aeabi_ddiv+0x126>
    ba9c:	e19e      	b.n	bddc <__aeabi_ddiv+0x464>
    ba9e:	4658      	mov	r0, fp
    baa0:	f001 fabe 	bl	d020 <__clzsi2>
    baa4:	0003      	movs	r3, r0
    baa6:	3b0b      	subs	r3, #11
    baa8:	2b1c      	cmp	r3, #28
    baaa:	dd00      	ble.n	baae <__aeabi_ddiv+0x136>
    baac:	e18f      	b.n	bdce <__aeabi_ddiv+0x456>
    baae:	0002      	movs	r2, r0
    bab0:	4659      	mov	r1, fp
    bab2:	3a08      	subs	r2, #8
    bab4:	4091      	lsls	r1, r2
    bab6:	468b      	mov	fp, r1
    bab8:	211d      	movs	r1, #29
    baba:	1acb      	subs	r3, r1, r3
    babc:	4651      	mov	r1, sl
    babe:	40d9      	lsrs	r1, r3
    bac0:	000b      	movs	r3, r1
    bac2:	4659      	mov	r1, fp
    bac4:	430b      	orrs	r3, r1
    bac6:	4651      	mov	r1, sl
    bac8:	469b      	mov	fp, r3
    baca:	4091      	lsls	r1, r2
    bacc:	4b26      	ldr	r3, [pc, #152]	; (bb68 <__aeabi_ddiv+0x1f0>)
    bace:	2200      	movs	r2, #0
    bad0:	1a1b      	subs	r3, r3, r0
    bad2:	e78f      	b.n	b9f4 <__aeabi_ddiv+0x7c>
    bad4:	2300      	movs	r3, #0
    bad6:	2201      	movs	r2, #1
    bad8:	469b      	mov	fp, r3
    bada:	e78b      	b.n	b9f4 <__aeabi_ddiv+0x7c>
    badc:	4651      	mov	r1, sl
    bade:	2203      	movs	r2, #3
    bae0:	e788      	b.n	b9f4 <__aeabi_ddiv+0x7c>
    bae2:	2300      	movs	r3, #0
    bae4:	4698      	mov	r8, r3
    bae6:	3301      	adds	r3, #1
    bae8:	2604      	movs	r6, #4
    baea:	2400      	movs	r4, #0
    baec:	9303      	str	r3, [sp, #12]
    baee:	e767      	b.n	b9c0 <__aeabi_ddiv+0x48>
    baf0:	2303      	movs	r3, #3
    baf2:	46b1      	mov	r9, r6
    baf4:	9303      	str	r3, [sp, #12]
    baf6:	260c      	movs	r6, #12
    baf8:	e762      	b.n	b9c0 <__aeabi_ddiv+0x48>
    bafa:	2a03      	cmp	r2, #3
    bafc:	d100      	bne.n	bb00 <__aeabi_ddiv+0x188>
    bafe:	e25c      	b.n	bfba <__aeabi_ddiv+0x642>
    bb00:	9b01      	ldr	r3, [sp, #4]
    bb02:	2a01      	cmp	r2, #1
    bb04:	d000      	beq.n	bb08 <__aeabi_ddiv+0x190>
    bb06:	e1e4      	b.n	bed2 <__aeabi_ddiv+0x55a>
    bb08:	4013      	ands	r3, r2
    bb0a:	469c      	mov	ip, r3
    bb0c:	2300      	movs	r3, #0
    bb0e:	2400      	movs	r4, #0
    bb10:	2200      	movs	r2, #0
    bb12:	4698      	mov	r8, r3
    bb14:	2100      	movs	r1, #0
    bb16:	0312      	lsls	r2, r2, #12
    bb18:	0b13      	lsrs	r3, r2, #12
    bb1a:	0d0a      	lsrs	r2, r1, #20
    bb1c:	0512      	lsls	r2, r2, #20
    bb1e:	431a      	orrs	r2, r3
    bb20:	0523      	lsls	r3, r4, #20
    bb22:	4c12      	ldr	r4, [pc, #72]	; (bb6c <__aeabi_ddiv+0x1f4>)
    bb24:	4640      	mov	r0, r8
    bb26:	4022      	ands	r2, r4
    bb28:	4313      	orrs	r3, r2
    bb2a:	4662      	mov	r2, ip
    bb2c:	005b      	lsls	r3, r3, #1
    bb2e:	07d2      	lsls	r2, r2, #31
    bb30:	085b      	lsrs	r3, r3, #1
    bb32:	4313      	orrs	r3, r2
    bb34:	0019      	movs	r1, r3
    bb36:	b007      	add	sp, #28
    bb38:	bc3c      	pop	{r2, r3, r4, r5}
    bb3a:	4690      	mov	r8, r2
    bb3c:	4699      	mov	r9, r3
    bb3e:	46a2      	mov	sl, r4
    bb40:	46ab      	mov	fp, r5
    bb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb44:	2300      	movs	r3, #0
    bb46:	2280      	movs	r2, #128	; 0x80
    bb48:	469c      	mov	ip, r3
    bb4a:	0312      	lsls	r2, r2, #12
    bb4c:	4698      	mov	r8, r3
    bb4e:	4c03      	ldr	r4, [pc, #12]	; (bb5c <__aeabi_ddiv+0x1e4>)
    bb50:	e7e0      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bb52:	2300      	movs	r3, #0
    bb54:	4c01      	ldr	r4, [pc, #4]	; (bb5c <__aeabi_ddiv+0x1e4>)
    bb56:	2200      	movs	r2, #0
    bb58:	4698      	mov	r8, r3
    bb5a:	e7db      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bb5c:	000007ff 	.word	0x000007ff
    bb60:	fffffc01 	.word	0xfffffc01
    bb64:	0000ddb0 	.word	0x0000ddb0
    bb68:	fffffc0d 	.word	0xfffffc0d
    bb6c:	800fffff 	.word	0x800fffff
    bb70:	45d9      	cmp	r9, fp
    bb72:	d900      	bls.n	bb76 <__aeabi_ddiv+0x1fe>
    bb74:	e139      	b.n	bdea <__aeabi_ddiv+0x472>
    bb76:	d100      	bne.n	bb7a <__aeabi_ddiv+0x202>
    bb78:	e134      	b.n	bde4 <__aeabi_ddiv+0x46c>
    bb7a:	2300      	movs	r3, #0
    bb7c:	4646      	mov	r6, r8
    bb7e:	464d      	mov	r5, r9
    bb80:	469a      	mov	sl, r3
    bb82:	3c01      	subs	r4, #1
    bb84:	465b      	mov	r3, fp
    bb86:	0e0a      	lsrs	r2, r1, #24
    bb88:	021b      	lsls	r3, r3, #8
    bb8a:	431a      	orrs	r2, r3
    bb8c:	020b      	lsls	r3, r1, #8
    bb8e:	0c17      	lsrs	r7, r2, #16
    bb90:	9303      	str	r3, [sp, #12]
    bb92:	0413      	lsls	r3, r2, #16
    bb94:	0c1b      	lsrs	r3, r3, #16
    bb96:	0039      	movs	r1, r7
    bb98:	0028      	movs	r0, r5
    bb9a:	4690      	mov	r8, r2
    bb9c:	9301      	str	r3, [sp, #4]
    bb9e:	f7fe fb07 	bl	a1b0 <__udivsi3>
    bba2:	0002      	movs	r2, r0
    bba4:	9b01      	ldr	r3, [sp, #4]
    bba6:	4683      	mov	fp, r0
    bba8:	435a      	muls	r2, r3
    bbaa:	0028      	movs	r0, r5
    bbac:	0039      	movs	r1, r7
    bbae:	4691      	mov	r9, r2
    bbb0:	f7fe fb84 	bl	a2bc <__aeabi_uidivmod>
    bbb4:	0c35      	lsrs	r5, r6, #16
    bbb6:	0409      	lsls	r1, r1, #16
    bbb8:	430d      	orrs	r5, r1
    bbba:	45a9      	cmp	r9, r5
    bbbc:	d90d      	bls.n	bbda <__aeabi_ddiv+0x262>
    bbbe:	465b      	mov	r3, fp
    bbc0:	4445      	add	r5, r8
    bbc2:	3b01      	subs	r3, #1
    bbc4:	45a8      	cmp	r8, r5
    bbc6:	d900      	bls.n	bbca <__aeabi_ddiv+0x252>
    bbc8:	e13a      	b.n	be40 <__aeabi_ddiv+0x4c8>
    bbca:	45a9      	cmp	r9, r5
    bbcc:	d800      	bhi.n	bbd0 <__aeabi_ddiv+0x258>
    bbce:	e137      	b.n	be40 <__aeabi_ddiv+0x4c8>
    bbd0:	2302      	movs	r3, #2
    bbd2:	425b      	negs	r3, r3
    bbd4:	469c      	mov	ip, r3
    bbd6:	4445      	add	r5, r8
    bbd8:	44e3      	add	fp, ip
    bbda:	464b      	mov	r3, r9
    bbdc:	1aeb      	subs	r3, r5, r3
    bbde:	0039      	movs	r1, r7
    bbe0:	0018      	movs	r0, r3
    bbe2:	9304      	str	r3, [sp, #16]
    bbe4:	f7fe fae4 	bl	a1b0 <__udivsi3>
    bbe8:	9b01      	ldr	r3, [sp, #4]
    bbea:	0005      	movs	r5, r0
    bbec:	4343      	muls	r3, r0
    bbee:	0039      	movs	r1, r7
    bbf0:	9804      	ldr	r0, [sp, #16]
    bbf2:	4699      	mov	r9, r3
    bbf4:	f7fe fb62 	bl	a2bc <__aeabi_uidivmod>
    bbf8:	0433      	lsls	r3, r6, #16
    bbfa:	0409      	lsls	r1, r1, #16
    bbfc:	0c1b      	lsrs	r3, r3, #16
    bbfe:	430b      	orrs	r3, r1
    bc00:	4599      	cmp	r9, r3
    bc02:	d909      	bls.n	bc18 <__aeabi_ddiv+0x2a0>
    bc04:	4443      	add	r3, r8
    bc06:	1e6a      	subs	r2, r5, #1
    bc08:	4598      	cmp	r8, r3
    bc0a:	d900      	bls.n	bc0e <__aeabi_ddiv+0x296>
    bc0c:	e11a      	b.n	be44 <__aeabi_ddiv+0x4cc>
    bc0e:	4599      	cmp	r9, r3
    bc10:	d800      	bhi.n	bc14 <__aeabi_ddiv+0x29c>
    bc12:	e117      	b.n	be44 <__aeabi_ddiv+0x4cc>
    bc14:	3d02      	subs	r5, #2
    bc16:	4443      	add	r3, r8
    bc18:	464a      	mov	r2, r9
    bc1a:	1a9b      	subs	r3, r3, r2
    bc1c:	465a      	mov	r2, fp
    bc1e:	0412      	lsls	r2, r2, #16
    bc20:	432a      	orrs	r2, r5
    bc22:	9903      	ldr	r1, [sp, #12]
    bc24:	4693      	mov	fp, r2
    bc26:	0c10      	lsrs	r0, r2, #16
    bc28:	0c0a      	lsrs	r2, r1, #16
    bc2a:	4691      	mov	r9, r2
    bc2c:	0409      	lsls	r1, r1, #16
    bc2e:	465a      	mov	r2, fp
    bc30:	0c09      	lsrs	r1, r1, #16
    bc32:	464e      	mov	r6, r9
    bc34:	000d      	movs	r5, r1
    bc36:	0412      	lsls	r2, r2, #16
    bc38:	0c12      	lsrs	r2, r2, #16
    bc3a:	4345      	muls	r5, r0
    bc3c:	9105      	str	r1, [sp, #20]
    bc3e:	4351      	muls	r1, r2
    bc40:	4372      	muls	r2, r6
    bc42:	4370      	muls	r0, r6
    bc44:	1952      	adds	r2, r2, r5
    bc46:	0c0e      	lsrs	r6, r1, #16
    bc48:	18b2      	adds	r2, r6, r2
    bc4a:	4295      	cmp	r5, r2
    bc4c:	d903      	bls.n	bc56 <__aeabi_ddiv+0x2de>
    bc4e:	2580      	movs	r5, #128	; 0x80
    bc50:	026d      	lsls	r5, r5, #9
    bc52:	46ac      	mov	ip, r5
    bc54:	4460      	add	r0, ip
    bc56:	0c15      	lsrs	r5, r2, #16
    bc58:	0409      	lsls	r1, r1, #16
    bc5a:	0412      	lsls	r2, r2, #16
    bc5c:	0c09      	lsrs	r1, r1, #16
    bc5e:	1828      	adds	r0, r5, r0
    bc60:	1852      	adds	r2, r2, r1
    bc62:	4283      	cmp	r3, r0
    bc64:	d200      	bcs.n	bc68 <__aeabi_ddiv+0x2f0>
    bc66:	e0ce      	b.n	be06 <__aeabi_ddiv+0x48e>
    bc68:	d100      	bne.n	bc6c <__aeabi_ddiv+0x2f4>
    bc6a:	e0c8      	b.n	bdfe <__aeabi_ddiv+0x486>
    bc6c:	1a1d      	subs	r5, r3, r0
    bc6e:	4653      	mov	r3, sl
    bc70:	1a9e      	subs	r6, r3, r2
    bc72:	45b2      	cmp	sl, r6
    bc74:	4192      	sbcs	r2, r2
    bc76:	4252      	negs	r2, r2
    bc78:	1aab      	subs	r3, r5, r2
    bc7a:	469a      	mov	sl, r3
    bc7c:	4598      	cmp	r8, r3
    bc7e:	d100      	bne.n	bc82 <__aeabi_ddiv+0x30a>
    bc80:	e117      	b.n	beb2 <__aeabi_ddiv+0x53a>
    bc82:	0039      	movs	r1, r7
    bc84:	0018      	movs	r0, r3
    bc86:	f7fe fa93 	bl	a1b0 <__udivsi3>
    bc8a:	9b01      	ldr	r3, [sp, #4]
    bc8c:	0005      	movs	r5, r0
    bc8e:	4343      	muls	r3, r0
    bc90:	0039      	movs	r1, r7
    bc92:	4650      	mov	r0, sl
    bc94:	9304      	str	r3, [sp, #16]
    bc96:	f7fe fb11 	bl	a2bc <__aeabi_uidivmod>
    bc9a:	9804      	ldr	r0, [sp, #16]
    bc9c:	040b      	lsls	r3, r1, #16
    bc9e:	0c31      	lsrs	r1, r6, #16
    bca0:	4319      	orrs	r1, r3
    bca2:	4288      	cmp	r0, r1
    bca4:	d909      	bls.n	bcba <__aeabi_ddiv+0x342>
    bca6:	4441      	add	r1, r8
    bca8:	1e6b      	subs	r3, r5, #1
    bcaa:	4588      	cmp	r8, r1
    bcac:	d900      	bls.n	bcb0 <__aeabi_ddiv+0x338>
    bcae:	e107      	b.n	bec0 <__aeabi_ddiv+0x548>
    bcb0:	4288      	cmp	r0, r1
    bcb2:	d800      	bhi.n	bcb6 <__aeabi_ddiv+0x33e>
    bcb4:	e104      	b.n	bec0 <__aeabi_ddiv+0x548>
    bcb6:	3d02      	subs	r5, #2
    bcb8:	4441      	add	r1, r8
    bcba:	9b04      	ldr	r3, [sp, #16]
    bcbc:	1acb      	subs	r3, r1, r3
    bcbe:	0018      	movs	r0, r3
    bcc0:	0039      	movs	r1, r7
    bcc2:	9304      	str	r3, [sp, #16]
    bcc4:	f7fe fa74 	bl	a1b0 <__udivsi3>
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	4682      	mov	sl, r0
    bccc:	4343      	muls	r3, r0
    bcce:	0039      	movs	r1, r7
    bcd0:	9804      	ldr	r0, [sp, #16]
    bcd2:	9301      	str	r3, [sp, #4]
    bcd4:	f7fe faf2 	bl	a2bc <__aeabi_uidivmod>
    bcd8:	9801      	ldr	r0, [sp, #4]
    bcda:	040b      	lsls	r3, r1, #16
    bcdc:	0431      	lsls	r1, r6, #16
    bcde:	0c09      	lsrs	r1, r1, #16
    bce0:	4319      	orrs	r1, r3
    bce2:	4288      	cmp	r0, r1
    bce4:	d90d      	bls.n	bd02 <__aeabi_ddiv+0x38a>
    bce6:	4653      	mov	r3, sl
    bce8:	4441      	add	r1, r8
    bcea:	3b01      	subs	r3, #1
    bcec:	4588      	cmp	r8, r1
    bcee:	d900      	bls.n	bcf2 <__aeabi_ddiv+0x37a>
    bcf0:	e0e8      	b.n	bec4 <__aeabi_ddiv+0x54c>
    bcf2:	4288      	cmp	r0, r1
    bcf4:	d800      	bhi.n	bcf8 <__aeabi_ddiv+0x380>
    bcf6:	e0e5      	b.n	bec4 <__aeabi_ddiv+0x54c>
    bcf8:	2302      	movs	r3, #2
    bcfa:	425b      	negs	r3, r3
    bcfc:	469c      	mov	ip, r3
    bcfe:	4441      	add	r1, r8
    bd00:	44e2      	add	sl, ip
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	042d      	lsls	r5, r5, #16
    bd06:	1ace      	subs	r6, r1, r3
    bd08:	4651      	mov	r1, sl
    bd0a:	4329      	orrs	r1, r5
    bd0c:	9d05      	ldr	r5, [sp, #20]
    bd0e:	464f      	mov	r7, r9
    bd10:	002a      	movs	r2, r5
    bd12:	040b      	lsls	r3, r1, #16
    bd14:	0c08      	lsrs	r0, r1, #16
    bd16:	0c1b      	lsrs	r3, r3, #16
    bd18:	435a      	muls	r2, r3
    bd1a:	4345      	muls	r5, r0
    bd1c:	437b      	muls	r3, r7
    bd1e:	4378      	muls	r0, r7
    bd20:	195b      	adds	r3, r3, r5
    bd22:	0c17      	lsrs	r7, r2, #16
    bd24:	18fb      	adds	r3, r7, r3
    bd26:	429d      	cmp	r5, r3
    bd28:	d903      	bls.n	bd32 <__aeabi_ddiv+0x3ba>
    bd2a:	2580      	movs	r5, #128	; 0x80
    bd2c:	026d      	lsls	r5, r5, #9
    bd2e:	46ac      	mov	ip, r5
    bd30:	4460      	add	r0, ip
    bd32:	0c1d      	lsrs	r5, r3, #16
    bd34:	0412      	lsls	r2, r2, #16
    bd36:	041b      	lsls	r3, r3, #16
    bd38:	0c12      	lsrs	r2, r2, #16
    bd3a:	1828      	adds	r0, r5, r0
    bd3c:	189b      	adds	r3, r3, r2
    bd3e:	4286      	cmp	r6, r0
    bd40:	d200      	bcs.n	bd44 <__aeabi_ddiv+0x3cc>
    bd42:	e093      	b.n	be6c <__aeabi_ddiv+0x4f4>
    bd44:	d100      	bne.n	bd48 <__aeabi_ddiv+0x3d0>
    bd46:	e08e      	b.n	be66 <__aeabi_ddiv+0x4ee>
    bd48:	2301      	movs	r3, #1
    bd4a:	4319      	orrs	r1, r3
    bd4c:	4ba0      	ldr	r3, [pc, #640]	; (bfd0 <__aeabi_ddiv+0x658>)
    bd4e:	18e3      	adds	r3, r4, r3
    bd50:	2b00      	cmp	r3, #0
    bd52:	dc00      	bgt.n	bd56 <__aeabi_ddiv+0x3de>
    bd54:	e099      	b.n	be8a <__aeabi_ddiv+0x512>
    bd56:	074a      	lsls	r2, r1, #29
    bd58:	d000      	beq.n	bd5c <__aeabi_ddiv+0x3e4>
    bd5a:	e09e      	b.n	be9a <__aeabi_ddiv+0x522>
    bd5c:	465a      	mov	r2, fp
    bd5e:	01d2      	lsls	r2, r2, #7
    bd60:	d506      	bpl.n	bd70 <__aeabi_ddiv+0x3f8>
    bd62:	465a      	mov	r2, fp
    bd64:	4b9b      	ldr	r3, [pc, #620]	; (bfd4 <__aeabi_ddiv+0x65c>)
    bd66:	401a      	ands	r2, r3
    bd68:	2380      	movs	r3, #128	; 0x80
    bd6a:	4693      	mov	fp, r2
    bd6c:	00db      	lsls	r3, r3, #3
    bd6e:	18e3      	adds	r3, r4, r3
    bd70:	4a99      	ldr	r2, [pc, #612]	; (bfd8 <__aeabi_ddiv+0x660>)
    bd72:	4293      	cmp	r3, r2
    bd74:	dd68      	ble.n	be48 <__aeabi_ddiv+0x4d0>
    bd76:	2301      	movs	r3, #1
    bd78:	9a02      	ldr	r2, [sp, #8]
    bd7a:	4c98      	ldr	r4, [pc, #608]	; (bfdc <__aeabi_ddiv+0x664>)
    bd7c:	401a      	ands	r2, r3
    bd7e:	2300      	movs	r3, #0
    bd80:	4694      	mov	ip, r2
    bd82:	4698      	mov	r8, r3
    bd84:	2200      	movs	r2, #0
    bd86:	e6c5      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bd88:	2280      	movs	r2, #128	; 0x80
    bd8a:	464b      	mov	r3, r9
    bd8c:	0312      	lsls	r2, r2, #12
    bd8e:	4213      	tst	r3, r2
    bd90:	d00a      	beq.n	bda8 <__aeabi_ddiv+0x430>
    bd92:	465b      	mov	r3, fp
    bd94:	4213      	tst	r3, r2
    bd96:	d106      	bne.n	bda6 <__aeabi_ddiv+0x42e>
    bd98:	431a      	orrs	r2, r3
    bd9a:	0312      	lsls	r2, r2, #12
    bd9c:	0b12      	lsrs	r2, r2, #12
    bd9e:	46ac      	mov	ip, r5
    bda0:	4688      	mov	r8, r1
    bda2:	4c8e      	ldr	r4, [pc, #568]	; (bfdc <__aeabi_ddiv+0x664>)
    bda4:	e6b6      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bda6:	464b      	mov	r3, r9
    bda8:	431a      	orrs	r2, r3
    bdaa:	0312      	lsls	r2, r2, #12
    bdac:	0b12      	lsrs	r2, r2, #12
    bdae:	46bc      	mov	ip, r7
    bdb0:	4c8a      	ldr	r4, [pc, #552]	; (bfdc <__aeabi_ddiv+0x664>)
    bdb2:	e6af      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bdb4:	0003      	movs	r3, r0
    bdb6:	465a      	mov	r2, fp
    bdb8:	3b28      	subs	r3, #40	; 0x28
    bdba:	409a      	lsls	r2, r3
    bdbc:	2300      	movs	r3, #0
    bdbe:	4691      	mov	r9, r2
    bdc0:	4698      	mov	r8, r3
    bdc2:	e657      	b.n	ba74 <__aeabi_ddiv+0xfc>
    bdc4:	4658      	mov	r0, fp
    bdc6:	f001 f92b 	bl	d020 <__clzsi2>
    bdca:	3020      	adds	r0, #32
    bdcc:	e640      	b.n	ba50 <__aeabi_ddiv+0xd8>
    bdce:	0003      	movs	r3, r0
    bdd0:	4652      	mov	r2, sl
    bdd2:	3b28      	subs	r3, #40	; 0x28
    bdd4:	409a      	lsls	r2, r3
    bdd6:	2100      	movs	r1, #0
    bdd8:	4693      	mov	fp, r2
    bdda:	e677      	b.n	bacc <__aeabi_ddiv+0x154>
    bddc:	f001 f920 	bl	d020 <__clzsi2>
    bde0:	3020      	adds	r0, #32
    bde2:	e65f      	b.n	baa4 <__aeabi_ddiv+0x12c>
    bde4:	4588      	cmp	r8, r1
    bde6:	d200      	bcs.n	bdea <__aeabi_ddiv+0x472>
    bde8:	e6c7      	b.n	bb7a <__aeabi_ddiv+0x202>
    bdea:	464b      	mov	r3, r9
    bdec:	07de      	lsls	r6, r3, #31
    bdee:	085d      	lsrs	r5, r3, #1
    bdf0:	4643      	mov	r3, r8
    bdf2:	085b      	lsrs	r3, r3, #1
    bdf4:	431e      	orrs	r6, r3
    bdf6:	4643      	mov	r3, r8
    bdf8:	07db      	lsls	r3, r3, #31
    bdfa:	469a      	mov	sl, r3
    bdfc:	e6c2      	b.n	bb84 <__aeabi_ddiv+0x20c>
    bdfe:	2500      	movs	r5, #0
    be00:	4592      	cmp	sl, r2
    be02:	d300      	bcc.n	be06 <__aeabi_ddiv+0x48e>
    be04:	e733      	b.n	bc6e <__aeabi_ddiv+0x2f6>
    be06:	9e03      	ldr	r6, [sp, #12]
    be08:	4659      	mov	r1, fp
    be0a:	46b4      	mov	ip, r6
    be0c:	44e2      	add	sl, ip
    be0e:	45b2      	cmp	sl, r6
    be10:	41ad      	sbcs	r5, r5
    be12:	426d      	negs	r5, r5
    be14:	4445      	add	r5, r8
    be16:	18eb      	adds	r3, r5, r3
    be18:	3901      	subs	r1, #1
    be1a:	4598      	cmp	r8, r3
    be1c:	d207      	bcs.n	be2e <__aeabi_ddiv+0x4b6>
    be1e:	4298      	cmp	r0, r3
    be20:	d900      	bls.n	be24 <__aeabi_ddiv+0x4ac>
    be22:	e07f      	b.n	bf24 <__aeabi_ddiv+0x5ac>
    be24:	d100      	bne.n	be28 <__aeabi_ddiv+0x4b0>
    be26:	e0bc      	b.n	bfa2 <__aeabi_ddiv+0x62a>
    be28:	1a1d      	subs	r5, r3, r0
    be2a:	468b      	mov	fp, r1
    be2c:	e71f      	b.n	bc6e <__aeabi_ddiv+0x2f6>
    be2e:	4598      	cmp	r8, r3
    be30:	d1fa      	bne.n	be28 <__aeabi_ddiv+0x4b0>
    be32:	9d03      	ldr	r5, [sp, #12]
    be34:	4555      	cmp	r5, sl
    be36:	d9f2      	bls.n	be1e <__aeabi_ddiv+0x4a6>
    be38:	4643      	mov	r3, r8
    be3a:	468b      	mov	fp, r1
    be3c:	1a1d      	subs	r5, r3, r0
    be3e:	e716      	b.n	bc6e <__aeabi_ddiv+0x2f6>
    be40:	469b      	mov	fp, r3
    be42:	e6ca      	b.n	bbda <__aeabi_ddiv+0x262>
    be44:	0015      	movs	r5, r2
    be46:	e6e7      	b.n	bc18 <__aeabi_ddiv+0x2a0>
    be48:	465a      	mov	r2, fp
    be4a:	08c9      	lsrs	r1, r1, #3
    be4c:	0752      	lsls	r2, r2, #29
    be4e:	430a      	orrs	r2, r1
    be50:	055b      	lsls	r3, r3, #21
    be52:	4690      	mov	r8, r2
    be54:	0d5c      	lsrs	r4, r3, #21
    be56:	465a      	mov	r2, fp
    be58:	2301      	movs	r3, #1
    be5a:	9902      	ldr	r1, [sp, #8]
    be5c:	0252      	lsls	r2, r2, #9
    be5e:	4019      	ands	r1, r3
    be60:	0b12      	lsrs	r2, r2, #12
    be62:	468c      	mov	ip, r1
    be64:	e656      	b.n	bb14 <__aeabi_ddiv+0x19c>
    be66:	2b00      	cmp	r3, #0
    be68:	d100      	bne.n	be6c <__aeabi_ddiv+0x4f4>
    be6a:	e76f      	b.n	bd4c <__aeabi_ddiv+0x3d4>
    be6c:	4446      	add	r6, r8
    be6e:	1e4a      	subs	r2, r1, #1
    be70:	45b0      	cmp	r8, r6
    be72:	d929      	bls.n	bec8 <__aeabi_ddiv+0x550>
    be74:	0011      	movs	r1, r2
    be76:	4286      	cmp	r6, r0
    be78:	d000      	beq.n	be7c <__aeabi_ddiv+0x504>
    be7a:	e765      	b.n	bd48 <__aeabi_ddiv+0x3d0>
    be7c:	9a03      	ldr	r2, [sp, #12]
    be7e:	4293      	cmp	r3, r2
    be80:	d000      	beq.n	be84 <__aeabi_ddiv+0x50c>
    be82:	e761      	b.n	bd48 <__aeabi_ddiv+0x3d0>
    be84:	e762      	b.n	bd4c <__aeabi_ddiv+0x3d4>
    be86:	2101      	movs	r1, #1
    be88:	4249      	negs	r1, r1
    be8a:	2001      	movs	r0, #1
    be8c:	1ac2      	subs	r2, r0, r3
    be8e:	2a38      	cmp	r2, #56	; 0x38
    be90:	dd21      	ble.n	bed6 <__aeabi_ddiv+0x55e>
    be92:	9b02      	ldr	r3, [sp, #8]
    be94:	4003      	ands	r3, r0
    be96:	469c      	mov	ip, r3
    be98:	e638      	b.n	bb0c <__aeabi_ddiv+0x194>
    be9a:	220f      	movs	r2, #15
    be9c:	400a      	ands	r2, r1
    be9e:	2a04      	cmp	r2, #4
    bea0:	d100      	bne.n	bea4 <__aeabi_ddiv+0x52c>
    bea2:	e75b      	b.n	bd5c <__aeabi_ddiv+0x3e4>
    bea4:	000a      	movs	r2, r1
    bea6:	1d11      	adds	r1, r2, #4
    bea8:	4291      	cmp	r1, r2
    beaa:	4192      	sbcs	r2, r2
    beac:	4252      	negs	r2, r2
    beae:	4493      	add	fp, r2
    beb0:	e754      	b.n	bd5c <__aeabi_ddiv+0x3e4>
    beb2:	4b47      	ldr	r3, [pc, #284]	; (bfd0 <__aeabi_ddiv+0x658>)
    beb4:	18e3      	adds	r3, r4, r3
    beb6:	2b00      	cmp	r3, #0
    beb8:	dde5      	ble.n	be86 <__aeabi_ddiv+0x50e>
    beba:	2201      	movs	r2, #1
    bebc:	4252      	negs	r2, r2
    bebe:	e7f2      	b.n	bea6 <__aeabi_ddiv+0x52e>
    bec0:	001d      	movs	r5, r3
    bec2:	e6fa      	b.n	bcba <__aeabi_ddiv+0x342>
    bec4:	469a      	mov	sl, r3
    bec6:	e71c      	b.n	bd02 <__aeabi_ddiv+0x38a>
    bec8:	42b0      	cmp	r0, r6
    beca:	d839      	bhi.n	bf40 <__aeabi_ddiv+0x5c8>
    becc:	d06e      	beq.n	bfac <__aeabi_ddiv+0x634>
    bece:	0011      	movs	r1, r2
    bed0:	e73a      	b.n	bd48 <__aeabi_ddiv+0x3d0>
    bed2:	9302      	str	r3, [sp, #8]
    bed4:	e73a      	b.n	bd4c <__aeabi_ddiv+0x3d4>
    bed6:	2a1f      	cmp	r2, #31
    bed8:	dc3c      	bgt.n	bf54 <__aeabi_ddiv+0x5dc>
    beda:	2320      	movs	r3, #32
    bedc:	1a9b      	subs	r3, r3, r2
    bede:	000c      	movs	r4, r1
    bee0:	4658      	mov	r0, fp
    bee2:	4099      	lsls	r1, r3
    bee4:	4098      	lsls	r0, r3
    bee6:	1e4b      	subs	r3, r1, #1
    bee8:	4199      	sbcs	r1, r3
    beea:	465b      	mov	r3, fp
    beec:	40d4      	lsrs	r4, r2
    beee:	40d3      	lsrs	r3, r2
    bef0:	4320      	orrs	r0, r4
    bef2:	4308      	orrs	r0, r1
    bef4:	001a      	movs	r2, r3
    bef6:	0743      	lsls	r3, r0, #29
    bef8:	d009      	beq.n	bf0e <__aeabi_ddiv+0x596>
    befa:	230f      	movs	r3, #15
    befc:	4003      	ands	r3, r0
    befe:	2b04      	cmp	r3, #4
    bf00:	d005      	beq.n	bf0e <__aeabi_ddiv+0x596>
    bf02:	0001      	movs	r1, r0
    bf04:	1d08      	adds	r0, r1, #4
    bf06:	4288      	cmp	r0, r1
    bf08:	419b      	sbcs	r3, r3
    bf0a:	425b      	negs	r3, r3
    bf0c:	18d2      	adds	r2, r2, r3
    bf0e:	0213      	lsls	r3, r2, #8
    bf10:	d53a      	bpl.n	bf88 <__aeabi_ddiv+0x610>
    bf12:	2301      	movs	r3, #1
    bf14:	9a02      	ldr	r2, [sp, #8]
    bf16:	2401      	movs	r4, #1
    bf18:	401a      	ands	r2, r3
    bf1a:	2300      	movs	r3, #0
    bf1c:	4694      	mov	ip, r2
    bf1e:	4698      	mov	r8, r3
    bf20:	2200      	movs	r2, #0
    bf22:	e5f7      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bf24:	2102      	movs	r1, #2
    bf26:	4249      	negs	r1, r1
    bf28:	468c      	mov	ip, r1
    bf2a:	9d03      	ldr	r5, [sp, #12]
    bf2c:	44e3      	add	fp, ip
    bf2e:	46ac      	mov	ip, r5
    bf30:	44e2      	add	sl, ip
    bf32:	45aa      	cmp	sl, r5
    bf34:	41ad      	sbcs	r5, r5
    bf36:	426d      	negs	r5, r5
    bf38:	4445      	add	r5, r8
    bf3a:	18ed      	adds	r5, r5, r3
    bf3c:	1a2d      	subs	r5, r5, r0
    bf3e:	e696      	b.n	bc6e <__aeabi_ddiv+0x2f6>
    bf40:	1e8a      	subs	r2, r1, #2
    bf42:	9903      	ldr	r1, [sp, #12]
    bf44:	004d      	lsls	r5, r1, #1
    bf46:	428d      	cmp	r5, r1
    bf48:	4189      	sbcs	r1, r1
    bf4a:	4249      	negs	r1, r1
    bf4c:	4441      	add	r1, r8
    bf4e:	1876      	adds	r6, r6, r1
    bf50:	9503      	str	r5, [sp, #12]
    bf52:	e78f      	b.n	be74 <__aeabi_ddiv+0x4fc>
    bf54:	201f      	movs	r0, #31
    bf56:	4240      	negs	r0, r0
    bf58:	1ac3      	subs	r3, r0, r3
    bf5a:	4658      	mov	r0, fp
    bf5c:	40d8      	lsrs	r0, r3
    bf5e:	0003      	movs	r3, r0
    bf60:	2a20      	cmp	r2, #32
    bf62:	d028      	beq.n	bfb6 <__aeabi_ddiv+0x63e>
    bf64:	2040      	movs	r0, #64	; 0x40
    bf66:	465d      	mov	r5, fp
    bf68:	1a82      	subs	r2, r0, r2
    bf6a:	4095      	lsls	r5, r2
    bf6c:	4329      	orrs	r1, r5
    bf6e:	1e4a      	subs	r2, r1, #1
    bf70:	4191      	sbcs	r1, r2
    bf72:	4319      	orrs	r1, r3
    bf74:	2307      	movs	r3, #7
    bf76:	2200      	movs	r2, #0
    bf78:	400b      	ands	r3, r1
    bf7a:	d009      	beq.n	bf90 <__aeabi_ddiv+0x618>
    bf7c:	230f      	movs	r3, #15
    bf7e:	2200      	movs	r2, #0
    bf80:	400b      	ands	r3, r1
    bf82:	0008      	movs	r0, r1
    bf84:	2b04      	cmp	r3, #4
    bf86:	d1bd      	bne.n	bf04 <__aeabi_ddiv+0x58c>
    bf88:	0001      	movs	r1, r0
    bf8a:	0753      	lsls	r3, r2, #29
    bf8c:	0252      	lsls	r2, r2, #9
    bf8e:	0b12      	lsrs	r2, r2, #12
    bf90:	08c9      	lsrs	r1, r1, #3
    bf92:	4319      	orrs	r1, r3
    bf94:	2301      	movs	r3, #1
    bf96:	4688      	mov	r8, r1
    bf98:	9902      	ldr	r1, [sp, #8]
    bf9a:	2400      	movs	r4, #0
    bf9c:	4019      	ands	r1, r3
    bf9e:	468c      	mov	ip, r1
    bfa0:	e5b8      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bfa2:	4552      	cmp	r2, sl
    bfa4:	d8be      	bhi.n	bf24 <__aeabi_ddiv+0x5ac>
    bfa6:	468b      	mov	fp, r1
    bfa8:	2500      	movs	r5, #0
    bfaa:	e660      	b.n	bc6e <__aeabi_ddiv+0x2f6>
    bfac:	9d03      	ldr	r5, [sp, #12]
    bfae:	429d      	cmp	r5, r3
    bfb0:	d3c6      	bcc.n	bf40 <__aeabi_ddiv+0x5c8>
    bfb2:	0011      	movs	r1, r2
    bfb4:	e762      	b.n	be7c <__aeabi_ddiv+0x504>
    bfb6:	2500      	movs	r5, #0
    bfb8:	e7d8      	b.n	bf6c <__aeabi_ddiv+0x5f4>
    bfba:	2280      	movs	r2, #128	; 0x80
    bfbc:	465b      	mov	r3, fp
    bfbe:	0312      	lsls	r2, r2, #12
    bfc0:	431a      	orrs	r2, r3
    bfc2:	9b01      	ldr	r3, [sp, #4]
    bfc4:	0312      	lsls	r2, r2, #12
    bfc6:	0b12      	lsrs	r2, r2, #12
    bfc8:	469c      	mov	ip, r3
    bfca:	4688      	mov	r8, r1
    bfcc:	4c03      	ldr	r4, [pc, #12]	; (bfdc <__aeabi_ddiv+0x664>)
    bfce:	e5a1      	b.n	bb14 <__aeabi_ddiv+0x19c>
    bfd0:	000003ff 	.word	0x000003ff
    bfd4:	feffffff 	.word	0xfeffffff
    bfd8:	000007fe 	.word	0x000007fe
    bfdc:	000007ff 	.word	0x000007ff

0000bfe0 <__eqdf2>:
    bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfe2:	464f      	mov	r7, r9
    bfe4:	4646      	mov	r6, r8
    bfe6:	46d6      	mov	lr, sl
    bfe8:	005c      	lsls	r4, r3, #1
    bfea:	b5c0      	push	{r6, r7, lr}
    bfec:	031f      	lsls	r7, r3, #12
    bfee:	0fdb      	lsrs	r3, r3, #31
    bff0:	469a      	mov	sl, r3
    bff2:	4b17      	ldr	r3, [pc, #92]	; (c050 <__eqdf2+0x70>)
    bff4:	030e      	lsls	r6, r1, #12
    bff6:	004d      	lsls	r5, r1, #1
    bff8:	4684      	mov	ip, r0
    bffa:	4680      	mov	r8, r0
    bffc:	0b36      	lsrs	r6, r6, #12
    bffe:	0d6d      	lsrs	r5, r5, #21
    c000:	0fc9      	lsrs	r1, r1, #31
    c002:	4691      	mov	r9, r2
    c004:	0b3f      	lsrs	r7, r7, #12
    c006:	0d64      	lsrs	r4, r4, #21
    c008:	2001      	movs	r0, #1
    c00a:	429d      	cmp	r5, r3
    c00c:	d008      	beq.n	c020 <__eqdf2+0x40>
    c00e:	429c      	cmp	r4, r3
    c010:	d001      	beq.n	c016 <__eqdf2+0x36>
    c012:	42a5      	cmp	r5, r4
    c014:	d00b      	beq.n	c02e <__eqdf2+0x4e>
    c016:	bc1c      	pop	{r2, r3, r4}
    c018:	4690      	mov	r8, r2
    c01a:	4699      	mov	r9, r3
    c01c:	46a2      	mov	sl, r4
    c01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c020:	4663      	mov	r3, ip
    c022:	4333      	orrs	r3, r6
    c024:	d1f7      	bne.n	c016 <__eqdf2+0x36>
    c026:	42ac      	cmp	r4, r5
    c028:	d1f5      	bne.n	c016 <__eqdf2+0x36>
    c02a:	433a      	orrs	r2, r7
    c02c:	d1f3      	bne.n	c016 <__eqdf2+0x36>
    c02e:	2001      	movs	r0, #1
    c030:	42be      	cmp	r6, r7
    c032:	d1f0      	bne.n	c016 <__eqdf2+0x36>
    c034:	45c8      	cmp	r8, r9
    c036:	d1ee      	bne.n	c016 <__eqdf2+0x36>
    c038:	4551      	cmp	r1, sl
    c03a:	d007      	beq.n	c04c <__eqdf2+0x6c>
    c03c:	2d00      	cmp	r5, #0
    c03e:	d1ea      	bne.n	c016 <__eqdf2+0x36>
    c040:	4663      	mov	r3, ip
    c042:	431e      	orrs	r6, r3
    c044:	0030      	movs	r0, r6
    c046:	1e46      	subs	r6, r0, #1
    c048:	41b0      	sbcs	r0, r6
    c04a:	e7e4      	b.n	c016 <__eqdf2+0x36>
    c04c:	2000      	movs	r0, #0
    c04e:	e7e2      	b.n	c016 <__eqdf2+0x36>
    c050:	000007ff 	.word	0x000007ff

0000c054 <__gedf2>:
    c054:	b5f0      	push	{r4, r5, r6, r7, lr}
    c056:	4645      	mov	r5, r8
    c058:	46de      	mov	lr, fp
    c05a:	4657      	mov	r7, sl
    c05c:	464e      	mov	r6, r9
    c05e:	b5e0      	push	{r5, r6, r7, lr}
    c060:	031f      	lsls	r7, r3, #12
    c062:	0b3d      	lsrs	r5, r7, #12
    c064:	4f2c      	ldr	r7, [pc, #176]	; (c118 <__gedf2+0xc4>)
    c066:	030e      	lsls	r6, r1, #12
    c068:	004c      	lsls	r4, r1, #1
    c06a:	46ab      	mov	fp, r5
    c06c:	005d      	lsls	r5, r3, #1
    c06e:	4684      	mov	ip, r0
    c070:	0b36      	lsrs	r6, r6, #12
    c072:	0d64      	lsrs	r4, r4, #21
    c074:	0fc9      	lsrs	r1, r1, #31
    c076:	4690      	mov	r8, r2
    c078:	0d6d      	lsrs	r5, r5, #21
    c07a:	0fdb      	lsrs	r3, r3, #31
    c07c:	42bc      	cmp	r4, r7
    c07e:	d02a      	beq.n	c0d6 <__gedf2+0x82>
    c080:	4f25      	ldr	r7, [pc, #148]	; (c118 <__gedf2+0xc4>)
    c082:	42bd      	cmp	r5, r7
    c084:	d02d      	beq.n	c0e2 <__gedf2+0x8e>
    c086:	2c00      	cmp	r4, #0
    c088:	d10f      	bne.n	c0aa <__gedf2+0x56>
    c08a:	4330      	orrs	r0, r6
    c08c:	0007      	movs	r7, r0
    c08e:	4681      	mov	r9, r0
    c090:	4278      	negs	r0, r7
    c092:	4178      	adcs	r0, r7
    c094:	b2c0      	uxtb	r0, r0
    c096:	2d00      	cmp	r5, #0
    c098:	d117      	bne.n	c0ca <__gedf2+0x76>
    c09a:	465f      	mov	r7, fp
    c09c:	433a      	orrs	r2, r7
    c09e:	d114      	bne.n	c0ca <__gedf2+0x76>
    c0a0:	464b      	mov	r3, r9
    c0a2:	2000      	movs	r0, #0
    c0a4:	2b00      	cmp	r3, #0
    c0a6:	d00a      	beq.n	c0be <__gedf2+0x6a>
    c0a8:	e006      	b.n	c0b8 <__gedf2+0x64>
    c0aa:	2d00      	cmp	r5, #0
    c0ac:	d102      	bne.n	c0b4 <__gedf2+0x60>
    c0ae:	4658      	mov	r0, fp
    c0b0:	4302      	orrs	r2, r0
    c0b2:	d001      	beq.n	c0b8 <__gedf2+0x64>
    c0b4:	4299      	cmp	r1, r3
    c0b6:	d018      	beq.n	c0ea <__gedf2+0x96>
    c0b8:	4248      	negs	r0, r1
    c0ba:	2101      	movs	r1, #1
    c0bc:	4308      	orrs	r0, r1
    c0be:	bc3c      	pop	{r2, r3, r4, r5}
    c0c0:	4690      	mov	r8, r2
    c0c2:	4699      	mov	r9, r3
    c0c4:	46a2      	mov	sl, r4
    c0c6:	46ab      	mov	fp, r5
    c0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0ca:	2800      	cmp	r0, #0
    c0cc:	d0f2      	beq.n	c0b4 <__gedf2+0x60>
    c0ce:	2001      	movs	r0, #1
    c0d0:	3b01      	subs	r3, #1
    c0d2:	4318      	orrs	r0, r3
    c0d4:	e7f3      	b.n	c0be <__gedf2+0x6a>
    c0d6:	0037      	movs	r7, r6
    c0d8:	4307      	orrs	r7, r0
    c0da:	d0d1      	beq.n	c080 <__gedf2+0x2c>
    c0dc:	2002      	movs	r0, #2
    c0de:	4240      	negs	r0, r0
    c0e0:	e7ed      	b.n	c0be <__gedf2+0x6a>
    c0e2:	465f      	mov	r7, fp
    c0e4:	4317      	orrs	r7, r2
    c0e6:	d0ce      	beq.n	c086 <__gedf2+0x32>
    c0e8:	e7f8      	b.n	c0dc <__gedf2+0x88>
    c0ea:	42ac      	cmp	r4, r5
    c0ec:	dce4      	bgt.n	c0b8 <__gedf2+0x64>
    c0ee:	da03      	bge.n	c0f8 <__gedf2+0xa4>
    c0f0:	1e48      	subs	r0, r1, #1
    c0f2:	2101      	movs	r1, #1
    c0f4:	4308      	orrs	r0, r1
    c0f6:	e7e2      	b.n	c0be <__gedf2+0x6a>
    c0f8:	455e      	cmp	r6, fp
    c0fa:	d8dd      	bhi.n	c0b8 <__gedf2+0x64>
    c0fc:	d006      	beq.n	c10c <__gedf2+0xb8>
    c0fe:	2000      	movs	r0, #0
    c100:	455e      	cmp	r6, fp
    c102:	d2dc      	bcs.n	c0be <__gedf2+0x6a>
    c104:	2301      	movs	r3, #1
    c106:	1e48      	subs	r0, r1, #1
    c108:	4318      	orrs	r0, r3
    c10a:	e7d8      	b.n	c0be <__gedf2+0x6a>
    c10c:	45c4      	cmp	ip, r8
    c10e:	d8d3      	bhi.n	c0b8 <__gedf2+0x64>
    c110:	2000      	movs	r0, #0
    c112:	45c4      	cmp	ip, r8
    c114:	d3f6      	bcc.n	c104 <__gedf2+0xb0>
    c116:	e7d2      	b.n	c0be <__gedf2+0x6a>
    c118:	000007ff 	.word	0x000007ff

0000c11c <__ledf2>:
    c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c11e:	464e      	mov	r6, r9
    c120:	4645      	mov	r5, r8
    c122:	46de      	mov	lr, fp
    c124:	4657      	mov	r7, sl
    c126:	005c      	lsls	r4, r3, #1
    c128:	b5e0      	push	{r5, r6, r7, lr}
    c12a:	031f      	lsls	r7, r3, #12
    c12c:	0fdb      	lsrs	r3, r3, #31
    c12e:	4699      	mov	r9, r3
    c130:	4b2a      	ldr	r3, [pc, #168]	; (c1dc <__ledf2+0xc0>)
    c132:	030e      	lsls	r6, r1, #12
    c134:	004d      	lsls	r5, r1, #1
    c136:	0fc9      	lsrs	r1, r1, #31
    c138:	4684      	mov	ip, r0
    c13a:	0b36      	lsrs	r6, r6, #12
    c13c:	0d6d      	lsrs	r5, r5, #21
    c13e:	468b      	mov	fp, r1
    c140:	4690      	mov	r8, r2
    c142:	0b3f      	lsrs	r7, r7, #12
    c144:	0d64      	lsrs	r4, r4, #21
    c146:	429d      	cmp	r5, r3
    c148:	d020      	beq.n	c18c <__ledf2+0x70>
    c14a:	4b24      	ldr	r3, [pc, #144]	; (c1dc <__ledf2+0xc0>)
    c14c:	429c      	cmp	r4, r3
    c14e:	d022      	beq.n	c196 <__ledf2+0x7a>
    c150:	2d00      	cmp	r5, #0
    c152:	d112      	bne.n	c17a <__ledf2+0x5e>
    c154:	4330      	orrs	r0, r6
    c156:	4243      	negs	r3, r0
    c158:	4143      	adcs	r3, r0
    c15a:	b2db      	uxtb	r3, r3
    c15c:	2c00      	cmp	r4, #0
    c15e:	d01f      	beq.n	c1a0 <__ledf2+0x84>
    c160:	2b00      	cmp	r3, #0
    c162:	d00c      	beq.n	c17e <__ledf2+0x62>
    c164:	464b      	mov	r3, r9
    c166:	2001      	movs	r0, #1
    c168:	3b01      	subs	r3, #1
    c16a:	4303      	orrs	r3, r0
    c16c:	0018      	movs	r0, r3
    c16e:	bc3c      	pop	{r2, r3, r4, r5}
    c170:	4690      	mov	r8, r2
    c172:	4699      	mov	r9, r3
    c174:	46a2      	mov	sl, r4
    c176:	46ab      	mov	fp, r5
    c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c17a:	2c00      	cmp	r4, #0
    c17c:	d016      	beq.n	c1ac <__ledf2+0x90>
    c17e:	45cb      	cmp	fp, r9
    c180:	d017      	beq.n	c1b2 <__ledf2+0x96>
    c182:	465b      	mov	r3, fp
    c184:	4259      	negs	r1, r3
    c186:	2301      	movs	r3, #1
    c188:	430b      	orrs	r3, r1
    c18a:	e7ef      	b.n	c16c <__ledf2+0x50>
    c18c:	0031      	movs	r1, r6
    c18e:	2302      	movs	r3, #2
    c190:	4301      	orrs	r1, r0
    c192:	d1eb      	bne.n	c16c <__ledf2+0x50>
    c194:	e7d9      	b.n	c14a <__ledf2+0x2e>
    c196:	0039      	movs	r1, r7
    c198:	2302      	movs	r3, #2
    c19a:	4311      	orrs	r1, r2
    c19c:	d1e6      	bne.n	c16c <__ledf2+0x50>
    c19e:	e7d7      	b.n	c150 <__ledf2+0x34>
    c1a0:	433a      	orrs	r2, r7
    c1a2:	d1dd      	bne.n	c160 <__ledf2+0x44>
    c1a4:	2300      	movs	r3, #0
    c1a6:	2800      	cmp	r0, #0
    c1a8:	d0e0      	beq.n	c16c <__ledf2+0x50>
    c1aa:	e7ea      	b.n	c182 <__ledf2+0x66>
    c1ac:	433a      	orrs	r2, r7
    c1ae:	d1e6      	bne.n	c17e <__ledf2+0x62>
    c1b0:	e7e7      	b.n	c182 <__ledf2+0x66>
    c1b2:	42a5      	cmp	r5, r4
    c1b4:	dce5      	bgt.n	c182 <__ledf2+0x66>
    c1b6:	db05      	blt.n	c1c4 <__ledf2+0xa8>
    c1b8:	42be      	cmp	r6, r7
    c1ba:	d8e2      	bhi.n	c182 <__ledf2+0x66>
    c1bc:	d007      	beq.n	c1ce <__ledf2+0xb2>
    c1be:	2300      	movs	r3, #0
    c1c0:	42be      	cmp	r6, r7
    c1c2:	d2d3      	bcs.n	c16c <__ledf2+0x50>
    c1c4:	4659      	mov	r1, fp
    c1c6:	2301      	movs	r3, #1
    c1c8:	3901      	subs	r1, #1
    c1ca:	430b      	orrs	r3, r1
    c1cc:	e7ce      	b.n	c16c <__ledf2+0x50>
    c1ce:	45c4      	cmp	ip, r8
    c1d0:	d8d7      	bhi.n	c182 <__ledf2+0x66>
    c1d2:	2300      	movs	r3, #0
    c1d4:	45c4      	cmp	ip, r8
    c1d6:	d3f5      	bcc.n	c1c4 <__ledf2+0xa8>
    c1d8:	e7c8      	b.n	c16c <__ledf2+0x50>
    c1da:	46c0      	nop			; (mov r8, r8)
    c1dc:	000007ff 	.word	0x000007ff

0000c1e0 <__aeabi_dmul>:
    c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1e2:	4657      	mov	r7, sl
    c1e4:	4645      	mov	r5, r8
    c1e6:	46de      	mov	lr, fp
    c1e8:	464e      	mov	r6, r9
    c1ea:	b5e0      	push	{r5, r6, r7, lr}
    c1ec:	030c      	lsls	r4, r1, #12
    c1ee:	4698      	mov	r8, r3
    c1f0:	004e      	lsls	r6, r1, #1
    c1f2:	0b23      	lsrs	r3, r4, #12
    c1f4:	b087      	sub	sp, #28
    c1f6:	0007      	movs	r7, r0
    c1f8:	4692      	mov	sl, r2
    c1fa:	469b      	mov	fp, r3
    c1fc:	0d76      	lsrs	r6, r6, #21
    c1fe:	0fcd      	lsrs	r5, r1, #31
    c200:	2e00      	cmp	r6, #0
    c202:	d06b      	beq.n	c2dc <__aeabi_dmul+0xfc>
    c204:	4b6d      	ldr	r3, [pc, #436]	; (c3bc <__aeabi_dmul+0x1dc>)
    c206:	429e      	cmp	r6, r3
    c208:	d035      	beq.n	c276 <__aeabi_dmul+0x96>
    c20a:	2480      	movs	r4, #128	; 0x80
    c20c:	465b      	mov	r3, fp
    c20e:	0f42      	lsrs	r2, r0, #29
    c210:	0424      	lsls	r4, r4, #16
    c212:	00db      	lsls	r3, r3, #3
    c214:	4314      	orrs	r4, r2
    c216:	431c      	orrs	r4, r3
    c218:	00c3      	lsls	r3, r0, #3
    c21a:	4699      	mov	r9, r3
    c21c:	4b68      	ldr	r3, [pc, #416]	; (c3c0 <__aeabi_dmul+0x1e0>)
    c21e:	46a3      	mov	fp, r4
    c220:	469c      	mov	ip, r3
    c222:	2300      	movs	r3, #0
    c224:	2700      	movs	r7, #0
    c226:	4466      	add	r6, ip
    c228:	9302      	str	r3, [sp, #8]
    c22a:	4643      	mov	r3, r8
    c22c:	031c      	lsls	r4, r3, #12
    c22e:	005a      	lsls	r2, r3, #1
    c230:	0fdb      	lsrs	r3, r3, #31
    c232:	4650      	mov	r0, sl
    c234:	0b24      	lsrs	r4, r4, #12
    c236:	0d52      	lsrs	r2, r2, #21
    c238:	4698      	mov	r8, r3
    c23a:	d100      	bne.n	c23e <__aeabi_dmul+0x5e>
    c23c:	e076      	b.n	c32c <__aeabi_dmul+0x14c>
    c23e:	4b5f      	ldr	r3, [pc, #380]	; (c3bc <__aeabi_dmul+0x1dc>)
    c240:	429a      	cmp	r2, r3
    c242:	d06d      	beq.n	c320 <__aeabi_dmul+0x140>
    c244:	2380      	movs	r3, #128	; 0x80
    c246:	0f41      	lsrs	r1, r0, #29
    c248:	041b      	lsls	r3, r3, #16
    c24a:	430b      	orrs	r3, r1
    c24c:	495c      	ldr	r1, [pc, #368]	; (c3c0 <__aeabi_dmul+0x1e0>)
    c24e:	00e4      	lsls	r4, r4, #3
    c250:	468c      	mov	ip, r1
    c252:	431c      	orrs	r4, r3
    c254:	00c3      	lsls	r3, r0, #3
    c256:	2000      	movs	r0, #0
    c258:	4462      	add	r2, ip
    c25a:	4641      	mov	r1, r8
    c25c:	18b6      	adds	r6, r6, r2
    c25e:	4069      	eors	r1, r5
    c260:	1c72      	adds	r2, r6, #1
    c262:	9101      	str	r1, [sp, #4]
    c264:	4694      	mov	ip, r2
    c266:	4307      	orrs	r7, r0
    c268:	2f0f      	cmp	r7, #15
    c26a:	d900      	bls.n	c26e <__aeabi_dmul+0x8e>
    c26c:	e0b0      	b.n	c3d0 <__aeabi_dmul+0x1f0>
    c26e:	4a55      	ldr	r2, [pc, #340]	; (c3c4 <__aeabi_dmul+0x1e4>)
    c270:	00bf      	lsls	r7, r7, #2
    c272:	59d2      	ldr	r2, [r2, r7]
    c274:	4697      	mov	pc, r2
    c276:	465b      	mov	r3, fp
    c278:	4303      	orrs	r3, r0
    c27a:	4699      	mov	r9, r3
    c27c:	d000      	beq.n	c280 <__aeabi_dmul+0xa0>
    c27e:	e087      	b.n	c390 <__aeabi_dmul+0x1b0>
    c280:	2300      	movs	r3, #0
    c282:	469b      	mov	fp, r3
    c284:	3302      	adds	r3, #2
    c286:	2708      	movs	r7, #8
    c288:	9302      	str	r3, [sp, #8]
    c28a:	e7ce      	b.n	c22a <__aeabi_dmul+0x4a>
    c28c:	4642      	mov	r2, r8
    c28e:	9201      	str	r2, [sp, #4]
    c290:	2802      	cmp	r0, #2
    c292:	d067      	beq.n	c364 <__aeabi_dmul+0x184>
    c294:	2803      	cmp	r0, #3
    c296:	d100      	bne.n	c29a <__aeabi_dmul+0xba>
    c298:	e20e      	b.n	c6b8 <__aeabi_dmul+0x4d8>
    c29a:	2801      	cmp	r0, #1
    c29c:	d000      	beq.n	c2a0 <__aeabi_dmul+0xc0>
    c29e:	e162      	b.n	c566 <__aeabi_dmul+0x386>
    c2a0:	2300      	movs	r3, #0
    c2a2:	2400      	movs	r4, #0
    c2a4:	2200      	movs	r2, #0
    c2a6:	4699      	mov	r9, r3
    c2a8:	9901      	ldr	r1, [sp, #4]
    c2aa:	4001      	ands	r1, r0
    c2ac:	b2cd      	uxtb	r5, r1
    c2ae:	2100      	movs	r1, #0
    c2b0:	0312      	lsls	r2, r2, #12
    c2b2:	0d0b      	lsrs	r3, r1, #20
    c2b4:	0b12      	lsrs	r2, r2, #12
    c2b6:	051b      	lsls	r3, r3, #20
    c2b8:	4313      	orrs	r3, r2
    c2ba:	4a43      	ldr	r2, [pc, #268]	; (c3c8 <__aeabi_dmul+0x1e8>)
    c2bc:	0524      	lsls	r4, r4, #20
    c2be:	4013      	ands	r3, r2
    c2c0:	431c      	orrs	r4, r3
    c2c2:	0064      	lsls	r4, r4, #1
    c2c4:	07ed      	lsls	r5, r5, #31
    c2c6:	0864      	lsrs	r4, r4, #1
    c2c8:	432c      	orrs	r4, r5
    c2ca:	4648      	mov	r0, r9
    c2cc:	0021      	movs	r1, r4
    c2ce:	b007      	add	sp, #28
    c2d0:	bc3c      	pop	{r2, r3, r4, r5}
    c2d2:	4690      	mov	r8, r2
    c2d4:	4699      	mov	r9, r3
    c2d6:	46a2      	mov	sl, r4
    c2d8:	46ab      	mov	fp, r5
    c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2dc:	4303      	orrs	r3, r0
    c2de:	4699      	mov	r9, r3
    c2e0:	d04f      	beq.n	c382 <__aeabi_dmul+0x1a2>
    c2e2:	465b      	mov	r3, fp
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d100      	bne.n	c2ea <__aeabi_dmul+0x10a>
    c2e8:	e189      	b.n	c5fe <__aeabi_dmul+0x41e>
    c2ea:	4658      	mov	r0, fp
    c2ec:	f000 fe98 	bl	d020 <__clzsi2>
    c2f0:	0003      	movs	r3, r0
    c2f2:	3b0b      	subs	r3, #11
    c2f4:	2b1c      	cmp	r3, #28
    c2f6:	dd00      	ble.n	c2fa <__aeabi_dmul+0x11a>
    c2f8:	e17a      	b.n	c5f0 <__aeabi_dmul+0x410>
    c2fa:	221d      	movs	r2, #29
    c2fc:	1ad3      	subs	r3, r2, r3
    c2fe:	003a      	movs	r2, r7
    c300:	0001      	movs	r1, r0
    c302:	465c      	mov	r4, fp
    c304:	40da      	lsrs	r2, r3
    c306:	3908      	subs	r1, #8
    c308:	408c      	lsls	r4, r1
    c30a:	0013      	movs	r3, r2
    c30c:	408f      	lsls	r7, r1
    c30e:	4323      	orrs	r3, r4
    c310:	469b      	mov	fp, r3
    c312:	46b9      	mov	r9, r7
    c314:	2300      	movs	r3, #0
    c316:	4e2d      	ldr	r6, [pc, #180]	; (c3cc <__aeabi_dmul+0x1ec>)
    c318:	2700      	movs	r7, #0
    c31a:	1a36      	subs	r6, r6, r0
    c31c:	9302      	str	r3, [sp, #8]
    c31e:	e784      	b.n	c22a <__aeabi_dmul+0x4a>
    c320:	4653      	mov	r3, sl
    c322:	4323      	orrs	r3, r4
    c324:	d12a      	bne.n	c37c <__aeabi_dmul+0x19c>
    c326:	2400      	movs	r4, #0
    c328:	2002      	movs	r0, #2
    c32a:	e796      	b.n	c25a <__aeabi_dmul+0x7a>
    c32c:	4653      	mov	r3, sl
    c32e:	4323      	orrs	r3, r4
    c330:	d020      	beq.n	c374 <__aeabi_dmul+0x194>
    c332:	2c00      	cmp	r4, #0
    c334:	d100      	bne.n	c338 <__aeabi_dmul+0x158>
    c336:	e157      	b.n	c5e8 <__aeabi_dmul+0x408>
    c338:	0020      	movs	r0, r4
    c33a:	f000 fe71 	bl	d020 <__clzsi2>
    c33e:	0003      	movs	r3, r0
    c340:	3b0b      	subs	r3, #11
    c342:	2b1c      	cmp	r3, #28
    c344:	dd00      	ble.n	c348 <__aeabi_dmul+0x168>
    c346:	e149      	b.n	c5dc <__aeabi_dmul+0x3fc>
    c348:	211d      	movs	r1, #29
    c34a:	1acb      	subs	r3, r1, r3
    c34c:	4651      	mov	r1, sl
    c34e:	0002      	movs	r2, r0
    c350:	40d9      	lsrs	r1, r3
    c352:	4653      	mov	r3, sl
    c354:	3a08      	subs	r2, #8
    c356:	4094      	lsls	r4, r2
    c358:	4093      	lsls	r3, r2
    c35a:	430c      	orrs	r4, r1
    c35c:	4a1b      	ldr	r2, [pc, #108]	; (c3cc <__aeabi_dmul+0x1ec>)
    c35e:	1a12      	subs	r2, r2, r0
    c360:	2000      	movs	r0, #0
    c362:	e77a      	b.n	c25a <__aeabi_dmul+0x7a>
    c364:	2501      	movs	r5, #1
    c366:	9b01      	ldr	r3, [sp, #4]
    c368:	4c14      	ldr	r4, [pc, #80]	; (c3bc <__aeabi_dmul+0x1dc>)
    c36a:	401d      	ands	r5, r3
    c36c:	2300      	movs	r3, #0
    c36e:	2200      	movs	r2, #0
    c370:	4699      	mov	r9, r3
    c372:	e79c      	b.n	c2ae <__aeabi_dmul+0xce>
    c374:	2400      	movs	r4, #0
    c376:	2200      	movs	r2, #0
    c378:	2001      	movs	r0, #1
    c37a:	e76e      	b.n	c25a <__aeabi_dmul+0x7a>
    c37c:	4653      	mov	r3, sl
    c37e:	2003      	movs	r0, #3
    c380:	e76b      	b.n	c25a <__aeabi_dmul+0x7a>
    c382:	2300      	movs	r3, #0
    c384:	469b      	mov	fp, r3
    c386:	3301      	adds	r3, #1
    c388:	2704      	movs	r7, #4
    c38a:	2600      	movs	r6, #0
    c38c:	9302      	str	r3, [sp, #8]
    c38e:	e74c      	b.n	c22a <__aeabi_dmul+0x4a>
    c390:	2303      	movs	r3, #3
    c392:	4681      	mov	r9, r0
    c394:	270c      	movs	r7, #12
    c396:	9302      	str	r3, [sp, #8]
    c398:	e747      	b.n	c22a <__aeabi_dmul+0x4a>
    c39a:	2280      	movs	r2, #128	; 0x80
    c39c:	2300      	movs	r3, #0
    c39e:	2500      	movs	r5, #0
    c3a0:	0312      	lsls	r2, r2, #12
    c3a2:	4699      	mov	r9, r3
    c3a4:	4c05      	ldr	r4, [pc, #20]	; (c3bc <__aeabi_dmul+0x1dc>)
    c3a6:	e782      	b.n	c2ae <__aeabi_dmul+0xce>
    c3a8:	465c      	mov	r4, fp
    c3aa:	464b      	mov	r3, r9
    c3ac:	9802      	ldr	r0, [sp, #8]
    c3ae:	e76f      	b.n	c290 <__aeabi_dmul+0xb0>
    c3b0:	465c      	mov	r4, fp
    c3b2:	464b      	mov	r3, r9
    c3b4:	9501      	str	r5, [sp, #4]
    c3b6:	9802      	ldr	r0, [sp, #8]
    c3b8:	e76a      	b.n	c290 <__aeabi_dmul+0xb0>
    c3ba:	46c0      	nop			; (mov r8, r8)
    c3bc:	000007ff 	.word	0x000007ff
    c3c0:	fffffc01 	.word	0xfffffc01
    c3c4:	0000ddf0 	.word	0x0000ddf0
    c3c8:	800fffff 	.word	0x800fffff
    c3cc:	fffffc0d 	.word	0xfffffc0d
    c3d0:	464a      	mov	r2, r9
    c3d2:	4649      	mov	r1, r9
    c3d4:	0c17      	lsrs	r7, r2, #16
    c3d6:	0c1a      	lsrs	r2, r3, #16
    c3d8:	041b      	lsls	r3, r3, #16
    c3da:	0c1b      	lsrs	r3, r3, #16
    c3dc:	0408      	lsls	r0, r1, #16
    c3de:	0019      	movs	r1, r3
    c3e0:	0c00      	lsrs	r0, r0, #16
    c3e2:	4341      	muls	r1, r0
    c3e4:	0015      	movs	r5, r2
    c3e6:	4688      	mov	r8, r1
    c3e8:	0019      	movs	r1, r3
    c3ea:	437d      	muls	r5, r7
    c3ec:	4379      	muls	r1, r7
    c3ee:	9503      	str	r5, [sp, #12]
    c3f0:	4689      	mov	r9, r1
    c3f2:	0029      	movs	r1, r5
    c3f4:	0015      	movs	r5, r2
    c3f6:	4345      	muls	r5, r0
    c3f8:	444d      	add	r5, r9
    c3fa:	9502      	str	r5, [sp, #8]
    c3fc:	4645      	mov	r5, r8
    c3fe:	0c2d      	lsrs	r5, r5, #16
    c400:	46aa      	mov	sl, r5
    c402:	9d02      	ldr	r5, [sp, #8]
    c404:	4455      	add	r5, sl
    c406:	45a9      	cmp	r9, r5
    c408:	d906      	bls.n	c418 <__aeabi_dmul+0x238>
    c40a:	468a      	mov	sl, r1
    c40c:	2180      	movs	r1, #128	; 0x80
    c40e:	0249      	lsls	r1, r1, #9
    c410:	4689      	mov	r9, r1
    c412:	44ca      	add	sl, r9
    c414:	4651      	mov	r1, sl
    c416:	9103      	str	r1, [sp, #12]
    c418:	0c29      	lsrs	r1, r5, #16
    c41a:	9104      	str	r1, [sp, #16]
    c41c:	4641      	mov	r1, r8
    c41e:	0409      	lsls	r1, r1, #16
    c420:	042d      	lsls	r5, r5, #16
    c422:	0c09      	lsrs	r1, r1, #16
    c424:	4688      	mov	r8, r1
    c426:	0029      	movs	r1, r5
    c428:	0c25      	lsrs	r5, r4, #16
    c42a:	0424      	lsls	r4, r4, #16
    c42c:	4441      	add	r1, r8
    c42e:	0c24      	lsrs	r4, r4, #16
    c430:	9105      	str	r1, [sp, #20]
    c432:	0021      	movs	r1, r4
    c434:	4341      	muls	r1, r0
    c436:	4688      	mov	r8, r1
    c438:	0021      	movs	r1, r4
    c43a:	4379      	muls	r1, r7
    c43c:	468a      	mov	sl, r1
    c43e:	4368      	muls	r0, r5
    c440:	4641      	mov	r1, r8
    c442:	4450      	add	r0, sl
    c444:	4681      	mov	r9, r0
    c446:	0c08      	lsrs	r0, r1, #16
    c448:	4448      	add	r0, r9
    c44a:	436f      	muls	r7, r5
    c44c:	4582      	cmp	sl, r0
    c44e:	d903      	bls.n	c458 <__aeabi_dmul+0x278>
    c450:	2180      	movs	r1, #128	; 0x80
    c452:	0249      	lsls	r1, r1, #9
    c454:	4689      	mov	r9, r1
    c456:	444f      	add	r7, r9
    c458:	0c01      	lsrs	r1, r0, #16
    c45a:	4689      	mov	r9, r1
    c45c:	0039      	movs	r1, r7
    c45e:	4449      	add	r1, r9
    c460:	9102      	str	r1, [sp, #8]
    c462:	4641      	mov	r1, r8
    c464:	040f      	lsls	r7, r1, #16
    c466:	9904      	ldr	r1, [sp, #16]
    c468:	0c3f      	lsrs	r7, r7, #16
    c46a:	4688      	mov	r8, r1
    c46c:	0400      	lsls	r0, r0, #16
    c46e:	19c0      	adds	r0, r0, r7
    c470:	4480      	add	r8, r0
    c472:	4641      	mov	r1, r8
    c474:	9104      	str	r1, [sp, #16]
    c476:	4659      	mov	r1, fp
    c478:	0c0f      	lsrs	r7, r1, #16
    c47a:	0409      	lsls	r1, r1, #16
    c47c:	0c09      	lsrs	r1, r1, #16
    c47e:	4688      	mov	r8, r1
    c480:	4359      	muls	r1, r3
    c482:	468a      	mov	sl, r1
    c484:	0039      	movs	r1, r7
    c486:	4351      	muls	r1, r2
    c488:	4689      	mov	r9, r1
    c48a:	4641      	mov	r1, r8
    c48c:	434a      	muls	r2, r1
    c48e:	4651      	mov	r1, sl
    c490:	0c09      	lsrs	r1, r1, #16
    c492:	468b      	mov	fp, r1
    c494:	437b      	muls	r3, r7
    c496:	18d2      	adds	r2, r2, r3
    c498:	445a      	add	r2, fp
    c49a:	4293      	cmp	r3, r2
    c49c:	d903      	bls.n	c4a6 <__aeabi_dmul+0x2c6>
    c49e:	2380      	movs	r3, #128	; 0x80
    c4a0:	025b      	lsls	r3, r3, #9
    c4a2:	469b      	mov	fp, r3
    c4a4:	44d9      	add	r9, fp
    c4a6:	4651      	mov	r1, sl
    c4a8:	0409      	lsls	r1, r1, #16
    c4aa:	0c09      	lsrs	r1, r1, #16
    c4ac:	468a      	mov	sl, r1
    c4ae:	4641      	mov	r1, r8
    c4b0:	4361      	muls	r1, r4
    c4b2:	437c      	muls	r4, r7
    c4b4:	0c13      	lsrs	r3, r2, #16
    c4b6:	0412      	lsls	r2, r2, #16
    c4b8:	444b      	add	r3, r9
    c4ba:	4452      	add	r2, sl
    c4bc:	46a1      	mov	r9, r4
    c4be:	468a      	mov	sl, r1
    c4c0:	003c      	movs	r4, r7
    c4c2:	4641      	mov	r1, r8
    c4c4:	436c      	muls	r4, r5
    c4c6:	434d      	muls	r5, r1
    c4c8:	4651      	mov	r1, sl
    c4ca:	444d      	add	r5, r9
    c4cc:	0c0f      	lsrs	r7, r1, #16
    c4ce:	197d      	adds	r5, r7, r5
    c4d0:	45a9      	cmp	r9, r5
    c4d2:	d903      	bls.n	c4dc <__aeabi_dmul+0x2fc>
    c4d4:	2180      	movs	r1, #128	; 0x80
    c4d6:	0249      	lsls	r1, r1, #9
    c4d8:	4688      	mov	r8, r1
    c4da:	4444      	add	r4, r8
    c4dc:	9f04      	ldr	r7, [sp, #16]
    c4de:	9903      	ldr	r1, [sp, #12]
    c4e0:	46b8      	mov	r8, r7
    c4e2:	4441      	add	r1, r8
    c4e4:	468b      	mov	fp, r1
    c4e6:	4583      	cmp	fp, r0
    c4e8:	4180      	sbcs	r0, r0
    c4ea:	4241      	negs	r1, r0
    c4ec:	4688      	mov	r8, r1
    c4ee:	4651      	mov	r1, sl
    c4f0:	0408      	lsls	r0, r1, #16
    c4f2:	042f      	lsls	r7, r5, #16
    c4f4:	0c00      	lsrs	r0, r0, #16
    c4f6:	183f      	adds	r7, r7, r0
    c4f8:	4658      	mov	r0, fp
    c4fa:	9902      	ldr	r1, [sp, #8]
    c4fc:	1810      	adds	r0, r2, r0
    c4fe:	4689      	mov	r9, r1
    c500:	4290      	cmp	r0, r2
    c502:	4192      	sbcs	r2, r2
    c504:	444f      	add	r7, r9
    c506:	46ba      	mov	sl, r7
    c508:	4252      	negs	r2, r2
    c50a:	4699      	mov	r9, r3
    c50c:	4693      	mov	fp, r2
    c50e:	44c2      	add	sl, r8
    c510:	44d1      	add	r9, sl
    c512:	44cb      	add	fp, r9
    c514:	428f      	cmp	r7, r1
    c516:	41bf      	sbcs	r7, r7
    c518:	45c2      	cmp	sl, r8
    c51a:	4189      	sbcs	r1, r1
    c51c:	4599      	cmp	r9, r3
    c51e:	419b      	sbcs	r3, r3
    c520:	4593      	cmp	fp, r2
    c522:	4192      	sbcs	r2, r2
    c524:	427f      	negs	r7, r7
    c526:	4249      	negs	r1, r1
    c528:	0c2d      	lsrs	r5, r5, #16
    c52a:	4252      	negs	r2, r2
    c52c:	430f      	orrs	r7, r1
    c52e:	425b      	negs	r3, r3
    c530:	4313      	orrs	r3, r2
    c532:	197f      	adds	r7, r7, r5
    c534:	18ff      	adds	r7, r7, r3
    c536:	465b      	mov	r3, fp
    c538:	193c      	adds	r4, r7, r4
    c53a:	0ddb      	lsrs	r3, r3, #23
    c53c:	9a05      	ldr	r2, [sp, #20]
    c53e:	0264      	lsls	r4, r4, #9
    c540:	431c      	orrs	r4, r3
    c542:	0243      	lsls	r3, r0, #9
    c544:	4313      	orrs	r3, r2
    c546:	1e5d      	subs	r5, r3, #1
    c548:	41ab      	sbcs	r3, r5
    c54a:	465a      	mov	r2, fp
    c54c:	0dc0      	lsrs	r0, r0, #23
    c54e:	4303      	orrs	r3, r0
    c550:	0252      	lsls	r2, r2, #9
    c552:	4313      	orrs	r3, r2
    c554:	01e2      	lsls	r2, r4, #7
    c556:	d556      	bpl.n	c606 <__aeabi_dmul+0x426>
    c558:	2001      	movs	r0, #1
    c55a:	085a      	lsrs	r2, r3, #1
    c55c:	4003      	ands	r3, r0
    c55e:	4313      	orrs	r3, r2
    c560:	07e2      	lsls	r2, r4, #31
    c562:	4313      	orrs	r3, r2
    c564:	0864      	lsrs	r4, r4, #1
    c566:	485a      	ldr	r0, [pc, #360]	; (c6d0 <__aeabi_dmul+0x4f0>)
    c568:	4460      	add	r0, ip
    c56a:	2800      	cmp	r0, #0
    c56c:	dd4d      	ble.n	c60a <__aeabi_dmul+0x42a>
    c56e:	075a      	lsls	r2, r3, #29
    c570:	d009      	beq.n	c586 <__aeabi_dmul+0x3a6>
    c572:	220f      	movs	r2, #15
    c574:	401a      	ands	r2, r3
    c576:	2a04      	cmp	r2, #4
    c578:	d005      	beq.n	c586 <__aeabi_dmul+0x3a6>
    c57a:	1d1a      	adds	r2, r3, #4
    c57c:	429a      	cmp	r2, r3
    c57e:	419b      	sbcs	r3, r3
    c580:	425b      	negs	r3, r3
    c582:	18e4      	adds	r4, r4, r3
    c584:	0013      	movs	r3, r2
    c586:	01e2      	lsls	r2, r4, #7
    c588:	d504      	bpl.n	c594 <__aeabi_dmul+0x3b4>
    c58a:	2080      	movs	r0, #128	; 0x80
    c58c:	4a51      	ldr	r2, [pc, #324]	; (c6d4 <__aeabi_dmul+0x4f4>)
    c58e:	00c0      	lsls	r0, r0, #3
    c590:	4014      	ands	r4, r2
    c592:	4460      	add	r0, ip
    c594:	4a50      	ldr	r2, [pc, #320]	; (c6d8 <__aeabi_dmul+0x4f8>)
    c596:	4290      	cmp	r0, r2
    c598:	dd00      	ble.n	c59c <__aeabi_dmul+0x3bc>
    c59a:	e6e3      	b.n	c364 <__aeabi_dmul+0x184>
    c59c:	2501      	movs	r5, #1
    c59e:	08db      	lsrs	r3, r3, #3
    c5a0:	0762      	lsls	r2, r4, #29
    c5a2:	431a      	orrs	r2, r3
    c5a4:	0264      	lsls	r4, r4, #9
    c5a6:	9b01      	ldr	r3, [sp, #4]
    c5a8:	4691      	mov	r9, r2
    c5aa:	0b22      	lsrs	r2, r4, #12
    c5ac:	0544      	lsls	r4, r0, #21
    c5ae:	0d64      	lsrs	r4, r4, #21
    c5b0:	401d      	ands	r5, r3
    c5b2:	e67c      	b.n	c2ae <__aeabi_dmul+0xce>
    c5b4:	2280      	movs	r2, #128	; 0x80
    c5b6:	4659      	mov	r1, fp
    c5b8:	0312      	lsls	r2, r2, #12
    c5ba:	4211      	tst	r1, r2
    c5bc:	d008      	beq.n	c5d0 <__aeabi_dmul+0x3f0>
    c5be:	4214      	tst	r4, r2
    c5c0:	d106      	bne.n	c5d0 <__aeabi_dmul+0x3f0>
    c5c2:	4322      	orrs	r2, r4
    c5c4:	0312      	lsls	r2, r2, #12
    c5c6:	0b12      	lsrs	r2, r2, #12
    c5c8:	4645      	mov	r5, r8
    c5ca:	4699      	mov	r9, r3
    c5cc:	4c43      	ldr	r4, [pc, #268]	; (c6dc <__aeabi_dmul+0x4fc>)
    c5ce:	e66e      	b.n	c2ae <__aeabi_dmul+0xce>
    c5d0:	465b      	mov	r3, fp
    c5d2:	431a      	orrs	r2, r3
    c5d4:	0312      	lsls	r2, r2, #12
    c5d6:	0b12      	lsrs	r2, r2, #12
    c5d8:	4c40      	ldr	r4, [pc, #256]	; (c6dc <__aeabi_dmul+0x4fc>)
    c5da:	e668      	b.n	c2ae <__aeabi_dmul+0xce>
    c5dc:	0003      	movs	r3, r0
    c5de:	4654      	mov	r4, sl
    c5e0:	3b28      	subs	r3, #40	; 0x28
    c5e2:	409c      	lsls	r4, r3
    c5e4:	2300      	movs	r3, #0
    c5e6:	e6b9      	b.n	c35c <__aeabi_dmul+0x17c>
    c5e8:	f000 fd1a 	bl	d020 <__clzsi2>
    c5ec:	3020      	adds	r0, #32
    c5ee:	e6a6      	b.n	c33e <__aeabi_dmul+0x15e>
    c5f0:	0003      	movs	r3, r0
    c5f2:	3b28      	subs	r3, #40	; 0x28
    c5f4:	409f      	lsls	r7, r3
    c5f6:	2300      	movs	r3, #0
    c5f8:	46bb      	mov	fp, r7
    c5fa:	4699      	mov	r9, r3
    c5fc:	e68a      	b.n	c314 <__aeabi_dmul+0x134>
    c5fe:	f000 fd0f 	bl	d020 <__clzsi2>
    c602:	3020      	adds	r0, #32
    c604:	e674      	b.n	c2f0 <__aeabi_dmul+0x110>
    c606:	46b4      	mov	ip, r6
    c608:	e7ad      	b.n	c566 <__aeabi_dmul+0x386>
    c60a:	2501      	movs	r5, #1
    c60c:	1a2a      	subs	r2, r5, r0
    c60e:	2a38      	cmp	r2, #56	; 0x38
    c610:	dd06      	ble.n	c620 <__aeabi_dmul+0x440>
    c612:	9b01      	ldr	r3, [sp, #4]
    c614:	2400      	movs	r4, #0
    c616:	401d      	ands	r5, r3
    c618:	2300      	movs	r3, #0
    c61a:	2200      	movs	r2, #0
    c61c:	4699      	mov	r9, r3
    c61e:	e646      	b.n	c2ae <__aeabi_dmul+0xce>
    c620:	2a1f      	cmp	r2, #31
    c622:	dc21      	bgt.n	c668 <__aeabi_dmul+0x488>
    c624:	2520      	movs	r5, #32
    c626:	0020      	movs	r0, r4
    c628:	1aad      	subs	r5, r5, r2
    c62a:	001e      	movs	r6, r3
    c62c:	40ab      	lsls	r3, r5
    c62e:	40a8      	lsls	r0, r5
    c630:	40d6      	lsrs	r6, r2
    c632:	1e5d      	subs	r5, r3, #1
    c634:	41ab      	sbcs	r3, r5
    c636:	4330      	orrs	r0, r6
    c638:	4318      	orrs	r0, r3
    c63a:	40d4      	lsrs	r4, r2
    c63c:	0743      	lsls	r3, r0, #29
    c63e:	d009      	beq.n	c654 <__aeabi_dmul+0x474>
    c640:	230f      	movs	r3, #15
    c642:	4003      	ands	r3, r0
    c644:	2b04      	cmp	r3, #4
    c646:	d005      	beq.n	c654 <__aeabi_dmul+0x474>
    c648:	0003      	movs	r3, r0
    c64a:	1d18      	adds	r0, r3, #4
    c64c:	4298      	cmp	r0, r3
    c64e:	419b      	sbcs	r3, r3
    c650:	425b      	negs	r3, r3
    c652:	18e4      	adds	r4, r4, r3
    c654:	0223      	lsls	r3, r4, #8
    c656:	d521      	bpl.n	c69c <__aeabi_dmul+0x4bc>
    c658:	2501      	movs	r5, #1
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	2401      	movs	r4, #1
    c65e:	401d      	ands	r5, r3
    c660:	2300      	movs	r3, #0
    c662:	2200      	movs	r2, #0
    c664:	4699      	mov	r9, r3
    c666:	e622      	b.n	c2ae <__aeabi_dmul+0xce>
    c668:	251f      	movs	r5, #31
    c66a:	0021      	movs	r1, r4
    c66c:	426d      	negs	r5, r5
    c66e:	1a28      	subs	r0, r5, r0
    c670:	40c1      	lsrs	r1, r0
    c672:	0008      	movs	r0, r1
    c674:	2a20      	cmp	r2, #32
    c676:	d01d      	beq.n	c6b4 <__aeabi_dmul+0x4d4>
    c678:	355f      	adds	r5, #95	; 0x5f
    c67a:	1aaa      	subs	r2, r5, r2
    c67c:	4094      	lsls	r4, r2
    c67e:	4323      	orrs	r3, r4
    c680:	1e5c      	subs	r4, r3, #1
    c682:	41a3      	sbcs	r3, r4
    c684:	2507      	movs	r5, #7
    c686:	4303      	orrs	r3, r0
    c688:	401d      	ands	r5, r3
    c68a:	2200      	movs	r2, #0
    c68c:	2d00      	cmp	r5, #0
    c68e:	d009      	beq.n	c6a4 <__aeabi_dmul+0x4c4>
    c690:	220f      	movs	r2, #15
    c692:	2400      	movs	r4, #0
    c694:	401a      	ands	r2, r3
    c696:	0018      	movs	r0, r3
    c698:	2a04      	cmp	r2, #4
    c69a:	d1d6      	bne.n	c64a <__aeabi_dmul+0x46a>
    c69c:	0003      	movs	r3, r0
    c69e:	0765      	lsls	r5, r4, #29
    c6a0:	0264      	lsls	r4, r4, #9
    c6a2:	0b22      	lsrs	r2, r4, #12
    c6a4:	08db      	lsrs	r3, r3, #3
    c6a6:	432b      	orrs	r3, r5
    c6a8:	2501      	movs	r5, #1
    c6aa:	4699      	mov	r9, r3
    c6ac:	9b01      	ldr	r3, [sp, #4]
    c6ae:	2400      	movs	r4, #0
    c6b0:	401d      	ands	r5, r3
    c6b2:	e5fc      	b.n	c2ae <__aeabi_dmul+0xce>
    c6b4:	2400      	movs	r4, #0
    c6b6:	e7e2      	b.n	c67e <__aeabi_dmul+0x49e>
    c6b8:	2280      	movs	r2, #128	; 0x80
    c6ba:	2501      	movs	r5, #1
    c6bc:	0312      	lsls	r2, r2, #12
    c6be:	4322      	orrs	r2, r4
    c6c0:	9901      	ldr	r1, [sp, #4]
    c6c2:	0312      	lsls	r2, r2, #12
    c6c4:	0b12      	lsrs	r2, r2, #12
    c6c6:	400d      	ands	r5, r1
    c6c8:	4699      	mov	r9, r3
    c6ca:	4c04      	ldr	r4, [pc, #16]	; (c6dc <__aeabi_dmul+0x4fc>)
    c6cc:	e5ef      	b.n	c2ae <__aeabi_dmul+0xce>
    c6ce:	46c0      	nop			; (mov r8, r8)
    c6d0:	000003ff 	.word	0x000003ff
    c6d4:	feffffff 	.word	0xfeffffff
    c6d8:	000007fe 	.word	0x000007fe
    c6dc:	000007ff 	.word	0x000007ff

0000c6e0 <__aeabi_dsub>:
    c6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6e2:	4646      	mov	r6, r8
    c6e4:	46d6      	mov	lr, sl
    c6e6:	464f      	mov	r7, r9
    c6e8:	030c      	lsls	r4, r1, #12
    c6ea:	b5c0      	push	{r6, r7, lr}
    c6ec:	0fcd      	lsrs	r5, r1, #31
    c6ee:	004e      	lsls	r6, r1, #1
    c6f0:	0a61      	lsrs	r1, r4, #9
    c6f2:	0f44      	lsrs	r4, r0, #29
    c6f4:	430c      	orrs	r4, r1
    c6f6:	00c1      	lsls	r1, r0, #3
    c6f8:	0058      	lsls	r0, r3, #1
    c6fa:	0d40      	lsrs	r0, r0, #21
    c6fc:	4684      	mov	ip, r0
    c6fe:	468a      	mov	sl, r1
    c700:	000f      	movs	r7, r1
    c702:	0319      	lsls	r1, r3, #12
    c704:	0f50      	lsrs	r0, r2, #29
    c706:	0a49      	lsrs	r1, r1, #9
    c708:	4301      	orrs	r1, r0
    c70a:	48c6      	ldr	r0, [pc, #792]	; (ca24 <__aeabi_dsub+0x344>)
    c70c:	0d76      	lsrs	r6, r6, #21
    c70e:	46a8      	mov	r8, r5
    c710:	0fdb      	lsrs	r3, r3, #31
    c712:	00d2      	lsls	r2, r2, #3
    c714:	4584      	cmp	ip, r0
    c716:	d100      	bne.n	c71a <__aeabi_dsub+0x3a>
    c718:	e0d8      	b.n	c8cc <__aeabi_dsub+0x1ec>
    c71a:	2001      	movs	r0, #1
    c71c:	4043      	eors	r3, r0
    c71e:	42ab      	cmp	r3, r5
    c720:	d100      	bne.n	c724 <__aeabi_dsub+0x44>
    c722:	e0a6      	b.n	c872 <__aeabi_dsub+0x192>
    c724:	4660      	mov	r0, ip
    c726:	1a35      	subs	r5, r6, r0
    c728:	2d00      	cmp	r5, #0
    c72a:	dc00      	bgt.n	c72e <__aeabi_dsub+0x4e>
    c72c:	e105      	b.n	c93a <__aeabi_dsub+0x25a>
    c72e:	2800      	cmp	r0, #0
    c730:	d110      	bne.n	c754 <__aeabi_dsub+0x74>
    c732:	000b      	movs	r3, r1
    c734:	4313      	orrs	r3, r2
    c736:	d100      	bne.n	c73a <__aeabi_dsub+0x5a>
    c738:	e0d7      	b.n	c8ea <__aeabi_dsub+0x20a>
    c73a:	1e6b      	subs	r3, r5, #1
    c73c:	2b00      	cmp	r3, #0
    c73e:	d000      	beq.n	c742 <__aeabi_dsub+0x62>
    c740:	e14b      	b.n	c9da <__aeabi_dsub+0x2fa>
    c742:	4653      	mov	r3, sl
    c744:	1a9f      	subs	r7, r3, r2
    c746:	45ba      	cmp	sl, r7
    c748:	4180      	sbcs	r0, r0
    c74a:	1a64      	subs	r4, r4, r1
    c74c:	4240      	negs	r0, r0
    c74e:	1a24      	subs	r4, r4, r0
    c750:	2601      	movs	r6, #1
    c752:	e01e      	b.n	c792 <__aeabi_dsub+0xb2>
    c754:	4bb3      	ldr	r3, [pc, #716]	; (ca24 <__aeabi_dsub+0x344>)
    c756:	429e      	cmp	r6, r3
    c758:	d048      	beq.n	c7ec <__aeabi_dsub+0x10c>
    c75a:	2380      	movs	r3, #128	; 0x80
    c75c:	041b      	lsls	r3, r3, #16
    c75e:	4319      	orrs	r1, r3
    c760:	2d38      	cmp	r5, #56	; 0x38
    c762:	dd00      	ble.n	c766 <__aeabi_dsub+0x86>
    c764:	e119      	b.n	c99a <__aeabi_dsub+0x2ba>
    c766:	2d1f      	cmp	r5, #31
    c768:	dd00      	ble.n	c76c <__aeabi_dsub+0x8c>
    c76a:	e14c      	b.n	ca06 <__aeabi_dsub+0x326>
    c76c:	2320      	movs	r3, #32
    c76e:	000f      	movs	r7, r1
    c770:	1b5b      	subs	r3, r3, r5
    c772:	0010      	movs	r0, r2
    c774:	409a      	lsls	r2, r3
    c776:	409f      	lsls	r7, r3
    c778:	40e8      	lsrs	r0, r5
    c77a:	1e53      	subs	r3, r2, #1
    c77c:	419a      	sbcs	r2, r3
    c77e:	40e9      	lsrs	r1, r5
    c780:	4307      	orrs	r7, r0
    c782:	4317      	orrs	r7, r2
    c784:	4653      	mov	r3, sl
    c786:	1bdf      	subs	r7, r3, r7
    c788:	1a61      	subs	r1, r4, r1
    c78a:	45ba      	cmp	sl, r7
    c78c:	41a4      	sbcs	r4, r4
    c78e:	4264      	negs	r4, r4
    c790:	1b0c      	subs	r4, r1, r4
    c792:	0223      	lsls	r3, r4, #8
    c794:	d400      	bmi.n	c798 <__aeabi_dsub+0xb8>
    c796:	e0c5      	b.n	c924 <__aeabi_dsub+0x244>
    c798:	0264      	lsls	r4, r4, #9
    c79a:	0a65      	lsrs	r5, r4, #9
    c79c:	2d00      	cmp	r5, #0
    c79e:	d100      	bne.n	c7a2 <__aeabi_dsub+0xc2>
    c7a0:	e0f6      	b.n	c990 <__aeabi_dsub+0x2b0>
    c7a2:	0028      	movs	r0, r5
    c7a4:	f000 fc3c 	bl	d020 <__clzsi2>
    c7a8:	0003      	movs	r3, r0
    c7aa:	3b08      	subs	r3, #8
    c7ac:	2b1f      	cmp	r3, #31
    c7ae:	dd00      	ble.n	c7b2 <__aeabi_dsub+0xd2>
    c7b0:	e0e9      	b.n	c986 <__aeabi_dsub+0x2a6>
    c7b2:	2220      	movs	r2, #32
    c7b4:	003c      	movs	r4, r7
    c7b6:	1ad2      	subs	r2, r2, r3
    c7b8:	409d      	lsls	r5, r3
    c7ba:	40d4      	lsrs	r4, r2
    c7bc:	409f      	lsls	r7, r3
    c7be:	4325      	orrs	r5, r4
    c7c0:	429e      	cmp	r6, r3
    c7c2:	dd00      	ble.n	c7c6 <__aeabi_dsub+0xe6>
    c7c4:	e0db      	b.n	c97e <__aeabi_dsub+0x29e>
    c7c6:	1b9e      	subs	r6, r3, r6
    c7c8:	1c73      	adds	r3, r6, #1
    c7ca:	2b1f      	cmp	r3, #31
    c7cc:	dd00      	ble.n	c7d0 <__aeabi_dsub+0xf0>
    c7ce:	e10a      	b.n	c9e6 <__aeabi_dsub+0x306>
    c7d0:	2220      	movs	r2, #32
    c7d2:	0038      	movs	r0, r7
    c7d4:	1ad2      	subs	r2, r2, r3
    c7d6:	0029      	movs	r1, r5
    c7d8:	4097      	lsls	r7, r2
    c7da:	002c      	movs	r4, r5
    c7dc:	4091      	lsls	r1, r2
    c7de:	40d8      	lsrs	r0, r3
    c7e0:	1e7a      	subs	r2, r7, #1
    c7e2:	4197      	sbcs	r7, r2
    c7e4:	40dc      	lsrs	r4, r3
    c7e6:	2600      	movs	r6, #0
    c7e8:	4301      	orrs	r1, r0
    c7ea:	430f      	orrs	r7, r1
    c7ec:	077b      	lsls	r3, r7, #29
    c7ee:	d009      	beq.n	c804 <__aeabi_dsub+0x124>
    c7f0:	230f      	movs	r3, #15
    c7f2:	403b      	ands	r3, r7
    c7f4:	2b04      	cmp	r3, #4
    c7f6:	d005      	beq.n	c804 <__aeabi_dsub+0x124>
    c7f8:	1d3b      	adds	r3, r7, #4
    c7fa:	42bb      	cmp	r3, r7
    c7fc:	41bf      	sbcs	r7, r7
    c7fe:	427f      	negs	r7, r7
    c800:	19e4      	adds	r4, r4, r7
    c802:	001f      	movs	r7, r3
    c804:	0223      	lsls	r3, r4, #8
    c806:	d525      	bpl.n	c854 <__aeabi_dsub+0x174>
    c808:	4b86      	ldr	r3, [pc, #536]	; (ca24 <__aeabi_dsub+0x344>)
    c80a:	3601      	adds	r6, #1
    c80c:	429e      	cmp	r6, r3
    c80e:	d100      	bne.n	c812 <__aeabi_dsub+0x132>
    c810:	e0af      	b.n	c972 <__aeabi_dsub+0x292>
    c812:	4b85      	ldr	r3, [pc, #532]	; (ca28 <__aeabi_dsub+0x348>)
    c814:	2501      	movs	r5, #1
    c816:	401c      	ands	r4, r3
    c818:	4643      	mov	r3, r8
    c81a:	0762      	lsls	r2, r4, #29
    c81c:	08ff      	lsrs	r7, r7, #3
    c81e:	0264      	lsls	r4, r4, #9
    c820:	0576      	lsls	r6, r6, #21
    c822:	4317      	orrs	r7, r2
    c824:	0b24      	lsrs	r4, r4, #12
    c826:	0d76      	lsrs	r6, r6, #21
    c828:	401d      	ands	r5, r3
    c82a:	2100      	movs	r1, #0
    c82c:	0324      	lsls	r4, r4, #12
    c82e:	0b23      	lsrs	r3, r4, #12
    c830:	0d0c      	lsrs	r4, r1, #20
    c832:	4a7e      	ldr	r2, [pc, #504]	; (ca2c <__aeabi_dsub+0x34c>)
    c834:	0524      	lsls	r4, r4, #20
    c836:	431c      	orrs	r4, r3
    c838:	4014      	ands	r4, r2
    c83a:	0533      	lsls	r3, r6, #20
    c83c:	4323      	orrs	r3, r4
    c83e:	005b      	lsls	r3, r3, #1
    c840:	07ed      	lsls	r5, r5, #31
    c842:	085b      	lsrs	r3, r3, #1
    c844:	432b      	orrs	r3, r5
    c846:	0038      	movs	r0, r7
    c848:	0019      	movs	r1, r3
    c84a:	bc1c      	pop	{r2, r3, r4}
    c84c:	4690      	mov	r8, r2
    c84e:	4699      	mov	r9, r3
    c850:	46a2      	mov	sl, r4
    c852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c854:	2501      	movs	r5, #1
    c856:	4643      	mov	r3, r8
    c858:	0762      	lsls	r2, r4, #29
    c85a:	08ff      	lsrs	r7, r7, #3
    c85c:	4317      	orrs	r7, r2
    c85e:	08e4      	lsrs	r4, r4, #3
    c860:	401d      	ands	r5, r3
    c862:	4b70      	ldr	r3, [pc, #448]	; (ca24 <__aeabi_dsub+0x344>)
    c864:	429e      	cmp	r6, r3
    c866:	d036      	beq.n	c8d6 <__aeabi_dsub+0x1f6>
    c868:	0324      	lsls	r4, r4, #12
    c86a:	0576      	lsls	r6, r6, #21
    c86c:	0b24      	lsrs	r4, r4, #12
    c86e:	0d76      	lsrs	r6, r6, #21
    c870:	e7db      	b.n	c82a <__aeabi_dsub+0x14a>
    c872:	4663      	mov	r3, ip
    c874:	1af3      	subs	r3, r6, r3
    c876:	2b00      	cmp	r3, #0
    c878:	dc00      	bgt.n	c87c <__aeabi_dsub+0x19c>
    c87a:	e094      	b.n	c9a6 <__aeabi_dsub+0x2c6>
    c87c:	4660      	mov	r0, ip
    c87e:	2800      	cmp	r0, #0
    c880:	d035      	beq.n	c8ee <__aeabi_dsub+0x20e>
    c882:	4868      	ldr	r0, [pc, #416]	; (ca24 <__aeabi_dsub+0x344>)
    c884:	4286      	cmp	r6, r0
    c886:	d0b1      	beq.n	c7ec <__aeabi_dsub+0x10c>
    c888:	2780      	movs	r7, #128	; 0x80
    c88a:	043f      	lsls	r7, r7, #16
    c88c:	4339      	orrs	r1, r7
    c88e:	2b38      	cmp	r3, #56	; 0x38
    c890:	dc00      	bgt.n	c894 <__aeabi_dsub+0x1b4>
    c892:	e0fd      	b.n	ca90 <__aeabi_dsub+0x3b0>
    c894:	430a      	orrs	r2, r1
    c896:	0017      	movs	r7, r2
    c898:	2100      	movs	r1, #0
    c89a:	1e7a      	subs	r2, r7, #1
    c89c:	4197      	sbcs	r7, r2
    c89e:	4457      	add	r7, sl
    c8a0:	4557      	cmp	r7, sl
    c8a2:	4180      	sbcs	r0, r0
    c8a4:	1909      	adds	r1, r1, r4
    c8a6:	4244      	negs	r4, r0
    c8a8:	190c      	adds	r4, r1, r4
    c8aa:	0223      	lsls	r3, r4, #8
    c8ac:	d53a      	bpl.n	c924 <__aeabi_dsub+0x244>
    c8ae:	4b5d      	ldr	r3, [pc, #372]	; (ca24 <__aeabi_dsub+0x344>)
    c8b0:	3601      	adds	r6, #1
    c8b2:	429e      	cmp	r6, r3
    c8b4:	d100      	bne.n	c8b8 <__aeabi_dsub+0x1d8>
    c8b6:	e14b      	b.n	cb50 <__aeabi_dsub+0x470>
    c8b8:	2201      	movs	r2, #1
    c8ba:	4b5b      	ldr	r3, [pc, #364]	; (ca28 <__aeabi_dsub+0x348>)
    c8bc:	401c      	ands	r4, r3
    c8be:	087b      	lsrs	r3, r7, #1
    c8c0:	4017      	ands	r7, r2
    c8c2:	431f      	orrs	r7, r3
    c8c4:	07e2      	lsls	r2, r4, #31
    c8c6:	4317      	orrs	r7, r2
    c8c8:	0864      	lsrs	r4, r4, #1
    c8ca:	e78f      	b.n	c7ec <__aeabi_dsub+0x10c>
    c8cc:	0008      	movs	r0, r1
    c8ce:	4310      	orrs	r0, r2
    c8d0:	d000      	beq.n	c8d4 <__aeabi_dsub+0x1f4>
    c8d2:	e724      	b.n	c71e <__aeabi_dsub+0x3e>
    c8d4:	e721      	b.n	c71a <__aeabi_dsub+0x3a>
    c8d6:	0023      	movs	r3, r4
    c8d8:	433b      	orrs	r3, r7
    c8da:	d100      	bne.n	c8de <__aeabi_dsub+0x1fe>
    c8dc:	e1b9      	b.n	cc52 <__aeabi_dsub+0x572>
    c8de:	2280      	movs	r2, #128	; 0x80
    c8e0:	0312      	lsls	r2, r2, #12
    c8e2:	4314      	orrs	r4, r2
    c8e4:	0324      	lsls	r4, r4, #12
    c8e6:	0b24      	lsrs	r4, r4, #12
    c8e8:	e79f      	b.n	c82a <__aeabi_dsub+0x14a>
    c8ea:	002e      	movs	r6, r5
    c8ec:	e77e      	b.n	c7ec <__aeabi_dsub+0x10c>
    c8ee:	0008      	movs	r0, r1
    c8f0:	4310      	orrs	r0, r2
    c8f2:	d100      	bne.n	c8f6 <__aeabi_dsub+0x216>
    c8f4:	e0ca      	b.n	ca8c <__aeabi_dsub+0x3ac>
    c8f6:	1e58      	subs	r0, r3, #1
    c8f8:	4684      	mov	ip, r0
    c8fa:	2800      	cmp	r0, #0
    c8fc:	d000      	beq.n	c900 <__aeabi_dsub+0x220>
    c8fe:	e0e7      	b.n	cad0 <__aeabi_dsub+0x3f0>
    c900:	4452      	add	r2, sl
    c902:	4552      	cmp	r2, sl
    c904:	4180      	sbcs	r0, r0
    c906:	1864      	adds	r4, r4, r1
    c908:	4240      	negs	r0, r0
    c90a:	1824      	adds	r4, r4, r0
    c90c:	0017      	movs	r7, r2
    c90e:	2601      	movs	r6, #1
    c910:	0223      	lsls	r3, r4, #8
    c912:	d507      	bpl.n	c924 <__aeabi_dsub+0x244>
    c914:	2602      	movs	r6, #2
    c916:	e7cf      	b.n	c8b8 <__aeabi_dsub+0x1d8>
    c918:	4664      	mov	r4, ip
    c91a:	432c      	orrs	r4, r5
    c91c:	d100      	bne.n	c920 <__aeabi_dsub+0x240>
    c91e:	e1b3      	b.n	cc88 <__aeabi_dsub+0x5a8>
    c920:	002c      	movs	r4, r5
    c922:	4667      	mov	r7, ip
    c924:	077b      	lsls	r3, r7, #29
    c926:	d000      	beq.n	c92a <__aeabi_dsub+0x24a>
    c928:	e762      	b.n	c7f0 <__aeabi_dsub+0x110>
    c92a:	0763      	lsls	r3, r4, #29
    c92c:	08ff      	lsrs	r7, r7, #3
    c92e:	431f      	orrs	r7, r3
    c930:	2501      	movs	r5, #1
    c932:	4643      	mov	r3, r8
    c934:	08e4      	lsrs	r4, r4, #3
    c936:	401d      	ands	r5, r3
    c938:	e793      	b.n	c862 <__aeabi_dsub+0x182>
    c93a:	2d00      	cmp	r5, #0
    c93c:	d178      	bne.n	ca30 <__aeabi_dsub+0x350>
    c93e:	1c75      	adds	r5, r6, #1
    c940:	056d      	lsls	r5, r5, #21
    c942:	0d6d      	lsrs	r5, r5, #21
    c944:	2d01      	cmp	r5, #1
    c946:	dc00      	bgt.n	c94a <__aeabi_dsub+0x26a>
    c948:	e0f2      	b.n	cb30 <__aeabi_dsub+0x450>
    c94a:	4650      	mov	r0, sl
    c94c:	1a80      	subs	r0, r0, r2
    c94e:	4582      	cmp	sl, r0
    c950:	41bf      	sbcs	r7, r7
    c952:	1a65      	subs	r5, r4, r1
    c954:	427f      	negs	r7, r7
    c956:	1bed      	subs	r5, r5, r7
    c958:	4684      	mov	ip, r0
    c95a:	0228      	lsls	r0, r5, #8
    c95c:	d400      	bmi.n	c960 <__aeabi_dsub+0x280>
    c95e:	e08c      	b.n	ca7a <__aeabi_dsub+0x39a>
    c960:	4650      	mov	r0, sl
    c962:	1a17      	subs	r7, r2, r0
    c964:	42ba      	cmp	r2, r7
    c966:	4192      	sbcs	r2, r2
    c968:	1b0c      	subs	r4, r1, r4
    c96a:	4255      	negs	r5, r2
    c96c:	1b65      	subs	r5, r4, r5
    c96e:	4698      	mov	r8, r3
    c970:	e714      	b.n	c79c <__aeabi_dsub+0xbc>
    c972:	2501      	movs	r5, #1
    c974:	4643      	mov	r3, r8
    c976:	2400      	movs	r4, #0
    c978:	401d      	ands	r5, r3
    c97a:	2700      	movs	r7, #0
    c97c:	e755      	b.n	c82a <__aeabi_dsub+0x14a>
    c97e:	4c2a      	ldr	r4, [pc, #168]	; (ca28 <__aeabi_dsub+0x348>)
    c980:	1af6      	subs	r6, r6, r3
    c982:	402c      	ands	r4, r5
    c984:	e732      	b.n	c7ec <__aeabi_dsub+0x10c>
    c986:	003d      	movs	r5, r7
    c988:	3828      	subs	r0, #40	; 0x28
    c98a:	4085      	lsls	r5, r0
    c98c:	2700      	movs	r7, #0
    c98e:	e717      	b.n	c7c0 <__aeabi_dsub+0xe0>
    c990:	0038      	movs	r0, r7
    c992:	f000 fb45 	bl	d020 <__clzsi2>
    c996:	3020      	adds	r0, #32
    c998:	e706      	b.n	c7a8 <__aeabi_dsub+0xc8>
    c99a:	430a      	orrs	r2, r1
    c99c:	0017      	movs	r7, r2
    c99e:	2100      	movs	r1, #0
    c9a0:	1e7a      	subs	r2, r7, #1
    c9a2:	4197      	sbcs	r7, r2
    c9a4:	e6ee      	b.n	c784 <__aeabi_dsub+0xa4>
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d000      	beq.n	c9ac <__aeabi_dsub+0x2cc>
    c9aa:	e0e5      	b.n	cb78 <__aeabi_dsub+0x498>
    c9ac:	1c73      	adds	r3, r6, #1
    c9ae:	469c      	mov	ip, r3
    c9b0:	055b      	lsls	r3, r3, #21
    c9b2:	0d5b      	lsrs	r3, r3, #21
    c9b4:	2b01      	cmp	r3, #1
    c9b6:	dc00      	bgt.n	c9ba <__aeabi_dsub+0x2da>
    c9b8:	e09f      	b.n	cafa <__aeabi_dsub+0x41a>
    c9ba:	4b1a      	ldr	r3, [pc, #104]	; (ca24 <__aeabi_dsub+0x344>)
    c9bc:	459c      	cmp	ip, r3
    c9be:	d100      	bne.n	c9c2 <__aeabi_dsub+0x2e2>
    c9c0:	e0c5      	b.n	cb4e <__aeabi_dsub+0x46e>
    c9c2:	4452      	add	r2, sl
    c9c4:	4552      	cmp	r2, sl
    c9c6:	4180      	sbcs	r0, r0
    c9c8:	1864      	adds	r4, r4, r1
    c9ca:	4240      	negs	r0, r0
    c9cc:	1824      	adds	r4, r4, r0
    c9ce:	07e7      	lsls	r7, r4, #31
    c9d0:	0852      	lsrs	r2, r2, #1
    c9d2:	4317      	orrs	r7, r2
    c9d4:	0864      	lsrs	r4, r4, #1
    c9d6:	4666      	mov	r6, ip
    c9d8:	e708      	b.n	c7ec <__aeabi_dsub+0x10c>
    c9da:	4812      	ldr	r0, [pc, #72]	; (ca24 <__aeabi_dsub+0x344>)
    c9dc:	4285      	cmp	r5, r0
    c9de:	d100      	bne.n	c9e2 <__aeabi_dsub+0x302>
    c9e0:	e085      	b.n	caee <__aeabi_dsub+0x40e>
    c9e2:	001d      	movs	r5, r3
    c9e4:	e6bc      	b.n	c760 <__aeabi_dsub+0x80>
    c9e6:	0029      	movs	r1, r5
    c9e8:	3e1f      	subs	r6, #31
    c9ea:	40f1      	lsrs	r1, r6
    c9ec:	2b20      	cmp	r3, #32
    c9ee:	d100      	bne.n	c9f2 <__aeabi_dsub+0x312>
    c9f0:	e07f      	b.n	caf2 <__aeabi_dsub+0x412>
    c9f2:	2240      	movs	r2, #64	; 0x40
    c9f4:	1ad3      	subs	r3, r2, r3
    c9f6:	409d      	lsls	r5, r3
    c9f8:	432f      	orrs	r7, r5
    c9fa:	1e7d      	subs	r5, r7, #1
    c9fc:	41af      	sbcs	r7, r5
    c9fe:	2400      	movs	r4, #0
    ca00:	430f      	orrs	r7, r1
    ca02:	2600      	movs	r6, #0
    ca04:	e78e      	b.n	c924 <__aeabi_dsub+0x244>
    ca06:	002b      	movs	r3, r5
    ca08:	000f      	movs	r7, r1
    ca0a:	3b20      	subs	r3, #32
    ca0c:	40df      	lsrs	r7, r3
    ca0e:	2d20      	cmp	r5, #32
    ca10:	d071      	beq.n	caf6 <__aeabi_dsub+0x416>
    ca12:	2340      	movs	r3, #64	; 0x40
    ca14:	1b5d      	subs	r5, r3, r5
    ca16:	40a9      	lsls	r1, r5
    ca18:	430a      	orrs	r2, r1
    ca1a:	1e51      	subs	r1, r2, #1
    ca1c:	418a      	sbcs	r2, r1
    ca1e:	2100      	movs	r1, #0
    ca20:	4317      	orrs	r7, r2
    ca22:	e6af      	b.n	c784 <__aeabi_dsub+0xa4>
    ca24:	000007ff 	.word	0x000007ff
    ca28:	ff7fffff 	.word	0xff7fffff
    ca2c:	800fffff 	.word	0x800fffff
    ca30:	2e00      	cmp	r6, #0
    ca32:	d03e      	beq.n	cab2 <__aeabi_dsub+0x3d2>
    ca34:	4eb3      	ldr	r6, [pc, #716]	; (cd04 <__aeabi_dsub+0x624>)
    ca36:	45b4      	cmp	ip, r6
    ca38:	d045      	beq.n	cac6 <__aeabi_dsub+0x3e6>
    ca3a:	2680      	movs	r6, #128	; 0x80
    ca3c:	0436      	lsls	r6, r6, #16
    ca3e:	426d      	negs	r5, r5
    ca40:	4334      	orrs	r4, r6
    ca42:	2d38      	cmp	r5, #56	; 0x38
    ca44:	dd00      	ble.n	ca48 <__aeabi_dsub+0x368>
    ca46:	e0a8      	b.n	cb9a <__aeabi_dsub+0x4ba>
    ca48:	2d1f      	cmp	r5, #31
    ca4a:	dd00      	ble.n	ca4e <__aeabi_dsub+0x36e>
    ca4c:	e11f      	b.n	cc8e <__aeabi_dsub+0x5ae>
    ca4e:	2620      	movs	r6, #32
    ca50:	0027      	movs	r7, r4
    ca52:	4650      	mov	r0, sl
    ca54:	1b76      	subs	r6, r6, r5
    ca56:	40b7      	lsls	r7, r6
    ca58:	40e8      	lsrs	r0, r5
    ca5a:	4307      	orrs	r7, r0
    ca5c:	4650      	mov	r0, sl
    ca5e:	40b0      	lsls	r0, r6
    ca60:	1e46      	subs	r6, r0, #1
    ca62:	41b0      	sbcs	r0, r6
    ca64:	40ec      	lsrs	r4, r5
    ca66:	4338      	orrs	r0, r7
    ca68:	1a17      	subs	r7, r2, r0
    ca6a:	42ba      	cmp	r2, r7
    ca6c:	4192      	sbcs	r2, r2
    ca6e:	1b0c      	subs	r4, r1, r4
    ca70:	4252      	negs	r2, r2
    ca72:	1aa4      	subs	r4, r4, r2
    ca74:	4666      	mov	r6, ip
    ca76:	4698      	mov	r8, r3
    ca78:	e68b      	b.n	c792 <__aeabi_dsub+0xb2>
    ca7a:	4664      	mov	r4, ip
    ca7c:	4667      	mov	r7, ip
    ca7e:	432c      	orrs	r4, r5
    ca80:	d000      	beq.n	ca84 <__aeabi_dsub+0x3a4>
    ca82:	e68b      	b.n	c79c <__aeabi_dsub+0xbc>
    ca84:	2500      	movs	r5, #0
    ca86:	2600      	movs	r6, #0
    ca88:	2700      	movs	r7, #0
    ca8a:	e6ea      	b.n	c862 <__aeabi_dsub+0x182>
    ca8c:	001e      	movs	r6, r3
    ca8e:	e6ad      	b.n	c7ec <__aeabi_dsub+0x10c>
    ca90:	2b1f      	cmp	r3, #31
    ca92:	dc60      	bgt.n	cb56 <__aeabi_dsub+0x476>
    ca94:	2720      	movs	r7, #32
    ca96:	1af8      	subs	r0, r7, r3
    ca98:	000f      	movs	r7, r1
    ca9a:	4684      	mov	ip, r0
    ca9c:	4087      	lsls	r7, r0
    ca9e:	0010      	movs	r0, r2
    caa0:	40d8      	lsrs	r0, r3
    caa2:	4307      	orrs	r7, r0
    caa4:	4660      	mov	r0, ip
    caa6:	4082      	lsls	r2, r0
    caa8:	1e50      	subs	r0, r2, #1
    caaa:	4182      	sbcs	r2, r0
    caac:	40d9      	lsrs	r1, r3
    caae:	4317      	orrs	r7, r2
    cab0:	e6f5      	b.n	c89e <__aeabi_dsub+0x1be>
    cab2:	0026      	movs	r6, r4
    cab4:	4650      	mov	r0, sl
    cab6:	4306      	orrs	r6, r0
    cab8:	d005      	beq.n	cac6 <__aeabi_dsub+0x3e6>
    caba:	43ed      	mvns	r5, r5
    cabc:	2d00      	cmp	r5, #0
    cabe:	d0d3      	beq.n	ca68 <__aeabi_dsub+0x388>
    cac0:	4e90      	ldr	r6, [pc, #576]	; (cd04 <__aeabi_dsub+0x624>)
    cac2:	45b4      	cmp	ip, r6
    cac4:	d1bd      	bne.n	ca42 <__aeabi_dsub+0x362>
    cac6:	000c      	movs	r4, r1
    cac8:	0017      	movs	r7, r2
    caca:	4666      	mov	r6, ip
    cacc:	4698      	mov	r8, r3
    cace:	e68d      	b.n	c7ec <__aeabi_dsub+0x10c>
    cad0:	488c      	ldr	r0, [pc, #560]	; (cd04 <__aeabi_dsub+0x624>)
    cad2:	4283      	cmp	r3, r0
    cad4:	d00b      	beq.n	caee <__aeabi_dsub+0x40e>
    cad6:	4663      	mov	r3, ip
    cad8:	e6d9      	b.n	c88e <__aeabi_dsub+0x1ae>
    cada:	2d00      	cmp	r5, #0
    cadc:	d000      	beq.n	cae0 <__aeabi_dsub+0x400>
    cade:	e096      	b.n	cc0e <__aeabi_dsub+0x52e>
    cae0:	0008      	movs	r0, r1
    cae2:	4310      	orrs	r0, r2
    cae4:	d100      	bne.n	cae8 <__aeabi_dsub+0x408>
    cae6:	e0e2      	b.n	ccae <__aeabi_dsub+0x5ce>
    cae8:	000c      	movs	r4, r1
    caea:	0017      	movs	r7, r2
    caec:	4698      	mov	r8, r3
    caee:	4e85      	ldr	r6, [pc, #532]	; (cd04 <__aeabi_dsub+0x624>)
    caf0:	e67c      	b.n	c7ec <__aeabi_dsub+0x10c>
    caf2:	2500      	movs	r5, #0
    caf4:	e780      	b.n	c9f8 <__aeabi_dsub+0x318>
    caf6:	2100      	movs	r1, #0
    caf8:	e78e      	b.n	ca18 <__aeabi_dsub+0x338>
    cafa:	0023      	movs	r3, r4
    cafc:	4650      	mov	r0, sl
    cafe:	4303      	orrs	r3, r0
    cb00:	2e00      	cmp	r6, #0
    cb02:	d000      	beq.n	cb06 <__aeabi_dsub+0x426>
    cb04:	e0a8      	b.n	cc58 <__aeabi_dsub+0x578>
    cb06:	2b00      	cmp	r3, #0
    cb08:	d100      	bne.n	cb0c <__aeabi_dsub+0x42c>
    cb0a:	e0de      	b.n	ccca <__aeabi_dsub+0x5ea>
    cb0c:	000b      	movs	r3, r1
    cb0e:	4313      	orrs	r3, r2
    cb10:	d100      	bne.n	cb14 <__aeabi_dsub+0x434>
    cb12:	e66b      	b.n	c7ec <__aeabi_dsub+0x10c>
    cb14:	4452      	add	r2, sl
    cb16:	4552      	cmp	r2, sl
    cb18:	4180      	sbcs	r0, r0
    cb1a:	1864      	adds	r4, r4, r1
    cb1c:	4240      	negs	r0, r0
    cb1e:	1824      	adds	r4, r4, r0
    cb20:	0017      	movs	r7, r2
    cb22:	0223      	lsls	r3, r4, #8
    cb24:	d400      	bmi.n	cb28 <__aeabi_dsub+0x448>
    cb26:	e6fd      	b.n	c924 <__aeabi_dsub+0x244>
    cb28:	4b77      	ldr	r3, [pc, #476]	; (cd08 <__aeabi_dsub+0x628>)
    cb2a:	4666      	mov	r6, ip
    cb2c:	401c      	ands	r4, r3
    cb2e:	e65d      	b.n	c7ec <__aeabi_dsub+0x10c>
    cb30:	0025      	movs	r5, r4
    cb32:	4650      	mov	r0, sl
    cb34:	4305      	orrs	r5, r0
    cb36:	2e00      	cmp	r6, #0
    cb38:	d1cf      	bne.n	cada <__aeabi_dsub+0x3fa>
    cb3a:	2d00      	cmp	r5, #0
    cb3c:	d14f      	bne.n	cbde <__aeabi_dsub+0x4fe>
    cb3e:	000c      	movs	r4, r1
    cb40:	4314      	orrs	r4, r2
    cb42:	d100      	bne.n	cb46 <__aeabi_dsub+0x466>
    cb44:	e0a0      	b.n	cc88 <__aeabi_dsub+0x5a8>
    cb46:	000c      	movs	r4, r1
    cb48:	0017      	movs	r7, r2
    cb4a:	4698      	mov	r8, r3
    cb4c:	e64e      	b.n	c7ec <__aeabi_dsub+0x10c>
    cb4e:	4666      	mov	r6, ip
    cb50:	2400      	movs	r4, #0
    cb52:	2700      	movs	r7, #0
    cb54:	e685      	b.n	c862 <__aeabi_dsub+0x182>
    cb56:	001f      	movs	r7, r3
    cb58:	0008      	movs	r0, r1
    cb5a:	3f20      	subs	r7, #32
    cb5c:	40f8      	lsrs	r0, r7
    cb5e:	0007      	movs	r7, r0
    cb60:	2b20      	cmp	r3, #32
    cb62:	d100      	bne.n	cb66 <__aeabi_dsub+0x486>
    cb64:	e08e      	b.n	cc84 <__aeabi_dsub+0x5a4>
    cb66:	2040      	movs	r0, #64	; 0x40
    cb68:	1ac3      	subs	r3, r0, r3
    cb6a:	4099      	lsls	r1, r3
    cb6c:	430a      	orrs	r2, r1
    cb6e:	1e51      	subs	r1, r2, #1
    cb70:	418a      	sbcs	r2, r1
    cb72:	2100      	movs	r1, #0
    cb74:	4317      	orrs	r7, r2
    cb76:	e692      	b.n	c89e <__aeabi_dsub+0x1be>
    cb78:	2e00      	cmp	r6, #0
    cb7a:	d114      	bne.n	cba6 <__aeabi_dsub+0x4c6>
    cb7c:	0026      	movs	r6, r4
    cb7e:	4650      	mov	r0, sl
    cb80:	4306      	orrs	r6, r0
    cb82:	d062      	beq.n	cc4a <__aeabi_dsub+0x56a>
    cb84:	43db      	mvns	r3, r3
    cb86:	2b00      	cmp	r3, #0
    cb88:	d15c      	bne.n	cc44 <__aeabi_dsub+0x564>
    cb8a:	1887      	adds	r7, r0, r2
    cb8c:	4297      	cmp	r7, r2
    cb8e:	4192      	sbcs	r2, r2
    cb90:	1864      	adds	r4, r4, r1
    cb92:	4252      	negs	r2, r2
    cb94:	18a4      	adds	r4, r4, r2
    cb96:	4666      	mov	r6, ip
    cb98:	e687      	b.n	c8aa <__aeabi_dsub+0x1ca>
    cb9a:	4650      	mov	r0, sl
    cb9c:	4320      	orrs	r0, r4
    cb9e:	1e44      	subs	r4, r0, #1
    cba0:	41a0      	sbcs	r0, r4
    cba2:	2400      	movs	r4, #0
    cba4:	e760      	b.n	ca68 <__aeabi_dsub+0x388>
    cba6:	4e57      	ldr	r6, [pc, #348]	; (cd04 <__aeabi_dsub+0x624>)
    cba8:	45b4      	cmp	ip, r6
    cbaa:	d04e      	beq.n	cc4a <__aeabi_dsub+0x56a>
    cbac:	2680      	movs	r6, #128	; 0x80
    cbae:	0436      	lsls	r6, r6, #16
    cbb0:	425b      	negs	r3, r3
    cbb2:	4334      	orrs	r4, r6
    cbb4:	2b38      	cmp	r3, #56	; 0x38
    cbb6:	dd00      	ble.n	cbba <__aeabi_dsub+0x4da>
    cbb8:	e07f      	b.n	ccba <__aeabi_dsub+0x5da>
    cbba:	2b1f      	cmp	r3, #31
    cbbc:	dd00      	ble.n	cbc0 <__aeabi_dsub+0x4e0>
    cbbe:	e08b      	b.n	ccd8 <__aeabi_dsub+0x5f8>
    cbc0:	2620      	movs	r6, #32
    cbc2:	0027      	movs	r7, r4
    cbc4:	4650      	mov	r0, sl
    cbc6:	1af6      	subs	r6, r6, r3
    cbc8:	40b7      	lsls	r7, r6
    cbca:	40d8      	lsrs	r0, r3
    cbcc:	4307      	orrs	r7, r0
    cbce:	4650      	mov	r0, sl
    cbd0:	40b0      	lsls	r0, r6
    cbd2:	1e46      	subs	r6, r0, #1
    cbd4:	41b0      	sbcs	r0, r6
    cbd6:	4307      	orrs	r7, r0
    cbd8:	40dc      	lsrs	r4, r3
    cbda:	18bf      	adds	r7, r7, r2
    cbdc:	e7d6      	b.n	cb8c <__aeabi_dsub+0x4ac>
    cbde:	000d      	movs	r5, r1
    cbe0:	4315      	orrs	r5, r2
    cbe2:	d100      	bne.n	cbe6 <__aeabi_dsub+0x506>
    cbe4:	e602      	b.n	c7ec <__aeabi_dsub+0x10c>
    cbe6:	4650      	mov	r0, sl
    cbe8:	1a80      	subs	r0, r0, r2
    cbea:	4582      	cmp	sl, r0
    cbec:	41bf      	sbcs	r7, r7
    cbee:	1a65      	subs	r5, r4, r1
    cbf0:	427f      	negs	r7, r7
    cbf2:	1bed      	subs	r5, r5, r7
    cbf4:	4684      	mov	ip, r0
    cbf6:	0228      	lsls	r0, r5, #8
    cbf8:	d400      	bmi.n	cbfc <__aeabi_dsub+0x51c>
    cbfa:	e68d      	b.n	c918 <__aeabi_dsub+0x238>
    cbfc:	4650      	mov	r0, sl
    cbfe:	1a17      	subs	r7, r2, r0
    cc00:	42ba      	cmp	r2, r7
    cc02:	4192      	sbcs	r2, r2
    cc04:	1b0c      	subs	r4, r1, r4
    cc06:	4252      	negs	r2, r2
    cc08:	1aa4      	subs	r4, r4, r2
    cc0a:	4698      	mov	r8, r3
    cc0c:	e5ee      	b.n	c7ec <__aeabi_dsub+0x10c>
    cc0e:	000d      	movs	r5, r1
    cc10:	4315      	orrs	r5, r2
    cc12:	d100      	bne.n	cc16 <__aeabi_dsub+0x536>
    cc14:	e76b      	b.n	caee <__aeabi_dsub+0x40e>
    cc16:	4650      	mov	r0, sl
    cc18:	0767      	lsls	r7, r4, #29
    cc1a:	08c0      	lsrs	r0, r0, #3
    cc1c:	4307      	orrs	r7, r0
    cc1e:	2080      	movs	r0, #128	; 0x80
    cc20:	08e4      	lsrs	r4, r4, #3
    cc22:	0300      	lsls	r0, r0, #12
    cc24:	4204      	tst	r4, r0
    cc26:	d007      	beq.n	cc38 <__aeabi_dsub+0x558>
    cc28:	08cd      	lsrs	r5, r1, #3
    cc2a:	4205      	tst	r5, r0
    cc2c:	d104      	bne.n	cc38 <__aeabi_dsub+0x558>
    cc2e:	002c      	movs	r4, r5
    cc30:	4698      	mov	r8, r3
    cc32:	08d7      	lsrs	r7, r2, #3
    cc34:	0749      	lsls	r1, r1, #29
    cc36:	430f      	orrs	r7, r1
    cc38:	0f7b      	lsrs	r3, r7, #29
    cc3a:	00e4      	lsls	r4, r4, #3
    cc3c:	431c      	orrs	r4, r3
    cc3e:	00ff      	lsls	r7, r7, #3
    cc40:	4e30      	ldr	r6, [pc, #192]	; (cd04 <__aeabi_dsub+0x624>)
    cc42:	e5d3      	b.n	c7ec <__aeabi_dsub+0x10c>
    cc44:	4e2f      	ldr	r6, [pc, #188]	; (cd04 <__aeabi_dsub+0x624>)
    cc46:	45b4      	cmp	ip, r6
    cc48:	d1b4      	bne.n	cbb4 <__aeabi_dsub+0x4d4>
    cc4a:	000c      	movs	r4, r1
    cc4c:	0017      	movs	r7, r2
    cc4e:	4666      	mov	r6, ip
    cc50:	e5cc      	b.n	c7ec <__aeabi_dsub+0x10c>
    cc52:	2700      	movs	r7, #0
    cc54:	2400      	movs	r4, #0
    cc56:	e5e8      	b.n	c82a <__aeabi_dsub+0x14a>
    cc58:	2b00      	cmp	r3, #0
    cc5a:	d039      	beq.n	ccd0 <__aeabi_dsub+0x5f0>
    cc5c:	000b      	movs	r3, r1
    cc5e:	4313      	orrs	r3, r2
    cc60:	d100      	bne.n	cc64 <__aeabi_dsub+0x584>
    cc62:	e744      	b.n	caee <__aeabi_dsub+0x40e>
    cc64:	08c0      	lsrs	r0, r0, #3
    cc66:	0767      	lsls	r7, r4, #29
    cc68:	4307      	orrs	r7, r0
    cc6a:	2080      	movs	r0, #128	; 0x80
    cc6c:	08e4      	lsrs	r4, r4, #3
    cc6e:	0300      	lsls	r0, r0, #12
    cc70:	4204      	tst	r4, r0
    cc72:	d0e1      	beq.n	cc38 <__aeabi_dsub+0x558>
    cc74:	08cb      	lsrs	r3, r1, #3
    cc76:	4203      	tst	r3, r0
    cc78:	d1de      	bne.n	cc38 <__aeabi_dsub+0x558>
    cc7a:	08d7      	lsrs	r7, r2, #3
    cc7c:	0749      	lsls	r1, r1, #29
    cc7e:	430f      	orrs	r7, r1
    cc80:	001c      	movs	r4, r3
    cc82:	e7d9      	b.n	cc38 <__aeabi_dsub+0x558>
    cc84:	2100      	movs	r1, #0
    cc86:	e771      	b.n	cb6c <__aeabi_dsub+0x48c>
    cc88:	2500      	movs	r5, #0
    cc8a:	2700      	movs	r7, #0
    cc8c:	e5e9      	b.n	c862 <__aeabi_dsub+0x182>
    cc8e:	002e      	movs	r6, r5
    cc90:	0027      	movs	r7, r4
    cc92:	3e20      	subs	r6, #32
    cc94:	40f7      	lsrs	r7, r6
    cc96:	2d20      	cmp	r5, #32
    cc98:	d02f      	beq.n	ccfa <__aeabi_dsub+0x61a>
    cc9a:	2640      	movs	r6, #64	; 0x40
    cc9c:	1b75      	subs	r5, r6, r5
    cc9e:	40ac      	lsls	r4, r5
    cca0:	4650      	mov	r0, sl
    cca2:	4320      	orrs	r0, r4
    cca4:	1e44      	subs	r4, r0, #1
    cca6:	41a0      	sbcs	r0, r4
    cca8:	2400      	movs	r4, #0
    ccaa:	4338      	orrs	r0, r7
    ccac:	e6dc      	b.n	ca68 <__aeabi_dsub+0x388>
    ccae:	2480      	movs	r4, #128	; 0x80
    ccb0:	2500      	movs	r5, #0
    ccb2:	0324      	lsls	r4, r4, #12
    ccb4:	4e13      	ldr	r6, [pc, #76]	; (cd04 <__aeabi_dsub+0x624>)
    ccb6:	2700      	movs	r7, #0
    ccb8:	e5d3      	b.n	c862 <__aeabi_dsub+0x182>
    ccba:	4650      	mov	r0, sl
    ccbc:	4320      	orrs	r0, r4
    ccbe:	0007      	movs	r7, r0
    ccc0:	1e78      	subs	r0, r7, #1
    ccc2:	4187      	sbcs	r7, r0
    ccc4:	2400      	movs	r4, #0
    ccc6:	18bf      	adds	r7, r7, r2
    ccc8:	e760      	b.n	cb8c <__aeabi_dsub+0x4ac>
    ccca:	000c      	movs	r4, r1
    cccc:	0017      	movs	r7, r2
    ccce:	e58d      	b.n	c7ec <__aeabi_dsub+0x10c>
    ccd0:	000c      	movs	r4, r1
    ccd2:	0017      	movs	r7, r2
    ccd4:	4e0b      	ldr	r6, [pc, #44]	; (cd04 <__aeabi_dsub+0x624>)
    ccd6:	e589      	b.n	c7ec <__aeabi_dsub+0x10c>
    ccd8:	001e      	movs	r6, r3
    ccda:	0027      	movs	r7, r4
    ccdc:	3e20      	subs	r6, #32
    ccde:	40f7      	lsrs	r7, r6
    cce0:	2b20      	cmp	r3, #32
    cce2:	d00c      	beq.n	ccfe <__aeabi_dsub+0x61e>
    cce4:	2640      	movs	r6, #64	; 0x40
    cce6:	1af3      	subs	r3, r6, r3
    cce8:	409c      	lsls	r4, r3
    ccea:	4650      	mov	r0, sl
    ccec:	4320      	orrs	r0, r4
    ccee:	1e44      	subs	r4, r0, #1
    ccf0:	41a0      	sbcs	r0, r4
    ccf2:	4307      	orrs	r7, r0
    ccf4:	2400      	movs	r4, #0
    ccf6:	18bf      	adds	r7, r7, r2
    ccf8:	e748      	b.n	cb8c <__aeabi_dsub+0x4ac>
    ccfa:	2400      	movs	r4, #0
    ccfc:	e7d0      	b.n	cca0 <__aeabi_dsub+0x5c0>
    ccfe:	2400      	movs	r4, #0
    cd00:	e7f3      	b.n	ccea <__aeabi_dsub+0x60a>
    cd02:	46c0      	nop			; (mov r8, r8)
    cd04:	000007ff 	.word	0x000007ff
    cd08:	ff7fffff 	.word	0xff7fffff

0000cd0c <__aeabi_d2iz>:
    cd0c:	b530      	push	{r4, r5, lr}
    cd0e:	4d13      	ldr	r5, [pc, #76]	; (cd5c <__aeabi_d2iz+0x50>)
    cd10:	030a      	lsls	r2, r1, #12
    cd12:	004b      	lsls	r3, r1, #1
    cd14:	0b12      	lsrs	r2, r2, #12
    cd16:	0d5b      	lsrs	r3, r3, #21
    cd18:	0fc9      	lsrs	r1, r1, #31
    cd1a:	2400      	movs	r4, #0
    cd1c:	42ab      	cmp	r3, r5
    cd1e:	dd10      	ble.n	cd42 <__aeabi_d2iz+0x36>
    cd20:	4c0f      	ldr	r4, [pc, #60]	; (cd60 <__aeabi_d2iz+0x54>)
    cd22:	42a3      	cmp	r3, r4
    cd24:	dc0f      	bgt.n	cd46 <__aeabi_d2iz+0x3a>
    cd26:	2480      	movs	r4, #128	; 0x80
    cd28:	4d0e      	ldr	r5, [pc, #56]	; (cd64 <__aeabi_d2iz+0x58>)
    cd2a:	0364      	lsls	r4, r4, #13
    cd2c:	4322      	orrs	r2, r4
    cd2e:	1aed      	subs	r5, r5, r3
    cd30:	2d1f      	cmp	r5, #31
    cd32:	dd0b      	ble.n	cd4c <__aeabi_d2iz+0x40>
    cd34:	480c      	ldr	r0, [pc, #48]	; (cd68 <__aeabi_d2iz+0x5c>)
    cd36:	1ac3      	subs	r3, r0, r3
    cd38:	40da      	lsrs	r2, r3
    cd3a:	4254      	negs	r4, r2
    cd3c:	2900      	cmp	r1, #0
    cd3e:	d100      	bne.n	cd42 <__aeabi_d2iz+0x36>
    cd40:	0014      	movs	r4, r2
    cd42:	0020      	movs	r0, r4
    cd44:	bd30      	pop	{r4, r5, pc}
    cd46:	4b09      	ldr	r3, [pc, #36]	; (cd6c <__aeabi_d2iz+0x60>)
    cd48:	18cc      	adds	r4, r1, r3
    cd4a:	e7fa      	b.n	cd42 <__aeabi_d2iz+0x36>
    cd4c:	4c08      	ldr	r4, [pc, #32]	; (cd70 <__aeabi_d2iz+0x64>)
    cd4e:	40e8      	lsrs	r0, r5
    cd50:	46a4      	mov	ip, r4
    cd52:	4463      	add	r3, ip
    cd54:	409a      	lsls	r2, r3
    cd56:	4302      	orrs	r2, r0
    cd58:	e7ef      	b.n	cd3a <__aeabi_d2iz+0x2e>
    cd5a:	46c0      	nop			; (mov r8, r8)
    cd5c:	000003fe 	.word	0x000003fe
    cd60:	0000041d 	.word	0x0000041d
    cd64:	00000433 	.word	0x00000433
    cd68:	00000413 	.word	0x00000413
    cd6c:	7fffffff 	.word	0x7fffffff
    cd70:	fffffbed 	.word	0xfffffbed

0000cd74 <__aeabi_i2d>:
    cd74:	b570      	push	{r4, r5, r6, lr}
    cd76:	2800      	cmp	r0, #0
    cd78:	d030      	beq.n	cddc <__aeabi_i2d+0x68>
    cd7a:	17c3      	asrs	r3, r0, #31
    cd7c:	18c4      	adds	r4, r0, r3
    cd7e:	405c      	eors	r4, r3
    cd80:	0fc5      	lsrs	r5, r0, #31
    cd82:	0020      	movs	r0, r4
    cd84:	f000 f94c 	bl	d020 <__clzsi2>
    cd88:	4b17      	ldr	r3, [pc, #92]	; (cde8 <__aeabi_i2d+0x74>)
    cd8a:	4a18      	ldr	r2, [pc, #96]	; (cdec <__aeabi_i2d+0x78>)
    cd8c:	1a1b      	subs	r3, r3, r0
    cd8e:	1ad2      	subs	r2, r2, r3
    cd90:	2a1f      	cmp	r2, #31
    cd92:	dd18      	ble.n	cdc6 <__aeabi_i2d+0x52>
    cd94:	4a16      	ldr	r2, [pc, #88]	; (cdf0 <__aeabi_i2d+0x7c>)
    cd96:	1ad2      	subs	r2, r2, r3
    cd98:	4094      	lsls	r4, r2
    cd9a:	2200      	movs	r2, #0
    cd9c:	0324      	lsls	r4, r4, #12
    cd9e:	055b      	lsls	r3, r3, #21
    cda0:	0b24      	lsrs	r4, r4, #12
    cda2:	0d5b      	lsrs	r3, r3, #21
    cda4:	2100      	movs	r1, #0
    cda6:	0010      	movs	r0, r2
    cda8:	0324      	lsls	r4, r4, #12
    cdaa:	0d0a      	lsrs	r2, r1, #20
    cdac:	0b24      	lsrs	r4, r4, #12
    cdae:	0512      	lsls	r2, r2, #20
    cdb0:	4322      	orrs	r2, r4
    cdb2:	4c10      	ldr	r4, [pc, #64]	; (cdf4 <__aeabi_i2d+0x80>)
    cdb4:	051b      	lsls	r3, r3, #20
    cdb6:	4022      	ands	r2, r4
    cdb8:	4313      	orrs	r3, r2
    cdba:	005b      	lsls	r3, r3, #1
    cdbc:	07ed      	lsls	r5, r5, #31
    cdbe:	085b      	lsrs	r3, r3, #1
    cdc0:	432b      	orrs	r3, r5
    cdc2:	0019      	movs	r1, r3
    cdc4:	bd70      	pop	{r4, r5, r6, pc}
    cdc6:	0021      	movs	r1, r4
    cdc8:	4091      	lsls	r1, r2
    cdca:	000a      	movs	r2, r1
    cdcc:	210b      	movs	r1, #11
    cdce:	1a08      	subs	r0, r1, r0
    cdd0:	40c4      	lsrs	r4, r0
    cdd2:	055b      	lsls	r3, r3, #21
    cdd4:	0324      	lsls	r4, r4, #12
    cdd6:	0b24      	lsrs	r4, r4, #12
    cdd8:	0d5b      	lsrs	r3, r3, #21
    cdda:	e7e3      	b.n	cda4 <__aeabi_i2d+0x30>
    cddc:	2500      	movs	r5, #0
    cdde:	2300      	movs	r3, #0
    cde0:	2400      	movs	r4, #0
    cde2:	2200      	movs	r2, #0
    cde4:	e7de      	b.n	cda4 <__aeabi_i2d+0x30>
    cde6:	46c0      	nop			; (mov r8, r8)
    cde8:	0000041e 	.word	0x0000041e
    cdec:	00000433 	.word	0x00000433
    cdf0:	00000413 	.word	0x00000413
    cdf4:	800fffff 	.word	0x800fffff

0000cdf8 <__aeabi_ui2d>:
    cdf8:	b510      	push	{r4, lr}
    cdfa:	1e04      	subs	r4, r0, #0
    cdfc:	d028      	beq.n	ce50 <__aeabi_ui2d+0x58>
    cdfe:	f000 f90f 	bl	d020 <__clzsi2>
    ce02:	4b15      	ldr	r3, [pc, #84]	; (ce58 <__aeabi_ui2d+0x60>)
    ce04:	4a15      	ldr	r2, [pc, #84]	; (ce5c <__aeabi_ui2d+0x64>)
    ce06:	1a1b      	subs	r3, r3, r0
    ce08:	1ad2      	subs	r2, r2, r3
    ce0a:	2a1f      	cmp	r2, #31
    ce0c:	dd15      	ble.n	ce3a <__aeabi_ui2d+0x42>
    ce0e:	4a14      	ldr	r2, [pc, #80]	; (ce60 <__aeabi_ui2d+0x68>)
    ce10:	1ad2      	subs	r2, r2, r3
    ce12:	4094      	lsls	r4, r2
    ce14:	2200      	movs	r2, #0
    ce16:	0324      	lsls	r4, r4, #12
    ce18:	055b      	lsls	r3, r3, #21
    ce1a:	0b24      	lsrs	r4, r4, #12
    ce1c:	0d5b      	lsrs	r3, r3, #21
    ce1e:	2100      	movs	r1, #0
    ce20:	0010      	movs	r0, r2
    ce22:	0324      	lsls	r4, r4, #12
    ce24:	0d0a      	lsrs	r2, r1, #20
    ce26:	0b24      	lsrs	r4, r4, #12
    ce28:	0512      	lsls	r2, r2, #20
    ce2a:	4322      	orrs	r2, r4
    ce2c:	4c0d      	ldr	r4, [pc, #52]	; (ce64 <__aeabi_ui2d+0x6c>)
    ce2e:	051b      	lsls	r3, r3, #20
    ce30:	4022      	ands	r2, r4
    ce32:	4313      	orrs	r3, r2
    ce34:	005b      	lsls	r3, r3, #1
    ce36:	0859      	lsrs	r1, r3, #1
    ce38:	bd10      	pop	{r4, pc}
    ce3a:	0021      	movs	r1, r4
    ce3c:	4091      	lsls	r1, r2
    ce3e:	000a      	movs	r2, r1
    ce40:	210b      	movs	r1, #11
    ce42:	1a08      	subs	r0, r1, r0
    ce44:	40c4      	lsrs	r4, r0
    ce46:	055b      	lsls	r3, r3, #21
    ce48:	0324      	lsls	r4, r4, #12
    ce4a:	0b24      	lsrs	r4, r4, #12
    ce4c:	0d5b      	lsrs	r3, r3, #21
    ce4e:	e7e6      	b.n	ce1e <__aeabi_ui2d+0x26>
    ce50:	2300      	movs	r3, #0
    ce52:	2400      	movs	r4, #0
    ce54:	2200      	movs	r2, #0
    ce56:	e7e2      	b.n	ce1e <__aeabi_ui2d+0x26>
    ce58:	0000041e 	.word	0x0000041e
    ce5c:	00000433 	.word	0x00000433
    ce60:	00000413 	.word	0x00000413
    ce64:	800fffff 	.word	0x800fffff

0000ce68 <__aeabi_f2d>:
    ce68:	0041      	lsls	r1, r0, #1
    ce6a:	0e09      	lsrs	r1, r1, #24
    ce6c:	1c4b      	adds	r3, r1, #1
    ce6e:	b570      	push	{r4, r5, r6, lr}
    ce70:	b2db      	uxtb	r3, r3
    ce72:	0246      	lsls	r6, r0, #9
    ce74:	0a75      	lsrs	r5, r6, #9
    ce76:	0fc4      	lsrs	r4, r0, #31
    ce78:	2b01      	cmp	r3, #1
    ce7a:	dd14      	ble.n	cea6 <__aeabi_f2d+0x3e>
    ce7c:	23e0      	movs	r3, #224	; 0xe0
    ce7e:	009b      	lsls	r3, r3, #2
    ce80:	076d      	lsls	r5, r5, #29
    ce82:	0b36      	lsrs	r6, r6, #12
    ce84:	18cb      	adds	r3, r1, r3
    ce86:	2100      	movs	r1, #0
    ce88:	0d0a      	lsrs	r2, r1, #20
    ce8a:	0028      	movs	r0, r5
    ce8c:	0512      	lsls	r2, r2, #20
    ce8e:	4d1c      	ldr	r5, [pc, #112]	; (cf00 <__aeabi_f2d+0x98>)
    ce90:	4332      	orrs	r2, r6
    ce92:	055b      	lsls	r3, r3, #21
    ce94:	402a      	ands	r2, r5
    ce96:	085b      	lsrs	r3, r3, #1
    ce98:	4313      	orrs	r3, r2
    ce9a:	005b      	lsls	r3, r3, #1
    ce9c:	07e4      	lsls	r4, r4, #31
    ce9e:	085b      	lsrs	r3, r3, #1
    cea0:	4323      	orrs	r3, r4
    cea2:	0019      	movs	r1, r3
    cea4:	bd70      	pop	{r4, r5, r6, pc}
    cea6:	2900      	cmp	r1, #0
    cea8:	d114      	bne.n	ced4 <__aeabi_f2d+0x6c>
    ceaa:	2d00      	cmp	r5, #0
    ceac:	d01e      	beq.n	ceec <__aeabi_f2d+0x84>
    ceae:	0028      	movs	r0, r5
    ceb0:	f000 f8b6 	bl	d020 <__clzsi2>
    ceb4:	280a      	cmp	r0, #10
    ceb6:	dc1c      	bgt.n	cef2 <__aeabi_f2d+0x8a>
    ceb8:	230b      	movs	r3, #11
    ceba:	002a      	movs	r2, r5
    cebc:	1a1b      	subs	r3, r3, r0
    cebe:	40da      	lsrs	r2, r3
    cec0:	0003      	movs	r3, r0
    cec2:	3315      	adds	r3, #21
    cec4:	409d      	lsls	r5, r3
    cec6:	4b0f      	ldr	r3, [pc, #60]	; (cf04 <__aeabi_f2d+0x9c>)
    cec8:	0312      	lsls	r2, r2, #12
    ceca:	1a1b      	subs	r3, r3, r0
    cecc:	055b      	lsls	r3, r3, #21
    cece:	0b16      	lsrs	r6, r2, #12
    ced0:	0d5b      	lsrs	r3, r3, #21
    ced2:	e7d8      	b.n	ce86 <__aeabi_f2d+0x1e>
    ced4:	2d00      	cmp	r5, #0
    ced6:	d006      	beq.n	cee6 <__aeabi_f2d+0x7e>
    ced8:	0b32      	lsrs	r2, r6, #12
    ceda:	2680      	movs	r6, #128	; 0x80
    cedc:	0336      	lsls	r6, r6, #12
    cede:	076d      	lsls	r5, r5, #29
    cee0:	4316      	orrs	r6, r2
    cee2:	4b09      	ldr	r3, [pc, #36]	; (cf08 <__aeabi_f2d+0xa0>)
    cee4:	e7cf      	b.n	ce86 <__aeabi_f2d+0x1e>
    cee6:	4b08      	ldr	r3, [pc, #32]	; (cf08 <__aeabi_f2d+0xa0>)
    cee8:	2600      	movs	r6, #0
    ceea:	e7cc      	b.n	ce86 <__aeabi_f2d+0x1e>
    ceec:	2300      	movs	r3, #0
    ceee:	2600      	movs	r6, #0
    cef0:	e7c9      	b.n	ce86 <__aeabi_f2d+0x1e>
    cef2:	0003      	movs	r3, r0
    cef4:	002a      	movs	r2, r5
    cef6:	3b0b      	subs	r3, #11
    cef8:	409a      	lsls	r2, r3
    cefa:	2500      	movs	r5, #0
    cefc:	e7e3      	b.n	cec6 <__aeabi_f2d+0x5e>
    cefe:	46c0      	nop			; (mov r8, r8)
    cf00:	800fffff 	.word	0x800fffff
    cf04:	00000389 	.word	0x00000389
    cf08:	000007ff 	.word	0x000007ff

0000cf0c <__aeabi_d2f>:
    cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf0e:	004c      	lsls	r4, r1, #1
    cf10:	0d64      	lsrs	r4, r4, #21
    cf12:	030b      	lsls	r3, r1, #12
    cf14:	1c62      	adds	r2, r4, #1
    cf16:	0f45      	lsrs	r5, r0, #29
    cf18:	0a5b      	lsrs	r3, r3, #9
    cf1a:	0552      	lsls	r2, r2, #21
    cf1c:	432b      	orrs	r3, r5
    cf1e:	0fc9      	lsrs	r1, r1, #31
    cf20:	00c5      	lsls	r5, r0, #3
    cf22:	0d52      	lsrs	r2, r2, #21
    cf24:	2a01      	cmp	r2, #1
    cf26:	dd28      	ble.n	cf7a <__aeabi_d2f+0x6e>
    cf28:	4a3a      	ldr	r2, [pc, #232]	; (d014 <__aeabi_d2f+0x108>)
    cf2a:	18a6      	adds	r6, r4, r2
    cf2c:	2efe      	cmp	r6, #254	; 0xfe
    cf2e:	dc1b      	bgt.n	cf68 <__aeabi_d2f+0x5c>
    cf30:	2e00      	cmp	r6, #0
    cf32:	dd3e      	ble.n	cfb2 <__aeabi_d2f+0xa6>
    cf34:	0180      	lsls	r0, r0, #6
    cf36:	0002      	movs	r2, r0
    cf38:	1e50      	subs	r0, r2, #1
    cf3a:	4182      	sbcs	r2, r0
    cf3c:	0f6d      	lsrs	r5, r5, #29
    cf3e:	432a      	orrs	r2, r5
    cf40:	00db      	lsls	r3, r3, #3
    cf42:	4313      	orrs	r3, r2
    cf44:	075a      	lsls	r2, r3, #29
    cf46:	d004      	beq.n	cf52 <__aeabi_d2f+0x46>
    cf48:	220f      	movs	r2, #15
    cf4a:	401a      	ands	r2, r3
    cf4c:	2a04      	cmp	r2, #4
    cf4e:	d000      	beq.n	cf52 <__aeabi_d2f+0x46>
    cf50:	3304      	adds	r3, #4
    cf52:	2280      	movs	r2, #128	; 0x80
    cf54:	04d2      	lsls	r2, r2, #19
    cf56:	401a      	ands	r2, r3
    cf58:	d05a      	beq.n	d010 <__aeabi_d2f+0x104>
    cf5a:	3601      	adds	r6, #1
    cf5c:	2eff      	cmp	r6, #255	; 0xff
    cf5e:	d003      	beq.n	cf68 <__aeabi_d2f+0x5c>
    cf60:	019b      	lsls	r3, r3, #6
    cf62:	0a5b      	lsrs	r3, r3, #9
    cf64:	b2f4      	uxtb	r4, r6
    cf66:	e001      	b.n	cf6c <__aeabi_d2f+0x60>
    cf68:	24ff      	movs	r4, #255	; 0xff
    cf6a:	2300      	movs	r3, #0
    cf6c:	0258      	lsls	r0, r3, #9
    cf6e:	05e4      	lsls	r4, r4, #23
    cf70:	0a40      	lsrs	r0, r0, #9
    cf72:	07c9      	lsls	r1, r1, #31
    cf74:	4320      	orrs	r0, r4
    cf76:	4308      	orrs	r0, r1
    cf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf7a:	2c00      	cmp	r4, #0
    cf7c:	d007      	beq.n	cf8e <__aeabi_d2f+0x82>
    cf7e:	431d      	orrs	r5, r3
    cf80:	d0f2      	beq.n	cf68 <__aeabi_d2f+0x5c>
    cf82:	2080      	movs	r0, #128	; 0x80
    cf84:	00db      	lsls	r3, r3, #3
    cf86:	0480      	lsls	r0, r0, #18
    cf88:	4303      	orrs	r3, r0
    cf8a:	26ff      	movs	r6, #255	; 0xff
    cf8c:	e7da      	b.n	cf44 <__aeabi_d2f+0x38>
    cf8e:	432b      	orrs	r3, r5
    cf90:	d003      	beq.n	cf9a <__aeabi_d2f+0x8e>
    cf92:	2305      	movs	r3, #5
    cf94:	08db      	lsrs	r3, r3, #3
    cf96:	2cff      	cmp	r4, #255	; 0xff
    cf98:	d003      	beq.n	cfa2 <__aeabi_d2f+0x96>
    cf9a:	025b      	lsls	r3, r3, #9
    cf9c:	0a5b      	lsrs	r3, r3, #9
    cf9e:	b2e4      	uxtb	r4, r4
    cfa0:	e7e4      	b.n	cf6c <__aeabi_d2f+0x60>
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d032      	beq.n	d00c <__aeabi_d2f+0x100>
    cfa6:	2080      	movs	r0, #128	; 0x80
    cfa8:	03c0      	lsls	r0, r0, #15
    cfaa:	4303      	orrs	r3, r0
    cfac:	025b      	lsls	r3, r3, #9
    cfae:	0a5b      	lsrs	r3, r3, #9
    cfb0:	e7dc      	b.n	cf6c <__aeabi_d2f+0x60>
    cfb2:	0032      	movs	r2, r6
    cfb4:	3217      	adds	r2, #23
    cfb6:	db14      	blt.n	cfe2 <__aeabi_d2f+0xd6>
    cfb8:	2280      	movs	r2, #128	; 0x80
    cfba:	271e      	movs	r7, #30
    cfbc:	0412      	lsls	r2, r2, #16
    cfbe:	4313      	orrs	r3, r2
    cfc0:	1bbf      	subs	r7, r7, r6
    cfc2:	2f1f      	cmp	r7, #31
    cfc4:	dc0f      	bgt.n	cfe6 <__aeabi_d2f+0xda>
    cfc6:	4a14      	ldr	r2, [pc, #80]	; (d018 <__aeabi_d2f+0x10c>)
    cfc8:	4694      	mov	ip, r2
    cfca:	4464      	add	r4, ip
    cfcc:	002a      	movs	r2, r5
    cfce:	40a5      	lsls	r5, r4
    cfd0:	002e      	movs	r6, r5
    cfd2:	40a3      	lsls	r3, r4
    cfd4:	1e75      	subs	r5, r6, #1
    cfd6:	41ae      	sbcs	r6, r5
    cfd8:	40fa      	lsrs	r2, r7
    cfda:	4333      	orrs	r3, r6
    cfdc:	4313      	orrs	r3, r2
    cfde:	2600      	movs	r6, #0
    cfe0:	e7b0      	b.n	cf44 <__aeabi_d2f+0x38>
    cfe2:	2400      	movs	r4, #0
    cfe4:	e7d5      	b.n	cf92 <__aeabi_d2f+0x86>
    cfe6:	2202      	movs	r2, #2
    cfe8:	4252      	negs	r2, r2
    cfea:	1b96      	subs	r6, r2, r6
    cfec:	001a      	movs	r2, r3
    cfee:	40f2      	lsrs	r2, r6
    cff0:	2f20      	cmp	r7, #32
    cff2:	d009      	beq.n	d008 <__aeabi_d2f+0xfc>
    cff4:	4809      	ldr	r0, [pc, #36]	; (d01c <__aeabi_d2f+0x110>)
    cff6:	4684      	mov	ip, r0
    cff8:	4464      	add	r4, ip
    cffa:	40a3      	lsls	r3, r4
    cffc:	432b      	orrs	r3, r5
    cffe:	1e5d      	subs	r5, r3, #1
    d000:	41ab      	sbcs	r3, r5
    d002:	2600      	movs	r6, #0
    d004:	4313      	orrs	r3, r2
    d006:	e79d      	b.n	cf44 <__aeabi_d2f+0x38>
    d008:	2300      	movs	r3, #0
    d00a:	e7f7      	b.n	cffc <__aeabi_d2f+0xf0>
    d00c:	2300      	movs	r3, #0
    d00e:	e7ad      	b.n	cf6c <__aeabi_d2f+0x60>
    d010:	0034      	movs	r4, r6
    d012:	e7bf      	b.n	cf94 <__aeabi_d2f+0x88>
    d014:	fffffc80 	.word	0xfffffc80
    d018:	fffffc82 	.word	0xfffffc82
    d01c:	fffffca2 	.word	0xfffffca2

0000d020 <__clzsi2>:
    d020:	211c      	movs	r1, #28
    d022:	2301      	movs	r3, #1
    d024:	041b      	lsls	r3, r3, #16
    d026:	4298      	cmp	r0, r3
    d028:	d301      	bcc.n	d02e <__clzsi2+0xe>
    d02a:	0c00      	lsrs	r0, r0, #16
    d02c:	3910      	subs	r1, #16
    d02e:	0a1b      	lsrs	r3, r3, #8
    d030:	4298      	cmp	r0, r3
    d032:	d301      	bcc.n	d038 <__clzsi2+0x18>
    d034:	0a00      	lsrs	r0, r0, #8
    d036:	3908      	subs	r1, #8
    d038:	091b      	lsrs	r3, r3, #4
    d03a:	4298      	cmp	r0, r3
    d03c:	d301      	bcc.n	d042 <__clzsi2+0x22>
    d03e:	0900      	lsrs	r0, r0, #4
    d040:	3904      	subs	r1, #4
    d042:	a202      	add	r2, pc, #8	; (adr r2, d04c <__clzsi2+0x2c>)
    d044:	5c10      	ldrb	r0, [r2, r0]
    d046:	1840      	adds	r0, r0, r1
    d048:	4770      	bx	lr
    d04a:	46c0      	nop			; (mov r8, r8)
    d04c:	02020304 	.word	0x02020304
    d050:	01010101 	.word	0x01010101
	...

0000d05c <__clzdi2>:
    d05c:	b510      	push	{r4, lr}
    d05e:	2900      	cmp	r1, #0
    d060:	d103      	bne.n	d06a <__clzdi2+0xe>
    d062:	f7ff ffdd 	bl	d020 <__clzsi2>
    d066:	3020      	adds	r0, #32
    d068:	e002      	b.n	d070 <__clzdi2+0x14>
    d06a:	1c08      	adds	r0, r1, #0
    d06c:	f7ff ffd8 	bl	d020 <__clzsi2>
    d070:	bd10      	pop	{r4, pc}
    d072:	46c0      	nop			; (mov r8, r8)

0000d074 <__libc_init_array>:
    d074:	b570      	push	{r4, r5, r6, lr}
    d076:	2600      	movs	r6, #0
    d078:	4d0c      	ldr	r5, [pc, #48]	; (d0ac <__libc_init_array+0x38>)
    d07a:	4c0d      	ldr	r4, [pc, #52]	; (d0b0 <__libc_init_array+0x3c>)
    d07c:	1b64      	subs	r4, r4, r5
    d07e:	10a4      	asrs	r4, r4, #2
    d080:	42a6      	cmp	r6, r4
    d082:	d109      	bne.n	d098 <__libc_init_array+0x24>
    d084:	2600      	movs	r6, #0
    d086:	f000 feed 	bl	de64 <_init>
    d08a:	4d0a      	ldr	r5, [pc, #40]	; (d0b4 <__libc_init_array+0x40>)
    d08c:	4c0a      	ldr	r4, [pc, #40]	; (d0b8 <__libc_init_array+0x44>)
    d08e:	1b64      	subs	r4, r4, r5
    d090:	10a4      	asrs	r4, r4, #2
    d092:	42a6      	cmp	r6, r4
    d094:	d105      	bne.n	d0a2 <__libc_init_array+0x2e>
    d096:	bd70      	pop	{r4, r5, r6, pc}
    d098:	00b3      	lsls	r3, r6, #2
    d09a:	58eb      	ldr	r3, [r5, r3]
    d09c:	4798      	blx	r3
    d09e:	3601      	adds	r6, #1
    d0a0:	e7ee      	b.n	d080 <__libc_init_array+0xc>
    d0a2:	00b3      	lsls	r3, r6, #2
    d0a4:	58eb      	ldr	r3, [r5, r3]
    d0a6:	4798      	blx	r3
    d0a8:	3601      	adds	r6, #1
    d0aa:	e7f2      	b.n	d092 <__libc_init_array+0x1e>
    d0ac:	0000de70 	.word	0x0000de70
    d0b0:	0000de70 	.word	0x0000de70
    d0b4:	0000de70 	.word	0x0000de70
    d0b8:	0000de74 	.word	0x0000de74

0000d0bc <memcpy>:
    d0bc:	2300      	movs	r3, #0
    d0be:	b510      	push	{r4, lr}
    d0c0:	429a      	cmp	r2, r3
    d0c2:	d100      	bne.n	d0c6 <memcpy+0xa>
    d0c4:	bd10      	pop	{r4, pc}
    d0c6:	5ccc      	ldrb	r4, [r1, r3]
    d0c8:	54c4      	strb	r4, [r0, r3]
    d0ca:	3301      	adds	r3, #1
    d0cc:	e7f8      	b.n	d0c0 <memcpy+0x4>

0000d0ce <memset>:
    d0ce:	0003      	movs	r3, r0
    d0d0:	1882      	adds	r2, r0, r2
    d0d2:	4293      	cmp	r3, r2
    d0d4:	d100      	bne.n	d0d8 <memset+0xa>
    d0d6:	4770      	bx	lr
    d0d8:	7019      	strb	r1, [r3, #0]
    d0da:	3301      	adds	r3, #1
    d0dc:	e7f9      	b.n	d0d2 <memset+0x4>
	...

0000d0e0 <sniprintf>:
    d0e0:	b40c      	push	{r2, r3}
    d0e2:	b530      	push	{r4, r5, lr}
    d0e4:	4b16      	ldr	r3, [pc, #88]	; (d140 <sniprintf+0x60>)
    d0e6:	b09d      	sub	sp, #116	; 0x74
    d0e8:	1e0c      	subs	r4, r1, #0
    d0ea:	681d      	ldr	r5, [r3, #0]
    d0ec:	da08      	bge.n	d100 <sniprintf+0x20>
    d0ee:	238b      	movs	r3, #139	; 0x8b
    d0f0:	2001      	movs	r0, #1
    d0f2:	602b      	str	r3, [r5, #0]
    d0f4:	4240      	negs	r0, r0
    d0f6:	b01d      	add	sp, #116	; 0x74
    d0f8:	bc30      	pop	{r4, r5}
    d0fa:	bc08      	pop	{r3}
    d0fc:	b002      	add	sp, #8
    d0fe:	4718      	bx	r3
    d100:	2382      	movs	r3, #130	; 0x82
    d102:	a902      	add	r1, sp, #8
    d104:	009b      	lsls	r3, r3, #2
    d106:	818b      	strh	r3, [r1, #12]
    d108:	2300      	movs	r3, #0
    d10a:	9002      	str	r0, [sp, #8]
    d10c:	6108      	str	r0, [r1, #16]
    d10e:	429c      	cmp	r4, r3
    d110:	d000      	beq.n	d114 <sniprintf+0x34>
    d112:	1e63      	subs	r3, r4, #1
    d114:	608b      	str	r3, [r1, #8]
    d116:	614b      	str	r3, [r1, #20]
    d118:	2301      	movs	r3, #1
    d11a:	425b      	negs	r3, r3
    d11c:	81cb      	strh	r3, [r1, #14]
    d11e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d120:	ab21      	add	r3, sp, #132	; 0x84
    d122:	0028      	movs	r0, r5
    d124:	9301      	str	r3, [sp, #4]
    d126:	f000 f899 	bl	d25c <_svfiprintf_r>
    d12a:	1c43      	adds	r3, r0, #1
    d12c:	da01      	bge.n	d132 <sniprintf+0x52>
    d12e:	238b      	movs	r3, #139	; 0x8b
    d130:	602b      	str	r3, [r5, #0]
    d132:	2c00      	cmp	r4, #0
    d134:	d0df      	beq.n	d0f6 <sniprintf+0x16>
    d136:	2300      	movs	r3, #0
    d138:	9a02      	ldr	r2, [sp, #8]
    d13a:	7013      	strb	r3, [r2, #0]
    d13c:	e7db      	b.n	d0f6 <sniprintf+0x16>
    d13e:	46c0      	nop			; (mov r8, r8)
    d140:	20000120 	.word	0x20000120

0000d144 <siprintf>:
    d144:	b40e      	push	{r1, r2, r3}
    d146:	b510      	push	{r4, lr}
    d148:	b09d      	sub	sp, #116	; 0x74
    d14a:	a902      	add	r1, sp, #8
    d14c:	9002      	str	r0, [sp, #8]
    d14e:	6108      	str	r0, [r1, #16]
    d150:	480b      	ldr	r0, [pc, #44]	; (d180 <siprintf+0x3c>)
    d152:	2482      	movs	r4, #130	; 0x82
    d154:	6088      	str	r0, [r1, #8]
    d156:	6148      	str	r0, [r1, #20]
    d158:	2001      	movs	r0, #1
    d15a:	4240      	negs	r0, r0
    d15c:	ab1f      	add	r3, sp, #124	; 0x7c
    d15e:	81c8      	strh	r0, [r1, #14]
    d160:	4808      	ldr	r0, [pc, #32]	; (d184 <siprintf+0x40>)
    d162:	cb04      	ldmia	r3!, {r2}
    d164:	00a4      	lsls	r4, r4, #2
    d166:	6800      	ldr	r0, [r0, #0]
    d168:	9301      	str	r3, [sp, #4]
    d16a:	818c      	strh	r4, [r1, #12]
    d16c:	f000 f876 	bl	d25c <_svfiprintf_r>
    d170:	2300      	movs	r3, #0
    d172:	9a02      	ldr	r2, [sp, #8]
    d174:	7013      	strb	r3, [r2, #0]
    d176:	b01d      	add	sp, #116	; 0x74
    d178:	bc10      	pop	{r4}
    d17a:	bc08      	pop	{r3}
    d17c:	b003      	add	sp, #12
    d17e:	4718      	bx	r3
    d180:	7fffffff 	.word	0x7fffffff
    d184:	20000120 	.word	0x20000120

0000d188 <strlen>:
    d188:	2300      	movs	r3, #0
    d18a:	5cc2      	ldrb	r2, [r0, r3]
    d18c:	3301      	adds	r3, #1
    d18e:	2a00      	cmp	r2, #0
    d190:	d1fb      	bne.n	d18a <strlen+0x2>
    d192:	1e58      	subs	r0, r3, #1
    d194:	4770      	bx	lr
	...

0000d198 <__ssputs_r>:
    d198:	b5f0      	push	{r4, r5, r6, r7, lr}
    d19a:	688e      	ldr	r6, [r1, #8]
    d19c:	b085      	sub	sp, #20
    d19e:	0007      	movs	r7, r0
    d1a0:	000c      	movs	r4, r1
    d1a2:	9203      	str	r2, [sp, #12]
    d1a4:	9301      	str	r3, [sp, #4]
    d1a6:	429e      	cmp	r6, r3
    d1a8:	d839      	bhi.n	d21e <__ssputs_r+0x86>
    d1aa:	2390      	movs	r3, #144	; 0x90
    d1ac:	898a      	ldrh	r2, [r1, #12]
    d1ae:	00db      	lsls	r3, r3, #3
    d1b0:	421a      	tst	r2, r3
    d1b2:	d034      	beq.n	d21e <__ssputs_r+0x86>
    d1b4:	2503      	movs	r5, #3
    d1b6:	6909      	ldr	r1, [r1, #16]
    d1b8:	6823      	ldr	r3, [r4, #0]
    d1ba:	1a5b      	subs	r3, r3, r1
    d1bc:	9302      	str	r3, [sp, #8]
    d1be:	6963      	ldr	r3, [r4, #20]
    d1c0:	9802      	ldr	r0, [sp, #8]
    d1c2:	435d      	muls	r5, r3
    d1c4:	0feb      	lsrs	r3, r5, #31
    d1c6:	195d      	adds	r5, r3, r5
    d1c8:	9b01      	ldr	r3, [sp, #4]
    d1ca:	106d      	asrs	r5, r5, #1
    d1cc:	3301      	adds	r3, #1
    d1ce:	181b      	adds	r3, r3, r0
    d1d0:	42ab      	cmp	r3, r5
    d1d2:	d900      	bls.n	d1d6 <__ssputs_r+0x3e>
    d1d4:	001d      	movs	r5, r3
    d1d6:	0553      	lsls	r3, r2, #21
    d1d8:	d532      	bpl.n	d240 <__ssputs_r+0xa8>
    d1da:	0029      	movs	r1, r5
    d1dc:	0038      	movs	r0, r7
    d1de:	f000 fb31 	bl	d844 <_malloc_r>
    d1e2:	1e06      	subs	r6, r0, #0
    d1e4:	d109      	bne.n	d1fa <__ssputs_r+0x62>
    d1e6:	230c      	movs	r3, #12
    d1e8:	603b      	str	r3, [r7, #0]
    d1ea:	2340      	movs	r3, #64	; 0x40
    d1ec:	2001      	movs	r0, #1
    d1ee:	89a2      	ldrh	r2, [r4, #12]
    d1f0:	4240      	negs	r0, r0
    d1f2:	4313      	orrs	r3, r2
    d1f4:	81a3      	strh	r3, [r4, #12]
    d1f6:	b005      	add	sp, #20
    d1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1fa:	9a02      	ldr	r2, [sp, #8]
    d1fc:	6921      	ldr	r1, [r4, #16]
    d1fe:	f7ff ff5d 	bl	d0bc <memcpy>
    d202:	89a3      	ldrh	r3, [r4, #12]
    d204:	4a14      	ldr	r2, [pc, #80]	; (d258 <__ssputs_r+0xc0>)
    d206:	401a      	ands	r2, r3
    d208:	2380      	movs	r3, #128	; 0x80
    d20a:	4313      	orrs	r3, r2
    d20c:	81a3      	strh	r3, [r4, #12]
    d20e:	9b02      	ldr	r3, [sp, #8]
    d210:	6126      	str	r6, [r4, #16]
    d212:	18f6      	adds	r6, r6, r3
    d214:	6026      	str	r6, [r4, #0]
    d216:	6165      	str	r5, [r4, #20]
    d218:	9e01      	ldr	r6, [sp, #4]
    d21a:	1aed      	subs	r5, r5, r3
    d21c:	60a5      	str	r5, [r4, #8]
    d21e:	9b01      	ldr	r3, [sp, #4]
    d220:	42b3      	cmp	r3, r6
    d222:	d200      	bcs.n	d226 <__ssputs_r+0x8e>
    d224:	001e      	movs	r6, r3
    d226:	0032      	movs	r2, r6
    d228:	9903      	ldr	r1, [sp, #12]
    d22a:	6820      	ldr	r0, [r4, #0]
    d22c:	f000 faad 	bl	d78a <memmove>
    d230:	68a3      	ldr	r3, [r4, #8]
    d232:	2000      	movs	r0, #0
    d234:	1b9b      	subs	r3, r3, r6
    d236:	60a3      	str	r3, [r4, #8]
    d238:	6823      	ldr	r3, [r4, #0]
    d23a:	199e      	adds	r6, r3, r6
    d23c:	6026      	str	r6, [r4, #0]
    d23e:	e7da      	b.n	d1f6 <__ssputs_r+0x5e>
    d240:	002a      	movs	r2, r5
    d242:	0038      	movs	r0, r7
    d244:	f000 fb5c 	bl	d900 <_realloc_r>
    d248:	1e06      	subs	r6, r0, #0
    d24a:	d1e0      	bne.n	d20e <__ssputs_r+0x76>
    d24c:	6921      	ldr	r1, [r4, #16]
    d24e:	0038      	movs	r0, r7
    d250:	f000 faae 	bl	d7b0 <_free_r>
    d254:	e7c7      	b.n	d1e6 <__ssputs_r+0x4e>
    d256:	46c0      	nop			; (mov r8, r8)
    d258:	fffffb7f 	.word	0xfffffb7f

0000d25c <_svfiprintf_r>:
    d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d25e:	b09f      	sub	sp, #124	; 0x7c
    d260:	9002      	str	r0, [sp, #8]
    d262:	9305      	str	r3, [sp, #20]
    d264:	898b      	ldrh	r3, [r1, #12]
    d266:	000f      	movs	r7, r1
    d268:	0016      	movs	r6, r2
    d26a:	061b      	lsls	r3, r3, #24
    d26c:	d511      	bpl.n	d292 <_svfiprintf_r+0x36>
    d26e:	690b      	ldr	r3, [r1, #16]
    d270:	2b00      	cmp	r3, #0
    d272:	d10e      	bne.n	d292 <_svfiprintf_r+0x36>
    d274:	2140      	movs	r1, #64	; 0x40
    d276:	f000 fae5 	bl	d844 <_malloc_r>
    d27a:	6038      	str	r0, [r7, #0]
    d27c:	6138      	str	r0, [r7, #16]
    d27e:	2800      	cmp	r0, #0
    d280:	d105      	bne.n	d28e <_svfiprintf_r+0x32>
    d282:	230c      	movs	r3, #12
    d284:	9a02      	ldr	r2, [sp, #8]
    d286:	3801      	subs	r0, #1
    d288:	6013      	str	r3, [r2, #0]
    d28a:	b01f      	add	sp, #124	; 0x7c
    d28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d28e:	2340      	movs	r3, #64	; 0x40
    d290:	617b      	str	r3, [r7, #20]
    d292:	2300      	movs	r3, #0
    d294:	ad06      	add	r5, sp, #24
    d296:	616b      	str	r3, [r5, #20]
    d298:	3320      	adds	r3, #32
    d29a:	766b      	strb	r3, [r5, #25]
    d29c:	3310      	adds	r3, #16
    d29e:	76ab      	strb	r3, [r5, #26]
    d2a0:	0034      	movs	r4, r6
    d2a2:	7823      	ldrb	r3, [r4, #0]
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d147      	bne.n	d338 <_svfiprintf_r+0xdc>
    d2a8:	1ba3      	subs	r3, r4, r6
    d2aa:	9304      	str	r3, [sp, #16]
    d2ac:	d00d      	beq.n	d2ca <_svfiprintf_r+0x6e>
    d2ae:	1ba3      	subs	r3, r4, r6
    d2b0:	0032      	movs	r2, r6
    d2b2:	0039      	movs	r1, r7
    d2b4:	9802      	ldr	r0, [sp, #8]
    d2b6:	f7ff ff6f 	bl	d198 <__ssputs_r>
    d2ba:	1c43      	adds	r3, r0, #1
    d2bc:	d100      	bne.n	d2c0 <_svfiprintf_r+0x64>
    d2be:	e0b5      	b.n	d42c <_svfiprintf_r+0x1d0>
    d2c0:	696a      	ldr	r2, [r5, #20]
    d2c2:	9b04      	ldr	r3, [sp, #16]
    d2c4:	4694      	mov	ip, r2
    d2c6:	4463      	add	r3, ip
    d2c8:	616b      	str	r3, [r5, #20]
    d2ca:	7823      	ldrb	r3, [r4, #0]
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d100      	bne.n	d2d2 <_svfiprintf_r+0x76>
    d2d0:	e0ac      	b.n	d42c <_svfiprintf_r+0x1d0>
    d2d2:	2201      	movs	r2, #1
    d2d4:	2300      	movs	r3, #0
    d2d6:	4252      	negs	r2, r2
    d2d8:	606a      	str	r2, [r5, #4]
    d2da:	a902      	add	r1, sp, #8
    d2dc:	3254      	adds	r2, #84	; 0x54
    d2de:	1852      	adds	r2, r2, r1
    d2e0:	3401      	adds	r4, #1
    d2e2:	602b      	str	r3, [r5, #0]
    d2e4:	60eb      	str	r3, [r5, #12]
    d2e6:	60ab      	str	r3, [r5, #8]
    d2e8:	7013      	strb	r3, [r2, #0]
    d2ea:	65ab      	str	r3, [r5, #88]	; 0x58
    d2ec:	4e58      	ldr	r6, [pc, #352]	; (d450 <_svfiprintf_r+0x1f4>)
    d2ee:	2205      	movs	r2, #5
    d2f0:	7821      	ldrb	r1, [r4, #0]
    d2f2:	0030      	movs	r0, r6
    d2f4:	f000 fa3e 	bl	d774 <memchr>
    d2f8:	1c62      	adds	r2, r4, #1
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d120      	bne.n	d340 <_svfiprintf_r+0xe4>
    d2fe:	6829      	ldr	r1, [r5, #0]
    d300:	06cb      	lsls	r3, r1, #27
    d302:	d504      	bpl.n	d30e <_svfiprintf_r+0xb2>
    d304:	2353      	movs	r3, #83	; 0x53
    d306:	ae02      	add	r6, sp, #8
    d308:	3020      	adds	r0, #32
    d30a:	199b      	adds	r3, r3, r6
    d30c:	7018      	strb	r0, [r3, #0]
    d30e:	070b      	lsls	r3, r1, #28
    d310:	d504      	bpl.n	d31c <_svfiprintf_r+0xc0>
    d312:	2353      	movs	r3, #83	; 0x53
    d314:	202b      	movs	r0, #43	; 0x2b
    d316:	ae02      	add	r6, sp, #8
    d318:	199b      	adds	r3, r3, r6
    d31a:	7018      	strb	r0, [r3, #0]
    d31c:	7823      	ldrb	r3, [r4, #0]
    d31e:	2b2a      	cmp	r3, #42	; 0x2a
    d320:	d016      	beq.n	d350 <_svfiprintf_r+0xf4>
    d322:	2000      	movs	r0, #0
    d324:	210a      	movs	r1, #10
    d326:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d328:	7822      	ldrb	r2, [r4, #0]
    d32a:	3a30      	subs	r2, #48	; 0x30
    d32c:	2a09      	cmp	r2, #9
    d32e:	d955      	bls.n	d3dc <_svfiprintf_r+0x180>
    d330:	2800      	cmp	r0, #0
    d332:	d015      	beq.n	d360 <_svfiprintf_r+0x104>
    d334:	9309      	str	r3, [sp, #36]	; 0x24
    d336:	e013      	b.n	d360 <_svfiprintf_r+0x104>
    d338:	2b25      	cmp	r3, #37	; 0x25
    d33a:	d0b5      	beq.n	d2a8 <_svfiprintf_r+0x4c>
    d33c:	3401      	adds	r4, #1
    d33e:	e7b0      	b.n	d2a2 <_svfiprintf_r+0x46>
    d340:	2301      	movs	r3, #1
    d342:	1b80      	subs	r0, r0, r6
    d344:	4083      	lsls	r3, r0
    d346:	6829      	ldr	r1, [r5, #0]
    d348:	0014      	movs	r4, r2
    d34a:	430b      	orrs	r3, r1
    d34c:	602b      	str	r3, [r5, #0]
    d34e:	e7cd      	b.n	d2ec <_svfiprintf_r+0x90>
    d350:	9b05      	ldr	r3, [sp, #20]
    d352:	1d18      	adds	r0, r3, #4
    d354:	681b      	ldr	r3, [r3, #0]
    d356:	9005      	str	r0, [sp, #20]
    d358:	2b00      	cmp	r3, #0
    d35a:	db39      	blt.n	d3d0 <_svfiprintf_r+0x174>
    d35c:	9309      	str	r3, [sp, #36]	; 0x24
    d35e:	0014      	movs	r4, r2
    d360:	7823      	ldrb	r3, [r4, #0]
    d362:	2b2e      	cmp	r3, #46	; 0x2e
    d364:	d10b      	bne.n	d37e <_svfiprintf_r+0x122>
    d366:	7863      	ldrb	r3, [r4, #1]
    d368:	1c62      	adds	r2, r4, #1
    d36a:	2b2a      	cmp	r3, #42	; 0x2a
    d36c:	d13e      	bne.n	d3ec <_svfiprintf_r+0x190>
    d36e:	9b05      	ldr	r3, [sp, #20]
    d370:	3402      	adds	r4, #2
    d372:	1d1a      	adds	r2, r3, #4
    d374:	681b      	ldr	r3, [r3, #0]
    d376:	9205      	str	r2, [sp, #20]
    d378:	2b00      	cmp	r3, #0
    d37a:	db34      	blt.n	d3e6 <_svfiprintf_r+0x18a>
    d37c:	9307      	str	r3, [sp, #28]
    d37e:	4e35      	ldr	r6, [pc, #212]	; (d454 <_svfiprintf_r+0x1f8>)
    d380:	7821      	ldrb	r1, [r4, #0]
    d382:	2203      	movs	r2, #3
    d384:	0030      	movs	r0, r6
    d386:	f000 f9f5 	bl	d774 <memchr>
    d38a:	2800      	cmp	r0, #0
    d38c:	d006      	beq.n	d39c <_svfiprintf_r+0x140>
    d38e:	2340      	movs	r3, #64	; 0x40
    d390:	1b80      	subs	r0, r0, r6
    d392:	4083      	lsls	r3, r0
    d394:	682a      	ldr	r2, [r5, #0]
    d396:	3401      	adds	r4, #1
    d398:	4313      	orrs	r3, r2
    d39a:	602b      	str	r3, [r5, #0]
    d39c:	7821      	ldrb	r1, [r4, #0]
    d39e:	2206      	movs	r2, #6
    d3a0:	482d      	ldr	r0, [pc, #180]	; (d458 <_svfiprintf_r+0x1fc>)
    d3a2:	1c66      	adds	r6, r4, #1
    d3a4:	7629      	strb	r1, [r5, #24]
    d3a6:	f000 f9e5 	bl	d774 <memchr>
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d046      	beq.n	d43c <_svfiprintf_r+0x1e0>
    d3ae:	4b2b      	ldr	r3, [pc, #172]	; (d45c <_svfiprintf_r+0x200>)
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d12f      	bne.n	d414 <_svfiprintf_r+0x1b8>
    d3b4:	6829      	ldr	r1, [r5, #0]
    d3b6:	9b05      	ldr	r3, [sp, #20]
    d3b8:	2207      	movs	r2, #7
    d3ba:	05c9      	lsls	r1, r1, #23
    d3bc:	d528      	bpl.n	d410 <_svfiprintf_r+0x1b4>
    d3be:	189b      	adds	r3, r3, r2
    d3c0:	4393      	bics	r3, r2
    d3c2:	3308      	adds	r3, #8
    d3c4:	9305      	str	r3, [sp, #20]
    d3c6:	696b      	ldr	r3, [r5, #20]
    d3c8:	9a03      	ldr	r2, [sp, #12]
    d3ca:	189b      	adds	r3, r3, r2
    d3cc:	616b      	str	r3, [r5, #20]
    d3ce:	e767      	b.n	d2a0 <_svfiprintf_r+0x44>
    d3d0:	425b      	negs	r3, r3
    d3d2:	60eb      	str	r3, [r5, #12]
    d3d4:	2302      	movs	r3, #2
    d3d6:	430b      	orrs	r3, r1
    d3d8:	602b      	str	r3, [r5, #0]
    d3da:	e7c0      	b.n	d35e <_svfiprintf_r+0x102>
    d3dc:	434b      	muls	r3, r1
    d3de:	3401      	adds	r4, #1
    d3e0:	189b      	adds	r3, r3, r2
    d3e2:	2001      	movs	r0, #1
    d3e4:	e7a0      	b.n	d328 <_svfiprintf_r+0xcc>
    d3e6:	2301      	movs	r3, #1
    d3e8:	425b      	negs	r3, r3
    d3ea:	e7c7      	b.n	d37c <_svfiprintf_r+0x120>
    d3ec:	2300      	movs	r3, #0
    d3ee:	0014      	movs	r4, r2
    d3f0:	200a      	movs	r0, #10
    d3f2:	001a      	movs	r2, r3
    d3f4:	606b      	str	r3, [r5, #4]
    d3f6:	7821      	ldrb	r1, [r4, #0]
    d3f8:	3930      	subs	r1, #48	; 0x30
    d3fa:	2909      	cmp	r1, #9
    d3fc:	d903      	bls.n	d406 <_svfiprintf_r+0x1aa>
    d3fe:	2b00      	cmp	r3, #0
    d400:	d0bd      	beq.n	d37e <_svfiprintf_r+0x122>
    d402:	9207      	str	r2, [sp, #28]
    d404:	e7bb      	b.n	d37e <_svfiprintf_r+0x122>
    d406:	4342      	muls	r2, r0
    d408:	3401      	adds	r4, #1
    d40a:	1852      	adds	r2, r2, r1
    d40c:	2301      	movs	r3, #1
    d40e:	e7f2      	b.n	d3f6 <_svfiprintf_r+0x19a>
    d410:	3307      	adds	r3, #7
    d412:	e7d5      	b.n	d3c0 <_svfiprintf_r+0x164>
    d414:	ab05      	add	r3, sp, #20
    d416:	9300      	str	r3, [sp, #0]
    d418:	003a      	movs	r2, r7
    d41a:	4b11      	ldr	r3, [pc, #68]	; (d460 <_svfiprintf_r+0x204>)
    d41c:	0029      	movs	r1, r5
    d41e:	9802      	ldr	r0, [sp, #8]
    d420:	e000      	b.n	d424 <_svfiprintf_r+0x1c8>
    d422:	bf00      	nop
    d424:	9003      	str	r0, [sp, #12]
    d426:	9b03      	ldr	r3, [sp, #12]
    d428:	3301      	adds	r3, #1
    d42a:	d1cc      	bne.n	d3c6 <_svfiprintf_r+0x16a>
    d42c:	89bb      	ldrh	r3, [r7, #12]
    d42e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d430:	065b      	lsls	r3, r3, #25
    d432:	d400      	bmi.n	d436 <_svfiprintf_r+0x1da>
    d434:	e729      	b.n	d28a <_svfiprintf_r+0x2e>
    d436:	2001      	movs	r0, #1
    d438:	4240      	negs	r0, r0
    d43a:	e726      	b.n	d28a <_svfiprintf_r+0x2e>
    d43c:	ab05      	add	r3, sp, #20
    d43e:	9300      	str	r3, [sp, #0]
    d440:	003a      	movs	r2, r7
    d442:	4b07      	ldr	r3, [pc, #28]	; (d460 <_svfiprintf_r+0x204>)
    d444:	0029      	movs	r1, r5
    d446:	9802      	ldr	r0, [sp, #8]
    d448:	f000 f87a 	bl	d540 <_printf_i>
    d44c:	e7ea      	b.n	d424 <_svfiprintf_r+0x1c8>
    d44e:	46c0      	nop			; (mov r8, r8)
    d450:	0000de30 	.word	0x0000de30
    d454:	0000de36 	.word	0x0000de36
    d458:	0000de3a 	.word	0x0000de3a
    d45c:	00000000 	.word	0x00000000
    d460:	0000d199 	.word	0x0000d199

0000d464 <_printf_common>:
    d464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d466:	0015      	movs	r5, r2
    d468:	9301      	str	r3, [sp, #4]
    d46a:	688a      	ldr	r2, [r1, #8]
    d46c:	690b      	ldr	r3, [r1, #16]
    d46e:	9000      	str	r0, [sp, #0]
    d470:	000c      	movs	r4, r1
    d472:	4293      	cmp	r3, r2
    d474:	da00      	bge.n	d478 <_printf_common+0x14>
    d476:	0013      	movs	r3, r2
    d478:	0022      	movs	r2, r4
    d47a:	602b      	str	r3, [r5, #0]
    d47c:	3243      	adds	r2, #67	; 0x43
    d47e:	7812      	ldrb	r2, [r2, #0]
    d480:	2a00      	cmp	r2, #0
    d482:	d001      	beq.n	d488 <_printf_common+0x24>
    d484:	3301      	adds	r3, #1
    d486:	602b      	str	r3, [r5, #0]
    d488:	6823      	ldr	r3, [r4, #0]
    d48a:	069b      	lsls	r3, r3, #26
    d48c:	d502      	bpl.n	d494 <_printf_common+0x30>
    d48e:	682b      	ldr	r3, [r5, #0]
    d490:	3302      	adds	r3, #2
    d492:	602b      	str	r3, [r5, #0]
    d494:	2706      	movs	r7, #6
    d496:	6823      	ldr	r3, [r4, #0]
    d498:	401f      	ands	r7, r3
    d49a:	d027      	beq.n	d4ec <_printf_common+0x88>
    d49c:	0023      	movs	r3, r4
    d49e:	3343      	adds	r3, #67	; 0x43
    d4a0:	781b      	ldrb	r3, [r3, #0]
    d4a2:	1e5a      	subs	r2, r3, #1
    d4a4:	4193      	sbcs	r3, r2
    d4a6:	6822      	ldr	r2, [r4, #0]
    d4a8:	0692      	lsls	r2, r2, #26
    d4aa:	d430      	bmi.n	d50e <_printf_common+0xaa>
    d4ac:	0022      	movs	r2, r4
    d4ae:	9901      	ldr	r1, [sp, #4]
    d4b0:	3243      	adds	r2, #67	; 0x43
    d4b2:	9800      	ldr	r0, [sp, #0]
    d4b4:	9e08      	ldr	r6, [sp, #32]
    d4b6:	47b0      	blx	r6
    d4b8:	1c43      	adds	r3, r0, #1
    d4ba:	d025      	beq.n	d508 <_printf_common+0xa4>
    d4bc:	2306      	movs	r3, #6
    d4be:	6820      	ldr	r0, [r4, #0]
    d4c0:	682a      	ldr	r2, [r5, #0]
    d4c2:	68e1      	ldr	r1, [r4, #12]
    d4c4:	4003      	ands	r3, r0
    d4c6:	2500      	movs	r5, #0
    d4c8:	2b04      	cmp	r3, #4
    d4ca:	d103      	bne.n	d4d4 <_printf_common+0x70>
    d4cc:	1a8d      	subs	r5, r1, r2
    d4ce:	43eb      	mvns	r3, r5
    d4d0:	17db      	asrs	r3, r3, #31
    d4d2:	401d      	ands	r5, r3
    d4d4:	68a3      	ldr	r3, [r4, #8]
    d4d6:	6922      	ldr	r2, [r4, #16]
    d4d8:	4293      	cmp	r3, r2
    d4da:	dd01      	ble.n	d4e0 <_printf_common+0x7c>
    d4dc:	1a9b      	subs	r3, r3, r2
    d4de:	18ed      	adds	r5, r5, r3
    d4e0:	2700      	movs	r7, #0
    d4e2:	42bd      	cmp	r5, r7
    d4e4:	d120      	bne.n	d528 <_printf_common+0xc4>
    d4e6:	2000      	movs	r0, #0
    d4e8:	e010      	b.n	d50c <_printf_common+0xa8>
    d4ea:	3701      	adds	r7, #1
    d4ec:	68e3      	ldr	r3, [r4, #12]
    d4ee:	682a      	ldr	r2, [r5, #0]
    d4f0:	1a9b      	subs	r3, r3, r2
    d4f2:	429f      	cmp	r7, r3
    d4f4:	dad2      	bge.n	d49c <_printf_common+0x38>
    d4f6:	0022      	movs	r2, r4
    d4f8:	2301      	movs	r3, #1
    d4fa:	3219      	adds	r2, #25
    d4fc:	9901      	ldr	r1, [sp, #4]
    d4fe:	9800      	ldr	r0, [sp, #0]
    d500:	9e08      	ldr	r6, [sp, #32]
    d502:	47b0      	blx	r6
    d504:	1c43      	adds	r3, r0, #1
    d506:	d1f0      	bne.n	d4ea <_printf_common+0x86>
    d508:	2001      	movs	r0, #1
    d50a:	4240      	negs	r0, r0
    d50c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d50e:	2030      	movs	r0, #48	; 0x30
    d510:	18e1      	adds	r1, r4, r3
    d512:	3143      	adds	r1, #67	; 0x43
    d514:	7008      	strb	r0, [r1, #0]
    d516:	0021      	movs	r1, r4
    d518:	1c5a      	adds	r2, r3, #1
    d51a:	3145      	adds	r1, #69	; 0x45
    d51c:	7809      	ldrb	r1, [r1, #0]
    d51e:	18a2      	adds	r2, r4, r2
    d520:	3243      	adds	r2, #67	; 0x43
    d522:	3302      	adds	r3, #2
    d524:	7011      	strb	r1, [r2, #0]
    d526:	e7c1      	b.n	d4ac <_printf_common+0x48>
    d528:	0022      	movs	r2, r4
    d52a:	2301      	movs	r3, #1
    d52c:	321a      	adds	r2, #26
    d52e:	9901      	ldr	r1, [sp, #4]
    d530:	9800      	ldr	r0, [sp, #0]
    d532:	9e08      	ldr	r6, [sp, #32]
    d534:	47b0      	blx	r6
    d536:	1c43      	adds	r3, r0, #1
    d538:	d0e6      	beq.n	d508 <_printf_common+0xa4>
    d53a:	3701      	adds	r7, #1
    d53c:	e7d1      	b.n	d4e2 <_printf_common+0x7e>
	...

0000d540 <_printf_i>:
    d540:	b5f0      	push	{r4, r5, r6, r7, lr}
    d542:	b08b      	sub	sp, #44	; 0x2c
    d544:	9206      	str	r2, [sp, #24]
    d546:	000a      	movs	r2, r1
    d548:	3243      	adds	r2, #67	; 0x43
    d54a:	9307      	str	r3, [sp, #28]
    d54c:	9005      	str	r0, [sp, #20]
    d54e:	9204      	str	r2, [sp, #16]
    d550:	7e0a      	ldrb	r2, [r1, #24]
    d552:	000c      	movs	r4, r1
    d554:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d556:	2a6e      	cmp	r2, #110	; 0x6e
    d558:	d100      	bne.n	d55c <_printf_i+0x1c>
    d55a:	e08f      	b.n	d67c <_printf_i+0x13c>
    d55c:	d817      	bhi.n	d58e <_printf_i+0x4e>
    d55e:	2a63      	cmp	r2, #99	; 0x63
    d560:	d02c      	beq.n	d5bc <_printf_i+0x7c>
    d562:	d808      	bhi.n	d576 <_printf_i+0x36>
    d564:	2a00      	cmp	r2, #0
    d566:	d100      	bne.n	d56a <_printf_i+0x2a>
    d568:	e099      	b.n	d69e <_printf_i+0x15e>
    d56a:	2a58      	cmp	r2, #88	; 0x58
    d56c:	d054      	beq.n	d618 <_printf_i+0xd8>
    d56e:	0026      	movs	r6, r4
    d570:	3642      	adds	r6, #66	; 0x42
    d572:	7032      	strb	r2, [r6, #0]
    d574:	e029      	b.n	d5ca <_printf_i+0x8a>
    d576:	2a64      	cmp	r2, #100	; 0x64
    d578:	d001      	beq.n	d57e <_printf_i+0x3e>
    d57a:	2a69      	cmp	r2, #105	; 0x69
    d57c:	d1f7      	bne.n	d56e <_printf_i+0x2e>
    d57e:	6821      	ldr	r1, [r4, #0]
    d580:	681a      	ldr	r2, [r3, #0]
    d582:	0608      	lsls	r0, r1, #24
    d584:	d523      	bpl.n	d5ce <_printf_i+0x8e>
    d586:	1d11      	adds	r1, r2, #4
    d588:	6019      	str	r1, [r3, #0]
    d58a:	6815      	ldr	r5, [r2, #0]
    d58c:	e025      	b.n	d5da <_printf_i+0x9a>
    d58e:	2a73      	cmp	r2, #115	; 0x73
    d590:	d100      	bne.n	d594 <_printf_i+0x54>
    d592:	e088      	b.n	d6a6 <_printf_i+0x166>
    d594:	d808      	bhi.n	d5a8 <_printf_i+0x68>
    d596:	2a6f      	cmp	r2, #111	; 0x6f
    d598:	d029      	beq.n	d5ee <_printf_i+0xae>
    d59a:	2a70      	cmp	r2, #112	; 0x70
    d59c:	d1e7      	bne.n	d56e <_printf_i+0x2e>
    d59e:	2220      	movs	r2, #32
    d5a0:	6809      	ldr	r1, [r1, #0]
    d5a2:	430a      	orrs	r2, r1
    d5a4:	6022      	str	r2, [r4, #0]
    d5a6:	e003      	b.n	d5b0 <_printf_i+0x70>
    d5a8:	2a75      	cmp	r2, #117	; 0x75
    d5aa:	d020      	beq.n	d5ee <_printf_i+0xae>
    d5ac:	2a78      	cmp	r2, #120	; 0x78
    d5ae:	d1de      	bne.n	d56e <_printf_i+0x2e>
    d5b0:	0022      	movs	r2, r4
    d5b2:	2178      	movs	r1, #120	; 0x78
    d5b4:	3245      	adds	r2, #69	; 0x45
    d5b6:	7011      	strb	r1, [r2, #0]
    d5b8:	4a6c      	ldr	r2, [pc, #432]	; (d76c <_printf_i+0x22c>)
    d5ba:	e030      	b.n	d61e <_printf_i+0xde>
    d5bc:	000e      	movs	r6, r1
    d5be:	681a      	ldr	r2, [r3, #0]
    d5c0:	3642      	adds	r6, #66	; 0x42
    d5c2:	1d11      	adds	r1, r2, #4
    d5c4:	6019      	str	r1, [r3, #0]
    d5c6:	6813      	ldr	r3, [r2, #0]
    d5c8:	7033      	strb	r3, [r6, #0]
    d5ca:	2301      	movs	r3, #1
    d5cc:	e079      	b.n	d6c2 <_printf_i+0x182>
    d5ce:	0649      	lsls	r1, r1, #25
    d5d0:	d5d9      	bpl.n	d586 <_printf_i+0x46>
    d5d2:	1d11      	adds	r1, r2, #4
    d5d4:	6019      	str	r1, [r3, #0]
    d5d6:	2300      	movs	r3, #0
    d5d8:	5ed5      	ldrsh	r5, [r2, r3]
    d5da:	2d00      	cmp	r5, #0
    d5dc:	da03      	bge.n	d5e6 <_printf_i+0xa6>
    d5de:	232d      	movs	r3, #45	; 0x2d
    d5e0:	9a04      	ldr	r2, [sp, #16]
    d5e2:	426d      	negs	r5, r5
    d5e4:	7013      	strb	r3, [r2, #0]
    d5e6:	4b62      	ldr	r3, [pc, #392]	; (d770 <_printf_i+0x230>)
    d5e8:	270a      	movs	r7, #10
    d5ea:	9303      	str	r3, [sp, #12]
    d5ec:	e02f      	b.n	d64e <_printf_i+0x10e>
    d5ee:	6820      	ldr	r0, [r4, #0]
    d5f0:	6819      	ldr	r1, [r3, #0]
    d5f2:	0605      	lsls	r5, r0, #24
    d5f4:	d503      	bpl.n	d5fe <_printf_i+0xbe>
    d5f6:	1d08      	adds	r0, r1, #4
    d5f8:	6018      	str	r0, [r3, #0]
    d5fa:	680d      	ldr	r5, [r1, #0]
    d5fc:	e005      	b.n	d60a <_printf_i+0xca>
    d5fe:	0640      	lsls	r0, r0, #25
    d600:	d5f9      	bpl.n	d5f6 <_printf_i+0xb6>
    d602:	680d      	ldr	r5, [r1, #0]
    d604:	1d08      	adds	r0, r1, #4
    d606:	6018      	str	r0, [r3, #0]
    d608:	b2ad      	uxth	r5, r5
    d60a:	4b59      	ldr	r3, [pc, #356]	; (d770 <_printf_i+0x230>)
    d60c:	2708      	movs	r7, #8
    d60e:	9303      	str	r3, [sp, #12]
    d610:	2a6f      	cmp	r2, #111	; 0x6f
    d612:	d018      	beq.n	d646 <_printf_i+0x106>
    d614:	270a      	movs	r7, #10
    d616:	e016      	b.n	d646 <_printf_i+0x106>
    d618:	3145      	adds	r1, #69	; 0x45
    d61a:	700a      	strb	r2, [r1, #0]
    d61c:	4a54      	ldr	r2, [pc, #336]	; (d770 <_printf_i+0x230>)
    d61e:	9203      	str	r2, [sp, #12]
    d620:	681a      	ldr	r2, [r3, #0]
    d622:	6821      	ldr	r1, [r4, #0]
    d624:	1d10      	adds	r0, r2, #4
    d626:	6018      	str	r0, [r3, #0]
    d628:	6815      	ldr	r5, [r2, #0]
    d62a:	0608      	lsls	r0, r1, #24
    d62c:	d522      	bpl.n	d674 <_printf_i+0x134>
    d62e:	07cb      	lsls	r3, r1, #31
    d630:	d502      	bpl.n	d638 <_printf_i+0xf8>
    d632:	2320      	movs	r3, #32
    d634:	4319      	orrs	r1, r3
    d636:	6021      	str	r1, [r4, #0]
    d638:	2710      	movs	r7, #16
    d63a:	2d00      	cmp	r5, #0
    d63c:	d103      	bne.n	d646 <_printf_i+0x106>
    d63e:	2320      	movs	r3, #32
    d640:	6822      	ldr	r2, [r4, #0]
    d642:	439a      	bics	r2, r3
    d644:	6022      	str	r2, [r4, #0]
    d646:	0023      	movs	r3, r4
    d648:	2200      	movs	r2, #0
    d64a:	3343      	adds	r3, #67	; 0x43
    d64c:	701a      	strb	r2, [r3, #0]
    d64e:	6863      	ldr	r3, [r4, #4]
    d650:	60a3      	str	r3, [r4, #8]
    d652:	2b00      	cmp	r3, #0
    d654:	db5c      	blt.n	d710 <_printf_i+0x1d0>
    d656:	2204      	movs	r2, #4
    d658:	6821      	ldr	r1, [r4, #0]
    d65a:	4391      	bics	r1, r2
    d65c:	6021      	str	r1, [r4, #0]
    d65e:	2d00      	cmp	r5, #0
    d660:	d158      	bne.n	d714 <_printf_i+0x1d4>
    d662:	9e04      	ldr	r6, [sp, #16]
    d664:	2b00      	cmp	r3, #0
    d666:	d064      	beq.n	d732 <_printf_i+0x1f2>
    d668:	0026      	movs	r6, r4
    d66a:	9b03      	ldr	r3, [sp, #12]
    d66c:	3642      	adds	r6, #66	; 0x42
    d66e:	781b      	ldrb	r3, [r3, #0]
    d670:	7033      	strb	r3, [r6, #0]
    d672:	e05e      	b.n	d732 <_printf_i+0x1f2>
    d674:	0648      	lsls	r0, r1, #25
    d676:	d5da      	bpl.n	d62e <_printf_i+0xee>
    d678:	b2ad      	uxth	r5, r5
    d67a:	e7d8      	b.n	d62e <_printf_i+0xee>
    d67c:	6809      	ldr	r1, [r1, #0]
    d67e:	681a      	ldr	r2, [r3, #0]
    d680:	0608      	lsls	r0, r1, #24
    d682:	d505      	bpl.n	d690 <_printf_i+0x150>
    d684:	1d11      	adds	r1, r2, #4
    d686:	6019      	str	r1, [r3, #0]
    d688:	6813      	ldr	r3, [r2, #0]
    d68a:	6962      	ldr	r2, [r4, #20]
    d68c:	601a      	str	r2, [r3, #0]
    d68e:	e006      	b.n	d69e <_printf_i+0x15e>
    d690:	0649      	lsls	r1, r1, #25
    d692:	d5f7      	bpl.n	d684 <_printf_i+0x144>
    d694:	1d11      	adds	r1, r2, #4
    d696:	6019      	str	r1, [r3, #0]
    d698:	6813      	ldr	r3, [r2, #0]
    d69a:	8aa2      	ldrh	r2, [r4, #20]
    d69c:	801a      	strh	r2, [r3, #0]
    d69e:	2300      	movs	r3, #0
    d6a0:	9e04      	ldr	r6, [sp, #16]
    d6a2:	6123      	str	r3, [r4, #16]
    d6a4:	e054      	b.n	d750 <_printf_i+0x210>
    d6a6:	681a      	ldr	r2, [r3, #0]
    d6a8:	1d11      	adds	r1, r2, #4
    d6aa:	6019      	str	r1, [r3, #0]
    d6ac:	6816      	ldr	r6, [r2, #0]
    d6ae:	2100      	movs	r1, #0
    d6b0:	6862      	ldr	r2, [r4, #4]
    d6b2:	0030      	movs	r0, r6
    d6b4:	f000 f85e 	bl	d774 <memchr>
    d6b8:	2800      	cmp	r0, #0
    d6ba:	d001      	beq.n	d6c0 <_printf_i+0x180>
    d6bc:	1b80      	subs	r0, r0, r6
    d6be:	6060      	str	r0, [r4, #4]
    d6c0:	6863      	ldr	r3, [r4, #4]
    d6c2:	6123      	str	r3, [r4, #16]
    d6c4:	2300      	movs	r3, #0
    d6c6:	9a04      	ldr	r2, [sp, #16]
    d6c8:	7013      	strb	r3, [r2, #0]
    d6ca:	e041      	b.n	d750 <_printf_i+0x210>
    d6cc:	6923      	ldr	r3, [r4, #16]
    d6ce:	0032      	movs	r2, r6
    d6d0:	9906      	ldr	r1, [sp, #24]
    d6d2:	9805      	ldr	r0, [sp, #20]
    d6d4:	9d07      	ldr	r5, [sp, #28]
    d6d6:	47a8      	blx	r5
    d6d8:	1c43      	adds	r3, r0, #1
    d6da:	d043      	beq.n	d764 <_printf_i+0x224>
    d6dc:	6823      	ldr	r3, [r4, #0]
    d6de:	2500      	movs	r5, #0
    d6e0:	079b      	lsls	r3, r3, #30
    d6e2:	d40f      	bmi.n	d704 <_printf_i+0x1c4>
    d6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6e6:	68e0      	ldr	r0, [r4, #12]
    d6e8:	4298      	cmp	r0, r3
    d6ea:	da3d      	bge.n	d768 <_printf_i+0x228>
    d6ec:	0018      	movs	r0, r3
    d6ee:	e03b      	b.n	d768 <_printf_i+0x228>
    d6f0:	0022      	movs	r2, r4
    d6f2:	2301      	movs	r3, #1
    d6f4:	3219      	adds	r2, #25
    d6f6:	9906      	ldr	r1, [sp, #24]
    d6f8:	9805      	ldr	r0, [sp, #20]
    d6fa:	9e07      	ldr	r6, [sp, #28]
    d6fc:	47b0      	blx	r6
    d6fe:	1c43      	adds	r3, r0, #1
    d700:	d030      	beq.n	d764 <_printf_i+0x224>
    d702:	3501      	adds	r5, #1
    d704:	68e3      	ldr	r3, [r4, #12]
    d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d708:	1a9b      	subs	r3, r3, r2
    d70a:	429d      	cmp	r5, r3
    d70c:	dbf0      	blt.n	d6f0 <_printf_i+0x1b0>
    d70e:	e7e9      	b.n	d6e4 <_printf_i+0x1a4>
    d710:	2d00      	cmp	r5, #0
    d712:	d0a9      	beq.n	d668 <_printf_i+0x128>
    d714:	9e04      	ldr	r6, [sp, #16]
    d716:	0028      	movs	r0, r5
    d718:	0039      	movs	r1, r7
    d71a:	f7fc fdcf 	bl	a2bc <__aeabi_uidivmod>
    d71e:	9b03      	ldr	r3, [sp, #12]
    d720:	3e01      	subs	r6, #1
    d722:	5c5b      	ldrb	r3, [r3, r1]
    d724:	0028      	movs	r0, r5
    d726:	7033      	strb	r3, [r6, #0]
    d728:	0039      	movs	r1, r7
    d72a:	f7fc fd41 	bl	a1b0 <__udivsi3>
    d72e:	1e05      	subs	r5, r0, #0
    d730:	d1f1      	bne.n	d716 <_printf_i+0x1d6>
    d732:	2f08      	cmp	r7, #8
    d734:	d109      	bne.n	d74a <_printf_i+0x20a>
    d736:	6823      	ldr	r3, [r4, #0]
    d738:	07db      	lsls	r3, r3, #31
    d73a:	d506      	bpl.n	d74a <_printf_i+0x20a>
    d73c:	6863      	ldr	r3, [r4, #4]
    d73e:	6922      	ldr	r2, [r4, #16]
    d740:	4293      	cmp	r3, r2
    d742:	dc02      	bgt.n	d74a <_printf_i+0x20a>
    d744:	2330      	movs	r3, #48	; 0x30
    d746:	3e01      	subs	r6, #1
    d748:	7033      	strb	r3, [r6, #0]
    d74a:	9b04      	ldr	r3, [sp, #16]
    d74c:	1b9b      	subs	r3, r3, r6
    d74e:	6123      	str	r3, [r4, #16]
    d750:	9b07      	ldr	r3, [sp, #28]
    d752:	aa09      	add	r2, sp, #36	; 0x24
    d754:	9300      	str	r3, [sp, #0]
    d756:	0021      	movs	r1, r4
    d758:	9b06      	ldr	r3, [sp, #24]
    d75a:	9805      	ldr	r0, [sp, #20]
    d75c:	f7ff fe82 	bl	d464 <_printf_common>
    d760:	1c43      	adds	r3, r0, #1
    d762:	d1b3      	bne.n	d6cc <_printf_i+0x18c>
    d764:	2001      	movs	r0, #1
    d766:	4240      	negs	r0, r0
    d768:	b00b      	add	sp, #44	; 0x2c
    d76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d76c:	0000de52 	.word	0x0000de52
    d770:	0000de41 	.word	0x0000de41

0000d774 <memchr>:
    d774:	b2c9      	uxtb	r1, r1
    d776:	1882      	adds	r2, r0, r2
    d778:	4290      	cmp	r0, r2
    d77a:	d101      	bne.n	d780 <memchr+0xc>
    d77c:	2000      	movs	r0, #0
    d77e:	4770      	bx	lr
    d780:	7803      	ldrb	r3, [r0, #0]
    d782:	428b      	cmp	r3, r1
    d784:	d0fb      	beq.n	d77e <memchr+0xa>
    d786:	3001      	adds	r0, #1
    d788:	e7f6      	b.n	d778 <memchr+0x4>

0000d78a <memmove>:
    d78a:	b510      	push	{r4, lr}
    d78c:	4288      	cmp	r0, r1
    d78e:	d902      	bls.n	d796 <memmove+0xc>
    d790:	188b      	adds	r3, r1, r2
    d792:	4298      	cmp	r0, r3
    d794:	d308      	bcc.n	d7a8 <memmove+0x1e>
    d796:	2300      	movs	r3, #0
    d798:	429a      	cmp	r2, r3
    d79a:	d007      	beq.n	d7ac <memmove+0x22>
    d79c:	5ccc      	ldrb	r4, [r1, r3]
    d79e:	54c4      	strb	r4, [r0, r3]
    d7a0:	3301      	adds	r3, #1
    d7a2:	e7f9      	b.n	d798 <memmove+0xe>
    d7a4:	5c8b      	ldrb	r3, [r1, r2]
    d7a6:	5483      	strb	r3, [r0, r2]
    d7a8:	3a01      	subs	r2, #1
    d7aa:	d2fb      	bcs.n	d7a4 <memmove+0x1a>
    d7ac:	bd10      	pop	{r4, pc}
	...

0000d7b0 <_free_r>:
    d7b0:	b570      	push	{r4, r5, r6, lr}
    d7b2:	0005      	movs	r5, r0
    d7b4:	2900      	cmp	r1, #0
    d7b6:	d010      	beq.n	d7da <_free_r+0x2a>
    d7b8:	1f0c      	subs	r4, r1, #4
    d7ba:	6823      	ldr	r3, [r4, #0]
    d7bc:	2b00      	cmp	r3, #0
    d7be:	da00      	bge.n	d7c2 <_free_r+0x12>
    d7c0:	18e4      	adds	r4, r4, r3
    d7c2:	0028      	movs	r0, r5
    d7c4:	f000 f8d4 	bl	d970 <__malloc_lock>
    d7c8:	4a1d      	ldr	r2, [pc, #116]	; (d840 <_free_r+0x90>)
    d7ca:	6813      	ldr	r3, [r2, #0]
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d105      	bne.n	d7dc <_free_r+0x2c>
    d7d0:	6063      	str	r3, [r4, #4]
    d7d2:	6014      	str	r4, [r2, #0]
    d7d4:	0028      	movs	r0, r5
    d7d6:	f000 f8cc 	bl	d972 <__malloc_unlock>
    d7da:	bd70      	pop	{r4, r5, r6, pc}
    d7dc:	42a3      	cmp	r3, r4
    d7de:	d909      	bls.n	d7f4 <_free_r+0x44>
    d7e0:	6821      	ldr	r1, [r4, #0]
    d7e2:	1860      	adds	r0, r4, r1
    d7e4:	4283      	cmp	r3, r0
    d7e6:	d1f3      	bne.n	d7d0 <_free_r+0x20>
    d7e8:	6818      	ldr	r0, [r3, #0]
    d7ea:	685b      	ldr	r3, [r3, #4]
    d7ec:	1841      	adds	r1, r0, r1
    d7ee:	6021      	str	r1, [r4, #0]
    d7f0:	e7ee      	b.n	d7d0 <_free_r+0x20>
    d7f2:	0013      	movs	r3, r2
    d7f4:	685a      	ldr	r2, [r3, #4]
    d7f6:	2a00      	cmp	r2, #0
    d7f8:	d001      	beq.n	d7fe <_free_r+0x4e>
    d7fa:	42a2      	cmp	r2, r4
    d7fc:	d9f9      	bls.n	d7f2 <_free_r+0x42>
    d7fe:	6819      	ldr	r1, [r3, #0]
    d800:	1858      	adds	r0, r3, r1
    d802:	42a0      	cmp	r0, r4
    d804:	d10b      	bne.n	d81e <_free_r+0x6e>
    d806:	6820      	ldr	r0, [r4, #0]
    d808:	1809      	adds	r1, r1, r0
    d80a:	1858      	adds	r0, r3, r1
    d80c:	6019      	str	r1, [r3, #0]
    d80e:	4282      	cmp	r2, r0
    d810:	d1e0      	bne.n	d7d4 <_free_r+0x24>
    d812:	6810      	ldr	r0, [r2, #0]
    d814:	6852      	ldr	r2, [r2, #4]
    d816:	1841      	adds	r1, r0, r1
    d818:	6019      	str	r1, [r3, #0]
    d81a:	605a      	str	r2, [r3, #4]
    d81c:	e7da      	b.n	d7d4 <_free_r+0x24>
    d81e:	42a0      	cmp	r0, r4
    d820:	d902      	bls.n	d828 <_free_r+0x78>
    d822:	230c      	movs	r3, #12
    d824:	602b      	str	r3, [r5, #0]
    d826:	e7d5      	b.n	d7d4 <_free_r+0x24>
    d828:	6821      	ldr	r1, [r4, #0]
    d82a:	1860      	adds	r0, r4, r1
    d82c:	4282      	cmp	r2, r0
    d82e:	d103      	bne.n	d838 <_free_r+0x88>
    d830:	6810      	ldr	r0, [r2, #0]
    d832:	6852      	ldr	r2, [r2, #4]
    d834:	1841      	adds	r1, r0, r1
    d836:	6021      	str	r1, [r4, #0]
    d838:	6062      	str	r2, [r4, #4]
    d83a:	605c      	str	r4, [r3, #4]
    d83c:	e7ca      	b.n	d7d4 <_free_r+0x24>
    d83e:	46c0      	nop			; (mov r8, r8)
    d840:	200054bc 	.word	0x200054bc

0000d844 <_malloc_r>:
    d844:	2303      	movs	r3, #3
    d846:	b570      	push	{r4, r5, r6, lr}
    d848:	1ccd      	adds	r5, r1, #3
    d84a:	439d      	bics	r5, r3
    d84c:	3508      	adds	r5, #8
    d84e:	0006      	movs	r6, r0
    d850:	2d0c      	cmp	r5, #12
    d852:	d21e      	bcs.n	d892 <_malloc_r+0x4e>
    d854:	250c      	movs	r5, #12
    d856:	42a9      	cmp	r1, r5
    d858:	d81d      	bhi.n	d896 <_malloc_r+0x52>
    d85a:	0030      	movs	r0, r6
    d85c:	f000 f888 	bl	d970 <__malloc_lock>
    d860:	4a25      	ldr	r2, [pc, #148]	; (d8f8 <_malloc_r+0xb4>)
    d862:	6814      	ldr	r4, [r2, #0]
    d864:	0021      	movs	r1, r4
    d866:	2900      	cmp	r1, #0
    d868:	d119      	bne.n	d89e <_malloc_r+0x5a>
    d86a:	4c24      	ldr	r4, [pc, #144]	; (d8fc <_malloc_r+0xb8>)
    d86c:	6823      	ldr	r3, [r4, #0]
    d86e:	2b00      	cmp	r3, #0
    d870:	d103      	bne.n	d87a <_malloc_r+0x36>
    d872:	0030      	movs	r0, r6
    d874:	f000 f86a 	bl	d94c <_sbrk_r>
    d878:	6020      	str	r0, [r4, #0]
    d87a:	0029      	movs	r1, r5
    d87c:	0030      	movs	r0, r6
    d87e:	f000 f865 	bl	d94c <_sbrk_r>
    d882:	1c43      	adds	r3, r0, #1
    d884:	d12c      	bne.n	d8e0 <_malloc_r+0x9c>
    d886:	230c      	movs	r3, #12
    d888:	0030      	movs	r0, r6
    d88a:	6033      	str	r3, [r6, #0]
    d88c:	f000 f871 	bl	d972 <__malloc_unlock>
    d890:	e003      	b.n	d89a <_malloc_r+0x56>
    d892:	2d00      	cmp	r5, #0
    d894:	dadf      	bge.n	d856 <_malloc_r+0x12>
    d896:	230c      	movs	r3, #12
    d898:	6033      	str	r3, [r6, #0]
    d89a:	2000      	movs	r0, #0
    d89c:	bd70      	pop	{r4, r5, r6, pc}
    d89e:	680b      	ldr	r3, [r1, #0]
    d8a0:	1b5b      	subs	r3, r3, r5
    d8a2:	d41a      	bmi.n	d8da <_malloc_r+0x96>
    d8a4:	2b0b      	cmp	r3, #11
    d8a6:	d903      	bls.n	d8b0 <_malloc_r+0x6c>
    d8a8:	600b      	str	r3, [r1, #0]
    d8aa:	18cc      	adds	r4, r1, r3
    d8ac:	6025      	str	r5, [r4, #0]
    d8ae:	e003      	b.n	d8b8 <_malloc_r+0x74>
    d8b0:	428c      	cmp	r4, r1
    d8b2:	d10e      	bne.n	d8d2 <_malloc_r+0x8e>
    d8b4:	6863      	ldr	r3, [r4, #4]
    d8b6:	6013      	str	r3, [r2, #0]
    d8b8:	0030      	movs	r0, r6
    d8ba:	f000 f85a 	bl	d972 <__malloc_unlock>
    d8be:	0020      	movs	r0, r4
    d8c0:	2207      	movs	r2, #7
    d8c2:	300b      	adds	r0, #11
    d8c4:	1d23      	adds	r3, r4, #4
    d8c6:	4390      	bics	r0, r2
    d8c8:	1ac3      	subs	r3, r0, r3
    d8ca:	d0e7      	beq.n	d89c <_malloc_r+0x58>
    d8cc:	425a      	negs	r2, r3
    d8ce:	50e2      	str	r2, [r4, r3]
    d8d0:	e7e4      	b.n	d89c <_malloc_r+0x58>
    d8d2:	684b      	ldr	r3, [r1, #4]
    d8d4:	6063      	str	r3, [r4, #4]
    d8d6:	000c      	movs	r4, r1
    d8d8:	e7ee      	b.n	d8b8 <_malloc_r+0x74>
    d8da:	000c      	movs	r4, r1
    d8dc:	6849      	ldr	r1, [r1, #4]
    d8de:	e7c2      	b.n	d866 <_malloc_r+0x22>
    d8e0:	2303      	movs	r3, #3
    d8e2:	1cc4      	adds	r4, r0, #3
    d8e4:	439c      	bics	r4, r3
    d8e6:	42a0      	cmp	r0, r4
    d8e8:	d0e0      	beq.n	d8ac <_malloc_r+0x68>
    d8ea:	1a21      	subs	r1, r4, r0
    d8ec:	0030      	movs	r0, r6
    d8ee:	f000 f82d 	bl	d94c <_sbrk_r>
    d8f2:	1c43      	adds	r3, r0, #1
    d8f4:	d1da      	bne.n	d8ac <_malloc_r+0x68>
    d8f6:	e7c6      	b.n	d886 <_malloc_r+0x42>
    d8f8:	200054bc 	.word	0x200054bc
    d8fc:	200054c0 	.word	0x200054c0

0000d900 <_realloc_r>:
    d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d902:	0007      	movs	r7, r0
    d904:	000d      	movs	r5, r1
    d906:	0016      	movs	r6, r2
    d908:	2900      	cmp	r1, #0
    d90a:	d105      	bne.n	d918 <_realloc_r+0x18>
    d90c:	0011      	movs	r1, r2
    d90e:	f7ff ff99 	bl	d844 <_malloc_r>
    d912:	0004      	movs	r4, r0
    d914:	0020      	movs	r0, r4
    d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d918:	2a00      	cmp	r2, #0
    d91a:	d103      	bne.n	d924 <_realloc_r+0x24>
    d91c:	f7ff ff48 	bl	d7b0 <_free_r>
    d920:	0034      	movs	r4, r6
    d922:	e7f7      	b.n	d914 <_realloc_r+0x14>
    d924:	f000 f826 	bl	d974 <_malloc_usable_size_r>
    d928:	002c      	movs	r4, r5
    d92a:	4286      	cmp	r6, r0
    d92c:	d9f2      	bls.n	d914 <_realloc_r+0x14>
    d92e:	0031      	movs	r1, r6
    d930:	0038      	movs	r0, r7
    d932:	f7ff ff87 	bl	d844 <_malloc_r>
    d936:	1e04      	subs	r4, r0, #0
    d938:	d0ec      	beq.n	d914 <_realloc_r+0x14>
    d93a:	0029      	movs	r1, r5
    d93c:	0032      	movs	r2, r6
    d93e:	f7ff fbbd 	bl	d0bc <memcpy>
    d942:	0029      	movs	r1, r5
    d944:	0038      	movs	r0, r7
    d946:	f7ff ff33 	bl	d7b0 <_free_r>
    d94a:	e7e3      	b.n	d914 <_realloc_r+0x14>

0000d94c <_sbrk_r>:
    d94c:	2300      	movs	r3, #0
    d94e:	b570      	push	{r4, r5, r6, lr}
    d950:	4c06      	ldr	r4, [pc, #24]	; (d96c <_sbrk_r+0x20>)
    d952:	0005      	movs	r5, r0
    d954:	0008      	movs	r0, r1
    d956:	6023      	str	r3, [r4, #0]
    d958:	f7fc fb84 	bl	a064 <_sbrk>
    d95c:	1c43      	adds	r3, r0, #1
    d95e:	d103      	bne.n	d968 <_sbrk_r+0x1c>
    d960:	6823      	ldr	r3, [r4, #0]
    d962:	2b00      	cmp	r3, #0
    d964:	d000      	beq.n	d968 <_sbrk_r+0x1c>
    d966:	602b      	str	r3, [r5, #0]
    d968:	bd70      	pop	{r4, r5, r6, pc}
    d96a:	46c0      	nop			; (mov r8, r8)
    d96c:	2000552c 	.word	0x2000552c

0000d970 <__malloc_lock>:
    d970:	4770      	bx	lr

0000d972 <__malloc_unlock>:
    d972:	4770      	bx	lr

0000d974 <_malloc_usable_size_r>:
    d974:	1f0b      	subs	r3, r1, #4
    d976:	681b      	ldr	r3, [r3, #0]
    d978:	1f18      	subs	r0, r3, #4
    d97a:	2b00      	cmp	r3, #0
    d97c:	da01      	bge.n	d982 <_malloc_usable_size_r+0xe>
    d97e:	580b      	ldr	r3, [r1, r0]
    d980:	18c0      	adds	r0, r0, r3
    d982:	4770      	bx	lr
    d984:	00000002 	.word	0x00000002
    d988:	00000003 	.word	0x00000003
    d98c:	00000028 	.word	0x00000028
    d990:	00000029 	.word	0x00000029
    d994:	00000004 	.word	0x00000004
    d998:	00000005 	.word	0x00000005
    d99c:	00000006 	.word	0x00000006
    d9a0:	00000007 	.word	0x00000007
    d9a4:	0000ffff 	.word	0x0000ffff
    d9a8:	0000ffff 	.word	0x0000ffff
    d9ac:	00000022 	.word	0x00000022
    d9b0:	00000023 	.word	0x00000023
    d9b4:	0000ffff 	.word	0x0000ffff
    d9b8:	0000ffff 	.word	0x0000ffff
    d9bc:	0000ffff 	.word	0x0000ffff
    d9c0:	0000ffff 	.word	0x0000ffff
    d9c4:	00000008 	.word	0x00000008
    d9c8:	00000009 	.word	0x00000009
    d9cc:	0000000a 	.word	0x0000000a
    d9d0:	0000000b 	.word	0x0000000b
    d9d4:	000004da 	.word	0x000004da
    d9d8:	000004e0 	.word	0x000004e0
    d9dc:	000004e0 	.word	0x000004e0
    d9e0:	000004e0 	.word	0x000004e0
    d9e4:	000004e0 	.word	0x000004e0
    d9e8:	000004e0 	.word	0x000004e0
    d9ec:	000004e0 	.word	0x000004e0
    d9f0:	000004e0 	.word	0x000004e0
    d9f4:	000004e0 	.word	0x000004e0
    d9f8:	000004e0 	.word	0x000004e0
    d9fc:	000004e0 	.word	0x000004e0
    da00:	000004e0 	.word	0x000004e0
    da04:	000004e0 	.word	0x000004e0
    da08:	000004e0 	.word	0x000004e0
    da0c:	000004e0 	.word	0x000004e0
    da10:	000004e0 	.word	0x000004e0
    da14:	000004b8 	.word	0x000004b8
    da18:	000004e0 	.word	0x000004e0
    da1c:	000004e0 	.word	0x000004e0
    da20:	000004e0 	.word	0x000004e0
    da24:	000004e0 	.word	0x000004e0
    da28:	000004e0 	.word	0x000004e0
    da2c:	000004e0 	.word	0x000004e0
    da30:	000004e0 	.word	0x000004e0
    da34:	000004e0 	.word	0x000004e0
    da38:	000004e0 	.word	0x000004e0
    da3c:	000004e0 	.word	0x000004e0
    da40:	000004e0 	.word	0x000004e0
    da44:	000004e0 	.word	0x000004e0
    da48:	000004e0 	.word	0x000004e0
    da4c:	000004e0 	.word	0x000004e0
    da50:	000004e0 	.word	0x000004e0
    da54:	000004d4 	.word	0x000004d4
    da58:	000004e0 	.word	0x000004e0
    da5c:	000004e0 	.word	0x000004e0
    da60:	000004e0 	.word	0x000004e0
    da64:	000004e0 	.word	0x000004e0
    da68:	000004e0 	.word	0x000004e0
    da6c:	000004e0 	.word	0x000004e0
    da70:	000004e0 	.word	0x000004e0
    da74:	000004e0 	.word	0x000004e0
    da78:	000004e0 	.word	0x000004e0
    da7c:	000004e0 	.word	0x000004e0
    da80:	000004e0 	.word	0x000004e0
    da84:	000004e0 	.word	0x000004e0
    da88:	000004e0 	.word	0x000004e0
    da8c:	000004e0 	.word	0x000004e0
    da90:	000004e0 	.word	0x000004e0
    da94:	000004ce 	.word	0x000004ce
    da98:	00000476 	.word	0x00000476
    da9c:	0000048c 	.word	0x0000048c
    daa0:	000004a2 	.word	0x000004a2
    daa4:	0000045c 	.word	0x0000045c
    daa8:	20776f4c 	.word	0x20776f4c
    daac:	74736f43 	.word	0x74736f43
    dab0:	6e655620 	.word	0x6e655620
    dab4:	616c6974 	.word	0x616c6974
    dab8:	00726f74 	.word	0x00726f74
    dabc:	544e4556 	.word	0x544e4556
    dac0:	004e4f3a 	.word	0x004e4f3a
    dac4:	544e4556 	.word	0x544e4556
    dac8:	46464f3a 	.word	0x46464f3a
    dacc:	00000000 	.word	0x00000000
    dad0:	69253a56 	.word	0x69253a56
    dad4:	00006c6d 	.word	0x00006c6d
    dad8:	50454550 	.word	0x50454550
    dadc:	6369253a 	.word	0x6369253a
    dae0:	3032486d 	.word	0x3032486d
    dae4:	00000000 	.word	0x00000000
    dae8:	253a4549 	.word	0x253a4549
    daec:	69252e69 	.word	0x69252e69
    daf0:	0000313a 	.word	0x0000313a
    daf4:	3a504950 	.word	0x3a504950
    daf8:	6d636925 	.word	0x6d636925
    dafc:	00303248 	.word	0x00303248
    db00:	3a4d5042 	.word	0x3a4d5042
    db04:	00006925 	.word	0x00006925
    db08:	20544553 	.word	0x20544553
    db0c:	3a4d5042 	.word	0x3a4d5042
    db10:	00006925 	.word	0x00006925
    db14:	20544553 	.word	0x20544553
    db18:	50454550 	.word	0x50454550
    db1c:	6369253a 	.word	0x6369253a
    db20:	3032486d 	.word	0x3032486d
    db24:	00000000 	.word	0x00000000
    db28:	20544553 	.word	0x20544553
    db2c:	3a504950 	.word	0x3a504950
    db30:	6d636925 	.word	0x6d636925
    db34:	00303248 	.word	0x00303248
    db38:	20544553 	.word	0x20544553
    db3c:	3a453a49 	.word	0x3a453a49
    db40:	2e692520 	.word	0x2e692520
    db44:	313a6925 	.word	0x313a6925
    db48:	00000000 	.word	0x00000000
    db4c:	4f525245 	.word	0x4f525245
    db50:	003a5352 	.word	0x003a5352
    db54:	574f4c46 	.word	0x574f4c46
    db58:	00000000 	.word	0x00000000
    db5c:	53455250 	.word	0x53455250
    db60:	534e5320 	.word	0x534e5320
    db64:	00000000 	.word	0x00000000
    db68:	20544f4d 	.word	0x20544f4d
    db6c:	4c494146 	.word	0x4c494146
    db70:	00000000 	.word	0x00000000
    db74:	20544f4d 	.word	0x20544f4d
    db78:	504d4554 	.word	0x504d4554
    db7c:	00000000 	.word	0x00000000
    db80:	54544553 	.word	0x54544553
    db84:	414f4c20 	.word	0x414f4c20
    db88:	00000044 	.word	0x00000044
    db8c:	49522050 	.word	0x49522050
    db90:	00004553 	.word	0x00004553
    db94:	00003b40 	.word	0x00003b40
    db98:	00003af6 	.word	0x00003af6
    db9c:	00003b06 	.word	0x00003b06
    dba0:	00003b16 	.word	0x00003b16
    dba4:	00003b26 	.word	0x00003b26
    dba8:	544e4f43 	.word	0x544e4f43
    dbac:	004c4f52 	.word	0x004c4f52
    dbb0:	00004a24 	.word	0x00004a24
    dbb4:	00004a2c 	.word	0x00004a2c
    dbb8:	00004a34 	.word	0x00004a34
    dbbc:	00004a3c 	.word	0x00004a3c
    dbc0:	00004a44 	.word	0x00004a44
    dbc4:	00004b7e 	.word	0x00004b7e
    dbc8:	00004a78 	.word	0x00004a78
    dbcc:	00004ab6 	.word	0x00004ab6
    dbd0:	00004af4 	.word	0x00004af4
    dbd4:	00004b32 	.word	0x00004b32
    dbd8:	45524353 	.word	0x45524353
    dbdc:	545f4e45 	.word	0x545f4e45
    dbe0:	00004d49 	.word	0x00004d49
    dbe4:	45524353 	.word	0x45524353
    dbe8:	435f4e45 	.word	0x435f4e45
    dbec:	00004748 	.word	0x00004748
    dbf0:	5f433249 	.word	0x5f433249
    dbf4:	454d4954 	.word	0x454d4954
    dbf8:	0054554f 	.word	0x0054554f
    dbfc:	00494d48 	.word	0x00494d48
    dc00:	00433249 	.word	0x00433249
    dc04:	494e4f4d 	.word	0x494e4f4d
    dc08:	00524f54 	.word	0x00524f54
    dc0c:	534e4553 	.word	0x534e4553
    dc10:	0000524f 	.word	0x0000524f
    dc14:	454c4449 	.word	0x454c4449
    dc18:	00000000 	.word	0x00000000
    dc1c:	09632509 	.word	0x09632509
    dc20:	25097525 	.word	0x25097525
    dc24:	75250975 	.word	0x75250975
    dc28:	00000a0d 	.word	0x00000a0d
    dc2c:	20726d54 	.word	0x20726d54
    dc30:	00637653 	.word	0x00637653
    dc34:	51726d54 	.word	0x51726d54
    dc38:	00000000 	.word	0x00000000
    dc3c:	000072b4 	.word	0x000072b4
    dc40:	000072b4 	.word	0x000072b4
    dc44:	000072b4 	.word	0x000072b4
    dc48:	00007342 	.word	0x00007342
    dc4c:	0000730c 	.word	0x0000730c
    dc50:	00007336 	.word	0x00007336
    dc54:	000072b4 	.word	0x000072b4
    dc58:	000072b4 	.word	0x000072b4
    dc5c:	00007342 	.word	0x00007342
    dc60:	0000730c 	.word	0x0000730c
    dc64:	42000800 	.word	0x42000800
    dc68:	42000c00 	.word	0x42000c00
    dc6c:	42001000 	.word	0x42001000
    dc70:	42001400 	.word	0x42001400
    dc74:	42001800 	.word	0x42001800
    dc78:	42001c00 	.word	0x42001c00
    dc7c:	0c0b0a09 	.word	0x0c0b0a09
    dc80:	00000e0d 	.word	0x00000e0d
    dc84:	00009116 	.word	0x00009116
    dc88:	00009190 	.word	0x00009190
    dc8c:	00009190 	.word	0x00009190
    dc90:	00009134 	.word	0x00009134
    dc94:	0000912e 	.word	0x0000912e
    dc98:	0000913a 	.word	0x0000913a
    dc9c:	0000911c 	.word	0x0000911c
    dca0:	00009140 	.word	0x00009140
    dca4:	00009176 	.word	0x00009176
    dca8:	000094a4 	.word	0x000094a4
    dcac:	000094f4 	.word	0x000094f4
    dcb0:	000094f4 	.word	0x000094f4
    dcb4:	000094f0 	.word	0x000094f0
    dcb8:	00009496 	.word	0x00009496
    dcbc:	000094b6 	.word	0x000094b6
    dcc0:	00009486 	.word	0x00009486
    dcc4:	000094c8 	.word	0x000094c8
    dcc8:	000094da 	.word	0x000094da
    dccc:	00009542 	.word	0x00009542
    dcd0:	00009570 	.word	0x00009570
    dcd4:	00009570 	.word	0x00009570
    dcd8:	0000956c 	.word	0x0000956c
    dcdc:	0000953c 	.word	0x0000953c
    dce0:	00009548 	.word	0x00009548
    dce4:	00009536 	.word	0x00009536
    dce8:	0000954e 	.word	0x0000954e
    dcec:	00009554 	.word	0x00009554
    dcf0:	0000aaac 	.word	0x0000aaac
    dcf4:	0000aa7c 	.word	0x0000aa7c
    dcf8:	0000aa8e 	.word	0x0000aa8e
    dcfc:	0000a9d0 	.word	0x0000a9d0
    dd00:	0000aa8e 	.word	0x0000aa8e
    dd04:	0000aa72 	.word	0x0000aa72
    dd08:	0000aa8e 	.word	0x0000aa8e
    dd0c:	0000a9d0 	.word	0x0000a9d0
    dd10:	0000aa7c 	.word	0x0000aa7c
    dd14:	0000aa7c 	.word	0x0000aa7c
    dd18:	0000aa72 	.word	0x0000aa72
    dd1c:	0000a9d0 	.word	0x0000a9d0
    dd20:	0000a9d8 	.word	0x0000a9d8
    dd24:	0000a9d8 	.word	0x0000a9d8
    dd28:	0000a9d8 	.word	0x0000a9d8
    dd2c:	0000aa94 	.word	0x0000aa94
    dd30:	0000aa7c 	.word	0x0000aa7c
    dd34:	0000aa7c 	.word	0x0000aa7c
    dd38:	0000aa50 	.word	0x0000aa50
    dd3c:	0000ab34 	.word	0x0000ab34
    dd40:	0000aa50 	.word	0x0000aa50
    dd44:	0000aa72 	.word	0x0000aa72
    dd48:	0000aa50 	.word	0x0000aa50
    dd4c:	0000ab34 	.word	0x0000ab34
    dd50:	0000aa7c 	.word	0x0000aa7c
    dd54:	0000aa7c 	.word	0x0000aa7c
    dd58:	0000aa72 	.word	0x0000aa72
    dd5c:	0000ab34 	.word	0x0000ab34
    dd60:	0000a9d8 	.word	0x0000a9d8
    dd64:	0000a9d8 	.word	0x0000a9d8
    dd68:	0000a9d8 	.word	0x0000a9d8
    dd6c:	0000ab3e 	.word	0x0000ab3e
    dd70:	0000ae2c 	.word	0x0000ae2c
    dd74:	0000ad7c 	.word	0x0000ad7c
    dd78:	0000ad7c 	.word	0x0000ad7c
    dd7c:	0000ad7a 	.word	0x0000ad7a
    dd80:	0000ae1e 	.word	0x0000ae1e
    dd84:	0000ae1e 	.word	0x0000ae1e
    dd88:	0000ae14 	.word	0x0000ae14
    dd8c:	0000ad7a 	.word	0x0000ad7a
    dd90:	0000ae1e 	.word	0x0000ae1e
    dd94:	0000ae14 	.word	0x0000ae14
    dd98:	0000ae1e 	.word	0x0000ae1e
    dd9c:	0000ad7a 	.word	0x0000ad7a
    dda0:	0000ae24 	.word	0x0000ae24
    dda4:	0000ae24 	.word	0x0000ae24
    dda8:	0000ae24 	.word	0x0000ae24
    ddac:	0000aeb4 	.word	0x0000aeb4
    ddb0:	0000bb70 	.word	0x0000bb70
    ddb4:	0000bb52 	.word	0x0000bb52
    ddb8:	0000bb0c 	.word	0x0000bb0c
    ddbc:	0000ba2a 	.word	0x0000ba2a
    ddc0:	0000bb0c 	.word	0x0000bb0c
    ddc4:	0000bb44 	.word	0x0000bb44
    ddc8:	0000bb0c 	.word	0x0000bb0c
    ddcc:	0000ba2a 	.word	0x0000ba2a
    ddd0:	0000bb52 	.word	0x0000bb52
    ddd4:	0000bb52 	.word	0x0000bb52
    ddd8:	0000bb44 	.word	0x0000bb44
    dddc:	0000ba2a 	.word	0x0000ba2a
    dde0:	0000ba22 	.word	0x0000ba22
    dde4:	0000ba22 	.word	0x0000ba22
    dde8:	0000ba22 	.word	0x0000ba22
    ddec:	0000bd88 	.word	0x0000bd88
    ddf0:	0000c3d0 	.word	0x0000c3d0
    ddf4:	0000c290 	.word	0x0000c290
    ddf8:	0000c290 	.word	0x0000c290
    ddfc:	0000c28c 	.word	0x0000c28c
    de00:	0000c3a8 	.word	0x0000c3a8
    de04:	0000c3a8 	.word	0x0000c3a8
    de08:	0000c39a 	.word	0x0000c39a
    de0c:	0000c28c 	.word	0x0000c28c
    de10:	0000c3a8 	.word	0x0000c3a8
    de14:	0000c39a 	.word	0x0000c39a
    de18:	0000c3a8 	.word	0x0000c3a8
    de1c:	0000c28c 	.word	0x0000c28c
    de20:	0000c3b0 	.word	0x0000c3b0
    de24:	0000c3b0 	.word	0x0000c3b0
    de28:	0000c3b0 	.word	0x0000c3b0
    de2c:	0000c5b4 	.word	0x0000c5b4
    de30:	2b302d23 	.word	0x2b302d23
    de34:	6c680020 	.word	0x6c680020
    de38:	6665004c 	.word	0x6665004c
    de3c:	47464567 	.word	0x47464567
    de40:	00          	.byte	0x00
    de41:	30          	.byte	0x30
    de42:	3231      	.short	0x3231
    de44:	36353433 	.word	0x36353433
    de48:	41393837 	.word	0x41393837
    de4c:	45444342 	.word	0x45444342
    de50:	31300046 	.word	0x31300046
    de54:	35343332 	.word	0x35343332
    de58:	39383736 	.word	0x39383736
    de5c:	64636261 	.word	0x64636261
    de60:	00006665 	.word	0x00006665

0000de64 <_init>:
    de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de66:	46c0      	nop			; (mov r8, r8)
    de68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    de6a:	bc08      	pop	{r3}
    de6c:	469e      	mov	lr, r3
    de6e:	4770      	bx	lr

0000de70 <__init_array_start>:
    de70:	000000dd 	.word	0x000000dd

0000de74 <_fini>:
    de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de76:	46c0      	nop			; (mov r8, r8)
    de78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    de7a:	bc08      	pop	{r3}
    de7c:	469e      	mov	lr, r3
    de7e:	4770      	bx	lr

0000de80 <__fini_array_start>:
    de80:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <sht75_crc_table>:
20000010:	3100 5362 f5c4 97a6 88b9 eadb 4c7d 2e1f     .1bS........}L..
20000020:	7243 1021 b687 d4e5 cbfa a998 0f3e 6d5c     Cr!.........>.\m
20000030:	b786 d5e4 7342 1120 0e3f 6c5d cafb a899     ....Bs .?.]l....
20000040:	f4c5 96a7 3001 5263 4d7c 2f1e 89b8 ebda     .....0cR|M./....
20000050:	0c3d 6e5f c8f9 aa9b b584 d7e6 7140 1322     =._n........@q".
20000060:	4f7e 2d1c 8bba e9d8 f6c7 94a5 3203 5061     ~O.-.........2aP
20000070:	8abb e8d9 4e7f 2c1d 3302 5160 f7c6 95a4     .....N.,.3`Q....
20000080:	c9f8 ab9a 0d3c 6f5e 7041 1223 b485 d6e7     ....<.^oAp#.....
20000090:	4b7a 2918 8fbe eddc f2c3 90a1 3607 5465     zK.).........6eT
200000a0:	0839 6a5b ccfd ae9f b180 d3e2 7544 1726     9.[j........Du&.
200000b0:	cdfc af9e 0938 6b5a 7445 1627 b081 d2e3     ....8.ZkEt'.....
200000c0:	8ebf ecdd 4a7b 2819 3706 5564 f3c2 91a0     ....{J.(.7dU....
200000d0:	7647 1425 b283 d0e1 cffe ad9c 0b3a 6958     Gv%.........:.Xi
200000e0:	3504 5766 f1c0 93a2 8cbd eedf 4879 2a1b     .5fW........yH.*
200000f0:	f0c1 92a3 3405 5667 4978 2b1a 8dbc efde     .....4gVxI.+....
20000100:	b382 d1e0 7746 1524 0a3b 6859 ceff ac9d     ....Fw$.;.Yh....

20000110 <intro_screen>:
20000110:	daa8 0000                                   ....

20000114 <on_screen_buffer.14273>:
20000114:	41fe 0000                                   .A..

20000118 <cursor_set.14310>:
20000118:	45fe 0100                                        .E.

2000011b <settings_changed>:
2000011b:	0101                                             .

2000011c <display_main_page>:
2000011c:	0101                                             .

2000011d <g_interrupt_enabled>:
2000011d:	0001 2400                                        ...

20000120 <_impure_ptr>:
20000120:	0124 2000                                   $.. 

20000124 <impure_data>:
	...
