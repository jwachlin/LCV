
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008538  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000052e8  20000074  000085ac  00020074  2**2
                  ALLOC
  3 .stack        00002004  2000535c  0000d894  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054a6e  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007c45  00000000  00000000  00074b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000cbc0  00000000  00000000  0007c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d70  00000000  00000000  00089368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f78  00000000  00000000  0008a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022346  00000000  00000000  0008b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001dfd6  00000000  00000000  000ad396  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093bbe  00000000  00000000  000cb36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000288c  00000000  00000000  0015ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 73 00 20 49 49 00 00 45 49 00 00 df 4a 00 00     `s. II..EI...J..
	...
      2c:	45 49 00 00 00 00 00 00 00 00 00 00 45 49 00 00     EI..........EI..
      3c:	45 49 00 00 45 49 00 00 45 49 00 00 19 3b 00 00     EI..EI..EI...;..
      4c:	45 49 00 00 45 49 00 00 45 49 00 00 45 49 00 00     EI..EI..EI..EI..
      5c:	45 49 00 00 45 49 00 00 a1 3d 00 00 b1 3d 00 00     EI..EI...=...=..
      6c:	c1 3d 00 00 d1 3d 00 00 e1 3d 00 00 f1 3d 00 00     .=...=...=...=..
      7c:	45 49 00 00 45 49 00 00 45 49 00 00 45 49 00 00     EI..EI..EI..EI..
      8c:	45 49 00 00 45 49 00 00 00 00 00 00 00 00 00 00     EI..EI..........
      9c:	85 05 00 00 45 49 00 00 61 07 00 00 45 49 00 00     ....EI..a...EI..
      ac:	45 49 00 00 00 00 00 00                             EI......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00008538 	.word	0x00008538

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00008538 	.word	0x00008538
     10c:	00008538 	.word	0x00008538
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	200052f4 	.word	0x200052f4
     494:	000047bd 	.word	0x000047bd
     498:	00004731 	.word	0x00004731
     49c:	0000784d 	.word	0x0000784d
     4a0:	000081d8 	.word	0x000081d8
     4a4:	000048e5 	.word	0x000048e5
     4a8:	00008104 	.word	0x00008104
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2f      	ldr	r3, [pc, #188]	; (644 <ADC_Handler+0xc0>)
     588:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	7e1a      	ldrb	r2, [r3, #24]
     58e:	7ddc      	ldrb	r4, [r3, #23]
     590:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     592:	07e2      	lsls	r2, r4, #31
     594:	d416      	bmi.n	5c4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     596:	0763      	lsls	r3, r4, #29
     598:	d508      	bpl.n	5ac <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     59a:	2304      	movs	r3, #4
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5a0:	7eeb      	ldrb	r3, [r5, #27]
     5a2:	079b      	lsls	r3, r3, #30
     5a4:	d502      	bpl.n	5ac <ADC_Handler+0x28>
     5a6:	7eab      	ldrb	r3, [r5, #26]
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d442      	bmi.n	632 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5ac:	07a3      	lsls	r3, r4, #30
     5ae:	d508      	bpl.n	5c2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5b0:	2302      	movs	r3, #2
     5b2:	682a      	ldr	r2, [r5, #0]
     5b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5b6:	7eeb      	ldrb	r3, [r5, #27]
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	d502      	bpl.n	5c2 <ADC_Handler+0x3e>
     5bc:	7eab      	ldrb	r3, [r5, #26]
     5be:	075b      	lsls	r3, r3, #29
     5c0:	d43b      	bmi.n	63a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5c4:	2201      	movs	r2, #1
     5c6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5c8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ca:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     5cc:	b25b      	sxtb	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	dbfb      	blt.n	5ca <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     5d2:	6969      	ldr	r1, [r5, #20]
     5d4:	1c8b      	adds	r3, r1, #2
     5d6:	616b      	str	r3, [r5, #20]
     5d8:	8b53      	ldrh	r3, [r2, #26]
     5da:	b29b      	uxth	r3, r3
     5dc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     5de:	8b2b      	ldrh	r3, [r5, #24]
     5e0:	3b01      	subs	r3, #1
     5e2:	b29b      	uxth	r3, r3
     5e4:	832b      	strh	r3, [r5, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d011      	beq.n	60e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     5ea:	7f6b      	ldrb	r3, [r5, #29]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0d2      	beq.n	596 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5f0:	682a      	ldr	r2, [r5, #0]
     5f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5f4:	b25b      	sxtb	r3, r3
     5f6:	2b00      	cmp	r3, #0
     5f8:	dbfb      	blt.n	5f2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5fa:	7b13      	ldrb	r3, [r2, #12]
     5fc:	2102      	movs	r1, #2
     5fe:	430b      	orrs	r3, r1
     600:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     602:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     604:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	dbfb      	blt.n	604 <ADC_Handler+0x80>
     60c:	e7c3      	b.n	596 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     60e:	2301      	movs	r3, #1
     610:	682a      	ldr	r2, [r5, #0]
     612:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     614:	7f2b      	ldrb	r3, [r5, #28]
     616:	2b05      	cmp	r3, #5
     618:	d1bd      	bne.n	596 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     61a:	2300      	movs	r3, #0
     61c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     61e:	7eeb      	ldrb	r3, [r5, #27]
     620:	07db      	lsls	r3, r3, #31
     622:	d5b8      	bpl.n	596 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     624:	7eab      	ldrb	r3, [r5, #26]
     626:	07db      	lsls	r3, r3, #31
     628:	d5b5      	bpl.n	596 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     62a:	0028      	movs	r0, r5
     62c:	68ab      	ldr	r3, [r5, #8]
     62e:	4798      	blx	r3
     630:	e7b1      	b.n	596 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     632:	0028      	movs	r0, r5
     634:	68eb      	ldr	r3, [r5, #12]
     636:	4798      	blx	r3
     638:	e7b8      	b.n	5ac <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     63a:	692b      	ldr	r3, [r5, #16]
     63c:	0028      	movs	r0, r5
     63e:	4798      	blx	r3
}
     640:	e7bf      	b.n	5c2 <ADC_Handler+0x3e>
     642:	46c0      	nop			; (mov r8, r8)
     644:	200052f4 	.word	0x200052f4

00000648 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     648:	1c93      	adds	r3, r2, #2
     64a:	009b      	lsls	r3, r3, #2
     64c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     64e:	2301      	movs	r3, #1
     650:	4093      	lsls	r3, r2
     652:	001a      	movs	r2, r3
     654:	7e83      	ldrb	r3, [r0, #26]
     656:	4313      	orrs	r3, r2
     658:	7683      	strb	r3, [r0, #26]
}
     65a:	4770      	bx	lr

0000065c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     65c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     65e:	8b03      	ldrh	r3, [r0, #24]
     660:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     662:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     664:	2b00      	cmp	r3, #0
     666:	d001      	beq.n	66c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     668:	0020      	movs	r0, r4
     66a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     66c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     66e:	2b05      	cmp	r3, #5
     670:	d0fa      	beq.n	668 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     672:	2305      	movs	r3, #5
     674:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     676:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     678:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     67a:	3b04      	subs	r3, #4
     67c:	6802      	ldr	r2, [r0, #0]
     67e:	75d3      	strb	r3, [r2, #23]
	if(module_inst->software_trigger == true) {
     680:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     682:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     684:	2b00      	cmp	r3, #0
     686:	d0ef      	beq.n	668 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     688:	6802      	ldr	r2, [r0, #0]
     68a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     68c:	b25b      	sxtb	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	dbfb      	blt.n	68a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     692:	7b13      	ldrb	r3, [r2, #12]
     694:	2102      	movs	r1, #2
     696:	430b      	orrs	r3, r1
     698:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     69a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     69c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     69e:	b25b      	sxtb	r3, r3
     6a0:	2b00      	cmp	r3, #0
     6a2:	dbfb      	blt.n	69c <adc_read_buffer_job+0x40>
	return STATUS_OK;
     6a4:	2400      	movs	r4, #0
     6a6:	e7df      	b.n	668 <adc_read_buffer_job+0xc>

000006a8 <adc_get_job_status>:
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
		return module_inst->job_status;
	} else {
		return STATUS_ERR_INVALID_ARG;
     6a8:	2317      	movs	r3, #23
	if (type == ADC_JOB_READ_BUFFER ) {
     6aa:	2900      	cmp	r1, #0
     6ac:	d001      	beq.n	6b2 <adc_get_job_status+0xa>
	}
}
     6ae:	0018      	movs	r0, r3
     6b0:	4770      	bx	lr
		return module_inst->job_status;
     6b2:	7f03      	ldrb	r3, [r0, #28]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	e7fa      	b.n	6ae <adc_get_job_status+0x6>

000006b8 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     6b8:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
     6ba:	79d8      	ldrb	r0, [r3, #7]
     6bc:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
     6be:	4770      	bx	lr

000006c0 <dac_chan_write_buffer_job>:
enum status_code dac_chan_write_buffer_job(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		uint16_t *buffer,
		uint32_t length)
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	46c6      	mov	lr, r8
     6c4:	b500      	push	{lr}
     6c6:	0004      	movs	r4, r0
     6c8:	0016      	movs	r6, r2
     6ca:	001d      	movs	r5, r3

	Dac *const dac_module = module_inst->hw;

	/* DAC interrupts require it to be driven by events to work, fail if in
	 * unbuffered (polled) mode */
	if (module_inst->start_on_event == false) {
     6cc:	7983      	ldrb	r3, [r0, #6]
		return STATUS_ERR_UNSUPPORTED_DEV;
     6ce:	2015      	movs	r0, #21
	if (module_inst->start_on_event == false) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d102      	bne.n	6da <dac_chan_write_buffer_job+0x1a>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_DAC);
	dac_module->INTFLAG.reg = DAC_INTFLAG_UNDERRUN | DAC_INTFLAG_EMPTY;
	dac_module->INTENSET.reg = DAC_INTENSET_UNDERRUN | DAC_INTENSET_EMPTY;

	return STATUS_OK;
}
     6d4:	bc04      	pop	{r2}
     6d6:	4690      	mov	r8, r2
     6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(module_inst->remaining_conversions != 0 ||
     6da:	89a3      	ldrh	r3, [r4, #12]
     6dc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     6de:	3810      	subs	r0, #16
	if(module_inst->remaining_conversions != 0 ||
     6e0:	2b00      	cmp	r3, #0
     6e2:	d1f7      	bne.n	6d4 <dac_chan_write_buffer_job+0x14>
			module_inst->job_status == STATUS_BUSY){
     6e4:	3320      	adds	r3, #32
     6e6:	5ce3      	ldrb	r3, [r4, r3]
	if(module_inst->remaining_conversions != 0 ||
     6e8:	2b05      	cmp	r3, #5
     6ea:	d0f3      	beq.n	6d4 <dac_chan_write_buffer_job+0x14>
	Dac *const dac_module = module_inst->hw;
     6ec:	6823      	ldr	r3, [r4, #0]
     6ee:	4698      	mov	r8, r3
	while (dac_is_syncing(module_inst)) {
     6f0:	4f0a      	ldr	r7, [pc, #40]	; (71c <dac_chan_write_buffer_job+0x5c>)
     6f2:	0020      	movs	r0, r4
     6f4:	47b8      	blx	r7
     6f6:	2800      	cmp	r0, #0
     6f8:	d1fb      	bne.n	6f2 <dac_chan_write_buffer_job+0x32>
	module_inst->job_status = STATUS_BUSY;
     6fa:	2205      	movs	r2, #5
     6fc:	2320      	movs	r3, #32
     6fe:	54e2      	strb	r2, [r4, r3]
	module_inst->remaining_conversions = length;
     700:	b2ad      	uxth	r5, r5
     702:	81a5      	strh	r5, [r4, #12]
	module_inst->job_buffer = buffer;
     704:	60a6      	str	r6, [r4, #8]
	module_inst->transferred_conversions = 0;
     706:	2300      	movs	r3, #0
     708:	81e3      	strh	r3, [r4, #14]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     70a:	2280      	movs	r2, #128	; 0x80
     70c:	0492      	lsls	r2, r2, #18
     70e:	4b04      	ldr	r3, [pc, #16]	; (720 <dac_chan_write_buffer_job+0x60>)
     710:	601a      	str	r2, [r3, #0]
	dac_module->INTFLAG.reg = DAC_INTFLAG_UNDERRUN | DAC_INTFLAG_EMPTY;
     712:	2303      	movs	r3, #3
     714:	4642      	mov	r2, r8
     716:	7193      	strb	r3, [r2, #6]
	dac_module->INTENSET.reg = DAC_INTENSET_UNDERRUN | DAC_INTENSET_EMPTY;
     718:	7153      	strb	r3, [r2, #5]
	return STATUS_OK;
     71a:	e7db      	b.n	6d4 <dac_chan_write_buffer_job+0x14>
     71c:	000006b9 	.word	0x000006b9
     720:	e000e100 	.word	0xe000e100

00000724 <dac_chan_write_job>:
 */
enum status_code dac_chan_write_job(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		uint16_t data)
{
     724:	b510      	push	{r4, lr}
     726:	b082      	sub	sp, #8
     728:	466b      	mov	r3, sp
     72a:	80da      	strh	r2, [r3, #6]

	UNUSED(channel);

	/* DAC interrupts require it to be driven by events to work, fail if in
	 * unbuffered (polled) mode */
	if (module_inst->start_on_event == false) {
     72c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_UNSUPPORTED_DEV;
     72e:	2315      	movs	r3, #21
	if (module_inst->start_on_event == false) {
     730:	2a00      	cmp	r2, #0
     732:	d102      	bne.n	73a <dac_chan_write_job+0x16>
	}

	dac_chan_write_buffer_job(module_inst, channel, &data, 1);

	return STATUS_OK;
}
     734:	0018      	movs	r0, r3
     736:	b002      	add	sp, #8
     738:	bd10      	pop	{r4, pc}
	if(module_inst->remaining_conversions != 0 ||
     73a:	8982      	ldrh	r2, [r0, #12]
     73c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     73e:	3b10      	subs	r3, #16
	if(module_inst->remaining_conversions != 0 ||
     740:	2a00      	cmp	r2, #0
     742:	d1f7      	bne.n	734 <dac_chan_write_job+0x10>
			module_inst->job_status == STATUS_BUSY){
     744:	331b      	adds	r3, #27
     746:	5cc2      	ldrb	r2, [r0, r3]
		return STATUS_BUSY;
     748:	3b1b      	subs	r3, #27
	if(module_inst->remaining_conversions != 0 ||
     74a:	2a05      	cmp	r2, #5
     74c:	d0f2      	beq.n	734 <dac_chan_write_job+0x10>
	dac_chan_write_buffer_job(module_inst, channel, &data, 1);
     74e:	3b04      	subs	r3, #4
     750:	466a      	mov	r2, sp
     752:	3206      	adds	r2, #6
     754:	4c01      	ldr	r4, [pc, #4]	; (75c <dac_chan_write_job+0x38>)
     756:	47a0      	blx	r4
	return STATUS_OK;
     758:	2300      	movs	r3, #0
     75a:	e7eb      	b.n	734 <dac_chan_write_job+0x10>
     75c:	000006c1 	.word	0x000006c1

00000760 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     760:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     762:	4b27      	ldr	r3, [pc, #156]	; (800 <DAC_Handler+0xa0>)
     764:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     766:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     768:	79ab      	ldrb	r3, [r5, #6]
     76a:	07db      	lsls	r3, r3, #31
     76c:	d507      	bpl.n	77e <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     76e:	2301      	movs	r3, #1
     770:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     772:	0023      	movs	r3, r4
     774:	3314      	adds	r3, #20
     776:	d002      	beq.n	77e <DAC_Handler+0x1e>
     778:	7c63      	ldrb	r3, [r4, #17]
     77a:	2b00      	cmp	r3, #0
     77c:	d131      	bne.n	7e2 <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     77e:	79ab      	ldrb	r3, [r5, #6]
     780:	079b      	lsls	r3, r3, #30
     782:	d538      	bpl.n	7f6 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     784:	2302      	movs	r3, #2
     786:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     788:	89a3      	ldrh	r3, [r4, #12]
     78a:	b29b      	uxth	r3, r3
     78c:	2b00      	cmp	r3, #0
     78e:	d02c      	beq.n	7ea <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     790:	89e3      	ldrh	r3, [r4, #14]
     792:	b29b      	uxth	r3, r3
     794:	1c5a      	adds	r2, r3, #1
     796:	b292      	uxth	r2, r2
     798:	81e2      	strh	r2, [r4, #14]
     79a:	005b      	lsls	r3, r3, #1
     79c:	68a2      	ldr	r2, [r4, #8]
     79e:	4694      	mov	ip, r2
     7a0:	4463      	add	r3, ip
     7a2:	881b      	ldrh	r3, [r3, #0]
     7a4:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     7a6:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     7a8:	89a3      	ldrh	r3, [r4, #12]
     7aa:	3b01      	subs	r3, #1
     7ac:	b29b      	uxth	r3, r3
     7ae:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     7b0:	89a3      	ldrh	r3, [r4, #12]
     7b2:	b29b      	uxth	r3, r3
     7b4:	2b00      	cmp	r3, #0
     7b6:	d118      	bne.n	7ea <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     7b8:	2200      	movs	r2, #0
     7ba:	3320      	adds	r3, #32
     7bc:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     7be:	3b1e      	subs	r3, #30
     7c0:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     7c2:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7c4:	2180      	movs	r1, #128	; 0x80
     7c6:	0489      	lsls	r1, r1, #18
     7c8:	337e      	adds	r3, #126	; 0x7e
     7ca:	4a0e      	ldr	r2, [pc, #56]	; (804 <DAC_Handler+0xa4>)
     7cc:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     7ce:	0023      	movs	r3, r4
     7d0:	3314      	adds	r3, #20
     7d2:	d010      	beq.n	7f6 <DAC_Handler+0x96>
     7d4:	7ca3      	ldrb	r3, [r4, #18]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d00a      	beq.n	7f0 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     7da:	2000      	movs	r0, #0
     7dc:	69e3      	ldr	r3, [r4, #28]
     7de:	4798      	blx	r3
     7e0:	e006      	b.n	7f0 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     7e2:	2000      	movs	r0, #0
     7e4:	69a3      	ldr	r3, [r4, #24]
     7e6:	4798      	blx	r3
     7e8:	e7c9      	b.n	77e <DAC_Handler+0x1e>
		if ((module->callback) &&
     7ea:	0023      	movs	r3, r4
     7ec:	3314      	adds	r3, #20
     7ee:	d002      	beq.n	7f6 <DAC_Handler+0x96>
     7f0:	7c23      	ldrb	r3, [r4, #16]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d100      	bne.n	7f8 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     7f6:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     7f8:	6963      	ldr	r3, [r4, #20]
     7fa:	2000      	movs	r0, #0
     7fc:	4798      	blx	r3
}
     7fe:	e7fa      	b.n	7f6 <DAC_Handler+0x96>
     800:	200052f8 	.word	0x200052f8
     804:	e000e100 	.word	0xe000e100

00000808 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     808:	b5f0      	push	{r4, r5, r6, r7, lr}
     80a:	46d6      	mov	lr, sl
     80c:	464f      	mov	r7, r9
     80e:	4646      	mov	r6, r8
     810:	b5c0      	push	{r6, r7, lr}
     812:	b08a      	sub	sp, #40	; 0x28
     814:	0006      	movs	r6, r0
     816:	000f      	movs	r7, r1
     818:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     81a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     81c:	0008      	movs	r0, r1
     81e:	4ba0      	ldr	r3, [pc, #640]	; (aa0 <i2c_master_init+0x298>)
     820:	4798      	blx	r3
     822:	4aa0      	ldr	r2, [pc, #640]	; (aa4 <i2c_master_init+0x29c>)
     824:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     826:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     828:	2301      	movs	r3, #1
     82a:	40ab      	lsls	r3, r5
     82c:	430b      	orrs	r3, r1
     82e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     830:	a909      	add	r1, sp, #36	; 0x24
     832:	7b23      	ldrb	r3, [r4, #12]
     834:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     836:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     838:	b2c5      	uxtb	r5, r0
     83a:	0028      	movs	r0, r5
     83c:	4b9a      	ldr	r3, [pc, #616]	; (aa8 <i2c_master_init+0x2a0>)
     83e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     840:	0028      	movs	r0, r5
     842:	4b9a      	ldr	r3, [pc, #616]	; (aac <i2c_master_init+0x2a4>)
     844:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     846:	7b20      	ldrb	r0, [r4, #12]
     848:	2100      	movs	r1, #0
     84a:	4b99      	ldr	r3, [pc, #612]	; (ab0 <i2c_master_init+0x2a8>)
     84c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     84e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     850:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     852:	079b      	lsls	r3, r3, #30
     854:	d505      	bpl.n	862 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     856:	b00a      	add	sp, #40	; 0x28
     858:	bc1c      	pop	{r2, r3, r4}
     85a:	4690      	mov	r8, r2
     85c:	4699      	mov	r9, r3
     85e:	46a2      	mov	sl, r4
     860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     862:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     864:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     866:	07db      	lsls	r3, r3, #31
     868:	d4f5      	bmi.n	856 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     86a:	6830      	ldr	r0, [r6, #0]
     86c:	4b8c      	ldr	r3, [pc, #560]	; (aa0 <i2c_master_init+0x298>)
     86e:	4699      	mov	r9, r3
     870:	4798      	blx	r3
     872:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     874:	498f      	ldr	r1, [pc, #572]	; (ab4 <i2c_master_init+0x2ac>)
     876:	4b90      	ldr	r3, [pc, #576]	; (ab8 <i2c_master_init+0x2b0>)
     878:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     87a:	00ad      	lsls	r5, r5, #2
     87c:	4b8f      	ldr	r3, [pc, #572]	; (abc <i2c_master_init+0x2b4>)
     87e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     880:	2300      	movs	r3, #0
     882:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     884:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     886:	2500      	movs	r5, #0
     888:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     88a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     88c:	2225      	movs	r2, #37	; 0x25
     88e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     890:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     892:	3314      	adds	r3, #20
     894:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     896:	6833      	ldr	r3, [r6, #0]
     898:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     89a:	0018      	movs	r0, r3
     89c:	47c8      	blx	r9
     89e:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8a0:	2380      	movs	r3, #128	; 0x80
     8a2:	aa08      	add	r2, sp, #32
     8a4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8a6:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8a8:	2301      	movs	r3, #1
     8aa:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     8ac:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     8ae:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     8b0:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     8b2:	2800      	cmp	r0, #0
     8b4:	d100      	bne.n	8b8 <i2c_master_init+0xb0>
     8b6:	e0af      	b.n	a18 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     8b8:	ab08      	add	r3, sp, #32
     8ba:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     8bc:	2302      	movs	r3, #2
     8be:	aa08      	add	r2, sp, #32
     8c0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     8c2:	0c00      	lsrs	r0, r0, #16
     8c4:	b2c0      	uxtb	r0, r0
     8c6:	0011      	movs	r1, r2
     8c8:	4b7d      	ldr	r3, [pc, #500]	; (ac0 <i2c_master_init+0x2b8>)
     8ca:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     8cc:	2f00      	cmp	r7, #0
     8ce:	d100      	bne.n	8d2 <i2c_master_init+0xca>
     8d0:	e0a7      	b.n	a22 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     8d2:	ab08      	add	r3, sp, #32
     8d4:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     8d6:	2302      	movs	r3, #2
     8d8:	aa08      	add	r2, sp, #32
     8da:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     8dc:	0c3f      	lsrs	r7, r7, #16
     8de:	b2f8      	uxtb	r0, r7
     8e0:	0011      	movs	r1, r2
     8e2:	4b77      	ldr	r3, [pc, #476]	; (ac0 <i2c_master_init+0x2b8>)
     8e4:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     8e6:	8aa3      	ldrh	r3, [r4, #20]
     8e8:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     8ea:	8ae3      	ldrh	r3, [r4, #22]
     8ec:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     8ee:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     8f0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     8f2:	2b00      	cmp	r3, #0
     8f4:	d104      	bne.n	900 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8f6:	4b73      	ldr	r3, [pc, #460]	; (ac4 <i2c_master_init+0x2bc>)
     8f8:	789b      	ldrb	r3, [r3, #2]
     8fa:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     8fc:	0fdb      	lsrs	r3, r3, #31
     8fe:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     900:	68a1      	ldr	r1, [r4, #8]
     902:	6923      	ldr	r3, [r4, #16]
     904:	430b      	orrs	r3, r1
     906:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     908:	2224      	movs	r2, #36	; 0x24
     90a:	5ca2      	ldrb	r2, [r4, r2]
     90c:	2a00      	cmp	r2, #0
     90e:	d002      	beq.n	916 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     910:	2280      	movs	r2, #128	; 0x80
     912:	05d2      	lsls	r2, r2, #23
     914:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     916:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     918:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     91a:	222c      	movs	r2, #44	; 0x2c
     91c:	5ca2      	ldrb	r2, [r4, r2]
     91e:	2a00      	cmp	r2, #0
     920:	d103      	bne.n	92a <i2c_master_init+0x122>
     922:	2280      	movs	r2, #128	; 0x80
     924:	0492      	lsls	r2, r2, #18
     926:	4291      	cmp	r1, r2
     928:	d102      	bne.n	930 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     92a:	2280      	movs	r2, #128	; 0x80
     92c:	0512      	lsls	r2, r2, #20
     92e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     930:	222d      	movs	r2, #45	; 0x2d
     932:	5ca2      	ldrb	r2, [r4, r2]
     934:	2a00      	cmp	r2, #0
     936:	d002      	beq.n	93e <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     938:	2280      	movs	r2, #128	; 0x80
     93a:	0412      	lsls	r2, r2, #16
     93c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     93e:	222e      	movs	r2, #46	; 0x2e
     940:	5ca2      	ldrb	r2, [r4, r2]
     942:	2a00      	cmp	r2, #0
     944:	d002      	beq.n	94c <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     946:	2280      	movs	r2, #128	; 0x80
     948:	03d2      	lsls	r2, r2, #15
     94a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     94c:	4642      	mov	r2, r8
     94e:	6812      	ldr	r2, [r2, #0]
     950:	4313      	orrs	r3, r2
     952:	4642      	mov	r2, r8
     954:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     956:	2380      	movs	r3, #128	; 0x80
     958:	005b      	lsls	r3, r3, #1
     95a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     95c:	4648      	mov	r0, r9
     95e:	3014      	adds	r0, #20
     960:	b2c0      	uxtb	r0, r0
     962:	4b59      	ldr	r3, [pc, #356]	; (ac8 <i2c_master_init+0x2c0>)
     964:	4798      	blx	r3
     966:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     968:	23fa      	movs	r3, #250	; 0xfa
     96a:	009b      	lsls	r3, r3, #2
     96c:	6822      	ldr	r2, [r4, #0]
     96e:	435a      	muls	r2, r3
     970:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     972:	6863      	ldr	r3, [r4, #4]
     974:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     976:	4d55      	ldr	r5, [pc, #340]	; (acc <i2c_master_init+0x2c4>)
     978:	47a8      	blx	r5
     97a:	9000      	str	r0, [sp, #0]
     97c:	9101      	str	r1, [sp, #4]
     97e:	464b      	mov	r3, r9
     980:	0058      	lsls	r0, r3, #1
     982:	47a8      	blx	r5
     984:	9002      	str	r0, [sp, #8]
     986:	9103      	str	r1, [sp, #12]
     988:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     98a:	47a8      	blx	r5
     98c:	9004      	str	r0, [sp, #16]
     98e:	9105      	str	r1, [sp, #20]
     990:	4f4f      	ldr	r7, [pc, #316]	; (ad0 <i2c_master_init+0x2c8>)
     992:	4a50      	ldr	r2, [pc, #320]	; (ad4 <i2c_master_init+0x2cc>)
     994:	4b50      	ldr	r3, [pc, #320]	; (ad8 <i2c_master_init+0x2d0>)
     996:	9800      	ldr	r0, [sp, #0]
     998:	9901      	ldr	r1, [sp, #4]
     99a:	47b8      	blx	r7
     99c:	0002      	movs	r2, r0
     99e:	000b      	movs	r3, r1
     9a0:	9804      	ldr	r0, [sp, #16]
     9a2:	9905      	ldr	r1, [sp, #20]
     9a4:	47b8      	blx	r7
     9a6:	4e4d      	ldr	r6, [pc, #308]	; (adc <i2c_master_init+0x2d4>)
     9a8:	2200      	movs	r2, #0
     9aa:	4b4d      	ldr	r3, [pc, #308]	; (ae0 <i2c_master_init+0x2d8>)
     9ac:	47b0      	blx	r6
     9ae:	9004      	str	r0, [sp, #16]
     9b0:	9105      	str	r1, [sp, #20]
     9b2:	4648      	mov	r0, r9
     9b4:	47a8      	blx	r5
     9b6:	0002      	movs	r2, r0
     9b8:	000b      	movs	r3, r1
     9ba:	9804      	ldr	r0, [sp, #16]
     9bc:	9905      	ldr	r1, [sp, #20]
     9be:	47b8      	blx	r7
     9c0:	0002      	movs	r2, r0
     9c2:	000b      	movs	r3, r1
     9c4:	4d47      	ldr	r5, [pc, #284]	; (ae4 <i2c_master_init+0x2dc>)
     9c6:	9800      	ldr	r0, [sp, #0]
     9c8:	9901      	ldr	r1, [sp, #4]
     9ca:	47a8      	blx	r5
     9cc:	9a02      	ldr	r2, [sp, #8]
     9ce:	9b03      	ldr	r3, [sp, #12]
     9d0:	47b0      	blx	r6
     9d2:	2200      	movs	r2, #0
     9d4:	4b44      	ldr	r3, [pc, #272]	; (ae8 <i2c_master_init+0x2e0>)
     9d6:	47a8      	blx	r5
     9d8:	9a02      	ldr	r2, [sp, #8]
     9da:	9b03      	ldr	r3, [sp, #12]
     9dc:	4d43      	ldr	r5, [pc, #268]	; (aec <i2c_master_init+0x2e4>)
     9de:	47a8      	blx	r5
     9e0:	4b43      	ldr	r3, [pc, #268]	; (af0 <i2c_master_init+0x2e8>)
     9e2:	4798      	blx	r3
     9e4:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     9e6:	2380      	movs	r3, #128	; 0x80
     9e8:	049b      	lsls	r3, r3, #18
     9ea:	68a2      	ldr	r2, [r4, #8]
     9ec:	429a      	cmp	r2, r3
     9ee:	d01e      	beq.n	a2e <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     9f0:	0003      	movs	r3, r0
     9f2:	2040      	movs	r0, #64	; 0x40
     9f4:	2dff      	cmp	r5, #255	; 0xff
     9f6:	d900      	bls.n	9fa <i2c_master_init+0x1f2>
     9f8:	e72d      	b.n	856 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     9fa:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     9fc:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     9fe:	25ff      	movs	r5, #255	; 0xff
     a00:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     a02:	0624      	lsls	r4, r4, #24
     a04:	4325      	orrs	r5, r4
     a06:	0400      	lsls	r0, r0, #16
     a08:	23ff      	movs	r3, #255	; 0xff
     a0a:	041b      	lsls	r3, r3, #16
     a0c:	4018      	ands	r0, r3
     a0e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     a10:	4643      	mov	r3, r8
     a12:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     a14:	2000      	movs	r0, #0
     a16:	e71e      	b.n	856 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a18:	2100      	movs	r1, #0
     a1a:	4640      	mov	r0, r8
     a1c:	4b35      	ldr	r3, [pc, #212]	; (af4 <i2c_master_init+0x2ec>)
     a1e:	4798      	blx	r3
     a20:	e74a      	b.n	8b8 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a22:	2101      	movs	r1, #1
     a24:	4640      	mov	r0, r8
     a26:	4b33      	ldr	r3, [pc, #204]	; (af4 <i2c_master_init+0x2ec>)
     a28:	4798      	blx	r3
     a2a:	0007      	movs	r7, r0
     a2c:	e751      	b.n	8d2 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     a2e:	26fa      	movs	r6, #250	; 0xfa
     a30:	00b6      	lsls	r6, r6, #2
     a32:	4653      	mov	r3, sl
     a34:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     a36:	9800      	ldr	r0, [sp, #0]
     a38:	9901      	ldr	r1, [sp, #4]
     a3a:	0002      	movs	r2, r0
     a3c:	000b      	movs	r3, r1
     a3e:	4c27      	ldr	r4, [pc, #156]	; (adc <i2c_master_init+0x2d4>)
     a40:	47a0      	blx	r4
     a42:	9000      	str	r0, [sp, #0]
     a44:	9101      	str	r1, [sp, #4]
     a46:	0030      	movs	r0, r6
     a48:	4b20      	ldr	r3, [pc, #128]	; (acc <i2c_master_init+0x2c4>)
     a4a:	4798      	blx	r3
     a4c:	2200      	movs	r2, #0
     a4e:	4b2a      	ldr	r3, [pc, #168]	; (af8 <i2c_master_init+0x2f0>)
     a50:	47b8      	blx	r7
     a52:	0002      	movs	r2, r0
     a54:	000b      	movs	r3, r1
     a56:	9800      	ldr	r0, [sp, #0]
     a58:	9901      	ldr	r1, [sp, #4]
     a5a:	4c24      	ldr	r4, [pc, #144]	; (aec <i2c_master_init+0x2e4>)
     a5c:	47a0      	blx	r4
     a5e:	2200      	movs	r2, #0
     a60:	4b21      	ldr	r3, [pc, #132]	; (ae8 <i2c_master_init+0x2e0>)
     a62:	4c20      	ldr	r4, [pc, #128]	; (ae4 <i2c_master_init+0x2dc>)
     a64:	47a0      	blx	r4
     a66:	4b22      	ldr	r3, [pc, #136]	; (af0 <i2c_master_init+0x2e8>)
     a68:	4798      	blx	r3
     a6a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     a6c:	d00c      	beq.n	a88 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     a6e:	0031      	movs	r1, r6
     a70:	9807      	ldr	r0, [sp, #28]
     a72:	4b22      	ldr	r3, [pc, #136]	; (afc <i2c_master_init+0x2f4>)
     a74:	4798      	blx	r3
     a76:	3802      	subs	r0, #2
     a78:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     a7a:	002b      	movs	r3, r5
     a7c:	2dff      	cmp	r5, #255	; 0xff
     a7e:	d80c      	bhi.n	a9a <i2c_master_init+0x292>
     a80:	28ff      	cmp	r0, #255	; 0xff
     a82:	d9bc      	bls.n	9fe <i2c_master_init+0x1f6>
     a84:	2040      	movs	r0, #64	; 0x40
     a86:	e6e6      	b.n	856 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     a88:	0071      	lsls	r1, r6, #1
     a8a:	1e48      	subs	r0, r1, #1
     a8c:	9b07      	ldr	r3, [sp, #28]
     a8e:	469c      	mov	ip, r3
     a90:	4460      	add	r0, ip
     a92:	4b1a      	ldr	r3, [pc, #104]	; (afc <i2c_master_init+0x2f4>)
     a94:	4798      	blx	r3
     a96:	3801      	subs	r0, #1
     a98:	e7ef      	b.n	a7a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     a9a:	2040      	movs	r0, #64	; 0x40
     a9c:	e6db      	b.n	856 <i2c_master_init+0x4e>
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	00003cf9 	.word	0x00003cf9
     aa4:	40000400 	.word	0x40000400
     aa8:	000047bd 	.word	0x000047bd
     aac:	00004731 	.word	0x00004731
     ab0:	00003b35 	.word	0x00003b35
     ab4:	00000ddd 	.word	0x00000ddd
     ab8:	00003d35 	.word	0x00003d35
     abc:	20005340 	.word	0x20005340
     ac0:	000048e5 	.word	0x000048e5
     ac4:	41002000 	.word	0x41002000
     ac8:	00004809 	.word	0x00004809
     acc:	000075a1 	.word	0x000075a1
     ad0:	00006989 	.word	0x00006989
     ad4:	e826d695 	.word	0xe826d695
     ad8:	3e112e0b 	.word	0x3e112e0b
     adc:	00005b01 	.word	0x00005b01
     ae0:	40240000 	.word	0x40240000
     ae4:	00006e89 	.word	0x00006e89
     ae8:	3ff00000 	.word	0x3ff00000
     aec:	00006121 	.word	0x00006121
     af0:	000074b5 	.word	0x000074b5
     af4:	00003b81 	.word	0x00003b81
     af8:	40080000 	.word	0x40080000
     afc:	00004ae1 	.word	0x00004ae1

00000b00 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b00:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b02:	7e1a      	ldrb	r2, [r3, #24]
     b04:	0792      	lsls	r2, r2, #30
     b06:	d507      	bpl.n	b18 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b08:	2202      	movs	r2, #2
     b0a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b0c:	8b5b      	ldrh	r3, [r3, #26]
     b0e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     b10:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     b12:	17db      	asrs	r3, r3, #31
     b14:	4018      	ands	r0, r3
}
     b16:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b18:	8b5a      	ldrh	r2, [r3, #26]
     b1a:	0752      	lsls	r2, r2, #29
     b1c:	d506      	bpl.n	b2c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b1e:	6859      	ldr	r1, [r3, #4]
     b20:	22c0      	movs	r2, #192	; 0xc0
     b22:	0292      	lsls	r2, r2, #10
     b24:	430a      	orrs	r2, r1
     b26:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     b28:	2018      	movs	r0, #24
     b2a:	e7f4      	b.n	b16 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     b2c:	2000      	movs	r0, #0
     b2e:	e7f2      	b.n	b16 <_i2c_master_address_response+0x16>

00000b30 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     b30:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b32:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     b34:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b36:	2401      	movs	r4, #1
     b38:	2502      	movs	r5, #2
     b3a:	7e11      	ldrb	r1, [r2, #24]
     b3c:	4221      	tst	r1, r4
     b3e:	d10b      	bne.n	b58 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     b40:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b42:	4229      	tst	r1, r5
     b44:	d106      	bne.n	b54 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     b46:	3301      	adds	r3, #1
     b48:	b29b      	uxth	r3, r3
     b4a:	8901      	ldrh	r1, [r0, #8]
     b4c:	4299      	cmp	r1, r3
     b4e:	d8f4      	bhi.n	b3a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     b50:	2012      	movs	r0, #18
     b52:	e002      	b.n	b5a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     b54:	2000      	movs	r0, #0
     b56:	e000      	b.n	b5a <_i2c_master_wait_for_bus+0x2a>
     b58:	2000      	movs	r0, #0
}
     b5a:	bd30      	pop	{r4, r5, pc}

00000b5c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     b5c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b5e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b60:	6862      	ldr	r2, [r4, #4]
     b62:	2380      	movs	r3, #128	; 0x80
     b64:	02db      	lsls	r3, r3, #11
     b66:	4313      	orrs	r3, r2
     b68:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     b6a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b6c:	4b02      	ldr	r3, [pc, #8]	; (b78 <_i2c_master_send_hs_master_code+0x1c>)
     b6e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     b70:	2301      	movs	r3, #1
     b72:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     b74:	bd10      	pop	{r4, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00000b31 	.word	0x00000b31

00000b7c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     b7c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     b7e:	2207      	movs	r2, #7
     b80:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     b82:	421a      	tst	r2, r3
     b84:	d1fc      	bne.n	b80 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     b86:	4770      	bx	lr

00000b88 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     b88:	b570      	push	{r4, r5, r6, lr}
     b8a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b8c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     b8e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     b90:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     b92:	8b83      	ldrh	r3, [r0, #28]
     b94:	1aed      	subs	r5, r5, r3
     b96:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     b98:	8b83      	ldrh	r3, [r0, #28]
     b9a:	3b01      	subs	r3, #1
     b9c:	b29b      	uxth	r3, r3
     b9e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     ba0:	0113      	lsls	r3, r2, #4
     ba2:	d51d      	bpl.n	be0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     ba4:	7ac3      	ldrb	r3, [r0, #11]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d003      	beq.n	bb2 <_i2c_master_read+0x2a>
     baa:	8b83      	ldrh	r3, [r0, #28]
     bac:	b29b      	uxth	r3, r3
     bae:	2b01      	cmp	r3, #1
     bb0:	d010      	beq.n	bd4 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     bb2:	8ba3      	ldrh	r3, [r4, #28]
     bb4:	b29b      	uxth	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	d102      	bne.n	bc0 <_i2c_master_read+0x38>
		if (module->send_stop) {
     bba:	7aa3      	ldrb	r3, [r4, #10]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d11c      	bne.n	bfa <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     bc0:	0020      	movs	r0, r4
     bc2:	4b12      	ldr	r3, [pc, #72]	; (c0c <_i2c_master_read+0x84>)
     bc4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     bc6:	6a23      	ldr	r3, [r4, #32]
     bc8:	195d      	adds	r5, r3, r5
     bca:	2328      	movs	r3, #40	; 0x28
     bcc:	5cf3      	ldrb	r3, [r6, r3]
     bce:	b2db      	uxtb	r3, r3
     bd0:	702b      	strb	r3, [r5, #0]
}
     bd2:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bd4:	6872      	ldr	r2, [r6, #4]
     bd6:	2380      	movs	r3, #128	; 0x80
     bd8:	02db      	lsls	r3, r3, #11
     bda:	4313      	orrs	r3, r2
     bdc:	6073      	str	r3, [r6, #4]
     bde:	e7e8      	b.n	bb2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     be0:	7ac3      	ldrb	r3, [r0, #11]
     be2:	2b00      	cmp	r3, #0
     be4:	d0e5      	beq.n	bb2 <_i2c_master_read+0x2a>
     be6:	8b83      	ldrh	r3, [r0, #28]
     be8:	b29b      	uxth	r3, r3
     bea:	2b00      	cmp	r3, #0
     bec:	d1e1      	bne.n	bb2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bee:	6872      	ldr	r2, [r6, #4]
     bf0:	2380      	movs	r3, #128	; 0x80
     bf2:	02db      	lsls	r3, r3, #11
     bf4:	4313      	orrs	r3, r2
     bf6:	6073      	str	r3, [r6, #4]
     bf8:	e7db      	b.n	bb2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     bfa:	0020      	movs	r0, r4
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <_i2c_master_read+0x84>)
     bfe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c00:	6872      	ldr	r2, [r6, #4]
     c02:	23c0      	movs	r3, #192	; 0xc0
     c04:	029b      	lsls	r3, r3, #10
     c06:	4313      	orrs	r3, r2
     c08:	6073      	str	r3, [r6, #4]
     c0a:	e7d9      	b.n	bc0 <_i2c_master_read+0x38>
     c0c:	00000b7d 	.word	0x00000b7d

00000c10 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c10:	b570      	push	{r4, r5, r6, lr}
     c12:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c14:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c16:	8b6b      	ldrh	r3, [r5, #26]
     c18:	075b      	lsls	r3, r3, #29
     c1a:	d503      	bpl.n	c24 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     c1c:	221e      	movs	r2, #30
     c1e:	2325      	movs	r3, #37	; 0x25
     c20:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     c22:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     c24:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c26:	8b83      	ldrh	r3, [r0, #28]
     c28:	1af6      	subs	r6, r6, r3
     c2a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     c2c:	8b83      	ldrh	r3, [r0, #28]
     c2e:	3b01      	subs	r3, #1
     c30:	b29b      	uxth	r3, r3
     c32:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     c34:	4b04      	ldr	r3, [pc, #16]	; (c48 <_i2c_master_write+0x38>)
     c36:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     c38:	6a23      	ldr	r3, [r4, #32]
     c3a:	199e      	adds	r6, r3, r6
     c3c:	7833      	ldrb	r3, [r6, #0]
     c3e:	b2db      	uxtb	r3, r3
     c40:	2228      	movs	r2, #40	; 0x28
     c42:	54ab      	strb	r3, [r5, r2]
     c44:	e7ed      	b.n	c22 <_i2c_master_write+0x12>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000b7d 	.word	0x00000b7d

00000c4c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c4c:	b570      	push	{r4, r5, r6, lr}
     c4e:	0005      	movs	r5, r0
     c50:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c52:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c54:	7a4b      	ldrb	r3, [r1, #9]
     c56:	2b00      	cmp	r3, #0
     c58:	d11a      	bne.n	c90 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c5a:	6873      	ldr	r3, [r6, #4]
     c5c:	4a13      	ldr	r2, [pc, #76]	; (cac <_i2c_master_write_packet+0x60>)
     c5e:	4013      	ands	r3, r2
     c60:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     c62:	6863      	ldr	r3, [r4, #4]
     c64:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     c66:	8863      	ldrh	r3, [r4, #2]
     c68:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     c6a:	2200      	movs	r2, #0
     c6c:	2324      	movs	r3, #36	; 0x24
     c6e:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     c70:	3205      	adds	r2, #5
     c72:	3301      	adds	r3, #1
     c74:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     c76:	3b22      	subs	r3, #34	; 0x22
     c78:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     c7a:	7a23      	ldrb	r3, [r4, #8]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d10b      	bne.n	c98 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     c80:	8823      	ldrh	r3, [r4, #0]
     c82:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c84:	7a62      	ldrb	r2, [r4, #9]
     c86:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     c88:	4313      	orrs	r3, r2
     c8a:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     c8c:	2000      	movs	r0, #0
     c8e:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c90:	7a89      	ldrb	r1, [r1, #10]
     c92:	4b07      	ldr	r3, [pc, #28]	; (cb0 <_i2c_master_write_packet+0x64>)
     c94:	4798      	blx	r3
     c96:	e7e0      	b.n	c5a <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     c98:	8823      	ldrh	r3, [r4, #0]
     c9a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c9c:	7a62      	ldrb	r2, [r4, #9]
     c9e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ca0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ca2:	2280      	movs	r2, #128	; 0x80
     ca4:	0212      	lsls	r2, r2, #8
     ca6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ca8:	6273      	str	r3, [r6, #36]	; 0x24
     caa:	e7ef      	b.n	c8c <_i2c_master_write_packet+0x40>
     cac:	fffbffff 	.word	0xfffbffff
     cb0:	00000b5d 	.word	0x00000b5d

00000cb4 <_i2c_master_read_packet>:
{
     cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cb6:	0005      	movs	r5, r0
     cb8:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cba:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     cbc:	684b      	ldr	r3, [r1, #4]
     cbe:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     cc0:	884b      	ldrh	r3, [r1, #2]
     cc2:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     cc4:	2201      	movs	r2, #1
     cc6:	2324      	movs	r3, #36	; 0x24
     cc8:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     cca:	3204      	adds	r2, #4
     ccc:	3301      	adds	r3, #1
     cce:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     cd0:	6837      	ldr	r7, [r6, #0]
     cd2:	013f      	lsls	r7, r7, #4
     cd4:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     cd6:	7a4b      	ldrb	r3, [r1, #9]
     cd8:	2b00      	cmp	r3, #0
     cda:	d117      	bne.n	d0c <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     cdc:	2f00      	cmp	r7, #0
     cde:	d002      	beq.n	ce6 <_i2c_master_read_packet+0x32>
     ce0:	8863      	ldrh	r3, [r4, #2]
     ce2:	2b01      	cmp	r3, #1
     ce4:	d016      	beq.n	d14 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ce6:	6873      	ldr	r3, [r6, #4]
     ce8:	4a20      	ldr	r2, [pc, #128]	; (d6c <_i2c_master_read_packet+0xb8>)
     cea:	4013      	ands	r3, r2
     cec:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     cee:	7a23      	ldrb	r3, [r4, #8]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d115      	bne.n	d20 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     cf4:	2303      	movs	r3, #3
     cf6:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     cf8:	8823      	ldrh	r3, [r4, #0]
     cfa:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     cfc:	7a62      	ldrb	r2, [r4, #9]
     cfe:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     d00:	4313      	orrs	r3, r2
     d02:	2201      	movs	r2, #1
     d04:	4313      	orrs	r3, r2
     d06:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     d08:	2000      	movs	r0, #0
}
     d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     d0c:	7a89      	ldrb	r1, [r1, #10]
     d0e:	4b18      	ldr	r3, [pc, #96]	; (d70 <_i2c_master_read_packet+0xbc>)
     d10:	4798      	blx	r3
     d12:	e7e3      	b.n	cdc <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d14:	6872      	ldr	r2, [r6, #4]
     d16:	2380      	movs	r3, #128	; 0x80
     d18:	02db      	lsls	r3, r3, #11
     d1a:	4313      	orrs	r3, r2
     d1c:	6073      	str	r3, [r6, #4]
     d1e:	e7e6      	b.n	cee <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     d20:	8823      	ldrh	r3, [r4, #0]
     d22:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d24:	7a62      	ldrb	r2, [r4, #9]
     d26:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     d28:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d2a:	2280      	movs	r2, #128	; 0x80
     d2c:	0212      	lsls	r2, r2, #8
     d2e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     d30:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     d32:	0028      	movs	r0, r5
     d34:	4b0f      	ldr	r3, [pc, #60]	; (d74 <_i2c_master_read_packet+0xc0>)
     d36:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d38:	6873      	ldr	r3, [r6, #4]
     d3a:	4a0c      	ldr	r2, [pc, #48]	; (d6c <_i2c_master_read_packet+0xb8>)
     d3c:	4013      	ands	r3, r2
     d3e:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     d40:	2800      	cmp	r0, #0
     d42:	d1e2      	bne.n	d0a <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     d44:	0028      	movs	r0, r5
     d46:	4b0c      	ldr	r3, [pc, #48]	; (d78 <_i2c_master_read_packet+0xc4>)
     d48:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     d4a:	2800      	cmp	r0, #0
     d4c:	d1dd      	bne.n	d0a <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     d4e:	2303      	movs	r3, #3
     d50:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d52:	8823      	ldrh	r3, [r4, #0]
     d54:	0a1b      	lsrs	r3, r3, #8
     d56:	2278      	movs	r2, #120	; 0x78
     d58:	4313      	orrs	r3, r2
     d5a:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d5c:	7a62      	ldrb	r2, [r4, #9]
     d5e:	0392      	lsls	r2, r2, #14
     d60:	2101      	movs	r1, #1
     d62:	430a      	orrs	r2, r1
     d64:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d66:	6273      	str	r3, [r6, #36]	; 0x24
     d68:	e7cf      	b.n	d0a <_i2c_master_read_packet+0x56>
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	fffbffff 	.word	0xfffbffff
     d70:	00000b5d 	.word	0x00000b5d
     d74:	00000b31 	.word	0x00000b31
     d78:	00000b01 	.word	0x00000b01

00000d7c <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     d7c:	1c93      	adds	r3, r2, #2
     d7e:	009b      	lsls	r3, r3, #2
     d80:	18c3      	adds	r3, r0, r3
     d82:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     d84:	7e03      	ldrb	r3, [r0, #24]
     d86:	2101      	movs	r1, #1
     d88:	4091      	lsls	r1, r2
     d8a:	430b      	orrs	r3, r1
     d8c:	b2db      	uxtb	r3, r3
     d8e:	7603      	strb	r3, [r0, #24]
}
     d90:	4770      	bx	lr
	...

00000d94 <i2c_master_read_packet_job>:
{
     d94:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     d96:	8b83      	ldrh	r3, [r0, #28]
     d98:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d9a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     d9c:	2b00      	cmp	r3, #0
     d9e:	d001      	beq.n	da4 <i2c_master_read_packet_job+0x10>
}
     da0:	0010      	movs	r0, r2
     da2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     da4:	3301      	adds	r3, #1
     da6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     da8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     daa:	4b02      	ldr	r3, [pc, #8]	; (db4 <i2c_master_read_packet_job+0x20>)
     dac:	4798      	blx	r3
     dae:	0002      	movs	r2, r0
     db0:	e7f6      	b.n	da0 <i2c_master_read_packet_job+0xc>
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000cb5 	.word	0x00000cb5

00000db8 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     db8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     dba:	8b83      	ldrh	r3, [r0, #28]
     dbc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     dbe:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     dc0:	2b00      	cmp	r3, #0
     dc2:	d001      	beq.n	dc8 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     dc4:	0010      	movs	r0, r2
     dc6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     dc8:	3301      	adds	r3, #1
     dca:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     dcc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     dce:	4b02      	ldr	r3, [pc, #8]	; (dd8 <i2c_master_write_packet_job+0x20>)
     dd0:	4798      	blx	r3
     dd2:	0002      	movs	r2, r0
     dd4:	e7f6      	b.n	dc4 <i2c_master_write_packet_job+0xc>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00000c4d 	.word	0x00000c4d

00000ddc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     ddc:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     dde:	0080      	lsls	r0, r0, #2
     de0:	4b75      	ldr	r3, [pc, #468]	; (fb8 <_i2c_master_interrupt_handler+0x1dc>)
     de2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     de4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     de6:	682b      	ldr	r3, [r5, #0]
     de8:	011b      	lsls	r3, r3, #4
     dea:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     dec:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     dee:	7e26      	ldrb	r6, [r4, #24]
     df0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     df2:	8b63      	ldrh	r3, [r4, #26]
     df4:	b29b      	uxth	r3, r3
     df6:	2b00      	cmp	r3, #0
     df8:	d103      	bne.n	e02 <_i2c_master_interrupt_handler+0x26>
     dfa:	8ba3      	ldrh	r3, [r4, #28]
     dfc:	b29b      	uxth	r3, r3
     dfe:	2b00      	cmp	r3, #0
     e00:	d123      	bne.n	e4a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e02:	8b63      	ldrh	r3, [r4, #26]
     e04:	b29b      	uxth	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	d008      	beq.n	e1c <_i2c_master_interrupt_handler+0x40>
     e0a:	8ba3      	ldrh	r3, [r4, #28]
     e0c:	b29b      	uxth	r3, r3
     e0e:	2b00      	cmp	r3, #0
     e10:	d104      	bne.n	e1c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     e12:	3325      	adds	r3, #37	; 0x25
     e14:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e16:	2b05      	cmp	r3, #5
     e18:	d100      	bne.n	e1c <_i2c_master_interrupt_handler+0x40>
     e1a:	e06d      	b.n	ef8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     e1c:	8b63      	ldrh	r3, [r4, #26]
     e1e:	b29b      	uxth	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	d024      	beq.n	e6e <_i2c_master_interrupt_handler+0x92>
     e24:	8ba3      	ldrh	r3, [r4, #28]
     e26:	b29b      	uxth	r3, r3
     e28:	2b00      	cmp	r3, #0
     e2a:	d020      	beq.n	e6e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     e2c:	8b6b      	ldrh	r3, [r5, #26]
     e2e:	069b      	lsls	r3, r3, #26
     e30:	d500      	bpl.n	e34 <_i2c_master_interrupt_handler+0x58>
     e32:	e081      	b.n	f38 <_i2c_master_interrupt_handler+0x15c>
     e34:	2a00      	cmp	r2, #0
     e36:	d004      	beq.n	e42 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     e38:	8ba3      	ldrh	r3, [r4, #28]
     e3a:	b29b      	uxth	r3, r3
     e3c:	2b01      	cmp	r3, #1
     e3e:	d100      	bne.n	e42 <_i2c_master_interrupt_handler+0x66>
     e40:	e07a      	b.n	f38 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e42:	2241      	movs	r2, #65	; 0x41
     e44:	2325      	movs	r3, #37	; 0x25
     e46:	54e2      	strb	r2, [r4, r3]
     e48:	e011      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     e4a:	7e2b      	ldrb	r3, [r5, #24]
     e4c:	07db      	lsls	r3, r3, #31
     e4e:	d507      	bpl.n	e60 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     e50:	2301      	movs	r3, #1
     e52:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     e54:	8b6b      	ldrh	r3, [r5, #26]
     e56:	079b      	lsls	r3, r3, #30
     e58:	d52e      	bpl.n	eb8 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e5a:	2241      	movs	r2, #65	; 0x41
     e5c:	2325      	movs	r3, #37	; 0x25
     e5e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     e60:	8ba3      	ldrh	r3, [r4, #28]
     e62:	b29b      	uxth	r3, r3
     e64:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     e66:	2325      	movs	r3, #37	; 0x25
     e68:	5ce3      	ldrb	r3, [r4, r3]
     e6a:	2b05      	cmp	r3, #5
     e6c:	d038      	beq.n	ee0 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e6e:	8b63      	ldrh	r3, [r4, #26]
     e70:	b29b      	uxth	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	d007      	beq.n	e86 <_i2c_master_interrupt_handler+0xaa>
     e76:	8ba3      	ldrh	r3, [r4, #28]
     e78:	b29b      	uxth	r3, r3
     e7a:	2b00      	cmp	r3, #0
     e7c:	d103      	bne.n	e86 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     e7e:	3325      	adds	r3, #37	; 0x25
     e80:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e82:	2b05      	cmp	r3, #5
     e84:	d064      	beq.n	f50 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     e86:	2325      	movs	r3, #37	; 0x25
     e88:	5ce3      	ldrb	r3, [r4, r3]
     e8a:	2b05      	cmp	r3, #5
     e8c:	d013      	beq.n	eb6 <_i2c_master_interrupt_handler+0xda>
     e8e:	2325      	movs	r3, #37	; 0x25
     e90:	5ce3      	ldrb	r3, [r4, r3]
     e92:	2b00      	cmp	r3, #0
     e94:	d00f      	beq.n	eb6 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     e96:	2303      	movs	r3, #3
     e98:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     e9e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     ea0:	3325      	adds	r3, #37	; 0x25
     ea2:	5ce3      	ldrb	r3, [r4, r3]
     ea4:	2b41      	cmp	r3, #65	; 0x41
     ea6:	d003      	beq.n	eb0 <_i2c_master_interrupt_handler+0xd4>
     ea8:	7aa3      	ldrb	r3, [r4, #10]
     eaa:	2b00      	cmp	r3, #0
     eac:	d000      	beq.n	eb0 <_i2c_master_interrupt_handler+0xd4>
     eae:	e075      	b.n	f9c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     eb0:	0773      	lsls	r3, r6, #29
     eb2:	d500      	bpl.n	eb6 <_i2c_master_interrupt_handler+0xda>
     eb4:	e07b      	b.n	fae <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     eb6:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     eb8:	8b6b      	ldrh	r3, [r5, #26]
     eba:	075b      	lsls	r3, r3, #29
     ebc:	d5d0      	bpl.n	e60 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     ebe:	2218      	movs	r2, #24
     ec0:	2325      	movs	r3, #37	; 0x25
     ec2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     ec4:	2300      	movs	r3, #0
     ec6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     ec8:	7aa3      	ldrb	r3, [r4, #10]
     eca:	2b00      	cmp	r3, #0
     ecc:	d0c8      	beq.n	e60 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     ece:	0020      	movs	r0, r4
     ed0:	4b3a      	ldr	r3, [pc, #232]	; (fbc <_i2c_master_interrupt_handler+0x1e0>)
     ed2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ed4:	686a      	ldr	r2, [r5, #4]
     ed6:	23c0      	movs	r3, #192	; 0xc0
     ed8:	029b      	lsls	r3, r3, #10
     eda:	4313      	orrs	r3, r2
     edc:	606b      	str	r3, [r5, #4]
     ede:	e7bf      	b.n	e60 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ee0:	331f      	adds	r3, #31
     ee2:	5ce3      	ldrb	r3, [r4, r3]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d003      	beq.n	ef0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     ee8:	0020      	movs	r0, r4
     eea:	4b35      	ldr	r3, [pc, #212]	; (fc0 <_i2c_master_interrupt_handler+0x1e4>)
     eec:	4798      	blx	r3
     eee:	e7be      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     ef0:	0020      	movs	r0, r4
     ef2:	4b34      	ldr	r3, [pc, #208]	; (fc4 <_i2c_master_interrupt_handler+0x1e8>)
     ef4:	4798      	blx	r3
     ef6:	e7ba      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ef8:	331f      	adds	r3, #31
     efa:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     efc:	2b00      	cmp	r3, #0
     efe:	d000      	beq.n	f02 <_i2c_master_interrupt_handler+0x126>
     f00:	e78c      	b.n	e1c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     f02:	3303      	adds	r3, #3
     f04:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     f06:	2300      	movs	r3, #0
     f08:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     f0a:	3325      	adds	r3, #37	; 0x25
     f0c:	2200      	movs	r2, #0
     f0e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     f10:	7aa3      	ldrb	r3, [r4, #10]
     f12:	2b00      	cmp	r3, #0
     f14:	d107      	bne.n	f26 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f16:	2301      	movs	r3, #1
     f18:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     f1a:	07f3      	lsls	r3, r6, #31
     f1c:	d5a7      	bpl.n	e6e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f1e:	68e3      	ldr	r3, [r4, #12]
     f20:	0020      	movs	r0, r4
     f22:	4798      	blx	r3
     f24:	e7a3      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     f26:	0020      	movs	r0, r4
     f28:	4b24      	ldr	r3, [pc, #144]	; (fbc <_i2c_master_interrupt_handler+0x1e0>)
     f2a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f2c:	686a      	ldr	r2, [r5, #4]
     f2e:	23c0      	movs	r3, #192	; 0xc0
     f30:	029b      	lsls	r3, r3, #10
     f32:	4313      	orrs	r3, r2
     f34:	606b      	str	r3, [r5, #4]
     f36:	e7f0      	b.n	f1a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     f38:	2324      	movs	r3, #36	; 0x24
     f3a:	5ce3      	ldrb	r3, [r4, r3]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d103      	bne.n	f48 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     f40:	0020      	movs	r0, r4
     f42:	4b20      	ldr	r3, [pc, #128]	; (fc4 <_i2c_master_interrupt_handler+0x1e8>)
     f44:	4798      	blx	r3
     f46:	e792      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     f48:	0020      	movs	r0, r4
     f4a:	4b1d      	ldr	r3, [pc, #116]	; (fc0 <_i2c_master_interrupt_handler+0x1e4>)
     f4c:	4798      	blx	r3
     f4e:	e78e      	b.n	e6e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     f50:	331f      	adds	r3, #31
     f52:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     f54:	2b01      	cmp	r3, #1
     f56:	d196      	bne.n	e86 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     f58:	7e2b      	ldrb	r3, [r5, #24]
     f5a:	079b      	lsls	r3, r3, #30
     f5c:	d501      	bpl.n	f62 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f5e:	2302      	movs	r3, #2
     f60:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     f62:	2303      	movs	r3, #3
     f64:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     f66:	2300      	movs	r3, #0
     f68:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     f6a:	3325      	adds	r3, #37	; 0x25
     f6c:	2200      	movs	r2, #0
     f6e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     f70:	07b3      	lsls	r3, r6, #30
     f72:	d503      	bpl.n	f7c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     f74:	2324      	movs	r3, #36	; 0x24
     f76:	5ce3      	ldrb	r3, [r4, r3]
     f78:	2b01      	cmp	r3, #1
     f7a:	d00b      	beq.n	f94 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     f7c:	07f3      	lsls	r3, r6, #31
     f7e:	d400      	bmi.n	f82 <_i2c_master_interrupt_handler+0x1a6>
     f80:	e781      	b.n	e86 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     f82:	2324      	movs	r3, #36	; 0x24
     f84:	5ce3      	ldrb	r3, [r4, r3]
     f86:	2b00      	cmp	r3, #0
     f88:	d000      	beq.n	f8c <_i2c_master_interrupt_handler+0x1b0>
     f8a:	e77c      	b.n	e86 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f8c:	68e3      	ldr	r3, [r4, #12]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e778      	b.n	e86 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     f94:	6923      	ldr	r3, [r4, #16]
     f96:	0020      	movs	r0, r4
     f98:	4798      	blx	r3
     f9a:	e774      	b.n	e86 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     f9c:	0020      	movs	r0, r4
     f9e:	4b07      	ldr	r3, [pc, #28]	; (fbc <_i2c_master_interrupt_handler+0x1e0>)
     fa0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     fa2:	686a      	ldr	r2, [r5, #4]
     fa4:	23e0      	movs	r3, #224	; 0xe0
     fa6:	02db      	lsls	r3, r3, #11
     fa8:	4313      	orrs	r3, r2
     faa:	606b      	str	r3, [r5, #4]
     fac:	e780      	b.n	eb0 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     fae:	6963      	ldr	r3, [r4, #20]
     fb0:	0020      	movs	r0, r4
     fb2:	4798      	blx	r3
}
     fb4:	e77f      	b.n	eb6 <_i2c_master_interrupt_handler+0xda>
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	20005340 	.word	0x20005340
     fbc:	00000b7d 	.word	0x00000b7d
     fc0:	00000b89 	.word	0x00000b89
     fc4:	00000c11 	.word	0x00000c11

00000fc8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     fc8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     fca:	2300      	movs	r3, #0
     fcc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     fce:	4b06      	ldr	r3, [pc, #24]	; (fe8 <prvTaskExitError+0x20>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	3301      	adds	r3, #1
     fd4:	d001      	beq.n	fda <prvTaskExitError+0x12>
     fd6:	b672      	cpsid	i
     fd8:	e7fe      	b.n	fd8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     fda:	b672      	cpsid	i
	while( ulDummy == 0 )
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	2b00      	cmp	r3, #0
     fe0:	d0fc      	beq.n	fdc <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     fe2:	b002      	add	sp, #8
     fe4:	4770      	bx	lr
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	20000000 	.word	0x20000000
     fec:	00000000 	.word	0x00000000

00000ff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     ff0:	4a0b      	ldr	r2, [pc, #44]	; (1020 <pxCurrentTCBConst2>)
     ff2:	6813      	ldr	r3, [r2, #0]
     ff4:	6818      	ldr	r0, [r3, #0]
     ff6:	3020      	adds	r0, #32
     ff8:	f380 8809 	msr	PSP, r0
     ffc:	2002      	movs	r0, #2
     ffe:	f380 8814 	msr	CONTROL, r0
    1002:	f3bf 8f6f 	isb	sy
    1006:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1008:	46ae      	mov	lr, r5
    100a:	bc08      	pop	{r3}
    100c:	bc04      	pop	{r2}
    100e:	b662      	cpsie	i
    1010:	4718      	bx	r3
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	46c0      	nop			; (mov r8, r8)
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	46c0      	nop			; (mov r8, r8)
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	46c0      	nop			; (mov r8, r8)
    101e:	46c0      	nop			; (mov r8, r8)

00001020 <pxCurrentTCBConst2>:
    1020:	2000516c 	.word	0x2000516c

00001024 <pxPortInitialiseStack>:
{
    1024:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1026:	1f03      	subs	r3, r0, #4
    1028:	2480      	movs	r4, #128	; 0x80
    102a:	0464      	lsls	r4, r4, #17
    102c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    102e:	3b04      	subs	r3, #4
    1030:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1032:	3b04      	subs	r3, #4
    1034:	4902      	ldr	r1, [pc, #8]	; (1040 <pxPortInitialiseStack+0x1c>)
    1036:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1038:	3b14      	subs	r3, #20
    103a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    103c:	3840      	subs	r0, #64	; 0x40
}
    103e:	bd10      	pop	{r4, pc}
    1040:	00000fc9 	.word	0x00000fc9

00001044 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1044:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1046:	4b0f      	ldr	r3, [pc, #60]	; (1084 <xPortStartScheduler+0x40>)
    1048:	6819      	ldr	r1, [r3, #0]
    104a:	22ff      	movs	r2, #255	; 0xff
    104c:	0412      	lsls	r2, r2, #16
    104e:	430a      	orrs	r2, r1
    1050:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1052:	6819      	ldr	r1, [r3, #0]
    1054:	22ff      	movs	r2, #255	; 0xff
    1056:	0612      	lsls	r2, r2, #24
    1058:	430a      	orrs	r2, r1
    105a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    105c:	4a0a      	ldr	r2, [pc, #40]	; (1088 <xPortStartScheduler+0x44>)
    105e:	2300      	movs	r3, #0
    1060:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    1062:	490a      	ldr	r1, [pc, #40]	; (108c <xPortStartScheduler+0x48>)
    1064:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1066:	480a      	ldr	r0, [pc, #40]	; (1090 <xPortStartScheduler+0x4c>)
    1068:	490a      	ldr	r1, [pc, #40]	; (1094 <xPortStartScheduler+0x50>)
    106a:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    106c:	2107      	movs	r1, #7
    106e:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
    1070:	4a09      	ldr	r2, [pc, #36]	; (1098 <xPortStartScheduler+0x54>)
    1072:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
    1074:	4b09      	ldr	r3, [pc, #36]	; (109c <xPortStartScheduler+0x58>)
    1076:	4798      	blx	r3
	vTaskSwitchContext();
    1078:	4b09      	ldr	r3, [pc, #36]	; (10a0 <xPortStartScheduler+0x5c>)
    107a:	4798      	blx	r3
	prvTaskExitError();
    107c:	4b09      	ldr	r3, [pc, #36]	; (10a4 <xPortStartScheduler+0x60>)
    107e:	4798      	blx	r3
}
    1080:	2000      	movs	r0, #0
    1082:	bd10      	pop	{r4, pc}
    1084:	e000ed20 	.word	0xe000ed20
    1088:	e000e010 	.word	0xe000e010
    108c:	e000e018 	.word	0xe000e018
    1090:	0000bb7f 	.word	0x0000bb7f
    1094:	e000e014 	.word	0xe000e014
    1098:	20000000 	.word	0x20000000
    109c:	00000ff1 	.word	0x00000ff1
    10a0:	000032f9 	.word	0x000032f9
    10a4:	00000fc9 	.word	0x00000fc9

000010a8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	0552      	lsls	r2, r2, #21
    10ac:	4b03      	ldr	r3, [pc, #12]	; (10bc <vPortYield+0x14>)
    10ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    10b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    10b4:	f3bf 8f6f 	isb	sy
}
    10b8:	4770      	bx	lr
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	e000ed04 	.word	0xe000ed04

000010c0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    10c0:	b672      	cpsid	i
    uxCriticalNesting++;
    10c2:	4a04      	ldr	r2, [pc, #16]	; (10d4 <vPortEnterCritical+0x14>)
    10c4:	6813      	ldr	r3, [r2, #0]
    10c6:	3301      	adds	r3, #1
    10c8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    10ca:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    10ce:	f3bf 8f6f 	isb	sy
}
    10d2:	4770      	bx	lr
    10d4:	20000000 	.word	0x20000000

000010d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    10d8:	4b06      	ldr	r3, [pc, #24]	; (10f4 <vPortExitCritical+0x1c>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	2b00      	cmp	r3, #0
    10de:	d101      	bne.n	10e4 <vPortExitCritical+0xc>
    10e0:	b672      	cpsid	i
    10e2:	e7fe      	b.n	10e2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    10e4:	3b01      	subs	r3, #1
    10e6:	4a03      	ldr	r2, [pc, #12]	; (10f4 <vPortExitCritical+0x1c>)
    10e8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    10ea:	2b00      	cmp	r3, #0
    10ec:	d100      	bne.n	10f0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    10ee:	b662      	cpsie	i
}
    10f0:	4770      	bx	lr
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	20000000 	.word	0x20000000

000010f8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    10f8:	f3ef 8010 	mrs	r0, PRIMASK
    10fc:	b672      	cpsid	i
    10fe:	4770      	bx	lr

00001100 <vClearInterruptMaskFromISR>:
	__asm volatile(
    1100:	f380 8810 	msr	PRIMASK, r0
    1104:	4770      	bx	lr
	...

00001108 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1108:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    110a:	4b12      	ldr	r3, [pc, #72]	; (1154 <prvInsertBlockIntoFreeList+0x4c>)
    110c:	681a      	ldr	r2, [r3, #0]
    110e:	4282      	cmp	r2, r0
    1110:	d319      	bcc.n	1146 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1112:	685c      	ldr	r4, [r3, #4]
    1114:	1919      	adds	r1, r3, r4
    1116:	4288      	cmp	r0, r1
    1118:	d103      	bne.n	1122 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    111a:	6841      	ldr	r1, [r0, #4]
    111c:	1909      	adds	r1, r1, r4
    111e:	6059      	str	r1, [r3, #4]
    1120:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1122:	6841      	ldr	r1, [r0, #4]
    1124:	1844      	adds	r4, r0, r1
    1126:	42a2      	cmp	r2, r4
    1128:	d111      	bne.n	114e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    112a:	4c0b      	ldr	r4, [pc, #44]	; (1158 <prvInsertBlockIntoFreeList+0x50>)
    112c:	6824      	ldr	r4, [r4, #0]
    112e:	42a2      	cmp	r2, r4
    1130:	d00b      	beq.n	114a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1132:	6852      	ldr	r2, [r2, #4]
    1134:	1852      	adds	r2, r2, r1
    1136:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1138:	681a      	ldr	r2, [r3, #0]
    113a:	6812      	ldr	r2, [r2, #0]
    113c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    113e:	4298      	cmp	r0, r3
    1140:	d000      	beq.n	1144 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1142:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1144:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1146:	0013      	movs	r3, r2
    1148:	e7e0      	b.n	110c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    114a:	6002      	str	r2, [r0, #0]
    114c:	e7f7      	b.n	113e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    114e:	6002      	str	r2, [r0, #0]
    1150:	e7f5      	b.n	113e <prvInsertBlockIntoFreeList+0x36>
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	20004ec0 	.word	0x20004ec0
    1158:	20000090 	.word	0x20000090

0000115c <pvPortMalloc>:
{
    115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    115e:	0004      	movs	r4, r0
	vTaskSuspendAll();
    1160:	4b3e      	ldr	r3, [pc, #248]	; (125c <pvPortMalloc+0x100>)
    1162:	4798      	blx	r3
		if( pxEnd == NULL )
    1164:	4b3e      	ldr	r3, [pc, #248]	; (1260 <pvPortMalloc+0x104>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	2b00      	cmp	r3, #0
    116a:	d015      	beq.n	1198 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    116c:	4b3d      	ldr	r3, [pc, #244]	; (1264 <pvPortMalloc+0x108>)
    116e:	681f      	ldr	r7, [r3, #0]
    1170:	423c      	tst	r4, r7
    1172:	d168      	bne.n	1246 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
    1174:	2c00      	cmp	r4, #0
    1176:	d069      	beq.n	124c <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
    1178:	0023      	movs	r3, r4
    117a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    117c:	075a      	lsls	r2, r3, #29
    117e:	d002      	beq.n	1186 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1180:	2207      	movs	r2, #7
    1182:	4393      	bics	r3, r2
    1184:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1186:	2b00      	cmp	r3, #0
    1188:	d05d      	beq.n	1246 <pvPortMalloc+0xea>
    118a:	4a37      	ldr	r2, [pc, #220]	; (1268 <pvPortMalloc+0x10c>)
    118c:	6816      	ldr	r6, [r2, #0]
    118e:	42b3      	cmp	r3, r6
    1190:	d859      	bhi.n	1246 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
    1192:	4a36      	ldr	r2, [pc, #216]	; (126c <pvPortMalloc+0x110>)
    1194:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1196:	e025      	b.n	11e4 <pvPortMalloc+0x88>
	uxAddress = ( size_t ) ucHeap;
    1198:	4a35      	ldr	r2, [pc, #212]	; (1270 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    119a:	0753      	lsls	r3, r2, #29
    119c:	d01e      	beq.n	11dc <pvPortMalloc+0x80>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    119e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    11a0:	2307      	movs	r3, #7
    11a2:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    11a4:	4b33      	ldr	r3, [pc, #204]	; (1274 <pvPortMalloc+0x118>)
    11a6:	18d3      	adds	r3, r2, r3
    11a8:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    11aa:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    11ac:	482f      	ldr	r0, [pc, #188]	; (126c <pvPortMalloc+0x110>)
    11ae:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
    11b0:	2100      	movs	r1, #0
    11b2:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    11b4:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
    11b6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    11b8:	2007      	movs	r0, #7
    11ba:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
    11bc:	4828      	ldr	r0, [pc, #160]	; (1260 <pvPortMalloc+0x104>)
    11be:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
    11c0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    11c2:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    11c4:	1a99      	subs	r1, r3, r2
    11c6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    11c8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ca:	4b2b      	ldr	r3, [pc, #172]	; (1278 <pvPortMalloc+0x11c>)
    11cc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    11ce:	4b26      	ldr	r3, [pc, #152]	; (1268 <pvPortMalloc+0x10c>)
    11d0:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    11d2:	2280      	movs	r2, #128	; 0x80
    11d4:	0612      	lsls	r2, r2, #24
    11d6:	4b23      	ldr	r3, [pc, #140]	; (1264 <pvPortMalloc+0x108>)
    11d8:	601a      	str	r2, [r3, #0]
    11da:	e7c7      	b.n	116c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    11dc:	4b25      	ldr	r3, [pc, #148]	; (1274 <pvPortMalloc+0x118>)
    11de:	e7e5      	b.n	11ac <pvPortMalloc+0x50>
    11e0:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
    11e2:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    11e4:	6861      	ldr	r1, [r4, #4]
    11e6:	428b      	cmp	r3, r1
    11e8:	d902      	bls.n	11f0 <pvPortMalloc+0x94>
    11ea:	6821      	ldr	r1, [r4, #0]
    11ec:	2900      	cmp	r1, #0
    11ee:	d1f7      	bne.n	11e0 <pvPortMalloc+0x84>
				if( pxBlock != pxEnd )
    11f0:	491b      	ldr	r1, [pc, #108]	; (1260 <pvPortMalloc+0x104>)
    11f2:	6809      	ldr	r1, [r1, #0]
    11f4:	428c      	cmp	r4, r1
    11f6:	d026      	beq.n	1246 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    11f8:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    11fa:	6821      	ldr	r1, [r4, #0]
    11fc:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    11fe:	6862      	ldr	r2, [r4, #4]
    1200:	1ad2      	subs	r2, r2, r3
    1202:	2a10      	cmp	r2, #16
    1204:	d908      	bls.n	1218 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1206:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    1208:	0741      	lsls	r1, r0, #29
    120a:	d001      	beq.n	1210 <pvPortMalloc+0xb4>
    120c:	b672      	cpsid	i
    120e:	e7fe      	b.n	120e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1210:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    1212:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1214:	4b19      	ldr	r3, [pc, #100]	; (127c <pvPortMalloc+0x120>)
    1216:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1218:	6862      	ldr	r2, [r4, #4]
    121a:	1ab6      	subs	r6, r6, r2
    121c:	4912      	ldr	r1, [pc, #72]	; (1268 <pvPortMalloc+0x10c>)
    121e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1220:	4915      	ldr	r1, [pc, #84]	; (1278 <pvPortMalloc+0x11c>)
    1222:	6809      	ldr	r1, [r1, #0]
    1224:	428e      	cmp	r6, r1
    1226:	d201      	bcs.n	122c <pvPortMalloc+0xd0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1228:	4913      	ldr	r1, [pc, #76]	; (1278 <pvPortMalloc+0x11c>)
    122a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    122c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    122e:	4317      	orrs	r7, r2
    1230:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
    1232:	2300      	movs	r3, #0
    1234:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
    1236:	4b12      	ldr	r3, [pc, #72]	; (1280 <pvPortMalloc+0x124>)
    1238:	4798      	blx	r3
		if( pvReturn == NULL )
    123a:	2d00      	cmp	r5, #0
    123c:	d008      	beq.n	1250 <pvPortMalloc+0xf4>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    123e:	076b      	lsls	r3, r5, #29
    1240:	d009      	beq.n	1256 <pvPortMalloc+0xfa>
    1242:	b672      	cpsid	i
    1244:	e7fe      	b.n	1244 <pvPortMalloc+0xe8>
	( void ) xTaskResumeAll();
    1246:	4b0e      	ldr	r3, [pc, #56]	; (1280 <pvPortMalloc+0x124>)
    1248:	4798      	blx	r3
    124a:	e001      	b.n	1250 <pvPortMalloc+0xf4>
    124c:	4b0c      	ldr	r3, [pc, #48]	; (1280 <pvPortMalloc+0x124>)
    124e:	4798      	blx	r3
			vApplicationMallocFailedHook();
    1250:	4b0c      	ldr	r3, [pc, #48]	; (1284 <pvPortMalloc+0x128>)
    1252:	4798      	blx	r3
    1254:	2500      	movs	r5, #0
}
    1256:	0028      	movs	r0, r5
    1258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	00002fe9 	.word	0x00002fe9
    1260:	20000090 	.word	0x20000090
    1264:	20004eb4 	.word	0x20004eb4
    1268:	20004eb8 	.word	0x20004eb8
    126c:	20004ec0 	.word	0x20004ec0
    1270:	20000094 	.word	0x20000094
    1274:	00004e20 	.word	0x00004e20
    1278:	20004ebc 	.word	0x20004ebc
    127c:	00001109 	.word	0x00001109
    1280:	0000313d 	.word	0x0000313d
    1284:	00004ac9 	.word	0x00004ac9

00001288 <vPortFree>:
{
    1288:	b510      	push	{r4, lr}
	if( pv != NULL )
    128a:	2800      	cmp	r0, #0
    128c:	d020      	beq.n	12d0 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    128e:	0003      	movs	r3, r0
    1290:	3b08      	subs	r3, #8
    1292:	685b      	ldr	r3, [r3, #4]
    1294:	4a0f      	ldr	r2, [pc, #60]	; (12d4 <vPortFree+0x4c>)
    1296:	6812      	ldr	r2, [r2, #0]
    1298:	421a      	tst	r2, r3
    129a:	d101      	bne.n	12a0 <vPortFree+0x18>
    129c:	b672      	cpsid	i
    129e:	e7fe      	b.n	129e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    12a0:	0001      	movs	r1, r0
    12a2:	3908      	subs	r1, #8
    12a4:	6809      	ldr	r1, [r1, #0]
    12a6:	2900      	cmp	r1, #0
    12a8:	d001      	beq.n	12ae <vPortFree+0x26>
    12aa:	b672      	cpsid	i
    12ac:	e7fe      	b.n	12ac <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    12ae:	3808      	subs	r0, #8
    12b0:	0004      	movs	r4, r0
    12b2:	4393      	bics	r3, r2
    12b4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
    12b6:	4b08      	ldr	r3, [pc, #32]	; (12d8 <vPortFree+0x50>)
    12b8:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    12ba:	4a08      	ldr	r2, [pc, #32]	; (12dc <vPortFree+0x54>)
    12bc:	6863      	ldr	r3, [r4, #4]
    12be:	6811      	ldr	r1, [r2, #0]
    12c0:	468c      	mov	ip, r1
    12c2:	4463      	add	r3, ip
    12c4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    12c6:	0020      	movs	r0, r4
    12c8:	4b05      	ldr	r3, [pc, #20]	; (12e0 <vPortFree+0x58>)
    12ca:	4798      	blx	r3
				( void ) xTaskResumeAll();
    12cc:	4b05      	ldr	r3, [pc, #20]	; (12e4 <vPortFree+0x5c>)
    12ce:	4798      	blx	r3
}
    12d0:	bd10      	pop	{r4, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	20004eb4 	.word	0x20004eb4
    12d8:	00002fe9 	.word	0x00002fe9
    12dc:	20004eb8 	.word	0x20004eb8
    12e0:	00001109 	.word	0x00001109
    12e4:	0000313d 	.word	0x0000313d

000012e8 <adc_cb>:
 static volatile uint16_t potentiometer_meas_raw;
 static volatile uint16_t motor_temp_meas_raw;
 static volatile uint16_t flow_meas_raw;

 static void adc_cb(struct adc_module *const module)
 {
    12e8:	b510      	push	{r4, lr}
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    12ea:	2100      	movs	r1, #0
    12ec:	4b10      	ldr	r3, [pc, #64]	; (1330 <adc_cb+0x48>)
    12ee:	4798      	blx	r3
    12f0:	2800      	cmp	r0, #0
    12f2:	d116      	bne.n	1322 <adc_cb+0x3a>
	{
		// Motor first
		memcpy(&motor_temp_meas_raw, &adc_buffer[0], 2);
    12f4:	4b0f      	ldr	r3, [pc, #60]	; (1334 <adc_cb+0x4c>)
    12f6:	881a      	ldrh	r2, [r3, #0]
    12f8:	b292      	uxth	r2, r2
    12fa:	490f      	ldr	r1, [pc, #60]	; (1338 <adc_cb+0x50>)
    12fc:	800a      	strh	r2, [r1, #0]
		// Control potentiometer
		memcpy(&potentiometer_meas_raw, &adc_buffer[2], 2);
    12fe:	889a      	ldrh	r2, [r3, #4]
    1300:	b292      	uxth	r2, r2
    1302:	490e      	ldr	r1, [pc, #56]	; (133c <adc_cb+0x54>)
    1304:	800a      	strh	r2, [r1, #0]
		// Three pressure sensors in a raw
		// TODO be sure indexing is correct
		memcpy(&pressure_raw_int[0], &adc_buffer[4], 2);
    1306:	8919      	ldrh	r1, [r3, #8]
    1308:	b289      	uxth	r1, r1
    130a:	4a0d      	ldr	r2, [pc, #52]	; (1340 <adc_cb+0x58>)
    130c:	8011      	strh	r1, [r2, #0]
		memcpy(&pressure_raw_int[1], &adc_buffer[6], 2);
    130e:	8999      	ldrh	r1, [r3, #12]
    1310:	b289      	uxth	r1, r1
    1312:	8051      	strh	r1, [r2, #2]
		memcpy(&pressure_raw_int[2], &adc_buffer[8], 2);
    1314:	8a19      	ldrh	r1, [r3, #16]
    1316:	b289      	uxth	r1, r1
    1318:	8091      	strh	r1, [r2, #4]
		// Flow sensor at ain[10]
		memcpy(&flow_meas_raw, &adc_buffer[16], 2);
    131a:	8c1b      	ldrh	r3, [r3, #32]
    131c:	b29b      	uxth	r3, r3
    131e:	4a09      	ldr	r2, [pc, #36]	; (1344 <adc_cb+0x5c>)
    1320:	8013      	strh	r3, [r2, #0]
	}
	// Trigger new measurement
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    1322:	2212      	movs	r2, #18
    1324:	4903      	ldr	r1, [pc, #12]	; (1334 <adc_cb+0x4c>)
    1326:	4808      	ldr	r0, [pc, #32]	; (1348 <adc_cb+0x60>)
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <adc_cb+0x64>)
    132a:	4798      	blx	r3
 }
    132c:	bd10      	pop	{r4, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	000006a9 	.word	0x000006a9
    1334:	20004ec8 	.word	0x20004ec8
    1338:	20004f0e 	.word	0x20004f0e
    133c:	20004f10 	.word	0x20004f10
    1340:	20004f14 	.word	0x20004f14
    1344:	20004f0c 	.word	0x20004f0c
    1348:	20004eec 	.word	0x20004eec
    134c:	0000065d 	.word	0x0000065d

00001350 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    1350:	b510      	push	{r4, lr}
    1352:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config;

	adc_module_instance.reference = ADC_REFERENCE_AREFA; // 3.3V
    1354:	4c22      	ldr	r4, [pc, #136]	; (13e0 <adc_interface_init+0x90>)
    1356:	2303      	movs	r3, #3
    1358:	7123      	strb	r3, [r4, #4]

	adc_get_config_defaults(&config);
    135a:	4668      	mov	r0, sp
    135c:	4b21      	ldr	r3, [pc, #132]	; (13e4 <adc_interface_init+0x94>)
    135e:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    1360:	2202      	movs	r2, #2
    1362:	466b      	mov	r3, sp
    1364:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    1366:	23c0      	movs	r3, #192	; 0xc0
    1368:	015b      	lsls	r3, r3, #5
    136a:	4669      	mov	r1, sp
    136c:	81cb      	strh	r3, [r1, #14]
	config.differential_mode = false;
    136e:	2300      	movs	r3, #0
    1370:	74cb      	strb	r3, [r1, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock TODO is this fast enough?
    1372:	2101      	movs	r1, #1
    1374:	4668      	mov	r0, sp
    1376:	7001      	strb	r1, [r0, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    1378:	8043      	strh	r3, [r0, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    137a:	9302      	str	r3, [sp, #8]
	config.resolution = ADC_RESOLUTION_12BIT;
    137c:	7103      	strb	r3, [r0, #4]

	// Scan from 2 through 10
	config.pin_scan.offset_start_scan = 2;
    137e:	232b      	movs	r3, #43	; 0x2b
    1380:	54c2      	strb	r2, [r0, r3]
	config.pin_scan.inputs_to_scan = 9;
    1382:	3207      	adds	r2, #7
    1384:	3301      	adds	r3, #1
    1386:	54c2      	strb	r2, [r0, r3]

	adc_init(&adc_module_instance, ADC, &config);
    1388:	466a      	mov	r2, sp
    138a:	4917      	ldr	r1, [pc, #92]	; (13e8 <adc_interface_init+0x98>)
    138c:	0020      	movs	r0, r4
    138e:	4b17      	ldr	r3, [pc, #92]	; (13ec <adc_interface_init+0x9c>)
    1390:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1392:	6822      	ldr	r2, [r4, #0]
    1394:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1396:	b25b      	sxtb	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	dbfb      	blt.n	1394 <adc_interface_init+0x44>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    139c:	2180      	movs	r1, #128	; 0x80
    139e:	0409      	lsls	r1, r1, #16
    13a0:	4b13      	ldr	r3, [pc, #76]	; (13f0 <adc_interface_init+0xa0>)
    13a2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    13a4:	230f      	movs	r3, #15
    13a6:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    13a8:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    13aa:	7813      	ldrb	r3, [r2, #0]
    13ac:	2102      	movs	r1, #2
    13ae:	430b      	orrs	r3, r1
    13b0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    13b2:	4b0b      	ldr	r3, [pc, #44]	; (13e0 <adc_interface_init+0x90>)
    13b4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    13b6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    13b8:	b25b      	sxtb	r3, r3
    13ba:	2b00      	cmp	r3, #0
    13bc:	dbfb      	blt.n	13b6 <adc_interface_init+0x66>
	adc_enable(&adc_module_instance);

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    13be:	4c08      	ldr	r4, [pc, #32]	; (13e0 <adc_interface_init+0x90>)
    13c0:	2200      	movs	r2, #0
    13c2:	490c      	ldr	r1, [pc, #48]	; (13f4 <adc_interface_init+0xa4>)
    13c4:	0020      	movs	r0, r4
    13c6:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <adc_interface_init+0xa8>)
    13c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    13ca:	7ee3      	ldrb	r3, [r4, #27]
    13cc:	2201      	movs	r2, #1
    13ce:	4313      	orrs	r3, r2
    13d0:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);

	// Start the conversion
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    13d2:	2212      	movs	r2, #18
    13d4:	4909      	ldr	r1, [pc, #36]	; (13fc <adc_interface_init+0xac>)
    13d6:	0020      	movs	r0, r4
    13d8:	4b09      	ldr	r3, [pc, #36]	; (1400 <adc_interface_init+0xb0>)
    13da:	4798      	blx	r3
 }
    13dc:	b00c      	add	sp, #48	; 0x30
    13de:	bd10      	pop	{r4, pc}
    13e0:	20004eec 	.word	0x20004eec
    13e4:	00000115 	.word	0x00000115
    13e8:	42004000 	.word	0x42004000
    13ec:	0000015d 	.word	0x0000015d
    13f0:	e000e100 	.word	0xe000e100
    13f4:	000012e9 	.word	0x000012e9
    13f8:	00000649 	.word	0x00000649
    13fc:	20004ec8 	.word	0x20004ec8
    1400:	0000065d 	.word	0x0000065d

00001404 <get_pressure_sensor_cmH2O>:
 *	\param channel The sensor channel
 *	
 *	\return The pressure from the channel in cm-H2O if channel valid or 0 otherwise
 */
 float get_pressure_sensor_cmH2O(uint8_t channel)
 {
    1404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Pressure sensors output 0.5-4.5V corresponding to 0-5psig
	// Scaled down to 3.3V range with 3.3K/(2.2K+3.3K) divider
	if(channel >= NUM_PRESSURE_SENSOR_CHANNELS)
    1406:	2802      	cmp	r0, #2
    1408:	d825      	bhi.n	1456 <get_pressure_sensor_cmH2O+0x52>
	{
		return 0.0;
	}
	uint16_t raw_adc =  pressure_raw_int[channel];
    140a:	0040      	lsls	r0, r0, #1
    140c:	4b13      	ldr	r3, [pc, #76]	; (145c <get_pressure_sensor_cmH2O+0x58>)
    140e:	5ac0      	ldrh	r0, [r0, r3]
    1410:	b280      	uxth	r0, r0

	float pressure_voltage_scaled_up = ((raw_adc / ADC_MAX) * 3.3) * (5.5/3.3);
    1412:	4b13      	ldr	r3, [pc, #76]	; (1460 <get_pressure_sensor_cmH2O+0x5c>)
    1414:	4798      	blx	r3
    1416:	2200      	movs	r2, #0
    1418:	4b12      	ldr	r3, [pc, #72]	; (1464 <get_pressure_sensor_cmH2O+0x60>)
    141a:	4c13      	ldr	r4, [pc, #76]	; (1468 <get_pressure_sensor_cmH2O+0x64>)
    141c:	47a0      	blx	r4
    141e:	4c13      	ldr	r4, [pc, #76]	; (146c <get_pressure_sensor_cmH2O+0x68>)
    1420:	4a13      	ldr	r2, [pc, #76]	; (1470 <get_pressure_sensor_cmH2O+0x6c>)
    1422:	4b14      	ldr	r3, [pc, #80]	; (1474 <get_pressure_sensor_cmH2O+0x70>)
    1424:	47a0      	blx	r4
    1426:	4a14      	ldr	r2, [pc, #80]	; (1478 <get_pressure_sensor_cmH2O+0x74>)
    1428:	4b14      	ldr	r3, [pc, #80]	; (147c <get_pressure_sensor_cmH2O+0x78>)
    142a:	47a0      	blx	r4
    142c:	4d14      	ldr	r5, [pc, #80]	; (1480 <get_pressure_sensor_cmH2O+0x7c>)
    142e:	47a8      	blx	r5

	float pressure_psi = 5.0 * (pressure_voltage_scaled_up - 0.5) / 4.0;
    1430:	4e14      	ldr	r6, [pc, #80]	; (1484 <get_pressure_sensor_cmH2O+0x80>)
    1432:	47b0      	blx	r6
    1434:	2200      	movs	r2, #0
    1436:	4b14      	ldr	r3, [pc, #80]	; (1488 <get_pressure_sensor_cmH2O+0x84>)
    1438:	4f14      	ldr	r7, [pc, #80]	; (148c <get_pressure_sensor_cmH2O+0x88>)
    143a:	47b8      	blx	r7
    143c:	2200      	movs	r2, #0
    143e:	4b14      	ldr	r3, [pc, #80]	; (1490 <get_pressure_sensor_cmH2O+0x8c>)
    1440:	47a0      	blx	r4
    1442:	2200      	movs	r2, #0
    1444:	4b13      	ldr	r3, [pc, #76]	; (1494 <get_pressure_sensor_cmH2O+0x90>)
    1446:	47a0      	blx	r4
    1448:	47a8      	blx	r5

	float pressure_cmH2O = (70.307) * pressure_psi;
    144a:	47b0      	blx	r6
    144c:	4a12      	ldr	r2, [pc, #72]	; (1498 <get_pressure_sensor_cmH2O+0x94>)
    144e:	4b13      	ldr	r3, [pc, #76]	; (149c <get_pressure_sensor_cmH2O+0x98>)
    1450:	47a0      	blx	r4
    1452:	47a8      	blx	r5
	return pressure_cmH2O;
 }
    1454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0.0;
    1456:	2000      	movs	r0, #0
    1458:	e7fc      	b.n	1454 <get_pressure_sensor_cmH2O+0x50>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	20004f14 	.word	0x20004f14
    1460:	0000751d 	.word	0x0000751d
    1464:	40affe00 	.word	0x40affe00
    1468:	00006121 	.word	0x00006121
    146c:	00006989 	.word	0x00006989
    1470:	66666666 	.word	0x66666666
    1474:	400a6666 	.word	0x400a6666
    1478:	aaaaaaab 	.word	0xaaaaaaab
    147c:	3ffaaaaa 	.word	0x3ffaaaaa
    1480:	000076b5 	.word	0x000076b5
    1484:	00007611 	.word	0x00007611
    1488:	3fe00000 	.word	0x3fe00000
    148c:	00006e89 	.word	0x00006e89
    1490:	40140000 	.word	0x40140000
    1494:	3fd00000 	.word	0x3fd00000
    1498:	e353f7cf 	.word	0xe353f7cf
    149c:	405193a5 	.word	0x405193a5

000014a0 <get_pressure_sensor_cmH2O_voted>:
 *	\brief Gets pressure sensor data best estimate and checks for errors
 *
 *	\return The voted pressure in cm-H2O 
 */
 float get_pressure_sensor_cmH2O_voted(void)
 {
    14a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a2:	46de      	mov	lr, fp
    14a4:	4657      	mov	r7, sl
    14a6:	464e      	mov	r6, r9
    14a8:	4645      	mov	r5, r8
    14aa:	b5e0      	push	{r5, r6, r7, lr}
    14ac:	b08b      	sub	sp, #44	; 0x2c
	int32_t i;
	// Get pressure
	float pressure_values[3];
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    14ae:	2400      	movs	r4, #0
	{
		pressure_values[i] = get_pressure_sensor_cmH2O(i);
    14b0:	4e56      	ldr	r6, [pc, #344]	; (160c <get_pressure_sensor_cmH2O_voted+0x16c>)
    14b2:	ad07      	add	r5, sp, #28
    14b4:	b2e0      	uxtb	r0, r4
    14b6:	47b0      	blx	r6
    14b8:	00a3      	lsls	r3, r4, #2
    14ba:	5158      	str	r0, [r3, r5]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    14bc:	3401      	adds	r4, #1
    14be:	2c03      	cmp	r4, #3
    14c0:	d1f8      	bne.n	14b4 <get_pressure_sensor_cmH2O_voted+0x14>
	}
	// Average, eliminate the furthest outlier, and average again to get actual, then check for sensor failure
	float avg_pressure = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		avg_pressure += 0.33333 *pressure_values[i];
    14c2:	4d53      	ldr	r5, [pc, #332]	; (1610 <get_pressure_sensor_cmH2O_voted+0x170>)
    14c4:	9807      	ldr	r0, [sp, #28]
    14c6:	47a8      	blx	r5
    14c8:	4e52      	ldr	r6, [pc, #328]	; (1614 <get_pressure_sensor_cmH2O_voted+0x174>)
    14ca:	4a53      	ldr	r2, [pc, #332]	; (1618 <get_pressure_sensor_cmH2O_voted+0x178>)
    14cc:	4b53      	ldr	r3, [pc, #332]	; (161c <get_pressure_sensor_cmH2O_voted+0x17c>)
    14ce:	47b0      	blx	r6
    14d0:	4c53      	ldr	r4, [pc, #332]	; (1620 <get_pressure_sensor_cmH2O_voted+0x180>)
    14d2:	2200      	movs	r2, #0
    14d4:	2300      	movs	r3, #0
    14d6:	47a0      	blx	r4
    14d8:	4f52      	ldr	r7, [pc, #328]	; (1624 <get_pressure_sensor_cmH2O_voted+0x184>)
    14da:	47b8      	blx	r7
    14dc:	47a8      	blx	r5
    14de:	9000      	str	r0, [sp, #0]
    14e0:	9101      	str	r1, [sp, #4]
    14e2:	9808      	ldr	r0, [sp, #32]
    14e4:	47a8      	blx	r5
    14e6:	4a4c      	ldr	r2, [pc, #304]	; (1618 <get_pressure_sensor_cmH2O_voted+0x178>)
    14e8:	4b4c      	ldr	r3, [pc, #304]	; (161c <get_pressure_sensor_cmH2O_voted+0x17c>)
    14ea:	47b0      	blx	r6
    14ec:	0002      	movs	r2, r0
    14ee:	000b      	movs	r3, r1
    14f0:	9800      	ldr	r0, [sp, #0]
    14f2:	9901      	ldr	r1, [sp, #4]
    14f4:	47a0      	blx	r4
    14f6:	9000      	str	r0, [sp, #0]
    14f8:	9101      	str	r1, [sp, #4]
    14fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    14fc:	47a8      	blx	r5
    14fe:	4a46      	ldr	r2, [pc, #280]	; (1618 <get_pressure_sensor_cmH2O_voted+0x178>)
    1500:	4b46      	ldr	r3, [pc, #280]	; (161c <get_pressure_sensor_cmH2O_voted+0x17c>)
    1502:	47b0      	blx	r6
    1504:	9002      	str	r0, [sp, #8]
    1506:	9103      	str	r1, [sp, #12]
    1508:	9800      	ldr	r0, [sp, #0]
    150a:	9901      	ldr	r1, [sp, #4]
    150c:	47b8      	blx	r7
    150e:	47a8      	blx	r5
    1510:	0002      	movs	r2, r0
    1512:	000b      	movs	r3, r1
    1514:	9802      	ldr	r0, [sp, #8]
    1516:	9903      	ldr	r1, [sp, #12]
    1518:	47a0      	blx	r4
    151a:	47b8      	blx	r7
    151c:	9002      	str	r0, [sp, #8]
    151e:	2300      	movs	r3, #0
    1520:	9300      	str	r3, [sp, #0]
    1522:	2600      	movs	r6, #0
    1524:	2400      	movs	r4, #0
	// Eliminate the furthest outlier of average
	uint8_t biggest_error_index = 0;
	float biggest_error = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		float this_error = abs(avg_pressure - pressure_values[i]);
    1526:	af07      	add	r7, sp, #28
    1528:	4b3f      	ldr	r3, [pc, #252]	; (1628 <get_pressure_sensor_cmH2O_voted+0x188>)
    152a:	469b      	mov	fp, r3
    152c:	4b3f      	ldr	r3, [pc, #252]	; (162c <get_pressure_sensor_cmH2O_voted+0x18c>)
    152e:	469a      	mov	sl, r3
    1530:	4b3f      	ldr	r3, [pc, #252]	; (1630 <get_pressure_sensor_cmH2O_voted+0x190>)
    1532:	4699      	mov	r9, r3
		if(this_error > biggest_error)
    1534:	4d3f      	ldr	r5, [pc, #252]	; (1634 <get_pressure_sensor_cmH2O_voted+0x194>)
    1536:	46b0      	mov	r8, r6
    1538:	e002      	b.n	1540 <get_pressure_sensor_cmH2O_voted+0xa0>
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    153a:	3401      	adds	r4, #1
    153c:	2c03      	cmp	r4, #3
    153e:	d011      	beq.n	1564 <get_pressure_sensor_cmH2O_voted+0xc4>
		float this_error = abs(avg_pressure - pressure_values[i]);
    1540:	00a3      	lsls	r3, r4, #2
    1542:	59d9      	ldr	r1, [r3, r7]
    1544:	9802      	ldr	r0, [sp, #8]
    1546:	47d8      	blx	fp
    1548:	47d0      	blx	sl
    154a:	17c3      	asrs	r3, r0, #31
    154c:	18c0      	adds	r0, r0, r3
    154e:	4058      	eors	r0, r3
    1550:	47c8      	blx	r9
    1552:	1c06      	adds	r6, r0, #0
		if(this_error > biggest_error)
    1554:	9900      	ldr	r1, [sp, #0]
    1556:	47a8      	blx	r5
    1558:	2800      	cmp	r0, #0
    155a:	d0ee      	beq.n	153a <get_pressure_sensor_cmH2O_voted+0x9a>
		{
			biggest_error = this_error;
			biggest_error_index = i;
    155c:	b2e3      	uxtb	r3, r4
    155e:	4698      	mov	r8, r3
			biggest_error = this_error;
    1560:	9600      	str	r6, [sp, #0]
    1562:	e7ea      	b.n	153a <get_pressure_sensor_cmH2O_voted+0x9a>
    1564:	4646      	mov	r6, r8
    1566:	2300      	movs	r3, #0
    1568:	9300      	str	r3, [sp, #0]
    156a:	2400      	movs	r4, #0
	avg_pressure = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		if(i != biggest_error_index)
		{
			avg_pressure += 0.5 * pressure_values[i];
    156c:	ab07      	add	r3, sp, #28
    156e:	9305      	str	r3, [sp, #20]
    1570:	4d27      	ldr	r5, [pc, #156]	; (1610 <get_pressure_sensor_cmH2O_voted+0x170>)
    1572:	e002      	b.n	157a <get_pressure_sensor_cmH2O_voted+0xda>
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    1574:	3401      	adds	r4, #1
    1576:	2c03      	cmp	r4, #3
    1578:	d017      	beq.n	15aa <get_pressure_sensor_cmH2O_voted+0x10a>
		if(i != biggest_error_index)
    157a:	42a6      	cmp	r6, r4
    157c:	d0fa      	beq.n	1574 <get_pressure_sensor_cmH2O_voted+0xd4>
			avg_pressure += 0.5 * pressure_values[i];
    157e:	00a3      	lsls	r3, r4, #2
    1580:	9a05      	ldr	r2, [sp, #20]
    1582:	5898      	ldr	r0, [r3, r2]
    1584:	47a8      	blx	r5
    1586:	2200      	movs	r2, #0
    1588:	4b2b      	ldr	r3, [pc, #172]	; (1638 <get_pressure_sensor_cmH2O_voted+0x198>)
    158a:	4f22      	ldr	r7, [pc, #136]	; (1614 <get_pressure_sensor_cmH2O_voted+0x174>)
    158c:	47b8      	blx	r7
    158e:	9002      	str	r0, [sp, #8]
    1590:	9103      	str	r1, [sp, #12]
    1592:	9800      	ldr	r0, [sp, #0]
    1594:	47a8      	blx	r5
    1596:	0002      	movs	r2, r0
    1598:	000b      	movs	r3, r1
    159a:	9802      	ldr	r0, [sp, #8]
    159c:	9903      	ldr	r1, [sp, #12]
    159e:	4f20      	ldr	r7, [pc, #128]	; (1620 <get_pressure_sensor_cmH2O_voted+0x180>)
    15a0:	47b8      	blx	r7
    15a2:	4b20      	ldr	r3, [pc, #128]	; (1624 <get_pressure_sensor_cmH2O_voted+0x184>)
    15a4:	4798      	blx	r3
    15a6:	9000      	str	r0, [sp, #0]
    15a8:	e7e4      	b.n	1574 <get_pressure_sensor_cmH2O_voted+0xd4>
		}
	}
	// Check for sensor failure
	// TODO what is threshold?
	if(abs(pressure_values[biggest_error_index] - avg_pressure) > 0.1*avg_pressure)
    15aa:	4643      	mov	r3, r8
    15ac:	009b      	lsls	r3, r3, #2
    15ae:	9e00      	ldr	r6, [sp, #0]
    15b0:	1c31      	adds	r1, r6, #0
    15b2:	aa07      	add	r2, sp, #28
    15b4:	5898      	ldr	r0, [r3, r2]
    15b6:	4b1c      	ldr	r3, [pc, #112]	; (1628 <get_pressure_sensor_cmH2O_voted+0x188>)
    15b8:	4798      	blx	r3
    15ba:	4b1c      	ldr	r3, [pc, #112]	; (162c <get_pressure_sensor_cmH2O_voted+0x18c>)
    15bc:	4798      	blx	r3
    15be:	17c3      	asrs	r3, r0, #31
    15c0:	18c0      	adds	r0, r0, r3
    15c2:	4058      	eors	r0, r3
    15c4:	4b1d      	ldr	r3, [pc, #116]	; (163c <get_pressure_sensor_cmH2O_voted+0x19c>)
    15c6:	4798      	blx	r3
    15c8:	0004      	movs	r4, r0
    15ca:	000d      	movs	r5, r1
    15cc:	1c30      	adds	r0, r6, #0
    15ce:	4b10      	ldr	r3, [pc, #64]	; (1610 <get_pressure_sensor_cmH2O_voted+0x170>)
    15d0:	4798      	blx	r3
    15d2:	4a1b      	ldr	r2, [pc, #108]	; (1640 <get_pressure_sensor_cmH2O_voted+0x1a0>)
    15d4:	4b1b      	ldr	r3, [pc, #108]	; (1644 <get_pressure_sensor_cmH2O_voted+0x1a4>)
    15d6:	4f0f      	ldr	r7, [pc, #60]	; (1614 <get_pressure_sensor_cmH2O_voted+0x174>)
    15d8:	47b8      	blx	r7
    15da:	0002      	movs	r2, r0
    15dc:	000b      	movs	r3, r1
    15de:	0020      	movs	r0, r4
    15e0:	0029      	movs	r1, r5
    15e2:	4c19      	ldr	r4, [pc, #100]	; (1648 <get_pressure_sensor_cmH2O_voted+0x1a8>)
    15e4:	47a0      	blx	r4
    15e6:	2800      	cmp	r0, #0
    15e8:	d10b      	bne.n	1602 <get_pressure_sensor_cmH2O_voted+0x162>
	{
		set_alarm(ALARM_PRESSURE_SENSOR, true);
	}
	else
	{
		set_alarm(ALARM_PRESSURE_SENSOR, false);
    15ea:	2100      	movs	r1, #0
    15ec:	2002      	movs	r0, #2
    15ee:	4b17      	ldr	r3, [pc, #92]	; (164c <get_pressure_sensor_cmH2O_voted+0x1ac>)
    15f0:	4798      	blx	r3
	}
	return avg_pressure;
 }
    15f2:	9800      	ldr	r0, [sp, #0]
    15f4:	b00b      	add	sp, #44	; 0x2c
    15f6:	bc3c      	pop	{r2, r3, r4, r5}
    15f8:	4690      	mov	r8, r2
    15fa:	4699      	mov	r9, r3
    15fc:	46a2      	mov	sl, r4
    15fe:	46ab      	mov	fp, r5
    1600:	bdf0      	pop	{r4, r5, r6, r7, pc}
		set_alarm(ALARM_PRESSURE_SENSOR, true);
    1602:	2101      	movs	r1, #1
    1604:	2002      	movs	r0, #2
    1606:	4b11      	ldr	r3, [pc, #68]	; (164c <get_pressure_sensor_cmH2O_voted+0x1ac>)
    1608:	4798      	blx	r3
    160a:	e7f2      	b.n	15f2 <get_pressure_sensor_cmH2O_voted+0x152>
    160c:	00001405 	.word	0x00001405
    1610:	00007611 	.word	0x00007611
    1614:	00006989 	.word	0x00006989
    1618:	5a31a4be 	.word	0x5a31a4be
    161c:	3fd55547 	.word	0x3fd55547
    1620:	00005b01 	.word	0x00005b01
    1624:	000076b5 	.word	0x000076b5
    1628:	0000565d 	.word	0x0000565d
    162c:	00005995 	.word	0x00005995
    1630:	000059d5 	.word	0x000059d5
    1634:	00004cc1 	.word	0x00004cc1
    1638:	3fe00000 	.word	0x3fe00000
    163c:	0000751d 	.word	0x0000751d
    1640:	9999999a 	.word	0x9999999a
    1644:	3fb99999 	.word	0x3fb99999
    1648:	00004c4d 	.word	0x00004c4d
    164c:	00001681 	.word	0x00001681

00001650 <get_input_potentiometer_portion>:
 *	\brief Gets portion of full scale from potentiometer input
 *
 *	\return The portion from 0.0 to 1.0
 */
 float get_input_potentiometer_portion(void)
 {
    1650:	b510      	push	{r4, lr}
	return (potentiometer_meas_raw / ADC_MAX);
    1652:	4b06      	ldr	r3, [pc, #24]	; (166c <get_input_potentiometer_portion+0x1c>)
    1654:	8818      	ldrh	r0, [r3, #0]
    1656:	b280      	uxth	r0, r0
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <get_input_potentiometer_portion+0x20>)
    165a:	4798      	blx	r3
    165c:	2200      	movs	r2, #0
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <get_input_potentiometer_portion+0x24>)
    1660:	4c05      	ldr	r4, [pc, #20]	; (1678 <get_input_potentiometer_portion+0x28>)
    1662:	47a0      	blx	r4
    1664:	4b05      	ldr	r3, [pc, #20]	; (167c <get_input_potentiometer_portion+0x2c>)
    1666:	4798      	blx	r3
 }
    1668:	bd10      	pop	{r4, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	20004f10 	.word	0x20004f10
    1670:	0000751d 	.word	0x0000751d
    1674:	40affe00 	.word	0x40affe00
    1678:	00006121 	.word	0x00006121
    167c:	000076b5 	.word	0x000076b5

00001680 <set_alarm>:
*	\param alarm_type The alarm to set
*	\param set If true, alarm is set; if false, alarm is cleared
*/
void set_alarm(ALARM_TYPE_INDEX alarm_type, bool set)
{
	if((uint32_t) alarm_type > 31)
    1680:	281f      	cmp	r0, #31
    1682:	d807      	bhi.n	1694 <set_alarm+0x14>
	{
		return;
	}

	if(set)
    1684:	2900      	cmp	r1, #0
    1686:	d106      	bne.n	1696 <set_alarm+0x16>
	{
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
	}
	else
	{
		alarm_bitfield &= ~(1 << (uint32_t) alarm_type);
    1688:	4906      	ldr	r1, [pc, #24]	; (16a4 <set_alarm+0x24>)
    168a:	680b      	ldr	r3, [r1, #0]
    168c:	2201      	movs	r2, #1
    168e:	4082      	lsls	r2, r0
    1690:	4393      	bics	r3, r2
    1692:	600b      	str	r3, [r1, #0]
	}
	
}
    1694:	4770      	bx	lr
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
    1696:	4a03      	ldr	r2, [pc, #12]	; (16a4 <set_alarm+0x24>)
    1698:	6811      	ldr	r1, [r2, #0]
    169a:	2301      	movs	r3, #1
    169c:	4083      	lsls	r3, r0
    169e:	430b      	orrs	r3, r1
    16a0:	6013      	str	r3, [r2, #0]
    16a2:	e7f7      	b.n	1694 <set_alarm+0x14>
    16a4:	20004f1c 	.word	0x20004f1c

000016a8 <check_alarm>:
*/
bool check_alarm(ALARM_TYPE_INDEX alarm_type)
{
	if((uint32_t) alarm_type > 31)
	{
		return false;
    16a8:	2300      	movs	r3, #0
	if((uint32_t) alarm_type > 31)
    16aa:	281f      	cmp	r0, #31
    16ac:	d807      	bhi.n	16be <check_alarm+0x16>
	}

	return (alarm_bitfield & (1 << (uint32_t) alarm_type));
    16ae:	4b05      	ldr	r3, [pc, #20]	; (16c4 <check_alarm+0x1c>)
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	2201      	movs	r2, #1
    16b4:	4082      	lsls	r2, r0
    16b6:	4013      	ands	r3, r2
    16b8:	1e58      	subs	r0, r3, #1
    16ba:	4183      	sbcs	r3, r0
    16bc:	b2db      	uxtb	r3, r3
}
    16be:	0018      	movs	r0, r3
    16c0:	4770      	bx	lr
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	20004f1c 	.word	0x20004f1c

000016c8 <any_alarms_set>:
*
*	\return True if any alarm is set
*/
bool any_alarms_set(void)
{
	return (alarm_bitfield != 0);
    16c8:	4b02      	ldr	r3, [pc, #8]	; (16d4 <any_alarms_set+0xc>)
    16ca:	6818      	ldr	r0, [r3, #0]
    16cc:	1e43      	subs	r3, r0, #1
    16ce:	4198      	sbcs	r0, r3
    16d0:	b2c0      	uxtb	r0, r0
    16d2:	4770      	bx	lr
    16d4:	20004f1c 	.word	0x20004f1c

000016d8 <calculate_lcv_control_params>:
 *
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 */
 void calculate_lcv_control_params(lcv_state_t * state, lcv_control_t * control)
 {
    16d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16da:	b085      	sub	sp, #20
    16dc:	0005      	movs	r5, r0
    16de:	000f      	movs	r7, r1
	*	PIP	         ________
	*			   /		  \
	*			 /			    \
	*	PEEP   /				  \____________
	*/
	float breath_cycle_total_time_ms = (60000.0) / state->setting_state.breath_per_min;
    16e0:	6900      	ldr	r0, [r0, #16]
    16e2:	4b3e      	ldr	r3, [pc, #248]	; (17dc <calculate_lcv_control_params+0x104>)
    16e4:	4798      	blx	r3
    16e6:	0002      	movs	r2, r0
    16e8:	000b      	movs	r3, r1
    16ea:	2000      	movs	r0, #0
    16ec:	493c      	ldr	r1, [pc, #240]	; (17e0 <calculate_lcv_control_params+0x108>)
    16ee:	4c3d      	ldr	r4, [pc, #244]	; (17e4 <calculate_lcv_control_params+0x10c>)
    16f0:	47a0      	blx	r4
    16f2:	4b3d      	ldr	r3, [pc, #244]	; (17e8 <calculate_lcv_control_params+0x110>)
    16f4:	4798      	blx	r3
    16f6:	1c04      	adds	r4, r0, #0
	float breath_cycle_total_time_ms_minus_ramps = breath_cycle_total_time_ms - (control->pip_to_peep_rampdown_ms + control->peep_to_pip_rampup_ms);
    16f8:	68bb      	ldr	r3, [r7, #8]
    16fa:	683a      	ldr	r2, [r7, #0]
    16fc:	4694      	mov	ip, r2
    16fe:	4463      	add	r3, ip
    1700:	0018      	movs	r0, r3
    1702:	4b3a      	ldr	r3, [pc, #232]	; (17ec <calculate_lcv_control_params+0x114>)
    1704:	4798      	blx	r3
    1706:	1c01      	adds	r1, r0, #0
    1708:	1c20      	adds	r0, r4, #0
    170a:	4b39      	ldr	r3, [pc, #228]	; (17f0 <calculate_lcv_control_params+0x118>)
    170c:	4798      	blx	r3
    170e:	9000      	str	r0, [sp, #0]

	if(breath_cycle_total_time_ms_minus_ramps < 0)
    1710:	2100      	movs	r1, #0
    1712:	4b38      	ldr	r3, [pc, #224]	; (17f4 <calculate_lcv_control_params+0x11c>)
    1714:	4798      	blx	r3
    1716:	2800      	cmp	r0, #0
    1718:	d133      	bne.n	1782 <calculate_lcv_control_params+0xaa>
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, true);
		// TODO pick something reasonable?
	}
	else
	{
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, false);
    171a:	2100      	movs	r1, #0
    171c:	2006      	movs	r0, #6
    171e:	4b36      	ldr	r3, [pc, #216]	; (17f8 <calculate_lcv_control_params+0x120>)
    1720:	4798      	blx	r3
	}

	// I:E is a ratio, so 3:1 implies 4 parts needed. Split up what is left according to the I:E ratio
	float section_size_ms;
	if(state->setting_state.ie_ratio_tenths > 10)
    1722:	7868      	ldrb	r0, [r5, #1]
    1724:	280a      	cmp	r0, #10
    1726:	d831      	bhi.n	178c <calculate_lcv_control_params+0xb4>
		control->pip_hold_ms = section_size_ms; // 1 section by definition
	}
	else
	{
		// Atypical inverse ratios with more inspiratory time
		float ratio_to_use = 1.0 / (state->setting_state.ie_ratio_tenths * 0.1);	// Ratio of 0.5:1 means 1:2, which has 3 sections
    1728:	4b2c      	ldr	r3, [pc, #176]	; (17dc <calculate_lcv_control_params+0x104>)
    172a:	4798      	blx	r3
    172c:	4a33      	ldr	r2, [pc, #204]	; (17fc <calculate_lcv_control_params+0x124>)
    172e:	4b34      	ldr	r3, [pc, #208]	; (1800 <calculate_lcv_control_params+0x128>)
    1730:	4d34      	ldr	r5, [pc, #208]	; (1804 <calculate_lcv_control_params+0x12c>)
    1732:	47a8      	blx	r5
    1734:	0002      	movs	r2, r0
    1736:	000b      	movs	r3, r1
    1738:	4d2a      	ldr	r5, [pc, #168]	; (17e4 <calculate_lcv_control_params+0x10c>)
    173a:	2000      	movs	r0, #0
    173c:	4932      	ldr	r1, [pc, #200]	; (1808 <calculate_lcv_control_params+0x130>)
    173e:	47a8      	blx	r5
    1740:	4e29      	ldr	r6, [pc, #164]	; (17e8 <calculate_lcv_control_params+0x110>)
    1742:	47b0      	blx	r6
    1744:	9002      	str	r0, [sp, #8]
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);
    1746:	4c31      	ldr	r4, [pc, #196]	; (180c <calculate_lcv_control_params+0x134>)
    1748:	9800      	ldr	r0, [sp, #0]
    174a:	47a0      	blx	r4
    174c:	9000      	str	r0, [sp, #0]
    174e:	9101      	str	r1, [sp, #4]
    1750:	9802      	ldr	r0, [sp, #8]
    1752:	47a0      	blx	r4
    1754:	2200      	movs	r2, #0
    1756:	4b2c      	ldr	r3, [pc, #176]	; (1808 <calculate_lcv_control_params+0x130>)
    1758:	4c2d      	ldr	r4, [pc, #180]	; (1810 <calculate_lcv_control_params+0x138>)
    175a:	47a0      	blx	r4
    175c:	0002      	movs	r2, r0
    175e:	000b      	movs	r3, r1
    1760:	9800      	ldr	r0, [sp, #0]
    1762:	9901      	ldr	r1, [sp, #4]
    1764:	47a8      	blx	r5
    1766:	47b0      	blx	r6
    1768:	1c06      	adds	r6, r0, #0

		control->pip_hold_ms =	section_size_ms * ratio_to_use;
    176a:	1c01      	adds	r1, r0, #0
    176c:	9802      	ldr	r0, [sp, #8]
    176e:	4b29      	ldr	r3, [pc, #164]	; (1814 <calculate_lcv_control_params+0x13c>)
    1770:	4798      	blx	r3
    1772:	4c29      	ldr	r4, [pc, #164]	; (1818 <calculate_lcv_control_params+0x140>)
    1774:	47a0      	blx	r4
    1776:	6078      	str	r0, [r7, #4]
		control->peep_hold_ms = section_size_ms; // 1 section by definition
    1778:	1c30      	adds	r0, r6, #0
    177a:	47a0      	blx	r4
    177c:	60f8      	str	r0, [r7, #12]
	}
 }
    177e:	b005      	add	sp, #20
    1780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, true);
    1782:	2101      	movs	r1, #1
    1784:	2006      	movs	r0, #6
    1786:	4b1c      	ldr	r3, [pc, #112]	; (17f8 <calculate_lcv_control_params+0x120>)
    1788:	4798      	blx	r3
    178a:	e7ca      	b.n	1722 <calculate_lcv_control_params+0x4a>
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / ((state->setting_state.ie_ratio_tenths * 0.1) + 1.0);
    178c:	4b13      	ldr	r3, [pc, #76]	; (17dc <calculate_lcv_control_params+0x104>)
    178e:	4798      	blx	r3
    1790:	4e1c      	ldr	r6, [pc, #112]	; (1804 <calculate_lcv_control_params+0x12c>)
    1792:	4a1a      	ldr	r2, [pc, #104]	; (17fc <calculate_lcv_control_params+0x124>)
    1794:	4b1a      	ldr	r3, [pc, #104]	; (1800 <calculate_lcv_control_params+0x128>)
    1796:	47b0      	blx	r6
    1798:	9002      	str	r0, [sp, #8]
    179a:	9103      	str	r1, [sp, #12]
    179c:	4d1b      	ldr	r5, [pc, #108]	; (180c <calculate_lcv_control_params+0x134>)
    179e:	9800      	ldr	r0, [sp, #0]
    17a0:	47a8      	blx	r5
    17a2:	9000      	str	r0, [sp, #0]
    17a4:	9101      	str	r1, [sp, #4]
    17a6:	2200      	movs	r2, #0
    17a8:	4b17      	ldr	r3, [pc, #92]	; (1808 <calculate_lcv_control_params+0x130>)
    17aa:	9802      	ldr	r0, [sp, #8]
    17ac:	9903      	ldr	r1, [sp, #12]
    17ae:	4c18      	ldr	r4, [pc, #96]	; (1810 <calculate_lcv_control_params+0x138>)
    17b0:	47a0      	blx	r4
    17b2:	0002      	movs	r2, r0
    17b4:	000b      	movs	r3, r1
    17b6:	9800      	ldr	r0, [sp, #0]
    17b8:	9901      	ldr	r1, [sp, #4]
    17ba:	4c0a      	ldr	r4, [pc, #40]	; (17e4 <calculate_lcv_control_params+0x10c>)
    17bc:	47a0      	blx	r4
    17be:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <calculate_lcv_control_params+0x110>)
    17c0:	4798      	blx	r3
    17c2:	1c04      	adds	r4, r0, #0
		control->peep_hold_ms =	section_size_ms * (state->setting_state.ie_ratio_tenths * 0.1);
    17c4:	47a8      	blx	r5
    17c6:	9a02      	ldr	r2, [sp, #8]
    17c8:	9b03      	ldr	r3, [sp, #12]
    17ca:	47b0      	blx	r6
    17cc:	4b13      	ldr	r3, [pc, #76]	; (181c <calculate_lcv_control_params+0x144>)
    17ce:	4798      	blx	r3
    17d0:	60f8      	str	r0, [r7, #12]
		control->pip_hold_ms = section_size_ms; // 1 section by definition
    17d2:	1c20      	adds	r0, r4, #0
    17d4:	4b10      	ldr	r3, [pc, #64]	; (1818 <calculate_lcv_control_params+0x140>)
    17d6:	4798      	blx	r3
    17d8:	6078      	str	r0, [r7, #4]
    17da:	e7d0      	b.n	177e <calculate_lcv_control_params+0xa6>
    17dc:	0000751d 	.word	0x0000751d
    17e0:	40ed4c00 	.word	0x40ed4c00
    17e4:	00006121 	.word	0x00006121
    17e8:	000076b5 	.word	0x000076b5
    17ec:	000059d5 	.word	0x000059d5
    17f0:	0000565d 	.word	0x0000565d
    17f4:	00004c99 	.word	0x00004c99
    17f8:	00001681 	.word	0x00001681
    17fc:	9999999a 	.word	0x9999999a
    1800:	3fb99999 	.word	0x3fb99999
    1804:	00006989 	.word	0x00006989
    1808:	3ff00000 	.word	0x3ff00000
    180c:	00007611 	.word	0x00007611
    1810:	00005b01 	.word	0x00005b01
    1814:	0000541d 	.word	0x0000541d
    1818:	00005995 	.word	0x00005995
    181c:	000074b5 	.word	0x000074b5

00001820 <run_controller>:
 *	\param state Pointer to the state structure holding current and set parameters
 *	\param control Pointer to the control structure defining the pressure profile
 *	\param params Pointer to the structure holding controller tuning parameters
 */
 float run_controller(lcv_state_t * state, lcv_control_t * control, controller_param_t * params)
 {
    1820:	b5f0      	push	{r4, r5, r6, r7, lr}
    1822:	46de      	mov	lr, fp
    1824:	4657      	mov	r7, sl
    1826:	464e      	mov	r6, r9
    1828:	b5c0      	push	{r6, r7, lr}
    182a:	b084      	sub	sp, #16
    182c:	0007      	movs	r7, r0
    182e:	000c      	movs	r4, r1
    1830:	0016      	movs	r6, r2
	static uint32_t last_time_ms = 0;
	static start_of_current_profile_time_ms = 0;
	uint32_t current_time_ms = xTaskGetTickCount() * portTICK_PERIOD_MS;
    1832:	4b7c      	ldr	r3, [pc, #496]	; (1a24 <run_controller+0x204>)
    1834:	4798      	blx	r3
    1836:	0005      	movs	r5, r0

	// TODO make sure at enable transition, pressure setpoint starts at PEEP always!

	// First, determine what the new setpoint should be
	// Updates profile if enters a new profile
	start_of_current_profile_time_ms = calculate_new_setpoint(current_time_ms, start_of_current_profile_time_ms, state, control);
    1838:	4b7b      	ldr	r3, [pc, #492]	; (1a28 <run_controller+0x208>)
	uint32_t time_into_profile = current_time_ms - stage_start_time_ms;
    183a:	6818      	ldr	r0, [r3, #0]
    183c:	1b40      	subs	r0, r0, r5
	if(time_into_profile < control->peep_to_pip_rampup_ms)
    183e:	6823      	ldr	r3, [r4, #0]
    1840:	4699      	mov	r9, r3
    1842:	4298      	cmp	r0, r3
    1844:	d314      	bcc.n	1870 <run_controller+0x50>
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms))
    1846:	6863      	ldr	r3, [r4, #4]
    1848:	444b      	add	r3, r9
    184a:	4298      	cmp	r0, r3
    184c:	d200      	bcs.n	1850 <run_controller+0x30>
    184e:	e086      	b.n	195e <run_controller+0x13e>
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms))
    1850:	68a2      	ldr	r2, [r4, #8]
    1852:	4693      	mov	fp, r2
    1854:	189a      	adds	r2, r3, r2
    1856:	4290      	cmp	r0, r2
    1858:	d200      	bcs.n	185c <run_controller+0x3c>
    185a:	e083      	b.n	1964 <run_controller+0x144>
	else if(time_into_profile < (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms))
    185c:	68e3      	ldr	r3, [r4, #12]
    185e:	469c      	mov	ip, r3
    1860:	4462      	add	r2, ip
    1862:	4290      	cmp	r0, r2
    1864:	d200      	bcs.n	1868 <run_controller+0x48>
    1866:	e0a0      	b.n	19aa <run_controller+0x18a>
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    1868:	68bb      	ldr	r3, [r7, #8]
    186a:	6123      	str	r3, [r4, #16]
		new_state_start = stage_start_time_ms + (control->peep_to_pip_rampup_ms + control->pip_hold_ms + control->pip_to_peep_rampdown_ms + control->peep_hold_ms);
    186c:	18ad      	adds	r5, r5, r2
    186e:	e014      	b.n	189a <run_controller+0x7a>
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    1870:	68bb      	ldr	r3, [r7, #8]
    1872:	469a      	mov	sl, r3
    1874:	6123      	str	r3, [r4, #16]
		control->pressure_set_point_cm_h20 += (int32_t) ((float) (time_into_profile) / (float) control->peep_to_pip_rampup_ms) * 
    1876:	4b6d      	ldr	r3, [pc, #436]	; (1a2c <run_controller+0x20c>)
    1878:	4798      	blx	r3
    187a:	9000      	str	r0, [sp, #0]
    187c:	4648      	mov	r0, r9
    187e:	4b6c      	ldr	r3, [pc, #432]	; (1a30 <run_controller+0x210>)
    1880:	4798      	blx	r3
    1882:	1c01      	adds	r1, r0, #0
    1884:	9800      	ldr	r0, [sp, #0]
    1886:	4b6b      	ldr	r3, [pc, #428]	; (1a34 <run_controller+0x214>)
    1888:	4798      	blx	r3
    188a:	4b6b      	ldr	r3, [pc, #428]	; (1a38 <run_controller+0x218>)
    188c:	4798      	blx	r3
												(state->setting_state.pip_cm_h20 - state->setting_state.peep_cm_h20);
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	68ba      	ldr	r2, [r7, #8]
    1892:	1a9b      	subs	r3, r3, r2
		control->pressure_set_point_cm_h20 += (int32_t) ((float) (time_into_profile) / (float) control->peep_to_pip_rampup_ms) * 
    1894:	4358      	muls	r0, r3
    1896:	4450      	add	r0, sl
    1898:	6120      	str	r0, [r4, #16]
	start_of_current_profile_time_ms = calculate_new_setpoint(current_time_ms, start_of_current_profile_time_ms, state, control);
    189a:	4b63      	ldr	r3, [pc, #396]	; (1a28 <run_controller+0x208>)
    189c:	601d      	str	r5, [r3, #0]
	float error = control->pressure_set_point_cm_h20 - control->pressure_current_cm_h20;
    189e:	6923      	ldr	r3, [r4, #16]
    18a0:	4699      	mov	r9, r3
    18a2:	6960      	ldr	r0, [r4, #20]
    18a4:	1a18      	subs	r0, r3, r0
    18a6:	4f62      	ldr	r7, [pc, #392]	; (1a30 <run_controller+0x210>)
    18a8:	47b8      	blx	r7
    18aa:	1c04      	adds	r4, r0, #0
	error_derivative = alpha*(error-last_error) + (1.0 - alpha)*error_derivative;
    18ac:	4b63      	ldr	r3, [pc, #396]	; (1a3c <run_controller+0x21c>)
    18ae:	6819      	ldr	r1, [r3, #0]
    18b0:	4b63      	ldr	r3, [pc, #396]	; (1a40 <run_controller+0x220>)
    18b2:	4798      	blx	r3
    18b4:	4963      	ldr	r1, [pc, #396]	; (1a44 <run_controller+0x224>)
    18b6:	4b64      	ldr	r3, [pc, #400]	; (1a48 <run_controller+0x228>)
    18b8:	4798      	blx	r3
    18ba:	4d64      	ldr	r5, [pc, #400]	; (1a4c <run_controller+0x22c>)
    18bc:	47a8      	blx	r5
    18be:	9000      	str	r0, [sp, #0]
    18c0:	9101      	str	r1, [sp, #4]
    18c2:	4b63      	ldr	r3, [pc, #396]	; (1a50 <run_controller+0x230>)
    18c4:	469b      	mov	fp, r3
    18c6:	6818      	ldr	r0, [r3, #0]
    18c8:	47a8      	blx	r5
    18ca:	2280      	movs	r2, #128	; 0x80
    18cc:	05d2      	lsls	r2, r2, #23
    18ce:	4b61      	ldr	r3, [pc, #388]	; (1a54 <run_controller+0x234>)
    18d0:	4d61      	ldr	r5, [pc, #388]	; (1a58 <run_controller+0x238>)
    18d2:	47a8      	blx	r5
    18d4:	0002      	movs	r2, r0
    18d6:	000b      	movs	r3, r1
    18d8:	9800      	ldr	r0, [sp, #0]
    18da:	9901      	ldr	r1, [sp, #4]
    18dc:	4d5f      	ldr	r5, [pc, #380]	; (1a5c <run_controller+0x23c>)
    18de:	47a8      	blx	r5
    18e0:	4b5f      	ldr	r3, [pc, #380]	; (1a60 <run_controller+0x240>)
    18e2:	4798      	blx	r3
    18e4:	9000      	str	r0, [sp, #0]
    18e6:	465a      	mov	r2, fp
    18e8:	6010      	str	r0, [r2, #0]
	if(abs(error) < params->integral_enable_error_range)
    18ea:	1c20      	adds	r0, r4, #0
    18ec:	4b52      	ldr	r3, [pc, #328]	; (1a38 <run_controller+0x218>)
    18ee:	4798      	blx	r3
    18f0:	17c3      	asrs	r3, r0, #31
    18f2:	18c0      	adds	r0, r0, r3
    18f4:	4058      	eors	r0, r3
    18f6:	47b8      	blx	r7
    18f8:	6971      	ldr	r1, [r6, #20]
    18fa:	4b5a      	ldr	r3, [pc, #360]	; (1a64 <run_controller+0x244>)
    18fc:	4798      	blx	r3
    18fe:	2800      	cmp	r0, #0
    1900:	d056      	beq.n	19b0 <run_controller+0x190>
		error_integral += error;
    1902:	4f59      	ldr	r7, [pc, #356]	; (1a68 <run_controller+0x248>)
    1904:	6839      	ldr	r1, [r7, #0]
    1906:	1c20      	adds	r0, r4, #0
    1908:	4b58      	ldr	r3, [pc, #352]	; (1a6c <run_controller+0x24c>)
    190a:	4798      	blx	r3
    190c:	6038      	str	r0, [r7, #0]
		if(abs(error_integral * params->ki) > params->interal_antiwindup)
    190e:	68b2      	ldr	r2, [r6, #8]
    1910:	6937      	ldr	r7, [r6, #16]
    1912:	9202      	str	r2, [sp, #8]
    1914:	1c11      	adds	r1, r2, #0
    1916:	1c05      	adds	r5, r0, #0
    1918:	4b4b      	ldr	r3, [pc, #300]	; (1a48 <run_controller+0x228>)
    191a:	4798      	blx	r3
    191c:	4b46      	ldr	r3, [pc, #280]	; (1a38 <run_controller+0x218>)
    191e:	4798      	blx	r3
    1920:	17c3      	asrs	r3, r0, #31
    1922:	18c0      	adds	r0, r0, r3
    1924:	4058      	eors	r0, r3
    1926:	4b42      	ldr	r3, [pc, #264]	; (1a30 <run_controller+0x210>)
    1928:	4798      	blx	r3
    192a:	1c39      	adds	r1, r7, #0
    192c:	4b50      	ldr	r3, [pc, #320]	; (1a70 <run_controller+0x250>)
    192e:	4798      	blx	r3
    1930:	2800      	cmp	r0, #0
    1932:	d040      	beq.n	19b6 <run_controller+0x196>
			error_integral	= (error_integral/abs(error_integral)) * (params->interal_antiwindup) / params->ki;
    1934:	9503      	str	r5, [sp, #12]
    1936:	1c28      	adds	r0, r5, #0
    1938:	4b3f      	ldr	r3, [pc, #252]	; (1a38 <run_controller+0x218>)
    193a:	4798      	blx	r3
    193c:	17c3      	asrs	r3, r0, #31
    193e:	18c0      	adds	r0, r0, r3
    1940:	4058      	eors	r0, r3
    1942:	4b3b      	ldr	r3, [pc, #236]	; (1a30 <run_controller+0x210>)
    1944:	4798      	blx	r3
    1946:	1c01      	adds	r1, r0, #0
    1948:	4d3a      	ldr	r5, [pc, #232]	; (1a34 <run_controller+0x214>)
    194a:	9803      	ldr	r0, [sp, #12]
    194c:	47a8      	blx	r5
    194e:	1c39      	adds	r1, r7, #0
    1950:	4b3d      	ldr	r3, [pc, #244]	; (1a48 <run_controller+0x228>)
    1952:	4798      	blx	r3
    1954:	9902      	ldr	r1, [sp, #8]
    1956:	47a8      	blx	r5
    1958:	4b43      	ldr	r3, [pc, #268]	; (1a68 <run_controller+0x248>)
    195a:	6018      	str	r0, [r3, #0]
    195c:	e02b      	b.n	19b6 <run_controller+0x196>
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	6123      	str	r3, [r4, #16]
    1962:	e79a      	b.n	189a <run_controller+0x7a>
		control->pressure_set_point_cm_h20 = state->setting_state.pip_cm_h20;
    1964:	68fa      	ldr	r2, [r7, #12]
    1966:	4692      	mov	sl, r2
    1968:	6122      	str	r2, [r4, #16]
		float section_dt = time_into_profile - (control->peep_to_pip_rampup_ms + control->pip_hold_ms);
    196a:	1ac0      	subs	r0, r0, r3
    196c:	4b2f      	ldr	r3, [pc, #188]	; (1a2c <run_controller+0x20c>)
    196e:	4798      	blx	r3
    1970:	9000      	str	r0, [sp, #0]
		control->pressure_set_point_cm_h20 += (section_dt / (float) control->pip_to_peep_rampdown_ms) * (state->setting_state.peep_cm_h20 - state->setting_state.pip_cm_h20);
    1972:	4b2f      	ldr	r3, [pc, #188]	; (1a30 <run_controller+0x210>)
    1974:	4699      	mov	r9, r3
    1976:	4658      	mov	r0, fp
    1978:	4798      	blx	r3
    197a:	1c01      	adds	r1, r0, #0
    197c:	9800      	ldr	r0, [sp, #0]
    197e:	4b2d      	ldr	r3, [pc, #180]	; (1a34 <run_controller+0x214>)
    1980:	4798      	blx	r3
    1982:	9000      	str	r0, [sp, #0]
    1984:	68b8      	ldr	r0, [r7, #8]
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	1ac0      	subs	r0, r0, r3
    198a:	47c8      	blx	r9
    198c:	1c01      	adds	r1, r0, #0
    198e:	9800      	ldr	r0, [sp, #0]
    1990:	4b2d      	ldr	r3, [pc, #180]	; (1a48 <run_controller+0x228>)
    1992:	4798      	blx	r3
    1994:	1c07      	adds	r7, r0, #0
    1996:	4650      	mov	r0, sl
    1998:	47c8      	blx	r9
    199a:	1c01      	adds	r1, r0, #0
    199c:	1c38      	adds	r0, r7, #0
    199e:	4b33      	ldr	r3, [pc, #204]	; (1a6c <run_controller+0x24c>)
    19a0:	4798      	blx	r3
    19a2:	4b25      	ldr	r3, [pc, #148]	; (1a38 <run_controller+0x218>)
    19a4:	4798      	blx	r3
    19a6:	6120      	str	r0, [r4, #16]
    19a8:	e777      	b.n	189a <run_controller+0x7a>
		control->pressure_set_point_cm_h20 = state->setting_state.peep_cm_h20;
    19aa:	68bb      	ldr	r3, [r7, #8]
    19ac:	6123      	str	r3, [r4, #16]
    19ae:	e774      	b.n	189a <run_controller+0x7a>
		error_integral = 0.0;
    19b0:	2200      	movs	r2, #0
    19b2:	4b2d      	ldr	r3, [pc, #180]	; (1a68 <run_controller+0x248>)
    19b4:	601a      	str	r2, [r3, #0]
	float output = params->kf * control->pressure_set_point_cm_h20 +
    19b6:	4648      	mov	r0, r9
    19b8:	4b1d      	ldr	r3, [pc, #116]	; (1a30 <run_controller+0x210>)
    19ba:	4798      	blx	r3
    19bc:	4f22      	ldr	r7, [pc, #136]	; (1a48 <run_controller+0x228>)
    19be:	6831      	ldr	r1, [r6, #0]
    19c0:	47b8      	blx	r7
    19c2:	9002      	str	r0, [sp, #8]
					params->kp * error +
    19c4:	6871      	ldr	r1, [r6, #4]
    19c6:	1c20      	adds	r0, r4, #0
    19c8:	47b8      	blx	r7
    19ca:	1c01      	adds	r1, r0, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    19cc:	4d27      	ldr	r5, [pc, #156]	; (1a6c <run_controller+0x24c>)
    19ce:	9802      	ldr	r0, [sp, #8]
    19d0:	47a8      	blx	r5
    19d2:	9002      	str	r0, [sp, #8]
					params->ki * error_integral +
    19d4:	4b24      	ldr	r3, [pc, #144]	; (1a68 <run_controller+0x248>)
    19d6:	6819      	ldr	r1, [r3, #0]
    19d8:	68b0      	ldr	r0, [r6, #8]
    19da:	47b8      	blx	r7
    19dc:	1c01      	adds	r1, r0, #0
					params->kp * error +
    19de:	9802      	ldr	r0, [sp, #8]
    19e0:	47a8      	blx	r5
    19e2:	9002      	str	r0, [sp, #8]
					params->kd * error_derivative;
    19e4:	68f1      	ldr	r1, [r6, #12]
    19e6:	9800      	ldr	r0, [sp, #0]
    19e8:	47b8      	blx	r7
    19ea:	1c01      	adds	r1, r0, #0
	float output = params->kf * control->pressure_set_point_cm_h20 +
    19ec:	9802      	ldr	r0, [sp, #8]
    19ee:	47a8      	blx	r5
    19f0:	1c05      	adds	r5, r0, #0
	if(output > params->max_output)
    19f2:	69b7      	ldr	r7, [r6, #24]
    19f4:	1c39      	adds	r1, r7, #0
    19f6:	4b1e      	ldr	r3, [pc, #120]	; (1a70 <run_controller+0x250>)
    19f8:	4798      	blx	r3
    19fa:	2800      	cmp	r0, #0
    19fc:	d000      	beq.n	1a00 <run_controller+0x1e0>
		output = params->max_output;
    19fe:	1c3d      	adds	r5, r7, #0
	if(output < params->min_output)
    1a00:	69f6      	ldr	r6, [r6, #28]
    1a02:	1c29      	adds	r1, r5, #0
    1a04:	1c30      	adds	r0, r6, #0
    1a06:	4b1a      	ldr	r3, [pc, #104]	; (1a70 <run_controller+0x250>)
    1a08:	4798      	blx	r3
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d000      	beq.n	1a10 <run_controller+0x1f0>
		output = params->min_output;
    1a0e:	1c35      	adds	r5, r6, #0
	last_error = error;
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <run_controller+0x21c>)
    1a12:	601c      	str	r4, [r3, #0]

	// Then, run the controller to track this setpoint
	float output = pidf_control(control, params);
	last_time_ms = current_time_ms;
	return output;
    1a14:	1c28      	adds	r0, r5, #0
    1a16:	b004      	add	sp, #16
    1a18:	bc1c      	pop	{r2, r3, r4}
    1a1a:	4691      	mov	r9, r2
    1a1c:	469a      	mov	sl, r3
    1a1e:	46a3      	mov	fp, r4
    1a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	00002ff9 	.word	0x00002ff9
    1a28:	20004f2c 	.word	0x20004f2c
    1a2c:	00005a75 	.word	0x00005a75
    1a30:	000059d5 	.word	0x000059d5
    1a34:	0000503d 	.word	0x0000503d
    1a38:	00005995 	.word	0x00005995
    1a3c:	20004f28 	.word	0x20004f28
    1a40:	0000565d 	.word	0x0000565d
    1a44:	3f333333 	.word	0x3f333333
    1a48:	0000541d 	.word	0x0000541d
    1a4c:	00007611 	.word	0x00007611
    1a50:	20004f20 	.word	0x20004f20
    1a54:	3fd33333 	.word	0x3fd33333
    1a58:	00006989 	.word	0x00006989
    1a5c:	00005b01 	.word	0x00005b01
    1a60:	000076b5 	.word	0x000076b5
    1a64:	00004c99 	.word	0x00004c99
    1a68:	20004f24 	.word	0x20004f24
    1a6c:	00004d19 	.word	0x00004d19
    1a70:	00004cc1 	.word	0x00004cc1

00001a74 <flow_sensor_slm_callback>:
*	\brief Callback to handle the measurements from the flow sensor
*
*	\param module Pointer to I2C master module
*/
static void flow_sensor_slm_callback(struct i2c_master_module *const module)
{
    1a74:	b510      	push	{r4, lr}
	// WARNING: ISR context
	uint8_t read_crc = read_slm_buffer[2];
    1a76:	4b16      	ldr	r3, [pc, #88]	; (1ad0 <flow_sensor_slm_callback+0x5c>)
    1a78:	7899      	ldrb	r1, [r3, #2]
    1a7a:	b2c9      	uxtb	r1, r1
	 { crc ^= *(data+byteCtr);
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1a80:	2431      	movs	r4, #49	; 0x31
    1a82:	e006      	b.n	1a92 <flow_sensor_slm_callback+0x1e>
    1a84:	005b      	lsls	r3, r3, #1
    1a86:	4063      	eors	r3, r4
    1a88:	b2db      	uxtb	r3, r3
    1a8a:	3a01      	subs	r2, #1
    1a8c:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1a8e:	2a00      	cmp	r2, #0
    1a90:	d005      	beq.n	1a9e <flow_sensor_slm_callback+0x2a>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1a92:	b258      	sxtb	r0, r3
    1a94:	2800      	cmp	r0, #0
    1a96:	dbf5      	blt.n	1a84 <flow_sensor_slm_callback+0x10>
			 else crc = (crc << 1);
    1a98:	005b      	lsls	r3, r3, #1
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	e7f5      	b.n	1a8a <flow_sensor_slm_callback+0x16>
	 { crc ^= *(data+byteCtr);
    1a9e:	4a0c      	ldr	r2, [pc, #48]	; (1ad0 <flow_sensor_slm_callback+0x5c>)
    1aa0:	7852      	ldrb	r2, [r2, #1]
    1aa2:	4053      	eors	r3, r2
    1aa4:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1aa6:	2431      	movs	r4, #49	; 0x31
    1aa8:	e006      	b.n	1ab8 <flow_sensor_slm_callback+0x44>
    1aaa:	005b      	lsls	r3, r3, #1
    1aac:	4063      	eors	r3, r4
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	3a01      	subs	r2, #1
    1ab2:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1ab4:	2a00      	cmp	r2, #0
    1ab6:	d005      	beq.n	1ac4 <flow_sensor_slm_callback+0x50>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1ab8:	b258      	sxtb	r0, r3
    1aba:	2800      	cmp	r0, #0
    1abc:	dbf5      	blt.n	1aaa <flow_sensor_slm_callback+0x36>
			 else crc = (crc << 1);
    1abe:	005b      	lsls	r3, r3, #1
    1ac0:	b2db      	uxtb	r3, r3
    1ac2:	e7f5      	b.n	1ab0 <flow_sensor_slm_callback+0x3c>
	if(!flow_sensor_crc(read_slm_buffer, 2, read_crc))
    1ac4:	4299      	cmp	r1, r3
    1ac6:	d102      	bne.n	1ace <flow_sensor_slm_callback+0x5a>
	{
		return;
	}

	uint32_t raw_rate = read_slm_buffer[1] | (read_slm_buffer[0] << 8);
    1ac8:	4b01      	ldr	r3, [pc, #4]	; (1ad0 <flow_sensor_slm_callback+0x5c>)
    1aca:	785a      	ldrb	r2, [r3, #1]
    1acc:	781b      	ldrb	r3, [r3, #0]
	float flow_rate = (float) ((int32_t) raw_rate - (int32_t) SFM3300_OFFSET_FLOW) / SFM3300_SCALE_FACTOR_FLOW;
	// TODO do something with it
}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	20004f30 	.word	0x20004f30

00001ad4 <flow_sensor_init>:
*	\brief Sets up callback handler for flow sensor measurements
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_init(struct i2c_master_module * i2c_mod)
{
    1ad4:	b510      	push	{r4, lr}
    1ad6:	0004      	movs	r4, r0
	// Set up I2C callback
	i2c_master_register_callback(i2c_mod, flow_sensor_slm_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1ad8:	2201      	movs	r2, #1
    1ada:	4904      	ldr	r1, [pc, #16]	; (1aec <flow_sensor_init+0x18>)
    1adc:	4b04      	ldr	r3, [pc, #16]	; (1af0 <flow_sensor_init+0x1c>)
    1ade:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1ae0:	7e63      	ldrb	r3, [r4, #25]
    1ae2:	2202      	movs	r2, #2
    1ae4:	4313      	orrs	r3, r2
    1ae6:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(i2c_mod, I2C_MASTER_CALLBACK_READ_COMPLETE);
	// TODO set priority to be FreeRTOS compatible?
}
    1ae8:	bd10      	pop	{r4, pc}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	00001a75 	.word	0x00001a75
    1af0:	00000d7d 	.word	0x00000d7d

00001af4 <flow_sensor_power_on>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1af4:	2280      	movs	r2, #128	; 0x80
    1af6:	0412      	lsls	r2, r2, #16
    1af8:	4b01      	ldr	r3, [pc, #4]	; (1b00 <flow_sensor_power_on+0xc>)
    1afa:	619a      	str	r2, [r3, #24]
*	\brief Powers on the flow sensor
*/
void flow_sensor_power_on(void)
{
	ioport_set_pin_level(FLOW_SENSOR_POWER_GPIO, FLOW_SENSOR_POWER_ACTIVE_LEVEL);
}
    1afc:	4770      	bx	lr
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	41004480 	.word	0x41004480

00001b04 <flow_sensor_request_flow_slm>:
*	\brief Requests a measurement from the flow sensor and triggers another measurement
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_request_flow_slm(struct i2c_master_module * i2c_mod)
{
    1b04:	b570      	push	{r4, r5, r6, lr}
    1b06:	0005      	movs	r5, r0
	// Note: Delay is inherent between these, so must not call faster than 500Hz

	slm_read_packet.address = SFM3300_I2C_ADDRESS;
    1b08:	490b      	ldr	r1, [pc, #44]	; (1b38 <flow_sensor_request_flow_slm+0x34>)
    1b0a:	2640      	movs	r6, #64	; 0x40
    1b0c:	800e      	strh	r6, [r1, #0]
	slm_read_packet.data = read_slm_buffer;
    1b0e:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <flow_sensor_request_flow_slm+0x38>)
    1b10:	604b      	str	r3, [r1, #4]
	slm_read_packet.data_length = 3;
    1b12:	2303      	movs	r3, #3
    1b14:	804b      	strh	r3, [r1, #2]
	slm_read_packet.high_speed = false;
    1b16:	2400      	movs	r4, #0
    1b18:	724c      	strb	r4, [r1, #9]
	slm_read_packet.ten_bit_address = false;
    1b1a:	720c      	strb	r4, [r1, #8]
	i2c_master_read_packet_job(i2c_mod, &slm_read_packet);
    1b1c:	4b08      	ldr	r3, [pc, #32]	; (1b40 <flow_sensor_request_flow_slm+0x3c>)
    1b1e:	4798      	blx	r3

	static uint8_t flow_request_to_send[2] = {SFM3300_MEAS_CMD_BYTE_1, SFM3300_MEAS_CMD_BYTE_2};
	// First have to request read, delay 2ms, and then read
	slm_write_packet.address = SFM3300_I2C_ADDRESS;
    1b20:	4908      	ldr	r1, [pc, #32]	; (1b44 <flow_sensor_request_flow_slm+0x40>)
    1b22:	800e      	strh	r6, [r1, #0]
	slm_write_packet.data = &flow_request_to_send[0];
    1b24:	4b08      	ldr	r3, [pc, #32]	; (1b48 <flow_sensor_request_flow_slm+0x44>)
    1b26:	604b      	str	r3, [r1, #4]
	slm_write_packet.data_length = 2;
    1b28:	2302      	movs	r3, #2
    1b2a:	804b      	strh	r3, [r1, #2]
	slm_write_packet.high_speed = false;
    1b2c:	724c      	strb	r4, [r1, #9]
	slm_write_packet.ten_bit_address = false;
    1b2e:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(i2c_mod, &slm_write_packet);
    1b30:	0028      	movs	r0, r5
    1b32:	4b06      	ldr	r3, [pc, #24]	; (1b4c <flow_sensor_request_flow_slm+0x48>)
    1b34:	4798      	blx	r3
    1b36:	bd70      	pop	{r4, r5, r6, pc}
    1b38:	20004f34 	.word	0x20004f34
    1b3c:	20004f30 	.word	0x20004f30
    1b40:	00000d95 	.word	0x00000d95
    1b44:	20004f40 	.word	0x20004f40
    1b48:	20000004 	.word	0x20000004
    1b4c:	00000db9 	.word	0x00000db9

00001b50 <send_buffer>:
	}
	return false;
}

bool send_buffer(SCREEN_TYPE screen)
{
    1b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    */
	// reorganize to this format
	static uint8_t lines_1_3_buffer[40];
	static uint8_t lines_2_4_buffer[40];

	if(screen == MAIN_SCREEN)
    1b52:	2800      	cmp	r0, #0
    1b54:	d004      	beq.n	1b60 <send_buffer+0x10>
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
	}
	else
	{
		return false;
    1b56:	2300      	movs	r3, #0
	else if(screen == ALARM_SCREEN)
    1b58:	2801      	cmp	r0, #1
    1b5a:	d026      	beq.n	1baa <send_buffer+0x5a>
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
	screen_buffer_second_half_packet.data_length = 40;
	screen_buffer_second_half_packet.high_speed = false;
	screen_buffer_second_half_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_second_half_packet);
}
    1b5c:	0018      	movs	r0, r3
    1b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(&lines_1_3_buffer[0], &main_screen_buffer[0], 20);
    1b60:	4a39      	ldr	r2, [pc, #228]	; (1c48 <send_buffer+0xf8>)
    1b62:	4b3a      	ldr	r3, [pc, #232]	; (1c4c <send_buffer+0xfc>)
    1b64:	0011      	movs	r1, r2
    1b66:	0018      	movs	r0, r3
    1b68:	c870      	ldmia	r0!, {r4, r5, r6}
    1b6a:	c170      	stmia	r1!, {r4, r5, r6}
    1b6c:	c830      	ldmia	r0!, {r4, r5}
    1b6e:	c130      	stmia	r1!, {r4, r5}
		memcpy(&lines_1_3_buffer[20], &main_screen_buffer[40], 20);
    1b70:	3214      	adds	r2, #20
    1b72:	0019      	movs	r1, r3
    1b74:	3128      	adds	r1, #40	; 0x28
    1b76:	c931      	ldmia	r1!, {r0, r4, r5}
    1b78:	c231      	stmia	r2!, {r0, r4, r5}
    1b7a:	0010      	movs	r0, r2
    1b7c:	c914      	ldmia	r1!, {r2, r4}
    1b7e:	c014      	stmia	r0!, {r2, r4}
		memcpy(&lines_2_4_buffer[0], &main_screen_buffer[20], 20);
    1b80:	4a33      	ldr	r2, [pc, #204]	; (1c50 <send_buffer+0x100>)
    1b82:	0019      	movs	r1, r3
    1b84:	3114      	adds	r1, #20
    1b86:	0010      	movs	r0, r2
    1b88:	c970      	ldmia	r1!, {r4, r5, r6}
    1b8a:	c070      	stmia	r0!, {r4, r5, r6}
    1b8c:	c930      	ldmia	r1!, {r4, r5}
    1b8e:	c030      	stmia	r0!, {r4, r5}
		memcpy(&lines_2_4_buffer[20], &main_screen_buffer[60], 20);
    1b90:	3214      	adds	r2, #20
    1b92:	333c      	adds	r3, #60	; 0x3c
    1b94:	cb13      	ldmia	r3!, {r0, r1, r4}
    1b96:	c213      	stmia	r2!, {r0, r1, r4}
    1b98:	0011      	movs	r1, r2
    1b9a:	cb05      	ldmia	r3!, {r0, r2}
    1b9c:	c105      	stmia	r1!, {r0, r2}
    1b9e:	4b2a      	ldr	r3, [pc, #168]	; (1c48 <send_buffer+0xf8>)
    1ba0:	4a2b      	ldr	r2, [pc, #172]	; (1c50 <send_buffer+0x100>)
    1ba2:	0018      	movs	r0, r3
    1ba4:	3028      	adds	r0, #40	; 0x28
			lines_1_3_buffer[i] = 0x20; // ASCII space
    1ba6:	2420      	movs	r4, #32
    1ba8:	e023      	b.n	1bf2 <send_buffer+0xa2>
		memcpy(&lines_1_3_buffer[0], &alarm_screen_buffer[0], 20);
    1baa:	4a27      	ldr	r2, [pc, #156]	; (1c48 <send_buffer+0xf8>)
    1bac:	4b29      	ldr	r3, [pc, #164]	; (1c54 <send_buffer+0x104>)
    1bae:	0011      	movs	r1, r2
    1bb0:	0018      	movs	r0, r3
    1bb2:	c870      	ldmia	r0!, {r4, r5, r6}
    1bb4:	c170      	stmia	r1!, {r4, r5, r6}
    1bb6:	c830      	ldmia	r0!, {r4, r5}
    1bb8:	c130      	stmia	r1!, {r4, r5}
		memcpy(&lines_1_3_buffer[20], &alarm_screen_buffer[40], 20);
    1bba:	3214      	adds	r2, #20
    1bbc:	0019      	movs	r1, r3
    1bbe:	3128      	adds	r1, #40	; 0x28
    1bc0:	c931      	ldmia	r1!, {r0, r4, r5}
    1bc2:	c231      	stmia	r2!, {r0, r4, r5}
    1bc4:	0010      	movs	r0, r2
    1bc6:	c914      	ldmia	r1!, {r2, r4}
    1bc8:	c014      	stmia	r0!, {r2, r4}
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
    1bca:	4a21      	ldr	r2, [pc, #132]	; (1c50 <send_buffer+0x100>)
    1bcc:	0019      	movs	r1, r3
    1bce:	3114      	adds	r1, #20
    1bd0:	0010      	movs	r0, r2
    1bd2:	c970      	ldmia	r1!, {r4, r5, r6}
    1bd4:	c070      	stmia	r0!, {r4, r5, r6}
    1bd6:	c930      	ldmia	r1!, {r4, r5}
    1bd8:	c030      	stmia	r0!, {r4, r5}
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
    1bda:	3214      	adds	r2, #20
    1bdc:	333c      	adds	r3, #60	; 0x3c
    1bde:	cb13      	ldmia	r3!, {r0, r1, r4}
    1be0:	c213      	stmia	r2!, {r0, r1, r4}
    1be2:	0011      	movs	r1, r2
    1be4:	cb05      	ldmia	r3!, {r0, r2}
    1be6:	c105      	stmia	r1!, {r0, r2}
    1be8:	e7d9      	b.n	1b9e <send_buffer+0x4e>
    1bea:	3301      	adds	r3, #1
    1bec:	3201      	adds	r2, #1
	for(int32_t i = 0; i < 40; i++)
    1bee:	4283      	cmp	r3, r0
    1bf0:	d008      	beq.n	1c04 <send_buffer+0xb4>
		if(lines_1_3_buffer[i] < 0x07)
    1bf2:	7819      	ldrb	r1, [r3, #0]
    1bf4:	2906      	cmp	r1, #6
    1bf6:	d800      	bhi.n	1bfa <send_buffer+0xaa>
			lines_1_3_buffer[i] = 0x20; // ASCII space
    1bf8:	701c      	strb	r4, [r3, #0]
		if(lines_2_4_buffer[i] < 0x07)
    1bfa:	7811      	ldrb	r1, [r2, #0]
    1bfc:	2906      	cmp	r1, #6
    1bfe:	d8f4      	bhi.n	1bea <send_buffer+0x9a>
			lines_2_4_buffer[i] = 0x20; // ASCII space
    1c00:	7014      	strb	r4, [r2, #0]
    1c02:	e7f2      	b.n	1bea <send_buffer+0x9a>
	cursor_set_packet.address = LCD_I2C_ADDRESS;
    1c04:	4914      	ldr	r1, [pc, #80]	; (1c58 <send_buffer+0x108>)
    1c06:	2628      	movs	r6, #40	; 0x28
    1c08:	800e      	strh	r6, [r1, #0]
	cursor_set_packet.data = cursor_set;
    1c0a:	4b14      	ldr	r3, [pc, #80]	; (1c5c <send_buffer+0x10c>)
    1c0c:	604b      	str	r3, [r1, #4]
	cursor_set_packet.data_length = 3;
    1c0e:	2303      	movs	r3, #3
    1c10:	804b      	strh	r3, [r1, #2]
	cursor_set_packet.high_speed = false;
    1c12:	2400      	movs	r4, #0
    1c14:	724c      	strb	r4, [r1, #9]
	cursor_set_packet.ten_bit_address = false;
    1c16:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &cursor_set_packet);
    1c18:	4d11      	ldr	r5, [pc, #68]	; (1c60 <send_buffer+0x110>)
    1c1a:	0028      	movs	r0, r5
    1c1c:	4f11      	ldr	r7, [pc, #68]	; (1c64 <send_buffer+0x114>)
    1c1e:	47b8      	blx	r7
	screen_buffer_first_half_packet.address = LCD_I2C_ADDRESS;
    1c20:	4911      	ldr	r1, [pc, #68]	; (1c68 <send_buffer+0x118>)
    1c22:	800e      	strh	r6, [r1, #0]
	screen_buffer_first_half_packet.data = lines_1_3_buffer;
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <send_buffer+0xf8>)
    1c26:	604b      	str	r3, [r1, #4]
	screen_buffer_first_half_packet.data_length = 40;
    1c28:	804e      	strh	r6, [r1, #2]
	screen_buffer_first_half_packet.high_speed = false;
    1c2a:	724c      	strb	r4, [r1, #9]
	screen_buffer_first_half_packet.ten_bit_address = false;
    1c2c:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_first_half_packet);
    1c2e:	0028      	movs	r0, r5
    1c30:	47b8      	blx	r7
	screen_buffer_second_half_packet.address = LCD_I2C_ADDRESS;
    1c32:	490e      	ldr	r1, [pc, #56]	; (1c6c <send_buffer+0x11c>)
    1c34:	800e      	strh	r6, [r1, #0]
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <send_buffer+0x100>)
    1c38:	604b      	str	r3, [r1, #4]
	screen_buffer_second_half_packet.data_length = 40;
    1c3a:	804e      	strh	r6, [r1, #2]
	screen_buffer_second_half_packet.high_speed = false;
    1c3c:	724c      	strb	r4, [r1, #9]
	screen_buffer_second_half_packet.ten_bit_address = false;
    1c3e:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_second_half_packet);
    1c40:	0028      	movs	r0, r5
    1c42:	47b8      	blx	r7
}
    1c44:	e78a      	b.n	1b5c <send_buffer+0xc>
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	20004ff0 	.word	0x20004ff0
    1c4c:	20005040 	.word	0x20005040
    1c50:	20005018 	.word	0x20005018
    1c54:	20004f4c 	.word	0x20004f4c
    1c58:	20004fb4 	.word	0x20004fb4
    1c5c:	20000008 	.word	0x20000008
    1c60:	20004fc8 	.word	0x20004fc8
    1c64:	00000db9 	.word	0x00000db9
    1c68:	2000509c 	.word	0x2000509c
    1c6c:	200050a8 	.word	0x200050a8

00001c70 <set_contrast>:

bool set_contrast(uint8_t level)
{
    1c70:	b510      	push	{r4, lr}
	if(level < 1 || level > 50)
    1c72:	1e42      	subs	r2, r0, #1
	{
		return false;
    1c74:	2300      	movs	r3, #0
	if(level < 1 || level > 50)
    1c76:	2a31      	cmp	r2, #49	; 0x31
    1c78:	d901      	bls.n	1c7e <set_contrast+0xe>
	contrast_packet.data_length = 3;
	contrast_packet.high_speed = false;
	contrast_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &contrast_packet);
	return true;
}
    1c7a:	0018      	movs	r0, r3
    1c7c:	bd10      	pop	{r4, pc}
	data_to_send[0] = LCD_PREFIX;
    1c7e:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <set_contrast+0x38>)
    1c80:	22fe      	movs	r2, #254	; 0xfe
    1c82:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_CONTRAST;
    1c84:	3aac      	subs	r2, #172	; 0xac
    1c86:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    1c88:	7098      	strb	r0, [r3, #2]
	contrast_packet.address = LCD_I2C_ADDRESS;
    1c8a:	4908      	ldr	r1, [pc, #32]	; (1cac <set_contrast+0x3c>)
    1c8c:	3a2a      	subs	r2, #42	; 0x2a
    1c8e:	800a      	strh	r2, [r1, #0]
	contrast_packet.data = data_to_send;
    1c90:	604b      	str	r3, [r1, #4]
	contrast_packet.data_length = 3;
    1c92:	2303      	movs	r3, #3
    1c94:	804b      	strh	r3, [r1, #2]
	contrast_packet.high_speed = false;
    1c96:	2300      	movs	r3, #0
    1c98:	724b      	strb	r3, [r1, #9]
	contrast_packet.ten_bit_address = false;
    1c9a:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &contrast_packet);
    1c9c:	4804      	ldr	r0, [pc, #16]	; (1cb0 <set_contrast+0x40>)
    1c9e:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <set_contrast+0x44>)
    1ca0:	4798      	blx	r3
	return true;
    1ca2:	2301      	movs	r3, #1
    1ca4:	e7e9      	b.n	1c7a <set_contrast+0xa>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	20004fc0 	.word	0x20004fc0
    1cac:	20004fa8 	.word	0x20004fa8
    1cb0:	20004fc8 	.word	0x20004fc8
    1cb4:	00000db9 	.word	0x00000db9

00001cb8 <set_backlight>:

bool set_backlight(uint8_t level)
{
    1cb8:	b510      	push	{r4, lr}
	if(level < 1 || level > 8)
    1cba:	1e42      	subs	r2, r0, #1
	{
		return false;
    1cbc:	2300      	movs	r3, #0
	if(level < 1 || level > 8)
    1cbe:	2a07      	cmp	r2, #7
    1cc0:	d901      	bls.n	1cc6 <set_backlight+0xe>
	backlight_packet.data_length = 3;
	backlight_packet.high_speed = false;
	backlight_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &backlight_packet);
	return true;
}
    1cc2:	0018      	movs	r0, r3
    1cc4:	bd10      	pop	{r4, pc}
	data_to_send[0] = LCD_PREFIX;
    1cc6:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <set_backlight+0x38>)
    1cc8:	22fe      	movs	r2, #254	; 0xfe
    1cca:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_BRIGHTNESS;
    1ccc:	3aab      	subs	r2, #171	; 0xab
    1cce:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    1cd0:	7098      	strb	r0, [r3, #2]
	backlight_packet.address = LCD_I2C_ADDRESS;
    1cd2:	4908      	ldr	r1, [pc, #32]	; (1cf4 <set_backlight+0x3c>)
    1cd4:	3a2b      	subs	r2, #43	; 0x2b
    1cd6:	800a      	strh	r2, [r1, #0]
	backlight_packet.data = data_to_send;
    1cd8:	604b      	str	r3, [r1, #4]
	backlight_packet.data_length = 3;
    1cda:	2303      	movs	r3, #3
    1cdc:	804b      	strh	r3, [r1, #2]
	backlight_packet.high_speed = false;
    1cde:	2300      	movs	r3, #0
    1ce0:	724b      	strb	r3, [r1, #9]
	backlight_packet.ten_bit_address = false;
    1ce2:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &backlight_packet);
    1ce4:	4804      	ldr	r0, [pc, #16]	; (1cf8 <set_backlight+0x40>)
    1ce6:	4b05      	ldr	r3, [pc, #20]	; (1cfc <set_backlight+0x44>)
    1ce8:	4798      	blx	r3
	return true;
    1cea:	2301      	movs	r3, #1
    1cec:	e7e9      	b.n	1cc2 <set_backlight+0xa>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	20004fc4 	.word	0x20004fc4
    1cf4:	20004f9c 	.word	0x20004f9c
    1cf8:	20004fc8 	.word	0x20004fc8
    1cfc:	00000db9 	.word	0x00000db9

00001d00 <lcd_init>:
 {
    1d00:	b530      	push	{r4, r5, lr}
    1d02:	b08f      	sub	sp, #60	; 0x3c
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1d04:	ab01      	add	r3, sp, #4
    1d06:	4a33      	ldr	r2, [pc, #204]	; (1dd4 <lcd_init+0xd4>)
    1d08:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1d0a:	2200      	movs	r2, #0
    1d0c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1d0e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1d10:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1d12:	2180      	movs	r1, #128	; 0x80
    1d14:	0389      	lsls	r1, r1, #14
    1d16:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1d18:	2101      	movs	r1, #1
    1d1a:	4249      	negs	r1, r1
    1d1c:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1d1e:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1d20:	3125      	adds	r1, #37	; 0x25
    1d22:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1d24:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1d26:	3108      	adds	r1, #8
    1d28:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1d2a:	3101      	adds	r1, #1
    1d2c:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1d2e:	202e      	movs	r0, #46	; 0x2e
    1d30:	541a      	strb	r2, [r3, r0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1d32:	32d7      	adds	r2, #215	; 0xd7
    1d34:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.baud_rate = 45; // Set in # of kHz
    1d36:	9101      	str	r1, [sp, #4]
	config_i2c_master.pinmux_pad0 = PIN_PA16C_SERCOM1_PAD0;
    1d38:	3ac7      	subs	r2, #199	; 0xc7
    1d3a:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PIN_PA17C_SERCOM1_PAD1;
    1d3c:	3201      	adds	r2, #1
    1d3e:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, LCD_SERCOM, &config_i2c_master) != STATUS_OK);
    1d40:	4d25      	ldr	r5, [pc, #148]	; (1dd8 <lcd_init+0xd8>)
    1d42:	4c26      	ldr	r4, [pc, #152]	; (1ddc <lcd_init+0xdc>)
    1d44:	aa01      	add	r2, sp, #4
    1d46:	4926      	ldr	r1, [pc, #152]	; (1de0 <lcd_init+0xe0>)
    1d48:	0028      	movs	r0, r5
    1d4a:	47a0      	blx	r4
    1d4c:	2800      	cmp	r0, #0
    1d4e:	d1f9      	bne.n	1d44 <lcd_init+0x44>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d50:	4b21      	ldr	r3, [pc, #132]	; (1dd8 <lcd_init+0xd8>)
    1d52:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1d54:	2207      	movs	r2, #7
    1d56:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1d58:	421a      	tst	r2, r3
    1d5a:	d1fc      	bne.n	1d56 <lcd_init+0x56>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1d5c:	6823      	ldr	r3, [r4, #0]
    1d5e:	2202      	movs	r2, #2
    1d60:	4313      	orrs	r3, r2
    1d62:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d64:	4d1c      	ldr	r5, [pc, #112]	; (1dd8 <lcd_init+0xd8>)
    1d66:	6828      	ldr	r0, [r5, #0]
    1d68:	4b1e      	ldr	r3, [pc, #120]	; (1de4 <lcd_init+0xe4>)
    1d6a:	4798      	blx	r3
    1d6c:	231f      	movs	r3, #31
    1d6e:	4018      	ands	r0, r3
    1d70:	3b1e      	subs	r3, #30
    1d72:	4083      	lsls	r3, r0
    1d74:	4a1c      	ldr	r2, [pc, #112]	; (1de8 <lcd_init+0xe8>)
    1d76:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d78:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1d7a:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1d7c:	2110      	movs	r1, #16
    1d7e:	8b62      	ldrh	r2, [r4, #26]
    1d80:	420a      	tst	r2, r1
    1d82:	d104      	bne.n	1d8e <lcd_init+0x8e>
		timeout_counter++;
    1d84:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1d86:	4283      	cmp	r3, r0
    1d88:	d3f9      	bcc.n	1d7e <lcd_init+0x7e>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1d8a:	2310      	movs	r3, #16
    1d8c:	8363      	strh	r3, [r4, #26]
	power_on_packet.address = LCD_I2C_ADDRESS;
    1d8e:	4917      	ldr	r1, [pc, #92]	; (1dec <lcd_init+0xec>)
    1d90:	2328      	movs	r3, #40	; 0x28
    1d92:	800b      	strh	r3, [r1, #0]
	power_on_packet.data = on_screen_buffer;
    1d94:	4b16      	ldr	r3, [pc, #88]	; (1df0 <lcd_init+0xf0>)
    1d96:	604b      	str	r3, [r1, #4]
	power_on_packet.data_length = 2;
    1d98:	2302      	movs	r3, #2
    1d9a:	804b      	strh	r3, [r1, #2]
	power_on_packet.high_speed = false;
    1d9c:	2300      	movs	r3, #0
    1d9e:	724b      	strb	r3, [r1, #9]
	power_on_packet.ten_bit_address = false;
    1da0:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &power_on_packet);
    1da2:	480d      	ldr	r0, [pc, #52]	; (1dd8 <lcd_init+0xd8>)
    1da4:	4b13      	ldr	r3, [pc, #76]	; (1df4 <lcd_init+0xf4>)
    1da6:	4798      	blx	r3
	set_backlight(2);
    1da8:	2002      	movs	r0, #2
    1daa:	4b13      	ldr	r3, [pc, #76]	; (1df8 <lcd_init+0xf8>)
    1dac:	4798      	blx	r3
	set_contrast(40);
    1dae:	2028      	movs	r0, #40	; 0x28
    1db0:	4b12      	ldr	r3, [pc, #72]	; (1dfc <lcd_init+0xfc>)
    1db2:	4798      	blx	r3
	memcpy(main_screen_buffer, intro_screen, strlen(intro_screen));
    1db4:	4a12      	ldr	r2, [pc, #72]	; (1e00 <lcd_init+0x100>)
    1db6:	4b13      	ldr	r3, [pc, #76]	; (1e04 <lcd_init+0x104>)
    1db8:	cb13      	ldmia	r3!, {r0, r1, r4}
    1dba:	c213      	stmia	r2!, {r0, r1, r4}
    1dbc:	0011      	movs	r1, r2
    1dbe:	681a      	ldr	r2, [r3, #0]
    1dc0:	600a      	str	r2, [r1, #0]
    1dc2:	889a      	ldrh	r2, [r3, #4]
    1dc4:	808a      	strh	r2, [r1, #4]
    1dc6:	799b      	ldrb	r3, [r3, #6]
    1dc8:	718b      	strb	r3, [r1, #6]
	send_buffer(MAIN_SCREEN);
    1dca:	2000      	movs	r0, #0
    1dcc:	4b0e      	ldr	r3, [pc, #56]	; (1e08 <lcd_init+0x108>)
    1dce:	4798      	blx	r3
 }
    1dd0:	b00f      	add	sp, #60	; 0x3c
    1dd2:	bd30      	pop	{r4, r5, pc}
    1dd4:	00000d48 	.word	0x00000d48
    1dd8:	20004fc8 	.word	0x20004fc8
    1ddc:	00000809 	.word	0x00000809
    1de0:	42000c00 	.word	0x42000c00
    1de4:	00003d71 	.word	0x00003d71
    1de8:	e000e100 	.word	0xe000e100
    1dec:	20005090 	.word	0x20005090
    1df0:	2000000c 	.word	0x2000000c
    1df4:	00000db9 	.word	0x00000db9
    1df8:	00001cb9 	.word	0x00001cb9
    1dfc:	00001c71 	.word	0x00001c71
    1e00:	20005040 	.word	0x20005040
    1e04:	00008228 	.word	0x00008228
    1e08:	00001b51 	.word	0x00001b51

00001e0c <update_main_buffer>:

void update_main_buffer(lcv_parameters_t * new_settings,  SETTINGS_INPUT_STAGE stage)
{
    1e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0e:	b089      	sub	sp, #36	; 0x24
    1e10:	0007      	movs	r7, r0
    1e12:	000e      	movs	r6, r1
	lcv_parameters_t current_settings = get_current_settings();
    1e14:	a803      	add	r0, sp, #12
    1e16:	4b29      	ldr	r3, [pc, #164]	; (1ebc <update_main_buffer+0xb0>)
    1e18:	4798      	blx	r3
    1e1a:	4b29      	ldr	r3, [pc, #164]	; (1ec0 <update_main_buffer+0xb4>)
    1e1c:	0019      	movs	r1, r3
    1e1e:	3150      	adds	r1, #80	; 0x50

	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
	{
		main_screen_buffer[i] = 0x20; // ASCII space
    1e20:	2220      	movs	r2, #32
    1e22:	701a      	strb	r2, [r3, #0]
    1e24:	3301      	adds	r3, #1
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    1e26:	428b      	cmp	r3, r1
    1e28:	d1fb      	bne.n	1e22 <update_main_buffer+0x16>
	}

	// Update info
	// NOTE: snprintf here doesn't support floats
	if(current_settings.enable)
    1e2a:	ab03      	add	r3, sp, #12
    1e2c:	781b      	ldrb	r3, [r3, #0]
    1e2e:	07db      	lsls	r3, r3, #31
    1e30:	d528      	bpl.n	1e84 <update_main_buffer+0x78>
	{
		snprintf(&main_screen_buffer[0],9,"VENT:ON");
    1e32:	4a23      	ldr	r2, [pc, #140]	; (1ec0 <update_main_buffer+0xb4>)
    1e34:	4b23      	ldr	r3, [pc, #140]	; (1ec4 <update_main_buffer+0xb8>)
    1e36:	cb03      	ldmia	r3!, {r0, r1}
    1e38:	c203      	stmia	r2!, {r0, r1}
	else
	{
		snprintf(&main_screen_buffer[0],9,"VENT:OFF");
	}

	snprintf(&main_screen_buffer[10],10, "V:%iml", current_settings.tidal_volume_ml);
    1e3a:	9b04      	ldr	r3, [sp, #16]
    1e3c:	9301      	str	r3, [sp, #4]
    1e3e:	4c20      	ldr	r4, [pc, #128]	; (1ec0 <update_main_buffer+0xb4>)
    1e40:	0020      	movs	r0, r4
    1e42:	300a      	adds	r0, #10
    1e44:	4a20      	ldr	r2, [pc, #128]	; (1ec8 <update_main_buffer+0xbc>)
    1e46:	210a      	movs	r1, #10
    1e48:	4d20      	ldr	r5, [pc, #128]	; (1ecc <update_main_buffer+0xc0>)
    1e4a:	47a8      	blx	r5

	snprintf(&main_screen_buffer[20],20, "PEEP:%icmH20", current_settings.peep_cm_h20);
    1e4c:	9b05      	ldr	r3, [sp, #20]
    1e4e:	9301      	str	r3, [sp, #4]
    1e50:	0020      	movs	r0, r4
    1e52:	3014      	adds	r0, #20
    1e54:	4a1e      	ldr	r2, [pc, #120]	; (1ed0 <update_main_buffer+0xc4>)
    1e56:	2114      	movs	r1, #20
    1e58:	47a8      	blx	r5

	snprintf(&main_screen_buffer[40],13, "PIP:%icmH20", current_settings.pip_cm_h20);
    1e5a:	9b06      	ldr	r3, [sp, #24]
    1e5c:	9301      	str	r3, [sp, #4]
    1e5e:	0020      	movs	r0, r4
    1e60:	3028      	adds	r0, #40	; 0x28
    1e62:	4a1c      	ldr	r2, [pc, #112]	; (1ed4 <update_main_buffer+0xc8>)
    1e64:	210d      	movs	r1, #13
    1e66:	47a8      	blx	r5

	snprintf(&main_screen_buffer[52],7, "BPM:%i", current_settings.breath_per_min);
    1e68:	9b07      	ldr	r3, [sp, #28]
    1e6a:	0020      	movs	r0, r4
    1e6c:	3034      	adds	r0, #52	; 0x34
    1e6e:	4a1a      	ldr	r2, [pc, #104]	; (1ed8 <update_main_buffer+0xcc>)
    1e70:	2107      	movs	r1, #7
    1e72:	47a8      	blx	r5

	// Fill in settings input display
	switch (stage)
    1e74:	2e02      	cmp	r6, #2
    1e76:	d013      	beq.n	1ea0 <update_main_buffer+0x94>
    1e78:	2e03      	cmp	r6, #3
    1e7a:	d018      	beq.n	1eae <update_main_buffer+0xa2>
    1e7c:	2e01      	cmp	r6, #1
    1e7e:	d008      	beq.n	1e92 <update_main_buffer+0x86>
		break;
		
		default:
		break;
	}
}
    1e80:	b009      	add	sp, #36	; 0x24
    1e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(&main_screen_buffer[0],9,"VENT:OFF");
    1e84:	4a0e      	ldr	r2, [pc, #56]	; (1ec0 <update_main_buffer+0xb4>)
    1e86:	4b15      	ldr	r3, [pc, #84]	; (1edc <update_main_buffer+0xd0>)
    1e88:	cb03      	ldmia	r3!, {r0, r1}
    1e8a:	c203      	stmia	r2!, {r0, r1}
    1e8c:	781b      	ldrb	r3, [r3, #0]
    1e8e:	7013      	strb	r3, [r2, #0]
    1e90:	e7d3      	b.n	1e3a <update_main_buffer+0x2e>
		sprintf(&main_screen_buffer[60], "SET BPM:%i", new_settings->breath_per_min);
    1e92:	693a      	ldr	r2, [r7, #16]
    1e94:	4912      	ldr	r1, [pc, #72]	; (1ee0 <update_main_buffer+0xd4>)
    1e96:	480a      	ldr	r0, [pc, #40]	; (1ec0 <update_main_buffer+0xb4>)
    1e98:	303c      	adds	r0, #60	; 0x3c
    1e9a:	4b12      	ldr	r3, [pc, #72]	; (1ee4 <update_main_buffer+0xd8>)
    1e9c:	4798      	blx	r3
		break;
    1e9e:	e7ef      	b.n	1e80 <update_main_buffer+0x74>
		sprintf(&main_screen_buffer[60], "SET PEEP:%icmH20", new_settings->peep_cm_h20);
    1ea0:	68ba      	ldr	r2, [r7, #8]
    1ea2:	4911      	ldr	r1, [pc, #68]	; (1ee8 <update_main_buffer+0xdc>)
    1ea4:	4806      	ldr	r0, [pc, #24]	; (1ec0 <update_main_buffer+0xb4>)
    1ea6:	303c      	adds	r0, #60	; 0x3c
    1ea8:	4b0e      	ldr	r3, [pc, #56]	; (1ee4 <update_main_buffer+0xd8>)
    1eaa:	4798      	blx	r3
		break;
    1eac:	e7e8      	b.n	1e80 <update_main_buffer+0x74>
		sprintf(&main_screen_buffer[60], "SET PIP:%icmH20", new_settings->pip_cm_h20);
    1eae:	68fa      	ldr	r2, [r7, #12]
    1eb0:	490e      	ldr	r1, [pc, #56]	; (1eec <update_main_buffer+0xe0>)
    1eb2:	4803      	ldr	r0, [pc, #12]	; (1ec0 <update_main_buffer+0xb4>)
    1eb4:	303c      	adds	r0, #60	; 0x3c
    1eb6:	4b0b      	ldr	r3, [pc, #44]	; (1ee4 <update_main_buffer+0xd8>)
    1eb8:	4798      	blx	r3
}
    1eba:	e7e1      	b.n	1e80 <update_main_buffer+0x74>
    1ebc:	00002131 	.word	0x00002131
    1ec0:	20005040 	.word	0x20005040
    1ec4:	00008284 	.word	0x00008284
    1ec8:	00008298 	.word	0x00008298
    1ecc:	00007871 	.word	0x00007871
    1ed0:	000082b0 	.word	0x000082b0
    1ed4:	000082c4 	.word	0x000082c4
    1ed8:	000082a4 	.word	0x000082a4
    1edc:	0000828c 	.word	0x0000828c
    1ee0:	000082a0 	.word	0x000082a0
    1ee4:	000078d5 	.word	0x000078d5
    1ee8:	000082ac 	.word	0x000082ac
    1eec:	000082c0 	.word	0x000082c0

00001ef0 <update_alarm_buffer>:

void update_alarm_buffer(void)
{
    1ef0:	b510      	push	{r4, lr}
    1ef2:	4b2d      	ldr	r3, [pc, #180]	; (1fa8 <update_alarm_buffer+0xb8>)
    1ef4:	0019      	movs	r1, r3
    1ef6:	3150      	adds	r1, #80	; 0x50
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
	{
		alarm_screen_buffer[i] = 0x20; // ASCII space
    1ef8:	2220      	movs	r2, #32
    1efa:	701a      	strb	r2, [r3, #0]
    1efc:	3301      	adds	r3, #1
	for(int32_t i = 0; i < SCREEN_BUFFER_SIZE; i++)
    1efe:	428b      	cmp	r3, r1
    1f00:	d1fb      	bne.n	1efa <update_alarm_buffer+0xa>
	}

	snprintf(&alarm_screen_buffer[0],9,"ERRORS:");
    1f02:	4a29      	ldr	r2, [pc, #164]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f04:	4b29      	ldr	r3, [pc, #164]	; (1fac <update_alarm_buffer+0xbc>)
    1f06:	cb03      	ldmia	r3!, {r0, r1}
    1f08:	c203      	stmia	r2!, {r0, r1}

	if(check_alarm(ALARM_FLOW_SENSOR))
    1f0a:	2000      	movs	r0, #0
    1f0c:	4b28      	ldr	r3, [pc, #160]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f0e:	4798      	blx	r3
    1f10:	2800      	cmp	r0, #0
    1f12:	d119      	bne.n	1f48 <update_alarm_buffer+0x58>
	{
		snprintf(&alarm_screen_buffer[10],10,"FLOW");
	}

	if(check_alarm(ALARM_PRESSURE_SENSOR))
    1f14:	2002      	movs	r0, #2
    1f16:	4b26      	ldr	r3, [pc, #152]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f18:	4798      	blx	r3
    1f1a:	2800      	cmp	r0, #0
    1f1c:	d11b      	bne.n	1f56 <update_alarm_buffer+0x66>
	{
		snprintf(&alarm_screen_buffer[20],10,"PRES SNS");
	}

	if(check_alarm(ALARM_MOTOR_ERROR))
    1f1e:	2003      	movs	r0, #3
    1f20:	4b23      	ldr	r3, [pc, #140]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f22:	4798      	blx	r3
    1f24:	2800      	cmp	r0, #0
    1f26:	d11e      	bne.n	1f66 <update_alarm_buffer+0x76>
	{
		snprintf(&alarm_screen_buffer[30],10,"MOT FAIL");
	}

	if(check_alarm(ALARM_MOTOR_TEMP))
    1f28:	2004      	movs	r0, #4
    1f2a:	4b21      	ldr	r3, [pc, #132]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f2c:	4798      	blx	r3
    1f2e:	2800      	cmp	r0, #0
    1f30:	d120      	bne.n	1f74 <update_alarm_buffer+0x84>
	{
		snprintf(&alarm_screen_buffer[40],10,"MOT TEMP");
	}

	if(check_alarm(ALARM_SETTINGS_LOAD))
    1f32:	2005      	movs	r0, #5
    1f34:	4b1e      	ldr	r3, [pc, #120]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f36:	4798      	blx	r3
    1f38:	2800      	cmp	r0, #0
    1f3a:	d123      	bne.n	1f84 <update_alarm_buffer+0x94>
	{
		snprintf(&alarm_screen_buffer[50],10,"SETT LOAD");
	}

	if(check_alarm(ALARM_P_RAMP_SETTINGS_INVALID))
    1f3c:	2006      	movs	r0, #6
    1f3e:	4b1c      	ldr	r3, [pc, #112]	; (1fb0 <update_alarm_buffer+0xc0>)
    1f40:	4798      	blx	r3
    1f42:	2800      	cmp	r0, #0
    1f44:	d125      	bne.n	1f92 <update_alarm_buffer+0xa2>
	{
		snprintf(&alarm_screen_buffer[60],10,"P RISE");
	}
    1f46:	bd10      	pop	{r4, pc}
		snprintf(&alarm_screen_buffer[10],10,"FLOW");
    1f48:	2205      	movs	r2, #5
    1f4a:	491a      	ldr	r1, [pc, #104]	; (1fb4 <update_alarm_buffer+0xc4>)
    1f4c:	4816      	ldr	r0, [pc, #88]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f4e:	300a      	adds	r0, #10
    1f50:	4b19      	ldr	r3, [pc, #100]	; (1fb8 <update_alarm_buffer+0xc8>)
    1f52:	4798      	blx	r3
    1f54:	e7de      	b.n	1f14 <update_alarm_buffer+0x24>
		snprintf(&alarm_screen_buffer[20],10,"PRES SNS");
    1f56:	4a14      	ldr	r2, [pc, #80]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f58:	3214      	adds	r2, #20
    1f5a:	4b18      	ldr	r3, [pc, #96]	; (1fbc <update_alarm_buffer+0xcc>)
    1f5c:	cb03      	ldmia	r3!, {r0, r1}
    1f5e:	c203      	stmia	r2!, {r0, r1}
    1f60:	781b      	ldrb	r3, [r3, #0]
    1f62:	7013      	strb	r3, [r2, #0]
    1f64:	e7db      	b.n	1f1e <update_alarm_buffer+0x2e>
		snprintf(&alarm_screen_buffer[30],10,"MOT FAIL");
    1f66:	2209      	movs	r2, #9
    1f68:	4915      	ldr	r1, [pc, #84]	; (1fc0 <update_alarm_buffer+0xd0>)
    1f6a:	480f      	ldr	r0, [pc, #60]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f6c:	301e      	adds	r0, #30
    1f6e:	4b12      	ldr	r3, [pc, #72]	; (1fb8 <update_alarm_buffer+0xc8>)
    1f70:	4798      	blx	r3
    1f72:	e7d9      	b.n	1f28 <update_alarm_buffer+0x38>
		snprintf(&alarm_screen_buffer[40],10,"MOT TEMP");
    1f74:	4a0c      	ldr	r2, [pc, #48]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f76:	3228      	adds	r2, #40	; 0x28
    1f78:	4b12      	ldr	r3, [pc, #72]	; (1fc4 <update_alarm_buffer+0xd4>)
    1f7a:	cb03      	ldmia	r3!, {r0, r1}
    1f7c:	c203      	stmia	r2!, {r0, r1}
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	7013      	strb	r3, [r2, #0]
    1f82:	e7d6      	b.n	1f32 <update_alarm_buffer+0x42>
		snprintf(&alarm_screen_buffer[50],10,"SETT LOAD");
    1f84:	220a      	movs	r2, #10
    1f86:	4910      	ldr	r1, [pc, #64]	; (1fc8 <update_alarm_buffer+0xd8>)
    1f88:	4807      	ldr	r0, [pc, #28]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f8a:	3032      	adds	r0, #50	; 0x32
    1f8c:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <update_alarm_buffer+0xc8>)
    1f8e:	4798      	blx	r3
    1f90:	e7d4      	b.n	1f3c <update_alarm_buffer+0x4c>
		snprintf(&alarm_screen_buffer[60],10,"P RISE");
    1f92:	4905      	ldr	r1, [pc, #20]	; (1fa8 <update_alarm_buffer+0xb8>)
    1f94:	000a      	movs	r2, r1
    1f96:	323c      	adds	r2, #60	; 0x3c
    1f98:	4b0c      	ldr	r3, [pc, #48]	; (1fcc <update_alarm_buffer+0xdc>)
    1f9a:	6818      	ldr	r0, [r3, #0]
    1f9c:	63c8      	str	r0, [r1, #60]	; 0x3c
    1f9e:	8899      	ldrh	r1, [r3, #4]
    1fa0:	8091      	strh	r1, [r2, #4]
    1fa2:	799b      	ldrb	r3, [r3, #6]
    1fa4:	7193      	strb	r3, [r2, #6]
    1fa6:	e7ce      	b.n	1f46 <update_alarm_buffer+0x56>
    1fa8:	20004f4c 	.word	0x20004f4c
    1fac:	0000823c 	.word	0x0000823c
    1fb0:	000016a9 	.word	0x000016a9
    1fb4:	00008244 	.word	0x00008244
    1fb8:	0000784d 	.word	0x0000784d
    1fbc:	0000824c 	.word	0x0000824c
    1fc0:	00008258 	.word	0x00008258
    1fc4:	00008264 	.word	0x00008264
    1fc8:	00008270 	.word	0x00008270
    1fcc:	0000827c 	.word	0x0000827c

00001fd0 <enable_motor>:
    1fd0:	2201      	movs	r2, #1
    1fd2:	4b01      	ldr	r3, [pc, #4]	; (1fd8 <enable_motor+0x8>)
    1fd4:	619a      	str	r2, [r3, #24]
 }

 void enable_motor(void)
 {
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, MOTOR_ENABLE_ACTIVE_LEVEL);
 }
    1fd6:	4770      	bx	lr
    1fd8:	41004400 	.word	0x41004400

00001fdc <disable_motor>:
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1fdc:	2201      	movs	r2, #1
    1fde:	4b01      	ldr	r3, [pc, #4]	; (1fe4 <disable_motor+0x8>)
    1fe0:	615a      	str	r2, [r3, #20]

 void disable_motor(void)
 {
	ioport_set_pin_level(MOTOR_ENABLE_GPIO, !MOTOR_ENABLE_ACTIVE_LEVEL);
 }
    1fe2:	4770      	bx	lr
    1fe4:	41004400 	.word	0x41004400

00001fe8 <drive_motor>:

 void drive_motor(float command)
 {
    1fe8:	b510      	push	{r4, lr}
	uint16_t dac_out = command * 1023;
    1fea:	4905      	ldr	r1, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	4b05      	ldr	r3, [pc, #20]	; (2004 <STACK_SIZE+0x4>)
    1fee:	4798      	blx	r3
    1ff0:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff2:	4798      	blx	r3
	dac_chan_write_job(&module, DAC_CHANNEL_0, dac_out);
    1ff4:	b282      	uxth	r2, r0
    1ff6:	2100      	movs	r1, #0
    1ff8:	4804      	ldr	r0, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffa:	4b05      	ldr	r3, [pc, #20]	; (2010 <STACK_SIZE+0x10>)
    1ffc:	4798      	blx	r3
    1ffe:	bd10      	pop	{r4, pc}
    2000:	447fc000 	.word	0x447fc000
    2004:	0000541d 	.word	0x0000541d
    2008:	00004ce9 	.word	0x00004ce9
    200c:	200050b4 	.word	0x200050b4
    2010:	00000725 	.word	0x00000725

00002014 <control_task>:


}

static void control_task(void * pvParameters)
{
    2014:	b5f0      	push	{r4, r5, r6, r7, lr}
    2016:	b08b      	sub	sp, #44	; 0x2c
	UNUSED(pvParameters);

	// Set default TODO what should these be?
	lcv_state.setting_state.enable = 0;
    2018:	482b      	ldr	r0, [pc, #172]	; (20c8 <control_task+0xb4>)
    201a:	7803      	ldrb	r3, [r0, #0]
    201c:	2201      	movs	r2, #1
    201e:	4393      	bics	r3, r2
    2020:	7003      	strb	r3, [r0, #0]
	lcv_state.setting_state.ie_ratio_tenths = 30;
    2022:	231e      	movs	r3, #30
    2024:	7043      	strb	r3, [r0, #1]
	lcv_state.setting_state.peep_cm_h20 = 14;
    2026:	320d      	adds	r2, #13
    2028:	6082      	str	r2, [r0, #8]
	lcv_state.setting_state.pip_cm_h20 = 30;
    202a:	60c3      	str	r3, [r0, #12]
	lcv_state.setting_state.breath_per_min = 20;
    202c:	3b0a      	subs	r3, #10
    202e:	6103      	str	r3, [r0, #16]

	// Assume nothing until feedback
	lcv_state.current_state = lcv_state.setting_state;
    2030:	0003      	movs	r3, r0
    2032:	3314      	adds	r3, #20
    2034:	0002      	movs	r2, r0
    2036:	ca32      	ldmia	r2!, {r1, r4, r5}
    2038:	c332      	stmia	r3!, {r1, r4, r5}
    203a:	ca12      	ldmia	r2!, {r1, r4}
    203c:	c312      	stmia	r3!, {r1, r4}

	// Set initial control settings
	lcv_control.peep_to_pip_rampup_ms = 1000;
    203e:	4923      	ldr	r1, [pc, #140]	; (20cc <control_task+0xb8>)
    2040:	23fa      	movs	r3, #250	; 0xfa
    2042:	009b      	lsls	r3, r3, #2
    2044:	600b      	str	r3, [r1, #0]
	lcv_control.pip_to_peep_rampdown_ms = 1000;
    2046:	608b      	str	r3, [r1, #8]

	calculate_lcv_control_params(&lcv_state, &lcv_control);
    2048:	4b21      	ldr	r3, [pc, #132]	; (20d0 <control_task+0xbc>)
    204a:	4798      	blx	r3

	const TickType_t xFrequency = pdMS_TO_TICKS(10);	// 100 Hz rate
	TickType_t xLastWakeTime = xTaskGetTickCount();
    204c:	4b21      	ldr	r3, [pc, #132]	; (20d4 <control_task+0xc0>)
    204e:	4798      	blx	r3
    2050:	9009      	str	r0, [sp, #36]	; 0x24

	controller_param_t control_params;
	control_params.kf = 0.1;
    2052:	4b21      	ldr	r3, [pc, #132]	; (20d8 <control_task+0xc4>)
    2054:	9301      	str	r3, [sp, #4]
	control_params.kp = 0.0;
    2056:	2300      	movs	r3, #0
    2058:	9302      	str	r3, [sp, #8]
	control_params.kd = 0.0;
    205a:	9304      	str	r3, [sp, #16]
	control_params.ki = 0.0;
    205c:	9303      	str	r3, [sp, #12]
	control_params.integral_enable_error_range = 10.0;
    205e:	4a1f      	ldr	r2, [pc, #124]	; (20dc <control_task+0xc8>)
    2060:	9206      	str	r2, [sp, #24]
	control_params.interal_antiwindup = 0.3;
    2062:	4a1f      	ldr	r2, [pc, #124]	; (20e0 <control_task+0xcc>)
    2064:	9205      	str	r2, [sp, #20]
	control_params.max_output = 1.0;
    2066:	22fe      	movs	r2, #254	; 0xfe
    2068:	0592      	lsls	r2, r2, #22
    206a:	9207      	str	r2, [sp, #28]
	control_params.min_output = 0.0;
    206c:	9308      	str	r3, [sp, #32]

	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    206e:	4f1d      	ldr	r7, [pc, #116]	; (20e4 <control_task+0xd0>)
	state->current_state.enable = system_is_enabled();
    2070:	4e1d      	ldr	r6, [pc, #116]	; (20e8 <control_task+0xd4>)
    2072:	4c15      	ldr	r4, [pc, #84]	; (20c8 <control_task+0xb4>)
    2074:	e004      	b.n	2080 <control_task+0x6c>
			enable_motor();
			drive_motor(motor_output);
		}
		else
		{
			disable_motor();
    2076:	4b1d      	ldr	r3, [pc, #116]	; (20ec <control_task+0xd8>)
    2078:	4798      	blx	r3
			drive_motor(0.0);
    207a:	2000      	movs	r0, #0
    207c:	4b1c      	ldr	r3, [pc, #112]	; (20f0 <control_task+0xdc>)
    207e:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    2080:	210a      	movs	r1, #10
    2082:	a809      	add	r0, sp, #36	; 0x24
    2084:	47b8      	blx	r7
	state->current_state.enable = system_is_enabled();
    2086:	47b0      	blx	r6
    2088:	2201      	movs	r2, #1
    208a:	2501      	movs	r5, #1
    208c:	4028      	ands	r0, r5
    208e:	7d23      	ldrb	r3, [r4, #20]
    2090:	4393      	bics	r3, r2
    2092:	4303      	orrs	r3, r0
    2094:	7523      	strb	r3, [r4, #20]
	state->setting_state.enable = state->current_state.enable;
    2096:	7823      	ldrb	r3, [r4, #0]
    2098:	4393      	bics	r3, r2
    209a:	4318      	orrs	r0, r3
    209c:	7020      	strb	r0, [r4, #0]
	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    209e:	4b15      	ldr	r3, [pc, #84]	; (20f4 <control_task+0xe0>)
    20a0:	4798      	blx	r3
    20a2:	4b15      	ldr	r3, [pc, #84]	; (20f8 <control_task+0xe4>)
    20a4:	4798      	blx	r3
    20a6:	4b09      	ldr	r3, [pc, #36]	; (20cc <control_task+0xb8>)
    20a8:	6158      	str	r0, [r3, #20]
		if(lcv_state.current_state.enable)
    20aa:	7d23      	ldrb	r3, [r4, #20]
    20ac:	421d      	tst	r5, r3
    20ae:	d0e2      	beq.n	2076 <control_task+0x62>
			float motor_output = run_controller(&lcv_state, &lcv_control, &control_params);
    20b0:	aa01      	add	r2, sp, #4
    20b2:	4906      	ldr	r1, [pc, #24]	; (20cc <control_task+0xb8>)
    20b4:	4804      	ldr	r0, [pc, #16]	; (20c8 <control_task+0xb4>)
    20b6:	4b11      	ldr	r3, [pc, #68]	; (20fc <control_task+0xe8>)
    20b8:	4798      	blx	r3
    20ba:	1c05      	adds	r5, r0, #0
			enable_motor();
    20bc:	4b10      	ldr	r3, [pc, #64]	; (2100 <control_task+0xec>)
    20be:	4798      	blx	r3
			drive_motor(motor_output);
    20c0:	1c28      	adds	r0, r5, #0
    20c2:	4b0b      	ldr	r3, [pc, #44]	; (20f0 <control_task+0xdc>)
    20c4:	4798      	blx	r3
    20c6:	e7db      	b.n	2080 <control_task+0x6c>
    20c8:	200050f4 	.word	0x200050f4
    20cc:	200050dc 	.word	0x200050dc
    20d0:	000016d9 	.word	0x000016d9
    20d4:	00002ff9 	.word	0x00002ff9
    20d8:	3dcccccd 	.word	0x3dcccccd
    20dc:	41200000 	.word	0x41200000
    20e0:	3e99999a 	.word	0x3e99999a
    20e4:	0000323d 	.word	0x0000323d
    20e8:	000021d9 	.word	0x000021d9
    20ec:	00001fdd 	.word	0x00001fdd
    20f0:	00001fe9 	.word	0x00001fe9
    20f4:	000014a1 	.word	0x000014a1
    20f8:	00005995 	.word	0x00005995
    20fc:	00001821 	.word	0x00001821
    2100:	00001fd1 	.word	0x00001fd1

00002104 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    2104:	b510      	push	{r4, lr}
    2106:	b082      	sub	sp, #8
    2108:	0002      	movs	r2, r0
	xTaskCreate(control_task, (const char * const) "CONTROL",
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <create_control_task+0x1c>)
    210c:	9301      	str	r3, [sp, #4]
    210e:	9100      	str	r1, [sp, #0]
    2110:	2300      	movs	r3, #0
    2112:	4904      	ldr	r1, [pc, #16]	; (2124 <create_control_task+0x20>)
    2114:	4804      	ldr	r0, [pc, #16]	; (2128 <create_control_task+0x24>)
    2116:	4c05      	ldr	r4, [pc, #20]	; (212c <create_control_task+0x28>)
    2118:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
}
    211a:	b002      	add	sp, #8
    211c:	bd10      	pop	{r4, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	200050d8 	.word	0x200050d8
    2124:	000082d0 	.word	0x000082d0
    2128:	00002015 	.word	0x00002015
    212c:	00002d8d 	.word	0x00002d8d

00002130 <get_current_settings>:
*	\brief Gets the current settings
*
*	\return The current settings
*/
lcv_parameters_t get_current_settings(void)
{
    2130:	b530      	push	{r4, r5, lr}
	return lcv_state.setting_state;
    2132:	4904      	ldr	r1, [pc, #16]	; (2144 <get_current_settings+0x14>)
    2134:	0003      	movs	r3, r0
    2136:	000a      	movs	r2, r1
    2138:	ca32      	ldmia	r2!, {r1, r4, r5}
    213a:	c332      	stmia	r3!, {r1, r4, r5}
    213c:	ca12      	ldmia	r2!, {r1, r4}
    213e:	c312      	stmia	r3!, {r1, r4}
}
    2140:	bd30      	pop	{r4, r5, pc}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	200050f4 	.word	0x200050f4

00002148 <update_settings>:
*
*	\param new_settings Pointer to the new settings
*/
void update_settings(lcv_parameters_t * new_settings)
{
	lcv_state.setting_state.breath_per_min = new_settings->breath_per_min;
    2148:	4b03      	ldr	r3, [pc, #12]	; (2158 <update_settings+0x10>)
    214a:	6902      	ldr	r2, [r0, #16]
    214c:	611a      	str	r2, [r3, #16]
	lcv_state.setting_state.peep_cm_h20 = new_settings->peep_cm_h20;
    214e:	6882      	ldr	r2, [r0, #8]
    2150:	609a      	str	r2, [r3, #8]
	lcv_state.setting_state.pip_cm_h20 = new_settings->pip_cm_h20;
    2152:	68c2      	ldr	r2, [r0, #12]
    2154:	60da      	str	r2, [r3, #12]
    2156:	4770      	bx	lr
    2158:	200050f4 	.word	0x200050f4

0000215c <vScreenChangeTimerCallback>:
}

static void vScreenChangeTimerCallback( TimerHandle_t xTimer )
{
	UNUSED(xTimer);
	display_main_page = !display_main_page;
    215c:	4a02      	ldr	r2, [pc, #8]	; (2168 <vScreenChangeTimerCallback+0xc>)
    215e:	7813      	ldrb	r3, [r2, #0]
    2160:	2101      	movs	r1, #1
    2162:	404b      	eors	r3, r1
    2164:	7013      	strb	r3, [r2, #0]
}
    2166:	4770      	bx	lr
    2168:	2000000e 	.word	0x2000000e

0000216c <vScreenRefreshTimerCallback>:

static void vScreenRefreshTimerCallback( TimerHandle_t xTimer )
{
    216c:	b510      	push	{r4, lr}
	UNUSED(xTimer);
	
	// Don't display alarm page if no alarms
	if(!display_main_page)
    216e:	4b0c      	ldr	r3, [pc, #48]	; (21a0 <vScreenRefreshTimerCallback+0x34>)
    2170:	781b      	ldrb	r3, [r3, #0]
    2172:	2b00      	cmp	r3, #0
    2174:	d003      	beq.n	217e <vScreenRefreshTimerCallback+0x12>
		}
	}

	if(display_main_page)
	{
		send_buffer(MAIN_SCREEN);
    2176:	2000      	movs	r0, #0
    2178:	4b0a      	ldr	r3, [pc, #40]	; (21a4 <vScreenRefreshTimerCallback+0x38>)
    217a:	4798      	blx	r3
    217c:	e00e      	b.n	219c <vScreenRefreshTimerCallback+0x30>
		if(!any_alarms_set())
    217e:	4b0a      	ldr	r3, [pc, #40]	; (21a8 <vScreenRefreshTimerCallback+0x3c>)
    2180:	4798      	blx	r3
    2182:	2800      	cmp	r0, #0
    2184:	d103      	bne.n	218e <vScreenRefreshTimerCallback+0x22>
			display_main_page = true;
    2186:	2201      	movs	r2, #1
    2188:	4b05      	ldr	r3, [pc, #20]	; (21a0 <vScreenRefreshTimerCallback+0x34>)
    218a:	701a      	strb	r2, [r3, #0]
    218c:	e7f3      	b.n	2176 <vScreenRefreshTimerCallback+0xa>
	if(display_main_page)
    218e:	4b04      	ldr	r3, [pc, #16]	; (21a0 <vScreenRefreshTimerCallback+0x34>)
    2190:	781b      	ldrb	r3, [r3, #0]
    2192:	2b00      	cmp	r3, #0
    2194:	d1ef      	bne.n	2176 <vScreenRefreshTimerCallback+0xa>
	}
	else
	{
		send_buffer(ALARM_SCREEN);
    2196:	2001      	movs	r0, #1
    2198:	4b02      	ldr	r3, [pc, #8]	; (21a4 <vScreenRefreshTimerCallback+0x38>)
    219a:	4798      	blx	r3
	}
}
    219c:	bd10      	pop	{r4, pc}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	2000000e 	.word	0x2000000e
    21a4:	00001b51 	.word	0x00001b51
    21a8:	000016c9 	.word	0x000016c9

000021ac <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    21ac:	b510      	push	{r4, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	0002      	movs	r2, r0
	xTaskCreate(hmi_task, (const char * const) "HMI",
    21b2:	4b05      	ldr	r3, [pc, #20]	; (21c8 <create_hmi_task+0x1c>)
    21b4:	9301      	str	r3, [sp, #4]
    21b6:	9100      	str	r1, [sp, #0]
    21b8:	2300      	movs	r3, #0
    21ba:	4904      	ldr	r1, [pc, #16]	; (21cc <create_hmi_task+0x20>)
    21bc:	4804      	ldr	r0, [pc, #16]	; (21d0 <create_hmi_task+0x24>)
    21be:	4c05      	ldr	r4, [pc, #20]	; (21d4 <create_hmi_task+0x28>)
    21c0:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);
}
    21c2:	b002      	add	sp, #8
    21c4:	bd10      	pop	{r4, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	2000511c 	.word	0x2000511c
    21cc:	000082d8 	.word	0x000082d8
    21d0:	000021f5 	.word	0x000021f5
    21d4:	00002d8d 	.word	0x00002d8d

000021d8 <system_is_enabled>:
	}
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    21d8:	4b01      	ldr	r3, [pc, #4]	; (21e0 <system_is_enabled+0x8>)
    21da:	6a18      	ldr	r0, [r3, #32]
*
*	\return True if enabled, false otherwise
*/
bool system_is_enabled(void)
{
	return (ioport_get_pin_level(INPUT_ENABLE_GPIO) == IOPORT_PIN_LEVEL_HIGH);
    21dc:	0fc0      	lsrs	r0, r0, #31
}
    21de:	4770      	bx	lr
    21e0:	41004400 	.word	0x41004400

000021e4 <get_pushbutton_level>:
    21e4:	4b02      	ldr	r3, [pc, #8]	; (21f0 <get_pushbutton_level+0xc>)
    21e6:	6a18      	ldr	r0, [r3, #32]
    21e8:	0040      	lsls	r0, r0, #1
*
*	\return True if high, false if low
*/
bool get_pushbutton_level(void)
{
	return ioport_get_pin_level(INPUT_PUSHBUTTON_GPIO);
    21ea:	0fc0      	lsrs	r0, r0, #31
    21ec:	4770      	bx	lr
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	41004400 	.word	0x41004400

000021f4 <hmi_task>:
{
    21f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21f6:	b085      	sub	sp, #20
	lcd_init();
    21f8:	4b4a      	ldr	r3, [pc, #296]	; (2324 <hmi_task+0x130>)
    21fa:	4798      	blx	r3
	screen_update_handle = xTimerCreate("SCREEN_TIM",
    21fc:	4b4a      	ldr	r3, [pc, #296]	; (2328 <hmi_task+0x134>)
    21fe:	9300      	str	r3, [sp, #0]
    2200:	2300      	movs	r3, #0
    2202:	2201      	movs	r2, #1
    2204:	211e      	movs	r1, #30
    2206:	4849      	ldr	r0, [pc, #292]	; (232c <hmi_task+0x138>)
    2208:	4c49      	ldr	r4, [pc, #292]	; (2330 <hmi_task+0x13c>)
    220a:	47a0      	blx	r4
    220c:	1e04      	subs	r4, r0, #0
	if(screen_update_handle)
    220e:	d008      	beq.n	2222 <hmi_task+0x2e>
		xTimerStart(screen_update_handle, 0);
    2210:	4b48      	ldr	r3, [pc, #288]	; (2334 <hmi_task+0x140>)
    2212:	4798      	blx	r3
    2214:	0002      	movs	r2, r0
    2216:	2300      	movs	r3, #0
    2218:	9300      	str	r3, [sp, #0]
    221a:	2101      	movs	r1, #1
    221c:	0020      	movs	r0, r4
    221e:	4c46      	ldr	r4, [pc, #280]	; (2338 <hmi_task+0x144>)
    2220:	47a0      	blx	r4
	screen_change_handle = xTimerCreate("SCREEN_CHG",
    2222:	4b46      	ldr	r3, [pc, #280]	; (233c <hmi_task+0x148>)
    2224:	9300      	str	r3, [sp, #0]
    2226:	2300      	movs	r3, #0
    2228:	2201      	movs	r2, #1
    222a:	21fa      	movs	r1, #250	; 0xfa
    222c:	00c9      	lsls	r1, r1, #3
    222e:	4844      	ldr	r0, [pc, #272]	; (2340 <hmi_task+0x14c>)
    2230:	4c3f      	ldr	r4, [pc, #252]	; (2330 <hmi_task+0x13c>)
    2232:	47a0      	blx	r4
    2234:	1e04      	subs	r4, r0, #0
	if(screen_change_handle)
    2236:	d008      	beq.n	224a <hmi_task+0x56>
		xTimerStart(screen_change_handle, 0);
    2238:	4b3e      	ldr	r3, [pc, #248]	; (2334 <hmi_task+0x140>)
    223a:	4798      	blx	r3
    223c:	0002      	movs	r2, r0
    223e:	2300      	movs	r3, #0
    2240:	9300      	str	r3, [sp, #0]
    2242:	2101      	movs	r1, #1
    2244:	0020      	movs	r0, r4
    2246:	4c3c      	ldr	r4, [pc, #240]	; (2338 <hmi_task+0x144>)
    2248:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
    224a:	4b3a      	ldr	r3, [pc, #232]	; (2334 <hmi_task+0x140>)
    224c:	4798      	blx	r3
    224e:	9003      	str	r0, [sp, #12]
			knob_portion * (upper_settings_range.breath_per_min - lower_settings_range.breath_per_min);
    2250:	4f3c      	ldr	r7, [pc, #240]	; (2344 <hmi_task+0x150>)
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    2252:	4e3d      	ldr	r6, [pc, #244]	; (2348 <hmi_task+0x154>)
			knob_portion * (upper_settings_range.peep_cm_h20 - lower_settings_range.peep_cm_h20);
    2254:	4d3d      	ldr	r5, [pc, #244]	; (234c <hmi_task+0x158>)
    2256:	e034      	b.n	22c2 <hmi_task+0xce>
				stage = STAGE_BPM;
    2258:	2201      	movs	r2, #1
    225a:	4b3d      	ldr	r3, [pc, #244]	; (2350 <hmi_task+0x15c>)
    225c:	701a      	strb	r2, [r3, #0]
	float knob_portion = get_input_potentiometer_portion();
    225e:	4b3d      	ldr	r3, [pc, #244]	; (2354 <hmi_task+0x160>)
    2260:	4798      	blx	r3
	switch (stage)
    2262:	4b3b      	ldr	r3, [pc, #236]	; (2350 <hmi_task+0x15c>)
    2264:	781b      	ldrb	r3, [r3, #0]
    2266:	2b01      	cmp	r3, #1
    2268:	d018      	beq.n	229c <hmi_task+0xa8>
    226a:	2b00      	cmp	r3, #0
    226c:	d020      	beq.n	22b0 <hmi_task+0xbc>
    226e:	2b02      	cmp	r3, #2
    2270:	d042      	beq.n	22f8 <hmi_task+0x104>
    2272:	2b03      	cmp	r3, #3
    2274:	d04b      	beq.n	230e <hmi_task+0x11a>
			stage = STAGE_NONE;
    2276:	2200      	movs	r2, #0
    2278:	4b35      	ldr	r3, [pc, #212]	; (2350 <hmi_task+0x15c>)
    227a:	701a      	strb	r2, [r3, #0]
    227c:	e018      	b.n	22b0 <hmi_task+0xbc>
				stage = STAGE_PEEP;
    227e:	2202      	movs	r2, #2
    2280:	4b33      	ldr	r3, [pc, #204]	; (2350 <hmi_task+0x15c>)
    2282:	701a      	strb	r2, [r3, #0]
    2284:	e7eb      	b.n	225e <hmi_task+0x6a>
				stage = STAGE_PIP;
    2286:	2203      	movs	r2, #3
    2288:	4b31      	ldr	r3, [pc, #196]	; (2350 <hmi_task+0x15c>)
    228a:	701a      	strb	r2, [r3, #0]
    228c:	e7e7      	b.n	225e <hmi_task+0x6a>
				update_settings(&settings_input);
    228e:	4832      	ldr	r0, [pc, #200]	; (2358 <hmi_task+0x164>)
    2290:	4b32      	ldr	r3, [pc, #200]	; (235c <hmi_task+0x168>)
    2292:	4798      	blx	r3
				stage = STAGE_NONE;
    2294:	2200      	movs	r2, #0
    2296:	4b2e      	ldr	r3, [pc, #184]	; (2350 <hmi_task+0x15c>)
    2298:	701a      	strb	r2, [r3, #0]
    229a:	e7e0      	b.n	225e <hmi_task+0x6a>
			knob_portion * (upper_settings_range.breath_per_min - lower_settings_range.breath_per_min);
    229c:	1c39      	adds	r1, r7, #0
    229e:	4b30      	ldr	r3, [pc, #192]	; (2360 <hmi_task+0x16c>)
    22a0:	4798      	blx	r3
			settings_input.breath_per_min = (int32_t) lower_settings_range.breath_per_min +
    22a2:	1c31      	adds	r1, r6, #0
    22a4:	4b2f      	ldr	r3, [pc, #188]	; (2364 <hmi_task+0x170>)
    22a6:	4798      	blx	r3
    22a8:	4b2f      	ldr	r3, [pc, #188]	; (2368 <hmi_task+0x174>)
    22aa:	4798      	blx	r3
    22ac:	4b2a      	ldr	r3, [pc, #168]	; (2358 <hmi_task+0x164>)
    22ae:	6118      	str	r0, [r3, #16]
	last_button_status = new_button_status;
    22b0:	4b2e      	ldr	r3, [pc, #184]	; (236c <hmi_task+0x178>)
    22b2:	701c      	strb	r4, [r3, #0]
		update_main_buffer(&settings_input, stage);
    22b4:	4b26      	ldr	r3, [pc, #152]	; (2350 <hmi_task+0x15c>)
    22b6:	7819      	ldrb	r1, [r3, #0]
    22b8:	4827      	ldr	r0, [pc, #156]	; (2358 <hmi_task+0x164>)
    22ba:	4b2d      	ldr	r3, [pc, #180]	; (2370 <hmi_task+0x17c>)
    22bc:	4798      	blx	r3
		update_alarm_buffer();
    22be:	4b2d      	ldr	r3, [pc, #180]	; (2374 <hmi_task+0x180>)
    22c0:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    22c2:	2114      	movs	r1, #20
    22c4:	a803      	add	r0, sp, #12
    22c6:	4b2c      	ldr	r3, [pc, #176]	; (2378 <hmi_task+0x184>)
    22c8:	4798      	blx	r3
	bool new_button_status = get_pushbutton_level();
    22ca:	4b2c      	ldr	r3, [pc, #176]	; (237c <hmi_task+0x188>)
    22cc:	4798      	blx	r3
    22ce:	0004      	movs	r4, r0
	if(!last_button_status && new_button_status)
    22d0:	4b26      	ldr	r3, [pc, #152]	; (236c <hmi_task+0x178>)
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d1c2      	bne.n	225e <hmi_task+0x6a>
    22d8:	2800      	cmp	r0, #0
    22da:	d0c0      	beq.n	225e <hmi_task+0x6a>
		switch (stage)
    22dc:	4b1c      	ldr	r3, [pc, #112]	; (2350 <hmi_task+0x15c>)
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	2b01      	cmp	r3, #1
    22e2:	d0cc      	beq.n	227e <hmi_task+0x8a>
    22e4:	2b00      	cmp	r3, #0
    22e6:	d0b7      	beq.n	2258 <hmi_task+0x64>
    22e8:	2b02      	cmp	r3, #2
    22ea:	d0cc      	beq.n	2286 <hmi_task+0x92>
    22ec:	2b03      	cmp	r3, #3
    22ee:	d0ce      	beq.n	228e <hmi_task+0x9a>
				stage = STAGE_NONE;
    22f0:	2200      	movs	r2, #0
    22f2:	4b17      	ldr	r3, [pc, #92]	; (2350 <hmi_task+0x15c>)
    22f4:	701a      	strb	r2, [r3, #0]
    22f6:	e7b2      	b.n	225e <hmi_task+0x6a>
			knob_portion * (upper_settings_range.peep_cm_h20 - lower_settings_range.peep_cm_h20);
    22f8:	1c29      	adds	r1, r5, #0
    22fa:	4b19      	ldr	r3, [pc, #100]	; (2360 <hmi_task+0x16c>)
    22fc:	4798      	blx	r3
			settings_input.peep_cm_h20 = (int32_t) lower_settings_range.peep_cm_h20 +
    22fe:	4920      	ldr	r1, [pc, #128]	; (2380 <hmi_task+0x18c>)
    2300:	4b18      	ldr	r3, [pc, #96]	; (2364 <hmi_task+0x170>)
    2302:	4798      	blx	r3
    2304:	4b18      	ldr	r3, [pc, #96]	; (2368 <hmi_task+0x174>)
    2306:	4798      	blx	r3
    2308:	4b13      	ldr	r3, [pc, #76]	; (2358 <hmi_task+0x164>)
    230a:	6098      	str	r0, [r3, #8]
    230c:	e7d0      	b.n	22b0 <hmi_task+0xbc>
			knob_portion * (upper_settings_range.pip_cm_h20 - lower_settings_range.pip_cm_h20);
    230e:	491d      	ldr	r1, [pc, #116]	; (2384 <hmi_task+0x190>)
    2310:	4b13      	ldr	r3, [pc, #76]	; (2360 <hmi_task+0x16c>)
    2312:	4798      	blx	r3
			settings_input.pip_cm_h20 = (int32_t) lower_settings_range.pip_cm_h20 +
    2314:	491c      	ldr	r1, [pc, #112]	; (2388 <hmi_task+0x194>)
    2316:	4b13      	ldr	r3, [pc, #76]	; (2364 <hmi_task+0x170>)
    2318:	4798      	blx	r3
    231a:	4b13      	ldr	r3, [pc, #76]	; (2368 <hmi_task+0x174>)
    231c:	4798      	blx	r3
    231e:	4b0e      	ldr	r3, [pc, #56]	; (2358 <hmi_task+0x164>)
    2320:	60d8      	str	r0, [r3, #12]
    2322:	e7c5      	b.n	22b0 <hmi_task+0xbc>
    2324:	00001d01 	.word	0x00001d01
    2328:	0000216d 	.word	0x0000216d
    232c:	000082dc 	.word	0x000082dc
    2330:	000036ed 	.word	0x000036ed
    2334:	00002ff9 	.word	0x00002ff9
    2338:	00003739 	.word	0x00003739
    233c:	0000215d 	.word	0x0000215d
    2340:	000082e8 	.word	0x000082e8
    2344:	42580000 	.word	0x42580000
    2348:	40c00000 	.word	0x40c00000
    234c:	41880000 	.word	0x41880000
    2350:	20005138 	.word	0x20005138
    2354:	00001651 	.word	0x00001651
    2358:	20005124 	.word	0x20005124
    235c:	00002149 	.word	0x00002149
    2360:	0000541d 	.word	0x0000541d
    2364:	00004d19 	.word	0x00004d19
    2368:	00005995 	.word	0x00005995
    236c:	20005120 	.word	0x20005120
    2370:	00001e0d 	.word	0x00001e0d
    2374:	00001ef1 	.word	0x00001ef1
    2378:	0000323d 	.word	0x0000323d
    237c:	000021e5 	.word	0x000021e5
    2380:	40400000 	.word	0x40400000
    2384:	41c80000 	.word	0x41c80000
    2388:	41200000 	.word	0x41200000

0000238c <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    238c:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    238e:	25fa      	movs	r5, #250	; 0xfa
    2390:	00ad      	lsls	r5, r5, #2
    2392:	4c02      	ldr	r4, [pc, #8]	; (239c <monitor_task+0x10>)
    2394:	0028      	movs	r0, r5
    2396:	47a0      	blx	r4
    2398:	e7fc      	b.n	2394 <monitor_task+0x8>
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	000032b9 	.word	0x000032b9

000023a0 <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    23a0:	b510      	push	{r4, lr}
    23a2:	b082      	sub	sp, #8
    23a4:	0002      	movs	r2, r0
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    23a6:	4b05      	ldr	r3, [pc, #20]	; (23bc <create_monitor_task+0x1c>)
    23a8:	9301      	str	r3, [sp, #4]
    23aa:	9100      	str	r1, [sp, #0]
    23ac:	2300      	movs	r3, #0
    23ae:	4904      	ldr	r1, [pc, #16]	; (23c0 <create_monitor_task+0x20>)
    23b0:	4804      	ldr	r0, [pc, #16]	; (23c4 <create_monitor_task+0x24>)
    23b2:	4c05      	ldr	r4, [pc, #20]	; (23c8 <create_monitor_task+0x28>)
    23b4:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    23b6:	b002      	add	sp, #8
    23b8:	bd10      	pop	{r4, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	2000513c 	.word	0x2000513c
    23c0:	000082f4 	.word	0x000082f4
    23c4:	0000238d 	.word	0x0000238d
    23c8:	00002d8d 	.word	0x00002d8d

000023cc <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    23cc:	b530      	push	{r4, r5, lr}
    23ce:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    23d0:	ab01      	add	r3, sp, #4
    23d2:	2264      	movs	r2, #100	; 0x64
    23d4:	9201      	str	r2, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    23d6:	4a2c      	ldr	r2, [pc, #176]	; (2488 <sensor_task+0xbc>)
    23d8:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    23da:	2200      	movs	r2, #0
    23dc:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    23de:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    23e0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    23e2:	2180      	movs	r1, #128	; 0x80
    23e4:	0389      	lsls	r1, r1, #14
    23e6:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    23e8:	2101      	movs	r1, #1
    23ea:	4249      	negs	r1, r1
    23ec:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    23ee:	8299      	strh	r1, [r3, #20]
	config->scl_low_timeout  = false;
    23f0:	3125      	adds	r1, #37	; 0x25
    23f2:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    23f4:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    23f6:	3108      	adds	r1, #8
    23f8:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    23fa:	3101      	adds	r1, #1
    23fc:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    23fe:	3101      	adds	r1, #1
    2400:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    2402:	32d7      	adds	r2, #215	; 0xd7
    2404:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    2406:	3ac1      	subs	r2, #193	; 0xc1
    2408:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    240a:	3201      	adds	r2, #1
    240c:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    240e:	4d1f      	ldr	r5, [pc, #124]	; (248c <sensor_task+0xc0>)
    2410:	4c1f      	ldr	r4, [pc, #124]	; (2490 <sensor_task+0xc4>)
    2412:	aa01      	add	r2, sp, #4
    2414:	491f      	ldr	r1, [pc, #124]	; (2494 <sensor_task+0xc8>)
    2416:	0028      	movs	r0, r5
    2418:	47a0      	blx	r4
    241a:	2800      	cmp	r0, #0
    241c:	d1f9      	bne.n	2412 <sensor_task+0x46>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    241e:	4b1b      	ldr	r3, [pc, #108]	; (248c <sensor_task+0xc0>)
    2420:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2422:	2307      	movs	r3, #7
    2424:	69e2      	ldr	r2, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2426:	4213      	tst	r3, r2
    2428:	d1fc      	bne.n	2424 <sensor_task+0x58>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    242a:	6823      	ldr	r3, [r4, #0]
    242c:	2202      	movs	r2, #2
    242e:	4313      	orrs	r3, r2
    2430:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2432:	4d16      	ldr	r5, [pc, #88]	; (248c <sensor_task+0xc0>)
    2434:	6828      	ldr	r0, [r5, #0]
    2436:	4b18      	ldr	r3, [pc, #96]	; (2498 <sensor_task+0xcc>)
    2438:	4798      	blx	r3
    243a:	231f      	movs	r3, #31
    243c:	4018      	ands	r0, r3
    243e:	3b1e      	subs	r3, #30
    2440:	4083      	lsls	r3, r0
    2442:	4a16      	ldr	r2, [pc, #88]	; (249c <sensor_task+0xd0>)
    2444:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2446:	88e9      	ldrh	r1, [r5, #6]
	uint32_t timeout_counter = 0;
    2448:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    244a:	2210      	movs	r2, #16
    244c:	e002      	b.n	2454 <sensor_task+0x88>
		timeout_counter++;
    244e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2450:	428b      	cmp	r3, r1
    2452:	d203      	bcs.n	245c <sensor_task+0x90>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2454:	8b60      	ldrh	r0, [r4, #26]
    2456:	4210      	tst	r0, r2
    2458:	d0f9      	beq.n	244e <sensor_task+0x82>
    245a:	e001      	b.n	2460 <sensor_task+0x94>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    245c:	2310      	movs	r3, #16
    245e:	8363      	strh	r3, [r4, #26]
	flow_sensor_power_on();
    2460:	4b0f      	ldr	r3, [pc, #60]	; (24a0 <sensor_task+0xd4>)
    2462:	4798      	blx	r3
	flow_sensor_init(&i2c_master_instance);
    2464:	4c09      	ldr	r4, [pc, #36]	; (248c <sensor_task+0xc0>)
    2466:	0020      	movs	r0, r4
    2468:	4b0e      	ldr	r3, [pc, #56]	; (24a4 <sensor_task+0xd8>)
    246a:	4798      	blx	r3
	adc_interface_init();
    246c:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <sensor_task+0xdc>)
    246e:	4798      	blx	r3
	UNUSED(pvParameters);

	sensor_hw_init();

	vTaskDelay(pdMS_TO_TICKS(10));
    2470:	200a      	movs	r0, #10
    2472:	4b0e      	ldr	r3, [pc, #56]	; (24ac <sensor_task+0xe0>)
    2474:	4798      	blx	r3
	flow_sensor_request_flow_slm(&i2c_master_instance); // first read is invalid
    2476:	0020      	movs	r0, r4
    2478:	4b0d      	ldr	r3, [pc, #52]	; (24b0 <sensor_task+0xe4>)
    247a:	4798      	blx	r3
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    247c:	25fa      	movs	r5, #250	; 0xfa
    247e:	00ad      	lsls	r5, r5, #2
    2480:	4c0a      	ldr	r4, [pc, #40]	; (24ac <sensor_task+0xe0>)
    2482:	0028      	movs	r0, r5
    2484:	47a0      	blx	r4
    2486:	e7fc      	b.n	2482 <sensor_task+0xb6>
    2488:	00000d48 	.word	0x00000d48
    248c:	20005140 	.word	0x20005140
    2490:	00000809 	.word	0x00000809
    2494:	42001400 	.word	0x42001400
    2498:	00003d71 	.word	0x00003d71
    249c:	e000e100 	.word	0xe000e100
    24a0:	00001af5 	.word	0x00001af5
    24a4:	00001ad5 	.word	0x00001ad5
    24a8:	00001351 	.word	0x00001351
    24ac:	000032b9 	.word	0x000032b9
    24b0:	00001b05 	.word	0x00001b05

000024b4 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    24b4:	b510      	push	{r4, lr}
    24b6:	b082      	sub	sp, #8
    24b8:	0002      	movs	r2, r0
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    24ba:	4b05      	ldr	r3, [pc, #20]	; (24d0 <create_sensor_task+0x1c>)
    24bc:	9301      	str	r3, [sp, #4]
    24be:	9100      	str	r1, [sp, #0]
    24c0:	2300      	movs	r3, #0
    24c2:	4904      	ldr	r1, [pc, #16]	; (24d4 <create_sensor_task+0x20>)
    24c4:	4804      	ldr	r0, [pc, #16]	; (24d8 <create_sensor_task+0x24>)
    24c6:	4c05      	ldr	r4, [pc, #20]	; (24dc <create_sensor_task+0x28>)
    24c8:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
    24ca:	b002      	add	sp, #8
    24cc:	bd10      	pop	{r4, pc}
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	20005168 	.word	0x20005168
    24d4:	000082fc 	.word	0x000082fc
    24d8:	000023cd 	.word	0x000023cd
    24dc:	00002d8d 	.word	0x00002d8d

000024e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    24e0:	0003      	movs	r3, r0
    24e2:	3308      	adds	r3, #8
    24e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    24e6:	2201      	movs	r2, #1
    24e8:	4252      	negs	r2, r2
    24ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    24ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    24ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    24f0:	2300      	movs	r3, #0
    24f2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    24f4:	4770      	bx	lr

000024f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    24f6:	2300      	movs	r3, #0
    24f8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    24fa:	4770      	bx	lr

000024fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    24fc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    24fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2500:	689a      	ldr	r2, [r3, #8]
    2502:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2504:	689a      	ldr	r2, [r3, #8]
    2506:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2508:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    250a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    250c:	6803      	ldr	r3, [r0, #0]
    250e:	3301      	adds	r3, #1
    2510:	6003      	str	r3, [r0, #0]
}
    2512:	4770      	bx	lr

00002514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2514:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2516:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2518:	0002      	movs	r2, r0
    251a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    251c:	1c63      	adds	r3, r4, #1
    251e:	d102      	bne.n	2526 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    2520:	6902      	ldr	r2, [r0, #16]
    2522:	e004      	b.n	252e <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2524:	001a      	movs	r2, r3
    2526:	6853      	ldr	r3, [r2, #4]
    2528:	681d      	ldr	r5, [r3, #0]
    252a:	42ac      	cmp	r4, r5
    252c:	d2fa      	bcs.n	2524 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    252e:	6853      	ldr	r3, [r2, #4]
    2530:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2532:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2534:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    2536:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2538:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    253a:	6803      	ldr	r3, [r0, #0]
    253c:	3301      	adds	r3, #1
    253e:	6003      	str	r3, [r0, #0]
}
    2540:	bd30      	pop	{r4, r5, pc}

00002542 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2542:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2544:	6842      	ldr	r2, [r0, #4]
    2546:	6881      	ldr	r1, [r0, #8]
    2548:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    254a:	6882      	ldr	r2, [r0, #8]
    254c:	6841      	ldr	r1, [r0, #4]
    254e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2550:	685a      	ldr	r2, [r3, #4]
    2552:	4290      	cmp	r0, r2
    2554:	d006      	beq.n	2564 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2556:	2200      	movs	r2, #0
    2558:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    255a:	681a      	ldr	r2, [r3, #0]
    255c:	3a01      	subs	r2, #1
    255e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2560:	6818      	ldr	r0, [r3, #0]
}
    2562:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2564:	6882      	ldr	r2, [r0, #8]
    2566:	605a      	str	r2, [r3, #4]
    2568:	e7f5      	b.n	2556 <uxListRemove+0x14>
	...

0000256c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    256c:	b510      	push	{r4, lr}
    256e:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2570:	4b03      	ldr	r3, [pc, #12]	; (2580 <prvIsQueueEmpty+0x14>)
    2572:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2574:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2576:	4b03      	ldr	r3, [pc, #12]	; (2584 <prvIsQueueEmpty+0x18>)
    2578:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    257a:	4260      	negs	r0, r4
    257c:	4160      	adcs	r0, r4

	return xReturn;
}
    257e:	bd10      	pop	{r4, pc}
    2580:	000010c1 	.word	0x000010c1
    2584:	000010d9 	.word	0x000010d9

00002588 <prvCopyDataToQueue>:
{
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	0004      	movs	r4, r0
    258c:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    258e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2590:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2592:	2a00      	cmp	r2, #0
    2594:	d10b      	bne.n	25ae <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    2596:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2598:	6823      	ldr	r3, [r4, #0]
    259a:	4283      	cmp	r3, r0
    259c:	d104      	bne.n	25a8 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    259e:	6860      	ldr	r0, [r4, #4]
    25a0:	4b16      	ldr	r3, [pc, #88]	; (25fc <prvCopyDataToQueue+0x74>)
    25a2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    25a4:	2300      	movs	r3, #0
    25a6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    25a8:	3501      	adds	r5, #1
    25aa:	63a5      	str	r5, [r4, #56]	; 0x38
}
    25ac:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    25ae:	2e00      	cmp	r6, #0
    25b0:	d10e      	bne.n	25d0 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    25b2:	6880      	ldr	r0, [r0, #8]
    25b4:	4b12      	ldr	r3, [pc, #72]	; (2600 <prvCopyDataToQueue+0x78>)
    25b6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    25b8:	68a3      	ldr	r3, [r4, #8]
    25ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
    25bc:	4694      	mov	ip, r2
    25be:	4463      	add	r3, ip
    25c0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    25c2:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    25c4:	6862      	ldr	r2, [r4, #4]
    25c6:	4293      	cmp	r3, r2
    25c8:	d3ee      	bcc.n	25a8 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    25ca:	6823      	ldr	r3, [r4, #0]
    25cc:	60a3      	str	r3, [r4, #8]
    25ce:	e7eb      	b.n	25a8 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25d0:	68c0      	ldr	r0, [r0, #12]
    25d2:	4b0b      	ldr	r3, [pc, #44]	; (2600 <prvCopyDataToQueue+0x78>)
    25d4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    25d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    25d8:	425b      	negs	r3, r3
    25da:	68e2      	ldr	r2, [r4, #12]
    25dc:	18d2      	adds	r2, r2, r3
    25de:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    25e0:	6821      	ldr	r1, [r4, #0]
    25e2:	428a      	cmp	r2, r1
    25e4:	d203      	bcs.n	25ee <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    25e6:	6862      	ldr	r2, [r4, #4]
    25e8:	4694      	mov	ip, r2
    25ea:	4463      	add	r3, ip
    25ec:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    25ee:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    25f0:	2e02      	cmp	r6, #2
    25f2:	d1d9      	bne.n	25a8 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    25f4:	4285      	cmp	r5, r0
    25f6:	d0d7      	beq.n	25a8 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    25f8:	3d01      	subs	r5, #1
    25fa:	e7d5      	b.n	25a8 <prvCopyDataToQueue+0x20>
    25fc:	0000356d 	.word	0x0000356d
    2600:	0000784d 	.word	0x0000784d

00002604 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2604:	b570      	push	{r4, r5, r6, lr}
    2606:	b082      	sub	sp, #8
    2608:	9001      	str	r0, [sp, #4]
    260a:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    260c:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    260e:	2c00      	cmp	r4, #0
    2610:	d005      	beq.n	261e <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2612:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    2614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2616:	4299      	cmp	r1, r3
    2618:	d303      	bcc.n	2622 <prvNotifyQueueSetContainer+0x1e>
    261a:	b672      	cpsid	i
    261c:	e7fe      	b.n	261c <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    261e:	b672      	cpsid	i
    2620:	e7fe      	b.n	2620 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    2624:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2626:	428b      	cmp	r3, r1
    2628:	d802      	bhi.n	2630 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    262a:	0030      	movs	r0, r6
    262c:	b002      	add	sp, #8
    262e:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    2630:	2345      	movs	r3, #69	; 0x45
    2632:	5ce5      	ldrb	r5, [r4, r3]
    2634:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2636:	a901      	add	r1, sp, #4
    2638:	0020      	movs	r0, r4
    263a:	4b0a      	ldr	r3, [pc, #40]	; (2664 <prvNotifyQueueSetContainer+0x60>)
    263c:	4798      	blx	r3
    263e:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    2640:	1c6b      	adds	r3, r5, #1
    2642:	d10a      	bne.n	265a <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2644:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2646:	2b00      	cmp	r3, #0
    2648:	d0ef      	beq.n	262a <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    264a:	0020      	movs	r0, r4
    264c:	3024      	adds	r0, #36	; 0x24
    264e:	4b06      	ldr	r3, [pc, #24]	; (2668 <prvNotifyQueueSetContainer+0x64>)
    2650:	4798      	blx	r3
    2652:	2800      	cmp	r0, #0
    2654:	d0e9      	beq.n	262a <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    2656:	2601      	movs	r6, #1
    2658:	e7e7      	b.n	262a <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    265a:	3501      	adds	r5, #1
    265c:	b26d      	sxtb	r5, r5
    265e:	2345      	movs	r3, #69	; 0x45
    2660:	54e5      	strb	r5, [r4, r3]
    2662:	e7e2      	b.n	262a <prvNotifyQueueSetContainer+0x26>
    2664:	00002589 	.word	0x00002589
    2668:	00003431 	.word	0x00003431

0000266c <prvCopyDataFromQueue>:
{
    266c:	b510      	push	{r4, lr}
    266e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2670:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2672:	2a00      	cmp	r2, #0
    2674:	d00b      	beq.n	268e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2676:	68c3      	ldr	r3, [r0, #12]
    2678:	189b      	adds	r3, r3, r2
    267a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    267c:	6841      	ldr	r1, [r0, #4]
    267e:	428b      	cmp	r3, r1
    2680:	d301      	bcc.n	2686 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2682:	6803      	ldr	r3, [r0, #0]
    2684:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2686:	68c1      	ldr	r1, [r0, #12]
    2688:	0020      	movs	r0, r4
    268a:	4b01      	ldr	r3, [pc, #4]	; (2690 <prvCopyDataFromQueue+0x24>)
    268c:	4798      	blx	r3
}
    268e:	bd10      	pop	{r4, pc}
    2690:	0000784d 	.word	0x0000784d

00002694 <prvUnlockQueue>:
{
    2694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2696:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    2698:	4b25      	ldr	r3, [pc, #148]	; (2730 <prvUnlockQueue+0x9c>)
    269a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    269c:	2345      	movs	r3, #69	; 0x45
    269e:	5cfc      	ldrb	r4, [r7, r3]
    26a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    26a2:	2c00      	cmp	r4, #0
    26a4:	dd1c      	ble.n	26e0 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    26a6:	4e23      	ldr	r6, [pc, #140]	; (2734 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    26a8:	4d23      	ldr	r5, [pc, #140]	; (2738 <prvUnlockQueue+0xa4>)
    26aa:	e00b      	b.n	26c4 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    26ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26ae:	2b00      	cmp	r3, #0
    26b0:	d016      	beq.n	26e0 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    26b2:	0038      	movs	r0, r7
    26b4:	3024      	adds	r0, #36	; 0x24
    26b6:	47a8      	blx	r5
    26b8:	2800      	cmp	r0, #0
    26ba:	d10e      	bne.n	26da <prvUnlockQueue+0x46>
    26bc:	3c01      	subs	r4, #1
    26be:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    26c0:	2c00      	cmp	r4, #0
    26c2:	d00d      	beq.n	26e0 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    26c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    26c6:	2b00      	cmp	r3, #0
    26c8:	d0f0      	beq.n	26ac <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    26ca:	2100      	movs	r1, #0
    26cc:	0038      	movs	r0, r7
    26ce:	47b0      	blx	r6
    26d0:	2800      	cmp	r0, #0
    26d2:	d0f3      	beq.n	26bc <prvUnlockQueue+0x28>
						vTaskMissedYield();
    26d4:	4b19      	ldr	r3, [pc, #100]	; (273c <prvUnlockQueue+0xa8>)
    26d6:	4798      	blx	r3
    26d8:	e7f0      	b.n	26bc <prvUnlockQueue+0x28>
							vTaskMissedYield();
    26da:	4b18      	ldr	r3, [pc, #96]	; (273c <prvUnlockQueue+0xa8>)
    26dc:	4798      	blx	r3
    26de:	e7ed      	b.n	26bc <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    26e0:	22ff      	movs	r2, #255	; 0xff
    26e2:	2345      	movs	r3, #69	; 0x45
    26e4:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    26e6:	4b16      	ldr	r3, [pc, #88]	; (2740 <prvUnlockQueue+0xac>)
    26e8:	4798      	blx	r3
	taskENTER_CRITICAL();
    26ea:	4b11      	ldr	r3, [pc, #68]	; (2730 <prvUnlockQueue+0x9c>)
    26ec:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    26ee:	2344      	movs	r3, #68	; 0x44
    26f0:	5cfc      	ldrb	r4, [r7, r3]
    26f2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    26f4:	2c00      	cmp	r4, #0
    26f6:	dd14      	ble.n	2722 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    26f8:	693b      	ldr	r3, [r7, #16]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d011      	beq.n	2722 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    26fe:	003d      	movs	r5, r7
    2700:	3510      	adds	r5, #16
    2702:	4e0d      	ldr	r6, [pc, #52]	; (2738 <prvUnlockQueue+0xa4>)
    2704:	e006      	b.n	2714 <prvUnlockQueue+0x80>
    2706:	3c01      	subs	r4, #1
    2708:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    270a:	2c00      	cmp	r4, #0
    270c:	d009      	beq.n	2722 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    270e:	693b      	ldr	r3, [r7, #16]
    2710:	2b00      	cmp	r3, #0
    2712:	d006      	beq.n	2722 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2714:	0028      	movs	r0, r5
    2716:	47b0      	blx	r6
    2718:	2800      	cmp	r0, #0
    271a:	d0f4      	beq.n	2706 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    271c:	4b07      	ldr	r3, [pc, #28]	; (273c <prvUnlockQueue+0xa8>)
    271e:	4798      	blx	r3
    2720:	e7f1      	b.n	2706 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    2722:	22ff      	movs	r2, #255	; 0xff
    2724:	2344      	movs	r3, #68	; 0x44
    2726:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    2728:	4b05      	ldr	r3, [pc, #20]	; (2740 <prvUnlockQueue+0xac>)
    272a:	4798      	blx	r3
}
    272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	000010c1 	.word	0x000010c1
    2734:	00002605 	.word	0x00002605
    2738:	00003431 	.word	0x00003431
    273c:	00003541 	.word	0x00003541
    2740:	000010d9 	.word	0x000010d9

00002744 <xQueueGenericReset>:
{
    2744:	b570      	push	{r4, r5, r6, lr}
    2746:	0004      	movs	r4, r0
    2748:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    274a:	2800      	cmp	r0, #0
    274c:	d021      	beq.n	2792 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    274e:	4b17      	ldr	r3, [pc, #92]	; (27ac <xQueueGenericReset+0x68>)
    2750:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2752:	6822      	ldr	r2, [r4, #0]
    2754:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2758:	434b      	muls	r3, r1
    275a:	18d0      	adds	r0, r2, r3
    275c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    275e:	2000      	movs	r0, #0
    2760:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2762:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2764:	1a5b      	subs	r3, r3, r1
    2766:	18d3      	adds	r3, r2, r3
    2768:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    276a:	23ff      	movs	r3, #255	; 0xff
    276c:	2244      	movs	r2, #68	; 0x44
    276e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    2770:	3201      	adds	r2, #1
    2772:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    2774:	2d00      	cmp	r5, #0
    2776:	d111      	bne.n	279c <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2778:	6923      	ldr	r3, [r4, #16]
    277a:	2b00      	cmp	r3, #0
    277c:	d005      	beq.n	278a <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    277e:	0020      	movs	r0, r4
    2780:	3010      	adds	r0, #16
    2782:	4b0b      	ldr	r3, [pc, #44]	; (27b0 <xQueueGenericReset+0x6c>)
    2784:	4798      	blx	r3
    2786:	2800      	cmp	r0, #0
    2788:	d105      	bne.n	2796 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    278a:	4b0a      	ldr	r3, [pc, #40]	; (27b4 <xQueueGenericReset+0x70>)
    278c:	4798      	blx	r3
}
    278e:	2001      	movs	r0, #1
    2790:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    2792:	b672      	cpsid	i
    2794:	e7fe      	b.n	2794 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    2796:	4b08      	ldr	r3, [pc, #32]	; (27b8 <xQueueGenericReset+0x74>)
    2798:	4798      	blx	r3
    279a:	e7f6      	b.n	278a <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    279c:	0020      	movs	r0, r4
    279e:	3010      	adds	r0, #16
    27a0:	4d06      	ldr	r5, [pc, #24]	; (27bc <xQueueGenericReset+0x78>)
    27a2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    27a4:	0020      	movs	r0, r4
    27a6:	3024      	adds	r0, #36	; 0x24
    27a8:	47a8      	blx	r5
    27aa:	e7ee      	b.n	278a <xQueueGenericReset+0x46>
    27ac:	000010c1 	.word	0x000010c1
    27b0:	00003431 	.word	0x00003431
    27b4:	000010d9 	.word	0x000010d9
    27b8:	000010a9 	.word	0x000010a9
    27bc:	000024e1 	.word	0x000024e1

000027c0 <xQueueGenericCreate>:
	{
    27c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27c2:	0006      	movs	r6, r0
    27c4:	000d      	movs	r5, r1
    27c6:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    27c8:	2800      	cmp	r0, #0
    27ca:	d101      	bne.n	27d0 <xQueueGenericCreate+0x10>
    27cc:	b672      	cpsid	i
    27ce:	e7fe      	b.n	27ce <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27d0:	0008      	movs	r0, r1
    27d2:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    27d4:	3054      	adds	r0, #84	; 0x54
    27d6:	4b0b      	ldr	r3, [pc, #44]	; (2804 <xQueueGenericCreate+0x44>)
    27d8:	4798      	blx	r3
    27da:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    27dc:	d010      	beq.n	2800 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    27de:	2d00      	cmp	r5, #0
    27e0:	d003      	beq.n	27ea <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    27e2:	0003      	movs	r3, r0
    27e4:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    27e6:	6003      	str	r3, [r0, #0]
    27e8:	e000      	b.n	27ec <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    27ea:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    27ec:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    27ee:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    27f0:	2101      	movs	r1, #1
    27f2:	0020      	movs	r0, r4
    27f4:	4b04      	ldr	r3, [pc, #16]	; (2808 <xQueueGenericCreate+0x48>)
    27f6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    27f8:	2350      	movs	r3, #80	; 0x50
    27fa:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    27fc:	2300      	movs	r3, #0
    27fe:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    2800:	0020      	movs	r0, r4
    2802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2804:	0000115d 	.word	0x0000115d
    2808:	00002745 	.word	0x00002745

0000280c <xQueueGenericSend>:
{
    280c:	b5f0      	push	{r4, r5, r6, r7, lr}
    280e:	46ce      	mov	lr, r9
    2810:	4647      	mov	r7, r8
    2812:	b580      	push	{r7, lr}
    2814:	b085      	sub	sp, #20
    2816:	0004      	movs	r4, r0
    2818:	000f      	movs	r7, r1
    281a:	9201      	str	r2, [sp, #4]
    281c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    281e:	2800      	cmp	r0, #0
    2820:	d00c      	beq.n	283c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2822:	2900      	cmp	r1, #0
    2824:	d00c      	beq.n	2840 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2826:	2d02      	cmp	r5, #2
    2828:	d00f      	beq.n	284a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    282a:	4b4e      	ldr	r3, [pc, #312]	; (2964 <xQueueGenericSend+0x158>)
    282c:	4798      	blx	r3
    282e:	2800      	cmp	r0, #0
    2830:	d110      	bne.n	2854 <xQueueGenericSend+0x48>
    2832:	9b01      	ldr	r3, [sp, #4]
    2834:	2b00      	cmp	r3, #0
    2836:	d011      	beq.n	285c <xQueueGenericSend+0x50>
    2838:	b672      	cpsid	i
    283a:	e7fe      	b.n	283a <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    283c:	b672      	cpsid	i
    283e:	e7fe      	b.n	283e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2840:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2842:	2b00      	cmp	r3, #0
    2844:	d0ef      	beq.n	2826 <xQueueGenericSend+0x1a>
    2846:	b672      	cpsid	i
    2848:	e7fe      	b.n	2848 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    284a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    284c:	2b01      	cmp	r3, #1
    284e:	d0ec      	beq.n	282a <xQueueGenericSend+0x1e>
    2850:	b672      	cpsid	i
    2852:	e7fe      	b.n	2852 <xQueueGenericSend+0x46>
    2854:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2856:	4b44      	ldr	r3, [pc, #272]	; (2968 <xQueueGenericSend+0x15c>)
    2858:	4698      	mov	r8, r3
    285a:	e04c      	b.n	28f6 <xQueueGenericSend+0xea>
    285c:	2600      	movs	r6, #0
    285e:	e7fa      	b.n	2856 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2860:	002a      	movs	r2, r5
    2862:	0039      	movs	r1, r7
    2864:	0020      	movs	r0, r4
    2866:	4b41      	ldr	r3, [pc, #260]	; (296c <xQueueGenericSend+0x160>)
    2868:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    286a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    286c:	2b00      	cmp	r3, #0
    286e:	d00f      	beq.n	2890 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2870:	0029      	movs	r1, r5
    2872:	0020      	movs	r0, r4
    2874:	4b3e      	ldr	r3, [pc, #248]	; (2970 <xQueueGenericSend+0x164>)
    2876:	4798      	blx	r3
    2878:	2800      	cmp	r0, #0
    287a:	d001      	beq.n	2880 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    287c:	4b3d      	ldr	r3, [pc, #244]	; (2974 <xQueueGenericSend+0x168>)
    287e:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2880:	4b3d      	ldr	r3, [pc, #244]	; (2978 <xQueueGenericSend+0x16c>)
    2882:	4798      	blx	r3
				return pdPASS;
    2884:	2001      	movs	r0, #1
}
    2886:	b005      	add	sp, #20
    2888:	bc0c      	pop	{r2, r3}
    288a:	4690      	mov	r8, r2
    288c:	4699      	mov	r9, r3
    288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2890:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2892:	2b00      	cmp	r3, #0
    2894:	d008      	beq.n	28a8 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2896:	0020      	movs	r0, r4
    2898:	3024      	adds	r0, #36	; 0x24
    289a:	4b38      	ldr	r3, [pc, #224]	; (297c <xQueueGenericSend+0x170>)
    289c:	4798      	blx	r3
    289e:	2800      	cmp	r0, #0
    28a0:	d0ee      	beq.n	2880 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    28a2:	4b34      	ldr	r3, [pc, #208]	; (2974 <xQueueGenericSend+0x168>)
    28a4:	4798      	blx	r3
    28a6:	e7eb      	b.n	2880 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    28a8:	2800      	cmp	r0, #0
    28aa:	d0e9      	beq.n	2880 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    28ac:	4b31      	ldr	r3, [pc, #196]	; (2974 <xQueueGenericSend+0x168>)
    28ae:	4798      	blx	r3
    28b0:	e7e6      	b.n	2880 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    28b2:	4b31      	ldr	r3, [pc, #196]	; (2978 <xQueueGenericSend+0x16c>)
    28b4:	4798      	blx	r3
					return errQUEUE_FULL;
    28b6:	2000      	movs	r0, #0
    28b8:	e7e5      	b.n	2886 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    28ba:	4b2f      	ldr	r3, [pc, #188]	; (2978 <xQueueGenericSend+0x16c>)
    28bc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    28be:	a901      	add	r1, sp, #4
    28c0:	a802      	add	r0, sp, #8
    28c2:	4b2f      	ldr	r3, [pc, #188]	; (2980 <xQueueGenericSend+0x174>)
    28c4:	4798      	blx	r3
    28c6:	2800      	cmp	r0, #0
    28c8:	d144      	bne.n	2954 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    28ca:	4b27      	ldr	r3, [pc, #156]	; (2968 <xQueueGenericSend+0x15c>)
    28cc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    28ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28d0:	4699      	mov	r9, r3
    28d2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    28d4:	4b28      	ldr	r3, [pc, #160]	; (2978 <xQueueGenericSend+0x16c>)
    28d6:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    28d8:	45b1      	cmp	r9, r6
    28da:	d135      	bne.n	2948 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    28dc:	0020      	movs	r0, r4
    28de:	3010      	adds	r0, #16
    28e0:	9901      	ldr	r1, [sp, #4]
    28e2:	4b28      	ldr	r3, [pc, #160]	; (2984 <xQueueGenericSend+0x178>)
    28e4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    28e6:	0020      	movs	r0, r4
    28e8:	4b27      	ldr	r3, [pc, #156]	; (2988 <xQueueGenericSend+0x17c>)
    28ea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    28ec:	4b27      	ldr	r3, [pc, #156]	; (298c <xQueueGenericSend+0x180>)
    28ee:	4798      	blx	r3
    28f0:	2800      	cmp	r0, #0
    28f2:	d026      	beq.n	2942 <xQueueGenericSend+0x136>
    28f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    28f6:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    28f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    28fc:	4293      	cmp	r3, r2
    28fe:	d3af      	bcc.n	2860 <xQueueGenericSend+0x54>
    2900:	2d02      	cmp	r5, #2
    2902:	d0ad      	beq.n	2860 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    2904:	9b01      	ldr	r3, [sp, #4]
    2906:	2b00      	cmp	r3, #0
    2908:	d0d3      	beq.n	28b2 <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    290a:	2e00      	cmp	r6, #0
    290c:	d102      	bne.n	2914 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    290e:	a802      	add	r0, sp, #8
    2910:	4b1f      	ldr	r3, [pc, #124]	; (2990 <xQueueGenericSend+0x184>)
    2912:	4798      	blx	r3
		taskEXIT_CRITICAL();
    2914:	4b18      	ldr	r3, [pc, #96]	; (2978 <xQueueGenericSend+0x16c>)
    2916:	4798      	blx	r3
		vTaskSuspendAll();
    2918:	4b1e      	ldr	r3, [pc, #120]	; (2994 <xQueueGenericSend+0x188>)
    291a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    291c:	4b12      	ldr	r3, [pc, #72]	; (2968 <xQueueGenericSend+0x15c>)
    291e:	4798      	blx	r3
    2920:	2344      	movs	r3, #68	; 0x44
    2922:	5ce3      	ldrb	r3, [r4, r3]
    2924:	b25b      	sxtb	r3, r3
    2926:	3301      	adds	r3, #1
    2928:	d102      	bne.n	2930 <xQueueGenericSend+0x124>
    292a:	2200      	movs	r2, #0
    292c:	2344      	movs	r3, #68	; 0x44
    292e:	54e2      	strb	r2, [r4, r3]
    2930:	2345      	movs	r3, #69	; 0x45
    2932:	5ce3      	ldrb	r3, [r4, r3]
    2934:	b25b      	sxtb	r3, r3
    2936:	3301      	adds	r3, #1
    2938:	d1bf      	bne.n	28ba <xQueueGenericSend+0xae>
    293a:	2200      	movs	r2, #0
    293c:	2345      	movs	r3, #69	; 0x45
    293e:	54e2      	strb	r2, [r4, r3]
    2940:	e7bb      	b.n	28ba <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    2942:	4b0c      	ldr	r3, [pc, #48]	; (2974 <xQueueGenericSend+0x168>)
    2944:	4798      	blx	r3
    2946:	e7d5      	b.n	28f4 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    2948:	0020      	movs	r0, r4
    294a:	4b0f      	ldr	r3, [pc, #60]	; (2988 <xQueueGenericSend+0x17c>)
    294c:	4798      	blx	r3
				( void ) xTaskResumeAll();
    294e:	4b0f      	ldr	r3, [pc, #60]	; (298c <xQueueGenericSend+0x180>)
    2950:	4798      	blx	r3
    2952:	e7cf      	b.n	28f4 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    2954:	0020      	movs	r0, r4
    2956:	4b0c      	ldr	r3, [pc, #48]	; (2988 <xQueueGenericSend+0x17c>)
    2958:	4798      	blx	r3
			( void ) xTaskResumeAll();
    295a:	4b0c      	ldr	r3, [pc, #48]	; (298c <xQueueGenericSend+0x180>)
    295c:	4798      	blx	r3
			return errQUEUE_FULL;
    295e:	2000      	movs	r0, #0
    2960:	e791      	b.n	2886 <xQueueGenericSend+0x7a>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	0000354d 	.word	0x0000354d
    2968:	000010c1 	.word	0x000010c1
    296c:	00002589 	.word	0x00002589
    2970:	00002605 	.word	0x00002605
    2974:	000010a9 	.word	0x000010a9
    2978:	000010d9 	.word	0x000010d9
    297c:	00003431 	.word	0x00003431
    2980:	000034d1 	.word	0x000034d1
    2984:	000033cd 	.word	0x000033cd
    2988:	00002695 	.word	0x00002695
    298c:	0000313d 	.word	0x0000313d
    2990:	000034b9 	.word	0x000034b9
    2994:	00002fe9 	.word	0x00002fe9

00002998 <xQueueGenericSendFromISR>:
{
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
    299a:	b083      	sub	sp, #12
    299c:	0004      	movs	r4, r0
    299e:	9101      	str	r1, [sp, #4]
    29a0:	0016      	movs	r6, r2
    29a2:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    29a4:	2800      	cmp	r0, #0
    29a6:	d012      	beq.n	29ce <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    29a8:	9b01      	ldr	r3, [sp, #4]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d011      	beq.n	29d2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    29ae:	2d02      	cmp	r5, #2
    29b0:	d014      	beq.n	29dc <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    29b2:	4b28      	ldr	r3, [pc, #160]	; (2a54 <xQueueGenericSendFromISR+0xbc>)
    29b4:	4798      	blx	r3
    29b6:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    29b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    29ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    29bc:	429a      	cmp	r2, r3
    29be:	d82f      	bhi.n	2a20 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    29c0:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    29c2:	9800      	ldr	r0, [sp, #0]
    29c4:	4b24      	ldr	r3, [pc, #144]	; (2a58 <xQueueGenericSendFromISR+0xc0>)
    29c6:	4798      	blx	r3
}
    29c8:	0028      	movs	r0, r5
    29ca:	b003      	add	sp, #12
    29cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    29ce:	b672      	cpsid	i
    29d0:	e7fe      	b.n	29d0 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    29d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    29d4:	2b00      	cmp	r3, #0
    29d6:	d0ea      	beq.n	29ae <xQueueGenericSendFromISR+0x16>
    29d8:	b672      	cpsid	i
    29da:	e7fe      	b.n	29da <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    29dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    29de:	2b01      	cmp	r3, #1
    29e0:	d01a      	beq.n	2a18 <xQueueGenericSendFromISR+0x80>
    29e2:	b672      	cpsid	i
    29e4:	e7fe      	b.n	29e4 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    29e8:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29ea:	2b00      	cmp	r3, #0
    29ec:	d0e9      	beq.n	29c2 <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29ee:	0020      	movs	r0, r4
    29f0:	3024      	adds	r0, #36	; 0x24
    29f2:	4b1a      	ldr	r3, [pc, #104]	; (2a5c <xQueueGenericSendFromISR+0xc4>)
    29f4:	4798      	blx	r3
    29f6:	2800      	cmp	r0, #0
    29f8:	d0e3      	beq.n	29c2 <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    29fa:	2e00      	cmp	r6, #0
    29fc:	d00a      	beq.n	2a14 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    29fe:	2301      	movs	r3, #1
    2a00:	6033      	str	r3, [r6, #0]
    2a02:	e7de      	b.n	29c2 <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2a04:	1c7b      	adds	r3, r7, #1
    2a06:	b25b      	sxtb	r3, r3
    2a08:	2245      	movs	r2, #69	; 0x45
    2a0a:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2a0c:	2501      	movs	r5, #1
    2a0e:	e7d8      	b.n	29c2 <xQueueGenericSendFromISR+0x2a>
    2a10:	2501      	movs	r5, #1
    2a12:	e7d6      	b.n	29c2 <xQueueGenericSendFromISR+0x2a>
    2a14:	2501      	movs	r5, #1
    2a16:	e7d4      	b.n	29c2 <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2a18:	4b0e      	ldr	r3, [pc, #56]	; (2a54 <xQueueGenericSendFromISR+0xbc>)
    2a1a:	4798      	blx	r3
    2a1c:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    2a20:	2345      	movs	r3, #69	; 0x45
    2a22:	5ce7      	ldrb	r7, [r4, r3]
    2a24:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2a26:	002a      	movs	r2, r5
    2a28:	9901      	ldr	r1, [sp, #4]
    2a2a:	0020      	movs	r0, r4
    2a2c:	4b0c      	ldr	r3, [pc, #48]	; (2a60 <xQueueGenericSendFromISR+0xc8>)
    2a2e:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    2a30:	1c7b      	adds	r3, r7, #1
    2a32:	d1e7      	bne.n	2a04 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    2a34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a36:	2b00      	cmp	r3, #0
    2a38:	d0d5      	beq.n	29e6 <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2a3a:	0029      	movs	r1, r5
    2a3c:	0020      	movs	r0, r4
    2a3e:	4b09      	ldr	r3, [pc, #36]	; (2a64 <xQueueGenericSendFromISR+0xcc>)
    2a40:	4798      	blx	r3
			xReturn = pdPASS;
    2a42:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2a44:	2800      	cmp	r0, #0
    2a46:	d0bc      	beq.n	29c2 <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    2a48:	2e00      	cmp	r6, #0
    2a4a:	d0e1      	beq.n	2a10 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2a4c:	2301      	movs	r3, #1
    2a4e:	6033      	str	r3, [r6, #0]
    2a50:	e7b7      	b.n	29c2 <xQueueGenericSendFromISR+0x2a>
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	000010f9 	.word	0x000010f9
    2a58:	00001101 	.word	0x00001101
    2a5c:	00003431 	.word	0x00003431
    2a60:	00002589 	.word	0x00002589
    2a64:	00002605 	.word	0x00002605

00002a68 <xQueueReceive>:
{
    2a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a6a:	46c6      	mov	lr, r8
    2a6c:	b500      	push	{lr}
    2a6e:	b084      	sub	sp, #16
    2a70:	0004      	movs	r4, r0
    2a72:	000f      	movs	r7, r1
    2a74:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    2a76:	2800      	cmp	r0, #0
    2a78:	d00a      	beq.n	2a90 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2a7a:	2900      	cmp	r1, #0
    2a7c:	d00a      	beq.n	2a94 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2a7e:	4b42      	ldr	r3, [pc, #264]	; (2b88 <xQueueReceive+0x120>)
    2a80:	4798      	blx	r3
    2a82:	2800      	cmp	r0, #0
    2a84:	d10b      	bne.n	2a9e <xQueueReceive+0x36>
    2a86:	9b01      	ldr	r3, [sp, #4]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d00c      	beq.n	2aa6 <xQueueReceive+0x3e>
    2a8c:	b672      	cpsid	i
    2a8e:	e7fe      	b.n	2a8e <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    2a90:	b672      	cpsid	i
    2a92:	e7fe      	b.n	2a92 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2a94:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2a96:	2b00      	cmp	r3, #0
    2a98:	d0f1      	beq.n	2a7e <xQueueReceive+0x16>
    2a9a:	b672      	cpsid	i
    2a9c:	e7fe      	b.n	2a9c <xQueueReceive+0x34>
    2a9e:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2aa0:	4b3a      	ldr	r3, [pc, #232]	; (2b8c <xQueueReceive+0x124>)
    2aa2:	4698      	mov	r8, r3
    2aa4:	e02f      	b.n	2b06 <xQueueReceive+0x9e>
    2aa6:	2600      	movs	r6, #0
    2aa8:	e7fa      	b.n	2aa0 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2aaa:	0039      	movs	r1, r7
    2aac:	0020      	movs	r0, r4
    2aae:	4b38      	ldr	r3, [pc, #224]	; (2b90 <xQueueReceive+0x128>)
    2ab0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2ab2:	3d01      	subs	r5, #1
    2ab4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ab6:	6923      	ldr	r3, [r4, #16]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d007      	beq.n	2acc <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2abc:	0020      	movs	r0, r4
    2abe:	3010      	adds	r0, #16
    2ac0:	4b34      	ldr	r3, [pc, #208]	; (2b94 <xQueueReceive+0x12c>)
    2ac2:	4798      	blx	r3
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d001      	beq.n	2acc <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    2ac8:	4b33      	ldr	r3, [pc, #204]	; (2b98 <xQueueReceive+0x130>)
    2aca:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2acc:	4b33      	ldr	r3, [pc, #204]	; (2b9c <xQueueReceive+0x134>)
    2ace:	4798      	blx	r3
				return pdPASS;
    2ad0:	2001      	movs	r0, #1
}
    2ad2:	b004      	add	sp, #16
    2ad4:	bc04      	pop	{r2}
    2ad6:	4690      	mov	r8, r2
    2ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    2ada:	4b30      	ldr	r3, [pc, #192]	; (2b9c <xQueueReceive+0x134>)
    2adc:	4798      	blx	r3
					return errQUEUE_EMPTY;
    2ade:	2000      	movs	r0, #0
    2ae0:	e7f7      	b.n	2ad2 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    2ae2:	a802      	add	r0, sp, #8
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <xQueueReceive+0x138>)
    2ae6:	4798      	blx	r3
    2ae8:	e016      	b.n	2b18 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    2aea:	2200      	movs	r2, #0
    2aec:	2344      	movs	r3, #68	; 0x44
    2aee:	54e2      	strb	r2, [r4, r3]
    2af0:	e01d      	b.n	2b2e <xQueueReceive+0xc6>
    2af2:	2200      	movs	r2, #0
    2af4:	2345      	movs	r3, #69	; 0x45
    2af6:	54e2      	strb	r2, [r4, r3]
    2af8:	e01e      	b.n	2b38 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    2afa:	0020      	movs	r0, r4
    2afc:	4b29      	ldr	r3, [pc, #164]	; (2ba4 <xQueueReceive+0x13c>)
    2afe:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2b00:	4b29      	ldr	r3, [pc, #164]	; (2ba8 <xQueueReceive+0x140>)
    2b02:	4798      	blx	r3
    2b04:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    2b06:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2b08:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2b0a:	2d00      	cmp	r5, #0
    2b0c:	d1cd      	bne.n	2aaa <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    2b0e:	9b01      	ldr	r3, [sp, #4]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d0e2      	beq.n	2ada <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    2b14:	2e00      	cmp	r6, #0
    2b16:	d0e4      	beq.n	2ae2 <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    2b18:	4b20      	ldr	r3, [pc, #128]	; (2b9c <xQueueReceive+0x134>)
    2b1a:	4798      	blx	r3
		vTaskSuspendAll();
    2b1c:	4b23      	ldr	r3, [pc, #140]	; (2bac <xQueueReceive+0x144>)
    2b1e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2b20:	4b1a      	ldr	r3, [pc, #104]	; (2b8c <xQueueReceive+0x124>)
    2b22:	4798      	blx	r3
    2b24:	2344      	movs	r3, #68	; 0x44
    2b26:	5ce3      	ldrb	r3, [r4, r3]
    2b28:	b25b      	sxtb	r3, r3
    2b2a:	3301      	adds	r3, #1
    2b2c:	d0dd      	beq.n	2aea <xQueueReceive+0x82>
    2b2e:	2345      	movs	r3, #69	; 0x45
    2b30:	5ce3      	ldrb	r3, [r4, r3]
    2b32:	b25b      	sxtb	r3, r3
    2b34:	3301      	adds	r3, #1
    2b36:	d0dc      	beq.n	2af2 <xQueueReceive+0x8a>
    2b38:	4b18      	ldr	r3, [pc, #96]	; (2b9c <xQueueReceive+0x134>)
    2b3a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2b3c:	a901      	add	r1, sp, #4
    2b3e:	a802      	add	r0, sp, #8
    2b40:	4b1b      	ldr	r3, [pc, #108]	; (2bb0 <xQueueReceive+0x148>)
    2b42:	4798      	blx	r3
    2b44:	2800      	cmp	r0, #0
    2b46:	d113      	bne.n	2b70 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b48:	0020      	movs	r0, r4
    2b4a:	4b1a      	ldr	r3, [pc, #104]	; (2bb4 <xQueueReceive+0x14c>)
    2b4c:	4798      	blx	r3
    2b4e:	2800      	cmp	r0, #0
    2b50:	d0d3      	beq.n	2afa <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2b52:	0020      	movs	r0, r4
    2b54:	3024      	adds	r0, #36	; 0x24
    2b56:	9901      	ldr	r1, [sp, #4]
    2b58:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <xQueueReceive+0x150>)
    2b5a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2b5c:	0020      	movs	r0, r4
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <xQueueReceive+0x13c>)
    2b60:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2b62:	4b11      	ldr	r3, [pc, #68]	; (2ba8 <xQueueReceive+0x140>)
    2b64:	4798      	blx	r3
    2b66:	2800      	cmp	r0, #0
    2b68:	d1cc      	bne.n	2b04 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    2b6a:	4b0b      	ldr	r3, [pc, #44]	; (2b98 <xQueueReceive+0x130>)
    2b6c:	4798      	blx	r3
    2b6e:	e7c9      	b.n	2b04 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    2b70:	0020      	movs	r0, r4
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <xQueueReceive+0x13c>)
    2b74:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <xQueueReceive+0x140>)
    2b78:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b7a:	0020      	movs	r0, r4
    2b7c:	4b0d      	ldr	r3, [pc, #52]	; (2bb4 <xQueueReceive+0x14c>)
    2b7e:	4798      	blx	r3
    2b80:	2800      	cmp	r0, #0
    2b82:	d0bf      	beq.n	2b04 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    2b84:	2000      	movs	r0, #0
    2b86:	e7a4      	b.n	2ad2 <xQueueReceive+0x6a>
    2b88:	0000354d 	.word	0x0000354d
    2b8c:	000010c1 	.word	0x000010c1
    2b90:	0000266d 	.word	0x0000266d
    2b94:	00003431 	.word	0x00003431
    2b98:	000010a9 	.word	0x000010a9
    2b9c:	000010d9 	.word	0x000010d9
    2ba0:	000034b9 	.word	0x000034b9
    2ba4:	00002695 	.word	0x00002695
    2ba8:	0000313d 	.word	0x0000313d
    2bac:	00002fe9 	.word	0x00002fe9
    2bb0:	000034d1 	.word	0x000034d1
    2bb4:	0000256d 	.word	0x0000256d
    2bb8:	000033cd 	.word	0x000033cd

00002bbc <vQueueAddToRegistry>:
	{
    2bbc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    2bbe:	4b0a      	ldr	r3, [pc, #40]	; (2be8 <vQueueAddToRegistry+0x2c>)
    2bc0:	681b      	ldr	r3, [r3, #0]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d009      	beq.n	2bda <vQueueAddToRegistry+0x1e>
    2bc6:	2301      	movs	r3, #1
    2bc8:	4c07      	ldr	r4, [pc, #28]	; (2be8 <vQueueAddToRegistry+0x2c>)
    2bca:	00da      	lsls	r2, r3, #3
    2bcc:	58a2      	ldr	r2, [r4, r2]
    2bce:	2a00      	cmp	r2, #0
    2bd0:	d004      	beq.n	2bdc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2bd2:	3301      	adds	r3, #1
    2bd4:	2b08      	cmp	r3, #8
    2bd6:	d1f8      	bne.n	2bca <vQueueAddToRegistry+0xe>
	}
    2bd8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2bda:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    2bdc:	4a02      	ldr	r2, [pc, #8]	; (2be8 <vQueueAddToRegistry+0x2c>)
    2bde:	00db      	lsls	r3, r3, #3
    2be0:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
    2be2:	18d3      	adds	r3, r2, r3
    2be4:	6058      	str	r0, [r3, #4]
				break;
    2be6:	e7f7      	b.n	2bd8 <vQueueAddToRegistry+0x1c>
    2be8:	200052fc 	.word	0x200052fc

00002bec <vQueueWaitForMessageRestricted>:
	{
    2bec:	b570      	push	{r4, r5, r6, lr}
    2bee:	0004      	movs	r4, r0
    2bf0:	000d      	movs	r5, r1
    2bf2:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    2bf4:	4b11      	ldr	r3, [pc, #68]	; (2c3c <vQueueWaitForMessageRestricted+0x50>)
    2bf6:	4798      	blx	r3
    2bf8:	2344      	movs	r3, #68	; 0x44
    2bfa:	5ce3      	ldrb	r3, [r4, r3]
    2bfc:	b25b      	sxtb	r3, r3
    2bfe:	3301      	adds	r3, #1
    2c00:	d00d      	beq.n	2c1e <vQueueWaitForMessageRestricted+0x32>
    2c02:	2345      	movs	r3, #69	; 0x45
    2c04:	5ce3      	ldrb	r3, [r4, r3]
    2c06:	b25b      	sxtb	r3, r3
    2c08:	3301      	adds	r3, #1
    2c0a:	d00c      	beq.n	2c26 <vQueueWaitForMessageRestricted+0x3a>
    2c0c:	4b0c      	ldr	r3, [pc, #48]	; (2c40 <vQueueWaitForMessageRestricted+0x54>)
    2c0e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c12:	2b00      	cmp	r3, #0
    2c14:	d00b      	beq.n	2c2e <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    2c16:	0020      	movs	r0, r4
    2c18:	4b0a      	ldr	r3, [pc, #40]	; (2c44 <vQueueWaitForMessageRestricted+0x58>)
    2c1a:	4798      	blx	r3
	}
    2c1c:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    2c1e:	2200      	movs	r2, #0
    2c20:	2344      	movs	r3, #68	; 0x44
    2c22:	54e2      	strb	r2, [r4, r3]
    2c24:	e7ed      	b.n	2c02 <vQueueWaitForMessageRestricted+0x16>
    2c26:	2200      	movs	r2, #0
    2c28:	2345      	movs	r3, #69	; 0x45
    2c2a:	54e2      	strb	r2, [r4, r3]
    2c2c:	e7ee      	b.n	2c0c <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2c2e:	0020      	movs	r0, r4
    2c30:	3024      	adds	r0, #36	; 0x24
    2c32:	0032      	movs	r2, r6
    2c34:	0029      	movs	r1, r5
    2c36:	4b04      	ldr	r3, [pc, #16]	; (2c48 <vQueueWaitForMessageRestricted+0x5c>)
    2c38:	4798      	blx	r3
    2c3a:	e7ec      	b.n	2c16 <vQueueWaitForMessageRestricted+0x2a>
    2c3c:	000010c1 	.word	0x000010c1
    2c40:	000010d9 	.word	0x000010d9
    2c44:	00002695 	.word	0x00002695
    2c48:	000033f9 	.word	0x000033f9

00002c4c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2c4c:	4b08      	ldr	r3, [pc, #32]	; (2c70 <prvResetNextTaskUnblockTime+0x24>)
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	2b00      	cmp	r3, #0
    2c54:	d007      	beq.n	2c66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2c56:	4b06      	ldr	r3, [pc, #24]	; (2c70 <prvResetNextTaskUnblockTime+0x24>)
    2c58:	681b      	ldr	r3, [r3, #0]
    2c5a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2c5c:	68db      	ldr	r3, [r3, #12]
    2c5e:	685a      	ldr	r2, [r3, #4]
    2c60:	4b04      	ldr	r3, [pc, #16]	; (2c74 <prvResetNextTaskUnblockTime+0x28>)
    2c62:	601a      	str	r2, [r3, #0]
	}
}
    2c64:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2c66:	2201      	movs	r2, #1
    2c68:	4252      	negs	r2, r2
    2c6a:	4b02      	ldr	r3, [pc, #8]	; (2c74 <prvResetNextTaskUnblockTime+0x28>)
    2c6c:	601a      	str	r2, [r3, #0]
    2c6e:	e7f9      	b.n	2c64 <prvResetNextTaskUnblockTime+0x18>
    2c70:	20005170 	.word	0x20005170
    2c74:	20005220 	.word	0x20005220

00002c78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2c78:	b570      	push	{r4, r5, r6, lr}
    2c7a:	0004      	movs	r4, r0
    2c7c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2c7e:	4b17      	ldr	r3, [pc, #92]	; (2cdc <prvAddCurrentTaskToDelayedList+0x64>)
    2c80:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2c82:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <prvAddCurrentTaskToDelayedList+0x68>)
    2c84:	6818      	ldr	r0, [r3, #0]
    2c86:	3004      	adds	r0, #4
    2c88:	4b16      	ldr	r3, [pc, #88]	; (2ce4 <prvAddCurrentTaskToDelayedList+0x6c>)
    2c8a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2c8c:	1c63      	adds	r3, r4, #1
    2c8e:	d013      	beq.n	2cb8 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2c90:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2c92:	4b13      	ldr	r3, [pc, #76]	; (2ce0 <prvAddCurrentTaskToDelayedList+0x68>)
    2c94:	681b      	ldr	r3, [r3, #0]
    2c96:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    2c98:	42a6      	cmp	r6, r4
    2c9a:	d816      	bhi.n	2cca <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2c9c:	4b12      	ldr	r3, [pc, #72]	; (2ce8 <prvAddCurrentTaskToDelayedList+0x70>)
    2c9e:	6818      	ldr	r0, [r3, #0]
    2ca0:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <prvAddCurrentTaskToDelayedList+0x68>)
    2ca2:	6819      	ldr	r1, [r3, #0]
    2ca4:	3104      	adds	r1, #4
    2ca6:	4b11      	ldr	r3, [pc, #68]	; (2cec <prvAddCurrentTaskToDelayedList+0x74>)
    2ca8:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2caa:	4b11      	ldr	r3, [pc, #68]	; (2cf0 <prvAddCurrentTaskToDelayedList+0x78>)
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	429c      	cmp	r4, r3
    2cb0:	d212      	bcs.n	2cd8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2cb2:	4b0f      	ldr	r3, [pc, #60]	; (2cf0 <prvAddCurrentTaskToDelayedList+0x78>)
    2cb4:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2cb6:	e00f      	b.n	2cd8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2cb8:	2d00      	cmp	r5, #0
    2cba:	d0e9      	beq.n	2c90 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2cbc:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <prvAddCurrentTaskToDelayedList+0x68>)
    2cbe:	6819      	ldr	r1, [r3, #0]
    2cc0:	3104      	adds	r1, #4
    2cc2:	480c      	ldr	r0, [pc, #48]	; (2cf4 <prvAddCurrentTaskToDelayedList+0x7c>)
    2cc4:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <prvAddCurrentTaskToDelayedList+0x80>)
    2cc6:	4798      	blx	r3
    2cc8:	e006      	b.n	2cd8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2cca:	4b0c      	ldr	r3, [pc, #48]	; (2cfc <prvAddCurrentTaskToDelayedList+0x84>)
    2ccc:	6818      	ldr	r0, [r3, #0]
    2cce:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <prvAddCurrentTaskToDelayedList+0x68>)
    2cd0:	6819      	ldr	r1, [r3, #0]
    2cd2:	3104      	adds	r1, #4
    2cd4:	4b05      	ldr	r3, [pc, #20]	; (2cec <prvAddCurrentTaskToDelayedList+0x74>)
    2cd6:	4798      	blx	r3
}
    2cd8:	bd70      	pop	{r4, r5, r6, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	20005268 	.word	0x20005268
    2ce0:	2000516c 	.word	0x2000516c
    2ce4:	00002543 	.word	0x00002543
    2ce8:	20005170 	.word	0x20005170
    2cec:	00002515 	.word	0x00002515
    2cf0:	20005220 	.word	0x20005220
    2cf4:	20005240 	.word	0x20005240
    2cf8:	000024fd 	.word	0x000024fd
    2cfc:	20005174 	.word	0x20005174

00002d00 <prvIdleTask>:
{
    2d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d02:	46d6      	mov	lr, sl
    2d04:	464f      	mov	r7, r9
    2d06:	4646      	mov	r6, r8
    2d08:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2d0a:	4b16      	ldr	r3, [pc, #88]	; (2d64 <prvIdleTask+0x64>)
    2d0c:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    2d0e:	4b16      	ldr	r3, [pc, #88]	; (2d68 <prvIdleTask+0x68>)
    2d10:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2d12:	4f16      	ldr	r7, [pc, #88]	; (2d6c <prvIdleTask+0x6c>)
    2d14:	e001      	b.n	2d1a <prvIdleTask+0x1a>
			vApplicationIdleHook();
    2d16:	4b16      	ldr	r3, [pc, #88]	; (2d70 <prvIdleTask+0x70>)
    2d18:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2d1a:	464b      	mov	r3, r9
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d018      	beq.n	2d54 <prvIdleTask+0x54>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2d22:	4b14      	ldr	r3, [pc, #80]	; (2d74 <prvIdleTask+0x74>)
    2d24:	469a      	mov	sl, r3
			taskENTER_CRITICAL();
    2d26:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2d28:	68fb      	ldr	r3, [r7, #12]
    2d2a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2d2c:	1d28      	adds	r0, r5, #4
    2d2e:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    2d30:	4a11      	ldr	r2, [pc, #68]	; (2d78 <prvIdleTask+0x78>)
    2d32:	6813      	ldr	r3, [r2, #0]
    2d34:	3b01      	subs	r3, #1
    2d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    2d38:	4c0a      	ldr	r4, [pc, #40]	; (2d64 <prvIdleTask+0x64>)
    2d3a:	6823      	ldr	r3, [r4, #0]
    2d3c:	3b01      	subs	r3, #1
    2d3e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    2d40:	4b0e      	ldr	r3, [pc, #56]	; (2d7c <prvIdleTask+0x7c>)
    2d42:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    2d44:	6b28      	ldr	r0, [r5, #48]	; 0x30
    2d46:	4e0e      	ldr	r6, [pc, #56]	; (2d80 <prvIdleTask+0x80>)
    2d48:	47b0      	blx	r6
			vPortFree( pxTCB );
    2d4a:	0028      	movs	r0, r5
    2d4c:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2d4e:	6823      	ldr	r3, [r4, #0]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d1e8      	bne.n	2d26 <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2d54:	4b0b      	ldr	r3, [pc, #44]	; (2d84 <prvIdleTask+0x84>)
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	2b01      	cmp	r3, #1
    2d5a:	d9dc      	bls.n	2d16 <prvIdleTask+0x16>
				taskYIELD();
    2d5c:	4b0a      	ldr	r3, [pc, #40]	; (2d88 <prvIdleTask+0x88>)
    2d5e:	4798      	blx	r3
    2d60:	e7d9      	b.n	2d16 <prvIdleTask+0x16>
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	200051e0 	.word	0x200051e0
    2d68:	000010c1 	.word	0x000010c1
    2d6c:	20005254 	.word	0x20005254
    2d70:	00004acd 	.word	0x00004acd
    2d74:	00002543 	.word	0x00002543
    2d78:	200051dc 	.word	0x200051dc
    2d7c:	000010d9 	.word	0x000010d9
    2d80:	00001289 	.word	0x00001289
    2d84:	20005178 	.word	0x20005178
    2d88:	000010a9 	.word	0x000010a9

00002d8c <xTaskCreate>:
	{
    2d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d8e:	46c6      	mov	lr, r8
    2d90:	b500      	push	{lr}
    2d92:	b084      	sub	sp, #16
    2d94:	9001      	str	r0, [sp, #4]
    2d96:	000d      	movs	r5, r1
    2d98:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2d9a:	0097      	lsls	r7, r2, #2
    2d9c:	0038      	movs	r0, r7
    2d9e:	4b5f      	ldr	r3, [pc, #380]	; (2f1c <xTaskCreate+0x190>)
    2da0:	4798      	blx	r3
    2da2:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    2da4:	d100      	bne.n	2da8 <xTaskCreate+0x1c>
    2da6:	e089      	b.n	2ebc <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    2da8:	2058      	movs	r0, #88	; 0x58
    2daa:	4b5c      	ldr	r3, [pc, #368]	; (2f1c <xTaskCreate+0x190>)
    2dac:	4798      	blx	r3
    2dae:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    2db0:	d100      	bne.n	2db4 <xTaskCreate+0x28>
    2db2:	e080      	b.n	2eb6 <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
    2db4:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    2db6:	003a      	movs	r2, r7
    2db8:	21a5      	movs	r1, #165	; 0xa5
    2dba:	0030      	movs	r0, r6
    2dbc:	4b58      	ldr	r3, [pc, #352]	; (2f20 <xTaskCreate+0x194>)
    2dbe:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2dc0:	1f3a      	subs	r2, r7, #4
    2dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2dc4:	469c      	mov	ip, r3
    2dc6:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2dc8:	2307      	movs	r3, #7
    2dca:	439a      	bics	r2, r3
    2dcc:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2dce:	782a      	ldrb	r2, [r5, #0]
    2dd0:	332d      	adds	r3, #45	; 0x2d
    2dd2:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    2dd4:	782b      	ldrb	r3, [r5, #0]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d00d      	beq.n	2df6 <xTaskCreate+0x6a>
    2dda:	3501      	adds	r5, #1
    2ddc:	0023      	movs	r3, r4
    2dde:	3335      	adds	r3, #53	; 0x35
    2de0:	0020      	movs	r0, r4
    2de2:	303e      	adds	r0, #62	; 0x3e
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2de4:	782a      	ldrb	r2, [r5, #0]
    2de6:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    2de8:	782a      	ldrb	r2, [r5, #0]
    2dea:	2a00      	cmp	r2, #0
    2dec:	d003      	beq.n	2df6 <xTaskCreate+0x6a>
    2dee:	3501      	adds	r5, #1
    2df0:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2df2:	4283      	cmp	r3, r0
    2df4:	d1f6      	bne.n	2de4 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2df6:	2200      	movs	r2, #0
    2df8:	233d      	movs	r3, #61	; 0x3d
    2dfa:	54e2      	strb	r2, [r4, r3]
    2dfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    2dfe:	2f04      	cmp	r7, #4
    2e00:	d900      	bls.n	2e04 <xTaskCreate+0x78>
    2e02:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    2e04:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    2e06:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    2e08:	2600      	movs	r6, #0
    2e0a:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2e0c:	1d23      	adds	r3, r4, #4
    2e0e:	9303      	str	r3, [sp, #12]
    2e10:	0018      	movs	r0, r3
    2e12:	4d44      	ldr	r5, [pc, #272]	; (2f24 <xTaskCreate+0x198>)
    2e14:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2e16:	0020      	movs	r0, r4
    2e18:	3018      	adds	r0, #24
    2e1a:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2e1c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e1e:	2305      	movs	r3, #5
    2e20:	1bdb      	subs	r3, r3, r7
    2e22:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2e24:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    2e26:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2e28:	2354      	movs	r3, #84	; 0x54
    2e2a:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2e2c:	9a02      	ldr	r2, [sp, #8]
    2e2e:	9901      	ldr	r1, [sp, #4]
    2e30:	4640      	mov	r0, r8
    2e32:	4b3d      	ldr	r3, [pc, #244]	; (2f28 <xTaskCreate+0x19c>)
    2e34:	4798      	blx	r3
    2e36:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    2e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d000      	beq.n	2e40 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2e3e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    2e40:	4b3a      	ldr	r3, [pc, #232]	; (2f2c <xTaskCreate+0x1a0>)
    2e42:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    2e44:	4a3a      	ldr	r2, [pc, #232]	; (2f30 <xTaskCreate+0x1a4>)
    2e46:	6813      	ldr	r3, [r2, #0]
    2e48:	3301      	adds	r3, #1
    2e4a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2e4c:	4b39      	ldr	r3, [pc, #228]	; (2f34 <xTaskCreate+0x1a8>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d036      	beq.n	2ec2 <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    2e54:	4b38      	ldr	r3, [pc, #224]	; (2f38 <xTaskCreate+0x1ac>)
    2e56:	681b      	ldr	r3, [r3, #0]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d107      	bne.n	2e6c <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2e5c:	4b35      	ldr	r3, [pc, #212]	; (2f34 <xTaskCreate+0x1a8>)
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e64:	4293      	cmp	r3, r2
    2e66:	d801      	bhi.n	2e6c <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    2e68:	4b32      	ldr	r3, [pc, #200]	; (2f34 <xTaskCreate+0x1a8>)
    2e6a:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    2e6c:	4a33      	ldr	r2, [pc, #204]	; (2f3c <xTaskCreate+0x1b0>)
    2e6e:	6813      	ldr	r3, [r2, #0]
    2e70:	3301      	adds	r3, #1
    2e72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    2e74:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
    2e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e78:	4a31      	ldr	r2, [pc, #196]	; (2f40 <xTaskCreate+0x1b4>)
    2e7a:	6812      	ldr	r2, [r2, #0]
    2e7c:	4293      	cmp	r3, r2
    2e7e:	d901      	bls.n	2e84 <xTaskCreate+0xf8>
    2e80:	4a2f      	ldr	r2, [pc, #188]	; (2f40 <xTaskCreate+0x1b4>)
    2e82:	6013      	str	r3, [r2, #0]
    2e84:	0098      	lsls	r0, r3, #2
    2e86:	18c0      	adds	r0, r0, r3
    2e88:	0080      	lsls	r0, r0, #2
    2e8a:	4b2e      	ldr	r3, [pc, #184]	; (2f44 <xTaskCreate+0x1b8>)
    2e8c:	1818      	adds	r0, r3, r0
    2e8e:	9903      	ldr	r1, [sp, #12]
    2e90:	4b2d      	ldr	r3, [pc, #180]	; (2f48 <xTaskCreate+0x1bc>)
    2e92:	4798      	blx	r3
	taskEXIT_CRITICAL();
    2e94:	4b2d      	ldr	r3, [pc, #180]	; (2f4c <xTaskCreate+0x1c0>)
    2e96:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    2e98:	4b27      	ldr	r3, [pc, #156]	; (2f38 <xTaskCreate+0x1ac>)
    2e9a:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    2e9c:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d005      	beq.n	2eae <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2ea2:	4b24      	ldr	r3, [pc, #144]	; (2f34 <xTaskCreate+0x1a8>)
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ea8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2eaa:	429a      	cmp	r2, r3
    2eac:	d331      	bcc.n	2f12 <xTaskCreate+0x186>
	}
    2eae:	b004      	add	sp, #16
    2eb0:	bc04      	pop	{r2}
    2eb2:	4690      	mov	r8, r2
    2eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    2eb6:	0030      	movs	r0, r6
    2eb8:	4b25      	ldr	r3, [pc, #148]	; (2f50 <xTaskCreate+0x1c4>)
    2eba:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2ebc:	2001      	movs	r0, #1
    2ebe:	4240      	negs	r0, r0
    2ec0:	e7f5      	b.n	2eae <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    2ec2:	4b1c      	ldr	r3, [pc, #112]	; (2f34 <xTaskCreate+0x1a8>)
    2ec4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2ec6:	6813      	ldr	r3, [r2, #0]
    2ec8:	2b01      	cmp	r3, #1
    2eca:	d1cf      	bne.n	2e6c <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2ecc:	4f1d      	ldr	r7, [pc, #116]	; (2f44 <xTaskCreate+0x1b8>)
    2ece:	0038      	movs	r0, r7
    2ed0:	4e20      	ldr	r6, [pc, #128]	; (2f54 <xTaskCreate+0x1c8>)
    2ed2:	47b0      	blx	r6
    2ed4:	0038      	movs	r0, r7
    2ed6:	3014      	adds	r0, #20
    2ed8:	47b0      	blx	r6
    2eda:	0038      	movs	r0, r7
    2edc:	3028      	adds	r0, #40	; 0x28
    2ede:	47b0      	blx	r6
    2ee0:	0038      	movs	r0, r7
    2ee2:	303c      	adds	r0, #60	; 0x3c
    2ee4:	47b0      	blx	r6
    2ee6:	0038      	movs	r0, r7
    2ee8:	3050      	adds	r0, #80	; 0x50
    2eea:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2eec:	4b1a      	ldr	r3, [pc, #104]	; (2f58 <xTaskCreate+0x1cc>)
    2eee:	4698      	mov	r8, r3
    2ef0:	0018      	movs	r0, r3
    2ef2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2ef4:	4f19      	ldr	r7, [pc, #100]	; (2f5c <xTaskCreate+0x1d0>)
    2ef6:	0038      	movs	r0, r7
    2ef8:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2efa:	4819      	ldr	r0, [pc, #100]	; (2f60 <xTaskCreate+0x1d4>)
    2efc:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    2efe:	4819      	ldr	r0, [pc, #100]	; (2f64 <xTaskCreate+0x1d8>)
    2f00:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    2f02:	4819      	ldr	r0, [pc, #100]	; (2f68 <xTaskCreate+0x1dc>)
    2f04:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    2f06:	4b19      	ldr	r3, [pc, #100]	; (2f6c <xTaskCreate+0x1e0>)
    2f08:	4642      	mov	r2, r8
    2f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2f0c:	4b18      	ldr	r3, [pc, #96]	; (2f70 <xTaskCreate+0x1e4>)
    2f0e:	601f      	str	r7, [r3, #0]
    2f10:	e7ac      	b.n	2e6c <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    2f12:	4b18      	ldr	r3, [pc, #96]	; (2f74 <xTaskCreate+0x1e8>)
    2f14:	4798      	blx	r3
			xReturn = pdPASS;
    2f16:	2001      	movs	r0, #1
    2f18:	e7c9      	b.n	2eae <xTaskCreate+0x122>
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	0000115d 	.word	0x0000115d
    2f20:	0000785f 	.word	0x0000785f
    2f24:	000024f7 	.word	0x000024f7
    2f28:	00001025 	.word	0x00001025
    2f2c:	000010c1 	.word	0x000010c1
    2f30:	200051dc 	.word	0x200051dc
    2f34:	2000516c 	.word	0x2000516c
    2f38:	2000523c 	.word	0x2000523c
    2f3c:	200051ec 	.word	0x200051ec
    2f40:	200051f0 	.word	0x200051f0
    2f44:	20005178 	.word	0x20005178
    2f48:	000024fd 	.word	0x000024fd
    2f4c:	000010d9 	.word	0x000010d9
    2f50:	00001289 	.word	0x00001289
    2f54:	000024e1 	.word	0x000024e1
    2f58:	200051f4 	.word	0x200051f4
    2f5c:	20005208 	.word	0x20005208
    2f60:	20005228 	.word	0x20005228
    2f64:	20005254 	.word	0x20005254
    2f68:	20005240 	.word	0x20005240
    2f6c:	20005170 	.word	0x20005170
    2f70:	20005174 	.word	0x20005174
    2f74:	000010a9 	.word	0x000010a9

00002f78 <vTaskStartScheduler>:
{
    2f78:	b510      	push	{r4, lr}
    2f7a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    2f7c:	4b11      	ldr	r3, [pc, #68]	; (2fc4 <vTaskStartScheduler+0x4c>)
    2f7e:	9301      	str	r3, [sp, #4]
    2f80:	2300      	movs	r3, #0
    2f82:	9300      	str	r3, [sp, #0]
    2f84:	2282      	movs	r2, #130	; 0x82
    2f86:	4910      	ldr	r1, [pc, #64]	; (2fc8 <vTaskStartScheduler+0x50>)
    2f88:	4810      	ldr	r0, [pc, #64]	; (2fcc <vTaskStartScheduler+0x54>)
    2f8a:	4c11      	ldr	r4, [pc, #68]	; (2fd0 <vTaskStartScheduler+0x58>)
    2f8c:	47a0      	blx	r4
		if( xReturn == pdPASS )
    2f8e:	2801      	cmp	r0, #1
    2f90:	d003      	beq.n	2f9a <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2f92:	1c43      	adds	r3, r0, #1
    2f94:	d013      	beq.n	2fbe <vTaskStartScheduler+0x46>
}
    2f96:	b002      	add	sp, #8
    2f98:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2f9a:	4b0e      	ldr	r3, [pc, #56]	; (2fd4 <vTaskStartScheduler+0x5c>)
    2f9c:	4798      	blx	r3
	if( xReturn == pdPASS )
    2f9e:	2801      	cmp	r0, #1
    2fa0:	d1f7      	bne.n	2f92 <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    2fa2:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2fa4:	2201      	movs	r2, #1
    2fa6:	4252      	negs	r2, r2
    2fa8:	4b0b      	ldr	r3, [pc, #44]	; (2fd8 <vTaskStartScheduler+0x60>)
    2faa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2fac:	3202      	adds	r2, #2
    2fae:	4b0b      	ldr	r3, [pc, #44]	; (2fdc <vTaskStartScheduler+0x64>)
    2fb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2fb2:	2200      	movs	r2, #0
    2fb4:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <vTaskStartScheduler+0x68>)
    2fb6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    2fb8:	4b0a      	ldr	r3, [pc, #40]	; (2fe4 <vTaskStartScheduler+0x6c>)
    2fba:	4798      	blx	r3
    2fbc:	e7eb      	b.n	2f96 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2fbe:	b672      	cpsid	i
    2fc0:	e7fe      	b.n	2fc0 <vTaskStartScheduler+0x48>
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	2000521c 	.word	0x2000521c
    2fc8:	00008304 	.word	0x00008304
    2fcc:	00002d01 	.word	0x00002d01
    2fd0:	00002d8d 	.word	0x00002d8d
    2fd4:	000036a1 	.word	0x000036a1
    2fd8:	20005220 	.word	0x20005220
    2fdc:	2000523c 	.word	0x2000523c
    2fe0:	20005268 	.word	0x20005268
    2fe4:	00001045 	.word	0x00001045

00002fe8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2fe8:	4a02      	ldr	r2, [pc, #8]	; (2ff4 <vTaskSuspendAll+0xc>)
    2fea:	6813      	ldr	r3, [r2, #0]
    2fec:	3301      	adds	r3, #1
    2fee:	6013      	str	r3, [r2, #0]
}
    2ff0:	4770      	bx	lr
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	200051e8 	.word	0x200051e8

00002ff8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2ff8:	4b01      	ldr	r3, [pc, #4]	; (3000 <xTaskGetTickCount+0x8>)
    2ffa:	6818      	ldr	r0, [r3, #0]
}
    2ffc:	4770      	bx	lr
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	20005268 	.word	0x20005268

00003004 <xTaskIncrementTick>:
{
    3004:	b5f0      	push	{r4, r5, r6, r7, lr}
    3006:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3008:	4b3d      	ldr	r3, [pc, #244]	; (3100 <xTaskIncrementTick+0xfc>)
    300a:	681b      	ldr	r3, [r3, #0]
    300c:	2b00      	cmp	r3, #0
    300e:	d000      	beq.n	3012 <xTaskIncrementTick+0xe>
    3010:	e06d      	b.n	30ee <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3012:	4b3c      	ldr	r3, [pc, #240]	; (3104 <xTaskIncrementTick+0x100>)
    3014:	681d      	ldr	r5, [r3, #0]
    3016:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    3018:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    301a:	2d00      	cmp	r5, #0
    301c:	d112      	bne.n	3044 <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    301e:	4b3a      	ldr	r3, [pc, #232]	; (3108 <xTaskIncrementTick+0x104>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	681b      	ldr	r3, [r3, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d001      	beq.n	302c <xTaskIncrementTick+0x28>
    3028:	b672      	cpsid	i
    302a:	e7fe      	b.n	302a <xTaskIncrementTick+0x26>
    302c:	4a36      	ldr	r2, [pc, #216]	; (3108 <xTaskIncrementTick+0x104>)
    302e:	6811      	ldr	r1, [r2, #0]
    3030:	4b36      	ldr	r3, [pc, #216]	; (310c <xTaskIncrementTick+0x108>)
    3032:	6818      	ldr	r0, [r3, #0]
    3034:	6010      	str	r0, [r2, #0]
    3036:	6019      	str	r1, [r3, #0]
    3038:	4a35      	ldr	r2, [pc, #212]	; (3110 <xTaskIncrementTick+0x10c>)
    303a:	6813      	ldr	r3, [r2, #0]
    303c:	3301      	adds	r3, #1
    303e:	6013      	str	r3, [r2, #0]
    3040:	4b34      	ldr	r3, [pc, #208]	; (3114 <xTaskIncrementTick+0x110>)
    3042:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    3044:	4b34      	ldr	r3, [pc, #208]	; (3118 <xTaskIncrementTick+0x114>)
    3046:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    3048:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    304a:	429d      	cmp	r5, r3
    304c:	d333      	bcc.n	30b6 <xTaskIncrementTick+0xb2>
    304e:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3050:	4f2d      	ldr	r7, [pc, #180]	; (3108 <xTaskIncrementTick+0x104>)
    3052:	683b      	ldr	r3, [r7, #0]
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	2b00      	cmp	r3, #0
    3058:	d029      	beq.n	30ae <xTaskIncrementTick+0xaa>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    305a:	4b2b      	ldr	r3, [pc, #172]	; (3108 <xTaskIncrementTick+0x104>)
    305c:	681b      	ldr	r3, [r3, #0]
    305e:	68db      	ldr	r3, [r3, #12]
    3060:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3062:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    3064:	429d      	cmp	r5, r3
    3066:	d33f      	bcc.n	30e8 <xTaskIncrementTick+0xe4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3068:	1d33      	adds	r3, r6, #4
    306a:	9301      	str	r3, [sp, #4]
    306c:	0018      	movs	r0, r3
    306e:	4b2b      	ldr	r3, [pc, #172]	; (311c <xTaskIncrementTick+0x118>)
    3070:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3072:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3074:	2b00      	cmp	r3, #0
    3076:	d003      	beq.n	3080 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3078:	0030      	movs	r0, r6
    307a:	3018      	adds	r0, #24
    307c:	4b27      	ldr	r3, [pc, #156]	; (311c <xTaskIncrementTick+0x118>)
    307e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3080:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3082:	4a27      	ldr	r2, [pc, #156]	; (3120 <xTaskIncrementTick+0x11c>)
    3084:	6812      	ldr	r2, [r2, #0]
    3086:	4293      	cmp	r3, r2
    3088:	d901      	bls.n	308e <xTaskIncrementTick+0x8a>
    308a:	4a25      	ldr	r2, [pc, #148]	; (3120 <xTaskIncrementTick+0x11c>)
    308c:	6013      	str	r3, [r2, #0]
    308e:	0098      	lsls	r0, r3, #2
    3090:	18c0      	adds	r0, r0, r3
    3092:	0080      	lsls	r0, r0, #2
    3094:	4b23      	ldr	r3, [pc, #140]	; (3124 <xTaskIncrementTick+0x120>)
    3096:	1818      	adds	r0, r3, r0
    3098:	9901      	ldr	r1, [sp, #4]
    309a:	4b23      	ldr	r3, [pc, #140]	; (3128 <xTaskIncrementTick+0x124>)
    309c:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    309e:	4b23      	ldr	r3, [pc, #140]	; (312c <xTaskIncrementTick+0x128>)
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    30a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30a6:	429a      	cmp	r2, r3
    30a8:	d3d3      	bcc.n	3052 <xTaskIncrementTick+0x4e>
							xSwitchRequired = pdTRUE;
    30aa:	2401      	movs	r4, #1
    30ac:	e7d1      	b.n	3052 <xTaskIncrementTick+0x4e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30ae:	2201      	movs	r2, #1
    30b0:	4252      	negs	r2, r2
    30b2:	4b19      	ldr	r3, [pc, #100]	; (3118 <xTaskIncrementTick+0x114>)
    30b4:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    30b6:	4b1d      	ldr	r3, [pc, #116]	; (312c <xTaskIncrementTick+0x128>)
    30b8:	681b      	ldr	r3, [r3, #0]
    30ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30bc:	0093      	lsls	r3, r2, #2
    30be:	189b      	adds	r3, r3, r2
    30c0:	009b      	lsls	r3, r3, #2
    30c2:	4a18      	ldr	r2, [pc, #96]	; (3124 <xTaskIncrementTick+0x120>)
    30c4:	589b      	ldr	r3, [r3, r2]
    30c6:	2b01      	cmp	r3, #1
    30c8:	d900      	bls.n	30cc <xTaskIncrementTick+0xc8>
				xSwitchRequired = pdTRUE;
    30ca:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    30cc:	4b18      	ldr	r3, [pc, #96]	; (3130 <xTaskIncrementTick+0x12c>)
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d101      	bne.n	30d8 <xTaskIncrementTick+0xd4>
				vApplicationTickHook();
    30d4:	4b17      	ldr	r3, [pc, #92]	; (3134 <xTaskIncrementTick+0x130>)
    30d6:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
    30d8:	4b17      	ldr	r3, [pc, #92]	; (3138 <xTaskIncrementTick+0x134>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	2b00      	cmp	r3, #0
    30de:	d000      	beq.n	30e2 <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
    30e0:	2401      	movs	r4, #1
}
    30e2:	0020      	movs	r0, r4
    30e4:	b003      	add	sp, #12
    30e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xNextTaskUnblockTime = xItemValue;
    30e8:	4a0b      	ldr	r2, [pc, #44]	; (3118 <xTaskIncrementTick+0x114>)
    30ea:	6013      	str	r3, [r2, #0]
						break;
    30ec:	e7e3      	b.n	30b6 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    30ee:	4a10      	ldr	r2, [pc, #64]	; (3130 <xTaskIncrementTick+0x12c>)
    30f0:	6813      	ldr	r3, [r2, #0]
    30f2:	3301      	adds	r3, #1
    30f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
    30f6:	4b0f      	ldr	r3, [pc, #60]	; (3134 <xTaskIncrementTick+0x130>)
    30f8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
    30fa:	2400      	movs	r4, #0
    30fc:	e7ec      	b.n	30d8 <xTaskIncrementTick+0xd4>
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	200051e8 	.word	0x200051e8
    3104:	20005268 	.word	0x20005268
    3108:	20005170 	.word	0x20005170
    310c:	20005174 	.word	0x20005174
    3110:	20005224 	.word	0x20005224
    3114:	00002c4d 	.word	0x00002c4d
    3118:	20005220 	.word	0x20005220
    311c:	00002543 	.word	0x00002543
    3120:	200051f0 	.word	0x200051f0
    3124:	20005178 	.word	0x20005178
    3128:	000024fd 	.word	0x000024fd
    312c:	2000516c 	.word	0x2000516c
    3130:	200051e4 	.word	0x200051e4
    3134:	00004ad9 	.word	0x00004ad9
    3138:	2000526c 	.word	0x2000526c

0000313c <xTaskResumeAll>:
{
    313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    313e:	4b30      	ldr	r3, [pc, #192]	; (3200 <xTaskResumeAll+0xc4>)
    3140:	681b      	ldr	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d101      	bne.n	314a <xTaskResumeAll+0xe>
    3146:	b672      	cpsid	i
    3148:	e7fe      	b.n	3148 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    314a:	4b2e      	ldr	r3, [pc, #184]	; (3204 <xTaskResumeAll+0xc8>)
    314c:	4798      	blx	r3
		--uxSchedulerSuspended;
    314e:	4b2c      	ldr	r3, [pc, #176]	; (3200 <xTaskResumeAll+0xc4>)
    3150:	681a      	ldr	r2, [r3, #0]
    3152:	3a01      	subs	r2, #1
    3154:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3156:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    3158:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    315a:	2b00      	cmp	r3, #0
    315c:	d103      	bne.n	3166 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    315e:	4b2a      	ldr	r3, [pc, #168]	; (3208 <xTaskResumeAll+0xcc>)
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	2b00      	cmp	r3, #0
    3164:	d103      	bne.n	316e <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    3166:	4b29      	ldr	r3, [pc, #164]	; (320c <xTaskResumeAll+0xd0>)
    3168:	4798      	blx	r3
}
    316a:	0020      	movs	r0, r4
    316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    316e:	4d28      	ldr	r5, [pc, #160]	; (3210 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3170:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3172:	682b      	ldr	r3, [r5, #0]
    3174:	2b00      	cmp	r3, #0
    3176:	d022      	beq.n	31be <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    317c:	0020      	movs	r0, r4
    317e:	3018      	adds	r0, #24
    3180:	4b24      	ldr	r3, [pc, #144]	; (3214 <xTaskResumeAll+0xd8>)
    3182:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3184:	1d26      	adds	r6, r4, #4
    3186:	0030      	movs	r0, r6
    3188:	4b22      	ldr	r3, [pc, #136]	; (3214 <xTaskResumeAll+0xd8>)
    318a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    318c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    318e:	4a22      	ldr	r2, [pc, #136]	; (3218 <xTaskResumeAll+0xdc>)
    3190:	6812      	ldr	r2, [r2, #0]
    3192:	4293      	cmp	r3, r2
    3194:	d901      	bls.n	319a <xTaskResumeAll+0x5e>
    3196:	4a20      	ldr	r2, [pc, #128]	; (3218 <xTaskResumeAll+0xdc>)
    3198:	6013      	str	r3, [r2, #0]
    319a:	0098      	lsls	r0, r3, #2
    319c:	18c0      	adds	r0, r0, r3
    319e:	0080      	lsls	r0, r0, #2
    31a0:	4b1e      	ldr	r3, [pc, #120]	; (321c <xTaskResumeAll+0xe0>)
    31a2:	1818      	adds	r0, r3, r0
    31a4:	0031      	movs	r1, r6
    31a6:	4b1e      	ldr	r3, [pc, #120]	; (3220 <xTaskResumeAll+0xe4>)
    31a8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    31aa:	4b1e      	ldr	r3, [pc, #120]	; (3224 <xTaskResumeAll+0xe8>)
    31ac:	681b      	ldr	r3, [r3, #0]
    31ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    31b2:	429a      	cmp	r2, r3
    31b4:	d3dd      	bcc.n	3172 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    31b6:	2201      	movs	r2, #1
    31b8:	4b1b      	ldr	r3, [pc, #108]	; (3228 <xTaskResumeAll+0xec>)
    31ba:	601a      	str	r2, [r3, #0]
    31bc:	e7d9      	b.n	3172 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    31be:	2c00      	cmp	r4, #0
    31c0:	d001      	beq.n	31c6 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    31c2:	4b1a      	ldr	r3, [pc, #104]	; (322c <xTaskResumeAll+0xf0>)
    31c4:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    31c6:	4b1a      	ldr	r3, [pc, #104]	; (3230 <xTaskResumeAll+0xf4>)
    31c8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    31ca:	2c00      	cmp	r4, #0
    31cc:	d00e      	beq.n	31ec <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    31ce:	4f19      	ldr	r7, [pc, #100]	; (3234 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    31d0:	4e15      	ldr	r6, [pc, #84]	; (3228 <xTaskResumeAll+0xec>)
    31d2:	2501      	movs	r5, #1
    31d4:	e002      	b.n	31dc <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    31d6:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    31d8:	2c00      	cmp	r4, #0
    31da:	d004      	beq.n	31e6 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    31dc:	47b8      	blx	r7
    31de:	2800      	cmp	r0, #0
    31e0:	d0f9      	beq.n	31d6 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    31e2:	6035      	str	r5, [r6, #0]
    31e4:	e7f7      	b.n	31d6 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    31e6:	2200      	movs	r2, #0
    31e8:	4b11      	ldr	r3, [pc, #68]	; (3230 <xTaskResumeAll+0xf4>)
    31ea:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    31ec:	4b0e      	ldr	r3, [pc, #56]	; (3228 <xTaskResumeAll+0xec>)
    31ee:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    31f0:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    31f2:	2b00      	cmp	r3, #0
    31f4:	d0b7      	beq.n	3166 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    31f6:	4b10      	ldr	r3, [pc, #64]	; (3238 <xTaskResumeAll+0xfc>)
    31f8:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    31fa:	3401      	adds	r4, #1
    31fc:	e7b3      	b.n	3166 <xTaskResumeAll+0x2a>
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	200051e8 	.word	0x200051e8
    3204:	000010c1 	.word	0x000010c1
    3208:	200051dc 	.word	0x200051dc
    320c:	000010d9 	.word	0x000010d9
    3210:	20005228 	.word	0x20005228
    3214:	00002543 	.word	0x00002543
    3218:	200051f0 	.word	0x200051f0
    321c:	20005178 	.word	0x20005178
    3220:	000024fd 	.word	0x000024fd
    3224:	2000516c 	.word	0x2000516c
    3228:	2000526c 	.word	0x2000526c
    322c:	00002c4d 	.word	0x00002c4d
    3230:	200051e4 	.word	0x200051e4
    3234:	00003005 	.word	0x00003005
    3238:	000010a9 	.word	0x000010a9

0000323c <vTaskDelayUntil>:
	{
    323c:	b570      	push	{r4, r5, r6, lr}
    323e:	0005      	movs	r5, r0
    3240:	000c      	movs	r4, r1
		configASSERT( pxPreviousWakeTime );
    3242:	2800      	cmp	r0, #0
    3244:	d003      	beq.n	324e <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
    3246:	2900      	cmp	r1, #0
    3248:	d103      	bne.n	3252 <vTaskDelayUntil+0x16>
    324a:	b672      	cpsid	i
    324c:	e7fe      	b.n	324c <vTaskDelayUntil+0x10>
		configASSERT( pxPreviousWakeTime );
    324e:	b672      	cpsid	i
    3250:	e7fe      	b.n	3250 <vTaskDelayUntil+0x14>
		configASSERT( uxSchedulerSuspended == 0 );
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <vTaskDelayUntil+0x64>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	2b00      	cmp	r3, #0
    3258:	d001      	beq.n	325e <vTaskDelayUntil+0x22>
    325a:	b672      	cpsid	i
    325c:	e7fe      	b.n	325c <vTaskDelayUntil+0x20>
		vTaskSuspendAll();
    325e:	4b11      	ldr	r3, [pc, #68]	; (32a4 <vTaskDelayUntil+0x68>)
    3260:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
    3262:	4b11      	ldr	r3, [pc, #68]	; (32a8 <vTaskDelayUntil+0x6c>)
    3264:	681b      	ldr	r3, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3266:	682a      	ldr	r2, [r5, #0]
    3268:	18a0      	adds	r0, r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
    326a:	4293      	cmp	r3, r2
    326c:	d20f      	bcs.n	328e <vTaskDelayUntil+0x52>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    326e:	4282      	cmp	r2, r0
    3270:	d911      	bls.n	3296 <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
    3272:	6028      	str	r0, [r5, #0]
			if( xShouldDelay != pdFALSE )
    3274:	4283      	cmp	r3, r0
    3276:	d203      	bcs.n	3280 <vTaskDelayUntil+0x44>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3278:	1ac0      	subs	r0, r0, r3
    327a:	2100      	movs	r1, #0
    327c:	4b0b      	ldr	r3, [pc, #44]	; (32ac <vTaskDelayUntil+0x70>)
    327e:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    3280:	4b0b      	ldr	r3, [pc, #44]	; (32b0 <vTaskDelayUntil+0x74>)
    3282:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    3284:	2800      	cmp	r0, #0
    3286:	d101      	bne.n	328c <vTaskDelayUntil+0x50>
			portYIELD_WITHIN_API();
    3288:	4b0a      	ldr	r3, [pc, #40]	; (32b4 <vTaskDelayUntil+0x78>)
    328a:	4798      	blx	r3
	}
    328c:	bd70      	pop	{r4, r5, r6, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    328e:	4282      	cmp	r2, r0
    3290:	d803      	bhi.n	329a <vTaskDelayUntil+0x5e>
    3292:	4283      	cmp	r3, r0
    3294:	d301      	bcc.n	329a <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
    3296:	6028      	str	r0, [r5, #0]
    3298:	e7f2      	b.n	3280 <vTaskDelayUntil+0x44>
    329a:	6028      	str	r0, [r5, #0]
    329c:	e7ec      	b.n	3278 <vTaskDelayUntil+0x3c>
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	200051e8 	.word	0x200051e8
    32a4:	00002fe9 	.word	0x00002fe9
    32a8:	20005268 	.word	0x20005268
    32ac:	00002c79 	.word	0x00002c79
    32b0:	0000313d 	.word	0x0000313d
    32b4:	000010a9 	.word	0x000010a9

000032b8 <vTaskDelay>:
	{
    32b8:	b510      	push	{r4, lr}
    32ba:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    32bc:	d00f      	beq.n	32de <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    32be:	4b09      	ldr	r3, [pc, #36]	; (32e4 <vTaskDelay+0x2c>)
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d001      	beq.n	32ca <vTaskDelay+0x12>
    32c6:	b672      	cpsid	i
    32c8:	e7fe      	b.n	32c8 <vTaskDelay+0x10>
			vTaskSuspendAll();
    32ca:	4b07      	ldr	r3, [pc, #28]	; (32e8 <vTaskDelay+0x30>)
    32cc:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    32ce:	2100      	movs	r1, #0
    32d0:	0020      	movs	r0, r4
    32d2:	4b06      	ldr	r3, [pc, #24]	; (32ec <vTaskDelay+0x34>)
    32d4:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    32d6:	4b06      	ldr	r3, [pc, #24]	; (32f0 <vTaskDelay+0x38>)
    32d8:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    32da:	2800      	cmp	r0, #0
    32dc:	d101      	bne.n	32e2 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    32de:	4b05      	ldr	r3, [pc, #20]	; (32f4 <vTaskDelay+0x3c>)
    32e0:	4798      	blx	r3
	}
    32e2:	bd10      	pop	{r4, pc}
    32e4:	200051e8 	.word	0x200051e8
    32e8:	00002fe9 	.word	0x00002fe9
    32ec:	00002c79 	.word	0x00002c79
    32f0:	0000313d 	.word	0x0000313d
    32f4:	000010a9 	.word	0x000010a9

000032f8 <vTaskSwitchContext>:
{
    32f8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    32fa:	4b2d      	ldr	r3, [pc, #180]	; (33b0 <vTaskSwitchContext+0xb8>)
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	2b00      	cmp	r3, #0
    3300:	d128      	bne.n	3354 <vTaskSwitchContext+0x5c>
		xYieldPending = pdFALSE;
    3302:	2200      	movs	r2, #0
    3304:	4b2b      	ldr	r3, [pc, #172]	; (33b4 <vTaskSwitchContext+0xbc>)
    3306:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    3308:	4b2b      	ldr	r3, [pc, #172]	; (33b8 <vTaskSwitchContext+0xc0>)
    330a:	681b      	ldr	r3, [r3, #0]
    330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    330e:	4a2b      	ldr	r2, [pc, #172]	; (33bc <vTaskSwitchContext+0xc4>)
    3310:	6819      	ldr	r1, [r3, #0]
    3312:	4291      	cmp	r1, r2
    3314:	d102      	bne.n	331c <vTaskSwitchContext+0x24>
    3316:	6859      	ldr	r1, [r3, #4]
    3318:	4291      	cmp	r1, r2
    331a:	d01f      	beq.n	335c <vTaskSwitchContext+0x64>
    331c:	4b26      	ldr	r3, [pc, #152]	; (33b8 <vTaskSwitchContext+0xc0>)
    331e:	6818      	ldr	r0, [r3, #0]
    3320:	6819      	ldr	r1, [r3, #0]
    3322:	3134      	adds	r1, #52	; 0x34
    3324:	4b26      	ldr	r3, [pc, #152]	; (33c0 <vTaskSwitchContext+0xc8>)
    3326:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3328:	4b26      	ldr	r3, [pc, #152]	; (33c4 <vTaskSwitchContext+0xcc>)
    332a:	681b      	ldr	r3, [r3, #0]
    332c:	009a      	lsls	r2, r3, #2
    332e:	18d2      	adds	r2, r2, r3
    3330:	0092      	lsls	r2, r2, #2
    3332:	4925      	ldr	r1, [pc, #148]	; (33c8 <vTaskSwitchContext+0xd0>)
    3334:	5852      	ldr	r2, [r2, r1]
    3336:	2a00      	cmp	r2, #0
    3338:	d117      	bne.n	336a <vTaskSwitchContext+0x72>
    333a:	2b00      	cmp	r3, #0
    333c:	d008      	beq.n	3350 <vTaskSwitchContext+0x58>
    333e:	3b01      	subs	r3, #1
    3340:	009a      	lsls	r2, r3, #2
    3342:	18d2      	adds	r2, r2, r3
    3344:	0092      	lsls	r2, r2, #2
    3346:	5852      	ldr	r2, [r2, r1]
    3348:	2a00      	cmp	r2, #0
    334a:	d10e      	bne.n	336a <vTaskSwitchContext+0x72>
    334c:	2b00      	cmp	r3, #0
    334e:	d1f6      	bne.n	333e <vTaskSwitchContext+0x46>
    3350:	b672      	cpsid	i
    3352:	e7fe      	b.n	3352 <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
    3354:	2201      	movs	r2, #1
    3356:	4b17      	ldr	r3, [pc, #92]	; (33b4 <vTaskSwitchContext+0xbc>)
    3358:	601a      	str	r2, [r3, #0]
}
    335a:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    335c:	6899      	ldr	r1, [r3, #8]
    335e:	4291      	cmp	r1, r2
    3360:	d1dc      	bne.n	331c <vTaskSwitchContext+0x24>
    3362:	68db      	ldr	r3, [r3, #12]
    3364:	4293      	cmp	r3, r2
    3366:	d1d9      	bne.n	331c <vTaskSwitchContext+0x24>
    3368:	e7de      	b.n	3328 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    336a:	4817      	ldr	r0, [pc, #92]	; (33c8 <vTaskSwitchContext+0xd0>)
    336c:	009a      	lsls	r2, r3, #2
    336e:	18d1      	adds	r1, r2, r3
    3370:	0089      	lsls	r1, r1, #2
    3372:	1841      	adds	r1, r0, r1
    3374:	684c      	ldr	r4, [r1, #4]
    3376:	6864      	ldr	r4, [r4, #4]
    3378:	604c      	str	r4, [r1, #4]
    337a:	18d2      	adds	r2, r2, r3
    337c:	0092      	lsls	r2, r2, #2
    337e:	3208      	adds	r2, #8
    3380:	1882      	adds	r2, r0, r2
    3382:	4294      	cmp	r4, r2
    3384:	d00b      	beq.n	339e <vTaskSwitchContext+0xa6>
    3386:	009a      	lsls	r2, r3, #2
    3388:	18d2      	adds	r2, r2, r3
    338a:	0092      	lsls	r2, r2, #2
    338c:	490e      	ldr	r1, [pc, #56]	; (33c8 <vTaskSwitchContext+0xd0>)
    338e:	188a      	adds	r2, r1, r2
    3390:	6852      	ldr	r2, [r2, #4]
    3392:	68d1      	ldr	r1, [r2, #12]
    3394:	4a08      	ldr	r2, [pc, #32]	; (33b8 <vTaskSwitchContext+0xc0>)
    3396:	6011      	str	r1, [r2, #0]
    3398:	4a0a      	ldr	r2, [pc, #40]	; (33c4 <vTaskSwitchContext+0xcc>)
    339a:	6013      	str	r3, [r2, #0]
}
    339c:	e7dd      	b.n	335a <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    339e:	6860      	ldr	r0, [r4, #4]
    33a0:	009a      	lsls	r2, r3, #2
    33a2:	18d2      	adds	r2, r2, r3
    33a4:	0092      	lsls	r2, r2, #2
    33a6:	4908      	ldr	r1, [pc, #32]	; (33c8 <vTaskSwitchContext+0xd0>)
    33a8:	188a      	adds	r2, r1, r2
    33aa:	6050      	str	r0, [r2, #4]
    33ac:	e7eb      	b.n	3386 <vTaskSwitchContext+0x8e>
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	200051e8 	.word	0x200051e8
    33b4:	2000526c 	.word	0x2000526c
    33b8:	2000516c 	.word	0x2000516c
    33bc:	a5a5a5a5 	.word	0xa5a5a5a5
    33c0:	00004adb 	.word	0x00004adb
    33c4:	200051f0 	.word	0x200051f0
    33c8:	20005178 	.word	0x20005178

000033cc <vTaskPlaceOnEventList>:
{
    33cc:	b510      	push	{r4, lr}
    33ce:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    33d0:	2800      	cmp	r0, #0
    33d2:	d101      	bne.n	33d8 <vTaskPlaceOnEventList+0xc>
    33d4:	b672      	cpsid	i
    33d6:	e7fe      	b.n	33d6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    33d8:	4b04      	ldr	r3, [pc, #16]	; (33ec <vTaskPlaceOnEventList+0x20>)
    33da:	6819      	ldr	r1, [r3, #0]
    33dc:	3118      	adds	r1, #24
    33de:	4b04      	ldr	r3, [pc, #16]	; (33f0 <vTaskPlaceOnEventList+0x24>)
    33e0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    33e2:	2101      	movs	r1, #1
    33e4:	0020      	movs	r0, r4
    33e6:	4b03      	ldr	r3, [pc, #12]	; (33f4 <vTaskPlaceOnEventList+0x28>)
    33e8:	4798      	blx	r3
}
    33ea:	bd10      	pop	{r4, pc}
    33ec:	2000516c 	.word	0x2000516c
    33f0:	00002515 	.word	0x00002515
    33f4:	00002c79 	.word	0x00002c79

000033f8 <vTaskPlaceOnEventListRestricted>:
	{
    33f8:	b570      	push	{r4, r5, r6, lr}
    33fa:	000c      	movs	r4, r1
    33fc:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    33fe:	2800      	cmp	r0, #0
    3400:	d00d      	beq.n	341e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3402:	4b08      	ldr	r3, [pc, #32]	; (3424 <vTaskPlaceOnEventListRestricted+0x2c>)
    3404:	6819      	ldr	r1, [r3, #0]
    3406:	3118      	adds	r1, #24
    3408:	4b07      	ldr	r3, [pc, #28]	; (3428 <vTaskPlaceOnEventListRestricted+0x30>)
    340a:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    340c:	2d00      	cmp	r5, #0
    340e:	d001      	beq.n	3414 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    3410:	2401      	movs	r4, #1
    3412:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3414:	0029      	movs	r1, r5
    3416:	0020      	movs	r0, r4
    3418:	4b04      	ldr	r3, [pc, #16]	; (342c <vTaskPlaceOnEventListRestricted+0x34>)
    341a:	4798      	blx	r3
	}
    341c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    341e:	b672      	cpsid	i
    3420:	e7fe      	b.n	3420 <vTaskPlaceOnEventListRestricted+0x28>
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	2000516c 	.word	0x2000516c
    3428:	000024fd 	.word	0x000024fd
    342c:	00002c79 	.word	0x00002c79

00003430 <xTaskRemoveFromEventList>:
{
    3430:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3432:	68c3      	ldr	r3, [r0, #12]
    3434:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    3436:	2c00      	cmp	r4, #0
    3438:	d027      	beq.n	348a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    343a:	0025      	movs	r5, r4
    343c:	3518      	adds	r5, #24
    343e:	0028      	movs	r0, r5
    3440:	4b15      	ldr	r3, [pc, #84]	; (3498 <xTaskRemoveFromEventList+0x68>)
    3442:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3444:	4b15      	ldr	r3, [pc, #84]	; (349c <xTaskRemoveFromEventList+0x6c>)
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	2b00      	cmp	r3, #0
    344a:	d120      	bne.n	348e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    344c:	1d25      	adds	r5, r4, #4
    344e:	0028      	movs	r0, r5
    3450:	4b11      	ldr	r3, [pc, #68]	; (3498 <xTaskRemoveFromEventList+0x68>)
    3452:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3456:	4a12      	ldr	r2, [pc, #72]	; (34a0 <xTaskRemoveFromEventList+0x70>)
    3458:	6812      	ldr	r2, [r2, #0]
    345a:	4293      	cmp	r3, r2
    345c:	d901      	bls.n	3462 <xTaskRemoveFromEventList+0x32>
    345e:	4a10      	ldr	r2, [pc, #64]	; (34a0 <xTaskRemoveFromEventList+0x70>)
    3460:	6013      	str	r3, [r2, #0]
    3462:	0098      	lsls	r0, r3, #2
    3464:	18c0      	adds	r0, r0, r3
    3466:	0080      	lsls	r0, r0, #2
    3468:	4b0e      	ldr	r3, [pc, #56]	; (34a4 <xTaskRemoveFromEventList+0x74>)
    346a:	1818      	adds	r0, r3, r0
    346c:	0029      	movs	r1, r5
    346e:	4b0e      	ldr	r3, [pc, #56]	; (34a8 <xTaskRemoveFromEventList+0x78>)
    3470:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3472:	4b0e      	ldr	r3, [pc, #56]	; (34ac <xTaskRemoveFromEventList+0x7c>)
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    347a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    347c:	429a      	cmp	r2, r3
    347e:	d903      	bls.n	3488 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    3480:	2201      	movs	r2, #1
    3482:	4b0b      	ldr	r3, [pc, #44]	; (34b0 <xTaskRemoveFromEventList+0x80>)
    3484:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    3486:	3001      	adds	r0, #1
}
    3488:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    348a:	b672      	cpsid	i
    348c:	e7fe      	b.n	348c <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    348e:	0029      	movs	r1, r5
    3490:	4808      	ldr	r0, [pc, #32]	; (34b4 <xTaskRemoveFromEventList+0x84>)
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <xTaskRemoveFromEventList+0x78>)
    3494:	4798      	blx	r3
    3496:	e7ec      	b.n	3472 <xTaskRemoveFromEventList+0x42>
    3498:	00002543 	.word	0x00002543
    349c:	200051e8 	.word	0x200051e8
    34a0:	200051f0 	.word	0x200051f0
    34a4:	20005178 	.word	0x20005178
    34a8:	000024fd 	.word	0x000024fd
    34ac:	2000516c 	.word	0x2000516c
    34b0:	2000526c 	.word	0x2000526c
    34b4:	20005228 	.word	0x20005228

000034b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    34b8:	4b03      	ldr	r3, [pc, #12]	; (34c8 <vTaskInternalSetTimeOutState+0x10>)
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    34be:	4b03      	ldr	r3, [pc, #12]	; (34cc <vTaskInternalSetTimeOutState+0x14>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	6043      	str	r3, [r0, #4]
}
    34c4:	4770      	bx	lr
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	20005224 	.word	0x20005224
    34cc:	20005268 	.word	0x20005268

000034d0 <xTaskCheckForTimeOut>:
{
    34d0:	b570      	push	{r4, r5, r6, lr}
    34d2:	0006      	movs	r6, r0
    34d4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    34d6:	2800      	cmp	r0, #0
    34d8:	d01b      	beq.n	3512 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    34da:	2900      	cmp	r1, #0
    34dc:	d01b      	beq.n	3516 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    34de:	4b13      	ldr	r3, [pc, #76]	; (352c <xTaskCheckForTimeOut+0x5c>)
    34e0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    34e2:	4b13      	ldr	r3, [pc, #76]	; (3530 <xTaskCheckForTimeOut+0x60>)
    34e4:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    34e6:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    34e8:	682b      	ldr	r3, [r5, #0]
    34ea:	1c58      	adds	r0, r3, #1
    34ec:	d01c      	beq.n	3528 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    34ee:	4811      	ldr	r0, [pc, #68]	; (3534 <xTaskCheckForTimeOut+0x64>)
    34f0:	6800      	ldr	r0, [r0, #0]
    34f2:	6834      	ldr	r4, [r6, #0]
    34f4:	4284      	cmp	r4, r0
    34f6:	d002      	beq.n	34fe <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    34f8:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    34fa:	428a      	cmp	r2, r1
    34fc:	d205      	bcs.n	350a <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    34fe:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3500:	429a      	cmp	r2, r3
    3502:	d30a      	bcc.n	351a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    3504:	2300      	movs	r3, #0
    3506:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    3508:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    350a:	4b0b      	ldr	r3, [pc, #44]	; (3538 <xTaskCheckForTimeOut+0x68>)
    350c:	4798      	blx	r3
}
    350e:	0020      	movs	r0, r4
    3510:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    3512:	b672      	cpsid	i
    3514:	e7fe      	b.n	3514 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    3516:	b672      	cpsid	i
    3518:	e7fe      	b.n	3518 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    351a:	1a9b      	subs	r3, r3, r2
    351c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    351e:	0030      	movs	r0, r6
    3520:	4b06      	ldr	r3, [pc, #24]	; (353c <xTaskCheckForTimeOut+0x6c>)
    3522:	4798      	blx	r3
			xReturn = pdFALSE;
    3524:	2400      	movs	r4, #0
    3526:	e7f0      	b.n	350a <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    3528:	2400      	movs	r4, #0
    352a:	e7ee      	b.n	350a <xTaskCheckForTimeOut+0x3a>
    352c:	000010c1 	.word	0x000010c1
    3530:	20005268 	.word	0x20005268
    3534:	20005224 	.word	0x20005224
    3538:	000010d9 	.word	0x000010d9
    353c:	000034b9 	.word	0x000034b9

00003540 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    3540:	2201      	movs	r2, #1
    3542:	4b01      	ldr	r3, [pc, #4]	; (3548 <vTaskMissedYield+0x8>)
    3544:	601a      	str	r2, [r3, #0]
}
    3546:	4770      	bx	lr
    3548:	2000526c 	.word	0x2000526c

0000354c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <xTaskGetSchedulerState+0x18>)
    354e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    3550:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    3552:	2b00      	cmp	r3, #0
    3554:	d004      	beq.n	3560 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3556:	4b04      	ldr	r3, [pc, #16]	; (3568 <xTaskGetSchedulerState+0x1c>)
    3558:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    355a:	4243      	negs	r3, r0
    355c:	4158      	adcs	r0, r3
    355e:	0040      	lsls	r0, r0, #1
	}
    3560:	4770      	bx	lr
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	2000523c 	.word	0x2000523c
    3568:	200051e8 	.word	0x200051e8

0000356c <xTaskPriorityDisinherit>:
	{
    356c:	b570      	push	{r4, r5, r6, lr}
    356e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    3570:	d02c      	beq.n	35cc <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    3572:	4b18      	ldr	r3, [pc, #96]	; (35d4 <xTaskPriorityDisinherit+0x68>)
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	4298      	cmp	r0, r3
    3578:	d001      	beq.n	357e <xTaskPriorityDisinherit+0x12>
    357a:	b672      	cpsid	i
    357c:	e7fe      	b.n	357c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    357e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    3580:	2b00      	cmp	r3, #0
    3582:	d101      	bne.n	3588 <xTaskPriorityDisinherit+0x1c>
    3584:	b672      	cpsid	i
    3586:	e7fe      	b.n	3586 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    3588:	3b01      	subs	r3, #1
    358a:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    358c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    358e:	6c81      	ldr	r1, [r0, #72]	; 0x48
    3590:	428a      	cmp	r2, r1
    3592:	d01d      	beq.n	35d0 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    3594:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3596:	2b00      	cmp	r3, #0
    3598:	d117      	bne.n	35ca <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    359a:	1d25      	adds	r5, r4, #4
    359c:	0028      	movs	r0, r5
    359e:	4b0e      	ldr	r3, [pc, #56]	; (35d8 <xTaskPriorityDisinherit+0x6c>)
    35a0:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    35a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    35a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35a6:	2205      	movs	r2, #5
    35a8:	1ad2      	subs	r2, r2, r3
    35aa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    35ac:	4a0b      	ldr	r2, [pc, #44]	; (35dc <xTaskPriorityDisinherit+0x70>)
    35ae:	6812      	ldr	r2, [r2, #0]
    35b0:	4293      	cmp	r3, r2
    35b2:	d901      	bls.n	35b8 <xTaskPriorityDisinherit+0x4c>
    35b4:	4a09      	ldr	r2, [pc, #36]	; (35dc <xTaskPriorityDisinherit+0x70>)
    35b6:	6013      	str	r3, [r2, #0]
    35b8:	009a      	lsls	r2, r3, #2
    35ba:	18d3      	adds	r3, r2, r3
    35bc:	009b      	lsls	r3, r3, #2
    35be:	4808      	ldr	r0, [pc, #32]	; (35e0 <xTaskPriorityDisinherit+0x74>)
    35c0:	18c0      	adds	r0, r0, r3
    35c2:	0029      	movs	r1, r5
    35c4:	4b07      	ldr	r3, [pc, #28]	; (35e4 <xTaskPriorityDisinherit+0x78>)
    35c6:	4798      	blx	r3
					xReturn = pdTRUE;
    35c8:	2001      	movs	r0, #1
	}
    35ca:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    35cc:	2000      	movs	r0, #0
    35ce:	e7fc      	b.n	35ca <xTaskPriorityDisinherit+0x5e>
    35d0:	2000      	movs	r0, #0
    35d2:	e7fa      	b.n	35ca <xTaskPriorityDisinherit+0x5e>
    35d4:	2000516c 	.word	0x2000516c
    35d8:	00002543 	.word	0x00002543
    35dc:	200051f0 	.word	0x200051f0
    35e0:	20005178 	.word	0x20005178
    35e4:	000024fd 	.word	0x000024fd

000035e8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    35e8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    35ea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    35ec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    35ee:	4291      	cmp	r1, r2
    35f0:	d80b      	bhi.n	360a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35f2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    35f4:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35f6:	6983      	ldr	r3, [r0, #24]
    35f8:	429a      	cmp	r2, r3
    35fa:	d211      	bcs.n	3620 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    35fc:	1d01      	adds	r1, r0, #4
    35fe:	4b09      	ldr	r3, [pc, #36]	; (3624 <prvInsertTimerInActiveList+0x3c>)
    3600:	6818      	ldr	r0, [r3, #0]
    3602:	4b09      	ldr	r3, [pc, #36]	; (3628 <prvInsertTimerInActiveList+0x40>)
    3604:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    3606:	2400      	movs	r4, #0
    3608:	e00a      	b.n	3620 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    360a:	429a      	cmp	r2, r3
    360c:	d202      	bcs.n	3614 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    360e:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3610:	4299      	cmp	r1, r3
    3612:	d205      	bcs.n	3620 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3614:	1d01      	adds	r1, r0, #4
    3616:	4b05      	ldr	r3, [pc, #20]	; (362c <prvInsertTimerInActiveList+0x44>)
    3618:	6818      	ldr	r0, [r3, #0]
    361a:	4b03      	ldr	r3, [pc, #12]	; (3628 <prvInsertTimerInActiveList+0x40>)
    361c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    361e:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    3620:	0020      	movs	r0, r4
    3622:	bd10      	pop	{r4, pc}
    3624:	20005274 	.word	0x20005274
    3628:	00002515 	.word	0x00002515
    362c:	20005270 	.word	0x20005270

00003630 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3630:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3632:	4b10      	ldr	r3, [pc, #64]	; (3674 <prvCheckForValidListAndQueue+0x44>)
    3634:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3636:	4b10      	ldr	r3, [pc, #64]	; (3678 <prvCheckForValidListAndQueue+0x48>)
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	2b00      	cmp	r3, #0
    363c:	d002      	beq.n	3644 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    363e:	4b0f      	ldr	r3, [pc, #60]	; (367c <prvCheckForValidListAndQueue+0x4c>)
    3640:	4798      	blx	r3
}
    3642:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    3644:	4d0e      	ldr	r5, [pc, #56]	; (3680 <prvCheckForValidListAndQueue+0x50>)
    3646:	0028      	movs	r0, r5
    3648:	4e0e      	ldr	r6, [pc, #56]	; (3684 <prvCheckForValidListAndQueue+0x54>)
    364a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    364c:	4c0e      	ldr	r4, [pc, #56]	; (3688 <prvCheckForValidListAndQueue+0x58>)
    364e:	0020      	movs	r0, r4
    3650:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    3652:	4b0e      	ldr	r3, [pc, #56]	; (368c <prvCheckForValidListAndQueue+0x5c>)
    3654:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3656:	4b0e      	ldr	r3, [pc, #56]	; (3690 <prvCheckForValidListAndQueue+0x60>)
    3658:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    365a:	2200      	movs	r2, #0
    365c:	2110      	movs	r1, #16
    365e:	2005      	movs	r0, #5
    3660:	4b0c      	ldr	r3, [pc, #48]	; (3694 <prvCheckForValidListAndQueue+0x64>)
    3662:	4798      	blx	r3
    3664:	4b04      	ldr	r3, [pc, #16]	; (3678 <prvCheckForValidListAndQueue+0x48>)
    3666:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
    3668:	2800      	cmp	r0, #0
    366a:	d0e8      	beq.n	363e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    366c:	490a      	ldr	r1, [pc, #40]	; (3698 <prvCheckForValidListAndQueue+0x68>)
    366e:	4b0b      	ldr	r3, [pc, #44]	; (369c <prvCheckForValidListAndQueue+0x6c>)
    3670:	4798      	blx	r3
    3672:	e7e4      	b.n	363e <prvCheckForValidListAndQueue+0xe>
    3674:	000010c1 	.word	0x000010c1
    3678:	200052a4 	.word	0x200052a4
    367c:	000010d9 	.word	0x000010d9
    3680:	20005278 	.word	0x20005278
    3684:	000024e1 	.word	0x000024e1
    3688:	2000528c 	.word	0x2000528c
    368c:	20005270 	.word	0x20005270
    3690:	20005274 	.word	0x20005274
    3694:	000027c1 	.word	0x000027c1
    3698:	00008334 	.word	0x00008334
    369c:	00002bbd 	.word	0x00002bbd

000036a0 <xTimerCreateTimerTask>:
{
    36a0:	b510      	push	{r4, lr}
    36a2:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    36a4:	4b0b      	ldr	r3, [pc, #44]	; (36d4 <xTimerCreateTimerTask+0x34>)
    36a6:	4798      	blx	r3
	if( xTimerQueue != NULL )
    36a8:	4b0b      	ldr	r3, [pc, #44]	; (36d8 <xTimerCreateTimerTask+0x38>)
    36aa:	681b      	ldr	r3, [r3, #0]
    36ac:	2b00      	cmp	r3, #0
    36ae:	d00e      	beq.n	36ce <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
    36b0:	4b0a      	ldr	r3, [pc, #40]	; (36dc <xTimerCreateTimerTask+0x3c>)
    36b2:	9301      	str	r3, [sp, #4]
    36b4:	2304      	movs	r3, #4
    36b6:	9300      	str	r3, [sp, #0]
    36b8:	2300      	movs	r3, #0
    36ba:	2282      	movs	r2, #130	; 0x82
    36bc:	0052      	lsls	r2, r2, #1
    36be:	4908      	ldr	r1, [pc, #32]	; (36e0 <xTimerCreateTimerTask+0x40>)
    36c0:	4808      	ldr	r0, [pc, #32]	; (36e4 <xTimerCreateTimerTask+0x44>)
    36c2:	4c09      	ldr	r4, [pc, #36]	; (36e8 <xTimerCreateTimerTask+0x48>)
    36c4:	47a0      	blx	r4
	configASSERT( xReturn );
    36c6:	2800      	cmp	r0, #0
    36c8:	d001      	beq.n	36ce <xTimerCreateTimerTask+0x2e>
}
    36ca:	b002      	add	sp, #8
    36cc:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    36ce:	b672      	cpsid	i
    36d0:	e7fe      	b.n	36d0 <xTimerCreateTimerTask+0x30>
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	00003631 	.word	0x00003631
    36d8:	200052a4 	.word	0x200052a4
    36dc:	200052a8 	.word	0x200052a8
    36e0:	0000833c 	.word	0x0000833c
    36e4:	0000385d 	.word	0x0000385d
    36e8:	00002d8d 	.word	0x00002d8d

000036ec <xTimerCreate>:
	{
    36ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ee:	46c6      	mov	lr, r8
    36f0:	b500      	push	{lr}
    36f2:	4680      	mov	r8, r0
    36f4:	000d      	movs	r5, r1
    36f6:	0017      	movs	r7, r2
    36f8:	001e      	movs	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    36fa:	202c      	movs	r0, #44	; 0x2c
    36fc:	4b0b      	ldr	r3, [pc, #44]	; (372c <xTimerCreate+0x40>)
    36fe:	4798      	blx	r3
    3700:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    3702:	d00f      	beq.n	3724 <xTimerCreate+0x38>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    3704:	2d00      	cmp	r5, #0
    3706:	d101      	bne.n	370c <xTimerCreate+0x20>
    3708:	b672      	cpsid	i
    370a:	e7fe      	b.n	370a <xTimerCreate+0x1e>
		prvCheckForValidListAndQueue();
    370c:	4b08      	ldr	r3, [pc, #32]	; (3730 <xTimerCreate+0x44>)
    370e:	4798      	blx	r3
		pxNewTimer->pcTimerName = pcTimerName;
    3710:	4643      	mov	r3, r8
    3712:	6023      	str	r3, [r4, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    3714:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    3716:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    3718:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    371a:	9b06      	ldr	r3, [sp, #24]
    371c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    371e:	1d20      	adds	r0, r4, #4
    3720:	4b04      	ldr	r3, [pc, #16]	; (3734 <xTimerCreate+0x48>)
    3722:	4798      	blx	r3
	}
    3724:	0020      	movs	r0, r4
    3726:	bc04      	pop	{r2}
    3728:	4690      	mov	r8, r2
    372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372c:	0000115d 	.word	0x0000115d
    3730:	00003631 	.word	0x00003631
    3734:	000024f7 	.word	0x000024f7

00003738 <xTimerGenericCommand>:
{
    3738:	b530      	push	{r4, r5, lr}
    373a:	b085      	sub	sp, #20
    373c:	0004      	movs	r4, r0
    373e:	001d      	movs	r5, r3
	configASSERT( xTimer );
    3740:	2800      	cmp	r0, #0
    3742:	d014      	beq.n	376e <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    3744:	4b13      	ldr	r3, [pc, #76]	; (3794 <xTimerGenericCommand+0x5c>)
    3746:	6818      	ldr	r0, [r3, #0]
    3748:	2800      	cmp	r0, #0
    374a:	d021      	beq.n	3790 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    374c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    374e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3750:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3752:	2905      	cmp	r1, #5
    3754:	dc15      	bgt.n	3782 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3756:	4b10      	ldr	r3, [pc, #64]	; (3798 <xTimerGenericCommand+0x60>)
    3758:	4798      	blx	r3
    375a:	2802      	cmp	r0, #2
    375c:	d009      	beq.n	3772 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    375e:	4b0d      	ldr	r3, [pc, #52]	; (3794 <xTimerGenericCommand+0x5c>)
    3760:	6818      	ldr	r0, [r3, #0]
    3762:	2300      	movs	r3, #0
    3764:	2200      	movs	r2, #0
    3766:	4669      	mov	r1, sp
    3768:	4c0c      	ldr	r4, [pc, #48]	; (379c <xTimerGenericCommand+0x64>)
    376a:	47a0      	blx	r4
    376c:	e00e      	b.n	378c <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    376e:	b672      	cpsid	i
    3770:	e7fe      	b.n	3770 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3772:	4b08      	ldr	r3, [pc, #32]	; (3794 <xTimerGenericCommand+0x5c>)
    3774:	6818      	ldr	r0, [r3, #0]
    3776:	2300      	movs	r3, #0
    3778:	9a08      	ldr	r2, [sp, #32]
    377a:	4669      	mov	r1, sp
    377c:	4c07      	ldr	r4, [pc, #28]	; (379c <xTimerGenericCommand+0x64>)
    377e:	47a0      	blx	r4
    3780:	e004      	b.n	378c <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3782:	2300      	movs	r3, #0
    3784:	002a      	movs	r2, r5
    3786:	4669      	mov	r1, sp
    3788:	4c05      	ldr	r4, [pc, #20]	; (37a0 <xTimerGenericCommand+0x68>)
    378a:	47a0      	blx	r4
}
    378c:	b005      	add	sp, #20
    378e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    3790:	2000      	movs	r0, #0
	return xReturn;
    3792:	e7fb      	b.n	378c <xTimerGenericCommand+0x54>
    3794:	200052a4 	.word	0x200052a4
    3798:	0000354d 	.word	0x0000354d
    379c:	0000280d 	.word	0x0000280d
    37a0:	00002999 	.word	0x00002999

000037a4 <prvSampleTimeNow>:
{
    37a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37a6:	46d6      	mov	lr, sl
    37a8:	464f      	mov	r7, r9
    37aa:	4646      	mov	r6, r8
    37ac:	b5c0      	push	{r6, r7, lr}
    37ae:	b082      	sub	sp, #8
    37b0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    37b2:	4b23      	ldr	r3, [pc, #140]	; (3840 <prvSampleTimeNow+0x9c>)
    37b4:	4798      	blx	r3
    37b6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    37b8:	4b22      	ldr	r3, [pc, #136]	; (3844 <prvSampleTimeNow+0xa0>)
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	4298      	cmp	r0, r3
    37be:	d317      	bcc.n	37f0 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    37c0:	2300      	movs	r3, #0
    37c2:	4642      	mov	r2, r8
    37c4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    37c6:	4b1f      	ldr	r3, [pc, #124]	; (3844 <prvSampleTimeNow+0xa0>)
    37c8:	4652      	mov	r2, sl
    37ca:	601a      	str	r2, [r3, #0]
}
    37cc:	4650      	mov	r0, sl
    37ce:	b002      	add	sp, #8
    37d0:	bc1c      	pop	{r2, r3, r4}
    37d2:	4690      	mov	r8, r2
    37d4:	4699      	mov	r9, r3
    37d6:	46a2      	mov	sl, r4
    37d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    37da:	2300      	movs	r3, #0
    37dc:	9300      	str	r3, [sp, #0]
    37de:	003a      	movs	r2, r7
    37e0:	2100      	movs	r1, #0
    37e2:	0020      	movs	r0, r4
    37e4:	4c18      	ldr	r4, [pc, #96]	; (3848 <prvSampleTimeNow+0xa4>)
    37e6:	47a0      	blx	r4
				configASSERT( xResult );
    37e8:	2800      	cmp	r0, #0
    37ea:	d104      	bne.n	37f6 <prvSampleTimeNow+0x52>
    37ec:	b672      	cpsid	i
    37ee:	e7fe      	b.n	37ee <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37f0:	4d16      	ldr	r5, [pc, #88]	; (384c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37f2:	4b17      	ldr	r3, [pc, #92]	; (3850 <prvSampleTimeNow+0xac>)
    37f4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37f6:	682b      	ldr	r3, [r5, #0]
    37f8:	681a      	ldr	r2, [r3, #0]
    37fa:	2a00      	cmp	r2, #0
    37fc:	d017      	beq.n	382e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37fe:	68db      	ldr	r3, [r3, #12]
    3800:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3802:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3804:	1d26      	adds	r6, r4, #4
    3806:	0030      	movs	r0, r6
    3808:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    380a:	0020      	movs	r0, r4
    380c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    380e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3810:	69e3      	ldr	r3, [r4, #28]
    3812:	2b01      	cmp	r3, #1
    3814:	d1ef      	bne.n	37f6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3816:	69a3      	ldr	r3, [r4, #24]
    3818:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    381a:	429f      	cmp	r7, r3
    381c:	d2dd      	bcs.n	37da <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    381e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3820:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3822:	4b0a      	ldr	r3, [pc, #40]	; (384c <prvSampleTimeNow+0xa8>)
    3824:	6818      	ldr	r0, [r3, #0]
    3826:	0031      	movs	r1, r6
    3828:	4b0a      	ldr	r3, [pc, #40]	; (3854 <prvSampleTimeNow+0xb0>)
    382a:	4798      	blx	r3
    382c:	e7e3      	b.n	37f6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    382e:	4a0a      	ldr	r2, [pc, #40]	; (3858 <prvSampleTimeNow+0xb4>)
    3830:	4906      	ldr	r1, [pc, #24]	; (384c <prvSampleTimeNow+0xa8>)
    3832:	6810      	ldr	r0, [r2, #0]
    3834:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    3836:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    3838:	2301      	movs	r3, #1
    383a:	4642      	mov	r2, r8
    383c:	6013      	str	r3, [r2, #0]
    383e:	e7c2      	b.n	37c6 <prvSampleTimeNow+0x22>
    3840:	00002ff9 	.word	0x00002ff9
    3844:	200052a0 	.word	0x200052a0
    3848:	00003739 	.word	0x00003739
    384c:	20005270 	.word	0x20005270
    3850:	00002543 	.word	0x00002543
    3854:	00002515 	.word	0x00002515
    3858:	20005274 	.word	0x20005274

0000385c <prvTimerTask>:
{
    385c:	b5f0      	push	{r4, r5, r6, r7, lr}
    385e:	b08d      	sub	sp, #52	; 0x34
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3860:	4f59      	ldr	r7, [pc, #356]	; (39c8 <prvTimerTask+0x16c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3862:	4b5a      	ldr	r3, [pc, #360]	; (39cc <prvTimerTask+0x170>)
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    3868:	2a00      	cmp	r2, #0
    386a:	d00e      	beq.n	388a <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    386c:	68db      	ldr	r3, [r3, #12]
    386e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    3870:	4b57      	ldr	r3, [pc, #348]	; (39d0 <prvTimerTask+0x174>)
    3872:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3874:	a808      	add	r0, sp, #32
    3876:	4b57      	ldr	r3, [pc, #348]	; (39d4 <prvTimerTask+0x178>)
    3878:	4798      	blx	r3
    387a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    387c:	9b08      	ldr	r3, [sp, #32]
    387e:	2b00      	cmp	r3, #0
    3880:	d146      	bne.n	3910 <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3882:	42a0      	cmp	r0, r4
    3884:	d21d      	bcs.n	38c2 <prvTimerTask+0x66>
    3886:	2200      	movs	r2, #0
    3888:	e00f      	b.n	38aa <prvTimerTask+0x4e>
	vTaskSuspendAll();
    388a:	4b51      	ldr	r3, [pc, #324]	; (39d0 <prvTimerTask+0x174>)
    388c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    388e:	a808      	add	r0, sp, #32
    3890:	4b50      	ldr	r3, [pc, #320]	; (39d4 <prvTimerTask+0x178>)
    3892:	4798      	blx	r3
    3894:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    3896:	9b08      	ldr	r3, [sp, #32]
    3898:	2b00      	cmp	r3, #0
    389a:	d139      	bne.n	3910 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    389c:	4b4e      	ldr	r3, [pc, #312]	; (39d8 <prvTimerTask+0x17c>)
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	681b      	ldr	r3, [r3, #0]
    38a2:	425a      	negs	r2, r3
    38a4:	415a      	adcs	r2, r3
    38a6:	b2d2      	uxtb	r2, r2
    38a8:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    38aa:	1b61      	subs	r1, r4, r5
    38ac:	4b4b      	ldr	r3, [pc, #300]	; (39dc <prvTimerTask+0x180>)
    38ae:	6818      	ldr	r0, [r3, #0]
    38b0:	4b4b      	ldr	r3, [pc, #300]	; (39e0 <prvTimerTask+0x184>)
    38b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    38b4:	4b4b      	ldr	r3, [pc, #300]	; (39e4 <prvTimerTask+0x188>)
    38b6:	4798      	blx	r3
    38b8:	2800      	cmp	r0, #0
    38ba:	d026      	beq.n	390a <prvTimerTask+0xae>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    38bc:	4d47      	ldr	r5, [pc, #284]	; (39dc <prvTimerTask+0x180>)
    38be:	4c4a      	ldr	r4, [pc, #296]	; (39e8 <prvTimerTask+0x18c>)
    38c0:	e036      	b.n	3930 <prvTimerTask+0xd4>
				( void ) xTaskResumeAll();
    38c2:	4b48      	ldr	r3, [pc, #288]	; (39e4 <prvTimerTask+0x188>)
    38c4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    38c6:	4b41      	ldr	r3, [pc, #260]	; (39cc <prvTimerTask+0x170>)
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	68db      	ldr	r3, [r3, #12]
    38cc:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38ce:	1d30      	adds	r0, r6, #4
    38d0:	4b3d      	ldr	r3, [pc, #244]	; (39c8 <prvTimerTask+0x16c>)
    38d2:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    38d4:	69f3      	ldr	r3, [r6, #28]
    38d6:	2b01      	cmp	r3, #1
    38d8:	d003      	beq.n	38e2 <prvTimerTask+0x86>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38da:	6a73      	ldr	r3, [r6, #36]	; 0x24
    38dc:	0030      	movs	r0, r6
    38de:	4798      	blx	r3
    38e0:	e7ec      	b.n	38bc <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    38e2:	69b3      	ldr	r3, [r6, #24]
    38e4:	18e1      	adds	r1, r4, r3
    38e6:	0023      	movs	r3, r4
    38e8:	002a      	movs	r2, r5
    38ea:	0030      	movs	r0, r6
    38ec:	4d3f      	ldr	r5, [pc, #252]	; (39ec <prvTimerTask+0x190>)
    38ee:	47a8      	blx	r5
    38f0:	2800      	cmp	r0, #0
    38f2:	d0f2      	beq.n	38da <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    38f4:	2300      	movs	r3, #0
    38f6:	9300      	str	r3, [sp, #0]
    38f8:	0022      	movs	r2, r4
    38fa:	2100      	movs	r1, #0
    38fc:	0030      	movs	r0, r6
    38fe:	4c3c      	ldr	r4, [pc, #240]	; (39f0 <prvTimerTask+0x194>)
    3900:	47a0      	blx	r4
			configASSERT( xResult );
    3902:	2800      	cmp	r0, #0
    3904:	d1e9      	bne.n	38da <prvTimerTask+0x7e>
    3906:	b672      	cpsid	i
    3908:	e7fe      	b.n	3908 <prvTimerTask+0xac>
					portYIELD_WITHIN_API();
    390a:	4b3a      	ldr	r3, [pc, #232]	; (39f4 <prvTimerTask+0x198>)
    390c:	4798      	blx	r3
    390e:	e7d5      	b.n	38bc <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    3910:	4b34      	ldr	r3, [pc, #208]	; (39e4 <prvTimerTask+0x188>)
    3912:	4798      	blx	r3
    3914:	e7d2      	b.n	38bc <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    3916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3918:	9303      	str	r3, [sp, #12]
    391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    391c:	9304      	str	r3, [sp, #16]
    391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3920:	9305      	str	r3, [sp, #20]
    3922:	9903      	ldr	r1, [sp, #12]
    3924:	9804      	ldr	r0, [sp, #16]
    3926:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3928:	9b08      	ldr	r3, [sp, #32]
    392a:	9303      	str	r3, [sp, #12]
    392c:	2b00      	cmp	r3, #0
    392e:	da09      	bge.n	3944 <prvTimerTask+0xe8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3930:	2200      	movs	r2, #0
    3932:	a908      	add	r1, sp, #32
    3934:	6828      	ldr	r0, [r5, #0]
    3936:	47a0      	blx	r4
    3938:	2800      	cmp	r0, #0
    393a:	d092      	beq.n	3862 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    393c:	9b08      	ldr	r3, [sp, #32]
    393e:	9303      	str	r3, [sp, #12]
    3940:	2b00      	cmp	r3, #0
    3942:	dbe8      	blt.n	3916 <prvTimerTask+0xba>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3944:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3946:	6973      	ldr	r3, [r6, #20]
    3948:	2b00      	cmp	r3, #0
    394a:	d001      	beq.n	3950 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    394c:	1d30      	adds	r0, r6, #4
    394e:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3950:	a807      	add	r0, sp, #28
    3952:	4b20      	ldr	r3, [pc, #128]	; (39d4 <prvTimerTask+0x178>)
    3954:	4798      	blx	r3
			switch( xMessage.xMessageID )
    3956:	9b08      	ldr	r3, [sp, #32]
    3958:	2b09      	cmp	r3, #9
    395a:	d8e9      	bhi.n	3930 <prvTimerTask+0xd4>
    395c:	009b      	lsls	r3, r3, #2
    395e:	4a26      	ldr	r2, [pc, #152]	; (39f8 <prvTimerTask+0x19c>)
    3960:	58d3      	ldr	r3, [r2, r3]
    3962:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3964:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3966:	69b2      	ldr	r2, [r6, #24]
    3968:	4694      	mov	ip, r2
    396a:	4463      	add	r3, ip
    396c:	0019      	movs	r1, r3
    396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3970:	0002      	movs	r2, r0
    3972:	0030      	movs	r0, r6
    3974:	4c1d      	ldr	r4, [pc, #116]	; (39ec <prvTimerTask+0x190>)
    3976:	47a0      	blx	r4
    3978:	2800      	cmp	r0, #0
    397a:	d0a0      	beq.n	38be <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    397c:	0030      	movs	r0, r6
    397e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3980:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3982:	69f3      	ldr	r3, [r6, #28]
    3984:	2b01      	cmp	r3, #1
    3986:	d19a      	bne.n	38be <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3988:	9b09      	ldr	r3, [sp, #36]	; 0x24
    398a:	69b1      	ldr	r1, [r6, #24]
    398c:	468c      	mov	ip, r1
    398e:	4463      	add	r3, ip
    3990:	001a      	movs	r2, r3
    3992:	2300      	movs	r3, #0
    3994:	9300      	str	r3, [sp, #0]
    3996:	2100      	movs	r1, #0
    3998:	0030      	movs	r0, r6
    399a:	4c15      	ldr	r4, [pc, #84]	; (39f0 <prvTimerTask+0x194>)
    399c:	47a0      	blx	r4
							configASSERT( xResult );
    399e:	2800      	cmp	r0, #0
    39a0:	d18d      	bne.n	38be <prvTimerTask+0x62>
    39a2:	b672      	cpsid	i
    39a4:	e7fe      	b.n	39a4 <prvTimerTask+0x148>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    39a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    39a8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    39aa:	2900      	cmp	r1, #0
    39ac:	d006      	beq.n	39bc <prvTimerTask+0x160>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    39ae:	1841      	adds	r1, r0, r1
    39b0:	0003      	movs	r3, r0
    39b2:	0002      	movs	r2, r0
    39b4:	0030      	movs	r0, r6
    39b6:	4c0d      	ldr	r4, [pc, #52]	; (39ec <prvTimerTask+0x190>)
    39b8:	47a0      	blx	r4
    39ba:	e780      	b.n	38be <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    39bc:	b672      	cpsid	i
    39be:	e7fe      	b.n	39be <prvTimerTask+0x162>
						vPortFree( pxTimer );
    39c0:	0030      	movs	r0, r6
    39c2:	4b0e      	ldr	r3, [pc, #56]	; (39fc <prvTimerTask+0x1a0>)
    39c4:	4798      	blx	r3
    39c6:	e77a      	b.n	38be <prvTimerTask+0x62>
    39c8:	00002543 	.word	0x00002543
    39cc:	20005270 	.word	0x20005270
    39d0:	00002fe9 	.word	0x00002fe9
    39d4:	000037a5 	.word	0x000037a5
    39d8:	20005274 	.word	0x20005274
    39dc:	200052a4 	.word	0x200052a4
    39e0:	00002bed 	.word	0x00002bed
    39e4:	0000313d 	.word	0x0000313d
    39e8:	00002a69 	.word	0x00002a69
    39ec:	000035e9 	.word	0x000035e9
    39f0:	00003739 	.word	0x00003739
    39f4:	000010a9 	.word	0x000010a9
    39f8:	0000830c 	.word	0x0000830c
    39fc:	00001289 	.word	0x00001289

00003a00 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    3a00:	b510      	push	{r4, lr}
    3a02:	b082      	sub	sp, #8
    3a04:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
    3a06:	4a39      	ldr	r2, [pc, #228]	; (3aec <wdt_set_config+0xec>)
    3a08:	6993      	ldr	r3, [r2, #24]
    3a0a:	2110      	movs	r1, #16
    3a0c:	430b      	orrs	r3, r1
    3a0e:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    3a10:	4b37      	ldr	r3, [pc, #220]	; (3af0 <wdt_set_config+0xf0>)
    3a12:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    3a14:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
    3a16:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
    3a18:	2b00      	cmp	r3, #0
    3a1a:	db03      	blt.n	3a24 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3a1c:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
    3a1e:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3a20:	2b00      	cmp	r3, #0
    3a22:	d101      	bne.n	3a28 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    3a24:	b002      	add	sp, #8
    3a26:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    3a28:	7922      	ldrb	r2, [r4, #4]
    3a2a:	429a      	cmp	r2, r3
    3a2c:	d8fa      	bhi.n	3a24 <wdt_set_config+0x24>
    3a2e:	7962      	ldrb	r2, [r4, #5]
    3a30:	429a      	cmp	r2, r3
    3a32:	d8f7      	bhi.n	3a24 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    3a34:	4a2e      	ldr	r2, [pc, #184]	; (3af0 <wdt_set_config+0xf0>)
    3a36:	7813      	ldrb	r3, [r2, #0]
    3a38:	390e      	subs	r1, #14
    3a3a:	438b      	bics	r3, r1
    3a3c:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    3a3e:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    3a40:	b25b      	sxtb	r3, r3
    3a42:	2b00      	cmp	r3, #0
    3a44:	dbfb      	blt.n	3a3e <wdt_set_config+0x3e>
	if(config->enable == false) {
    3a46:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    3a48:	2000      	movs	r0, #0
	if(config->enable == false) {
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d0ea      	beq.n	3a24 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
    3a4e:	a901      	add	r1, sp, #4
    3a50:	78a3      	ldrb	r3, [r4, #2]
    3a52:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    3a54:	3003      	adds	r0, #3
    3a56:	4b27      	ldr	r3, [pc, #156]	; (3af4 <wdt_set_config+0xf4>)
    3a58:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    3a5a:	2003      	movs	r0, #3
    3a5c:	4b26      	ldr	r3, [pc, #152]	; (3af8 <wdt_set_config+0xf8>)
    3a5e:	4798      	blx	r3
	if (config->always_on) {
    3a60:	7823      	ldrb	r3, [r4, #0]
    3a62:	2b00      	cmp	r3, #0
    3a64:	d127      	bne.n	3ab6 <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    3a66:	78e3      	ldrb	r3, [r4, #3]
    3a68:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    3a6a:	7922      	ldrb	r2, [r4, #4]
    3a6c:	2a00      	cmp	r2, #0
    3a6e:	d026      	beq.n	3abe <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    3a70:	491f      	ldr	r1, [pc, #124]	; (3af0 <wdt_set_config+0xf0>)
    3a72:	780a      	ldrb	r2, [r1, #0]
    3a74:	2004      	movs	r0, #4
    3a76:	4302      	orrs	r2, r0
    3a78:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    3a7a:	7922      	ldrb	r2, [r4, #4]
    3a7c:	3a01      	subs	r2, #1
    3a7e:	4082      	lsls	r2, r0
    3a80:	4313      	orrs	r3, r2
    3a82:	491b      	ldr	r1, [pc, #108]	; (3af0 <wdt_set_config+0xf0>)
    3a84:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
    3a86:	b252      	sxtb	r2, r2
    3a88:	2a00      	cmp	r2, #0
    3a8a:	dbfb      	blt.n	3a84 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
    3a8c:	b2db      	uxtb	r3, r3
    3a8e:	4a18      	ldr	r2, [pc, #96]	; (3af0 <wdt_set_config+0xf0>)
    3a90:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    3a92:	7963      	ldrb	r3, [r4, #5]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d118      	bne.n	3aca <wdt_set_config+0xca>
	if (config->always_on) {
    3a98:	7823      	ldrb	r3, [r4, #0]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d01f      	beq.n	3ade <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    3a9e:	4a14      	ldr	r2, [pc, #80]	; (3af0 <wdt_set_config+0xf0>)
    3aa0:	7813      	ldrb	r3, [r2, #0]
    3aa2:	2180      	movs	r1, #128	; 0x80
    3aa4:	430b      	orrs	r3, r1
    3aa6:	7013      	strb	r3, [r2, #0]
    3aa8:	4a11      	ldr	r2, [pc, #68]	; (3af0 <wdt_set_config+0xf0>)
    3aaa:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    3aac:	b25b      	sxtb	r3, r3
    3aae:	2b00      	cmp	r3, #0
    3ab0:	dbfb      	blt.n	3aaa <wdt_set_config+0xaa>
	return STATUS_OK;
    3ab2:	2000      	movs	r0, #0
    3ab4:	e7b6      	b.n	3a24 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
    3ab6:	2003      	movs	r0, #3
    3ab8:	4b10      	ldr	r3, [pc, #64]	; (3afc <wdt_set_config+0xfc>)
    3aba:	4798      	blx	r3
    3abc:	e7d3      	b.n	3a66 <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    3abe:	490c      	ldr	r1, [pc, #48]	; (3af0 <wdt_set_config+0xf0>)
    3ac0:	780a      	ldrb	r2, [r1, #0]
    3ac2:	2004      	movs	r0, #4
    3ac4:	4382      	bics	r2, r0
    3ac6:	700a      	strb	r2, [r1, #0]
    3ac8:	e7db      	b.n	3a82 <wdt_set_config+0x82>
    3aca:	0011      	movs	r1, r2
    3acc:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    3ace:	b252      	sxtb	r2, r2
    3ad0:	2a00      	cmp	r2, #0
    3ad2:	dbfb      	blt.n	3acc <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    3ad4:	3b01      	subs	r3, #1
    3ad6:	b2db      	uxtb	r3, r3
    3ad8:	4a05      	ldr	r2, [pc, #20]	; (3af0 <wdt_set_config+0xf0>)
    3ada:	7093      	strb	r3, [r2, #2]
    3adc:	e7dc      	b.n	3a98 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    3ade:	4a04      	ldr	r2, [pc, #16]	; (3af0 <wdt_set_config+0xf0>)
    3ae0:	7813      	ldrb	r3, [r2, #0]
    3ae2:	2102      	movs	r1, #2
    3ae4:	430b      	orrs	r3, r1
    3ae6:	7013      	strb	r3, [r2, #0]
    3ae8:	e7de      	b.n	3aa8 <wdt_set_config+0xa8>
    3aea:	46c0      	nop			; (mov r8, r8)
    3aec:	40000400 	.word	0x40000400
    3af0:	40001000 	.word	0x40001000
    3af4:	000047bd 	.word	0x000047bd
    3af8:	00004731 	.word	0x00004731
    3afc:	000047d9 	.word	0x000047d9

00003b00 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    3b00:	22a5      	movs	r2, #165	; 0xa5
    3b02:	4b04      	ldr	r3, [pc, #16]	; (3b14 <wdt_reset_count+0x14>)
    3b04:	721a      	strb	r2, [r3, #8]
    3b06:	001a      	movs	r2, r3
    3b08:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    3b0a:	b25b      	sxtb	r3, r3
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	dbfb      	blt.n	3b08 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3b10:	4770      	bx	lr
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	40001000 	.word	0x40001000

00003b18 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3b18:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3b1a:	2201      	movs	r2, #1
    3b1c:	4b03      	ldr	r3, [pc, #12]	; (3b2c <WDT_Handler+0x14>)
    3b1e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    3b20:	4b03      	ldr	r3, [pc, #12]	; (3b30 <WDT_Handler+0x18>)
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d000      	beq.n	3b2a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    3b28:	4798      	blx	r3
	}
}
    3b2a:	bd10      	pop	{r4, pc}
    3b2c:	40001000 	.word	0x40001000
    3b30:	2000533c 	.word	0x2000533c

00003b34 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3b34:	b510      	push	{r4, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3b3a:	4b0e      	ldr	r3, [pc, #56]	; (3b74 <sercom_set_gclk_generator+0x40>)
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d007      	beq.n	3b52 <sercom_set_gclk_generator+0x1e>
    3b42:	2900      	cmp	r1, #0
    3b44:	d105      	bne.n	3b52 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3b46:	4b0b      	ldr	r3, [pc, #44]	; (3b74 <sercom_set_gclk_generator+0x40>)
    3b48:	785b      	ldrb	r3, [r3, #1]
    3b4a:	4283      	cmp	r3, r0
    3b4c:	d010      	beq.n	3b70 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3b4e:	201d      	movs	r0, #29
    3b50:	e00c      	b.n	3b6c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3b52:	a901      	add	r1, sp, #4
    3b54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3b56:	2013      	movs	r0, #19
    3b58:	4b07      	ldr	r3, [pc, #28]	; (3b78 <sercom_set_gclk_generator+0x44>)
    3b5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3b5c:	2013      	movs	r0, #19
    3b5e:	4b07      	ldr	r3, [pc, #28]	; (3b7c <sercom_set_gclk_generator+0x48>)
    3b60:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3b62:	4b04      	ldr	r3, [pc, #16]	; (3b74 <sercom_set_gclk_generator+0x40>)
    3b64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3b66:	2201      	movs	r2, #1
    3b68:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3b6a:	2000      	movs	r0, #0
}
    3b6c:	b002      	add	sp, #8
    3b6e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3b70:	2000      	movs	r0, #0
    3b72:	e7fb      	b.n	3b6c <sercom_set_gclk_generator+0x38>
    3b74:	200052ac 	.word	0x200052ac
    3b78:	000047bd 	.word	0x000047bd
    3b7c:	00004731 	.word	0x00004731

00003b80 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3b80:	4b40      	ldr	r3, [pc, #256]	; (3c84 <_sercom_get_default_pad+0x104>)
    3b82:	4298      	cmp	r0, r3
    3b84:	d031      	beq.n	3bea <_sercom_get_default_pad+0x6a>
    3b86:	d90a      	bls.n	3b9e <_sercom_get_default_pad+0x1e>
    3b88:	4b3f      	ldr	r3, [pc, #252]	; (3c88 <_sercom_get_default_pad+0x108>)
    3b8a:	4298      	cmp	r0, r3
    3b8c:	d04d      	beq.n	3c2a <_sercom_get_default_pad+0xaa>
    3b8e:	4b3f      	ldr	r3, [pc, #252]	; (3c8c <_sercom_get_default_pad+0x10c>)
    3b90:	4298      	cmp	r0, r3
    3b92:	d05a      	beq.n	3c4a <_sercom_get_default_pad+0xca>
    3b94:	4b3e      	ldr	r3, [pc, #248]	; (3c90 <_sercom_get_default_pad+0x110>)
    3b96:	4298      	cmp	r0, r3
    3b98:	d037      	beq.n	3c0a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    3b9a:	2000      	movs	r0, #0
}
    3b9c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    3b9e:	4b3d      	ldr	r3, [pc, #244]	; (3c94 <_sercom_get_default_pad+0x114>)
    3ba0:	4298      	cmp	r0, r3
    3ba2:	d00c      	beq.n	3bbe <_sercom_get_default_pad+0x3e>
    3ba4:	4b3c      	ldr	r3, [pc, #240]	; (3c98 <_sercom_get_default_pad+0x118>)
    3ba6:	4298      	cmp	r0, r3
    3ba8:	d1f7      	bne.n	3b9a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3baa:	2901      	cmp	r1, #1
    3bac:	d017      	beq.n	3bde <_sercom_get_default_pad+0x5e>
    3bae:	2900      	cmp	r1, #0
    3bb0:	d05d      	beq.n	3c6e <_sercom_get_default_pad+0xee>
    3bb2:	2902      	cmp	r1, #2
    3bb4:	d015      	beq.n	3be2 <_sercom_get_default_pad+0x62>
    3bb6:	2903      	cmp	r1, #3
    3bb8:	d015      	beq.n	3be6 <_sercom_get_default_pad+0x66>
	return 0;
    3bba:	2000      	movs	r0, #0
    3bbc:	e7ee      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3bbe:	2901      	cmp	r1, #1
    3bc0:	d007      	beq.n	3bd2 <_sercom_get_default_pad+0x52>
    3bc2:	2900      	cmp	r1, #0
    3bc4:	d051      	beq.n	3c6a <_sercom_get_default_pad+0xea>
    3bc6:	2902      	cmp	r1, #2
    3bc8:	d005      	beq.n	3bd6 <_sercom_get_default_pad+0x56>
    3bca:	2903      	cmp	r1, #3
    3bcc:	d005      	beq.n	3bda <_sercom_get_default_pad+0x5a>
	return 0;
    3bce:	2000      	movs	r0, #0
    3bd0:	e7e4      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3bd2:	4832      	ldr	r0, [pc, #200]	; (3c9c <_sercom_get_default_pad+0x11c>)
    3bd4:	e7e2      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3bd6:	4832      	ldr	r0, [pc, #200]	; (3ca0 <_sercom_get_default_pad+0x120>)
    3bd8:	e7e0      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3bda:	4832      	ldr	r0, [pc, #200]	; (3ca4 <_sercom_get_default_pad+0x124>)
    3bdc:	e7de      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3bde:	4832      	ldr	r0, [pc, #200]	; (3ca8 <_sercom_get_default_pad+0x128>)
    3be0:	e7dc      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3be2:	4832      	ldr	r0, [pc, #200]	; (3cac <_sercom_get_default_pad+0x12c>)
    3be4:	e7da      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3be6:	4832      	ldr	r0, [pc, #200]	; (3cb0 <_sercom_get_default_pad+0x130>)
    3be8:	e7d8      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3bea:	2901      	cmp	r1, #1
    3bec:	d007      	beq.n	3bfe <_sercom_get_default_pad+0x7e>
    3bee:	2900      	cmp	r1, #0
    3bf0:	d03f      	beq.n	3c72 <_sercom_get_default_pad+0xf2>
    3bf2:	2902      	cmp	r1, #2
    3bf4:	d005      	beq.n	3c02 <_sercom_get_default_pad+0x82>
    3bf6:	2903      	cmp	r1, #3
    3bf8:	d005      	beq.n	3c06 <_sercom_get_default_pad+0x86>
	return 0;
    3bfa:	2000      	movs	r0, #0
    3bfc:	e7ce      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3bfe:	482d      	ldr	r0, [pc, #180]	; (3cb4 <_sercom_get_default_pad+0x134>)
    3c00:	e7cc      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c02:	482d      	ldr	r0, [pc, #180]	; (3cb8 <_sercom_get_default_pad+0x138>)
    3c04:	e7ca      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c06:	482d      	ldr	r0, [pc, #180]	; (3cbc <_sercom_get_default_pad+0x13c>)
    3c08:	e7c8      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c0a:	2901      	cmp	r1, #1
    3c0c:	d007      	beq.n	3c1e <_sercom_get_default_pad+0x9e>
    3c0e:	2900      	cmp	r1, #0
    3c10:	d031      	beq.n	3c76 <_sercom_get_default_pad+0xf6>
    3c12:	2902      	cmp	r1, #2
    3c14:	d005      	beq.n	3c22 <_sercom_get_default_pad+0xa2>
    3c16:	2903      	cmp	r1, #3
    3c18:	d005      	beq.n	3c26 <_sercom_get_default_pad+0xa6>
	return 0;
    3c1a:	2000      	movs	r0, #0
    3c1c:	e7be      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c1e:	4828      	ldr	r0, [pc, #160]	; (3cc0 <_sercom_get_default_pad+0x140>)
    3c20:	e7bc      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c22:	4828      	ldr	r0, [pc, #160]	; (3cc4 <_sercom_get_default_pad+0x144>)
    3c24:	e7ba      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c26:	4828      	ldr	r0, [pc, #160]	; (3cc8 <_sercom_get_default_pad+0x148>)
    3c28:	e7b8      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c2a:	2901      	cmp	r1, #1
    3c2c:	d007      	beq.n	3c3e <_sercom_get_default_pad+0xbe>
    3c2e:	2900      	cmp	r1, #0
    3c30:	d023      	beq.n	3c7a <_sercom_get_default_pad+0xfa>
    3c32:	2902      	cmp	r1, #2
    3c34:	d005      	beq.n	3c42 <_sercom_get_default_pad+0xc2>
    3c36:	2903      	cmp	r1, #3
    3c38:	d005      	beq.n	3c46 <_sercom_get_default_pad+0xc6>
	return 0;
    3c3a:	2000      	movs	r0, #0
    3c3c:	e7ae      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c3e:	4823      	ldr	r0, [pc, #140]	; (3ccc <_sercom_get_default_pad+0x14c>)
    3c40:	e7ac      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c42:	4823      	ldr	r0, [pc, #140]	; (3cd0 <_sercom_get_default_pad+0x150>)
    3c44:	e7aa      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c46:	4823      	ldr	r0, [pc, #140]	; (3cd4 <_sercom_get_default_pad+0x154>)
    3c48:	e7a8      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c4a:	2901      	cmp	r1, #1
    3c4c:	d007      	beq.n	3c5e <_sercom_get_default_pad+0xde>
    3c4e:	2900      	cmp	r1, #0
    3c50:	d015      	beq.n	3c7e <_sercom_get_default_pad+0xfe>
    3c52:	2902      	cmp	r1, #2
    3c54:	d005      	beq.n	3c62 <_sercom_get_default_pad+0xe2>
    3c56:	2903      	cmp	r1, #3
    3c58:	d005      	beq.n	3c66 <_sercom_get_default_pad+0xe6>
	return 0;
    3c5a:	2000      	movs	r0, #0
    3c5c:	e79e      	b.n	3b9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c5e:	481e      	ldr	r0, [pc, #120]	; (3cd8 <_sercom_get_default_pad+0x158>)
    3c60:	e79c      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c62:	481e      	ldr	r0, [pc, #120]	; (3cdc <_sercom_get_default_pad+0x15c>)
    3c64:	e79a      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c66:	481e      	ldr	r0, [pc, #120]	; (3ce0 <_sercom_get_default_pad+0x160>)
    3c68:	e798      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c6a:	481e      	ldr	r0, [pc, #120]	; (3ce4 <_sercom_get_default_pad+0x164>)
    3c6c:	e796      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c6e:	2003      	movs	r0, #3
    3c70:	e794      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c72:	481d      	ldr	r0, [pc, #116]	; (3ce8 <_sercom_get_default_pad+0x168>)
    3c74:	e792      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c76:	481d      	ldr	r0, [pc, #116]	; (3cec <_sercom_get_default_pad+0x16c>)
    3c78:	e790      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c7a:	481d      	ldr	r0, [pc, #116]	; (3cf0 <_sercom_get_default_pad+0x170>)
    3c7c:	e78e      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c7e:	481d      	ldr	r0, [pc, #116]	; (3cf4 <_sercom_get_default_pad+0x174>)
    3c80:	e78c      	b.n	3b9c <_sercom_get_default_pad+0x1c>
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	42001000 	.word	0x42001000
    3c88:	42001800 	.word	0x42001800
    3c8c:	42001c00 	.word	0x42001c00
    3c90:	42001400 	.word	0x42001400
    3c94:	42000800 	.word	0x42000800
    3c98:	42000c00 	.word	0x42000c00
    3c9c:	00050003 	.word	0x00050003
    3ca0:	00060003 	.word	0x00060003
    3ca4:	00070003 	.word	0x00070003
    3ca8:	00010003 	.word	0x00010003
    3cac:	001e0003 	.word	0x001e0003
    3cb0:	001f0003 	.word	0x001f0003
    3cb4:	00090003 	.word	0x00090003
    3cb8:	000a0003 	.word	0x000a0003
    3cbc:	000b0003 	.word	0x000b0003
    3cc0:	00110003 	.word	0x00110003
    3cc4:	00120003 	.word	0x00120003
    3cc8:	00130003 	.word	0x00130003
    3ccc:	000d0003 	.word	0x000d0003
    3cd0:	000e0003 	.word	0x000e0003
    3cd4:	000f0003 	.word	0x000f0003
    3cd8:	00170003 	.word	0x00170003
    3cdc:	00180003 	.word	0x00180003
    3ce0:	00190003 	.word	0x00190003
    3ce4:	00040003 	.word	0x00040003
    3ce8:	00080003 	.word	0x00080003
    3cec:	00100003 	.word	0x00100003
    3cf0:	000c0003 	.word	0x000c0003
    3cf4:	00160003 	.word	0x00160003

00003cf8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3cf8:	b530      	push	{r4, r5, lr}
    3cfa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3cfc:	4b0b      	ldr	r3, [pc, #44]	; (3d2c <_sercom_get_sercom_inst_index+0x34>)
    3cfe:	466a      	mov	r2, sp
    3d00:	cb32      	ldmia	r3!, {r1, r4, r5}
    3d02:	c232      	stmia	r2!, {r1, r4, r5}
    3d04:	cb32      	ldmia	r3!, {r1, r4, r5}
    3d06:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3d08:	9b00      	ldr	r3, [sp, #0]
    3d0a:	4283      	cmp	r3, r0
    3d0c:	d00b      	beq.n	3d26 <_sercom_get_sercom_inst_index+0x2e>
    3d0e:	2301      	movs	r3, #1
    3d10:	009a      	lsls	r2, r3, #2
    3d12:	4669      	mov	r1, sp
    3d14:	5852      	ldr	r2, [r2, r1]
    3d16:	4282      	cmp	r2, r0
    3d18:	d006      	beq.n	3d28 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d1a:	3301      	adds	r3, #1
    3d1c:	2b06      	cmp	r3, #6
    3d1e:	d1f7      	bne.n	3d10 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3d20:	2000      	movs	r0, #0
}
    3d22:	b007      	add	sp, #28
    3d24:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d26:	2300      	movs	r3, #0
			return i;
    3d28:	b2d8      	uxtb	r0, r3
    3d2a:	e7fa      	b.n	3d22 <_sercom_get_sercom_inst_index+0x2a>
    3d2c:	00008344 	.word	0x00008344

00003d30 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3d30:	4770      	bx	lr
	...

00003d34 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3d34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3d36:	4b0a      	ldr	r3, [pc, #40]	; (3d60 <_sercom_set_handler+0x2c>)
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d10c      	bne.n	3d58 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3d3e:	4f09      	ldr	r7, [pc, #36]	; (3d64 <_sercom_set_handler+0x30>)
    3d40:	4e09      	ldr	r6, [pc, #36]	; (3d68 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3d42:	4d0a      	ldr	r5, [pc, #40]	; (3d6c <_sercom_set_handler+0x38>)
    3d44:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3d46:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3d48:	195a      	adds	r2, r3, r5
    3d4a:	6014      	str	r4, [r2, #0]
    3d4c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3d4e:	2b18      	cmp	r3, #24
    3d50:	d1f9      	bne.n	3d46 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3d52:	2201      	movs	r2, #1
    3d54:	4b02      	ldr	r3, [pc, #8]	; (3d60 <_sercom_set_handler+0x2c>)
    3d56:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3d58:	0080      	lsls	r0, r0, #2
    3d5a:	4b02      	ldr	r3, [pc, #8]	; (3d64 <_sercom_set_handler+0x30>)
    3d5c:	50c1      	str	r1, [r0, r3]
}
    3d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d60:	200052ae 	.word	0x200052ae
    3d64:	200052b0 	.word	0x200052b0
    3d68:	00003d31 	.word	0x00003d31
    3d6c:	20005340 	.word	0x20005340

00003d70 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3d70:	b500      	push	{lr}
    3d72:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3d74:	2309      	movs	r3, #9
    3d76:	466a      	mov	r2, sp
    3d78:	7013      	strb	r3, [r2, #0]
    3d7a:	3301      	adds	r3, #1
    3d7c:	7053      	strb	r3, [r2, #1]
    3d7e:	3301      	adds	r3, #1
    3d80:	7093      	strb	r3, [r2, #2]
    3d82:	3301      	adds	r3, #1
    3d84:	70d3      	strb	r3, [r2, #3]
    3d86:	3301      	adds	r3, #1
    3d88:	7113      	strb	r3, [r2, #4]
    3d8a:	3301      	adds	r3, #1
    3d8c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3d8e:	4b03      	ldr	r3, [pc, #12]	; (3d9c <_sercom_get_interrupt_vector+0x2c>)
    3d90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3d92:	466b      	mov	r3, sp
    3d94:	5618      	ldrsb	r0, [r3, r0]
}
    3d96:	b003      	add	sp, #12
    3d98:	bd00      	pop	{pc}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	00003cf9 	.word	0x00003cf9

00003da0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3da0:	b510      	push	{r4, lr}
    3da2:	4b02      	ldr	r3, [pc, #8]	; (3dac <SERCOM0_Handler+0xc>)
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	2000      	movs	r0, #0
    3da8:	4798      	blx	r3
    3daa:	bd10      	pop	{r4, pc}
    3dac:	200052b0 	.word	0x200052b0

00003db0 <SERCOM1_Handler>:
    3db0:	b510      	push	{r4, lr}
    3db2:	4b02      	ldr	r3, [pc, #8]	; (3dbc <SERCOM1_Handler+0xc>)
    3db4:	685b      	ldr	r3, [r3, #4]
    3db6:	2001      	movs	r0, #1
    3db8:	4798      	blx	r3
    3dba:	bd10      	pop	{r4, pc}
    3dbc:	200052b0 	.word	0x200052b0

00003dc0 <SERCOM2_Handler>:
    3dc0:	b510      	push	{r4, lr}
    3dc2:	4b02      	ldr	r3, [pc, #8]	; (3dcc <SERCOM2_Handler+0xc>)
    3dc4:	689b      	ldr	r3, [r3, #8]
    3dc6:	2002      	movs	r0, #2
    3dc8:	4798      	blx	r3
    3dca:	bd10      	pop	{r4, pc}
    3dcc:	200052b0 	.word	0x200052b0

00003dd0 <SERCOM3_Handler>:
    3dd0:	b510      	push	{r4, lr}
    3dd2:	4b02      	ldr	r3, [pc, #8]	; (3ddc <SERCOM3_Handler+0xc>)
    3dd4:	68db      	ldr	r3, [r3, #12]
    3dd6:	2003      	movs	r0, #3
    3dd8:	4798      	blx	r3
    3dda:	bd10      	pop	{r4, pc}
    3ddc:	200052b0 	.word	0x200052b0

00003de0 <SERCOM4_Handler>:
    3de0:	b510      	push	{r4, lr}
    3de2:	4b02      	ldr	r3, [pc, #8]	; (3dec <SERCOM4_Handler+0xc>)
    3de4:	691b      	ldr	r3, [r3, #16]
    3de6:	2004      	movs	r0, #4
    3de8:	4798      	blx	r3
    3dea:	bd10      	pop	{r4, pc}
    3dec:	200052b0 	.word	0x200052b0

00003df0 <SERCOM5_Handler>:
    3df0:	b510      	push	{r4, lr}
    3df2:	4b02      	ldr	r3, [pc, #8]	; (3dfc <SERCOM5_Handler+0xc>)
    3df4:	695b      	ldr	r3, [r3, #20]
    3df6:	2005      	movs	r0, #5
    3df8:	4798      	blx	r3
    3dfa:	bd10      	pop	{r4, pc}
    3dfc:	200052b0 	.word	0x200052b0

00003e00 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    3e00:	4770      	bx	lr
	...

00003e04 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3e04:	b530      	push	{r4, r5, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3e06:	4bcb      	ldr	r3, [pc, #812]	; (4134 <system_board_init+0x330>)
    3e08:	2201      	movs	r2, #1
    3e0a:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3e0c:	2540      	movs	r5, #64	; 0x40
    3e0e:	5d59      	ldrb	r1, [r3, r5]
    3e10:	2002      	movs	r0, #2
    3e12:	2402      	movs	r4, #2
    3e14:	4321      	orrs	r1, r4
    3e16:	b2c9      	uxtb	r1, r1
    3e18:	5559      	strb	r1, [r3, r5]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3e1a:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3e1c:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3e1e:	2141      	movs	r1, #65	; 0x41
    3e20:	5c5a      	ldrb	r2, [r3, r1]
    3e22:	4322      	orrs	r2, r4
    3e24:	b2d2      	uxtb	r2, r2
    3e26:	545a      	strb	r2, [r3, r1]
	base->WRCONFIG.reg =
    3e28:	4ac3      	ldr	r2, [pc, #780]	; (4138 <system_board_init+0x334>)
    3e2a:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3e2c:	4ac3      	ldr	r2, [pc, #780]	; (413c <system_board_init+0x338>)
    3e2e:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    3e30:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    3e32:	4ac3      	ldr	r2, [pc, #780]	; (4140 <system_board_init+0x33c>)
    3e34:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3e36:	4ac3      	ldr	r2, [pc, #780]	; (4144 <system_board_init+0x340>)
    3e38:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3e3a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3e3c:	2401      	movs	r4, #1
    3e3e:	3002      	adds	r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3e40:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3e42:	3301      	adds	r3, #1
    3e44:	2b20      	cmp	r3, #32
    3e46:	d00a      	beq.n	3e5e <system_board_init+0x5a>
		if (mask & (1 << i)) {
    3e48:	0022      	movs	r2, r4
    3e4a:	409a      	lsls	r2, r3
    3e4c:	4210      	tst	r0, r2
    3e4e:	d0f8      	beq.n	3e42 <system_board_init+0x3e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3e50:	4abd      	ldr	r2, [pc, #756]	; (4148 <system_board_init+0x344>)
    3e52:	1899      	adds	r1, r3, r2
    3e54:	780a      	ldrb	r2, [r1, #0]
    3e56:	432a      	orrs	r2, r5
    3e58:	b2d2      	uxtb	r2, r2
    3e5a:	700a      	strb	r2, [r1, #0]
    3e5c:	e7f1      	b.n	3e42 <system_board_init+0x3e>
	base->WRCONFIG.reg =
    3e5e:	4bbb      	ldr	r3, [pc, #748]	; (414c <system_board_init+0x348>)
    3e60:	4abb      	ldr	r2, [pc, #748]	; (4150 <system_board_init+0x34c>)
    3e62:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3e64:	4ab7      	ldr	r2, [pc, #732]	; (4144 <system_board_init+0x340>)
    3e66:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3e68:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3e6a:	2401      	movs	r4, #1
    3e6c:	2080      	movs	r0, #128	; 0x80
    3e6e:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3e70:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3e72:	3301      	adds	r3, #1
    3e74:	2b20      	cmp	r3, #32
    3e76:	d00a      	beq.n	3e8e <system_board_init+0x8a>
		if (mask & (1 << i)) {
    3e78:	0022      	movs	r2, r4
    3e7a:	409a      	lsls	r2, r3
    3e7c:	4202      	tst	r2, r0
    3e7e:	d0f8      	beq.n	3e72 <system_board_init+0x6e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3e80:	4ab4      	ldr	r2, [pc, #720]	; (4154 <system_board_init+0x350>)
    3e82:	1899      	adds	r1, r3, r2
    3e84:	780a      	ldrb	r2, [r1, #0]
    3e86:	432a      	orrs	r2, r5
    3e88:	b2d2      	uxtb	r2, r2
    3e8a:	700a      	strb	r2, [r1, #0]
    3e8c:	e7f1      	b.n	3e72 <system_board_init+0x6e>
	base->WRCONFIG.reg =
    3e8e:	4baf      	ldr	r3, [pc, #700]	; (414c <system_board_init+0x348>)
    3e90:	4ab1      	ldr	r2, [pc, #708]	; (4158 <system_board_init+0x354>)
    3e92:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3e94:	4aab      	ldr	r2, [pc, #684]	; (4144 <system_board_init+0x340>)
    3e96:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3e98:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3e9a:	2401      	movs	r4, #1
    3e9c:	2080      	movs	r0, #128	; 0x80
    3e9e:	0080      	lsls	r0, r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3ea0:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3ea2:	3301      	adds	r3, #1
    3ea4:	2b20      	cmp	r3, #32
    3ea6:	d00a      	beq.n	3ebe <system_board_init+0xba>
		if (mask & (1 << i)) {
    3ea8:	0022      	movs	r2, r4
    3eaa:	409a      	lsls	r2, r3
    3eac:	4202      	tst	r2, r0
    3eae:	d0f8      	beq.n	3ea2 <system_board_init+0x9e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3eb0:	4aa8      	ldr	r2, [pc, #672]	; (4154 <system_board_init+0x350>)
    3eb2:	1899      	adds	r1, r3, r2
    3eb4:	780a      	ldrb	r2, [r1, #0]
    3eb6:	432a      	orrs	r2, r5
    3eb8:	b2d2      	uxtb	r2, r2
    3eba:	700a      	strb	r2, [r1, #0]
    3ebc:	e7f1      	b.n	3ea2 <system_board_init+0x9e>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3ebe:	4b9d      	ldr	r3, [pc, #628]	; (4134 <system_board_init+0x330>)
    3ec0:	2280      	movs	r2, #128	; 0x80
    3ec2:	05d2      	lsls	r2, r2, #23
    3ec4:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3ec6:	205e      	movs	r0, #94	; 0x5e
    3ec8:	5c19      	ldrb	r1, [r3, r0]
    3eca:	2502      	movs	r5, #2
    3ecc:	4329      	orrs	r1, r5
    3ece:	b2c9      	uxtb	r1, r1
    3ed0:	5419      	strb	r1, [r3, r0]
	base->WRCONFIG.reg =
    3ed2:	48a2      	ldr	r0, [pc, #648]	; (415c <system_board_init+0x358>)
    3ed4:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3ed6:	49a2      	ldr	r1, [pc, #648]	; (4160 <system_board_init+0x35c>)
    3ed8:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    3eda:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3edc:	2180      	movs	r1, #128	; 0x80
    3ede:	0609      	lsls	r1, r1, #24
    3ee0:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3ee2:	245f      	movs	r4, #95	; 0x5f
    3ee4:	5d1a      	ldrb	r2, [r3, r4]
    3ee6:	432a      	orrs	r2, r5
    3ee8:	b2d2      	uxtb	r2, r2
    3eea:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    3eec:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3eee:	4a9d      	ldr	r2, [pc, #628]	; (4164 <system_board_init+0x360>)
    3ef0:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    3ef2:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    3ef4:	4a9c      	ldr	r2, [pc, #624]	; (4168 <system_board_init+0x364>)
    3ef6:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3ef8:	4a92      	ldr	r2, [pc, #584]	; (4144 <system_board_init+0x340>)
    3efa:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3efc:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3efe:	3c5e      	subs	r4, #94	; 0x5e
    3f00:	2010      	movs	r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f02:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3f04:	3301      	adds	r3, #1
    3f06:	2b20      	cmp	r3, #32
    3f08:	d00a      	beq.n	3f20 <system_board_init+0x11c>
		if (mask & (1 << i)) {
    3f0a:	0022      	movs	r2, r4
    3f0c:	409a      	lsls	r2, r3
    3f0e:	4210      	tst	r0, r2
    3f10:	d0f8      	beq.n	3f04 <system_board_init+0x100>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f12:	4a8d      	ldr	r2, [pc, #564]	; (4148 <system_board_init+0x344>)
    3f14:	1899      	adds	r1, r3, r2
    3f16:	780a      	ldrb	r2, [r1, #0]
    3f18:	432a      	orrs	r2, r5
    3f1a:	b2d2      	uxtb	r2, r2
    3f1c:	700a      	strb	r2, [r1, #0]
    3f1e:	e7f1      	b.n	3f04 <system_board_init+0x100>
	base->WRCONFIG.reg =
    3f20:	4b84      	ldr	r3, [pc, #528]	; (4134 <system_board_init+0x330>)
    3f22:	4a92      	ldr	r2, [pc, #584]	; (416c <system_board_init+0x368>)
    3f24:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3f26:	4a87      	ldr	r2, [pc, #540]	; (4144 <system_board_init+0x340>)
    3f28:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3f2a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3f2c:	2401      	movs	r4, #1
    3f2e:	2020      	movs	r0, #32
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f30:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3f32:	3301      	adds	r3, #1
    3f34:	2b20      	cmp	r3, #32
    3f36:	d00a      	beq.n	3f4e <system_board_init+0x14a>
		if (mask & (1 << i)) {
    3f38:	0022      	movs	r2, r4
    3f3a:	409a      	lsls	r2, r3
    3f3c:	4210      	tst	r0, r2
    3f3e:	d0f8      	beq.n	3f32 <system_board_init+0x12e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f40:	4a81      	ldr	r2, [pc, #516]	; (4148 <system_board_init+0x344>)
    3f42:	1899      	adds	r1, r3, r2
    3f44:	780a      	ldrb	r2, [r1, #0]
    3f46:	432a      	orrs	r2, r5
    3f48:	b2d2      	uxtb	r2, r2
    3f4a:	700a      	strb	r2, [r1, #0]
    3f4c:	e7f1      	b.n	3f32 <system_board_init+0x12e>
	base->WRCONFIG.reg =
    3f4e:	4b79      	ldr	r3, [pc, #484]	; (4134 <system_board_init+0x330>)
    3f50:	4a87      	ldr	r2, [pc, #540]	; (4170 <system_board_init+0x36c>)
    3f52:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3f54:	4a7b      	ldr	r2, [pc, #492]	; (4144 <system_board_init+0x340>)
    3f56:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3f58:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3f5a:	2401      	movs	r4, #1
    3f5c:	2040      	movs	r0, #64	; 0x40
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f5e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3f60:	3301      	adds	r3, #1
    3f62:	2b20      	cmp	r3, #32
    3f64:	d00a      	beq.n	3f7c <system_board_init+0x178>
		if (mask & (1 << i)) {
    3f66:	0022      	movs	r2, r4
    3f68:	409a      	lsls	r2, r3
    3f6a:	4210      	tst	r0, r2
    3f6c:	d0f8      	beq.n	3f60 <system_board_init+0x15c>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3f6e:	4a76      	ldr	r2, [pc, #472]	; (4148 <system_board_init+0x344>)
    3f70:	1899      	adds	r1, r3, r2
    3f72:	780a      	ldrb	r2, [r1, #0]
    3f74:	432a      	orrs	r2, r5
    3f76:	b2d2      	uxtb	r2, r2
    3f78:	700a      	strb	r2, [r1, #0]
    3f7a:	e7f1      	b.n	3f60 <system_board_init+0x15c>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3f7c:	4b73      	ldr	r3, [pc, #460]	; (414c <system_board_init+0x348>)
    3f7e:	2180      	movs	r1, #128	; 0x80
    3f80:	0409      	lsls	r1, r1, #16
    3f82:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3f84:	2077      	movs	r0, #119	; 0x77
    3f86:	5c1a      	ldrb	r2, [r3, r0]
    3f88:	2402      	movs	r4, #2
    3f8a:	4322      	orrs	r2, r4
    3f8c:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3f8e:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    3f90:	4b68      	ldr	r3, [pc, #416]	; (4134 <system_board_init+0x330>)
    3f92:	4a78      	ldr	r2, [pc, #480]	; (4174 <system_board_init+0x370>)
    3f94:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3f96:	4a78      	ldr	r2, [pc, #480]	; (4178 <system_board_init+0x374>)
    3f98:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3f9a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3f9c:	3c01      	subs	r4, #1
    3f9e:	2080      	movs	r0, #128	; 0x80
    3fa0:	03c0      	lsls	r0, r0, #15
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3fa2:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3fa4:	3301      	adds	r3, #1
    3fa6:	2b20      	cmp	r3, #32
    3fa8:	d00a      	beq.n	3fc0 <system_board_init+0x1bc>
		if (mask & (1 << i)) {
    3faa:	0022      	movs	r2, r4
    3fac:	409a      	lsls	r2, r3
    3fae:	4202      	tst	r2, r0
    3fb0:	d0f8      	beq.n	3fa4 <system_board_init+0x1a0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3fb2:	4a65      	ldr	r2, [pc, #404]	; (4148 <system_board_init+0x344>)
    3fb4:	1899      	adds	r1, r3, r2
    3fb6:	780a      	ldrb	r2, [r1, #0]
    3fb8:	432a      	orrs	r2, r5
    3fba:	b2d2      	uxtb	r2, r2
    3fbc:	700a      	strb	r2, [r1, #0]
    3fbe:	e7f1      	b.n	3fa4 <system_board_init+0x1a0>
	base->WRCONFIG.reg =
    3fc0:	4b5c      	ldr	r3, [pc, #368]	; (4134 <system_board_init+0x330>)
    3fc2:	4a6c      	ldr	r2, [pc, #432]	; (4174 <system_board_init+0x370>)
    3fc4:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3fc6:	4a6d      	ldr	r2, [pc, #436]	; (417c <system_board_init+0x378>)
    3fc8:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3fca:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3fcc:	2401      	movs	r4, #1
    3fce:	2080      	movs	r0, #128	; 0x80
    3fd0:	0400      	lsls	r0, r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3fd2:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3fd4:	3301      	adds	r3, #1
    3fd6:	2b20      	cmp	r3, #32
    3fd8:	d00a      	beq.n	3ff0 <system_board_init+0x1ec>
		if (mask & (1 << i)) {
    3fda:	0022      	movs	r2, r4
    3fdc:	409a      	lsls	r2, r3
    3fde:	4202      	tst	r2, r0
    3fe0:	d0f8      	beq.n	3fd4 <system_board_init+0x1d0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3fe2:	4a59      	ldr	r2, [pc, #356]	; (4148 <system_board_init+0x344>)
    3fe4:	1899      	adds	r1, r3, r2
    3fe6:	780a      	ldrb	r2, [r1, #0]
    3fe8:	432a      	orrs	r2, r5
    3fea:	b2d2      	uxtb	r2, r2
    3fec:	700a      	strb	r2, [r1, #0]
    3fee:	e7f1      	b.n	3fd4 <system_board_init+0x1d0>
	base->WRCONFIG.reg =
    3ff0:	4b56      	ldr	r3, [pc, #344]	; (414c <system_board_init+0x348>)
    3ff2:	4a53      	ldr	r2, [pc, #332]	; (4140 <system_board_init+0x33c>)
    3ff4:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3ff6:	4a53      	ldr	r2, [pc, #332]	; (4144 <system_board_init+0x340>)
    3ff8:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3ffa:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3ffc:	2401      	movs	r4, #1
    3ffe:	2004      	movs	r0, #4
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4000:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    4002:	3301      	adds	r3, #1
    4004:	2b20      	cmp	r3, #32
    4006:	d00a      	beq.n	401e <system_board_init+0x21a>
		if (mask & (1 << i)) {
    4008:	0022      	movs	r2, r4
    400a:	409a      	lsls	r2, r3
    400c:	4210      	tst	r0, r2
    400e:	d0f8      	beq.n	4002 <system_board_init+0x1fe>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4010:	4a50      	ldr	r2, [pc, #320]	; (4154 <system_board_init+0x350>)
    4012:	1899      	adds	r1, r3, r2
    4014:	780a      	ldrb	r2, [r1, #0]
    4016:	432a      	orrs	r2, r5
    4018:	b2d2      	uxtb	r2, r2
    401a:	700a      	strb	r2, [r1, #0]
    401c:	e7f1      	b.n	4002 <system_board_init+0x1fe>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    401e:	4b45      	ldr	r3, [pc, #276]	; (4134 <system_board_init+0x330>)
    4020:	2180      	movs	r1, #128	; 0x80
    4022:	0509      	lsls	r1, r1, #20
    4024:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    4026:	205b      	movs	r0, #91	; 0x5b
    4028:	5c1a      	ldrb	r2, [r3, r0]
    402a:	2402      	movs	r4, #2
    402c:	4322      	orrs	r2, r4
    402e:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    4030:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    4032:	4a50      	ldr	r2, [pc, #320]	; (4174 <system_board_init+0x370>)
    4034:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    4036:	4a52      	ldr	r2, [pc, #328]	; (4180 <system_board_init+0x37c>)
    4038:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    403a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    403c:	3c01      	subs	r4, #1
    403e:	2080      	movs	r0, #128	; 0x80
    4040:	0240      	lsls	r0, r0, #9
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4042:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    4044:	3301      	adds	r3, #1
    4046:	2b20      	cmp	r3, #32
    4048:	d00a      	beq.n	4060 <system_board_init+0x25c>
		if (mask & (1 << i)) {
    404a:	0022      	movs	r2, r4
    404c:	409a      	lsls	r2, r3
    404e:	4202      	tst	r2, r0
    4050:	d0f8      	beq.n	4044 <system_board_init+0x240>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4052:	4a3d      	ldr	r2, [pc, #244]	; (4148 <system_board_init+0x344>)
    4054:	1899      	adds	r1, r3, r2
    4056:	780a      	ldrb	r2, [r1, #0]
    4058:	432a      	orrs	r2, r5
    405a:	b2d2      	uxtb	r2, r2
    405c:	700a      	strb	r2, [r1, #0]
    405e:	e7f1      	b.n	4044 <system_board_init+0x240>
	base->WRCONFIG.reg =
    4060:	4b34      	ldr	r3, [pc, #208]	; (4134 <system_board_init+0x330>)
    4062:	4a44      	ldr	r2, [pc, #272]	; (4174 <system_board_init+0x370>)
    4064:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    4066:	4a47      	ldr	r2, [pc, #284]	; (4184 <system_board_init+0x380>)
    4068:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    406a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    406c:	2401      	movs	r4, #1
    406e:	2080      	movs	r0, #128	; 0x80
    4070:	0280      	lsls	r0, r0, #10
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4072:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    4074:	3301      	adds	r3, #1
    4076:	2b20      	cmp	r3, #32
    4078:	d00a      	beq.n	4090 <system_board_init+0x28c>
		if (mask & (1 << i)) {
    407a:	0022      	movs	r2, r4
    407c:	409a      	lsls	r2, r3
    407e:	4202      	tst	r2, r0
    4080:	d0f8      	beq.n	4074 <system_board_init+0x270>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4082:	4a31      	ldr	r2, [pc, #196]	; (4148 <system_board_init+0x344>)
    4084:	1899      	adds	r1, r3, r2
    4086:	780a      	ldrb	r2, [r1, #0]
    4088:	432a      	orrs	r2, r5
    408a:	b2d2      	uxtb	r2, r2
    408c:	700a      	strb	r2, [r1, #0]
    408e:	e7f1      	b.n	4074 <system_board_init+0x270>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    4090:	4b28      	ldr	r3, [pc, #160]	; (4134 <system_board_init+0x330>)
    4092:	2180      	movs	r1, #128	; 0x80
    4094:	0109      	lsls	r1, r1, #4
    4096:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    4098:	204b      	movs	r0, #75	; 0x4b
    409a:	5c1a      	ldrb	r2, [r3, r0]
    409c:	2402      	movs	r4, #2
    409e:	4322      	orrs	r2, r4
    40a0:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    40a2:	6199      	str	r1, [r3, #24]
	base->WRCONFIG.reg =
    40a4:	4a38      	ldr	r2, [pc, #224]	; (4188 <system_board_init+0x384>)
    40a6:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    40a8:	4a38      	ldr	r2, [pc, #224]	; (418c <system_board_init+0x388>)
    40aa:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    40ac:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    40ae:	3c01      	subs	r4, #1
    40b0:	30b6      	adds	r0, #182	; 0xb6
    40b2:	30ff      	adds	r0, #255	; 0xff
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    40b4:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    40b6:	3301      	adds	r3, #1
    40b8:	2b20      	cmp	r3, #32
    40ba:	d00a      	beq.n	40d2 <system_board_init+0x2ce>
		if (mask & (1 << i)) {
    40bc:	0022      	movs	r2, r4
    40be:	409a      	lsls	r2, r3
    40c0:	4202      	tst	r2, r0
    40c2:	d0f8      	beq.n	40b6 <system_board_init+0x2b2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    40c4:	4a20      	ldr	r2, [pc, #128]	; (4148 <system_board_init+0x344>)
    40c6:	1899      	adds	r1, r3, r2
    40c8:	780a      	ldrb	r2, [r1, #0]
    40ca:	432a      	orrs	r2, r5
    40cc:	b2d2      	uxtb	r2, r2
    40ce:	700a      	strb	r2, [r1, #0]
    40d0:	e7f1      	b.n	40b6 <system_board_init+0x2b2>
	base->WRCONFIG.reg =
    40d2:	4b18      	ldr	r3, [pc, #96]	; (4134 <system_board_init+0x330>)
    40d4:	4a2e      	ldr	r2, [pc, #184]	; (4190 <system_board_init+0x38c>)
    40d6:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    40d8:	4a2c      	ldr	r2, [pc, #176]	; (418c <system_board_init+0x388>)
    40da:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    40dc:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    40de:	2401      	movs	r4, #1
    40e0:	2080      	movs	r0, #128	; 0x80
    40e2:	00c0      	lsls	r0, r0, #3
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    40e4:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    40e6:	3301      	adds	r3, #1
    40e8:	2b20      	cmp	r3, #32
    40ea:	d00a      	beq.n	4102 <system_board_init+0x2fe>
		if (mask & (1 << i)) {
    40ec:	0022      	movs	r2, r4
    40ee:	409a      	lsls	r2, r3
    40f0:	4202      	tst	r2, r0
    40f2:	d0f8      	beq.n	40e6 <system_board_init+0x2e2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    40f4:	4a14      	ldr	r2, [pc, #80]	; (4148 <system_board_init+0x344>)
    40f6:	1899      	adds	r1, r3, r2
    40f8:	780a      	ldrb	r2, [r1, #0]
    40fa:	432a      	orrs	r2, r5
    40fc:	b2d2      	uxtb	r2, r2
    40fe:	700a      	strb	r2, [r1, #0]
    4100:	e7f1      	b.n	40e6 <system_board_init+0x2e2>
	base->WRCONFIG.reg =
    4102:	4b0c      	ldr	r3, [pc, #48]	; (4134 <system_board_init+0x330>)
    4104:	4a23      	ldr	r2, [pc, #140]	; (4194 <system_board_init+0x390>)
    4106:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    4108:	4a20      	ldr	r2, [pc, #128]	; (418c <system_board_init+0x388>)
    410a:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    410c:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    410e:	2401      	movs	r4, #1
    4110:	2080      	movs	r0, #128	; 0x80
    4112:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    4114:	2501      	movs	r5, #1
    4116:	e005      	b.n	4124 <system_board_init+0x320>
    4118:	4a0b      	ldr	r2, [pc, #44]	; (4148 <system_board_init+0x344>)
    411a:	1899      	adds	r1, r3, r2
    411c:	780a      	ldrb	r2, [r1, #0]
    411e:	432a      	orrs	r2, r5
    4120:	b2d2      	uxtb	r2, r2
    4122:	700a      	strb	r2, [r1, #0]
	for (uint32_t i = 0; i < 32; i++) {
    4124:	3301      	adds	r3, #1
    4126:	2b20      	cmp	r3, #32
    4128:	d036      	beq.n	4198 <system_board_init+0x394>
		if (mask & (1 << i)) {
    412a:	0022      	movs	r2, r4
    412c:	409a      	lsls	r2, r3
    412e:	4202      	tst	r2, r0
    4130:	d1f2      	bne.n	4118 <system_board_init+0x314>
    4132:	e7f7      	b.n	4124 <system_board_init+0x320>
    4134:	41004400 	.word	0x41004400
    4138:	50060002 	.word	0x50060002
    413c:	d0060000 	.word	0xd0060000
    4140:	51020004 	.word	0x51020004
    4144:	d1020000 	.word	0xd1020000
    4148:	41004440 	.word	0x41004440
    414c:	41004480 	.word	0x41004480
    4150:	51020100 	.word	0x51020100
    4154:	410044c0 	.word	0x410044c0
    4158:	51020200 	.word	0x51020200
    415c:	50060000 	.word	0x50060000
    4160:	d0064000 	.word	0xd0064000
    4164:	d0068000 	.word	0xd0068000
    4168:	51020010 	.word	0x51020010
    416c:	51020020 	.word	0x51020020
    4170:	51020040 	.word	0x51020040
    4174:	52020000 	.word	0x52020000
    4178:	d2020040 	.word	0xd2020040
    417c:	d2020080 	.word	0xd2020080
    4180:	d2020001 	.word	0xd2020001
    4184:	d2020002 	.word	0xd2020002
    4188:	52020200 	.word	0x52020200
    418c:	d2020000 	.word	0xd2020000
    4190:	52020400 	.word	0x52020400
    4194:	52020100 	.word	0x52020100
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    4198:	4911      	ldr	r1, [pc, #68]	; (41e0 <system_board_init+0x3dc>)
    419a:	2280      	movs	r2, #128	; 0x80
    419c:	03d2      	lsls	r2, r2, #15
    419e:	608a      	str	r2, [r1, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    41a0:	2476      	movs	r4, #118	; 0x76
    41a2:	5d0b      	ldrb	r3, [r1, r4]
    41a4:	2002      	movs	r0, #2
    41a6:	4303      	orrs	r3, r0
    41a8:	b2db      	uxtb	r3, r3
    41aa:	550b      	strb	r3, [r1, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    41ac:	614a      	str	r2, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    41ae:	4b0d      	ldr	r3, [pc, #52]	; (41e4 <system_board_init+0x3e0>)
    41b0:	2280      	movs	r2, #128	; 0x80
    41b2:	0392      	lsls	r2, r2, #14
    41b4:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    41b6:	3c21      	subs	r4, #33	; 0x21
    41b8:	5d19      	ldrb	r1, [r3, r4]
    41ba:	4301      	orrs	r1, r0
    41bc:	b2c9      	uxtb	r1, r1
    41be:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    41c0:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    41c2:	2180      	movs	r1, #128	; 0x80
    41c4:	0549      	lsls	r1, r1, #21
    41c6:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    41c8:	3407      	adds	r4, #7
    41ca:	5d1a      	ldrb	r2, [r3, r4]
    41cc:	4302      	orrs	r2, r0
    41ce:	b2d2      	uxtb	r2, r2
    41d0:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    41d2:	4a05      	ldr	r2, [pc, #20]	; (41e8 <system_board_init+0x3e4>)
    41d4:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    41d6:	4a05      	ldr	r2, [pc, #20]	; (41ec <system_board_init+0x3e8>)
    41d8:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    41da:	6159      	str	r1, [r3, #20]

	// Power monitoring
	ioport_set_pin_dir(POWER_MONITOR_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(POWER_MONITOR_GPIO, IOPORT_MODE_PULLDOWN);
	
    41dc:	bd30      	pop	{r4, r5, pc}
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	41004480 	.word	0x41004480
    41e4:	41004400 	.word	0x41004400
    41e8:	50060000 	.word	0x50060000
    41ec:	d0061000 	.word	0xd0061000

000041f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    41f0:	4b0c      	ldr	r3, [pc, #48]	; (4224 <cpu_irq_enter_critical+0x34>)
    41f2:	681b      	ldr	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d106      	bne.n	4206 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    41fc:	2b00      	cmp	r3, #0
    41fe:	d007      	beq.n	4210 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4200:	2200      	movs	r2, #0
    4202:	4b09      	ldr	r3, [pc, #36]	; (4228 <cpu_irq_enter_critical+0x38>)
    4204:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4206:	4a07      	ldr	r2, [pc, #28]	; (4224 <cpu_irq_enter_critical+0x34>)
    4208:	6813      	ldr	r3, [r2, #0]
    420a:	3301      	adds	r3, #1
    420c:	6013      	str	r3, [r2, #0]
}
    420e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4210:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4212:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4216:	2200      	movs	r2, #0
    4218:	4b04      	ldr	r3, [pc, #16]	; (422c <cpu_irq_enter_critical+0x3c>)
    421a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    421c:	3201      	adds	r2, #1
    421e:	4b02      	ldr	r3, [pc, #8]	; (4228 <cpu_irq_enter_critical+0x38>)
    4220:	701a      	strb	r2, [r3, #0]
    4222:	e7f0      	b.n	4206 <cpu_irq_enter_critical+0x16>
    4224:	200052c8 	.word	0x200052c8
    4228:	200052cc 	.word	0x200052cc
    422c:	2000000f 	.word	0x2000000f

00004230 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4230:	4b08      	ldr	r3, [pc, #32]	; (4254 <cpu_irq_leave_critical+0x24>)
    4232:	681a      	ldr	r2, [r3, #0]
    4234:	3a01      	subs	r2, #1
    4236:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	2b00      	cmp	r3, #0
    423c:	d109      	bne.n	4252 <cpu_irq_leave_critical+0x22>
    423e:	4b06      	ldr	r3, [pc, #24]	; (4258 <cpu_irq_leave_critical+0x28>)
    4240:	781b      	ldrb	r3, [r3, #0]
    4242:	2b00      	cmp	r3, #0
    4244:	d005      	beq.n	4252 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4246:	2201      	movs	r2, #1
    4248:	4b04      	ldr	r3, [pc, #16]	; (425c <cpu_irq_leave_critical+0x2c>)
    424a:	701a      	strb	r2, [r3, #0]
    424c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4250:	b662      	cpsie	i
	}
}
    4252:	4770      	bx	lr
    4254:	200052c8 	.word	0x200052c8
    4258:	200052cc 	.word	0x200052cc
    425c:	2000000f 	.word	0x2000000f

00004260 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4260:	b510      	push	{r4, lr}
	switch (clock_source) {
    4262:	2808      	cmp	r0, #8
    4264:	d803      	bhi.n	426e <system_clock_source_get_hz+0xe>
    4266:	0080      	lsls	r0, r0, #2
    4268:	4b1c      	ldr	r3, [pc, #112]	; (42dc <system_clock_source_get_hz+0x7c>)
    426a:	581b      	ldr	r3, [r3, r0]
    426c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    426e:	2000      	movs	r0, #0
    4270:	e032      	b.n	42d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    4272:	4b1b      	ldr	r3, [pc, #108]	; (42e0 <system_clock_source_get_hz+0x80>)
    4274:	6918      	ldr	r0, [r3, #16]
    4276:	e02f      	b.n	42d8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4278:	4b1a      	ldr	r3, [pc, #104]	; (42e4 <system_clock_source_get_hz+0x84>)
    427a:	6a1b      	ldr	r3, [r3, #32]
    427c:	059b      	lsls	r3, r3, #22
    427e:	0f9b      	lsrs	r3, r3, #30
    4280:	4819      	ldr	r0, [pc, #100]	; (42e8 <system_clock_source_get_hz+0x88>)
    4282:	40d8      	lsrs	r0, r3
    4284:	e028      	b.n	42d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    4286:	4b16      	ldr	r3, [pc, #88]	; (42e0 <system_clock_source_get_hz+0x80>)
    4288:	6958      	ldr	r0, [r3, #20]
    428a:	e025      	b.n	42d8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    428c:	4b14      	ldr	r3, [pc, #80]	; (42e0 <system_clock_source_get_hz+0x80>)
    428e:	681b      	ldr	r3, [r3, #0]
			return 0;
    4290:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4292:	079b      	lsls	r3, r3, #30
    4294:	d520      	bpl.n	42d8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4296:	4913      	ldr	r1, [pc, #76]	; (42e4 <system_clock_source_get_hz+0x84>)
    4298:	2210      	movs	r2, #16
    429a:	68cb      	ldr	r3, [r1, #12]
    429c:	421a      	tst	r2, r3
    429e:	d0fc      	beq.n	429a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    42a0:	4b0f      	ldr	r3, [pc, #60]	; (42e0 <system_clock_source_get_hz+0x80>)
    42a2:	681a      	ldr	r2, [r3, #0]
    42a4:	2324      	movs	r3, #36	; 0x24
    42a6:	4013      	ands	r3, r2
    42a8:	2b04      	cmp	r3, #4
    42aa:	d001      	beq.n	42b0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    42ac:	480f      	ldr	r0, [pc, #60]	; (42ec <system_clock_source_get_hz+0x8c>)
    42ae:	e013      	b.n	42d8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42b0:	2000      	movs	r0, #0
    42b2:	4b0f      	ldr	r3, [pc, #60]	; (42f0 <system_clock_source_get_hz+0x90>)
    42b4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    42b6:	4b0a      	ldr	r3, [pc, #40]	; (42e0 <system_clock_source_get_hz+0x80>)
    42b8:	689b      	ldr	r3, [r3, #8]
    42ba:	041b      	lsls	r3, r3, #16
    42bc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42be:	4358      	muls	r0, r3
    42c0:	e00a      	b.n	42d8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42c2:	2350      	movs	r3, #80	; 0x50
    42c4:	4a07      	ldr	r2, [pc, #28]	; (42e4 <system_clock_source_get_hz+0x84>)
    42c6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    42c8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42ca:	075b      	lsls	r3, r3, #29
    42cc:	d504      	bpl.n	42d8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    42ce:	4b04      	ldr	r3, [pc, #16]	; (42e0 <system_clock_source_get_hz+0x80>)
    42d0:	68d8      	ldr	r0, [r3, #12]
    42d2:	e001      	b.n	42d8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    42d4:	2080      	movs	r0, #128	; 0x80
    42d6:	0200      	lsls	r0, r0, #8
	}
}
    42d8:	bd10      	pop	{r4, pc}
    42da:	46c0      	nop			; (mov r8, r8)
    42dc:	0000835c 	.word	0x0000835c
    42e0:	200052d0 	.word	0x200052d0
    42e4:	40000800 	.word	0x40000800
    42e8:	007a1200 	.word	0x007a1200
    42ec:	02dc6c00 	.word	0x02dc6c00
    42f0:	00004809 	.word	0x00004809

000042f4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    42f4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    42f6:	490c      	ldr	r1, [pc, #48]	; (4328 <system_clock_source_osc8m_set_config+0x34>)
    42f8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    42fa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    42fc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    42fe:	7840      	ldrb	r0, [r0, #1]
    4300:	2201      	movs	r2, #1
    4302:	4010      	ands	r0, r2
    4304:	0180      	lsls	r0, r0, #6
    4306:	2640      	movs	r6, #64	; 0x40
    4308:	43b3      	bics	r3, r6
    430a:	4303      	orrs	r3, r0
    430c:	402a      	ands	r2, r5
    430e:	01d2      	lsls	r2, r2, #7
    4310:	2080      	movs	r0, #128	; 0x80
    4312:	4383      	bics	r3, r0
    4314:	4313      	orrs	r3, r2
    4316:	2203      	movs	r2, #3
    4318:	4022      	ands	r2, r4
    431a:	0212      	lsls	r2, r2, #8
    431c:	4803      	ldr	r0, [pc, #12]	; (432c <system_clock_source_osc8m_set_config+0x38>)
    431e:	4003      	ands	r3, r0
    4320:	4313      	orrs	r3, r2
    4322:	620b      	str	r3, [r1, #32]
}
    4324:	bd70      	pop	{r4, r5, r6, pc}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	40000800 	.word	0x40000800
    432c:	fffffcff 	.word	0xfffffcff

00004330 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4330:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4332:	7a03      	ldrb	r3, [r0, #8]
    4334:	069b      	lsls	r3, r3, #26
    4336:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4338:	8942      	ldrh	r2, [r0, #10]
    433a:	0592      	lsls	r2, r2, #22
    433c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    433e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4340:	4918      	ldr	r1, [pc, #96]	; (43a4 <system_clock_source_dfll_set_config+0x74>)
    4342:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4344:	7983      	ldrb	r3, [r0, #6]
    4346:	79c2      	ldrb	r2, [r0, #7]
    4348:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    434a:	8842      	ldrh	r2, [r0, #2]
    434c:	8884      	ldrh	r4, [r0, #4]
    434e:	4322      	orrs	r2, r4
    4350:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4352:	7842      	ldrb	r2, [r0, #1]
    4354:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4356:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4358:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    435a:	7803      	ldrb	r3, [r0, #0]
    435c:	2b04      	cmp	r3, #4
    435e:	d011      	beq.n	4384 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4360:	2b20      	cmp	r3, #32
    4362:	d10e      	bne.n	4382 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4364:	7b03      	ldrb	r3, [r0, #12]
    4366:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4368:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    436a:	4313      	orrs	r3, r2
    436c:	89c2      	ldrh	r2, [r0, #14]
    436e:	0412      	lsls	r2, r2, #16
    4370:	490d      	ldr	r1, [pc, #52]	; (43a8 <system_clock_source_dfll_set_config+0x78>)
    4372:	400a      	ands	r2, r1
    4374:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4376:	4a0b      	ldr	r2, [pc, #44]	; (43a4 <system_clock_source_dfll_set_config+0x74>)
    4378:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    437a:	6811      	ldr	r1, [r2, #0]
    437c:	4b0b      	ldr	r3, [pc, #44]	; (43ac <system_clock_source_dfll_set_config+0x7c>)
    437e:	430b      	orrs	r3, r1
    4380:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4382:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4384:	7b03      	ldrb	r3, [r0, #12]
    4386:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4388:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    438a:	4313      	orrs	r3, r2
    438c:	89c2      	ldrh	r2, [r0, #14]
    438e:	0412      	lsls	r2, r2, #16
    4390:	4905      	ldr	r1, [pc, #20]	; (43a8 <system_clock_source_dfll_set_config+0x78>)
    4392:	400a      	ands	r2, r1
    4394:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4396:	4a03      	ldr	r2, [pc, #12]	; (43a4 <system_clock_source_dfll_set_config+0x74>)
    4398:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    439a:	6813      	ldr	r3, [r2, #0]
    439c:	2104      	movs	r1, #4
    439e:	430b      	orrs	r3, r1
    43a0:	6013      	str	r3, [r2, #0]
    43a2:	e7ee      	b.n	4382 <system_clock_source_dfll_set_config+0x52>
    43a4:	200052d0 	.word	0x200052d0
    43a8:	03ff0000 	.word	0x03ff0000
    43ac:	00000424 	.word	0x00000424

000043b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    43b0:	2808      	cmp	r0, #8
    43b2:	d803      	bhi.n	43bc <system_clock_source_enable+0xc>
    43b4:	0080      	lsls	r0, r0, #2
    43b6:	4b25      	ldr	r3, [pc, #148]	; (444c <system_clock_source_enable+0x9c>)
    43b8:	581b      	ldr	r3, [r3, r0]
    43ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    43bc:	2017      	movs	r0, #23
    43be:	e044      	b.n	444a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    43c0:	4a23      	ldr	r2, [pc, #140]	; (4450 <system_clock_source_enable+0xa0>)
    43c2:	6a13      	ldr	r3, [r2, #32]
    43c4:	2102      	movs	r1, #2
    43c6:	430b      	orrs	r3, r1
    43c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    43ca:	2000      	movs	r0, #0
    43cc:	e03d      	b.n	444a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    43ce:	4a20      	ldr	r2, [pc, #128]	; (4450 <system_clock_source_enable+0xa0>)
    43d0:	6993      	ldr	r3, [r2, #24]
    43d2:	2102      	movs	r1, #2
    43d4:	430b      	orrs	r3, r1
    43d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    43d8:	2000      	movs	r0, #0
		break;
    43da:	e036      	b.n	444a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    43dc:	4a1c      	ldr	r2, [pc, #112]	; (4450 <system_clock_source_enable+0xa0>)
    43de:	8a13      	ldrh	r3, [r2, #16]
    43e0:	2102      	movs	r1, #2
    43e2:	430b      	orrs	r3, r1
    43e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    43e6:	2000      	movs	r0, #0
		break;
    43e8:	e02f      	b.n	444a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    43ea:	4a19      	ldr	r2, [pc, #100]	; (4450 <system_clock_source_enable+0xa0>)
    43ec:	8a93      	ldrh	r3, [r2, #20]
    43ee:	2102      	movs	r1, #2
    43f0:	430b      	orrs	r3, r1
    43f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    43f4:	2000      	movs	r0, #0
		break;
    43f6:	e028      	b.n	444a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    43f8:	4916      	ldr	r1, [pc, #88]	; (4454 <system_clock_source_enable+0xa4>)
    43fa:	680b      	ldr	r3, [r1, #0]
    43fc:	2202      	movs	r2, #2
    43fe:	4313      	orrs	r3, r2
    4400:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4402:	4b13      	ldr	r3, [pc, #76]	; (4450 <system_clock_source_enable+0xa0>)
    4404:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4406:	0019      	movs	r1, r3
    4408:	320e      	adds	r2, #14
    440a:	68cb      	ldr	r3, [r1, #12]
    440c:	421a      	tst	r2, r3
    440e:	d0fc      	beq.n	440a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4410:	4a10      	ldr	r2, [pc, #64]	; (4454 <system_clock_source_enable+0xa4>)
    4412:	6891      	ldr	r1, [r2, #8]
    4414:	4b0e      	ldr	r3, [pc, #56]	; (4450 <system_clock_source_enable+0xa0>)
    4416:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4418:	6852      	ldr	r2, [r2, #4]
    441a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    441c:	2200      	movs	r2, #0
    441e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4420:	0019      	movs	r1, r3
    4422:	3210      	adds	r2, #16
    4424:	68cb      	ldr	r3, [r1, #12]
    4426:	421a      	tst	r2, r3
    4428:	d0fc      	beq.n	4424 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    442a:	4b0a      	ldr	r3, [pc, #40]	; (4454 <system_clock_source_enable+0xa4>)
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	b29b      	uxth	r3, r3
    4430:	4a07      	ldr	r2, [pc, #28]	; (4450 <system_clock_source_enable+0xa0>)
    4432:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4434:	2000      	movs	r0, #0
    4436:	e008      	b.n	444a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4438:	4905      	ldr	r1, [pc, #20]	; (4450 <system_clock_source_enable+0xa0>)
    443a:	2244      	movs	r2, #68	; 0x44
    443c:	5c8b      	ldrb	r3, [r1, r2]
    443e:	2002      	movs	r0, #2
    4440:	4303      	orrs	r3, r0
    4442:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4444:	2000      	movs	r0, #0
		break;
    4446:	e000      	b.n	444a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4448:	2000      	movs	r0, #0
}
    444a:	4770      	bx	lr
    444c:	00008380 	.word	0x00008380
    4450:	40000800 	.word	0x40000800
    4454:	200052d0 	.word	0x200052d0

00004458 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4458:	b5f0      	push	{r4, r5, r6, r7, lr}
    445a:	46ce      	mov	lr, r9
    445c:	4647      	mov	r7, r8
    445e:	b580      	push	{r7, lr}
    4460:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4462:	22c2      	movs	r2, #194	; 0xc2
    4464:	00d2      	lsls	r2, r2, #3
    4466:	4b3c      	ldr	r3, [pc, #240]	; (4558 <system_clock_init+0x100>)
    4468:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    446a:	4a3c      	ldr	r2, [pc, #240]	; (455c <system_clock_init+0x104>)
    446c:	6853      	ldr	r3, [r2, #4]
    446e:	211e      	movs	r1, #30
    4470:	438b      	bics	r3, r1
    4472:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4474:	2202      	movs	r2, #2
    4476:	ab01      	add	r3, sp, #4
    4478:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    447a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    447c:	4d38      	ldr	r5, [pc, #224]	; (4560 <system_clock_init+0x108>)
    447e:	b2e0      	uxtb	r0, r4
    4480:	a901      	add	r1, sp, #4
    4482:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4484:	3401      	adds	r4, #1
    4486:	2c25      	cmp	r4, #37	; 0x25
    4488:	d1f9      	bne.n	447e <system_clock_init+0x26>
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    448a:	ab05      	add	r3, sp, #20
    448c:	2100      	movs	r1, #0
    448e:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4490:	2200      	movs	r2, #0
    4492:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4494:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4496:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4498:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    449a:	3106      	adds	r1, #6
    449c:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    449e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    44a0:	4b30      	ldr	r3, [pc, #192]	; (4564 <system_clock_init+0x10c>)
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    44a6:	2b3f      	cmp	r3, #63	; 0x3f
    44a8:	d054      	beq.n	4554 <system_clock_init+0xfc>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    44aa:	a805      	add	r0, sp, #20
    44ac:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    44ae:	2380      	movs	r3, #128	; 0x80
    44b0:	009b      	lsls	r3, r3, #2
    44b2:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    44b4:	3bfa      	subs	r3, #250	; 0xfa
    44b6:	3bff      	subs	r3, #255	; 0xff
    44b8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    44ba:	3338      	adds	r3, #56	; 0x38
    44bc:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    44be:	4b2a      	ldr	r3, [pc, #168]	; (4568 <system_clock_init+0x110>)
    44c0:	4798      	blx	r3
	config->run_in_standby  = false;
    44c2:	a804      	add	r0, sp, #16
    44c4:	2500      	movs	r5, #0
    44c6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    44c8:	2701      	movs	r7, #1
    44ca:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    44cc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    44ce:	4b27      	ldr	r3, [pc, #156]	; (456c <system_clock_init+0x114>)
    44d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    44d2:	2006      	movs	r0, #6
    44d4:	4e26      	ldr	r6, [pc, #152]	; (4570 <system_clock_init+0x118>)
    44d6:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    44d8:	4b26      	ldr	r3, [pc, #152]	; (4574 <system_clock_init+0x11c>)
    44da:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    44dc:	ac01      	add	r4, sp, #4
    44de:	9702      	str	r7, [sp, #8]
	config->high_when_disabled = false;
    44e0:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    44e2:	2306      	movs	r3, #6
    44e4:	4699      	mov	r9, r3
    44e6:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    44e8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    44ea:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    44ec:	0021      	movs	r1, r4
    44ee:	2001      	movs	r0, #1
    44f0:	4b21      	ldr	r3, [pc, #132]	; (4578 <system_clock_init+0x120>)
    44f2:	4698      	mov	r8, r3
    44f4:	4798      	blx	r3
    44f6:	2001      	movs	r0, #1
    44f8:	4f20      	ldr	r7, [pc, #128]	; (457c <system_clock_init+0x124>)
    44fa:	47b8      	blx	r7
	config->high_when_disabled = false;
    44fc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    44fe:	464b      	mov	r3, r9
    4500:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4502:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4504:	7265      	strb	r5, [r4, #9]
    4506:	23ff      	movs	r3, #255	; 0xff
    4508:	6063      	str	r3, [r4, #4]
    450a:	0021      	movs	r1, r4
    450c:	2004      	movs	r0, #4
    450e:	47c0      	blx	r8
    4510:	2004      	movs	r0, #4
    4512:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4514:	2007      	movs	r0, #7
    4516:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4518:	490f      	ldr	r1, [pc, #60]	; (4558 <system_clock_init+0x100>)
    451a:	2210      	movs	r2, #16
    451c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    451e:	421a      	tst	r2, r3
    4520:	d0fc      	beq.n	451c <system_clock_init+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    4522:	4a17      	ldr	r2, [pc, #92]	; (4580 <system_clock_init+0x128>)
    4524:	2300      	movs	r3, #0
    4526:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4528:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    452a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    452c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    452e:	a901      	add	r1, sp, #4
    4530:	2201      	movs	r2, #1
    4532:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4534:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4536:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4538:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    453a:	3307      	adds	r3, #7
    453c:	700b      	strb	r3, [r1, #0]
    453e:	2000      	movs	r0, #0
    4540:	4b0d      	ldr	r3, [pc, #52]	; (4578 <system_clock_init+0x120>)
    4542:	4798      	blx	r3
    4544:	2000      	movs	r0, #0
    4546:	4b0d      	ldr	r3, [pc, #52]	; (457c <system_clock_init+0x124>)
    4548:	4798      	blx	r3
#endif
}
    454a:	b00b      	add	sp, #44	; 0x2c
    454c:	bc0c      	pop	{r2, r3}
    454e:	4690      	mov	r8, r2
    4550:	4699      	mov	r9, r3
    4552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4554:	3b20      	subs	r3, #32
    4556:	e7a8      	b.n	44aa <system_clock_init+0x52>
    4558:	40000800 	.word	0x40000800
    455c:	41004000 	.word	0x41004000
    4560:	000047bd 	.word	0x000047bd
    4564:	00806024 	.word	0x00806024
    4568:	00004331 	.word	0x00004331
    456c:	000042f5 	.word	0x000042f5
    4570:	000043b1 	.word	0x000043b1
    4574:	00004585 	.word	0x00004585
    4578:	000045a9 	.word	0x000045a9
    457c:	00004661 	.word	0x00004661
    4580:	40000400 	.word	0x40000400

00004584 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4584:	4a06      	ldr	r2, [pc, #24]	; (45a0 <system_gclk_init+0x1c>)
    4586:	6993      	ldr	r3, [r2, #24]
    4588:	2108      	movs	r1, #8
    458a:	430b      	orrs	r3, r1
    458c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    458e:	2201      	movs	r2, #1
    4590:	4b04      	ldr	r3, [pc, #16]	; (45a4 <system_gclk_init+0x20>)
    4592:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4594:	0019      	movs	r1, r3
    4596:	780b      	ldrb	r3, [r1, #0]
    4598:	4213      	tst	r3, r2
    459a:	d1fc      	bne.n	4596 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    459c:	4770      	bx	lr
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	40000400 	.word	0x40000400
    45a4:	40000c00 	.word	0x40000c00

000045a8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    45ac:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    45ae:	780d      	ldrb	r5, [r1, #0]
    45b0:	022d      	lsls	r5, r5, #8
    45b2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    45b4:	784b      	ldrb	r3, [r1, #1]
    45b6:	2b00      	cmp	r3, #0
    45b8:	d002      	beq.n	45c0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    45ba:	2380      	movs	r3, #128	; 0x80
    45bc:	02db      	lsls	r3, r3, #11
    45be:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    45c0:	7a4b      	ldrb	r3, [r1, #9]
    45c2:	2b00      	cmp	r3, #0
    45c4:	d002      	beq.n	45cc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    45c6:	2380      	movs	r3, #128	; 0x80
    45c8:	031b      	lsls	r3, r3, #12
    45ca:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    45cc:	6848      	ldr	r0, [r1, #4]
    45ce:	2801      	cmp	r0, #1
    45d0:	d910      	bls.n	45f4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    45d2:	1e43      	subs	r3, r0, #1
    45d4:	4218      	tst	r0, r3
    45d6:	d134      	bne.n	4642 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    45d8:	2802      	cmp	r0, #2
    45da:	d930      	bls.n	463e <system_gclk_gen_set_config+0x96>
    45dc:	2302      	movs	r3, #2
    45de:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    45e0:	3201      	adds	r2, #1
						mask <<= 1) {
    45e2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    45e4:	4298      	cmp	r0, r3
    45e6:	d8fb      	bhi.n	45e0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    45e8:	0212      	lsls	r2, r2, #8
    45ea:	4332      	orrs	r2, r6
    45ec:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    45ee:	2380      	movs	r3, #128	; 0x80
    45f0:	035b      	lsls	r3, r3, #13
    45f2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    45f4:	7a0b      	ldrb	r3, [r1, #8]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d002      	beq.n	4600 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    45fa:	2380      	movs	r3, #128	; 0x80
    45fc:	039b      	lsls	r3, r3, #14
    45fe:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4600:	4a13      	ldr	r2, [pc, #76]	; (4650 <system_gclk_gen_set_config+0xa8>)
    4602:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4604:	b25b      	sxtb	r3, r3
    4606:	2b00      	cmp	r3, #0
    4608:	dbfb      	blt.n	4602 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    460a:	4b12      	ldr	r3, [pc, #72]	; (4654 <system_gclk_gen_set_config+0xac>)
    460c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    460e:	4b12      	ldr	r3, [pc, #72]	; (4658 <system_gclk_gen_set_config+0xb0>)
    4610:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4612:	4a0f      	ldr	r2, [pc, #60]	; (4650 <system_gclk_gen_set_config+0xa8>)
    4614:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4616:	b25b      	sxtb	r3, r3
    4618:	2b00      	cmp	r3, #0
    461a:	dbfb      	blt.n	4614 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    461c:	4b0c      	ldr	r3, [pc, #48]	; (4650 <system_gclk_gen_set_config+0xa8>)
    461e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4620:	001a      	movs	r2, r3
    4622:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4624:	b25b      	sxtb	r3, r3
    4626:	2b00      	cmp	r3, #0
    4628:	dbfb      	blt.n	4622 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    462a:	4a09      	ldr	r2, [pc, #36]	; (4650 <system_gclk_gen_set_config+0xa8>)
    462c:	6853      	ldr	r3, [r2, #4]
    462e:	2180      	movs	r1, #128	; 0x80
    4630:	0249      	lsls	r1, r1, #9
    4632:	400b      	ands	r3, r1
    4634:	431d      	orrs	r5, r3
    4636:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4638:	4b08      	ldr	r3, [pc, #32]	; (465c <system_gclk_gen_set_config+0xb4>)
    463a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    463c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    463e:	2200      	movs	r2, #0
    4640:	e7d2      	b.n	45e8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4642:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4644:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4646:	2380      	movs	r3, #128	; 0x80
    4648:	029b      	lsls	r3, r3, #10
    464a:	431d      	orrs	r5, r3
    464c:	e7d2      	b.n	45f4 <system_gclk_gen_set_config+0x4c>
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	40000c00 	.word	0x40000c00
    4654:	000041f1 	.word	0x000041f1
    4658:	40000c08 	.word	0x40000c08
    465c:	00004231 	.word	0x00004231

00004660 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4660:	b510      	push	{r4, lr}
    4662:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4664:	4a0b      	ldr	r2, [pc, #44]	; (4694 <system_gclk_gen_enable+0x34>)
    4666:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4668:	b25b      	sxtb	r3, r3
    466a:	2b00      	cmp	r3, #0
    466c:	dbfb      	blt.n	4666 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    466e:	4b0a      	ldr	r3, [pc, #40]	; (4698 <system_gclk_gen_enable+0x38>)
    4670:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4672:	4b0a      	ldr	r3, [pc, #40]	; (469c <system_gclk_gen_enable+0x3c>)
    4674:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4676:	4a07      	ldr	r2, [pc, #28]	; (4694 <system_gclk_gen_enable+0x34>)
    4678:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    467a:	b25b      	sxtb	r3, r3
    467c:	2b00      	cmp	r3, #0
    467e:	dbfb      	blt.n	4678 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4680:	4a04      	ldr	r2, [pc, #16]	; (4694 <system_gclk_gen_enable+0x34>)
    4682:	6851      	ldr	r1, [r2, #4]
    4684:	2380      	movs	r3, #128	; 0x80
    4686:	025b      	lsls	r3, r3, #9
    4688:	430b      	orrs	r3, r1
    468a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    468c:	4b04      	ldr	r3, [pc, #16]	; (46a0 <system_gclk_gen_enable+0x40>)
    468e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4690:	bd10      	pop	{r4, pc}
    4692:	46c0      	nop			; (mov r8, r8)
    4694:	40000c00 	.word	0x40000c00
    4698:	000041f1 	.word	0x000041f1
    469c:	40000c04 	.word	0x40000c04
    46a0:	00004231 	.word	0x00004231

000046a4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    46a4:	b570      	push	{r4, r5, r6, lr}
    46a6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    46a8:	4a1a      	ldr	r2, [pc, #104]	; (4714 <system_gclk_gen_get_hz+0x70>)
    46aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    46ac:	b25b      	sxtb	r3, r3
    46ae:	2b00      	cmp	r3, #0
    46b0:	dbfb      	blt.n	46aa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    46b2:	4b19      	ldr	r3, [pc, #100]	; (4718 <system_gclk_gen_get_hz+0x74>)
    46b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    46b6:	4b19      	ldr	r3, [pc, #100]	; (471c <system_gclk_gen_get_hz+0x78>)
    46b8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    46ba:	4a16      	ldr	r2, [pc, #88]	; (4714 <system_gclk_gen_get_hz+0x70>)
    46bc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    46be:	b25b      	sxtb	r3, r3
    46c0:	2b00      	cmp	r3, #0
    46c2:	dbfb      	blt.n	46bc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    46c4:	4e13      	ldr	r6, [pc, #76]	; (4714 <system_gclk_gen_get_hz+0x70>)
    46c6:	6870      	ldr	r0, [r6, #4]
    46c8:	04c0      	lsls	r0, r0, #19
    46ca:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    46cc:	4b14      	ldr	r3, [pc, #80]	; (4720 <system_gclk_gen_get_hz+0x7c>)
    46ce:	4798      	blx	r3
    46d0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    46d2:	4b12      	ldr	r3, [pc, #72]	; (471c <system_gclk_gen_get_hz+0x78>)
    46d4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    46d6:	6876      	ldr	r6, [r6, #4]
    46d8:	02f6      	lsls	r6, r6, #11
    46da:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    46dc:	4b11      	ldr	r3, [pc, #68]	; (4724 <system_gclk_gen_get_hz+0x80>)
    46de:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    46e0:	4a0c      	ldr	r2, [pc, #48]	; (4714 <system_gclk_gen_get_hz+0x70>)
    46e2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    46e4:	b25b      	sxtb	r3, r3
    46e6:	2b00      	cmp	r3, #0
    46e8:	dbfb      	blt.n	46e2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    46ea:	4b0a      	ldr	r3, [pc, #40]	; (4714 <system_gclk_gen_get_hz+0x70>)
    46ec:	689c      	ldr	r4, [r3, #8]
    46ee:	0224      	lsls	r4, r4, #8
    46f0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    46f2:	4b0d      	ldr	r3, [pc, #52]	; (4728 <system_gclk_gen_get_hz+0x84>)
    46f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    46f6:	2e00      	cmp	r6, #0
    46f8:	d107      	bne.n	470a <system_gclk_gen_get_hz+0x66>
    46fa:	2c01      	cmp	r4, #1
    46fc:	d907      	bls.n	470e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    46fe:	0021      	movs	r1, r4
    4700:	0028      	movs	r0, r5
    4702:	4b0a      	ldr	r3, [pc, #40]	; (472c <system_gclk_gen_get_hz+0x88>)
    4704:	4798      	blx	r3
    4706:	0005      	movs	r5, r0
    4708:	e001      	b.n	470e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    470a:	3401      	adds	r4, #1
    470c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    470e:	0028      	movs	r0, r5
    4710:	bd70      	pop	{r4, r5, r6, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	40000c00 	.word	0x40000c00
    4718:	000041f1 	.word	0x000041f1
    471c:	40000c04 	.word	0x40000c04
    4720:	00004261 	.word	0x00004261
    4724:	40000c08 	.word	0x40000c08
    4728:	00004231 	.word	0x00004231
    472c:	00004ae1 	.word	0x00004ae1

00004730 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4730:	b510      	push	{r4, lr}
    4732:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4734:	4b06      	ldr	r3, [pc, #24]	; (4750 <system_gclk_chan_enable+0x20>)
    4736:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4738:	4b06      	ldr	r3, [pc, #24]	; (4754 <system_gclk_chan_enable+0x24>)
    473a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    473c:	4a06      	ldr	r2, [pc, #24]	; (4758 <system_gclk_chan_enable+0x28>)
    473e:	8853      	ldrh	r3, [r2, #2]
    4740:	2180      	movs	r1, #128	; 0x80
    4742:	01c9      	lsls	r1, r1, #7
    4744:	430b      	orrs	r3, r1
    4746:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4748:	4b04      	ldr	r3, [pc, #16]	; (475c <system_gclk_chan_enable+0x2c>)
    474a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    474c:	bd10      	pop	{r4, pc}
    474e:	46c0      	nop			; (mov r8, r8)
    4750:	000041f1 	.word	0x000041f1
    4754:	40000c02 	.word	0x40000c02
    4758:	40000c00 	.word	0x40000c00
    475c:	00004231 	.word	0x00004231

00004760 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4760:	b510      	push	{r4, lr}
    4762:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4764:	4b0f      	ldr	r3, [pc, #60]	; (47a4 <system_gclk_chan_disable+0x44>)
    4766:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4768:	4b0f      	ldr	r3, [pc, #60]	; (47a8 <system_gclk_chan_disable+0x48>)
    476a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    476c:	4a0f      	ldr	r2, [pc, #60]	; (47ac <system_gclk_chan_disable+0x4c>)
    476e:	8853      	ldrh	r3, [r2, #2]
    4770:	051b      	lsls	r3, r3, #20
    4772:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4774:	8853      	ldrh	r3, [r2, #2]
    4776:	490e      	ldr	r1, [pc, #56]	; (47b0 <system_gclk_chan_disable+0x50>)
    4778:	400b      	ands	r3, r1
    477a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    477c:	8853      	ldrh	r3, [r2, #2]
    477e:	490d      	ldr	r1, [pc, #52]	; (47b4 <system_gclk_chan_disable+0x54>)
    4780:	400b      	ands	r3, r1
    4782:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4784:	0011      	movs	r1, r2
    4786:	2280      	movs	r2, #128	; 0x80
    4788:	01d2      	lsls	r2, r2, #7
    478a:	884b      	ldrh	r3, [r1, #2]
    478c:	4213      	tst	r3, r2
    478e:	d1fc      	bne.n	478a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4790:	4906      	ldr	r1, [pc, #24]	; (47ac <system_gclk_chan_disable+0x4c>)
    4792:	884a      	ldrh	r2, [r1, #2]
    4794:	0203      	lsls	r3, r0, #8
    4796:	4806      	ldr	r0, [pc, #24]	; (47b0 <system_gclk_chan_disable+0x50>)
    4798:	4002      	ands	r2, r0
    479a:	4313      	orrs	r3, r2
    479c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    479e:	4b06      	ldr	r3, [pc, #24]	; (47b8 <system_gclk_chan_disable+0x58>)
    47a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    47a2:	bd10      	pop	{r4, pc}
    47a4:	000041f1 	.word	0x000041f1
    47a8:	40000c02 	.word	0x40000c02
    47ac:	40000c00 	.word	0x40000c00
    47b0:	fffff0ff 	.word	0xfffff0ff
    47b4:	ffffbfff 	.word	0xffffbfff
    47b8:	00004231 	.word	0x00004231

000047bc <system_gclk_chan_set_config>:
{
    47bc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    47be:	780c      	ldrb	r4, [r1, #0]
    47c0:	0224      	lsls	r4, r4, #8
    47c2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    47c4:	4b02      	ldr	r3, [pc, #8]	; (47d0 <system_gclk_chan_set_config+0x14>)
    47c6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    47c8:	b2a4      	uxth	r4, r4
    47ca:	4b02      	ldr	r3, [pc, #8]	; (47d4 <system_gclk_chan_set_config+0x18>)
    47cc:	805c      	strh	r4, [r3, #2]
}
    47ce:	bd10      	pop	{r4, pc}
    47d0:	00004761 	.word	0x00004761
    47d4:	40000c00 	.word	0x40000c00

000047d8 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    47d8:	b510      	push	{r4, lr}
    47da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    47dc:	4b06      	ldr	r3, [pc, #24]	; (47f8 <system_gclk_chan_lock+0x20>)
    47de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    47e0:	4b06      	ldr	r3, [pc, #24]	; (47fc <system_gclk_chan_lock+0x24>)
    47e2:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    47e4:	4a06      	ldr	r2, [pc, #24]	; (4800 <system_gclk_chan_lock+0x28>)
    47e6:	8853      	ldrh	r3, [r2, #2]
    47e8:	21c0      	movs	r1, #192	; 0xc0
    47ea:	0209      	lsls	r1, r1, #8
    47ec:	430b      	orrs	r3, r1
    47ee:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    47f0:	4b04      	ldr	r3, [pc, #16]	; (4804 <system_gclk_chan_lock+0x2c>)
    47f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    47f4:	bd10      	pop	{r4, pc}
    47f6:	46c0      	nop			; (mov r8, r8)
    47f8:	000041f1 	.word	0x000041f1
    47fc:	40000c02 	.word	0x40000c02
    4800:	40000c00 	.word	0x40000c00
    4804:	00004231 	.word	0x00004231

00004808 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4808:	b510      	push	{r4, lr}
    480a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    480c:	4b06      	ldr	r3, [pc, #24]	; (4828 <system_gclk_chan_get_hz+0x20>)
    480e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4810:	4b06      	ldr	r3, [pc, #24]	; (482c <system_gclk_chan_get_hz+0x24>)
    4812:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4814:	4b06      	ldr	r3, [pc, #24]	; (4830 <system_gclk_chan_get_hz+0x28>)
    4816:	885c      	ldrh	r4, [r3, #2]
    4818:	0524      	lsls	r4, r4, #20
    481a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    481c:	4b05      	ldr	r3, [pc, #20]	; (4834 <system_gclk_chan_get_hz+0x2c>)
    481e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4820:	0020      	movs	r0, r4
    4822:	4b05      	ldr	r3, [pc, #20]	; (4838 <system_gclk_chan_get_hz+0x30>)
    4824:	4798      	blx	r3
}
    4826:	bd10      	pop	{r4, pc}
    4828:	000041f1 	.word	0x000041f1
    482c:	40000c02 	.word	0x40000c02
    4830:	40000c00 	.word	0x40000c00
    4834:	00004231 	.word	0x00004231
    4838:	000046a5 	.word	0x000046a5

0000483c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    483c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    483e:	78d3      	ldrb	r3, [r2, #3]
    4840:	2b00      	cmp	r3, #0
    4842:	d135      	bne.n	48b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4844:	7813      	ldrb	r3, [r2, #0]
    4846:	2b80      	cmp	r3, #128	; 0x80
    4848:	d029      	beq.n	489e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    484a:	061b      	lsls	r3, r3, #24
    484c:	2480      	movs	r4, #128	; 0x80
    484e:	0264      	lsls	r4, r4, #9
    4850:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4852:	7854      	ldrb	r4, [r2, #1]
    4854:	2502      	movs	r5, #2
    4856:	43ac      	bics	r4, r5
    4858:	d106      	bne.n	4868 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    485a:	7894      	ldrb	r4, [r2, #2]
    485c:	2c00      	cmp	r4, #0
    485e:	d120      	bne.n	48a2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4860:	2480      	movs	r4, #128	; 0x80
    4862:	02a4      	lsls	r4, r4, #10
    4864:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4866:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4868:	7854      	ldrb	r4, [r2, #1]
    486a:	3c01      	subs	r4, #1
    486c:	2c01      	cmp	r4, #1
    486e:	d91c      	bls.n	48aa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4870:	040d      	lsls	r5, r1, #16
    4872:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4874:	24a0      	movs	r4, #160	; 0xa0
    4876:	05e4      	lsls	r4, r4, #23
    4878:	432c      	orrs	r4, r5
    487a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    487c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    487e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4880:	24d0      	movs	r4, #208	; 0xd0
    4882:	0624      	lsls	r4, r4, #24
    4884:	432c      	orrs	r4, r5
    4886:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4888:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    488a:	78d4      	ldrb	r4, [r2, #3]
    488c:	2c00      	cmp	r4, #0
    488e:	d122      	bne.n	48d6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4890:	035b      	lsls	r3, r3, #13
    4892:	d51c      	bpl.n	48ce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4894:	7893      	ldrb	r3, [r2, #2]
    4896:	2b01      	cmp	r3, #1
    4898:	d01e      	beq.n	48d8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    489a:	6141      	str	r1, [r0, #20]
    489c:	e017      	b.n	48ce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    489e:	2300      	movs	r3, #0
    48a0:	e7d7      	b.n	4852 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    48a2:	24c0      	movs	r4, #192	; 0xc0
    48a4:	02e4      	lsls	r4, r4, #11
    48a6:	4323      	orrs	r3, r4
    48a8:	e7dd      	b.n	4866 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    48aa:	4c0d      	ldr	r4, [pc, #52]	; (48e0 <_system_pinmux_config+0xa4>)
    48ac:	4023      	ands	r3, r4
    48ae:	e7df      	b.n	4870 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    48b0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    48b2:	040c      	lsls	r4, r1, #16
    48b4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    48b6:	23a0      	movs	r3, #160	; 0xa0
    48b8:	05db      	lsls	r3, r3, #23
    48ba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    48bc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    48be:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    48c0:	23d0      	movs	r3, #208	; 0xd0
    48c2:	061b      	lsls	r3, r3, #24
    48c4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    48c6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    48c8:	78d3      	ldrb	r3, [r2, #3]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d103      	bne.n	48d6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    48ce:	7853      	ldrb	r3, [r2, #1]
    48d0:	3b01      	subs	r3, #1
    48d2:	2b01      	cmp	r3, #1
    48d4:	d902      	bls.n	48dc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    48d6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    48d8:	6181      	str	r1, [r0, #24]
    48da:	e7f8      	b.n	48ce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    48dc:	6081      	str	r1, [r0, #8]
}
    48de:	e7fa      	b.n	48d6 <_system_pinmux_config+0x9a>
    48e0:	fffbffff 	.word	0xfffbffff

000048e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    48e4:	b510      	push	{r4, lr}
    48e6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    48e8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    48ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    48ec:	2900      	cmp	r1, #0
    48ee:	d104      	bne.n	48fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    48f0:	0943      	lsrs	r3, r0, #5
    48f2:	01db      	lsls	r3, r3, #7
    48f4:	4905      	ldr	r1, [pc, #20]	; (490c <system_pinmux_pin_set_config+0x28>)
    48f6:	468c      	mov	ip, r1
    48f8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    48fa:	241f      	movs	r4, #31
    48fc:	4020      	ands	r0, r4
    48fe:	2101      	movs	r1, #1
    4900:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4902:	0018      	movs	r0, r3
    4904:	4b02      	ldr	r3, [pc, #8]	; (4910 <system_pinmux_pin_set_config+0x2c>)
    4906:	4798      	blx	r3
}
    4908:	bd10      	pop	{r4, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	41004400 	.word	0x41004400
    4910:	0000483d 	.word	0x0000483d

00004914 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4914:	4770      	bx	lr
	...

00004918 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4918:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    491a:	4b05      	ldr	r3, [pc, #20]	; (4930 <system_init+0x18>)
    491c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    491e:	4b05      	ldr	r3, [pc, #20]	; (4934 <system_init+0x1c>)
    4920:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4922:	4b05      	ldr	r3, [pc, #20]	; (4938 <system_init+0x20>)
    4924:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4926:	4b05      	ldr	r3, [pc, #20]	; (493c <system_init+0x24>)
    4928:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <system_init+0x28>)
    492c:	4798      	blx	r3
}
    492e:	bd10      	pop	{r4, pc}
    4930:	00004459 	.word	0x00004459
    4934:	00003e05 	.word	0x00003e05
    4938:	00004915 	.word	0x00004915
    493c:	00004915 	.word	0x00004915
    4940:	00004915 	.word	0x00004915

00004944 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4944:	e7fe      	b.n	4944 <Dummy_Handler>
	...

00004948 <Reset_Handler>:
{
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    494a:	4a2a      	ldr	r2, [pc, #168]	; (49f4 <Reset_Handler+0xac>)
    494c:	4b2a      	ldr	r3, [pc, #168]	; (49f8 <Reset_Handler+0xb0>)
    494e:	429a      	cmp	r2, r3
    4950:	d011      	beq.n	4976 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4952:	001a      	movs	r2, r3
    4954:	4b29      	ldr	r3, [pc, #164]	; (49fc <Reset_Handler+0xb4>)
    4956:	429a      	cmp	r2, r3
    4958:	d20d      	bcs.n	4976 <Reset_Handler+0x2e>
    495a:	4a29      	ldr	r2, [pc, #164]	; (4a00 <Reset_Handler+0xb8>)
    495c:	3303      	adds	r3, #3
    495e:	1a9b      	subs	r3, r3, r2
    4960:	089b      	lsrs	r3, r3, #2
    4962:	3301      	adds	r3, #1
    4964:	009b      	lsls	r3, r3, #2
    4966:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4968:	4823      	ldr	r0, [pc, #140]	; (49f8 <Reset_Handler+0xb0>)
    496a:	4922      	ldr	r1, [pc, #136]	; (49f4 <Reset_Handler+0xac>)
    496c:	588c      	ldr	r4, [r1, r2]
    496e:	5084      	str	r4, [r0, r2]
    4970:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4972:	429a      	cmp	r2, r3
    4974:	d1fa      	bne.n	496c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4976:	4a23      	ldr	r2, [pc, #140]	; (4a04 <Reset_Handler+0xbc>)
    4978:	4b23      	ldr	r3, [pc, #140]	; (4a08 <Reset_Handler+0xc0>)
    497a:	429a      	cmp	r2, r3
    497c:	d20a      	bcs.n	4994 <Reset_Handler+0x4c>
    497e:	43d3      	mvns	r3, r2
    4980:	4921      	ldr	r1, [pc, #132]	; (4a08 <Reset_Handler+0xc0>)
    4982:	185b      	adds	r3, r3, r1
    4984:	2103      	movs	r1, #3
    4986:	438b      	bics	r3, r1
    4988:	3304      	adds	r3, #4
    498a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    498c:	2100      	movs	r1, #0
    498e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4990:	4293      	cmp	r3, r2
    4992:	d1fc      	bne.n	498e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4994:	4a1d      	ldr	r2, [pc, #116]	; (4a0c <Reset_Handler+0xc4>)
    4996:	21ff      	movs	r1, #255	; 0xff
    4998:	4b1d      	ldr	r3, [pc, #116]	; (4a10 <Reset_Handler+0xc8>)
    499a:	438b      	bics	r3, r1
    499c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    499e:	39fd      	subs	r1, #253	; 0xfd
    49a0:	2390      	movs	r3, #144	; 0x90
    49a2:	005b      	lsls	r3, r3, #1
    49a4:	4a1b      	ldr	r2, [pc, #108]	; (4a14 <Reset_Handler+0xcc>)
    49a6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    49a8:	4a1b      	ldr	r2, [pc, #108]	; (4a18 <Reset_Handler+0xd0>)
    49aa:	78d3      	ldrb	r3, [r2, #3]
    49ac:	2503      	movs	r5, #3
    49ae:	43ab      	bics	r3, r5
    49b0:	2402      	movs	r4, #2
    49b2:	4323      	orrs	r3, r4
    49b4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    49b6:	78d3      	ldrb	r3, [r2, #3]
    49b8:	270c      	movs	r7, #12
    49ba:	43bb      	bics	r3, r7
    49bc:	2608      	movs	r6, #8
    49be:	4333      	orrs	r3, r6
    49c0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    49c2:	4b16      	ldr	r3, [pc, #88]	; (4a1c <Reset_Handler+0xd4>)
    49c4:	7b98      	ldrb	r0, [r3, #14]
    49c6:	2230      	movs	r2, #48	; 0x30
    49c8:	4390      	bics	r0, r2
    49ca:	2220      	movs	r2, #32
    49cc:	4310      	orrs	r0, r2
    49ce:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    49d0:	7b99      	ldrb	r1, [r3, #14]
    49d2:	43b9      	bics	r1, r7
    49d4:	4331      	orrs	r1, r6
    49d6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    49d8:	7b9a      	ldrb	r2, [r3, #14]
    49da:	43aa      	bics	r2, r5
    49dc:	4322      	orrs	r2, r4
    49de:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    49e0:	4a0f      	ldr	r2, [pc, #60]	; (4a20 <Reset_Handler+0xd8>)
    49e2:	6853      	ldr	r3, [r2, #4]
    49e4:	2180      	movs	r1, #128	; 0x80
    49e6:	430b      	orrs	r3, r1
    49e8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    49ea:	4b0e      	ldr	r3, [pc, #56]	; (4a24 <Reset_Handler+0xdc>)
    49ec:	4798      	blx	r3
        main();
    49ee:	4b0e      	ldr	r3, [pc, #56]	; (4a28 <Reset_Handler+0xe0>)
    49f0:	4798      	blx	r3
    49f2:	e7fe      	b.n	49f2 <Reset_Handler+0xaa>
    49f4:	00008538 	.word	0x00008538
    49f8:	20000000 	.word	0x20000000
    49fc:	20000074 	.word	0x20000074
    4a00:	20000004 	.word	0x20000004
    4a04:	20000074 	.word	0x20000074
    4a08:	2000535c 	.word	0x2000535c
    4a0c:	e000ed00 	.word	0xe000ed00
    4a10:	00000000 	.word	0x00000000
    4a14:	41007000 	.word	0x41007000
    4a18:	41005000 	.word	0x41005000
    4a1c:	41004800 	.word	0x41004800
    4a20:	41004000 	.word	0x41004000
    4a24:	00007805 	.word	0x00007805
    4a28:	00004a51 	.word	0x00004a51

00004a2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4a2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4a2e:	4a06      	ldr	r2, [pc, #24]	; (4a48 <_sbrk+0x1c>)
    4a30:	6812      	ldr	r2, [r2, #0]
    4a32:	2a00      	cmp	r2, #0
    4a34:	d004      	beq.n	4a40 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4a36:	4a04      	ldr	r2, [pc, #16]	; (4a48 <_sbrk+0x1c>)
    4a38:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4a3a:	18c3      	adds	r3, r0, r3
    4a3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4a3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4a40:	4902      	ldr	r1, [pc, #8]	; (4a4c <_sbrk+0x20>)
    4a42:	4a01      	ldr	r2, [pc, #4]	; (4a48 <_sbrk+0x1c>)
    4a44:	6011      	str	r1, [r2, #0]
    4a46:	e7f6      	b.n	4a36 <_sbrk+0xa>
    4a48:	200052e8 	.word	0x200052e8
    4a4c:	20007360 	.word	0x20007360

00004a50 <main>:
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
	wdt_set_config(&config_wdt);
}

int main (void)
{
    4a50:	b510      	push	{r4, lr}
    4a52:	b082      	sub	sp, #8
	system_init();
    4a54:	4b14      	ldr	r3, [pc, #80]	; (4aa8 <main+0x58>)
    4a56:	4798      	blx	r3
	delay_init();
    4a58:	4b14      	ldr	r3, [pc, #80]	; (4aac <main+0x5c>)
    4a5a:	4798      	blx	r3
	config->enable               = true;
    4a5c:	2301      	movs	r3, #1
    4a5e:	466a      	mov	r2, sp
    4a60:	7053      	strb	r3, [r2, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    4a62:	2204      	movs	r2, #4
    4a64:	4669      	mov	r1, sp
    4a66:	708a      	strb	r2, [r1, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    4a68:	3208      	adds	r2, #8
    4a6a:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    4a6c:	2200      	movs	r2, #0
    4a6e:	710a      	strb	r2, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    4a70:	714a      	strb	r2, [r1, #5]
	config_wdt.always_on = true; // Cannot be turned off
    4a72:	700b      	strb	r3, [r1, #0]
	wdt_set_config(&config_wdt);
    4a74:	4668      	mov	r0, sp
    4a76:	4b0e      	ldr	r3, [pc, #56]	; (4ab0 <main+0x60>)
    4a78:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    4a7a:	2103      	movs	r1, #3
    4a7c:	2080      	movs	r0, #128	; 0x80
    4a7e:	0040      	lsls	r0, r0, #1
    4a80:	4b0c      	ldr	r3, [pc, #48]	; (4ab4 <main+0x64>)
    4a82:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    4a84:	2480      	movs	r4, #128	; 0x80
    4a86:	00a4      	lsls	r4, r4, #2
    4a88:	2102      	movs	r1, #2
    4a8a:	0020      	movs	r0, r4
    4a8c:	4b0a      	ldr	r3, [pc, #40]	; (4ab8 <main+0x68>)
    4a8e:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    4a90:	2102      	movs	r1, #2
    4a92:	0020      	movs	r0, r4
    4a94:	4b09      	ldr	r3, [pc, #36]	; (4abc <main+0x6c>)
    4a96:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    4a98:	2101      	movs	r1, #1
    4a9a:	0020      	movs	r0, r4
    4a9c:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <main+0x70>)
    4a9e:	4798      	blx	r3

	vTaskStartScheduler();
    4aa0:	4b08      	ldr	r3, [pc, #32]	; (4ac4 <main+0x74>)
    4aa2:	4798      	blx	r3
    4aa4:	e7fe      	b.n	4aa4 <main+0x54>
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	00004919 	.word	0x00004919
    4aac:	00003e01 	.word	0x00003e01
    4ab0:	00003a01 	.word	0x00003a01
    4ab4:	000023a1 	.word	0x000023a1
    4ab8:	00002105 	.word	0x00002105
    4abc:	000024b5 	.word	0x000024b5
    4ac0:	000021ad 	.word	0x000021ad
    4ac4:	00002f79 	.word	0x00002f79

00004ac8 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    4ac8:	b672      	cpsid	i
    4aca:	e7fe      	b.n	4aca <vApplicationMallocFailedHook+0x2>

00004acc <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    4acc:	b510      	push	{r4, lr}
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    4ace:	4b01      	ldr	r3, [pc, #4]	; (4ad4 <vApplicationIdleHook+0x8>)
    4ad0:	4798      	blx	r3
}
    4ad2:	bd10      	pop	{r4, pc}
    4ad4:	00003b01 	.word	0x00003b01

00004ad8 <vApplicationTickHook>:

void vApplicationTickHook(void)
{
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    4ad8:	4770      	bx	lr

00004ada <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    4ada:	b672      	cpsid	i
    4adc:	e7fe      	b.n	4adc <vApplicationStackOverflowHook+0x2>

00004ade <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    4ade:	e7fe      	b.n	4ade <HardFault_Handler>

00004ae0 <__udivsi3>:
    4ae0:	2200      	movs	r2, #0
    4ae2:	0843      	lsrs	r3, r0, #1
    4ae4:	428b      	cmp	r3, r1
    4ae6:	d374      	bcc.n	4bd2 <__udivsi3+0xf2>
    4ae8:	0903      	lsrs	r3, r0, #4
    4aea:	428b      	cmp	r3, r1
    4aec:	d35f      	bcc.n	4bae <__udivsi3+0xce>
    4aee:	0a03      	lsrs	r3, r0, #8
    4af0:	428b      	cmp	r3, r1
    4af2:	d344      	bcc.n	4b7e <__udivsi3+0x9e>
    4af4:	0b03      	lsrs	r3, r0, #12
    4af6:	428b      	cmp	r3, r1
    4af8:	d328      	bcc.n	4b4c <__udivsi3+0x6c>
    4afa:	0c03      	lsrs	r3, r0, #16
    4afc:	428b      	cmp	r3, r1
    4afe:	d30d      	bcc.n	4b1c <__udivsi3+0x3c>
    4b00:	22ff      	movs	r2, #255	; 0xff
    4b02:	0209      	lsls	r1, r1, #8
    4b04:	ba12      	rev	r2, r2
    4b06:	0c03      	lsrs	r3, r0, #16
    4b08:	428b      	cmp	r3, r1
    4b0a:	d302      	bcc.n	4b12 <__udivsi3+0x32>
    4b0c:	1212      	asrs	r2, r2, #8
    4b0e:	0209      	lsls	r1, r1, #8
    4b10:	d065      	beq.n	4bde <__udivsi3+0xfe>
    4b12:	0b03      	lsrs	r3, r0, #12
    4b14:	428b      	cmp	r3, r1
    4b16:	d319      	bcc.n	4b4c <__udivsi3+0x6c>
    4b18:	e000      	b.n	4b1c <__udivsi3+0x3c>
    4b1a:	0a09      	lsrs	r1, r1, #8
    4b1c:	0bc3      	lsrs	r3, r0, #15
    4b1e:	428b      	cmp	r3, r1
    4b20:	d301      	bcc.n	4b26 <__udivsi3+0x46>
    4b22:	03cb      	lsls	r3, r1, #15
    4b24:	1ac0      	subs	r0, r0, r3
    4b26:	4152      	adcs	r2, r2
    4b28:	0b83      	lsrs	r3, r0, #14
    4b2a:	428b      	cmp	r3, r1
    4b2c:	d301      	bcc.n	4b32 <__udivsi3+0x52>
    4b2e:	038b      	lsls	r3, r1, #14
    4b30:	1ac0      	subs	r0, r0, r3
    4b32:	4152      	adcs	r2, r2
    4b34:	0b43      	lsrs	r3, r0, #13
    4b36:	428b      	cmp	r3, r1
    4b38:	d301      	bcc.n	4b3e <__udivsi3+0x5e>
    4b3a:	034b      	lsls	r3, r1, #13
    4b3c:	1ac0      	subs	r0, r0, r3
    4b3e:	4152      	adcs	r2, r2
    4b40:	0b03      	lsrs	r3, r0, #12
    4b42:	428b      	cmp	r3, r1
    4b44:	d301      	bcc.n	4b4a <__udivsi3+0x6a>
    4b46:	030b      	lsls	r3, r1, #12
    4b48:	1ac0      	subs	r0, r0, r3
    4b4a:	4152      	adcs	r2, r2
    4b4c:	0ac3      	lsrs	r3, r0, #11
    4b4e:	428b      	cmp	r3, r1
    4b50:	d301      	bcc.n	4b56 <__udivsi3+0x76>
    4b52:	02cb      	lsls	r3, r1, #11
    4b54:	1ac0      	subs	r0, r0, r3
    4b56:	4152      	adcs	r2, r2
    4b58:	0a83      	lsrs	r3, r0, #10
    4b5a:	428b      	cmp	r3, r1
    4b5c:	d301      	bcc.n	4b62 <__udivsi3+0x82>
    4b5e:	028b      	lsls	r3, r1, #10
    4b60:	1ac0      	subs	r0, r0, r3
    4b62:	4152      	adcs	r2, r2
    4b64:	0a43      	lsrs	r3, r0, #9
    4b66:	428b      	cmp	r3, r1
    4b68:	d301      	bcc.n	4b6e <__udivsi3+0x8e>
    4b6a:	024b      	lsls	r3, r1, #9
    4b6c:	1ac0      	subs	r0, r0, r3
    4b6e:	4152      	adcs	r2, r2
    4b70:	0a03      	lsrs	r3, r0, #8
    4b72:	428b      	cmp	r3, r1
    4b74:	d301      	bcc.n	4b7a <__udivsi3+0x9a>
    4b76:	020b      	lsls	r3, r1, #8
    4b78:	1ac0      	subs	r0, r0, r3
    4b7a:	4152      	adcs	r2, r2
    4b7c:	d2cd      	bcs.n	4b1a <__udivsi3+0x3a>
    4b7e:	09c3      	lsrs	r3, r0, #7
    4b80:	428b      	cmp	r3, r1
    4b82:	d301      	bcc.n	4b88 <__udivsi3+0xa8>
    4b84:	01cb      	lsls	r3, r1, #7
    4b86:	1ac0      	subs	r0, r0, r3
    4b88:	4152      	adcs	r2, r2
    4b8a:	0983      	lsrs	r3, r0, #6
    4b8c:	428b      	cmp	r3, r1
    4b8e:	d301      	bcc.n	4b94 <__udivsi3+0xb4>
    4b90:	018b      	lsls	r3, r1, #6
    4b92:	1ac0      	subs	r0, r0, r3
    4b94:	4152      	adcs	r2, r2
    4b96:	0943      	lsrs	r3, r0, #5
    4b98:	428b      	cmp	r3, r1
    4b9a:	d301      	bcc.n	4ba0 <__udivsi3+0xc0>
    4b9c:	014b      	lsls	r3, r1, #5
    4b9e:	1ac0      	subs	r0, r0, r3
    4ba0:	4152      	adcs	r2, r2
    4ba2:	0903      	lsrs	r3, r0, #4
    4ba4:	428b      	cmp	r3, r1
    4ba6:	d301      	bcc.n	4bac <__udivsi3+0xcc>
    4ba8:	010b      	lsls	r3, r1, #4
    4baa:	1ac0      	subs	r0, r0, r3
    4bac:	4152      	adcs	r2, r2
    4bae:	08c3      	lsrs	r3, r0, #3
    4bb0:	428b      	cmp	r3, r1
    4bb2:	d301      	bcc.n	4bb8 <__udivsi3+0xd8>
    4bb4:	00cb      	lsls	r3, r1, #3
    4bb6:	1ac0      	subs	r0, r0, r3
    4bb8:	4152      	adcs	r2, r2
    4bba:	0883      	lsrs	r3, r0, #2
    4bbc:	428b      	cmp	r3, r1
    4bbe:	d301      	bcc.n	4bc4 <__udivsi3+0xe4>
    4bc0:	008b      	lsls	r3, r1, #2
    4bc2:	1ac0      	subs	r0, r0, r3
    4bc4:	4152      	adcs	r2, r2
    4bc6:	0843      	lsrs	r3, r0, #1
    4bc8:	428b      	cmp	r3, r1
    4bca:	d301      	bcc.n	4bd0 <__udivsi3+0xf0>
    4bcc:	004b      	lsls	r3, r1, #1
    4bce:	1ac0      	subs	r0, r0, r3
    4bd0:	4152      	adcs	r2, r2
    4bd2:	1a41      	subs	r1, r0, r1
    4bd4:	d200      	bcs.n	4bd8 <__udivsi3+0xf8>
    4bd6:	4601      	mov	r1, r0
    4bd8:	4152      	adcs	r2, r2
    4bda:	4610      	mov	r0, r2
    4bdc:	4770      	bx	lr
    4bde:	e7ff      	b.n	4be0 <__udivsi3+0x100>
    4be0:	b501      	push	{r0, lr}
    4be2:	2000      	movs	r0, #0
    4be4:	f000 f806 	bl	4bf4 <__aeabi_idiv0>
    4be8:	bd02      	pop	{r1, pc}
    4bea:	46c0      	nop			; (mov r8, r8)

00004bec <__aeabi_uidivmod>:
    4bec:	2900      	cmp	r1, #0
    4bee:	d0f7      	beq.n	4be0 <__udivsi3+0x100>
    4bf0:	e776      	b.n	4ae0 <__udivsi3>
    4bf2:	4770      	bx	lr

00004bf4 <__aeabi_idiv0>:
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			; (mov r8, r8)

00004bf8 <__aeabi_cdrcmple>:
    4bf8:	4684      	mov	ip, r0
    4bfa:	1c10      	adds	r0, r2, #0
    4bfc:	4662      	mov	r2, ip
    4bfe:	468c      	mov	ip, r1
    4c00:	1c19      	adds	r1, r3, #0
    4c02:	4663      	mov	r3, ip
    4c04:	e000      	b.n	4c08 <__aeabi_cdcmpeq>
    4c06:	46c0      	nop			; (mov r8, r8)

00004c08 <__aeabi_cdcmpeq>:
    4c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4c0a:	f001 fe5b 	bl	68c4 <__ledf2>
    4c0e:	2800      	cmp	r0, #0
    4c10:	d401      	bmi.n	4c16 <__aeabi_cdcmpeq+0xe>
    4c12:	2100      	movs	r1, #0
    4c14:	42c8      	cmn	r0, r1
    4c16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004c18 <__aeabi_dcmpeq>:
    4c18:	b510      	push	{r4, lr}
    4c1a:	f001 fdb5 	bl	6788 <__eqdf2>
    4c1e:	4240      	negs	r0, r0
    4c20:	3001      	adds	r0, #1
    4c22:	bd10      	pop	{r4, pc}

00004c24 <__aeabi_dcmplt>:
    4c24:	b510      	push	{r4, lr}
    4c26:	f001 fe4d 	bl	68c4 <__ledf2>
    4c2a:	2800      	cmp	r0, #0
    4c2c:	db01      	blt.n	4c32 <__aeabi_dcmplt+0xe>
    4c2e:	2000      	movs	r0, #0
    4c30:	bd10      	pop	{r4, pc}
    4c32:	2001      	movs	r0, #1
    4c34:	bd10      	pop	{r4, pc}
    4c36:	46c0      	nop			; (mov r8, r8)

00004c38 <__aeabi_dcmple>:
    4c38:	b510      	push	{r4, lr}
    4c3a:	f001 fe43 	bl	68c4 <__ledf2>
    4c3e:	2800      	cmp	r0, #0
    4c40:	dd01      	ble.n	4c46 <__aeabi_dcmple+0xe>
    4c42:	2000      	movs	r0, #0
    4c44:	bd10      	pop	{r4, pc}
    4c46:	2001      	movs	r0, #1
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)

00004c4c <__aeabi_dcmpgt>:
    4c4c:	b510      	push	{r4, lr}
    4c4e:	f001 fdd5 	bl	67fc <__gedf2>
    4c52:	2800      	cmp	r0, #0
    4c54:	dc01      	bgt.n	4c5a <__aeabi_dcmpgt+0xe>
    4c56:	2000      	movs	r0, #0
    4c58:	bd10      	pop	{r4, pc}
    4c5a:	2001      	movs	r0, #1
    4c5c:	bd10      	pop	{r4, pc}
    4c5e:	46c0      	nop			; (mov r8, r8)

00004c60 <__aeabi_dcmpge>:
    4c60:	b510      	push	{r4, lr}
    4c62:	f001 fdcb 	bl	67fc <__gedf2>
    4c66:	2800      	cmp	r0, #0
    4c68:	da01      	bge.n	4c6e <__aeabi_dcmpge+0xe>
    4c6a:	2000      	movs	r0, #0
    4c6c:	bd10      	pop	{r4, pc}
    4c6e:	2001      	movs	r0, #1
    4c70:	bd10      	pop	{r4, pc}
    4c72:	46c0      	nop			; (mov r8, r8)

00004c74 <__aeabi_cfrcmple>:
    4c74:	4684      	mov	ip, r0
    4c76:	1c08      	adds	r0, r1, #0
    4c78:	4661      	mov	r1, ip
    4c7a:	e7ff      	b.n	4c7c <__aeabi_cfcmpeq>

00004c7c <__aeabi_cfcmpeq>:
    4c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4c7e:	f000 fb8b 	bl	5398 <__lesf2>
    4c82:	2800      	cmp	r0, #0
    4c84:	d401      	bmi.n	4c8a <__aeabi_cfcmpeq+0xe>
    4c86:	2100      	movs	r1, #0
    4c88:	42c8      	cmn	r0, r1
    4c8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004c8c <__aeabi_fcmpeq>:
    4c8c:	b510      	push	{r4, lr}
    4c8e:	f000 fb1d 	bl	52cc <__eqsf2>
    4c92:	4240      	negs	r0, r0
    4c94:	3001      	adds	r0, #1
    4c96:	bd10      	pop	{r4, pc}

00004c98 <__aeabi_fcmplt>:
    4c98:	b510      	push	{r4, lr}
    4c9a:	f000 fb7d 	bl	5398 <__lesf2>
    4c9e:	2800      	cmp	r0, #0
    4ca0:	db01      	blt.n	4ca6 <__aeabi_fcmplt+0xe>
    4ca2:	2000      	movs	r0, #0
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	2001      	movs	r0, #1
    4ca8:	bd10      	pop	{r4, pc}
    4caa:	46c0      	nop			; (mov r8, r8)

00004cac <__aeabi_fcmple>:
    4cac:	b510      	push	{r4, lr}
    4cae:	f000 fb73 	bl	5398 <__lesf2>
    4cb2:	2800      	cmp	r0, #0
    4cb4:	dd01      	ble.n	4cba <__aeabi_fcmple+0xe>
    4cb6:	2000      	movs	r0, #0
    4cb8:	bd10      	pop	{r4, pc}
    4cba:	2001      	movs	r0, #1
    4cbc:	bd10      	pop	{r4, pc}
    4cbe:	46c0      	nop			; (mov r8, r8)

00004cc0 <__aeabi_fcmpgt>:
    4cc0:	b510      	push	{r4, lr}
    4cc2:	f000 fb29 	bl	5318 <__gesf2>
    4cc6:	2800      	cmp	r0, #0
    4cc8:	dc01      	bgt.n	4cce <__aeabi_fcmpgt+0xe>
    4cca:	2000      	movs	r0, #0
    4ccc:	bd10      	pop	{r4, pc}
    4cce:	2001      	movs	r0, #1
    4cd0:	bd10      	pop	{r4, pc}
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <__aeabi_fcmpge>:
    4cd4:	b510      	push	{r4, lr}
    4cd6:	f000 fb1f 	bl	5318 <__gesf2>
    4cda:	2800      	cmp	r0, #0
    4cdc:	da01      	bge.n	4ce2 <__aeabi_fcmpge+0xe>
    4cde:	2000      	movs	r0, #0
    4ce0:	bd10      	pop	{r4, pc}
    4ce2:	2001      	movs	r0, #1
    4ce4:	bd10      	pop	{r4, pc}
    4ce6:	46c0      	nop			; (mov r8, r8)

00004ce8 <__aeabi_f2uiz>:
    4ce8:	219e      	movs	r1, #158	; 0x9e
    4cea:	b510      	push	{r4, lr}
    4cec:	05c9      	lsls	r1, r1, #23
    4cee:	1c04      	adds	r4, r0, #0
    4cf0:	f7ff fff0 	bl	4cd4 <__aeabi_fcmpge>
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d103      	bne.n	4d00 <__aeabi_f2uiz+0x18>
    4cf8:	1c20      	adds	r0, r4, #0
    4cfa:	f000 fe4b 	bl	5994 <__aeabi_f2iz>
    4cfe:	bd10      	pop	{r4, pc}
    4d00:	219e      	movs	r1, #158	; 0x9e
    4d02:	1c20      	adds	r0, r4, #0
    4d04:	05c9      	lsls	r1, r1, #23
    4d06:	f000 fca9 	bl	565c <__aeabi_fsub>
    4d0a:	f000 fe43 	bl	5994 <__aeabi_f2iz>
    4d0e:	2380      	movs	r3, #128	; 0x80
    4d10:	061b      	lsls	r3, r3, #24
    4d12:	469c      	mov	ip, r3
    4d14:	4460      	add	r0, ip
    4d16:	e7f2      	b.n	4cfe <__aeabi_f2uiz+0x16>

00004d18 <__aeabi_fadd>:
    4d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d1a:	46c6      	mov	lr, r8
    4d1c:	024e      	lsls	r6, r1, #9
    4d1e:	0247      	lsls	r7, r0, #9
    4d20:	0a76      	lsrs	r6, r6, #9
    4d22:	0a7b      	lsrs	r3, r7, #9
    4d24:	0044      	lsls	r4, r0, #1
    4d26:	0fc5      	lsrs	r5, r0, #31
    4d28:	00f7      	lsls	r7, r6, #3
    4d2a:	0048      	lsls	r0, r1, #1
    4d2c:	4698      	mov	r8, r3
    4d2e:	b500      	push	{lr}
    4d30:	0e24      	lsrs	r4, r4, #24
    4d32:	002a      	movs	r2, r5
    4d34:	00db      	lsls	r3, r3, #3
    4d36:	0e00      	lsrs	r0, r0, #24
    4d38:	0fc9      	lsrs	r1, r1, #31
    4d3a:	46bc      	mov	ip, r7
    4d3c:	428d      	cmp	r5, r1
    4d3e:	d067      	beq.n	4e10 <__aeabi_fadd+0xf8>
    4d40:	1a22      	subs	r2, r4, r0
    4d42:	2a00      	cmp	r2, #0
    4d44:	dc00      	bgt.n	4d48 <__aeabi_fadd+0x30>
    4d46:	e0a5      	b.n	4e94 <__aeabi_fadd+0x17c>
    4d48:	2800      	cmp	r0, #0
    4d4a:	d13a      	bne.n	4dc2 <__aeabi_fadd+0xaa>
    4d4c:	2f00      	cmp	r7, #0
    4d4e:	d100      	bne.n	4d52 <__aeabi_fadd+0x3a>
    4d50:	e093      	b.n	4e7a <__aeabi_fadd+0x162>
    4d52:	1e51      	subs	r1, r2, #1
    4d54:	2900      	cmp	r1, #0
    4d56:	d000      	beq.n	4d5a <__aeabi_fadd+0x42>
    4d58:	e0bc      	b.n	4ed4 <__aeabi_fadd+0x1bc>
    4d5a:	2401      	movs	r4, #1
    4d5c:	1bdb      	subs	r3, r3, r7
    4d5e:	015a      	lsls	r2, r3, #5
    4d60:	d546      	bpl.n	4df0 <__aeabi_fadd+0xd8>
    4d62:	019b      	lsls	r3, r3, #6
    4d64:	099e      	lsrs	r6, r3, #6
    4d66:	0030      	movs	r0, r6
    4d68:	f002 fd2e 	bl	77c8 <__clzsi2>
    4d6c:	3805      	subs	r0, #5
    4d6e:	4086      	lsls	r6, r0
    4d70:	4284      	cmp	r4, r0
    4d72:	dd00      	ble.n	4d76 <__aeabi_fadd+0x5e>
    4d74:	e09d      	b.n	4eb2 <__aeabi_fadd+0x19a>
    4d76:	1b04      	subs	r4, r0, r4
    4d78:	0032      	movs	r2, r6
    4d7a:	2020      	movs	r0, #32
    4d7c:	3401      	adds	r4, #1
    4d7e:	40e2      	lsrs	r2, r4
    4d80:	1b04      	subs	r4, r0, r4
    4d82:	40a6      	lsls	r6, r4
    4d84:	0033      	movs	r3, r6
    4d86:	1e5e      	subs	r6, r3, #1
    4d88:	41b3      	sbcs	r3, r6
    4d8a:	2400      	movs	r4, #0
    4d8c:	4313      	orrs	r3, r2
    4d8e:	075a      	lsls	r2, r3, #29
    4d90:	d004      	beq.n	4d9c <__aeabi_fadd+0x84>
    4d92:	220f      	movs	r2, #15
    4d94:	401a      	ands	r2, r3
    4d96:	2a04      	cmp	r2, #4
    4d98:	d000      	beq.n	4d9c <__aeabi_fadd+0x84>
    4d9a:	3304      	adds	r3, #4
    4d9c:	015a      	lsls	r2, r3, #5
    4d9e:	d529      	bpl.n	4df4 <__aeabi_fadd+0xdc>
    4da0:	3401      	adds	r4, #1
    4da2:	2cff      	cmp	r4, #255	; 0xff
    4da4:	d100      	bne.n	4da8 <__aeabi_fadd+0x90>
    4da6:	e081      	b.n	4eac <__aeabi_fadd+0x194>
    4da8:	002a      	movs	r2, r5
    4daa:	019b      	lsls	r3, r3, #6
    4dac:	0a5b      	lsrs	r3, r3, #9
    4dae:	b2e4      	uxtb	r4, r4
    4db0:	025b      	lsls	r3, r3, #9
    4db2:	05e4      	lsls	r4, r4, #23
    4db4:	0a58      	lsrs	r0, r3, #9
    4db6:	07d2      	lsls	r2, r2, #31
    4db8:	4320      	orrs	r0, r4
    4dba:	4310      	orrs	r0, r2
    4dbc:	bc04      	pop	{r2}
    4dbe:	4690      	mov	r8, r2
    4dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dc2:	2cff      	cmp	r4, #255	; 0xff
    4dc4:	d0e3      	beq.n	4d8e <__aeabi_fadd+0x76>
    4dc6:	2180      	movs	r1, #128	; 0x80
    4dc8:	0038      	movs	r0, r7
    4dca:	04c9      	lsls	r1, r1, #19
    4dcc:	4308      	orrs	r0, r1
    4dce:	4684      	mov	ip, r0
    4dd0:	2a1b      	cmp	r2, #27
    4dd2:	dd00      	ble.n	4dd6 <__aeabi_fadd+0xbe>
    4dd4:	e082      	b.n	4edc <__aeabi_fadd+0x1c4>
    4dd6:	2020      	movs	r0, #32
    4dd8:	4661      	mov	r1, ip
    4dda:	40d1      	lsrs	r1, r2
    4ddc:	1a82      	subs	r2, r0, r2
    4dde:	4660      	mov	r0, ip
    4de0:	4090      	lsls	r0, r2
    4de2:	0002      	movs	r2, r0
    4de4:	1e50      	subs	r0, r2, #1
    4de6:	4182      	sbcs	r2, r0
    4de8:	430a      	orrs	r2, r1
    4dea:	1a9b      	subs	r3, r3, r2
    4dec:	015a      	lsls	r2, r3, #5
    4dee:	d4b8      	bmi.n	4d62 <__aeabi_fadd+0x4a>
    4df0:	075a      	lsls	r2, r3, #29
    4df2:	d1ce      	bne.n	4d92 <__aeabi_fadd+0x7a>
    4df4:	08de      	lsrs	r6, r3, #3
    4df6:	002a      	movs	r2, r5
    4df8:	2cff      	cmp	r4, #255	; 0xff
    4dfa:	d13a      	bne.n	4e72 <__aeabi_fadd+0x15a>
    4dfc:	2e00      	cmp	r6, #0
    4dfe:	d100      	bne.n	4e02 <__aeabi_fadd+0xea>
    4e00:	e0ae      	b.n	4f60 <__aeabi_fadd+0x248>
    4e02:	2380      	movs	r3, #128	; 0x80
    4e04:	03db      	lsls	r3, r3, #15
    4e06:	4333      	orrs	r3, r6
    4e08:	025b      	lsls	r3, r3, #9
    4e0a:	0a5b      	lsrs	r3, r3, #9
    4e0c:	24ff      	movs	r4, #255	; 0xff
    4e0e:	e7cf      	b.n	4db0 <__aeabi_fadd+0x98>
    4e10:	1a21      	subs	r1, r4, r0
    4e12:	2900      	cmp	r1, #0
    4e14:	dd52      	ble.n	4ebc <__aeabi_fadd+0x1a4>
    4e16:	2800      	cmp	r0, #0
    4e18:	d031      	beq.n	4e7e <__aeabi_fadd+0x166>
    4e1a:	2cff      	cmp	r4, #255	; 0xff
    4e1c:	d0b7      	beq.n	4d8e <__aeabi_fadd+0x76>
    4e1e:	2080      	movs	r0, #128	; 0x80
    4e20:	003e      	movs	r6, r7
    4e22:	04c0      	lsls	r0, r0, #19
    4e24:	4306      	orrs	r6, r0
    4e26:	46b4      	mov	ip, r6
    4e28:	291b      	cmp	r1, #27
    4e2a:	dd00      	ble.n	4e2e <__aeabi_fadd+0x116>
    4e2c:	e0aa      	b.n	4f84 <__aeabi_fadd+0x26c>
    4e2e:	2620      	movs	r6, #32
    4e30:	4660      	mov	r0, ip
    4e32:	40c8      	lsrs	r0, r1
    4e34:	1a71      	subs	r1, r6, r1
    4e36:	4666      	mov	r6, ip
    4e38:	408e      	lsls	r6, r1
    4e3a:	0031      	movs	r1, r6
    4e3c:	1e4e      	subs	r6, r1, #1
    4e3e:	41b1      	sbcs	r1, r6
    4e40:	4301      	orrs	r1, r0
    4e42:	185b      	adds	r3, r3, r1
    4e44:	0159      	lsls	r1, r3, #5
    4e46:	d5d3      	bpl.n	4df0 <__aeabi_fadd+0xd8>
    4e48:	3401      	adds	r4, #1
    4e4a:	2cff      	cmp	r4, #255	; 0xff
    4e4c:	d100      	bne.n	4e50 <__aeabi_fadd+0x138>
    4e4e:	e087      	b.n	4f60 <__aeabi_fadd+0x248>
    4e50:	2201      	movs	r2, #1
    4e52:	4978      	ldr	r1, [pc, #480]	; (5034 <__aeabi_fadd+0x31c>)
    4e54:	401a      	ands	r2, r3
    4e56:	085b      	lsrs	r3, r3, #1
    4e58:	400b      	ands	r3, r1
    4e5a:	4313      	orrs	r3, r2
    4e5c:	e797      	b.n	4d8e <__aeabi_fadd+0x76>
    4e5e:	2c00      	cmp	r4, #0
    4e60:	d000      	beq.n	4e64 <__aeabi_fadd+0x14c>
    4e62:	e0a7      	b.n	4fb4 <__aeabi_fadd+0x29c>
    4e64:	2b00      	cmp	r3, #0
    4e66:	d000      	beq.n	4e6a <__aeabi_fadd+0x152>
    4e68:	e0b6      	b.n	4fd8 <__aeabi_fadd+0x2c0>
    4e6a:	1e3b      	subs	r3, r7, #0
    4e6c:	d162      	bne.n	4f34 <__aeabi_fadd+0x21c>
    4e6e:	2600      	movs	r6, #0
    4e70:	2200      	movs	r2, #0
    4e72:	0273      	lsls	r3, r6, #9
    4e74:	0a5b      	lsrs	r3, r3, #9
    4e76:	b2e4      	uxtb	r4, r4
    4e78:	e79a      	b.n	4db0 <__aeabi_fadd+0x98>
    4e7a:	0014      	movs	r4, r2
    4e7c:	e787      	b.n	4d8e <__aeabi_fadd+0x76>
    4e7e:	2f00      	cmp	r7, #0
    4e80:	d04d      	beq.n	4f1e <__aeabi_fadd+0x206>
    4e82:	1e48      	subs	r0, r1, #1
    4e84:	2800      	cmp	r0, #0
    4e86:	d157      	bne.n	4f38 <__aeabi_fadd+0x220>
    4e88:	4463      	add	r3, ip
    4e8a:	2401      	movs	r4, #1
    4e8c:	015a      	lsls	r2, r3, #5
    4e8e:	d5af      	bpl.n	4df0 <__aeabi_fadd+0xd8>
    4e90:	2402      	movs	r4, #2
    4e92:	e7dd      	b.n	4e50 <__aeabi_fadd+0x138>
    4e94:	2a00      	cmp	r2, #0
    4e96:	d124      	bne.n	4ee2 <__aeabi_fadd+0x1ca>
    4e98:	1c62      	adds	r2, r4, #1
    4e9a:	b2d2      	uxtb	r2, r2
    4e9c:	2a01      	cmp	r2, #1
    4e9e:	ddde      	ble.n	4e5e <__aeabi_fadd+0x146>
    4ea0:	1bde      	subs	r6, r3, r7
    4ea2:	0172      	lsls	r2, r6, #5
    4ea4:	d535      	bpl.n	4f12 <__aeabi_fadd+0x1fa>
    4ea6:	1afe      	subs	r6, r7, r3
    4ea8:	000d      	movs	r5, r1
    4eaa:	e75c      	b.n	4d66 <__aeabi_fadd+0x4e>
    4eac:	002a      	movs	r2, r5
    4eae:	2300      	movs	r3, #0
    4eb0:	e77e      	b.n	4db0 <__aeabi_fadd+0x98>
    4eb2:	0033      	movs	r3, r6
    4eb4:	4a60      	ldr	r2, [pc, #384]	; (5038 <__aeabi_fadd+0x320>)
    4eb6:	1a24      	subs	r4, r4, r0
    4eb8:	4013      	ands	r3, r2
    4eba:	e768      	b.n	4d8e <__aeabi_fadd+0x76>
    4ebc:	2900      	cmp	r1, #0
    4ebe:	d163      	bne.n	4f88 <__aeabi_fadd+0x270>
    4ec0:	1c61      	adds	r1, r4, #1
    4ec2:	b2c8      	uxtb	r0, r1
    4ec4:	2801      	cmp	r0, #1
    4ec6:	dd4e      	ble.n	4f66 <__aeabi_fadd+0x24e>
    4ec8:	29ff      	cmp	r1, #255	; 0xff
    4eca:	d049      	beq.n	4f60 <__aeabi_fadd+0x248>
    4ecc:	4463      	add	r3, ip
    4ece:	085b      	lsrs	r3, r3, #1
    4ed0:	000c      	movs	r4, r1
    4ed2:	e75c      	b.n	4d8e <__aeabi_fadd+0x76>
    4ed4:	2aff      	cmp	r2, #255	; 0xff
    4ed6:	d041      	beq.n	4f5c <__aeabi_fadd+0x244>
    4ed8:	000a      	movs	r2, r1
    4eda:	e779      	b.n	4dd0 <__aeabi_fadd+0xb8>
    4edc:	2201      	movs	r2, #1
    4ede:	1a9b      	subs	r3, r3, r2
    4ee0:	e784      	b.n	4dec <__aeabi_fadd+0xd4>
    4ee2:	2c00      	cmp	r4, #0
    4ee4:	d01d      	beq.n	4f22 <__aeabi_fadd+0x20a>
    4ee6:	28ff      	cmp	r0, #255	; 0xff
    4ee8:	d022      	beq.n	4f30 <__aeabi_fadd+0x218>
    4eea:	2480      	movs	r4, #128	; 0x80
    4eec:	04e4      	lsls	r4, r4, #19
    4eee:	4252      	negs	r2, r2
    4ef0:	4323      	orrs	r3, r4
    4ef2:	2a1b      	cmp	r2, #27
    4ef4:	dd00      	ble.n	4ef8 <__aeabi_fadd+0x1e0>
    4ef6:	e08a      	b.n	500e <__aeabi_fadd+0x2f6>
    4ef8:	001c      	movs	r4, r3
    4efa:	2520      	movs	r5, #32
    4efc:	40d4      	lsrs	r4, r2
    4efe:	1aaa      	subs	r2, r5, r2
    4f00:	4093      	lsls	r3, r2
    4f02:	1e5a      	subs	r2, r3, #1
    4f04:	4193      	sbcs	r3, r2
    4f06:	4323      	orrs	r3, r4
    4f08:	4662      	mov	r2, ip
    4f0a:	0004      	movs	r4, r0
    4f0c:	1ad3      	subs	r3, r2, r3
    4f0e:	000d      	movs	r5, r1
    4f10:	e725      	b.n	4d5e <__aeabi_fadd+0x46>
    4f12:	2e00      	cmp	r6, #0
    4f14:	d000      	beq.n	4f18 <__aeabi_fadd+0x200>
    4f16:	e726      	b.n	4d66 <__aeabi_fadd+0x4e>
    4f18:	2200      	movs	r2, #0
    4f1a:	2400      	movs	r4, #0
    4f1c:	e7a9      	b.n	4e72 <__aeabi_fadd+0x15a>
    4f1e:	000c      	movs	r4, r1
    4f20:	e735      	b.n	4d8e <__aeabi_fadd+0x76>
    4f22:	2b00      	cmp	r3, #0
    4f24:	d04d      	beq.n	4fc2 <__aeabi_fadd+0x2aa>
    4f26:	43d2      	mvns	r2, r2
    4f28:	2a00      	cmp	r2, #0
    4f2a:	d0ed      	beq.n	4f08 <__aeabi_fadd+0x1f0>
    4f2c:	28ff      	cmp	r0, #255	; 0xff
    4f2e:	d1e0      	bne.n	4ef2 <__aeabi_fadd+0x1da>
    4f30:	4663      	mov	r3, ip
    4f32:	24ff      	movs	r4, #255	; 0xff
    4f34:	000d      	movs	r5, r1
    4f36:	e72a      	b.n	4d8e <__aeabi_fadd+0x76>
    4f38:	29ff      	cmp	r1, #255	; 0xff
    4f3a:	d00f      	beq.n	4f5c <__aeabi_fadd+0x244>
    4f3c:	0001      	movs	r1, r0
    4f3e:	e773      	b.n	4e28 <__aeabi_fadd+0x110>
    4f40:	2b00      	cmp	r3, #0
    4f42:	d061      	beq.n	5008 <__aeabi_fadd+0x2f0>
    4f44:	24ff      	movs	r4, #255	; 0xff
    4f46:	2f00      	cmp	r7, #0
    4f48:	d100      	bne.n	4f4c <__aeabi_fadd+0x234>
    4f4a:	e720      	b.n	4d8e <__aeabi_fadd+0x76>
    4f4c:	2280      	movs	r2, #128	; 0x80
    4f4e:	4641      	mov	r1, r8
    4f50:	03d2      	lsls	r2, r2, #15
    4f52:	4211      	tst	r1, r2
    4f54:	d002      	beq.n	4f5c <__aeabi_fadd+0x244>
    4f56:	4216      	tst	r6, r2
    4f58:	d100      	bne.n	4f5c <__aeabi_fadd+0x244>
    4f5a:	003b      	movs	r3, r7
    4f5c:	24ff      	movs	r4, #255	; 0xff
    4f5e:	e716      	b.n	4d8e <__aeabi_fadd+0x76>
    4f60:	24ff      	movs	r4, #255	; 0xff
    4f62:	2300      	movs	r3, #0
    4f64:	e724      	b.n	4db0 <__aeabi_fadd+0x98>
    4f66:	2c00      	cmp	r4, #0
    4f68:	d1ea      	bne.n	4f40 <__aeabi_fadd+0x228>
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d058      	beq.n	5020 <__aeabi_fadd+0x308>
    4f6e:	2f00      	cmp	r7, #0
    4f70:	d100      	bne.n	4f74 <__aeabi_fadd+0x25c>
    4f72:	e70c      	b.n	4d8e <__aeabi_fadd+0x76>
    4f74:	4463      	add	r3, ip
    4f76:	015a      	lsls	r2, r3, #5
    4f78:	d400      	bmi.n	4f7c <__aeabi_fadd+0x264>
    4f7a:	e739      	b.n	4df0 <__aeabi_fadd+0xd8>
    4f7c:	4a2e      	ldr	r2, [pc, #184]	; (5038 <__aeabi_fadd+0x320>)
    4f7e:	000c      	movs	r4, r1
    4f80:	4013      	ands	r3, r2
    4f82:	e704      	b.n	4d8e <__aeabi_fadd+0x76>
    4f84:	2101      	movs	r1, #1
    4f86:	e75c      	b.n	4e42 <__aeabi_fadd+0x12a>
    4f88:	2c00      	cmp	r4, #0
    4f8a:	d11e      	bne.n	4fca <__aeabi_fadd+0x2b2>
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d040      	beq.n	5012 <__aeabi_fadd+0x2fa>
    4f90:	43c9      	mvns	r1, r1
    4f92:	2900      	cmp	r1, #0
    4f94:	d00b      	beq.n	4fae <__aeabi_fadd+0x296>
    4f96:	28ff      	cmp	r0, #255	; 0xff
    4f98:	d036      	beq.n	5008 <__aeabi_fadd+0x2f0>
    4f9a:	291b      	cmp	r1, #27
    4f9c:	dc47      	bgt.n	502e <__aeabi_fadd+0x316>
    4f9e:	001c      	movs	r4, r3
    4fa0:	2620      	movs	r6, #32
    4fa2:	40cc      	lsrs	r4, r1
    4fa4:	1a71      	subs	r1, r6, r1
    4fa6:	408b      	lsls	r3, r1
    4fa8:	1e59      	subs	r1, r3, #1
    4faa:	418b      	sbcs	r3, r1
    4fac:	4323      	orrs	r3, r4
    4fae:	4463      	add	r3, ip
    4fb0:	0004      	movs	r4, r0
    4fb2:	e747      	b.n	4e44 <__aeabi_fadd+0x12c>
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d118      	bne.n	4fea <__aeabi_fadd+0x2d2>
    4fb8:	1e3b      	subs	r3, r7, #0
    4fba:	d02d      	beq.n	5018 <__aeabi_fadd+0x300>
    4fbc:	000d      	movs	r5, r1
    4fbe:	24ff      	movs	r4, #255	; 0xff
    4fc0:	e6e5      	b.n	4d8e <__aeabi_fadd+0x76>
    4fc2:	003b      	movs	r3, r7
    4fc4:	0004      	movs	r4, r0
    4fc6:	000d      	movs	r5, r1
    4fc8:	e6e1      	b.n	4d8e <__aeabi_fadd+0x76>
    4fca:	28ff      	cmp	r0, #255	; 0xff
    4fcc:	d01c      	beq.n	5008 <__aeabi_fadd+0x2f0>
    4fce:	2480      	movs	r4, #128	; 0x80
    4fd0:	04e4      	lsls	r4, r4, #19
    4fd2:	4249      	negs	r1, r1
    4fd4:	4323      	orrs	r3, r4
    4fd6:	e7e0      	b.n	4f9a <__aeabi_fadd+0x282>
    4fd8:	2f00      	cmp	r7, #0
    4fda:	d100      	bne.n	4fde <__aeabi_fadd+0x2c6>
    4fdc:	e6d7      	b.n	4d8e <__aeabi_fadd+0x76>
    4fde:	1bde      	subs	r6, r3, r7
    4fe0:	0172      	lsls	r2, r6, #5
    4fe2:	d51f      	bpl.n	5024 <__aeabi_fadd+0x30c>
    4fe4:	1afb      	subs	r3, r7, r3
    4fe6:	000d      	movs	r5, r1
    4fe8:	e6d1      	b.n	4d8e <__aeabi_fadd+0x76>
    4fea:	24ff      	movs	r4, #255	; 0xff
    4fec:	2f00      	cmp	r7, #0
    4fee:	d100      	bne.n	4ff2 <__aeabi_fadd+0x2da>
    4ff0:	e6cd      	b.n	4d8e <__aeabi_fadd+0x76>
    4ff2:	2280      	movs	r2, #128	; 0x80
    4ff4:	4640      	mov	r0, r8
    4ff6:	03d2      	lsls	r2, r2, #15
    4ff8:	4210      	tst	r0, r2
    4ffa:	d0af      	beq.n	4f5c <__aeabi_fadd+0x244>
    4ffc:	4216      	tst	r6, r2
    4ffe:	d1ad      	bne.n	4f5c <__aeabi_fadd+0x244>
    5000:	003b      	movs	r3, r7
    5002:	000d      	movs	r5, r1
    5004:	24ff      	movs	r4, #255	; 0xff
    5006:	e6c2      	b.n	4d8e <__aeabi_fadd+0x76>
    5008:	4663      	mov	r3, ip
    500a:	24ff      	movs	r4, #255	; 0xff
    500c:	e6bf      	b.n	4d8e <__aeabi_fadd+0x76>
    500e:	2301      	movs	r3, #1
    5010:	e77a      	b.n	4f08 <__aeabi_fadd+0x1f0>
    5012:	003b      	movs	r3, r7
    5014:	0004      	movs	r4, r0
    5016:	e6ba      	b.n	4d8e <__aeabi_fadd+0x76>
    5018:	2680      	movs	r6, #128	; 0x80
    501a:	2200      	movs	r2, #0
    501c:	03f6      	lsls	r6, r6, #15
    501e:	e6f0      	b.n	4e02 <__aeabi_fadd+0xea>
    5020:	003b      	movs	r3, r7
    5022:	e6b4      	b.n	4d8e <__aeabi_fadd+0x76>
    5024:	1e33      	subs	r3, r6, #0
    5026:	d000      	beq.n	502a <__aeabi_fadd+0x312>
    5028:	e6e2      	b.n	4df0 <__aeabi_fadd+0xd8>
    502a:	2200      	movs	r2, #0
    502c:	e721      	b.n	4e72 <__aeabi_fadd+0x15a>
    502e:	2301      	movs	r3, #1
    5030:	e7bd      	b.n	4fae <__aeabi_fadd+0x296>
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	7dffffff 	.word	0x7dffffff
    5038:	fbffffff 	.word	0xfbffffff

0000503c <__aeabi_fdiv>:
    503c:	b5f0      	push	{r4, r5, r6, r7, lr}
    503e:	4657      	mov	r7, sl
    5040:	464e      	mov	r6, r9
    5042:	46de      	mov	lr, fp
    5044:	4645      	mov	r5, r8
    5046:	b5e0      	push	{r5, r6, r7, lr}
    5048:	0244      	lsls	r4, r0, #9
    504a:	0043      	lsls	r3, r0, #1
    504c:	0fc6      	lsrs	r6, r0, #31
    504e:	b083      	sub	sp, #12
    5050:	1c0f      	adds	r7, r1, #0
    5052:	0a64      	lsrs	r4, r4, #9
    5054:	0e1b      	lsrs	r3, r3, #24
    5056:	46b2      	mov	sl, r6
    5058:	d053      	beq.n	5102 <__aeabi_fdiv+0xc6>
    505a:	2bff      	cmp	r3, #255	; 0xff
    505c:	d027      	beq.n	50ae <__aeabi_fdiv+0x72>
    505e:	2280      	movs	r2, #128	; 0x80
    5060:	00e4      	lsls	r4, r4, #3
    5062:	04d2      	lsls	r2, r2, #19
    5064:	4314      	orrs	r4, r2
    5066:	227f      	movs	r2, #127	; 0x7f
    5068:	4252      	negs	r2, r2
    506a:	4690      	mov	r8, r2
    506c:	4498      	add	r8, r3
    506e:	2300      	movs	r3, #0
    5070:	4699      	mov	r9, r3
    5072:	469b      	mov	fp, r3
    5074:	027d      	lsls	r5, r7, #9
    5076:	0078      	lsls	r0, r7, #1
    5078:	0ffb      	lsrs	r3, r7, #31
    507a:	0a6d      	lsrs	r5, r5, #9
    507c:	0e00      	lsrs	r0, r0, #24
    507e:	9300      	str	r3, [sp, #0]
    5080:	d024      	beq.n	50cc <__aeabi_fdiv+0x90>
    5082:	28ff      	cmp	r0, #255	; 0xff
    5084:	d046      	beq.n	5114 <__aeabi_fdiv+0xd8>
    5086:	2380      	movs	r3, #128	; 0x80
    5088:	2100      	movs	r1, #0
    508a:	00ed      	lsls	r5, r5, #3
    508c:	04db      	lsls	r3, r3, #19
    508e:	431d      	orrs	r5, r3
    5090:	387f      	subs	r0, #127	; 0x7f
    5092:	4647      	mov	r7, r8
    5094:	1a38      	subs	r0, r7, r0
    5096:	464f      	mov	r7, r9
    5098:	430f      	orrs	r7, r1
    509a:	00bf      	lsls	r7, r7, #2
    509c:	46b9      	mov	r9, r7
    509e:	0033      	movs	r3, r6
    50a0:	9a00      	ldr	r2, [sp, #0]
    50a2:	4f87      	ldr	r7, [pc, #540]	; (52c0 <__aeabi_fdiv+0x284>)
    50a4:	4053      	eors	r3, r2
    50a6:	464a      	mov	r2, r9
    50a8:	58ba      	ldr	r2, [r7, r2]
    50aa:	9301      	str	r3, [sp, #4]
    50ac:	4697      	mov	pc, r2
    50ae:	2c00      	cmp	r4, #0
    50b0:	d14e      	bne.n	5150 <__aeabi_fdiv+0x114>
    50b2:	2308      	movs	r3, #8
    50b4:	4699      	mov	r9, r3
    50b6:	33f7      	adds	r3, #247	; 0xf7
    50b8:	4698      	mov	r8, r3
    50ba:	3bfd      	subs	r3, #253	; 0xfd
    50bc:	469b      	mov	fp, r3
    50be:	027d      	lsls	r5, r7, #9
    50c0:	0078      	lsls	r0, r7, #1
    50c2:	0ffb      	lsrs	r3, r7, #31
    50c4:	0a6d      	lsrs	r5, r5, #9
    50c6:	0e00      	lsrs	r0, r0, #24
    50c8:	9300      	str	r3, [sp, #0]
    50ca:	d1da      	bne.n	5082 <__aeabi_fdiv+0x46>
    50cc:	2d00      	cmp	r5, #0
    50ce:	d126      	bne.n	511e <__aeabi_fdiv+0xe2>
    50d0:	2000      	movs	r0, #0
    50d2:	2101      	movs	r1, #1
    50d4:	0033      	movs	r3, r6
    50d6:	9a00      	ldr	r2, [sp, #0]
    50d8:	4f7a      	ldr	r7, [pc, #488]	; (52c4 <__aeabi_fdiv+0x288>)
    50da:	4053      	eors	r3, r2
    50dc:	4642      	mov	r2, r8
    50de:	1a10      	subs	r0, r2, r0
    50e0:	464a      	mov	r2, r9
    50e2:	430a      	orrs	r2, r1
    50e4:	0092      	lsls	r2, r2, #2
    50e6:	58ba      	ldr	r2, [r7, r2]
    50e8:	001d      	movs	r5, r3
    50ea:	4697      	mov	pc, r2
    50ec:	9b00      	ldr	r3, [sp, #0]
    50ee:	002c      	movs	r4, r5
    50f0:	469a      	mov	sl, r3
    50f2:	468b      	mov	fp, r1
    50f4:	465b      	mov	r3, fp
    50f6:	2b02      	cmp	r3, #2
    50f8:	d131      	bne.n	515e <__aeabi_fdiv+0x122>
    50fa:	4653      	mov	r3, sl
    50fc:	21ff      	movs	r1, #255	; 0xff
    50fe:	2400      	movs	r4, #0
    5100:	e038      	b.n	5174 <__aeabi_fdiv+0x138>
    5102:	2c00      	cmp	r4, #0
    5104:	d117      	bne.n	5136 <__aeabi_fdiv+0xfa>
    5106:	2304      	movs	r3, #4
    5108:	4699      	mov	r9, r3
    510a:	2300      	movs	r3, #0
    510c:	4698      	mov	r8, r3
    510e:	3301      	adds	r3, #1
    5110:	469b      	mov	fp, r3
    5112:	e7af      	b.n	5074 <__aeabi_fdiv+0x38>
    5114:	20ff      	movs	r0, #255	; 0xff
    5116:	2d00      	cmp	r5, #0
    5118:	d10b      	bne.n	5132 <__aeabi_fdiv+0xf6>
    511a:	2102      	movs	r1, #2
    511c:	e7da      	b.n	50d4 <__aeabi_fdiv+0x98>
    511e:	0028      	movs	r0, r5
    5120:	f002 fb52 	bl	77c8 <__clzsi2>
    5124:	1f43      	subs	r3, r0, #5
    5126:	409d      	lsls	r5, r3
    5128:	2376      	movs	r3, #118	; 0x76
    512a:	425b      	negs	r3, r3
    512c:	1a18      	subs	r0, r3, r0
    512e:	2100      	movs	r1, #0
    5130:	e7af      	b.n	5092 <__aeabi_fdiv+0x56>
    5132:	2103      	movs	r1, #3
    5134:	e7ad      	b.n	5092 <__aeabi_fdiv+0x56>
    5136:	0020      	movs	r0, r4
    5138:	f002 fb46 	bl	77c8 <__clzsi2>
    513c:	1f43      	subs	r3, r0, #5
    513e:	409c      	lsls	r4, r3
    5140:	2376      	movs	r3, #118	; 0x76
    5142:	425b      	negs	r3, r3
    5144:	1a1b      	subs	r3, r3, r0
    5146:	4698      	mov	r8, r3
    5148:	2300      	movs	r3, #0
    514a:	4699      	mov	r9, r3
    514c:	469b      	mov	fp, r3
    514e:	e791      	b.n	5074 <__aeabi_fdiv+0x38>
    5150:	230c      	movs	r3, #12
    5152:	4699      	mov	r9, r3
    5154:	33f3      	adds	r3, #243	; 0xf3
    5156:	4698      	mov	r8, r3
    5158:	3bfc      	subs	r3, #252	; 0xfc
    515a:	469b      	mov	fp, r3
    515c:	e78a      	b.n	5074 <__aeabi_fdiv+0x38>
    515e:	2b03      	cmp	r3, #3
    5160:	d100      	bne.n	5164 <__aeabi_fdiv+0x128>
    5162:	e0a5      	b.n	52b0 <__aeabi_fdiv+0x274>
    5164:	4655      	mov	r5, sl
    5166:	2b01      	cmp	r3, #1
    5168:	d000      	beq.n	516c <__aeabi_fdiv+0x130>
    516a:	e081      	b.n	5270 <__aeabi_fdiv+0x234>
    516c:	2301      	movs	r3, #1
    516e:	2100      	movs	r1, #0
    5170:	2400      	movs	r4, #0
    5172:	402b      	ands	r3, r5
    5174:	0264      	lsls	r4, r4, #9
    5176:	05c9      	lsls	r1, r1, #23
    5178:	0a60      	lsrs	r0, r4, #9
    517a:	07db      	lsls	r3, r3, #31
    517c:	4308      	orrs	r0, r1
    517e:	4318      	orrs	r0, r3
    5180:	b003      	add	sp, #12
    5182:	bc3c      	pop	{r2, r3, r4, r5}
    5184:	4690      	mov	r8, r2
    5186:	4699      	mov	r9, r3
    5188:	46a2      	mov	sl, r4
    518a:	46ab      	mov	fp, r5
    518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    518e:	2480      	movs	r4, #128	; 0x80
    5190:	2300      	movs	r3, #0
    5192:	03e4      	lsls	r4, r4, #15
    5194:	21ff      	movs	r1, #255	; 0xff
    5196:	e7ed      	b.n	5174 <__aeabi_fdiv+0x138>
    5198:	21ff      	movs	r1, #255	; 0xff
    519a:	2400      	movs	r4, #0
    519c:	e7ea      	b.n	5174 <__aeabi_fdiv+0x138>
    519e:	2301      	movs	r3, #1
    51a0:	1a59      	subs	r1, r3, r1
    51a2:	291b      	cmp	r1, #27
    51a4:	dd66      	ble.n	5274 <__aeabi_fdiv+0x238>
    51a6:	9a01      	ldr	r2, [sp, #4]
    51a8:	4013      	ands	r3, r2
    51aa:	2100      	movs	r1, #0
    51ac:	2400      	movs	r4, #0
    51ae:	e7e1      	b.n	5174 <__aeabi_fdiv+0x138>
    51b0:	2380      	movs	r3, #128	; 0x80
    51b2:	03db      	lsls	r3, r3, #15
    51b4:	421c      	tst	r4, r3
    51b6:	d038      	beq.n	522a <__aeabi_fdiv+0x1ee>
    51b8:	421d      	tst	r5, r3
    51ba:	d051      	beq.n	5260 <__aeabi_fdiv+0x224>
    51bc:	431c      	orrs	r4, r3
    51be:	0264      	lsls	r4, r4, #9
    51c0:	0a64      	lsrs	r4, r4, #9
    51c2:	0033      	movs	r3, r6
    51c4:	21ff      	movs	r1, #255	; 0xff
    51c6:	e7d5      	b.n	5174 <__aeabi_fdiv+0x138>
    51c8:	0163      	lsls	r3, r4, #5
    51ca:	016c      	lsls	r4, r5, #5
    51cc:	42a3      	cmp	r3, r4
    51ce:	d23b      	bcs.n	5248 <__aeabi_fdiv+0x20c>
    51d0:	261b      	movs	r6, #27
    51d2:	2100      	movs	r1, #0
    51d4:	3801      	subs	r0, #1
    51d6:	2501      	movs	r5, #1
    51d8:	001f      	movs	r7, r3
    51da:	0049      	lsls	r1, r1, #1
    51dc:	005b      	lsls	r3, r3, #1
    51de:	2f00      	cmp	r7, #0
    51e0:	db01      	blt.n	51e6 <__aeabi_fdiv+0x1aa>
    51e2:	429c      	cmp	r4, r3
    51e4:	d801      	bhi.n	51ea <__aeabi_fdiv+0x1ae>
    51e6:	1b1b      	subs	r3, r3, r4
    51e8:	4329      	orrs	r1, r5
    51ea:	3e01      	subs	r6, #1
    51ec:	2e00      	cmp	r6, #0
    51ee:	d1f3      	bne.n	51d8 <__aeabi_fdiv+0x19c>
    51f0:	001c      	movs	r4, r3
    51f2:	1e63      	subs	r3, r4, #1
    51f4:	419c      	sbcs	r4, r3
    51f6:	430c      	orrs	r4, r1
    51f8:	0001      	movs	r1, r0
    51fa:	317f      	adds	r1, #127	; 0x7f
    51fc:	2900      	cmp	r1, #0
    51fe:	ddce      	ble.n	519e <__aeabi_fdiv+0x162>
    5200:	0763      	lsls	r3, r4, #29
    5202:	d004      	beq.n	520e <__aeabi_fdiv+0x1d2>
    5204:	230f      	movs	r3, #15
    5206:	4023      	ands	r3, r4
    5208:	2b04      	cmp	r3, #4
    520a:	d000      	beq.n	520e <__aeabi_fdiv+0x1d2>
    520c:	3404      	adds	r4, #4
    520e:	0123      	lsls	r3, r4, #4
    5210:	d503      	bpl.n	521a <__aeabi_fdiv+0x1de>
    5212:	0001      	movs	r1, r0
    5214:	4b2c      	ldr	r3, [pc, #176]	; (52c8 <__aeabi_fdiv+0x28c>)
    5216:	3180      	adds	r1, #128	; 0x80
    5218:	401c      	ands	r4, r3
    521a:	29fe      	cmp	r1, #254	; 0xfe
    521c:	dd0d      	ble.n	523a <__aeabi_fdiv+0x1fe>
    521e:	2301      	movs	r3, #1
    5220:	9a01      	ldr	r2, [sp, #4]
    5222:	21ff      	movs	r1, #255	; 0xff
    5224:	4013      	ands	r3, r2
    5226:	2400      	movs	r4, #0
    5228:	e7a4      	b.n	5174 <__aeabi_fdiv+0x138>
    522a:	2380      	movs	r3, #128	; 0x80
    522c:	03db      	lsls	r3, r3, #15
    522e:	431c      	orrs	r4, r3
    5230:	0264      	lsls	r4, r4, #9
    5232:	0a64      	lsrs	r4, r4, #9
    5234:	0033      	movs	r3, r6
    5236:	21ff      	movs	r1, #255	; 0xff
    5238:	e79c      	b.n	5174 <__aeabi_fdiv+0x138>
    523a:	2301      	movs	r3, #1
    523c:	9a01      	ldr	r2, [sp, #4]
    523e:	01a4      	lsls	r4, r4, #6
    5240:	0a64      	lsrs	r4, r4, #9
    5242:	b2c9      	uxtb	r1, r1
    5244:	4013      	ands	r3, r2
    5246:	e795      	b.n	5174 <__aeabi_fdiv+0x138>
    5248:	1b1b      	subs	r3, r3, r4
    524a:	261a      	movs	r6, #26
    524c:	2101      	movs	r1, #1
    524e:	e7c2      	b.n	51d6 <__aeabi_fdiv+0x19a>
    5250:	9b00      	ldr	r3, [sp, #0]
    5252:	468b      	mov	fp, r1
    5254:	469a      	mov	sl, r3
    5256:	2400      	movs	r4, #0
    5258:	e74c      	b.n	50f4 <__aeabi_fdiv+0xb8>
    525a:	0263      	lsls	r3, r4, #9
    525c:	d5e5      	bpl.n	522a <__aeabi_fdiv+0x1ee>
    525e:	2500      	movs	r5, #0
    5260:	2480      	movs	r4, #128	; 0x80
    5262:	03e4      	lsls	r4, r4, #15
    5264:	432c      	orrs	r4, r5
    5266:	0264      	lsls	r4, r4, #9
    5268:	0a64      	lsrs	r4, r4, #9
    526a:	9b00      	ldr	r3, [sp, #0]
    526c:	21ff      	movs	r1, #255	; 0xff
    526e:	e781      	b.n	5174 <__aeabi_fdiv+0x138>
    5270:	9501      	str	r5, [sp, #4]
    5272:	e7c1      	b.n	51f8 <__aeabi_fdiv+0x1bc>
    5274:	0023      	movs	r3, r4
    5276:	2020      	movs	r0, #32
    5278:	40cb      	lsrs	r3, r1
    527a:	1a41      	subs	r1, r0, r1
    527c:	408c      	lsls	r4, r1
    527e:	1e61      	subs	r1, r4, #1
    5280:	418c      	sbcs	r4, r1
    5282:	431c      	orrs	r4, r3
    5284:	0763      	lsls	r3, r4, #29
    5286:	d004      	beq.n	5292 <__aeabi_fdiv+0x256>
    5288:	230f      	movs	r3, #15
    528a:	4023      	ands	r3, r4
    528c:	2b04      	cmp	r3, #4
    528e:	d000      	beq.n	5292 <__aeabi_fdiv+0x256>
    5290:	3404      	adds	r4, #4
    5292:	0163      	lsls	r3, r4, #5
    5294:	d505      	bpl.n	52a2 <__aeabi_fdiv+0x266>
    5296:	2301      	movs	r3, #1
    5298:	9a01      	ldr	r2, [sp, #4]
    529a:	2101      	movs	r1, #1
    529c:	4013      	ands	r3, r2
    529e:	2400      	movs	r4, #0
    52a0:	e768      	b.n	5174 <__aeabi_fdiv+0x138>
    52a2:	2301      	movs	r3, #1
    52a4:	9a01      	ldr	r2, [sp, #4]
    52a6:	01a4      	lsls	r4, r4, #6
    52a8:	0a64      	lsrs	r4, r4, #9
    52aa:	4013      	ands	r3, r2
    52ac:	2100      	movs	r1, #0
    52ae:	e761      	b.n	5174 <__aeabi_fdiv+0x138>
    52b0:	2380      	movs	r3, #128	; 0x80
    52b2:	03db      	lsls	r3, r3, #15
    52b4:	431c      	orrs	r4, r3
    52b6:	0264      	lsls	r4, r4, #9
    52b8:	0a64      	lsrs	r4, r4, #9
    52ba:	4653      	mov	r3, sl
    52bc:	21ff      	movs	r1, #255	; 0xff
    52be:	e759      	b.n	5174 <__aeabi_fdiv+0x138>
    52c0:	000083a4 	.word	0x000083a4
    52c4:	000083e4 	.word	0x000083e4
    52c8:	f7ffffff 	.word	0xf7ffffff

000052cc <__eqsf2>:
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	0042      	lsls	r2, r0, #1
    52d0:	0245      	lsls	r5, r0, #9
    52d2:	024e      	lsls	r6, r1, #9
    52d4:	004c      	lsls	r4, r1, #1
    52d6:	0fc3      	lsrs	r3, r0, #31
    52d8:	0a6d      	lsrs	r5, r5, #9
    52da:	0e12      	lsrs	r2, r2, #24
    52dc:	0a76      	lsrs	r6, r6, #9
    52de:	0e24      	lsrs	r4, r4, #24
    52e0:	0fc9      	lsrs	r1, r1, #31
    52e2:	2001      	movs	r0, #1
    52e4:	2aff      	cmp	r2, #255	; 0xff
    52e6:	d006      	beq.n	52f6 <__eqsf2+0x2a>
    52e8:	2cff      	cmp	r4, #255	; 0xff
    52ea:	d003      	beq.n	52f4 <__eqsf2+0x28>
    52ec:	42a2      	cmp	r2, r4
    52ee:	d101      	bne.n	52f4 <__eqsf2+0x28>
    52f0:	42b5      	cmp	r5, r6
    52f2:	d006      	beq.n	5302 <__eqsf2+0x36>
    52f4:	bd70      	pop	{r4, r5, r6, pc}
    52f6:	2d00      	cmp	r5, #0
    52f8:	d1fc      	bne.n	52f4 <__eqsf2+0x28>
    52fa:	2cff      	cmp	r4, #255	; 0xff
    52fc:	d1fa      	bne.n	52f4 <__eqsf2+0x28>
    52fe:	2e00      	cmp	r6, #0
    5300:	d1f8      	bne.n	52f4 <__eqsf2+0x28>
    5302:	428b      	cmp	r3, r1
    5304:	d006      	beq.n	5314 <__eqsf2+0x48>
    5306:	2001      	movs	r0, #1
    5308:	2a00      	cmp	r2, #0
    530a:	d1f3      	bne.n	52f4 <__eqsf2+0x28>
    530c:	0028      	movs	r0, r5
    530e:	1e45      	subs	r5, r0, #1
    5310:	41a8      	sbcs	r0, r5
    5312:	e7ef      	b.n	52f4 <__eqsf2+0x28>
    5314:	2000      	movs	r0, #0
    5316:	e7ed      	b.n	52f4 <__eqsf2+0x28>

00005318 <__gesf2>:
    5318:	b5f0      	push	{r4, r5, r6, r7, lr}
    531a:	0042      	lsls	r2, r0, #1
    531c:	0245      	lsls	r5, r0, #9
    531e:	024c      	lsls	r4, r1, #9
    5320:	0fc3      	lsrs	r3, r0, #31
    5322:	0048      	lsls	r0, r1, #1
    5324:	0a6d      	lsrs	r5, r5, #9
    5326:	0e12      	lsrs	r2, r2, #24
    5328:	0a64      	lsrs	r4, r4, #9
    532a:	0e00      	lsrs	r0, r0, #24
    532c:	0fc9      	lsrs	r1, r1, #31
    532e:	2aff      	cmp	r2, #255	; 0xff
    5330:	d01e      	beq.n	5370 <__gesf2+0x58>
    5332:	28ff      	cmp	r0, #255	; 0xff
    5334:	d021      	beq.n	537a <__gesf2+0x62>
    5336:	2a00      	cmp	r2, #0
    5338:	d10a      	bne.n	5350 <__gesf2+0x38>
    533a:	426e      	negs	r6, r5
    533c:	416e      	adcs	r6, r5
    533e:	b2f6      	uxtb	r6, r6
    5340:	2800      	cmp	r0, #0
    5342:	d10f      	bne.n	5364 <__gesf2+0x4c>
    5344:	2c00      	cmp	r4, #0
    5346:	d10d      	bne.n	5364 <__gesf2+0x4c>
    5348:	2000      	movs	r0, #0
    534a:	2d00      	cmp	r5, #0
    534c:	d009      	beq.n	5362 <__gesf2+0x4a>
    534e:	e005      	b.n	535c <__gesf2+0x44>
    5350:	2800      	cmp	r0, #0
    5352:	d101      	bne.n	5358 <__gesf2+0x40>
    5354:	2c00      	cmp	r4, #0
    5356:	d001      	beq.n	535c <__gesf2+0x44>
    5358:	428b      	cmp	r3, r1
    535a:	d011      	beq.n	5380 <__gesf2+0x68>
    535c:	2101      	movs	r1, #1
    535e:	4258      	negs	r0, r3
    5360:	4308      	orrs	r0, r1
    5362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5364:	2e00      	cmp	r6, #0
    5366:	d0f7      	beq.n	5358 <__gesf2+0x40>
    5368:	2001      	movs	r0, #1
    536a:	3901      	subs	r1, #1
    536c:	4308      	orrs	r0, r1
    536e:	e7f8      	b.n	5362 <__gesf2+0x4a>
    5370:	2d00      	cmp	r5, #0
    5372:	d0de      	beq.n	5332 <__gesf2+0x1a>
    5374:	2002      	movs	r0, #2
    5376:	4240      	negs	r0, r0
    5378:	e7f3      	b.n	5362 <__gesf2+0x4a>
    537a:	2c00      	cmp	r4, #0
    537c:	d0db      	beq.n	5336 <__gesf2+0x1e>
    537e:	e7f9      	b.n	5374 <__gesf2+0x5c>
    5380:	4282      	cmp	r2, r0
    5382:	dceb      	bgt.n	535c <__gesf2+0x44>
    5384:	db04      	blt.n	5390 <__gesf2+0x78>
    5386:	42a5      	cmp	r5, r4
    5388:	d8e8      	bhi.n	535c <__gesf2+0x44>
    538a:	2000      	movs	r0, #0
    538c:	42a5      	cmp	r5, r4
    538e:	d2e8      	bcs.n	5362 <__gesf2+0x4a>
    5390:	2101      	movs	r1, #1
    5392:	1e58      	subs	r0, r3, #1
    5394:	4308      	orrs	r0, r1
    5396:	e7e4      	b.n	5362 <__gesf2+0x4a>

00005398 <__lesf2>:
    5398:	b5f0      	push	{r4, r5, r6, r7, lr}
    539a:	0042      	lsls	r2, r0, #1
    539c:	024d      	lsls	r5, r1, #9
    539e:	004c      	lsls	r4, r1, #1
    53a0:	0246      	lsls	r6, r0, #9
    53a2:	0a76      	lsrs	r6, r6, #9
    53a4:	0e12      	lsrs	r2, r2, #24
    53a6:	0fc3      	lsrs	r3, r0, #31
    53a8:	0a6d      	lsrs	r5, r5, #9
    53aa:	0e24      	lsrs	r4, r4, #24
    53ac:	0fc9      	lsrs	r1, r1, #31
    53ae:	2aff      	cmp	r2, #255	; 0xff
    53b0:	d016      	beq.n	53e0 <__lesf2+0x48>
    53b2:	2cff      	cmp	r4, #255	; 0xff
    53b4:	d018      	beq.n	53e8 <__lesf2+0x50>
    53b6:	2a00      	cmp	r2, #0
    53b8:	d10a      	bne.n	53d0 <__lesf2+0x38>
    53ba:	4270      	negs	r0, r6
    53bc:	4170      	adcs	r0, r6
    53be:	b2c0      	uxtb	r0, r0
    53c0:	2c00      	cmp	r4, #0
    53c2:	d015      	beq.n	53f0 <__lesf2+0x58>
    53c4:	2800      	cmp	r0, #0
    53c6:	d005      	beq.n	53d4 <__lesf2+0x3c>
    53c8:	2001      	movs	r0, #1
    53ca:	3901      	subs	r1, #1
    53cc:	4308      	orrs	r0, r1
    53ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d0:	2c00      	cmp	r4, #0
    53d2:	d013      	beq.n	53fc <__lesf2+0x64>
    53d4:	4299      	cmp	r1, r3
    53d6:	d014      	beq.n	5402 <__lesf2+0x6a>
    53d8:	2001      	movs	r0, #1
    53da:	425b      	negs	r3, r3
    53dc:	4318      	orrs	r0, r3
    53de:	e7f6      	b.n	53ce <__lesf2+0x36>
    53e0:	2002      	movs	r0, #2
    53e2:	2e00      	cmp	r6, #0
    53e4:	d1f3      	bne.n	53ce <__lesf2+0x36>
    53e6:	e7e4      	b.n	53b2 <__lesf2+0x1a>
    53e8:	2002      	movs	r0, #2
    53ea:	2d00      	cmp	r5, #0
    53ec:	d1ef      	bne.n	53ce <__lesf2+0x36>
    53ee:	e7e2      	b.n	53b6 <__lesf2+0x1e>
    53f0:	2d00      	cmp	r5, #0
    53f2:	d1e7      	bne.n	53c4 <__lesf2+0x2c>
    53f4:	2000      	movs	r0, #0
    53f6:	2e00      	cmp	r6, #0
    53f8:	d0e9      	beq.n	53ce <__lesf2+0x36>
    53fa:	e7ed      	b.n	53d8 <__lesf2+0x40>
    53fc:	2d00      	cmp	r5, #0
    53fe:	d1e9      	bne.n	53d4 <__lesf2+0x3c>
    5400:	e7ea      	b.n	53d8 <__lesf2+0x40>
    5402:	42a2      	cmp	r2, r4
    5404:	dc06      	bgt.n	5414 <__lesf2+0x7c>
    5406:	dbdf      	blt.n	53c8 <__lesf2+0x30>
    5408:	42ae      	cmp	r6, r5
    540a:	d803      	bhi.n	5414 <__lesf2+0x7c>
    540c:	2000      	movs	r0, #0
    540e:	42ae      	cmp	r6, r5
    5410:	d3da      	bcc.n	53c8 <__lesf2+0x30>
    5412:	e7dc      	b.n	53ce <__lesf2+0x36>
    5414:	2001      	movs	r0, #1
    5416:	4249      	negs	r1, r1
    5418:	4308      	orrs	r0, r1
    541a:	e7d8      	b.n	53ce <__lesf2+0x36>

0000541c <__aeabi_fmul>:
    541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    541e:	4657      	mov	r7, sl
    5420:	464e      	mov	r6, r9
    5422:	4645      	mov	r5, r8
    5424:	46de      	mov	lr, fp
    5426:	b5e0      	push	{r5, r6, r7, lr}
    5428:	0247      	lsls	r7, r0, #9
    542a:	0046      	lsls	r6, r0, #1
    542c:	4688      	mov	r8, r1
    542e:	0a7f      	lsrs	r7, r7, #9
    5430:	0e36      	lsrs	r6, r6, #24
    5432:	0fc4      	lsrs	r4, r0, #31
    5434:	2e00      	cmp	r6, #0
    5436:	d047      	beq.n	54c8 <__aeabi_fmul+0xac>
    5438:	2eff      	cmp	r6, #255	; 0xff
    543a:	d024      	beq.n	5486 <__aeabi_fmul+0x6a>
    543c:	00fb      	lsls	r3, r7, #3
    543e:	2780      	movs	r7, #128	; 0x80
    5440:	04ff      	lsls	r7, r7, #19
    5442:	431f      	orrs	r7, r3
    5444:	2300      	movs	r3, #0
    5446:	4699      	mov	r9, r3
    5448:	469a      	mov	sl, r3
    544a:	3e7f      	subs	r6, #127	; 0x7f
    544c:	4643      	mov	r3, r8
    544e:	025d      	lsls	r5, r3, #9
    5450:	0058      	lsls	r0, r3, #1
    5452:	0fdb      	lsrs	r3, r3, #31
    5454:	0a6d      	lsrs	r5, r5, #9
    5456:	0e00      	lsrs	r0, r0, #24
    5458:	4698      	mov	r8, r3
    545a:	d043      	beq.n	54e4 <__aeabi_fmul+0xc8>
    545c:	28ff      	cmp	r0, #255	; 0xff
    545e:	d03b      	beq.n	54d8 <__aeabi_fmul+0xbc>
    5460:	00eb      	lsls	r3, r5, #3
    5462:	2580      	movs	r5, #128	; 0x80
    5464:	2200      	movs	r2, #0
    5466:	04ed      	lsls	r5, r5, #19
    5468:	431d      	orrs	r5, r3
    546a:	387f      	subs	r0, #127	; 0x7f
    546c:	1836      	adds	r6, r6, r0
    546e:	1c73      	adds	r3, r6, #1
    5470:	4641      	mov	r1, r8
    5472:	469b      	mov	fp, r3
    5474:	464b      	mov	r3, r9
    5476:	4061      	eors	r1, r4
    5478:	4313      	orrs	r3, r2
    547a:	2b0f      	cmp	r3, #15
    547c:	d864      	bhi.n	5548 <__aeabi_fmul+0x12c>
    547e:	4875      	ldr	r0, [pc, #468]	; (5654 <__aeabi_fmul+0x238>)
    5480:	009b      	lsls	r3, r3, #2
    5482:	58c3      	ldr	r3, [r0, r3]
    5484:	469f      	mov	pc, r3
    5486:	2f00      	cmp	r7, #0
    5488:	d142      	bne.n	5510 <__aeabi_fmul+0xf4>
    548a:	2308      	movs	r3, #8
    548c:	4699      	mov	r9, r3
    548e:	3b06      	subs	r3, #6
    5490:	26ff      	movs	r6, #255	; 0xff
    5492:	469a      	mov	sl, r3
    5494:	e7da      	b.n	544c <__aeabi_fmul+0x30>
    5496:	4641      	mov	r1, r8
    5498:	2a02      	cmp	r2, #2
    549a:	d028      	beq.n	54ee <__aeabi_fmul+0xd2>
    549c:	2a03      	cmp	r2, #3
    549e:	d100      	bne.n	54a2 <__aeabi_fmul+0x86>
    54a0:	e0ce      	b.n	5640 <__aeabi_fmul+0x224>
    54a2:	2a01      	cmp	r2, #1
    54a4:	d000      	beq.n	54a8 <__aeabi_fmul+0x8c>
    54a6:	e0ac      	b.n	5602 <__aeabi_fmul+0x1e6>
    54a8:	4011      	ands	r1, r2
    54aa:	2000      	movs	r0, #0
    54ac:	2200      	movs	r2, #0
    54ae:	b2cc      	uxtb	r4, r1
    54b0:	0240      	lsls	r0, r0, #9
    54b2:	05d2      	lsls	r2, r2, #23
    54b4:	0a40      	lsrs	r0, r0, #9
    54b6:	07e4      	lsls	r4, r4, #31
    54b8:	4310      	orrs	r0, r2
    54ba:	4320      	orrs	r0, r4
    54bc:	bc3c      	pop	{r2, r3, r4, r5}
    54be:	4690      	mov	r8, r2
    54c0:	4699      	mov	r9, r3
    54c2:	46a2      	mov	sl, r4
    54c4:	46ab      	mov	fp, r5
    54c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54c8:	2f00      	cmp	r7, #0
    54ca:	d115      	bne.n	54f8 <__aeabi_fmul+0xdc>
    54cc:	2304      	movs	r3, #4
    54ce:	4699      	mov	r9, r3
    54d0:	3b03      	subs	r3, #3
    54d2:	2600      	movs	r6, #0
    54d4:	469a      	mov	sl, r3
    54d6:	e7b9      	b.n	544c <__aeabi_fmul+0x30>
    54d8:	20ff      	movs	r0, #255	; 0xff
    54da:	2202      	movs	r2, #2
    54dc:	2d00      	cmp	r5, #0
    54de:	d0c5      	beq.n	546c <__aeabi_fmul+0x50>
    54e0:	2203      	movs	r2, #3
    54e2:	e7c3      	b.n	546c <__aeabi_fmul+0x50>
    54e4:	2d00      	cmp	r5, #0
    54e6:	d119      	bne.n	551c <__aeabi_fmul+0x100>
    54e8:	2000      	movs	r0, #0
    54ea:	2201      	movs	r2, #1
    54ec:	e7be      	b.n	546c <__aeabi_fmul+0x50>
    54ee:	2401      	movs	r4, #1
    54f0:	22ff      	movs	r2, #255	; 0xff
    54f2:	400c      	ands	r4, r1
    54f4:	2000      	movs	r0, #0
    54f6:	e7db      	b.n	54b0 <__aeabi_fmul+0x94>
    54f8:	0038      	movs	r0, r7
    54fa:	f002 f965 	bl	77c8 <__clzsi2>
    54fe:	2676      	movs	r6, #118	; 0x76
    5500:	1f43      	subs	r3, r0, #5
    5502:	409f      	lsls	r7, r3
    5504:	2300      	movs	r3, #0
    5506:	4276      	negs	r6, r6
    5508:	1a36      	subs	r6, r6, r0
    550a:	4699      	mov	r9, r3
    550c:	469a      	mov	sl, r3
    550e:	e79d      	b.n	544c <__aeabi_fmul+0x30>
    5510:	230c      	movs	r3, #12
    5512:	4699      	mov	r9, r3
    5514:	3b09      	subs	r3, #9
    5516:	26ff      	movs	r6, #255	; 0xff
    5518:	469a      	mov	sl, r3
    551a:	e797      	b.n	544c <__aeabi_fmul+0x30>
    551c:	0028      	movs	r0, r5
    551e:	f002 f953 	bl	77c8 <__clzsi2>
    5522:	1f43      	subs	r3, r0, #5
    5524:	409d      	lsls	r5, r3
    5526:	2376      	movs	r3, #118	; 0x76
    5528:	425b      	negs	r3, r3
    552a:	1a18      	subs	r0, r3, r0
    552c:	2200      	movs	r2, #0
    552e:	e79d      	b.n	546c <__aeabi_fmul+0x50>
    5530:	2080      	movs	r0, #128	; 0x80
    5532:	2400      	movs	r4, #0
    5534:	03c0      	lsls	r0, r0, #15
    5536:	22ff      	movs	r2, #255	; 0xff
    5538:	e7ba      	b.n	54b0 <__aeabi_fmul+0x94>
    553a:	003d      	movs	r5, r7
    553c:	4652      	mov	r2, sl
    553e:	e7ab      	b.n	5498 <__aeabi_fmul+0x7c>
    5540:	003d      	movs	r5, r7
    5542:	0021      	movs	r1, r4
    5544:	4652      	mov	r2, sl
    5546:	e7a7      	b.n	5498 <__aeabi_fmul+0x7c>
    5548:	0c3b      	lsrs	r3, r7, #16
    554a:	469c      	mov	ip, r3
    554c:	042a      	lsls	r2, r5, #16
    554e:	0c12      	lsrs	r2, r2, #16
    5550:	0c2b      	lsrs	r3, r5, #16
    5552:	0014      	movs	r4, r2
    5554:	4660      	mov	r0, ip
    5556:	4665      	mov	r5, ip
    5558:	043f      	lsls	r7, r7, #16
    555a:	0c3f      	lsrs	r7, r7, #16
    555c:	437c      	muls	r4, r7
    555e:	4342      	muls	r2, r0
    5560:	435d      	muls	r5, r3
    5562:	437b      	muls	r3, r7
    5564:	0c27      	lsrs	r7, r4, #16
    5566:	189b      	adds	r3, r3, r2
    5568:	18ff      	adds	r7, r7, r3
    556a:	42ba      	cmp	r2, r7
    556c:	d903      	bls.n	5576 <__aeabi_fmul+0x15a>
    556e:	2380      	movs	r3, #128	; 0x80
    5570:	025b      	lsls	r3, r3, #9
    5572:	469c      	mov	ip, r3
    5574:	4465      	add	r5, ip
    5576:	0424      	lsls	r4, r4, #16
    5578:	043a      	lsls	r2, r7, #16
    557a:	0c24      	lsrs	r4, r4, #16
    557c:	1912      	adds	r2, r2, r4
    557e:	0193      	lsls	r3, r2, #6
    5580:	1e5c      	subs	r4, r3, #1
    5582:	41a3      	sbcs	r3, r4
    5584:	0c3f      	lsrs	r7, r7, #16
    5586:	0e92      	lsrs	r2, r2, #26
    5588:	197d      	adds	r5, r7, r5
    558a:	431a      	orrs	r2, r3
    558c:	01ad      	lsls	r5, r5, #6
    558e:	4315      	orrs	r5, r2
    5590:	012b      	lsls	r3, r5, #4
    5592:	d504      	bpl.n	559e <__aeabi_fmul+0x182>
    5594:	2301      	movs	r3, #1
    5596:	465e      	mov	r6, fp
    5598:	086a      	lsrs	r2, r5, #1
    559a:	401d      	ands	r5, r3
    559c:	4315      	orrs	r5, r2
    559e:	0032      	movs	r2, r6
    55a0:	327f      	adds	r2, #127	; 0x7f
    55a2:	2a00      	cmp	r2, #0
    55a4:	dd25      	ble.n	55f2 <__aeabi_fmul+0x1d6>
    55a6:	076b      	lsls	r3, r5, #29
    55a8:	d004      	beq.n	55b4 <__aeabi_fmul+0x198>
    55aa:	230f      	movs	r3, #15
    55ac:	402b      	ands	r3, r5
    55ae:	2b04      	cmp	r3, #4
    55b0:	d000      	beq.n	55b4 <__aeabi_fmul+0x198>
    55b2:	3504      	adds	r5, #4
    55b4:	012b      	lsls	r3, r5, #4
    55b6:	d503      	bpl.n	55c0 <__aeabi_fmul+0x1a4>
    55b8:	0032      	movs	r2, r6
    55ba:	4b27      	ldr	r3, [pc, #156]	; (5658 <__aeabi_fmul+0x23c>)
    55bc:	3280      	adds	r2, #128	; 0x80
    55be:	401d      	ands	r5, r3
    55c0:	2afe      	cmp	r2, #254	; 0xfe
    55c2:	dc94      	bgt.n	54ee <__aeabi_fmul+0xd2>
    55c4:	2401      	movs	r4, #1
    55c6:	01a8      	lsls	r0, r5, #6
    55c8:	0a40      	lsrs	r0, r0, #9
    55ca:	b2d2      	uxtb	r2, r2
    55cc:	400c      	ands	r4, r1
    55ce:	e76f      	b.n	54b0 <__aeabi_fmul+0x94>
    55d0:	2080      	movs	r0, #128	; 0x80
    55d2:	03c0      	lsls	r0, r0, #15
    55d4:	4207      	tst	r7, r0
    55d6:	d007      	beq.n	55e8 <__aeabi_fmul+0x1cc>
    55d8:	4205      	tst	r5, r0
    55da:	d105      	bne.n	55e8 <__aeabi_fmul+0x1cc>
    55dc:	4328      	orrs	r0, r5
    55de:	0240      	lsls	r0, r0, #9
    55e0:	0a40      	lsrs	r0, r0, #9
    55e2:	4644      	mov	r4, r8
    55e4:	22ff      	movs	r2, #255	; 0xff
    55e6:	e763      	b.n	54b0 <__aeabi_fmul+0x94>
    55e8:	4338      	orrs	r0, r7
    55ea:	0240      	lsls	r0, r0, #9
    55ec:	0a40      	lsrs	r0, r0, #9
    55ee:	22ff      	movs	r2, #255	; 0xff
    55f0:	e75e      	b.n	54b0 <__aeabi_fmul+0x94>
    55f2:	2401      	movs	r4, #1
    55f4:	1aa3      	subs	r3, r4, r2
    55f6:	2b1b      	cmp	r3, #27
    55f8:	dd05      	ble.n	5606 <__aeabi_fmul+0x1ea>
    55fa:	400c      	ands	r4, r1
    55fc:	2200      	movs	r2, #0
    55fe:	2000      	movs	r0, #0
    5600:	e756      	b.n	54b0 <__aeabi_fmul+0x94>
    5602:	465e      	mov	r6, fp
    5604:	e7cb      	b.n	559e <__aeabi_fmul+0x182>
    5606:	002a      	movs	r2, r5
    5608:	2020      	movs	r0, #32
    560a:	40da      	lsrs	r2, r3
    560c:	1ac3      	subs	r3, r0, r3
    560e:	409d      	lsls	r5, r3
    5610:	002b      	movs	r3, r5
    5612:	1e5d      	subs	r5, r3, #1
    5614:	41ab      	sbcs	r3, r5
    5616:	4313      	orrs	r3, r2
    5618:	075a      	lsls	r2, r3, #29
    561a:	d004      	beq.n	5626 <__aeabi_fmul+0x20a>
    561c:	220f      	movs	r2, #15
    561e:	401a      	ands	r2, r3
    5620:	2a04      	cmp	r2, #4
    5622:	d000      	beq.n	5626 <__aeabi_fmul+0x20a>
    5624:	3304      	adds	r3, #4
    5626:	015a      	lsls	r2, r3, #5
    5628:	d504      	bpl.n	5634 <__aeabi_fmul+0x218>
    562a:	2401      	movs	r4, #1
    562c:	2201      	movs	r2, #1
    562e:	400c      	ands	r4, r1
    5630:	2000      	movs	r0, #0
    5632:	e73d      	b.n	54b0 <__aeabi_fmul+0x94>
    5634:	2401      	movs	r4, #1
    5636:	019b      	lsls	r3, r3, #6
    5638:	0a58      	lsrs	r0, r3, #9
    563a:	400c      	ands	r4, r1
    563c:	2200      	movs	r2, #0
    563e:	e737      	b.n	54b0 <__aeabi_fmul+0x94>
    5640:	2080      	movs	r0, #128	; 0x80
    5642:	2401      	movs	r4, #1
    5644:	03c0      	lsls	r0, r0, #15
    5646:	4328      	orrs	r0, r5
    5648:	0240      	lsls	r0, r0, #9
    564a:	0a40      	lsrs	r0, r0, #9
    564c:	400c      	ands	r4, r1
    564e:	22ff      	movs	r2, #255	; 0xff
    5650:	e72e      	b.n	54b0 <__aeabi_fmul+0x94>
    5652:	46c0      	nop			; (mov r8, r8)
    5654:	00008424 	.word	0x00008424
    5658:	f7ffffff 	.word	0xf7ffffff

0000565c <__aeabi_fsub>:
    565c:	b5f0      	push	{r4, r5, r6, r7, lr}
    565e:	464f      	mov	r7, r9
    5660:	46d6      	mov	lr, sl
    5662:	4646      	mov	r6, r8
    5664:	0044      	lsls	r4, r0, #1
    5666:	b5c0      	push	{r6, r7, lr}
    5668:	0fc2      	lsrs	r2, r0, #31
    566a:	0247      	lsls	r7, r0, #9
    566c:	0248      	lsls	r0, r1, #9
    566e:	0a40      	lsrs	r0, r0, #9
    5670:	4684      	mov	ip, r0
    5672:	4666      	mov	r6, ip
    5674:	0a7b      	lsrs	r3, r7, #9
    5676:	0048      	lsls	r0, r1, #1
    5678:	0fc9      	lsrs	r1, r1, #31
    567a:	469a      	mov	sl, r3
    567c:	0e24      	lsrs	r4, r4, #24
    567e:	0015      	movs	r5, r2
    5680:	00db      	lsls	r3, r3, #3
    5682:	0e00      	lsrs	r0, r0, #24
    5684:	4689      	mov	r9, r1
    5686:	00f6      	lsls	r6, r6, #3
    5688:	28ff      	cmp	r0, #255	; 0xff
    568a:	d100      	bne.n	568e <__aeabi_fsub+0x32>
    568c:	e08f      	b.n	57ae <__aeabi_fsub+0x152>
    568e:	2101      	movs	r1, #1
    5690:	464f      	mov	r7, r9
    5692:	404f      	eors	r7, r1
    5694:	0039      	movs	r1, r7
    5696:	4291      	cmp	r1, r2
    5698:	d066      	beq.n	5768 <__aeabi_fsub+0x10c>
    569a:	1a22      	subs	r2, r4, r0
    569c:	2a00      	cmp	r2, #0
    569e:	dc00      	bgt.n	56a2 <__aeabi_fsub+0x46>
    56a0:	e09d      	b.n	57de <__aeabi_fsub+0x182>
    56a2:	2800      	cmp	r0, #0
    56a4:	d13d      	bne.n	5722 <__aeabi_fsub+0xc6>
    56a6:	2e00      	cmp	r6, #0
    56a8:	d100      	bne.n	56ac <__aeabi_fsub+0x50>
    56aa:	e08b      	b.n	57c4 <__aeabi_fsub+0x168>
    56ac:	1e51      	subs	r1, r2, #1
    56ae:	2900      	cmp	r1, #0
    56b0:	d000      	beq.n	56b4 <__aeabi_fsub+0x58>
    56b2:	e0b5      	b.n	5820 <__aeabi_fsub+0x1c4>
    56b4:	2401      	movs	r4, #1
    56b6:	1b9b      	subs	r3, r3, r6
    56b8:	015a      	lsls	r2, r3, #5
    56ba:	d544      	bpl.n	5746 <__aeabi_fsub+0xea>
    56bc:	019b      	lsls	r3, r3, #6
    56be:	099f      	lsrs	r7, r3, #6
    56c0:	0038      	movs	r0, r7
    56c2:	f002 f881 	bl	77c8 <__clzsi2>
    56c6:	3805      	subs	r0, #5
    56c8:	4087      	lsls	r7, r0
    56ca:	4284      	cmp	r4, r0
    56cc:	dd00      	ble.n	56d0 <__aeabi_fsub+0x74>
    56ce:	e096      	b.n	57fe <__aeabi_fsub+0x1a2>
    56d0:	1b04      	subs	r4, r0, r4
    56d2:	003a      	movs	r2, r7
    56d4:	2020      	movs	r0, #32
    56d6:	3401      	adds	r4, #1
    56d8:	40e2      	lsrs	r2, r4
    56da:	1b04      	subs	r4, r0, r4
    56dc:	40a7      	lsls	r7, r4
    56de:	003b      	movs	r3, r7
    56e0:	1e5f      	subs	r7, r3, #1
    56e2:	41bb      	sbcs	r3, r7
    56e4:	2400      	movs	r4, #0
    56e6:	4313      	orrs	r3, r2
    56e8:	075a      	lsls	r2, r3, #29
    56ea:	d004      	beq.n	56f6 <__aeabi_fsub+0x9a>
    56ec:	220f      	movs	r2, #15
    56ee:	401a      	ands	r2, r3
    56f0:	2a04      	cmp	r2, #4
    56f2:	d000      	beq.n	56f6 <__aeabi_fsub+0x9a>
    56f4:	3304      	adds	r3, #4
    56f6:	015a      	lsls	r2, r3, #5
    56f8:	d527      	bpl.n	574a <__aeabi_fsub+0xee>
    56fa:	3401      	adds	r4, #1
    56fc:	2cff      	cmp	r4, #255	; 0xff
    56fe:	d100      	bne.n	5702 <__aeabi_fsub+0xa6>
    5700:	e079      	b.n	57f6 <__aeabi_fsub+0x19a>
    5702:	2201      	movs	r2, #1
    5704:	019b      	lsls	r3, r3, #6
    5706:	0a5b      	lsrs	r3, r3, #9
    5708:	b2e4      	uxtb	r4, r4
    570a:	402a      	ands	r2, r5
    570c:	025b      	lsls	r3, r3, #9
    570e:	05e4      	lsls	r4, r4, #23
    5710:	0a58      	lsrs	r0, r3, #9
    5712:	07d2      	lsls	r2, r2, #31
    5714:	4320      	orrs	r0, r4
    5716:	4310      	orrs	r0, r2
    5718:	bc1c      	pop	{r2, r3, r4}
    571a:	4690      	mov	r8, r2
    571c:	4699      	mov	r9, r3
    571e:	46a2      	mov	sl, r4
    5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5722:	2cff      	cmp	r4, #255	; 0xff
    5724:	d0e0      	beq.n	56e8 <__aeabi_fsub+0x8c>
    5726:	2180      	movs	r1, #128	; 0x80
    5728:	04c9      	lsls	r1, r1, #19
    572a:	430e      	orrs	r6, r1
    572c:	2a1b      	cmp	r2, #27
    572e:	dc7b      	bgt.n	5828 <__aeabi_fsub+0x1cc>
    5730:	0031      	movs	r1, r6
    5732:	2020      	movs	r0, #32
    5734:	40d1      	lsrs	r1, r2
    5736:	1a82      	subs	r2, r0, r2
    5738:	4096      	lsls	r6, r2
    573a:	1e72      	subs	r2, r6, #1
    573c:	4196      	sbcs	r6, r2
    573e:	430e      	orrs	r6, r1
    5740:	1b9b      	subs	r3, r3, r6
    5742:	015a      	lsls	r2, r3, #5
    5744:	d4ba      	bmi.n	56bc <__aeabi_fsub+0x60>
    5746:	075a      	lsls	r2, r3, #29
    5748:	d1d0      	bne.n	56ec <__aeabi_fsub+0x90>
    574a:	2201      	movs	r2, #1
    574c:	08df      	lsrs	r7, r3, #3
    574e:	402a      	ands	r2, r5
    5750:	2cff      	cmp	r4, #255	; 0xff
    5752:	d133      	bne.n	57bc <__aeabi_fsub+0x160>
    5754:	2f00      	cmp	r7, #0
    5756:	d100      	bne.n	575a <__aeabi_fsub+0xfe>
    5758:	e0a8      	b.n	58ac <__aeabi_fsub+0x250>
    575a:	2380      	movs	r3, #128	; 0x80
    575c:	03db      	lsls	r3, r3, #15
    575e:	433b      	orrs	r3, r7
    5760:	025b      	lsls	r3, r3, #9
    5762:	0a5b      	lsrs	r3, r3, #9
    5764:	24ff      	movs	r4, #255	; 0xff
    5766:	e7d1      	b.n	570c <__aeabi_fsub+0xb0>
    5768:	1a21      	subs	r1, r4, r0
    576a:	2900      	cmp	r1, #0
    576c:	dd4c      	ble.n	5808 <__aeabi_fsub+0x1ac>
    576e:	2800      	cmp	r0, #0
    5770:	d02a      	beq.n	57c8 <__aeabi_fsub+0x16c>
    5772:	2cff      	cmp	r4, #255	; 0xff
    5774:	d0b8      	beq.n	56e8 <__aeabi_fsub+0x8c>
    5776:	2080      	movs	r0, #128	; 0x80
    5778:	04c0      	lsls	r0, r0, #19
    577a:	4306      	orrs	r6, r0
    577c:	291b      	cmp	r1, #27
    577e:	dd00      	ble.n	5782 <__aeabi_fsub+0x126>
    5780:	e0af      	b.n	58e2 <__aeabi_fsub+0x286>
    5782:	0030      	movs	r0, r6
    5784:	2720      	movs	r7, #32
    5786:	40c8      	lsrs	r0, r1
    5788:	1a79      	subs	r1, r7, r1
    578a:	408e      	lsls	r6, r1
    578c:	1e71      	subs	r1, r6, #1
    578e:	418e      	sbcs	r6, r1
    5790:	4306      	orrs	r6, r0
    5792:	199b      	adds	r3, r3, r6
    5794:	0159      	lsls	r1, r3, #5
    5796:	d5d6      	bpl.n	5746 <__aeabi_fsub+0xea>
    5798:	3401      	adds	r4, #1
    579a:	2cff      	cmp	r4, #255	; 0xff
    579c:	d100      	bne.n	57a0 <__aeabi_fsub+0x144>
    579e:	e085      	b.n	58ac <__aeabi_fsub+0x250>
    57a0:	2201      	movs	r2, #1
    57a2:	497a      	ldr	r1, [pc, #488]	; (598c <__aeabi_fsub+0x330>)
    57a4:	401a      	ands	r2, r3
    57a6:	085b      	lsrs	r3, r3, #1
    57a8:	400b      	ands	r3, r1
    57aa:	4313      	orrs	r3, r2
    57ac:	e79c      	b.n	56e8 <__aeabi_fsub+0x8c>
    57ae:	2e00      	cmp	r6, #0
    57b0:	d000      	beq.n	57b4 <__aeabi_fsub+0x158>
    57b2:	e770      	b.n	5696 <__aeabi_fsub+0x3a>
    57b4:	e76b      	b.n	568e <__aeabi_fsub+0x32>
    57b6:	1e3b      	subs	r3, r7, #0
    57b8:	d1c5      	bne.n	5746 <__aeabi_fsub+0xea>
    57ba:	2200      	movs	r2, #0
    57bc:	027b      	lsls	r3, r7, #9
    57be:	0a5b      	lsrs	r3, r3, #9
    57c0:	b2e4      	uxtb	r4, r4
    57c2:	e7a3      	b.n	570c <__aeabi_fsub+0xb0>
    57c4:	0014      	movs	r4, r2
    57c6:	e78f      	b.n	56e8 <__aeabi_fsub+0x8c>
    57c8:	2e00      	cmp	r6, #0
    57ca:	d04d      	beq.n	5868 <__aeabi_fsub+0x20c>
    57cc:	1e48      	subs	r0, r1, #1
    57ce:	2800      	cmp	r0, #0
    57d0:	d157      	bne.n	5882 <__aeabi_fsub+0x226>
    57d2:	199b      	adds	r3, r3, r6
    57d4:	2401      	movs	r4, #1
    57d6:	015a      	lsls	r2, r3, #5
    57d8:	d5b5      	bpl.n	5746 <__aeabi_fsub+0xea>
    57da:	2402      	movs	r4, #2
    57dc:	e7e0      	b.n	57a0 <__aeabi_fsub+0x144>
    57de:	2a00      	cmp	r2, #0
    57e0:	d125      	bne.n	582e <__aeabi_fsub+0x1d2>
    57e2:	1c62      	adds	r2, r4, #1
    57e4:	b2d2      	uxtb	r2, r2
    57e6:	2a01      	cmp	r2, #1
    57e8:	dd72      	ble.n	58d0 <__aeabi_fsub+0x274>
    57ea:	1b9f      	subs	r7, r3, r6
    57ec:	017a      	lsls	r2, r7, #5
    57ee:	d535      	bpl.n	585c <__aeabi_fsub+0x200>
    57f0:	1af7      	subs	r7, r6, r3
    57f2:	000d      	movs	r5, r1
    57f4:	e764      	b.n	56c0 <__aeabi_fsub+0x64>
    57f6:	2201      	movs	r2, #1
    57f8:	2300      	movs	r3, #0
    57fa:	402a      	ands	r2, r5
    57fc:	e786      	b.n	570c <__aeabi_fsub+0xb0>
    57fe:	003b      	movs	r3, r7
    5800:	4a63      	ldr	r2, [pc, #396]	; (5990 <__aeabi_fsub+0x334>)
    5802:	1a24      	subs	r4, r4, r0
    5804:	4013      	ands	r3, r2
    5806:	e76f      	b.n	56e8 <__aeabi_fsub+0x8c>
    5808:	2900      	cmp	r1, #0
    580a:	d16c      	bne.n	58e6 <__aeabi_fsub+0x28a>
    580c:	1c61      	adds	r1, r4, #1
    580e:	b2c8      	uxtb	r0, r1
    5810:	2801      	cmp	r0, #1
    5812:	dd4e      	ble.n	58b2 <__aeabi_fsub+0x256>
    5814:	29ff      	cmp	r1, #255	; 0xff
    5816:	d049      	beq.n	58ac <__aeabi_fsub+0x250>
    5818:	199b      	adds	r3, r3, r6
    581a:	085b      	lsrs	r3, r3, #1
    581c:	000c      	movs	r4, r1
    581e:	e763      	b.n	56e8 <__aeabi_fsub+0x8c>
    5820:	2aff      	cmp	r2, #255	; 0xff
    5822:	d041      	beq.n	58a8 <__aeabi_fsub+0x24c>
    5824:	000a      	movs	r2, r1
    5826:	e781      	b.n	572c <__aeabi_fsub+0xd0>
    5828:	2601      	movs	r6, #1
    582a:	1b9b      	subs	r3, r3, r6
    582c:	e789      	b.n	5742 <__aeabi_fsub+0xe6>
    582e:	2c00      	cmp	r4, #0
    5830:	d01c      	beq.n	586c <__aeabi_fsub+0x210>
    5832:	28ff      	cmp	r0, #255	; 0xff
    5834:	d021      	beq.n	587a <__aeabi_fsub+0x21e>
    5836:	2480      	movs	r4, #128	; 0x80
    5838:	04e4      	lsls	r4, r4, #19
    583a:	4252      	negs	r2, r2
    583c:	4323      	orrs	r3, r4
    583e:	2a1b      	cmp	r2, #27
    5840:	dd00      	ble.n	5844 <__aeabi_fsub+0x1e8>
    5842:	e096      	b.n	5972 <__aeabi_fsub+0x316>
    5844:	001c      	movs	r4, r3
    5846:	2520      	movs	r5, #32
    5848:	40d4      	lsrs	r4, r2
    584a:	1aaa      	subs	r2, r5, r2
    584c:	4093      	lsls	r3, r2
    584e:	1e5a      	subs	r2, r3, #1
    5850:	4193      	sbcs	r3, r2
    5852:	4323      	orrs	r3, r4
    5854:	1af3      	subs	r3, r6, r3
    5856:	0004      	movs	r4, r0
    5858:	000d      	movs	r5, r1
    585a:	e72d      	b.n	56b8 <__aeabi_fsub+0x5c>
    585c:	2f00      	cmp	r7, #0
    585e:	d000      	beq.n	5862 <__aeabi_fsub+0x206>
    5860:	e72e      	b.n	56c0 <__aeabi_fsub+0x64>
    5862:	2200      	movs	r2, #0
    5864:	2400      	movs	r4, #0
    5866:	e7a9      	b.n	57bc <__aeabi_fsub+0x160>
    5868:	000c      	movs	r4, r1
    586a:	e73d      	b.n	56e8 <__aeabi_fsub+0x8c>
    586c:	2b00      	cmp	r3, #0
    586e:	d058      	beq.n	5922 <__aeabi_fsub+0x2c6>
    5870:	43d2      	mvns	r2, r2
    5872:	2a00      	cmp	r2, #0
    5874:	d0ee      	beq.n	5854 <__aeabi_fsub+0x1f8>
    5876:	28ff      	cmp	r0, #255	; 0xff
    5878:	d1e1      	bne.n	583e <__aeabi_fsub+0x1e2>
    587a:	0033      	movs	r3, r6
    587c:	24ff      	movs	r4, #255	; 0xff
    587e:	000d      	movs	r5, r1
    5880:	e732      	b.n	56e8 <__aeabi_fsub+0x8c>
    5882:	29ff      	cmp	r1, #255	; 0xff
    5884:	d010      	beq.n	58a8 <__aeabi_fsub+0x24c>
    5886:	0001      	movs	r1, r0
    5888:	e778      	b.n	577c <__aeabi_fsub+0x120>
    588a:	2b00      	cmp	r3, #0
    588c:	d06e      	beq.n	596c <__aeabi_fsub+0x310>
    588e:	24ff      	movs	r4, #255	; 0xff
    5890:	2e00      	cmp	r6, #0
    5892:	d100      	bne.n	5896 <__aeabi_fsub+0x23a>
    5894:	e728      	b.n	56e8 <__aeabi_fsub+0x8c>
    5896:	2280      	movs	r2, #128	; 0x80
    5898:	4651      	mov	r1, sl
    589a:	03d2      	lsls	r2, r2, #15
    589c:	4211      	tst	r1, r2
    589e:	d003      	beq.n	58a8 <__aeabi_fsub+0x24c>
    58a0:	4661      	mov	r1, ip
    58a2:	4211      	tst	r1, r2
    58a4:	d100      	bne.n	58a8 <__aeabi_fsub+0x24c>
    58a6:	0033      	movs	r3, r6
    58a8:	24ff      	movs	r4, #255	; 0xff
    58aa:	e71d      	b.n	56e8 <__aeabi_fsub+0x8c>
    58ac:	24ff      	movs	r4, #255	; 0xff
    58ae:	2300      	movs	r3, #0
    58b0:	e72c      	b.n	570c <__aeabi_fsub+0xb0>
    58b2:	2c00      	cmp	r4, #0
    58b4:	d1e9      	bne.n	588a <__aeabi_fsub+0x22e>
    58b6:	2b00      	cmp	r3, #0
    58b8:	d063      	beq.n	5982 <__aeabi_fsub+0x326>
    58ba:	2e00      	cmp	r6, #0
    58bc:	d100      	bne.n	58c0 <__aeabi_fsub+0x264>
    58be:	e713      	b.n	56e8 <__aeabi_fsub+0x8c>
    58c0:	199b      	adds	r3, r3, r6
    58c2:	015a      	lsls	r2, r3, #5
    58c4:	d400      	bmi.n	58c8 <__aeabi_fsub+0x26c>
    58c6:	e73e      	b.n	5746 <__aeabi_fsub+0xea>
    58c8:	4a31      	ldr	r2, [pc, #196]	; (5990 <__aeabi_fsub+0x334>)
    58ca:	000c      	movs	r4, r1
    58cc:	4013      	ands	r3, r2
    58ce:	e70b      	b.n	56e8 <__aeabi_fsub+0x8c>
    58d0:	2c00      	cmp	r4, #0
    58d2:	d11e      	bne.n	5912 <__aeabi_fsub+0x2b6>
    58d4:	2b00      	cmp	r3, #0
    58d6:	d12f      	bne.n	5938 <__aeabi_fsub+0x2dc>
    58d8:	2e00      	cmp	r6, #0
    58da:	d04f      	beq.n	597c <__aeabi_fsub+0x320>
    58dc:	0033      	movs	r3, r6
    58de:	000d      	movs	r5, r1
    58e0:	e702      	b.n	56e8 <__aeabi_fsub+0x8c>
    58e2:	2601      	movs	r6, #1
    58e4:	e755      	b.n	5792 <__aeabi_fsub+0x136>
    58e6:	2c00      	cmp	r4, #0
    58e8:	d11f      	bne.n	592a <__aeabi_fsub+0x2ce>
    58ea:	2b00      	cmp	r3, #0
    58ec:	d043      	beq.n	5976 <__aeabi_fsub+0x31a>
    58ee:	43c9      	mvns	r1, r1
    58f0:	2900      	cmp	r1, #0
    58f2:	d00b      	beq.n	590c <__aeabi_fsub+0x2b0>
    58f4:	28ff      	cmp	r0, #255	; 0xff
    58f6:	d039      	beq.n	596c <__aeabi_fsub+0x310>
    58f8:	291b      	cmp	r1, #27
    58fa:	dc44      	bgt.n	5986 <__aeabi_fsub+0x32a>
    58fc:	001c      	movs	r4, r3
    58fe:	2720      	movs	r7, #32
    5900:	40cc      	lsrs	r4, r1
    5902:	1a79      	subs	r1, r7, r1
    5904:	408b      	lsls	r3, r1
    5906:	1e59      	subs	r1, r3, #1
    5908:	418b      	sbcs	r3, r1
    590a:	4323      	orrs	r3, r4
    590c:	199b      	adds	r3, r3, r6
    590e:	0004      	movs	r4, r0
    5910:	e740      	b.n	5794 <__aeabi_fsub+0x138>
    5912:	2b00      	cmp	r3, #0
    5914:	d11a      	bne.n	594c <__aeabi_fsub+0x2f0>
    5916:	2e00      	cmp	r6, #0
    5918:	d124      	bne.n	5964 <__aeabi_fsub+0x308>
    591a:	2780      	movs	r7, #128	; 0x80
    591c:	2200      	movs	r2, #0
    591e:	03ff      	lsls	r7, r7, #15
    5920:	e71b      	b.n	575a <__aeabi_fsub+0xfe>
    5922:	0033      	movs	r3, r6
    5924:	0004      	movs	r4, r0
    5926:	000d      	movs	r5, r1
    5928:	e6de      	b.n	56e8 <__aeabi_fsub+0x8c>
    592a:	28ff      	cmp	r0, #255	; 0xff
    592c:	d01e      	beq.n	596c <__aeabi_fsub+0x310>
    592e:	2480      	movs	r4, #128	; 0x80
    5930:	04e4      	lsls	r4, r4, #19
    5932:	4249      	negs	r1, r1
    5934:	4323      	orrs	r3, r4
    5936:	e7df      	b.n	58f8 <__aeabi_fsub+0x29c>
    5938:	2e00      	cmp	r6, #0
    593a:	d100      	bne.n	593e <__aeabi_fsub+0x2e2>
    593c:	e6d4      	b.n	56e8 <__aeabi_fsub+0x8c>
    593e:	1b9f      	subs	r7, r3, r6
    5940:	017a      	lsls	r2, r7, #5
    5942:	d400      	bmi.n	5946 <__aeabi_fsub+0x2ea>
    5944:	e737      	b.n	57b6 <__aeabi_fsub+0x15a>
    5946:	1af3      	subs	r3, r6, r3
    5948:	000d      	movs	r5, r1
    594a:	e6cd      	b.n	56e8 <__aeabi_fsub+0x8c>
    594c:	24ff      	movs	r4, #255	; 0xff
    594e:	2e00      	cmp	r6, #0
    5950:	d100      	bne.n	5954 <__aeabi_fsub+0x2f8>
    5952:	e6c9      	b.n	56e8 <__aeabi_fsub+0x8c>
    5954:	2280      	movs	r2, #128	; 0x80
    5956:	4650      	mov	r0, sl
    5958:	03d2      	lsls	r2, r2, #15
    595a:	4210      	tst	r0, r2
    595c:	d0a4      	beq.n	58a8 <__aeabi_fsub+0x24c>
    595e:	4660      	mov	r0, ip
    5960:	4210      	tst	r0, r2
    5962:	d1a1      	bne.n	58a8 <__aeabi_fsub+0x24c>
    5964:	0033      	movs	r3, r6
    5966:	000d      	movs	r5, r1
    5968:	24ff      	movs	r4, #255	; 0xff
    596a:	e6bd      	b.n	56e8 <__aeabi_fsub+0x8c>
    596c:	0033      	movs	r3, r6
    596e:	24ff      	movs	r4, #255	; 0xff
    5970:	e6ba      	b.n	56e8 <__aeabi_fsub+0x8c>
    5972:	2301      	movs	r3, #1
    5974:	e76e      	b.n	5854 <__aeabi_fsub+0x1f8>
    5976:	0033      	movs	r3, r6
    5978:	0004      	movs	r4, r0
    597a:	e6b5      	b.n	56e8 <__aeabi_fsub+0x8c>
    597c:	2700      	movs	r7, #0
    597e:	2200      	movs	r2, #0
    5980:	e71c      	b.n	57bc <__aeabi_fsub+0x160>
    5982:	0033      	movs	r3, r6
    5984:	e6b0      	b.n	56e8 <__aeabi_fsub+0x8c>
    5986:	2301      	movs	r3, #1
    5988:	e7c0      	b.n	590c <__aeabi_fsub+0x2b0>
    598a:	46c0      	nop			; (mov r8, r8)
    598c:	7dffffff 	.word	0x7dffffff
    5990:	fbffffff 	.word	0xfbffffff

00005994 <__aeabi_f2iz>:
    5994:	0241      	lsls	r1, r0, #9
    5996:	0043      	lsls	r3, r0, #1
    5998:	0fc2      	lsrs	r2, r0, #31
    599a:	0a49      	lsrs	r1, r1, #9
    599c:	0e1b      	lsrs	r3, r3, #24
    599e:	2000      	movs	r0, #0
    59a0:	2b7e      	cmp	r3, #126	; 0x7e
    59a2:	dd0d      	ble.n	59c0 <__aeabi_f2iz+0x2c>
    59a4:	2b9d      	cmp	r3, #157	; 0x9d
    59a6:	dc0c      	bgt.n	59c2 <__aeabi_f2iz+0x2e>
    59a8:	2080      	movs	r0, #128	; 0x80
    59aa:	0400      	lsls	r0, r0, #16
    59ac:	4301      	orrs	r1, r0
    59ae:	2b95      	cmp	r3, #149	; 0x95
    59b0:	dc0a      	bgt.n	59c8 <__aeabi_f2iz+0x34>
    59b2:	2096      	movs	r0, #150	; 0x96
    59b4:	1ac3      	subs	r3, r0, r3
    59b6:	40d9      	lsrs	r1, r3
    59b8:	4248      	negs	r0, r1
    59ba:	2a00      	cmp	r2, #0
    59bc:	d100      	bne.n	59c0 <__aeabi_f2iz+0x2c>
    59be:	0008      	movs	r0, r1
    59c0:	4770      	bx	lr
    59c2:	4b03      	ldr	r3, [pc, #12]	; (59d0 <__aeabi_f2iz+0x3c>)
    59c4:	18d0      	adds	r0, r2, r3
    59c6:	e7fb      	b.n	59c0 <__aeabi_f2iz+0x2c>
    59c8:	3b96      	subs	r3, #150	; 0x96
    59ca:	4099      	lsls	r1, r3
    59cc:	e7f4      	b.n	59b8 <__aeabi_f2iz+0x24>
    59ce:	46c0      	nop			; (mov r8, r8)
    59d0:	7fffffff 	.word	0x7fffffff

000059d4 <__aeabi_i2f>:
    59d4:	b570      	push	{r4, r5, r6, lr}
    59d6:	2800      	cmp	r0, #0
    59d8:	d030      	beq.n	5a3c <__aeabi_i2f+0x68>
    59da:	17c3      	asrs	r3, r0, #31
    59dc:	18c4      	adds	r4, r0, r3
    59de:	405c      	eors	r4, r3
    59e0:	0fc5      	lsrs	r5, r0, #31
    59e2:	0020      	movs	r0, r4
    59e4:	f001 fef0 	bl	77c8 <__clzsi2>
    59e8:	239e      	movs	r3, #158	; 0x9e
    59ea:	1a1b      	subs	r3, r3, r0
    59ec:	2b96      	cmp	r3, #150	; 0x96
    59ee:	dc0d      	bgt.n	5a0c <__aeabi_i2f+0x38>
    59f0:	2296      	movs	r2, #150	; 0x96
    59f2:	1ad2      	subs	r2, r2, r3
    59f4:	4094      	lsls	r4, r2
    59f6:	002a      	movs	r2, r5
    59f8:	0264      	lsls	r4, r4, #9
    59fa:	0a64      	lsrs	r4, r4, #9
    59fc:	b2db      	uxtb	r3, r3
    59fe:	0264      	lsls	r4, r4, #9
    5a00:	05db      	lsls	r3, r3, #23
    5a02:	0a60      	lsrs	r0, r4, #9
    5a04:	07d2      	lsls	r2, r2, #31
    5a06:	4318      	orrs	r0, r3
    5a08:	4310      	orrs	r0, r2
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
    5a0c:	2b99      	cmp	r3, #153	; 0x99
    5a0e:	dc19      	bgt.n	5a44 <__aeabi_i2f+0x70>
    5a10:	2299      	movs	r2, #153	; 0x99
    5a12:	1ad2      	subs	r2, r2, r3
    5a14:	2a00      	cmp	r2, #0
    5a16:	dd29      	ble.n	5a6c <__aeabi_i2f+0x98>
    5a18:	4094      	lsls	r4, r2
    5a1a:	0022      	movs	r2, r4
    5a1c:	4c14      	ldr	r4, [pc, #80]	; (5a70 <__aeabi_i2f+0x9c>)
    5a1e:	4014      	ands	r4, r2
    5a20:	0751      	lsls	r1, r2, #29
    5a22:	d004      	beq.n	5a2e <__aeabi_i2f+0x5a>
    5a24:	210f      	movs	r1, #15
    5a26:	400a      	ands	r2, r1
    5a28:	2a04      	cmp	r2, #4
    5a2a:	d000      	beq.n	5a2e <__aeabi_i2f+0x5a>
    5a2c:	3404      	adds	r4, #4
    5a2e:	0162      	lsls	r2, r4, #5
    5a30:	d413      	bmi.n	5a5a <__aeabi_i2f+0x86>
    5a32:	01a4      	lsls	r4, r4, #6
    5a34:	0a64      	lsrs	r4, r4, #9
    5a36:	b2db      	uxtb	r3, r3
    5a38:	002a      	movs	r2, r5
    5a3a:	e7e0      	b.n	59fe <__aeabi_i2f+0x2a>
    5a3c:	2200      	movs	r2, #0
    5a3e:	2300      	movs	r3, #0
    5a40:	2400      	movs	r4, #0
    5a42:	e7dc      	b.n	59fe <__aeabi_i2f+0x2a>
    5a44:	2205      	movs	r2, #5
    5a46:	0021      	movs	r1, r4
    5a48:	1a12      	subs	r2, r2, r0
    5a4a:	40d1      	lsrs	r1, r2
    5a4c:	22b9      	movs	r2, #185	; 0xb9
    5a4e:	1ad2      	subs	r2, r2, r3
    5a50:	4094      	lsls	r4, r2
    5a52:	1e62      	subs	r2, r4, #1
    5a54:	4194      	sbcs	r4, r2
    5a56:	430c      	orrs	r4, r1
    5a58:	e7da      	b.n	5a10 <__aeabi_i2f+0x3c>
    5a5a:	4b05      	ldr	r3, [pc, #20]	; (5a70 <__aeabi_i2f+0x9c>)
    5a5c:	002a      	movs	r2, r5
    5a5e:	401c      	ands	r4, r3
    5a60:	239f      	movs	r3, #159	; 0x9f
    5a62:	01a4      	lsls	r4, r4, #6
    5a64:	1a1b      	subs	r3, r3, r0
    5a66:	0a64      	lsrs	r4, r4, #9
    5a68:	b2db      	uxtb	r3, r3
    5a6a:	e7c8      	b.n	59fe <__aeabi_i2f+0x2a>
    5a6c:	0022      	movs	r2, r4
    5a6e:	e7d5      	b.n	5a1c <__aeabi_i2f+0x48>
    5a70:	fbffffff 	.word	0xfbffffff

00005a74 <__aeabi_ui2f>:
    5a74:	b510      	push	{r4, lr}
    5a76:	1e04      	subs	r4, r0, #0
    5a78:	d027      	beq.n	5aca <__aeabi_ui2f+0x56>
    5a7a:	f001 fea5 	bl	77c8 <__clzsi2>
    5a7e:	239e      	movs	r3, #158	; 0x9e
    5a80:	1a1b      	subs	r3, r3, r0
    5a82:	2b96      	cmp	r3, #150	; 0x96
    5a84:	dc0a      	bgt.n	5a9c <__aeabi_ui2f+0x28>
    5a86:	2296      	movs	r2, #150	; 0x96
    5a88:	1ad2      	subs	r2, r2, r3
    5a8a:	4094      	lsls	r4, r2
    5a8c:	0264      	lsls	r4, r4, #9
    5a8e:	0a64      	lsrs	r4, r4, #9
    5a90:	b2db      	uxtb	r3, r3
    5a92:	0264      	lsls	r4, r4, #9
    5a94:	05db      	lsls	r3, r3, #23
    5a96:	0a60      	lsrs	r0, r4, #9
    5a98:	4318      	orrs	r0, r3
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	2b99      	cmp	r3, #153	; 0x99
    5a9e:	dc17      	bgt.n	5ad0 <__aeabi_ui2f+0x5c>
    5aa0:	2299      	movs	r2, #153	; 0x99
    5aa2:	1ad2      	subs	r2, r2, r3
    5aa4:	2a00      	cmp	r2, #0
    5aa6:	dd27      	ble.n	5af8 <__aeabi_ui2f+0x84>
    5aa8:	4094      	lsls	r4, r2
    5aaa:	0022      	movs	r2, r4
    5aac:	4c13      	ldr	r4, [pc, #76]	; (5afc <__aeabi_ui2f+0x88>)
    5aae:	4014      	ands	r4, r2
    5ab0:	0751      	lsls	r1, r2, #29
    5ab2:	d004      	beq.n	5abe <__aeabi_ui2f+0x4a>
    5ab4:	210f      	movs	r1, #15
    5ab6:	400a      	ands	r2, r1
    5ab8:	2a04      	cmp	r2, #4
    5aba:	d000      	beq.n	5abe <__aeabi_ui2f+0x4a>
    5abc:	3404      	adds	r4, #4
    5abe:	0162      	lsls	r2, r4, #5
    5ac0:	d412      	bmi.n	5ae8 <__aeabi_ui2f+0x74>
    5ac2:	01a4      	lsls	r4, r4, #6
    5ac4:	0a64      	lsrs	r4, r4, #9
    5ac6:	b2db      	uxtb	r3, r3
    5ac8:	e7e3      	b.n	5a92 <__aeabi_ui2f+0x1e>
    5aca:	2300      	movs	r3, #0
    5acc:	2400      	movs	r4, #0
    5ace:	e7e0      	b.n	5a92 <__aeabi_ui2f+0x1e>
    5ad0:	22b9      	movs	r2, #185	; 0xb9
    5ad2:	0021      	movs	r1, r4
    5ad4:	1ad2      	subs	r2, r2, r3
    5ad6:	4091      	lsls	r1, r2
    5ad8:	000a      	movs	r2, r1
    5ada:	1e51      	subs	r1, r2, #1
    5adc:	418a      	sbcs	r2, r1
    5ade:	2105      	movs	r1, #5
    5ae0:	1a09      	subs	r1, r1, r0
    5ae2:	40cc      	lsrs	r4, r1
    5ae4:	4314      	orrs	r4, r2
    5ae6:	e7db      	b.n	5aa0 <__aeabi_ui2f+0x2c>
    5ae8:	4b04      	ldr	r3, [pc, #16]	; (5afc <__aeabi_ui2f+0x88>)
    5aea:	401c      	ands	r4, r3
    5aec:	239f      	movs	r3, #159	; 0x9f
    5aee:	01a4      	lsls	r4, r4, #6
    5af0:	1a1b      	subs	r3, r3, r0
    5af2:	0a64      	lsrs	r4, r4, #9
    5af4:	b2db      	uxtb	r3, r3
    5af6:	e7cc      	b.n	5a92 <__aeabi_ui2f+0x1e>
    5af8:	0022      	movs	r2, r4
    5afa:	e7d7      	b.n	5aac <__aeabi_ui2f+0x38>
    5afc:	fbffffff 	.word	0xfbffffff

00005b00 <__aeabi_dadd>:
    5b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b02:	4645      	mov	r5, r8
    5b04:	46de      	mov	lr, fp
    5b06:	4657      	mov	r7, sl
    5b08:	464e      	mov	r6, r9
    5b0a:	030c      	lsls	r4, r1, #12
    5b0c:	b5e0      	push	{r5, r6, r7, lr}
    5b0e:	004e      	lsls	r6, r1, #1
    5b10:	0fc9      	lsrs	r1, r1, #31
    5b12:	4688      	mov	r8, r1
    5b14:	000d      	movs	r5, r1
    5b16:	0a61      	lsrs	r1, r4, #9
    5b18:	0f44      	lsrs	r4, r0, #29
    5b1a:	430c      	orrs	r4, r1
    5b1c:	00c7      	lsls	r7, r0, #3
    5b1e:	0319      	lsls	r1, r3, #12
    5b20:	0058      	lsls	r0, r3, #1
    5b22:	0fdb      	lsrs	r3, r3, #31
    5b24:	469b      	mov	fp, r3
    5b26:	0a4b      	lsrs	r3, r1, #9
    5b28:	0f51      	lsrs	r1, r2, #29
    5b2a:	430b      	orrs	r3, r1
    5b2c:	0d76      	lsrs	r6, r6, #21
    5b2e:	0d40      	lsrs	r0, r0, #21
    5b30:	0019      	movs	r1, r3
    5b32:	00d2      	lsls	r2, r2, #3
    5b34:	45d8      	cmp	r8, fp
    5b36:	d100      	bne.n	5b3a <__aeabi_dadd+0x3a>
    5b38:	e0ae      	b.n	5c98 <__aeabi_dadd+0x198>
    5b3a:	1a35      	subs	r5, r6, r0
    5b3c:	2d00      	cmp	r5, #0
    5b3e:	dc00      	bgt.n	5b42 <__aeabi_dadd+0x42>
    5b40:	e0f6      	b.n	5d30 <__aeabi_dadd+0x230>
    5b42:	2800      	cmp	r0, #0
    5b44:	d10f      	bne.n	5b66 <__aeabi_dadd+0x66>
    5b46:	4313      	orrs	r3, r2
    5b48:	d100      	bne.n	5b4c <__aeabi_dadd+0x4c>
    5b4a:	e0db      	b.n	5d04 <__aeabi_dadd+0x204>
    5b4c:	1e6b      	subs	r3, r5, #1
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d000      	beq.n	5b54 <__aeabi_dadd+0x54>
    5b52:	e137      	b.n	5dc4 <__aeabi_dadd+0x2c4>
    5b54:	1aba      	subs	r2, r7, r2
    5b56:	4297      	cmp	r7, r2
    5b58:	41bf      	sbcs	r7, r7
    5b5a:	1a64      	subs	r4, r4, r1
    5b5c:	427f      	negs	r7, r7
    5b5e:	1be4      	subs	r4, r4, r7
    5b60:	2601      	movs	r6, #1
    5b62:	0017      	movs	r7, r2
    5b64:	e024      	b.n	5bb0 <__aeabi_dadd+0xb0>
    5b66:	4bc6      	ldr	r3, [pc, #792]	; (5e80 <__aeabi_dadd+0x380>)
    5b68:	429e      	cmp	r6, r3
    5b6a:	d04d      	beq.n	5c08 <__aeabi_dadd+0x108>
    5b6c:	2380      	movs	r3, #128	; 0x80
    5b6e:	041b      	lsls	r3, r3, #16
    5b70:	4319      	orrs	r1, r3
    5b72:	2d38      	cmp	r5, #56	; 0x38
    5b74:	dd00      	ble.n	5b78 <__aeabi_dadd+0x78>
    5b76:	e107      	b.n	5d88 <__aeabi_dadd+0x288>
    5b78:	2d1f      	cmp	r5, #31
    5b7a:	dd00      	ble.n	5b7e <__aeabi_dadd+0x7e>
    5b7c:	e138      	b.n	5df0 <__aeabi_dadd+0x2f0>
    5b7e:	2020      	movs	r0, #32
    5b80:	1b43      	subs	r3, r0, r5
    5b82:	469a      	mov	sl, r3
    5b84:	000b      	movs	r3, r1
    5b86:	4650      	mov	r0, sl
    5b88:	4083      	lsls	r3, r0
    5b8a:	4699      	mov	r9, r3
    5b8c:	0013      	movs	r3, r2
    5b8e:	4648      	mov	r0, r9
    5b90:	40eb      	lsrs	r3, r5
    5b92:	4318      	orrs	r0, r3
    5b94:	0003      	movs	r3, r0
    5b96:	4650      	mov	r0, sl
    5b98:	4082      	lsls	r2, r0
    5b9a:	1e50      	subs	r0, r2, #1
    5b9c:	4182      	sbcs	r2, r0
    5b9e:	40e9      	lsrs	r1, r5
    5ba0:	431a      	orrs	r2, r3
    5ba2:	1aba      	subs	r2, r7, r2
    5ba4:	1a61      	subs	r1, r4, r1
    5ba6:	4297      	cmp	r7, r2
    5ba8:	41a4      	sbcs	r4, r4
    5baa:	0017      	movs	r7, r2
    5bac:	4264      	negs	r4, r4
    5bae:	1b0c      	subs	r4, r1, r4
    5bb0:	0223      	lsls	r3, r4, #8
    5bb2:	d562      	bpl.n	5c7a <__aeabi_dadd+0x17a>
    5bb4:	0264      	lsls	r4, r4, #9
    5bb6:	0a65      	lsrs	r5, r4, #9
    5bb8:	2d00      	cmp	r5, #0
    5bba:	d100      	bne.n	5bbe <__aeabi_dadd+0xbe>
    5bbc:	e0df      	b.n	5d7e <__aeabi_dadd+0x27e>
    5bbe:	0028      	movs	r0, r5
    5bc0:	f001 fe02 	bl	77c8 <__clzsi2>
    5bc4:	0003      	movs	r3, r0
    5bc6:	3b08      	subs	r3, #8
    5bc8:	2b1f      	cmp	r3, #31
    5bca:	dd00      	ble.n	5bce <__aeabi_dadd+0xce>
    5bcc:	e0d2      	b.n	5d74 <__aeabi_dadd+0x274>
    5bce:	2220      	movs	r2, #32
    5bd0:	003c      	movs	r4, r7
    5bd2:	1ad2      	subs	r2, r2, r3
    5bd4:	409d      	lsls	r5, r3
    5bd6:	40d4      	lsrs	r4, r2
    5bd8:	409f      	lsls	r7, r3
    5bda:	4325      	orrs	r5, r4
    5bdc:	429e      	cmp	r6, r3
    5bde:	dd00      	ble.n	5be2 <__aeabi_dadd+0xe2>
    5be0:	e0c4      	b.n	5d6c <__aeabi_dadd+0x26c>
    5be2:	1b9e      	subs	r6, r3, r6
    5be4:	1c73      	adds	r3, r6, #1
    5be6:	2b1f      	cmp	r3, #31
    5be8:	dd00      	ble.n	5bec <__aeabi_dadd+0xec>
    5bea:	e0f1      	b.n	5dd0 <__aeabi_dadd+0x2d0>
    5bec:	2220      	movs	r2, #32
    5bee:	0038      	movs	r0, r7
    5bf0:	0029      	movs	r1, r5
    5bf2:	1ad2      	subs	r2, r2, r3
    5bf4:	40d8      	lsrs	r0, r3
    5bf6:	4091      	lsls	r1, r2
    5bf8:	4097      	lsls	r7, r2
    5bfa:	002c      	movs	r4, r5
    5bfc:	4301      	orrs	r1, r0
    5bfe:	1e78      	subs	r0, r7, #1
    5c00:	4187      	sbcs	r7, r0
    5c02:	40dc      	lsrs	r4, r3
    5c04:	2600      	movs	r6, #0
    5c06:	430f      	orrs	r7, r1
    5c08:	077b      	lsls	r3, r7, #29
    5c0a:	d009      	beq.n	5c20 <__aeabi_dadd+0x120>
    5c0c:	230f      	movs	r3, #15
    5c0e:	403b      	ands	r3, r7
    5c10:	2b04      	cmp	r3, #4
    5c12:	d005      	beq.n	5c20 <__aeabi_dadd+0x120>
    5c14:	1d3b      	adds	r3, r7, #4
    5c16:	42bb      	cmp	r3, r7
    5c18:	41bf      	sbcs	r7, r7
    5c1a:	427f      	negs	r7, r7
    5c1c:	19e4      	adds	r4, r4, r7
    5c1e:	001f      	movs	r7, r3
    5c20:	0223      	lsls	r3, r4, #8
    5c22:	d52c      	bpl.n	5c7e <__aeabi_dadd+0x17e>
    5c24:	4b96      	ldr	r3, [pc, #600]	; (5e80 <__aeabi_dadd+0x380>)
    5c26:	3601      	adds	r6, #1
    5c28:	429e      	cmp	r6, r3
    5c2a:	d100      	bne.n	5c2e <__aeabi_dadd+0x12e>
    5c2c:	e09a      	b.n	5d64 <__aeabi_dadd+0x264>
    5c2e:	4645      	mov	r5, r8
    5c30:	4b94      	ldr	r3, [pc, #592]	; (5e84 <__aeabi_dadd+0x384>)
    5c32:	08ff      	lsrs	r7, r7, #3
    5c34:	401c      	ands	r4, r3
    5c36:	0760      	lsls	r0, r4, #29
    5c38:	0576      	lsls	r6, r6, #21
    5c3a:	0264      	lsls	r4, r4, #9
    5c3c:	4307      	orrs	r7, r0
    5c3e:	0b24      	lsrs	r4, r4, #12
    5c40:	0d76      	lsrs	r6, r6, #21
    5c42:	2100      	movs	r1, #0
    5c44:	0324      	lsls	r4, r4, #12
    5c46:	0b23      	lsrs	r3, r4, #12
    5c48:	0d0c      	lsrs	r4, r1, #20
    5c4a:	4a8f      	ldr	r2, [pc, #572]	; (5e88 <__aeabi_dadd+0x388>)
    5c4c:	0524      	lsls	r4, r4, #20
    5c4e:	431c      	orrs	r4, r3
    5c50:	4014      	ands	r4, r2
    5c52:	0533      	lsls	r3, r6, #20
    5c54:	4323      	orrs	r3, r4
    5c56:	005b      	lsls	r3, r3, #1
    5c58:	07ed      	lsls	r5, r5, #31
    5c5a:	085b      	lsrs	r3, r3, #1
    5c5c:	432b      	orrs	r3, r5
    5c5e:	0038      	movs	r0, r7
    5c60:	0019      	movs	r1, r3
    5c62:	bc3c      	pop	{r2, r3, r4, r5}
    5c64:	4690      	mov	r8, r2
    5c66:	4699      	mov	r9, r3
    5c68:	46a2      	mov	sl, r4
    5c6a:	46ab      	mov	fp, r5
    5c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c6e:	4664      	mov	r4, ip
    5c70:	4304      	orrs	r4, r0
    5c72:	d100      	bne.n	5c76 <__aeabi_dadd+0x176>
    5c74:	e211      	b.n	609a <__aeabi_dadd+0x59a>
    5c76:	0004      	movs	r4, r0
    5c78:	4667      	mov	r7, ip
    5c7a:	077b      	lsls	r3, r7, #29
    5c7c:	d1c6      	bne.n	5c0c <__aeabi_dadd+0x10c>
    5c7e:	4645      	mov	r5, r8
    5c80:	0760      	lsls	r0, r4, #29
    5c82:	08ff      	lsrs	r7, r7, #3
    5c84:	4307      	orrs	r7, r0
    5c86:	08e4      	lsrs	r4, r4, #3
    5c88:	4b7d      	ldr	r3, [pc, #500]	; (5e80 <__aeabi_dadd+0x380>)
    5c8a:	429e      	cmp	r6, r3
    5c8c:	d030      	beq.n	5cf0 <__aeabi_dadd+0x1f0>
    5c8e:	0324      	lsls	r4, r4, #12
    5c90:	0576      	lsls	r6, r6, #21
    5c92:	0b24      	lsrs	r4, r4, #12
    5c94:	0d76      	lsrs	r6, r6, #21
    5c96:	e7d4      	b.n	5c42 <__aeabi_dadd+0x142>
    5c98:	1a33      	subs	r3, r6, r0
    5c9a:	469a      	mov	sl, r3
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	dd78      	ble.n	5d92 <__aeabi_dadd+0x292>
    5ca0:	2800      	cmp	r0, #0
    5ca2:	d031      	beq.n	5d08 <__aeabi_dadd+0x208>
    5ca4:	4876      	ldr	r0, [pc, #472]	; (5e80 <__aeabi_dadd+0x380>)
    5ca6:	4286      	cmp	r6, r0
    5ca8:	d0ae      	beq.n	5c08 <__aeabi_dadd+0x108>
    5caa:	2080      	movs	r0, #128	; 0x80
    5cac:	0400      	lsls	r0, r0, #16
    5cae:	4301      	orrs	r1, r0
    5cb0:	4653      	mov	r3, sl
    5cb2:	2b38      	cmp	r3, #56	; 0x38
    5cb4:	dc00      	bgt.n	5cb8 <__aeabi_dadd+0x1b8>
    5cb6:	e0e9      	b.n	5e8c <__aeabi_dadd+0x38c>
    5cb8:	430a      	orrs	r2, r1
    5cba:	1e51      	subs	r1, r2, #1
    5cbc:	418a      	sbcs	r2, r1
    5cbe:	2100      	movs	r1, #0
    5cc0:	19d2      	adds	r2, r2, r7
    5cc2:	42ba      	cmp	r2, r7
    5cc4:	41bf      	sbcs	r7, r7
    5cc6:	1909      	adds	r1, r1, r4
    5cc8:	427c      	negs	r4, r7
    5cca:	0017      	movs	r7, r2
    5ccc:	190c      	adds	r4, r1, r4
    5cce:	0223      	lsls	r3, r4, #8
    5cd0:	d5d3      	bpl.n	5c7a <__aeabi_dadd+0x17a>
    5cd2:	4b6b      	ldr	r3, [pc, #428]	; (5e80 <__aeabi_dadd+0x380>)
    5cd4:	3601      	adds	r6, #1
    5cd6:	429e      	cmp	r6, r3
    5cd8:	d100      	bne.n	5cdc <__aeabi_dadd+0x1dc>
    5cda:	e13a      	b.n	5f52 <__aeabi_dadd+0x452>
    5cdc:	2001      	movs	r0, #1
    5cde:	4b69      	ldr	r3, [pc, #420]	; (5e84 <__aeabi_dadd+0x384>)
    5ce0:	401c      	ands	r4, r3
    5ce2:	087b      	lsrs	r3, r7, #1
    5ce4:	4007      	ands	r7, r0
    5ce6:	431f      	orrs	r7, r3
    5ce8:	07e0      	lsls	r0, r4, #31
    5cea:	4307      	orrs	r7, r0
    5cec:	0864      	lsrs	r4, r4, #1
    5cee:	e78b      	b.n	5c08 <__aeabi_dadd+0x108>
    5cf0:	0023      	movs	r3, r4
    5cf2:	433b      	orrs	r3, r7
    5cf4:	d100      	bne.n	5cf8 <__aeabi_dadd+0x1f8>
    5cf6:	e1cb      	b.n	6090 <__aeabi_dadd+0x590>
    5cf8:	2280      	movs	r2, #128	; 0x80
    5cfa:	0312      	lsls	r2, r2, #12
    5cfc:	4314      	orrs	r4, r2
    5cfe:	0324      	lsls	r4, r4, #12
    5d00:	0b24      	lsrs	r4, r4, #12
    5d02:	e79e      	b.n	5c42 <__aeabi_dadd+0x142>
    5d04:	002e      	movs	r6, r5
    5d06:	e77f      	b.n	5c08 <__aeabi_dadd+0x108>
    5d08:	0008      	movs	r0, r1
    5d0a:	4310      	orrs	r0, r2
    5d0c:	d100      	bne.n	5d10 <__aeabi_dadd+0x210>
    5d0e:	e0b4      	b.n	5e7a <__aeabi_dadd+0x37a>
    5d10:	1e58      	subs	r0, r3, #1
    5d12:	2800      	cmp	r0, #0
    5d14:	d000      	beq.n	5d18 <__aeabi_dadd+0x218>
    5d16:	e0de      	b.n	5ed6 <__aeabi_dadd+0x3d6>
    5d18:	18ba      	adds	r2, r7, r2
    5d1a:	42ba      	cmp	r2, r7
    5d1c:	419b      	sbcs	r3, r3
    5d1e:	1864      	adds	r4, r4, r1
    5d20:	425b      	negs	r3, r3
    5d22:	18e4      	adds	r4, r4, r3
    5d24:	0017      	movs	r7, r2
    5d26:	2601      	movs	r6, #1
    5d28:	0223      	lsls	r3, r4, #8
    5d2a:	d5a6      	bpl.n	5c7a <__aeabi_dadd+0x17a>
    5d2c:	2602      	movs	r6, #2
    5d2e:	e7d5      	b.n	5cdc <__aeabi_dadd+0x1dc>
    5d30:	2d00      	cmp	r5, #0
    5d32:	d16e      	bne.n	5e12 <__aeabi_dadd+0x312>
    5d34:	1c70      	adds	r0, r6, #1
    5d36:	0540      	lsls	r0, r0, #21
    5d38:	0d40      	lsrs	r0, r0, #21
    5d3a:	2801      	cmp	r0, #1
    5d3c:	dc00      	bgt.n	5d40 <__aeabi_dadd+0x240>
    5d3e:	e0f9      	b.n	5f34 <__aeabi_dadd+0x434>
    5d40:	1ab8      	subs	r0, r7, r2
    5d42:	4684      	mov	ip, r0
    5d44:	4287      	cmp	r7, r0
    5d46:	4180      	sbcs	r0, r0
    5d48:	1ae5      	subs	r5, r4, r3
    5d4a:	4240      	negs	r0, r0
    5d4c:	1a2d      	subs	r5, r5, r0
    5d4e:	0228      	lsls	r0, r5, #8
    5d50:	d400      	bmi.n	5d54 <__aeabi_dadd+0x254>
    5d52:	e089      	b.n	5e68 <__aeabi_dadd+0x368>
    5d54:	1bd7      	subs	r7, r2, r7
    5d56:	42ba      	cmp	r2, r7
    5d58:	4192      	sbcs	r2, r2
    5d5a:	1b1c      	subs	r4, r3, r4
    5d5c:	4252      	negs	r2, r2
    5d5e:	1aa5      	subs	r5, r4, r2
    5d60:	46d8      	mov	r8, fp
    5d62:	e729      	b.n	5bb8 <__aeabi_dadd+0xb8>
    5d64:	4645      	mov	r5, r8
    5d66:	2400      	movs	r4, #0
    5d68:	2700      	movs	r7, #0
    5d6a:	e76a      	b.n	5c42 <__aeabi_dadd+0x142>
    5d6c:	4c45      	ldr	r4, [pc, #276]	; (5e84 <__aeabi_dadd+0x384>)
    5d6e:	1af6      	subs	r6, r6, r3
    5d70:	402c      	ands	r4, r5
    5d72:	e749      	b.n	5c08 <__aeabi_dadd+0x108>
    5d74:	003d      	movs	r5, r7
    5d76:	3828      	subs	r0, #40	; 0x28
    5d78:	4085      	lsls	r5, r0
    5d7a:	2700      	movs	r7, #0
    5d7c:	e72e      	b.n	5bdc <__aeabi_dadd+0xdc>
    5d7e:	0038      	movs	r0, r7
    5d80:	f001 fd22 	bl	77c8 <__clzsi2>
    5d84:	3020      	adds	r0, #32
    5d86:	e71d      	b.n	5bc4 <__aeabi_dadd+0xc4>
    5d88:	430a      	orrs	r2, r1
    5d8a:	1e51      	subs	r1, r2, #1
    5d8c:	418a      	sbcs	r2, r1
    5d8e:	2100      	movs	r1, #0
    5d90:	e707      	b.n	5ba2 <__aeabi_dadd+0xa2>
    5d92:	2b00      	cmp	r3, #0
    5d94:	d000      	beq.n	5d98 <__aeabi_dadd+0x298>
    5d96:	e0f3      	b.n	5f80 <__aeabi_dadd+0x480>
    5d98:	1c70      	adds	r0, r6, #1
    5d9a:	0543      	lsls	r3, r0, #21
    5d9c:	0d5b      	lsrs	r3, r3, #21
    5d9e:	2b01      	cmp	r3, #1
    5da0:	dc00      	bgt.n	5da4 <__aeabi_dadd+0x2a4>
    5da2:	e0ad      	b.n	5f00 <__aeabi_dadd+0x400>
    5da4:	4b36      	ldr	r3, [pc, #216]	; (5e80 <__aeabi_dadd+0x380>)
    5da6:	4298      	cmp	r0, r3
    5da8:	d100      	bne.n	5dac <__aeabi_dadd+0x2ac>
    5daa:	e0d1      	b.n	5f50 <__aeabi_dadd+0x450>
    5dac:	18ba      	adds	r2, r7, r2
    5dae:	42ba      	cmp	r2, r7
    5db0:	41bf      	sbcs	r7, r7
    5db2:	1864      	adds	r4, r4, r1
    5db4:	427f      	negs	r7, r7
    5db6:	19e4      	adds	r4, r4, r7
    5db8:	07e7      	lsls	r7, r4, #31
    5dba:	0852      	lsrs	r2, r2, #1
    5dbc:	4317      	orrs	r7, r2
    5dbe:	0864      	lsrs	r4, r4, #1
    5dc0:	0006      	movs	r6, r0
    5dc2:	e721      	b.n	5c08 <__aeabi_dadd+0x108>
    5dc4:	482e      	ldr	r0, [pc, #184]	; (5e80 <__aeabi_dadd+0x380>)
    5dc6:	4285      	cmp	r5, r0
    5dc8:	d100      	bne.n	5dcc <__aeabi_dadd+0x2cc>
    5dca:	e093      	b.n	5ef4 <__aeabi_dadd+0x3f4>
    5dcc:	001d      	movs	r5, r3
    5dce:	e6d0      	b.n	5b72 <__aeabi_dadd+0x72>
    5dd0:	0029      	movs	r1, r5
    5dd2:	3e1f      	subs	r6, #31
    5dd4:	40f1      	lsrs	r1, r6
    5dd6:	2b20      	cmp	r3, #32
    5dd8:	d100      	bne.n	5ddc <__aeabi_dadd+0x2dc>
    5dda:	e08d      	b.n	5ef8 <__aeabi_dadd+0x3f8>
    5ddc:	2240      	movs	r2, #64	; 0x40
    5dde:	1ad3      	subs	r3, r2, r3
    5de0:	409d      	lsls	r5, r3
    5de2:	432f      	orrs	r7, r5
    5de4:	1e7d      	subs	r5, r7, #1
    5de6:	41af      	sbcs	r7, r5
    5de8:	2400      	movs	r4, #0
    5dea:	430f      	orrs	r7, r1
    5dec:	2600      	movs	r6, #0
    5dee:	e744      	b.n	5c7a <__aeabi_dadd+0x17a>
    5df0:	002b      	movs	r3, r5
    5df2:	0008      	movs	r0, r1
    5df4:	3b20      	subs	r3, #32
    5df6:	40d8      	lsrs	r0, r3
    5df8:	0003      	movs	r3, r0
    5dfa:	2d20      	cmp	r5, #32
    5dfc:	d100      	bne.n	5e00 <__aeabi_dadd+0x300>
    5dfe:	e07d      	b.n	5efc <__aeabi_dadd+0x3fc>
    5e00:	2040      	movs	r0, #64	; 0x40
    5e02:	1b45      	subs	r5, r0, r5
    5e04:	40a9      	lsls	r1, r5
    5e06:	430a      	orrs	r2, r1
    5e08:	1e51      	subs	r1, r2, #1
    5e0a:	418a      	sbcs	r2, r1
    5e0c:	2100      	movs	r1, #0
    5e0e:	431a      	orrs	r2, r3
    5e10:	e6c7      	b.n	5ba2 <__aeabi_dadd+0xa2>
    5e12:	2e00      	cmp	r6, #0
    5e14:	d050      	beq.n	5eb8 <__aeabi_dadd+0x3b8>
    5e16:	4e1a      	ldr	r6, [pc, #104]	; (5e80 <__aeabi_dadd+0x380>)
    5e18:	42b0      	cmp	r0, r6
    5e1a:	d057      	beq.n	5ecc <__aeabi_dadd+0x3cc>
    5e1c:	2680      	movs	r6, #128	; 0x80
    5e1e:	426b      	negs	r3, r5
    5e20:	4699      	mov	r9, r3
    5e22:	0436      	lsls	r6, r6, #16
    5e24:	4334      	orrs	r4, r6
    5e26:	464b      	mov	r3, r9
    5e28:	2b38      	cmp	r3, #56	; 0x38
    5e2a:	dd00      	ble.n	5e2e <__aeabi_dadd+0x32e>
    5e2c:	e0d6      	b.n	5fdc <__aeabi_dadd+0x4dc>
    5e2e:	2b1f      	cmp	r3, #31
    5e30:	dd00      	ble.n	5e34 <__aeabi_dadd+0x334>
    5e32:	e135      	b.n	60a0 <__aeabi_dadd+0x5a0>
    5e34:	2620      	movs	r6, #32
    5e36:	1af5      	subs	r5, r6, r3
    5e38:	0026      	movs	r6, r4
    5e3a:	40ae      	lsls	r6, r5
    5e3c:	46b2      	mov	sl, r6
    5e3e:	003e      	movs	r6, r7
    5e40:	40de      	lsrs	r6, r3
    5e42:	46ac      	mov	ip, r5
    5e44:	0035      	movs	r5, r6
    5e46:	4656      	mov	r6, sl
    5e48:	432e      	orrs	r6, r5
    5e4a:	4665      	mov	r5, ip
    5e4c:	40af      	lsls	r7, r5
    5e4e:	1e7d      	subs	r5, r7, #1
    5e50:	41af      	sbcs	r7, r5
    5e52:	40dc      	lsrs	r4, r3
    5e54:	4337      	orrs	r7, r6
    5e56:	1bd7      	subs	r7, r2, r7
    5e58:	42ba      	cmp	r2, r7
    5e5a:	4192      	sbcs	r2, r2
    5e5c:	1b0c      	subs	r4, r1, r4
    5e5e:	4252      	negs	r2, r2
    5e60:	1aa4      	subs	r4, r4, r2
    5e62:	0006      	movs	r6, r0
    5e64:	46d8      	mov	r8, fp
    5e66:	e6a3      	b.n	5bb0 <__aeabi_dadd+0xb0>
    5e68:	4664      	mov	r4, ip
    5e6a:	4667      	mov	r7, ip
    5e6c:	432c      	orrs	r4, r5
    5e6e:	d000      	beq.n	5e72 <__aeabi_dadd+0x372>
    5e70:	e6a2      	b.n	5bb8 <__aeabi_dadd+0xb8>
    5e72:	2500      	movs	r5, #0
    5e74:	2600      	movs	r6, #0
    5e76:	2700      	movs	r7, #0
    5e78:	e706      	b.n	5c88 <__aeabi_dadd+0x188>
    5e7a:	001e      	movs	r6, r3
    5e7c:	e6c4      	b.n	5c08 <__aeabi_dadd+0x108>
    5e7e:	46c0      	nop			; (mov r8, r8)
    5e80:	000007ff 	.word	0x000007ff
    5e84:	ff7fffff 	.word	0xff7fffff
    5e88:	800fffff 	.word	0x800fffff
    5e8c:	2b1f      	cmp	r3, #31
    5e8e:	dc63      	bgt.n	5f58 <__aeabi_dadd+0x458>
    5e90:	2020      	movs	r0, #32
    5e92:	1ac3      	subs	r3, r0, r3
    5e94:	0008      	movs	r0, r1
    5e96:	4098      	lsls	r0, r3
    5e98:	469c      	mov	ip, r3
    5e9a:	4683      	mov	fp, r0
    5e9c:	4653      	mov	r3, sl
    5e9e:	0010      	movs	r0, r2
    5ea0:	40d8      	lsrs	r0, r3
    5ea2:	0003      	movs	r3, r0
    5ea4:	4658      	mov	r0, fp
    5ea6:	4318      	orrs	r0, r3
    5ea8:	4663      	mov	r3, ip
    5eaa:	409a      	lsls	r2, r3
    5eac:	1e53      	subs	r3, r2, #1
    5eae:	419a      	sbcs	r2, r3
    5eb0:	4653      	mov	r3, sl
    5eb2:	4302      	orrs	r2, r0
    5eb4:	40d9      	lsrs	r1, r3
    5eb6:	e703      	b.n	5cc0 <__aeabi_dadd+0x1c0>
    5eb8:	0026      	movs	r6, r4
    5eba:	433e      	orrs	r6, r7
    5ebc:	d006      	beq.n	5ecc <__aeabi_dadd+0x3cc>
    5ebe:	43eb      	mvns	r3, r5
    5ec0:	4699      	mov	r9, r3
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d0c7      	beq.n	5e56 <__aeabi_dadd+0x356>
    5ec6:	4e94      	ldr	r6, [pc, #592]	; (6118 <__aeabi_dadd+0x618>)
    5ec8:	42b0      	cmp	r0, r6
    5eca:	d1ac      	bne.n	5e26 <__aeabi_dadd+0x326>
    5ecc:	000c      	movs	r4, r1
    5ece:	0017      	movs	r7, r2
    5ed0:	0006      	movs	r6, r0
    5ed2:	46d8      	mov	r8, fp
    5ed4:	e698      	b.n	5c08 <__aeabi_dadd+0x108>
    5ed6:	4b90      	ldr	r3, [pc, #576]	; (6118 <__aeabi_dadd+0x618>)
    5ed8:	459a      	cmp	sl, r3
    5eda:	d00b      	beq.n	5ef4 <__aeabi_dadd+0x3f4>
    5edc:	4682      	mov	sl, r0
    5ede:	e6e7      	b.n	5cb0 <__aeabi_dadd+0x1b0>
    5ee0:	2800      	cmp	r0, #0
    5ee2:	d000      	beq.n	5ee6 <__aeabi_dadd+0x3e6>
    5ee4:	e09e      	b.n	6024 <__aeabi_dadd+0x524>
    5ee6:	0018      	movs	r0, r3
    5ee8:	4310      	orrs	r0, r2
    5eea:	d100      	bne.n	5eee <__aeabi_dadd+0x3ee>
    5eec:	e0e9      	b.n	60c2 <__aeabi_dadd+0x5c2>
    5eee:	001c      	movs	r4, r3
    5ef0:	0017      	movs	r7, r2
    5ef2:	46d8      	mov	r8, fp
    5ef4:	4e88      	ldr	r6, [pc, #544]	; (6118 <__aeabi_dadd+0x618>)
    5ef6:	e687      	b.n	5c08 <__aeabi_dadd+0x108>
    5ef8:	2500      	movs	r5, #0
    5efa:	e772      	b.n	5de2 <__aeabi_dadd+0x2e2>
    5efc:	2100      	movs	r1, #0
    5efe:	e782      	b.n	5e06 <__aeabi_dadd+0x306>
    5f00:	0023      	movs	r3, r4
    5f02:	433b      	orrs	r3, r7
    5f04:	2e00      	cmp	r6, #0
    5f06:	d000      	beq.n	5f0a <__aeabi_dadd+0x40a>
    5f08:	e0ab      	b.n	6062 <__aeabi_dadd+0x562>
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d100      	bne.n	5f10 <__aeabi_dadd+0x410>
    5f0e:	e0e7      	b.n	60e0 <__aeabi_dadd+0x5e0>
    5f10:	000b      	movs	r3, r1
    5f12:	4313      	orrs	r3, r2
    5f14:	d100      	bne.n	5f18 <__aeabi_dadd+0x418>
    5f16:	e677      	b.n	5c08 <__aeabi_dadd+0x108>
    5f18:	18ba      	adds	r2, r7, r2
    5f1a:	42ba      	cmp	r2, r7
    5f1c:	41bf      	sbcs	r7, r7
    5f1e:	1864      	adds	r4, r4, r1
    5f20:	427f      	negs	r7, r7
    5f22:	19e4      	adds	r4, r4, r7
    5f24:	0223      	lsls	r3, r4, #8
    5f26:	d400      	bmi.n	5f2a <__aeabi_dadd+0x42a>
    5f28:	e0f2      	b.n	6110 <__aeabi_dadd+0x610>
    5f2a:	4b7c      	ldr	r3, [pc, #496]	; (611c <__aeabi_dadd+0x61c>)
    5f2c:	0017      	movs	r7, r2
    5f2e:	401c      	ands	r4, r3
    5f30:	0006      	movs	r6, r0
    5f32:	e669      	b.n	5c08 <__aeabi_dadd+0x108>
    5f34:	0020      	movs	r0, r4
    5f36:	4338      	orrs	r0, r7
    5f38:	2e00      	cmp	r6, #0
    5f3a:	d1d1      	bne.n	5ee0 <__aeabi_dadd+0x3e0>
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d15b      	bne.n	5ff8 <__aeabi_dadd+0x4f8>
    5f40:	001c      	movs	r4, r3
    5f42:	4314      	orrs	r4, r2
    5f44:	d100      	bne.n	5f48 <__aeabi_dadd+0x448>
    5f46:	e0a8      	b.n	609a <__aeabi_dadd+0x59a>
    5f48:	001c      	movs	r4, r3
    5f4a:	0017      	movs	r7, r2
    5f4c:	46d8      	mov	r8, fp
    5f4e:	e65b      	b.n	5c08 <__aeabi_dadd+0x108>
    5f50:	0006      	movs	r6, r0
    5f52:	2400      	movs	r4, #0
    5f54:	2700      	movs	r7, #0
    5f56:	e697      	b.n	5c88 <__aeabi_dadd+0x188>
    5f58:	4650      	mov	r0, sl
    5f5a:	000b      	movs	r3, r1
    5f5c:	3820      	subs	r0, #32
    5f5e:	40c3      	lsrs	r3, r0
    5f60:	4699      	mov	r9, r3
    5f62:	4653      	mov	r3, sl
    5f64:	2b20      	cmp	r3, #32
    5f66:	d100      	bne.n	5f6a <__aeabi_dadd+0x46a>
    5f68:	e095      	b.n	6096 <__aeabi_dadd+0x596>
    5f6a:	2340      	movs	r3, #64	; 0x40
    5f6c:	4650      	mov	r0, sl
    5f6e:	1a1b      	subs	r3, r3, r0
    5f70:	4099      	lsls	r1, r3
    5f72:	430a      	orrs	r2, r1
    5f74:	1e51      	subs	r1, r2, #1
    5f76:	418a      	sbcs	r2, r1
    5f78:	464b      	mov	r3, r9
    5f7a:	2100      	movs	r1, #0
    5f7c:	431a      	orrs	r2, r3
    5f7e:	e69f      	b.n	5cc0 <__aeabi_dadd+0x1c0>
    5f80:	2e00      	cmp	r6, #0
    5f82:	d130      	bne.n	5fe6 <__aeabi_dadd+0x4e6>
    5f84:	0026      	movs	r6, r4
    5f86:	433e      	orrs	r6, r7
    5f88:	d067      	beq.n	605a <__aeabi_dadd+0x55a>
    5f8a:	43db      	mvns	r3, r3
    5f8c:	469a      	mov	sl, r3
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d01c      	beq.n	5fcc <__aeabi_dadd+0x4cc>
    5f92:	4e61      	ldr	r6, [pc, #388]	; (6118 <__aeabi_dadd+0x618>)
    5f94:	42b0      	cmp	r0, r6
    5f96:	d060      	beq.n	605a <__aeabi_dadd+0x55a>
    5f98:	4653      	mov	r3, sl
    5f9a:	2b38      	cmp	r3, #56	; 0x38
    5f9c:	dd00      	ble.n	5fa0 <__aeabi_dadd+0x4a0>
    5f9e:	e096      	b.n	60ce <__aeabi_dadd+0x5ce>
    5fa0:	2b1f      	cmp	r3, #31
    5fa2:	dd00      	ble.n	5fa6 <__aeabi_dadd+0x4a6>
    5fa4:	e09f      	b.n	60e6 <__aeabi_dadd+0x5e6>
    5fa6:	2620      	movs	r6, #32
    5fa8:	1af3      	subs	r3, r6, r3
    5faa:	0026      	movs	r6, r4
    5fac:	409e      	lsls	r6, r3
    5fae:	469c      	mov	ip, r3
    5fb0:	46b3      	mov	fp, r6
    5fb2:	4653      	mov	r3, sl
    5fb4:	003e      	movs	r6, r7
    5fb6:	40de      	lsrs	r6, r3
    5fb8:	0033      	movs	r3, r6
    5fba:	465e      	mov	r6, fp
    5fbc:	431e      	orrs	r6, r3
    5fbe:	4663      	mov	r3, ip
    5fc0:	409f      	lsls	r7, r3
    5fc2:	1e7b      	subs	r3, r7, #1
    5fc4:	419f      	sbcs	r7, r3
    5fc6:	4653      	mov	r3, sl
    5fc8:	40dc      	lsrs	r4, r3
    5fca:	4337      	orrs	r7, r6
    5fcc:	18bf      	adds	r7, r7, r2
    5fce:	4297      	cmp	r7, r2
    5fd0:	4192      	sbcs	r2, r2
    5fd2:	1864      	adds	r4, r4, r1
    5fd4:	4252      	negs	r2, r2
    5fd6:	18a4      	adds	r4, r4, r2
    5fd8:	0006      	movs	r6, r0
    5fda:	e678      	b.n	5cce <__aeabi_dadd+0x1ce>
    5fdc:	4327      	orrs	r7, r4
    5fde:	1e7c      	subs	r4, r7, #1
    5fe0:	41a7      	sbcs	r7, r4
    5fe2:	2400      	movs	r4, #0
    5fe4:	e737      	b.n	5e56 <__aeabi_dadd+0x356>
    5fe6:	4e4c      	ldr	r6, [pc, #304]	; (6118 <__aeabi_dadd+0x618>)
    5fe8:	42b0      	cmp	r0, r6
    5fea:	d036      	beq.n	605a <__aeabi_dadd+0x55a>
    5fec:	2680      	movs	r6, #128	; 0x80
    5fee:	425b      	negs	r3, r3
    5ff0:	0436      	lsls	r6, r6, #16
    5ff2:	469a      	mov	sl, r3
    5ff4:	4334      	orrs	r4, r6
    5ff6:	e7cf      	b.n	5f98 <__aeabi_dadd+0x498>
    5ff8:	0018      	movs	r0, r3
    5ffa:	4310      	orrs	r0, r2
    5ffc:	d100      	bne.n	6000 <__aeabi_dadd+0x500>
    5ffe:	e603      	b.n	5c08 <__aeabi_dadd+0x108>
    6000:	1ab8      	subs	r0, r7, r2
    6002:	4684      	mov	ip, r0
    6004:	4567      	cmp	r7, ip
    6006:	41ad      	sbcs	r5, r5
    6008:	1ae0      	subs	r0, r4, r3
    600a:	426d      	negs	r5, r5
    600c:	1b40      	subs	r0, r0, r5
    600e:	0205      	lsls	r5, r0, #8
    6010:	d400      	bmi.n	6014 <__aeabi_dadd+0x514>
    6012:	e62c      	b.n	5c6e <__aeabi_dadd+0x16e>
    6014:	1bd7      	subs	r7, r2, r7
    6016:	42ba      	cmp	r2, r7
    6018:	4192      	sbcs	r2, r2
    601a:	1b1c      	subs	r4, r3, r4
    601c:	4252      	negs	r2, r2
    601e:	1aa4      	subs	r4, r4, r2
    6020:	46d8      	mov	r8, fp
    6022:	e5f1      	b.n	5c08 <__aeabi_dadd+0x108>
    6024:	0018      	movs	r0, r3
    6026:	4310      	orrs	r0, r2
    6028:	d100      	bne.n	602c <__aeabi_dadd+0x52c>
    602a:	e763      	b.n	5ef4 <__aeabi_dadd+0x3f4>
    602c:	08f8      	lsrs	r0, r7, #3
    602e:	0767      	lsls	r7, r4, #29
    6030:	4307      	orrs	r7, r0
    6032:	2080      	movs	r0, #128	; 0x80
    6034:	08e4      	lsrs	r4, r4, #3
    6036:	0300      	lsls	r0, r0, #12
    6038:	4204      	tst	r4, r0
    603a:	d008      	beq.n	604e <__aeabi_dadd+0x54e>
    603c:	08dd      	lsrs	r5, r3, #3
    603e:	4205      	tst	r5, r0
    6040:	d105      	bne.n	604e <__aeabi_dadd+0x54e>
    6042:	08d2      	lsrs	r2, r2, #3
    6044:	0759      	lsls	r1, r3, #29
    6046:	4311      	orrs	r1, r2
    6048:	000f      	movs	r7, r1
    604a:	002c      	movs	r4, r5
    604c:	46d8      	mov	r8, fp
    604e:	0f7b      	lsrs	r3, r7, #29
    6050:	00e4      	lsls	r4, r4, #3
    6052:	431c      	orrs	r4, r3
    6054:	00ff      	lsls	r7, r7, #3
    6056:	4e30      	ldr	r6, [pc, #192]	; (6118 <__aeabi_dadd+0x618>)
    6058:	e5d6      	b.n	5c08 <__aeabi_dadd+0x108>
    605a:	000c      	movs	r4, r1
    605c:	0017      	movs	r7, r2
    605e:	0006      	movs	r6, r0
    6060:	e5d2      	b.n	5c08 <__aeabi_dadd+0x108>
    6062:	2b00      	cmp	r3, #0
    6064:	d038      	beq.n	60d8 <__aeabi_dadd+0x5d8>
    6066:	000b      	movs	r3, r1
    6068:	4313      	orrs	r3, r2
    606a:	d100      	bne.n	606e <__aeabi_dadd+0x56e>
    606c:	e742      	b.n	5ef4 <__aeabi_dadd+0x3f4>
    606e:	08f8      	lsrs	r0, r7, #3
    6070:	0767      	lsls	r7, r4, #29
    6072:	4307      	orrs	r7, r0
    6074:	2080      	movs	r0, #128	; 0x80
    6076:	08e4      	lsrs	r4, r4, #3
    6078:	0300      	lsls	r0, r0, #12
    607a:	4204      	tst	r4, r0
    607c:	d0e7      	beq.n	604e <__aeabi_dadd+0x54e>
    607e:	08cb      	lsrs	r3, r1, #3
    6080:	4203      	tst	r3, r0
    6082:	d1e4      	bne.n	604e <__aeabi_dadd+0x54e>
    6084:	08d2      	lsrs	r2, r2, #3
    6086:	0749      	lsls	r1, r1, #29
    6088:	4311      	orrs	r1, r2
    608a:	000f      	movs	r7, r1
    608c:	001c      	movs	r4, r3
    608e:	e7de      	b.n	604e <__aeabi_dadd+0x54e>
    6090:	2700      	movs	r7, #0
    6092:	2400      	movs	r4, #0
    6094:	e5d5      	b.n	5c42 <__aeabi_dadd+0x142>
    6096:	2100      	movs	r1, #0
    6098:	e76b      	b.n	5f72 <__aeabi_dadd+0x472>
    609a:	2500      	movs	r5, #0
    609c:	2700      	movs	r7, #0
    609e:	e5f3      	b.n	5c88 <__aeabi_dadd+0x188>
    60a0:	464e      	mov	r6, r9
    60a2:	0025      	movs	r5, r4
    60a4:	3e20      	subs	r6, #32
    60a6:	40f5      	lsrs	r5, r6
    60a8:	464b      	mov	r3, r9
    60aa:	002e      	movs	r6, r5
    60ac:	2b20      	cmp	r3, #32
    60ae:	d02d      	beq.n	610c <__aeabi_dadd+0x60c>
    60b0:	2540      	movs	r5, #64	; 0x40
    60b2:	1aed      	subs	r5, r5, r3
    60b4:	40ac      	lsls	r4, r5
    60b6:	4327      	orrs	r7, r4
    60b8:	1e7c      	subs	r4, r7, #1
    60ba:	41a7      	sbcs	r7, r4
    60bc:	2400      	movs	r4, #0
    60be:	4337      	orrs	r7, r6
    60c0:	e6c9      	b.n	5e56 <__aeabi_dadd+0x356>
    60c2:	2480      	movs	r4, #128	; 0x80
    60c4:	2500      	movs	r5, #0
    60c6:	0324      	lsls	r4, r4, #12
    60c8:	4e13      	ldr	r6, [pc, #76]	; (6118 <__aeabi_dadd+0x618>)
    60ca:	2700      	movs	r7, #0
    60cc:	e5dc      	b.n	5c88 <__aeabi_dadd+0x188>
    60ce:	4327      	orrs	r7, r4
    60d0:	1e7c      	subs	r4, r7, #1
    60d2:	41a7      	sbcs	r7, r4
    60d4:	2400      	movs	r4, #0
    60d6:	e779      	b.n	5fcc <__aeabi_dadd+0x4cc>
    60d8:	000c      	movs	r4, r1
    60da:	0017      	movs	r7, r2
    60dc:	4e0e      	ldr	r6, [pc, #56]	; (6118 <__aeabi_dadd+0x618>)
    60de:	e593      	b.n	5c08 <__aeabi_dadd+0x108>
    60e0:	000c      	movs	r4, r1
    60e2:	0017      	movs	r7, r2
    60e4:	e590      	b.n	5c08 <__aeabi_dadd+0x108>
    60e6:	4656      	mov	r6, sl
    60e8:	0023      	movs	r3, r4
    60ea:	3e20      	subs	r6, #32
    60ec:	40f3      	lsrs	r3, r6
    60ee:	4699      	mov	r9, r3
    60f0:	4653      	mov	r3, sl
    60f2:	2b20      	cmp	r3, #32
    60f4:	d00e      	beq.n	6114 <__aeabi_dadd+0x614>
    60f6:	2340      	movs	r3, #64	; 0x40
    60f8:	4656      	mov	r6, sl
    60fa:	1b9b      	subs	r3, r3, r6
    60fc:	409c      	lsls	r4, r3
    60fe:	4327      	orrs	r7, r4
    6100:	1e7c      	subs	r4, r7, #1
    6102:	41a7      	sbcs	r7, r4
    6104:	464b      	mov	r3, r9
    6106:	2400      	movs	r4, #0
    6108:	431f      	orrs	r7, r3
    610a:	e75f      	b.n	5fcc <__aeabi_dadd+0x4cc>
    610c:	2400      	movs	r4, #0
    610e:	e7d2      	b.n	60b6 <__aeabi_dadd+0x5b6>
    6110:	0017      	movs	r7, r2
    6112:	e5b2      	b.n	5c7a <__aeabi_dadd+0x17a>
    6114:	2400      	movs	r4, #0
    6116:	e7f2      	b.n	60fe <__aeabi_dadd+0x5fe>
    6118:	000007ff 	.word	0x000007ff
    611c:	ff7fffff 	.word	0xff7fffff

00006120 <__aeabi_ddiv>:
    6120:	b5f0      	push	{r4, r5, r6, r7, lr}
    6122:	4657      	mov	r7, sl
    6124:	4645      	mov	r5, r8
    6126:	46de      	mov	lr, fp
    6128:	464e      	mov	r6, r9
    612a:	b5e0      	push	{r5, r6, r7, lr}
    612c:	004c      	lsls	r4, r1, #1
    612e:	030e      	lsls	r6, r1, #12
    6130:	b087      	sub	sp, #28
    6132:	4683      	mov	fp, r0
    6134:	4692      	mov	sl, r2
    6136:	001d      	movs	r5, r3
    6138:	4680      	mov	r8, r0
    613a:	0b36      	lsrs	r6, r6, #12
    613c:	0d64      	lsrs	r4, r4, #21
    613e:	0fcf      	lsrs	r7, r1, #31
    6140:	2c00      	cmp	r4, #0
    6142:	d04f      	beq.n	61e4 <__aeabi_ddiv+0xc4>
    6144:	4b6f      	ldr	r3, [pc, #444]	; (6304 <__aeabi_ddiv+0x1e4>)
    6146:	429c      	cmp	r4, r3
    6148:	d035      	beq.n	61b6 <__aeabi_ddiv+0x96>
    614a:	2380      	movs	r3, #128	; 0x80
    614c:	0f42      	lsrs	r2, r0, #29
    614e:	041b      	lsls	r3, r3, #16
    6150:	00f6      	lsls	r6, r6, #3
    6152:	4313      	orrs	r3, r2
    6154:	4333      	orrs	r3, r6
    6156:	4699      	mov	r9, r3
    6158:	00c3      	lsls	r3, r0, #3
    615a:	4698      	mov	r8, r3
    615c:	4b6a      	ldr	r3, [pc, #424]	; (6308 <__aeabi_ddiv+0x1e8>)
    615e:	2600      	movs	r6, #0
    6160:	469c      	mov	ip, r3
    6162:	2300      	movs	r3, #0
    6164:	4464      	add	r4, ip
    6166:	9303      	str	r3, [sp, #12]
    6168:	032b      	lsls	r3, r5, #12
    616a:	0b1b      	lsrs	r3, r3, #12
    616c:	469b      	mov	fp, r3
    616e:	006b      	lsls	r3, r5, #1
    6170:	0fed      	lsrs	r5, r5, #31
    6172:	4650      	mov	r0, sl
    6174:	0d5b      	lsrs	r3, r3, #21
    6176:	9501      	str	r5, [sp, #4]
    6178:	d05e      	beq.n	6238 <__aeabi_ddiv+0x118>
    617a:	4a62      	ldr	r2, [pc, #392]	; (6304 <__aeabi_ddiv+0x1e4>)
    617c:	4293      	cmp	r3, r2
    617e:	d053      	beq.n	6228 <__aeabi_ddiv+0x108>
    6180:	465a      	mov	r2, fp
    6182:	00d1      	lsls	r1, r2, #3
    6184:	2280      	movs	r2, #128	; 0x80
    6186:	0f40      	lsrs	r0, r0, #29
    6188:	0412      	lsls	r2, r2, #16
    618a:	4302      	orrs	r2, r0
    618c:	430a      	orrs	r2, r1
    618e:	4693      	mov	fp, r2
    6190:	4652      	mov	r2, sl
    6192:	00d1      	lsls	r1, r2, #3
    6194:	4a5c      	ldr	r2, [pc, #368]	; (6308 <__aeabi_ddiv+0x1e8>)
    6196:	4694      	mov	ip, r2
    6198:	2200      	movs	r2, #0
    619a:	4463      	add	r3, ip
    619c:	0038      	movs	r0, r7
    619e:	4068      	eors	r0, r5
    61a0:	4684      	mov	ip, r0
    61a2:	9002      	str	r0, [sp, #8]
    61a4:	1ae4      	subs	r4, r4, r3
    61a6:	4316      	orrs	r6, r2
    61a8:	2e0f      	cmp	r6, #15
    61aa:	d900      	bls.n	61ae <__aeabi_ddiv+0x8e>
    61ac:	e0b4      	b.n	6318 <__aeabi_ddiv+0x1f8>
    61ae:	4b57      	ldr	r3, [pc, #348]	; (630c <__aeabi_ddiv+0x1ec>)
    61b0:	00b6      	lsls	r6, r6, #2
    61b2:	599b      	ldr	r3, [r3, r6]
    61b4:	469f      	mov	pc, r3
    61b6:	0003      	movs	r3, r0
    61b8:	4333      	orrs	r3, r6
    61ba:	4699      	mov	r9, r3
    61bc:	d16c      	bne.n	6298 <__aeabi_ddiv+0x178>
    61be:	2300      	movs	r3, #0
    61c0:	4698      	mov	r8, r3
    61c2:	3302      	adds	r3, #2
    61c4:	2608      	movs	r6, #8
    61c6:	9303      	str	r3, [sp, #12]
    61c8:	e7ce      	b.n	6168 <__aeabi_ddiv+0x48>
    61ca:	46cb      	mov	fp, r9
    61cc:	4641      	mov	r1, r8
    61ce:	9a03      	ldr	r2, [sp, #12]
    61d0:	9701      	str	r7, [sp, #4]
    61d2:	2a02      	cmp	r2, #2
    61d4:	d165      	bne.n	62a2 <__aeabi_ddiv+0x182>
    61d6:	9b01      	ldr	r3, [sp, #4]
    61d8:	4c4a      	ldr	r4, [pc, #296]	; (6304 <__aeabi_ddiv+0x1e4>)
    61da:	469c      	mov	ip, r3
    61dc:	2300      	movs	r3, #0
    61de:	2200      	movs	r2, #0
    61e0:	4698      	mov	r8, r3
    61e2:	e06b      	b.n	62bc <__aeabi_ddiv+0x19c>
    61e4:	0003      	movs	r3, r0
    61e6:	4333      	orrs	r3, r6
    61e8:	4699      	mov	r9, r3
    61ea:	d04e      	beq.n	628a <__aeabi_ddiv+0x16a>
    61ec:	2e00      	cmp	r6, #0
    61ee:	d100      	bne.n	61f2 <__aeabi_ddiv+0xd2>
    61f0:	e1bc      	b.n	656c <__aeabi_ddiv+0x44c>
    61f2:	0030      	movs	r0, r6
    61f4:	f001 fae8 	bl	77c8 <__clzsi2>
    61f8:	0003      	movs	r3, r0
    61fa:	3b0b      	subs	r3, #11
    61fc:	2b1c      	cmp	r3, #28
    61fe:	dd00      	ble.n	6202 <__aeabi_ddiv+0xe2>
    6200:	e1ac      	b.n	655c <__aeabi_ddiv+0x43c>
    6202:	221d      	movs	r2, #29
    6204:	1ad3      	subs	r3, r2, r3
    6206:	465a      	mov	r2, fp
    6208:	0001      	movs	r1, r0
    620a:	40da      	lsrs	r2, r3
    620c:	3908      	subs	r1, #8
    620e:	408e      	lsls	r6, r1
    6210:	0013      	movs	r3, r2
    6212:	4333      	orrs	r3, r6
    6214:	4699      	mov	r9, r3
    6216:	465b      	mov	r3, fp
    6218:	408b      	lsls	r3, r1
    621a:	4698      	mov	r8, r3
    621c:	2300      	movs	r3, #0
    621e:	4c3c      	ldr	r4, [pc, #240]	; (6310 <__aeabi_ddiv+0x1f0>)
    6220:	2600      	movs	r6, #0
    6222:	1a24      	subs	r4, r4, r0
    6224:	9303      	str	r3, [sp, #12]
    6226:	e79f      	b.n	6168 <__aeabi_ddiv+0x48>
    6228:	4651      	mov	r1, sl
    622a:	465a      	mov	r2, fp
    622c:	4311      	orrs	r1, r2
    622e:	d129      	bne.n	6284 <__aeabi_ddiv+0x164>
    6230:	2200      	movs	r2, #0
    6232:	4693      	mov	fp, r2
    6234:	3202      	adds	r2, #2
    6236:	e7b1      	b.n	619c <__aeabi_ddiv+0x7c>
    6238:	4659      	mov	r1, fp
    623a:	4301      	orrs	r1, r0
    623c:	d01e      	beq.n	627c <__aeabi_ddiv+0x15c>
    623e:	465b      	mov	r3, fp
    6240:	2b00      	cmp	r3, #0
    6242:	d100      	bne.n	6246 <__aeabi_ddiv+0x126>
    6244:	e19e      	b.n	6584 <__aeabi_ddiv+0x464>
    6246:	4658      	mov	r0, fp
    6248:	f001 fabe 	bl	77c8 <__clzsi2>
    624c:	0003      	movs	r3, r0
    624e:	3b0b      	subs	r3, #11
    6250:	2b1c      	cmp	r3, #28
    6252:	dd00      	ble.n	6256 <__aeabi_ddiv+0x136>
    6254:	e18f      	b.n	6576 <__aeabi_ddiv+0x456>
    6256:	0002      	movs	r2, r0
    6258:	4659      	mov	r1, fp
    625a:	3a08      	subs	r2, #8
    625c:	4091      	lsls	r1, r2
    625e:	468b      	mov	fp, r1
    6260:	211d      	movs	r1, #29
    6262:	1acb      	subs	r3, r1, r3
    6264:	4651      	mov	r1, sl
    6266:	40d9      	lsrs	r1, r3
    6268:	000b      	movs	r3, r1
    626a:	4659      	mov	r1, fp
    626c:	430b      	orrs	r3, r1
    626e:	4651      	mov	r1, sl
    6270:	469b      	mov	fp, r3
    6272:	4091      	lsls	r1, r2
    6274:	4b26      	ldr	r3, [pc, #152]	; (6310 <__aeabi_ddiv+0x1f0>)
    6276:	2200      	movs	r2, #0
    6278:	1a1b      	subs	r3, r3, r0
    627a:	e78f      	b.n	619c <__aeabi_ddiv+0x7c>
    627c:	2300      	movs	r3, #0
    627e:	2201      	movs	r2, #1
    6280:	469b      	mov	fp, r3
    6282:	e78b      	b.n	619c <__aeabi_ddiv+0x7c>
    6284:	4651      	mov	r1, sl
    6286:	2203      	movs	r2, #3
    6288:	e788      	b.n	619c <__aeabi_ddiv+0x7c>
    628a:	2300      	movs	r3, #0
    628c:	4698      	mov	r8, r3
    628e:	3301      	adds	r3, #1
    6290:	2604      	movs	r6, #4
    6292:	2400      	movs	r4, #0
    6294:	9303      	str	r3, [sp, #12]
    6296:	e767      	b.n	6168 <__aeabi_ddiv+0x48>
    6298:	2303      	movs	r3, #3
    629a:	46b1      	mov	r9, r6
    629c:	9303      	str	r3, [sp, #12]
    629e:	260c      	movs	r6, #12
    62a0:	e762      	b.n	6168 <__aeabi_ddiv+0x48>
    62a2:	2a03      	cmp	r2, #3
    62a4:	d100      	bne.n	62a8 <__aeabi_ddiv+0x188>
    62a6:	e25c      	b.n	6762 <__aeabi_ddiv+0x642>
    62a8:	9b01      	ldr	r3, [sp, #4]
    62aa:	2a01      	cmp	r2, #1
    62ac:	d000      	beq.n	62b0 <__aeabi_ddiv+0x190>
    62ae:	e1e4      	b.n	667a <__aeabi_ddiv+0x55a>
    62b0:	4013      	ands	r3, r2
    62b2:	469c      	mov	ip, r3
    62b4:	2300      	movs	r3, #0
    62b6:	2400      	movs	r4, #0
    62b8:	2200      	movs	r2, #0
    62ba:	4698      	mov	r8, r3
    62bc:	2100      	movs	r1, #0
    62be:	0312      	lsls	r2, r2, #12
    62c0:	0b13      	lsrs	r3, r2, #12
    62c2:	0d0a      	lsrs	r2, r1, #20
    62c4:	0512      	lsls	r2, r2, #20
    62c6:	431a      	orrs	r2, r3
    62c8:	0523      	lsls	r3, r4, #20
    62ca:	4c12      	ldr	r4, [pc, #72]	; (6314 <__aeabi_ddiv+0x1f4>)
    62cc:	4640      	mov	r0, r8
    62ce:	4022      	ands	r2, r4
    62d0:	4313      	orrs	r3, r2
    62d2:	4662      	mov	r2, ip
    62d4:	005b      	lsls	r3, r3, #1
    62d6:	07d2      	lsls	r2, r2, #31
    62d8:	085b      	lsrs	r3, r3, #1
    62da:	4313      	orrs	r3, r2
    62dc:	0019      	movs	r1, r3
    62de:	b007      	add	sp, #28
    62e0:	bc3c      	pop	{r2, r3, r4, r5}
    62e2:	4690      	mov	r8, r2
    62e4:	4699      	mov	r9, r3
    62e6:	46a2      	mov	sl, r4
    62e8:	46ab      	mov	fp, r5
    62ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62ec:	2300      	movs	r3, #0
    62ee:	2280      	movs	r2, #128	; 0x80
    62f0:	469c      	mov	ip, r3
    62f2:	0312      	lsls	r2, r2, #12
    62f4:	4698      	mov	r8, r3
    62f6:	4c03      	ldr	r4, [pc, #12]	; (6304 <__aeabi_ddiv+0x1e4>)
    62f8:	e7e0      	b.n	62bc <__aeabi_ddiv+0x19c>
    62fa:	2300      	movs	r3, #0
    62fc:	4c01      	ldr	r4, [pc, #4]	; (6304 <__aeabi_ddiv+0x1e4>)
    62fe:	2200      	movs	r2, #0
    6300:	4698      	mov	r8, r3
    6302:	e7db      	b.n	62bc <__aeabi_ddiv+0x19c>
    6304:	000007ff 	.word	0x000007ff
    6308:	fffffc01 	.word	0xfffffc01
    630c:	00008464 	.word	0x00008464
    6310:	fffffc0d 	.word	0xfffffc0d
    6314:	800fffff 	.word	0x800fffff
    6318:	45d9      	cmp	r9, fp
    631a:	d900      	bls.n	631e <__aeabi_ddiv+0x1fe>
    631c:	e139      	b.n	6592 <__aeabi_ddiv+0x472>
    631e:	d100      	bne.n	6322 <__aeabi_ddiv+0x202>
    6320:	e134      	b.n	658c <__aeabi_ddiv+0x46c>
    6322:	2300      	movs	r3, #0
    6324:	4646      	mov	r6, r8
    6326:	464d      	mov	r5, r9
    6328:	469a      	mov	sl, r3
    632a:	3c01      	subs	r4, #1
    632c:	465b      	mov	r3, fp
    632e:	0e0a      	lsrs	r2, r1, #24
    6330:	021b      	lsls	r3, r3, #8
    6332:	431a      	orrs	r2, r3
    6334:	020b      	lsls	r3, r1, #8
    6336:	0c17      	lsrs	r7, r2, #16
    6338:	9303      	str	r3, [sp, #12]
    633a:	0413      	lsls	r3, r2, #16
    633c:	0c1b      	lsrs	r3, r3, #16
    633e:	0039      	movs	r1, r7
    6340:	0028      	movs	r0, r5
    6342:	4690      	mov	r8, r2
    6344:	9301      	str	r3, [sp, #4]
    6346:	f7fe fbcb 	bl	4ae0 <__udivsi3>
    634a:	0002      	movs	r2, r0
    634c:	9b01      	ldr	r3, [sp, #4]
    634e:	4683      	mov	fp, r0
    6350:	435a      	muls	r2, r3
    6352:	0028      	movs	r0, r5
    6354:	0039      	movs	r1, r7
    6356:	4691      	mov	r9, r2
    6358:	f7fe fc48 	bl	4bec <__aeabi_uidivmod>
    635c:	0c35      	lsrs	r5, r6, #16
    635e:	0409      	lsls	r1, r1, #16
    6360:	430d      	orrs	r5, r1
    6362:	45a9      	cmp	r9, r5
    6364:	d90d      	bls.n	6382 <__aeabi_ddiv+0x262>
    6366:	465b      	mov	r3, fp
    6368:	4445      	add	r5, r8
    636a:	3b01      	subs	r3, #1
    636c:	45a8      	cmp	r8, r5
    636e:	d900      	bls.n	6372 <__aeabi_ddiv+0x252>
    6370:	e13a      	b.n	65e8 <__aeabi_ddiv+0x4c8>
    6372:	45a9      	cmp	r9, r5
    6374:	d800      	bhi.n	6378 <__aeabi_ddiv+0x258>
    6376:	e137      	b.n	65e8 <__aeabi_ddiv+0x4c8>
    6378:	2302      	movs	r3, #2
    637a:	425b      	negs	r3, r3
    637c:	469c      	mov	ip, r3
    637e:	4445      	add	r5, r8
    6380:	44e3      	add	fp, ip
    6382:	464b      	mov	r3, r9
    6384:	1aeb      	subs	r3, r5, r3
    6386:	0039      	movs	r1, r7
    6388:	0018      	movs	r0, r3
    638a:	9304      	str	r3, [sp, #16]
    638c:	f7fe fba8 	bl	4ae0 <__udivsi3>
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	0005      	movs	r5, r0
    6394:	4343      	muls	r3, r0
    6396:	0039      	movs	r1, r7
    6398:	9804      	ldr	r0, [sp, #16]
    639a:	4699      	mov	r9, r3
    639c:	f7fe fc26 	bl	4bec <__aeabi_uidivmod>
    63a0:	0433      	lsls	r3, r6, #16
    63a2:	0409      	lsls	r1, r1, #16
    63a4:	0c1b      	lsrs	r3, r3, #16
    63a6:	430b      	orrs	r3, r1
    63a8:	4599      	cmp	r9, r3
    63aa:	d909      	bls.n	63c0 <__aeabi_ddiv+0x2a0>
    63ac:	4443      	add	r3, r8
    63ae:	1e6a      	subs	r2, r5, #1
    63b0:	4598      	cmp	r8, r3
    63b2:	d900      	bls.n	63b6 <__aeabi_ddiv+0x296>
    63b4:	e11a      	b.n	65ec <__aeabi_ddiv+0x4cc>
    63b6:	4599      	cmp	r9, r3
    63b8:	d800      	bhi.n	63bc <__aeabi_ddiv+0x29c>
    63ba:	e117      	b.n	65ec <__aeabi_ddiv+0x4cc>
    63bc:	3d02      	subs	r5, #2
    63be:	4443      	add	r3, r8
    63c0:	464a      	mov	r2, r9
    63c2:	1a9b      	subs	r3, r3, r2
    63c4:	465a      	mov	r2, fp
    63c6:	0412      	lsls	r2, r2, #16
    63c8:	432a      	orrs	r2, r5
    63ca:	9903      	ldr	r1, [sp, #12]
    63cc:	4693      	mov	fp, r2
    63ce:	0c10      	lsrs	r0, r2, #16
    63d0:	0c0a      	lsrs	r2, r1, #16
    63d2:	4691      	mov	r9, r2
    63d4:	0409      	lsls	r1, r1, #16
    63d6:	465a      	mov	r2, fp
    63d8:	0c09      	lsrs	r1, r1, #16
    63da:	464e      	mov	r6, r9
    63dc:	000d      	movs	r5, r1
    63de:	0412      	lsls	r2, r2, #16
    63e0:	0c12      	lsrs	r2, r2, #16
    63e2:	4345      	muls	r5, r0
    63e4:	9105      	str	r1, [sp, #20]
    63e6:	4351      	muls	r1, r2
    63e8:	4372      	muls	r2, r6
    63ea:	4370      	muls	r0, r6
    63ec:	1952      	adds	r2, r2, r5
    63ee:	0c0e      	lsrs	r6, r1, #16
    63f0:	18b2      	adds	r2, r6, r2
    63f2:	4295      	cmp	r5, r2
    63f4:	d903      	bls.n	63fe <__aeabi_ddiv+0x2de>
    63f6:	2580      	movs	r5, #128	; 0x80
    63f8:	026d      	lsls	r5, r5, #9
    63fa:	46ac      	mov	ip, r5
    63fc:	4460      	add	r0, ip
    63fe:	0c15      	lsrs	r5, r2, #16
    6400:	0409      	lsls	r1, r1, #16
    6402:	0412      	lsls	r2, r2, #16
    6404:	0c09      	lsrs	r1, r1, #16
    6406:	1828      	adds	r0, r5, r0
    6408:	1852      	adds	r2, r2, r1
    640a:	4283      	cmp	r3, r0
    640c:	d200      	bcs.n	6410 <__aeabi_ddiv+0x2f0>
    640e:	e0ce      	b.n	65ae <__aeabi_ddiv+0x48e>
    6410:	d100      	bne.n	6414 <__aeabi_ddiv+0x2f4>
    6412:	e0c8      	b.n	65a6 <__aeabi_ddiv+0x486>
    6414:	1a1d      	subs	r5, r3, r0
    6416:	4653      	mov	r3, sl
    6418:	1a9e      	subs	r6, r3, r2
    641a:	45b2      	cmp	sl, r6
    641c:	4192      	sbcs	r2, r2
    641e:	4252      	negs	r2, r2
    6420:	1aab      	subs	r3, r5, r2
    6422:	469a      	mov	sl, r3
    6424:	4598      	cmp	r8, r3
    6426:	d100      	bne.n	642a <__aeabi_ddiv+0x30a>
    6428:	e117      	b.n	665a <__aeabi_ddiv+0x53a>
    642a:	0039      	movs	r1, r7
    642c:	0018      	movs	r0, r3
    642e:	f7fe fb57 	bl	4ae0 <__udivsi3>
    6432:	9b01      	ldr	r3, [sp, #4]
    6434:	0005      	movs	r5, r0
    6436:	4343      	muls	r3, r0
    6438:	0039      	movs	r1, r7
    643a:	4650      	mov	r0, sl
    643c:	9304      	str	r3, [sp, #16]
    643e:	f7fe fbd5 	bl	4bec <__aeabi_uidivmod>
    6442:	9804      	ldr	r0, [sp, #16]
    6444:	040b      	lsls	r3, r1, #16
    6446:	0c31      	lsrs	r1, r6, #16
    6448:	4319      	orrs	r1, r3
    644a:	4288      	cmp	r0, r1
    644c:	d909      	bls.n	6462 <__aeabi_ddiv+0x342>
    644e:	4441      	add	r1, r8
    6450:	1e6b      	subs	r3, r5, #1
    6452:	4588      	cmp	r8, r1
    6454:	d900      	bls.n	6458 <__aeabi_ddiv+0x338>
    6456:	e107      	b.n	6668 <__aeabi_ddiv+0x548>
    6458:	4288      	cmp	r0, r1
    645a:	d800      	bhi.n	645e <__aeabi_ddiv+0x33e>
    645c:	e104      	b.n	6668 <__aeabi_ddiv+0x548>
    645e:	3d02      	subs	r5, #2
    6460:	4441      	add	r1, r8
    6462:	9b04      	ldr	r3, [sp, #16]
    6464:	1acb      	subs	r3, r1, r3
    6466:	0018      	movs	r0, r3
    6468:	0039      	movs	r1, r7
    646a:	9304      	str	r3, [sp, #16]
    646c:	f7fe fb38 	bl	4ae0 <__udivsi3>
    6470:	9b01      	ldr	r3, [sp, #4]
    6472:	4682      	mov	sl, r0
    6474:	4343      	muls	r3, r0
    6476:	0039      	movs	r1, r7
    6478:	9804      	ldr	r0, [sp, #16]
    647a:	9301      	str	r3, [sp, #4]
    647c:	f7fe fbb6 	bl	4bec <__aeabi_uidivmod>
    6480:	9801      	ldr	r0, [sp, #4]
    6482:	040b      	lsls	r3, r1, #16
    6484:	0431      	lsls	r1, r6, #16
    6486:	0c09      	lsrs	r1, r1, #16
    6488:	4319      	orrs	r1, r3
    648a:	4288      	cmp	r0, r1
    648c:	d90d      	bls.n	64aa <__aeabi_ddiv+0x38a>
    648e:	4653      	mov	r3, sl
    6490:	4441      	add	r1, r8
    6492:	3b01      	subs	r3, #1
    6494:	4588      	cmp	r8, r1
    6496:	d900      	bls.n	649a <__aeabi_ddiv+0x37a>
    6498:	e0e8      	b.n	666c <__aeabi_ddiv+0x54c>
    649a:	4288      	cmp	r0, r1
    649c:	d800      	bhi.n	64a0 <__aeabi_ddiv+0x380>
    649e:	e0e5      	b.n	666c <__aeabi_ddiv+0x54c>
    64a0:	2302      	movs	r3, #2
    64a2:	425b      	negs	r3, r3
    64a4:	469c      	mov	ip, r3
    64a6:	4441      	add	r1, r8
    64a8:	44e2      	add	sl, ip
    64aa:	9b01      	ldr	r3, [sp, #4]
    64ac:	042d      	lsls	r5, r5, #16
    64ae:	1ace      	subs	r6, r1, r3
    64b0:	4651      	mov	r1, sl
    64b2:	4329      	orrs	r1, r5
    64b4:	9d05      	ldr	r5, [sp, #20]
    64b6:	464f      	mov	r7, r9
    64b8:	002a      	movs	r2, r5
    64ba:	040b      	lsls	r3, r1, #16
    64bc:	0c08      	lsrs	r0, r1, #16
    64be:	0c1b      	lsrs	r3, r3, #16
    64c0:	435a      	muls	r2, r3
    64c2:	4345      	muls	r5, r0
    64c4:	437b      	muls	r3, r7
    64c6:	4378      	muls	r0, r7
    64c8:	195b      	adds	r3, r3, r5
    64ca:	0c17      	lsrs	r7, r2, #16
    64cc:	18fb      	adds	r3, r7, r3
    64ce:	429d      	cmp	r5, r3
    64d0:	d903      	bls.n	64da <__aeabi_ddiv+0x3ba>
    64d2:	2580      	movs	r5, #128	; 0x80
    64d4:	026d      	lsls	r5, r5, #9
    64d6:	46ac      	mov	ip, r5
    64d8:	4460      	add	r0, ip
    64da:	0c1d      	lsrs	r5, r3, #16
    64dc:	0412      	lsls	r2, r2, #16
    64de:	041b      	lsls	r3, r3, #16
    64e0:	0c12      	lsrs	r2, r2, #16
    64e2:	1828      	adds	r0, r5, r0
    64e4:	189b      	adds	r3, r3, r2
    64e6:	4286      	cmp	r6, r0
    64e8:	d200      	bcs.n	64ec <__aeabi_ddiv+0x3cc>
    64ea:	e093      	b.n	6614 <__aeabi_ddiv+0x4f4>
    64ec:	d100      	bne.n	64f0 <__aeabi_ddiv+0x3d0>
    64ee:	e08e      	b.n	660e <__aeabi_ddiv+0x4ee>
    64f0:	2301      	movs	r3, #1
    64f2:	4319      	orrs	r1, r3
    64f4:	4ba0      	ldr	r3, [pc, #640]	; (6778 <__aeabi_ddiv+0x658>)
    64f6:	18e3      	adds	r3, r4, r3
    64f8:	2b00      	cmp	r3, #0
    64fa:	dc00      	bgt.n	64fe <__aeabi_ddiv+0x3de>
    64fc:	e099      	b.n	6632 <__aeabi_ddiv+0x512>
    64fe:	074a      	lsls	r2, r1, #29
    6500:	d000      	beq.n	6504 <__aeabi_ddiv+0x3e4>
    6502:	e09e      	b.n	6642 <__aeabi_ddiv+0x522>
    6504:	465a      	mov	r2, fp
    6506:	01d2      	lsls	r2, r2, #7
    6508:	d506      	bpl.n	6518 <__aeabi_ddiv+0x3f8>
    650a:	465a      	mov	r2, fp
    650c:	4b9b      	ldr	r3, [pc, #620]	; (677c <__aeabi_ddiv+0x65c>)
    650e:	401a      	ands	r2, r3
    6510:	2380      	movs	r3, #128	; 0x80
    6512:	4693      	mov	fp, r2
    6514:	00db      	lsls	r3, r3, #3
    6516:	18e3      	adds	r3, r4, r3
    6518:	4a99      	ldr	r2, [pc, #612]	; (6780 <__aeabi_ddiv+0x660>)
    651a:	4293      	cmp	r3, r2
    651c:	dd68      	ble.n	65f0 <__aeabi_ddiv+0x4d0>
    651e:	2301      	movs	r3, #1
    6520:	9a02      	ldr	r2, [sp, #8]
    6522:	4c98      	ldr	r4, [pc, #608]	; (6784 <__aeabi_ddiv+0x664>)
    6524:	401a      	ands	r2, r3
    6526:	2300      	movs	r3, #0
    6528:	4694      	mov	ip, r2
    652a:	4698      	mov	r8, r3
    652c:	2200      	movs	r2, #0
    652e:	e6c5      	b.n	62bc <__aeabi_ddiv+0x19c>
    6530:	2280      	movs	r2, #128	; 0x80
    6532:	464b      	mov	r3, r9
    6534:	0312      	lsls	r2, r2, #12
    6536:	4213      	tst	r3, r2
    6538:	d00a      	beq.n	6550 <__aeabi_ddiv+0x430>
    653a:	465b      	mov	r3, fp
    653c:	4213      	tst	r3, r2
    653e:	d106      	bne.n	654e <__aeabi_ddiv+0x42e>
    6540:	431a      	orrs	r2, r3
    6542:	0312      	lsls	r2, r2, #12
    6544:	0b12      	lsrs	r2, r2, #12
    6546:	46ac      	mov	ip, r5
    6548:	4688      	mov	r8, r1
    654a:	4c8e      	ldr	r4, [pc, #568]	; (6784 <__aeabi_ddiv+0x664>)
    654c:	e6b6      	b.n	62bc <__aeabi_ddiv+0x19c>
    654e:	464b      	mov	r3, r9
    6550:	431a      	orrs	r2, r3
    6552:	0312      	lsls	r2, r2, #12
    6554:	0b12      	lsrs	r2, r2, #12
    6556:	46bc      	mov	ip, r7
    6558:	4c8a      	ldr	r4, [pc, #552]	; (6784 <__aeabi_ddiv+0x664>)
    655a:	e6af      	b.n	62bc <__aeabi_ddiv+0x19c>
    655c:	0003      	movs	r3, r0
    655e:	465a      	mov	r2, fp
    6560:	3b28      	subs	r3, #40	; 0x28
    6562:	409a      	lsls	r2, r3
    6564:	2300      	movs	r3, #0
    6566:	4691      	mov	r9, r2
    6568:	4698      	mov	r8, r3
    656a:	e657      	b.n	621c <__aeabi_ddiv+0xfc>
    656c:	4658      	mov	r0, fp
    656e:	f001 f92b 	bl	77c8 <__clzsi2>
    6572:	3020      	adds	r0, #32
    6574:	e640      	b.n	61f8 <__aeabi_ddiv+0xd8>
    6576:	0003      	movs	r3, r0
    6578:	4652      	mov	r2, sl
    657a:	3b28      	subs	r3, #40	; 0x28
    657c:	409a      	lsls	r2, r3
    657e:	2100      	movs	r1, #0
    6580:	4693      	mov	fp, r2
    6582:	e677      	b.n	6274 <__aeabi_ddiv+0x154>
    6584:	f001 f920 	bl	77c8 <__clzsi2>
    6588:	3020      	adds	r0, #32
    658a:	e65f      	b.n	624c <__aeabi_ddiv+0x12c>
    658c:	4588      	cmp	r8, r1
    658e:	d200      	bcs.n	6592 <__aeabi_ddiv+0x472>
    6590:	e6c7      	b.n	6322 <__aeabi_ddiv+0x202>
    6592:	464b      	mov	r3, r9
    6594:	07de      	lsls	r6, r3, #31
    6596:	085d      	lsrs	r5, r3, #1
    6598:	4643      	mov	r3, r8
    659a:	085b      	lsrs	r3, r3, #1
    659c:	431e      	orrs	r6, r3
    659e:	4643      	mov	r3, r8
    65a0:	07db      	lsls	r3, r3, #31
    65a2:	469a      	mov	sl, r3
    65a4:	e6c2      	b.n	632c <__aeabi_ddiv+0x20c>
    65a6:	2500      	movs	r5, #0
    65a8:	4592      	cmp	sl, r2
    65aa:	d300      	bcc.n	65ae <__aeabi_ddiv+0x48e>
    65ac:	e733      	b.n	6416 <__aeabi_ddiv+0x2f6>
    65ae:	9e03      	ldr	r6, [sp, #12]
    65b0:	4659      	mov	r1, fp
    65b2:	46b4      	mov	ip, r6
    65b4:	44e2      	add	sl, ip
    65b6:	45b2      	cmp	sl, r6
    65b8:	41ad      	sbcs	r5, r5
    65ba:	426d      	negs	r5, r5
    65bc:	4445      	add	r5, r8
    65be:	18eb      	adds	r3, r5, r3
    65c0:	3901      	subs	r1, #1
    65c2:	4598      	cmp	r8, r3
    65c4:	d207      	bcs.n	65d6 <__aeabi_ddiv+0x4b6>
    65c6:	4298      	cmp	r0, r3
    65c8:	d900      	bls.n	65cc <__aeabi_ddiv+0x4ac>
    65ca:	e07f      	b.n	66cc <__aeabi_ddiv+0x5ac>
    65cc:	d100      	bne.n	65d0 <__aeabi_ddiv+0x4b0>
    65ce:	e0bc      	b.n	674a <__aeabi_ddiv+0x62a>
    65d0:	1a1d      	subs	r5, r3, r0
    65d2:	468b      	mov	fp, r1
    65d4:	e71f      	b.n	6416 <__aeabi_ddiv+0x2f6>
    65d6:	4598      	cmp	r8, r3
    65d8:	d1fa      	bne.n	65d0 <__aeabi_ddiv+0x4b0>
    65da:	9d03      	ldr	r5, [sp, #12]
    65dc:	4555      	cmp	r5, sl
    65de:	d9f2      	bls.n	65c6 <__aeabi_ddiv+0x4a6>
    65e0:	4643      	mov	r3, r8
    65e2:	468b      	mov	fp, r1
    65e4:	1a1d      	subs	r5, r3, r0
    65e6:	e716      	b.n	6416 <__aeabi_ddiv+0x2f6>
    65e8:	469b      	mov	fp, r3
    65ea:	e6ca      	b.n	6382 <__aeabi_ddiv+0x262>
    65ec:	0015      	movs	r5, r2
    65ee:	e6e7      	b.n	63c0 <__aeabi_ddiv+0x2a0>
    65f0:	465a      	mov	r2, fp
    65f2:	08c9      	lsrs	r1, r1, #3
    65f4:	0752      	lsls	r2, r2, #29
    65f6:	430a      	orrs	r2, r1
    65f8:	055b      	lsls	r3, r3, #21
    65fa:	4690      	mov	r8, r2
    65fc:	0d5c      	lsrs	r4, r3, #21
    65fe:	465a      	mov	r2, fp
    6600:	2301      	movs	r3, #1
    6602:	9902      	ldr	r1, [sp, #8]
    6604:	0252      	lsls	r2, r2, #9
    6606:	4019      	ands	r1, r3
    6608:	0b12      	lsrs	r2, r2, #12
    660a:	468c      	mov	ip, r1
    660c:	e656      	b.n	62bc <__aeabi_ddiv+0x19c>
    660e:	2b00      	cmp	r3, #0
    6610:	d100      	bne.n	6614 <__aeabi_ddiv+0x4f4>
    6612:	e76f      	b.n	64f4 <__aeabi_ddiv+0x3d4>
    6614:	4446      	add	r6, r8
    6616:	1e4a      	subs	r2, r1, #1
    6618:	45b0      	cmp	r8, r6
    661a:	d929      	bls.n	6670 <__aeabi_ddiv+0x550>
    661c:	0011      	movs	r1, r2
    661e:	4286      	cmp	r6, r0
    6620:	d000      	beq.n	6624 <__aeabi_ddiv+0x504>
    6622:	e765      	b.n	64f0 <__aeabi_ddiv+0x3d0>
    6624:	9a03      	ldr	r2, [sp, #12]
    6626:	4293      	cmp	r3, r2
    6628:	d000      	beq.n	662c <__aeabi_ddiv+0x50c>
    662a:	e761      	b.n	64f0 <__aeabi_ddiv+0x3d0>
    662c:	e762      	b.n	64f4 <__aeabi_ddiv+0x3d4>
    662e:	2101      	movs	r1, #1
    6630:	4249      	negs	r1, r1
    6632:	2001      	movs	r0, #1
    6634:	1ac2      	subs	r2, r0, r3
    6636:	2a38      	cmp	r2, #56	; 0x38
    6638:	dd21      	ble.n	667e <__aeabi_ddiv+0x55e>
    663a:	9b02      	ldr	r3, [sp, #8]
    663c:	4003      	ands	r3, r0
    663e:	469c      	mov	ip, r3
    6640:	e638      	b.n	62b4 <__aeabi_ddiv+0x194>
    6642:	220f      	movs	r2, #15
    6644:	400a      	ands	r2, r1
    6646:	2a04      	cmp	r2, #4
    6648:	d100      	bne.n	664c <__aeabi_ddiv+0x52c>
    664a:	e75b      	b.n	6504 <__aeabi_ddiv+0x3e4>
    664c:	000a      	movs	r2, r1
    664e:	1d11      	adds	r1, r2, #4
    6650:	4291      	cmp	r1, r2
    6652:	4192      	sbcs	r2, r2
    6654:	4252      	negs	r2, r2
    6656:	4493      	add	fp, r2
    6658:	e754      	b.n	6504 <__aeabi_ddiv+0x3e4>
    665a:	4b47      	ldr	r3, [pc, #284]	; (6778 <__aeabi_ddiv+0x658>)
    665c:	18e3      	adds	r3, r4, r3
    665e:	2b00      	cmp	r3, #0
    6660:	dde5      	ble.n	662e <__aeabi_ddiv+0x50e>
    6662:	2201      	movs	r2, #1
    6664:	4252      	negs	r2, r2
    6666:	e7f2      	b.n	664e <__aeabi_ddiv+0x52e>
    6668:	001d      	movs	r5, r3
    666a:	e6fa      	b.n	6462 <__aeabi_ddiv+0x342>
    666c:	469a      	mov	sl, r3
    666e:	e71c      	b.n	64aa <__aeabi_ddiv+0x38a>
    6670:	42b0      	cmp	r0, r6
    6672:	d839      	bhi.n	66e8 <__aeabi_ddiv+0x5c8>
    6674:	d06e      	beq.n	6754 <__aeabi_ddiv+0x634>
    6676:	0011      	movs	r1, r2
    6678:	e73a      	b.n	64f0 <__aeabi_ddiv+0x3d0>
    667a:	9302      	str	r3, [sp, #8]
    667c:	e73a      	b.n	64f4 <__aeabi_ddiv+0x3d4>
    667e:	2a1f      	cmp	r2, #31
    6680:	dc3c      	bgt.n	66fc <__aeabi_ddiv+0x5dc>
    6682:	2320      	movs	r3, #32
    6684:	1a9b      	subs	r3, r3, r2
    6686:	000c      	movs	r4, r1
    6688:	4658      	mov	r0, fp
    668a:	4099      	lsls	r1, r3
    668c:	4098      	lsls	r0, r3
    668e:	1e4b      	subs	r3, r1, #1
    6690:	4199      	sbcs	r1, r3
    6692:	465b      	mov	r3, fp
    6694:	40d4      	lsrs	r4, r2
    6696:	40d3      	lsrs	r3, r2
    6698:	4320      	orrs	r0, r4
    669a:	4308      	orrs	r0, r1
    669c:	001a      	movs	r2, r3
    669e:	0743      	lsls	r3, r0, #29
    66a0:	d009      	beq.n	66b6 <__aeabi_ddiv+0x596>
    66a2:	230f      	movs	r3, #15
    66a4:	4003      	ands	r3, r0
    66a6:	2b04      	cmp	r3, #4
    66a8:	d005      	beq.n	66b6 <__aeabi_ddiv+0x596>
    66aa:	0001      	movs	r1, r0
    66ac:	1d08      	adds	r0, r1, #4
    66ae:	4288      	cmp	r0, r1
    66b0:	419b      	sbcs	r3, r3
    66b2:	425b      	negs	r3, r3
    66b4:	18d2      	adds	r2, r2, r3
    66b6:	0213      	lsls	r3, r2, #8
    66b8:	d53a      	bpl.n	6730 <__aeabi_ddiv+0x610>
    66ba:	2301      	movs	r3, #1
    66bc:	9a02      	ldr	r2, [sp, #8]
    66be:	2401      	movs	r4, #1
    66c0:	401a      	ands	r2, r3
    66c2:	2300      	movs	r3, #0
    66c4:	4694      	mov	ip, r2
    66c6:	4698      	mov	r8, r3
    66c8:	2200      	movs	r2, #0
    66ca:	e5f7      	b.n	62bc <__aeabi_ddiv+0x19c>
    66cc:	2102      	movs	r1, #2
    66ce:	4249      	negs	r1, r1
    66d0:	468c      	mov	ip, r1
    66d2:	9d03      	ldr	r5, [sp, #12]
    66d4:	44e3      	add	fp, ip
    66d6:	46ac      	mov	ip, r5
    66d8:	44e2      	add	sl, ip
    66da:	45aa      	cmp	sl, r5
    66dc:	41ad      	sbcs	r5, r5
    66de:	426d      	negs	r5, r5
    66e0:	4445      	add	r5, r8
    66e2:	18ed      	adds	r5, r5, r3
    66e4:	1a2d      	subs	r5, r5, r0
    66e6:	e696      	b.n	6416 <__aeabi_ddiv+0x2f6>
    66e8:	1e8a      	subs	r2, r1, #2
    66ea:	9903      	ldr	r1, [sp, #12]
    66ec:	004d      	lsls	r5, r1, #1
    66ee:	428d      	cmp	r5, r1
    66f0:	4189      	sbcs	r1, r1
    66f2:	4249      	negs	r1, r1
    66f4:	4441      	add	r1, r8
    66f6:	1876      	adds	r6, r6, r1
    66f8:	9503      	str	r5, [sp, #12]
    66fa:	e78f      	b.n	661c <__aeabi_ddiv+0x4fc>
    66fc:	201f      	movs	r0, #31
    66fe:	4240      	negs	r0, r0
    6700:	1ac3      	subs	r3, r0, r3
    6702:	4658      	mov	r0, fp
    6704:	40d8      	lsrs	r0, r3
    6706:	0003      	movs	r3, r0
    6708:	2a20      	cmp	r2, #32
    670a:	d028      	beq.n	675e <__aeabi_ddiv+0x63e>
    670c:	2040      	movs	r0, #64	; 0x40
    670e:	465d      	mov	r5, fp
    6710:	1a82      	subs	r2, r0, r2
    6712:	4095      	lsls	r5, r2
    6714:	4329      	orrs	r1, r5
    6716:	1e4a      	subs	r2, r1, #1
    6718:	4191      	sbcs	r1, r2
    671a:	4319      	orrs	r1, r3
    671c:	2307      	movs	r3, #7
    671e:	2200      	movs	r2, #0
    6720:	400b      	ands	r3, r1
    6722:	d009      	beq.n	6738 <__aeabi_ddiv+0x618>
    6724:	230f      	movs	r3, #15
    6726:	2200      	movs	r2, #0
    6728:	400b      	ands	r3, r1
    672a:	0008      	movs	r0, r1
    672c:	2b04      	cmp	r3, #4
    672e:	d1bd      	bne.n	66ac <__aeabi_ddiv+0x58c>
    6730:	0001      	movs	r1, r0
    6732:	0753      	lsls	r3, r2, #29
    6734:	0252      	lsls	r2, r2, #9
    6736:	0b12      	lsrs	r2, r2, #12
    6738:	08c9      	lsrs	r1, r1, #3
    673a:	4319      	orrs	r1, r3
    673c:	2301      	movs	r3, #1
    673e:	4688      	mov	r8, r1
    6740:	9902      	ldr	r1, [sp, #8]
    6742:	2400      	movs	r4, #0
    6744:	4019      	ands	r1, r3
    6746:	468c      	mov	ip, r1
    6748:	e5b8      	b.n	62bc <__aeabi_ddiv+0x19c>
    674a:	4552      	cmp	r2, sl
    674c:	d8be      	bhi.n	66cc <__aeabi_ddiv+0x5ac>
    674e:	468b      	mov	fp, r1
    6750:	2500      	movs	r5, #0
    6752:	e660      	b.n	6416 <__aeabi_ddiv+0x2f6>
    6754:	9d03      	ldr	r5, [sp, #12]
    6756:	429d      	cmp	r5, r3
    6758:	d3c6      	bcc.n	66e8 <__aeabi_ddiv+0x5c8>
    675a:	0011      	movs	r1, r2
    675c:	e762      	b.n	6624 <__aeabi_ddiv+0x504>
    675e:	2500      	movs	r5, #0
    6760:	e7d8      	b.n	6714 <__aeabi_ddiv+0x5f4>
    6762:	2280      	movs	r2, #128	; 0x80
    6764:	465b      	mov	r3, fp
    6766:	0312      	lsls	r2, r2, #12
    6768:	431a      	orrs	r2, r3
    676a:	9b01      	ldr	r3, [sp, #4]
    676c:	0312      	lsls	r2, r2, #12
    676e:	0b12      	lsrs	r2, r2, #12
    6770:	469c      	mov	ip, r3
    6772:	4688      	mov	r8, r1
    6774:	4c03      	ldr	r4, [pc, #12]	; (6784 <__aeabi_ddiv+0x664>)
    6776:	e5a1      	b.n	62bc <__aeabi_ddiv+0x19c>
    6778:	000003ff 	.word	0x000003ff
    677c:	feffffff 	.word	0xfeffffff
    6780:	000007fe 	.word	0x000007fe
    6784:	000007ff 	.word	0x000007ff

00006788 <__eqdf2>:
    6788:	b5f0      	push	{r4, r5, r6, r7, lr}
    678a:	464f      	mov	r7, r9
    678c:	4646      	mov	r6, r8
    678e:	46d6      	mov	lr, sl
    6790:	005c      	lsls	r4, r3, #1
    6792:	b5c0      	push	{r6, r7, lr}
    6794:	031f      	lsls	r7, r3, #12
    6796:	0fdb      	lsrs	r3, r3, #31
    6798:	469a      	mov	sl, r3
    679a:	4b17      	ldr	r3, [pc, #92]	; (67f8 <__eqdf2+0x70>)
    679c:	030e      	lsls	r6, r1, #12
    679e:	004d      	lsls	r5, r1, #1
    67a0:	4684      	mov	ip, r0
    67a2:	4680      	mov	r8, r0
    67a4:	0b36      	lsrs	r6, r6, #12
    67a6:	0d6d      	lsrs	r5, r5, #21
    67a8:	0fc9      	lsrs	r1, r1, #31
    67aa:	4691      	mov	r9, r2
    67ac:	0b3f      	lsrs	r7, r7, #12
    67ae:	0d64      	lsrs	r4, r4, #21
    67b0:	2001      	movs	r0, #1
    67b2:	429d      	cmp	r5, r3
    67b4:	d008      	beq.n	67c8 <__eqdf2+0x40>
    67b6:	429c      	cmp	r4, r3
    67b8:	d001      	beq.n	67be <__eqdf2+0x36>
    67ba:	42a5      	cmp	r5, r4
    67bc:	d00b      	beq.n	67d6 <__eqdf2+0x4e>
    67be:	bc1c      	pop	{r2, r3, r4}
    67c0:	4690      	mov	r8, r2
    67c2:	4699      	mov	r9, r3
    67c4:	46a2      	mov	sl, r4
    67c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67c8:	4663      	mov	r3, ip
    67ca:	4333      	orrs	r3, r6
    67cc:	d1f7      	bne.n	67be <__eqdf2+0x36>
    67ce:	42ac      	cmp	r4, r5
    67d0:	d1f5      	bne.n	67be <__eqdf2+0x36>
    67d2:	433a      	orrs	r2, r7
    67d4:	d1f3      	bne.n	67be <__eqdf2+0x36>
    67d6:	2001      	movs	r0, #1
    67d8:	42be      	cmp	r6, r7
    67da:	d1f0      	bne.n	67be <__eqdf2+0x36>
    67dc:	45c8      	cmp	r8, r9
    67de:	d1ee      	bne.n	67be <__eqdf2+0x36>
    67e0:	4551      	cmp	r1, sl
    67e2:	d007      	beq.n	67f4 <__eqdf2+0x6c>
    67e4:	2d00      	cmp	r5, #0
    67e6:	d1ea      	bne.n	67be <__eqdf2+0x36>
    67e8:	4663      	mov	r3, ip
    67ea:	431e      	orrs	r6, r3
    67ec:	0030      	movs	r0, r6
    67ee:	1e46      	subs	r6, r0, #1
    67f0:	41b0      	sbcs	r0, r6
    67f2:	e7e4      	b.n	67be <__eqdf2+0x36>
    67f4:	2000      	movs	r0, #0
    67f6:	e7e2      	b.n	67be <__eqdf2+0x36>
    67f8:	000007ff 	.word	0x000007ff

000067fc <__gedf2>:
    67fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67fe:	4645      	mov	r5, r8
    6800:	46de      	mov	lr, fp
    6802:	4657      	mov	r7, sl
    6804:	464e      	mov	r6, r9
    6806:	b5e0      	push	{r5, r6, r7, lr}
    6808:	031f      	lsls	r7, r3, #12
    680a:	0b3d      	lsrs	r5, r7, #12
    680c:	4f2c      	ldr	r7, [pc, #176]	; (68c0 <__gedf2+0xc4>)
    680e:	030e      	lsls	r6, r1, #12
    6810:	004c      	lsls	r4, r1, #1
    6812:	46ab      	mov	fp, r5
    6814:	005d      	lsls	r5, r3, #1
    6816:	4684      	mov	ip, r0
    6818:	0b36      	lsrs	r6, r6, #12
    681a:	0d64      	lsrs	r4, r4, #21
    681c:	0fc9      	lsrs	r1, r1, #31
    681e:	4690      	mov	r8, r2
    6820:	0d6d      	lsrs	r5, r5, #21
    6822:	0fdb      	lsrs	r3, r3, #31
    6824:	42bc      	cmp	r4, r7
    6826:	d02a      	beq.n	687e <__gedf2+0x82>
    6828:	4f25      	ldr	r7, [pc, #148]	; (68c0 <__gedf2+0xc4>)
    682a:	42bd      	cmp	r5, r7
    682c:	d02d      	beq.n	688a <__gedf2+0x8e>
    682e:	2c00      	cmp	r4, #0
    6830:	d10f      	bne.n	6852 <__gedf2+0x56>
    6832:	4330      	orrs	r0, r6
    6834:	0007      	movs	r7, r0
    6836:	4681      	mov	r9, r0
    6838:	4278      	negs	r0, r7
    683a:	4178      	adcs	r0, r7
    683c:	b2c0      	uxtb	r0, r0
    683e:	2d00      	cmp	r5, #0
    6840:	d117      	bne.n	6872 <__gedf2+0x76>
    6842:	465f      	mov	r7, fp
    6844:	433a      	orrs	r2, r7
    6846:	d114      	bne.n	6872 <__gedf2+0x76>
    6848:	464b      	mov	r3, r9
    684a:	2000      	movs	r0, #0
    684c:	2b00      	cmp	r3, #0
    684e:	d00a      	beq.n	6866 <__gedf2+0x6a>
    6850:	e006      	b.n	6860 <__gedf2+0x64>
    6852:	2d00      	cmp	r5, #0
    6854:	d102      	bne.n	685c <__gedf2+0x60>
    6856:	4658      	mov	r0, fp
    6858:	4302      	orrs	r2, r0
    685a:	d001      	beq.n	6860 <__gedf2+0x64>
    685c:	4299      	cmp	r1, r3
    685e:	d018      	beq.n	6892 <__gedf2+0x96>
    6860:	4248      	negs	r0, r1
    6862:	2101      	movs	r1, #1
    6864:	4308      	orrs	r0, r1
    6866:	bc3c      	pop	{r2, r3, r4, r5}
    6868:	4690      	mov	r8, r2
    686a:	4699      	mov	r9, r3
    686c:	46a2      	mov	sl, r4
    686e:	46ab      	mov	fp, r5
    6870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6872:	2800      	cmp	r0, #0
    6874:	d0f2      	beq.n	685c <__gedf2+0x60>
    6876:	2001      	movs	r0, #1
    6878:	3b01      	subs	r3, #1
    687a:	4318      	orrs	r0, r3
    687c:	e7f3      	b.n	6866 <__gedf2+0x6a>
    687e:	0037      	movs	r7, r6
    6880:	4307      	orrs	r7, r0
    6882:	d0d1      	beq.n	6828 <__gedf2+0x2c>
    6884:	2002      	movs	r0, #2
    6886:	4240      	negs	r0, r0
    6888:	e7ed      	b.n	6866 <__gedf2+0x6a>
    688a:	465f      	mov	r7, fp
    688c:	4317      	orrs	r7, r2
    688e:	d0ce      	beq.n	682e <__gedf2+0x32>
    6890:	e7f8      	b.n	6884 <__gedf2+0x88>
    6892:	42ac      	cmp	r4, r5
    6894:	dce4      	bgt.n	6860 <__gedf2+0x64>
    6896:	da03      	bge.n	68a0 <__gedf2+0xa4>
    6898:	1e48      	subs	r0, r1, #1
    689a:	2101      	movs	r1, #1
    689c:	4308      	orrs	r0, r1
    689e:	e7e2      	b.n	6866 <__gedf2+0x6a>
    68a0:	455e      	cmp	r6, fp
    68a2:	d8dd      	bhi.n	6860 <__gedf2+0x64>
    68a4:	d006      	beq.n	68b4 <__gedf2+0xb8>
    68a6:	2000      	movs	r0, #0
    68a8:	455e      	cmp	r6, fp
    68aa:	d2dc      	bcs.n	6866 <__gedf2+0x6a>
    68ac:	2301      	movs	r3, #1
    68ae:	1e48      	subs	r0, r1, #1
    68b0:	4318      	orrs	r0, r3
    68b2:	e7d8      	b.n	6866 <__gedf2+0x6a>
    68b4:	45c4      	cmp	ip, r8
    68b6:	d8d3      	bhi.n	6860 <__gedf2+0x64>
    68b8:	2000      	movs	r0, #0
    68ba:	45c4      	cmp	ip, r8
    68bc:	d3f6      	bcc.n	68ac <__gedf2+0xb0>
    68be:	e7d2      	b.n	6866 <__gedf2+0x6a>
    68c0:	000007ff 	.word	0x000007ff

000068c4 <__ledf2>:
    68c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c6:	464e      	mov	r6, r9
    68c8:	4645      	mov	r5, r8
    68ca:	46de      	mov	lr, fp
    68cc:	4657      	mov	r7, sl
    68ce:	005c      	lsls	r4, r3, #1
    68d0:	b5e0      	push	{r5, r6, r7, lr}
    68d2:	031f      	lsls	r7, r3, #12
    68d4:	0fdb      	lsrs	r3, r3, #31
    68d6:	4699      	mov	r9, r3
    68d8:	4b2a      	ldr	r3, [pc, #168]	; (6984 <__ledf2+0xc0>)
    68da:	030e      	lsls	r6, r1, #12
    68dc:	004d      	lsls	r5, r1, #1
    68de:	0fc9      	lsrs	r1, r1, #31
    68e0:	4684      	mov	ip, r0
    68e2:	0b36      	lsrs	r6, r6, #12
    68e4:	0d6d      	lsrs	r5, r5, #21
    68e6:	468b      	mov	fp, r1
    68e8:	4690      	mov	r8, r2
    68ea:	0b3f      	lsrs	r7, r7, #12
    68ec:	0d64      	lsrs	r4, r4, #21
    68ee:	429d      	cmp	r5, r3
    68f0:	d020      	beq.n	6934 <__ledf2+0x70>
    68f2:	4b24      	ldr	r3, [pc, #144]	; (6984 <__ledf2+0xc0>)
    68f4:	429c      	cmp	r4, r3
    68f6:	d022      	beq.n	693e <__ledf2+0x7a>
    68f8:	2d00      	cmp	r5, #0
    68fa:	d112      	bne.n	6922 <__ledf2+0x5e>
    68fc:	4330      	orrs	r0, r6
    68fe:	4243      	negs	r3, r0
    6900:	4143      	adcs	r3, r0
    6902:	b2db      	uxtb	r3, r3
    6904:	2c00      	cmp	r4, #0
    6906:	d01f      	beq.n	6948 <__ledf2+0x84>
    6908:	2b00      	cmp	r3, #0
    690a:	d00c      	beq.n	6926 <__ledf2+0x62>
    690c:	464b      	mov	r3, r9
    690e:	2001      	movs	r0, #1
    6910:	3b01      	subs	r3, #1
    6912:	4303      	orrs	r3, r0
    6914:	0018      	movs	r0, r3
    6916:	bc3c      	pop	{r2, r3, r4, r5}
    6918:	4690      	mov	r8, r2
    691a:	4699      	mov	r9, r3
    691c:	46a2      	mov	sl, r4
    691e:	46ab      	mov	fp, r5
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6922:	2c00      	cmp	r4, #0
    6924:	d016      	beq.n	6954 <__ledf2+0x90>
    6926:	45cb      	cmp	fp, r9
    6928:	d017      	beq.n	695a <__ledf2+0x96>
    692a:	465b      	mov	r3, fp
    692c:	4259      	negs	r1, r3
    692e:	2301      	movs	r3, #1
    6930:	430b      	orrs	r3, r1
    6932:	e7ef      	b.n	6914 <__ledf2+0x50>
    6934:	0031      	movs	r1, r6
    6936:	2302      	movs	r3, #2
    6938:	4301      	orrs	r1, r0
    693a:	d1eb      	bne.n	6914 <__ledf2+0x50>
    693c:	e7d9      	b.n	68f2 <__ledf2+0x2e>
    693e:	0039      	movs	r1, r7
    6940:	2302      	movs	r3, #2
    6942:	4311      	orrs	r1, r2
    6944:	d1e6      	bne.n	6914 <__ledf2+0x50>
    6946:	e7d7      	b.n	68f8 <__ledf2+0x34>
    6948:	433a      	orrs	r2, r7
    694a:	d1dd      	bne.n	6908 <__ledf2+0x44>
    694c:	2300      	movs	r3, #0
    694e:	2800      	cmp	r0, #0
    6950:	d0e0      	beq.n	6914 <__ledf2+0x50>
    6952:	e7ea      	b.n	692a <__ledf2+0x66>
    6954:	433a      	orrs	r2, r7
    6956:	d1e6      	bne.n	6926 <__ledf2+0x62>
    6958:	e7e7      	b.n	692a <__ledf2+0x66>
    695a:	42a5      	cmp	r5, r4
    695c:	dce5      	bgt.n	692a <__ledf2+0x66>
    695e:	db05      	blt.n	696c <__ledf2+0xa8>
    6960:	42be      	cmp	r6, r7
    6962:	d8e2      	bhi.n	692a <__ledf2+0x66>
    6964:	d007      	beq.n	6976 <__ledf2+0xb2>
    6966:	2300      	movs	r3, #0
    6968:	42be      	cmp	r6, r7
    696a:	d2d3      	bcs.n	6914 <__ledf2+0x50>
    696c:	4659      	mov	r1, fp
    696e:	2301      	movs	r3, #1
    6970:	3901      	subs	r1, #1
    6972:	430b      	orrs	r3, r1
    6974:	e7ce      	b.n	6914 <__ledf2+0x50>
    6976:	45c4      	cmp	ip, r8
    6978:	d8d7      	bhi.n	692a <__ledf2+0x66>
    697a:	2300      	movs	r3, #0
    697c:	45c4      	cmp	ip, r8
    697e:	d3f5      	bcc.n	696c <__ledf2+0xa8>
    6980:	e7c8      	b.n	6914 <__ledf2+0x50>
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	000007ff 	.word	0x000007ff

00006988 <__aeabi_dmul>:
    6988:	b5f0      	push	{r4, r5, r6, r7, lr}
    698a:	4657      	mov	r7, sl
    698c:	4645      	mov	r5, r8
    698e:	46de      	mov	lr, fp
    6990:	464e      	mov	r6, r9
    6992:	b5e0      	push	{r5, r6, r7, lr}
    6994:	030c      	lsls	r4, r1, #12
    6996:	4698      	mov	r8, r3
    6998:	004e      	lsls	r6, r1, #1
    699a:	0b23      	lsrs	r3, r4, #12
    699c:	b087      	sub	sp, #28
    699e:	0007      	movs	r7, r0
    69a0:	4692      	mov	sl, r2
    69a2:	469b      	mov	fp, r3
    69a4:	0d76      	lsrs	r6, r6, #21
    69a6:	0fcd      	lsrs	r5, r1, #31
    69a8:	2e00      	cmp	r6, #0
    69aa:	d06b      	beq.n	6a84 <__aeabi_dmul+0xfc>
    69ac:	4b6d      	ldr	r3, [pc, #436]	; (6b64 <__aeabi_dmul+0x1dc>)
    69ae:	429e      	cmp	r6, r3
    69b0:	d035      	beq.n	6a1e <__aeabi_dmul+0x96>
    69b2:	2480      	movs	r4, #128	; 0x80
    69b4:	465b      	mov	r3, fp
    69b6:	0f42      	lsrs	r2, r0, #29
    69b8:	0424      	lsls	r4, r4, #16
    69ba:	00db      	lsls	r3, r3, #3
    69bc:	4314      	orrs	r4, r2
    69be:	431c      	orrs	r4, r3
    69c0:	00c3      	lsls	r3, r0, #3
    69c2:	4699      	mov	r9, r3
    69c4:	4b68      	ldr	r3, [pc, #416]	; (6b68 <__aeabi_dmul+0x1e0>)
    69c6:	46a3      	mov	fp, r4
    69c8:	469c      	mov	ip, r3
    69ca:	2300      	movs	r3, #0
    69cc:	2700      	movs	r7, #0
    69ce:	4466      	add	r6, ip
    69d0:	9302      	str	r3, [sp, #8]
    69d2:	4643      	mov	r3, r8
    69d4:	031c      	lsls	r4, r3, #12
    69d6:	005a      	lsls	r2, r3, #1
    69d8:	0fdb      	lsrs	r3, r3, #31
    69da:	4650      	mov	r0, sl
    69dc:	0b24      	lsrs	r4, r4, #12
    69de:	0d52      	lsrs	r2, r2, #21
    69e0:	4698      	mov	r8, r3
    69e2:	d100      	bne.n	69e6 <__aeabi_dmul+0x5e>
    69e4:	e076      	b.n	6ad4 <__aeabi_dmul+0x14c>
    69e6:	4b5f      	ldr	r3, [pc, #380]	; (6b64 <__aeabi_dmul+0x1dc>)
    69e8:	429a      	cmp	r2, r3
    69ea:	d06d      	beq.n	6ac8 <__aeabi_dmul+0x140>
    69ec:	2380      	movs	r3, #128	; 0x80
    69ee:	0f41      	lsrs	r1, r0, #29
    69f0:	041b      	lsls	r3, r3, #16
    69f2:	430b      	orrs	r3, r1
    69f4:	495c      	ldr	r1, [pc, #368]	; (6b68 <__aeabi_dmul+0x1e0>)
    69f6:	00e4      	lsls	r4, r4, #3
    69f8:	468c      	mov	ip, r1
    69fa:	431c      	orrs	r4, r3
    69fc:	00c3      	lsls	r3, r0, #3
    69fe:	2000      	movs	r0, #0
    6a00:	4462      	add	r2, ip
    6a02:	4641      	mov	r1, r8
    6a04:	18b6      	adds	r6, r6, r2
    6a06:	4069      	eors	r1, r5
    6a08:	1c72      	adds	r2, r6, #1
    6a0a:	9101      	str	r1, [sp, #4]
    6a0c:	4694      	mov	ip, r2
    6a0e:	4307      	orrs	r7, r0
    6a10:	2f0f      	cmp	r7, #15
    6a12:	d900      	bls.n	6a16 <__aeabi_dmul+0x8e>
    6a14:	e0b0      	b.n	6b78 <__aeabi_dmul+0x1f0>
    6a16:	4a55      	ldr	r2, [pc, #340]	; (6b6c <__aeabi_dmul+0x1e4>)
    6a18:	00bf      	lsls	r7, r7, #2
    6a1a:	59d2      	ldr	r2, [r2, r7]
    6a1c:	4697      	mov	pc, r2
    6a1e:	465b      	mov	r3, fp
    6a20:	4303      	orrs	r3, r0
    6a22:	4699      	mov	r9, r3
    6a24:	d000      	beq.n	6a28 <__aeabi_dmul+0xa0>
    6a26:	e087      	b.n	6b38 <__aeabi_dmul+0x1b0>
    6a28:	2300      	movs	r3, #0
    6a2a:	469b      	mov	fp, r3
    6a2c:	3302      	adds	r3, #2
    6a2e:	2708      	movs	r7, #8
    6a30:	9302      	str	r3, [sp, #8]
    6a32:	e7ce      	b.n	69d2 <__aeabi_dmul+0x4a>
    6a34:	4642      	mov	r2, r8
    6a36:	9201      	str	r2, [sp, #4]
    6a38:	2802      	cmp	r0, #2
    6a3a:	d067      	beq.n	6b0c <__aeabi_dmul+0x184>
    6a3c:	2803      	cmp	r0, #3
    6a3e:	d100      	bne.n	6a42 <__aeabi_dmul+0xba>
    6a40:	e20e      	b.n	6e60 <__aeabi_dmul+0x4d8>
    6a42:	2801      	cmp	r0, #1
    6a44:	d000      	beq.n	6a48 <__aeabi_dmul+0xc0>
    6a46:	e162      	b.n	6d0e <__aeabi_dmul+0x386>
    6a48:	2300      	movs	r3, #0
    6a4a:	2400      	movs	r4, #0
    6a4c:	2200      	movs	r2, #0
    6a4e:	4699      	mov	r9, r3
    6a50:	9901      	ldr	r1, [sp, #4]
    6a52:	4001      	ands	r1, r0
    6a54:	b2cd      	uxtb	r5, r1
    6a56:	2100      	movs	r1, #0
    6a58:	0312      	lsls	r2, r2, #12
    6a5a:	0d0b      	lsrs	r3, r1, #20
    6a5c:	0b12      	lsrs	r2, r2, #12
    6a5e:	051b      	lsls	r3, r3, #20
    6a60:	4313      	orrs	r3, r2
    6a62:	4a43      	ldr	r2, [pc, #268]	; (6b70 <__aeabi_dmul+0x1e8>)
    6a64:	0524      	lsls	r4, r4, #20
    6a66:	4013      	ands	r3, r2
    6a68:	431c      	orrs	r4, r3
    6a6a:	0064      	lsls	r4, r4, #1
    6a6c:	07ed      	lsls	r5, r5, #31
    6a6e:	0864      	lsrs	r4, r4, #1
    6a70:	432c      	orrs	r4, r5
    6a72:	4648      	mov	r0, r9
    6a74:	0021      	movs	r1, r4
    6a76:	b007      	add	sp, #28
    6a78:	bc3c      	pop	{r2, r3, r4, r5}
    6a7a:	4690      	mov	r8, r2
    6a7c:	4699      	mov	r9, r3
    6a7e:	46a2      	mov	sl, r4
    6a80:	46ab      	mov	fp, r5
    6a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a84:	4303      	orrs	r3, r0
    6a86:	4699      	mov	r9, r3
    6a88:	d04f      	beq.n	6b2a <__aeabi_dmul+0x1a2>
    6a8a:	465b      	mov	r3, fp
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d100      	bne.n	6a92 <__aeabi_dmul+0x10a>
    6a90:	e189      	b.n	6da6 <__aeabi_dmul+0x41e>
    6a92:	4658      	mov	r0, fp
    6a94:	f000 fe98 	bl	77c8 <__clzsi2>
    6a98:	0003      	movs	r3, r0
    6a9a:	3b0b      	subs	r3, #11
    6a9c:	2b1c      	cmp	r3, #28
    6a9e:	dd00      	ble.n	6aa2 <__aeabi_dmul+0x11a>
    6aa0:	e17a      	b.n	6d98 <__aeabi_dmul+0x410>
    6aa2:	221d      	movs	r2, #29
    6aa4:	1ad3      	subs	r3, r2, r3
    6aa6:	003a      	movs	r2, r7
    6aa8:	0001      	movs	r1, r0
    6aaa:	465c      	mov	r4, fp
    6aac:	40da      	lsrs	r2, r3
    6aae:	3908      	subs	r1, #8
    6ab0:	408c      	lsls	r4, r1
    6ab2:	0013      	movs	r3, r2
    6ab4:	408f      	lsls	r7, r1
    6ab6:	4323      	orrs	r3, r4
    6ab8:	469b      	mov	fp, r3
    6aba:	46b9      	mov	r9, r7
    6abc:	2300      	movs	r3, #0
    6abe:	4e2d      	ldr	r6, [pc, #180]	; (6b74 <__aeabi_dmul+0x1ec>)
    6ac0:	2700      	movs	r7, #0
    6ac2:	1a36      	subs	r6, r6, r0
    6ac4:	9302      	str	r3, [sp, #8]
    6ac6:	e784      	b.n	69d2 <__aeabi_dmul+0x4a>
    6ac8:	4653      	mov	r3, sl
    6aca:	4323      	orrs	r3, r4
    6acc:	d12a      	bne.n	6b24 <__aeabi_dmul+0x19c>
    6ace:	2400      	movs	r4, #0
    6ad0:	2002      	movs	r0, #2
    6ad2:	e796      	b.n	6a02 <__aeabi_dmul+0x7a>
    6ad4:	4653      	mov	r3, sl
    6ad6:	4323      	orrs	r3, r4
    6ad8:	d020      	beq.n	6b1c <__aeabi_dmul+0x194>
    6ada:	2c00      	cmp	r4, #0
    6adc:	d100      	bne.n	6ae0 <__aeabi_dmul+0x158>
    6ade:	e157      	b.n	6d90 <__aeabi_dmul+0x408>
    6ae0:	0020      	movs	r0, r4
    6ae2:	f000 fe71 	bl	77c8 <__clzsi2>
    6ae6:	0003      	movs	r3, r0
    6ae8:	3b0b      	subs	r3, #11
    6aea:	2b1c      	cmp	r3, #28
    6aec:	dd00      	ble.n	6af0 <__aeabi_dmul+0x168>
    6aee:	e149      	b.n	6d84 <__aeabi_dmul+0x3fc>
    6af0:	211d      	movs	r1, #29
    6af2:	1acb      	subs	r3, r1, r3
    6af4:	4651      	mov	r1, sl
    6af6:	0002      	movs	r2, r0
    6af8:	40d9      	lsrs	r1, r3
    6afa:	4653      	mov	r3, sl
    6afc:	3a08      	subs	r2, #8
    6afe:	4094      	lsls	r4, r2
    6b00:	4093      	lsls	r3, r2
    6b02:	430c      	orrs	r4, r1
    6b04:	4a1b      	ldr	r2, [pc, #108]	; (6b74 <__aeabi_dmul+0x1ec>)
    6b06:	1a12      	subs	r2, r2, r0
    6b08:	2000      	movs	r0, #0
    6b0a:	e77a      	b.n	6a02 <__aeabi_dmul+0x7a>
    6b0c:	2501      	movs	r5, #1
    6b0e:	9b01      	ldr	r3, [sp, #4]
    6b10:	4c14      	ldr	r4, [pc, #80]	; (6b64 <__aeabi_dmul+0x1dc>)
    6b12:	401d      	ands	r5, r3
    6b14:	2300      	movs	r3, #0
    6b16:	2200      	movs	r2, #0
    6b18:	4699      	mov	r9, r3
    6b1a:	e79c      	b.n	6a56 <__aeabi_dmul+0xce>
    6b1c:	2400      	movs	r4, #0
    6b1e:	2200      	movs	r2, #0
    6b20:	2001      	movs	r0, #1
    6b22:	e76e      	b.n	6a02 <__aeabi_dmul+0x7a>
    6b24:	4653      	mov	r3, sl
    6b26:	2003      	movs	r0, #3
    6b28:	e76b      	b.n	6a02 <__aeabi_dmul+0x7a>
    6b2a:	2300      	movs	r3, #0
    6b2c:	469b      	mov	fp, r3
    6b2e:	3301      	adds	r3, #1
    6b30:	2704      	movs	r7, #4
    6b32:	2600      	movs	r6, #0
    6b34:	9302      	str	r3, [sp, #8]
    6b36:	e74c      	b.n	69d2 <__aeabi_dmul+0x4a>
    6b38:	2303      	movs	r3, #3
    6b3a:	4681      	mov	r9, r0
    6b3c:	270c      	movs	r7, #12
    6b3e:	9302      	str	r3, [sp, #8]
    6b40:	e747      	b.n	69d2 <__aeabi_dmul+0x4a>
    6b42:	2280      	movs	r2, #128	; 0x80
    6b44:	2300      	movs	r3, #0
    6b46:	2500      	movs	r5, #0
    6b48:	0312      	lsls	r2, r2, #12
    6b4a:	4699      	mov	r9, r3
    6b4c:	4c05      	ldr	r4, [pc, #20]	; (6b64 <__aeabi_dmul+0x1dc>)
    6b4e:	e782      	b.n	6a56 <__aeabi_dmul+0xce>
    6b50:	465c      	mov	r4, fp
    6b52:	464b      	mov	r3, r9
    6b54:	9802      	ldr	r0, [sp, #8]
    6b56:	e76f      	b.n	6a38 <__aeabi_dmul+0xb0>
    6b58:	465c      	mov	r4, fp
    6b5a:	464b      	mov	r3, r9
    6b5c:	9501      	str	r5, [sp, #4]
    6b5e:	9802      	ldr	r0, [sp, #8]
    6b60:	e76a      	b.n	6a38 <__aeabi_dmul+0xb0>
    6b62:	46c0      	nop			; (mov r8, r8)
    6b64:	000007ff 	.word	0x000007ff
    6b68:	fffffc01 	.word	0xfffffc01
    6b6c:	000084a4 	.word	0x000084a4
    6b70:	800fffff 	.word	0x800fffff
    6b74:	fffffc0d 	.word	0xfffffc0d
    6b78:	464a      	mov	r2, r9
    6b7a:	4649      	mov	r1, r9
    6b7c:	0c17      	lsrs	r7, r2, #16
    6b7e:	0c1a      	lsrs	r2, r3, #16
    6b80:	041b      	lsls	r3, r3, #16
    6b82:	0c1b      	lsrs	r3, r3, #16
    6b84:	0408      	lsls	r0, r1, #16
    6b86:	0019      	movs	r1, r3
    6b88:	0c00      	lsrs	r0, r0, #16
    6b8a:	4341      	muls	r1, r0
    6b8c:	0015      	movs	r5, r2
    6b8e:	4688      	mov	r8, r1
    6b90:	0019      	movs	r1, r3
    6b92:	437d      	muls	r5, r7
    6b94:	4379      	muls	r1, r7
    6b96:	9503      	str	r5, [sp, #12]
    6b98:	4689      	mov	r9, r1
    6b9a:	0029      	movs	r1, r5
    6b9c:	0015      	movs	r5, r2
    6b9e:	4345      	muls	r5, r0
    6ba0:	444d      	add	r5, r9
    6ba2:	9502      	str	r5, [sp, #8]
    6ba4:	4645      	mov	r5, r8
    6ba6:	0c2d      	lsrs	r5, r5, #16
    6ba8:	46aa      	mov	sl, r5
    6baa:	9d02      	ldr	r5, [sp, #8]
    6bac:	4455      	add	r5, sl
    6bae:	45a9      	cmp	r9, r5
    6bb0:	d906      	bls.n	6bc0 <__aeabi_dmul+0x238>
    6bb2:	468a      	mov	sl, r1
    6bb4:	2180      	movs	r1, #128	; 0x80
    6bb6:	0249      	lsls	r1, r1, #9
    6bb8:	4689      	mov	r9, r1
    6bba:	44ca      	add	sl, r9
    6bbc:	4651      	mov	r1, sl
    6bbe:	9103      	str	r1, [sp, #12]
    6bc0:	0c29      	lsrs	r1, r5, #16
    6bc2:	9104      	str	r1, [sp, #16]
    6bc4:	4641      	mov	r1, r8
    6bc6:	0409      	lsls	r1, r1, #16
    6bc8:	042d      	lsls	r5, r5, #16
    6bca:	0c09      	lsrs	r1, r1, #16
    6bcc:	4688      	mov	r8, r1
    6bce:	0029      	movs	r1, r5
    6bd0:	0c25      	lsrs	r5, r4, #16
    6bd2:	0424      	lsls	r4, r4, #16
    6bd4:	4441      	add	r1, r8
    6bd6:	0c24      	lsrs	r4, r4, #16
    6bd8:	9105      	str	r1, [sp, #20]
    6bda:	0021      	movs	r1, r4
    6bdc:	4341      	muls	r1, r0
    6bde:	4688      	mov	r8, r1
    6be0:	0021      	movs	r1, r4
    6be2:	4379      	muls	r1, r7
    6be4:	468a      	mov	sl, r1
    6be6:	4368      	muls	r0, r5
    6be8:	4641      	mov	r1, r8
    6bea:	4450      	add	r0, sl
    6bec:	4681      	mov	r9, r0
    6bee:	0c08      	lsrs	r0, r1, #16
    6bf0:	4448      	add	r0, r9
    6bf2:	436f      	muls	r7, r5
    6bf4:	4582      	cmp	sl, r0
    6bf6:	d903      	bls.n	6c00 <__aeabi_dmul+0x278>
    6bf8:	2180      	movs	r1, #128	; 0x80
    6bfa:	0249      	lsls	r1, r1, #9
    6bfc:	4689      	mov	r9, r1
    6bfe:	444f      	add	r7, r9
    6c00:	0c01      	lsrs	r1, r0, #16
    6c02:	4689      	mov	r9, r1
    6c04:	0039      	movs	r1, r7
    6c06:	4449      	add	r1, r9
    6c08:	9102      	str	r1, [sp, #8]
    6c0a:	4641      	mov	r1, r8
    6c0c:	040f      	lsls	r7, r1, #16
    6c0e:	9904      	ldr	r1, [sp, #16]
    6c10:	0c3f      	lsrs	r7, r7, #16
    6c12:	4688      	mov	r8, r1
    6c14:	0400      	lsls	r0, r0, #16
    6c16:	19c0      	adds	r0, r0, r7
    6c18:	4480      	add	r8, r0
    6c1a:	4641      	mov	r1, r8
    6c1c:	9104      	str	r1, [sp, #16]
    6c1e:	4659      	mov	r1, fp
    6c20:	0c0f      	lsrs	r7, r1, #16
    6c22:	0409      	lsls	r1, r1, #16
    6c24:	0c09      	lsrs	r1, r1, #16
    6c26:	4688      	mov	r8, r1
    6c28:	4359      	muls	r1, r3
    6c2a:	468a      	mov	sl, r1
    6c2c:	0039      	movs	r1, r7
    6c2e:	4351      	muls	r1, r2
    6c30:	4689      	mov	r9, r1
    6c32:	4641      	mov	r1, r8
    6c34:	434a      	muls	r2, r1
    6c36:	4651      	mov	r1, sl
    6c38:	0c09      	lsrs	r1, r1, #16
    6c3a:	468b      	mov	fp, r1
    6c3c:	437b      	muls	r3, r7
    6c3e:	18d2      	adds	r2, r2, r3
    6c40:	445a      	add	r2, fp
    6c42:	4293      	cmp	r3, r2
    6c44:	d903      	bls.n	6c4e <__aeabi_dmul+0x2c6>
    6c46:	2380      	movs	r3, #128	; 0x80
    6c48:	025b      	lsls	r3, r3, #9
    6c4a:	469b      	mov	fp, r3
    6c4c:	44d9      	add	r9, fp
    6c4e:	4651      	mov	r1, sl
    6c50:	0409      	lsls	r1, r1, #16
    6c52:	0c09      	lsrs	r1, r1, #16
    6c54:	468a      	mov	sl, r1
    6c56:	4641      	mov	r1, r8
    6c58:	4361      	muls	r1, r4
    6c5a:	437c      	muls	r4, r7
    6c5c:	0c13      	lsrs	r3, r2, #16
    6c5e:	0412      	lsls	r2, r2, #16
    6c60:	444b      	add	r3, r9
    6c62:	4452      	add	r2, sl
    6c64:	46a1      	mov	r9, r4
    6c66:	468a      	mov	sl, r1
    6c68:	003c      	movs	r4, r7
    6c6a:	4641      	mov	r1, r8
    6c6c:	436c      	muls	r4, r5
    6c6e:	434d      	muls	r5, r1
    6c70:	4651      	mov	r1, sl
    6c72:	444d      	add	r5, r9
    6c74:	0c0f      	lsrs	r7, r1, #16
    6c76:	197d      	adds	r5, r7, r5
    6c78:	45a9      	cmp	r9, r5
    6c7a:	d903      	bls.n	6c84 <__aeabi_dmul+0x2fc>
    6c7c:	2180      	movs	r1, #128	; 0x80
    6c7e:	0249      	lsls	r1, r1, #9
    6c80:	4688      	mov	r8, r1
    6c82:	4444      	add	r4, r8
    6c84:	9f04      	ldr	r7, [sp, #16]
    6c86:	9903      	ldr	r1, [sp, #12]
    6c88:	46b8      	mov	r8, r7
    6c8a:	4441      	add	r1, r8
    6c8c:	468b      	mov	fp, r1
    6c8e:	4583      	cmp	fp, r0
    6c90:	4180      	sbcs	r0, r0
    6c92:	4241      	negs	r1, r0
    6c94:	4688      	mov	r8, r1
    6c96:	4651      	mov	r1, sl
    6c98:	0408      	lsls	r0, r1, #16
    6c9a:	042f      	lsls	r7, r5, #16
    6c9c:	0c00      	lsrs	r0, r0, #16
    6c9e:	183f      	adds	r7, r7, r0
    6ca0:	4658      	mov	r0, fp
    6ca2:	9902      	ldr	r1, [sp, #8]
    6ca4:	1810      	adds	r0, r2, r0
    6ca6:	4689      	mov	r9, r1
    6ca8:	4290      	cmp	r0, r2
    6caa:	4192      	sbcs	r2, r2
    6cac:	444f      	add	r7, r9
    6cae:	46ba      	mov	sl, r7
    6cb0:	4252      	negs	r2, r2
    6cb2:	4699      	mov	r9, r3
    6cb4:	4693      	mov	fp, r2
    6cb6:	44c2      	add	sl, r8
    6cb8:	44d1      	add	r9, sl
    6cba:	44cb      	add	fp, r9
    6cbc:	428f      	cmp	r7, r1
    6cbe:	41bf      	sbcs	r7, r7
    6cc0:	45c2      	cmp	sl, r8
    6cc2:	4189      	sbcs	r1, r1
    6cc4:	4599      	cmp	r9, r3
    6cc6:	419b      	sbcs	r3, r3
    6cc8:	4593      	cmp	fp, r2
    6cca:	4192      	sbcs	r2, r2
    6ccc:	427f      	negs	r7, r7
    6cce:	4249      	negs	r1, r1
    6cd0:	0c2d      	lsrs	r5, r5, #16
    6cd2:	4252      	negs	r2, r2
    6cd4:	430f      	orrs	r7, r1
    6cd6:	425b      	negs	r3, r3
    6cd8:	4313      	orrs	r3, r2
    6cda:	197f      	adds	r7, r7, r5
    6cdc:	18ff      	adds	r7, r7, r3
    6cde:	465b      	mov	r3, fp
    6ce0:	193c      	adds	r4, r7, r4
    6ce2:	0ddb      	lsrs	r3, r3, #23
    6ce4:	9a05      	ldr	r2, [sp, #20]
    6ce6:	0264      	lsls	r4, r4, #9
    6ce8:	431c      	orrs	r4, r3
    6cea:	0243      	lsls	r3, r0, #9
    6cec:	4313      	orrs	r3, r2
    6cee:	1e5d      	subs	r5, r3, #1
    6cf0:	41ab      	sbcs	r3, r5
    6cf2:	465a      	mov	r2, fp
    6cf4:	0dc0      	lsrs	r0, r0, #23
    6cf6:	4303      	orrs	r3, r0
    6cf8:	0252      	lsls	r2, r2, #9
    6cfa:	4313      	orrs	r3, r2
    6cfc:	01e2      	lsls	r2, r4, #7
    6cfe:	d556      	bpl.n	6dae <__aeabi_dmul+0x426>
    6d00:	2001      	movs	r0, #1
    6d02:	085a      	lsrs	r2, r3, #1
    6d04:	4003      	ands	r3, r0
    6d06:	4313      	orrs	r3, r2
    6d08:	07e2      	lsls	r2, r4, #31
    6d0a:	4313      	orrs	r3, r2
    6d0c:	0864      	lsrs	r4, r4, #1
    6d0e:	485a      	ldr	r0, [pc, #360]	; (6e78 <__aeabi_dmul+0x4f0>)
    6d10:	4460      	add	r0, ip
    6d12:	2800      	cmp	r0, #0
    6d14:	dd4d      	ble.n	6db2 <__aeabi_dmul+0x42a>
    6d16:	075a      	lsls	r2, r3, #29
    6d18:	d009      	beq.n	6d2e <__aeabi_dmul+0x3a6>
    6d1a:	220f      	movs	r2, #15
    6d1c:	401a      	ands	r2, r3
    6d1e:	2a04      	cmp	r2, #4
    6d20:	d005      	beq.n	6d2e <__aeabi_dmul+0x3a6>
    6d22:	1d1a      	adds	r2, r3, #4
    6d24:	429a      	cmp	r2, r3
    6d26:	419b      	sbcs	r3, r3
    6d28:	425b      	negs	r3, r3
    6d2a:	18e4      	adds	r4, r4, r3
    6d2c:	0013      	movs	r3, r2
    6d2e:	01e2      	lsls	r2, r4, #7
    6d30:	d504      	bpl.n	6d3c <__aeabi_dmul+0x3b4>
    6d32:	2080      	movs	r0, #128	; 0x80
    6d34:	4a51      	ldr	r2, [pc, #324]	; (6e7c <__aeabi_dmul+0x4f4>)
    6d36:	00c0      	lsls	r0, r0, #3
    6d38:	4014      	ands	r4, r2
    6d3a:	4460      	add	r0, ip
    6d3c:	4a50      	ldr	r2, [pc, #320]	; (6e80 <__aeabi_dmul+0x4f8>)
    6d3e:	4290      	cmp	r0, r2
    6d40:	dd00      	ble.n	6d44 <__aeabi_dmul+0x3bc>
    6d42:	e6e3      	b.n	6b0c <__aeabi_dmul+0x184>
    6d44:	2501      	movs	r5, #1
    6d46:	08db      	lsrs	r3, r3, #3
    6d48:	0762      	lsls	r2, r4, #29
    6d4a:	431a      	orrs	r2, r3
    6d4c:	0264      	lsls	r4, r4, #9
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	4691      	mov	r9, r2
    6d52:	0b22      	lsrs	r2, r4, #12
    6d54:	0544      	lsls	r4, r0, #21
    6d56:	0d64      	lsrs	r4, r4, #21
    6d58:	401d      	ands	r5, r3
    6d5a:	e67c      	b.n	6a56 <__aeabi_dmul+0xce>
    6d5c:	2280      	movs	r2, #128	; 0x80
    6d5e:	4659      	mov	r1, fp
    6d60:	0312      	lsls	r2, r2, #12
    6d62:	4211      	tst	r1, r2
    6d64:	d008      	beq.n	6d78 <__aeabi_dmul+0x3f0>
    6d66:	4214      	tst	r4, r2
    6d68:	d106      	bne.n	6d78 <__aeabi_dmul+0x3f0>
    6d6a:	4322      	orrs	r2, r4
    6d6c:	0312      	lsls	r2, r2, #12
    6d6e:	0b12      	lsrs	r2, r2, #12
    6d70:	4645      	mov	r5, r8
    6d72:	4699      	mov	r9, r3
    6d74:	4c43      	ldr	r4, [pc, #268]	; (6e84 <__aeabi_dmul+0x4fc>)
    6d76:	e66e      	b.n	6a56 <__aeabi_dmul+0xce>
    6d78:	465b      	mov	r3, fp
    6d7a:	431a      	orrs	r2, r3
    6d7c:	0312      	lsls	r2, r2, #12
    6d7e:	0b12      	lsrs	r2, r2, #12
    6d80:	4c40      	ldr	r4, [pc, #256]	; (6e84 <__aeabi_dmul+0x4fc>)
    6d82:	e668      	b.n	6a56 <__aeabi_dmul+0xce>
    6d84:	0003      	movs	r3, r0
    6d86:	4654      	mov	r4, sl
    6d88:	3b28      	subs	r3, #40	; 0x28
    6d8a:	409c      	lsls	r4, r3
    6d8c:	2300      	movs	r3, #0
    6d8e:	e6b9      	b.n	6b04 <__aeabi_dmul+0x17c>
    6d90:	f000 fd1a 	bl	77c8 <__clzsi2>
    6d94:	3020      	adds	r0, #32
    6d96:	e6a6      	b.n	6ae6 <__aeabi_dmul+0x15e>
    6d98:	0003      	movs	r3, r0
    6d9a:	3b28      	subs	r3, #40	; 0x28
    6d9c:	409f      	lsls	r7, r3
    6d9e:	2300      	movs	r3, #0
    6da0:	46bb      	mov	fp, r7
    6da2:	4699      	mov	r9, r3
    6da4:	e68a      	b.n	6abc <__aeabi_dmul+0x134>
    6da6:	f000 fd0f 	bl	77c8 <__clzsi2>
    6daa:	3020      	adds	r0, #32
    6dac:	e674      	b.n	6a98 <__aeabi_dmul+0x110>
    6dae:	46b4      	mov	ip, r6
    6db0:	e7ad      	b.n	6d0e <__aeabi_dmul+0x386>
    6db2:	2501      	movs	r5, #1
    6db4:	1a2a      	subs	r2, r5, r0
    6db6:	2a38      	cmp	r2, #56	; 0x38
    6db8:	dd06      	ble.n	6dc8 <__aeabi_dmul+0x440>
    6dba:	9b01      	ldr	r3, [sp, #4]
    6dbc:	2400      	movs	r4, #0
    6dbe:	401d      	ands	r5, r3
    6dc0:	2300      	movs	r3, #0
    6dc2:	2200      	movs	r2, #0
    6dc4:	4699      	mov	r9, r3
    6dc6:	e646      	b.n	6a56 <__aeabi_dmul+0xce>
    6dc8:	2a1f      	cmp	r2, #31
    6dca:	dc21      	bgt.n	6e10 <__aeabi_dmul+0x488>
    6dcc:	2520      	movs	r5, #32
    6dce:	0020      	movs	r0, r4
    6dd0:	1aad      	subs	r5, r5, r2
    6dd2:	001e      	movs	r6, r3
    6dd4:	40ab      	lsls	r3, r5
    6dd6:	40a8      	lsls	r0, r5
    6dd8:	40d6      	lsrs	r6, r2
    6dda:	1e5d      	subs	r5, r3, #1
    6ddc:	41ab      	sbcs	r3, r5
    6dde:	4330      	orrs	r0, r6
    6de0:	4318      	orrs	r0, r3
    6de2:	40d4      	lsrs	r4, r2
    6de4:	0743      	lsls	r3, r0, #29
    6de6:	d009      	beq.n	6dfc <__aeabi_dmul+0x474>
    6de8:	230f      	movs	r3, #15
    6dea:	4003      	ands	r3, r0
    6dec:	2b04      	cmp	r3, #4
    6dee:	d005      	beq.n	6dfc <__aeabi_dmul+0x474>
    6df0:	0003      	movs	r3, r0
    6df2:	1d18      	adds	r0, r3, #4
    6df4:	4298      	cmp	r0, r3
    6df6:	419b      	sbcs	r3, r3
    6df8:	425b      	negs	r3, r3
    6dfa:	18e4      	adds	r4, r4, r3
    6dfc:	0223      	lsls	r3, r4, #8
    6dfe:	d521      	bpl.n	6e44 <__aeabi_dmul+0x4bc>
    6e00:	2501      	movs	r5, #1
    6e02:	9b01      	ldr	r3, [sp, #4]
    6e04:	2401      	movs	r4, #1
    6e06:	401d      	ands	r5, r3
    6e08:	2300      	movs	r3, #0
    6e0a:	2200      	movs	r2, #0
    6e0c:	4699      	mov	r9, r3
    6e0e:	e622      	b.n	6a56 <__aeabi_dmul+0xce>
    6e10:	251f      	movs	r5, #31
    6e12:	0021      	movs	r1, r4
    6e14:	426d      	negs	r5, r5
    6e16:	1a28      	subs	r0, r5, r0
    6e18:	40c1      	lsrs	r1, r0
    6e1a:	0008      	movs	r0, r1
    6e1c:	2a20      	cmp	r2, #32
    6e1e:	d01d      	beq.n	6e5c <__aeabi_dmul+0x4d4>
    6e20:	355f      	adds	r5, #95	; 0x5f
    6e22:	1aaa      	subs	r2, r5, r2
    6e24:	4094      	lsls	r4, r2
    6e26:	4323      	orrs	r3, r4
    6e28:	1e5c      	subs	r4, r3, #1
    6e2a:	41a3      	sbcs	r3, r4
    6e2c:	2507      	movs	r5, #7
    6e2e:	4303      	orrs	r3, r0
    6e30:	401d      	ands	r5, r3
    6e32:	2200      	movs	r2, #0
    6e34:	2d00      	cmp	r5, #0
    6e36:	d009      	beq.n	6e4c <__aeabi_dmul+0x4c4>
    6e38:	220f      	movs	r2, #15
    6e3a:	2400      	movs	r4, #0
    6e3c:	401a      	ands	r2, r3
    6e3e:	0018      	movs	r0, r3
    6e40:	2a04      	cmp	r2, #4
    6e42:	d1d6      	bne.n	6df2 <__aeabi_dmul+0x46a>
    6e44:	0003      	movs	r3, r0
    6e46:	0765      	lsls	r5, r4, #29
    6e48:	0264      	lsls	r4, r4, #9
    6e4a:	0b22      	lsrs	r2, r4, #12
    6e4c:	08db      	lsrs	r3, r3, #3
    6e4e:	432b      	orrs	r3, r5
    6e50:	2501      	movs	r5, #1
    6e52:	4699      	mov	r9, r3
    6e54:	9b01      	ldr	r3, [sp, #4]
    6e56:	2400      	movs	r4, #0
    6e58:	401d      	ands	r5, r3
    6e5a:	e5fc      	b.n	6a56 <__aeabi_dmul+0xce>
    6e5c:	2400      	movs	r4, #0
    6e5e:	e7e2      	b.n	6e26 <__aeabi_dmul+0x49e>
    6e60:	2280      	movs	r2, #128	; 0x80
    6e62:	2501      	movs	r5, #1
    6e64:	0312      	lsls	r2, r2, #12
    6e66:	4322      	orrs	r2, r4
    6e68:	9901      	ldr	r1, [sp, #4]
    6e6a:	0312      	lsls	r2, r2, #12
    6e6c:	0b12      	lsrs	r2, r2, #12
    6e6e:	400d      	ands	r5, r1
    6e70:	4699      	mov	r9, r3
    6e72:	4c04      	ldr	r4, [pc, #16]	; (6e84 <__aeabi_dmul+0x4fc>)
    6e74:	e5ef      	b.n	6a56 <__aeabi_dmul+0xce>
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	000003ff 	.word	0x000003ff
    6e7c:	feffffff 	.word	0xfeffffff
    6e80:	000007fe 	.word	0x000007fe
    6e84:	000007ff 	.word	0x000007ff

00006e88 <__aeabi_dsub>:
    6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e8a:	4646      	mov	r6, r8
    6e8c:	46d6      	mov	lr, sl
    6e8e:	464f      	mov	r7, r9
    6e90:	030c      	lsls	r4, r1, #12
    6e92:	b5c0      	push	{r6, r7, lr}
    6e94:	0fcd      	lsrs	r5, r1, #31
    6e96:	004e      	lsls	r6, r1, #1
    6e98:	0a61      	lsrs	r1, r4, #9
    6e9a:	0f44      	lsrs	r4, r0, #29
    6e9c:	430c      	orrs	r4, r1
    6e9e:	00c1      	lsls	r1, r0, #3
    6ea0:	0058      	lsls	r0, r3, #1
    6ea2:	0d40      	lsrs	r0, r0, #21
    6ea4:	4684      	mov	ip, r0
    6ea6:	468a      	mov	sl, r1
    6ea8:	000f      	movs	r7, r1
    6eaa:	0319      	lsls	r1, r3, #12
    6eac:	0f50      	lsrs	r0, r2, #29
    6eae:	0a49      	lsrs	r1, r1, #9
    6eb0:	4301      	orrs	r1, r0
    6eb2:	48c6      	ldr	r0, [pc, #792]	; (71cc <__aeabi_dsub+0x344>)
    6eb4:	0d76      	lsrs	r6, r6, #21
    6eb6:	46a8      	mov	r8, r5
    6eb8:	0fdb      	lsrs	r3, r3, #31
    6eba:	00d2      	lsls	r2, r2, #3
    6ebc:	4584      	cmp	ip, r0
    6ebe:	d100      	bne.n	6ec2 <__aeabi_dsub+0x3a>
    6ec0:	e0d8      	b.n	7074 <__aeabi_dsub+0x1ec>
    6ec2:	2001      	movs	r0, #1
    6ec4:	4043      	eors	r3, r0
    6ec6:	42ab      	cmp	r3, r5
    6ec8:	d100      	bne.n	6ecc <__aeabi_dsub+0x44>
    6eca:	e0a6      	b.n	701a <__aeabi_dsub+0x192>
    6ecc:	4660      	mov	r0, ip
    6ece:	1a35      	subs	r5, r6, r0
    6ed0:	2d00      	cmp	r5, #0
    6ed2:	dc00      	bgt.n	6ed6 <__aeabi_dsub+0x4e>
    6ed4:	e105      	b.n	70e2 <__aeabi_dsub+0x25a>
    6ed6:	2800      	cmp	r0, #0
    6ed8:	d110      	bne.n	6efc <__aeabi_dsub+0x74>
    6eda:	000b      	movs	r3, r1
    6edc:	4313      	orrs	r3, r2
    6ede:	d100      	bne.n	6ee2 <__aeabi_dsub+0x5a>
    6ee0:	e0d7      	b.n	7092 <__aeabi_dsub+0x20a>
    6ee2:	1e6b      	subs	r3, r5, #1
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d000      	beq.n	6eea <__aeabi_dsub+0x62>
    6ee8:	e14b      	b.n	7182 <__aeabi_dsub+0x2fa>
    6eea:	4653      	mov	r3, sl
    6eec:	1a9f      	subs	r7, r3, r2
    6eee:	45ba      	cmp	sl, r7
    6ef0:	4180      	sbcs	r0, r0
    6ef2:	1a64      	subs	r4, r4, r1
    6ef4:	4240      	negs	r0, r0
    6ef6:	1a24      	subs	r4, r4, r0
    6ef8:	2601      	movs	r6, #1
    6efa:	e01e      	b.n	6f3a <__aeabi_dsub+0xb2>
    6efc:	4bb3      	ldr	r3, [pc, #716]	; (71cc <__aeabi_dsub+0x344>)
    6efe:	429e      	cmp	r6, r3
    6f00:	d048      	beq.n	6f94 <__aeabi_dsub+0x10c>
    6f02:	2380      	movs	r3, #128	; 0x80
    6f04:	041b      	lsls	r3, r3, #16
    6f06:	4319      	orrs	r1, r3
    6f08:	2d38      	cmp	r5, #56	; 0x38
    6f0a:	dd00      	ble.n	6f0e <__aeabi_dsub+0x86>
    6f0c:	e119      	b.n	7142 <__aeabi_dsub+0x2ba>
    6f0e:	2d1f      	cmp	r5, #31
    6f10:	dd00      	ble.n	6f14 <__aeabi_dsub+0x8c>
    6f12:	e14c      	b.n	71ae <__aeabi_dsub+0x326>
    6f14:	2320      	movs	r3, #32
    6f16:	000f      	movs	r7, r1
    6f18:	1b5b      	subs	r3, r3, r5
    6f1a:	0010      	movs	r0, r2
    6f1c:	409a      	lsls	r2, r3
    6f1e:	409f      	lsls	r7, r3
    6f20:	40e8      	lsrs	r0, r5
    6f22:	1e53      	subs	r3, r2, #1
    6f24:	419a      	sbcs	r2, r3
    6f26:	40e9      	lsrs	r1, r5
    6f28:	4307      	orrs	r7, r0
    6f2a:	4317      	orrs	r7, r2
    6f2c:	4653      	mov	r3, sl
    6f2e:	1bdf      	subs	r7, r3, r7
    6f30:	1a61      	subs	r1, r4, r1
    6f32:	45ba      	cmp	sl, r7
    6f34:	41a4      	sbcs	r4, r4
    6f36:	4264      	negs	r4, r4
    6f38:	1b0c      	subs	r4, r1, r4
    6f3a:	0223      	lsls	r3, r4, #8
    6f3c:	d400      	bmi.n	6f40 <__aeabi_dsub+0xb8>
    6f3e:	e0c5      	b.n	70cc <__aeabi_dsub+0x244>
    6f40:	0264      	lsls	r4, r4, #9
    6f42:	0a65      	lsrs	r5, r4, #9
    6f44:	2d00      	cmp	r5, #0
    6f46:	d100      	bne.n	6f4a <__aeabi_dsub+0xc2>
    6f48:	e0f6      	b.n	7138 <__aeabi_dsub+0x2b0>
    6f4a:	0028      	movs	r0, r5
    6f4c:	f000 fc3c 	bl	77c8 <__clzsi2>
    6f50:	0003      	movs	r3, r0
    6f52:	3b08      	subs	r3, #8
    6f54:	2b1f      	cmp	r3, #31
    6f56:	dd00      	ble.n	6f5a <__aeabi_dsub+0xd2>
    6f58:	e0e9      	b.n	712e <__aeabi_dsub+0x2a6>
    6f5a:	2220      	movs	r2, #32
    6f5c:	003c      	movs	r4, r7
    6f5e:	1ad2      	subs	r2, r2, r3
    6f60:	409d      	lsls	r5, r3
    6f62:	40d4      	lsrs	r4, r2
    6f64:	409f      	lsls	r7, r3
    6f66:	4325      	orrs	r5, r4
    6f68:	429e      	cmp	r6, r3
    6f6a:	dd00      	ble.n	6f6e <__aeabi_dsub+0xe6>
    6f6c:	e0db      	b.n	7126 <__aeabi_dsub+0x29e>
    6f6e:	1b9e      	subs	r6, r3, r6
    6f70:	1c73      	adds	r3, r6, #1
    6f72:	2b1f      	cmp	r3, #31
    6f74:	dd00      	ble.n	6f78 <__aeabi_dsub+0xf0>
    6f76:	e10a      	b.n	718e <__aeabi_dsub+0x306>
    6f78:	2220      	movs	r2, #32
    6f7a:	0038      	movs	r0, r7
    6f7c:	1ad2      	subs	r2, r2, r3
    6f7e:	0029      	movs	r1, r5
    6f80:	4097      	lsls	r7, r2
    6f82:	002c      	movs	r4, r5
    6f84:	4091      	lsls	r1, r2
    6f86:	40d8      	lsrs	r0, r3
    6f88:	1e7a      	subs	r2, r7, #1
    6f8a:	4197      	sbcs	r7, r2
    6f8c:	40dc      	lsrs	r4, r3
    6f8e:	2600      	movs	r6, #0
    6f90:	4301      	orrs	r1, r0
    6f92:	430f      	orrs	r7, r1
    6f94:	077b      	lsls	r3, r7, #29
    6f96:	d009      	beq.n	6fac <__aeabi_dsub+0x124>
    6f98:	230f      	movs	r3, #15
    6f9a:	403b      	ands	r3, r7
    6f9c:	2b04      	cmp	r3, #4
    6f9e:	d005      	beq.n	6fac <__aeabi_dsub+0x124>
    6fa0:	1d3b      	adds	r3, r7, #4
    6fa2:	42bb      	cmp	r3, r7
    6fa4:	41bf      	sbcs	r7, r7
    6fa6:	427f      	negs	r7, r7
    6fa8:	19e4      	adds	r4, r4, r7
    6faa:	001f      	movs	r7, r3
    6fac:	0223      	lsls	r3, r4, #8
    6fae:	d525      	bpl.n	6ffc <__aeabi_dsub+0x174>
    6fb0:	4b86      	ldr	r3, [pc, #536]	; (71cc <__aeabi_dsub+0x344>)
    6fb2:	3601      	adds	r6, #1
    6fb4:	429e      	cmp	r6, r3
    6fb6:	d100      	bne.n	6fba <__aeabi_dsub+0x132>
    6fb8:	e0af      	b.n	711a <__aeabi_dsub+0x292>
    6fba:	4b85      	ldr	r3, [pc, #532]	; (71d0 <__aeabi_dsub+0x348>)
    6fbc:	2501      	movs	r5, #1
    6fbe:	401c      	ands	r4, r3
    6fc0:	4643      	mov	r3, r8
    6fc2:	0762      	lsls	r2, r4, #29
    6fc4:	08ff      	lsrs	r7, r7, #3
    6fc6:	0264      	lsls	r4, r4, #9
    6fc8:	0576      	lsls	r6, r6, #21
    6fca:	4317      	orrs	r7, r2
    6fcc:	0b24      	lsrs	r4, r4, #12
    6fce:	0d76      	lsrs	r6, r6, #21
    6fd0:	401d      	ands	r5, r3
    6fd2:	2100      	movs	r1, #0
    6fd4:	0324      	lsls	r4, r4, #12
    6fd6:	0b23      	lsrs	r3, r4, #12
    6fd8:	0d0c      	lsrs	r4, r1, #20
    6fda:	4a7e      	ldr	r2, [pc, #504]	; (71d4 <__aeabi_dsub+0x34c>)
    6fdc:	0524      	lsls	r4, r4, #20
    6fde:	431c      	orrs	r4, r3
    6fe0:	4014      	ands	r4, r2
    6fe2:	0533      	lsls	r3, r6, #20
    6fe4:	4323      	orrs	r3, r4
    6fe6:	005b      	lsls	r3, r3, #1
    6fe8:	07ed      	lsls	r5, r5, #31
    6fea:	085b      	lsrs	r3, r3, #1
    6fec:	432b      	orrs	r3, r5
    6fee:	0038      	movs	r0, r7
    6ff0:	0019      	movs	r1, r3
    6ff2:	bc1c      	pop	{r2, r3, r4}
    6ff4:	4690      	mov	r8, r2
    6ff6:	4699      	mov	r9, r3
    6ff8:	46a2      	mov	sl, r4
    6ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ffc:	2501      	movs	r5, #1
    6ffe:	4643      	mov	r3, r8
    7000:	0762      	lsls	r2, r4, #29
    7002:	08ff      	lsrs	r7, r7, #3
    7004:	4317      	orrs	r7, r2
    7006:	08e4      	lsrs	r4, r4, #3
    7008:	401d      	ands	r5, r3
    700a:	4b70      	ldr	r3, [pc, #448]	; (71cc <__aeabi_dsub+0x344>)
    700c:	429e      	cmp	r6, r3
    700e:	d036      	beq.n	707e <__aeabi_dsub+0x1f6>
    7010:	0324      	lsls	r4, r4, #12
    7012:	0576      	lsls	r6, r6, #21
    7014:	0b24      	lsrs	r4, r4, #12
    7016:	0d76      	lsrs	r6, r6, #21
    7018:	e7db      	b.n	6fd2 <__aeabi_dsub+0x14a>
    701a:	4663      	mov	r3, ip
    701c:	1af3      	subs	r3, r6, r3
    701e:	2b00      	cmp	r3, #0
    7020:	dc00      	bgt.n	7024 <__aeabi_dsub+0x19c>
    7022:	e094      	b.n	714e <__aeabi_dsub+0x2c6>
    7024:	4660      	mov	r0, ip
    7026:	2800      	cmp	r0, #0
    7028:	d035      	beq.n	7096 <__aeabi_dsub+0x20e>
    702a:	4868      	ldr	r0, [pc, #416]	; (71cc <__aeabi_dsub+0x344>)
    702c:	4286      	cmp	r6, r0
    702e:	d0b1      	beq.n	6f94 <__aeabi_dsub+0x10c>
    7030:	2780      	movs	r7, #128	; 0x80
    7032:	043f      	lsls	r7, r7, #16
    7034:	4339      	orrs	r1, r7
    7036:	2b38      	cmp	r3, #56	; 0x38
    7038:	dc00      	bgt.n	703c <__aeabi_dsub+0x1b4>
    703a:	e0fd      	b.n	7238 <__aeabi_dsub+0x3b0>
    703c:	430a      	orrs	r2, r1
    703e:	0017      	movs	r7, r2
    7040:	2100      	movs	r1, #0
    7042:	1e7a      	subs	r2, r7, #1
    7044:	4197      	sbcs	r7, r2
    7046:	4457      	add	r7, sl
    7048:	4557      	cmp	r7, sl
    704a:	4180      	sbcs	r0, r0
    704c:	1909      	adds	r1, r1, r4
    704e:	4244      	negs	r4, r0
    7050:	190c      	adds	r4, r1, r4
    7052:	0223      	lsls	r3, r4, #8
    7054:	d53a      	bpl.n	70cc <__aeabi_dsub+0x244>
    7056:	4b5d      	ldr	r3, [pc, #372]	; (71cc <__aeabi_dsub+0x344>)
    7058:	3601      	adds	r6, #1
    705a:	429e      	cmp	r6, r3
    705c:	d100      	bne.n	7060 <__aeabi_dsub+0x1d8>
    705e:	e14b      	b.n	72f8 <__aeabi_dsub+0x470>
    7060:	2201      	movs	r2, #1
    7062:	4b5b      	ldr	r3, [pc, #364]	; (71d0 <__aeabi_dsub+0x348>)
    7064:	401c      	ands	r4, r3
    7066:	087b      	lsrs	r3, r7, #1
    7068:	4017      	ands	r7, r2
    706a:	431f      	orrs	r7, r3
    706c:	07e2      	lsls	r2, r4, #31
    706e:	4317      	orrs	r7, r2
    7070:	0864      	lsrs	r4, r4, #1
    7072:	e78f      	b.n	6f94 <__aeabi_dsub+0x10c>
    7074:	0008      	movs	r0, r1
    7076:	4310      	orrs	r0, r2
    7078:	d000      	beq.n	707c <__aeabi_dsub+0x1f4>
    707a:	e724      	b.n	6ec6 <__aeabi_dsub+0x3e>
    707c:	e721      	b.n	6ec2 <__aeabi_dsub+0x3a>
    707e:	0023      	movs	r3, r4
    7080:	433b      	orrs	r3, r7
    7082:	d100      	bne.n	7086 <__aeabi_dsub+0x1fe>
    7084:	e1b9      	b.n	73fa <__aeabi_dsub+0x572>
    7086:	2280      	movs	r2, #128	; 0x80
    7088:	0312      	lsls	r2, r2, #12
    708a:	4314      	orrs	r4, r2
    708c:	0324      	lsls	r4, r4, #12
    708e:	0b24      	lsrs	r4, r4, #12
    7090:	e79f      	b.n	6fd2 <__aeabi_dsub+0x14a>
    7092:	002e      	movs	r6, r5
    7094:	e77e      	b.n	6f94 <__aeabi_dsub+0x10c>
    7096:	0008      	movs	r0, r1
    7098:	4310      	orrs	r0, r2
    709a:	d100      	bne.n	709e <__aeabi_dsub+0x216>
    709c:	e0ca      	b.n	7234 <__aeabi_dsub+0x3ac>
    709e:	1e58      	subs	r0, r3, #1
    70a0:	4684      	mov	ip, r0
    70a2:	2800      	cmp	r0, #0
    70a4:	d000      	beq.n	70a8 <__aeabi_dsub+0x220>
    70a6:	e0e7      	b.n	7278 <__aeabi_dsub+0x3f0>
    70a8:	4452      	add	r2, sl
    70aa:	4552      	cmp	r2, sl
    70ac:	4180      	sbcs	r0, r0
    70ae:	1864      	adds	r4, r4, r1
    70b0:	4240      	negs	r0, r0
    70b2:	1824      	adds	r4, r4, r0
    70b4:	0017      	movs	r7, r2
    70b6:	2601      	movs	r6, #1
    70b8:	0223      	lsls	r3, r4, #8
    70ba:	d507      	bpl.n	70cc <__aeabi_dsub+0x244>
    70bc:	2602      	movs	r6, #2
    70be:	e7cf      	b.n	7060 <__aeabi_dsub+0x1d8>
    70c0:	4664      	mov	r4, ip
    70c2:	432c      	orrs	r4, r5
    70c4:	d100      	bne.n	70c8 <__aeabi_dsub+0x240>
    70c6:	e1b3      	b.n	7430 <__aeabi_dsub+0x5a8>
    70c8:	002c      	movs	r4, r5
    70ca:	4667      	mov	r7, ip
    70cc:	077b      	lsls	r3, r7, #29
    70ce:	d000      	beq.n	70d2 <__aeabi_dsub+0x24a>
    70d0:	e762      	b.n	6f98 <__aeabi_dsub+0x110>
    70d2:	0763      	lsls	r3, r4, #29
    70d4:	08ff      	lsrs	r7, r7, #3
    70d6:	431f      	orrs	r7, r3
    70d8:	2501      	movs	r5, #1
    70da:	4643      	mov	r3, r8
    70dc:	08e4      	lsrs	r4, r4, #3
    70de:	401d      	ands	r5, r3
    70e0:	e793      	b.n	700a <__aeabi_dsub+0x182>
    70e2:	2d00      	cmp	r5, #0
    70e4:	d178      	bne.n	71d8 <__aeabi_dsub+0x350>
    70e6:	1c75      	adds	r5, r6, #1
    70e8:	056d      	lsls	r5, r5, #21
    70ea:	0d6d      	lsrs	r5, r5, #21
    70ec:	2d01      	cmp	r5, #1
    70ee:	dc00      	bgt.n	70f2 <__aeabi_dsub+0x26a>
    70f0:	e0f2      	b.n	72d8 <__aeabi_dsub+0x450>
    70f2:	4650      	mov	r0, sl
    70f4:	1a80      	subs	r0, r0, r2
    70f6:	4582      	cmp	sl, r0
    70f8:	41bf      	sbcs	r7, r7
    70fa:	1a65      	subs	r5, r4, r1
    70fc:	427f      	negs	r7, r7
    70fe:	1bed      	subs	r5, r5, r7
    7100:	4684      	mov	ip, r0
    7102:	0228      	lsls	r0, r5, #8
    7104:	d400      	bmi.n	7108 <__aeabi_dsub+0x280>
    7106:	e08c      	b.n	7222 <__aeabi_dsub+0x39a>
    7108:	4650      	mov	r0, sl
    710a:	1a17      	subs	r7, r2, r0
    710c:	42ba      	cmp	r2, r7
    710e:	4192      	sbcs	r2, r2
    7110:	1b0c      	subs	r4, r1, r4
    7112:	4255      	negs	r5, r2
    7114:	1b65      	subs	r5, r4, r5
    7116:	4698      	mov	r8, r3
    7118:	e714      	b.n	6f44 <__aeabi_dsub+0xbc>
    711a:	2501      	movs	r5, #1
    711c:	4643      	mov	r3, r8
    711e:	2400      	movs	r4, #0
    7120:	401d      	ands	r5, r3
    7122:	2700      	movs	r7, #0
    7124:	e755      	b.n	6fd2 <__aeabi_dsub+0x14a>
    7126:	4c2a      	ldr	r4, [pc, #168]	; (71d0 <__aeabi_dsub+0x348>)
    7128:	1af6      	subs	r6, r6, r3
    712a:	402c      	ands	r4, r5
    712c:	e732      	b.n	6f94 <__aeabi_dsub+0x10c>
    712e:	003d      	movs	r5, r7
    7130:	3828      	subs	r0, #40	; 0x28
    7132:	4085      	lsls	r5, r0
    7134:	2700      	movs	r7, #0
    7136:	e717      	b.n	6f68 <__aeabi_dsub+0xe0>
    7138:	0038      	movs	r0, r7
    713a:	f000 fb45 	bl	77c8 <__clzsi2>
    713e:	3020      	adds	r0, #32
    7140:	e706      	b.n	6f50 <__aeabi_dsub+0xc8>
    7142:	430a      	orrs	r2, r1
    7144:	0017      	movs	r7, r2
    7146:	2100      	movs	r1, #0
    7148:	1e7a      	subs	r2, r7, #1
    714a:	4197      	sbcs	r7, r2
    714c:	e6ee      	b.n	6f2c <__aeabi_dsub+0xa4>
    714e:	2b00      	cmp	r3, #0
    7150:	d000      	beq.n	7154 <__aeabi_dsub+0x2cc>
    7152:	e0e5      	b.n	7320 <__aeabi_dsub+0x498>
    7154:	1c73      	adds	r3, r6, #1
    7156:	469c      	mov	ip, r3
    7158:	055b      	lsls	r3, r3, #21
    715a:	0d5b      	lsrs	r3, r3, #21
    715c:	2b01      	cmp	r3, #1
    715e:	dc00      	bgt.n	7162 <__aeabi_dsub+0x2da>
    7160:	e09f      	b.n	72a2 <__aeabi_dsub+0x41a>
    7162:	4b1a      	ldr	r3, [pc, #104]	; (71cc <__aeabi_dsub+0x344>)
    7164:	459c      	cmp	ip, r3
    7166:	d100      	bne.n	716a <__aeabi_dsub+0x2e2>
    7168:	e0c5      	b.n	72f6 <__aeabi_dsub+0x46e>
    716a:	4452      	add	r2, sl
    716c:	4552      	cmp	r2, sl
    716e:	4180      	sbcs	r0, r0
    7170:	1864      	adds	r4, r4, r1
    7172:	4240      	negs	r0, r0
    7174:	1824      	adds	r4, r4, r0
    7176:	07e7      	lsls	r7, r4, #31
    7178:	0852      	lsrs	r2, r2, #1
    717a:	4317      	orrs	r7, r2
    717c:	0864      	lsrs	r4, r4, #1
    717e:	4666      	mov	r6, ip
    7180:	e708      	b.n	6f94 <__aeabi_dsub+0x10c>
    7182:	4812      	ldr	r0, [pc, #72]	; (71cc <__aeabi_dsub+0x344>)
    7184:	4285      	cmp	r5, r0
    7186:	d100      	bne.n	718a <__aeabi_dsub+0x302>
    7188:	e085      	b.n	7296 <__aeabi_dsub+0x40e>
    718a:	001d      	movs	r5, r3
    718c:	e6bc      	b.n	6f08 <__aeabi_dsub+0x80>
    718e:	0029      	movs	r1, r5
    7190:	3e1f      	subs	r6, #31
    7192:	40f1      	lsrs	r1, r6
    7194:	2b20      	cmp	r3, #32
    7196:	d100      	bne.n	719a <__aeabi_dsub+0x312>
    7198:	e07f      	b.n	729a <__aeabi_dsub+0x412>
    719a:	2240      	movs	r2, #64	; 0x40
    719c:	1ad3      	subs	r3, r2, r3
    719e:	409d      	lsls	r5, r3
    71a0:	432f      	orrs	r7, r5
    71a2:	1e7d      	subs	r5, r7, #1
    71a4:	41af      	sbcs	r7, r5
    71a6:	2400      	movs	r4, #0
    71a8:	430f      	orrs	r7, r1
    71aa:	2600      	movs	r6, #0
    71ac:	e78e      	b.n	70cc <__aeabi_dsub+0x244>
    71ae:	002b      	movs	r3, r5
    71b0:	000f      	movs	r7, r1
    71b2:	3b20      	subs	r3, #32
    71b4:	40df      	lsrs	r7, r3
    71b6:	2d20      	cmp	r5, #32
    71b8:	d071      	beq.n	729e <__aeabi_dsub+0x416>
    71ba:	2340      	movs	r3, #64	; 0x40
    71bc:	1b5d      	subs	r5, r3, r5
    71be:	40a9      	lsls	r1, r5
    71c0:	430a      	orrs	r2, r1
    71c2:	1e51      	subs	r1, r2, #1
    71c4:	418a      	sbcs	r2, r1
    71c6:	2100      	movs	r1, #0
    71c8:	4317      	orrs	r7, r2
    71ca:	e6af      	b.n	6f2c <__aeabi_dsub+0xa4>
    71cc:	000007ff 	.word	0x000007ff
    71d0:	ff7fffff 	.word	0xff7fffff
    71d4:	800fffff 	.word	0x800fffff
    71d8:	2e00      	cmp	r6, #0
    71da:	d03e      	beq.n	725a <__aeabi_dsub+0x3d2>
    71dc:	4eb3      	ldr	r6, [pc, #716]	; (74ac <__aeabi_dsub+0x624>)
    71de:	45b4      	cmp	ip, r6
    71e0:	d045      	beq.n	726e <__aeabi_dsub+0x3e6>
    71e2:	2680      	movs	r6, #128	; 0x80
    71e4:	0436      	lsls	r6, r6, #16
    71e6:	426d      	negs	r5, r5
    71e8:	4334      	orrs	r4, r6
    71ea:	2d38      	cmp	r5, #56	; 0x38
    71ec:	dd00      	ble.n	71f0 <__aeabi_dsub+0x368>
    71ee:	e0a8      	b.n	7342 <__aeabi_dsub+0x4ba>
    71f0:	2d1f      	cmp	r5, #31
    71f2:	dd00      	ble.n	71f6 <__aeabi_dsub+0x36e>
    71f4:	e11f      	b.n	7436 <__aeabi_dsub+0x5ae>
    71f6:	2620      	movs	r6, #32
    71f8:	0027      	movs	r7, r4
    71fa:	4650      	mov	r0, sl
    71fc:	1b76      	subs	r6, r6, r5
    71fe:	40b7      	lsls	r7, r6
    7200:	40e8      	lsrs	r0, r5
    7202:	4307      	orrs	r7, r0
    7204:	4650      	mov	r0, sl
    7206:	40b0      	lsls	r0, r6
    7208:	1e46      	subs	r6, r0, #1
    720a:	41b0      	sbcs	r0, r6
    720c:	40ec      	lsrs	r4, r5
    720e:	4338      	orrs	r0, r7
    7210:	1a17      	subs	r7, r2, r0
    7212:	42ba      	cmp	r2, r7
    7214:	4192      	sbcs	r2, r2
    7216:	1b0c      	subs	r4, r1, r4
    7218:	4252      	negs	r2, r2
    721a:	1aa4      	subs	r4, r4, r2
    721c:	4666      	mov	r6, ip
    721e:	4698      	mov	r8, r3
    7220:	e68b      	b.n	6f3a <__aeabi_dsub+0xb2>
    7222:	4664      	mov	r4, ip
    7224:	4667      	mov	r7, ip
    7226:	432c      	orrs	r4, r5
    7228:	d000      	beq.n	722c <__aeabi_dsub+0x3a4>
    722a:	e68b      	b.n	6f44 <__aeabi_dsub+0xbc>
    722c:	2500      	movs	r5, #0
    722e:	2600      	movs	r6, #0
    7230:	2700      	movs	r7, #0
    7232:	e6ea      	b.n	700a <__aeabi_dsub+0x182>
    7234:	001e      	movs	r6, r3
    7236:	e6ad      	b.n	6f94 <__aeabi_dsub+0x10c>
    7238:	2b1f      	cmp	r3, #31
    723a:	dc60      	bgt.n	72fe <__aeabi_dsub+0x476>
    723c:	2720      	movs	r7, #32
    723e:	1af8      	subs	r0, r7, r3
    7240:	000f      	movs	r7, r1
    7242:	4684      	mov	ip, r0
    7244:	4087      	lsls	r7, r0
    7246:	0010      	movs	r0, r2
    7248:	40d8      	lsrs	r0, r3
    724a:	4307      	orrs	r7, r0
    724c:	4660      	mov	r0, ip
    724e:	4082      	lsls	r2, r0
    7250:	1e50      	subs	r0, r2, #1
    7252:	4182      	sbcs	r2, r0
    7254:	40d9      	lsrs	r1, r3
    7256:	4317      	orrs	r7, r2
    7258:	e6f5      	b.n	7046 <__aeabi_dsub+0x1be>
    725a:	0026      	movs	r6, r4
    725c:	4650      	mov	r0, sl
    725e:	4306      	orrs	r6, r0
    7260:	d005      	beq.n	726e <__aeabi_dsub+0x3e6>
    7262:	43ed      	mvns	r5, r5
    7264:	2d00      	cmp	r5, #0
    7266:	d0d3      	beq.n	7210 <__aeabi_dsub+0x388>
    7268:	4e90      	ldr	r6, [pc, #576]	; (74ac <__aeabi_dsub+0x624>)
    726a:	45b4      	cmp	ip, r6
    726c:	d1bd      	bne.n	71ea <__aeabi_dsub+0x362>
    726e:	000c      	movs	r4, r1
    7270:	0017      	movs	r7, r2
    7272:	4666      	mov	r6, ip
    7274:	4698      	mov	r8, r3
    7276:	e68d      	b.n	6f94 <__aeabi_dsub+0x10c>
    7278:	488c      	ldr	r0, [pc, #560]	; (74ac <__aeabi_dsub+0x624>)
    727a:	4283      	cmp	r3, r0
    727c:	d00b      	beq.n	7296 <__aeabi_dsub+0x40e>
    727e:	4663      	mov	r3, ip
    7280:	e6d9      	b.n	7036 <__aeabi_dsub+0x1ae>
    7282:	2d00      	cmp	r5, #0
    7284:	d000      	beq.n	7288 <__aeabi_dsub+0x400>
    7286:	e096      	b.n	73b6 <__aeabi_dsub+0x52e>
    7288:	0008      	movs	r0, r1
    728a:	4310      	orrs	r0, r2
    728c:	d100      	bne.n	7290 <__aeabi_dsub+0x408>
    728e:	e0e2      	b.n	7456 <__aeabi_dsub+0x5ce>
    7290:	000c      	movs	r4, r1
    7292:	0017      	movs	r7, r2
    7294:	4698      	mov	r8, r3
    7296:	4e85      	ldr	r6, [pc, #532]	; (74ac <__aeabi_dsub+0x624>)
    7298:	e67c      	b.n	6f94 <__aeabi_dsub+0x10c>
    729a:	2500      	movs	r5, #0
    729c:	e780      	b.n	71a0 <__aeabi_dsub+0x318>
    729e:	2100      	movs	r1, #0
    72a0:	e78e      	b.n	71c0 <__aeabi_dsub+0x338>
    72a2:	0023      	movs	r3, r4
    72a4:	4650      	mov	r0, sl
    72a6:	4303      	orrs	r3, r0
    72a8:	2e00      	cmp	r6, #0
    72aa:	d000      	beq.n	72ae <__aeabi_dsub+0x426>
    72ac:	e0a8      	b.n	7400 <__aeabi_dsub+0x578>
    72ae:	2b00      	cmp	r3, #0
    72b0:	d100      	bne.n	72b4 <__aeabi_dsub+0x42c>
    72b2:	e0de      	b.n	7472 <__aeabi_dsub+0x5ea>
    72b4:	000b      	movs	r3, r1
    72b6:	4313      	orrs	r3, r2
    72b8:	d100      	bne.n	72bc <__aeabi_dsub+0x434>
    72ba:	e66b      	b.n	6f94 <__aeabi_dsub+0x10c>
    72bc:	4452      	add	r2, sl
    72be:	4552      	cmp	r2, sl
    72c0:	4180      	sbcs	r0, r0
    72c2:	1864      	adds	r4, r4, r1
    72c4:	4240      	negs	r0, r0
    72c6:	1824      	adds	r4, r4, r0
    72c8:	0017      	movs	r7, r2
    72ca:	0223      	lsls	r3, r4, #8
    72cc:	d400      	bmi.n	72d0 <__aeabi_dsub+0x448>
    72ce:	e6fd      	b.n	70cc <__aeabi_dsub+0x244>
    72d0:	4b77      	ldr	r3, [pc, #476]	; (74b0 <__aeabi_dsub+0x628>)
    72d2:	4666      	mov	r6, ip
    72d4:	401c      	ands	r4, r3
    72d6:	e65d      	b.n	6f94 <__aeabi_dsub+0x10c>
    72d8:	0025      	movs	r5, r4
    72da:	4650      	mov	r0, sl
    72dc:	4305      	orrs	r5, r0
    72de:	2e00      	cmp	r6, #0
    72e0:	d1cf      	bne.n	7282 <__aeabi_dsub+0x3fa>
    72e2:	2d00      	cmp	r5, #0
    72e4:	d14f      	bne.n	7386 <__aeabi_dsub+0x4fe>
    72e6:	000c      	movs	r4, r1
    72e8:	4314      	orrs	r4, r2
    72ea:	d100      	bne.n	72ee <__aeabi_dsub+0x466>
    72ec:	e0a0      	b.n	7430 <__aeabi_dsub+0x5a8>
    72ee:	000c      	movs	r4, r1
    72f0:	0017      	movs	r7, r2
    72f2:	4698      	mov	r8, r3
    72f4:	e64e      	b.n	6f94 <__aeabi_dsub+0x10c>
    72f6:	4666      	mov	r6, ip
    72f8:	2400      	movs	r4, #0
    72fa:	2700      	movs	r7, #0
    72fc:	e685      	b.n	700a <__aeabi_dsub+0x182>
    72fe:	001f      	movs	r7, r3
    7300:	0008      	movs	r0, r1
    7302:	3f20      	subs	r7, #32
    7304:	40f8      	lsrs	r0, r7
    7306:	0007      	movs	r7, r0
    7308:	2b20      	cmp	r3, #32
    730a:	d100      	bne.n	730e <__aeabi_dsub+0x486>
    730c:	e08e      	b.n	742c <__aeabi_dsub+0x5a4>
    730e:	2040      	movs	r0, #64	; 0x40
    7310:	1ac3      	subs	r3, r0, r3
    7312:	4099      	lsls	r1, r3
    7314:	430a      	orrs	r2, r1
    7316:	1e51      	subs	r1, r2, #1
    7318:	418a      	sbcs	r2, r1
    731a:	2100      	movs	r1, #0
    731c:	4317      	orrs	r7, r2
    731e:	e692      	b.n	7046 <__aeabi_dsub+0x1be>
    7320:	2e00      	cmp	r6, #0
    7322:	d114      	bne.n	734e <__aeabi_dsub+0x4c6>
    7324:	0026      	movs	r6, r4
    7326:	4650      	mov	r0, sl
    7328:	4306      	orrs	r6, r0
    732a:	d062      	beq.n	73f2 <__aeabi_dsub+0x56a>
    732c:	43db      	mvns	r3, r3
    732e:	2b00      	cmp	r3, #0
    7330:	d15c      	bne.n	73ec <__aeabi_dsub+0x564>
    7332:	1887      	adds	r7, r0, r2
    7334:	4297      	cmp	r7, r2
    7336:	4192      	sbcs	r2, r2
    7338:	1864      	adds	r4, r4, r1
    733a:	4252      	negs	r2, r2
    733c:	18a4      	adds	r4, r4, r2
    733e:	4666      	mov	r6, ip
    7340:	e687      	b.n	7052 <__aeabi_dsub+0x1ca>
    7342:	4650      	mov	r0, sl
    7344:	4320      	orrs	r0, r4
    7346:	1e44      	subs	r4, r0, #1
    7348:	41a0      	sbcs	r0, r4
    734a:	2400      	movs	r4, #0
    734c:	e760      	b.n	7210 <__aeabi_dsub+0x388>
    734e:	4e57      	ldr	r6, [pc, #348]	; (74ac <__aeabi_dsub+0x624>)
    7350:	45b4      	cmp	ip, r6
    7352:	d04e      	beq.n	73f2 <__aeabi_dsub+0x56a>
    7354:	2680      	movs	r6, #128	; 0x80
    7356:	0436      	lsls	r6, r6, #16
    7358:	425b      	negs	r3, r3
    735a:	4334      	orrs	r4, r6
    735c:	2b38      	cmp	r3, #56	; 0x38
    735e:	dd00      	ble.n	7362 <__aeabi_dsub+0x4da>
    7360:	e07f      	b.n	7462 <__aeabi_dsub+0x5da>
    7362:	2b1f      	cmp	r3, #31
    7364:	dd00      	ble.n	7368 <__aeabi_dsub+0x4e0>
    7366:	e08b      	b.n	7480 <__aeabi_dsub+0x5f8>
    7368:	2620      	movs	r6, #32
    736a:	0027      	movs	r7, r4
    736c:	4650      	mov	r0, sl
    736e:	1af6      	subs	r6, r6, r3
    7370:	40b7      	lsls	r7, r6
    7372:	40d8      	lsrs	r0, r3
    7374:	4307      	orrs	r7, r0
    7376:	4650      	mov	r0, sl
    7378:	40b0      	lsls	r0, r6
    737a:	1e46      	subs	r6, r0, #1
    737c:	41b0      	sbcs	r0, r6
    737e:	4307      	orrs	r7, r0
    7380:	40dc      	lsrs	r4, r3
    7382:	18bf      	adds	r7, r7, r2
    7384:	e7d6      	b.n	7334 <__aeabi_dsub+0x4ac>
    7386:	000d      	movs	r5, r1
    7388:	4315      	orrs	r5, r2
    738a:	d100      	bne.n	738e <__aeabi_dsub+0x506>
    738c:	e602      	b.n	6f94 <__aeabi_dsub+0x10c>
    738e:	4650      	mov	r0, sl
    7390:	1a80      	subs	r0, r0, r2
    7392:	4582      	cmp	sl, r0
    7394:	41bf      	sbcs	r7, r7
    7396:	1a65      	subs	r5, r4, r1
    7398:	427f      	negs	r7, r7
    739a:	1bed      	subs	r5, r5, r7
    739c:	4684      	mov	ip, r0
    739e:	0228      	lsls	r0, r5, #8
    73a0:	d400      	bmi.n	73a4 <__aeabi_dsub+0x51c>
    73a2:	e68d      	b.n	70c0 <__aeabi_dsub+0x238>
    73a4:	4650      	mov	r0, sl
    73a6:	1a17      	subs	r7, r2, r0
    73a8:	42ba      	cmp	r2, r7
    73aa:	4192      	sbcs	r2, r2
    73ac:	1b0c      	subs	r4, r1, r4
    73ae:	4252      	negs	r2, r2
    73b0:	1aa4      	subs	r4, r4, r2
    73b2:	4698      	mov	r8, r3
    73b4:	e5ee      	b.n	6f94 <__aeabi_dsub+0x10c>
    73b6:	000d      	movs	r5, r1
    73b8:	4315      	orrs	r5, r2
    73ba:	d100      	bne.n	73be <__aeabi_dsub+0x536>
    73bc:	e76b      	b.n	7296 <__aeabi_dsub+0x40e>
    73be:	4650      	mov	r0, sl
    73c0:	0767      	lsls	r7, r4, #29
    73c2:	08c0      	lsrs	r0, r0, #3
    73c4:	4307      	orrs	r7, r0
    73c6:	2080      	movs	r0, #128	; 0x80
    73c8:	08e4      	lsrs	r4, r4, #3
    73ca:	0300      	lsls	r0, r0, #12
    73cc:	4204      	tst	r4, r0
    73ce:	d007      	beq.n	73e0 <__aeabi_dsub+0x558>
    73d0:	08cd      	lsrs	r5, r1, #3
    73d2:	4205      	tst	r5, r0
    73d4:	d104      	bne.n	73e0 <__aeabi_dsub+0x558>
    73d6:	002c      	movs	r4, r5
    73d8:	4698      	mov	r8, r3
    73da:	08d7      	lsrs	r7, r2, #3
    73dc:	0749      	lsls	r1, r1, #29
    73de:	430f      	orrs	r7, r1
    73e0:	0f7b      	lsrs	r3, r7, #29
    73e2:	00e4      	lsls	r4, r4, #3
    73e4:	431c      	orrs	r4, r3
    73e6:	00ff      	lsls	r7, r7, #3
    73e8:	4e30      	ldr	r6, [pc, #192]	; (74ac <__aeabi_dsub+0x624>)
    73ea:	e5d3      	b.n	6f94 <__aeabi_dsub+0x10c>
    73ec:	4e2f      	ldr	r6, [pc, #188]	; (74ac <__aeabi_dsub+0x624>)
    73ee:	45b4      	cmp	ip, r6
    73f0:	d1b4      	bne.n	735c <__aeabi_dsub+0x4d4>
    73f2:	000c      	movs	r4, r1
    73f4:	0017      	movs	r7, r2
    73f6:	4666      	mov	r6, ip
    73f8:	e5cc      	b.n	6f94 <__aeabi_dsub+0x10c>
    73fa:	2700      	movs	r7, #0
    73fc:	2400      	movs	r4, #0
    73fe:	e5e8      	b.n	6fd2 <__aeabi_dsub+0x14a>
    7400:	2b00      	cmp	r3, #0
    7402:	d039      	beq.n	7478 <__aeabi_dsub+0x5f0>
    7404:	000b      	movs	r3, r1
    7406:	4313      	orrs	r3, r2
    7408:	d100      	bne.n	740c <__aeabi_dsub+0x584>
    740a:	e744      	b.n	7296 <__aeabi_dsub+0x40e>
    740c:	08c0      	lsrs	r0, r0, #3
    740e:	0767      	lsls	r7, r4, #29
    7410:	4307      	orrs	r7, r0
    7412:	2080      	movs	r0, #128	; 0x80
    7414:	08e4      	lsrs	r4, r4, #3
    7416:	0300      	lsls	r0, r0, #12
    7418:	4204      	tst	r4, r0
    741a:	d0e1      	beq.n	73e0 <__aeabi_dsub+0x558>
    741c:	08cb      	lsrs	r3, r1, #3
    741e:	4203      	tst	r3, r0
    7420:	d1de      	bne.n	73e0 <__aeabi_dsub+0x558>
    7422:	08d7      	lsrs	r7, r2, #3
    7424:	0749      	lsls	r1, r1, #29
    7426:	430f      	orrs	r7, r1
    7428:	001c      	movs	r4, r3
    742a:	e7d9      	b.n	73e0 <__aeabi_dsub+0x558>
    742c:	2100      	movs	r1, #0
    742e:	e771      	b.n	7314 <__aeabi_dsub+0x48c>
    7430:	2500      	movs	r5, #0
    7432:	2700      	movs	r7, #0
    7434:	e5e9      	b.n	700a <__aeabi_dsub+0x182>
    7436:	002e      	movs	r6, r5
    7438:	0027      	movs	r7, r4
    743a:	3e20      	subs	r6, #32
    743c:	40f7      	lsrs	r7, r6
    743e:	2d20      	cmp	r5, #32
    7440:	d02f      	beq.n	74a2 <__aeabi_dsub+0x61a>
    7442:	2640      	movs	r6, #64	; 0x40
    7444:	1b75      	subs	r5, r6, r5
    7446:	40ac      	lsls	r4, r5
    7448:	4650      	mov	r0, sl
    744a:	4320      	orrs	r0, r4
    744c:	1e44      	subs	r4, r0, #1
    744e:	41a0      	sbcs	r0, r4
    7450:	2400      	movs	r4, #0
    7452:	4338      	orrs	r0, r7
    7454:	e6dc      	b.n	7210 <__aeabi_dsub+0x388>
    7456:	2480      	movs	r4, #128	; 0x80
    7458:	2500      	movs	r5, #0
    745a:	0324      	lsls	r4, r4, #12
    745c:	4e13      	ldr	r6, [pc, #76]	; (74ac <__aeabi_dsub+0x624>)
    745e:	2700      	movs	r7, #0
    7460:	e5d3      	b.n	700a <__aeabi_dsub+0x182>
    7462:	4650      	mov	r0, sl
    7464:	4320      	orrs	r0, r4
    7466:	0007      	movs	r7, r0
    7468:	1e78      	subs	r0, r7, #1
    746a:	4187      	sbcs	r7, r0
    746c:	2400      	movs	r4, #0
    746e:	18bf      	adds	r7, r7, r2
    7470:	e760      	b.n	7334 <__aeabi_dsub+0x4ac>
    7472:	000c      	movs	r4, r1
    7474:	0017      	movs	r7, r2
    7476:	e58d      	b.n	6f94 <__aeabi_dsub+0x10c>
    7478:	000c      	movs	r4, r1
    747a:	0017      	movs	r7, r2
    747c:	4e0b      	ldr	r6, [pc, #44]	; (74ac <__aeabi_dsub+0x624>)
    747e:	e589      	b.n	6f94 <__aeabi_dsub+0x10c>
    7480:	001e      	movs	r6, r3
    7482:	0027      	movs	r7, r4
    7484:	3e20      	subs	r6, #32
    7486:	40f7      	lsrs	r7, r6
    7488:	2b20      	cmp	r3, #32
    748a:	d00c      	beq.n	74a6 <__aeabi_dsub+0x61e>
    748c:	2640      	movs	r6, #64	; 0x40
    748e:	1af3      	subs	r3, r6, r3
    7490:	409c      	lsls	r4, r3
    7492:	4650      	mov	r0, sl
    7494:	4320      	orrs	r0, r4
    7496:	1e44      	subs	r4, r0, #1
    7498:	41a0      	sbcs	r0, r4
    749a:	4307      	orrs	r7, r0
    749c:	2400      	movs	r4, #0
    749e:	18bf      	adds	r7, r7, r2
    74a0:	e748      	b.n	7334 <__aeabi_dsub+0x4ac>
    74a2:	2400      	movs	r4, #0
    74a4:	e7d0      	b.n	7448 <__aeabi_dsub+0x5c0>
    74a6:	2400      	movs	r4, #0
    74a8:	e7f3      	b.n	7492 <__aeabi_dsub+0x60a>
    74aa:	46c0      	nop			; (mov r8, r8)
    74ac:	000007ff 	.word	0x000007ff
    74b0:	ff7fffff 	.word	0xff7fffff

000074b4 <__aeabi_d2iz>:
    74b4:	b530      	push	{r4, r5, lr}
    74b6:	4d13      	ldr	r5, [pc, #76]	; (7504 <__aeabi_d2iz+0x50>)
    74b8:	030a      	lsls	r2, r1, #12
    74ba:	004b      	lsls	r3, r1, #1
    74bc:	0b12      	lsrs	r2, r2, #12
    74be:	0d5b      	lsrs	r3, r3, #21
    74c0:	0fc9      	lsrs	r1, r1, #31
    74c2:	2400      	movs	r4, #0
    74c4:	42ab      	cmp	r3, r5
    74c6:	dd10      	ble.n	74ea <__aeabi_d2iz+0x36>
    74c8:	4c0f      	ldr	r4, [pc, #60]	; (7508 <__aeabi_d2iz+0x54>)
    74ca:	42a3      	cmp	r3, r4
    74cc:	dc0f      	bgt.n	74ee <__aeabi_d2iz+0x3a>
    74ce:	2480      	movs	r4, #128	; 0x80
    74d0:	4d0e      	ldr	r5, [pc, #56]	; (750c <__aeabi_d2iz+0x58>)
    74d2:	0364      	lsls	r4, r4, #13
    74d4:	4322      	orrs	r2, r4
    74d6:	1aed      	subs	r5, r5, r3
    74d8:	2d1f      	cmp	r5, #31
    74da:	dd0b      	ble.n	74f4 <__aeabi_d2iz+0x40>
    74dc:	480c      	ldr	r0, [pc, #48]	; (7510 <__aeabi_d2iz+0x5c>)
    74de:	1ac3      	subs	r3, r0, r3
    74e0:	40da      	lsrs	r2, r3
    74e2:	4254      	negs	r4, r2
    74e4:	2900      	cmp	r1, #0
    74e6:	d100      	bne.n	74ea <__aeabi_d2iz+0x36>
    74e8:	0014      	movs	r4, r2
    74ea:	0020      	movs	r0, r4
    74ec:	bd30      	pop	{r4, r5, pc}
    74ee:	4b09      	ldr	r3, [pc, #36]	; (7514 <__aeabi_d2iz+0x60>)
    74f0:	18cc      	adds	r4, r1, r3
    74f2:	e7fa      	b.n	74ea <__aeabi_d2iz+0x36>
    74f4:	4c08      	ldr	r4, [pc, #32]	; (7518 <__aeabi_d2iz+0x64>)
    74f6:	40e8      	lsrs	r0, r5
    74f8:	46a4      	mov	ip, r4
    74fa:	4463      	add	r3, ip
    74fc:	409a      	lsls	r2, r3
    74fe:	4302      	orrs	r2, r0
    7500:	e7ef      	b.n	74e2 <__aeabi_d2iz+0x2e>
    7502:	46c0      	nop			; (mov r8, r8)
    7504:	000003fe 	.word	0x000003fe
    7508:	0000041d 	.word	0x0000041d
    750c:	00000433 	.word	0x00000433
    7510:	00000413 	.word	0x00000413
    7514:	7fffffff 	.word	0x7fffffff
    7518:	fffffbed 	.word	0xfffffbed

0000751c <__aeabi_i2d>:
    751c:	b570      	push	{r4, r5, r6, lr}
    751e:	2800      	cmp	r0, #0
    7520:	d030      	beq.n	7584 <__aeabi_i2d+0x68>
    7522:	17c3      	asrs	r3, r0, #31
    7524:	18c4      	adds	r4, r0, r3
    7526:	405c      	eors	r4, r3
    7528:	0fc5      	lsrs	r5, r0, #31
    752a:	0020      	movs	r0, r4
    752c:	f000 f94c 	bl	77c8 <__clzsi2>
    7530:	4b17      	ldr	r3, [pc, #92]	; (7590 <__aeabi_i2d+0x74>)
    7532:	4a18      	ldr	r2, [pc, #96]	; (7594 <__aeabi_i2d+0x78>)
    7534:	1a1b      	subs	r3, r3, r0
    7536:	1ad2      	subs	r2, r2, r3
    7538:	2a1f      	cmp	r2, #31
    753a:	dd18      	ble.n	756e <__aeabi_i2d+0x52>
    753c:	4a16      	ldr	r2, [pc, #88]	; (7598 <__aeabi_i2d+0x7c>)
    753e:	1ad2      	subs	r2, r2, r3
    7540:	4094      	lsls	r4, r2
    7542:	2200      	movs	r2, #0
    7544:	0324      	lsls	r4, r4, #12
    7546:	055b      	lsls	r3, r3, #21
    7548:	0b24      	lsrs	r4, r4, #12
    754a:	0d5b      	lsrs	r3, r3, #21
    754c:	2100      	movs	r1, #0
    754e:	0010      	movs	r0, r2
    7550:	0324      	lsls	r4, r4, #12
    7552:	0d0a      	lsrs	r2, r1, #20
    7554:	0b24      	lsrs	r4, r4, #12
    7556:	0512      	lsls	r2, r2, #20
    7558:	4322      	orrs	r2, r4
    755a:	4c10      	ldr	r4, [pc, #64]	; (759c <__aeabi_i2d+0x80>)
    755c:	051b      	lsls	r3, r3, #20
    755e:	4022      	ands	r2, r4
    7560:	4313      	orrs	r3, r2
    7562:	005b      	lsls	r3, r3, #1
    7564:	07ed      	lsls	r5, r5, #31
    7566:	085b      	lsrs	r3, r3, #1
    7568:	432b      	orrs	r3, r5
    756a:	0019      	movs	r1, r3
    756c:	bd70      	pop	{r4, r5, r6, pc}
    756e:	0021      	movs	r1, r4
    7570:	4091      	lsls	r1, r2
    7572:	000a      	movs	r2, r1
    7574:	210b      	movs	r1, #11
    7576:	1a08      	subs	r0, r1, r0
    7578:	40c4      	lsrs	r4, r0
    757a:	055b      	lsls	r3, r3, #21
    757c:	0324      	lsls	r4, r4, #12
    757e:	0b24      	lsrs	r4, r4, #12
    7580:	0d5b      	lsrs	r3, r3, #21
    7582:	e7e3      	b.n	754c <__aeabi_i2d+0x30>
    7584:	2500      	movs	r5, #0
    7586:	2300      	movs	r3, #0
    7588:	2400      	movs	r4, #0
    758a:	2200      	movs	r2, #0
    758c:	e7de      	b.n	754c <__aeabi_i2d+0x30>
    758e:	46c0      	nop			; (mov r8, r8)
    7590:	0000041e 	.word	0x0000041e
    7594:	00000433 	.word	0x00000433
    7598:	00000413 	.word	0x00000413
    759c:	800fffff 	.word	0x800fffff

000075a0 <__aeabi_ui2d>:
    75a0:	b510      	push	{r4, lr}
    75a2:	1e04      	subs	r4, r0, #0
    75a4:	d028      	beq.n	75f8 <__aeabi_ui2d+0x58>
    75a6:	f000 f90f 	bl	77c8 <__clzsi2>
    75aa:	4b15      	ldr	r3, [pc, #84]	; (7600 <__aeabi_ui2d+0x60>)
    75ac:	4a15      	ldr	r2, [pc, #84]	; (7604 <__aeabi_ui2d+0x64>)
    75ae:	1a1b      	subs	r3, r3, r0
    75b0:	1ad2      	subs	r2, r2, r3
    75b2:	2a1f      	cmp	r2, #31
    75b4:	dd15      	ble.n	75e2 <__aeabi_ui2d+0x42>
    75b6:	4a14      	ldr	r2, [pc, #80]	; (7608 <__aeabi_ui2d+0x68>)
    75b8:	1ad2      	subs	r2, r2, r3
    75ba:	4094      	lsls	r4, r2
    75bc:	2200      	movs	r2, #0
    75be:	0324      	lsls	r4, r4, #12
    75c0:	055b      	lsls	r3, r3, #21
    75c2:	0b24      	lsrs	r4, r4, #12
    75c4:	0d5b      	lsrs	r3, r3, #21
    75c6:	2100      	movs	r1, #0
    75c8:	0010      	movs	r0, r2
    75ca:	0324      	lsls	r4, r4, #12
    75cc:	0d0a      	lsrs	r2, r1, #20
    75ce:	0b24      	lsrs	r4, r4, #12
    75d0:	0512      	lsls	r2, r2, #20
    75d2:	4322      	orrs	r2, r4
    75d4:	4c0d      	ldr	r4, [pc, #52]	; (760c <__aeabi_ui2d+0x6c>)
    75d6:	051b      	lsls	r3, r3, #20
    75d8:	4022      	ands	r2, r4
    75da:	4313      	orrs	r3, r2
    75dc:	005b      	lsls	r3, r3, #1
    75de:	0859      	lsrs	r1, r3, #1
    75e0:	bd10      	pop	{r4, pc}
    75e2:	0021      	movs	r1, r4
    75e4:	4091      	lsls	r1, r2
    75e6:	000a      	movs	r2, r1
    75e8:	210b      	movs	r1, #11
    75ea:	1a08      	subs	r0, r1, r0
    75ec:	40c4      	lsrs	r4, r0
    75ee:	055b      	lsls	r3, r3, #21
    75f0:	0324      	lsls	r4, r4, #12
    75f2:	0b24      	lsrs	r4, r4, #12
    75f4:	0d5b      	lsrs	r3, r3, #21
    75f6:	e7e6      	b.n	75c6 <__aeabi_ui2d+0x26>
    75f8:	2300      	movs	r3, #0
    75fa:	2400      	movs	r4, #0
    75fc:	2200      	movs	r2, #0
    75fe:	e7e2      	b.n	75c6 <__aeabi_ui2d+0x26>
    7600:	0000041e 	.word	0x0000041e
    7604:	00000433 	.word	0x00000433
    7608:	00000413 	.word	0x00000413
    760c:	800fffff 	.word	0x800fffff

00007610 <__aeabi_f2d>:
    7610:	0041      	lsls	r1, r0, #1
    7612:	0e09      	lsrs	r1, r1, #24
    7614:	1c4b      	adds	r3, r1, #1
    7616:	b570      	push	{r4, r5, r6, lr}
    7618:	b2db      	uxtb	r3, r3
    761a:	0246      	lsls	r6, r0, #9
    761c:	0a75      	lsrs	r5, r6, #9
    761e:	0fc4      	lsrs	r4, r0, #31
    7620:	2b01      	cmp	r3, #1
    7622:	dd14      	ble.n	764e <__aeabi_f2d+0x3e>
    7624:	23e0      	movs	r3, #224	; 0xe0
    7626:	009b      	lsls	r3, r3, #2
    7628:	076d      	lsls	r5, r5, #29
    762a:	0b36      	lsrs	r6, r6, #12
    762c:	18cb      	adds	r3, r1, r3
    762e:	2100      	movs	r1, #0
    7630:	0d0a      	lsrs	r2, r1, #20
    7632:	0028      	movs	r0, r5
    7634:	0512      	lsls	r2, r2, #20
    7636:	4d1c      	ldr	r5, [pc, #112]	; (76a8 <__aeabi_f2d+0x98>)
    7638:	4332      	orrs	r2, r6
    763a:	055b      	lsls	r3, r3, #21
    763c:	402a      	ands	r2, r5
    763e:	085b      	lsrs	r3, r3, #1
    7640:	4313      	orrs	r3, r2
    7642:	005b      	lsls	r3, r3, #1
    7644:	07e4      	lsls	r4, r4, #31
    7646:	085b      	lsrs	r3, r3, #1
    7648:	4323      	orrs	r3, r4
    764a:	0019      	movs	r1, r3
    764c:	bd70      	pop	{r4, r5, r6, pc}
    764e:	2900      	cmp	r1, #0
    7650:	d114      	bne.n	767c <__aeabi_f2d+0x6c>
    7652:	2d00      	cmp	r5, #0
    7654:	d01e      	beq.n	7694 <__aeabi_f2d+0x84>
    7656:	0028      	movs	r0, r5
    7658:	f000 f8b6 	bl	77c8 <__clzsi2>
    765c:	280a      	cmp	r0, #10
    765e:	dc1c      	bgt.n	769a <__aeabi_f2d+0x8a>
    7660:	230b      	movs	r3, #11
    7662:	002a      	movs	r2, r5
    7664:	1a1b      	subs	r3, r3, r0
    7666:	40da      	lsrs	r2, r3
    7668:	0003      	movs	r3, r0
    766a:	3315      	adds	r3, #21
    766c:	409d      	lsls	r5, r3
    766e:	4b0f      	ldr	r3, [pc, #60]	; (76ac <__aeabi_f2d+0x9c>)
    7670:	0312      	lsls	r2, r2, #12
    7672:	1a1b      	subs	r3, r3, r0
    7674:	055b      	lsls	r3, r3, #21
    7676:	0b16      	lsrs	r6, r2, #12
    7678:	0d5b      	lsrs	r3, r3, #21
    767a:	e7d8      	b.n	762e <__aeabi_f2d+0x1e>
    767c:	2d00      	cmp	r5, #0
    767e:	d006      	beq.n	768e <__aeabi_f2d+0x7e>
    7680:	0b32      	lsrs	r2, r6, #12
    7682:	2680      	movs	r6, #128	; 0x80
    7684:	0336      	lsls	r6, r6, #12
    7686:	076d      	lsls	r5, r5, #29
    7688:	4316      	orrs	r6, r2
    768a:	4b09      	ldr	r3, [pc, #36]	; (76b0 <__aeabi_f2d+0xa0>)
    768c:	e7cf      	b.n	762e <__aeabi_f2d+0x1e>
    768e:	4b08      	ldr	r3, [pc, #32]	; (76b0 <__aeabi_f2d+0xa0>)
    7690:	2600      	movs	r6, #0
    7692:	e7cc      	b.n	762e <__aeabi_f2d+0x1e>
    7694:	2300      	movs	r3, #0
    7696:	2600      	movs	r6, #0
    7698:	e7c9      	b.n	762e <__aeabi_f2d+0x1e>
    769a:	0003      	movs	r3, r0
    769c:	002a      	movs	r2, r5
    769e:	3b0b      	subs	r3, #11
    76a0:	409a      	lsls	r2, r3
    76a2:	2500      	movs	r5, #0
    76a4:	e7e3      	b.n	766e <__aeabi_f2d+0x5e>
    76a6:	46c0      	nop			; (mov r8, r8)
    76a8:	800fffff 	.word	0x800fffff
    76ac:	00000389 	.word	0x00000389
    76b0:	000007ff 	.word	0x000007ff

000076b4 <__aeabi_d2f>:
    76b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76b6:	004c      	lsls	r4, r1, #1
    76b8:	0d64      	lsrs	r4, r4, #21
    76ba:	030b      	lsls	r3, r1, #12
    76bc:	1c62      	adds	r2, r4, #1
    76be:	0f45      	lsrs	r5, r0, #29
    76c0:	0a5b      	lsrs	r3, r3, #9
    76c2:	0552      	lsls	r2, r2, #21
    76c4:	432b      	orrs	r3, r5
    76c6:	0fc9      	lsrs	r1, r1, #31
    76c8:	00c5      	lsls	r5, r0, #3
    76ca:	0d52      	lsrs	r2, r2, #21
    76cc:	2a01      	cmp	r2, #1
    76ce:	dd28      	ble.n	7722 <__aeabi_d2f+0x6e>
    76d0:	4a3a      	ldr	r2, [pc, #232]	; (77bc <__aeabi_d2f+0x108>)
    76d2:	18a6      	adds	r6, r4, r2
    76d4:	2efe      	cmp	r6, #254	; 0xfe
    76d6:	dc1b      	bgt.n	7710 <__aeabi_d2f+0x5c>
    76d8:	2e00      	cmp	r6, #0
    76da:	dd3e      	ble.n	775a <__aeabi_d2f+0xa6>
    76dc:	0180      	lsls	r0, r0, #6
    76de:	0002      	movs	r2, r0
    76e0:	1e50      	subs	r0, r2, #1
    76e2:	4182      	sbcs	r2, r0
    76e4:	0f6d      	lsrs	r5, r5, #29
    76e6:	432a      	orrs	r2, r5
    76e8:	00db      	lsls	r3, r3, #3
    76ea:	4313      	orrs	r3, r2
    76ec:	075a      	lsls	r2, r3, #29
    76ee:	d004      	beq.n	76fa <__aeabi_d2f+0x46>
    76f0:	220f      	movs	r2, #15
    76f2:	401a      	ands	r2, r3
    76f4:	2a04      	cmp	r2, #4
    76f6:	d000      	beq.n	76fa <__aeabi_d2f+0x46>
    76f8:	3304      	adds	r3, #4
    76fa:	2280      	movs	r2, #128	; 0x80
    76fc:	04d2      	lsls	r2, r2, #19
    76fe:	401a      	ands	r2, r3
    7700:	d05a      	beq.n	77b8 <__aeabi_d2f+0x104>
    7702:	3601      	adds	r6, #1
    7704:	2eff      	cmp	r6, #255	; 0xff
    7706:	d003      	beq.n	7710 <__aeabi_d2f+0x5c>
    7708:	019b      	lsls	r3, r3, #6
    770a:	0a5b      	lsrs	r3, r3, #9
    770c:	b2f4      	uxtb	r4, r6
    770e:	e001      	b.n	7714 <__aeabi_d2f+0x60>
    7710:	24ff      	movs	r4, #255	; 0xff
    7712:	2300      	movs	r3, #0
    7714:	0258      	lsls	r0, r3, #9
    7716:	05e4      	lsls	r4, r4, #23
    7718:	0a40      	lsrs	r0, r0, #9
    771a:	07c9      	lsls	r1, r1, #31
    771c:	4320      	orrs	r0, r4
    771e:	4308      	orrs	r0, r1
    7720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7722:	2c00      	cmp	r4, #0
    7724:	d007      	beq.n	7736 <__aeabi_d2f+0x82>
    7726:	431d      	orrs	r5, r3
    7728:	d0f2      	beq.n	7710 <__aeabi_d2f+0x5c>
    772a:	2080      	movs	r0, #128	; 0x80
    772c:	00db      	lsls	r3, r3, #3
    772e:	0480      	lsls	r0, r0, #18
    7730:	4303      	orrs	r3, r0
    7732:	26ff      	movs	r6, #255	; 0xff
    7734:	e7da      	b.n	76ec <__aeabi_d2f+0x38>
    7736:	432b      	orrs	r3, r5
    7738:	d003      	beq.n	7742 <__aeabi_d2f+0x8e>
    773a:	2305      	movs	r3, #5
    773c:	08db      	lsrs	r3, r3, #3
    773e:	2cff      	cmp	r4, #255	; 0xff
    7740:	d003      	beq.n	774a <__aeabi_d2f+0x96>
    7742:	025b      	lsls	r3, r3, #9
    7744:	0a5b      	lsrs	r3, r3, #9
    7746:	b2e4      	uxtb	r4, r4
    7748:	e7e4      	b.n	7714 <__aeabi_d2f+0x60>
    774a:	2b00      	cmp	r3, #0
    774c:	d032      	beq.n	77b4 <__aeabi_d2f+0x100>
    774e:	2080      	movs	r0, #128	; 0x80
    7750:	03c0      	lsls	r0, r0, #15
    7752:	4303      	orrs	r3, r0
    7754:	025b      	lsls	r3, r3, #9
    7756:	0a5b      	lsrs	r3, r3, #9
    7758:	e7dc      	b.n	7714 <__aeabi_d2f+0x60>
    775a:	0032      	movs	r2, r6
    775c:	3217      	adds	r2, #23
    775e:	db14      	blt.n	778a <__aeabi_d2f+0xd6>
    7760:	2280      	movs	r2, #128	; 0x80
    7762:	271e      	movs	r7, #30
    7764:	0412      	lsls	r2, r2, #16
    7766:	4313      	orrs	r3, r2
    7768:	1bbf      	subs	r7, r7, r6
    776a:	2f1f      	cmp	r7, #31
    776c:	dc0f      	bgt.n	778e <__aeabi_d2f+0xda>
    776e:	4a14      	ldr	r2, [pc, #80]	; (77c0 <__aeabi_d2f+0x10c>)
    7770:	4694      	mov	ip, r2
    7772:	4464      	add	r4, ip
    7774:	002a      	movs	r2, r5
    7776:	40a5      	lsls	r5, r4
    7778:	002e      	movs	r6, r5
    777a:	40a3      	lsls	r3, r4
    777c:	1e75      	subs	r5, r6, #1
    777e:	41ae      	sbcs	r6, r5
    7780:	40fa      	lsrs	r2, r7
    7782:	4333      	orrs	r3, r6
    7784:	4313      	orrs	r3, r2
    7786:	2600      	movs	r6, #0
    7788:	e7b0      	b.n	76ec <__aeabi_d2f+0x38>
    778a:	2400      	movs	r4, #0
    778c:	e7d5      	b.n	773a <__aeabi_d2f+0x86>
    778e:	2202      	movs	r2, #2
    7790:	4252      	negs	r2, r2
    7792:	1b96      	subs	r6, r2, r6
    7794:	001a      	movs	r2, r3
    7796:	40f2      	lsrs	r2, r6
    7798:	2f20      	cmp	r7, #32
    779a:	d009      	beq.n	77b0 <__aeabi_d2f+0xfc>
    779c:	4809      	ldr	r0, [pc, #36]	; (77c4 <__aeabi_d2f+0x110>)
    779e:	4684      	mov	ip, r0
    77a0:	4464      	add	r4, ip
    77a2:	40a3      	lsls	r3, r4
    77a4:	432b      	orrs	r3, r5
    77a6:	1e5d      	subs	r5, r3, #1
    77a8:	41ab      	sbcs	r3, r5
    77aa:	2600      	movs	r6, #0
    77ac:	4313      	orrs	r3, r2
    77ae:	e79d      	b.n	76ec <__aeabi_d2f+0x38>
    77b0:	2300      	movs	r3, #0
    77b2:	e7f7      	b.n	77a4 <__aeabi_d2f+0xf0>
    77b4:	2300      	movs	r3, #0
    77b6:	e7ad      	b.n	7714 <__aeabi_d2f+0x60>
    77b8:	0034      	movs	r4, r6
    77ba:	e7bf      	b.n	773c <__aeabi_d2f+0x88>
    77bc:	fffffc80 	.word	0xfffffc80
    77c0:	fffffc82 	.word	0xfffffc82
    77c4:	fffffca2 	.word	0xfffffca2

000077c8 <__clzsi2>:
    77c8:	211c      	movs	r1, #28
    77ca:	2301      	movs	r3, #1
    77cc:	041b      	lsls	r3, r3, #16
    77ce:	4298      	cmp	r0, r3
    77d0:	d301      	bcc.n	77d6 <__clzsi2+0xe>
    77d2:	0c00      	lsrs	r0, r0, #16
    77d4:	3910      	subs	r1, #16
    77d6:	0a1b      	lsrs	r3, r3, #8
    77d8:	4298      	cmp	r0, r3
    77da:	d301      	bcc.n	77e0 <__clzsi2+0x18>
    77dc:	0a00      	lsrs	r0, r0, #8
    77de:	3908      	subs	r1, #8
    77e0:	091b      	lsrs	r3, r3, #4
    77e2:	4298      	cmp	r0, r3
    77e4:	d301      	bcc.n	77ea <__clzsi2+0x22>
    77e6:	0900      	lsrs	r0, r0, #4
    77e8:	3904      	subs	r1, #4
    77ea:	a202      	add	r2, pc, #8	; (adr r2, 77f4 <__clzsi2+0x2c>)
    77ec:	5c10      	ldrb	r0, [r2, r0]
    77ee:	1840      	adds	r0, r0, r1
    77f0:	4770      	bx	lr
    77f2:	46c0      	nop			; (mov r8, r8)
    77f4:	02020304 	.word	0x02020304
    77f8:	01010101 	.word	0x01010101
	...

00007804 <__libc_init_array>:
    7804:	b570      	push	{r4, r5, r6, lr}
    7806:	2600      	movs	r6, #0
    7808:	4d0c      	ldr	r5, [pc, #48]	; (783c <__libc_init_array+0x38>)
    780a:	4c0d      	ldr	r4, [pc, #52]	; (7840 <__libc_init_array+0x3c>)
    780c:	1b64      	subs	r4, r4, r5
    780e:	10a4      	asrs	r4, r4, #2
    7810:	42a6      	cmp	r6, r4
    7812:	d109      	bne.n	7828 <__libc_init_array+0x24>
    7814:	2600      	movs	r6, #0
    7816:	f000 fe7f 	bl	8518 <_init>
    781a:	4d0a      	ldr	r5, [pc, #40]	; (7844 <__libc_init_array+0x40>)
    781c:	4c0a      	ldr	r4, [pc, #40]	; (7848 <__libc_init_array+0x44>)
    781e:	1b64      	subs	r4, r4, r5
    7820:	10a4      	asrs	r4, r4, #2
    7822:	42a6      	cmp	r6, r4
    7824:	d105      	bne.n	7832 <__libc_init_array+0x2e>
    7826:	bd70      	pop	{r4, r5, r6, pc}
    7828:	00b3      	lsls	r3, r6, #2
    782a:	58eb      	ldr	r3, [r5, r3]
    782c:	4798      	blx	r3
    782e:	3601      	adds	r6, #1
    7830:	e7ee      	b.n	7810 <__libc_init_array+0xc>
    7832:	00b3      	lsls	r3, r6, #2
    7834:	58eb      	ldr	r3, [r5, r3]
    7836:	4798      	blx	r3
    7838:	3601      	adds	r6, #1
    783a:	e7f2      	b.n	7822 <__libc_init_array+0x1e>
    783c:	00008524 	.word	0x00008524
    7840:	00008524 	.word	0x00008524
    7844:	00008524 	.word	0x00008524
    7848:	00008528 	.word	0x00008528

0000784c <memcpy>:
    784c:	2300      	movs	r3, #0
    784e:	b510      	push	{r4, lr}
    7850:	429a      	cmp	r2, r3
    7852:	d100      	bne.n	7856 <memcpy+0xa>
    7854:	bd10      	pop	{r4, pc}
    7856:	5ccc      	ldrb	r4, [r1, r3]
    7858:	54c4      	strb	r4, [r0, r3]
    785a:	3301      	adds	r3, #1
    785c:	e7f8      	b.n	7850 <memcpy+0x4>

0000785e <memset>:
    785e:	0003      	movs	r3, r0
    7860:	1882      	adds	r2, r0, r2
    7862:	4293      	cmp	r3, r2
    7864:	d100      	bne.n	7868 <memset+0xa>
    7866:	4770      	bx	lr
    7868:	7019      	strb	r1, [r3, #0]
    786a:	3301      	adds	r3, #1
    786c:	e7f9      	b.n	7862 <memset+0x4>
	...

00007870 <sniprintf>:
    7870:	b40c      	push	{r2, r3}
    7872:	b530      	push	{r4, r5, lr}
    7874:	4b16      	ldr	r3, [pc, #88]	; (78d0 <sniprintf+0x60>)
    7876:	b09d      	sub	sp, #116	; 0x74
    7878:	1e0c      	subs	r4, r1, #0
    787a:	681d      	ldr	r5, [r3, #0]
    787c:	da08      	bge.n	7890 <sniprintf+0x20>
    787e:	238b      	movs	r3, #139	; 0x8b
    7880:	2001      	movs	r0, #1
    7882:	602b      	str	r3, [r5, #0]
    7884:	4240      	negs	r0, r0
    7886:	b01d      	add	sp, #116	; 0x74
    7888:	bc30      	pop	{r4, r5}
    788a:	bc08      	pop	{r3}
    788c:	b002      	add	sp, #8
    788e:	4718      	bx	r3
    7890:	2382      	movs	r3, #130	; 0x82
    7892:	a902      	add	r1, sp, #8
    7894:	009b      	lsls	r3, r3, #2
    7896:	818b      	strh	r3, [r1, #12]
    7898:	2300      	movs	r3, #0
    789a:	9002      	str	r0, [sp, #8]
    789c:	6108      	str	r0, [r1, #16]
    789e:	429c      	cmp	r4, r3
    78a0:	d000      	beq.n	78a4 <sniprintf+0x34>
    78a2:	1e63      	subs	r3, r4, #1
    78a4:	608b      	str	r3, [r1, #8]
    78a6:	614b      	str	r3, [r1, #20]
    78a8:	2301      	movs	r3, #1
    78aa:	425b      	negs	r3, r3
    78ac:	81cb      	strh	r3, [r1, #14]
    78ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
    78b0:	ab21      	add	r3, sp, #132	; 0x84
    78b2:	0028      	movs	r0, r5
    78b4:	9301      	str	r3, [sp, #4]
    78b6:	f000 f891 	bl	79dc <_svfiprintf_r>
    78ba:	1c43      	adds	r3, r0, #1
    78bc:	da01      	bge.n	78c2 <sniprintf+0x52>
    78be:	238b      	movs	r3, #139	; 0x8b
    78c0:	602b      	str	r3, [r5, #0]
    78c2:	2c00      	cmp	r4, #0
    78c4:	d0df      	beq.n	7886 <sniprintf+0x16>
    78c6:	2300      	movs	r3, #0
    78c8:	9a02      	ldr	r2, [sp, #8]
    78ca:	7013      	strb	r3, [r2, #0]
    78cc:	e7db      	b.n	7886 <sniprintf+0x16>
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	20000010 	.word	0x20000010

000078d4 <siprintf>:
    78d4:	b40e      	push	{r1, r2, r3}
    78d6:	b510      	push	{r4, lr}
    78d8:	b09d      	sub	sp, #116	; 0x74
    78da:	a902      	add	r1, sp, #8
    78dc:	9002      	str	r0, [sp, #8]
    78de:	6108      	str	r0, [r1, #16]
    78e0:	480b      	ldr	r0, [pc, #44]	; (7910 <siprintf+0x3c>)
    78e2:	2482      	movs	r4, #130	; 0x82
    78e4:	6088      	str	r0, [r1, #8]
    78e6:	6148      	str	r0, [r1, #20]
    78e8:	2001      	movs	r0, #1
    78ea:	4240      	negs	r0, r0
    78ec:	ab1f      	add	r3, sp, #124	; 0x7c
    78ee:	81c8      	strh	r0, [r1, #14]
    78f0:	4808      	ldr	r0, [pc, #32]	; (7914 <siprintf+0x40>)
    78f2:	cb04      	ldmia	r3!, {r2}
    78f4:	00a4      	lsls	r4, r4, #2
    78f6:	6800      	ldr	r0, [r0, #0]
    78f8:	9301      	str	r3, [sp, #4]
    78fa:	818c      	strh	r4, [r1, #12]
    78fc:	f000 f86e 	bl	79dc <_svfiprintf_r>
    7900:	2300      	movs	r3, #0
    7902:	9a02      	ldr	r2, [sp, #8]
    7904:	7013      	strb	r3, [r2, #0]
    7906:	b01d      	add	sp, #116	; 0x74
    7908:	bc10      	pop	{r4}
    790a:	bc08      	pop	{r3}
    790c:	b003      	add	sp, #12
    790e:	4718      	bx	r3
    7910:	7fffffff 	.word	0x7fffffff
    7914:	20000010 	.word	0x20000010

00007918 <__ssputs_r>:
    7918:	b5f0      	push	{r4, r5, r6, r7, lr}
    791a:	688e      	ldr	r6, [r1, #8]
    791c:	b085      	sub	sp, #20
    791e:	0007      	movs	r7, r0
    7920:	000c      	movs	r4, r1
    7922:	9203      	str	r2, [sp, #12]
    7924:	9301      	str	r3, [sp, #4]
    7926:	429e      	cmp	r6, r3
    7928:	d839      	bhi.n	799e <__ssputs_r+0x86>
    792a:	2390      	movs	r3, #144	; 0x90
    792c:	898a      	ldrh	r2, [r1, #12]
    792e:	00db      	lsls	r3, r3, #3
    7930:	421a      	tst	r2, r3
    7932:	d034      	beq.n	799e <__ssputs_r+0x86>
    7934:	2503      	movs	r5, #3
    7936:	6909      	ldr	r1, [r1, #16]
    7938:	6823      	ldr	r3, [r4, #0]
    793a:	1a5b      	subs	r3, r3, r1
    793c:	9302      	str	r3, [sp, #8]
    793e:	6963      	ldr	r3, [r4, #20]
    7940:	9802      	ldr	r0, [sp, #8]
    7942:	435d      	muls	r5, r3
    7944:	0feb      	lsrs	r3, r5, #31
    7946:	195d      	adds	r5, r3, r5
    7948:	9b01      	ldr	r3, [sp, #4]
    794a:	106d      	asrs	r5, r5, #1
    794c:	3301      	adds	r3, #1
    794e:	181b      	adds	r3, r3, r0
    7950:	42ab      	cmp	r3, r5
    7952:	d900      	bls.n	7956 <__ssputs_r+0x3e>
    7954:	001d      	movs	r5, r3
    7956:	0553      	lsls	r3, r2, #21
    7958:	d532      	bpl.n	79c0 <__ssputs_r+0xa8>
    795a:	0029      	movs	r1, r5
    795c:	0038      	movs	r0, r7
    795e:	f000 fb31 	bl	7fc4 <_malloc_r>
    7962:	1e06      	subs	r6, r0, #0
    7964:	d109      	bne.n	797a <__ssputs_r+0x62>
    7966:	230c      	movs	r3, #12
    7968:	603b      	str	r3, [r7, #0]
    796a:	2340      	movs	r3, #64	; 0x40
    796c:	2001      	movs	r0, #1
    796e:	89a2      	ldrh	r2, [r4, #12]
    7970:	4240      	negs	r0, r0
    7972:	4313      	orrs	r3, r2
    7974:	81a3      	strh	r3, [r4, #12]
    7976:	b005      	add	sp, #20
    7978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    797a:	9a02      	ldr	r2, [sp, #8]
    797c:	6921      	ldr	r1, [r4, #16]
    797e:	f7ff ff65 	bl	784c <memcpy>
    7982:	89a3      	ldrh	r3, [r4, #12]
    7984:	4a14      	ldr	r2, [pc, #80]	; (79d8 <__ssputs_r+0xc0>)
    7986:	401a      	ands	r2, r3
    7988:	2380      	movs	r3, #128	; 0x80
    798a:	4313      	orrs	r3, r2
    798c:	81a3      	strh	r3, [r4, #12]
    798e:	9b02      	ldr	r3, [sp, #8]
    7990:	6126      	str	r6, [r4, #16]
    7992:	18f6      	adds	r6, r6, r3
    7994:	6026      	str	r6, [r4, #0]
    7996:	6165      	str	r5, [r4, #20]
    7998:	9e01      	ldr	r6, [sp, #4]
    799a:	1aed      	subs	r5, r5, r3
    799c:	60a5      	str	r5, [r4, #8]
    799e:	9b01      	ldr	r3, [sp, #4]
    79a0:	42b3      	cmp	r3, r6
    79a2:	d200      	bcs.n	79a6 <__ssputs_r+0x8e>
    79a4:	001e      	movs	r6, r3
    79a6:	0032      	movs	r2, r6
    79a8:	9903      	ldr	r1, [sp, #12]
    79aa:	6820      	ldr	r0, [r4, #0]
    79ac:	f000 faad 	bl	7f0a <memmove>
    79b0:	68a3      	ldr	r3, [r4, #8]
    79b2:	2000      	movs	r0, #0
    79b4:	1b9b      	subs	r3, r3, r6
    79b6:	60a3      	str	r3, [r4, #8]
    79b8:	6823      	ldr	r3, [r4, #0]
    79ba:	199e      	adds	r6, r3, r6
    79bc:	6026      	str	r6, [r4, #0]
    79be:	e7da      	b.n	7976 <__ssputs_r+0x5e>
    79c0:	002a      	movs	r2, r5
    79c2:	0038      	movs	r0, r7
    79c4:	f000 fb5c 	bl	8080 <_realloc_r>
    79c8:	1e06      	subs	r6, r0, #0
    79ca:	d1e0      	bne.n	798e <__ssputs_r+0x76>
    79cc:	6921      	ldr	r1, [r4, #16]
    79ce:	0038      	movs	r0, r7
    79d0:	f000 faae 	bl	7f30 <_free_r>
    79d4:	e7c7      	b.n	7966 <__ssputs_r+0x4e>
    79d6:	46c0      	nop			; (mov r8, r8)
    79d8:	fffffb7f 	.word	0xfffffb7f

000079dc <_svfiprintf_r>:
    79dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    79de:	b09f      	sub	sp, #124	; 0x7c
    79e0:	9002      	str	r0, [sp, #8]
    79e2:	9305      	str	r3, [sp, #20]
    79e4:	898b      	ldrh	r3, [r1, #12]
    79e6:	000f      	movs	r7, r1
    79e8:	0016      	movs	r6, r2
    79ea:	061b      	lsls	r3, r3, #24
    79ec:	d511      	bpl.n	7a12 <_svfiprintf_r+0x36>
    79ee:	690b      	ldr	r3, [r1, #16]
    79f0:	2b00      	cmp	r3, #0
    79f2:	d10e      	bne.n	7a12 <_svfiprintf_r+0x36>
    79f4:	2140      	movs	r1, #64	; 0x40
    79f6:	f000 fae5 	bl	7fc4 <_malloc_r>
    79fa:	6038      	str	r0, [r7, #0]
    79fc:	6138      	str	r0, [r7, #16]
    79fe:	2800      	cmp	r0, #0
    7a00:	d105      	bne.n	7a0e <_svfiprintf_r+0x32>
    7a02:	230c      	movs	r3, #12
    7a04:	9a02      	ldr	r2, [sp, #8]
    7a06:	3801      	subs	r0, #1
    7a08:	6013      	str	r3, [r2, #0]
    7a0a:	b01f      	add	sp, #124	; 0x7c
    7a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a0e:	2340      	movs	r3, #64	; 0x40
    7a10:	617b      	str	r3, [r7, #20]
    7a12:	2300      	movs	r3, #0
    7a14:	ad06      	add	r5, sp, #24
    7a16:	616b      	str	r3, [r5, #20]
    7a18:	3320      	adds	r3, #32
    7a1a:	766b      	strb	r3, [r5, #25]
    7a1c:	3310      	adds	r3, #16
    7a1e:	76ab      	strb	r3, [r5, #26]
    7a20:	0034      	movs	r4, r6
    7a22:	7823      	ldrb	r3, [r4, #0]
    7a24:	2b00      	cmp	r3, #0
    7a26:	d147      	bne.n	7ab8 <_svfiprintf_r+0xdc>
    7a28:	1ba3      	subs	r3, r4, r6
    7a2a:	9304      	str	r3, [sp, #16]
    7a2c:	d00d      	beq.n	7a4a <_svfiprintf_r+0x6e>
    7a2e:	1ba3      	subs	r3, r4, r6
    7a30:	0032      	movs	r2, r6
    7a32:	0039      	movs	r1, r7
    7a34:	9802      	ldr	r0, [sp, #8]
    7a36:	f7ff ff6f 	bl	7918 <__ssputs_r>
    7a3a:	1c43      	adds	r3, r0, #1
    7a3c:	d100      	bne.n	7a40 <_svfiprintf_r+0x64>
    7a3e:	e0b5      	b.n	7bac <_svfiprintf_r+0x1d0>
    7a40:	696a      	ldr	r2, [r5, #20]
    7a42:	9b04      	ldr	r3, [sp, #16]
    7a44:	4694      	mov	ip, r2
    7a46:	4463      	add	r3, ip
    7a48:	616b      	str	r3, [r5, #20]
    7a4a:	7823      	ldrb	r3, [r4, #0]
    7a4c:	2b00      	cmp	r3, #0
    7a4e:	d100      	bne.n	7a52 <_svfiprintf_r+0x76>
    7a50:	e0ac      	b.n	7bac <_svfiprintf_r+0x1d0>
    7a52:	2201      	movs	r2, #1
    7a54:	2300      	movs	r3, #0
    7a56:	4252      	negs	r2, r2
    7a58:	606a      	str	r2, [r5, #4]
    7a5a:	a902      	add	r1, sp, #8
    7a5c:	3254      	adds	r2, #84	; 0x54
    7a5e:	1852      	adds	r2, r2, r1
    7a60:	3401      	adds	r4, #1
    7a62:	602b      	str	r3, [r5, #0]
    7a64:	60eb      	str	r3, [r5, #12]
    7a66:	60ab      	str	r3, [r5, #8]
    7a68:	7013      	strb	r3, [r2, #0]
    7a6a:	65ab      	str	r3, [r5, #88]	; 0x58
    7a6c:	4e58      	ldr	r6, [pc, #352]	; (7bd0 <_svfiprintf_r+0x1f4>)
    7a6e:	2205      	movs	r2, #5
    7a70:	7821      	ldrb	r1, [r4, #0]
    7a72:	0030      	movs	r0, r6
    7a74:	f000 fa3e 	bl	7ef4 <memchr>
    7a78:	1c62      	adds	r2, r4, #1
    7a7a:	2800      	cmp	r0, #0
    7a7c:	d120      	bne.n	7ac0 <_svfiprintf_r+0xe4>
    7a7e:	6829      	ldr	r1, [r5, #0]
    7a80:	06cb      	lsls	r3, r1, #27
    7a82:	d504      	bpl.n	7a8e <_svfiprintf_r+0xb2>
    7a84:	2353      	movs	r3, #83	; 0x53
    7a86:	ae02      	add	r6, sp, #8
    7a88:	3020      	adds	r0, #32
    7a8a:	199b      	adds	r3, r3, r6
    7a8c:	7018      	strb	r0, [r3, #0]
    7a8e:	070b      	lsls	r3, r1, #28
    7a90:	d504      	bpl.n	7a9c <_svfiprintf_r+0xc0>
    7a92:	2353      	movs	r3, #83	; 0x53
    7a94:	202b      	movs	r0, #43	; 0x2b
    7a96:	ae02      	add	r6, sp, #8
    7a98:	199b      	adds	r3, r3, r6
    7a9a:	7018      	strb	r0, [r3, #0]
    7a9c:	7823      	ldrb	r3, [r4, #0]
    7a9e:	2b2a      	cmp	r3, #42	; 0x2a
    7aa0:	d016      	beq.n	7ad0 <_svfiprintf_r+0xf4>
    7aa2:	2000      	movs	r0, #0
    7aa4:	210a      	movs	r1, #10
    7aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7aa8:	7822      	ldrb	r2, [r4, #0]
    7aaa:	3a30      	subs	r2, #48	; 0x30
    7aac:	2a09      	cmp	r2, #9
    7aae:	d955      	bls.n	7b5c <_svfiprintf_r+0x180>
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d015      	beq.n	7ae0 <_svfiprintf_r+0x104>
    7ab4:	9309      	str	r3, [sp, #36]	; 0x24
    7ab6:	e013      	b.n	7ae0 <_svfiprintf_r+0x104>
    7ab8:	2b25      	cmp	r3, #37	; 0x25
    7aba:	d0b5      	beq.n	7a28 <_svfiprintf_r+0x4c>
    7abc:	3401      	adds	r4, #1
    7abe:	e7b0      	b.n	7a22 <_svfiprintf_r+0x46>
    7ac0:	2301      	movs	r3, #1
    7ac2:	1b80      	subs	r0, r0, r6
    7ac4:	4083      	lsls	r3, r0
    7ac6:	6829      	ldr	r1, [r5, #0]
    7ac8:	0014      	movs	r4, r2
    7aca:	430b      	orrs	r3, r1
    7acc:	602b      	str	r3, [r5, #0]
    7ace:	e7cd      	b.n	7a6c <_svfiprintf_r+0x90>
    7ad0:	9b05      	ldr	r3, [sp, #20]
    7ad2:	1d18      	adds	r0, r3, #4
    7ad4:	681b      	ldr	r3, [r3, #0]
    7ad6:	9005      	str	r0, [sp, #20]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	db39      	blt.n	7b50 <_svfiprintf_r+0x174>
    7adc:	9309      	str	r3, [sp, #36]	; 0x24
    7ade:	0014      	movs	r4, r2
    7ae0:	7823      	ldrb	r3, [r4, #0]
    7ae2:	2b2e      	cmp	r3, #46	; 0x2e
    7ae4:	d10b      	bne.n	7afe <_svfiprintf_r+0x122>
    7ae6:	7863      	ldrb	r3, [r4, #1]
    7ae8:	1c62      	adds	r2, r4, #1
    7aea:	2b2a      	cmp	r3, #42	; 0x2a
    7aec:	d13e      	bne.n	7b6c <_svfiprintf_r+0x190>
    7aee:	9b05      	ldr	r3, [sp, #20]
    7af0:	3402      	adds	r4, #2
    7af2:	1d1a      	adds	r2, r3, #4
    7af4:	681b      	ldr	r3, [r3, #0]
    7af6:	9205      	str	r2, [sp, #20]
    7af8:	2b00      	cmp	r3, #0
    7afa:	db34      	blt.n	7b66 <_svfiprintf_r+0x18a>
    7afc:	9307      	str	r3, [sp, #28]
    7afe:	4e35      	ldr	r6, [pc, #212]	; (7bd4 <_svfiprintf_r+0x1f8>)
    7b00:	7821      	ldrb	r1, [r4, #0]
    7b02:	2203      	movs	r2, #3
    7b04:	0030      	movs	r0, r6
    7b06:	f000 f9f5 	bl	7ef4 <memchr>
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d006      	beq.n	7b1c <_svfiprintf_r+0x140>
    7b0e:	2340      	movs	r3, #64	; 0x40
    7b10:	1b80      	subs	r0, r0, r6
    7b12:	4083      	lsls	r3, r0
    7b14:	682a      	ldr	r2, [r5, #0]
    7b16:	3401      	adds	r4, #1
    7b18:	4313      	orrs	r3, r2
    7b1a:	602b      	str	r3, [r5, #0]
    7b1c:	7821      	ldrb	r1, [r4, #0]
    7b1e:	2206      	movs	r2, #6
    7b20:	482d      	ldr	r0, [pc, #180]	; (7bd8 <_svfiprintf_r+0x1fc>)
    7b22:	1c66      	adds	r6, r4, #1
    7b24:	7629      	strb	r1, [r5, #24]
    7b26:	f000 f9e5 	bl	7ef4 <memchr>
    7b2a:	2800      	cmp	r0, #0
    7b2c:	d046      	beq.n	7bbc <_svfiprintf_r+0x1e0>
    7b2e:	4b2b      	ldr	r3, [pc, #172]	; (7bdc <_svfiprintf_r+0x200>)
    7b30:	2b00      	cmp	r3, #0
    7b32:	d12f      	bne.n	7b94 <_svfiprintf_r+0x1b8>
    7b34:	6829      	ldr	r1, [r5, #0]
    7b36:	9b05      	ldr	r3, [sp, #20]
    7b38:	2207      	movs	r2, #7
    7b3a:	05c9      	lsls	r1, r1, #23
    7b3c:	d528      	bpl.n	7b90 <_svfiprintf_r+0x1b4>
    7b3e:	189b      	adds	r3, r3, r2
    7b40:	4393      	bics	r3, r2
    7b42:	3308      	adds	r3, #8
    7b44:	9305      	str	r3, [sp, #20]
    7b46:	696b      	ldr	r3, [r5, #20]
    7b48:	9a03      	ldr	r2, [sp, #12]
    7b4a:	189b      	adds	r3, r3, r2
    7b4c:	616b      	str	r3, [r5, #20]
    7b4e:	e767      	b.n	7a20 <_svfiprintf_r+0x44>
    7b50:	425b      	negs	r3, r3
    7b52:	60eb      	str	r3, [r5, #12]
    7b54:	2302      	movs	r3, #2
    7b56:	430b      	orrs	r3, r1
    7b58:	602b      	str	r3, [r5, #0]
    7b5a:	e7c0      	b.n	7ade <_svfiprintf_r+0x102>
    7b5c:	434b      	muls	r3, r1
    7b5e:	3401      	adds	r4, #1
    7b60:	189b      	adds	r3, r3, r2
    7b62:	2001      	movs	r0, #1
    7b64:	e7a0      	b.n	7aa8 <_svfiprintf_r+0xcc>
    7b66:	2301      	movs	r3, #1
    7b68:	425b      	negs	r3, r3
    7b6a:	e7c7      	b.n	7afc <_svfiprintf_r+0x120>
    7b6c:	2300      	movs	r3, #0
    7b6e:	0014      	movs	r4, r2
    7b70:	200a      	movs	r0, #10
    7b72:	001a      	movs	r2, r3
    7b74:	606b      	str	r3, [r5, #4]
    7b76:	7821      	ldrb	r1, [r4, #0]
    7b78:	3930      	subs	r1, #48	; 0x30
    7b7a:	2909      	cmp	r1, #9
    7b7c:	d903      	bls.n	7b86 <_svfiprintf_r+0x1aa>
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d0bd      	beq.n	7afe <_svfiprintf_r+0x122>
    7b82:	9207      	str	r2, [sp, #28]
    7b84:	e7bb      	b.n	7afe <_svfiprintf_r+0x122>
    7b86:	4342      	muls	r2, r0
    7b88:	3401      	adds	r4, #1
    7b8a:	1852      	adds	r2, r2, r1
    7b8c:	2301      	movs	r3, #1
    7b8e:	e7f2      	b.n	7b76 <_svfiprintf_r+0x19a>
    7b90:	3307      	adds	r3, #7
    7b92:	e7d5      	b.n	7b40 <_svfiprintf_r+0x164>
    7b94:	ab05      	add	r3, sp, #20
    7b96:	9300      	str	r3, [sp, #0]
    7b98:	003a      	movs	r2, r7
    7b9a:	4b11      	ldr	r3, [pc, #68]	; (7be0 <_svfiprintf_r+0x204>)
    7b9c:	0029      	movs	r1, r5
    7b9e:	9802      	ldr	r0, [sp, #8]
    7ba0:	e000      	b.n	7ba4 <_svfiprintf_r+0x1c8>
    7ba2:	bf00      	nop
    7ba4:	9003      	str	r0, [sp, #12]
    7ba6:	9b03      	ldr	r3, [sp, #12]
    7ba8:	3301      	adds	r3, #1
    7baa:	d1cc      	bne.n	7b46 <_svfiprintf_r+0x16a>
    7bac:	89bb      	ldrh	r3, [r7, #12]
    7bae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7bb0:	065b      	lsls	r3, r3, #25
    7bb2:	d400      	bmi.n	7bb6 <_svfiprintf_r+0x1da>
    7bb4:	e729      	b.n	7a0a <_svfiprintf_r+0x2e>
    7bb6:	2001      	movs	r0, #1
    7bb8:	4240      	negs	r0, r0
    7bba:	e726      	b.n	7a0a <_svfiprintf_r+0x2e>
    7bbc:	ab05      	add	r3, sp, #20
    7bbe:	9300      	str	r3, [sp, #0]
    7bc0:	003a      	movs	r2, r7
    7bc2:	4b07      	ldr	r3, [pc, #28]	; (7be0 <_svfiprintf_r+0x204>)
    7bc4:	0029      	movs	r1, r5
    7bc6:	9802      	ldr	r0, [sp, #8]
    7bc8:	f000 f87a 	bl	7cc0 <_printf_i>
    7bcc:	e7ea      	b.n	7ba4 <_svfiprintf_r+0x1c8>
    7bce:	46c0      	nop			; (mov r8, r8)
    7bd0:	000084e4 	.word	0x000084e4
    7bd4:	000084ea 	.word	0x000084ea
    7bd8:	000084ee 	.word	0x000084ee
    7bdc:	00000000 	.word	0x00000000
    7be0:	00007919 	.word	0x00007919

00007be4 <_printf_common>:
    7be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7be6:	0015      	movs	r5, r2
    7be8:	9301      	str	r3, [sp, #4]
    7bea:	688a      	ldr	r2, [r1, #8]
    7bec:	690b      	ldr	r3, [r1, #16]
    7bee:	9000      	str	r0, [sp, #0]
    7bf0:	000c      	movs	r4, r1
    7bf2:	4293      	cmp	r3, r2
    7bf4:	da00      	bge.n	7bf8 <_printf_common+0x14>
    7bf6:	0013      	movs	r3, r2
    7bf8:	0022      	movs	r2, r4
    7bfa:	602b      	str	r3, [r5, #0]
    7bfc:	3243      	adds	r2, #67	; 0x43
    7bfe:	7812      	ldrb	r2, [r2, #0]
    7c00:	2a00      	cmp	r2, #0
    7c02:	d001      	beq.n	7c08 <_printf_common+0x24>
    7c04:	3301      	adds	r3, #1
    7c06:	602b      	str	r3, [r5, #0]
    7c08:	6823      	ldr	r3, [r4, #0]
    7c0a:	069b      	lsls	r3, r3, #26
    7c0c:	d502      	bpl.n	7c14 <_printf_common+0x30>
    7c0e:	682b      	ldr	r3, [r5, #0]
    7c10:	3302      	adds	r3, #2
    7c12:	602b      	str	r3, [r5, #0]
    7c14:	2706      	movs	r7, #6
    7c16:	6823      	ldr	r3, [r4, #0]
    7c18:	401f      	ands	r7, r3
    7c1a:	d027      	beq.n	7c6c <_printf_common+0x88>
    7c1c:	0023      	movs	r3, r4
    7c1e:	3343      	adds	r3, #67	; 0x43
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	1e5a      	subs	r2, r3, #1
    7c24:	4193      	sbcs	r3, r2
    7c26:	6822      	ldr	r2, [r4, #0]
    7c28:	0692      	lsls	r2, r2, #26
    7c2a:	d430      	bmi.n	7c8e <_printf_common+0xaa>
    7c2c:	0022      	movs	r2, r4
    7c2e:	9901      	ldr	r1, [sp, #4]
    7c30:	3243      	adds	r2, #67	; 0x43
    7c32:	9800      	ldr	r0, [sp, #0]
    7c34:	9e08      	ldr	r6, [sp, #32]
    7c36:	47b0      	blx	r6
    7c38:	1c43      	adds	r3, r0, #1
    7c3a:	d025      	beq.n	7c88 <_printf_common+0xa4>
    7c3c:	2306      	movs	r3, #6
    7c3e:	6820      	ldr	r0, [r4, #0]
    7c40:	682a      	ldr	r2, [r5, #0]
    7c42:	68e1      	ldr	r1, [r4, #12]
    7c44:	4003      	ands	r3, r0
    7c46:	2500      	movs	r5, #0
    7c48:	2b04      	cmp	r3, #4
    7c4a:	d103      	bne.n	7c54 <_printf_common+0x70>
    7c4c:	1a8d      	subs	r5, r1, r2
    7c4e:	43eb      	mvns	r3, r5
    7c50:	17db      	asrs	r3, r3, #31
    7c52:	401d      	ands	r5, r3
    7c54:	68a3      	ldr	r3, [r4, #8]
    7c56:	6922      	ldr	r2, [r4, #16]
    7c58:	4293      	cmp	r3, r2
    7c5a:	dd01      	ble.n	7c60 <_printf_common+0x7c>
    7c5c:	1a9b      	subs	r3, r3, r2
    7c5e:	18ed      	adds	r5, r5, r3
    7c60:	2700      	movs	r7, #0
    7c62:	42bd      	cmp	r5, r7
    7c64:	d120      	bne.n	7ca8 <_printf_common+0xc4>
    7c66:	2000      	movs	r0, #0
    7c68:	e010      	b.n	7c8c <_printf_common+0xa8>
    7c6a:	3701      	adds	r7, #1
    7c6c:	68e3      	ldr	r3, [r4, #12]
    7c6e:	682a      	ldr	r2, [r5, #0]
    7c70:	1a9b      	subs	r3, r3, r2
    7c72:	429f      	cmp	r7, r3
    7c74:	dad2      	bge.n	7c1c <_printf_common+0x38>
    7c76:	0022      	movs	r2, r4
    7c78:	2301      	movs	r3, #1
    7c7a:	3219      	adds	r2, #25
    7c7c:	9901      	ldr	r1, [sp, #4]
    7c7e:	9800      	ldr	r0, [sp, #0]
    7c80:	9e08      	ldr	r6, [sp, #32]
    7c82:	47b0      	blx	r6
    7c84:	1c43      	adds	r3, r0, #1
    7c86:	d1f0      	bne.n	7c6a <_printf_common+0x86>
    7c88:	2001      	movs	r0, #1
    7c8a:	4240      	negs	r0, r0
    7c8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c8e:	2030      	movs	r0, #48	; 0x30
    7c90:	18e1      	adds	r1, r4, r3
    7c92:	3143      	adds	r1, #67	; 0x43
    7c94:	7008      	strb	r0, [r1, #0]
    7c96:	0021      	movs	r1, r4
    7c98:	1c5a      	adds	r2, r3, #1
    7c9a:	3145      	adds	r1, #69	; 0x45
    7c9c:	7809      	ldrb	r1, [r1, #0]
    7c9e:	18a2      	adds	r2, r4, r2
    7ca0:	3243      	adds	r2, #67	; 0x43
    7ca2:	3302      	adds	r3, #2
    7ca4:	7011      	strb	r1, [r2, #0]
    7ca6:	e7c1      	b.n	7c2c <_printf_common+0x48>
    7ca8:	0022      	movs	r2, r4
    7caa:	2301      	movs	r3, #1
    7cac:	321a      	adds	r2, #26
    7cae:	9901      	ldr	r1, [sp, #4]
    7cb0:	9800      	ldr	r0, [sp, #0]
    7cb2:	9e08      	ldr	r6, [sp, #32]
    7cb4:	47b0      	blx	r6
    7cb6:	1c43      	adds	r3, r0, #1
    7cb8:	d0e6      	beq.n	7c88 <_printf_common+0xa4>
    7cba:	3701      	adds	r7, #1
    7cbc:	e7d1      	b.n	7c62 <_printf_common+0x7e>
	...

00007cc0 <_printf_i>:
    7cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cc2:	b08b      	sub	sp, #44	; 0x2c
    7cc4:	9206      	str	r2, [sp, #24]
    7cc6:	000a      	movs	r2, r1
    7cc8:	3243      	adds	r2, #67	; 0x43
    7cca:	9307      	str	r3, [sp, #28]
    7ccc:	9005      	str	r0, [sp, #20]
    7cce:	9204      	str	r2, [sp, #16]
    7cd0:	7e0a      	ldrb	r2, [r1, #24]
    7cd2:	000c      	movs	r4, r1
    7cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7cd6:	2a6e      	cmp	r2, #110	; 0x6e
    7cd8:	d100      	bne.n	7cdc <_printf_i+0x1c>
    7cda:	e08f      	b.n	7dfc <_printf_i+0x13c>
    7cdc:	d817      	bhi.n	7d0e <_printf_i+0x4e>
    7cde:	2a63      	cmp	r2, #99	; 0x63
    7ce0:	d02c      	beq.n	7d3c <_printf_i+0x7c>
    7ce2:	d808      	bhi.n	7cf6 <_printf_i+0x36>
    7ce4:	2a00      	cmp	r2, #0
    7ce6:	d100      	bne.n	7cea <_printf_i+0x2a>
    7ce8:	e099      	b.n	7e1e <_printf_i+0x15e>
    7cea:	2a58      	cmp	r2, #88	; 0x58
    7cec:	d054      	beq.n	7d98 <_printf_i+0xd8>
    7cee:	0026      	movs	r6, r4
    7cf0:	3642      	adds	r6, #66	; 0x42
    7cf2:	7032      	strb	r2, [r6, #0]
    7cf4:	e029      	b.n	7d4a <_printf_i+0x8a>
    7cf6:	2a64      	cmp	r2, #100	; 0x64
    7cf8:	d001      	beq.n	7cfe <_printf_i+0x3e>
    7cfa:	2a69      	cmp	r2, #105	; 0x69
    7cfc:	d1f7      	bne.n	7cee <_printf_i+0x2e>
    7cfe:	6821      	ldr	r1, [r4, #0]
    7d00:	681a      	ldr	r2, [r3, #0]
    7d02:	0608      	lsls	r0, r1, #24
    7d04:	d523      	bpl.n	7d4e <_printf_i+0x8e>
    7d06:	1d11      	adds	r1, r2, #4
    7d08:	6019      	str	r1, [r3, #0]
    7d0a:	6815      	ldr	r5, [r2, #0]
    7d0c:	e025      	b.n	7d5a <_printf_i+0x9a>
    7d0e:	2a73      	cmp	r2, #115	; 0x73
    7d10:	d100      	bne.n	7d14 <_printf_i+0x54>
    7d12:	e088      	b.n	7e26 <_printf_i+0x166>
    7d14:	d808      	bhi.n	7d28 <_printf_i+0x68>
    7d16:	2a6f      	cmp	r2, #111	; 0x6f
    7d18:	d029      	beq.n	7d6e <_printf_i+0xae>
    7d1a:	2a70      	cmp	r2, #112	; 0x70
    7d1c:	d1e7      	bne.n	7cee <_printf_i+0x2e>
    7d1e:	2220      	movs	r2, #32
    7d20:	6809      	ldr	r1, [r1, #0]
    7d22:	430a      	orrs	r2, r1
    7d24:	6022      	str	r2, [r4, #0]
    7d26:	e003      	b.n	7d30 <_printf_i+0x70>
    7d28:	2a75      	cmp	r2, #117	; 0x75
    7d2a:	d020      	beq.n	7d6e <_printf_i+0xae>
    7d2c:	2a78      	cmp	r2, #120	; 0x78
    7d2e:	d1de      	bne.n	7cee <_printf_i+0x2e>
    7d30:	0022      	movs	r2, r4
    7d32:	2178      	movs	r1, #120	; 0x78
    7d34:	3245      	adds	r2, #69	; 0x45
    7d36:	7011      	strb	r1, [r2, #0]
    7d38:	4a6c      	ldr	r2, [pc, #432]	; (7eec <_printf_i+0x22c>)
    7d3a:	e030      	b.n	7d9e <_printf_i+0xde>
    7d3c:	000e      	movs	r6, r1
    7d3e:	681a      	ldr	r2, [r3, #0]
    7d40:	3642      	adds	r6, #66	; 0x42
    7d42:	1d11      	adds	r1, r2, #4
    7d44:	6019      	str	r1, [r3, #0]
    7d46:	6813      	ldr	r3, [r2, #0]
    7d48:	7033      	strb	r3, [r6, #0]
    7d4a:	2301      	movs	r3, #1
    7d4c:	e079      	b.n	7e42 <_printf_i+0x182>
    7d4e:	0649      	lsls	r1, r1, #25
    7d50:	d5d9      	bpl.n	7d06 <_printf_i+0x46>
    7d52:	1d11      	adds	r1, r2, #4
    7d54:	6019      	str	r1, [r3, #0]
    7d56:	2300      	movs	r3, #0
    7d58:	5ed5      	ldrsh	r5, [r2, r3]
    7d5a:	2d00      	cmp	r5, #0
    7d5c:	da03      	bge.n	7d66 <_printf_i+0xa6>
    7d5e:	232d      	movs	r3, #45	; 0x2d
    7d60:	9a04      	ldr	r2, [sp, #16]
    7d62:	426d      	negs	r5, r5
    7d64:	7013      	strb	r3, [r2, #0]
    7d66:	4b62      	ldr	r3, [pc, #392]	; (7ef0 <_printf_i+0x230>)
    7d68:	270a      	movs	r7, #10
    7d6a:	9303      	str	r3, [sp, #12]
    7d6c:	e02f      	b.n	7dce <_printf_i+0x10e>
    7d6e:	6820      	ldr	r0, [r4, #0]
    7d70:	6819      	ldr	r1, [r3, #0]
    7d72:	0605      	lsls	r5, r0, #24
    7d74:	d503      	bpl.n	7d7e <_printf_i+0xbe>
    7d76:	1d08      	adds	r0, r1, #4
    7d78:	6018      	str	r0, [r3, #0]
    7d7a:	680d      	ldr	r5, [r1, #0]
    7d7c:	e005      	b.n	7d8a <_printf_i+0xca>
    7d7e:	0640      	lsls	r0, r0, #25
    7d80:	d5f9      	bpl.n	7d76 <_printf_i+0xb6>
    7d82:	680d      	ldr	r5, [r1, #0]
    7d84:	1d08      	adds	r0, r1, #4
    7d86:	6018      	str	r0, [r3, #0]
    7d88:	b2ad      	uxth	r5, r5
    7d8a:	4b59      	ldr	r3, [pc, #356]	; (7ef0 <_printf_i+0x230>)
    7d8c:	2708      	movs	r7, #8
    7d8e:	9303      	str	r3, [sp, #12]
    7d90:	2a6f      	cmp	r2, #111	; 0x6f
    7d92:	d018      	beq.n	7dc6 <_printf_i+0x106>
    7d94:	270a      	movs	r7, #10
    7d96:	e016      	b.n	7dc6 <_printf_i+0x106>
    7d98:	3145      	adds	r1, #69	; 0x45
    7d9a:	700a      	strb	r2, [r1, #0]
    7d9c:	4a54      	ldr	r2, [pc, #336]	; (7ef0 <_printf_i+0x230>)
    7d9e:	9203      	str	r2, [sp, #12]
    7da0:	681a      	ldr	r2, [r3, #0]
    7da2:	6821      	ldr	r1, [r4, #0]
    7da4:	1d10      	adds	r0, r2, #4
    7da6:	6018      	str	r0, [r3, #0]
    7da8:	6815      	ldr	r5, [r2, #0]
    7daa:	0608      	lsls	r0, r1, #24
    7dac:	d522      	bpl.n	7df4 <_printf_i+0x134>
    7dae:	07cb      	lsls	r3, r1, #31
    7db0:	d502      	bpl.n	7db8 <_printf_i+0xf8>
    7db2:	2320      	movs	r3, #32
    7db4:	4319      	orrs	r1, r3
    7db6:	6021      	str	r1, [r4, #0]
    7db8:	2710      	movs	r7, #16
    7dba:	2d00      	cmp	r5, #0
    7dbc:	d103      	bne.n	7dc6 <_printf_i+0x106>
    7dbe:	2320      	movs	r3, #32
    7dc0:	6822      	ldr	r2, [r4, #0]
    7dc2:	439a      	bics	r2, r3
    7dc4:	6022      	str	r2, [r4, #0]
    7dc6:	0023      	movs	r3, r4
    7dc8:	2200      	movs	r2, #0
    7dca:	3343      	adds	r3, #67	; 0x43
    7dcc:	701a      	strb	r2, [r3, #0]
    7dce:	6863      	ldr	r3, [r4, #4]
    7dd0:	60a3      	str	r3, [r4, #8]
    7dd2:	2b00      	cmp	r3, #0
    7dd4:	db5c      	blt.n	7e90 <_printf_i+0x1d0>
    7dd6:	2204      	movs	r2, #4
    7dd8:	6821      	ldr	r1, [r4, #0]
    7dda:	4391      	bics	r1, r2
    7ddc:	6021      	str	r1, [r4, #0]
    7dde:	2d00      	cmp	r5, #0
    7de0:	d158      	bne.n	7e94 <_printf_i+0x1d4>
    7de2:	9e04      	ldr	r6, [sp, #16]
    7de4:	2b00      	cmp	r3, #0
    7de6:	d064      	beq.n	7eb2 <_printf_i+0x1f2>
    7de8:	0026      	movs	r6, r4
    7dea:	9b03      	ldr	r3, [sp, #12]
    7dec:	3642      	adds	r6, #66	; 0x42
    7dee:	781b      	ldrb	r3, [r3, #0]
    7df0:	7033      	strb	r3, [r6, #0]
    7df2:	e05e      	b.n	7eb2 <_printf_i+0x1f2>
    7df4:	0648      	lsls	r0, r1, #25
    7df6:	d5da      	bpl.n	7dae <_printf_i+0xee>
    7df8:	b2ad      	uxth	r5, r5
    7dfa:	e7d8      	b.n	7dae <_printf_i+0xee>
    7dfc:	6809      	ldr	r1, [r1, #0]
    7dfe:	681a      	ldr	r2, [r3, #0]
    7e00:	0608      	lsls	r0, r1, #24
    7e02:	d505      	bpl.n	7e10 <_printf_i+0x150>
    7e04:	1d11      	adds	r1, r2, #4
    7e06:	6019      	str	r1, [r3, #0]
    7e08:	6813      	ldr	r3, [r2, #0]
    7e0a:	6962      	ldr	r2, [r4, #20]
    7e0c:	601a      	str	r2, [r3, #0]
    7e0e:	e006      	b.n	7e1e <_printf_i+0x15e>
    7e10:	0649      	lsls	r1, r1, #25
    7e12:	d5f7      	bpl.n	7e04 <_printf_i+0x144>
    7e14:	1d11      	adds	r1, r2, #4
    7e16:	6019      	str	r1, [r3, #0]
    7e18:	6813      	ldr	r3, [r2, #0]
    7e1a:	8aa2      	ldrh	r2, [r4, #20]
    7e1c:	801a      	strh	r2, [r3, #0]
    7e1e:	2300      	movs	r3, #0
    7e20:	9e04      	ldr	r6, [sp, #16]
    7e22:	6123      	str	r3, [r4, #16]
    7e24:	e054      	b.n	7ed0 <_printf_i+0x210>
    7e26:	681a      	ldr	r2, [r3, #0]
    7e28:	1d11      	adds	r1, r2, #4
    7e2a:	6019      	str	r1, [r3, #0]
    7e2c:	6816      	ldr	r6, [r2, #0]
    7e2e:	2100      	movs	r1, #0
    7e30:	6862      	ldr	r2, [r4, #4]
    7e32:	0030      	movs	r0, r6
    7e34:	f000 f85e 	bl	7ef4 <memchr>
    7e38:	2800      	cmp	r0, #0
    7e3a:	d001      	beq.n	7e40 <_printf_i+0x180>
    7e3c:	1b80      	subs	r0, r0, r6
    7e3e:	6060      	str	r0, [r4, #4]
    7e40:	6863      	ldr	r3, [r4, #4]
    7e42:	6123      	str	r3, [r4, #16]
    7e44:	2300      	movs	r3, #0
    7e46:	9a04      	ldr	r2, [sp, #16]
    7e48:	7013      	strb	r3, [r2, #0]
    7e4a:	e041      	b.n	7ed0 <_printf_i+0x210>
    7e4c:	6923      	ldr	r3, [r4, #16]
    7e4e:	0032      	movs	r2, r6
    7e50:	9906      	ldr	r1, [sp, #24]
    7e52:	9805      	ldr	r0, [sp, #20]
    7e54:	9d07      	ldr	r5, [sp, #28]
    7e56:	47a8      	blx	r5
    7e58:	1c43      	adds	r3, r0, #1
    7e5a:	d043      	beq.n	7ee4 <_printf_i+0x224>
    7e5c:	6823      	ldr	r3, [r4, #0]
    7e5e:	2500      	movs	r5, #0
    7e60:	079b      	lsls	r3, r3, #30
    7e62:	d40f      	bmi.n	7e84 <_printf_i+0x1c4>
    7e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e66:	68e0      	ldr	r0, [r4, #12]
    7e68:	4298      	cmp	r0, r3
    7e6a:	da3d      	bge.n	7ee8 <_printf_i+0x228>
    7e6c:	0018      	movs	r0, r3
    7e6e:	e03b      	b.n	7ee8 <_printf_i+0x228>
    7e70:	0022      	movs	r2, r4
    7e72:	2301      	movs	r3, #1
    7e74:	3219      	adds	r2, #25
    7e76:	9906      	ldr	r1, [sp, #24]
    7e78:	9805      	ldr	r0, [sp, #20]
    7e7a:	9e07      	ldr	r6, [sp, #28]
    7e7c:	47b0      	blx	r6
    7e7e:	1c43      	adds	r3, r0, #1
    7e80:	d030      	beq.n	7ee4 <_printf_i+0x224>
    7e82:	3501      	adds	r5, #1
    7e84:	68e3      	ldr	r3, [r4, #12]
    7e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e88:	1a9b      	subs	r3, r3, r2
    7e8a:	429d      	cmp	r5, r3
    7e8c:	dbf0      	blt.n	7e70 <_printf_i+0x1b0>
    7e8e:	e7e9      	b.n	7e64 <_printf_i+0x1a4>
    7e90:	2d00      	cmp	r5, #0
    7e92:	d0a9      	beq.n	7de8 <_printf_i+0x128>
    7e94:	9e04      	ldr	r6, [sp, #16]
    7e96:	0028      	movs	r0, r5
    7e98:	0039      	movs	r1, r7
    7e9a:	f7fc fea7 	bl	4bec <__aeabi_uidivmod>
    7e9e:	9b03      	ldr	r3, [sp, #12]
    7ea0:	3e01      	subs	r6, #1
    7ea2:	5c5b      	ldrb	r3, [r3, r1]
    7ea4:	0028      	movs	r0, r5
    7ea6:	7033      	strb	r3, [r6, #0]
    7ea8:	0039      	movs	r1, r7
    7eaa:	f7fc fe19 	bl	4ae0 <__udivsi3>
    7eae:	1e05      	subs	r5, r0, #0
    7eb0:	d1f1      	bne.n	7e96 <_printf_i+0x1d6>
    7eb2:	2f08      	cmp	r7, #8
    7eb4:	d109      	bne.n	7eca <_printf_i+0x20a>
    7eb6:	6823      	ldr	r3, [r4, #0]
    7eb8:	07db      	lsls	r3, r3, #31
    7eba:	d506      	bpl.n	7eca <_printf_i+0x20a>
    7ebc:	6863      	ldr	r3, [r4, #4]
    7ebe:	6922      	ldr	r2, [r4, #16]
    7ec0:	4293      	cmp	r3, r2
    7ec2:	dc02      	bgt.n	7eca <_printf_i+0x20a>
    7ec4:	2330      	movs	r3, #48	; 0x30
    7ec6:	3e01      	subs	r6, #1
    7ec8:	7033      	strb	r3, [r6, #0]
    7eca:	9b04      	ldr	r3, [sp, #16]
    7ecc:	1b9b      	subs	r3, r3, r6
    7ece:	6123      	str	r3, [r4, #16]
    7ed0:	9b07      	ldr	r3, [sp, #28]
    7ed2:	aa09      	add	r2, sp, #36	; 0x24
    7ed4:	9300      	str	r3, [sp, #0]
    7ed6:	0021      	movs	r1, r4
    7ed8:	9b06      	ldr	r3, [sp, #24]
    7eda:	9805      	ldr	r0, [sp, #20]
    7edc:	f7ff fe82 	bl	7be4 <_printf_common>
    7ee0:	1c43      	adds	r3, r0, #1
    7ee2:	d1b3      	bne.n	7e4c <_printf_i+0x18c>
    7ee4:	2001      	movs	r0, #1
    7ee6:	4240      	negs	r0, r0
    7ee8:	b00b      	add	sp, #44	; 0x2c
    7eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7eec:	00008506 	.word	0x00008506
    7ef0:	000084f5 	.word	0x000084f5

00007ef4 <memchr>:
    7ef4:	b2c9      	uxtb	r1, r1
    7ef6:	1882      	adds	r2, r0, r2
    7ef8:	4290      	cmp	r0, r2
    7efa:	d101      	bne.n	7f00 <memchr+0xc>
    7efc:	2000      	movs	r0, #0
    7efe:	4770      	bx	lr
    7f00:	7803      	ldrb	r3, [r0, #0]
    7f02:	428b      	cmp	r3, r1
    7f04:	d0fb      	beq.n	7efe <memchr+0xa>
    7f06:	3001      	adds	r0, #1
    7f08:	e7f6      	b.n	7ef8 <memchr+0x4>

00007f0a <memmove>:
    7f0a:	b510      	push	{r4, lr}
    7f0c:	4288      	cmp	r0, r1
    7f0e:	d902      	bls.n	7f16 <memmove+0xc>
    7f10:	188b      	adds	r3, r1, r2
    7f12:	4298      	cmp	r0, r3
    7f14:	d308      	bcc.n	7f28 <memmove+0x1e>
    7f16:	2300      	movs	r3, #0
    7f18:	429a      	cmp	r2, r3
    7f1a:	d007      	beq.n	7f2c <memmove+0x22>
    7f1c:	5ccc      	ldrb	r4, [r1, r3]
    7f1e:	54c4      	strb	r4, [r0, r3]
    7f20:	3301      	adds	r3, #1
    7f22:	e7f9      	b.n	7f18 <memmove+0xe>
    7f24:	5c8b      	ldrb	r3, [r1, r2]
    7f26:	5483      	strb	r3, [r0, r2]
    7f28:	3a01      	subs	r2, #1
    7f2a:	d2fb      	bcs.n	7f24 <memmove+0x1a>
    7f2c:	bd10      	pop	{r4, pc}
	...

00007f30 <_free_r>:
    7f30:	b570      	push	{r4, r5, r6, lr}
    7f32:	0005      	movs	r5, r0
    7f34:	2900      	cmp	r1, #0
    7f36:	d010      	beq.n	7f5a <_free_r+0x2a>
    7f38:	1f0c      	subs	r4, r1, #4
    7f3a:	6823      	ldr	r3, [r4, #0]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	da00      	bge.n	7f42 <_free_r+0x12>
    7f40:	18e4      	adds	r4, r4, r3
    7f42:	0028      	movs	r0, r5
    7f44:	f000 f8d4 	bl	80f0 <__malloc_lock>
    7f48:	4a1d      	ldr	r2, [pc, #116]	; (7fc0 <_free_r+0x90>)
    7f4a:	6813      	ldr	r3, [r2, #0]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d105      	bne.n	7f5c <_free_r+0x2c>
    7f50:	6063      	str	r3, [r4, #4]
    7f52:	6014      	str	r4, [r2, #0]
    7f54:	0028      	movs	r0, r5
    7f56:	f000 f8cc 	bl	80f2 <__malloc_unlock>
    7f5a:	bd70      	pop	{r4, r5, r6, pc}
    7f5c:	42a3      	cmp	r3, r4
    7f5e:	d909      	bls.n	7f74 <_free_r+0x44>
    7f60:	6821      	ldr	r1, [r4, #0]
    7f62:	1860      	adds	r0, r4, r1
    7f64:	4283      	cmp	r3, r0
    7f66:	d1f3      	bne.n	7f50 <_free_r+0x20>
    7f68:	6818      	ldr	r0, [r3, #0]
    7f6a:	685b      	ldr	r3, [r3, #4]
    7f6c:	1841      	adds	r1, r0, r1
    7f6e:	6021      	str	r1, [r4, #0]
    7f70:	e7ee      	b.n	7f50 <_free_r+0x20>
    7f72:	0013      	movs	r3, r2
    7f74:	685a      	ldr	r2, [r3, #4]
    7f76:	2a00      	cmp	r2, #0
    7f78:	d001      	beq.n	7f7e <_free_r+0x4e>
    7f7a:	42a2      	cmp	r2, r4
    7f7c:	d9f9      	bls.n	7f72 <_free_r+0x42>
    7f7e:	6819      	ldr	r1, [r3, #0]
    7f80:	1858      	adds	r0, r3, r1
    7f82:	42a0      	cmp	r0, r4
    7f84:	d10b      	bne.n	7f9e <_free_r+0x6e>
    7f86:	6820      	ldr	r0, [r4, #0]
    7f88:	1809      	adds	r1, r1, r0
    7f8a:	1858      	adds	r0, r3, r1
    7f8c:	6019      	str	r1, [r3, #0]
    7f8e:	4282      	cmp	r2, r0
    7f90:	d1e0      	bne.n	7f54 <_free_r+0x24>
    7f92:	6810      	ldr	r0, [r2, #0]
    7f94:	6852      	ldr	r2, [r2, #4]
    7f96:	1841      	adds	r1, r0, r1
    7f98:	6019      	str	r1, [r3, #0]
    7f9a:	605a      	str	r2, [r3, #4]
    7f9c:	e7da      	b.n	7f54 <_free_r+0x24>
    7f9e:	42a0      	cmp	r0, r4
    7fa0:	d902      	bls.n	7fa8 <_free_r+0x78>
    7fa2:	230c      	movs	r3, #12
    7fa4:	602b      	str	r3, [r5, #0]
    7fa6:	e7d5      	b.n	7f54 <_free_r+0x24>
    7fa8:	6821      	ldr	r1, [r4, #0]
    7faa:	1860      	adds	r0, r4, r1
    7fac:	4282      	cmp	r2, r0
    7fae:	d103      	bne.n	7fb8 <_free_r+0x88>
    7fb0:	6810      	ldr	r0, [r2, #0]
    7fb2:	6852      	ldr	r2, [r2, #4]
    7fb4:	1841      	adds	r1, r0, r1
    7fb6:	6021      	str	r1, [r4, #0]
    7fb8:	6062      	str	r2, [r4, #4]
    7fba:	605c      	str	r4, [r3, #4]
    7fbc:	e7ca      	b.n	7f54 <_free_r+0x24>
    7fbe:	46c0      	nop			; (mov r8, r8)
    7fc0:	200052ec 	.word	0x200052ec

00007fc4 <_malloc_r>:
    7fc4:	2303      	movs	r3, #3
    7fc6:	b570      	push	{r4, r5, r6, lr}
    7fc8:	1ccd      	adds	r5, r1, #3
    7fca:	439d      	bics	r5, r3
    7fcc:	3508      	adds	r5, #8
    7fce:	0006      	movs	r6, r0
    7fd0:	2d0c      	cmp	r5, #12
    7fd2:	d21e      	bcs.n	8012 <_malloc_r+0x4e>
    7fd4:	250c      	movs	r5, #12
    7fd6:	42a9      	cmp	r1, r5
    7fd8:	d81d      	bhi.n	8016 <_malloc_r+0x52>
    7fda:	0030      	movs	r0, r6
    7fdc:	f000 f888 	bl	80f0 <__malloc_lock>
    7fe0:	4a25      	ldr	r2, [pc, #148]	; (8078 <_malloc_r+0xb4>)
    7fe2:	6814      	ldr	r4, [r2, #0]
    7fe4:	0021      	movs	r1, r4
    7fe6:	2900      	cmp	r1, #0
    7fe8:	d119      	bne.n	801e <_malloc_r+0x5a>
    7fea:	4c24      	ldr	r4, [pc, #144]	; (807c <_malloc_r+0xb8>)
    7fec:	6823      	ldr	r3, [r4, #0]
    7fee:	2b00      	cmp	r3, #0
    7ff0:	d103      	bne.n	7ffa <_malloc_r+0x36>
    7ff2:	0030      	movs	r0, r6
    7ff4:	f000 f86a 	bl	80cc <_sbrk_r>
    7ff8:	6020      	str	r0, [r4, #0]
    7ffa:	0029      	movs	r1, r5
    7ffc:	0030      	movs	r0, r6
    7ffe:	f000 f865 	bl	80cc <_sbrk_r>
    8002:	1c43      	adds	r3, r0, #1
    8004:	d12c      	bne.n	8060 <_malloc_r+0x9c>
    8006:	230c      	movs	r3, #12
    8008:	0030      	movs	r0, r6
    800a:	6033      	str	r3, [r6, #0]
    800c:	f000 f871 	bl	80f2 <__malloc_unlock>
    8010:	e003      	b.n	801a <_malloc_r+0x56>
    8012:	2d00      	cmp	r5, #0
    8014:	dadf      	bge.n	7fd6 <_malloc_r+0x12>
    8016:	230c      	movs	r3, #12
    8018:	6033      	str	r3, [r6, #0]
    801a:	2000      	movs	r0, #0
    801c:	bd70      	pop	{r4, r5, r6, pc}
    801e:	680b      	ldr	r3, [r1, #0]
    8020:	1b5b      	subs	r3, r3, r5
    8022:	d41a      	bmi.n	805a <_malloc_r+0x96>
    8024:	2b0b      	cmp	r3, #11
    8026:	d903      	bls.n	8030 <_malloc_r+0x6c>
    8028:	600b      	str	r3, [r1, #0]
    802a:	18cc      	adds	r4, r1, r3
    802c:	6025      	str	r5, [r4, #0]
    802e:	e003      	b.n	8038 <_malloc_r+0x74>
    8030:	428c      	cmp	r4, r1
    8032:	d10e      	bne.n	8052 <_malloc_r+0x8e>
    8034:	6863      	ldr	r3, [r4, #4]
    8036:	6013      	str	r3, [r2, #0]
    8038:	0030      	movs	r0, r6
    803a:	f000 f85a 	bl	80f2 <__malloc_unlock>
    803e:	0020      	movs	r0, r4
    8040:	2207      	movs	r2, #7
    8042:	300b      	adds	r0, #11
    8044:	1d23      	adds	r3, r4, #4
    8046:	4390      	bics	r0, r2
    8048:	1ac3      	subs	r3, r0, r3
    804a:	d0e7      	beq.n	801c <_malloc_r+0x58>
    804c:	425a      	negs	r2, r3
    804e:	50e2      	str	r2, [r4, r3]
    8050:	e7e4      	b.n	801c <_malloc_r+0x58>
    8052:	684b      	ldr	r3, [r1, #4]
    8054:	6063      	str	r3, [r4, #4]
    8056:	000c      	movs	r4, r1
    8058:	e7ee      	b.n	8038 <_malloc_r+0x74>
    805a:	000c      	movs	r4, r1
    805c:	6849      	ldr	r1, [r1, #4]
    805e:	e7c2      	b.n	7fe6 <_malloc_r+0x22>
    8060:	2303      	movs	r3, #3
    8062:	1cc4      	adds	r4, r0, #3
    8064:	439c      	bics	r4, r3
    8066:	42a0      	cmp	r0, r4
    8068:	d0e0      	beq.n	802c <_malloc_r+0x68>
    806a:	1a21      	subs	r1, r4, r0
    806c:	0030      	movs	r0, r6
    806e:	f000 f82d 	bl	80cc <_sbrk_r>
    8072:	1c43      	adds	r3, r0, #1
    8074:	d1da      	bne.n	802c <_malloc_r+0x68>
    8076:	e7c6      	b.n	8006 <_malloc_r+0x42>
    8078:	200052ec 	.word	0x200052ec
    807c:	200052f0 	.word	0x200052f0

00008080 <_realloc_r>:
    8080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8082:	0007      	movs	r7, r0
    8084:	000d      	movs	r5, r1
    8086:	0016      	movs	r6, r2
    8088:	2900      	cmp	r1, #0
    808a:	d105      	bne.n	8098 <_realloc_r+0x18>
    808c:	0011      	movs	r1, r2
    808e:	f7ff ff99 	bl	7fc4 <_malloc_r>
    8092:	0004      	movs	r4, r0
    8094:	0020      	movs	r0, r4
    8096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8098:	2a00      	cmp	r2, #0
    809a:	d103      	bne.n	80a4 <_realloc_r+0x24>
    809c:	f7ff ff48 	bl	7f30 <_free_r>
    80a0:	0034      	movs	r4, r6
    80a2:	e7f7      	b.n	8094 <_realloc_r+0x14>
    80a4:	f000 f826 	bl	80f4 <_malloc_usable_size_r>
    80a8:	002c      	movs	r4, r5
    80aa:	4286      	cmp	r6, r0
    80ac:	d9f2      	bls.n	8094 <_realloc_r+0x14>
    80ae:	0031      	movs	r1, r6
    80b0:	0038      	movs	r0, r7
    80b2:	f7ff ff87 	bl	7fc4 <_malloc_r>
    80b6:	1e04      	subs	r4, r0, #0
    80b8:	d0ec      	beq.n	8094 <_realloc_r+0x14>
    80ba:	0029      	movs	r1, r5
    80bc:	0032      	movs	r2, r6
    80be:	f7ff fbc5 	bl	784c <memcpy>
    80c2:	0029      	movs	r1, r5
    80c4:	0038      	movs	r0, r7
    80c6:	f7ff ff33 	bl	7f30 <_free_r>
    80ca:	e7e3      	b.n	8094 <_realloc_r+0x14>

000080cc <_sbrk_r>:
    80cc:	2300      	movs	r3, #0
    80ce:	b570      	push	{r4, r5, r6, lr}
    80d0:	4c06      	ldr	r4, [pc, #24]	; (80ec <_sbrk_r+0x20>)
    80d2:	0005      	movs	r5, r0
    80d4:	0008      	movs	r0, r1
    80d6:	6023      	str	r3, [r4, #0]
    80d8:	f7fc fca8 	bl	4a2c <_sbrk>
    80dc:	1c43      	adds	r3, r0, #1
    80de:	d103      	bne.n	80e8 <_sbrk_r+0x1c>
    80e0:	6823      	ldr	r3, [r4, #0]
    80e2:	2b00      	cmp	r3, #0
    80e4:	d000      	beq.n	80e8 <_sbrk_r+0x1c>
    80e6:	602b      	str	r3, [r5, #0]
    80e8:	bd70      	pop	{r4, r5, r6, pc}
    80ea:	46c0      	nop			; (mov r8, r8)
    80ec:	20005358 	.word	0x20005358

000080f0 <__malloc_lock>:
    80f0:	4770      	bx	lr

000080f2 <__malloc_unlock>:
    80f2:	4770      	bx	lr

000080f4 <_malloc_usable_size_r>:
    80f4:	1f0b      	subs	r3, r1, #4
    80f6:	681b      	ldr	r3, [r3, #0]
    80f8:	1f18      	subs	r0, r3, #4
    80fa:	2b00      	cmp	r3, #0
    80fc:	da01      	bge.n	8102 <_malloc_usable_size_r+0xe>
    80fe:	580b      	ldr	r3, [r1, r0]
    8100:	18c0      	adds	r0, r0, r3
    8102:	4770      	bx	lr
    8104:	00000326 	.word	0x00000326
    8108:	00000572 	.word	0x00000572
    810c:	00000572 	.word	0x00000572
    8110:	00000572 	.word	0x00000572
    8114:	00000572 	.word	0x00000572
    8118:	00000572 	.word	0x00000572
    811c:	00000572 	.word	0x00000572
    8120:	00000572 	.word	0x00000572
    8124:	00000572 	.word	0x00000572
    8128:	00000572 	.word	0x00000572
    812c:	00000572 	.word	0x00000572
    8130:	00000572 	.word	0x00000572
    8134:	00000572 	.word	0x00000572
    8138:	00000572 	.word	0x00000572
    813c:	00000572 	.word	0x00000572
    8140:	00000572 	.word	0x00000572
    8144:	0000030e 	.word	0x0000030e
    8148:	00000572 	.word	0x00000572
    814c:	00000572 	.word	0x00000572
    8150:	00000572 	.word	0x00000572
    8154:	00000572 	.word	0x00000572
    8158:	00000572 	.word	0x00000572
    815c:	00000572 	.word	0x00000572
    8160:	00000572 	.word	0x00000572
    8164:	00000572 	.word	0x00000572
    8168:	00000572 	.word	0x00000572
    816c:	00000572 	.word	0x00000572
    8170:	00000572 	.word	0x00000572
    8174:	00000572 	.word	0x00000572
    8178:	00000572 	.word	0x00000572
    817c:	00000572 	.word	0x00000572
    8180:	00000572 	.word	0x00000572
    8184:	0000031e 	.word	0x0000031e
    8188:	00000572 	.word	0x00000572
    818c:	00000572 	.word	0x00000572
    8190:	00000572 	.word	0x00000572
    8194:	00000572 	.word	0x00000572
    8198:	00000572 	.word	0x00000572
    819c:	00000572 	.word	0x00000572
    81a0:	00000572 	.word	0x00000572
    81a4:	00000572 	.word	0x00000572
    81a8:	00000572 	.word	0x00000572
    81ac:	00000572 	.word	0x00000572
    81b0:	00000572 	.word	0x00000572
    81b4:	00000572 	.word	0x00000572
    81b8:	00000572 	.word	0x00000572
    81bc:	00000572 	.word	0x00000572
    81c0:	00000572 	.word	0x00000572
    81c4:	00000316 	.word	0x00000316
    81c8:	0000032e 	.word	0x0000032e
    81cc:	000002f6 	.word	0x000002f6
    81d0:	00000306 	.word	0x00000306
    81d4:	000002fe 	.word	0x000002fe
    81d8:	00000002 	.word	0x00000002
    81dc:	00000003 	.word	0x00000003
    81e0:	00000028 	.word	0x00000028
    81e4:	00000029 	.word	0x00000029
    81e8:	00000004 	.word	0x00000004
    81ec:	00000005 	.word	0x00000005
    81f0:	00000006 	.word	0x00000006
    81f4:	00000007 	.word	0x00000007
    81f8:	0000ffff 	.word	0x0000ffff
    81fc:	0000ffff 	.word	0x0000ffff
    8200:	00000022 	.word	0x00000022
    8204:	00000023 	.word	0x00000023
    8208:	0000ffff 	.word	0x0000ffff
    820c:	0000ffff 	.word	0x0000ffff
    8210:	0000ffff 	.word	0x0000ffff
    8214:	0000ffff 	.word	0x0000ffff
    8218:	00000008 	.word	0x00000008
    821c:	00000009 	.word	0x00000009
    8220:	0000000a 	.word	0x0000000a
    8224:	0000000b 	.word	0x0000000b
    8228:	20776f4c 	.word	0x20776f4c
    822c:	74736f43 	.word	0x74736f43
    8230:	6e655620 	.word	0x6e655620
    8234:	616c6974 	.word	0x616c6974
    8238:	00726f74 	.word	0x00726f74
    823c:	4f525245 	.word	0x4f525245
    8240:	003a5352 	.word	0x003a5352
    8244:	574f4c46 	.word	0x574f4c46
    8248:	00000000 	.word	0x00000000
    824c:	53455250 	.word	0x53455250
    8250:	534e5320 	.word	0x534e5320
    8254:	00000000 	.word	0x00000000
    8258:	20544f4d 	.word	0x20544f4d
    825c:	4c494146 	.word	0x4c494146
    8260:	00000000 	.word	0x00000000
    8264:	20544f4d 	.word	0x20544f4d
    8268:	504d4554 	.word	0x504d4554
    826c:	00000000 	.word	0x00000000
    8270:	54544553 	.word	0x54544553
    8274:	414f4c20 	.word	0x414f4c20
    8278:	00000044 	.word	0x00000044
    827c:	49522050 	.word	0x49522050
    8280:	00004553 	.word	0x00004553
    8284:	544e4556 	.word	0x544e4556
    8288:	004e4f3a 	.word	0x004e4f3a
    828c:	544e4556 	.word	0x544e4556
    8290:	46464f3a 	.word	0x46464f3a
    8294:	00000000 	.word	0x00000000
    8298:	69253a56 	.word	0x69253a56
    829c:	00006c6d 	.word	0x00006c6d
    82a0:	20544553 	.word	0x20544553
    82a4:	3a4d5042 	.word	0x3a4d5042
    82a8:	00006925 	.word	0x00006925
    82ac:	20544553 	.word	0x20544553
    82b0:	50454550 	.word	0x50454550
    82b4:	6369253a 	.word	0x6369253a
    82b8:	3032486d 	.word	0x3032486d
    82bc:	00000000 	.word	0x00000000
    82c0:	20544553 	.word	0x20544553
    82c4:	3a504950 	.word	0x3a504950
    82c8:	6d636925 	.word	0x6d636925
    82cc:	00303248 	.word	0x00303248
    82d0:	544e4f43 	.word	0x544e4f43
    82d4:	004c4f52 	.word	0x004c4f52
    82d8:	00494d48 	.word	0x00494d48
    82dc:	45524353 	.word	0x45524353
    82e0:	545f4e45 	.word	0x545f4e45
    82e4:	00004d49 	.word	0x00004d49
    82e8:	45524353 	.word	0x45524353
    82ec:	435f4e45 	.word	0x435f4e45
    82f0:	00004748 	.word	0x00004748
    82f4:	494e4f4d 	.word	0x494e4f4d
    82f8:	00524f54 	.word	0x00524f54
    82fc:	534e4553 	.word	0x534e4553
    8300:	0000524f 	.word	0x0000524f
    8304:	454c4449 	.word	0x454c4449
    8308:	00000000 	.word	0x00000000
    830c:	00003964 	.word	0x00003964
    8310:	00003964 	.word	0x00003964
    8314:	00003964 	.word	0x00003964
    8318:	00003930 	.word	0x00003930
    831c:	000039a6 	.word	0x000039a6
    8320:	000039c0 	.word	0x000039c0
    8324:	00003964 	.word	0x00003964
    8328:	00003964 	.word	0x00003964
    832c:	00003930 	.word	0x00003930
    8330:	000039a6 	.word	0x000039a6
    8334:	51726d54 	.word	0x51726d54
    8338:	00000000 	.word	0x00000000
    833c:	20726d54 	.word	0x20726d54
    8340:	00637653 	.word	0x00637653
    8344:	42000800 	.word	0x42000800
    8348:	42000c00 	.word	0x42000c00
    834c:	42001000 	.word	0x42001000
    8350:	42001400 	.word	0x42001400
    8354:	42001800 	.word	0x42001800
    8358:	42001c00 	.word	0x42001c00
    835c:	00004272 	.word	0x00004272
    8360:	0000426e 	.word	0x0000426e
    8364:	0000426e 	.word	0x0000426e
    8368:	000042d4 	.word	0x000042d4
    836c:	000042d4 	.word	0x000042d4
    8370:	00004286 	.word	0x00004286
    8374:	00004278 	.word	0x00004278
    8378:	0000428c 	.word	0x0000428c
    837c:	000042c2 	.word	0x000042c2
    8380:	000043dc 	.word	0x000043dc
    8384:	000043bc 	.word	0x000043bc
    8388:	000043bc 	.word	0x000043bc
    838c:	00004448 	.word	0x00004448
    8390:	000043ce 	.word	0x000043ce
    8394:	000043ea 	.word	0x000043ea
    8398:	000043c0 	.word	0x000043c0
    839c:	000043f8 	.word	0x000043f8
    83a0:	00004438 	.word	0x00004438
    83a4:	000051c8 	.word	0x000051c8
    83a8:	00005198 	.word	0x00005198
    83ac:	000051aa 	.word	0x000051aa
    83b0:	000050ec 	.word	0x000050ec
    83b4:	000051aa 	.word	0x000051aa
    83b8:	0000518e 	.word	0x0000518e
    83bc:	000051aa 	.word	0x000051aa
    83c0:	000050ec 	.word	0x000050ec
    83c4:	00005198 	.word	0x00005198
    83c8:	00005198 	.word	0x00005198
    83cc:	0000518e 	.word	0x0000518e
    83d0:	000050ec 	.word	0x000050ec
    83d4:	000050f4 	.word	0x000050f4
    83d8:	000050f4 	.word	0x000050f4
    83dc:	000050f4 	.word	0x000050f4
    83e0:	000051b0 	.word	0x000051b0
    83e4:	00005198 	.word	0x00005198
    83e8:	00005198 	.word	0x00005198
    83ec:	0000516c 	.word	0x0000516c
    83f0:	00005250 	.word	0x00005250
    83f4:	0000516c 	.word	0x0000516c
    83f8:	0000518e 	.word	0x0000518e
    83fc:	0000516c 	.word	0x0000516c
    8400:	00005250 	.word	0x00005250
    8404:	00005198 	.word	0x00005198
    8408:	00005198 	.word	0x00005198
    840c:	0000518e 	.word	0x0000518e
    8410:	00005250 	.word	0x00005250
    8414:	000050f4 	.word	0x000050f4
    8418:	000050f4 	.word	0x000050f4
    841c:	000050f4 	.word	0x000050f4
    8420:	0000525a 	.word	0x0000525a
    8424:	00005548 	.word	0x00005548
    8428:	00005498 	.word	0x00005498
    842c:	00005498 	.word	0x00005498
    8430:	00005496 	.word	0x00005496
    8434:	0000553a 	.word	0x0000553a
    8438:	0000553a 	.word	0x0000553a
    843c:	00005530 	.word	0x00005530
    8440:	00005496 	.word	0x00005496
    8444:	0000553a 	.word	0x0000553a
    8448:	00005530 	.word	0x00005530
    844c:	0000553a 	.word	0x0000553a
    8450:	00005496 	.word	0x00005496
    8454:	00005540 	.word	0x00005540
    8458:	00005540 	.word	0x00005540
    845c:	00005540 	.word	0x00005540
    8460:	000055d0 	.word	0x000055d0
    8464:	00006318 	.word	0x00006318
    8468:	000062fa 	.word	0x000062fa
    846c:	000062b4 	.word	0x000062b4
    8470:	000061d2 	.word	0x000061d2
    8474:	000062b4 	.word	0x000062b4
    8478:	000062ec 	.word	0x000062ec
    847c:	000062b4 	.word	0x000062b4
    8480:	000061d2 	.word	0x000061d2
    8484:	000062fa 	.word	0x000062fa
    8488:	000062fa 	.word	0x000062fa
    848c:	000062ec 	.word	0x000062ec
    8490:	000061d2 	.word	0x000061d2
    8494:	000061ca 	.word	0x000061ca
    8498:	000061ca 	.word	0x000061ca
    849c:	000061ca 	.word	0x000061ca
    84a0:	00006530 	.word	0x00006530
    84a4:	00006b78 	.word	0x00006b78
    84a8:	00006a38 	.word	0x00006a38
    84ac:	00006a38 	.word	0x00006a38
    84b0:	00006a34 	.word	0x00006a34
    84b4:	00006b50 	.word	0x00006b50
    84b8:	00006b50 	.word	0x00006b50
    84bc:	00006b42 	.word	0x00006b42
    84c0:	00006a34 	.word	0x00006a34
    84c4:	00006b50 	.word	0x00006b50
    84c8:	00006b42 	.word	0x00006b42
    84cc:	00006b50 	.word	0x00006b50
    84d0:	00006a34 	.word	0x00006a34
    84d4:	00006b58 	.word	0x00006b58
    84d8:	00006b58 	.word	0x00006b58
    84dc:	00006b58 	.word	0x00006b58
    84e0:	00006d5c 	.word	0x00006d5c
    84e4:	2b302d23 	.word	0x2b302d23
    84e8:	6c680020 	.word	0x6c680020
    84ec:	6665004c 	.word	0x6665004c
    84f0:	47464567 	.word	0x47464567
    84f4:	00          	.byte	0x00
    84f5:	30          	.byte	0x30
    84f6:	3231      	.short	0x3231
    84f8:	36353433 	.word	0x36353433
    84fc:	41393837 	.word	0x41393837
    8500:	45444342 	.word	0x45444342
    8504:	31300046 	.word	0x31300046
    8508:	35343332 	.word	0x35343332
    850c:	39383736 	.word	0x39383736
    8510:	64636261 	.word	0x64636261
    8514:	00006665 	.word	0x00006665

00008518 <_init>:
    8518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    851e:	bc08      	pop	{r3}
    8520:	469e      	mov	lr, r3
    8522:	4770      	bx	lr

00008524 <__init_array_start>:
    8524:	000000dd 	.word	0x000000dd

00008528 <_fini>:
    8528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    852a:	46c0      	nop			; (mov r8, r8)
    852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    852e:	bc08      	pop	{r3}
    8530:	469e      	mov	lr, r3
    8532:	4770      	bx	lr

00008534 <__fini_array_start>:
    8534:	000000b5 	.word	0x000000b5
