
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ac  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  000027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005028  20000008  000027b4  00020008  2**2
                  ALLOC
  3 .stack        00002000  20005030  000077dc  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002aa4b  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004755  00000000  00000000  0004aad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008036  00000000  00000000  0004f229  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008c0  00000000  00000000  0005725f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a10  00000000  00000000  00057b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009449  00000000  00000000  0005852f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012969  00000000  00000000  00061978  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000903d2  00000000  00000000  000742e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015a4  00000000  00000000  001046b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 70 00 20 2d 25 00 00 29 25 00 00 9f 26 00 00     0p. -%..)%...&..
	...
      2c:	29 25 00 00 00 00 00 00 00 00 00 00 29 25 00 00     )%..........)%..
      3c:	29 25 00 00 29 25 00 00 29 25 00 00 19 1c 00 00     )%..)%..)%......
      4c:	29 25 00 00 29 25 00 00 29 25 00 00 29 25 00 00     )%..)%..)%..)%..
      5c:	29 25 00 00 29 25 00 00 35 1c 00 00 45 1c 00 00     )%..)%..5...E...
      6c:	55 1c 00 00 65 1c 00 00 75 1c 00 00 85 1c 00 00     U...e...u.......
      7c:	29 25 00 00 29 25 00 00 29 25 00 00 29 25 00 00     )%..)%..)%..)%..
      8c:	29 25 00 00 29 25 00 00 00 00 00 00 00 00 00 00     )%..)%..........
      9c:	15 01 00 00 29 25 00 00 d9 01 00 00 29 25 00 00     ....)%......)%..
      ac:	29 25 00 00 00 00 00 00                             )%......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	000027ac 	.word	0x000027ac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	000027ac 	.word	0x000027ac
     10c:	000027ac 	.word	0x000027ac
     110:	00000000 	.word	0x00000000

00000114 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     116:	4b2f      	ldr	r3, [pc, #188]	; (1d4 <ADC_Handler+0xc0>)
     118:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     11a:	682b      	ldr	r3, [r5, #0]
     11c:	7e1a      	ldrb	r2, [r3, #24]
     11e:	7ddc      	ldrb	r4, [r3, #23]
     120:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     122:	07e2      	lsls	r2, r4, #31
     124:	d416      	bmi.n	154 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     126:	0763      	lsls	r3, r4, #29
     128:	d508      	bpl.n	13c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     12a:	2304      	movs	r3, #4
     12c:	682a      	ldr	r2, [r5, #0]
     12e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     130:	7eeb      	ldrb	r3, [r5, #27]
     132:	079b      	lsls	r3, r3, #30
     134:	d502      	bpl.n	13c <ADC_Handler+0x28>
     136:	7eab      	ldrb	r3, [r5, #26]
     138:	079b      	lsls	r3, r3, #30
     13a:	d442      	bmi.n	1c2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     13c:	07a3      	lsls	r3, r4, #30
     13e:	d508      	bpl.n	152 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     140:	2302      	movs	r3, #2
     142:	682a      	ldr	r2, [r5, #0]
     144:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     146:	7eeb      	ldrb	r3, [r5, #27]
     148:	075b      	lsls	r3, r3, #29
     14a:	d502      	bpl.n	152 <ADC_Handler+0x3e>
     14c:	7eab      	ldrb	r3, [r5, #26]
     14e:	075b      	lsls	r3, r3, #29
     150:	d43b      	bmi.n	1ca <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     152:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     154:	2201      	movs	r2, #1
     156:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     158:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     15a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     15c:	b25b      	sxtb	r3, r3
     15e:	2b00      	cmp	r3, #0
     160:	dbfb      	blt.n	15a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     162:	6969      	ldr	r1, [r5, #20]
     164:	1c8b      	adds	r3, r1, #2
     166:	616b      	str	r3, [r5, #20]
     168:	8b53      	ldrh	r3, [r2, #26]
     16a:	b29b      	uxth	r3, r3
     16c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     16e:	8b2b      	ldrh	r3, [r5, #24]
     170:	3b01      	subs	r3, #1
     172:	b29b      	uxth	r3, r3
     174:	832b      	strh	r3, [r5, #24]
     176:	2b00      	cmp	r3, #0
     178:	d011      	beq.n	19e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     17a:	7f6b      	ldrb	r3, [r5, #29]
     17c:	2b00      	cmp	r3, #0
     17e:	d0d2      	beq.n	126 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     180:	682a      	ldr	r2, [r5, #0]
     182:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     184:	b25b      	sxtb	r3, r3
     186:	2b00      	cmp	r3, #0
     188:	dbfb      	blt.n	182 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     18a:	7b13      	ldrb	r3, [r2, #12]
     18c:	2102      	movs	r1, #2
     18e:	430b      	orrs	r3, r1
     190:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     192:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     194:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     196:	b25b      	sxtb	r3, r3
     198:	2b00      	cmp	r3, #0
     19a:	dbfb      	blt.n	194 <ADC_Handler+0x80>
     19c:	e7c3      	b.n	126 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     19e:	2301      	movs	r3, #1
     1a0:	682a      	ldr	r2, [r5, #0]
     1a2:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     1a4:	7f2b      	ldrb	r3, [r5, #28]
     1a6:	2b05      	cmp	r3, #5
     1a8:	d1bd      	bne.n	126 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     1aa:	2300      	movs	r3, #0
     1ac:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     1ae:	7eeb      	ldrb	r3, [r5, #27]
     1b0:	07db      	lsls	r3, r3, #31
     1b2:	d5b8      	bpl.n	126 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     1b4:	7eab      	ldrb	r3, [r5, #26]
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d5b5      	bpl.n	126 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     1ba:	0028      	movs	r0, r5
     1bc:	68ab      	ldr	r3, [r5, #8]
     1be:	4798      	blx	r3
     1c0:	e7b1      	b.n	126 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1c2:	0028      	movs	r0, r5
     1c4:	68eb      	ldr	r3, [r5, #12]
     1c6:	4798      	blx	r3
     1c8:	e7b8      	b.n	13c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1ca:	692b      	ldr	r3, [r5, #16]
     1cc:	0028      	movs	r0, r5
     1ce:	4798      	blx	r3
}
     1d0:	e7bf      	b.n	152 <ADC_Handler+0x3e>
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	20004fe4 	.word	0x20004fe4

000001d8 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     1d8:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     1da:	4b27      	ldr	r3, [pc, #156]	; (278 <DAC_Handler+0xa0>)
     1dc:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     1de:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     1e0:	79ab      	ldrb	r3, [r5, #6]
     1e2:	07db      	lsls	r3, r3, #31
     1e4:	d507      	bpl.n	1f6 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     1e6:	2301      	movs	r3, #1
     1e8:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     1ea:	0023      	movs	r3, r4
     1ec:	3314      	adds	r3, #20
     1ee:	d002      	beq.n	1f6 <DAC_Handler+0x1e>
     1f0:	7c63      	ldrb	r3, [r4, #17]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d131      	bne.n	25a <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     1f6:	79ab      	ldrb	r3, [r5, #6]
     1f8:	079b      	lsls	r3, r3, #30
     1fa:	d538      	bpl.n	26e <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     1fc:	2302      	movs	r3, #2
     1fe:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     200:	89a3      	ldrh	r3, [r4, #12]
     202:	b29b      	uxth	r3, r3
     204:	2b00      	cmp	r3, #0
     206:	d02c      	beq.n	262 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     208:	89e3      	ldrh	r3, [r4, #14]
     20a:	b29b      	uxth	r3, r3
     20c:	1c5a      	adds	r2, r3, #1
     20e:	b292      	uxth	r2, r2
     210:	81e2      	strh	r2, [r4, #14]
     212:	005b      	lsls	r3, r3, #1
     214:	68a2      	ldr	r2, [r4, #8]
     216:	4694      	mov	ip, r2
     218:	4463      	add	r3, ip
     21a:	881b      	ldrh	r3, [r3, #0]
     21c:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     21e:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     220:	89a3      	ldrh	r3, [r4, #12]
     222:	3b01      	subs	r3, #1
     224:	b29b      	uxth	r3, r3
     226:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     228:	89a3      	ldrh	r3, [r4, #12]
     22a:	b29b      	uxth	r3, r3
     22c:	2b00      	cmp	r3, #0
     22e:	d118      	bne.n	262 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     230:	2200      	movs	r2, #0
     232:	3320      	adds	r3, #32
     234:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     236:	3b1e      	subs	r3, #30
     238:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     23a:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     23c:	2180      	movs	r1, #128	; 0x80
     23e:	0489      	lsls	r1, r1, #18
     240:	337e      	adds	r3, #126	; 0x7e
     242:	4a0e      	ldr	r2, [pc, #56]	; (27c <DAC_Handler+0xa4>)
     244:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     246:	0023      	movs	r3, r4
     248:	3314      	adds	r3, #20
     24a:	d010      	beq.n	26e <DAC_Handler+0x96>
     24c:	7ca3      	ldrb	r3, [r4, #18]
     24e:	2b00      	cmp	r3, #0
     250:	d00a      	beq.n	268 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     252:	2000      	movs	r0, #0
     254:	69e3      	ldr	r3, [r4, #28]
     256:	4798      	blx	r3
     258:	e006      	b.n	268 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     25a:	2000      	movs	r0, #0
     25c:	69a3      	ldr	r3, [r4, #24]
     25e:	4798      	blx	r3
     260:	e7c9      	b.n	1f6 <DAC_Handler+0x1e>
		if ((module->callback) &&
     262:	0023      	movs	r3, r4
     264:	3314      	adds	r3, #20
     266:	d002      	beq.n	26e <DAC_Handler+0x96>
     268:	7c23      	ldrb	r3, [r4, #16]
     26a:	2b00      	cmp	r3, #0
     26c:	d100      	bne.n	270 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     26e:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     270:	6963      	ldr	r3, [r4, #20]
     272:	2000      	movs	r0, #0
     274:	4798      	blx	r3
}
     276:	e7fa      	b.n	26e <DAC_Handler+0x96>
     278:	20004fe8 	.word	0x20004fe8
     27c:	e000e100 	.word	0xe000e100

00000280 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     280:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     282:	2300      	movs	r3, #0
     284:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <prvTaskExitError+0x20>)
     288:	681b      	ldr	r3, [r3, #0]
     28a:	3301      	adds	r3, #1
     28c:	d001      	beq.n	292 <prvTaskExitError+0x12>
     28e:	b672      	cpsid	i
     290:	e7fe      	b.n	290 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     292:	b672      	cpsid	i
	while( ulDummy == 0 )
     294:	9b01      	ldr	r3, [sp, #4]
     296:	2b00      	cmp	r3, #0
     298:	d0fc      	beq.n	294 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     29a:	b002      	add	sp, #8
     29c:	4770      	bx	lr
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	20000000 	.word	0x20000000
	...

000002b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     2b0:	4a0b      	ldr	r2, [pc, #44]	; (2e0 <pxCurrentTCBConst2>)
     2b2:	6813      	ldr	r3, [r2, #0]
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	3020      	adds	r0, #32
     2b8:	f380 8809 	msr	PSP, r0
     2bc:	2002      	movs	r0, #2
     2be:	f380 8814 	msr	CONTROL, r0
     2c2:	f3bf 8f6f 	isb	sy
     2c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     2c8:	46ae      	mov	lr, r5
     2ca:	bc08      	pop	{r3}
     2cc:	bc04      	pop	{r2}
     2ce:	b662      	cpsie	i
     2d0:	4718      	bx	r3
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	46c0      	nop			; (mov r8, r8)
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	46c0      	nop			; (mov r8, r8)
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	46c0      	nop			; (mov r8, r8)
     2de:	46c0      	nop			; (mov r8, r8)

000002e0 <pxCurrentTCBConst2>:
     2e0:	20004e6c 	.word	0x20004e6c

000002e4 <pxPortInitialiseStack>:
{
     2e4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     2e6:	1f03      	subs	r3, r0, #4
     2e8:	2480      	movs	r4, #128	; 0x80
     2ea:	0464      	lsls	r4, r4, #17
     2ec:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     2ee:	3b04      	subs	r3, #4
     2f0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     2f2:	3b04      	subs	r3, #4
     2f4:	4902      	ldr	r1, [pc, #8]	; (300 <pxPortInitialiseStack+0x1c>)
     2f6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     2f8:	3b14      	subs	r3, #20
     2fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     2fc:	3840      	subs	r0, #64	; 0x40
}
     2fe:	bd10      	pop	{r4, pc}
     300:	00000281 	.word	0x00000281

00000304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     304:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     306:	4b0f      	ldr	r3, [pc, #60]	; (344 <xPortStartScheduler+0x40>)
     308:	6819      	ldr	r1, [r3, #0]
     30a:	22ff      	movs	r2, #255	; 0xff
     30c:	0412      	lsls	r2, r2, #16
     30e:	430a      	orrs	r2, r1
     310:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     312:	6819      	ldr	r1, [r3, #0]
     314:	22ff      	movs	r2, #255	; 0xff
     316:	0612      	lsls	r2, r2, #24
     318:	430a      	orrs	r2, r1
     31a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <xPortStartScheduler+0x44>)
     31e:	2300      	movs	r3, #0
     320:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     322:	490a      	ldr	r1, [pc, #40]	; (34c <xPortStartScheduler+0x48>)
     324:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     326:	480a      	ldr	r0, [pc, #40]	; (350 <xPortStartScheduler+0x4c>)
     328:	490a      	ldr	r1, [pc, #40]	; (354 <xPortStartScheduler+0x50>)
     32a:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     32c:	2107      	movs	r1, #7
     32e:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
     330:	4a09      	ldr	r2, [pc, #36]	; (358 <xPortStartScheduler+0x54>)
     332:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <xPortStartScheduler+0x58>)
     336:	4798      	blx	r3
	vTaskSwitchContext();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <xPortStartScheduler+0x5c>)
     33a:	4798      	blx	r3
	prvTaskExitError();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <xPortStartScheduler+0x60>)
     33e:	4798      	blx	r3
}
     340:	2000      	movs	r0, #0
     342:	bd10      	pop	{r4, pc}
     344:	e000ed20 	.word	0xe000ed20
     348:	e000e010 	.word	0xe000e010
     34c:	e000e018 	.word	0xe000e018
     350:	0000bb7f 	.word	0x0000bb7f
     354:	e000e014 	.word	0xe000e014
     358:	20000000 	.word	0x20000000
     35c:	000002b1 	.word	0x000002b1
     360:	00001445 	.word	0x00001445
     364:	00000281 	.word	0x00000281

00000368 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     368:	2280      	movs	r2, #128	; 0x80
     36a:	0552      	lsls	r2, r2, #21
     36c:	4b03      	ldr	r3, [pc, #12]	; (37c <vPortYield+0x14>)
     36e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
     370:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     374:	f3bf 8f6f 	isb	sy
}
     378:	4770      	bx	lr
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	e000ed04 	.word	0xe000ed04

00000380 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
     380:	b672      	cpsid	i
    uxCriticalNesting++;
     382:	4a04      	ldr	r2, [pc, #16]	; (394 <vPortEnterCritical+0x14>)
     384:	6813      	ldr	r3, [r2, #0]
     386:	3301      	adds	r3, #1
     388:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
     38a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     38e:	f3bf 8f6f 	isb	sy
}
     392:	4770      	bx	lr
     394:	20000000 	.word	0x20000000

00000398 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
     398:	4b06      	ldr	r3, [pc, #24]	; (3b4 <vPortExitCritical+0x1c>)
     39a:	681b      	ldr	r3, [r3, #0]
     39c:	2b00      	cmp	r3, #0
     39e:	d101      	bne.n	3a4 <vPortExitCritical+0xc>
     3a0:	b672      	cpsid	i
     3a2:	e7fe      	b.n	3a2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
     3a4:	3b01      	subs	r3, #1
     3a6:	4a03      	ldr	r2, [pc, #12]	; (3b4 <vPortExitCritical+0x1c>)
     3a8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     3aa:	2b00      	cmp	r3, #0
     3ac:	d100      	bne.n	3b0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
     3ae:	b662      	cpsie	i
}
     3b0:	4770      	bx	lr
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	20000000 	.word	0x20000000

000003b8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
     3b8:	f3ef 8010 	mrs	r0, PRIMASK
     3bc:	b672      	cpsid	i
     3be:	4770      	bx	lr

000003c0 <vClearInterruptMaskFromISR>:
	__asm volatile(
     3c0:	f380 8810 	msr	PRIMASK, r0
     3c4:	4770      	bx	lr
	...

000003c8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     3c8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3ca:	4b12      	ldr	r3, [pc, #72]	; (414 <prvInsertBlockIntoFreeList+0x4c>)
     3cc:	681a      	ldr	r2, [r3, #0]
     3ce:	4282      	cmp	r2, r0
     3d0:	d319      	bcc.n	406 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3d2:	685c      	ldr	r4, [r3, #4]
     3d4:	1919      	adds	r1, r3, r4
     3d6:	4288      	cmp	r0, r1
     3d8:	d103      	bne.n	3e2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3da:	6841      	ldr	r1, [r0, #4]
     3dc:	1909      	adds	r1, r1, r4
     3de:	6059      	str	r1, [r3, #4]
     3e0:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3e2:	6841      	ldr	r1, [r0, #4]
     3e4:	1844      	adds	r4, r0, r1
     3e6:	42a2      	cmp	r2, r4
     3e8:	d111      	bne.n	40e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     3ea:	4c0b      	ldr	r4, [pc, #44]	; (418 <prvInsertBlockIntoFreeList+0x50>)
     3ec:	6824      	ldr	r4, [r4, #0]
     3ee:	42a2      	cmp	r2, r4
     3f0:	d00b      	beq.n	40a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3f2:	6852      	ldr	r2, [r2, #4]
     3f4:	1852      	adds	r2, r2, r1
     3f6:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3f8:	681a      	ldr	r2, [r3, #0]
     3fa:	6812      	ldr	r2, [r2, #0]
     3fc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     3fe:	4298      	cmp	r0, r3
     400:	d000      	beq.n	404 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     402:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     404:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     406:	0013      	movs	r3, r2
     408:	e7e0      	b.n	3cc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     40a:	6002      	str	r2, [r0, #0]
     40c:	e7f7      	b.n	3fe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     40e:	6002      	str	r2, [r0, #0]
     410:	e7f5      	b.n	3fe <prvInsertBlockIntoFreeList+0x36>
     412:	46c0      	nop			; (mov r8, r8)
     414:	20004e54 	.word	0x20004e54
     418:	20000024 	.word	0x20000024

0000041c <pvPortMalloc>:
{
     41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     41e:	0004      	movs	r4, r0
	vTaskSuspendAll();
     420:	4b3e      	ldr	r3, [pc, #248]	; (51c <pvPortMalloc+0x100>)
     422:	4798      	blx	r3
		if( pxEnd == NULL )
     424:	4b3e      	ldr	r3, [pc, #248]	; (520 <pvPortMalloc+0x104>)
     426:	681b      	ldr	r3, [r3, #0]
     428:	2b00      	cmp	r3, #0
     42a:	d015      	beq.n	458 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     42c:	4b3d      	ldr	r3, [pc, #244]	; (524 <pvPortMalloc+0x108>)
     42e:	681f      	ldr	r7, [r3, #0]
     430:	423c      	tst	r4, r7
     432:	d168      	bne.n	506 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
     434:	2c00      	cmp	r4, #0
     436:	d069      	beq.n	50c <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
     438:	0023      	movs	r3, r4
     43a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
     43c:	075a      	lsls	r2, r3, #29
     43e:	d002      	beq.n	446 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     440:	2207      	movs	r2, #7
     442:	4393      	bics	r3, r2
     444:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     446:	2b00      	cmp	r3, #0
     448:	d05d      	beq.n	506 <pvPortMalloc+0xea>
     44a:	4a37      	ldr	r2, [pc, #220]	; (528 <pvPortMalloc+0x10c>)
     44c:	6816      	ldr	r6, [r2, #0]
     44e:	42b3      	cmp	r3, r6
     450:	d859      	bhi.n	506 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
     452:	4a36      	ldr	r2, [pc, #216]	; (52c <pvPortMalloc+0x110>)
     454:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     456:	e025      	b.n	4a4 <pvPortMalloc+0x88>
	uxAddress = ( size_t ) ucHeap;
     458:	4a35      	ldr	r2, [pc, #212]	; (530 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
     45a:	0753      	lsls	r3, r2, #29
     45c:	d01e      	beq.n	49c <pvPortMalloc+0x80>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
     45e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     460:	2307      	movs	r3, #7
     462:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
     464:	4b33      	ldr	r3, [pc, #204]	; (534 <pvPortMalloc+0x118>)
     466:	18d3      	adds	r3, r2, r3
     468:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     46a:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     46c:	482f      	ldr	r0, [pc, #188]	; (52c <pvPortMalloc+0x110>)
     46e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
     470:	2100      	movs	r1, #0
     472:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     474:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
     476:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     478:	2007      	movs	r0, #7
     47a:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
     47c:	4828      	ldr	r0, [pc, #160]	; (520 <pvPortMalloc+0x104>)
     47e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
     480:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
     482:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     484:	1a99      	subs	r1, r3, r2
     486:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     488:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     48a:	4b2b      	ldr	r3, [pc, #172]	; (538 <pvPortMalloc+0x11c>)
     48c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     48e:	4b26      	ldr	r3, [pc, #152]	; (528 <pvPortMalloc+0x10c>)
     490:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     492:	2280      	movs	r2, #128	; 0x80
     494:	0612      	lsls	r2, r2, #24
     496:	4b23      	ldr	r3, [pc, #140]	; (524 <pvPortMalloc+0x108>)
     498:	601a      	str	r2, [r3, #0]
     49a:	e7c7      	b.n	42c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
     49c:	4b25      	ldr	r3, [pc, #148]	; (534 <pvPortMalloc+0x118>)
     49e:	e7e5      	b.n	46c <pvPortMalloc+0x50>
     4a0:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
     4a2:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4a4:	6861      	ldr	r1, [r4, #4]
     4a6:	428b      	cmp	r3, r1
     4a8:	d902      	bls.n	4b0 <pvPortMalloc+0x94>
     4aa:	6821      	ldr	r1, [r4, #0]
     4ac:	2900      	cmp	r1, #0
     4ae:	d1f7      	bne.n	4a0 <pvPortMalloc+0x84>
				if( pxBlock != pxEnd )
     4b0:	491b      	ldr	r1, [pc, #108]	; (520 <pvPortMalloc+0x104>)
     4b2:	6809      	ldr	r1, [r1, #0]
     4b4:	428c      	cmp	r4, r1
     4b6:	d026      	beq.n	506 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4b8:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4ba:	6821      	ldr	r1, [r4, #0]
     4bc:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4be:	6862      	ldr	r2, [r4, #4]
     4c0:	1ad2      	subs	r2, r2, r3
     4c2:	2a10      	cmp	r2, #16
     4c4:	d908      	bls.n	4d8 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4c6:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
     4c8:	0741      	lsls	r1, r0, #29
     4ca:	d001      	beq.n	4d0 <pvPortMalloc+0xb4>
     4cc:	b672      	cpsid	i
     4ce:	e7fe      	b.n	4ce <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4d0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
     4d2:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     4d4:	4b19      	ldr	r3, [pc, #100]	; (53c <pvPortMalloc+0x120>)
     4d6:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
     4d8:	6862      	ldr	r2, [r4, #4]
     4da:	1ab6      	subs	r6, r6, r2
     4dc:	4912      	ldr	r1, [pc, #72]	; (528 <pvPortMalloc+0x10c>)
     4de:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4e0:	4915      	ldr	r1, [pc, #84]	; (538 <pvPortMalloc+0x11c>)
     4e2:	6809      	ldr	r1, [r1, #0]
     4e4:	428e      	cmp	r6, r1
     4e6:	d201      	bcs.n	4ec <pvPortMalloc+0xd0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4e8:	4913      	ldr	r1, [pc, #76]	; (538 <pvPortMalloc+0x11c>)
     4ea:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4ec:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     4ee:	4317      	orrs	r7, r2
     4f0:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
     4f2:	2300      	movs	r3, #0
     4f4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
     4f6:	4b12      	ldr	r3, [pc, #72]	; (540 <pvPortMalloc+0x124>)
     4f8:	4798      	blx	r3
		if( pvReturn == NULL )
     4fa:	2d00      	cmp	r5, #0
     4fc:	d008      	beq.n	510 <pvPortMalloc+0xf4>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
     4fe:	076b      	lsls	r3, r5, #29
     500:	d009      	beq.n	516 <pvPortMalloc+0xfa>
     502:	b672      	cpsid	i
     504:	e7fe      	b.n	504 <pvPortMalloc+0xe8>
	( void ) xTaskResumeAll();
     506:	4b0e      	ldr	r3, [pc, #56]	; (540 <pvPortMalloc+0x124>)
     508:	4798      	blx	r3
     50a:	e001      	b.n	510 <pvPortMalloc+0xf4>
     50c:	4b0c      	ldr	r3, [pc, #48]	; (540 <pvPortMalloc+0x124>)
     50e:	4798      	blx	r3
			vApplicationMallocFailedHook();
     510:	4b0c      	ldr	r3, [pc, #48]	; (544 <pvPortMalloc+0x128>)
     512:	4798      	blx	r3
     514:	2500      	movs	r5, #0
}
     516:	0028      	movs	r0, r5
     518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	000011b1 	.word	0x000011b1
     520:	20000024 	.word	0x20000024
     524:	20004e48 	.word	0x20004e48
     528:	20004e4c 	.word	0x20004e4c
     52c:	20004e54 	.word	0x20004e54
     530:	20000028 	.word	0x20000028
     534:	00004e20 	.word	0x00004e20
     538:	20004e50 	.word	0x20004e50
     53c:	000003c9 	.word	0x000003c9
     540:	00001305 	.word	0x00001305
     544:	00002689 	.word	0x00002689

00000548 <vPortFree>:
{
     548:	b510      	push	{r4, lr}
	if( pv != NULL )
     54a:	2800      	cmp	r0, #0
     54c:	d020      	beq.n	590 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
     54e:	0003      	movs	r3, r0
     550:	3b08      	subs	r3, #8
     552:	685b      	ldr	r3, [r3, #4]
     554:	4a0f      	ldr	r2, [pc, #60]	; (594 <vPortFree+0x4c>)
     556:	6812      	ldr	r2, [r2, #0]
     558:	421a      	tst	r2, r3
     55a:	d101      	bne.n	560 <vPortFree+0x18>
     55c:	b672      	cpsid	i
     55e:	e7fe      	b.n	55e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
     560:	0001      	movs	r1, r0
     562:	3908      	subs	r1, #8
     564:	6809      	ldr	r1, [r1, #0]
     566:	2900      	cmp	r1, #0
     568:	d001      	beq.n	56e <vPortFree+0x26>
     56a:	b672      	cpsid	i
     56c:	e7fe      	b.n	56c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     56e:	3808      	subs	r0, #8
     570:	0004      	movs	r4, r0
     572:	4393      	bics	r3, r2
     574:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
     576:	4b08      	ldr	r3, [pc, #32]	; (598 <vPortFree+0x50>)
     578:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
     57a:	4a08      	ldr	r2, [pc, #32]	; (59c <vPortFree+0x54>)
     57c:	6863      	ldr	r3, [r4, #4]
     57e:	6811      	ldr	r1, [r2, #0]
     580:	468c      	mov	ip, r1
     582:	4463      	add	r3, ip
     584:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     586:	0020      	movs	r0, r4
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <vPortFree+0x58>)
     58a:	4798      	blx	r3
				( void ) xTaskResumeAll();
     58c:	4b05      	ldr	r3, [pc, #20]	; (5a4 <vPortFree+0x5c>)
     58e:	4798      	blx	r3
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	20004e48 	.word	0x20004e48
     598:	000011b1 	.word	0x000011b1
     59c:	20004e4c 	.word	0x20004e4c
     5a0:	000003c9 	.word	0x000003c9
     5a4:	00001305 	.word	0x00001305

000005a8 <control_task>:

// Task handle
static TaskHandle_t control_task_handle = NULL;

static void control_task(void * pvParameters)
{
     5a8:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
     5aa:	25fa      	movs	r5, #250	; 0xfa
     5ac:	00ad      	lsls	r5, r5, #2
     5ae:	4c02      	ldr	r4, [pc, #8]	; (5b8 <control_task+0x10>)
     5b0:	0028      	movs	r0, r5
     5b2:	47a0      	blx	r4
     5b4:	e7fc      	b.n	5b0 <control_task+0x8>
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	00001405 	.word	0x00001405

000005bc <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
     5bc:	b510      	push	{r4, lr}
     5be:	b082      	sub	sp, #8
     5c0:	0002      	movs	r2, r0
	xTaskCreate(control_task, (const char * const) "CONTROL",
     5c2:	4b05      	ldr	r3, [pc, #20]	; (5d8 <create_control_task+0x1c>)
     5c4:	9301      	str	r3, [sp, #4]
     5c6:	9100      	str	r1, [sp, #0]
     5c8:	2300      	movs	r3, #0
     5ca:	4904      	ldr	r1, [pc, #16]	; (5dc <create_control_task+0x20>)
     5cc:	4804      	ldr	r0, [pc, #16]	; (5e0 <create_control_task+0x24>)
     5ce:	4c05      	ldr	r4, [pc, #20]	; (5e4 <create_control_task+0x28>)
     5d0:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
     5d2:	b002      	add	sp, #8
     5d4:	bd10      	pop	{r4, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	20004e5c 	.word	0x20004e5c
     5dc:	0000270c 	.word	0x0000270c
     5e0:	000005a9 	.word	0x000005a9
     5e4:	00000f55 	.word	0x00000f55

000005e8 <hmi_task>:

// Task handle
static TaskHandle_t hmi_task_handle = NULL;

static void hmi_task(void * pvParameters)
{
     5e8:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
     5ea:	25fa      	movs	r5, #250	; 0xfa
     5ec:	00ad      	lsls	r5, r5, #2
     5ee:	4c02      	ldr	r4, [pc, #8]	; (5f8 <hmi_task+0x10>)
     5f0:	0028      	movs	r0, r5
     5f2:	47a0      	blx	r4
     5f4:	e7fc      	b.n	5f0 <hmi_task+0x8>
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00001405 	.word	0x00001405

000005fc <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
     5fc:	b510      	push	{r4, lr}
     5fe:	b082      	sub	sp, #8
     600:	0002      	movs	r2, r0
	xTaskCreate(hmi_task, (const char * const) "HMI",
     602:	4b05      	ldr	r3, [pc, #20]	; (618 <create_hmi_task+0x1c>)
     604:	9301      	str	r3, [sp, #4]
     606:	9100      	str	r1, [sp, #0]
     608:	2300      	movs	r3, #0
     60a:	4904      	ldr	r1, [pc, #16]	; (61c <create_hmi_task+0x20>)
     60c:	4804      	ldr	r0, [pc, #16]	; (620 <create_hmi_task+0x24>)
     60e:	4c05      	ldr	r4, [pc, #20]	; (624 <create_hmi_task+0x28>)
     610:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);
     612:	b002      	add	sp, #8
     614:	bd10      	pop	{r4, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	20004e60 	.word	0x20004e60
     61c:	00002714 	.word	0x00002714
     620:	000005e9 	.word	0x000005e9
     624:	00000f55 	.word	0x00000f55

00000628 <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
     628:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
     62a:	25fa      	movs	r5, #250	; 0xfa
     62c:	00ad      	lsls	r5, r5, #2
     62e:	4c02      	ldr	r4, [pc, #8]	; (638 <monitor_task+0x10>)
     630:	0028      	movs	r0, r5
     632:	47a0      	blx	r4
     634:	e7fc      	b.n	630 <monitor_task+0x8>
     636:	46c0      	nop			; (mov r8, r8)
     638:	00001405 	.word	0x00001405

0000063c <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
     63c:	b510      	push	{r4, lr}
     63e:	b082      	sub	sp, #8
     640:	0002      	movs	r2, r0
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
     642:	4b05      	ldr	r3, [pc, #20]	; (658 <create_monitor_task+0x1c>)
     644:	9301      	str	r3, [sp, #4]
     646:	9100      	str	r1, [sp, #0]
     648:	2300      	movs	r3, #0
     64a:	4904      	ldr	r1, [pc, #16]	; (65c <create_monitor_task+0x20>)
     64c:	4804      	ldr	r0, [pc, #16]	; (660 <create_monitor_task+0x24>)
     64e:	4c05      	ldr	r4, [pc, #20]	; (664 <create_monitor_task+0x28>)
     650:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
     652:	b002      	add	sp, #8
     654:	bd10      	pop	{r4, pc}
     656:	46c0      	nop			; (mov r8, r8)
     658:	20004e64 	.word	0x20004e64
     65c:	00002718 	.word	0x00002718
     660:	00000629 	.word	0x00000629
     664:	00000f55 	.word	0x00000f55

00000668 <sensor_task>:

// Task handle
static TaskHandle_t sensor_task_handle = NULL;

static void sensor_task(void * pvParameters)
{
     668:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
     66a:	25fa      	movs	r5, #250	; 0xfa
     66c:	00ad      	lsls	r5, r5, #2
     66e:	4c02      	ldr	r4, [pc, #8]	; (678 <sensor_task+0x10>)
     670:	0028      	movs	r0, r5
     672:	47a0      	blx	r4
     674:	e7fc      	b.n	670 <sensor_task+0x8>
     676:	46c0      	nop			; (mov r8, r8)
     678:	00001405 	.word	0x00001405

0000067c <create_sensor_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
     67c:	b510      	push	{r4, lr}
     67e:	b082      	sub	sp, #8
     680:	0002      	movs	r2, r0
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
     682:	4b05      	ldr	r3, [pc, #20]	; (698 <create_sensor_task+0x1c>)
     684:	9301      	str	r3, [sp, #4]
     686:	9100      	str	r1, [sp, #0]
     688:	2300      	movs	r3, #0
     68a:	4904      	ldr	r1, [pc, #16]	; (69c <create_sensor_task+0x20>)
     68c:	4804      	ldr	r0, [pc, #16]	; (6a0 <create_sensor_task+0x24>)
     68e:	4c05      	ldr	r4, [pc, #20]	; (6a4 <create_sensor_task+0x28>)
     690:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
     692:	b002      	add	sp, #8
     694:	bd10      	pop	{r4, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	20004e68 	.word	0x20004e68
     69c:	00002720 	.word	0x00002720
     6a0:	00000669 	.word	0x00000669
     6a4:	00000f55 	.word	0x00000f55

000006a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6a8:	0003      	movs	r3, r0
     6aa:	3308      	adds	r3, #8
     6ac:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6ae:	2201      	movs	r2, #1
     6b0:	4252      	negs	r2, r2
     6b2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6b4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6b6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6b8:	2300      	movs	r3, #0
     6ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     6bc:	4770      	bx	lr

000006be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6be:	2300      	movs	r3, #0
     6c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     6c2:	4770      	bx	lr

000006c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     6c4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     6c6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     6c8:	689a      	ldr	r2, [r3, #8]
     6ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     6cc:	689a      	ldr	r2, [r3, #8]
     6ce:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     6d0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     6d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     6d4:	6803      	ldr	r3, [r0, #0]
     6d6:	3301      	adds	r3, #1
     6d8:	6003      	str	r3, [r0, #0]
}
     6da:	4770      	bx	lr

000006dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6dc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6de:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e0:	0002      	movs	r2, r0
     6e2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
     6e4:	1c63      	adds	r3, r4, #1
     6e6:	d102      	bne.n	6ee <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
     6e8:	6902      	ldr	r2, [r0, #16]
     6ea:	e004      	b.n	6f6 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6ec:	001a      	movs	r2, r3
     6ee:	6853      	ldr	r3, [r2, #4]
     6f0:	681d      	ldr	r5, [r3, #0]
     6f2:	42ac      	cmp	r4, r5
     6f4:	d2fa      	bcs.n	6ec <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     6f6:	6853      	ldr	r3, [r2, #4]
     6f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     6fc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     6fe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     700:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     702:	6803      	ldr	r3, [r0, #0]
     704:	3301      	adds	r3, #1
     706:	6003      	str	r3, [r0, #0]
}
     708:	bd30      	pop	{r4, r5, pc}

0000070a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     70a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     70c:	6842      	ldr	r2, [r0, #4]
     70e:	6881      	ldr	r1, [r0, #8]
     710:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     712:	6882      	ldr	r2, [r0, #8]
     714:	6841      	ldr	r1, [r0, #4]
     716:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     718:	685a      	ldr	r2, [r3, #4]
     71a:	4290      	cmp	r0, r2
     71c:	d006      	beq.n	72c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     71e:	2200      	movs	r2, #0
     720:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     722:	681a      	ldr	r2, [r3, #0]
     724:	3a01      	subs	r2, #1
     726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     728:	6818      	ldr	r0, [r3, #0]
}
     72a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     72c:	6882      	ldr	r2, [r0, #8]
     72e:	605a      	str	r2, [r3, #4]
     730:	e7f5      	b.n	71e <uxListRemove+0x14>
	...

00000734 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
     734:	b510      	push	{r4, lr}
     736:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
     738:	4b03      	ldr	r3, [pc, #12]	; (748 <prvIsQueueEmpty+0x14>)
     73a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     73c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     73e:	4b03      	ldr	r3, [pc, #12]	; (74c <prvIsQueueEmpty+0x18>)
     740:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     742:	4260      	negs	r0, r4
     744:	4160      	adcs	r0, r4

	return xReturn;
}
     746:	bd10      	pop	{r4, pc}
     748:	00000381 	.word	0x00000381
     74c:	00000399 	.word	0x00000399

00000750 <prvCopyDataToQueue>:
{
     750:	b570      	push	{r4, r5, r6, lr}
     752:	0004      	movs	r4, r0
     754:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     756:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     758:	6c02      	ldr	r2, [r0, #64]	; 0x40
     75a:	2a00      	cmp	r2, #0
     75c:	d10b      	bne.n	776 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
     75e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     760:	6823      	ldr	r3, [r4, #0]
     762:	4283      	cmp	r3, r0
     764:	d104      	bne.n	770 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     766:	6860      	ldr	r0, [r4, #4]
     768:	4b16      	ldr	r3, [pc, #88]	; (7c4 <prvCopyDataToQueue+0x74>)
     76a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     76c:	2300      	movs	r3, #0
     76e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     770:	3501      	adds	r5, #1
     772:	63a5      	str	r5, [r4, #56]	; 0x38
}
     774:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     776:	2e00      	cmp	r6, #0
     778:	d10e      	bne.n	798 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     77a:	6880      	ldr	r0, [r0, #8]
     77c:	4b12      	ldr	r3, [pc, #72]	; (7c8 <prvCopyDataToQueue+0x78>)
     77e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     780:	68a3      	ldr	r3, [r4, #8]
     782:	6c22      	ldr	r2, [r4, #64]	; 0x40
     784:	4694      	mov	ip, r2
     786:	4463      	add	r3, ip
     788:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
     78a:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     78c:	6862      	ldr	r2, [r4, #4]
     78e:	4293      	cmp	r3, r2
     790:	d3ee      	bcc.n	770 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     792:	6823      	ldr	r3, [r4, #0]
     794:	60a3      	str	r3, [r4, #8]
     796:	e7eb      	b.n	770 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     798:	68c0      	ldr	r0, [r0, #12]
     79a:	4b0b      	ldr	r3, [pc, #44]	; (7c8 <prvCopyDataToQueue+0x78>)
     79c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     79e:	6c23      	ldr	r3, [r4, #64]	; 0x40
     7a0:	425b      	negs	r3, r3
     7a2:	68e2      	ldr	r2, [r4, #12]
     7a4:	18d2      	adds	r2, r2, r3
     7a6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     7a8:	6821      	ldr	r1, [r4, #0]
     7aa:	428a      	cmp	r2, r1
     7ac:	d203      	bcs.n	7b6 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     7ae:	6862      	ldr	r2, [r4, #4]
     7b0:	4694      	mov	ip, r2
     7b2:	4463      	add	r3, ip
     7b4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
     7b6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
     7b8:	2e02      	cmp	r6, #2
     7ba:	d1d9      	bne.n	770 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     7bc:	4285      	cmp	r5, r0
     7be:	d0d7      	beq.n	770 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
     7c0:	3d01      	subs	r5, #1
     7c2:	e7d5      	b.n	770 <prvCopyDataToQueue+0x20>
     7c4:	000016b9 	.word	0x000016b9
     7c8:	000026e9 	.word	0x000026e9

000007cc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     7cc:	b570      	push	{r4, r5, r6, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	9001      	str	r0, [sp, #4]
     7d2:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     7d4:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     7d6:	2c00      	cmp	r4, #0
     7d8:	d005      	beq.n	7e6 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     7da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     7dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     7de:	4299      	cmp	r1, r3
     7e0:	d303      	bcc.n	7ea <prvNotifyQueueSetContainer+0x1e>
     7e2:	b672      	cpsid	i
     7e4:	e7fe      	b.n	7e4 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
     7e6:	b672      	cpsid	i
     7e8:	e7fe      	b.n	7e8 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     7ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
     7ec:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     7ee:	428b      	cmp	r3, r1
     7f0:	d802      	bhi.n	7f8 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     7f2:	0030      	movs	r0, r6
     7f4:	b002      	add	sp, #8
     7f6:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     7f8:	2345      	movs	r3, #69	; 0x45
     7fa:	5ce5      	ldrb	r5, [r4, r3]
     7fc:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     7fe:	a901      	add	r1, sp, #4
     800:	0020      	movs	r0, r4
     802:	4b0a      	ldr	r3, [pc, #40]	; (82c <prvNotifyQueueSetContainer+0x60>)
     804:	4798      	blx	r3
     806:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
     808:	1c6b      	adds	r3, r5, #1
     80a:	d10a      	bne.n	822 <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     80c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     80e:	2b00      	cmp	r3, #0
     810:	d0ef      	beq.n	7f2 <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     812:	0020      	movs	r0, r4
     814:	3024      	adds	r0, #36	; 0x24
     816:	4b06      	ldr	r3, [pc, #24]	; (830 <prvNotifyQueueSetContainer+0x64>)
     818:	4798      	blx	r3
     81a:	2800      	cmp	r0, #0
     81c:	d0e9      	beq.n	7f2 <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
     81e:	2601      	movs	r6, #1
     820:	e7e7      	b.n	7f2 <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
     822:	3501      	adds	r5, #1
     824:	b26d      	sxtb	r5, r5
     826:	2345      	movs	r3, #69	; 0x45
     828:	54e5      	strb	r5, [r4, r3]
     82a:	e7e2      	b.n	7f2 <prvNotifyQueueSetContainer+0x26>
     82c:	00000751 	.word	0x00000751
     830:	0000157d 	.word	0x0000157d

00000834 <prvCopyDataFromQueue>:
{
     834:	b510      	push	{r4, lr}
     836:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     838:	6c02      	ldr	r2, [r0, #64]	; 0x40
     83a:	2a00      	cmp	r2, #0
     83c:	d00b      	beq.n	856 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     83e:	68c3      	ldr	r3, [r0, #12]
     840:	189b      	adds	r3, r3, r2
     842:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     844:	6841      	ldr	r1, [r0, #4]
     846:	428b      	cmp	r3, r1
     848:	d301      	bcc.n	84e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     84a:	6803      	ldr	r3, [r0, #0]
     84c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     84e:	68c1      	ldr	r1, [r0, #12]
     850:	0020      	movs	r0, r4
     852:	4b01      	ldr	r3, [pc, #4]	; (858 <prvCopyDataFromQueue+0x24>)
     854:	4798      	blx	r3
}
     856:	bd10      	pop	{r4, pc}
     858:	000026e9 	.word	0x000026e9

0000085c <prvUnlockQueue>:
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
     860:	4b25      	ldr	r3, [pc, #148]	; (8f8 <prvUnlockQueue+0x9c>)
     862:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
     864:	2345      	movs	r3, #69	; 0x45
     866:	5cfc      	ldrb	r4, [r7, r3]
     868:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
     86a:	2c00      	cmp	r4, #0
     86c:	dd1c      	ble.n	8a8 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     86e:	4e23      	ldr	r6, [pc, #140]	; (8fc <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     870:	4d23      	ldr	r5, [pc, #140]	; (900 <prvUnlockQueue+0xa4>)
     872:	e00b      	b.n	88c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     876:	2b00      	cmp	r3, #0
     878:	d016      	beq.n	8a8 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     87a:	0038      	movs	r0, r7
     87c:	3024      	adds	r0, #36	; 0x24
     87e:	47a8      	blx	r5
     880:	2800      	cmp	r0, #0
     882:	d10e      	bne.n	8a2 <prvUnlockQueue+0x46>
     884:	3c01      	subs	r4, #1
     886:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
     888:	2c00      	cmp	r4, #0
     88a:	d00d      	beq.n	8a8 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
     88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     88e:	2b00      	cmp	r3, #0
     890:	d0f0      	beq.n	874 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     892:	2100      	movs	r1, #0
     894:	0038      	movs	r0, r7
     896:	47b0      	blx	r6
     898:	2800      	cmp	r0, #0
     89a:	d0f3      	beq.n	884 <prvUnlockQueue+0x28>
						vTaskMissedYield();
     89c:	4b19      	ldr	r3, [pc, #100]	; (904 <prvUnlockQueue+0xa8>)
     89e:	4798      	blx	r3
     8a0:	e7f0      	b.n	884 <prvUnlockQueue+0x28>
							vTaskMissedYield();
     8a2:	4b18      	ldr	r3, [pc, #96]	; (904 <prvUnlockQueue+0xa8>)
     8a4:	4798      	blx	r3
     8a6:	e7ed      	b.n	884 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
     8a8:	22ff      	movs	r2, #255	; 0xff
     8aa:	2345      	movs	r3, #69	; 0x45
     8ac:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
     8ae:	4b16      	ldr	r3, [pc, #88]	; (908 <prvUnlockQueue+0xac>)
     8b0:	4798      	blx	r3
	taskENTER_CRITICAL();
     8b2:	4b11      	ldr	r3, [pc, #68]	; (8f8 <prvUnlockQueue+0x9c>)
     8b4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
     8b6:	2344      	movs	r3, #68	; 0x44
     8b8:	5cfc      	ldrb	r4, [r7, r3]
     8ba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
     8bc:	2c00      	cmp	r4, #0
     8be:	dd14      	ble.n	8ea <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8c0:	693b      	ldr	r3, [r7, #16]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d011      	beq.n	8ea <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8c6:	003d      	movs	r5, r7
     8c8:	3510      	adds	r5, #16
     8ca:	4e0d      	ldr	r6, [pc, #52]	; (900 <prvUnlockQueue+0xa4>)
     8cc:	e006      	b.n	8dc <prvUnlockQueue+0x80>
     8ce:	3c01      	subs	r4, #1
     8d0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
     8d2:	2c00      	cmp	r4, #0
     8d4:	d009      	beq.n	8ea <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8d6:	693b      	ldr	r3, [r7, #16]
     8d8:	2b00      	cmp	r3, #0
     8da:	d006      	beq.n	8ea <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8dc:	0028      	movs	r0, r5
     8de:	47b0      	blx	r6
     8e0:	2800      	cmp	r0, #0
     8e2:	d0f4      	beq.n	8ce <prvUnlockQueue+0x72>
					vTaskMissedYield();
     8e4:	4b07      	ldr	r3, [pc, #28]	; (904 <prvUnlockQueue+0xa8>)
     8e6:	4798      	blx	r3
     8e8:	e7f1      	b.n	8ce <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
     8ea:	22ff      	movs	r2, #255	; 0xff
     8ec:	2344      	movs	r3, #68	; 0x44
     8ee:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <prvUnlockQueue+0xac>)
     8f2:	4798      	blx	r3
}
     8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00000381 	.word	0x00000381
     8fc:	000007cd 	.word	0x000007cd
     900:	0000157d 	.word	0x0000157d
     904:	0000168d 	.word	0x0000168d
     908:	00000399 	.word	0x00000399

0000090c <xQueueGenericReset>:
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
     910:	000d      	movs	r5, r1
	configASSERT( pxQueue );
     912:	2800      	cmp	r0, #0
     914:	d021      	beq.n	95a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
     916:	4b17      	ldr	r3, [pc, #92]	; (974 <xQueueGenericReset+0x68>)
     918:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     91a:	6822      	ldr	r2, [r4, #0]
     91c:	6c21      	ldr	r1, [r4, #64]	; 0x40
     91e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     920:	434b      	muls	r3, r1
     922:	18d0      	adds	r0, r2, r3
     924:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     926:	2000      	movs	r0, #0
     928:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     92a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     92c:	1a5b      	subs	r3, r3, r1
     92e:	18d3      	adds	r3, r2, r3
     930:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     932:	23ff      	movs	r3, #255	; 0xff
     934:	2244      	movs	r2, #68	; 0x44
     936:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
     938:	3201      	adds	r2, #1
     93a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
     93c:	2d00      	cmp	r5, #0
     93e:	d111      	bne.n	964 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     940:	6923      	ldr	r3, [r4, #16]
     942:	2b00      	cmp	r3, #0
     944:	d005      	beq.n	952 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     946:	0020      	movs	r0, r4
     948:	3010      	adds	r0, #16
     94a:	4b0b      	ldr	r3, [pc, #44]	; (978 <xQueueGenericReset+0x6c>)
     94c:	4798      	blx	r3
     94e:	2800      	cmp	r0, #0
     950:	d105      	bne.n	95e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
     952:	4b0a      	ldr	r3, [pc, #40]	; (97c <xQueueGenericReset+0x70>)
     954:	4798      	blx	r3
}
     956:	2001      	movs	r0, #1
     958:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     95a:	b672      	cpsid	i
     95c:	e7fe      	b.n	95c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
     95e:	4b08      	ldr	r3, [pc, #32]	; (980 <xQueueGenericReset+0x74>)
     960:	4798      	blx	r3
     962:	e7f6      	b.n	952 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     964:	0020      	movs	r0, r4
     966:	3010      	adds	r0, #16
     968:	4d06      	ldr	r5, [pc, #24]	; (984 <xQueueGenericReset+0x78>)
     96a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     96c:	0020      	movs	r0, r4
     96e:	3024      	adds	r0, #36	; 0x24
     970:	47a8      	blx	r5
     972:	e7ee      	b.n	952 <xQueueGenericReset+0x46>
     974:	00000381 	.word	0x00000381
     978:	0000157d 	.word	0x0000157d
     97c:	00000399 	.word	0x00000399
     980:	00000369 	.word	0x00000369
     984:	000006a9 	.word	0x000006a9

00000988 <xQueueGenericCreate>:
	{
     988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     98a:	0006      	movs	r6, r0
     98c:	000d      	movs	r5, r1
     98e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     990:	2800      	cmp	r0, #0
     992:	d101      	bne.n	998 <xQueueGenericCreate+0x10>
     994:	b672      	cpsid	i
     996:	e7fe      	b.n	996 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     998:	0008      	movs	r0, r1
     99a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     99c:	3054      	adds	r0, #84	; 0x54
     99e:	4b0b      	ldr	r3, [pc, #44]	; (9cc <xQueueGenericCreate+0x44>)
     9a0:	4798      	blx	r3
     9a2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     9a4:	d010      	beq.n	9c8 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
     9a6:	2d00      	cmp	r5, #0
     9a8:	d003      	beq.n	9b2 <xQueueGenericCreate+0x2a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     9aa:	0003      	movs	r3, r0
     9ac:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     9ae:	6003      	str	r3, [r0, #0]
     9b0:	e000      	b.n	9b4 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     9b2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
     9b4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     9b6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     9b8:	2101      	movs	r1, #1
     9ba:	0020      	movs	r0, r4
     9bc:	4b04      	ldr	r3, [pc, #16]	; (9d0 <xQueueGenericCreate+0x48>)
     9be:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
     9c0:	2350      	movs	r3, #80	; 0x50
     9c2:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
     9c4:	2300      	movs	r3, #0
     9c6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
     9c8:	0020      	movs	r0, r4
     9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9cc:	0000041d 	.word	0x0000041d
     9d0:	0000090d 	.word	0x0000090d

000009d4 <xQueueGenericSend>:
{
     9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9d6:	46ce      	mov	lr, r9
     9d8:	4647      	mov	r7, r8
     9da:	b580      	push	{r7, lr}
     9dc:	b085      	sub	sp, #20
     9de:	0004      	movs	r4, r0
     9e0:	000f      	movs	r7, r1
     9e2:	9201      	str	r2, [sp, #4]
     9e4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     9e6:	2800      	cmp	r0, #0
     9e8:	d00c      	beq.n	a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     9ea:	2900      	cmp	r1, #0
     9ec:	d00c      	beq.n	a08 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     9ee:	2d02      	cmp	r5, #2
     9f0:	d00f      	beq.n	a12 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     9f2:	4b4e      	ldr	r3, [pc, #312]	; (b2c <xQueueGenericSend+0x158>)
     9f4:	4798      	blx	r3
     9f6:	2800      	cmp	r0, #0
     9f8:	d110      	bne.n	a1c <xQueueGenericSend+0x48>
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d011      	beq.n	a24 <xQueueGenericSend+0x50>
     a00:	b672      	cpsid	i
     a02:	e7fe      	b.n	a02 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
     a04:	b672      	cpsid	i
     a06:	e7fe      	b.n	a06 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     a08:	6c03      	ldr	r3, [r0, #64]	; 0x40
     a0a:	2b00      	cmp	r3, #0
     a0c:	d0ef      	beq.n	9ee <xQueueGenericSend+0x1a>
     a0e:	b672      	cpsid	i
     a10:	e7fe      	b.n	a10 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     a12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     a14:	2b01      	cmp	r3, #1
     a16:	d0ec      	beq.n	9f2 <xQueueGenericSend+0x1e>
     a18:	b672      	cpsid	i
     a1a:	e7fe      	b.n	a1a <xQueueGenericSend+0x46>
     a1c:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     a1e:	4b44      	ldr	r3, [pc, #272]	; (b30 <xQueueGenericSend+0x15c>)
     a20:	4698      	mov	r8, r3
     a22:	e04c      	b.n	abe <xQueueGenericSend+0xea>
     a24:	2600      	movs	r6, #0
     a26:	e7fa      	b.n	a1e <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     a28:	002a      	movs	r2, r5
     a2a:	0039      	movs	r1, r7
     a2c:	0020      	movs	r0, r4
     a2e:	4b41      	ldr	r3, [pc, #260]	; (b34 <xQueueGenericSend+0x160>)
     a30:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
     a32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     a34:	2b00      	cmp	r3, #0
     a36:	d00f      	beq.n	a58 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     a38:	0029      	movs	r1, r5
     a3a:	0020      	movs	r0, r4
     a3c:	4b3e      	ldr	r3, [pc, #248]	; (b38 <xQueueGenericSend+0x164>)
     a3e:	4798      	blx	r3
     a40:	2800      	cmp	r0, #0
     a42:	d001      	beq.n	a48 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     a44:	4b3d      	ldr	r3, [pc, #244]	; (b3c <xQueueGenericSend+0x168>)
     a46:	4798      	blx	r3
				taskEXIT_CRITICAL();
     a48:	4b3d      	ldr	r3, [pc, #244]	; (b40 <xQueueGenericSend+0x16c>)
     a4a:	4798      	blx	r3
				return pdPASS;
     a4c:	2001      	movs	r0, #1
}
     a4e:	b005      	add	sp, #20
     a50:	bc0c      	pop	{r2, r3}
     a52:	4690      	mov	r8, r2
     a54:	4699      	mov	r9, r3
     a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a5a:	2b00      	cmp	r3, #0
     a5c:	d008      	beq.n	a70 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a5e:	0020      	movs	r0, r4
     a60:	3024      	adds	r0, #36	; 0x24
     a62:	4b38      	ldr	r3, [pc, #224]	; (b44 <xQueueGenericSend+0x170>)
     a64:	4798      	blx	r3
     a66:	2800      	cmp	r0, #0
     a68:	d0ee      	beq.n	a48 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
     a6a:	4b34      	ldr	r3, [pc, #208]	; (b3c <xQueueGenericSend+0x168>)
     a6c:	4798      	blx	r3
     a6e:	e7eb      	b.n	a48 <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
     a70:	2800      	cmp	r0, #0
     a72:	d0e9      	beq.n	a48 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     a74:	4b31      	ldr	r3, [pc, #196]	; (b3c <xQueueGenericSend+0x168>)
     a76:	4798      	blx	r3
     a78:	e7e6      	b.n	a48 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
     a7a:	4b31      	ldr	r3, [pc, #196]	; (b40 <xQueueGenericSend+0x16c>)
     a7c:	4798      	blx	r3
					return errQUEUE_FULL;
     a7e:	2000      	movs	r0, #0
     a80:	e7e5      	b.n	a4e <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
     a82:	4b2f      	ldr	r3, [pc, #188]	; (b40 <xQueueGenericSend+0x16c>)
     a84:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     a86:	a901      	add	r1, sp, #4
     a88:	a802      	add	r0, sp, #8
     a8a:	4b2f      	ldr	r3, [pc, #188]	; (b48 <xQueueGenericSend+0x174>)
     a8c:	4798      	blx	r3
     a8e:	2800      	cmp	r0, #0
     a90:	d144      	bne.n	b1c <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
     a92:	4b27      	ldr	r3, [pc, #156]	; (b30 <xQueueGenericSend+0x15c>)
     a94:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a98:	4699      	mov	r9, r3
     a9a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
     a9c:	4b28      	ldr	r3, [pc, #160]	; (b40 <xQueueGenericSend+0x16c>)
     a9e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     aa0:	45b1      	cmp	r9, r6
     aa2:	d135      	bne.n	b10 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     aa4:	0020      	movs	r0, r4
     aa6:	3010      	adds	r0, #16
     aa8:	9901      	ldr	r1, [sp, #4]
     aaa:	4b28      	ldr	r3, [pc, #160]	; (b4c <xQueueGenericSend+0x178>)
     aac:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     aae:	0020      	movs	r0, r4
     ab0:	4b27      	ldr	r3, [pc, #156]	; (b50 <xQueueGenericSend+0x17c>)
     ab2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     ab4:	4b27      	ldr	r3, [pc, #156]	; (b54 <xQueueGenericSend+0x180>)
     ab6:	4798      	blx	r3
     ab8:	2800      	cmp	r0, #0
     aba:	d026      	beq.n	b0a <xQueueGenericSend+0x136>
     abc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     abe:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ac2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     ac4:	4293      	cmp	r3, r2
     ac6:	d3af      	bcc.n	a28 <xQueueGenericSend+0x54>
     ac8:	2d02      	cmp	r5, #2
     aca:	d0ad      	beq.n	a28 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
     acc:	9b01      	ldr	r3, [sp, #4]
     ace:	2b00      	cmp	r3, #0
     ad0:	d0d3      	beq.n	a7a <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
     ad2:	2e00      	cmp	r6, #0
     ad4:	d102      	bne.n	adc <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
     ad6:	a802      	add	r0, sp, #8
     ad8:	4b1f      	ldr	r3, [pc, #124]	; (b58 <xQueueGenericSend+0x184>)
     ada:	4798      	blx	r3
		taskEXIT_CRITICAL();
     adc:	4b18      	ldr	r3, [pc, #96]	; (b40 <xQueueGenericSend+0x16c>)
     ade:	4798      	blx	r3
		vTaskSuspendAll();
     ae0:	4b1e      	ldr	r3, [pc, #120]	; (b5c <xQueueGenericSend+0x188>)
     ae2:	4798      	blx	r3
		prvLockQueue( pxQueue );
     ae4:	4b12      	ldr	r3, [pc, #72]	; (b30 <xQueueGenericSend+0x15c>)
     ae6:	4798      	blx	r3
     ae8:	2344      	movs	r3, #68	; 0x44
     aea:	5ce3      	ldrb	r3, [r4, r3]
     aec:	b25b      	sxtb	r3, r3
     aee:	3301      	adds	r3, #1
     af0:	d102      	bne.n	af8 <xQueueGenericSend+0x124>
     af2:	2200      	movs	r2, #0
     af4:	2344      	movs	r3, #68	; 0x44
     af6:	54e2      	strb	r2, [r4, r3]
     af8:	2345      	movs	r3, #69	; 0x45
     afa:	5ce3      	ldrb	r3, [r4, r3]
     afc:	b25b      	sxtb	r3, r3
     afe:	3301      	adds	r3, #1
     b00:	d1bf      	bne.n	a82 <xQueueGenericSend+0xae>
     b02:	2200      	movs	r2, #0
     b04:	2345      	movs	r3, #69	; 0x45
     b06:	54e2      	strb	r2, [r4, r3]
     b08:	e7bb      	b.n	a82 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
     b0a:	4b0c      	ldr	r3, [pc, #48]	; (b3c <xQueueGenericSend+0x168>)
     b0c:	4798      	blx	r3
     b0e:	e7d5      	b.n	abc <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
     b10:	0020      	movs	r0, r4
     b12:	4b0f      	ldr	r3, [pc, #60]	; (b50 <xQueueGenericSend+0x17c>)
     b14:	4798      	blx	r3
				( void ) xTaskResumeAll();
     b16:	4b0f      	ldr	r3, [pc, #60]	; (b54 <xQueueGenericSend+0x180>)
     b18:	4798      	blx	r3
     b1a:	e7cf      	b.n	abc <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
     b1c:	0020      	movs	r0, r4
     b1e:	4b0c      	ldr	r3, [pc, #48]	; (b50 <xQueueGenericSend+0x17c>)
     b20:	4798      	blx	r3
			( void ) xTaskResumeAll();
     b22:	4b0c      	ldr	r3, [pc, #48]	; (b54 <xQueueGenericSend+0x180>)
     b24:	4798      	blx	r3
			return errQUEUE_FULL;
     b26:	2000      	movs	r0, #0
     b28:	e791      	b.n	a4e <xQueueGenericSend+0x7a>
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00001699 	.word	0x00001699
     b30:	00000381 	.word	0x00000381
     b34:	00000751 	.word	0x00000751
     b38:	000007cd 	.word	0x000007cd
     b3c:	00000369 	.word	0x00000369
     b40:	00000399 	.word	0x00000399
     b44:	0000157d 	.word	0x0000157d
     b48:	0000161d 	.word	0x0000161d
     b4c:	00001519 	.word	0x00001519
     b50:	0000085d 	.word	0x0000085d
     b54:	00001305 	.word	0x00001305
     b58:	00001605 	.word	0x00001605
     b5c:	000011b1 	.word	0x000011b1

00000b60 <xQueueGenericSendFromISR>:
{
     b60:	b5f0      	push	{r4, r5, r6, r7, lr}
     b62:	b083      	sub	sp, #12
     b64:	0004      	movs	r4, r0
     b66:	9101      	str	r1, [sp, #4]
     b68:	0016      	movs	r6, r2
     b6a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     b6c:	2800      	cmp	r0, #0
     b6e:	d012      	beq.n	b96 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     b70:	9b01      	ldr	r3, [sp, #4]
     b72:	2b00      	cmp	r3, #0
     b74:	d011      	beq.n	b9a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     b76:	2d02      	cmp	r5, #2
     b78:	d014      	beq.n	ba4 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     b7a:	4b28      	ldr	r3, [pc, #160]	; (c1c <xQueueGenericSendFromISR+0xbc>)
     b7c:	4798      	blx	r3
     b7e:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     b82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     b84:	429a      	cmp	r2, r3
     b86:	d82f      	bhi.n	be8 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
     b88:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     b8a:	9800      	ldr	r0, [sp, #0]
     b8c:	4b24      	ldr	r3, [pc, #144]	; (c20 <xQueueGenericSendFromISR+0xc0>)
     b8e:	4798      	blx	r3
}
     b90:	0028      	movs	r0, r5
     b92:	b003      	add	sp, #12
     b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
     b96:	b672      	cpsid	i
     b98:	e7fe      	b.n	b98 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     b9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     b9c:	2b00      	cmp	r3, #0
     b9e:	d0ea      	beq.n	b76 <xQueueGenericSendFromISR+0x16>
     ba0:	b672      	cpsid	i
     ba2:	e7fe      	b.n	ba2 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     ba6:	2b01      	cmp	r3, #1
     ba8:	d01a      	beq.n	be0 <xQueueGenericSendFromISR+0x80>
     baa:	b672      	cpsid	i
     bac:	e7fe      	b.n	bac <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
     bb0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     bb2:	2b00      	cmp	r3, #0
     bb4:	d0e9      	beq.n	b8a <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     bb6:	0020      	movs	r0, r4
     bb8:	3024      	adds	r0, #36	; 0x24
     bba:	4b1a      	ldr	r3, [pc, #104]	; (c24 <xQueueGenericSendFromISR+0xc4>)
     bbc:	4798      	blx	r3
     bbe:	2800      	cmp	r0, #0
     bc0:	d0e3      	beq.n	b8a <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
     bc2:	2e00      	cmp	r6, #0
     bc4:	d00a      	beq.n	bdc <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
     bc6:	2301      	movs	r3, #1
     bc8:	6033      	str	r3, [r6, #0]
     bca:	e7de      	b.n	b8a <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     bcc:	1c7b      	adds	r3, r7, #1
     bce:	b25b      	sxtb	r3, r3
     bd0:	2245      	movs	r2, #69	; 0x45
     bd2:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
     bd4:	2501      	movs	r5, #1
     bd6:	e7d8      	b.n	b8a <xQueueGenericSendFromISR+0x2a>
     bd8:	2501      	movs	r5, #1
     bda:	e7d6      	b.n	b8a <xQueueGenericSendFromISR+0x2a>
     bdc:	2501      	movs	r5, #1
     bde:	e7d4      	b.n	b8a <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     be0:	4b0e      	ldr	r3, [pc, #56]	; (c1c <xQueueGenericSendFromISR+0xbc>)
     be2:	4798      	blx	r3
     be4:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
     be8:	2345      	movs	r3, #69	; 0x45
     bea:	5ce7      	ldrb	r7, [r4, r3]
     bec:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     bee:	002a      	movs	r2, r5
     bf0:	9901      	ldr	r1, [sp, #4]
     bf2:	0020      	movs	r0, r4
     bf4:	4b0c      	ldr	r3, [pc, #48]	; (c28 <xQueueGenericSendFromISR+0xc8>)
     bf6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
     bf8:	1c7b      	adds	r3, r7, #1
     bfa:	d1e7      	bne.n	bcc <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
     bfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     bfe:	2b00      	cmp	r3, #0
     c00:	d0d5      	beq.n	bae <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     c02:	0029      	movs	r1, r5
     c04:	0020      	movs	r0, r4
     c06:	4b09      	ldr	r3, [pc, #36]	; (c2c <xQueueGenericSendFromISR+0xcc>)
     c08:	4798      	blx	r3
			xReturn = pdPASS;
     c0a:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     c0c:	2800      	cmp	r0, #0
     c0e:	d0bc      	beq.n	b8a <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
     c10:	2e00      	cmp	r6, #0
     c12:	d0e1      	beq.n	bd8 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
     c14:	2301      	movs	r3, #1
     c16:	6033      	str	r3, [r6, #0]
     c18:	e7b7      	b.n	b8a <xQueueGenericSendFromISR+0x2a>
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	000003b9 	.word	0x000003b9
     c20:	000003c1 	.word	0x000003c1
     c24:	0000157d 	.word	0x0000157d
     c28:	00000751 	.word	0x00000751
     c2c:	000007cd 	.word	0x000007cd

00000c30 <xQueueReceive>:
{
     c30:	b5f0      	push	{r4, r5, r6, r7, lr}
     c32:	46c6      	mov	lr, r8
     c34:	b500      	push	{lr}
     c36:	b084      	sub	sp, #16
     c38:	0004      	movs	r4, r0
     c3a:	000f      	movs	r7, r1
     c3c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
     c3e:	2800      	cmp	r0, #0
     c40:	d00a      	beq.n	c58 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c42:	2900      	cmp	r1, #0
     c44:	d00a      	beq.n	c5c <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     c46:	4b42      	ldr	r3, [pc, #264]	; (d50 <xQueueReceive+0x120>)
     c48:	4798      	blx	r3
     c4a:	2800      	cmp	r0, #0
     c4c:	d10b      	bne.n	c66 <xQueueReceive+0x36>
     c4e:	9b01      	ldr	r3, [sp, #4]
     c50:	2b00      	cmp	r3, #0
     c52:	d00c      	beq.n	c6e <xQueueReceive+0x3e>
     c54:	b672      	cpsid	i
     c56:	e7fe      	b.n	c56 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
     c58:	b672      	cpsid	i
     c5a:	e7fe      	b.n	c5a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
     c5e:	2b00      	cmp	r3, #0
     c60:	d0f1      	beq.n	c46 <xQueueReceive+0x16>
     c62:	b672      	cpsid	i
     c64:	e7fe      	b.n	c64 <xQueueReceive+0x34>
     c66:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     c68:	4b3a      	ldr	r3, [pc, #232]	; (d54 <xQueueReceive+0x124>)
     c6a:	4698      	mov	r8, r3
     c6c:	e02f      	b.n	cce <xQueueReceive+0x9e>
     c6e:	2600      	movs	r6, #0
     c70:	e7fa      	b.n	c68 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     c72:	0039      	movs	r1, r7
     c74:	0020      	movs	r0, r4
     c76:	4b38      	ldr	r3, [pc, #224]	; (d58 <xQueueReceive+0x128>)
     c78:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     c7a:	3d01      	subs	r5, #1
     c7c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c7e:	6923      	ldr	r3, [r4, #16]
     c80:	2b00      	cmp	r3, #0
     c82:	d007      	beq.n	c94 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c84:	0020      	movs	r0, r4
     c86:	3010      	adds	r0, #16
     c88:	4b34      	ldr	r3, [pc, #208]	; (d5c <xQueueReceive+0x12c>)
     c8a:	4798      	blx	r3
     c8c:	2800      	cmp	r0, #0
     c8e:	d001      	beq.n	c94 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
     c90:	4b33      	ldr	r3, [pc, #204]	; (d60 <xQueueReceive+0x130>)
     c92:	4798      	blx	r3
				taskEXIT_CRITICAL();
     c94:	4b33      	ldr	r3, [pc, #204]	; (d64 <xQueueReceive+0x134>)
     c96:	4798      	blx	r3
				return pdPASS;
     c98:	2001      	movs	r0, #1
}
     c9a:	b004      	add	sp, #16
     c9c:	bc04      	pop	{r2}
     c9e:	4690      	mov	r8, r2
     ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
     ca2:	4b30      	ldr	r3, [pc, #192]	; (d64 <xQueueReceive+0x134>)
     ca4:	4798      	blx	r3
					return errQUEUE_EMPTY;
     ca6:	2000      	movs	r0, #0
     ca8:	e7f7      	b.n	c9a <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
     caa:	a802      	add	r0, sp, #8
     cac:	4b2e      	ldr	r3, [pc, #184]	; (d68 <xQueueReceive+0x138>)
     cae:	4798      	blx	r3
     cb0:	e016      	b.n	ce0 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
     cb2:	2200      	movs	r2, #0
     cb4:	2344      	movs	r3, #68	; 0x44
     cb6:	54e2      	strb	r2, [r4, r3]
     cb8:	e01d      	b.n	cf6 <xQueueReceive+0xc6>
     cba:	2200      	movs	r2, #0
     cbc:	2345      	movs	r3, #69	; 0x45
     cbe:	54e2      	strb	r2, [r4, r3]
     cc0:	e01e      	b.n	d00 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
     cc2:	0020      	movs	r0, r4
     cc4:	4b29      	ldr	r3, [pc, #164]	; (d6c <xQueueReceive+0x13c>)
     cc6:	4798      	blx	r3
				( void ) xTaskResumeAll();
     cc8:	4b29      	ldr	r3, [pc, #164]	; (d70 <xQueueReceive+0x140>)
     cca:	4798      	blx	r3
     ccc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     cce:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     cd0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     cd2:	2d00      	cmp	r5, #0
     cd4:	d1cd      	bne.n	c72 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
     cd6:	9b01      	ldr	r3, [sp, #4]
     cd8:	2b00      	cmp	r3, #0
     cda:	d0e2      	beq.n	ca2 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
     cdc:	2e00      	cmp	r6, #0
     cde:	d0e4      	beq.n	caa <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
     ce0:	4b20      	ldr	r3, [pc, #128]	; (d64 <xQueueReceive+0x134>)
     ce2:	4798      	blx	r3
		vTaskSuspendAll();
     ce4:	4b23      	ldr	r3, [pc, #140]	; (d74 <xQueueReceive+0x144>)
     ce6:	4798      	blx	r3
		prvLockQueue( pxQueue );
     ce8:	4b1a      	ldr	r3, [pc, #104]	; (d54 <xQueueReceive+0x124>)
     cea:	4798      	blx	r3
     cec:	2344      	movs	r3, #68	; 0x44
     cee:	5ce3      	ldrb	r3, [r4, r3]
     cf0:	b25b      	sxtb	r3, r3
     cf2:	3301      	adds	r3, #1
     cf4:	d0dd      	beq.n	cb2 <xQueueReceive+0x82>
     cf6:	2345      	movs	r3, #69	; 0x45
     cf8:	5ce3      	ldrb	r3, [r4, r3]
     cfa:	b25b      	sxtb	r3, r3
     cfc:	3301      	adds	r3, #1
     cfe:	d0dc      	beq.n	cba <xQueueReceive+0x8a>
     d00:	4b18      	ldr	r3, [pc, #96]	; (d64 <xQueueReceive+0x134>)
     d02:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d04:	a901      	add	r1, sp, #4
     d06:	a802      	add	r0, sp, #8
     d08:	4b1b      	ldr	r3, [pc, #108]	; (d78 <xQueueReceive+0x148>)
     d0a:	4798      	blx	r3
     d0c:	2800      	cmp	r0, #0
     d0e:	d113      	bne.n	d38 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d10:	0020      	movs	r0, r4
     d12:	4b1a      	ldr	r3, [pc, #104]	; (d7c <xQueueReceive+0x14c>)
     d14:	4798      	blx	r3
     d16:	2800      	cmp	r0, #0
     d18:	d0d3      	beq.n	cc2 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d1a:	0020      	movs	r0, r4
     d1c:	3024      	adds	r0, #36	; 0x24
     d1e:	9901      	ldr	r1, [sp, #4]
     d20:	4b17      	ldr	r3, [pc, #92]	; (d80 <xQueueReceive+0x150>)
     d22:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     d24:	0020      	movs	r0, r4
     d26:	4b11      	ldr	r3, [pc, #68]	; (d6c <xQueueReceive+0x13c>)
     d28:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     d2a:	4b11      	ldr	r3, [pc, #68]	; (d70 <xQueueReceive+0x140>)
     d2c:	4798      	blx	r3
     d2e:	2800      	cmp	r0, #0
     d30:	d1cc      	bne.n	ccc <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
     d32:	4b0b      	ldr	r3, [pc, #44]	; (d60 <xQueueReceive+0x130>)
     d34:	4798      	blx	r3
     d36:	e7c9      	b.n	ccc <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
     d38:	0020      	movs	r0, r4
     d3a:	4b0c      	ldr	r3, [pc, #48]	; (d6c <xQueueReceive+0x13c>)
     d3c:	4798      	blx	r3
			( void ) xTaskResumeAll();
     d3e:	4b0c      	ldr	r3, [pc, #48]	; (d70 <xQueueReceive+0x140>)
     d40:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d42:	0020      	movs	r0, r4
     d44:	4b0d      	ldr	r3, [pc, #52]	; (d7c <xQueueReceive+0x14c>)
     d46:	4798      	blx	r3
     d48:	2800      	cmp	r0, #0
     d4a:	d0bf      	beq.n	ccc <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
     d4c:	2000      	movs	r0, #0
     d4e:	e7a4      	b.n	c9a <xQueueReceive+0x6a>
     d50:	00001699 	.word	0x00001699
     d54:	00000381 	.word	0x00000381
     d58:	00000835 	.word	0x00000835
     d5c:	0000157d 	.word	0x0000157d
     d60:	00000369 	.word	0x00000369
     d64:	00000399 	.word	0x00000399
     d68:	00001605 	.word	0x00001605
     d6c:	0000085d 	.word	0x0000085d
     d70:	00001305 	.word	0x00001305
     d74:	000011b1 	.word	0x000011b1
     d78:	0000161d 	.word	0x0000161d
     d7c:	00000735 	.word	0x00000735
     d80:	00001519 	.word	0x00001519

00000d84 <vQueueAddToRegistry>:
	{
     d84:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
     d86:	4b0a      	ldr	r3, [pc, #40]	; (db0 <vQueueAddToRegistry+0x2c>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d009      	beq.n	da2 <vQueueAddToRegistry+0x1e>
     d8e:	2301      	movs	r3, #1
     d90:	4c07      	ldr	r4, [pc, #28]	; (db0 <vQueueAddToRegistry+0x2c>)
     d92:	00da      	lsls	r2, r3, #3
     d94:	58a2      	ldr	r2, [r4, r2]
     d96:	2a00      	cmp	r2, #0
     d98:	d004      	beq.n	da4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     d9a:	3301      	adds	r3, #1
     d9c:	2b08      	cmp	r3, #8
     d9e:	d1f8      	bne.n	d92 <vQueueAddToRegistry+0xe>
	}
     da0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     da2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
     da4:	4a02      	ldr	r2, [pc, #8]	; (db0 <vQueueAddToRegistry+0x2c>)
     da6:	00db      	lsls	r3, r3, #3
     da8:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
     daa:	18d3      	adds	r3, r2, r3
     dac:	6058      	str	r0, [r3, #4]
				break;
     dae:	e7f7      	b.n	da0 <vQueueAddToRegistry+0x1c>
     db0:	20004fec 	.word	0x20004fec

00000db4 <vQueueWaitForMessageRestricted>:
	{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	0004      	movs	r4, r0
     db8:	000d      	movs	r5, r1
     dba:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
     dbc:	4b11      	ldr	r3, [pc, #68]	; (e04 <vQueueWaitForMessageRestricted+0x50>)
     dbe:	4798      	blx	r3
     dc0:	2344      	movs	r3, #68	; 0x44
     dc2:	5ce3      	ldrb	r3, [r4, r3]
     dc4:	b25b      	sxtb	r3, r3
     dc6:	3301      	adds	r3, #1
     dc8:	d00d      	beq.n	de6 <vQueueWaitForMessageRestricted+0x32>
     dca:	2345      	movs	r3, #69	; 0x45
     dcc:	5ce3      	ldrb	r3, [r4, r3]
     dce:	b25b      	sxtb	r3, r3
     dd0:	3301      	adds	r3, #1
     dd2:	d00c      	beq.n	dee <vQueueWaitForMessageRestricted+0x3a>
     dd4:	4b0c      	ldr	r3, [pc, #48]	; (e08 <vQueueWaitForMessageRestricted+0x54>)
     dd6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     dda:	2b00      	cmp	r3, #0
     ddc:	d00b      	beq.n	df6 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
     dde:	0020      	movs	r0, r4
     de0:	4b0a      	ldr	r3, [pc, #40]	; (e0c <vQueueWaitForMessageRestricted+0x58>)
     de2:	4798      	blx	r3
	}
     de4:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
     de6:	2200      	movs	r2, #0
     de8:	2344      	movs	r3, #68	; 0x44
     dea:	54e2      	strb	r2, [r4, r3]
     dec:	e7ed      	b.n	dca <vQueueWaitForMessageRestricted+0x16>
     dee:	2200      	movs	r2, #0
     df0:	2345      	movs	r3, #69	; 0x45
     df2:	54e2      	strb	r2, [r4, r3]
     df4:	e7ee      	b.n	dd4 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     df6:	0020      	movs	r0, r4
     df8:	3024      	adds	r0, #36	; 0x24
     dfa:	0032      	movs	r2, r6
     dfc:	0029      	movs	r1, r5
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <vQueueWaitForMessageRestricted+0x5c>)
     e00:	4798      	blx	r3
     e02:	e7ec      	b.n	dde <vQueueWaitForMessageRestricted+0x2a>
     e04:	00000381 	.word	0x00000381
     e08:	00000399 	.word	0x00000399
     e0c:	0000085d 	.word	0x0000085d
     e10:	00001545 	.word	0x00001545

00000e14 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e14:	4b08      	ldr	r3, [pc, #32]	; (e38 <prvResetNextTaskUnblockTime+0x24>)
     e16:	681b      	ldr	r3, [r3, #0]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d007      	beq.n	e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     e1e:	4b06      	ldr	r3, [pc, #24]	; (e38 <prvResetNextTaskUnblockTime+0x24>)
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e24:	68db      	ldr	r3, [r3, #12]
     e26:	685a      	ldr	r2, [r3, #4]
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <prvResetNextTaskUnblockTime+0x28>)
     e2a:	601a      	str	r2, [r3, #0]
	}
}
     e2c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
     e2e:	2201      	movs	r2, #1
     e30:	4252      	negs	r2, r2
     e32:	4b02      	ldr	r3, [pc, #8]	; (e3c <prvResetNextTaskUnblockTime+0x28>)
     e34:	601a      	str	r2, [r3, #0]
     e36:	e7f9      	b.n	e2c <prvResetNextTaskUnblockTime+0x18>
     e38:	20004e70 	.word	0x20004e70
     e3c:	20004f20 	.word	0x20004f20

00000e40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     e40:	b570      	push	{r4, r5, r6, lr}
     e42:	0004      	movs	r4, r0
     e44:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     e46:	4b17      	ldr	r3, [pc, #92]	; (ea4 <prvAddCurrentTaskToDelayedList+0x64>)
     e48:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     e4a:	4b17      	ldr	r3, [pc, #92]	; (ea8 <prvAddCurrentTaskToDelayedList+0x68>)
     e4c:	6818      	ldr	r0, [r3, #0]
     e4e:	3004      	adds	r0, #4
     e50:	4b16      	ldr	r3, [pc, #88]	; (eac <prvAddCurrentTaskToDelayedList+0x6c>)
     e52:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     e54:	1c63      	adds	r3, r4, #1
     e56:	d013      	beq.n	e80 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
     e58:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     e5a:	4b13      	ldr	r3, [pc, #76]	; (ea8 <prvAddCurrentTaskToDelayedList+0x68>)
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
     e60:	42a6      	cmp	r6, r4
     e62:	d816      	bhi.n	e92 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e64:	4b12      	ldr	r3, [pc, #72]	; (eb0 <prvAddCurrentTaskToDelayedList+0x70>)
     e66:	6818      	ldr	r0, [r3, #0]
     e68:	4b0f      	ldr	r3, [pc, #60]	; (ea8 <prvAddCurrentTaskToDelayedList+0x68>)
     e6a:	6819      	ldr	r1, [r3, #0]
     e6c:	3104      	adds	r1, #4
     e6e:	4b11      	ldr	r3, [pc, #68]	; (eb4 <prvAddCurrentTaskToDelayedList+0x74>)
     e70:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
     e72:	4b11      	ldr	r3, [pc, #68]	; (eb8 <prvAddCurrentTaskToDelayedList+0x78>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	429c      	cmp	r4, r3
     e78:	d212      	bcs.n	ea0 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
     e7a:	4b0f      	ldr	r3, [pc, #60]	; (eb8 <prvAddCurrentTaskToDelayedList+0x78>)
     e7c:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     e7e:	e00f      	b.n	ea0 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     e80:	2d00      	cmp	r5, #0
     e82:	d0e9      	beq.n	e58 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <prvAddCurrentTaskToDelayedList+0x68>)
     e86:	6819      	ldr	r1, [r3, #0]
     e88:	3104      	adds	r1, #4
     e8a:	480c      	ldr	r0, [pc, #48]	; (ebc <prvAddCurrentTaskToDelayedList+0x7c>)
     e8c:	4b0c      	ldr	r3, [pc, #48]	; (ec0 <prvAddCurrentTaskToDelayedList+0x80>)
     e8e:	4798      	blx	r3
     e90:	e006      	b.n	ea0 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     e92:	4b0c      	ldr	r3, [pc, #48]	; (ec4 <prvAddCurrentTaskToDelayedList+0x84>)
     e94:	6818      	ldr	r0, [r3, #0]
     e96:	4b04      	ldr	r3, [pc, #16]	; (ea8 <prvAddCurrentTaskToDelayedList+0x68>)
     e98:	6819      	ldr	r1, [r3, #0]
     e9a:	3104      	adds	r1, #4
     e9c:	4b05      	ldr	r3, [pc, #20]	; (eb4 <prvAddCurrentTaskToDelayedList+0x74>)
     e9e:	4798      	blx	r3
}
     ea0:	bd70      	pop	{r4, r5, r6, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	20004f68 	.word	0x20004f68
     ea8:	20004e6c 	.word	0x20004e6c
     eac:	0000070b 	.word	0x0000070b
     eb0:	20004e70 	.word	0x20004e70
     eb4:	000006dd 	.word	0x000006dd
     eb8:	20004f20 	.word	0x20004f20
     ebc:	20004f40 	.word	0x20004f40
     ec0:	000006c5 	.word	0x000006c5
     ec4:	20004e74 	.word	0x20004e74

00000ec8 <prvIdleTask>:
{
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	46d6      	mov	lr, sl
     ecc:	464f      	mov	r7, r9
     ece:	4646      	mov	r6, r8
     ed0:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     ed2:	4b16      	ldr	r3, [pc, #88]	; (f2c <prvIdleTask+0x64>)
     ed4:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
     ed6:	4b16      	ldr	r3, [pc, #88]	; (f30 <prvIdleTask+0x68>)
     ed8:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     eda:	4f16      	ldr	r7, [pc, #88]	; (f34 <prvIdleTask+0x6c>)
     edc:	e001      	b.n	ee2 <prvIdleTask+0x1a>
			vApplicationIdleHook();
     ede:	4b16      	ldr	r3, [pc, #88]	; (f38 <prvIdleTask+0x70>)
     ee0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     ee2:	464b      	mov	r3, r9
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d018      	beq.n	f1c <prvIdleTask+0x54>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     eea:	4b14      	ldr	r3, [pc, #80]	; (f3c <prvIdleTask+0x74>)
     eec:	469a      	mov	sl, r3
			taskENTER_CRITICAL();
     eee:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     ef4:	1d28      	adds	r0, r5, #4
     ef6:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
     ef8:	4a11      	ldr	r2, [pc, #68]	; (f40 <prvIdleTask+0x78>)
     efa:	6813      	ldr	r3, [r2, #0]
     efc:	3b01      	subs	r3, #1
     efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
     f00:	4c0a      	ldr	r4, [pc, #40]	; (f2c <prvIdleTask+0x64>)
     f02:	6823      	ldr	r3, [r4, #0]
     f04:	3b01      	subs	r3, #1
     f06:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
     f08:	4b0e      	ldr	r3, [pc, #56]	; (f44 <prvIdleTask+0x7c>)
     f0a:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
     f0c:	6b28      	ldr	r0, [r5, #48]	; 0x30
     f0e:	4e0e      	ldr	r6, [pc, #56]	; (f48 <prvIdleTask+0x80>)
     f10:	47b0      	blx	r6
			vPortFree( pxTCB );
     f12:	0028      	movs	r0, r5
     f14:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
     f16:	6823      	ldr	r3, [r4, #0]
     f18:	2b00      	cmp	r3, #0
     f1a:	d1e8      	bne.n	eee <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
     f1c:	4b0b      	ldr	r3, [pc, #44]	; (f4c <prvIdleTask+0x84>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	2b01      	cmp	r3, #1
     f22:	d9dc      	bls.n	ede <prvIdleTask+0x16>
				taskYIELD();
     f24:	4b0a      	ldr	r3, [pc, #40]	; (f50 <prvIdleTask+0x88>)
     f26:	4798      	blx	r3
     f28:	e7d9      	b.n	ede <prvIdleTask+0x16>
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	20004ee0 	.word	0x20004ee0
     f30:	00000381 	.word	0x00000381
     f34:	20004f54 	.word	0x20004f54
     f38:	0000268d 	.word	0x0000268d
     f3c:	0000070b 	.word	0x0000070b
     f40:	20004edc 	.word	0x20004edc
     f44:	00000399 	.word	0x00000399
     f48:	00000549 	.word	0x00000549
     f4c:	20004e78 	.word	0x20004e78
     f50:	00000369 	.word	0x00000369

00000f54 <xTaskCreate>:
	{
     f54:	b5f0      	push	{r4, r5, r6, r7, lr}
     f56:	46c6      	mov	lr, r8
     f58:	b500      	push	{lr}
     f5a:	b084      	sub	sp, #16
     f5c:	9001      	str	r0, [sp, #4]
     f5e:	000d      	movs	r5, r1
     f60:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     f62:	0097      	lsls	r7, r2, #2
     f64:	0038      	movs	r0, r7
     f66:	4b5f      	ldr	r3, [pc, #380]	; (10e4 <xTaskCreate+0x190>)
     f68:	4798      	blx	r3
     f6a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
     f6c:	d100      	bne.n	f70 <xTaskCreate+0x1c>
     f6e:	e089      	b.n	1084 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
     f70:	2058      	movs	r0, #88	; 0x58
     f72:	4b5c      	ldr	r3, [pc, #368]	; (10e4 <xTaskCreate+0x190>)
     f74:	4798      	blx	r3
     f76:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
     f78:	d100      	bne.n	f7c <xTaskCreate+0x28>
     f7a:	e080      	b.n	107e <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
     f7c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     f7e:	003a      	movs	r2, r7
     f80:	21a5      	movs	r1, #165	; 0xa5
     f82:	0030      	movs	r0, r6
     f84:	4b58      	ldr	r3, [pc, #352]	; (10e8 <xTaskCreate+0x194>)
     f86:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
     f88:	1f3a      	subs	r2, r7, #4
     f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f8c:	469c      	mov	ip, r3
     f8e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     f90:	2307      	movs	r3, #7
     f92:	439a      	bics	r2, r3
     f94:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     f96:	782a      	ldrb	r2, [r5, #0]
     f98:	332d      	adds	r3, #45	; 0x2d
     f9a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
     f9c:	782b      	ldrb	r3, [r5, #0]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d00d      	beq.n	fbe <xTaskCreate+0x6a>
     fa2:	3501      	adds	r5, #1
     fa4:	0023      	movs	r3, r4
     fa6:	3335      	adds	r3, #53	; 0x35
     fa8:	0020      	movs	r0, r4
     faa:	303e      	adds	r0, #62	; 0x3e
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     fac:	782a      	ldrb	r2, [r5, #0]
     fae:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
     fb0:	782a      	ldrb	r2, [r5, #0]
     fb2:	2a00      	cmp	r2, #0
     fb4:	d003      	beq.n	fbe <xTaskCreate+0x6a>
     fb6:	3501      	adds	r5, #1
     fb8:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     fba:	4283      	cmp	r3, r0
     fbc:	d1f6      	bne.n	fac <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     fbe:	2200      	movs	r2, #0
     fc0:	233d      	movs	r3, #61	; 0x3d
     fc2:	54e2      	strb	r2, [r4, r3]
     fc4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     fc6:	2f04      	cmp	r7, #4
     fc8:	d900      	bls.n	fcc <xTaskCreate+0x78>
     fca:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
     fcc:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
     fce:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
     fd0:	2600      	movs	r6, #0
     fd2:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     fd4:	1d23      	adds	r3, r4, #4
     fd6:	9303      	str	r3, [sp, #12]
     fd8:	0018      	movs	r0, r3
     fda:	4d44      	ldr	r5, [pc, #272]	; (10ec <xTaskCreate+0x198>)
     fdc:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     fde:	0020      	movs	r0, r4
     fe0:	3018      	adds	r0, #24
     fe2:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     fe4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     fe6:	2305      	movs	r3, #5
     fe8:	1bdb      	subs	r3, r3, r7
     fea:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     fec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
     fee:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     ff0:	2354      	movs	r3, #84	; 0x54
     ff2:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     ff4:	9a02      	ldr	r2, [sp, #8]
     ff6:	9901      	ldr	r1, [sp, #4]
     ff8:	4640      	mov	r0, r8
     ffa:	4b3d      	ldr	r3, [pc, #244]	; (10f0 <xTaskCreate+0x19c>)
     ffc:	4798      	blx	r3
     ffe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1002:	2b00      	cmp	r3, #0
    1004:	d000      	beq.n	1008 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1006:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <xTaskCreate+0x1a0>)
    100a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    100c:	4a3a      	ldr	r2, [pc, #232]	; (10f8 <xTaskCreate+0x1a4>)
    100e:	6813      	ldr	r3, [r2, #0]
    1010:	3301      	adds	r3, #1
    1012:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1014:	4b39      	ldr	r3, [pc, #228]	; (10fc <xTaskCreate+0x1a8>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	2b00      	cmp	r3, #0
    101a:	d036      	beq.n	108a <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    101c:	4b38      	ldr	r3, [pc, #224]	; (1100 <xTaskCreate+0x1ac>)
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	2b00      	cmp	r3, #0
    1022:	d107      	bne.n	1034 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1024:	4b35      	ldr	r3, [pc, #212]	; (10fc <xTaskCreate+0x1a8>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    102a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    102c:	4293      	cmp	r3, r2
    102e:	d801      	bhi.n	1034 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    1030:	4b32      	ldr	r3, [pc, #200]	; (10fc <xTaskCreate+0x1a8>)
    1032:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    1034:	4a33      	ldr	r2, [pc, #204]	; (1104 <xTaskCreate+0x1b0>)
    1036:	6813      	ldr	r3, [r2, #0]
    1038:	3301      	adds	r3, #1
    103a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    103c:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
    103e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1040:	4a31      	ldr	r2, [pc, #196]	; (1108 <xTaskCreate+0x1b4>)
    1042:	6812      	ldr	r2, [r2, #0]
    1044:	4293      	cmp	r3, r2
    1046:	d901      	bls.n	104c <xTaskCreate+0xf8>
    1048:	4a2f      	ldr	r2, [pc, #188]	; (1108 <xTaskCreate+0x1b4>)
    104a:	6013      	str	r3, [r2, #0]
    104c:	0098      	lsls	r0, r3, #2
    104e:	18c0      	adds	r0, r0, r3
    1050:	0080      	lsls	r0, r0, #2
    1052:	4b2e      	ldr	r3, [pc, #184]	; (110c <xTaskCreate+0x1b8>)
    1054:	1818      	adds	r0, r3, r0
    1056:	9903      	ldr	r1, [sp, #12]
    1058:	4b2d      	ldr	r3, [pc, #180]	; (1110 <xTaskCreate+0x1bc>)
    105a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    105c:	4b2d      	ldr	r3, [pc, #180]	; (1114 <xTaskCreate+0x1c0>)
    105e:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    1060:	4b27      	ldr	r3, [pc, #156]	; (1100 <xTaskCreate+0x1ac>)
    1062:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    1064:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    1066:	2b00      	cmp	r3, #0
    1068:	d005      	beq.n	1076 <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    106a:	4b24      	ldr	r3, [pc, #144]	; (10fc <xTaskCreate+0x1a8>)
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1072:	429a      	cmp	r2, r3
    1074:	d331      	bcc.n	10da <xTaskCreate+0x186>
	}
    1076:	b004      	add	sp, #16
    1078:	bc04      	pop	{r2}
    107a:	4690      	mov	r8, r2
    107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    107e:	0030      	movs	r0, r6
    1080:	4b25      	ldr	r3, [pc, #148]	; (1118 <xTaskCreate+0x1c4>)
    1082:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1084:	2001      	movs	r0, #1
    1086:	4240      	negs	r0, r0
    1088:	e7f5      	b.n	1076 <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    108a:	4b1c      	ldr	r3, [pc, #112]	; (10fc <xTaskCreate+0x1a8>)
    108c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    108e:	6813      	ldr	r3, [r2, #0]
    1090:	2b01      	cmp	r3, #1
    1092:	d1cf      	bne.n	1034 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1094:	4f1d      	ldr	r7, [pc, #116]	; (110c <xTaskCreate+0x1b8>)
    1096:	0038      	movs	r0, r7
    1098:	4e20      	ldr	r6, [pc, #128]	; (111c <xTaskCreate+0x1c8>)
    109a:	47b0      	blx	r6
    109c:	0038      	movs	r0, r7
    109e:	3014      	adds	r0, #20
    10a0:	47b0      	blx	r6
    10a2:	0038      	movs	r0, r7
    10a4:	3028      	adds	r0, #40	; 0x28
    10a6:	47b0      	blx	r6
    10a8:	0038      	movs	r0, r7
    10aa:	303c      	adds	r0, #60	; 0x3c
    10ac:	47b0      	blx	r6
    10ae:	0038      	movs	r0, r7
    10b0:	3050      	adds	r0, #80	; 0x50
    10b2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    10b4:	4b1a      	ldr	r3, [pc, #104]	; (1120 <xTaskCreate+0x1cc>)
    10b6:	4698      	mov	r8, r3
    10b8:	0018      	movs	r0, r3
    10ba:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    10bc:	4f19      	ldr	r7, [pc, #100]	; (1124 <xTaskCreate+0x1d0>)
    10be:	0038      	movs	r0, r7
    10c0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    10c2:	4819      	ldr	r0, [pc, #100]	; (1128 <xTaskCreate+0x1d4>)
    10c4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    10c6:	4819      	ldr	r0, [pc, #100]	; (112c <xTaskCreate+0x1d8>)
    10c8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    10ca:	4819      	ldr	r0, [pc, #100]	; (1130 <xTaskCreate+0x1dc>)
    10cc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    10ce:	4b19      	ldr	r3, [pc, #100]	; (1134 <xTaskCreate+0x1e0>)
    10d0:	4642      	mov	r2, r8
    10d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    10d4:	4b18      	ldr	r3, [pc, #96]	; (1138 <xTaskCreate+0x1e4>)
    10d6:	601f      	str	r7, [r3, #0]
    10d8:	e7ac      	b.n	1034 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    10da:	4b18      	ldr	r3, [pc, #96]	; (113c <xTaskCreate+0x1e8>)
    10dc:	4798      	blx	r3
			xReturn = pdPASS;
    10de:	2001      	movs	r0, #1
    10e0:	e7c9      	b.n	1076 <xTaskCreate+0x122>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	0000041d 	.word	0x0000041d
    10e8:	000026fb 	.word	0x000026fb
    10ec:	000006bf 	.word	0x000006bf
    10f0:	000002e5 	.word	0x000002e5
    10f4:	00000381 	.word	0x00000381
    10f8:	20004edc 	.word	0x20004edc
    10fc:	20004e6c 	.word	0x20004e6c
    1100:	20004f3c 	.word	0x20004f3c
    1104:	20004eec 	.word	0x20004eec
    1108:	20004ef0 	.word	0x20004ef0
    110c:	20004e78 	.word	0x20004e78
    1110:	000006c5 	.word	0x000006c5
    1114:	00000399 	.word	0x00000399
    1118:	00000549 	.word	0x00000549
    111c:	000006a9 	.word	0x000006a9
    1120:	20004ef4 	.word	0x20004ef4
    1124:	20004f08 	.word	0x20004f08
    1128:	20004f28 	.word	0x20004f28
    112c:	20004f54 	.word	0x20004f54
    1130:	20004f40 	.word	0x20004f40
    1134:	20004e70 	.word	0x20004e70
    1138:	20004e74 	.word	0x20004e74
    113c:	00000369 	.word	0x00000369

00001140 <vTaskStartScheduler>:
{
    1140:	b510      	push	{r4, lr}
    1142:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    1144:	4b11      	ldr	r3, [pc, #68]	; (118c <vTaskStartScheduler+0x4c>)
    1146:	9301      	str	r3, [sp, #4]
    1148:	2300      	movs	r3, #0
    114a:	9300      	str	r3, [sp, #0]
    114c:	2282      	movs	r2, #130	; 0x82
    114e:	4910      	ldr	r1, [pc, #64]	; (1190 <vTaskStartScheduler+0x50>)
    1150:	4810      	ldr	r0, [pc, #64]	; (1194 <vTaskStartScheduler+0x54>)
    1152:	4c11      	ldr	r4, [pc, #68]	; (1198 <vTaskStartScheduler+0x58>)
    1154:	47a0      	blx	r4
		if( xReturn == pdPASS )
    1156:	2801      	cmp	r0, #1
    1158:	d003      	beq.n	1162 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    115a:	1c43      	adds	r3, r0, #1
    115c:	d013      	beq.n	1186 <vTaskStartScheduler+0x46>
}
    115e:	b002      	add	sp, #8
    1160:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    1162:	4b0e      	ldr	r3, [pc, #56]	; (119c <vTaskStartScheduler+0x5c>)
    1164:	4798      	blx	r3
	if( xReturn == pdPASS )
    1166:	2801      	cmp	r0, #1
    1168:	d1f7      	bne.n	115a <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    116a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    116c:	2201      	movs	r2, #1
    116e:	4252      	negs	r2, r2
    1170:	4b0b      	ldr	r3, [pc, #44]	; (11a0 <vTaskStartScheduler+0x60>)
    1172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    1174:	3202      	adds	r2, #2
    1176:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <vTaskStartScheduler+0x64>)
    1178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    117a:	2200      	movs	r2, #0
    117c:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <vTaskStartScheduler+0x68>)
    117e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <vTaskStartScheduler+0x6c>)
    1182:	4798      	blx	r3
    1184:	e7eb      	b.n	115e <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1186:	b672      	cpsid	i
    1188:	e7fe      	b.n	1188 <vTaskStartScheduler+0x48>
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	20004f1c 	.word	0x20004f1c
    1190:	00002728 	.word	0x00002728
    1194:	00000ec9 	.word	0x00000ec9
    1198:	00000f55 	.word	0x00000f55
    119c:	000017ed 	.word	0x000017ed
    11a0:	20004f20 	.word	0x20004f20
    11a4:	20004f3c 	.word	0x20004f3c
    11a8:	20004f68 	.word	0x20004f68
    11ac:	00000305 	.word	0x00000305

000011b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    11b0:	4a02      	ldr	r2, [pc, #8]	; (11bc <vTaskSuspendAll+0xc>)
    11b2:	6813      	ldr	r3, [r2, #0]
    11b4:	3301      	adds	r3, #1
    11b6:	6013      	str	r3, [r2, #0]
}
    11b8:	4770      	bx	lr
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	20004ee8 	.word	0x20004ee8

000011c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
    11c0:	4b01      	ldr	r3, [pc, #4]	; (11c8 <xTaskGetTickCount+0x8>)
    11c2:	6818      	ldr	r0, [r3, #0]
}
    11c4:	4770      	bx	lr
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	20004f68 	.word	0x20004f68

000011cc <xTaskIncrementTick>:
{
    11cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ce:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    11d0:	4b3d      	ldr	r3, [pc, #244]	; (12c8 <xTaskIncrementTick+0xfc>)
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d000      	beq.n	11da <xTaskIncrementTick+0xe>
    11d8:	e06d      	b.n	12b6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    11da:	4b3c      	ldr	r3, [pc, #240]	; (12cc <xTaskIncrementTick+0x100>)
    11dc:	681d      	ldr	r5, [r3, #0]
    11de:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    11e0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    11e2:	2d00      	cmp	r5, #0
    11e4:	d112      	bne.n	120c <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    11e6:	4b3a      	ldr	r3, [pc, #232]	; (12d0 <xTaskIncrementTick+0x104>)
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d001      	beq.n	11f4 <xTaskIncrementTick+0x28>
    11f0:	b672      	cpsid	i
    11f2:	e7fe      	b.n	11f2 <xTaskIncrementTick+0x26>
    11f4:	4a36      	ldr	r2, [pc, #216]	; (12d0 <xTaskIncrementTick+0x104>)
    11f6:	6811      	ldr	r1, [r2, #0]
    11f8:	4b36      	ldr	r3, [pc, #216]	; (12d4 <xTaskIncrementTick+0x108>)
    11fa:	6818      	ldr	r0, [r3, #0]
    11fc:	6010      	str	r0, [r2, #0]
    11fe:	6019      	str	r1, [r3, #0]
    1200:	4a35      	ldr	r2, [pc, #212]	; (12d8 <xTaskIncrementTick+0x10c>)
    1202:	6813      	ldr	r3, [r2, #0]
    1204:	3301      	adds	r3, #1
    1206:	6013      	str	r3, [r2, #0]
    1208:	4b34      	ldr	r3, [pc, #208]	; (12dc <xTaskIncrementTick+0x110>)
    120a:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    120c:	4b34      	ldr	r3, [pc, #208]	; (12e0 <xTaskIncrementTick+0x114>)
    120e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    1210:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    1212:	429d      	cmp	r5, r3
    1214:	d333      	bcc.n	127e <xTaskIncrementTick+0xb2>
    1216:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1218:	4f2d      	ldr	r7, [pc, #180]	; (12d0 <xTaskIncrementTick+0x104>)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	2b00      	cmp	r3, #0
    1220:	d029      	beq.n	1276 <xTaskIncrementTick+0xaa>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1222:	4b2b      	ldr	r3, [pc, #172]	; (12d0 <xTaskIncrementTick+0x104>)
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	68db      	ldr	r3, [r3, #12]
    1228:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    122a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    122c:	429d      	cmp	r5, r3
    122e:	d33f      	bcc.n	12b0 <xTaskIncrementTick+0xe4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1230:	1d33      	adds	r3, r6, #4
    1232:	9301      	str	r3, [sp, #4]
    1234:	0018      	movs	r0, r3
    1236:	4b2b      	ldr	r3, [pc, #172]	; (12e4 <xTaskIncrementTick+0x118>)
    1238:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    123a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    123c:	2b00      	cmp	r3, #0
    123e:	d003      	beq.n	1248 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1240:	0030      	movs	r0, r6
    1242:	3018      	adds	r0, #24
    1244:	4b27      	ldr	r3, [pc, #156]	; (12e4 <xTaskIncrementTick+0x118>)
    1246:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1248:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    124a:	4a27      	ldr	r2, [pc, #156]	; (12e8 <xTaskIncrementTick+0x11c>)
    124c:	6812      	ldr	r2, [r2, #0]
    124e:	4293      	cmp	r3, r2
    1250:	d901      	bls.n	1256 <xTaskIncrementTick+0x8a>
    1252:	4a25      	ldr	r2, [pc, #148]	; (12e8 <xTaskIncrementTick+0x11c>)
    1254:	6013      	str	r3, [r2, #0]
    1256:	0098      	lsls	r0, r3, #2
    1258:	18c0      	adds	r0, r0, r3
    125a:	0080      	lsls	r0, r0, #2
    125c:	4b23      	ldr	r3, [pc, #140]	; (12ec <xTaskIncrementTick+0x120>)
    125e:	1818      	adds	r0, r3, r0
    1260:	9901      	ldr	r1, [sp, #4]
    1262:	4b23      	ldr	r3, [pc, #140]	; (12f0 <xTaskIncrementTick+0x124>)
    1264:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1266:	4b23      	ldr	r3, [pc, #140]	; (12f4 <xTaskIncrementTick+0x128>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    126e:	429a      	cmp	r2, r3
    1270:	d3d3      	bcc.n	121a <xTaskIncrementTick+0x4e>
							xSwitchRequired = pdTRUE;
    1272:	2401      	movs	r4, #1
    1274:	e7d1      	b.n	121a <xTaskIncrementTick+0x4e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1276:	2201      	movs	r2, #1
    1278:	4252      	negs	r2, r2
    127a:	4b19      	ldr	r3, [pc, #100]	; (12e0 <xTaskIncrementTick+0x114>)
    127c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    127e:	4b1d      	ldr	r3, [pc, #116]	; (12f4 <xTaskIncrementTick+0x128>)
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1284:	0093      	lsls	r3, r2, #2
    1286:	189b      	adds	r3, r3, r2
    1288:	009b      	lsls	r3, r3, #2
    128a:	4a18      	ldr	r2, [pc, #96]	; (12ec <xTaskIncrementTick+0x120>)
    128c:	589b      	ldr	r3, [r3, r2]
    128e:	2b01      	cmp	r3, #1
    1290:	d900      	bls.n	1294 <xTaskIncrementTick+0xc8>
				xSwitchRequired = pdTRUE;
    1292:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    1294:	4b18      	ldr	r3, [pc, #96]	; (12f8 <xTaskIncrementTick+0x12c>)
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	2b00      	cmp	r3, #0
    129a:	d101      	bne.n	12a0 <xTaskIncrementTick+0xd4>
				vApplicationTickHook();
    129c:	4b17      	ldr	r3, [pc, #92]	; (12fc <xTaskIncrementTick+0x130>)
    129e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
    12a0:	4b17      	ldr	r3, [pc, #92]	; (1300 <xTaskIncrementTick+0x134>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d000      	beq.n	12aa <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
    12a8:	2401      	movs	r4, #1
}
    12aa:	0020      	movs	r0, r4
    12ac:	b003      	add	sp, #12
    12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xNextTaskUnblockTime = xItemValue;
    12b0:	4a0b      	ldr	r2, [pc, #44]	; (12e0 <xTaskIncrementTick+0x114>)
    12b2:	6013      	str	r3, [r2, #0]
						break;
    12b4:	e7e3      	b.n	127e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    12b6:	4a10      	ldr	r2, [pc, #64]	; (12f8 <xTaskIncrementTick+0x12c>)
    12b8:	6813      	ldr	r3, [r2, #0]
    12ba:	3301      	adds	r3, #1
    12bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
    12be:	4b0f      	ldr	r3, [pc, #60]	; (12fc <xTaskIncrementTick+0x130>)
    12c0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
    12c2:	2400      	movs	r4, #0
    12c4:	e7ec      	b.n	12a0 <xTaskIncrementTick+0xd4>
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	20004ee8 	.word	0x20004ee8
    12cc:	20004f68 	.word	0x20004f68
    12d0:	20004e70 	.word	0x20004e70
    12d4:	20004e74 	.word	0x20004e74
    12d8:	20004f24 	.word	0x20004f24
    12dc:	00000e15 	.word	0x00000e15
    12e0:	20004f20 	.word	0x20004f20
    12e4:	0000070b 	.word	0x0000070b
    12e8:	20004ef0 	.word	0x20004ef0
    12ec:	20004e78 	.word	0x20004e78
    12f0:	000006c5 	.word	0x000006c5
    12f4:	20004e6c 	.word	0x20004e6c
    12f8:	20004ee4 	.word	0x20004ee4
    12fc:	00002699 	.word	0x00002699
    1300:	20004f6c 	.word	0x20004f6c

00001304 <xTaskResumeAll>:
{
    1304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    1306:	4b30      	ldr	r3, [pc, #192]	; (13c8 <xTaskResumeAll+0xc4>)
    1308:	681b      	ldr	r3, [r3, #0]
    130a:	2b00      	cmp	r3, #0
    130c:	d101      	bne.n	1312 <xTaskResumeAll+0xe>
    130e:	b672      	cpsid	i
    1310:	e7fe      	b.n	1310 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    1312:	4b2e      	ldr	r3, [pc, #184]	; (13cc <xTaskResumeAll+0xc8>)
    1314:	4798      	blx	r3
		--uxSchedulerSuspended;
    1316:	4b2c      	ldr	r3, [pc, #176]	; (13c8 <xTaskResumeAll+0xc4>)
    1318:	681a      	ldr	r2, [r3, #0]
    131a:	3a01      	subs	r2, #1
    131c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    131e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    1320:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1322:	2b00      	cmp	r3, #0
    1324:	d103      	bne.n	132e <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1326:	4b2a      	ldr	r3, [pc, #168]	; (13d0 <xTaskResumeAll+0xcc>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	2b00      	cmp	r3, #0
    132c:	d103      	bne.n	1336 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    132e:	4b29      	ldr	r3, [pc, #164]	; (13d4 <xTaskResumeAll+0xd0>)
    1330:	4798      	blx	r3
}
    1332:	0020      	movs	r0, r4
    1334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1336:	4d28      	ldr	r5, [pc, #160]	; (13d8 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1338:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    133a:	682b      	ldr	r3, [r5, #0]
    133c:	2b00      	cmp	r3, #0
    133e:	d022      	beq.n	1386 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1340:	68fb      	ldr	r3, [r7, #12]
    1342:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1344:	0020      	movs	r0, r4
    1346:	3018      	adds	r0, #24
    1348:	4b24      	ldr	r3, [pc, #144]	; (13dc <xTaskResumeAll+0xd8>)
    134a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    134c:	1d26      	adds	r6, r4, #4
    134e:	0030      	movs	r0, r6
    1350:	4b22      	ldr	r3, [pc, #136]	; (13dc <xTaskResumeAll+0xd8>)
    1352:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1356:	4a22      	ldr	r2, [pc, #136]	; (13e0 <xTaskResumeAll+0xdc>)
    1358:	6812      	ldr	r2, [r2, #0]
    135a:	4293      	cmp	r3, r2
    135c:	d901      	bls.n	1362 <xTaskResumeAll+0x5e>
    135e:	4a20      	ldr	r2, [pc, #128]	; (13e0 <xTaskResumeAll+0xdc>)
    1360:	6013      	str	r3, [r2, #0]
    1362:	0098      	lsls	r0, r3, #2
    1364:	18c0      	adds	r0, r0, r3
    1366:	0080      	lsls	r0, r0, #2
    1368:	4b1e      	ldr	r3, [pc, #120]	; (13e4 <xTaskResumeAll+0xe0>)
    136a:	1818      	adds	r0, r3, r0
    136c:	0031      	movs	r1, r6
    136e:	4b1e      	ldr	r3, [pc, #120]	; (13e8 <xTaskResumeAll+0xe4>)
    1370:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1372:	4b1e      	ldr	r3, [pc, #120]	; (13ec <xTaskResumeAll+0xe8>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    137a:	429a      	cmp	r2, r3
    137c:	d3dd      	bcc.n	133a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    137e:	2201      	movs	r2, #1
    1380:	4b1b      	ldr	r3, [pc, #108]	; (13f0 <xTaskResumeAll+0xec>)
    1382:	601a      	str	r2, [r3, #0]
    1384:	e7d9      	b.n	133a <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    1386:	2c00      	cmp	r4, #0
    1388:	d001      	beq.n	138e <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    138a:	4b1a      	ldr	r3, [pc, #104]	; (13f4 <xTaskResumeAll+0xf0>)
    138c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    138e:	4b1a      	ldr	r3, [pc, #104]	; (13f8 <xTaskResumeAll+0xf4>)
    1390:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1392:	2c00      	cmp	r4, #0
    1394:	d00e      	beq.n	13b4 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    1396:	4f19      	ldr	r7, [pc, #100]	; (13fc <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    1398:	4e15      	ldr	r6, [pc, #84]	; (13f0 <xTaskResumeAll+0xec>)
    139a:	2501      	movs	r5, #1
    139c:	e002      	b.n	13a4 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    139e:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    13a0:	2c00      	cmp	r4, #0
    13a2:	d004      	beq.n	13ae <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    13a4:	47b8      	blx	r7
    13a6:	2800      	cmp	r0, #0
    13a8:	d0f9      	beq.n	139e <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    13aa:	6035      	str	r5, [r6, #0]
    13ac:	e7f7      	b.n	139e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    13ae:	2200      	movs	r2, #0
    13b0:	4b11      	ldr	r3, [pc, #68]	; (13f8 <xTaskResumeAll+0xf4>)
    13b2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    13b4:	4b0e      	ldr	r3, [pc, #56]	; (13f0 <xTaskResumeAll+0xec>)
    13b6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    13b8:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0b7      	beq.n	132e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    13be:	4b10      	ldr	r3, [pc, #64]	; (1400 <xTaskResumeAll+0xfc>)
    13c0:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    13c2:	3401      	adds	r4, #1
    13c4:	e7b3      	b.n	132e <xTaskResumeAll+0x2a>
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	20004ee8 	.word	0x20004ee8
    13cc:	00000381 	.word	0x00000381
    13d0:	20004edc 	.word	0x20004edc
    13d4:	00000399 	.word	0x00000399
    13d8:	20004f28 	.word	0x20004f28
    13dc:	0000070b 	.word	0x0000070b
    13e0:	20004ef0 	.word	0x20004ef0
    13e4:	20004e78 	.word	0x20004e78
    13e8:	000006c5 	.word	0x000006c5
    13ec:	20004e6c 	.word	0x20004e6c
    13f0:	20004f6c 	.word	0x20004f6c
    13f4:	00000e15 	.word	0x00000e15
    13f8:	20004ee4 	.word	0x20004ee4
    13fc:	000011cd 	.word	0x000011cd
    1400:	00000369 	.word	0x00000369

00001404 <vTaskDelay>:
	{
    1404:	b510      	push	{r4, lr}
    1406:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    1408:	d00f      	beq.n	142a <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    140a:	4b09      	ldr	r3, [pc, #36]	; (1430 <vTaskDelay+0x2c>)
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d001      	beq.n	1416 <vTaskDelay+0x12>
    1412:	b672      	cpsid	i
    1414:	e7fe      	b.n	1414 <vTaskDelay+0x10>
			vTaskSuspendAll();
    1416:	4b07      	ldr	r3, [pc, #28]	; (1434 <vTaskDelay+0x30>)
    1418:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    141a:	2100      	movs	r1, #0
    141c:	0020      	movs	r0, r4
    141e:	4b06      	ldr	r3, [pc, #24]	; (1438 <vTaskDelay+0x34>)
    1420:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    1422:	4b06      	ldr	r3, [pc, #24]	; (143c <vTaskDelay+0x38>)
    1424:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    1426:	2800      	cmp	r0, #0
    1428:	d101      	bne.n	142e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <vTaskDelay+0x3c>)
    142c:	4798      	blx	r3
	}
    142e:	bd10      	pop	{r4, pc}
    1430:	20004ee8 	.word	0x20004ee8
    1434:	000011b1 	.word	0x000011b1
    1438:	00000e41 	.word	0x00000e41
    143c:	00001305 	.word	0x00001305
    1440:	00000369 	.word	0x00000369

00001444 <vTaskSwitchContext>:
{
    1444:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1446:	4b2d      	ldr	r3, [pc, #180]	; (14fc <vTaskSwitchContext+0xb8>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	2b00      	cmp	r3, #0
    144c:	d128      	bne.n	14a0 <vTaskSwitchContext+0x5c>
		xYieldPending = pdFALSE;
    144e:	2200      	movs	r2, #0
    1450:	4b2b      	ldr	r3, [pc, #172]	; (1500 <vTaskSwitchContext+0xbc>)
    1452:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    1454:	4b2b      	ldr	r3, [pc, #172]	; (1504 <vTaskSwitchContext+0xc0>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    145a:	4a2b      	ldr	r2, [pc, #172]	; (1508 <vTaskSwitchContext+0xc4>)
    145c:	6819      	ldr	r1, [r3, #0]
    145e:	4291      	cmp	r1, r2
    1460:	d102      	bne.n	1468 <vTaskSwitchContext+0x24>
    1462:	6859      	ldr	r1, [r3, #4]
    1464:	4291      	cmp	r1, r2
    1466:	d01f      	beq.n	14a8 <vTaskSwitchContext+0x64>
    1468:	4b26      	ldr	r3, [pc, #152]	; (1504 <vTaskSwitchContext+0xc0>)
    146a:	6818      	ldr	r0, [r3, #0]
    146c:	6819      	ldr	r1, [r3, #0]
    146e:	3134      	adds	r1, #52	; 0x34
    1470:	4b26      	ldr	r3, [pc, #152]	; (150c <vTaskSwitchContext+0xc8>)
    1472:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1474:	4b26      	ldr	r3, [pc, #152]	; (1510 <vTaskSwitchContext+0xcc>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	009a      	lsls	r2, r3, #2
    147a:	18d2      	adds	r2, r2, r3
    147c:	0092      	lsls	r2, r2, #2
    147e:	4925      	ldr	r1, [pc, #148]	; (1514 <vTaskSwitchContext+0xd0>)
    1480:	5852      	ldr	r2, [r2, r1]
    1482:	2a00      	cmp	r2, #0
    1484:	d117      	bne.n	14b6 <vTaskSwitchContext+0x72>
    1486:	2b00      	cmp	r3, #0
    1488:	d008      	beq.n	149c <vTaskSwitchContext+0x58>
    148a:	3b01      	subs	r3, #1
    148c:	009a      	lsls	r2, r3, #2
    148e:	18d2      	adds	r2, r2, r3
    1490:	0092      	lsls	r2, r2, #2
    1492:	5852      	ldr	r2, [r2, r1]
    1494:	2a00      	cmp	r2, #0
    1496:	d10e      	bne.n	14b6 <vTaskSwitchContext+0x72>
    1498:	2b00      	cmp	r3, #0
    149a:	d1f6      	bne.n	148a <vTaskSwitchContext+0x46>
    149c:	b672      	cpsid	i
    149e:	e7fe      	b.n	149e <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
    14a0:	2201      	movs	r2, #1
    14a2:	4b17      	ldr	r3, [pc, #92]	; (1500 <vTaskSwitchContext+0xbc>)
    14a4:	601a      	str	r2, [r3, #0]
}
    14a6:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    14a8:	6899      	ldr	r1, [r3, #8]
    14aa:	4291      	cmp	r1, r2
    14ac:	d1dc      	bne.n	1468 <vTaskSwitchContext+0x24>
    14ae:	68db      	ldr	r3, [r3, #12]
    14b0:	4293      	cmp	r3, r2
    14b2:	d1d9      	bne.n	1468 <vTaskSwitchContext+0x24>
    14b4:	e7de      	b.n	1474 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    14b6:	4817      	ldr	r0, [pc, #92]	; (1514 <vTaskSwitchContext+0xd0>)
    14b8:	009a      	lsls	r2, r3, #2
    14ba:	18d1      	adds	r1, r2, r3
    14bc:	0089      	lsls	r1, r1, #2
    14be:	1841      	adds	r1, r0, r1
    14c0:	684c      	ldr	r4, [r1, #4]
    14c2:	6864      	ldr	r4, [r4, #4]
    14c4:	604c      	str	r4, [r1, #4]
    14c6:	18d2      	adds	r2, r2, r3
    14c8:	0092      	lsls	r2, r2, #2
    14ca:	3208      	adds	r2, #8
    14cc:	1882      	adds	r2, r0, r2
    14ce:	4294      	cmp	r4, r2
    14d0:	d00b      	beq.n	14ea <vTaskSwitchContext+0xa6>
    14d2:	009a      	lsls	r2, r3, #2
    14d4:	18d2      	adds	r2, r2, r3
    14d6:	0092      	lsls	r2, r2, #2
    14d8:	490e      	ldr	r1, [pc, #56]	; (1514 <vTaskSwitchContext+0xd0>)
    14da:	188a      	adds	r2, r1, r2
    14dc:	6852      	ldr	r2, [r2, #4]
    14de:	68d1      	ldr	r1, [r2, #12]
    14e0:	4a08      	ldr	r2, [pc, #32]	; (1504 <vTaskSwitchContext+0xc0>)
    14e2:	6011      	str	r1, [r2, #0]
    14e4:	4a0a      	ldr	r2, [pc, #40]	; (1510 <vTaskSwitchContext+0xcc>)
    14e6:	6013      	str	r3, [r2, #0]
}
    14e8:	e7dd      	b.n	14a6 <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    14ea:	6860      	ldr	r0, [r4, #4]
    14ec:	009a      	lsls	r2, r3, #2
    14ee:	18d2      	adds	r2, r2, r3
    14f0:	0092      	lsls	r2, r2, #2
    14f2:	4908      	ldr	r1, [pc, #32]	; (1514 <vTaskSwitchContext+0xd0>)
    14f4:	188a      	adds	r2, r1, r2
    14f6:	6050      	str	r0, [r2, #4]
    14f8:	e7eb      	b.n	14d2 <vTaskSwitchContext+0x8e>
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	20004ee8 	.word	0x20004ee8
    1500:	20004f6c 	.word	0x20004f6c
    1504:	20004e6c 	.word	0x20004e6c
    1508:	a5a5a5a5 	.word	0xa5a5a5a5
    150c:	0000269b 	.word	0x0000269b
    1510:	20004ef0 	.word	0x20004ef0
    1514:	20004e78 	.word	0x20004e78

00001518 <vTaskPlaceOnEventList>:
{
    1518:	b510      	push	{r4, lr}
    151a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    151c:	2800      	cmp	r0, #0
    151e:	d101      	bne.n	1524 <vTaskPlaceOnEventList+0xc>
    1520:	b672      	cpsid	i
    1522:	e7fe      	b.n	1522 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <vTaskPlaceOnEventList+0x20>)
    1526:	6819      	ldr	r1, [r3, #0]
    1528:	3118      	adds	r1, #24
    152a:	4b04      	ldr	r3, [pc, #16]	; (153c <vTaskPlaceOnEventList+0x24>)
    152c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    152e:	2101      	movs	r1, #1
    1530:	0020      	movs	r0, r4
    1532:	4b03      	ldr	r3, [pc, #12]	; (1540 <vTaskPlaceOnEventList+0x28>)
    1534:	4798      	blx	r3
}
    1536:	bd10      	pop	{r4, pc}
    1538:	20004e6c 	.word	0x20004e6c
    153c:	000006dd 	.word	0x000006dd
    1540:	00000e41 	.word	0x00000e41

00001544 <vTaskPlaceOnEventListRestricted>:
	{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	000c      	movs	r4, r1
    1548:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    154a:	2800      	cmp	r0, #0
    154c:	d00d      	beq.n	156a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    154e:	4b08      	ldr	r3, [pc, #32]	; (1570 <vTaskPlaceOnEventListRestricted+0x2c>)
    1550:	6819      	ldr	r1, [r3, #0]
    1552:	3118      	adds	r1, #24
    1554:	4b07      	ldr	r3, [pc, #28]	; (1574 <vTaskPlaceOnEventListRestricted+0x30>)
    1556:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    1558:	2d00      	cmp	r5, #0
    155a:	d001      	beq.n	1560 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    155c:	2401      	movs	r4, #1
    155e:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    1560:	0029      	movs	r1, r5
    1562:	0020      	movs	r0, r4
    1564:	4b04      	ldr	r3, [pc, #16]	; (1578 <vTaskPlaceOnEventListRestricted+0x34>)
    1566:	4798      	blx	r3
	}
    1568:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    156a:	b672      	cpsid	i
    156c:	e7fe      	b.n	156c <vTaskPlaceOnEventListRestricted+0x28>
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	20004e6c 	.word	0x20004e6c
    1574:	000006c5 	.word	0x000006c5
    1578:	00000e41 	.word	0x00000e41

0000157c <xTaskRemoveFromEventList>:
{
    157c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    157e:	68c3      	ldr	r3, [r0, #12]
    1580:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1582:	2c00      	cmp	r4, #0
    1584:	d027      	beq.n	15d6 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1586:	0025      	movs	r5, r4
    1588:	3518      	adds	r5, #24
    158a:	0028      	movs	r0, r5
    158c:	4b15      	ldr	r3, [pc, #84]	; (15e4 <xTaskRemoveFromEventList+0x68>)
    158e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1590:	4b15      	ldr	r3, [pc, #84]	; (15e8 <xTaskRemoveFromEventList+0x6c>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	2b00      	cmp	r3, #0
    1596:	d120      	bne.n	15da <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1598:	1d25      	adds	r5, r4, #4
    159a:	0028      	movs	r0, r5
    159c:	4b11      	ldr	r3, [pc, #68]	; (15e4 <xTaskRemoveFromEventList+0x68>)
    159e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    15a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    15a2:	4a12      	ldr	r2, [pc, #72]	; (15ec <xTaskRemoveFromEventList+0x70>)
    15a4:	6812      	ldr	r2, [r2, #0]
    15a6:	4293      	cmp	r3, r2
    15a8:	d901      	bls.n	15ae <xTaskRemoveFromEventList+0x32>
    15aa:	4a10      	ldr	r2, [pc, #64]	; (15ec <xTaskRemoveFromEventList+0x70>)
    15ac:	6013      	str	r3, [r2, #0]
    15ae:	0098      	lsls	r0, r3, #2
    15b0:	18c0      	adds	r0, r0, r3
    15b2:	0080      	lsls	r0, r0, #2
    15b4:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <xTaskRemoveFromEventList+0x74>)
    15b6:	1818      	adds	r0, r3, r0
    15b8:	0029      	movs	r1, r5
    15ba:	4b0e      	ldr	r3, [pc, #56]	; (15f4 <xTaskRemoveFromEventList+0x78>)
    15bc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    15be:	4b0e      	ldr	r3, [pc, #56]	; (15f8 <xTaskRemoveFromEventList+0x7c>)
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    15c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    15c6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    15c8:	429a      	cmp	r2, r3
    15ca:	d903      	bls.n	15d4 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    15cc:	2201      	movs	r2, #1
    15ce:	4b0b      	ldr	r3, [pc, #44]	; (15fc <xTaskRemoveFromEventList+0x80>)
    15d0:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    15d2:	3001      	adds	r0, #1
}
    15d4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    15d6:	b672      	cpsid	i
    15d8:	e7fe      	b.n	15d8 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    15da:	0029      	movs	r1, r5
    15dc:	4808      	ldr	r0, [pc, #32]	; (1600 <xTaskRemoveFromEventList+0x84>)
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <xTaskRemoveFromEventList+0x78>)
    15e0:	4798      	blx	r3
    15e2:	e7ec      	b.n	15be <xTaskRemoveFromEventList+0x42>
    15e4:	0000070b 	.word	0x0000070b
    15e8:	20004ee8 	.word	0x20004ee8
    15ec:	20004ef0 	.word	0x20004ef0
    15f0:	20004e78 	.word	0x20004e78
    15f4:	000006c5 	.word	0x000006c5
    15f8:	20004e6c 	.word	0x20004e6c
    15fc:	20004f6c 	.word	0x20004f6c
    1600:	20004f28 	.word	0x20004f28

00001604 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1604:	4b03      	ldr	r3, [pc, #12]	; (1614 <vTaskInternalSetTimeOutState+0x10>)
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    160a:	4b03      	ldr	r3, [pc, #12]	; (1618 <vTaskInternalSetTimeOutState+0x14>)
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	6043      	str	r3, [r0, #4]
}
    1610:	4770      	bx	lr
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	20004f24 	.word	0x20004f24
    1618:	20004f68 	.word	0x20004f68

0000161c <xTaskCheckForTimeOut>:
{
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	0006      	movs	r6, r0
    1620:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    1622:	2800      	cmp	r0, #0
    1624:	d01b      	beq.n	165e <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    1626:	2900      	cmp	r1, #0
    1628:	d01b      	beq.n	1662 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    162a:	4b13      	ldr	r3, [pc, #76]	; (1678 <xTaskCheckForTimeOut+0x5c>)
    162c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    162e:	4b13      	ldr	r3, [pc, #76]	; (167c <xTaskCheckForTimeOut+0x60>)
    1630:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1632:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    1634:	682b      	ldr	r3, [r5, #0]
    1636:	1c58      	adds	r0, r3, #1
    1638:	d01c      	beq.n	1674 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    163a:	4811      	ldr	r0, [pc, #68]	; (1680 <xTaskCheckForTimeOut+0x64>)
    163c:	6800      	ldr	r0, [r0, #0]
    163e:	6834      	ldr	r4, [r6, #0]
    1640:	4284      	cmp	r4, r0
    1642:	d002      	beq.n	164a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    1644:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1646:	428a      	cmp	r2, r1
    1648:	d205      	bcs.n	1656 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    164a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    164c:	429a      	cmp	r2, r3
    164e:	d30a      	bcc.n	1666 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    1650:	2300      	movs	r3, #0
    1652:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    1654:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    1656:	4b0b      	ldr	r3, [pc, #44]	; (1684 <xTaskCheckForTimeOut+0x68>)
    1658:	4798      	blx	r3
}
    165a:	0020      	movs	r0, r4
    165c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    165e:	b672      	cpsid	i
    1660:	e7fe      	b.n	1660 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    1662:	b672      	cpsid	i
    1664:	e7fe      	b.n	1664 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    1666:	1a9b      	subs	r3, r3, r2
    1668:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    166a:	0030      	movs	r0, r6
    166c:	4b06      	ldr	r3, [pc, #24]	; (1688 <xTaskCheckForTimeOut+0x6c>)
    166e:	4798      	blx	r3
			xReturn = pdFALSE;
    1670:	2400      	movs	r4, #0
    1672:	e7f0      	b.n	1656 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    1674:	2400      	movs	r4, #0
    1676:	e7ee      	b.n	1656 <xTaskCheckForTimeOut+0x3a>
    1678:	00000381 	.word	0x00000381
    167c:	20004f68 	.word	0x20004f68
    1680:	20004f24 	.word	0x20004f24
    1684:	00000399 	.word	0x00000399
    1688:	00001605 	.word	0x00001605

0000168c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    168c:	2201      	movs	r2, #1
    168e:	4b01      	ldr	r3, [pc, #4]	; (1694 <vTaskMissedYield+0x8>)
    1690:	601a      	str	r2, [r3, #0]
}
    1692:	4770      	bx	lr
    1694:	20004f6c 	.word	0x20004f6c

00001698 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    1698:	4b05      	ldr	r3, [pc, #20]	; (16b0 <xTaskGetSchedulerState+0x18>)
    169a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    169c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    169e:	2b00      	cmp	r3, #0
    16a0:	d004      	beq.n	16ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <xTaskGetSchedulerState+0x1c>)
    16a4:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    16a6:	4243      	negs	r3, r0
    16a8:	4158      	adcs	r0, r3
    16aa:	0040      	lsls	r0, r0, #1
	}
    16ac:	4770      	bx	lr
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	20004f3c 	.word	0x20004f3c
    16b4:	20004ee8 	.word	0x20004ee8

000016b8 <xTaskPriorityDisinherit>:
	{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    16bc:	d02c      	beq.n	1718 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    16be:	4b18      	ldr	r3, [pc, #96]	; (1720 <xTaskPriorityDisinherit+0x68>)
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	4298      	cmp	r0, r3
    16c4:	d001      	beq.n	16ca <xTaskPriorityDisinherit+0x12>
    16c6:	b672      	cpsid	i
    16c8:	e7fe      	b.n	16c8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    16ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    16cc:	2b00      	cmp	r3, #0
    16ce:	d101      	bne.n	16d4 <xTaskPriorityDisinherit+0x1c>
    16d0:	b672      	cpsid	i
    16d2:	e7fe      	b.n	16d2 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    16d4:	3b01      	subs	r3, #1
    16d6:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    16d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    16da:	6c81      	ldr	r1, [r0, #72]	; 0x48
    16dc:	428a      	cmp	r2, r1
    16de:	d01d      	beq.n	171c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    16e0:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    16e2:	2b00      	cmp	r3, #0
    16e4:	d117      	bne.n	1716 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    16e6:	1d25      	adds	r5, r4, #4
    16e8:	0028      	movs	r0, r5
    16ea:	4b0e      	ldr	r3, [pc, #56]	; (1724 <xTaskPriorityDisinherit+0x6c>)
    16ec:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    16ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    16f0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    16f2:	2205      	movs	r2, #5
    16f4:	1ad2      	subs	r2, r2, r3
    16f6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    16f8:	4a0b      	ldr	r2, [pc, #44]	; (1728 <xTaskPriorityDisinherit+0x70>)
    16fa:	6812      	ldr	r2, [r2, #0]
    16fc:	4293      	cmp	r3, r2
    16fe:	d901      	bls.n	1704 <xTaskPriorityDisinherit+0x4c>
    1700:	4a09      	ldr	r2, [pc, #36]	; (1728 <xTaskPriorityDisinherit+0x70>)
    1702:	6013      	str	r3, [r2, #0]
    1704:	009a      	lsls	r2, r3, #2
    1706:	18d3      	adds	r3, r2, r3
    1708:	009b      	lsls	r3, r3, #2
    170a:	4808      	ldr	r0, [pc, #32]	; (172c <xTaskPriorityDisinherit+0x74>)
    170c:	18c0      	adds	r0, r0, r3
    170e:	0029      	movs	r1, r5
    1710:	4b07      	ldr	r3, [pc, #28]	; (1730 <xTaskPriorityDisinherit+0x78>)
    1712:	4798      	blx	r3
					xReturn = pdTRUE;
    1714:	2001      	movs	r0, #1
	}
    1716:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    1718:	2000      	movs	r0, #0
    171a:	e7fc      	b.n	1716 <xTaskPriorityDisinherit+0x5e>
    171c:	2000      	movs	r0, #0
    171e:	e7fa      	b.n	1716 <xTaskPriorityDisinherit+0x5e>
    1720:	20004e6c 	.word	0x20004e6c
    1724:	0000070b 	.word	0x0000070b
    1728:	20004ef0 	.word	0x20004ef0
    172c:	20004e78 	.word	0x20004e78
    1730:	000006c5 	.word	0x000006c5

00001734 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    1734:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1736:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1738:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    173a:	4291      	cmp	r1, r2
    173c:	d80b      	bhi.n	1756 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    173e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1740:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1742:	6983      	ldr	r3, [r0, #24]
    1744:	429a      	cmp	r2, r3
    1746:	d211      	bcs.n	176c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1748:	1d01      	adds	r1, r0, #4
    174a:	4b09      	ldr	r3, [pc, #36]	; (1770 <prvInsertTimerInActiveList+0x3c>)
    174c:	6818      	ldr	r0, [r3, #0]
    174e:	4b09      	ldr	r3, [pc, #36]	; (1774 <prvInsertTimerInActiveList+0x40>)
    1750:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    1752:	2400      	movs	r4, #0
    1754:	e00a      	b.n	176c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1756:	429a      	cmp	r2, r3
    1758:	d202      	bcs.n	1760 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    175a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    175c:	4299      	cmp	r1, r3
    175e:	d205      	bcs.n	176c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1760:	1d01      	adds	r1, r0, #4
    1762:	4b05      	ldr	r3, [pc, #20]	; (1778 <prvInsertTimerInActiveList+0x44>)
    1764:	6818      	ldr	r0, [r3, #0]
    1766:	4b03      	ldr	r3, [pc, #12]	; (1774 <prvInsertTimerInActiveList+0x40>)
    1768:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    176a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    176c:	0020      	movs	r0, r4
    176e:	bd10      	pop	{r4, pc}
    1770:	20004f74 	.word	0x20004f74
    1774:	000006dd 	.word	0x000006dd
    1778:	20004f70 	.word	0x20004f70

0000177c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    177c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    177e:	4b10      	ldr	r3, [pc, #64]	; (17c0 <prvCheckForValidListAndQueue+0x44>)
    1780:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    1782:	4b10      	ldr	r3, [pc, #64]	; (17c4 <prvCheckForValidListAndQueue+0x48>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	2b00      	cmp	r3, #0
    1788:	d002      	beq.n	1790 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    178a:	4b0f      	ldr	r3, [pc, #60]	; (17c8 <prvCheckForValidListAndQueue+0x4c>)
    178c:	4798      	blx	r3
}
    178e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    1790:	4d0e      	ldr	r5, [pc, #56]	; (17cc <prvCheckForValidListAndQueue+0x50>)
    1792:	0028      	movs	r0, r5
    1794:	4e0e      	ldr	r6, [pc, #56]	; (17d0 <prvCheckForValidListAndQueue+0x54>)
    1796:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    1798:	4c0e      	ldr	r4, [pc, #56]	; (17d4 <prvCheckForValidListAndQueue+0x58>)
    179a:	0020      	movs	r0, r4
    179c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    179e:	4b0e      	ldr	r3, [pc, #56]	; (17d8 <prvCheckForValidListAndQueue+0x5c>)
    17a0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    17a2:	4b0e      	ldr	r3, [pc, #56]	; (17dc <prvCheckForValidListAndQueue+0x60>)
    17a4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    17a6:	2200      	movs	r2, #0
    17a8:	2110      	movs	r1, #16
    17aa:	2005      	movs	r0, #5
    17ac:	4b0c      	ldr	r3, [pc, #48]	; (17e0 <prvCheckForValidListAndQueue+0x64>)
    17ae:	4798      	blx	r3
    17b0:	4b04      	ldr	r3, [pc, #16]	; (17c4 <prvCheckForValidListAndQueue+0x48>)
    17b2:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
    17b4:	2800      	cmp	r0, #0
    17b6:	d0e8      	beq.n	178a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    17b8:	490a      	ldr	r1, [pc, #40]	; (17e4 <prvCheckForValidListAndQueue+0x68>)
    17ba:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <prvCheckForValidListAndQueue+0x6c>)
    17bc:	4798      	blx	r3
    17be:	e7e4      	b.n	178a <prvCheckForValidListAndQueue+0xe>
    17c0:	00000381 	.word	0x00000381
    17c4:	20004fa4 	.word	0x20004fa4
    17c8:	00000399 	.word	0x00000399
    17cc:	20004f78 	.word	0x20004f78
    17d0:	000006a9 	.word	0x000006a9
    17d4:	20004f8c 	.word	0x20004f8c
    17d8:	20004f70 	.word	0x20004f70
    17dc:	20004f74 	.word	0x20004f74
    17e0:	00000989 	.word	0x00000989
    17e4:	00002758 	.word	0x00002758
    17e8:	00000d85 	.word	0x00000d85

000017ec <xTimerCreateTimerTask>:
{
    17ec:	b510      	push	{r4, lr}
    17ee:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    17f0:	4b0b      	ldr	r3, [pc, #44]	; (1820 <xTimerCreateTimerTask+0x34>)
    17f2:	4798      	blx	r3
	if( xTimerQueue != NULL )
    17f4:	4b0b      	ldr	r3, [pc, #44]	; (1824 <xTimerCreateTimerTask+0x38>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d00e      	beq.n	181a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
    17fc:	4b0a      	ldr	r3, [pc, #40]	; (1828 <xTimerCreateTimerTask+0x3c>)
    17fe:	9301      	str	r3, [sp, #4]
    1800:	2304      	movs	r3, #4
    1802:	9300      	str	r3, [sp, #0]
    1804:	2300      	movs	r3, #0
    1806:	2282      	movs	r2, #130	; 0x82
    1808:	0052      	lsls	r2, r2, #1
    180a:	4908      	ldr	r1, [pc, #32]	; (182c <xTimerCreateTimerTask+0x40>)
    180c:	4808      	ldr	r0, [pc, #32]	; (1830 <xTimerCreateTimerTask+0x44>)
    180e:	4c09      	ldr	r4, [pc, #36]	; (1834 <xTimerCreateTimerTask+0x48>)
    1810:	47a0      	blx	r4
	configASSERT( xReturn );
    1812:	2800      	cmp	r0, #0
    1814:	d001      	beq.n	181a <xTimerCreateTimerTask+0x2e>
}
    1816:	b002      	add	sp, #8
    1818:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    181a:	b672      	cpsid	i
    181c:	e7fe      	b.n	181c <xTimerCreateTimerTask+0x30>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	0000177d 	.word	0x0000177d
    1824:	20004fa4 	.word	0x20004fa4
    1828:	20004fa8 	.word	0x20004fa8
    182c:	00002760 	.word	0x00002760
    1830:	0000195d 	.word	0x0000195d
    1834:	00000f55 	.word	0x00000f55

00001838 <xTimerGenericCommand>:
{
    1838:	b530      	push	{r4, r5, lr}
    183a:	b085      	sub	sp, #20
    183c:	0004      	movs	r4, r0
    183e:	001d      	movs	r5, r3
	configASSERT( xTimer );
    1840:	2800      	cmp	r0, #0
    1842:	d014      	beq.n	186e <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    1844:	4b13      	ldr	r3, [pc, #76]	; (1894 <xTimerGenericCommand+0x5c>)
    1846:	6818      	ldr	r0, [r3, #0]
    1848:	2800      	cmp	r0, #0
    184a:	d021      	beq.n	1890 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    184c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    184e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1850:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1852:	2905      	cmp	r1, #5
    1854:	dc15      	bgt.n	1882 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1856:	4b10      	ldr	r3, [pc, #64]	; (1898 <xTimerGenericCommand+0x60>)
    1858:	4798      	blx	r3
    185a:	2802      	cmp	r0, #2
    185c:	d009      	beq.n	1872 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    185e:	4b0d      	ldr	r3, [pc, #52]	; (1894 <xTimerGenericCommand+0x5c>)
    1860:	6818      	ldr	r0, [r3, #0]
    1862:	2300      	movs	r3, #0
    1864:	2200      	movs	r2, #0
    1866:	4669      	mov	r1, sp
    1868:	4c0c      	ldr	r4, [pc, #48]	; (189c <xTimerGenericCommand+0x64>)
    186a:	47a0      	blx	r4
    186c:	e00e      	b.n	188c <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    186e:	b672      	cpsid	i
    1870:	e7fe      	b.n	1870 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1872:	4b08      	ldr	r3, [pc, #32]	; (1894 <xTimerGenericCommand+0x5c>)
    1874:	6818      	ldr	r0, [r3, #0]
    1876:	2300      	movs	r3, #0
    1878:	9a08      	ldr	r2, [sp, #32]
    187a:	4669      	mov	r1, sp
    187c:	4c07      	ldr	r4, [pc, #28]	; (189c <xTimerGenericCommand+0x64>)
    187e:	47a0      	blx	r4
    1880:	e004      	b.n	188c <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1882:	2300      	movs	r3, #0
    1884:	002a      	movs	r2, r5
    1886:	4669      	mov	r1, sp
    1888:	4c05      	ldr	r4, [pc, #20]	; (18a0 <xTimerGenericCommand+0x68>)
    188a:	47a0      	blx	r4
}
    188c:	b005      	add	sp, #20
    188e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    1890:	2000      	movs	r0, #0
	return xReturn;
    1892:	e7fb      	b.n	188c <xTimerGenericCommand+0x54>
    1894:	20004fa4 	.word	0x20004fa4
    1898:	00001699 	.word	0x00001699
    189c:	000009d5 	.word	0x000009d5
    18a0:	00000b61 	.word	0x00000b61

000018a4 <prvSampleTimeNow>:
{
    18a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a6:	46d6      	mov	lr, sl
    18a8:	464f      	mov	r7, r9
    18aa:	4646      	mov	r6, r8
    18ac:	b5c0      	push	{r6, r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    18b2:	4b23      	ldr	r3, [pc, #140]	; (1940 <prvSampleTimeNow+0x9c>)
    18b4:	4798      	blx	r3
    18b6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    18b8:	4b22      	ldr	r3, [pc, #136]	; (1944 <prvSampleTimeNow+0xa0>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	4298      	cmp	r0, r3
    18be:	d317      	bcc.n	18f0 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    18c0:	2300      	movs	r3, #0
    18c2:	4642      	mov	r2, r8
    18c4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    18c6:	4b1f      	ldr	r3, [pc, #124]	; (1944 <prvSampleTimeNow+0xa0>)
    18c8:	4652      	mov	r2, sl
    18ca:	601a      	str	r2, [r3, #0]
}
    18cc:	4650      	mov	r0, sl
    18ce:	b002      	add	sp, #8
    18d0:	bc1c      	pop	{r2, r3, r4}
    18d2:	4690      	mov	r8, r2
    18d4:	4699      	mov	r9, r3
    18d6:	46a2      	mov	sl, r4
    18d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    18da:	2300      	movs	r3, #0
    18dc:	9300      	str	r3, [sp, #0]
    18de:	003a      	movs	r2, r7
    18e0:	2100      	movs	r1, #0
    18e2:	0020      	movs	r0, r4
    18e4:	4c18      	ldr	r4, [pc, #96]	; (1948 <prvSampleTimeNow+0xa4>)
    18e6:	47a0      	blx	r4
				configASSERT( xResult );
    18e8:	2800      	cmp	r0, #0
    18ea:	d104      	bne.n	18f6 <prvSampleTimeNow+0x52>
    18ec:	b672      	cpsid	i
    18ee:	e7fe      	b.n	18ee <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    18f0:	4d16      	ldr	r5, [pc, #88]	; (194c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    18f2:	4b17      	ldr	r3, [pc, #92]	; (1950 <prvSampleTimeNow+0xac>)
    18f4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    18f6:	682b      	ldr	r3, [r5, #0]
    18f8:	681a      	ldr	r2, [r3, #0]
    18fa:	2a00      	cmp	r2, #0
    18fc:	d017      	beq.n	192e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    18fe:	68db      	ldr	r3, [r3, #12]
    1900:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1902:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1904:	1d26      	adds	r6, r4, #4
    1906:	0030      	movs	r0, r6
    1908:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    190a:	0020      	movs	r0, r4
    190c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    190e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1910:	69e3      	ldr	r3, [r4, #28]
    1912:	2b01      	cmp	r3, #1
    1914:	d1ef      	bne.n	18f6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1916:	69a3      	ldr	r3, [r4, #24]
    1918:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    191a:	429f      	cmp	r7, r3
    191c:	d2dd      	bcs.n	18da <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    191e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1920:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1922:	4b0a      	ldr	r3, [pc, #40]	; (194c <prvSampleTimeNow+0xa8>)
    1924:	6818      	ldr	r0, [r3, #0]
    1926:	0031      	movs	r1, r6
    1928:	4b0a      	ldr	r3, [pc, #40]	; (1954 <prvSampleTimeNow+0xb0>)
    192a:	4798      	blx	r3
    192c:	e7e3      	b.n	18f6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    192e:	4a0a      	ldr	r2, [pc, #40]	; (1958 <prvSampleTimeNow+0xb4>)
    1930:	4906      	ldr	r1, [pc, #24]	; (194c <prvSampleTimeNow+0xa8>)
    1932:	6810      	ldr	r0, [r2, #0]
    1934:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1936:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    1938:	2301      	movs	r3, #1
    193a:	4642      	mov	r2, r8
    193c:	6013      	str	r3, [r2, #0]
    193e:	e7c2      	b.n	18c6 <prvSampleTimeNow+0x22>
    1940:	000011c1 	.word	0x000011c1
    1944:	20004fa0 	.word	0x20004fa0
    1948:	00001839 	.word	0x00001839
    194c:	20004f70 	.word	0x20004f70
    1950:	0000070b 	.word	0x0000070b
    1954:	000006dd 	.word	0x000006dd
    1958:	20004f74 	.word	0x20004f74

0000195c <prvTimerTask>:
{
    195c:	b5f0      	push	{r4, r5, r6, r7, lr}
    195e:	b08d      	sub	sp, #52	; 0x34
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1960:	4f59      	ldr	r7, [pc, #356]	; (1ac8 <prvTimerTask+0x16c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1962:	4b5a      	ldr	r3, [pc, #360]	; (1acc <prvTimerTask+0x170>)
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    1968:	2a00      	cmp	r2, #0
    196a:	d00e      	beq.n	198a <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    196c:	68db      	ldr	r3, [r3, #12]
    196e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    1970:	4b57      	ldr	r3, [pc, #348]	; (1ad0 <prvTimerTask+0x174>)
    1972:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1974:	a808      	add	r0, sp, #32
    1976:	4b57      	ldr	r3, [pc, #348]	; (1ad4 <prvTimerTask+0x178>)
    1978:	4798      	blx	r3
    197a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    197c:	9b08      	ldr	r3, [sp, #32]
    197e:	2b00      	cmp	r3, #0
    1980:	d146      	bne.n	1a10 <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1982:	42a0      	cmp	r0, r4
    1984:	d21d      	bcs.n	19c2 <prvTimerTask+0x66>
    1986:	2200      	movs	r2, #0
    1988:	e00f      	b.n	19aa <prvTimerTask+0x4e>
	vTaskSuspendAll();
    198a:	4b51      	ldr	r3, [pc, #324]	; (1ad0 <prvTimerTask+0x174>)
    198c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    198e:	a808      	add	r0, sp, #32
    1990:	4b50      	ldr	r3, [pc, #320]	; (1ad4 <prvTimerTask+0x178>)
    1992:	4798      	blx	r3
    1994:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    1996:	9b08      	ldr	r3, [sp, #32]
    1998:	2b00      	cmp	r3, #0
    199a:	d139      	bne.n	1a10 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    199c:	4b4e      	ldr	r3, [pc, #312]	; (1ad8 <prvTimerTask+0x17c>)
    199e:	681b      	ldr	r3, [r3, #0]
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	425a      	negs	r2, r3
    19a4:	415a      	adcs	r2, r3
    19a6:	b2d2      	uxtb	r2, r2
    19a8:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    19aa:	1b61      	subs	r1, r4, r5
    19ac:	4b4b      	ldr	r3, [pc, #300]	; (1adc <prvTimerTask+0x180>)
    19ae:	6818      	ldr	r0, [r3, #0]
    19b0:	4b4b      	ldr	r3, [pc, #300]	; (1ae0 <prvTimerTask+0x184>)
    19b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    19b4:	4b4b      	ldr	r3, [pc, #300]	; (1ae4 <prvTimerTask+0x188>)
    19b6:	4798      	blx	r3
    19b8:	2800      	cmp	r0, #0
    19ba:	d026      	beq.n	1a0a <prvTimerTask+0xae>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    19bc:	4d47      	ldr	r5, [pc, #284]	; (1adc <prvTimerTask+0x180>)
    19be:	4c4a      	ldr	r4, [pc, #296]	; (1ae8 <prvTimerTask+0x18c>)
    19c0:	e036      	b.n	1a30 <prvTimerTask+0xd4>
				( void ) xTaskResumeAll();
    19c2:	4b48      	ldr	r3, [pc, #288]	; (1ae4 <prvTimerTask+0x188>)
    19c4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    19c6:	4b41      	ldr	r3, [pc, #260]	; (1acc <prvTimerTask+0x170>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	68db      	ldr	r3, [r3, #12]
    19cc:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    19ce:	1d30      	adds	r0, r6, #4
    19d0:	4b3d      	ldr	r3, [pc, #244]	; (1ac8 <prvTimerTask+0x16c>)
    19d2:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    19d4:	69f3      	ldr	r3, [r6, #28]
    19d6:	2b01      	cmp	r3, #1
    19d8:	d003      	beq.n	19e2 <prvTimerTask+0x86>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    19da:	6a73      	ldr	r3, [r6, #36]	; 0x24
    19dc:	0030      	movs	r0, r6
    19de:	4798      	blx	r3
    19e0:	e7ec      	b.n	19bc <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    19e2:	69b3      	ldr	r3, [r6, #24]
    19e4:	18e1      	adds	r1, r4, r3
    19e6:	0023      	movs	r3, r4
    19e8:	002a      	movs	r2, r5
    19ea:	0030      	movs	r0, r6
    19ec:	4d3f      	ldr	r5, [pc, #252]	; (1aec <prvTimerTask+0x190>)
    19ee:	47a8      	blx	r5
    19f0:	2800      	cmp	r0, #0
    19f2:	d0f2      	beq.n	19da <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    19f4:	2300      	movs	r3, #0
    19f6:	9300      	str	r3, [sp, #0]
    19f8:	0022      	movs	r2, r4
    19fa:	2100      	movs	r1, #0
    19fc:	0030      	movs	r0, r6
    19fe:	4c3c      	ldr	r4, [pc, #240]	; (1af0 <prvTimerTask+0x194>)
    1a00:	47a0      	blx	r4
			configASSERT( xResult );
    1a02:	2800      	cmp	r0, #0
    1a04:	d1e9      	bne.n	19da <prvTimerTask+0x7e>
    1a06:	b672      	cpsid	i
    1a08:	e7fe      	b.n	1a08 <prvTimerTask+0xac>
					portYIELD_WITHIN_API();
    1a0a:	4b3a      	ldr	r3, [pc, #232]	; (1af4 <prvTimerTask+0x198>)
    1a0c:	4798      	blx	r3
    1a0e:	e7d5      	b.n	19bc <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    1a10:	4b34      	ldr	r3, [pc, #208]	; (1ae4 <prvTimerTask+0x188>)
    1a12:	4798      	blx	r3
    1a14:	e7d2      	b.n	19bc <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    1a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a18:	9303      	str	r3, [sp, #12]
    1a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a1c:	9304      	str	r3, [sp, #16]
    1a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a20:	9305      	str	r3, [sp, #20]
    1a22:	9903      	ldr	r1, [sp, #12]
    1a24:	9804      	ldr	r0, [sp, #16]
    1a26:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1a28:	9b08      	ldr	r3, [sp, #32]
    1a2a:	9303      	str	r3, [sp, #12]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	da09      	bge.n	1a44 <prvTimerTask+0xe8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1a30:	2200      	movs	r2, #0
    1a32:	a908      	add	r1, sp, #32
    1a34:	6828      	ldr	r0, [r5, #0]
    1a36:	47a0      	blx	r4
    1a38:	2800      	cmp	r0, #0
    1a3a:	d092      	beq.n	1962 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    1a3c:	9b08      	ldr	r3, [sp, #32]
    1a3e:	9303      	str	r3, [sp, #12]
    1a40:	2b00      	cmp	r3, #0
    1a42:	dbe8      	blt.n	1a16 <prvTimerTask+0xba>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1a44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1a46:	6973      	ldr	r3, [r6, #20]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d001      	beq.n	1a50 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1a4c:	1d30      	adds	r0, r6, #4
    1a4e:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1a50:	a807      	add	r0, sp, #28
    1a52:	4b20      	ldr	r3, [pc, #128]	; (1ad4 <prvTimerTask+0x178>)
    1a54:	4798      	blx	r3
			switch( xMessage.xMessageID )
    1a56:	9b08      	ldr	r3, [sp, #32]
    1a58:	2b09      	cmp	r3, #9
    1a5a:	d8e9      	bhi.n	1a30 <prvTimerTask+0xd4>
    1a5c:	009b      	lsls	r3, r3, #2
    1a5e:	4a26      	ldr	r2, [pc, #152]	; (1af8 <prvTimerTask+0x19c>)
    1a60:	58d3      	ldr	r3, [r2, r3]
    1a62:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a66:	69b2      	ldr	r2, [r6, #24]
    1a68:	4694      	mov	ip, r2
    1a6a:	4463      	add	r3, ip
    1a6c:	0019      	movs	r1, r3
    1a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a70:	0002      	movs	r2, r0
    1a72:	0030      	movs	r0, r6
    1a74:	4c1d      	ldr	r4, [pc, #116]	; (1aec <prvTimerTask+0x190>)
    1a76:	47a0      	blx	r4
    1a78:	2800      	cmp	r0, #0
    1a7a:	d0a0      	beq.n	19be <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1a7c:	0030      	movs	r0, r6
    1a7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1a80:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1a82:	69f3      	ldr	r3, [r6, #28]
    1a84:	2b01      	cmp	r3, #1
    1a86:	d19a      	bne.n	19be <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a8a:	69b1      	ldr	r1, [r6, #24]
    1a8c:	468c      	mov	ip, r1
    1a8e:	4463      	add	r3, ip
    1a90:	001a      	movs	r2, r3
    1a92:	2300      	movs	r3, #0
    1a94:	9300      	str	r3, [sp, #0]
    1a96:	2100      	movs	r1, #0
    1a98:	0030      	movs	r0, r6
    1a9a:	4c15      	ldr	r4, [pc, #84]	; (1af0 <prvTimerTask+0x194>)
    1a9c:	47a0      	blx	r4
							configASSERT( xResult );
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d18d      	bne.n	19be <prvTimerTask+0x62>
    1aa2:	b672      	cpsid	i
    1aa4:	e7fe      	b.n	1aa4 <prvTimerTask+0x148>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aa8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    1aaa:	2900      	cmp	r1, #0
    1aac:	d006      	beq.n	1abc <prvTimerTask+0x160>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1aae:	1841      	adds	r1, r0, r1
    1ab0:	0003      	movs	r3, r0
    1ab2:	0002      	movs	r2, r0
    1ab4:	0030      	movs	r0, r6
    1ab6:	4c0d      	ldr	r4, [pc, #52]	; (1aec <prvTimerTask+0x190>)
    1ab8:	47a0      	blx	r4
    1aba:	e780      	b.n	19be <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    1abc:	b672      	cpsid	i
    1abe:	e7fe      	b.n	1abe <prvTimerTask+0x162>
						vPortFree( pxTimer );
    1ac0:	0030      	movs	r0, r6
    1ac2:	4b0e      	ldr	r3, [pc, #56]	; (1afc <prvTimerTask+0x1a0>)
    1ac4:	4798      	blx	r3
    1ac6:	e77a      	b.n	19be <prvTimerTask+0x62>
    1ac8:	0000070b 	.word	0x0000070b
    1acc:	20004f70 	.word	0x20004f70
    1ad0:	000011b1 	.word	0x000011b1
    1ad4:	000018a5 	.word	0x000018a5
    1ad8:	20004f74 	.word	0x20004f74
    1adc:	20004fa4 	.word	0x20004fa4
    1ae0:	00000db5 	.word	0x00000db5
    1ae4:	00001305 	.word	0x00001305
    1ae8:	00000c31 	.word	0x00000c31
    1aec:	00001735 	.word	0x00001735
    1af0:	00001839 	.word	0x00001839
    1af4:	00000369 	.word	0x00000369
    1af8:	00002730 	.word	0x00002730
    1afc:	00000549 	.word	0x00000549

00001b00 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1b00:	b510      	push	{r4, lr}
    1b02:	b082      	sub	sp, #8
    1b04:	0004      	movs	r4, r0
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1b06:	4a39      	ldr	r2, [pc, #228]	; (1bec <wdt_set_config+0xec>)
    1b08:	6993      	ldr	r3, [r2, #24]
    1b0a:	2110      	movs	r1, #16
    1b0c:	430b      	orrs	r3, r1
    1b0e:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    1b10:	4b37      	ldr	r3, [pc, #220]	; (1bf0 <wdt_set_config+0xf0>)
    1b12:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1b14:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
    1b16:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
    1b18:	2b00      	cmp	r3, #0
    1b1a:	db03      	blt.n	1b24 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1b1c:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
    1b1e:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1b20:	2b00      	cmp	r3, #0
    1b22:	d101      	bne.n	1b28 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    1b24:	b002      	add	sp, #8
    1b26:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    1b28:	7922      	ldrb	r2, [r4, #4]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d8fa      	bhi.n	1b24 <wdt_set_config+0x24>
    1b2e:	7962      	ldrb	r2, [r4, #5]
    1b30:	429a      	cmp	r2, r3
    1b32:	d8f7      	bhi.n	1b24 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    1b34:	4a2e      	ldr	r2, [pc, #184]	; (1bf0 <wdt_set_config+0xf0>)
    1b36:	7813      	ldrb	r3, [r2, #0]
    1b38:	390e      	subs	r1, #14
    1b3a:	438b      	bics	r3, r1
    1b3c:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1b3e:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    1b40:	b25b      	sxtb	r3, r3
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbfb      	blt.n	1b3e <wdt_set_config+0x3e>
	if(config->enable == false) {
    1b46:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    1b48:	2000      	movs	r0, #0
	if(config->enable == false) {
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d0ea      	beq.n	1b24 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
    1b4e:	a901      	add	r1, sp, #4
    1b50:	78a3      	ldrb	r3, [r4, #2]
    1b52:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1b54:	3003      	adds	r0, #3
    1b56:	4b27      	ldr	r3, [pc, #156]	; (1bf4 <wdt_set_config+0xf4>)
    1b58:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1b5a:	2003      	movs	r0, #3
    1b5c:	4b26      	ldr	r3, [pc, #152]	; (1bf8 <wdt_set_config+0xf8>)
    1b5e:	4798      	blx	r3
	if (config->always_on) {
    1b60:	7823      	ldrb	r3, [r4, #0]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d127      	bne.n	1bb6 <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1b66:	78e3      	ldrb	r3, [r4, #3]
    1b68:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    1b6a:	7922      	ldrb	r2, [r4, #4]
    1b6c:	2a00      	cmp	r2, #0
    1b6e:	d026      	beq.n	1bbe <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1b70:	491f      	ldr	r1, [pc, #124]	; (1bf0 <wdt_set_config+0xf0>)
    1b72:	780a      	ldrb	r2, [r1, #0]
    1b74:	2004      	movs	r0, #4
    1b76:	4302      	orrs	r2, r0
    1b78:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1b7a:	7922      	ldrb	r2, [r4, #4]
    1b7c:	3a01      	subs	r2, #1
    1b7e:	4082      	lsls	r2, r0
    1b80:	4313      	orrs	r3, r2
    1b82:	491b      	ldr	r1, [pc, #108]	; (1bf0 <wdt_set_config+0xf0>)
    1b84:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
    1b86:	b252      	sxtb	r2, r2
    1b88:	2a00      	cmp	r2, #0
    1b8a:	dbfb      	blt.n	1b84 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
    1b8c:	b2db      	uxtb	r3, r3
    1b8e:	4a18      	ldr	r2, [pc, #96]	; (1bf0 <wdt_set_config+0xf0>)
    1b90:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1b92:	7963      	ldrb	r3, [r4, #5]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d118      	bne.n	1bca <wdt_set_config+0xca>
	if (config->always_on) {
    1b98:	7823      	ldrb	r3, [r4, #0]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d01f      	beq.n	1bde <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1b9e:	4a14      	ldr	r2, [pc, #80]	; (1bf0 <wdt_set_config+0xf0>)
    1ba0:	7813      	ldrb	r3, [r2, #0]
    1ba2:	2180      	movs	r1, #128	; 0x80
    1ba4:	430b      	orrs	r3, r1
    1ba6:	7013      	strb	r3, [r2, #0]
    1ba8:	4a11      	ldr	r2, [pc, #68]	; (1bf0 <wdt_set_config+0xf0>)
    1baa:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    1bac:	b25b      	sxtb	r3, r3
    1bae:	2b00      	cmp	r3, #0
    1bb0:	dbfb      	blt.n	1baa <wdt_set_config+0xaa>
	return STATUS_OK;
    1bb2:	2000      	movs	r0, #0
    1bb4:	e7b6      	b.n	1b24 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1bb6:	2003      	movs	r0, #3
    1bb8:	4b10      	ldr	r3, [pc, #64]	; (1bfc <wdt_set_config+0xfc>)
    1bba:	4798      	blx	r3
    1bbc:	e7d3      	b.n	1b66 <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1bbe:	490c      	ldr	r1, [pc, #48]	; (1bf0 <wdt_set_config+0xf0>)
    1bc0:	780a      	ldrb	r2, [r1, #0]
    1bc2:	2004      	movs	r0, #4
    1bc4:	4382      	bics	r2, r0
    1bc6:	700a      	strb	r2, [r1, #0]
    1bc8:	e7db      	b.n	1b82 <wdt_set_config+0x82>
    1bca:	0011      	movs	r1, r2
    1bcc:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    1bce:	b252      	sxtb	r2, r2
    1bd0:	2a00      	cmp	r2, #0
    1bd2:	dbfb      	blt.n	1bcc <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1bd4:	3b01      	subs	r3, #1
    1bd6:	b2db      	uxtb	r3, r3
    1bd8:	4a05      	ldr	r2, [pc, #20]	; (1bf0 <wdt_set_config+0xf0>)
    1bda:	7093      	strb	r3, [r2, #2]
    1bdc:	e7dc      	b.n	1b98 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    1bde:	4a04      	ldr	r2, [pc, #16]	; (1bf0 <wdt_set_config+0xf0>)
    1be0:	7813      	ldrb	r3, [r2, #0]
    1be2:	2102      	movs	r1, #2
    1be4:	430b      	orrs	r3, r1
    1be6:	7013      	strb	r3, [r2, #0]
    1be8:	e7de      	b.n	1ba8 <wdt_set_config+0xa8>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	40000400 	.word	0x40000400
    1bf0:	40001000 	.word	0x40001000
    1bf4:	000024ad 	.word	0x000024ad
    1bf8:	00002421 	.word	0x00002421
    1bfc:	000024c9 	.word	0x000024c9

00001c00 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    1c00:	22a5      	movs	r2, #165	; 0xa5
    1c02:	4b04      	ldr	r3, [pc, #16]	; (1c14 <wdt_reset_count+0x14>)
    1c04:	721a      	strb	r2, [r3, #8]
    1c06:	001a      	movs	r2, r3
    1c08:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    1c0a:	b25b      	sxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	dbfb      	blt.n	1c08 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1c10:	4770      	bx	lr
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	40001000 	.word	0x40001000

00001c18 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1c18:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1c1a:	2201      	movs	r2, #1
    1c1c:	4b03      	ldr	r3, [pc, #12]	; (1c2c <WDT_Handler+0x14>)
    1c1e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    1c20:	4b03      	ldr	r3, [pc, #12]	; (1c30 <WDT_Handler+0x18>)
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d000      	beq.n	1c2a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    1c28:	4798      	blx	r3
	}
}
    1c2a:	bd10      	pop	{r4, pc}
    1c2c:	40001000 	.word	0x40001000
    1c30:	2000502c 	.word	0x2000502c

00001c34 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c34:	b510      	push	{r4, lr}
    1c36:	4b02      	ldr	r3, [pc, #8]	; (1c40 <SERCOM0_Handler+0xc>)
    1c38:	681b      	ldr	r3, [r3, #0]
    1c3a:	2000      	movs	r0, #0
    1c3c:	4798      	blx	r3
    1c3e:	bd10      	pop	{r4, pc}
    1c40:	20004fac 	.word	0x20004fac

00001c44 <SERCOM1_Handler>:
    1c44:	b510      	push	{r4, lr}
    1c46:	4b02      	ldr	r3, [pc, #8]	; (1c50 <SERCOM1_Handler+0xc>)
    1c48:	685b      	ldr	r3, [r3, #4]
    1c4a:	2001      	movs	r0, #1
    1c4c:	4798      	blx	r3
    1c4e:	bd10      	pop	{r4, pc}
    1c50:	20004fac 	.word	0x20004fac

00001c54 <SERCOM2_Handler>:
    1c54:	b510      	push	{r4, lr}
    1c56:	4b02      	ldr	r3, [pc, #8]	; (1c60 <SERCOM2_Handler+0xc>)
    1c58:	689b      	ldr	r3, [r3, #8]
    1c5a:	2002      	movs	r0, #2
    1c5c:	4798      	blx	r3
    1c5e:	bd10      	pop	{r4, pc}
    1c60:	20004fac 	.word	0x20004fac

00001c64 <SERCOM3_Handler>:
    1c64:	b510      	push	{r4, lr}
    1c66:	4b02      	ldr	r3, [pc, #8]	; (1c70 <SERCOM3_Handler+0xc>)
    1c68:	68db      	ldr	r3, [r3, #12]
    1c6a:	2003      	movs	r0, #3
    1c6c:	4798      	blx	r3
    1c6e:	bd10      	pop	{r4, pc}
    1c70:	20004fac 	.word	0x20004fac

00001c74 <SERCOM4_Handler>:
    1c74:	b510      	push	{r4, lr}
    1c76:	4b02      	ldr	r3, [pc, #8]	; (1c80 <SERCOM4_Handler+0xc>)
    1c78:	691b      	ldr	r3, [r3, #16]
    1c7a:	2004      	movs	r0, #4
    1c7c:	4798      	blx	r3
    1c7e:	bd10      	pop	{r4, pc}
    1c80:	20004fac 	.word	0x20004fac

00001c84 <SERCOM5_Handler>:
    1c84:	b510      	push	{r4, lr}
    1c86:	4b02      	ldr	r3, [pc, #8]	; (1c90 <SERCOM5_Handler+0xc>)
    1c88:	695b      	ldr	r3, [r3, #20]
    1c8a:	2005      	movs	r0, #5
    1c8c:	4798      	blx	r3
    1c8e:	bd10      	pop	{r4, pc}
    1c90:	20004fac 	.word	0x20004fac

00001c94 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    1c94:	4770      	bx	lr
	...

00001c98 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1c98:	b570      	push	{r4, r5, r6, lr}
		enum ioport_direction dir)
{
	PortGroup *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1c9a:	4bc3      	ldr	r3, [pc, #780]	; (1fa8 <system_board_init+0x310>)
    1c9c:	2080      	movs	r0, #128	; 0x80
    1c9e:	6098      	str	r0, [r3, #8]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
	}

	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1ca0:	2447      	movs	r4, #71	; 0x47
    1ca2:	5d19      	ldrb	r1, [r3, r4]
    1ca4:	2502      	movs	r5, #2
    1ca6:	4329      	orrs	r1, r5
    1ca8:	b2c9      	uxtb	r1, r1
    1caa:	5519      	strb	r1, [r3, r4]
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1cac:	6158      	str	r0, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    1cae:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1cb0:	5d1a      	ldrb	r2, [r3, r4]
    1cb2:	432a      	orrs	r2, r5
    1cb4:	b2d2      	uxtb	r2, r2
    1cb6:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    1cb8:	4abc      	ldr	r2, [pc, #752]	; (1fac <system_board_init+0x314>)
    1cba:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1cbc:	4abc      	ldr	r2, [pc, #752]	; (1fb0 <system_board_init+0x318>)
    1cbe:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    1cc0:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    1cc2:	4abc      	ldr	r2, [pc, #752]	; (1fb4 <system_board_init+0x31c>)
    1cc4:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1cc6:	4abc      	ldr	r2, [pc, #752]	; (1fb8 <system_board_init+0x320>)
    1cc8:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1cca:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1ccc:	3c46      	subs	r4, #70	; 0x46
    1cce:	387c      	subs	r0, #124	; 0x7c
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1cd0:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1cd2:	3301      	adds	r3, #1
    1cd4:	2b20      	cmp	r3, #32
    1cd6:	d00a      	beq.n	1cee <system_board_init+0x56>
		if (mask & (1 << i)) {
    1cd8:	0022      	movs	r2, r4
    1cda:	409a      	lsls	r2, r3
    1cdc:	4210      	tst	r0, r2
    1cde:	d0f8      	beq.n	1cd2 <system_board_init+0x3a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1ce0:	4ab6      	ldr	r2, [pc, #728]	; (1fbc <system_board_init+0x324>)
    1ce2:	1899      	adds	r1, r3, r2
    1ce4:	780a      	ldrb	r2, [r1, #0]
    1ce6:	432a      	orrs	r2, r5
    1ce8:	b2d2      	uxtb	r2, r2
    1cea:	700a      	strb	r2, [r1, #0]
    1cec:	e7f1      	b.n	1cd2 <system_board_init+0x3a>
	base->WRCONFIG.reg =
    1cee:	4bb4      	ldr	r3, [pc, #720]	; (1fc0 <system_board_init+0x328>)
    1cf0:	4ab4      	ldr	r2, [pc, #720]	; (1fc4 <system_board_init+0x32c>)
    1cf2:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1cf4:	4ab0      	ldr	r2, [pc, #704]	; (1fb8 <system_board_init+0x320>)
    1cf6:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1cf8:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1cfa:	2401      	movs	r4, #1
    1cfc:	2080      	movs	r0, #128	; 0x80
    1cfe:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d00:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1d02:	3301      	adds	r3, #1
    1d04:	2b20      	cmp	r3, #32
    1d06:	d00a      	beq.n	1d1e <system_board_init+0x86>
		if (mask & (1 << i)) {
    1d08:	0022      	movs	r2, r4
    1d0a:	409a      	lsls	r2, r3
    1d0c:	4202      	tst	r2, r0
    1d0e:	d0f8      	beq.n	1d02 <system_board_init+0x6a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d10:	4aad      	ldr	r2, [pc, #692]	; (1fc8 <system_board_init+0x330>)
    1d12:	1899      	adds	r1, r3, r2
    1d14:	780a      	ldrb	r2, [r1, #0]
    1d16:	432a      	orrs	r2, r5
    1d18:	b2d2      	uxtb	r2, r2
    1d1a:	700a      	strb	r2, [r1, #0]
    1d1c:	e7f1      	b.n	1d02 <system_board_init+0x6a>
	base->WRCONFIG.reg =
    1d1e:	4ba8      	ldr	r3, [pc, #672]	; (1fc0 <system_board_init+0x328>)
    1d20:	4aaa      	ldr	r2, [pc, #680]	; (1fcc <system_board_init+0x334>)
    1d22:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1d24:	4aa4      	ldr	r2, [pc, #656]	; (1fb8 <system_board_init+0x320>)
    1d26:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1d28:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1d2a:	2401      	movs	r4, #1
    1d2c:	2080      	movs	r0, #128	; 0x80
    1d2e:	0080      	lsls	r0, r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d30:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1d32:	3301      	adds	r3, #1
    1d34:	2b20      	cmp	r3, #32
    1d36:	d00a      	beq.n	1d4e <system_board_init+0xb6>
		if (mask & (1 << i)) {
    1d38:	0022      	movs	r2, r4
    1d3a:	409a      	lsls	r2, r3
    1d3c:	4202      	tst	r2, r0
    1d3e:	d0f8      	beq.n	1d32 <system_board_init+0x9a>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d40:	4aa1      	ldr	r2, [pc, #644]	; (1fc8 <system_board_init+0x330>)
    1d42:	1899      	adds	r1, r3, r2
    1d44:	780a      	ldrb	r2, [r1, #0]
    1d46:	432a      	orrs	r2, r5
    1d48:	b2d2      	uxtb	r2, r2
    1d4a:	700a      	strb	r2, [r1, #0]
    1d4c:	e7f1      	b.n	1d32 <system_board_init+0x9a>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    1d4e:	4b96      	ldr	r3, [pc, #600]	; (1fa8 <system_board_init+0x310>)
    1d50:	2080      	movs	r0, #128	; 0x80
    1d52:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1d54:	2447      	movs	r4, #71	; 0x47
    1d56:	5d19      	ldrb	r1, [r3, r4]
    1d58:	2602      	movs	r6, #2
    1d5a:	4331      	orrs	r1, r6
    1d5c:	b2c9      	uxtb	r1, r1
    1d5e:	5519      	strb	r1, [r3, r4]
	base->WRCONFIG.reg =
    1d60:	4d92      	ldr	r5, [pc, #584]	; (1fac <system_board_init+0x314>)
    1d62:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1d64:	4992      	ldr	r1, [pc, #584]	; (1fb0 <system_board_init+0x318>)
    1d66:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    1d68:	6158      	str	r0, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    1d6a:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1d6c:	5d1a      	ldrb	r2, [r3, r4]
    1d6e:	4332      	orrs	r2, r6
    1d70:	b2d2      	uxtb	r2, r2
    1d72:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    1d74:	629d      	str	r5, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1d76:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    1d78:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    1d7a:	4a95      	ldr	r2, [pc, #596]	; (1fd0 <system_board_init+0x338>)
    1d7c:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1d7e:	4a8e      	ldr	r2, [pc, #568]	; (1fb8 <system_board_init+0x320>)
    1d80:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1d82:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1d84:	3c46      	subs	r4, #70	; 0x46
    1d86:	3870      	subs	r0, #112	; 0x70
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d88:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1d8a:	3301      	adds	r3, #1
    1d8c:	2b20      	cmp	r3, #32
    1d8e:	d00a      	beq.n	1da6 <system_board_init+0x10e>
		if (mask & (1 << i)) {
    1d90:	0022      	movs	r2, r4
    1d92:	409a      	lsls	r2, r3
    1d94:	4210      	tst	r0, r2
    1d96:	d0f8      	beq.n	1d8a <system_board_init+0xf2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1d98:	4a88      	ldr	r2, [pc, #544]	; (1fbc <system_board_init+0x324>)
    1d9a:	1899      	adds	r1, r3, r2
    1d9c:	780a      	ldrb	r2, [r1, #0]
    1d9e:	432a      	orrs	r2, r5
    1da0:	b2d2      	uxtb	r2, r2
    1da2:	700a      	strb	r2, [r1, #0]
    1da4:	e7f1      	b.n	1d8a <system_board_init+0xf2>
	base->WRCONFIG.reg =
    1da6:	4b80      	ldr	r3, [pc, #512]	; (1fa8 <system_board_init+0x310>)
    1da8:	4a8a      	ldr	r2, [pc, #552]	; (1fd4 <system_board_init+0x33c>)
    1daa:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1dac:	4a82      	ldr	r2, [pc, #520]	; (1fb8 <system_board_init+0x320>)
    1dae:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1db0:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1db2:	2401      	movs	r4, #1
    1db4:	2020      	movs	r0, #32
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1db6:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1db8:	3301      	adds	r3, #1
    1dba:	2b20      	cmp	r3, #32
    1dbc:	d00a      	beq.n	1dd4 <system_board_init+0x13c>
		if (mask & (1 << i)) {
    1dbe:	0022      	movs	r2, r4
    1dc0:	409a      	lsls	r2, r3
    1dc2:	4210      	tst	r0, r2
    1dc4:	d0f8      	beq.n	1db8 <system_board_init+0x120>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1dc6:	4a7d      	ldr	r2, [pc, #500]	; (1fbc <system_board_init+0x324>)
    1dc8:	1899      	adds	r1, r3, r2
    1dca:	780a      	ldrb	r2, [r1, #0]
    1dcc:	432a      	orrs	r2, r5
    1dce:	b2d2      	uxtb	r2, r2
    1dd0:	700a      	strb	r2, [r1, #0]
    1dd2:	e7f1      	b.n	1db8 <system_board_init+0x120>
	base->WRCONFIG.reg =
    1dd4:	4b74      	ldr	r3, [pc, #464]	; (1fa8 <system_board_init+0x310>)
    1dd6:	4a80      	ldr	r2, [pc, #512]	; (1fd8 <system_board_init+0x340>)
    1dd8:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1dda:	4a77      	ldr	r2, [pc, #476]	; (1fb8 <system_board_init+0x320>)
    1ddc:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1dde:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1de0:	2401      	movs	r4, #1
    1de2:	2040      	movs	r0, #64	; 0x40
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1de4:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1de6:	3301      	adds	r3, #1
    1de8:	2b20      	cmp	r3, #32
    1dea:	d00a      	beq.n	1e02 <system_board_init+0x16a>
		if (mask & (1 << i)) {
    1dec:	0022      	movs	r2, r4
    1dee:	409a      	lsls	r2, r3
    1df0:	4210      	tst	r0, r2
    1df2:	d0f8      	beq.n	1de6 <system_board_init+0x14e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1df4:	4a71      	ldr	r2, [pc, #452]	; (1fbc <system_board_init+0x324>)
    1df6:	1899      	adds	r1, r3, r2
    1df8:	780a      	ldrb	r2, [r1, #0]
    1dfa:	432a      	orrs	r2, r5
    1dfc:	b2d2      	uxtb	r2, r2
    1dfe:	700a      	strb	r2, [r1, #0]
    1e00:	e7f1      	b.n	1de6 <system_board_init+0x14e>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1e02:	4b69      	ldr	r3, [pc, #420]	; (1fa8 <system_board_init+0x310>)
    1e04:	2180      	movs	r1, #128	; 0x80
    1e06:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1e08:	2047      	movs	r0, #71	; 0x47
    1e0a:	5c1a      	ldrb	r2, [r3, r0]
    1e0c:	2402      	movs	r4, #2
    1e0e:	4322      	orrs	r2, r4
    1e10:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1e12:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    1e14:	4a71      	ldr	r2, [pc, #452]	; (1fdc <system_board_init+0x344>)
    1e16:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1e18:	4a71      	ldr	r2, [pc, #452]	; (1fe0 <system_board_init+0x348>)
    1e1a:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1e1c:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1e1e:	3c01      	subs	r4, #1
    1e20:	2080      	movs	r0, #128	; 0x80
    1e22:	03c0      	lsls	r0, r0, #15
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1e24:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1e26:	3301      	adds	r3, #1
    1e28:	2b20      	cmp	r3, #32
    1e2a:	d00a      	beq.n	1e42 <system_board_init+0x1aa>
		if (mask & (1 << i)) {
    1e2c:	0022      	movs	r2, r4
    1e2e:	409a      	lsls	r2, r3
    1e30:	4202      	tst	r2, r0
    1e32:	d0f8      	beq.n	1e26 <system_board_init+0x18e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1e34:	4a61      	ldr	r2, [pc, #388]	; (1fbc <system_board_init+0x324>)
    1e36:	1899      	adds	r1, r3, r2
    1e38:	780a      	ldrb	r2, [r1, #0]
    1e3a:	432a      	orrs	r2, r5
    1e3c:	b2d2      	uxtb	r2, r2
    1e3e:	700a      	strb	r2, [r1, #0]
    1e40:	e7f1      	b.n	1e26 <system_board_init+0x18e>
	base->WRCONFIG.reg =
    1e42:	4b59      	ldr	r3, [pc, #356]	; (1fa8 <system_board_init+0x310>)
    1e44:	4a65      	ldr	r2, [pc, #404]	; (1fdc <system_board_init+0x344>)
    1e46:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1e48:	4a66      	ldr	r2, [pc, #408]	; (1fe4 <system_board_init+0x34c>)
    1e4a:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1e4c:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1e4e:	2401      	movs	r4, #1
    1e50:	2080      	movs	r0, #128	; 0x80
    1e52:	0400      	lsls	r0, r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1e54:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1e56:	3301      	adds	r3, #1
    1e58:	2b20      	cmp	r3, #32
    1e5a:	d00a      	beq.n	1e72 <system_board_init+0x1da>
		if (mask & (1 << i)) {
    1e5c:	0022      	movs	r2, r4
    1e5e:	409a      	lsls	r2, r3
    1e60:	4202      	tst	r2, r0
    1e62:	d0f8      	beq.n	1e56 <system_board_init+0x1be>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1e64:	4a55      	ldr	r2, [pc, #340]	; (1fbc <system_board_init+0x324>)
    1e66:	1899      	adds	r1, r3, r2
    1e68:	780a      	ldrb	r2, [r1, #0]
    1e6a:	432a      	orrs	r2, r5
    1e6c:	b2d2      	uxtb	r2, r2
    1e6e:	700a      	strb	r2, [r1, #0]
    1e70:	e7f1      	b.n	1e56 <system_board_init+0x1be>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1e72:	4b4d      	ldr	r3, [pc, #308]	; (1fa8 <system_board_init+0x310>)
    1e74:	2180      	movs	r1, #128	; 0x80
    1e76:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1e78:	2047      	movs	r0, #71	; 0x47
    1e7a:	5c1a      	ldrb	r2, [r3, r0]
    1e7c:	2402      	movs	r4, #2
    1e7e:	4322      	orrs	r2, r4
    1e80:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1e82:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    1e84:	4a55      	ldr	r2, [pc, #340]	; (1fdc <system_board_init+0x344>)
    1e86:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1e88:	4a57      	ldr	r2, [pc, #348]	; (1fe8 <system_board_init+0x350>)
    1e8a:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1e8c:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1e8e:	3c01      	subs	r4, #1
    1e90:	2080      	movs	r0, #128	; 0x80
    1e92:	0240      	lsls	r0, r0, #9
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1e94:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1e96:	3301      	adds	r3, #1
    1e98:	2b20      	cmp	r3, #32
    1e9a:	d00a      	beq.n	1eb2 <system_board_init+0x21a>
		if (mask & (1 << i)) {
    1e9c:	0022      	movs	r2, r4
    1e9e:	409a      	lsls	r2, r3
    1ea0:	4202      	tst	r2, r0
    1ea2:	d0f8      	beq.n	1e96 <system_board_init+0x1fe>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1ea4:	4a45      	ldr	r2, [pc, #276]	; (1fbc <system_board_init+0x324>)
    1ea6:	1899      	adds	r1, r3, r2
    1ea8:	780a      	ldrb	r2, [r1, #0]
    1eaa:	432a      	orrs	r2, r5
    1eac:	b2d2      	uxtb	r2, r2
    1eae:	700a      	strb	r2, [r1, #0]
    1eb0:	e7f1      	b.n	1e96 <system_board_init+0x1fe>
	base->WRCONFIG.reg =
    1eb2:	4b3d      	ldr	r3, [pc, #244]	; (1fa8 <system_board_init+0x310>)
    1eb4:	4a49      	ldr	r2, [pc, #292]	; (1fdc <system_board_init+0x344>)
    1eb6:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1eb8:	4a4c      	ldr	r2, [pc, #304]	; (1fec <system_board_init+0x354>)
    1eba:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1ebc:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1ebe:	2401      	movs	r4, #1
    1ec0:	2080      	movs	r0, #128	; 0x80
    1ec2:	0280      	lsls	r0, r0, #10
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1ec4:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1ec6:	3301      	adds	r3, #1
    1ec8:	2b20      	cmp	r3, #32
    1eca:	d00a      	beq.n	1ee2 <system_board_init+0x24a>
		if (mask & (1 << i)) {
    1ecc:	0022      	movs	r2, r4
    1ece:	409a      	lsls	r2, r3
    1ed0:	4202      	tst	r2, r0
    1ed2:	d0f8      	beq.n	1ec6 <system_board_init+0x22e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1ed4:	4a39      	ldr	r2, [pc, #228]	; (1fbc <system_board_init+0x324>)
    1ed6:	1899      	adds	r1, r3, r2
    1ed8:	780a      	ldrb	r2, [r1, #0]
    1eda:	432a      	orrs	r2, r5
    1edc:	b2d2      	uxtb	r2, r2
    1ede:	700a      	strb	r2, [r1, #0]
    1ee0:	e7f1      	b.n	1ec6 <system_board_init+0x22e>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1ee2:	4b31      	ldr	r3, [pc, #196]	; (1fa8 <system_board_init+0x310>)
    1ee4:	2180      	movs	r1, #128	; 0x80
    1ee6:	0109      	lsls	r1, r1, #4
    1ee8:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1eea:	204b      	movs	r0, #75	; 0x4b
    1eec:	5c1a      	ldrb	r2, [r3, r0]
    1eee:	2402      	movs	r4, #2
    1ef0:	4322      	orrs	r2, r4
    1ef2:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1ef4:	6199      	str	r1, [r3, #24]
	base->WRCONFIG.reg =
    1ef6:	4a3e      	ldr	r2, [pc, #248]	; (1ff0 <system_board_init+0x358>)
    1ef8:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1efa:	4a3e      	ldr	r2, [pc, #248]	; (1ff4 <system_board_init+0x35c>)
    1efc:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1efe:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1f00:	3c01      	subs	r4, #1
    1f02:	30b6      	adds	r0, #182	; 0xb6
    1f04:	30ff      	adds	r0, #255	; 0xff
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f06:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1f08:	3301      	adds	r3, #1
    1f0a:	2b20      	cmp	r3, #32
    1f0c:	d00a      	beq.n	1f24 <system_board_init+0x28c>
		if (mask & (1 << i)) {
    1f0e:	0022      	movs	r2, r4
    1f10:	409a      	lsls	r2, r3
    1f12:	4202      	tst	r2, r0
    1f14:	d0f8      	beq.n	1f08 <system_board_init+0x270>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f16:	4a29      	ldr	r2, [pc, #164]	; (1fbc <system_board_init+0x324>)
    1f18:	1899      	adds	r1, r3, r2
    1f1a:	780a      	ldrb	r2, [r1, #0]
    1f1c:	432a      	orrs	r2, r5
    1f1e:	b2d2      	uxtb	r2, r2
    1f20:	700a      	strb	r2, [r1, #0]
    1f22:	e7f1      	b.n	1f08 <system_board_init+0x270>
	base->WRCONFIG.reg =
    1f24:	4b20      	ldr	r3, [pc, #128]	; (1fa8 <system_board_init+0x310>)
    1f26:	4a34      	ldr	r2, [pc, #208]	; (1ff8 <system_board_init+0x360>)
    1f28:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1f2a:	4a32      	ldr	r2, [pc, #200]	; (1ff4 <system_board_init+0x35c>)
    1f2c:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1f2e:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1f30:	2401      	movs	r4, #1
    1f32:	2080      	movs	r0, #128	; 0x80
    1f34:	00c0      	lsls	r0, r0, #3
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f36:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1f38:	3301      	adds	r3, #1
    1f3a:	2b20      	cmp	r3, #32
    1f3c:	d00a      	beq.n	1f54 <system_board_init+0x2bc>
		if (mask & (1 << i)) {
    1f3e:	0022      	movs	r2, r4
    1f40:	409a      	lsls	r2, r3
    1f42:	4202      	tst	r2, r0
    1f44:	d0f8      	beq.n	1f38 <system_board_init+0x2a0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f46:	4a1d      	ldr	r2, [pc, #116]	; (1fbc <system_board_init+0x324>)
    1f48:	1899      	adds	r1, r3, r2
    1f4a:	780a      	ldrb	r2, [r1, #0]
    1f4c:	432a      	orrs	r2, r5
    1f4e:	b2d2      	uxtb	r2, r2
    1f50:	700a      	strb	r2, [r1, #0]
    1f52:	e7f1      	b.n	1f38 <system_board_init+0x2a0>
	base->WRCONFIG.reg =
    1f54:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <system_board_init+0x310>)
    1f56:	4a29      	ldr	r2, [pc, #164]	; (1ffc <system_board_init+0x364>)
    1f58:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    1f5a:	4a26      	ldr	r2, [pc, #152]	; (1ff4 <system_board_init+0x35c>)
    1f5c:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    1f5e:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1f60:	2401      	movs	r4, #1
    1f62:	2080      	movs	r0, #128	; 0x80
    1f64:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f66:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    1f68:	3301      	adds	r3, #1
    1f6a:	2b20      	cmp	r3, #32
    1f6c:	d00a      	beq.n	1f84 <system_board_init+0x2ec>
		if (mask & (1 << i)) {
    1f6e:	0022      	movs	r2, r4
    1f70:	409a      	lsls	r2, r3
    1f72:	4202      	tst	r2, r0
    1f74:	d0f8      	beq.n	1f68 <system_board_init+0x2d0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    1f76:	4a11      	ldr	r2, [pc, #68]	; (1fbc <system_board_init+0x324>)
    1f78:	1899      	adds	r1, r3, r2
    1f7a:	780a      	ldrb	r2, [r1, #0]
    1f7c:	432a      	orrs	r2, r5
    1f7e:	b2d2      	uxtb	r2, r2
    1f80:	700a      	strb	r2, [r1, #0]
    1f82:	e7f1      	b.n	1f68 <system_board_init+0x2d0>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1f84:	4b08      	ldr	r3, [pc, #32]	; (1fa8 <system_board_init+0x310>)
    1f86:	2080      	movs	r0, #128	; 0x80
    1f88:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1f8a:	2447      	movs	r4, #71	; 0x47
    1f8c:	5d19      	ldrb	r1, [r3, r4]
    1f8e:	2502      	movs	r5, #2
    1f90:	4329      	orrs	r1, r5
    1f92:	b2c9      	uxtb	r1, r1
    1f94:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1f96:	6158      	str	r0, [r3, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1f98:	6098      	str	r0, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1f9a:	5d1a      	ldrb	r2, [r3, r4]
    1f9c:	432a      	orrs	r2, r5
    1f9e:	b2d2      	uxtb	r2, r2
    1fa0:	551a      	strb	r2, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1fa2:	6158      	str	r0, [r3, #20]
	ioport_set_pin_dir(BUZZER_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(BUZZER_GPIO, !BUZZER_GPIO_ACTIVE_LEVEL);
	ioport_set_pin_dir(WATCHDOG_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(WATCHDOG_GPIO, !WATCHDOG_GPIO_ACTIVE_LEVEL);
	
    1fa4:	bd70      	pop	{r4, r5, r6, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	41004400 	.word	0x41004400
    1fac:	50060080 	.word	0x50060080
    1fb0:	d0060000 	.word	0xd0060000
    1fb4:	51020004 	.word	0x51020004
    1fb8:	d1020000 	.word	0xd1020000
    1fbc:	41004440 	.word	0x41004440
    1fc0:	41004480 	.word	0x41004480
    1fc4:	51020100 	.word	0x51020100
    1fc8:	410044c0 	.word	0x410044c0
    1fcc:	51020200 	.word	0x51020200
    1fd0:	51020010 	.word	0x51020010
    1fd4:	51020020 	.word	0x51020020
    1fd8:	51020040 	.word	0x51020040
    1fdc:	52020000 	.word	0x52020000
    1fe0:	d2020040 	.word	0xd2020040
    1fe4:	d2020080 	.word	0xd2020080
    1fe8:	d2020001 	.word	0xd2020001
    1fec:	d2020002 	.word	0xd2020002
    1ff0:	52020200 	.word	0x52020200
    1ff4:	d2020000 	.word	0xd2020000
    1ff8:	52020400 	.word	0x52020400
    1ffc:	52020100 	.word	0x52020100

00002000 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2000:	4b0c      	ldr	r3, [pc, #48]	; (2034 <STACK_SIZE+0x34>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d106      	bne.n	2016 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2008:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    200c:	2b00      	cmp	r3, #0
    200e:	d007      	beq.n	2020 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2010:	2200      	movs	r2, #0
    2012:	4b09      	ldr	r3, [pc, #36]	; (2038 <STACK_SIZE+0x38>)
    2014:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2016:	4a07      	ldr	r2, [pc, #28]	; (2034 <STACK_SIZE+0x34>)
    2018:	6813      	ldr	r3, [r2, #0]
    201a:	3301      	adds	r3, #1
    201c:	6013      	str	r3, [r2, #0]
}
    201e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2020:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2022:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2026:	2200      	movs	r2, #0
    2028:	4b04      	ldr	r3, [pc, #16]	; (203c <STACK_SIZE+0x3c>)
    202a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    202c:	3201      	adds	r2, #1
    202e:	4b02      	ldr	r3, [pc, #8]	; (2038 <STACK_SIZE+0x38>)
    2030:	701a      	strb	r2, [r3, #0]
    2032:	e7f0      	b.n	2016 <cpu_irq_enter_critical+0x16>
    2034:	20004fc4 	.word	0x20004fc4
    2038:	20004fc8 	.word	0x20004fc8
    203c:	20000004 	.word	0x20000004

00002040 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2040:	4b08      	ldr	r3, [pc, #32]	; (2064 <cpu_irq_leave_critical+0x24>)
    2042:	681a      	ldr	r2, [r3, #0]
    2044:	3a01      	subs	r2, #1
    2046:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2048:	681b      	ldr	r3, [r3, #0]
    204a:	2b00      	cmp	r3, #0
    204c:	d109      	bne.n	2062 <cpu_irq_leave_critical+0x22>
    204e:	4b06      	ldr	r3, [pc, #24]	; (2068 <cpu_irq_leave_critical+0x28>)
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d005      	beq.n	2062 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2056:	2201      	movs	r2, #1
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <cpu_irq_leave_critical+0x2c>)
    205a:	701a      	strb	r2, [r3, #0]
    205c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2060:	b662      	cpsie	i
	}
}
    2062:	4770      	bx	lr
    2064:	20004fc4 	.word	0x20004fc4
    2068:	20004fc8 	.word	0x20004fc8
    206c:	20000004 	.word	0x20000004

00002070 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2070:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2072:	490c      	ldr	r1, [pc, #48]	; (20a4 <system_clock_source_osc8m_set_config+0x34>)
    2074:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2076:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2078:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    207a:	7840      	ldrb	r0, [r0, #1]
    207c:	2201      	movs	r2, #1
    207e:	4010      	ands	r0, r2
    2080:	0180      	lsls	r0, r0, #6
    2082:	2640      	movs	r6, #64	; 0x40
    2084:	43b3      	bics	r3, r6
    2086:	4303      	orrs	r3, r0
    2088:	402a      	ands	r2, r5
    208a:	01d2      	lsls	r2, r2, #7
    208c:	2080      	movs	r0, #128	; 0x80
    208e:	4383      	bics	r3, r0
    2090:	4313      	orrs	r3, r2
    2092:	2203      	movs	r2, #3
    2094:	4022      	ands	r2, r4
    2096:	0212      	lsls	r2, r2, #8
    2098:	4803      	ldr	r0, [pc, #12]	; (20a8 <system_clock_source_osc8m_set_config+0x38>)
    209a:	4003      	ands	r3, r0
    209c:	4313      	orrs	r3, r2
    209e:	620b      	str	r3, [r1, #32]
}
    20a0:	bd70      	pop	{r4, r5, r6, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	40000800 	.word	0x40000800
    20a8:	fffffcff 	.word	0xfffffcff

000020ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    20ac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    20ae:	7a03      	ldrb	r3, [r0, #8]
    20b0:	069b      	lsls	r3, r3, #26
    20b2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    20b4:	8942      	ldrh	r2, [r0, #10]
    20b6:	0592      	lsls	r2, r2, #22
    20b8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    20ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    20bc:	4918      	ldr	r1, [pc, #96]	; (2120 <system_clock_source_dfll_set_config+0x74>)
    20be:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    20c0:	7983      	ldrb	r3, [r0, #6]
    20c2:	79c2      	ldrb	r2, [r0, #7]
    20c4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    20c6:	8842      	ldrh	r2, [r0, #2]
    20c8:	8884      	ldrh	r4, [r0, #4]
    20ca:	4322      	orrs	r2, r4
    20cc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    20ce:	7842      	ldrb	r2, [r0, #1]
    20d0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    20d2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    20d4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    20d6:	7803      	ldrb	r3, [r0, #0]
    20d8:	2b04      	cmp	r3, #4
    20da:	d011      	beq.n	2100 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    20dc:	2b20      	cmp	r3, #32
    20de:	d10e      	bne.n	20fe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    20e0:	7b03      	ldrb	r3, [r0, #12]
    20e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    20e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    20e6:	4313      	orrs	r3, r2
    20e8:	89c2      	ldrh	r2, [r0, #14]
    20ea:	0412      	lsls	r2, r2, #16
    20ec:	490d      	ldr	r1, [pc, #52]	; (2124 <system_clock_source_dfll_set_config+0x78>)
    20ee:	400a      	ands	r2, r1
    20f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    20f2:	4a0b      	ldr	r2, [pc, #44]	; (2120 <system_clock_source_dfll_set_config+0x74>)
    20f4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    20f6:	6811      	ldr	r1, [r2, #0]
    20f8:	4b0b      	ldr	r3, [pc, #44]	; (2128 <system_clock_source_dfll_set_config+0x7c>)
    20fa:	430b      	orrs	r3, r1
    20fc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    20fe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2100:	7b03      	ldrb	r3, [r0, #12]
    2102:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2104:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2106:	4313      	orrs	r3, r2
    2108:	89c2      	ldrh	r2, [r0, #14]
    210a:	0412      	lsls	r2, r2, #16
    210c:	4905      	ldr	r1, [pc, #20]	; (2124 <system_clock_source_dfll_set_config+0x78>)
    210e:	400a      	ands	r2, r1
    2110:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2112:	4a03      	ldr	r2, [pc, #12]	; (2120 <system_clock_source_dfll_set_config+0x74>)
    2114:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2116:	6813      	ldr	r3, [r2, #0]
    2118:	2104      	movs	r1, #4
    211a:	430b      	orrs	r3, r1
    211c:	6013      	str	r3, [r2, #0]
    211e:	e7ee      	b.n	20fe <system_clock_source_dfll_set_config+0x52>
    2120:	20004fcc 	.word	0x20004fcc
    2124:	03ff0000 	.word	0x03ff0000
    2128:	00000424 	.word	0x00000424

0000212c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    212c:	2808      	cmp	r0, #8
    212e:	d803      	bhi.n	2138 <system_clock_source_enable+0xc>
    2130:	0080      	lsls	r0, r0, #2
    2132:	4b25      	ldr	r3, [pc, #148]	; (21c8 <system_clock_source_enable+0x9c>)
    2134:	581b      	ldr	r3, [r3, r0]
    2136:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2138:	2017      	movs	r0, #23
    213a:	e044      	b.n	21c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    213c:	4a23      	ldr	r2, [pc, #140]	; (21cc <system_clock_source_enable+0xa0>)
    213e:	6a13      	ldr	r3, [r2, #32]
    2140:	2102      	movs	r1, #2
    2142:	430b      	orrs	r3, r1
    2144:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2146:	2000      	movs	r0, #0
    2148:	e03d      	b.n	21c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    214a:	4a20      	ldr	r2, [pc, #128]	; (21cc <system_clock_source_enable+0xa0>)
    214c:	6993      	ldr	r3, [r2, #24]
    214e:	2102      	movs	r1, #2
    2150:	430b      	orrs	r3, r1
    2152:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2154:	2000      	movs	r0, #0
		break;
    2156:	e036      	b.n	21c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2158:	4a1c      	ldr	r2, [pc, #112]	; (21cc <system_clock_source_enable+0xa0>)
    215a:	8a13      	ldrh	r3, [r2, #16]
    215c:	2102      	movs	r1, #2
    215e:	430b      	orrs	r3, r1
    2160:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2162:	2000      	movs	r0, #0
		break;
    2164:	e02f      	b.n	21c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2166:	4a19      	ldr	r2, [pc, #100]	; (21cc <system_clock_source_enable+0xa0>)
    2168:	8a93      	ldrh	r3, [r2, #20]
    216a:	2102      	movs	r1, #2
    216c:	430b      	orrs	r3, r1
    216e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2170:	2000      	movs	r0, #0
		break;
    2172:	e028      	b.n	21c6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2174:	4916      	ldr	r1, [pc, #88]	; (21d0 <system_clock_source_enable+0xa4>)
    2176:	680b      	ldr	r3, [r1, #0]
    2178:	2202      	movs	r2, #2
    217a:	4313      	orrs	r3, r2
    217c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    217e:	4b13      	ldr	r3, [pc, #76]	; (21cc <system_clock_source_enable+0xa0>)
    2180:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2182:	0019      	movs	r1, r3
    2184:	320e      	adds	r2, #14
    2186:	68cb      	ldr	r3, [r1, #12]
    2188:	421a      	tst	r2, r3
    218a:	d0fc      	beq.n	2186 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    218c:	4a10      	ldr	r2, [pc, #64]	; (21d0 <system_clock_source_enable+0xa4>)
    218e:	6891      	ldr	r1, [r2, #8]
    2190:	4b0e      	ldr	r3, [pc, #56]	; (21cc <system_clock_source_enable+0xa0>)
    2192:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2194:	6852      	ldr	r2, [r2, #4]
    2196:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2198:	2200      	movs	r2, #0
    219a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    219c:	0019      	movs	r1, r3
    219e:	3210      	adds	r2, #16
    21a0:	68cb      	ldr	r3, [r1, #12]
    21a2:	421a      	tst	r2, r3
    21a4:	d0fc      	beq.n	21a0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    21a6:	4b0a      	ldr	r3, [pc, #40]	; (21d0 <system_clock_source_enable+0xa4>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	b29b      	uxth	r3, r3
    21ac:	4a07      	ldr	r2, [pc, #28]	; (21cc <system_clock_source_enable+0xa0>)
    21ae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    21b0:	2000      	movs	r0, #0
    21b2:	e008      	b.n	21c6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    21b4:	4905      	ldr	r1, [pc, #20]	; (21cc <system_clock_source_enable+0xa0>)
    21b6:	2244      	movs	r2, #68	; 0x44
    21b8:	5c8b      	ldrb	r3, [r1, r2]
    21ba:	2002      	movs	r0, #2
    21bc:	4303      	orrs	r3, r0
    21be:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    21c0:	2000      	movs	r0, #0
		break;
    21c2:	e000      	b.n	21c6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    21c4:	2000      	movs	r0, #0
}
    21c6:	4770      	bx	lr
    21c8:	00002768 	.word	0x00002768
    21cc:	40000800 	.word	0x40000800
    21d0:	20004fcc 	.word	0x20004fcc

000021d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	46ce      	mov	lr, r9
    21d8:	4647      	mov	r7, r8
    21da:	b580      	push	{r7, lr}
    21dc:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    21de:	22c2      	movs	r2, #194	; 0xc2
    21e0:	00d2      	lsls	r2, r2, #3
    21e2:	4b3c      	ldr	r3, [pc, #240]	; (22d4 <system_clock_init+0x100>)
    21e4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21e6:	4a3c      	ldr	r2, [pc, #240]	; (22d8 <system_clock_init+0x104>)
    21e8:	6853      	ldr	r3, [r2, #4]
    21ea:	211e      	movs	r1, #30
    21ec:	438b      	bics	r3, r1
    21ee:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    21f0:	2202      	movs	r2, #2
    21f2:	ab01      	add	r3, sp, #4
    21f4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    21f6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    21f8:	4d38      	ldr	r5, [pc, #224]	; (22dc <system_clock_init+0x108>)
    21fa:	b2e0      	uxtb	r0, r4
    21fc:	a901      	add	r1, sp, #4
    21fe:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2200:	3401      	adds	r4, #1
    2202:	2c25      	cmp	r4, #37	; 0x25
    2204:	d1f9      	bne.n	21fa <system_clock_init+0x26>
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    2206:	ab05      	add	r3, sp, #20
    2208:	2100      	movs	r1, #0
    220a:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    220c:	2200      	movs	r2, #0
    220e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2210:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2212:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2214:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    2216:	3106      	adds	r1, #6
    2218:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    221a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    221c:	4b30      	ldr	r3, [pc, #192]	; (22e0 <system_clock_init+0x10c>)
    221e:	681b      	ldr	r3, [r3, #0]
    2220:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2222:	2b3f      	cmp	r3, #63	; 0x3f
    2224:	d054      	beq.n	22d0 <system_clock_init+0xfc>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2226:	a805      	add	r0, sp, #20
    2228:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    222a:	2380      	movs	r3, #128	; 0x80
    222c:	009b      	lsls	r3, r3, #2
    222e:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2230:	3bfa      	subs	r3, #250	; 0xfa
    2232:	3bff      	subs	r3, #255	; 0xff
    2234:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2236:	3338      	adds	r3, #56	; 0x38
    2238:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    223a:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <system_clock_init+0x110>)
    223c:	4798      	blx	r3
	config->run_in_standby  = false;
    223e:	a804      	add	r0, sp, #16
    2240:	2500      	movs	r5, #0
    2242:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2244:	2701      	movs	r7, #1
    2246:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2248:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    224a:	4b27      	ldr	r3, [pc, #156]	; (22e8 <system_clock_init+0x114>)
    224c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    224e:	2006      	movs	r0, #6
    2250:	4e26      	ldr	r6, [pc, #152]	; (22ec <system_clock_init+0x118>)
    2252:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2254:	4b26      	ldr	r3, [pc, #152]	; (22f0 <system_clock_init+0x11c>)
    2256:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2258:	ac01      	add	r4, sp, #4
    225a:	9702      	str	r7, [sp, #8]
	config->high_when_disabled = false;
    225c:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    225e:	2306      	movs	r3, #6
    2260:	4699      	mov	r9, r3
    2262:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    2264:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2266:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2268:	0021      	movs	r1, r4
    226a:	2001      	movs	r0, #1
    226c:	4b21      	ldr	r3, [pc, #132]	; (22f4 <system_clock_init+0x120>)
    226e:	4698      	mov	r8, r3
    2270:	4798      	blx	r3
    2272:	2001      	movs	r0, #1
    2274:	4f20      	ldr	r7, [pc, #128]	; (22f8 <system_clock_init+0x124>)
    2276:	47b8      	blx	r7
	config->high_when_disabled = false;
    2278:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    227a:	464b      	mov	r3, r9
    227c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    227e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2280:	7265      	strb	r5, [r4, #9]
    2282:	23ff      	movs	r3, #255	; 0xff
    2284:	6063      	str	r3, [r4, #4]
    2286:	0021      	movs	r1, r4
    2288:	2004      	movs	r0, #4
    228a:	47c0      	blx	r8
    228c:	2004      	movs	r0, #4
    228e:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2290:	2007      	movs	r0, #7
    2292:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2294:	490f      	ldr	r1, [pc, #60]	; (22d4 <system_clock_init+0x100>)
    2296:	2210      	movs	r2, #16
    2298:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    229a:	421a      	tst	r2, r3
    229c:	d0fc      	beq.n	2298 <system_clock_init+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    229e:	4a17      	ldr	r2, [pc, #92]	; (22fc <system_clock_init+0x128>)
    22a0:	2300      	movs	r3, #0
    22a2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    22a4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    22a6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    22a8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    22aa:	a901      	add	r1, sp, #4
    22ac:	2201      	movs	r2, #1
    22ae:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    22b0:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    22b2:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    22b4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    22b6:	3307      	adds	r3, #7
    22b8:	700b      	strb	r3, [r1, #0]
    22ba:	2000      	movs	r0, #0
    22bc:	4b0d      	ldr	r3, [pc, #52]	; (22f4 <system_clock_init+0x120>)
    22be:	4798      	blx	r3
    22c0:	2000      	movs	r0, #0
    22c2:	4b0d      	ldr	r3, [pc, #52]	; (22f8 <system_clock_init+0x124>)
    22c4:	4798      	blx	r3
#endif
}
    22c6:	b00b      	add	sp, #44	; 0x2c
    22c8:	bc0c      	pop	{r2, r3}
    22ca:	4690      	mov	r8, r2
    22cc:	4699      	mov	r9, r3
    22ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    22d0:	3b20      	subs	r3, #32
    22d2:	e7a8      	b.n	2226 <system_clock_init+0x52>
    22d4:	40000800 	.word	0x40000800
    22d8:	41004000 	.word	0x41004000
    22dc:	000024ad 	.word	0x000024ad
    22e0:	00806024 	.word	0x00806024
    22e4:	000020ad 	.word	0x000020ad
    22e8:	00002071 	.word	0x00002071
    22ec:	0000212d 	.word	0x0000212d
    22f0:	00002301 	.word	0x00002301
    22f4:	00002325 	.word	0x00002325
    22f8:	000023dd 	.word	0x000023dd
    22fc:	40000400 	.word	0x40000400

00002300 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2300:	4a06      	ldr	r2, [pc, #24]	; (231c <system_gclk_init+0x1c>)
    2302:	6993      	ldr	r3, [r2, #24]
    2304:	2108      	movs	r1, #8
    2306:	430b      	orrs	r3, r1
    2308:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    230a:	2201      	movs	r2, #1
    230c:	4b04      	ldr	r3, [pc, #16]	; (2320 <system_gclk_init+0x20>)
    230e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2310:	0019      	movs	r1, r3
    2312:	780b      	ldrb	r3, [r1, #0]
    2314:	4213      	tst	r3, r2
    2316:	d1fc      	bne.n	2312 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2318:	4770      	bx	lr
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	40000400 	.word	0x40000400
    2320:	40000c00 	.word	0x40000c00

00002324 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2328:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    232a:	780d      	ldrb	r5, [r1, #0]
    232c:	022d      	lsls	r5, r5, #8
    232e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2330:	784b      	ldrb	r3, [r1, #1]
    2332:	2b00      	cmp	r3, #0
    2334:	d002      	beq.n	233c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2336:	2380      	movs	r3, #128	; 0x80
    2338:	02db      	lsls	r3, r3, #11
    233a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    233c:	7a4b      	ldrb	r3, [r1, #9]
    233e:	2b00      	cmp	r3, #0
    2340:	d002      	beq.n	2348 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2342:	2380      	movs	r3, #128	; 0x80
    2344:	031b      	lsls	r3, r3, #12
    2346:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2348:	6848      	ldr	r0, [r1, #4]
    234a:	2801      	cmp	r0, #1
    234c:	d910      	bls.n	2370 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    234e:	1e43      	subs	r3, r0, #1
    2350:	4218      	tst	r0, r3
    2352:	d134      	bne.n	23be <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2354:	2802      	cmp	r0, #2
    2356:	d930      	bls.n	23ba <system_gclk_gen_set_config+0x96>
    2358:	2302      	movs	r3, #2
    235a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    235c:	3201      	adds	r2, #1
						mask <<= 1) {
    235e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2360:	4298      	cmp	r0, r3
    2362:	d8fb      	bhi.n	235c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2364:	0212      	lsls	r2, r2, #8
    2366:	4332      	orrs	r2, r6
    2368:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    236a:	2380      	movs	r3, #128	; 0x80
    236c:	035b      	lsls	r3, r3, #13
    236e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2370:	7a0b      	ldrb	r3, [r1, #8]
    2372:	2b00      	cmp	r3, #0
    2374:	d002      	beq.n	237c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2376:	2380      	movs	r3, #128	; 0x80
    2378:	039b      	lsls	r3, r3, #14
    237a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    237c:	4a13      	ldr	r2, [pc, #76]	; (23cc <system_gclk_gen_set_config+0xa8>)
    237e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2380:	b25b      	sxtb	r3, r3
    2382:	2b00      	cmp	r3, #0
    2384:	dbfb      	blt.n	237e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2386:	4b12      	ldr	r3, [pc, #72]	; (23d0 <system_gclk_gen_set_config+0xac>)
    2388:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    238a:	4b12      	ldr	r3, [pc, #72]	; (23d4 <system_gclk_gen_set_config+0xb0>)
    238c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    238e:	4a0f      	ldr	r2, [pc, #60]	; (23cc <system_gclk_gen_set_config+0xa8>)
    2390:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2392:	b25b      	sxtb	r3, r3
    2394:	2b00      	cmp	r3, #0
    2396:	dbfb      	blt.n	2390 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2398:	4b0c      	ldr	r3, [pc, #48]	; (23cc <system_gclk_gen_set_config+0xa8>)
    239a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    239c:	001a      	movs	r2, r3
    239e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    23a0:	b25b      	sxtb	r3, r3
    23a2:	2b00      	cmp	r3, #0
    23a4:	dbfb      	blt.n	239e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    23a6:	4a09      	ldr	r2, [pc, #36]	; (23cc <system_gclk_gen_set_config+0xa8>)
    23a8:	6853      	ldr	r3, [r2, #4]
    23aa:	2180      	movs	r1, #128	; 0x80
    23ac:	0249      	lsls	r1, r1, #9
    23ae:	400b      	ands	r3, r1
    23b0:	431d      	orrs	r5, r3
    23b2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    23b4:	4b08      	ldr	r3, [pc, #32]	; (23d8 <system_gclk_gen_set_config+0xb4>)
    23b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23b8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    23ba:	2200      	movs	r2, #0
    23bc:	e7d2      	b.n	2364 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    23be:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    23c0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23c2:	2380      	movs	r3, #128	; 0x80
    23c4:	029b      	lsls	r3, r3, #10
    23c6:	431d      	orrs	r5, r3
    23c8:	e7d2      	b.n	2370 <system_gclk_gen_set_config+0x4c>
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	40000c00 	.word	0x40000c00
    23d0:	00002001 	.word	0x00002001
    23d4:	40000c08 	.word	0x40000c08
    23d8:	00002041 	.word	0x00002041

000023dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    23dc:	b510      	push	{r4, lr}
    23de:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23e0:	4a0b      	ldr	r2, [pc, #44]	; (2410 <system_gclk_gen_enable+0x34>)
    23e2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23e4:	b25b      	sxtb	r3, r3
    23e6:	2b00      	cmp	r3, #0
    23e8:	dbfb      	blt.n	23e2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    23ea:	4b0a      	ldr	r3, [pc, #40]	; (2414 <system_gclk_gen_enable+0x38>)
    23ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23ee:	4b0a      	ldr	r3, [pc, #40]	; (2418 <system_gclk_gen_enable+0x3c>)
    23f0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23f2:	4a07      	ldr	r2, [pc, #28]	; (2410 <system_gclk_gen_enable+0x34>)
    23f4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23f6:	b25b      	sxtb	r3, r3
    23f8:	2b00      	cmp	r3, #0
    23fa:	dbfb      	blt.n	23f4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    23fc:	4a04      	ldr	r2, [pc, #16]	; (2410 <system_gclk_gen_enable+0x34>)
    23fe:	6851      	ldr	r1, [r2, #4]
    2400:	2380      	movs	r3, #128	; 0x80
    2402:	025b      	lsls	r3, r3, #9
    2404:	430b      	orrs	r3, r1
    2406:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <system_gclk_gen_enable+0x40>)
    240a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    240c:	bd10      	pop	{r4, pc}
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	40000c00 	.word	0x40000c00
    2414:	00002001 	.word	0x00002001
    2418:	40000c04 	.word	0x40000c04
    241c:	00002041 	.word	0x00002041

00002420 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2420:	b510      	push	{r4, lr}
    2422:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <system_gclk_chan_enable+0x20>)
    2426:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <system_gclk_chan_enable+0x24>)
    242a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    242c:	4a06      	ldr	r2, [pc, #24]	; (2448 <system_gclk_chan_enable+0x28>)
    242e:	8853      	ldrh	r3, [r2, #2]
    2430:	2180      	movs	r1, #128	; 0x80
    2432:	01c9      	lsls	r1, r1, #7
    2434:	430b      	orrs	r3, r1
    2436:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2438:	4b04      	ldr	r3, [pc, #16]	; (244c <system_gclk_chan_enable+0x2c>)
    243a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    243c:	bd10      	pop	{r4, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	00002001 	.word	0x00002001
    2444:	40000c02 	.word	0x40000c02
    2448:	40000c00 	.word	0x40000c00
    244c:	00002041 	.word	0x00002041

00002450 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2450:	b510      	push	{r4, lr}
    2452:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2454:	4b0f      	ldr	r3, [pc, #60]	; (2494 <system_gclk_chan_disable+0x44>)
    2456:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2458:	4b0f      	ldr	r3, [pc, #60]	; (2498 <system_gclk_chan_disable+0x48>)
    245a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    245c:	4a0f      	ldr	r2, [pc, #60]	; (249c <system_gclk_chan_disable+0x4c>)
    245e:	8853      	ldrh	r3, [r2, #2]
    2460:	051b      	lsls	r3, r3, #20
    2462:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2464:	8853      	ldrh	r3, [r2, #2]
    2466:	490e      	ldr	r1, [pc, #56]	; (24a0 <system_gclk_chan_disable+0x50>)
    2468:	400b      	ands	r3, r1
    246a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    246c:	8853      	ldrh	r3, [r2, #2]
    246e:	490d      	ldr	r1, [pc, #52]	; (24a4 <system_gclk_chan_disable+0x54>)
    2470:	400b      	ands	r3, r1
    2472:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2474:	0011      	movs	r1, r2
    2476:	2280      	movs	r2, #128	; 0x80
    2478:	01d2      	lsls	r2, r2, #7
    247a:	884b      	ldrh	r3, [r1, #2]
    247c:	4213      	tst	r3, r2
    247e:	d1fc      	bne.n	247a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2480:	4906      	ldr	r1, [pc, #24]	; (249c <system_gclk_chan_disable+0x4c>)
    2482:	884a      	ldrh	r2, [r1, #2]
    2484:	0203      	lsls	r3, r0, #8
    2486:	4806      	ldr	r0, [pc, #24]	; (24a0 <system_gclk_chan_disable+0x50>)
    2488:	4002      	ands	r2, r0
    248a:	4313      	orrs	r3, r2
    248c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    248e:	4b06      	ldr	r3, [pc, #24]	; (24a8 <system_gclk_chan_disable+0x58>)
    2490:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2492:	bd10      	pop	{r4, pc}
    2494:	00002001 	.word	0x00002001
    2498:	40000c02 	.word	0x40000c02
    249c:	40000c00 	.word	0x40000c00
    24a0:	fffff0ff 	.word	0xfffff0ff
    24a4:	ffffbfff 	.word	0xffffbfff
    24a8:	00002041 	.word	0x00002041

000024ac <system_gclk_chan_set_config>:
{
    24ac:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    24ae:	780c      	ldrb	r4, [r1, #0]
    24b0:	0224      	lsls	r4, r4, #8
    24b2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    24b4:	4b02      	ldr	r3, [pc, #8]	; (24c0 <system_gclk_chan_set_config+0x14>)
    24b6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    24b8:	b2a4      	uxth	r4, r4
    24ba:	4b02      	ldr	r3, [pc, #8]	; (24c4 <system_gclk_chan_set_config+0x18>)
    24bc:	805c      	strh	r4, [r3, #2]
}
    24be:	bd10      	pop	{r4, pc}
    24c0:	00002451 	.word	0x00002451
    24c4:	40000c00 	.word	0x40000c00

000024c8 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    24c8:	b510      	push	{r4, lr}
    24ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <system_gclk_chan_lock+0x20>)
    24ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24d0:	4b06      	ldr	r3, [pc, #24]	; (24ec <system_gclk_chan_lock+0x24>)
    24d2:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    24d4:	4a06      	ldr	r2, [pc, #24]	; (24f0 <system_gclk_chan_lock+0x28>)
    24d6:	8853      	ldrh	r3, [r2, #2]
    24d8:	21c0      	movs	r1, #192	; 0xc0
    24da:	0209      	lsls	r1, r1, #8
    24dc:	430b      	orrs	r3, r1
    24de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    24e0:	4b04      	ldr	r3, [pc, #16]	; (24f4 <system_gclk_chan_lock+0x2c>)
    24e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	00002001 	.word	0x00002001
    24ec:	40000c02 	.word	0x40000c02
    24f0:	40000c00 	.word	0x40000c00
    24f4:	00002041 	.word	0x00002041

000024f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    24f8:	4770      	bx	lr
	...

000024fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    24fc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <system_init+0x18>)
    2500:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2502:	4b05      	ldr	r3, [pc, #20]	; (2518 <system_init+0x1c>)
    2504:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2506:	4b05      	ldr	r3, [pc, #20]	; (251c <system_init+0x20>)
    2508:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <system_init+0x24>)
    250c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <system_init+0x28>)
    2510:	4798      	blx	r3
}
    2512:	bd10      	pop	{r4, pc}
    2514:	000021d5 	.word	0x000021d5
    2518:	00001c99 	.word	0x00001c99
    251c:	000024f9 	.word	0x000024f9
    2520:	000024f9 	.word	0x000024f9
    2524:	000024f9 	.word	0x000024f9

00002528 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2528:	e7fe      	b.n	2528 <Dummy_Handler>
	...

0000252c <Reset_Handler>:
{
    252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    252e:	4a2a      	ldr	r2, [pc, #168]	; (25d8 <Reset_Handler+0xac>)
    2530:	4b2a      	ldr	r3, [pc, #168]	; (25dc <Reset_Handler+0xb0>)
    2532:	429a      	cmp	r2, r3
    2534:	d011      	beq.n	255a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2536:	001a      	movs	r2, r3
    2538:	4b29      	ldr	r3, [pc, #164]	; (25e0 <Reset_Handler+0xb4>)
    253a:	429a      	cmp	r2, r3
    253c:	d20d      	bcs.n	255a <Reset_Handler+0x2e>
    253e:	4a29      	ldr	r2, [pc, #164]	; (25e4 <Reset_Handler+0xb8>)
    2540:	3303      	adds	r3, #3
    2542:	1a9b      	subs	r3, r3, r2
    2544:	089b      	lsrs	r3, r3, #2
    2546:	3301      	adds	r3, #1
    2548:	009b      	lsls	r3, r3, #2
    254a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    254c:	4823      	ldr	r0, [pc, #140]	; (25dc <Reset_Handler+0xb0>)
    254e:	4922      	ldr	r1, [pc, #136]	; (25d8 <Reset_Handler+0xac>)
    2550:	588c      	ldr	r4, [r1, r2]
    2552:	5084      	str	r4, [r0, r2]
    2554:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2556:	429a      	cmp	r2, r3
    2558:	d1fa      	bne.n	2550 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    255a:	4a23      	ldr	r2, [pc, #140]	; (25e8 <Reset_Handler+0xbc>)
    255c:	4b23      	ldr	r3, [pc, #140]	; (25ec <Reset_Handler+0xc0>)
    255e:	429a      	cmp	r2, r3
    2560:	d20a      	bcs.n	2578 <Reset_Handler+0x4c>
    2562:	43d3      	mvns	r3, r2
    2564:	4921      	ldr	r1, [pc, #132]	; (25ec <Reset_Handler+0xc0>)
    2566:	185b      	adds	r3, r3, r1
    2568:	2103      	movs	r1, #3
    256a:	438b      	bics	r3, r1
    256c:	3304      	adds	r3, #4
    256e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2570:	2100      	movs	r1, #0
    2572:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2574:	4293      	cmp	r3, r2
    2576:	d1fc      	bne.n	2572 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2578:	4a1d      	ldr	r2, [pc, #116]	; (25f0 <Reset_Handler+0xc4>)
    257a:	21ff      	movs	r1, #255	; 0xff
    257c:	4b1d      	ldr	r3, [pc, #116]	; (25f4 <Reset_Handler+0xc8>)
    257e:	438b      	bics	r3, r1
    2580:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2582:	39fd      	subs	r1, #253	; 0xfd
    2584:	2390      	movs	r3, #144	; 0x90
    2586:	005b      	lsls	r3, r3, #1
    2588:	4a1b      	ldr	r2, [pc, #108]	; (25f8 <Reset_Handler+0xcc>)
    258a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    258c:	4a1b      	ldr	r2, [pc, #108]	; (25fc <Reset_Handler+0xd0>)
    258e:	78d3      	ldrb	r3, [r2, #3]
    2590:	2503      	movs	r5, #3
    2592:	43ab      	bics	r3, r5
    2594:	2402      	movs	r4, #2
    2596:	4323      	orrs	r3, r4
    2598:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    259a:	78d3      	ldrb	r3, [r2, #3]
    259c:	270c      	movs	r7, #12
    259e:	43bb      	bics	r3, r7
    25a0:	2608      	movs	r6, #8
    25a2:	4333      	orrs	r3, r6
    25a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    25a6:	4b16      	ldr	r3, [pc, #88]	; (2600 <Reset_Handler+0xd4>)
    25a8:	7b98      	ldrb	r0, [r3, #14]
    25aa:	2230      	movs	r2, #48	; 0x30
    25ac:	4390      	bics	r0, r2
    25ae:	2220      	movs	r2, #32
    25b0:	4310      	orrs	r0, r2
    25b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    25b4:	7b99      	ldrb	r1, [r3, #14]
    25b6:	43b9      	bics	r1, r7
    25b8:	4331      	orrs	r1, r6
    25ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    25bc:	7b9a      	ldrb	r2, [r3, #14]
    25be:	43aa      	bics	r2, r5
    25c0:	4322      	orrs	r2, r4
    25c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    25c4:	4a0f      	ldr	r2, [pc, #60]	; (2604 <Reset_Handler+0xd8>)
    25c6:	6853      	ldr	r3, [r2, #4]
    25c8:	2180      	movs	r1, #128	; 0x80
    25ca:	430b      	orrs	r3, r1
    25cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    25ce:	4b0e      	ldr	r3, [pc, #56]	; (2608 <Reset_Handler+0xdc>)
    25d0:	4798      	blx	r3
        main();
    25d2:	4b0e      	ldr	r3, [pc, #56]	; (260c <Reset_Handler+0xe0>)
    25d4:	4798      	blx	r3
    25d6:	e7fe      	b.n	25d6 <Reset_Handler+0xaa>
    25d8:	000027ac 	.word	0x000027ac
    25dc:	20000000 	.word	0x20000000
    25e0:	20000008 	.word	0x20000008
    25e4:	20000004 	.word	0x20000004
    25e8:	20000008 	.word	0x20000008
    25ec:	20005030 	.word	0x20005030
    25f0:	e000ed00 	.word	0xe000ed00
    25f4:	00000000 	.word	0x00000000
    25f8:	41007000 	.word	0x41007000
    25fc:	41005000 	.word	0x41005000
    2600:	41004800 	.word	0x41004800
    2604:	41004000 	.word	0x41004000
    2608:	000026a1 	.word	0x000026a1
    260c:	00002611 	.word	0x00002611

00002610 <main>:
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
	wdt_set_config(&config_wdt);
}

int main (void)
{
    2610:	b510      	push	{r4, lr}
    2612:	b082      	sub	sp, #8
	system_init();
    2614:	4b14      	ldr	r3, [pc, #80]	; (2668 <main+0x58>)
    2616:	4798      	blx	r3
	delay_init();
    2618:	4b14      	ldr	r3, [pc, #80]	; (266c <main+0x5c>)
    261a:	4798      	blx	r3
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    261c:	2103      	movs	r1, #3
    261e:	2080      	movs	r0, #128	; 0x80
    2620:	0040      	lsls	r0, r0, #1
    2622:	4b13      	ldr	r3, [pc, #76]	; (2670 <main+0x60>)
    2624:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    2626:	2480      	movs	r4, #128	; 0x80
    2628:	00a4      	lsls	r4, r4, #2
    262a:	2102      	movs	r1, #2
    262c:	0020      	movs	r0, r4
    262e:	4b11      	ldr	r3, [pc, #68]	; (2674 <main+0x64>)
    2630:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    2632:	2102      	movs	r1, #2
    2634:	0020      	movs	r0, r4
    2636:	4b10      	ldr	r3, [pc, #64]	; (2678 <main+0x68>)
    2638:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    263a:	2101      	movs	r1, #1
    263c:	0020      	movs	r0, r4
    263e:	4b0f      	ldr	r3, [pc, #60]	; (267c <main+0x6c>)
    2640:	4798      	blx	r3
	config->enable               = true;
    2642:	2301      	movs	r3, #1
    2644:	466a      	mov	r2, sp
    2646:	7053      	strb	r3, [r2, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    2648:	2204      	movs	r2, #4
    264a:	4669      	mov	r1, sp
    264c:	708a      	strb	r2, [r1, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    264e:	3208      	adds	r2, #8
    2650:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    2652:	2200      	movs	r2, #0
    2654:	710a      	strb	r2, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    2656:	714a      	strb	r2, [r1, #5]
	config_wdt.always_on = true; // Cannot be turned off
    2658:	700b      	strb	r3, [r1, #0]
	wdt_set_config(&config_wdt);
    265a:	4668      	mov	r0, sp
    265c:	4b08      	ldr	r3, [pc, #32]	; (2680 <main+0x70>)
    265e:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();

	vTaskStartScheduler();
    2660:	4b08      	ldr	r3, [pc, #32]	; (2684 <main+0x74>)
    2662:	4798      	blx	r3
    2664:	e7fe      	b.n	2664 <main+0x54>
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	000024fd 	.word	0x000024fd
    266c:	00001c95 	.word	0x00001c95
    2670:	0000063d 	.word	0x0000063d
    2674:	000005bd 	.word	0x000005bd
    2678:	0000067d 	.word	0x0000067d
    267c:	000005fd 	.word	0x000005fd
    2680:	00001b01 	.word	0x00001b01
    2684:	00001141 	.word	0x00001141

00002688 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    2688:	b672      	cpsid	i
    268a:	e7fe      	b.n	268a <vApplicationMallocFailedHook+0x2>

0000268c <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    268c:	b510      	push	{r4, lr}
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    268e:	4b01      	ldr	r3, [pc, #4]	; (2694 <vApplicationIdleHook+0x8>)
    2690:	4798      	blx	r3
}
    2692:	bd10      	pop	{r4, pc}
    2694:	00001c01 	.word	0x00001c01

00002698 <vApplicationTickHook>:

void vApplicationTickHook(void)
{
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    2698:	4770      	bx	lr

0000269a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    269a:	b672      	cpsid	i
    269c:	e7fe      	b.n	269c <vApplicationStackOverflowHook+0x2>

0000269e <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    269e:	e7fe      	b.n	269e <HardFault_Handler>

000026a0 <__libc_init_array>:
    26a0:	b570      	push	{r4, r5, r6, lr}
    26a2:	2600      	movs	r6, #0
    26a4:	4d0c      	ldr	r5, [pc, #48]	; (26d8 <__libc_init_array+0x38>)
    26a6:	4c0d      	ldr	r4, [pc, #52]	; (26dc <__libc_init_array+0x3c>)
    26a8:	1b64      	subs	r4, r4, r5
    26aa:	10a4      	asrs	r4, r4, #2
    26ac:	42a6      	cmp	r6, r4
    26ae:	d109      	bne.n	26c4 <__libc_init_array+0x24>
    26b0:	2600      	movs	r6, #0
    26b2:	f000 f86b 	bl	278c <_init>
    26b6:	4d0a      	ldr	r5, [pc, #40]	; (26e0 <__libc_init_array+0x40>)
    26b8:	4c0a      	ldr	r4, [pc, #40]	; (26e4 <__libc_init_array+0x44>)
    26ba:	1b64      	subs	r4, r4, r5
    26bc:	10a4      	asrs	r4, r4, #2
    26be:	42a6      	cmp	r6, r4
    26c0:	d105      	bne.n	26ce <__libc_init_array+0x2e>
    26c2:	bd70      	pop	{r4, r5, r6, pc}
    26c4:	00b3      	lsls	r3, r6, #2
    26c6:	58eb      	ldr	r3, [r5, r3]
    26c8:	4798      	blx	r3
    26ca:	3601      	adds	r6, #1
    26cc:	e7ee      	b.n	26ac <__libc_init_array+0xc>
    26ce:	00b3      	lsls	r3, r6, #2
    26d0:	58eb      	ldr	r3, [r5, r3]
    26d2:	4798      	blx	r3
    26d4:	3601      	adds	r6, #1
    26d6:	e7f2      	b.n	26be <__libc_init_array+0x1e>
    26d8:	00002798 	.word	0x00002798
    26dc:	00002798 	.word	0x00002798
    26e0:	00002798 	.word	0x00002798
    26e4:	0000279c 	.word	0x0000279c

000026e8 <memcpy>:
    26e8:	2300      	movs	r3, #0
    26ea:	b510      	push	{r4, lr}
    26ec:	429a      	cmp	r2, r3
    26ee:	d100      	bne.n	26f2 <memcpy+0xa>
    26f0:	bd10      	pop	{r4, pc}
    26f2:	5ccc      	ldrb	r4, [r1, r3]
    26f4:	54c4      	strb	r4, [r0, r3]
    26f6:	3301      	adds	r3, #1
    26f8:	e7f8      	b.n	26ec <memcpy+0x4>

000026fa <memset>:
    26fa:	0003      	movs	r3, r0
    26fc:	1882      	adds	r2, r0, r2
    26fe:	4293      	cmp	r3, r2
    2700:	d100      	bne.n	2704 <memset+0xa>
    2702:	4770      	bx	lr
    2704:	7019      	strb	r1, [r3, #0]
    2706:	3301      	adds	r3, #1
    2708:	e7f9      	b.n	26fe <memset+0x4>
    270a:	0000      	movs	r0, r0
    270c:	544e4f43 	.word	0x544e4f43
    2710:	004c4f52 	.word	0x004c4f52
    2714:	00494d48 	.word	0x00494d48
    2718:	494e4f4d 	.word	0x494e4f4d
    271c:	00524f54 	.word	0x00524f54
    2720:	534e4553 	.word	0x534e4553
    2724:	0000524f 	.word	0x0000524f
    2728:	454c4449 	.word	0x454c4449
    272c:	00000000 	.word	0x00000000
    2730:	00001a64 	.word	0x00001a64
    2734:	00001a64 	.word	0x00001a64
    2738:	00001a64 	.word	0x00001a64
    273c:	00001a30 	.word	0x00001a30
    2740:	00001aa6 	.word	0x00001aa6
    2744:	00001ac0 	.word	0x00001ac0
    2748:	00001a64 	.word	0x00001a64
    274c:	00001a64 	.word	0x00001a64
    2750:	00001a30 	.word	0x00001a30
    2754:	00001aa6 	.word	0x00001aa6
    2758:	51726d54 	.word	0x51726d54
    275c:	00000000 	.word	0x00000000
    2760:	20726d54 	.word	0x20726d54
    2764:	00637653 	.word	0x00637653
    2768:	00002158 	.word	0x00002158
    276c:	00002138 	.word	0x00002138
    2770:	00002138 	.word	0x00002138
    2774:	000021c4 	.word	0x000021c4
    2778:	0000214a 	.word	0x0000214a
    277c:	00002166 	.word	0x00002166
    2780:	0000213c 	.word	0x0000213c
    2784:	00002174 	.word	0x00002174
    2788:	000021b4 	.word	0x000021b4

0000278c <_init>:
    278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2792:	bc08      	pop	{r3}
    2794:	469e      	mov	lr, r3
    2796:	4770      	bx	lr

00002798 <__init_array_start>:
    2798:	000000dd 	.word	0x000000dd

0000279c <_fini>:
    279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27a2:	bc08      	pop	{r3}
    27a4:	469e      	mov	lr, r3
    27a6:	4770      	bx	lr

000027a8 <__fini_array_start>:
    27a8:	000000b5 	.word	0x000000b5
