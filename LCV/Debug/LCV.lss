
LCV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d04  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00006d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005288  20000010  00006d14  00020010  2**2
                  ALLOC
  3 .stack        00002000  20005298  0000bf9c  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004af24  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d08  00000000  00000000  0006afb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bc72  00000000  00000000  00071cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bd8  00000000  00000000  0007d92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000db8  00000000  00000000  0007e507  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002072f  00000000  00000000  0007f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ac1e  00000000  00000000  0009f9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092e7a  00000000  00000000  000ba60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002144  00000000  00000000  0014d488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 72 00 20 85 41 00 00 81 41 00 00 f7 42 00 00     .r. .A...A...B..
	...
      2c:	81 41 00 00 00 00 00 00 00 00 00 00 81 41 00 00     .A...........A..
      3c:	81 41 00 00 81 41 00 00 81 41 00 00 55 33 00 00     .A...A...A..U3..
      4c:	81 41 00 00 81 41 00 00 81 41 00 00 81 41 00 00     .A...A...A...A..
      5c:	81 41 00 00 81 41 00 00 dd 35 00 00 ed 35 00 00     .A...A...5...5..
      6c:	fd 35 00 00 0d 36 00 00 1d 36 00 00 2d 36 00 00     .5...6...6..-6..
      7c:	81 41 00 00 81 41 00 00 81 41 00 00 81 41 00 00     .A...A...A...A..
      8c:	81 41 00 00 81 41 00 00 00 00 00 00 00 00 00 00     .A...A..........
      9c:	85 05 00 00 81 41 00 00 b9 06 00 00 81 41 00 00     .....A.......A..
      ac:	81 41 00 00 00 00 00 00                             .A......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00006d04 	.word	0x00006d04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00006d04 	.word	0x00006d04
     10c:	00006d04 	.word	0x00006d04
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	20005234 	.word	0x20005234
     494:	00003ff9 	.word	0x00003ff9
     498:	00003f6d 	.word	0x00003f6d
     49c:	000069f5 	.word	0x000069f5
     4a0:	00006aec 	.word	0x00006aec
     4a4:	00004121 	.word	0x00004121
     4a8:	00006a18 	.word	0x00006a18
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2f      	ldr	r3, [pc, #188]	; (644 <ADC_Handler+0xc0>)
     588:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	7e1a      	ldrb	r2, [r3, #24]
     58e:	7ddc      	ldrb	r4, [r3, #23]
     590:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     592:	07e2      	lsls	r2, r4, #31
     594:	d416      	bmi.n	5c4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     596:	0763      	lsls	r3, r4, #29
     598:	d508      	bpl.n	5ac <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     59a:	2304      	movs	r3, #4
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5a0:	7eeb      	ldrb	r3, [r5, #27]
     5a2:	079b      	lsls	r3, r3, #30
     5a4:	d502      	bpl.n	5ac <ADC_Handler+0x28>
     5a6:	7eab      	ldrb	r3, [r5, #26]
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d442      	bmi.n	632 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5ac:	07a3      	lsls	r3, r4, #30
     5ae:	d508      	bpl.n	5c2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5b0:	2302      	movs	r3, #2
     5b2:	682a      	ldr	r2, [r5, #0]
     5b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5b6:	7eeb      	ldrb	r3, [r5, #27]
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	d502      	bpl.n	5c2 <ADC_Handler+0x3e>
     5bc:	7eab      	ldrb	r3, [r5, #26]
     5be:	075b      	lsls	r3, r3, #29
     5c0:	d43b      	bmi.n	63a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5c4:	2201      	movs	r2, #1
     5c6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5c8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ca:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     5cc:	b25b      	sxtb	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	dbfb      	blt.n	5ca <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     5d2:	6969      	ldr	r1, [r5, #20]
     5d4:	1c8b      	adds	r3, r1, #2
     5d6:	616b      	str	r3, [r5, #20]
     5d8:	8b53      	ldrh	r3, [r2, #26]
     5da:	b29b      	uxth	r3, r3
     5dc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     5de:	8b2b      	ldrh	r3, [r5, #24]
     5e0:	3b01      	subs	r3, #1
     5e2:	b29b      	uxth	r3, r3
     5e4:	832b      	strh	r3, [r5, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d011      	beq.n	60e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     5ea:	7f6b      	ldrb	r3, [r5, #29]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d0d2      	beq.n	596 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5f0:	682a      	ldr	r2, [r5, #0]
     5f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5f4:	b25b      	sxtb	r3, r3
     5f6:	2b00      	cmp	r3, #0
     5f8:	dbfb      	blt.n	5f2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5fa:	7b13      	ldrb	r3, [r2, #12]
     5fc:	2102      	movs	r1, #2
     5fe:	430b      	orrs	r3, r1
     600:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     602:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     604:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	dbfb      	blt.n	604 <ADC_Handler+0x80>
     60c:	e7c3      	b.n	596 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     60e:	2301      	movs	r3, #1
     610:	682a      	ldr	r2, [r5, #0]
     612:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     614:	7f2b      	ldrb	r3, [r5, #28]
     616:	2b05      	cmp	r3, #5
     618:	d1bd      	bne.n	596 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     61a:	2300      	movs	r3, #0
     61c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     61e:	7eeb      	ldrb	r3, [r5, #27]
     620:	07db      	lsls	r3, r3, #31
     622:	d5b8      	bpl.n	596 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     624:	7eab      	ldrb	r3, [r5, #26]
     626:	07db      	lsls	r3, r3, #31
     628:	d5b5      	bpl.n	596 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     62a:	0028      	movs	r0, r5
     62c:	68ab      	ldr	r3, [r5, #8]
     62e:	4798      	blx	r3
     630:	e7b1      	b.n	596 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     632:	0028      	movs	r0, r5
     634:	68eb      	ldr	r3, [r5, #12]
     636:	4798      	blx	r3
     638:	e7b8      	b.n	5ac <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     63a:	692b      	ldr	r3, [r5, #16]
     63c:	0028      	movs	r0, r5
     63e:	4798      	blx	r3
}
     640:	e7bf      	b.n	5c2 <ADC_Handler+0x3e>
     642:	46c0      	nop			; (mov r8, r8)
     644:	20005234 	.word	0x20005234

00000648 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     648:	1c93      	adds	r3, r2, #2
     64a:	009b      	lsls	r3, r3, #2
     64c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     64e:	2301      	movs	r3, #1
     650:	4093      	lsls	r3, r2
     652:	001a      	movs	r2, r3
     654:	7e83      	ldrb	r3, [r0, #26]
     656:	4313      	orrs	r3, r2
     658:	7683      	strb	r3, [r0, #26]
}
     65a:	4770      	bx	lr

0000065c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     65c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     65e:	8b03      	ldrh	r3, [r0, #24]
     660:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     662:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     664:	2b00      	cmp	r3, #0
     666:	d001      	beq.n	66c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     668:	0020      	movs	r0, r4
     66a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     66c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     66e:	2b05      	cmp	r3, #5
     670:	d0fa      	beq.n	668 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     672:	2305      	movs	r3, #5
     674:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     676:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     678:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     67a:	3b04      	subs	r3, #4
     67c:	6802      	ldr	r2, [r0, #0]
     67e:	75d3      	strb	r3, [r2, #23]
	if(module_inst->software_trigger == true) {
     680:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     682:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     684:	2b00      	cmp	r3, #0
     686:	d0ef      	beq.n	668 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     688:	6802      	ldr	r2, [r0, #0]
     68a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     68c:	b25b      	sxtb	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	dbfb      	blt.n	68a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     692:	7b13      	ldrb	r3, [r2, #12]
     694:	2102      	movs	r1, #2
     696:	430b      	orrs	r3, r1
     698:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     69a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     69c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     69e:	b25b      	sxtb	r3, r3
     6a0:	2b00      	cmp	r3, #0
     6a2:	dbfb      	blt.n	69c <adc_read_buffer_job+0x40>
	return STATUS_OK;
     6a4:	2400      	movs	r4, #0
     6a6:	e7df      	b.n	668 <adc_read_buffer_job+0xc>

000006a8 <adc_get_job_status>:
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
		return module_inst->job_status;
	} else {
		return STATUS_ERR_INVALID_ARG;
     6a8:	2317      	movs	r3, #23
	if (type == ADC_JOB_READ_BUFFER ) {
     6aa:	2900      	cmp	r1, #0
     6ac:	d001      	beq.n	6b2 <adc_get_job_status+0xa>
	}
}
     6ae:	0018      	movs	r0, r3
     6b0:	4770      	bx	lr
		return module_inst->job_status;
     6b2:	7f03      	ldrb	r3, [r0, #28]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	e7fa      	b.n	6ae <adc_get_job_status+0x6>

000006b8 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     6ba:	4b27      	ldr	r3, [pc, #156]	; (758 <DAC_Handler+0xa0>)
     6bc:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     6be:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     6c0:	79ab      	ldrb	r3, [r5, #6]
     6c2:	07db      	lsls	r3, r3, #31
     6c4:	d507      	bpl.n	6d6 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     6c6:	2301      	movs	r3, #1
     6c8:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     6ca:	0023      	movs	r3, r4
     6cc:	3314      	adds	r3, #20
     6ce:	d002      	beq.n	6d6 <DAC_Handler+0x1e>
     6d0:	7c63      	ldrb	r3, [r4, #17]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d131      	bne.n	73a <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     6d6:	79ab      	ldrb	r3, [r5, #6]
     6d8:	079b      	lsls	r3, r3, #30
     6da:	d538      	bpl.n	74e <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     6dc:	2302      	movs	r3, #2
     6de:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     6e0:	89a3      	ldrh	r3, [r4, #12]
     6e2:	b29b      	uxth	r3, r3
     6e4:	2b00      	cmp	r3, #0
     6e6:	d02c      	beq.n	742 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     6e8:	89e3      	ldrh	r3, [r4, #14]
     6ea:	b29b      	uxth	r3, r3
     6ec:	1c5a      	adds	r2, r3, #1
     6ee:	b292      	uxth	r2, r2
     6f0:	81e2      	strh	r2, [r4, #14]
     6f2:	005b      	lsls	r3, r3, #1
     6f4:	68a2      	ldr	r2, [r4, #8]
     6f6:	4694      	mov	ip, r2
     6f8:	4463      	add	r3, ip
     6fa:	881b      	ldrh	r3, [r3, #0]
     6fc:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     6fe:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     700:	89a3      	ldrh	r3, [r4, #12]
     702:	3b01      	subs	r3, #1
     704:	b29b      	uxth	r3, r3
     706:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     708:	89a3      	ldrh	r3, [r4, #12]
     70a:	b29b      	uxth	r3, r3
     70c:	2b00      	cmp	r3, #0
     70e:	d118      	bne.n	742 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     710:	2200      	movs	r2, #0
     712:	3320      	adds	r3, #32
     714:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     716:	3b1e      	subs	r3, #30
     718:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     71a:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     71c:	2180      	movs	r1, #128	; 0x80
     71e:	0489      	lsls	r1, r1, #18
     720:	337e      	adds	r3, #126	; 0x7e
     722:	4a0e      	ldr	r2, [pc, #56]	; (75c <DAC_Handler+0xa4>)
     724:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     726:	0023      	movs	r3, r4
     728:	3314      	adds	r3, #20
     72a:	d010      	beq.n	74e <DAC_Handler+0x96>
     72c:	7ca3      	ldrb	r3, [r4, #18]
     72e:	2b00      	cmp	r3, #0
     730:	d00a      	beq.n	748 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     732:	2000      	movs	r0, #0
     734:	69e3      	ldr	r3, [r4, #28]
     736:	4798      	blx	r3
     738:	e006      	b.n	748 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     73a:	2000      	movs	r0, #0
     73c:	69a3      	ldr	r3, [r4, #24]
     73e:	4798      	blx	r3
     740:	e7c9      	b.n	6d6 <DAC_Handler+0x1e>
		if ((module->callback) &&
     742:	0023      	movs	r3, r4
     744:	3314      	adds	r3, #20
     746:	d002      	beq.n	74e <DAC_Handler+0x96>
     748:	7c23      	ldrb	r3, [r4, #16]
     74a:	2b00      	cmp	r3, #0
     74c:	d100      	bne.n	750 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     750:	6963      	ldr	r3, [r4, #20]
     752:	2000      	movs	r0, #0
     754:	4798      	blx	r3
}
     756:	e7fa      	b.n	74e <DAC_Handler+0x96>
     758:	20005238 	.word	0x20005238
     75c:	e000e100 	.word	0xe000e100

00000760 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     760:	b5f0      	push	{r4, r5, r6, r7, lr}
     762:	46d6      	mov	lr, sl
     764:	464f      	mov	r7, r9
     766:	4646      	mov	r6, r8
     768:	b5c0      	push	{r6, r7, lr}
     76a:	b08a      	sub	sp, #40	; 0x28
     76c:	0006      	movs	r6, r0
     76e:	000f      	movs	r7, r1
     770:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     772:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     774:	0008      	movs	r0, r1
     776:	4ba0      	ldr	r3, [pc, #640]	; (9f8 <i2c_master_init+0x298>)
     778:	4798      	blx	r3
     77a:	4aa0      	ldr	r2, [pc, #640]	; (9fc <i2c_master_init+0x29c>)
     77c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     77e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     780:	2301      	movs	r3, #1
     782:	40ab      	lsls	r3, r5
     784:	430b      	orrs	r3, r1
     786:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     788:	a909      	add	r1, sp, #36	; 0x24
     78a:	7b23      	ldrb	r3, [r4, #12]
     78c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     78e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     790:	b2c5      	uxtb	r5, r0
     792:	0028      	movs	r0, r5
     794:	4b9a      	ldr	r3, [pc, #616]	; (a00 <i2c_master_init+0x2a0>)
     796:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     798:	0028      	movs	r0, r5
     79a:	4b9a      	ldr	r3, [pc, #616]	; (a04 <i2c_master_init+0x2a4>)
     79c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     79e:	7b20      	ldrb	r0, [r4, #12]
     7a0:	2100      	movs	r1, #0
     7a2:	4b99      	ldr	r3, [pc, #612]	; (a08 <i2c_master_init+0x2a8>)
     7a4:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7a6:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     7a8:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     7aa:	079b      	lsls	r3, r3, #30
     7ac:	d505      	bpl.n	7ba <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     7ae:	b00a      	add	sp, #40	; 0x28
     7b0:	bc1c      	pop	{r2, r3, r4}
     7b2:	4690      	mov	r8, r2
     7b4:	4699      	mov	r9, r3
     7b6:	46a2      	mov	sl, r4
     7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7ba:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     7bc:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     7be:	07db      	lsls	r3, r3, #31
     7c0:	d4f5      	bmi.n	7ae <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     7c2:	6830      	ldr	r0, [r6, #0]
     7c4:	4b8c      	ldr	r3, [pc, #560]	; (9f8 <i2c_master_init+0x298>)
     7c6:	4699      	mov	r9, r3
     7c8:	4798      	blx	r3
     7ca:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     7cc:	498f      	ldr	r1, [pc, #572]	; (a0c <i2c_master_init+0x2ac>)
     7ce:	4b90      	ldr	r3, [pc, #576]	; (a10 <i2c_master_init+0x2b0>)
     7d0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     7d2:	00ad      	lsls	r5, r5, #2
     7d4:	4b8f      	ldr	r3, [pc, #572]	; (a14 <i2c_master_init+0x2b4>)
     7d6:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     7d8:	2300      	movs	r3, #0
     7da:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     7dc:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     7de:	2500      	movs	r5, #0
     7e0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     7e2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     7e4:	2225      	movs	r2, #37	; 0x25
     7e6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     7e8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     7ea:	3314      	adds	r3, #20
     7ec:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7ee:	6833      	ldr	r3, [r6, #0]
     7f0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     7f2:	0018      	movs	r0, r3
     7f4:	47c8      	blx	r9
     7f6:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7f8:	2380      	movs	r3, #128	; 0x80
     7fa:	aa08      	add	r2, sp, #32
     7fc:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7fe:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     800:	2301      	movs	r3, #1
     802:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     804:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     806:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     808:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     80a:	2800      	cmp	r0, #0
     80c:	d100      	bne.n	810 <i2c_master_init+0xb0>
     80e:	e0af      	b.n	970 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     810:	ab08      	add	r3, sp, #32
     812:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     814:	2302      	movs	r3, #2
     816:	aa08      	add	r2, sp, #32
     818:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     81a:	0c00      	lsrs	r0, r0, #16
     81c:	b2c0      	uxtb	r0, r0
     81e:	0011      	movs	r1, r2
     820:	4b7d      	ldr	r3, [pc, #500]	; (a18 <i2c_master_init+0x2b8>)
     822:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     824:	2f00      	cmp	r7, #0
     826:	d100      	bne.n	82a <i2c_master_init+0xca>
     828:	e0a7      	b.n	97a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     82a:	ab08      	add	r3, sp, #32
     82c:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     82e:	2302      	movs	r3, #2
     830:	aa08      	add	r2, sp, #32
     832:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     834:	0c3f      	lsrs	r7, r7, #16
     836:	b2f8      	uxtb	r0, r7
     838:	0011      	movs	r1, r2
     83a:	4b77      	ldr	r3, [pc, #476]	; (a18 <i2c_master_init+0x2b8>)
     83c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     83e:	8aa3      	ldrh	r3, [r4, #20]
     840:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     842:	8ae3      	ldrh	r3, [r4, #22]
     844:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     846:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     848:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     84a:	2b00      	cmp	r3, #0
     84c:	d104      	bne.n	858 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     84e:	4b73      	ldr	r3, [pc, #460]	; (a1c <i2c_master_init+0x2bc>)
     850:	789b      	ldrb	r3, [r3, #2]
     852:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     854:	0fdb      	lsrs	r3, r3, #31
     856:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     858:	68a1      	ldr	r1, [r4, #8]
     85a:	6923      	ldr	r3, [r4, #16]
     85c:	430b      	orrs	r3, r1
     85e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     860:	2224      	movs	r2, #36	; 0x24
     862:	5ca2      	ldrb	r2, [r4, r2]
     864:	2a00      	cmp	r2, #0
     866:	d002      	beq.n	86e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     868:	2280      	movs	r2, #128	; 0x80
     86a:	05d2      	lsls	r2, r2, #23
     86c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     86e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     870:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     872:	222c      	movs	r2, #44	; 0x2c
     874:	5ca2      	ldrb	r2, [r4, r2]
     876:	2a00      	cmp	r2, #0
     878:	d103      	bne.n	882 <i2c_master_init+0x122>
     87a:	2280      	movs	r2, #128	; 0x80
     87c:	0492      	lsls	r2, r2, #18
     87e:	4291      	cmp	r1, r2
     880:	d102      	bne.n	888 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     882:	2280      	movs	r2, #128	; 0x80
     884:	0512      	lsls	r2, r2, #20
     886:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     888:	222d      	movs	r2, #45	; 0x2d
     88a:	5ca2      	ldrb	r2, [r4, r2]
     88c:	2a00      	cmp	r2, #0
     88e:	d002      	beq.n	896 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     890:	2280      	movs	r2, #128	; 0x80
     892:	0412      	lsls	r2, r2, #16
     894:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     896:	222e      	movs	r2, #46	; 0x2e
     898:	5ca2      	ldrb	r2, [r4, r2]
     89a:	2a00      	cmp	r2, #0
     89c:	d002      	beq.n	8a4 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     89e:	2280      	movs	r2, #128	; 0x80
     8a0:	03d2      	lsls	r2, r2, #15
     8a2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     8a4:	4642      	mov	r2, r8
     8a6:	6812      	ldr	r2, [r2, #0]
     8a8:	4313      	orrs	r3, r2
     8aa:	4642      	mov	r2, r8
     8ac:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     8ae:	2380      	movs	r3, #128	; 0x80
     8b0:	005b      	lsls	r3, r3, #1
     8b2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     8b4:	4648      	mov	r0, r9
     8b6:	3014      	adds	r0, #20
     8b8:	b2c0      	uxtb	r0, r0
     8ba:	4b59      	ldr	r3, [pc, #356]	; (a20 <i2c_master_init+0x2c0>)
     8bc:	4798      	blx	r3
     8be:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     8c0:	23fa      	movs	r3, #250	; 0xfa
     8c2:	009b      	lsls	r3, r3, #2
     8c4:	6822      	ldr	r2, [r4, #0]
     8c6:	435a      	muls	r2, r3
     8c8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     8ca:	6863      	ldr	r3, [r4, #4]
     8cc:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     8ce:	4d55      	ldr	r5, [pc, #340]	; (a24 <i2c_master_init+0x2c4>)
     8d0:	47a8      	blx	r5
     8d2:	9000      	str	r0, [sp, #0]
     8d4:	9101      	str	r1, [sp, #4]
     8d6:	464b      	mov	r3, r9
     8d8:	0058      	lsls	r0, r3, #1
     8da:	47a8      	blx	r5
     8dc:	9002      	str	r0, [sp, #8]
     8de:	9103      	str	r1, [sp, #12]
     8e0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     8e2:	47a8      	blx	r5
     8e4:	9004      	str	r0, [sp, #16]
     8e6:	9105      	str	r1, [sp, #20]
     8e8:	4f4f      	ldr	r7, [pc, #316]	; (a28 <i2c_master_init+0x2c8>)
     8ea:	4a50      	ldr	r2, [pc, #320]	; (a2c <i2c_master_init+0x2cc>)
     8ec:	4b50      	ldr	r3, [pc, #320]	; (a30 <i2c_master_init+0x2d0>)
     8ee:	9800      	ldr	r0, [sp, #0]
     8f0:	9901      	ldr	r1, [sp, #4]
     8f2:	47b8      	blx	r7
     8f4:	0002      	movs	r2, r0
     8f6:	000b      	movs	r3, r1
     8f8:	9804      	ldr	r0, [sp, #16]
     8fa:	9905      	ldr	r1, [sp, #20]
     8fc:	47b8      	blx	r7
     8fe:	4e4d      	ldr	r6, [pc, #308]	; (a34 <i2c_master_init+0x2d4>)
     900:	2200      	movs	r2, #0
     902:	4b4d      	ldr	r3, [pc, #308]	; (a38 <i2c_master_init+0x2d8>)
     904:	47b0      	blx	r6
     906:	9004      	str	r0, [sp, #16]
     908:	9105      	str	r1, [sp, #20]
     90a:	4648      	mov	r0, r9
     90c:	47a8      	blx	r5
     90e:	0002      	movs	r2, r0
     910:	000b      	movs	r3, r1
     912:	9804      	ldr	r0, [sp, #16]
     914:	9905      	ldr	r1, [sp, #20]
     916:	47b8      	blx	r7
     918:	0002      	movs	r2, r0
     91a:	000b      	movs	r3, r1
     91c:	4d47      	ldr	r5, [pc, #284]	; (a3c <i2c_master_init+0x2dc>)
     91e:	9800      	ldr	r0, [sp, #0]
     920:	9901      	ldr	r1, [sp, #4]
     922:	47a8      	blx	r5
     924:	9a02      	ldr	r2, [sp, #8]
     926:	9b03      	ldr	r3, [sp, #12]
     928:	47b0      	blx	r6
     92a:	2200      	movs	r2, #0
     92c:	4b44      	ldr	r3, [pc, #272]	; (a40 <i2c_master_init+0x2e0>)
     92e:	47a8      	blx	r5
     930:	9a02      	ldr	r2, [sp, #8]
     932:	9b03      	ldr	r3, [sp, #12]
     934:	4d43      	ldr	r5, [pc, #268]	; (a44 <i2c_master_init+0x2e4>)
     936:	47a8      	blx	r5
     938:	4b43      	ldr	r3, [pc, #268]	; (a48 <i2c_master_init+0x2e8>)
     93a:	4798      	blx	r3
     93c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     93e:	2380      	movs	r3, #128	; 0x80
     940:	049b      	lsls	r3, r3, #18
     942:	68a2      	ldr	r2, [r4, #8]
     944:	429a      	cmp	r2, r3
     946:	d01e      	beq.n	986 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     948:	0003      	movs	r3, r0
     94a:	2040      	movs	r0, #64	; 0x40
     94c:	2dff      	cmp	r5, #255	; 0xff
     94e:	d900      	bls.n	952 <i2c_master_init+0x1f2>
     950:	e72d      	b.n	7ae <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     952:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     954:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     956:	25ff      	movs	r5, #255	; 0xff
     958:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     95a:	0624      	lsls	r4, r4, #24
     95c:	4325      	orrs	r5, r4
     95e:	0400      	lsls	r0, r0, #16
     960:	23ff      	movs	r3, #255	; 0xff
     962:	041b      	lsls	r3, r3, #16
     964:	4018      	ands	r0, r3
     966:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     968:	4643      	mov	r3, r8
     96a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     96c:	2000      	movs	r0, #0
     96e:	e71e      	b.n	7ae <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     970:	2100      	movs	r1, #0
     972:	4640      	mov	r0, r8
     974:	4b35      	ldr	r3, [pc, #212]	; (a4c <i2c_master_init+0x2ec>)
     976:	4798      	blx	r3
     978:	e74a      	b.n	810 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     97a:	2101      	movs	r1, #1
     97c:	4640      	mov	r0, r8
     97e:	4b33      	ldr	r3, [pc, #204]	; (a4c <i2c_master_init+0x2ec>)
     980:	4798      	blx	r3
     982:	0007      	movs	r7, r0
     984:	e751      	b.n	82a <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     986:	26fa      	movs	r6, #250	; 0xfa
     988:	00b6      	lsls	r6, r6, #2
     98a:	4653      	mov	r3, sl
     98c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     98e:	9800      	ldr	r0, [sp, #0]
     990:	9901      	ldr	r1, [sp, #4]
     992:	0002      	movs	r2, r0
     994:	000b      	movs	r3, r1
     996:	4c27      	ldr	r4, [pc, #156]	; (a34 <i2c_master_init+0x2d4>)
     998:	47a0      	blx	r4
     99a:	9000      	str	r0, [sp, #0]
     99c:	9101      	str	r1, [sp, #4]
     99e:	0030      	movs	r0, r6
     9a0:	4b20      	ldr	r3, [pc, #128]	; (a24 <i2c_master_init+0x2c4>)
     9a2:	4798      	blx	r3
     9a4:	2200      	movs	r2, #0
     9a6:	4b2a      	ldr	r3, [pc, #168]	; (a50 <i2c_master_init+0x2f0>)
     9a8:	47b8      	blx	r7
     9aa:	0002      	movs	r2, r0
     9ac:	000b      	movs	r3, r1
     9ae:	9800      	ldr	r0, [sp, #0]
     9b0:	9901      	ldr	r1, [sp, #4]
     9b2:	4c24      	ldr	r4, [pc, #144]	; (a44 <i2c_master_init+0x2e4>)
     9b4:	47a0      	blx	r4
     9b6:	2200      	movs	r2, #0
     9b8:	4b21      	ldr	r3, [pc, #132]	; (a40 <i2c_master_init+0x2e0>)
     9ba:	4c20      	ldr	r4, [pc, #128]	; (a3c <i2c_master_init+0x2dc>)
     9bc:	47a0      	blx	r4
     9be:	4b22      	ldr	r3, [pc, #136]	; (a48 <i2c_master_init+0x2e8>)
     9c0:	4798      	blx	r3
     9c2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     9c4:	d00c      	beq.n	9e0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     9c6:	0031      	movs	r1, r6
     9c8:	9807      	ldr	r0, [sp, #28]
     9ca:	4b22      	ldr	r3, [pc, #136]	; (a54 <i2c_master_init+0x2f4>)
     9cc:	4798      	blx	r3
     9ce:	3802      	subs	r0, #2
     9d0:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     9d2:	002b      	movs	r3, r5
     9d4:	2dff      	cmp	r5, #255	; 0xff
     9d6:	d80c      	bhi.n	9f2 <i2c_master_init+0x292>
     9d8:	28ff      	cmp	r0, #255	; 0xff
     9da:	d9bc      	bls.n	956 <i2c_master_init+0x1f6>
     9dc:	2040      	movs	r0, #64	; 0x40
     9de:	e6e6      	b.n	7ae <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     9e0:	0071      	lsls	r1, r6, #1
     9e2:	1e48      	subs	r0, r1, #1
     9e4:	9b07      	ldr	r3, [sp, #28]
     9e6:	469c      	mov	ip, r3
     9e8:	4460      	add	r0, ip
     9ea:	4b1a      	ldr	r3, [pc, #104]	; (a54 <i2c_master_init+0x2f4>)
     9ec:	4798      	blx	r3
     9ee:	3801      	subs	r0, #1
     9f0:	e7ef      	b.n	9d2 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     9f2:	2040      	movs	r0, #64	; 0x40
     9f4:	e6db      	b.n	7ae <i2c_master_init+0x4e>
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	00003535 	.word	0x00003535
     9fc:	40000400 	.word	0x40000400
     a00:	00003ff9 	.word	0x00003ff9
     a04:	00003f6d 	.word	0x00003f6d
     a08:	00003371 	.word	0x00003371
     a0c:	00000d35 	.word	0x00000d35
     a10:	00003571 	.word	0x00003571
     a14:	20005280 	.word	0x20005280
     a18:	00004121 	.word	0x00004121
     a1c:	41002000 	.word	0x41002000
     a20:	00004045 	.word	0x00004045
     a24:	00006749 	.word	0x00006749
     a28:	00005b31 	.word	0x00005b31
     a2c:	e826d695 	.word	0xe826d695
     a30:	3e112e0b 	.word	0x3e112e0b
     a34:	00004ca9 	.word	0x00004ca9
     a38:	40240000 	.word	0x40240000
     a3c:	00006031 	.word	0x00006031
     a40:	3ff00000 	.word	0x3ff00000
     a44:	000052c9 	.word	0x000052c9
     a48:	0000665d 	.word	0x0000665d
     a4c:	000033bd 	.word	0x000033bd
     a50:	40080000 	.word	0x40080000
     a54:	000042f9 	.word	0x000042f9

00000a58 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a58:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a5a:	7e1a      	ldrb	r2, [r3, #24]
     a5c:	0792      	lsls	r2, r2, #30
     a5e:	d507      	bpl.n	a70 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a60:	2202      	movs	r2, #2
     a62:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a64:	8b5b      	ldrh	r3, [r3, #26]
     a66:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     a68:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     a6a:	17db      	asrs	r3, r3, #31
     a6c:	4018      	ands	r0, r3
}
     a6e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a70:	8b5a      	ldrh	r2, [r3, #26]
     a72:	0752      	lsls	r2, r2, #29
     a74:	d506      	bpl.n	a84 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a76:	6859      	ldr	r1, [r3, #4]
     a78:	22c0      	movs	r2, #192	; 0xc0
     a7a:	0292      	lsls	r2, r2, #10
     a7c:	430a      	orrs	r2, r1
     a7e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     a80:	2018      	movs	r0, #24
     a82:	e7f4      	b.n	a6e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     a84:	2000      	movs	r0, #0
     a86:	e7f2      	b.n	a6e <_i2c_master_address_response+0x16>

00000a88 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     a88:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a8a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     a8c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a8e:	2401      	movs	r4, #1
     a90:	2502      	movs	r5, #2
     a92:	7e11      	ldrb	r1, [r2, #24]
     a94:	4221      	tst	r1, r4
     a96:	d10b      	bne.n	ab0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     a98:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a9a:	4229      	tst	r1, r5
     a9c:	d106      	bne.n	aac <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     a9e:	3301      	adds	r3, #1
     aa0:	b29b      	uxth	r3, r3
     aa2:	8901      	ldrh	r1, [r0, #8]
     aa4:	4299      	cmp	r1, r3
     aa6:	d8f4      	bhi.n	a92 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     aa8:	2012      	movs	r0, #18
     aaa:	e002      	b.n	ab2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     aac:	2000      	movs	r0, #0
     aae:	e000      	b.n	ab2 <_i2c_master_wait_for_bus+0x2a>
     ab0:	2000      	movs	r0, #0
}
     ab2:	bd30      	pop	{r4, r5, pc}

00000ab4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     ab4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ab6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ab8:	6862      	ldr	r2, [r4, #4]
     aba:	2380      	movs	r3, #128	; 0x80
     abc:	02db      	lsls	r3, r3, #11
     abe:	4313      	orrs	r3, r2
     ac0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     ac2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     ac4:	4b02      	ldr	r3, [pc, #8]	; (ad0 <_i2c_master_send_hs_master_code+0x1c>)
     ac6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     ac8:	2301      	movs	r3, #1
     aca:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     acc:	bd10      	pop	{r4, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00000a89 	.word	0x00000a89

00000ad4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     ad4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ad6:	2207      	movs	r2, #7
     ad8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     ada:	421a      	tst	r2, r3
     adc:	d1fc      	bne.n	ad8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     ade:	4770      	bx	lr

00000ae0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ae4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     ae6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     ae8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     aea:	8b83      	ldrh	r3, [r0, #28]
     aec:	1aed      	subs	r5, r5, r3
     aee:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     af0:	8b83      	ldrh	r3, [r0, #28]
     af2:	3b01      	subs	r3, #1
     af4:	b29b      	uxth	r3, r3
     af6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     af8:	0113      	lsls	r3, r2, #4
     afa:	d51d      	bpl.n	b38 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     afc:	7ac3      	ldrb	r3, [r0, #11]
     afe:	2b00      	cmp	r3, #0
     b00:	d003      	beq.n	b0a <_i2c_master_read+0x2a>
     b02:	8b83      	ldrh	r3, [r0, #28]
     b04:	b29b      	uxth	r3, r3
     b06:	2b01      	cmp	r3, #1
     b08:	d010      	beq.n	b2c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     b0a:	8ba3      	ldrh	r3, [r4, #28]
     b0c:	b29b      	uxth	r3, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	d102      	bne.n	b18 <_i2c_master_read+0x38>
		if (module->send_stop) {
     b12:	7aa3      	ldrb	r3, [r4, #10]
     b14:	2b00      	cmp	r3, #0
     b16:	d11c      	bne.n	b52 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     b18:	0020      	movs	r0, r4
     b1a:	4b12      	ldr	r3, [pc, #72]	; (b64 <_i2c_master_read+0x84>)
     b1c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     b1e:	6a23      	ldr	r3, [r4, #32]
     b20:	195d      	adds	r5, r3, r5
     b22:	2328      	movs	r3, #40	; 0x28
     b24:	5cf3      	ldrb	r3, [r6, r3]
     b26:	b2db      	uxtb	r3, r3
     b28:	702b      	strb	r3, [r5, #0]
}
     b2a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b2c:	6872      	ldr	r2, [r6, #4]
     b2e:	2380      	movs	r3, #128	; 0x80
     b30:	02db      	lsls	r3, r3, #11
     b32:	4313      	orrs	r3, r2
     b34:	6073      	str	r3, [r6, #4]
     b36:	e7e8      	b.n	b0a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     b38:	7ac3      	ldrb	r3, [r0, #11]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d0e5      	beq.n	b0a <_i2c_master_read+0x2a>
     b3e:	8b83      	ldrh	r3, [r0, #28]
     b40:	b29b      	uxth	r3, r3
     b42:	2b00      	cmp	r3, #0
     b44:	d1e1      	bne.n	b0a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b46:	6872      	ldr	r2, [r6, #4]
     b48:	2380      	movs	r3, #128	; 0x80
     b4a:	02db      	lsls	r3, r3, #11
     b4c:	4313      	orrs	r3, r2
     b4e:	6073      	str	r3, [r6, #4]
     b50:	e7db      	b.n	b0a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     b52:	0020      	movs	r0, r4
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <_i2c_master_read+0x84>)
     b56:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b58:	6872      	ldr	r2, [r6, #4]
     b5a:	23c0      	movs	r3, #192	; 0xc0
     b5c:	029b      	lsls	r3, r3, #10
     b5e:	4313      	orrs	r3, r2
     b60:	6073      	str	r3, [r6, #4]
     b62:	e7d9      	b.n	b18 <_i2c_master_read+0x38>
     b64:	00000ad5 	.word	0x00000ad5

00000b68 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b6c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     b6e:	8b6b      	ldrh	r3, [r5, #26]
     b70:	075b      	lsls	r3, r3, #29
     b72:	d503      	bpl.n	b7c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     b74:	221e      	movs	r2, #30
     b76:	2325      	movs	r3, #37	; 0x25
     b78:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     b7a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     b7c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     b7e:	8b83      	ldrh	r3, [r0, #28]
     b80:	1af6      	subs	r6, r6, r3
     b82:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     b84:	8b83      	ldrh	r3, [r0, #28]
     b86:	3b01      	subs	r3, #1
     b88:	b29b      	uxth	r3, r3
     b8a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <_i2c_master_write+0x38>)
     b8e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     b90:	6a23      	ldr	r3, [r4, #32]
     b92:	199e      	adds	r6, r3, r6
     b94:	7833      	ldrb	r3, [r6, #0]
     b96:	b2db      	uxtb	r3, r3
     b98:	2228      	movs	r2, #40	; 0x28
     b9a:	54ab      	strb	r3, [r5, r2]
     b9c:	e7ed      	b.n	b7a <_i2c_master_write+0x12>
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00000ad5 	.word	0x00000ad5

00000ba4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ba4:	b570      	push	{r4, r5, r6, lr}
     ba6:	0005      	movs	r5, r0
     ba8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     baa:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     bac:	7a4b      	ldrb	r3, [r1, #9]
     bae:	2b00      	cmp	r3, #0
     bb0:	d11a      	bne.n	be8 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     bb2:	6873      	ldr	r3, [r6, #4]
     bb4:	4a13      	ldr	r2, [pc, #76]	; (c04 <_i2c_master_write_packet+0x60>)
     bb6:	4013      	ands	r3, r2
     bb8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     bba:	6863      	ldr	r3, [r4, #4]
     bbc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     bbe:	8863      	ldrh	r3, [r4, #2]
     bc0:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     bc2:	2200      	movs	r2, #0
     bc4:	2324      	movs	r3, #36	; 0x24
     bc6:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     bc8:	3205      	adds	r2, #5
     bca:	3301      	adds	r3, #1
     bcc:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     bce:	3b22      	subs	r3, #34	; 0x22
     bd0:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     bd2:	7a23      	ldrb	r3, [r4, #8]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d10b      	bne.n	bf0 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bd8:	8823      	ldrh	r3, [r4, #0]
     bda:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     bdc:	7a62      	ldrb	r2, [r4, #9]
     bde:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     be0:	4313      	orrs	r3, r2
     be2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     be4:	2000      	movs	r0, #0
     be6:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     be8:	7a89      	ldrb	r1, [r1, #10]
     bea:	4b07      	ldr	r3, [pc, #28]	; (c08 <_i2c_master_write_packet+0x64>)
     bec:	4798      	blx	r3
     bee:	e7e0      	b.n	bb2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bf0:	8823      	ldrh	r3, [r4, #0]
     bf2:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bf4:	7a62      	ldrb	r2, [r4, #9]
     bf6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bf8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bfa:	2280      	movs	r2, #128	; 0x80
     bfc:	0212      	lsls	r2, r2, #8
     bfe:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     c00:	6273      	str	r3, [r6, #36]	; 0x24
     c02:	e7ef      	b.n	be4 <_i2c_master_write_packet+0x40>
     c04:	fffbffff 	.word	0xfffbffff
     c08:	00000ab5 	.word	0x00000ab5

00000c0c <_i2c_master_read_packet>:
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	0005      	movs	r5, r0
     c10:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c12:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     c14:	684b      	ldr	r3, [r1, #4]
     c16:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     c18:	884b      	ldrh	r3, [r1, #2]
     c1a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     c1c:	2201      	movs	r2, #1
     c1e:	2324      	movs	r3, #36	; 0x24
     c20:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     c22:	3204      	adds	r2, #4
     c24:	3301      	adds	r3, #1
     c26:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c28:	6837      	ldr	r7, [r6, #0]
     c2a:	013f      	lsls	r7, r7, #4
     c2c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     c2e:	7a4b      	ldrb	r3, [r1, #9]
     c30:	2b00      	cmp	r3, #0
     c32:	d117      	bne.n	c64 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     c34:	2f00      	cmp	r7, #0
     c36:	d002      	beq.n	c3e <_i2c_master_read_packet+0x32>
     c38:	8863      	ldrh	r3, [r4, #2]
     c3a:	2b01      	cmp	r3, #1
     c3c:	d016      	beq.n	c6c <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c3e:	6873      	ldr	r3, [r6, #4]
     c40:	4a20      	ldr	r2, [pc, #128]	; (cc4 <_i2c_master_read_packet+0xb8>)
     c42:	4013      	ands	r3, r2
     c44:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     c46:	7a23      	ldrb	r3, [r4, #8]
     c48:	2b00      	cmp	r3, #0
     c4a:	d115      	bne.n	c78 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     c4c:	2303      	movs	r3, #3
     c4e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c50:	8823      	ldrh	r3, [r4, #0]
     c52:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c54:	7a62      	ldrb	r2, [r4, #9]
     c56:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c58:	4313      	orrs	r3, r2
     c5a:	2201      	movs	r2, #1
     c5c:	4313      	orrs	r3, r2
     c5e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     c60:	2000      	movs	r0, #0
}
     c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c64:	7a89      	ldrb	r1, [r1, #10]
     c66:	4b18      	ldr	r3, [pc, #96]	; (cc8 <_i2c_master_read_packet+0xbc>)
     c68:	4798      	blx	r3
     c6a:	e7e3      	b.n	c34 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c6c:	6872      	ldr	r2, [r6, #4]
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	02db      	lsls	r3, r3, #11
     c72:	4313      	orrs	r3, r2
     c74:	6073      	str	r3, [r6, #4]
     c76:	e7e6      	b.n	c46 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     c78:	8823      	ldrh	r3, [r4, #0]
     c7a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c7c:	7a62      	ldrb	r2, [r4, #9]
     c7e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c80:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c82:	2280      	movs	r2, #128	; 0x80
     c84:	0212      	lsls	r2, r2, #8
     c86:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     c88:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     c8a:	0028      	movs	r0, r5
     c8c:	4b0f      	ldr	r3, [pc, #60]	; (ccc <_i2c_master_read_packet+0xc0>)
     c8e:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c90:	6873      	ldr	r3, [r6, #4]
     c92:	4a0c      	ldr	r2, [pc, #48]	; (cc4 <_i2c_master_read_packet+0xb8>)
     c94:	4013      	ands	r3, r2
     c96:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     c98:	2800      	cmp	r0, #0
     c9a:	d1e2      	bne.n	c62 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     c9c:	0028      	movs	r0, r5
     c9e:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <_i2c_master_read_packet+0xc4>)
     ca0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     ca2:	2800      	cmp	r0, #0
     ca4:	d1dd      	bne.n	c62 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     ca6:	2303      	movs	r3, #3
     ca8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     caa:	8823      	ldrh	r3, [r4, #0]
     cac:	0a1b      	lsrs	r3, r3, #8
     cae:	2278      	movs	r2, #120	; 0x78
     cb0:	4313      	orrs	r3, r2
     cb2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     cb4:	7a62      	ldrb	r2, [r4, #9]
     cb6:	0392      	lsls	r2, r2, #14
     cb8:	2101      	movs	r1, #1
     cba:	430a      	orrs	r2, r1
     cbc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cbe:	6273      	str	r3, [r6, #36]	; 0x24
     cc0:	e7cf      	b.n	c62 <_i2c_master_read_packet+0x56>
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	fffbffff 	.word	0xfffbffff
     cc8:	00000ab5 	.word	0x00000ab5
     ccc:	00000a89 	.word	0x00000a89
     cd0:	00000a59 	.word	0x00000a59

00000cd4 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     cd4:	1c93      	adds	r3, r2, #2
     cd6:	009b      	lsls	r3, r3, #2
     cd8:	18c3      	adds	r3, r0, r3
     cda:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     cdc:	7e03      	ldrb	r3, [r0, #24]
     cde:	2101      	movs	r1, #1
     ce0:	4091      	lsls	r1, r2
     ce2:	430b      	orrs	r3, r1
     ce4:	b2db      	uxtb	r3, r3
     ce6:	7603      	strb	r3, [r0, #24]
}
     ce8:	4770      	bx	lr
	...

00000cec <i2c_master_read_packet_job>:
{
     cec:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     cee:	8b83      	ldrh	r3, [r0, #28]
     cf0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     cf2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     cf4:	2b00      	cmp	r3, #0
     cf6:	d001      	beq.n	cfc <i2c_master_read_packet_job+0x10>
}
     cf8:	0010      	movs	r0, r2
     cfa:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     cfc:	3301      	adds	r3, #1
     cfe:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     d00:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     d02:	4b02      	ldr	r3, [pc, #8]	; (d0c <i2c_master_read_packet_job+0x20>)
     d04:	4798      	blx	r3
     d06:	0002      	movs	r2, r0
     d08:	e7f6      	b.n	cf8 <i2c_master_read_packet_job+0xc>
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	00000c0d 	.word	0x00000c0d

00000d10 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d10:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     d12:	8b83      	ldrh	r3, [r0, #28]
     d14:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d16:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     d18:	2b00      	cmp	r3, #0
     d1a:	d001      	beq.n	d20 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     d1c:	0010      	movs	r0, r2
     d1e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     d20:	3301      	adds	r3, #1
     d22:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     d24:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     d26:	4b02      	ldr	r3, [pc, #8]	; (d30 <i2c_master_write_packet_job+0x20>)
     d28:	4798      	blx	r3
     d2a:	0002      	movs	r2, r0
     d2c:	e7f6      	b.n	d1c <i2c_master_write_packet_job+0xc>
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000ba5 	.word	0x00000ba5

00000d34 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     d34:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     d36:	0080      	lsls	r0, r0, #2
     d38:	4b75      	ldr	r3, [pc, #468]	; (f10 <_i2c_master_interrupt_handler+0x1dc>)
     d3a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d3c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d3e:	682b      	ldr	r3, [r5, #0]
     d40:	011b      	lsls	r3, r3, #4
     d42:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     d44:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     d46:	7e26      	ldrb	r6, [r4, #24]
     d48:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     d4a:	8b63      	ldrh	r3, [r4, #26]
     d4c:	b29b      	uxth	r3, r3
     d4e:	2b00      	cmp	r3, #0
     d50:	d103      	bne.n	d5a <_i2c_master_interrupt_handler+0x26>
     d52:	8ba3      	ldrh	r3, [r4, #28]
     d54:	b29b      	uxth	r3, r3
     d56:	2b00      	cmp	r3, #0
     d58:	d123      	bne.n	da2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d5a:	8b63      	ldrh	r3, [r4, #26]
     d5c:	b29b      	uxth	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	d008      	beq.n	d74 <_i2c_master_interrupt_handler+0x40>
     d62:	8ba3      	ldrh	r3, [r4, #28]
     d64:	b29b      	uxth	r3, r3
     d66:	2b00      	cmp	r3, #0
     d68:	d104      	bne.n	d74 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d6a:	3325      	adds	r3, #37	; 0x25
     d6c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d6e:	2b05      	cmp	r3, #5
     d70:	d100      	bne.n	d74 <_i2c_master_interrupt_handler+0x40>
     d72:	e06d      	b.n	e50 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d74:	8b63      	ldrh	r3, [r4, #26]
     d76:	b29b      	uxth	r3, r3
     d78:	2b00      	cmp	r3, #0
     d7a:	d024      	beq.n	dc6 <_i2c_master_interrupt_handler+0x92>
     d7c:	8ba3      	ldrh	r3, [r4, #28]
     d7e:	b29b      	uxth	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d020      	beq.n	dc6 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d84:	8b6b      	ldrh	r3, [r5, #26]
     d86:	069b      	lsls	r3, r3, #26
     d88:	d500      	bpl.n	d8c <_i2c_master_interrupt_handler+0x58>
     d8a:	e081      	b.n	e90 <_i2c_master_interrupt_handler+0x15c>
     d8c:	2a00      	cmp	r2, #0
     d8e:	d004      	beq.n	d9a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d90:	8ba3      	ldrh	r3, [r4, #28]
     d92:	b29b      	uxth	r3, r3
     d94:	2b01      	cmp	r3, #1
     d96:	d100      	bne.n	d9a <_i2c_master_interrupt_handler+0x66>
     d98:	e07a      	b.n	e90 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d9a:	2241      	movs	r2, #65	; 0x41
     d9c:	2325      	movs	r3, #37	; 0x25
     d9e:	54e2      	strb	r2, [r4, r3]
     da0:	e011      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     da2:	7e2b      	ldrb	r3, [r5, #24]
     da4:	07db      	lsls	r3, r3, #31
     da6:	d507      	bpl.n	db8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     da8:	2301      	movs	r3, #1
     daa:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     dac:	8b6b      	ldrh	r3, [r5, #26]
     dae:	079b      	lsls	r3, r3, #30
     db0:	d52e      	bpl.n	e10 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     db2:	2241      	movs	r2, #65	; 0x41
     db4:	2325      	movs	r3, #37	; 0x25
     db6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     db8:	8ba3      	ldrh	r3, [r4, #28]
     dba:	b29b      	uxth	r3, r3
     dbc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     dbe:	2325      	movs	r3, #37	; 0x25
     dc0:	5ce3      	ldrb	r3, [r4, r3]
     dc2:	2b05      	cmp	r3, #5
     dc4:	d038      	beq.n	e38 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dc6:	8b63      	ldrh	r3, [r4, #26]
     dc8:	b29b      	uxth	r3, r3
     dca:	2b00      	cmp	r3, #0
     dcc:	d007      	beq.n	dde <_i2c_master_interrupt_handler+0xaa>
     dce:	8ba3      	ldrh	r3, [r4, #28]
     dd0:	b29b      	uxth	r3, r3
     dd2:	2b00      	cmp	r3, #0
     dd4:	d103      	bne.n	dde <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     dd6:	3325      	adds	r3, #37	; 0x25
     dd8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dda:	2b05      	cmp	r3, #5
     ddc:	d064      	beq.n	ea8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     dde:	2325      	movs	r3, #37	; 0x25
     de0:	5ce3      	ldrb	r3, [r4, r3]
     de2:	2b05      	cmp	r3, #5
     de4:	d013      	beq.n	e0e <_i2c_master_interrupt_handler+0xda>
     de6:	2325      	movs	r3, #37	; 0x25
     de8:	5ce3      	ldrb	r3, [r4, r3]
     dea:	2b00      	cmp	r3, #0
     dec:	d00f      	beq.n	e0e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dee:	2303      	movs	r3, #3
     df0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     df2:	2300      	movs	r3, #0
     df4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     df6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     df8:	3325      	adds	r3, #37	; 0x25
     dfa:	5ce3      	ldrb	r3, [r4, r3]
     dfc:	2b41      	cmp	r3, #65	; 0x41
     dfe:	d003      	beq.n	e08 <_i2c_master_interrupt_handler+0xd4>
     e00:	7aa3      	ldrb	r3, [r4, #10]
     e02:	2b00      	cmp	r3, #0
     e04:	d000      	beq.n	e08 <_i2c_master_interrupt_handler+0xd4>
     e06:	e075      	b.n	ef4 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e08:	0773      	lsls	r3, r6, #29
     e0a:	d500      	bpl.n	e0e <_i2c_master_interrupt_handler+0xda>
     e0c:	e07b      	b.n	f06 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     e0e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e10:	8b6b      	ldrh	r3, [r5, #26]
     e12:	075b      	lsls	r3, r3, #29
     e14:	d5d0      	bpl.n	db8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e16:	2218      	movs	r2, #24
     e18:	2325      	movs	r3, #37	; 0x25
     e1a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     e1c:	2300      	movs	r3, #0
     e1e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e20:	7aa3      	ldrb	r3, [r4, #10]
     e22:	2b00      	cmp	r3, #0
     e24:	d0c8      	beq.n	db8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     e26:	0020      	movs	r0, r4
     e28:	4b3a      	ldr	r3, [pc, #232]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     e2a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e2c:	686a      	ldr	r2, [r5, #4]
     e2e:	23c0      	movs	r3, #192	; 0xc0
     e30:	029b      	lsls	r3, r3, #10
     e32:	4313      	orrs	r3, r2
     e34:	606b      	str	r3, [r5, #4]
     e36:	e7bf      	b.n	db8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e38:	331f      	adds	r3, #31
     e3a:	5ce3      	ldrb	r3, [r4, r3]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d003      	beq.n	e48 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     e40:	0020      	movs	r0, r4
     e42:	4b35      	ldr	r3, [pc, #212]	; (f18 <_i2c_master_interrupt_handler+0x1e4>)
     e44:	4798      	blx	r3
     e46:	e7be      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     e48:	0020      	movs	r0, r4
     e4a:	4b34      	ldr	r3, [pc, #208]	; (f1c <_i2c_master_interrupt_handler+0x1e8>)
     e4c:	4798      	blx	r3
     e4e:	e7ba      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e50:	331f      	adds	r3, #31
     e52:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e54:	2b00      	cmp	r3, #0
     e56:	d000      	beq.n	e5a <_i2c_master_interrupt_handler+0x126>
     e58:	e78c      	b.n	d74 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e5a:	3303      	adds	r3, #3
     e5c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e5e:	2300      	movs	r3, #0
     e60:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e62:	3325      	adds	r3, #37	; 0x25
     e64:	2200      	movs	r2, #0
     e66:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e68:	7aa3      	ldrb	r3, [r4, #10]
     e6a:	2b00      	cmp	r3, #0
     e6c:	d107      	bne.n	e7e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e6e:	2301      	movs	r3, #1
     e70:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e72:	07f3      	lsls	r3, r6, #31
     e74:	d5a7      	bpl.n	dc6 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e76:	68e3      	ldr	r3, [r4, #12]
     e78:	0020      	movs	r0, r4
     e7a:	4798      	blx	r3
     e7c:	e7a3      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e7e:	0020      	movs	r0, r4
     e80:	4b24      	ldr	r3, [pc, #144]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     e82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e84:	686a      	ldr	r2, [r5, #4]
     e86:	23c0      	movs	r3, #192	; 0xc0
     e88:	029b      	lsls	r3, r3, #10
     e8a:	4313      	orrs	r3, r2
     e8c:	606b      	str	r3, [r5, #4]
     e8e:	e7f0      	b.n	e72 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e90:	2324      	movs	r3, #36	; 0x24
     e92:	5ce3      	ldrb	r3, [r4, r3]
     e94:	2b00      	cmp	r3, #0
     e96:	d103      	bne.n	ea0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e98:	0020      	movs	r0, r4
     e9a:	4b20      	ldr	r3, [pc, #128]	; (f1c <_i2c_master_interrupt_handler+0x1e8>)
     e9c:	4798      	blx	r3
     e9e:	e792      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     ea0:	0020      	movs	r0, r4
     ea2:	4b1d      	ldr	r3, [pc, #116]	; (f18 <_i2c_master_interrupt_handler+0x1e4>)
     ea4:	4798      	blx	r3
     ea6:	e78e      	b.n	dc6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ea8:	331f      	adds	r3, #31
     eaa:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     eac:	2b01      	cmp	r3, #1
     eae:	d196      	bne.n	dde <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     eb0:	7e2b      	ldrb	r3, [r5, #24]
     eb2:	079b      	lsls	r3, r3, #30
     eb4:	d501      	bpl.n	eba <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     eb6:	2302      	movs	r3, #2
     eb8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     eba:	2303      	movs	r3, #3
     ebc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     ebe:	2300      	movs	r3, #0
     ec0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ec2:	3325      	adds	r3, #37	; 0x25
     ec4:	2200      	movs	r2, #0
     ec6:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ec8:	07b3      	lsls	r3, r6, #30
     eca:	d503      	bpl.n	ed4 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ecc:	2324      	movs	r3, #36	; 0x24
     ece:	5ce3      	ldrb	r3, [r4, r3]
     ed0:	2b01      	cmp	r3, #1
     ed2:	d00b      	beq.n	eec <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ed4:	07f3      	lsls	r3, r6, #31
     ed6:	d400      	bmi.n	eda <_i2c_master_interrupt_handler+0x1a6>
     ed8:	e781      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     eda:	2324      	movs	r3, #36	; 0x24
     edc:	5ce3      	ldrb	r3, [r4, r3]
     ede:	2b00      	cmp	r3, #0
     ee0:	d000      	beq.n	ee4 <_i2c_master_interrupt_handler+0x1b0>
     ee2:	e77c      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ee4:	68e3      	ldr	r3, [r4, #12]
     ee6:	0020      	movs	r0, r4
     ee8:	4798      	blx	r3
     eea:	e778      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     eec:	6923      	ldr	r3, [r4, #16]
     eee:	0020      	movs	r0, r4
     ef0:	4798      	blx	r3
     ef2:	e774      	b.n	dde <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ef4:	0020      	movs	r0, r4
     ef6:	4b07      	ldr	r3, [pc, #28]	; (f14 <_i2c_master_interrupt_handler+0x1e0>)
     ef8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     efa:	686a      	ldr	r2, [r5, #4]
     efc:	23e0      	movs	r3, #224	; 0xe0
     efe:	02db      	lsls	r3, r3, #11
     f00:	4313      	orrs	r3, r2
     f02:	606b      	str	r3, [r5, #4]
     f04:	e780      	b.n	e08 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     f06:	6963      	ldr	r3, [r4, #20]
     f08:	0020      	movs	r0, r4
     f0a:	4798      	blx	r3
}
     f0c:	e77f      	b.n	e0e <_i2c_master_interrupt_handler+0xda>
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	20005280 	.word	0x20005280
     f14:	00000ad5 	.word	0x00000ad5
     f18:	00000ae1 	.word	0x00000ae1
     f1c:	00000b69 	.word	0x00000b69

00000f20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
     f20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
     f22:	2300      	movs	r3, #0
     f24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <prvTaskExitError+0x20>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	3301      	adds	r3, #1
     f2c:	d001      	beq.n	f32 <prvTaskExitError+0x12>
     f2e:	b672      	cpsid	i
     f30:	e7fe      	b.n	f30 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
     f32:	b672      	cpsid	i
	while( ulDummy == 0 )
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	2b00      	cmp	r3, #0
     f38:	d0fc      	beq.n	f34 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
     f3a:	b002      	add	sp, #8
     f3c:	4770      	bx	lr
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	20000000 	.word	0x20000000
	...

00000f50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     f50:	4a0b      	ldr	r2, [pc, #44]	; (f80 <pxCurrentTCBConst2>)
     f52:	6813      	ldr	r3, [r2, #0]
     f54:	6818      	ldr	r0, [r3, #0]
     f56:	3020      	adds	r0, #32
     f58:	f380 8809 	msr	PSP, r0
     f5c:	2002      	movs	r0, #2
     f5e:	f380 8814 	msr	CONTROL, r0
     f62:	f3bf 8f6f 	isb	sy
     f66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     f68:	46ae      	mov	lr, r5
     f6a:	bc08      	pop	{r3}
     f6c:	bc04      	pop	{r2}
     f6e:	b662      	cpsie	i
     f70:	4718      	bx	r3
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	46c0      	nop			; (mov r8, r8)
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	46c0      	nop			; (mov r8, r8)
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	46c0      	nop			; (mov r8, r8)
     f7e:	46c0      	nop			; (mov r8, r8)

00000f80 <pxCurrentTCBConst2>:
     f80:	200050b8 	.word	0x200050b8

00000f84 <pxPortInitialiseStack>:
{
     f84:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     f86:	1f03      	subs	r3, r0, #4
     f88:	2480      	movs	r4, #128	; 0x80
     f8a:	0464      	lsls	r4, r4, #17
     f8c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     f8e:	3b04      	subs	r3, #4
     f90:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     f92:	3b04      	subs	r3, #4
     f94:	4902      	ldr	r1, [pc, #8]	; (fa0 <pxPortInitialiseStack+0x1c>)
     f96:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     f98:	3b14      	subs	r3, #20
     f9a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     f9c:	3840      	subs	r0, #64	; 0x40
}
     f9e:	bd10      	pop	{r4, pc}
     fa0:	00000f21 	.word	0x00000f21

00000fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     fa4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <xPortStartScheduler+0x40>)
     fa8:	6819      	ldr	r1, [r3, #0]
     faa:	22ff      	movs	r2, #255	; 0xff
     fac:	0412      	lsls	r2, r2, #16
     fae:	430a      	orrs	r2, r1
     fb0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     fb2:	6819      	ldr	r1, [r3, #0]
     fb4:	22ff      	movs	r2, #255	; 0xff
     fb6:	0612      	lsls	r2, r2, #24
     fb8:	430a      	orrs	r2, r1
     fba:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
     fbc:	4a0a      	ldr	r2, [pc, #40]	; (fe8 <xPortStartScheduler+0x44>)
     fbe:	2300      	movs	r3, #0
     fc0:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
     fc2:	490a      	ldr	r1, [pc, #40]	; (fec <xPortStartScheduler+0x48>)
     fc4:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     fc6:	480a      	ldr	r0, [pc, #40]	; (ff0 <xPortStartScheduler+0x4c>)
     fc8:	490a      	ldr	r1, [pc, #40]	; (ff4 <xPortStartScheduler+0x50>)
     fca:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     fcc:	2107      	movs	r1, #7
     fce:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
     fd0:	4a09      	ldr	r2, [pc, #36]	; (ff8 <xPortStartScheduler+0x54>)
     fd2:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
     fd4:	4b09      	ldr	r3, [pc, #36]	; (ffc <xPortStartScheduler+0x58>)
     fd6:	4798      	blx	r3
	vTaskSwitchContext();
     fd8:	4b09      	ldr	r3, [pc, #36]	; (1000 <xPortStartScheduler+0x5c>)
     fda:	4798      	blx	r3
	prvTaskExitError();
     fdc:	4b09      	ldr	r3, [pc, #36]	; (1004 <xPortStartScheduler+0x60>)
     fde:	4798      	blx	r3
}
     fe0:	2000      	movs	r0, #0
     fe2:	bd10      	pop	{r4, pc}
     fe4:	e000ed20 	.word	0xe000ed20
     fe8:	e000e010 	.word	0xe000e010
     fec:	e000e018 	.word	0xe000e018
     ff0:	0000bb7f 	.word	0x0000bb7f
     ff4:	e000e014 	.word	0xe000e014
     ff8:	20000000 	.word	0x20000000
     ffc:	00000f51 	.word	0x00000f51
    1000:	00002b35 	.word	0x00002b35
    1004:	00000f21 	.word	0x00000f21

00001008 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1008:	2280      	movs	r2, #128	; 0x80
    100a:	0552      	lsls	r2, r2, #21
    100c:	4b03      	ldr	r3, [pc, #12]	; (101c <vPortYield+0x14>)
    100e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    1010:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1014:	f3bf 8f6f 	isb	sy
}
    1018:	4770      	bx	lr
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	e000ed04 	.word	0xe000ed04

00001020 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    1020:	b672      	cpsid	i
    uxCriticalNesting++;
    1022:	4a04      	ldr	r2, [pc, #16]	; (1034 <vPortEnterCritical+0x14>)
    1024:	6813      	ldr	r3, [r2, #0]
    1026:	3301      	adds	r3, #1
    1028:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    102a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    102e:	f3bf 8f6f 	isb	sy
}
    1032:	4770      	bx	lr
    1034:	20000000 	.word	0x20000000

00001038 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    1038:	4b06      	ldr	r3, [pc, #24]	; (1054 <vPortExitCritical+0x1c>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	2b00      	cmp	r3, #0
    103e:	d101      	bne.n	1044 <vPortExitCritical+0xc>
    1040:	b672      	cpsid	i
    1042:	e7fe      	b.n	1042 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1044:	3b01      	subs	r3, #1
    1046:	4a03      	ldr	r2, [pc, #12]	; (1054 <vPortExitCritical+0x1c>)
    1048:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    104a:	2b00      	cmp	r3, #0
    104c:	d100      	bne.n	1050 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    104e:	b662      	cpsie	i
}
    1050:	4770      	bx	lr
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	20000000 	.word	0x20000000

00001058 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    1058:	f3ef 8010 	mrs	r0, PRIMASK
    105c:	b672      	cpsid	i
    105e:	4770      	bx	lr

00001060 <vClearInterruptMaskFromISR>:
	__asm volatile(
    1060:	f380 8810 	msr	PRIMASK, r0
    1064:	4770      	bx	lr
	...

00001068 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1068:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    106a:	4b12      	ldr	r3, [pc, #72]	; (10b4 <prvInsertBlockIntoFreeList+0x4c>)
    106c:	681a      	ldr	r2, [r3, #0]
    106e:	4282      	cmp	r2, r0
    1070:	d319      	bcc.n	10a6 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1072:	685c      	ldr	r4, [r3, #4]
    1074:	1919      	adds	r1, r3, r4
    1076:	4288      	cmp	r0, r1
    1078:	d103      	bne.n	1082 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    107a:	6841      	ldr	r1, [r0, #4]
    107c:	1909      	adds	r1, r1, r4
    107e:	6059      	str	r1, [r3, #4]
    1080:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1082:	6841      	ldr	r1, [r0, #4]
    1084:	1844      	adds	r4, r0, r1
    1086:	42a2      	cmp	r2, r4
    1088:	d111      	bne.n	10ae <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    108a:	4c0b      	ldr	r4, [pc, #44]	; (10b8 <prvInsertBlockIntoFreeList+0x50>)
    108c:	6824      	ldr	r4, [r4, #0]
    108e:	42a2      	cmp	r2, r4
    1090:	d00b      	beq.n	10aa <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1092:	6852      	ldr	r2, [r2, #4]
    1094:	1852      	adds	r2, r2, r1
    1096:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1098:	681a      	ldr	r2, [r3, #0]
    109a:	6812      	ldr	r2, [r2, #0]
    109c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    109e:	4298      	cmp	r0, r3
    10a0:	d000      	beq.n	10a4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    10a2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    10a4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    10a6:	0013      	movs	r3, r2
    10a8:	e7e0      	b.n	106c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    10aa:	6002      	str	r2, [r0, #0]
    10ac:	e7f7      	b.n	109e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    10ae:	6002      	str	r2, [r0, #0]
    10b0:	e7f5      	b.n	109e <prvInsertBlockIntoFreeList+0x36>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	20004e5c 	.word	0x20004e5c
    10b8:	2000002c 	.word	0x2000002c

000010bc <pvPortMalloc>:
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10be:	0004      	movs	r4, r0
	vTaskSuspendAll();
    10c0:	4b3e      	ldr	r3, [pc, #248]	; (11bc <pvPortMalloc+0x100>)
    10c2:	4798      	blx	r3
		if( pxEnd == NULL )
    10c4:	4b3e      	ldr	r3, [pc, #248]	; (11c0 <pvPortMalloc+0x104>)
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d015      	beq.n	10f8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10cc:	4b3d      	ldr	r3, [pc, #244]	; (11c4 <pvPortMalloc+0x108>)
    10ce:	681f      	ldr	r7, [r3, #0]
    10d0:	423c      	tst	r4, r7
    10d2:	d168      	bne.n	11a6 <pvPortMalloc+0xea>
			if( xWantedSize > 0 )
    10d4:	2c00      	cmp	r4, #0
    10d6:	d069      	beq.n	11ac <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
    10d8:	0023      	movs	r3, r4
    10da:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    10dc:	075a      	lsls	r2, r3, #29
    10de:	d002      	beq.n	10e6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    10e0:	2207      	movs	r2, #7
    10e2:	4393      	bics	r3, r2
    10e4:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10e6:	2b00      	cmp	r3, #0
    10e8:	d05d      	beq.n	11a6 <pvPortMalloc+0xea>
    10ea:	4a37      	ldr	r2, [pc, #220]	; (11c8 <pvPortMalloc+0x10c>)
    10ec:	6816      	ldr	r6, [r2, #0]
    10ee:	42b3      	cmp	r3, r6
    10f0:	d859      	bhi.n	11a6 <pvPortMalloc+0xea>
				pxBlock = xStart.pxNextFreeBlock;
    10f2:	4a36      	ldr	r2, [pc, #216]	; (11cc <pvPortMalloc+0x110>)
    10f4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10f6:	e025      	b.n	1144 <pvPortMalloc+0x88>
	uxAddress = ( size_t ) ucHeap;
    10f8:	4a35      	ldr	r2, [pc, #212]	; (11d0 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    10fa:	0753      	lsls	r3, r2, #29
    10fc:	d01e      	beq.n	113c <pvPortMalloc+0x80>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    10fe:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    1100:	2307      	movs	r3, #7
    1102:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    1104:	4b33      	ldr	r3, [pc, #204]	; (11d4 <pvPortMalloc+0x118>)
    1106:	18d3      	adds	r3, r2, r3
    1108:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    110a:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    110c:	482f      	ldr	r0, [pc, #188]	; (11cc <pvPortMalloc+0x110>)
    110e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
    1110:	2100      	movs	r1, #0
    1112:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    1114:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
    1116:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    1118:	2007      	movs	r0, #7
    111a:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
    111c:	4828      	ldr	r0, [pc, #160]	; (11c0 <pvPortMalloc+0x104>)
    111e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
    1120:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    1122:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1124:	1a99      	subs	r1, r3, r2
    1126:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1128:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112a:	4b2b      	ldr	r3, [pc, #172]	; (11d8 <pvPortMalloc+0x11c>)
    112c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112e:	4b26      	ldr	r3, [pc, #152]	; (11c8 <pvPortMalloc+0x10c>)
    1130:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1132:	2280      	movs	r2, #128	; 0x80
    1134:	0612      	lsls	r2, r2, #24
    1136:	4b23      	ldr	r3, [pc, #140]	; (11c4 <pvPortMalloc+0x108>)
    1138:	601a      	str	r2, [r3, #0]
    113a:	e7c7      	b.n	10cc <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    113c:	4b25      	ldr	r3, [pc, #148]	; (11d4 <pvPortMalloc+0x118>)
    113e:	e7e5      	b.n	110c <pvPortMalloc+0x50>
    1140:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
    1142:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1144:	6861      	ldr	r1, [r4, #4]
    1146:	428b      	cmp	r3, r1
    1148:	d902      	bls.n	1150 <pvPortMalloc+0x94>
    114a:	6821      	ldr	r1, [r4, #0]
    114c:	2900      	cmp	r1, #0
    114e:	d1f7      	bne.n	1140 <pvPortMalloc+0x84>
				if( pxBlock != pxEnd )
    1150:	491b      	ldr	r1, [pc, #108]	; (11c0 <pvPortMalloc+0x104>)
    1152:	6809      	ldr	r1, [r1, #0]
    1154:	428c      	cmp	r4, r1
    1156:	d026      	beq.n	11a6 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1158:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    115a:	6821      	ldr	r1, [r4, #0]
    115c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    115e:	6862      	ldr	r2, [r4, #4]
    1160:	1ad2      	subs	r2, r2, r3
    1162:	2a10      	cmp	r2, #16
    1164:	d908      	bls.n	1178 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1166:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    1168:	0741      	lsls	r1, r0, #29
    116a:	d001      	beq.n	1170 <pvPortMalloc+0xb4>
    116c:	b672      	cpsid	i
    116e:	e7fe      	b.n	116e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1170:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    1172:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    1174:	4b19      	ldr	r3, [pc, #100]	; (11dc <pvPortMalloc+0x120>)
    1176:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1178:	6862      	ldr	r2, [r4, #4]
    117a:	1ab6      	subs	r6, r6, r2
    117c:	4912      	ldr	r1, [pc, #72]	; (11c8 <pvPortMalloc+0x10c>)
    117e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1180:	4915      	ldr	r1, [pc, #84]	; (11d8 <pvPortMalloc+0x11c>)
    1182:	6809      	ldr	r1, [r1, #0]
    1184:	428e      	cmp	r6, r1
    1186:	d201      	bcs.n	118c <pvPortMalloc+0xd0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1188:	4913      	ldr	r1, [pc, #76]	; (11d8 <pvPortMalloc+0x11c>)
    118a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    118c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    118e:	4317      	orrs	r7, r2
    1190:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
    1192:	2300      	movs	r3, #0
    1194:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
    1196:	4b12      	ldr	r3, [pc, #72]	; (11e0 <pvPortMalloc+0x124>)
    1198:	4798      	blx	r3
		if( pvReturn == NULL )
    119a:	2d00      	cmp	r5, #0
    119c:	d008      	beq.n	11b0 <pvPortMalloc+0xf4>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    119e:	076b      	lsls	r3, r5, #29
    11a0:	d009      	beq.n	11b6 <pvPortMalloc+0xfa>
    11a2:	b672      	cpsid	i
    11a4:	e7fe      	b.n	11a4 <pvPortMalloc+0xe8>
	( void ) xTaskResumeAll();
    11a6:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <pvPortMalloc+0x124>)
    11a8:	4798      	blx	r3
    11aa:	e001      	b.n	11b0 <pvPortMalloc+0xf4>
    11ac:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <pvPortMalloc+0x124>)
    11ae:	4798      	blx	r3
			vApplicationMallocFailedHook();
    11b0:	4b0c      	ldr	r3, [pc, #48]	; (11e4 <pvPortMalloc+0x128>)
    11b2:	4798      	blx	r3
    11b4:	2500      	movs	r5, #0
}
    11b6:	0028      	movs	r0, r5
    11b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	00002825 	.word	0x00002825
    11c0:	2000002c 	.word	0x2000002c
    11c4:	20004e50 	.word	0x20004e50
    11c8:	20004e54 	.word	0x20004e54
    11cc:	20004e5c 	.word	0x20004e5c
    11d0:	20000030 	.word	0x20000030
    11d4:	00004e20 	.word	0x00004e20
    11d8:	20004e58 	.word	0x20004e58
    11dc:	00001069 	.word	0x00001069
    11e0:	00002979 	.word	0x00002979
    11e4:	000042e1 	.word	0x000042e1

000011e8 <vPortFree>:
{
    11e8:	b510      	push	{r4, lr}
	if( pv != NULL )
    11ea:	2800      	cmp	r0, #0
    11ec:	d020      	beq.n	1230 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    11ee:	0003      	movs	r3, r0
    11f0:	3b08      	subs	r3, #8
    11f2:	685b      	ldr	r3, [r3, #4]
    11f4:	4a0f      	ldr	r2, [pc, #60]	; (1234 <vPortFree+0x4c>)
    11f6:	6812      	ldr	r2, [r2, #0]
    11f8:	421a      	tst	r2, r3
    11fa:	d101      	bne.n	1200 <vPortFree+0x18>
    11fc:	b672      	cpsid	i
    11fe:	e7fe      	b.n	11fe <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    1200:	0001      	movs	r1, r0
    1202:	3908      	subs	r1, #8
    1204:	6809      	ldr	r1, [r1, #0]
    1206:	2900      	cmp	r1, #0
    1208:	d001      	beq.n	120e <vPortFree+0x26>
    120a:	b672      	cpsid	i
    120c:	e7fe      	b.n	120c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    120e:	3808      	subs	r0, #8
    1210:	0004      	movs	r4, r0
    1212:	4393      	bics	r3, r2
    1214:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
    1216:	4b08      	ldr	r3, [pc, #32]	; (1238 <vPortFree+0x50>)
    1218:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    121a:	4a08      	ldr	r2, [pc, #32]	; (123c <vPortFree+0x54>)
    121c:	6863      	ldr	r3, [r4, #4]
    121e:	6811      	ldr	r1, [r2, #0]
    1220:	468c      	mov	ip, r1
    1222:	4463      	add	r3, ip
    1224:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1226:	0020      	movs	r0, r4
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <vPortFree+0x58>)
    122a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    122c:	4b05      	ldr	r3, [pc, #20]	; (1244 <vPortFree+0x5c>)
    122e:	4798      	blx	r3
}
    1230:	bd10      	pop	{r4, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	20004e50 	.word	0x20004e50
    1238:	00002825 	.word	0x00002825
    123c:	20004e54 	.word	0x20004e54
    1240:	00001069 	.word	0x00001069
    1244:	00002979 	.word	0x00002979

00001248 <adc_cb>:
 static volatile uint16_t potentiometer_meas_raw;
 static volatile uint16_t motor_temp_meas_raw;
 static volatile uint16_t flow_meas_raw;

 static void adc_cb(struct adc_module *const module)
 {
    1248:	b510      	push	{r4, lr}
	if(adc_get_job_status(module, ADC_JOB_READ_BUFFER) == STATUS_OK)
    124a:	2100      	movs	r1, #0
    124c:	4b10      	ldr	r3, [pc, #64]	; (1290 <adc_cb+0x48>)
    124e:	4798      	blx	r3
    1250:	2800      	cmp	r0, #0
    1252:	d116      	bne.n	1282 <adc_cb+0x3a>
	{
		// Motor first
		memcpy(&motor_temp_meas_raw, &adc_buffer[0], 2);
    1254:	4b0f      	ldr	r3, [pc, #60]	; (1294 <adc_cb+0x4c>)
    1256:	881a      	ldrh	r2, [r3, #0]
    1258:	b292      	uxth	r2, r2
    125a:	490f      	ldr	r1, [pc, #60]	; (1298 <adc_cb+0x50>)
    125c:	800a      	strh	r2, [r1, #0]
		// Control potentiometer
		memcpy(&potentiometer_meas_raw, &adc_buffer[2], 2);
    125e:	889a      	ldrh	r2, [r3, #4]
    1260:	b292      	uxth	r2, r2
    1262:	490e      	ldr	r1, [pc, #56]	; (129c <adc_cb+0x54>)
    1264:	800a      	strh	r2, [r1, #0]
		// Three pressure sensors in a raw
		// TODO be sure indexing is correct
		memcpy(&pressure_raw_int[0], &adc_buffer[4], 2);
    1266:	8919      	ldrh	r1, [r3, #8]
    1268:	b289      	uxth	r1, r1
    126a:	4a0d      	ldr	r2, [pc, #52]	; (12a0 <adc_cb+0x58>)
    126c:	8011      	strh	r1, [r2, #0]
		memcpy(&pressure_raw_int[1], &adc_buffer[6], 2);
    126e:	8999      	ldrh	r1, [r3, #12]
    1270:	b289      	uxth	r1, r1
    1272:	8051      	strh	r1, [r2, #2]
		memcpy(&pressure_raw_int[2], &adc_buffer[8], 2);
    1274:	8a19      	ldrh	r1, [r3, #16]
    1276:	b289      	uxth	r1, r1
    1278:	8091      	strh	r1, [r2, #4]
		// Flow sensor at ain[10]
		memcpy(&flow_meas_raw, &adc_buffer[16], 2);
    127a:	8c1b      	ldrh	r3, [r3, #32]
    127c:	b29b      	uxth	r3, r3
    127e:	4a09      	ldr	r2, [pc, #36]	; (12a4 <adc_cb+0x5c>)
    1280:	8013      	strh	r3, [r2, #0]
	}
	// Trigger new measurement
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    1282:	2212      	movs	r2, #18
    1284:	4903      	ldr	r1, [pc, #12]	; (1294 <adc_cb+0x4c>)
    1286:	4808      	ldr	r0, [pc, #32]	; (12a8 <adc_cb+0x60>)
    1288:	4b08      	ldr	r3, [pc, #32]	; (12ac <adc_cb+0x64>)
    128a:	4798      	blx	r3
 }
    128c:	bd10      	pop	{r4, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	000006a9 	.word	0x000006a9
    1294:	20004e64 	.word	0x20004e64
    1298:	20004eaa 	.word	0x20004eaa
    129c:	20004eac 	.word	0x20004eac
    12a0:	20004eb0 	.word	0x20004eb0
    12a4:	20004ea8 	.word	0x20004ea8
    12a8:	20004e88 	.word	0x20004e88
    12ac:	0000065d 	.word	0x0000065d

000012b0 <adc_interface_init>:

 /*
 *	\brief Sets up ADC interface
 */
 void adc_interface_init(void)
 {
    12b0:	b510      	push	{r4, lr}
    12b2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config;

	adc_module_instance.reference = ADC_REFERENCE_AREFA; // 3.3V
    12b4:	4c22      	ldr	r4, [pc, #136]	; (1340 <adc_interface_init+0x90>)
    12b6:	2303      	movs	r3, #3
    12b8:	7123      	strb	r3, [r4, #4]

	adc_get_config_defaults(&config);
    12ba:	4668      	mov	r0, sp
    12bc:	4b21      	ldr	r3, [pc, #132]	; (1344 <adc_interface_init+0x94>)
    12be:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN2;
    12c0:	2202      	movs	r2, #2
    12c2:	466b      	mov	r3, sp
    12c4:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    12c6:	23c0      	movs	r3, #192	; 0xc0
    12c8:	015b      	lsls	r3, r3, #5
    12ca:	4669      	mov	r1, sp
    12cc:	81cb      	strh	r3, [r1, #14]
	config.differential_mode = false;
    12ce:	2300      	movs	r3, #0
    12d0:	74cb      	strb	r3, [r1, #19]
	config.clock_source = GCLK_GENERATOR_1; // 8Mhz clock TODO is this fast enough?
    12d2:	2101      	movs	r1, #1
    12d4:	4668      	mov	r0, sp
    12d6:	7001      	strb	r1, [r0, #0]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    12d8:	8043      	strh	r3, [r0, #2]
	config.gain_factor = ADC_GAIN_FACTOR_1X;
    12da:	9302      	str	r3, [sp, #8]
	config.resolution = ADC_RESOLUTION_12BIT;
    12dc:	7103      	strb	r3, [r0, #4]

	// Scan from 2 through 10
	config.pin_scan.offset_start_scan = 2;
    12de:	232b      	movs	r3, #43	; 0x2b
    12e0:	54c2      	strb	r2, [r0, r3]
	config.pin_scan.inputs_to_scan = 9;
    12e2:	3207      	adds	r2, #7
    12e4:	3301      	adds	r3, #1
    12e6:	54c2      	strb	r2, [r0, r3]

	adc_init(&adc_module_instance, ADC, &config);
    12e8:	466a      	mov	r2, sp
    12ea:	4917      	ldr	r1, [pc, #92]	; (1348 <adc_interface_init+0x98>)
    12ec:	0020      	movs	r0, r4
    12ee:	4b17      	ldr	r3, [pc, #92]	; (134c <adc_interface_init+0x9c>)
    12f0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    12f2:	6822      	ldr	r2, [r4, #0]
    12f4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12f6:	b25b      	sxtb	r3, r3
    12f8:	2b00      	cmp	r3, #0
    12fa:	dbfb      	blt.n	12f4 <adc_interface_init+0x44>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12fc:	2180      	movs	r1, #128	; 0x80
    12fe:	0409      	lsls	r1, r1, #16
    1300:	4b13      	ldr	r3, [pc, #76]	; (1350 <adc_interface_init+0xa0>)
    1302:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1304:	230f      	movs	r3, #15
    1306:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1308:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    130a:	7813      	ldrb	r3, [r2, #0]
    130c:	2102      	movs	r1, #2
    130e:	430b      	orrs	r3, r1
    1310:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1312:	4b0b      	ldr	r3, [pc, #44]	; (1340 <adc_interface_init+0x90>)
    1314:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1316:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1318:	b25b      	sxtb	r3, r3
    131a:	2b00      	cmp	r3, #0
    131c:	dbfb      	blt.n	1316 <adc_interface_init+0x66>
	adc_enable(&adc_module_instance);

	// Handle all conversions in callbacks
	adc_register_callback(&adc_module_instance, adc_cb, ADC_CALLBACK_READ_BUFFER);
    131e:	4c08      	ldr	r4, [pc, #32]	; (1340 <adc_interface_init+0x90>)
    1320:	2200      	movs	r2, #0
    1322:	490c      	ldr	r1, [pc, #48]	; (1354 <adc_interface_init+0xa4>)
    1324:	0020      	movs	r0, r4
    1326:	4b0c      	ldr	r3, [pc, #48]	; (1358 <adc_interface_init+0xa8>)
    1328:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    132a:	7ee3      	ldrb	r3, [r4, #27]
    132c:	2201      	movs	r2, #1
    132e:	4313      	orrs	r3, r2
    1330:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_module_instance, ADC_CALLBACK_READ_BUFFER);

	// Start the conversion
	adc_read_buffer_job(&adc_module_instance, adc_buffer, ADC_BUFFER_SIZE);
    1332:	2212      	movs	r2, #18
    1334:	4909      	ldr	r1, [pc, #36]	; (135c <adc_interface_init+0xac>)
    1336:	0020      	movs	r0, r4
    1338:	4b09      	ldr	r3, [pc, #36]	; (1360 <adc_interface_init+0xb0>)
    133a:	4798      	blx	r3
 }
    133c:	b00c      	add	sp, #48	; 0x30
    133e:	bd10      	pop	{r4, pc}
    1340:	20004e88 	.word	0x20004e88
    1344:	00000115 	.word	0x00000115
    1348:	42004000 	.word	0x42004000
    134c:	0000015d 	.word	0x0000015d
    1350:	e000e100 	.word	0xe000e100
    1354:	00001249 	.word	0x00001249
    1358:	00000649 	.word	0x00000649
    135c:	20004e64 	.word	0x20004e64
    1360:	0000065d 	.word	0x0000065d

00001364 <get_pressure_sensor_cmH2O>:
 *	\param channel The sensor channel
 *	
 *	\return The pressure from the channel in cm-H2O if channel valid or 0 otherwise
 */
 float get_pressure_sensor_cmH2O(uint8_t channel)
 {
    1364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Pressure sensors output 0.5-4.5V corresponding to 0-5psig
	// Scaled down to 3.3V range with 3.3K/(2.2K+3.3K) divider
	if(channel >= NUM_PRESSURE_SENSOR_CHANNELS)
    1366:	2802      	cmp	r0, #2
    1368:	d825      	bhi.n	13b6 <get_pressure_sensor_cmH2O+0x52>
	{
		return 0.0;
	}
	uint16_t raw_adc =  pressure_raw_int[channel];
    136a:	0040      	lsls	r0, r0, #1
    136c:	4b13      	ldr	r3, [pc, #76]	; (13bc <get_pressure_sensor_cmH2O+0x58>)
    136e:	5ac0      	ldrh	r0, [r0, r3]
    1370:	b280      	uxth	r0, r0

	float pressure_voltage_scaled_up = ((raw_adc / ADC_MAX) * 3.3) * (5.5/3.3);
    1372:	4b13      	ldr	r3, [pc, #76]	; (13c0 <get_pressure_sensor_cmH2O+0x5c>)
    1374:	4798      	blx	r3
    1376:	2200      	movs	r2, #0
    1378:	4b12      	ldr	r3, [pc, #72]	; (13c4 <get_pressure_sensor_cmH2O+0x60>)
    137a:	4c13      	ldr	r4, [pc, #76]	; (13c8 <get_pressure_sensor_cmH2O+0x64>)
    137c:	47a0      	blx	r4
    137e:	4c13      	ldr	r4, [pc, #76]	; (13cc <get_pressure_sensor_cmH2O+0x68>)
    1380:	4a13      	ldr	r2, [pc, #76]	; (13d0 <get_pressure_sensor_cmH2O+0x6c>)
    1382:	4b14      	ldr	r3, [pc, #80]	; (13d4 <get_pressure_sensor_cmH2O+0x70>)
    1384:	47a0      	blx	r4
    1386:	4a14      	ldr	r2, [pc, #80]	; (13d8 <get_pressure_sensor_cmH2O+0x74>)
    1388:	4b14      	ldr	r3, [pc, #80]	; (13dc <get_pressure_sensor_cmH2O+0x78>)
    138a:	47a0      	blx	r4
    138c:	4d14      	ldr	r5, [pc, #80]	; (13e0 <get_pressure_sensor_cmH2O+0x7c>)
    138e:	47a8      	blx	r5

	float pressure_psi = 5.0 * (pressure_voltage_scaled_up - 0.5) / 4.0;
    1390:	4e14      	ldr	r6, [pc, #80]	; (13e4 <get_pressure_sensor_cmH2O+0x80>)
    1392:	47b0      	blx	r6
    1394:	2200      	movs	r2, #0
    1396:	4b14      	ldr	r3, [pc, #80]	; (13e8 <get_pressure_sensor_cmH2O+0x84>)
    1398:	4f14      	ldr	r7, [pc, #80]	; (13ec <get_pressure_sensor_cmH2O+0x88>)
    139a:	47b8      	blx	r7
    139c:	2200      	movs	r2, #0
    139e:	4b14      	ldr	r3, [pc, #80]	; (13f0 <get_pressure_sensor_cmH2O+0x8c>)
    13a0:	47a0      	blx	r4
    13a2:	2200      	movs	r2, #0
    13a4:	4b13      	ldr	r3, [pc, #76]	; (13f4 <get_pressure_sensor_cmH2O+0x90>)
    13a6:	47a0      	blx	r4
    13a8:	47a8      	blx	r5

	float pressure_cmH2O = (70.307) * pressure_psi;
    13aa:	47b0      	blx	r6
    13ac:	4a12      	ldr	r2, [pc, #72]	; (13f8 <get_pressure_sensor_cmH2O+0x94>)
    13ae:	4b13      	ldr	r3, [pc, #76]	; (13fc <get_pressure_sensor_cmH2O+0x98>)
    13b0:	47a0      	blx	r4
    13b2:	47a8      	blx	r5
	return pressure_cmH2O;
 }
    13b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0.0;
    13b6:	2000      	movs	r0, #0
    13b8:	e7fc      	b.n	13b4 <get_pressure_sensor_cmH2O+0x50>
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	20004eb0 	.word	0x20004eb0
    13c0:	000066c5 	.word	0x000066c5
    13c4:	40affe00 	.word	0x40affe00
    13c8:	000052c9 	.word	0x000052c9
    13cc:	00005b31 	.word	0x00005b31
    13d0:	66666666 	.word	0x66666666
    13d4:	400a6666 	.word	0x400a6666
    13d8:	aaaaaaab 	.word	0xaaaaaaab
    13dc:	3ffaaaaa 	.word	0x3ffaaaaa
    13e0:	0000685d 	.word	0x0000685d
    13e4:	000067b9 	.word	0x000067b9
    13e8:	3fe00000 	.word	0x3fe00000
    13ec:	00006031 	.word	0x00006031
    13f0:	40140000 	.word	0x40140000
    13f4:	3fd00000 	.word	0x3fd00000
    13f8:	e353f7cf 	.word	0xe353f7cf
    13fc:	405193a5 	.word	0x405193a5

00001400 <get_pressure_sensor_cmH2O_voted>:

 float get_pressure_sensor_cmH2O_voted(void)
 {
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	46de      	mov	lr, fp
    1404:	4657      	mov	r7, sl
    1406:	464e      	mov	r6, r9
    1408:	4645      	mov	r5, r8
    140a:	b5e0      	push	{r5, r6, r7, lr}
    140c:	b08b      	sub	sp, #44	; 0x2c
	int32_t i;
	// Get pressure
	float pressure_values[3];
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    140e:	2400      	movs	r4, #0
	{
		pressure_values[i] = get_pressure_sensor_cmH2O(i);
    1410:	4e56      	ldr	r6, [pc, #344]	; (156c <get_pressure_sensor_cmH2O_voted+0x16c>)
    1412:	ad07      	add	r5, sp, #28
    1414:	b2e0      	uxtb	r0, r4
    1416:	47b0      	blx	r6
    1418:	00a3      	lsls	r3, r4, #2
    141a:	5158      	str	r0, [r3, r5]
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    141c:	3401      	adds	r4, #1
    141e:	2c03      	cmp	r4, #3
    1420:	d1f8      	bne.n	1414 <get_pressure_sensor_cmH2O_voted+0x14>
	}
	// Average, eliminate the furthest outlier, and average again to get actual, then check for sensor failure
	float avg_pressure = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		avg_pressure += 0.33333 *pressure_values[i];
    1422:	4d53      	ldr	r5, [pc, #332]	; (1570 <get_pressure_sensor_cmH2O_voted+0x170>)
    1424:	9807      	ldr	r0, [sp, #28]
    1426:	47a8      	blx	r5
    1428:	4e52      	ldr	r6, [pc, #328]	; (1574 <get_pressure_sensor_cmH2O_voted+0x174>)
    142a:	4a53      	ldr	r2, [pc, #332]	; (1578 <get_pressure_sensor_cmH2O_voted+0x178>)
    142c:	4b53      	ldr	r3, [pc, #332]	; (157c <get_pressure_sensor_cmH2O_voted+0x17c>)
    142e:	47b0      	blx	r6
    1430:	4c53      	ldr	r4, [pc, #332]	; (1580 <get_pressure_sensor_cmH2O_voted+0x180>)
    1432:	2200      	movs	r2, #0
    1434:	2300      	movs	r3, #0
    1436:	47a0      	blx	r4
    1438:	4f52      	ldr	r7, [pc, #328]	; (1584 <get_pressure_sensor_cmH2O_voted+0x184>)
    143a:	47b8      	blx	r7
    143c:	47a8      	blx	r5
    143e:	9000      	str	r0, [sp, #0]
    1440:	9101      	str	r1, [sp, #4]
    1442:	9808      	ldr	r0, [sp, #32]
    1444:	47a8      	blx	r5
    1446:	4a4c      	ldr	r2, [pc, #304]	; (1578 <get_pressure_sensor_cmH2O_voted+0x178>)
    1448:	4b4c      	ldr	r3, [pc, #304]	; (157c <get_pressure_sensor_cmH2O_voted+0x17c>)
    144a:	47b0      	blx	r6
    144c:	0002      	movs	r2, r0
    144e:	000b      	movs	r3, r1
    1450:	9800      	ldr	r0, [sp, #0]
    1452:	9901      	ldr	r1, [sp, #4]
    1454:	47a0      	blx	r4
    1456:	9000      	str	r0, [sp, #0]
    1458:	9101      	str	r1, [sp, #4]
    145a:	9809      	ldr	r0, [sp, #36]	; 0x24
    145c:	47a8      	blx	r5
    145e:	4a46      	ldr	r2, [pc, #280]	; (1578 <get_pressure_sensor_cmH2O_voted+0x178>)
    1460:	4b46      	ldr	r3, [pc, #280]	; (157c <get_pressure_sensor_cmH2O_voted+0x17c>)
    1462:	47b0      	blx	r6
    1464:	9002      	str	r0, [sp, #8]
    1466:	9103      	str	r1, [sp, #12]
    1468:	9800      	ldr	r0, [sp, #0]
    146a:	9901      	ldr	r1, [sp, #4]
    146c:	47b8      	blx	r7
    146e:	47a8      	blx	r5
    1470:	0002      	movs	r2, r0
    1472:	000b      	movs	r3, r1
    1474:	9802      	ldr	r0, [sp, #8]
    1476:	9903      	ldr	r1, [sp, #12]
    1478:	47a0      	blx	r4
    147a:	47b8      	blx	r7
    147c:	9002      	str	r0, [sp, #8]
    147e:	2300      	movs	r3, #0
    1480:	9300      	str	r3, [sp, #0]
    1482:	2600      	movs	r6, #0
    1484:	2400      	movs	r4, #0
	// Eliminate the furthest outlier of average
	uint8_t biggest_error_index = 0;
	float biggest_error = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		float this_error = abs(avg_pressure - pressure_values[i]);
    1486:	af07      	add	r7, sp, #28
    1488:	4b3f      	ldr	r3, [pc, #252]	; (1588 <get_pressure_sensor_cmH2O_voted+0x188>)
    148a:	469b      	mov	fp, r3
    148c:	4b3f      	ldr	r3, [pc, #252]	; (158c <get_pressure_sensor_cmH2O_voted+0x18c>)
    148e:	469a      	mov	sl, r3
    1490:	4b3f      	ldr	r3, [pc, #252]	; (1590 <get_pressure_sensor_cmH2O_voted+0x190>)
    1492:	4699      	mov	r9, r3
		if(this_error > biggest_error)
    1494:	4d3f      	ldr	r5, [pc, #252]	; (1594 <get_pressure_sensor_cmH2O_voted+0x194>)
    1496:	46b0      	mov	r8, r6
    1498:	e002      	b.n	14a0 <get_pressure_sensor_cmH2O_voted+0xa0>
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    149a:	3401      	adds	r4, #1
    149c:	2c03      	cmp	r4, #3
    149e:	d011      	beq.n	14c4 <get_pressure_sensor_cmH2O_voted+0xc4>
		float this_error = abs(avg_pressure - pressure_values[i]);
    14a0:	00a3      	lsls	r3, r4, #2
    14a2:	59d9      	ldr	r1, [r3, r7]
    14a4:	9802      	ldr	r0, [sp, #8]
    14a6:	47d8      	blx	fp
    14a8:	47d0      	blx	sl
    14aa:	17c3      	asrs	r3, r0, #31
    14ac:	18c0      	adds	r0, r0, r3
    14ae:	4058      	eors	r0, r3
    14b0:	47c8      	blx	r9
    14b2:	1c06      	adds	r6, r0, #0
		if(this_error > biggest_error)
    14b4:	9900      	ldr	r1, [sp, #0]
    14b6:	47a8      	blx	r5
    14b8:	2800      	cmp	r0, #0
    14ba:	d0ee      	beq.n	149a <get_pressure_sensor_cmH2O_voted+0x9a>
		{
			biggest_error = this_error;
			biggest_error_index = i;
    14bc:	b2e3      	uxtb	r3, r4
    14be:	4698      	mov	r8, r3
			biggest_error = this_error;
    14c0:	9600      	str	r6, [sp, #0]
    14c2:	e7ea      	b.n	149a <get_pressure_sensor_cmH2O_voted+0x9a>
    14c4:	4646      	mov	r6, r8
    14c6:	2300      	movs	r3, #0
    14c8:	9300      	str	r3, [sp, #0]
    14ca:	2400      	movs	r4, #0
	avg_pressure = 0.0;
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
	{
		if(i != biggest_error_index)
		{
			avg_pressure += 0.5 * pressure_values[i];
    14cc:	ab07      	add	r3, sp, #28
    14ce:	9305      	str	r3, [sp, #20]
    14d0:	4d27      	ldr	r5, [pc, #156]	; (1570 <get_pressure_sensor_cmH2O_voted+0x170>)
    14d2:	e002      	b.n	14da <get_pressure_sensor_cmH2O_voted+0xda>
	for(i=0; i<NUM_PRESSURE_SENSOR_CHANNELS; i++)
    14d4:	3401      	adds	r4, #1
    14d6:	2c03      	cmp	r4, #3
    14d8:	d017      	beq.n	150a <get_pressure_sensor_cmH2O_voted+0x10a>
		if(i != biggest_error_index)
    14da:	42a6      	cmp	r6, r4
    14dc:	d0fa      	beq.n	14d4 <get_pressure_sensor_cmH2O_voted+0xd4>
			avg_pressure += 0.5 * pressure_values[i];
    14de:	00a3      	lsls	r3, r4, #2
    14e0:	9a05      	ldr	r2, [sp, #20]
    14e2:	5898      	ldr	r0, [r3, r2]
    14e4:	47a8      	blx	r5
    14e6:	2200      	movs	r2, #0
    14e8:	4b2b      	ldr	r3, [pc, #172]	; (1598 <get_pressure_sensor_cmH2O_voted+0x198>)
    14ea:	4f22      	ldr	r7, [pc, #136]	; (1574 <get_pressure_sensor_cmH2O_voted+0x174>)
    14ec:	47b8      	blx	r7
    14ee:	9002      	str	r0, [sp, #8]
    14f0:	9103      	str	r1, [sp, #12]
    14f2:	9800      	ldr	r0, [sp, #0]
    14f4:	47a8      	blx	r5
    14f6:	0002      	movs	r2, r0
    14f8:	000b      	movs	r3, r1
    14fa:	9802      	ldr	r0, [sp, #8]
    14fc:	9903      	ldr	r1, [sp, #12]
    14fe:	4f20      	ldr	r7, [pc, #128]	; (1580 <get_pressure_sensor_cmH2O_voted+0x180>)
    1500:	47b8      	blx	r7
    1502:	4b20      	ldr	r3, [pc, #128]	; (1584 <get_pressure_sensor_cmH2O_voted+0x184>)
    1504:	4798      	blx	r3
    1506:	9000      	str	r0, [sp, #0]
    1508:	e7e4      	b.n	14d4 <get_pressure_sensor_cmH2O_voted+0xd4>
		}
	}
	// Check for sensor failure
	// TODO what is threshold?
	if(abs(pressure_values[biggest_error_index] - avg_pressure) > 0.1*avg_pressure)
    150a:	4643      	mov	r3, r8
    150c:	009b      	lsls	r3, r3, #2
    150e:	9e00      	ldr	r6, [sp, #0]
    1510:	1c31      	adds	r1, r6, #0
    1512:	aa07      	add	r2, sp, #28
    1514:	5898      	ldr	r0, [r3, r2]
    1516:	4b1c      	ldr	r3, [pc, #112]	; (1588 <get_pressure_sensor_cmH2O_voted+0x188>)
    1518:	4798      	blx	r3
    151a:	4b1c      	ldr	r3, [pc, #112]	; (158c <get_pressure_sensor_cmH2O_voted+0x18c>)
    151c:	4798      	blx	r3
    151e:	17c3      	asrs	r3, r0, #31
    1520:	18c0      	adds	r0, r0, r3
    1522:	4058      	eors	r0, r3
    1524:	4b1d      	ldr	r3, [pc, #116]	; (159c <get_pressure_sensor_cmH2O_voted+0x19c>)
    1526:	4798      	blx	r3
    1528:	0004      	movs	r4, r0
    152a:	000d      	movs	r5, r1
    152c:	1c30      	adds	r0, r6, #0
    152e:	4b10      	ldr	r3, [pc, #64]	; (1570 <get_pressure_sensor_cmH2O_voted+0x170>)
    1530:	4798      	blx	r3
    1532:	4a1b      	ldr	r2, [pc, #108]	; (15a0 <get_pressure_sensor_cmH2O_voted+0x1a0>)
    1534:	4b1b      	ldr	r3, [pc, #108]	; (15a4 <get_pressure_sensor_cmH2O_voted+0x1a4>)
    1536:	4f0f      	ldr	r7, [pc, #60]	; (1574 <get_pressure_sensor_cmH2O_voted+0x174>)
    1538:	47b8      	blx	r7
    153a:	0002      	movs	r2, r0
    153c:	000b      	movs	r3, r1
    153e:	0020      	movs	r0, r4
    1540:	0029      	movs	r1, r5
    1542:	4c19      	ldr	r4, [pc, #100]	; (15a8 <get_pressure_sensor_cmH2O_voted+0x1a8>)
    1544:	47a0      	blx	r4
    1546:	2800      	cmp	r0, #0
    1548:	d10b      	bne.n	1562 <get_pressure_sensor_cmH2O_voted+0x162>
	{
		set_alarm(ALARM_PRESSURE_SENSOR, true);
	}
	else
	{
		set_alarm(ALARM_PRESSURE_SENSOR, false);
    154a:	2100      	movs	r1, #0
    154c:	2002      	movs	r0, #2
    154e:	4b17      	ldr	r3, [pc, #92]	; (15ac <get_pressure_sensor_cmH2O_voted+0x1ac>)
    1550:	4798      	blx	r3
	}
	return avg_pressure;
 }
    1552:	9800      	ldr	r0, [sp, #0]
    1554:	b00b      	add	sp, #44	; 0x2c
    1556:	bc3c      	pop	{r2, r3, r4, r5}
    1558:	4690      	mov	r8, r2
    155a:	4699      	mov	r9, r3
    155c:	46a2      	mov	sl, r4
    155e:	46ab      	mov	fp, r5
    1560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		set_alarm(ALARM_PRESSURE_SENSOR, true);
    1562:	2101      	movs	r1, #1
    1564:	2002      	movs	r0, #2
    1566:	4b11      	ldr	r3, [pc, #68]	; (15ac <get_pressure_sensor_cmH2O_voted+0x1ac>)
    1568:	4798      	blx	r3
    156a:	e7f2      	b.n	1552 <get_pressure_sensor_cmH2O_voted+0x152>
    156c:	00001365 	.word	0x00001365
    1570:	000067b9 	.word	0x000067b9
    1574:	00005b31 	.word	0x00005b31
    1578:	5a31a4be 	.word	0x5a31a4be
    157c:	3fd55547 	.word	0x3fd55547
    1580:	00004ca9 	.word	0x00004ca9
    1584:	0000685d 	.word	0x0000685d
    1588:	00004891 	.word	0x00004891
    158c:	00004bc9 	.word	0x00004bc9
    1590:	00004c09 	.word	0x00004c09
    1594:	000044d9 	.word	0x000044d9
    1598:	3fe00000 	.word	0x3fe00000
    159c:	000066c5 	.word	0x000066c5
    15a0:	9999999a 	.word	0x9999999a
    15a4:	3fb99999 	.word	0x3fb99999
    15a8:	00004465 	.word	0x00004465
    15ac:	000015b1 	.word	0x000015b1

000015b0 <set_alarm>:
*	\param alarm_type The alarm to set
*	\param set If true, alarm is set; if false, alarm is cleared
*/
void set_alarm(ALARM_TYPE_INDEX alarm_type, bool set)
{
	if((uint32_t) alarm_type > 31)
    15b0:	281f      	cmp	r0, #31
    15b2:	d807      	bhi.n	15c4 <set_alarm+0x14>
	{
		return;
	}

	if(set)
    15b4:	2900      	cmp	r1, #0
    15b6:	d106      	bne.n	15c6 <set_alarm+0x16>
	{
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
	}
	else
	{
		alarm_bitfield &= ~(1 << (uint32_t) alarm_type);
    15b8:	4906      	ldr	r1, [pc, #24]	; (15d4 <set_alarm+0x24>)
    15ba:	680b      	ldr	r3, [r1, #0]
    15bc:	2201      	movs	r2, #1
    15be:	4082      	lsls	r2, r0
    15c0:	4393      	bics	r3, r2
    15c2:	600b      	str	r3, [r1, #0]
	}
	
}
    15c4:	4770      	bx	lr
		alarm_bitfield |= (1 << (uint32_t) alarm_type);
    15c6:	4a03      	ldr	r2, [pc, #12]	; (15d4 <set_alarm+0x24>)
    15c8:	6811      	ldr	r1, [r2, #0]
    15ca:	2301      	movs	r3, #1
    15cc:	4083      	lsls	r3, r0
    15ce:	430b      	orrs	r3, r1
    15d0:	6013      	str	r3, [r2, #0]
    15d2:	e7f7      	b.n	15c4 <set_alarm+0x14>
    15d4:	20004eb8 	.word	0x20004eb8

000015d8 <any_alarms_set>:
*
*	\return True if any alarm is set
*/
bool any_alarms_set(void)
{
	return (alarm_bitfield != 0);
    15d8:	4b02      	ldr	r3, [pc, #8]	; (15e4 <any_alarms_set+0xc>)
    15da:	6818      	ldr	r0, [r3, #0]
    15dc:	1e43      	subs	r3, r0, #1
    15de:	4198      	sbcs	r0, r3
    15e0:	b2c0      	uxtb	r0, r0
    15e2:	4770      	bx	lr
    15e4:	20004eb8 	.word	0x20004eb8

000015e8 <flow_sensor_slm_callback>:
*	\brief Callback to handle the measurements from the flow sensor
*
*	\param module Pointer to I2C master module
*/
static void flow_sensor_slm_callback(struct i2c_master_module *const module)
{
    15e8:	b510      	push	{r4, lr}
	// WARNING: ISR context
	uint8_t read_crc = read_slm_buffer[2];
    15ea:	4b16      	ldr	r3, [pc, #88]	; (1644 <flow_sensor_slm_callback+0x5c>)
    15ec:	7899      	ldrb	r1, [r3, #2]
    15ee:	b2c9      	uxtb	r1, r1
	 { crc ^= *(data+byteCtr);
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    15f4:	2431      	movs	r4, #49	; 0x31
    15f6:	e006      	b.n	1606 <flow_sensor_slm_callback+0x1e>
    15f8:	005b      	lsls	r3, r3, #1
    15fa:	4063      	eors	r3, r4
    15fc:	b2db      	uxtb	r3, r3
    15fe:	3a01      	subs	r2, #1
    1600:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1602:	2a00      	cmp	r2, #0
    1604:	d005      	beq.n	1612 <flow_sensor_slm_callback+0x2a>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    1606:	b258      	sxtb	r0, r3
    1608:	2800      	cmp	r0, #0
    160a:	dbf5      	blt.n	15f8 <flow_sensor_slm_callback+0x10>
			 else crc = (crc << 1);
    160c:	005b      	lsls	r3, r3, #1
    160e:	b2db      	uxtb	r3, r3
    1610:	e7f5      	b.n	15fe <flow_sensor_slm_callback+0x16>
	 { crc ^= *(data+byteCtr);
    1612:	4a0c      	ldr	r2, [pc, #48]	; (1644 <flow_sensor_slm_callback+0x5c>)
    1614:	7852      	ldrb	r2, [r2, #1]
    1616:	4053      	eors	r3, r2
    1618:	2208      	movs	r2, #8
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    161a:	2431      	movs	r4, #49	; 0x31
    161c:	e006      	b.n	162c <flow_sensor_slm_callback+0x44>
    161e:	005b      	lsls	r3, r3, #1
    1620:	4063      	eors	r3, r4
    1622:	b2db      	uxtb	r3, r3
    1624:	3a01      	subs	r2, #1
    1626:	b2d2      	uxtb	r2, r2
		 for (uint8_t bit = 8; bit > 0; --bit)
    1628:	2a00      	cmp	r2, #0
    162a:	d005      	beq.n	1638 <flow_sensor_slm_callback+0x50>
		 { if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
    162c:	b258      	sxtb	r0, r3
    162e:	2800      	cmp	r0, #0
    1630:	dbf5      	blt.n	161e <flow_sensor_slm_callback+0x36>
			 else crc = (crc << 1);
    1632:	005b      	lsls	r3, r3, #1
    1634:	b2db      	uxtb	r3, r3
    1636:	e7f5      	b.n	1624 <flow_sensor_slm_callback+0x3c>
	if(!flow_sensor_crc(read_slm_buffer, 2, read_crc))
    1638:	4299      	cmp	r1, r3
    163a:	d102      	bne.n	1642 <flow_sensor_slm_callback+0x5a>
	{
		return;
	}

	uint32_t raw_rate = read_slm_buffer[1] | (read_slm_buffer[0] << 8);
    163c:	4b01      	ldr	r3, [pc, #4]	; (1644 <flow_sensor_slm_callback+0x5c>)
    163e:	785a      	ldrb	r2, [r3, #1]
    1640:	781b      	ldrb	r3, [r3, #0]
	float flow_rate = (float) ((int32_t) raw_rate - (int32_t) SFM3300_OFFSET_FLOW) / SFM3300_SCALE_FACTOR_FLOW;
	// TODO do something with it
}
    1642:	bd10      	pop	{r4, pc}
    1644:	20004ebc 	.word	0x20004ebc

00001648 <flow_sensor_init>:
*	\brief Sets up callback handler for flow sensor measurements
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_init(struct i2c_master_module * i2c_mod)
{
    1648:	b510      	push	{r4, lr}
    164a:	0004      	movs	r4, r0
	// Set up I2C callback
	i2c_master_register_callback(i2c_mod, flow_sensor_slm_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
    164c:	2201      	movs	r2, #1
    164e:	4904      	ldr	r1, [pc, #16]	; (1660 <flow_sensor_init+0x18>)
    1650:	4b04      	ldr	r3, [pc, #16]	; (1664 <flow_sensor_init+0x1c>)
    1652:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1654:	7e63      	ldrb	r3, [r4, #25]
    1656:	2202      	movs	r2, #2
    1658:	4313      	orrs	r3, r2
    165a:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(i2c_mod, I2C_MASTER_CALLBACK_READ_COMPLETE);
	// TODO set priority to be FreeRTOS compatible?
}
    165c:	bd10      	pop	{r4, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	000015e9 	.word	0x000015e9
    1664:	00000cd5 	.word	0x00000cd5

00001668 <flow_sensor_power_on>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1668:	2280      	movs	r2, #128	; 0x80
    166a:	0412      	lsls	r2, r2, #16
    166c:	4b01      	ldr	r3, [pc, #4]	; (1674 <flow_sensor_power_on+0xc>)
    166e:	619a      	str	r2, [r3, #24]
*	\brief Powers on the flow sensor
*/
void flow_sensor_power_on(void)
{
	ioport_set_pin_level(FLOW_SENSOR_POWER_GPIO, FLOW_SENSOR_POWER_ACTIVE_LEVEL);
}
    1670:	4770      	bx	lr
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	41004480 	.word	0x41004480

00001678 <flow_sensor_request_flow_slm>:
*	\brief Requests a measurement from the flow sensor and triggers another measurement
*
*	\param i2c_mod Pointer to I2C master module
*/
void flow_sensor_request_flow_slm(struct i2c_master_module * i2c_mod)
{
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	0005      	movs	r5, r0
	// Note: Delay is inherent between these, so must not call faster than 500Hz

	slm_read_packet.address = SFM3300_I2C_ADDRESS;
    167c:	490b      	ldr	r1, [pc, #44]	; (16ac <flow_sensor_request_flow_slm+0x34>)
    167e:	2640      	movs	r6, #64	; 0x40
    1680:	800e      	strh	r6, [r1, #0]
	slm_read_packet.data = read_slm_buffer;
    1682:	4b0b      	ldr	r3, [pc, #44]	; (16b0 <flow_sensor_request_flow_slm+0x38>)
    1684:	604b      	str	r3, [r1, #4]
	slm_read_packet.data_length = 3;
    1686:	2303      	movs	r3, #3
    1688:	804b      	strh	r3, [r1, #2]
	slm_read_packet.high_speed = false;
    168a:	2400      	movs	r4, #0
    168c:	724c      	strb	r4, [r1, #9]
	slm_read_packet.ten_bit_address = false;
    168e:	720c      	strb	r4, [r1, #8]
	i2c_master_read_packet_job(i2c_mod, &slm_read_packet);
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <flow_sensor_request_flow_slm+0x3c>)
    1692:	4798      	blx	r3

	static uint8_t flow_request_to_send[2] = {SFM3300_MEAS_CMD_BYTE_1, SFM3300_MEAS_CMD_BYTE_2};
	// First have to request read, delay 2ms, and then read
	slm_write_packet.address = SFM3300_I2C_ADDRESS;
    1694:	4908      	ldr	r1, [pc, #32]	; (16b8 <flow_sensor_request_flow_slm+0x40>)
    1696:	800e      	strh	r6, [r1, #0]
	slm_write_packet.data = &flow_request_to_send[0];
    1698:	4b08      	ldr	r3, [pc, #32]	; (16bc <flow_sensor_request_flow_slm+0x44>)
    169a:	604b      	str	r3, [r1, #4]
	slm_write_packet.data_length = 2;
    169c:	2302      	movs	r3, #2
    169e:	804b      	strh	r3, [r1, #2]
	slm_write_packet.high_speed = false;
    16a0:	724c      	strb	r4, [r1, #9]
	slm_write_packet.ten_bit_address = false;
    16a2:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(i2c_mod, &slm_write_packet);
    16a4:	0028      	movs	r0, r5
    16a6:	4b06      	ldr	r3, [pc, #24]	; (16c0 <flow_sensor_request_flow_slm+0x48>)
    16a8:	4798      	blx	r3
    16aa:	bd70      	pop	{r4, r5, r6, pc}
    16ac:	20004ec0 	.word	0x20004ec0
    16b0:	20004ebc 	.word	0x20004ebc
    16b4:	00000ced 	.word	0x00000ced
    16b8:	20004ecc 	.word	0x20004ecc
    16bc:	20000004 	.word	0x20000004
    16c0:	00000d11 	.word	0x00000d11

000016c4 <send_buffer>:
	}
	return false;
}

bool send_buffer(SCREEN_TYPE screen)
{
    16c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    */
	// reorganize to this format
	static uint8_t lines_1_3_buffer[40];
	static uint8_t lines_2_4_buffer[40];

	if(screen == MAIN_SCREEN)
    16c6:	2800      	cmp	r0, #0
    16c8:	d004      	beq.n	16d4 <send_buffer+0x10>
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
	}
	else
	{
		return false;
    16ca:	2300      	movs	r3, #0
	else if(screen == ALARM_SCREEN)
    16cc:	2801      	cmp	r0, #1
    16ce:	d041      	beq.n	1754 <send_buffer+0x90>
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
	screen_buffer_second_half_packet.data_length = 40;
	screen_buffer_second_half_packet.high_speed = false;
	screen_buffer_second_half_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_second_half_packet);
}
    16d0:	0018      	movs	r0, r3
    16d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(&lines_1_3_buffer[0], &main_screen_buffer[0], 20);
    16d4:	4a2f      	ldr	r2, [pc, #188]	; (1794 <send_buffer+0xd0>)
    16d6:	4b30      	ldr	r3, [pc, #192]	; (1798 <send_buffer+0xd4>)
    16d8:	0011      	movs	r1, r2
    16da:	0018      	movs	r0, r3
    16dc:	c870      	ldmia	r0!, {r4, r5, r6}
    16de:	c170      	stmia	r1!, {r4, r5, r6}
    16e0:	c830      	ldmia	r0!, {r4, r5}
    16e2:	c130      	stmia	r1!, {r4, r5}
		memcpy(&lines_1_3_buffer[20], &main_screen_buffer[40], 20);
    16e4:	3214      	adds	r2, #20
    16e6:	0019      	movs	r1, r3
    16e8:	3128      	adds	r1, #40	; 0x28
    16ea:	c931      	ldmia	r1!, {r0, r4, r5}
    16ec:	c231      	stmia	r2!, {r0, r4, r5}
    16ee:	0010      	movs	r0, r2
    16f0:	c914      	ldmia	r1!, {r2, r4}
    16f2:	c014      	stmia	r0!, {r2, r4}
		memcpy(&lines_2_4_buffer[0], &main_screen_buffer[20], 20);
    16f4:	4a29      	ldr	r2, [pc, #164]	; (179c <send_buffer+0xd8>)
    16f6:	0019      	movs	r1, r3
    16f8:	3114      	adds	r1, #20
    16fa:	0010      	movs	r0, r2
    16fc:	c970      	ldmia	r1!, {r4, r5, r6}
    16fe:	c070      	stmia	r0!, {r4, r5, r6}
    1700:	c930      	ldmia	r1!, {r4, r5}
    1702:	c030      	stmia	r0!, {r4, r5}
		memcpy(&lines_2_4_buffer[20], &main_screen_buffer[60], 20);
    1704:	3214      	adds	r2, #20
    1706:	333c      	adds	r3, #60	; 0x3c
    1708:	cb13      	ldmia	r3!, {r0, r1, r4}
    170a:	c213      	stmia	r2!, {r0, r1, r4}
    170c:	0011      	movs	r1, r2
    170e:	cb05      	ldmia	r3!, {r0, r2}
    1710:	c105      	stmia	r1!, {r0, r2}
	cursor_set_packet.address = LCD_I2C_ADDRESS;
    1712:	4923      	ldr	r1, [pc, #140]	; (17a0 <send_buffer+0xdc>)
    1714:	2628      	movs	r6, #40	; 0x28
    1716:	800e      	strh	r6, [r1, #0]
	cursor_set_packet.data = cursor_set;
    1718:	4b22      	ldr	r3, [pc, #136]	; (17a4 <send_buffer+0xe0>)
    171a:	604b      	str	r3, [r1, #4]
	cursor_set_packet.data_length = 3;
    171c:	2303      	movs	r3, #3
    171e:	804b      	strh	r3, [r1, #2]
	cursor_set_packet.high_speed = false;
    1720:	2400      	movs	r4, #0
    1722:	724c      	strb	r4, [r1, #9]
	cursor_set_packet.ten_bit_address = false;
    1724:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &cursor_set_packet);
    1726:	4d20      	ldr	r5, [pc, #128]	; (17a8 <send_buffer+0xe4>)
    1728:	0028      	movs	r0, r5
    172a:	4f20      	ldr	r7, [pc, #128]	; (17ac <send_buffer+0xe8>)
    172c:	47b8      	blx	r7
	screen_buffer_first_half_packet.address = LCD_I2C_ADDRESS;
    172e:	4920      	ldr	r1, [pc, #128]	; (17b0 <send_buffer+0xec>)
    1730:	800e      	strh	r6, [r1, #0]
	screen_buffer_first_half_packet.data = lines_1_3_buffer;
    1732:	4b18      	ldr	r3, [pc, #96]	; (1794 <send_buffer+0xd0>)
    1734:	604b      	str	r3, [r1, #4]
	screen_buffer_first_half_packet.data_length = 40;
    1736:	804e      	strh	r6, [r1, #2]
	screen_buffer_first_half_packet.high_speed = false;
    1738:	724c      	strb	r4, [r1, #9]
	screen_buffer_first_half_packet.ten_bit_address = false;
    173a:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_first_half_packet);
    173c:	0028      	movs	r0, r5
    173e:	47b8      	blx	r7
	screen_buffer_second_half_packet.address = LCD_I2C_ADDRESS;
    1740:	491c      	ldr	r1, [pc, #112]	; (17b4 <send_buffer+0xf0>)
    1742:	800e      	strh	r6, [r1, #0]
	screen_buffer_second_half_packet.data = lines_2_4_buffer;
    1744:	4b15      	ldr	r3, [pc, #84]	; (179c <send_buffer+0xd8>)
    1746:	604b      	str	r3, [r1, #4]
	screen_buffer_second_half_packet.data_length = 40;
    1748:	804e      	strh	r6, [r1, #2]
	screen_buffer_second_half_packet.high_speed = false;
    174a:	724c      	strb	r4, [r1, #9]
	screen_buffer_second_half_packet.ten_bit_address = false;
    174c:	720c      	strb	r4, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &screen_buffer_second_half_packet);
    174e:	0028      	movs	r0, r5
    1750:	47b8      	blx	r7
}
    1752:	e7bd      	b.n	16d0 <send_buffer+0xc>
		memcpy(&lines_1_3_buffer[0], &alarm_screen_buffer[0], 20);
    1754:	4a0f      	ldr	r2, [pc, #60]	; (1794 <send_buffer+0xd0>)
    1756:	4b18      	ldr	r3, [pc, #96]	; (17b8 <send_buffer+0xf4>)
    1758:	0011      	movs	r1, r2
    175a:	0018      	movs	r0, r3
    175c:	c870      	ldmia	r0!, {r4, r5, r6}
    175e:	c170      	stmia	r1!, {r4, r5, r6}
    1760:	c830      	ldmia	r0!, {r4, r5}
    1762:	c130      	stmia	r1!, {r4, r5}
		memcpy(&lines_1_3_buffer[20], &alarm_screen_buffer[40], 20);
    1764:	3214      	adds	r2, #20
    1766:	0019      	movs	r1, r3
    1768:	3128      	adds	r1, #40	; 0x28
    176a:	c931      	ldmia	r1!, {r0, r4, r5}
    176c:	c231      	stmia	r2!, {r0, r4, r5}
    176e:	0010      	movs	r0, r2
    1770:	c914      	ldmia	r1!, {r2, r4}
    1772:	c014      	stmia	r0!, {r2, r4}
		memcpy(&lines_2_4_buffer[0], &alarm_screen_buffer[20], 20);
    1774:	4a09      	ldr	r2, [pc, #36]	; (179c <send_buffer+0xd8>)
    1776:	0019      	movs	r1, r3
    1778:	3114      	adds	r1, #20
    177a:	0010      	movs	r0, r2
    177c:	c970      	ldmia	r1!, {r4, r5, r6}
    177e:	c070      	stmia	r0!, {r4, r5, r6}
    1780:	c930      	ldmia	r1!, {r4, r5}
    1782:	c030      	stmia	r0!, {r4, r5}
		memcpy(&lines_2_4_buffer[20], &alarm_screen_buffer[60], 20);
    1784:	3214      	adds	r2, #20
    1786:	333c      	adds	r3, #60	; 0x3c
    1788:	cb13      	ldmia	r3!, {r0, r1, r4}
    178a:	c213      	stmia	r2!, {r0, r1, r4}
    178c:	0011      	movs	r1, r2
    178e:	cb05      	ldmia	r3!, {r0, r2}
    1790:	c105      	stmia	r1!, {r0, r2}
    1792:	e7be      	b.n	1712 <send_buffer+0x4e>
    1794:	20004f7c 	.word	0x20004f7c
    1798:	20004fcc 	.word	0x20004fcc
    179c:	20004fa4 	.word	0x20004fa4
    17a0:	20004f40 	.word	0x20004f40
    17a4:	20000008 	.word	0x20000008
    17a8:	20004f54 	.word	0x20004f54
    17ac:	00000d11 	.word	0x00000d11
    17b0:	20005028 	.word	0x20005028
    17b4:	20005034 	.word	0x20005034
    17b8:	20004ed8 	.word	0x20004ed8

000017bc <set_contrast>:

bool set_contrast(uint8_t level)
{
    17bc:	b510      	push	{r4, lr}
	if(level < 1 || level > 50)
    17be:	1e42      	subs	r2, r0, #1
	{
		return false;
    17c0:	2300      	movs	r3, #0
	if(level < 1 || level > 50)
    17c2:	2a31      	cmp	r2, #49	; 0x31
    17c4:	d901      	bls.n	17ca <set_contrast+0xe>
	contrast_packet.data_length = 3;
	contrast_packet.high_speed = false;
	contrast_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &contrast_packet);
	return true;
}
    17c6:	0018      	movs	r0, r3
    17c8:	bd10      	pop	{r4, pc}
	data_to_send[0] = LCD_PREFIX;
    17ca:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <set_contrast+0x38>)
    17cc:	22fe      	movs	r2, #254	; 0xfe
    17ce:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_CONTRAST;
    17d0:	3aac      	subs	r2, #172	; 0xac
    17d2:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    17d4:	7098      	strb	r0, [r3, #2]
	contrast_packet.address = LCD_I2C_ADDRESS;
    17d6:	4908      	ldr	r1, [pc, #32]	; (17f8 <set_contrast+0x3c>)
    17d8:	3a2a      	subs	r2, #42	; 0x2a
    17da:	800a      	strh	r2, [r1, #0]
	contrast_packet.data = data_to_send;
    17dc:	604b      	str	r3, [r1, #4]
	contrast_packet.data_length = 3;
    17de:	2303      	movs	r3, #3
    17e0:	804b      	strh	r3, [r1, #2]
	contrast_packet.high_speed = false;
    17e2:	2300      	movs	r3, #0
    17e4:	724b      	strb	r3, [r1, #9]
	contrast_packet.ten_bit_address = false;
    17e6:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &contrast_packet);
    17e8:	4804      	ldr	r0, [pc, #16]	; (17fc <set_contrast+0x40>)
    17ea:	4b05      	ldr	r3, [pc, #20]	; (1800 <set_contrast+0x44>)
    17ec:	4798      	blx	r3
	return true;
    17ee:	2301      	movs	r3, #1
    17f0:	e7e9      	b.n	17c6 <set_contrast+0xa>
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	20004f4c 	.word	0x20004f4c
    17f8:	20004f34 	.word	0x20004f34
    17fc:	20004f54 	.word	0x20004f54
    1800:	00000d11 	.word	0x00000d11

00001804 <set_backlight>:

bool set_backlight(uint8_t level)
{
    1804:	b510      	push	{r4, lr}
	if(level < 1 || level > 8)
    1806:	1e42      	subs	r2, r0, #1
	{
		return false;
    1808:	2300      	movs	r3, #0
	if(level < 1 || level > 8)
    180a:	2a07      	cmp	r2, #7
    180c:	d901      	bls.n	1812 <set_backlight+0xe>
	backlight_packet.data_length = 3;
	backlight_packet.high_speed = false;
	backlight_packet.ten_bit_address = false;
	i2c_master_write_packet_job(&i2c_master_instance, &backlight_packet);
	return true;
}
    180e:	0018      	movs	r0, r3
    1810:	bd10      	pop	{r4, pc}
	data_to_send[0] = LCD_PREFIX;
    1812:	4b0a      	ldr	r3, [pc, #40]	; (183c <set_backlight+0x38>)
    1814:	22fe      	movs	r2, #254	; 0xfe
    1816:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = LCD_COMMAND_SET_BRIGHTNESS;
    1818:	3aab      	subs	r2, #171	; 0xab
    181a:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = level;
    181c:	7098      	strb	r0, [r3, #2]
	backlight_packet.address = LCD_I2C_ADDRESS;
    181e:	4908      	ldr	r1, [pc, #32]	; (1840 <set_backlight+0x3c>)
    1820:	3a2b      	subs	r2, #43	; 0x2b
    1822:	800a      	strh	r2, [r1, #0]
	backlight_packet.data = data_to_send;
    1824:	604b      	str	r3, [r1, #4]
	backlight_packet.data_length = 3;
    1826:	2303      	movs	r3, #3
    1828:	804b      	strh	r3, [r1, #2]
	backlight_packet.high_speed = false;
    182a:	2300      	movs	r3, #0
    182c:	724b      	strb	r3, [r1, #9]
	backlight_packet.ten_bit_address = false;
    182e:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &backlight_packet);
    1830:	4804      	ldr	r0, [pc, #16]	; (1844 <set_backlight+0x40>)
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <set_backlight+0x44>)
    1834:	4798      	blx	r3
	return true;
    1836:	2301      	movs	r3, #1
    1838:	e7e9      	b.n	180e <set_backlight+0xa>
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	20004f50 	.word	0x20004f50
    1840:	20004f28 	.word	0x20004f28
    1844:	20004f54 	.word	0x20004f54
    1848:	00000d11 	.word	0x00000d11

0000184c <lcd_init>:
 {
    184c:	b530      	push	{r4, r5, lr}
    184e:	b08f      	sub	sp, #60	; 0x3c
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1850:	ab01      	add	r3, sp, #4
    1852:	4a33      	ldr	r2, [pc, #204]	; (1920 <lcd_init+0xd4>)
    1854:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1856:	2200      	movs	r2, #0
    1858:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    185a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    185c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    185e:	2180      	movs	r1, #128	; 0x80
    1860:	0389      	lsls	r1, r1, #14
    1862:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1864:	2101      	movs	r1, #1
    1866:	4249      	negs	r1, r1
    1868:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    186a:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    186c:	3125      	adds	r1, #37	; 0x25
    186e:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1870:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1872:	3108      	adds	r1, #8
    1874:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1876:	3101      	adds	r1, #1
    1878:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    187a:	202e      	movs	r0, #46	; 0x2e
    187c:	541a      	strb	r2, [r3, r0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    187e:	32d7      	adds	r2, #215	; 0xd7
    1880:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.baud_rate = 45; // Set in # of kHz
    1882:	9101      	str	r1, [sp, #4]
	config_i2c_master.pinmux_pad0 = PIN_PA16C_SERCOM1_PAD0;
    1884:	3ac7      	subs	r2, #199	; 0xc7
    1886:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PIN_PA17C_SERCOM1_PAD1;
    1888:	3201      	adds	r2, #1
    188a:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, LCD_SERCOM, &config_i2c_master) != STATUS_OK);
    188c:	4d25      	ldr	r5, [pc, #148]	; (1924 <lcd_init+0xd8>)
    188e:	4c26      	ldr	r4, [pc, #152]	; (1928 <lcd_init+0xdc>)
    1890:	aa01      	add	r2, sp, #4
    1892:	4926      	ldr	r1, [pc, #152]	; (192c <lcd_init+0xe0>)
    1894:	0028      	movs	r0, r5
    1896:	47a0      	blx	r4
    1898:	2800      	cmp	r0, #0
    189a:	d1f9      	bne.n	1890 <lcd_init+0x44>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    189c:	4b21      	ldr	r3, [pc, #132]	; (1924 <lcd_init+0xd8>)
    189e:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    18a0:	2207      	movs	r2, #7
    18a2:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    18a4:	421a      	tst	r2, r3
    18a6:	d1fc      	bne.n	18a2 <lcd_init+0x56>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    18a8:	6823      	ldr	r3, [r4, #0]
    18aa:	2202      	movs	r2, #2
    18ac:	4313      	orrs	r3, r2
    18ae:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    18b0:	4d1c      	ldr	r5, [pc, #112]	; (1924 <lcd_init+0xd8>)
    18b2:	6828      	ldr	r0, [r5, #0]
    18b4:	4b1e      	ldr	r3, [pc, #120]	; (1930 <lcd_init+0xe4>)
    18b6:	4798      	blx	r3
    18b8:	231f      	movs	r3, #31
    18ba:	4018      	ands	r0, r3
    18bc:	3b1e      	subs	r3, #30
    18be:	4083      	lsls	r3, r0
    18c0:	4a1c      	ldr	r2, [pc, #112]	; (1934 <lcd_init+0xe8>)
    18c2:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18c4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    18c6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    18c8:	2110      	movs	r1, #16
    18ca:	8b62      	ldrh	r2, [r4, #26]
    18cc:	420a      	tst	r2, r1
    18ce:	d104      	bne.n	18da <lcd_init+0x8e>
		timeout_counter++;
    18d0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18d2:	4283      	cmp	r3, r0
    18d4:	d3f9      	bcc.n	18ca <lcd_init+0x7e>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    18d6:	2310      	movs	r3, #16
    18d8:	8363      	strh	r3, [r4, #26]
	power_on_packet.address = LCD_I2C_ADDRESS;
    18da:	4917      	ldr	r1, [pc, #92]	; (1938 <lcd_init+0xec>)
    18dc:	2328      	movs	r3, #40	; 0x28
    18de:	800b      	strh	r3, [r1, #0]
	power_on_packet.data = on_screen_buffer;
    18e0:	4b16      	ldr	r3, [pc, #88]	; (193c <lcd_init+0xf0>)
    18e2:	604b      	str	r3, [r1, #4]
	power_on_packet.data_length = 2;
    18e4:	2302      	movs	r3, #2
    18e6:	804b      	strh	r3, [r1, #2]
	power_on_packet.high_speed = false;
    18e8:	2300      	movs	r3, #0
    18ea:	724b      	strb	r3, [r1, #9]
	power_on_packet.ten_bit_address = false;
    18ec:	720b      	strb	r3, [r1, #8]
	i2c_master_write_packet_job(&i2c_master_instance, &power_on_packet);
    18ee:	480d      	ldr	r0, [pc, #52]	; (1924 <lcd_init+0xd8>)
    18f0:	4b13      	ldr	r3, [pc, #76]	; (1940 <lcd_init+0xf4>)
    18f2:	4798      	blx	r3
	set_backlight(2);
    18f4:	2002      	movs	r0, #2
    18f6:	4b13      	ldr	r3, [pc, #76]	; (1944 <lcd_init+0xf8>)
    18f8:	4798      	blx	r3
	set_contrast(40);
    18fa:	2028      	movs	r0, #40	; 0x28
    18fc:	4b12      	ldr	r3, [pc, #72]	; (1948 <lcd_init+0xfc>)
    18fe:	4798      	blx	r3
	memcpy(main_screen_buffer, intro_screen, strlen(intro_screen));
    1900:	4a12      	ldr	r2, [pc, #72]	; (194c <lcd_init+0x100>)
    1902:	4b13      	ldr	r3, [pc, #76]	; (1950 <lcd_init+0x104>)
    1904:	cb13      	ldmia	r3!, {r0, r1, r4}
    1906:	c213      	stmia	r2!, {r0, r1, r4}
    1908:	0011      	movs	r1, r2
    190a:	681a      	ldr	r2, [r3, #0]
    190c:	600a      	str	r2, [r1, #0]
    190e:	889a      	ldrh	r2, [r3, #4]
    1910:	808a      	strh	r2, [r1, #4]
    1912:	799b      	ldrb	r3, [r3, #6]
    1914:	718b      	strb	r3, [r1, #6]
	send_buffer(MAIN_SCREEN);
    1916:	2000      	movs	r0, #0
    1918:	4b0e      	ldr	r3, [pc, #56]	; (1954 <lcd_init+0x108>)
    191a:	4798      	blx	r3
 }
    191c:	b00f      	add	sp, #60	; 0x3c
    191e:	bd30      	pop	{r4, r5, pc}
    1920:	00000d48 	.word	0x00000d48
    1924:	20004f54 	.word	0x20004f54
    1928:	00000761 	.word	0x00000761
    192c:	42000c00 	.word	0x42000c00
    1930:	000035ad 	.word	0x000035ad
    1934:	e000e100 	.word	0xe000e100
    1938:	2000501c 	.word	0x2000501c
    193c:	2000000c 	.word	0x2000000c
    1940:	00000d11 	.word	0x00000d11
    1944:	00001805 	.word	0x00001805
    1948:	000017bd 	.word	0x000017bd
    194c:	20004fcc 	.word	0x20004fcc
    1950:	00006b3c 	.word	0x00006b3c
    1954:	000016c5 	.word	0x000016c5

00001958 <control_task>:


}

static void control_task(void * pvParameters)
{
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	b085      	sub	sp, #20
	UNUSED(pvParameters);

	// Set default TODO what should these be?
	lcv_state.setting_state.enable = 0;
    195c:	4c3b      	ldr	r4, [pc, #236]	; (1a4c <control_task+0xf4>)
    195e:	7823      	ldrb	r3, [r4, #0]
    1960:	2201      	movs	r2, #1
    1962:	4393      	bics	r3, r2
    1964:	7023      	strb	r3, [r4, #0]
	lcv_state.setting_state.ie_ratio_tenths = 30;
    1966:	231e      	movs	r3, #30
    1968:	7063      	strb	r3, [r4, #1]
	lcv_state.setting_state.peep_cm_h20 = 14;
    196a:	320d      	adds	r2, #13
    196c:	60a2      	str	r2, [r4, #8]
	lcv_state.setting_state.pip_cm_h20 = 30;
    196e:	60e3      	str	r3, [r4, #12]
	lcv_state.setting_state.breath_per_min = 20;
    1970:	3b0a      	subs	r3, #10
    1972:	6123      	str	r3, [r4, #16]

	// Assume nothing until feedback
	lcv_state.current_state = lcv_state.setting_state;
    1974:	0023      	movs	r3, r4
    1976:	3314      	adds	r3, #20
    1978:	0022      	movs	r2, r4
    197a:	ca23      	ldmia	r2!, {r0, r1, r5}
    197c:	c323      	stmia	r3!, {r0, r1, r5}
    197e:	ca03      	ldmia	r2!, {r0, r1}
    1980:	c303      	stmia	r3!, {r0, r1}

	// Set initial control settings
	lcv_control.peep_to_pip_rampup_ms = 1000;
    1982:	4b33      	ldr	r3, [pc, #204]	; (1a50 <control_task+0xf8>)
    1984:	22fa      	movs	r2, #250	; 0xfa
    1986:	0092      	lsls	r2, r2, #2
    1988:	601a      	str	r2, [r3, #0]
	lcv_control.pip_to_peep_rampdown_ms = 1000;
    198a:	609a      	str	r2, [r3, #8]
		set_alarm(ALARM_P_RAMP_SETTINGS_INVALID, false);
    198c:	2100      	movs	r1, #0
    198e:	2006      	movs	r0, #6
    1990:	4b30      	ldr	r3, [pc, #192]	; (1a54 <control_task+0xfc>)
    1992:	4798      	blx	r3
	if(state->setting_state.ie_ratio_tenths > 10)
    1994:	7860      	ldrb	r0, [r4, #1]
    1996:	280a      	cmp	r0, #10
    1998:	d834      	bhi.n	1a04 <control_task+0xac>
		float ratio_to_use = 1.0 / (state->setting_state.ie_ratio_tenths * 0.1);	// Ratio of 0.5:1 means 1:2, which has 3 sections
    199a:	4b2f      	ldr	r3, [pc, #188]	; (1a58 <control_task+0x100>)
    199c:	4798      	blx	r3
    199e:	4a2f      	ldr	r2, [pc, #188]	; (1a5c <control_task+0x104>)
    19a0:	4b2f      	ldr	r3, [pc, #188]	; (1a60 <control_task+0x108>)
    19a2:	4c30      	ldr	r4, [pc, #192]	; (1a64 <control_task+0x10c>)
    19a4:	47a0      	blx	r4
    19a6:	0002      	movs	r2, r0
    19a8:	000b      	movs	r3, r1
    19aa:	4e2f      	ldr	r6, [pc, #188]	; (1a68 <control_task+0x110>)
    19ac:	2000      	movs	r0, #0
    19ae:	492f      	ldr	r1, [pc, #188]	; (1a6c <control_task+0x114>)
    19b0:	47b0      	blx	r6
    19b2:	4c2f      	ldr	r4, [pc, #188]	; (1a70 <control_task+0x118>)
    19b4:	47a0      	blx	r4
    19b6:	1c05      	adds	r5, r0, #0
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / (ratio_to_use + 1.0);
    19b8:	4b2e      	ldr	r3, [pc, #184]	; (1a74 <control_task+0x11c>)
    19ba:	4798      	blx	r3
    19bc:	2200      	movs	r2, #0
    19be:	4b2b      	ldr	r3, [pc, #172]	; (1a6c <control_task+0x114>)
    19c0:	4f2d      	ldr	r7, [pc, #180]	; (1a78 <control_task+0x120>)
    19c2:	47b8      	blx	r7
    19c4:	0002      	movs	r2, r0
    19c6:	000b      	movs	r3, r1
    19c8:	2000      	movs	r0, #0
    19ca:	492c      	ldr	r1, [pc, #176]	; (1a7c <control_task+0x124>)
    19cc:	47b0      	blx	r6
    19ce:	47a0      	blx	r4
    19d0:	1c06      	adds	r6, r0, #0
		control->pip_hold_ms =	section_size_ms * ratio_to_use;
    19d2:	4c1f      	ldr	r4, [pc, #124]	; (1a50 <control_task+0xf8>)
    19d4:	1c01      	adds	r1, r0, #0
    19d6:	1c28      	adds	r0, r5, #0
    19d8:	4b29      	ldr	r3, [pc, #164]	; (1a80 <control_task+0x128>)
    19da:	4798      	blx	r3
    19dc:	4d29      	ldr	r5, [pc, #164]	; (1a84 <control_task+0x12c>)
    19de:	47a8      	blx	r5
    19e0:	6060      	str	r0, [r4, #4]
		control->peep_hold_ms = section_size_ms; // 1 section by definition
    19e2:	1c30      	adds	r0, r6, #0
    19e4:	47a8      	blx	r5
    19e6:	60e0      	str	r0, [r4, #12]

	calculate_lcv_control_params(&lcv_state, &lcv_control);

	const TickType_t xFrequency = pdMS_TO_TICKS(10);	// 100 Hz rate
	TickType_t xLastWakeTime = xTaskGetTickCount();
    19e8:	4b27      	ldr	r3, [pc, #156]	; (1a88 <control_task+0x130>)
    19ea:	4798      	blx	r3
    19ec:	9003      	str	r0, [sp, #12]

	for (;;)
	{
		// Ensure constant period, but don't use timer so that we have the defined priority of this task
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    19ee:	4e27      	ldr	r6, [pc, #156]	; (1a8c <control_task+0x134>)
	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    19f0:	4d27      	ldr	r5, [pc, #156]	; (1a90 <control_task+0x138>)
    19f2:	4c17      	ldr	r4, [pc, #92]	; (1a50 <control_task+0xf8>)
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
    19f4:	210a      	movs	r1, #10
    19f6:	a803      	add	r0, sp, #12
    19f8:	47b0      	blx	r6
	control->pressure_current_cm_h20 =  (int32_t) get_pressure_sensor_cmH2O_voted();
    19fa:	47a8      	blx	r5
    19fc:	4b21      	ldr	r3, [pc, #132]	; (1a84 <control_task+0x12c>)
    19fe:	4798      	blx	r3
    1a00:	6160      	str	r0, [r4, #20]
    1a02:	e7f7      	b.n	19f4 <control_task+0x9c>
		section_size_ms = breath_cycle_total_time_ms_minus_ramps / ((state->setting_state.ie_ratio_tenths * 0.1) + 1.0);
    1a04:	4b14      	ldr	r3, [pc, #80]	; (1a58 <control_task+0x100>)
    1a06:	4798      	blx	r3
    1a08:	4d16      	ldr	r5, [pc, #88]	; (1a64 <control_task+0x10c>)
    1a0a:	4a14      	ldr	r2, [pc, #80]	; (1a5c <control_task+0x104>)
    1a0c:	4b14      	ldr	r3, [pc, #80]	; (1a60 <control_task+0x108>)
    1a0e:	47a8      	blx	r5
    1a10:	0006      	movs	r6, r0
    1a12:	000f      	movs	r7, r1
    1a14:	2200      	movs	r2, #0
    1a16:	4b15      	ldr	r3, [pc, #84]	; (1a6c <control_task+0x114>)
    1a18:	4c17      	ldr	r4, [pc, #92]	; (1a78 <control_task+0x120>)
    1a1a:	47a0      	blx	r4
    1a1c:	0002      	movs	r2, r0
    1a1e:	000b      	movs	r3, r1
    1a20:	2000      	movs	r0, #0
    1a22:	4916      	ldr	r1, [pc, #88]	; (1a7c <control_task+0x124>)
    1a24:	4c10      	ldr	r4, [pc, #64]	; (1a68 <control_task+0x110>)
    1a26:	47a0      	blx	r4
    1a28:	4b11      	ldr	r3, [pc, #68]	; (1a70 <control_task+0x118>)
    1a2a:	4798      	blx	r3
		control->peep_hold_ms =	section_size_ms * (state->setting_state.ie_ratio_tenths * 0.1);
    1a2c:	4c08      	ldr	r4, [pc, #32]	; (1a50 <control_task+0xf8>)
    1a2e:	9001      	str	r0, [sp, #4]
    1a30:	4b10      	ldr	r3, [pc, #64]	; (1a74 <control_task+0x11c>)
    1a32:	4798      	blx	r3
    1a34:	0032      	movs	r2, r6
    1a36:	003b      	movs	r3, r7
    1a38:	47a8      	blx	r5
    1a3a:	4b16      	ldr	r3, [pc, #88]	; (1a94 <control_task+0x13c>)
    1a3c:	4798      	blx	r3
    1a3e:	60e0      	str	r0, [r4, #12]
		control->pip_hold_ms = section_size_ms; // 1 section by definition
    1a40:	9801      	ldr	r0, [sp, #4]
    1a42:	4b10      	ldr	r3, [pc, #64]	; (1a84 <control_task+0x12c>)
    1a44:	4798      	blx	r3
    1a46:	6060      	str	r0, [r4, #4]
    1a48:	e7ce      	b.n	19e8 <control_task+0x90>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	2000505c 	.word	0x2000505c
    1a50:	20005044 	.word	0x20005044
    1a54:	000015b1 	.word	0x000015b1
    1a58:	000066c5 	.word	0x000066c5
    1a5c:	9999999a 	.word	0x9999999a
    1a60:	3fb99999 	.word	0x3fb99999
    1a64:	00005b31 	.word	0x00005b31
    1a68:	000052c9 	.word	0x000052c9
    1a6c:	3ff00000 	.word	0x3ff00000
    1a70:	0000685d 	.word	0x0000685d
    1a74:	000067b9 	.word	0x000067b9
    1a78:	00004ca9 	.word	0x00004ca9
    1a7c:	408f4000 	.word	0x408f4000
    1a80:	00004651 	.word	0x00004651
    1a84:	00004bc9 	.word	0x00004bc9
    1a88:	00002835 	.word	0x00002835
    1a8c:	00002a79 	.word	0x00002a79
    1a90:	00001401 	.word	0x00001401
    1a94:	0000665d 	.word	0x0000665d

00001a98 <create_control_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_control_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1a98:	b510      	push	{r4, lr}
    1a9a:	b082      	sub	sp, #8
    1a9c:	0002      	movs	r2, r0
	xTaskCreate(control_task, (const char * const) "CONTROL",
    1a9e:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <create_control_task+0x1c>)
    1aa0:	9301      	str	r3, [sp, #4]
    1aa2:	9100      	str	r1, [sp, #0]
    1aa4:	2300      	movs	r3, #0
    1aa6:	4904      	ldr	r1, [pc, #16]	; (1ab8 <create_control_task+0x20>)
    1aa8:	4804      	ldr	r0, [pc, #16]	; (1abc <create_control_task+0x24>)
    1aaa:	4c05      	ldr	r4, [pc, #20]	; (1ac0 <create_control_task+0x28>)
    1aac:	47a0      	blx	r4
	stack_depth_words, NULL, task_priority, &control_task_handle);
    1aae:	b002      	add	sp, #8
    1ab0:	bd10      	pop	{r4, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	20005040 	.word	0x20005040
    1ab8:	00006b50 	.word	0x00006b50
    1abc:	00001959 	.word	0x00001959
    1ac0:	000025c9 	.word	0x000025c9

00001ac4 <vScreenChangeTimerCallback>:
static bool display_main_page = true;

void vScreenChangeTimerCallback( TimerHandle_t xTimer )
{
	UNUSED(xTimer);
	display_main_page = !display_main_page;
    1ac4:	4a02      	ldr	r2, [pc, #8]	; (1ad0 <vScreenChangeTimerCallback+0xc>)
    1ac6:	7813      	ldrb	r3, [r2, #0]
    1ac8:	2101      	movs	r1, #1
    1aca:	404b      	eors	r3, r1
    1acc:	7013      	strb	r3, [r2, #0]
}
    1ace:	4770      	bx	lr
    1ad0:	2000000e 	.word	0x2000000e

00001ad4 <vScreenRefreshTimerCallback>:

void vScreenRefreshTimerCallback( TimerHandle_t xTimer )
{
    1ad4:	b510      	push	{r4, lr}
	UNUSED(xTimer);
	
	// Don't display alarm page if no alarms
	if(!display_main_page)
    1ad6:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <vScreenRefreshTimerCallback+0x34>)
    1ad8:	781b      	ldrb	r3, [r3, #0]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d003      	beq.n	1ae6 <vScreenRefreshTimerCallback+0x12>
		}
	}

	if(display_main_page)
	{
		send_buffer(MAIN_SCREEN);
    1ade:	2000      	movs	r0, #0
    1ae0:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <vScreenRefreshTimerCallback+0x38>)
    1ae2:	4798      	blx	r3
    1ae4:	e00e      	b.n	1b04 <vScreenRefreshTimerCallback+0x30>
		if(!any_alarms_set())
    1ae6:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <vScreenRefreshTimerCallback+0x3c>)
    1ae8:	4798      	blx	r3
    1aea:	2800      	cmp	r0, #0
    1aec:	d103      	bne.n	1af6 <vScreenRefreshTimerCallback+0x22>
			display_main_page = true;
    1aee:	2201      	movs	r2, #1
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <vScreenRefreshTimerCallback+0x34>)
    1af2:	701a      	strb	r2, [r3, #0]
    1af4:	e7f3      	b.n	1ade <vScreenRefreshTimerCallback+0xa>
	if(display_main_page)
    1af6:	4b04      	ldr	r3, [pc, #16]	; (1b08 <vScreenRefreshTimerCallback+0x34>)
    1af8:	781b      	ldrb	r3, [r3, #0]
    1afa:	2b00      	cmp	r3, #0
    1afc:	d1ef      	bne.n	1ade <vScreenRefreshTimerCallback+0xa>
	}
	else
	{
		send_buffer(ALARM_SCREEN);
    1afe:	2001      	movs	r0, #1
    1b00:	4b02      	ldr	r3, [pc, #8]	; (1b0c <vScreenRefreshTimerCallback+0x38>)
    1b02:	4798      	blx	r3
	}
}
    1b04:	bd10      	pop	{r4, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	2000000e 	.word	0x2000000e
    1b0c:	000016c5 	.word	0x000016c5
    1b10:	000015d9 	.word	0x000015d9

00001b14 <hmi_task>:

static void hmi_task(void * pvParameters)
{
    1b14:	b530      	push	{r4, r5, lr}
    1b16:	b083      	sub	sp, #12
	lcd_init();
    1b18:	4b17      	ldr	r3, [pc, #92]	; (1b78 <hmi_task+0x64>)
    1b1a:	4798      	blx	r3

	screen_update_handle = xTimerCreate("SCREEN_TIM",
    1b1c:	4b17      	ldr	r3, [pc, #92]	; (1b7c <hmi_task+0x68>)
    1b1e:	9300      	str	r3, [sp, #0]
    1b20:	2300      	movs	r3, #0
    1b22:	2201      	movs	r2, #1
    1b24:	211e      	movs	r1, #30
    1b26:	4816      	ldr	r0, [pc, #88]	; (1b80 <hmi_task+0x6c>)
    1b28:	4c16      	ldr	r4, [pc, #88]	; (1b84 <hmi_task+0x70>)
    1b2a:	47a0      	blx	r4
    1b2c:	1e04      	subs	r4, r0, #0
				pdMS_TO_TICKS(30),
				pdTRUE,
				(void *) 0,
				vScreenRefreshTimerCallback);
	if(screen_update_handle)
    1b2e:	d008      	beq.n	1b42 <hmi_task+0x2e>
	{
		xTimerStart(screen_update_handle, 0);
    1b30:	4b15      	ldr	r3, [pc, #84]	; (1b88 <hmi_task+0x74>)
    1b32:	4798      	blx	r3
    1b34:	0002      	movs	r2, r0
    1b36:	2300      	movs	r3, #0
    1b38:	9300      	str	r3, [sp, #0]
    1b3a:	2101      	movs	r1, #1
    1b3c:	0020      	movs	r0, r4
    1b3e:	4c13      	ldr	r4, [pc, #76]	; (1b8c <hmi_task+0x78>)
    1b40:	47a0      	blx	r4
	}

	screen_change_handle = xTimerCreate("SCREEN_CHG",
    1b42:	4b13      	ldr	r3, [pc, #76]	; (1b90 <hmi_task+0x7c>)
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	2300      	movs	r3, #0
    1b48:	2201      	movs	r2, #1
    1b4a:	21fa      	movs	r1, #250	; 0xfa
    1b4c:	00c9      	lsls	r1, r1, #3
    1b4e:	4811      	ldr	r0, [pc, #68]	; (1b94 <hmi_task+0x80>)
    1b50:	4c0c      	ldr	r4, [pc, #48]	; (1b84 <hmi_task+0x70>)
    1b52:	47a0      	blx	r4
    1b54:	1e04      	subs	r4, r0, #0
		pdMS_TO_TICKS(2000),
		pdTRUE,
		(void *) 0,
		vScreenChangeTimerCallback);
	if(screen_change_handle)
    1b56:	d008      	beq.n	1b6a <hmi_task+0x56>
	{
		xTimerStart(screen_change_handle, 0);
    1b58:	4b0b      	ldr	r3, [pc, #44]	; (1b88 <hmi_task+0x74>)
    1b5a:	4798      	blx	r3
    1b5c:	0002      	movs	r2, r0
    1b5e:	2300      	movs	r3, #0
    1b60:	9300      	str	r3, [sp, #0]
    1b62:	2101      	movs	r1, #1
    1b64:	0020      	movs	r0, r4
    1b66:	4c09      	ldr	r4, [pc, #36]	; (1b8c <hmi_task+0x78>)
    1b68:	47a0      	blx	r4

	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    1b6a:	25fa      	movs	r5, #250	; 0xfa
    1b6c:	00ad      	lsls	r5, r5, #2
    1b6e:	4c0a      	ldr	r4, [pc, #40]	; (1b98 <hmi_task+0x84>)
    1b70:	0028      	movs	r0, r5
    1b72:	47a0      	blx	r4
    1b74:	e7fc      	b.n	1b70 <hmi_task+0x5c>
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	0000184d 	.word	0x0000184d
    1b7c:	00001ad5 	.word	0x00001ad5
    1b80:	00006b5c 	.word	0x00006b5c
    1b84:	00002f29 	.word	0x00002f29
    1b88:	00002835 	.word	0x00002835
    1b8c:	00002f75 	.word	0x00002f75
    1b90:	00001ac5 	.word	0x00001ac5
    1b94:	00006b68 	.word	0x00006b68
    1b98:	00002af5 	.word	0x00002af5

00001b9c <create_hmi_task>:
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/

void create_hmi_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1b9c:	b510      	push	{r4, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	0002      	movs	r2, r0
	xTaskCreate(hmi_task, (const char * const) "HMI",
    1ba2:	4b05      	ldr	r3, [pc, #20]	; (1bb8 <create_hmi_task+0x1c>)
    1ba4:	9301      	str	r3, [sp, #4]
    1ba6:	9100      	str	r1, [sp, #0]
    1ba8:	2300      	movs	r3, #0
    1baa:	4904      	ldr	r1, [pc, #16]	; (1bbc <create_hmi_task+0x20>)
    1bac:	4804      	ldr	r0, [pc, #16]	; (1bc0 <create_hmi_task+0x24>)
    1bae:	4c05      	ldr	r4, [pc, #20]	; (1bc4 <create_hmi_task+0x28>)
    1bb0:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &hmi_task_handle);
    1bb2:	b002      	add	sp, #8
    1bb4:	bd10      	pop	{r4, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	20005084 	.word	0x20005084
    1bbc:	00006b58 	.word	0x00006b58
    1bc0:	00001b15 	.word	0x00001b15
    1bc4:	000025c9 	.word	0x000025c9

00001bc8 <monitor_task>:

// Task handle
static TaskHandle_t monitor_task_handle = NULL;

static void monitor_task(void * pvParameters)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
	UNUSED(pvParameters);
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    1bca:	25fa      	movs	r5, #250	; 0xfa
    1bcc:	00ad      	lsls	r5, r5, #2
    1bce:	4c02      	ldr	r4, [pc, #8]	; (1bd8 <monitor_task+0x10>)
    1bd0:	0028      	movs	r0, r5
    1bd2:	47a0      	blx	r4
    1bd4:	e7fc      	b.n	1bd0 <monitor_task+0x8>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00002af5 	.word	0x00002af5

00001bdc <create_monitor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_monitor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1bdc:	b510      	push	{r4, lr}
    1bde:	b082      	sub	sp, #8
    1be0:	0002      	movs	r2, r0
	xTaskCreate(monitor_task, (const char * const) "MONITOR",
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <create_monitor_task+0x1c>)
    1be4:	9301      	str	r3, [sp, #4]
    1be6:	9100      	str	r1, [sp, #0]
    1be8:	2300      	movs	r3, #0
    1bea:	4904      	ldr	r1, [pc, #16]	; (1bfc <create_monitor_task+0x20>)
    1bec:	4804      	ldr	r0, [pc, #16]	; (1c00 <create_monitor_task+0x24>)
    1bee:	4c05      	ldr	r4, [pc, #20]	; (1c04 <create_monitor_task+0x28>)
    1bf0:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &monitor_task_handle);
    1bf2:	b002      	add	sp, #8
    1bf4:	bd10      	pop	{r4, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	20005088 	.word	0x20005088
    1bfc:	00006b74 	.word	0x00006b74
    1c00:	00001bc9 	.word	0x00001bc9
    1c04:	000025c9 	.word	0x000025c9

00001c08 <sensor_task>:

/*
*	\brief The sensor task
*/
static void sensor_task(void * pvParameters)
{
    1c08:	b530      	push	{r4, r5, lr}
    1c0a:	b08f      	sub	sp, #60	; 0x3c
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1c0c:	ab01      	add	r3, sp, #4
    1c0e:	2264      	movs	r2, #100	; 0x64
    1c10:	9201      	str	r2, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1c12:	4a2c      	ldr	r2, [pc, #176]	; (1cc4 <sensor_task+0xbc>)
    1c14:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1c16:	2200      	movs	r2, #0
    1c18:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    1c1a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1c1c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1c1e:	2180      	movs	r1, #128	; 0x80
    1c20:	0389      	lsls	r1, r1, #14
    1c22:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1c24:	2101      	movs	r1, #1
    1c26:	4249      	negs	r1, r1
    1c28:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1c2a:	8299      	strh	r1, [r3, #20]
	config->scl_low_timeout  = false;
    1c2c:	3125      	adds	r1, #37	; 0x25
    1c2e:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1c30:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    1c32:	3108      	adds	r1, #8
    1c34:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
    1c36:	3101      	adds	r1, #1
    1c38:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1c3a:	3101      	adds	r1, #1
    1c3c:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
    1c3e:	32d7      	adds	r2, #215	; 0xd7
    1c40:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PIN_PA22C_SERCOM3_PAD0;
    1c42:	3ac1      	subs	r2, #193	; 0xc1
    1c44:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PIN_PA23C_SERCOM3_PAD1;
    1c46:	3201      	adds	r2, #1
    1c48:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, FLOW_METER_SERCOM, &config_i2c_master) != STATUS_OK);
    1c4a:	4d1f      	ldr	r5, [pc, #124]	; (1cc8 <sensor_task+0xc0>)
    1c4c:	4c1f      	ldr	r4, [pc, #124]	; (1ccc <sensor_task+0xc4>)
    1c4e:	aa01      	add	r2, sp, #4
    1c50:	491f      	ldr	r1, [pc, #124]	; (1cd0 <sensor_task+0xc8>)
    1c52:	0028      	movs	r0, r5
    1c54:	47a0      	blx	r4
    1c56:	2800      	cmp	r0, #0
    1c58:	d1f9      	bne.n	1c4e <sensor_task+0x46>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1c5a:	4b1b      	ldr	r3, [pc, #108]	; (1cc8 <sensor_task+0xc0>)
    1c5c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1c5e:	2307      	movs	r3, #7
    1c60:	69e2      	ldr	r2, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1c62:	4213      	tst	r3, r2
    1c64:	d1fc      	bne.n	1c60 <sensor_task+0x58>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1c66:	6823      	ldr	r3, [r4, #0]
    1c68:	2202      	movs	r2, #2
    1c6a:	4313      	orrs	r3, r2
    1c6c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c6e:	4d16      	ldr	r5, [pc, #88]	; (1cc8 <sensor_task+0xc0>)
    1c70:	6828      	ldr	r0, [r5, #0]
    1c72:	4b18      	ldr	r3, [pc, #96]	; (1cd4 <sensor_task+0xcc>)
    1c74:	4798      	blx	r3
    1c76:	231f      	movs	r3, #31
    1c78:	4018      	ands	r0, r3
    1c7a:	3b1e      	subs	r3, #30
    1c7c:	4083      	lsls	r3, r0
    1c7e:	4a16      	ldr	r2, [pc, #88]	; (1cd8 <sensor_task+0xd0>)
    1c80:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1c82:	88e9      	ldrh	r1, [r5, #6]
	uint32_t timeout_counter = 0;
    1c84:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1c86:	2210      	movs	r2, #16
    1c88:	e002      	b.n	1c90 <sensor_task+0x88>
		timeout_counter++;
    1c8a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1c8c:	428b      	cmp	r3, r1
    1c8e:	d203      	bcs.n	1c98 <sensor_task+0x90>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1c90:	8b60      	ldrh	r0, [r4, #26]
    1c92:	4210      	tst	r0, r2
    1c94:	d0f9      	beq.n	1c8a <sensor_task+0x82>
    1c96:	e001      	b.n	1c9c <sensor_task+0x94>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1c98:	2310      	movs	r3, #16
    1c9a:	8363      	strh	r3, [r4, #26]
	flow_sensor_power_on();
    1c9c:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <sensor_task+0xd4>)
    1c9e:	4798      	blx	r3
	flow_sensor_init(&i2c_master_instance);
    1ca0:	4c09      	ldr	r4, [pc, #36]	; (1cc8 <sensor_task+0xc0>)
    1ca2:	0020      	movs	r0, r4
    1ca4:	4b0e      	ldr	r3, [pc, #56]	; (1ce0 <sensor_task+0xd8>)
    1ca6:	4798      	blx	r3
	adc_interface_init();
    1ca8:	4b0e      	ldr	r3, [pc, #56]	; (1ce4 <sensor_task+0xdc>)
    1caa:	4798      	blx	r3
	UNUSED(pvParameters);

	sensor_hw_init();

	vTaskDelay(pdMS_TO_TICKS(10));
    1cac:	200a      	movs	r0, #10
    1cae:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <sensor_task+0xe0>)
    1cb0:	4798      	blx	r3
	flow_sensor_request_flow_slm(&i2c_master_instance); // first read is invalid
    1cb2:	0020      	movs	r0, r4
    1cb4:	4b0d      	ldr	r3, [pc, #52]	; (1cec <sensor_task+0xe4>)
    1cb6:	4798      	blx	r3
	
	for (;;)
	{
		vTaskDelay(pdMS_TO_TICKS(1000)); // TODO do something here
    1cb8:	25fa      	movs	r5, #250	; 0xfa
    1cba:	00ad      	lsls	r5, r5, #2
    1cbc:	4c0a      	ldr	r4, [pc, #40]	; (1ce8 <sensor_task+0xe0>)
    1cbe:	0028      	movs	r0, r5
    1cc0:	47a0      	blx	r4
    1cc2:	e7fc      	b.n	1cbe <sensor_task+0xb6>
    1cc4:	00000d48 	.word	0x00000d48
    1cc8:	2000508c 	.word	0x2000508c
    1ccc:	00000761 	.word	0x00000761
    1cd0:	42001400 	.word	0x42001400
    1cd4:	000035ad 	.word	0x000035ad
    1cd8:	e000e100 	.word	0xe000e100
    1cdc:	00001669 	.word	0x00001669
    1ce0:	00001649 	.word	0x00001649
    1ce4:	000012b1 	.word	0x000012b1
    1ce8:	00002af5 	.word	0x00002af5
    1cec:	00001679 	.word	0x00001679

00001cf0 <create_sensor_task>:
*
*	\param stack_depth_words The depth of the stack in words
*	\param task_priority The task priority
*/
void create_sensor_task(uint16_t stack_depth_words, unsigned portBASE_TYPE task_priority)
{
    1cf0:	b510      	push	{r4, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	0002      	movs	r2, r0
	xTaskCreate(sensor_task, (const char * const) "SENSOR",
    1cf6:	4b05      	ldr	r3, [pc, #20]	; (1d0c <create_sensor_task+0x1c>)
    1cf8:	9301      	str	r3, [sp, #4]
    1cfa:	9100      	str	r1, [sp, #0]
    1cfc:	2300      	movs	r3, #0
    1cfe:	4904      	ldr	r1, [pc, #16]	; (1d10 <create_sensor_task+0x20>)
    1d00:	4804      	ldr	r0, [pc, #16]	; (1d14 <create_sensor_task+0x24>)
    1d02:	4c05      	ldr	r4, [pc, #20]	; (1d18 <create_sensor_task+0x28>)
    1d04:	47a0      	blx	r4
		stack_depth_words, NULL, task_priority, &sensor_task_handle);
    1d06:	b002      	add	sp, #8
    1d08:	bd10      	pop	{r4, pc}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	200050b4 	.word	0x200050b4
    1d10:	00006b7c 	.word	0x00006b7c
    1d14:	00001c09 	.word	0x00001c09
    1d18:	000025c9 	.word	0x000025c9

00001d1c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d1c:	0003      	movs	r3, r0
    1d1e:	3308      	adds	r3, #8
    1d20:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1d22:	2201      	movs	r2, #1
    1d24:	4252      	negs	r2, r2
    1d26:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d28:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d2a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1d2c:	2300      	movs	r3, #0
    1d2e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1d30:	4770      	bx	lr

00001d32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1d32:	2300      	movs	r3, #0
    1d34:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1d36:	4770      	bx	lr

00001d38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1d38:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1d3a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1d3c:	689a      	ldr	r2, [r3, #8]
    1d3e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1d40:	689a      	ldr	r2, [r3, #8]
    1d42:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1d44:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d46:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1d48:	6803      	ldr	r3, [r0, #0]
    1d4a:	3301      	adds	r3, #1
    1d4c:	6003      	str	r3, [r0, #0]
}
    1d4e:	4770      	bx	lr

00001d50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1d50:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1d52:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d54:	0002      	movs	r2, r0
    1d56:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    1d58:	1c63      	adds	r3, r4, #1
    1d5a:	d102      	bne.n	1d62 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    1d5c:	6902      	ldr	r2, [r0, #16]
    1d5e:	e004      	b.n	1d6a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d60:	001a      	movs	r2, r3
    1d62:	6853      	ldr	r3, [r2, #4]
    1d64:	681d      	ldr	r5, [r3, #0]
    1d66:	42ac      	cmp	r4, r5
    1d68:	d2fa      	bcs.n	1d60 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1d6a:	6853      	ldr	r3, [r2, #4]
    1d6c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1d6e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1d70:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1d72:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1d76:	6803      	ldr	r3, [r0, #0]
    1d78:	3301      	adds	r3, #1
    1d7a:	6003      	str	r3, [r0, #0]
}
    1d7c:	bd30      	pop	{r4, r5, pc}

00001d7e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1d7e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1d80:	6842      	ldr	r2, [r0, #4]
    1d82:	6881      	ldr	r1, [r0, #8]
    1d84:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1d86:	6882      	ldr	r2, [r0, #8]
    1d88:	6841      	ldr	r1, [r0, #4]
    1d8a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1d8c:	685a      	ldr	r2, [r3, #4]
    1d8e:	4290      	cmp	r0, r2
    1d90:	d006      	beq.n	1da0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1d92:	2200      	movs	r2, #0
    1d94:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1d96:	681a      	ldr	r2, [r3, #0]
    1d98:	3a01      	subs	r2, #1
    1d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1d9c:	6818      	ldr	r0, [r3, #0]
}
    1d9e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1da0:	6882      	ldr	r2, [r0, #8]
    1da2:	605a      	str	r2, [r3, #4]
    1da4:	e7f5      	b.n	1d92 <uxListRemove+0x14>
	...

00001da8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1da8:	b510      	push	{r4, lr}
    1daa:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1dac:	4b03      	ldr	r3, [pc, #12]	; (1dbc <prvIsQueueEmpty+0x14>)
    1dae:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1db0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1db2:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <prvIsQueueEmpty+0x18>)
    1db4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1db6:	4260      	negs	r0, r4
    1db8:	4160      	adcs	r0, r4

	return xReturn;
}
    1dba:	bd10      	pop	{r4, pc}
    1dbc:	00001021 	.word	0x00001021
    1dc0:	00001039 	.word	0x00001039

00001dc4 <prvCopyDataToQueue>:
{
    1dc4:	b570      	push	{r4, r5, r6, lr}
    1dc6:	0004      	movs	r4, r0
    1dc8:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1dca:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1dcc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1dce:	2a00      	cmp	r2, #0
    1dd0:	d10b      	bne.n	1dea <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    1dd2:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1dd4:	6823      	ldr	r3, [r4, #0]
    1dd6:	4283      	cmp	r3, r0
    1dd8:	d104      	bne.n	1de4 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1dda:	6860      	ldr	r0, [r4, #4]
    1ddc:	4b16      	ldr	r3, [pc, #88]	; (1e38 <prvCopyDataToQueue+0x74>)
    1dde:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1de0:	2300      	movs	r3, #0
    1de2:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    1de4:	3501      	adds	r5, #1
    1de6:	63a5      	str	r5, [r4, #56]	; 0x38
}
    1de8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    1dea:	2e00      	cmp	r6, #0
    1dec:	d10e      	bne.n	1e0c <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1dee:	6880      	ldr	r0, [r0, #8]
    1df0:	4b12      	ldr	r3, [pc, #72]	; (1e3c <prvCopyDataToQueue+0x78>)
    1df2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1df4:	68a3      	ldr	r3, [r4, #8]
    1df6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1df8:	4694      	mov	ip, r2
    1dfa:	4463      	add	r3, ip
    1dfc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    1dfe:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1e00:	6862      	ldr	r2, [r4, #4]
    1e02:	4293      	cmp	r3, r2
    1e04:	d3ee      	bcc.n	1de4 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1e06:	6823      	ldr	r3, [r4, #0]
    1e08:	60a3      	str	r3, [r4, #8]
    1e0a:	e7eb      	b.n	1de4 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e0c:	68c0      	ldr	r0, [r0, #12]
    1e0e:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <prvCopyDataToQueue+0x78>)
    1e10:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e14:	425b      	negs	r3, r3
    1e16:	68e2      	ldr	r2, [r4, #12]
    1e18:	18d2      	adds	r2, r2, r3
    1e1a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1e1c:	6821      	ldr	r1, [r4, #0]
    1e1e:	428a      	cmp	r2, r1
    1e20:	d203      	bcs.n	1e2a <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1e22:	6862      	ldr	r2, [r4, #4]
    1e24:	4694      	mov	ip, r2
    1e26:	4463      	add	r3, ip
    1e28:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    1e2a:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    1e2c:	2e02      	cmp	r6, #2
    1e2e:	d1d9      	bne.n	1de4 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1e30:	4285      	cmp	r5, r0
    1e32:	d0d7      	beq.n	1de4 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    1e34:	3d01      	subs	r5, #1
    1e36:	e7d5      	b.n	1de4 <prvCopyDataToQueue+0x20>
    1e38:	00002da9 	.word	0x00002da9
    1e3c:	000069f5 	.word	0x000069f5

00001e40 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1e40:	b570      	push	{r4, r5, r6, lr}
    1e42:	b082      	sub	sp, #8
    1e44:	9001      	str	r0, [sp, #4]
    1e46:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1e48:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1e4a:	2c00      	cmp	r4, #0
    1e4c:	d005      	beq.n	1e5a <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1e4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1e50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1e52:	4299      	cmp	r1, r3
    1e54:	d303      	bcc.n	1e5e <prvNotifyQueueSetContainer+0x1e>
    1e56:	b672      	cpsid	i
    1e58:	e7fe      	b.n	1e58 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    1e5a:	b672      	cpsid	i
    1e5c:	e7fe      	b.n	1e5c <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1e5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    1e60:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1e62:	428b      	cmp	r3, r1
    1e64:	d802      	bhi.n	1e6c <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1e66:	0030      	movs	r0, r6
    1e68:	b002      	add	sp, #8
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    1e6c:	2345      	movs	r3, #69	; 0x45
    1e6e:	5ce5      	ldrb	r5, [r4, r3]
    1e70:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1e72:	a901      	add	r1, sp, #4
    1e74:	0020      	movs	r0, r4
    1e76:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <prvNotifyQueueSetContainer+0x60>)
    1e78:	4798      	blx	r3
    1e7a:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    1e7c:	1c6b      	adds	r3, r5, #1
    1e7e:	d10a      	bne.n	1e96 <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e82:	2b00      	cmp	r3, #0
    1e84:	d0ef      	beq.n	1e66 <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1e86:	0020      	movs	r0, r4
    1e88:	3024      	adds	r0, #36	; 0x24
    1e8a:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <prvNotifyQueueSetContainer+0x64>)
    1e8c:	4798      	blx	r3
    1e8e:	2800      	cmp	r0, #0
    1e90:	d0e9      	beq.n	1e66 <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    1e92:	2601      	movs	r6, #1
    1e94:	e7e7      	b.n	1e66 <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1e96:	3501      	adds	r5, #1
    1e98:	b26d      	sxtb	r5, r5
    1e9a:	2345      	movs	r3, #69	; 0x45
    1e9c:	54e5      	strb	r5, [r4, r3]
    1e9e:	e7e2      	b.n	1e66 <prvNotifyQueueSetContainer+0x26>
    1ea0:	00001dc5 	.word	0x00001dc5
    1ea4:	00002c6d 	.word	0x00002c6d

00001ea8 <prvCopyDataFromQueue>:
{
    1ea8:	b510      	push	{r4, lr}
    1eaa:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1eac:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1eae:	2a00      	cmp	r2, #0
    1eb0:	d00b      	beq.n	1eca <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1eb2:	68c3      	ldr	r3, [r0, #12]
    1eb4:	189b      	adds	r3, r3, r2
    1eb6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1eb8:	6841      	ldr	r1, [r0, #4]
    1eba:	428b      	cmp	r3, r1
    1ebc:	d301      	bcc.n	1ec2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1ebe:	6803      	ldr	r3, [r0, #0]
    1ec0:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1ec2:	68c1      	ldr	r1, [r0, #12]
    1ec4:	0020      	movs	r0, r4
    1ec6:	4b01      	ldr	r3, [pc, #4]	; (1ecc <prvCopyDataFromQueue+0x24>)
    1ec8:	4798      	blx	r3
}
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	000069f5 	.word	0x000069f5

00001ed0 <prvUnlockQueue>:
{
    1ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ed2:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    1ed4:	4b25      	ldr	r3, [pc, #148]	; (1f6c <prvUnlockQueue+0x9c>)
    1ed6:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    1ed8:	2345      	movs	r3, #69	; 0x45
    1eda:	5cfc      	ldrb	r4, [r7, r3]
    1edc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1ede:	2c00      	cmp	r4, #0
    1ee0:	dd1c      	ble.n	1f1c <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1ee2:	4e23      	ldr	r6, [pc, #140]	; (1f70 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ee4:	4d23      	ldr	r5, [pc, #140]	; (1f74 <prvUnlockQueue+0xa4>)
    1ee6:	e00b      	b.n	1f00 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eea:	2b00      	cmp	r3, #0
    1eec:	d016      	beq.n	1f1c <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1eee:	0038      	movs	r0, r7
    1ef0:	3024      	adds	r0, #36	; 0x24
    1ef2:	47a8      	blx	r5
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d10e      	bne.n	1f16 <prvUnlockQueue+0x46>
    1ef8:	3c01      	subs	r4, #1
    1efa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1efc:	2c00      	cmp	r4, #0
    1efe:	d00d      	beq.n	1f1c <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    1f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f02:	2b00      	cmp	r3, #0
    1f04:	d0f0      	beq.n	1ee8 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    1f06:	2100      	movs	r1, #0
    1f08:	0038      	movs	r0, r7
    1f0a:	47b0      	blx	r6
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d0f3      	beq.n	1ef8 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    1f10:	4b19      	ldr	r3, [pc, #100]	; (1f78 <prvUnlockQueue+0xa8>)
    1f12:	4798      	blx	r3
    1f14:	e7f0      	b.n	1ef8 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    1f16:	4b18      	ldr	r3, [pc, #96]	; (1f78 <prvUnlockQueue+0xa8>)
    1f18:	4798      	blx	r3
    1f1a:	e7ed      	b.n	1ef8 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    1f1c:	22ff      	movs	r2, #255	; 0xff
    1f1e:	2345      	movs	r3, #69	; 0x45
    1f20:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    1f22:	4b16      	ldr	r3, [pc, #88]	; (1f7c <prvUnlockQueue+0xac>)
    1f24:	4798      	blx	r3
	taskENTER_CRITICAL();
    1f26:	4b11      	ldr	r3, [pc, #68]	; (1f6c <prvUnlockQueue+0x9c>)
    1f28:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    1f2a:	2344      	movs	r3, #68	; 0x44
    1f2c:	5cfc      	ldrb	r4, [r7, r3]
    1f2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1f30:	2c00      	cmp	r4, #0
    1f32:	dd14      	ble.n	1f5e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f34:	693b      	ldr	r3, [r7, #16]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d011      	beq.n	1f5e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1f3a:	003d      	movs	r5, r7
    1f3c:	3510      	adds	r5, #16
    1f3e:	4e0d      	ldr	r6, [pc, #52]	; (1f74 <prvUnlockQueue+0xa4>)
    1f40:	e006      	b.n	1f50 <prvUnlockQueue+0x80>
    1f42:	3c01      	subs	r4, #1
    1f44:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    1f46:	2c00      	cmp	r4, #0
    1f48:	d009      	beq.n	1f5e <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f4a:	693b      	ldr	r3, [r7, #16]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d006      	beq.n	1f5e <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1f50:	0028      	movs	r0, r5
    1f52:	47b0      	blx	r6
    1f54:	2800      	cmp	r0, #0
    1f56:	d0f4      	beq.n	1f42 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    1f58:	4b07      	ldr	r3, [pc, #28]	; (1f78 <prvUnlockQueue+0xa8>)
    1f5a:	4798      	blx	r3
    1f5c:	e7f1      	b.n	1f42 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    1f5e:	22ff      	movs	r2, #255	; 0xff
    1f60:	2344      	movs	r3, #68	; 0x44
    1f62:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    1f64:	4b05      	ldr	r3, [pc, #20]	; (1f7c <prvUnlockQueue+0xac>)
    1f66:	4798      	blx	r3
}
    1f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	00001021 	.word	0x00001021
    1f70:	00001e41 	.word	0x00001e41
    1f74:	00002c6d 	.word	0x00002c6d
    1f78:	00002d7d 	.word	0x00002d7d
    1f7c:	00001039 	.word	0x00001039

00001f80 <xQueueGenericReset>:
{
    1f80:	b570      	push	{r4, r5, r6, lr}
    1f82:	0004      	movs	r4, r0
    1f84:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    1f86:	2800      	cmp	r0, #0
    1f88:	d021      	beq.n	1fce <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    1f8a:	4b17      	ldr	r3, [pc, #92]	; (1fe8 <xQueueGenericReset+0x68>)
    1f8c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1f8e:	6822      	ldr	r2, [r4, #0]
    1f90:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1f94:	434b      	muls	r3, r1
    1f96:	18d0      	adds	r0, r2, r3
    1f98:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1f9a:	2000      	movs	r0, #0
    1f9c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1f9e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1fa0:	1a5b      	subs	r3, r3, r1
    1fa2:	18d3      	adds	r3, r2, r3
    1fa4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    1fa6:	23ff      	movs	r3, #255	; 0xff
    1fa8:	2244      	movs	r2, #68	; 0x44
    1faa:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    1fac:	3201      	adds	r2, #1
    1fae:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    1fb0:	2d00      	cmp	r5, #0
    1fb2:	d111      	bne.n	1fd8 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1fb4:	6923      	ldr	r3, [r4, #16]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d005      	beq.n	1fc6 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1fba:	0020      	movs	r0, r4
    1fbc:	3010      	adds	r0, #16
    1fbe:	4b0b      	ldr	r3, [pc, #44]	; (1fec <xQueueGenericReset+0x6c>)
    1fc0:	4798      	blx	r3
    1fc2:	2800      	cmp	r0, #0
    1fc4:	d105      	bne.n	1fd2 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    1fc6:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <xQueueGenericReset+0x70>)
    1fc8:	4798      	blx	r3
}
    1fca:	2001      	movs	r0, #1
    1fcc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    1fce:	b672      	cpsid	i
    1fd0:	e7fe      	b.n	1fd0 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    1fd2:	4b08      	ldr	r3, [pc, #32]	; (1ff4 <xQueueGenericReset+0x74>)
    1fd4:	4798      	blx	r3
    1fd6:	e7f6      	b.n	1fc6 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1fd8:	0020      	movs	r0, r4
    1fda:	3010      	adds	r0, #16
    1fdc:	4d06      	ldr	r5, [pc, #24]	; (1ff8 <xQueueGenericReset+0x78>)
    1fde:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1fe0:	0020      	movs	r0, r4
    1fe2:	3024      	adds	r0, #36	; 0x24
    1fe4:	47a8      	blx	r5
    1fe6:	e7ee      	b.n	1fc6 <xQueueGenericReset+0x46>
    1fe8:	00001021 	.word	0x00001021
    1fec:	00002c6d 	.word	0x00002c6d
    1ff0:	00001039 	.word	0x00001039
    1ff4:	00001009 	.word	0x00001009
    1ff8:	00001d1d 	.word	0x00001d1d

00001ffc <xQueueGenericCreate>:
	{
    1ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffe:	0006      	movs	r6, r0
    2000:	000d      	movs	r5, r1
    2002:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    2004:	2800      	cmp	r0, #0
    2006:	d101      	bne.n	200c <STACK_SIZE+0xc>
    2008:	b672      	cpsid	i
    200a:	e7fe      	b.n	200a <STACK_SIZE+0xa>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    200c:	0008      	movs	r0, r1
    200e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    2010:	3054      	adds	r0, #84	; 0x54
    2012:	4b0b      	ldr	r3, [pc, #44]	; (2040 <STACK_SIZE+0x40>)
    2014:	4798      	blx	r3
    2016:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2018:	d010      	beq.n	203c <STACK_SIZE+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
    201a:	2d00      	cmp	r5, #0
    201c:	d003      	beq.n	2026 <STACK_SIZE+0x26>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    201e:	0003      	movs	r3, r0
    2020:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2022:	6003      	str	r3, [r0, #0]
    2024:	e000      	b.n	2028 <STACK_SIZE+0x28>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2026:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    2028:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    202a:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    202c:	2101      	movs	r1, #1
    202e:	0020      	movs	r0, r4
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <STACK_SIZE+0x44>)
    2032:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    2034:	2350      	movs	r3, #80	; 0x50
    2036:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    2038:	2300      	movs	r3, #0
    203a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    203c:	0020      	movs	r0, r4
    203e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2040:	000010bd 	.word	0x000010bd
    2044:	00001f81 	.word	0x00001f81

00002048 <xQueueGenericSend>:
{
    2048:	b5f0      	push	{r4, r5, r6, r7, lr}
    204a:	46ce      	mov	lr, r9
    204c:	4647      	mov	r7, r8
    204e:	b580      	push	{r7, lr}
    2050:	b085      	sub	sp, #20
    2052:	0004      	movs	r4, r0
    2054:	000f      	movs	r7, r1
    2056:	9201      	str	r2, [sp, #4]
    2058:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    205a:	2800      	cmp	r0, #0
    205c:	d00c      	beq.n	2078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    205e:	2900      	cmp	r1, #0
    2060:	d00c      	beq.n	207c <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2062:	2d02      	cmp	r5, #2
    2064:	d00f      	beq.n	2086 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2066:	4b4e      	ldr	r3, [pc, #312]	; (21a0 <xQueueGenericSend+0x158>)
    2068:	4798      	blx	r3
    206a:	2800      	cmp	r0, #0
    206c:	d110      	bne.n	2090 <xQueueGenericSend+0x48>
    206e:	9b01      	ldr	r3, [sp, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d011      	beq.n	2098 <xQueueGenericSend+0x50>
    2074:	b672      	cpsid	i
    2076:	e7fe      	b.n	2076 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    2078:	b672      	cpsid	i
    207a:	e7fe      	b.n	207a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    207c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    207e:	2b00      	cmp	r3, #0
    2080:	d0ef      	beq.n	2062 <xQueueGenericSend+0x1a>
    2082:	b672      	cpsid	i
    2084:	e7fe      	b.n	2084 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2088:	2b01      	cmp	r3, #1
    208a:	d0ec      	beq.n	2066 <xQueueGenericSend+0x1e>
    208c:	b672      	cpsid	i
    208e:	e7fe      	b.n	208e <xQueueGenericSend+0x46>
    2090:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2092:	4b44      	ldr	r3, [pc, #272]	; (21a4 <xQueueGenericSend+0x15c>)
    2094:	4698      	mov	r8, r3
    2096:	e04c      	b.n	2132 <xQueueGenericSend+0xea>
    2098:	2600      	movs	r6, #0
    209a:	e7fa      	b.n	2092 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    209c:	002a      	movs	r2, r5
    209e:	0039      	movs	r1, r7
    20a0:	0020      	movs	r0, r4
    20a2:	4b41      	ldr	r3, [pc, #260]	; (21a8 <xQueueGenericSend+0x160>)
    20a4:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    20a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    20a8:	2b00      	cmp	r3, #0
    20aa:	d00f      	beq.n	20cc <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    20ac:	0029      	movs	r1, r5
    20ae:	0020      	movs	r0, r4
    20b0:	4b3e      	ldr	r3, [pc, #248]	; (21ac <xQueueGenericSend+0x164>)
    20b2:	4798      	blx	r3
    20b4:	2800      	cmp	r0, #0
    20b6:	d001      	beq.n	20bc <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    20b8:	4b3d      	ldr	r3, [pc, #244]	; (21b0 <xQueueGenericSend+0x168>)
    20ba:	4798      	blx	r3
				taskEXIT_CRITICAL();
    20bc:	4b3d      	ldr	r3, [pc, #244]	; (21b4 <xQueueGenericSend+0x16c>)
    20be:	4798      	blx	r3
				return pdPASS;
    20c0:	2001      	movs	r0, #1
}
    20c2:	b005      	add	sp, #20
    20c4:	bc0c      	pop	{r2, r3}
    20c6:	4690      	mov	r8, r2
    20c8:	4699      	mov	r9, r3
    20ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20ce:	2b00      	cmp	r3, #0
    20d0:	d008      	beq.n	20e4 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20d2:	0020      	movs	r0, r4
    20d4:	3024      	adds	r0, #36	; 0x24
    20d6:	4b38      	ldr	r3, [pc, #224]	; (21b8 <xQueueGenericSend+0x170>)
    20d8:	4798      	blx	r3
    20da:	2800      	cmp	r0, #0
    20dc:	d0ee      	beq.n	20bc <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    20de:	4b34      	ldr	r3, [pc, #208]	; (21b0 <xQueueGenericSend+0x168>)
    20e0:	4798      	blx	r3
    20e2:	e7eb      	b.n	20bc <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    20e4:	2800      	cmp	r0, #0
    20e6:	d0e9      	beq.n	20bc <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    20e8:	4b31      	ldr	r3, [pc, #196]	; (21b0 <xQueueGenericSend+0x168>)
    20ea:	4798      	blx	r3
    20ec:	e7e6      	b.n	20bc <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    20ee:	4b31      	ldr	r3, [pc, #196]	; (21b4 <xQueueGenericSend+0x16c>)
    20f0:	4798      	blx	r3
					return errQUEUE_FULL;
    20f2:	2000      	movs	r0, #0
    20f4:	e7e5      	b.n	20c2 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    20f6:	4b2f      	ldr	r3, [pc, #188]	; (21b4 <xQueueGenericSend+0x16c>)
    20f8:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    20fa:	a901      	add	r1, sp, #4
    20fc:	a802      	add	r0, sp, #8
    20fe:	4b2f      	ldr	r3, [pc, #188]	; (21bc <xQueueGenericSend+0x174>)
    2100:	4798      	blx	r3
    2102:	2800      	cmp	r0, #0
    2104:	d144      	bne.n	2190 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    2106:	4b27      	ldr	r3, [pc, #156]	; (21a4 <xQueueGenericSend+0x15c>)
    2108:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    210a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    210c:	4699      	mov	r9, r3
    210e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    2110:	4b28      	ldr	r3, [pc, #160]	; (21b4 <xQueueGenericSend+0x16c>)
    2112:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2114:	45b1      	cmp	r9, r6
    2116:	d135      	bne.n	2184 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2118:	0020      	movs	r0, r4
    211a:	3010      	adds	r0, #16
    211c:	9901      	ldr	r1, [sp, #4]
    211e:	4b28      	ldr	r3, [pc, #160]	; (21c0 <xQueueGenericSend+0x178>)
    2120:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2122:	0020      	movs	r0, r4
    2124:	4b27      	ldr	r3, [pc, #156]	; (21c4 <xQueueGenericSend+0x17c>)
    2126:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2128:	4b27      	ldr	r3, [pc, #156]	; (21c8 <xQueueGenericSend+0x180>)
    212a:	4798      	blx	r3
    212c:	2800      	cmp	r0, #0
    212e:	d026      	beq.n	217e <xQueueGenericSend+0x136>
    2130:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    2132:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2134:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2136:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    2138:	4293      	cmp	r3, r2
    213a:	d3af      	bcc.n	209c <xQueueGenericSend+0x54>
    213c:	2d02      	cmp	r5, #2
    213e:	d0ad      	beq.n	209c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    2140:	9b01      	ldr	r3, [sp, #4]
    2142:	2b00      	cmp	r3, #0
    2144:	d0d3      	beq.n	20ee <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    2146:	2e00      	cmp	r6, #0
    2148:	d102      	bne.n	2150 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    214a:	a802      	add	r0, sp, #8
    214c:	4b1f      	ldr	r3, [pc, #124]	; (21cc <xQueueGenericSend+0x184>)
    214e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    2150:	4b18      	ldr	r3, [pc, #96]	; (21b4 <xQueueGenericSend+0x16c>)
    2152:	4798      	blx	r3
		vTaskSuspendAll();
    2154:	4b1e      	ldr	r3, [pc, #120]	; (21d0 <xQueueGenericSend+0x188>)
    2156:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2158:	4b12      	ldr	r3, [pc, #72]	; (21a4 <xQueueGenericSend+0x15c>)
    215a:	4798      	blx	r3
    215c:	2344      	movs	r3, #68	; 0x44
    215e:	5ce3      	ldrb	r3, [r4, r3]
    2160:	b25b      	sxtb	r3, r3
    2162:	3301      	adds	r3, #1
    2164:	d102      	bne.n	216c <xQueueGenericSend+0x124>
    2166:	2200      	movs	r2, #0
    2168:	2344      	movs	r3, #68	; 0x44
    216a:	54e2      	strb	r2, [r4, r3]
    216c:	2345      	movs	r3, #69	; 0x45
    216e:	5ce3      	ldrb	r3, [r4, r3]
    2170:	b25b      	sxtb	r3, r3
    2172:	3301      	adds	r3, #1
    2174:	d1bf      	bne.n	20f6 <xQueueGenericSend+0xae>
    2176:	2200      	movs	r2, #0
    2178:	2345      	movs	r3, #69	; 0x45
    217a:	54e2      	strb	r2, [r4, r3]
    217c:	e7bb      	b.n	20f6 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    217e:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <xQueueGenericSend+0x168>)
    2180:	4798      	blx	r3
    2182:	e7d5      	b.n	2130 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    2184:	0020      	movs	r0, r4
    2186:	4b0f      	ldr	r3, [pc, #60]	; (21c4 <xQueueGenericSend+0x17c>)
    2188:	4798      	blx	r3
				( void ) xTaskResumeAll();
    218a:	4b0f      	ldr	r3, [pc, #60]	; (21c8 <xQueueGenericSend+0x180>)
    218c:	4798      	blx	r3
    218e:	e7cf      	b.n	2130 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    2190:	0020      	movs	r0, r4
    2192:	4b0c      	ldr	r3, [pc, #48]	; (21c4 <xQueueGenericSend+0x17c>)
    2194:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2196:	4b0c      	ldr	r3, [pc, #48]	; (21c8 <xQueueGenericSend+0x180>)
    2198:	4798      	blx	r3
			return errQUEUE_FULL;
    219a:	2000      	movs	r0, #0
    219c:	e791      	b.n	20c2 <xQueueGenericSend+0x7a>
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	00002d89 	.word	0x00002d89
    21a4:	00001021 	.word	0x00001021
    21a8:	00001dc5 	.word	0x00001dc5
    21ac:	00001e41 	.word	0x00001e41
    21b0:	00001009 	.word	0x00001009
    21b4:	00001039 	.word	0x00001039
    21b8:	00002c6d 	.word	0x00002c6d
    21bc:	00002d0d 	.word	0x00002d0d
    21c0:	00002c09 	.word	0x00002c09
    21c4:	00001ed1 	.word	0x00001ed1
    21c8:	00002979 	.word	0x00002979
    21cc:	00002cf5 	.word	0x00002cf5
    21d0:	00002825 	.word	0x00002825

000021d4 <xQueueGenericSendFromISR>:
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	b083      	sub	sp, #12
    21d8:	0004      	movs	r4, r0
    21da:	9101      	str	r1, [sp, #4]
    21dc:	0016      	movs	r6, r2
    21de:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    21e0:	2800      	cmp	r0, #0
    21e2:	d012      	beq.n	220a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    21e4:	9b01      	ldr	r3, [sp, #4]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d011      	beq.n	220e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    21ea:	2d02      	cmp	r5, #2
    21ec:	d014      	beq.n	2218 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21ee:	4b28      	ldr	r3, [pc, #160]	; (2290 <xQueueGenericSendFromISR+0xbc>)
    21f0:	4798      	blx	r3
    21f2:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    21f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    21f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    21f8:	429a      	cmp	r2, r3
    21fa:	d82f      	bhi.n	225c <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    21fc:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    21fe:	9800      	ldr	r0, [sp, #0]
    2200:	4b24      	ldr	r3, [pc, #144]	; (2294 <xQueueGenericSendFromISR+0xc0>)
    2202:	4798      	blx	r3
}
    2204:	0028      	movs	r0, r5
    2206:	b003      	add	sp, #12
    2208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    220a:	b672      	cpsid	i
    220c:	e7fe      	b.n	220c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    220e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2210:	2b00      	cmp	r3, #0
    2212:	d0ea      	beq.n	21ea <xQueueGenericSendFromISR+0x16>
    2214:	b672      	cpsid	i
    2216:	e7fe      	b.n	2216 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    221a:	2b01      	cmp	r3, #1
    221c:	d01a      	beq.n	2254 <xQueueGenericSendFromISR+0x80>
    221e:	b672      	cpsid	i
    2220:	e7fe      	b.n	2220 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2222:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    2224:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2226:	2b00      	cmp	r3, #0
    2228:	d0e9      	beq.n	21fe <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    222a:	0020      	movs	r0, r4
    222c:	3024      	adds	r0, #36	; 0x24
    222e:	4b1a      	ldr	r3, [pc, #104]	; (2298 <xQueueGenericSendFromISR+0xc4>)
    2230:	4798      	blx	r3
    2232:	2800      	cmp	r0, #0
    2234:	d0e3      	beq.n	21fe <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    2236:	2e00      	cmp	r6, #0
    2238:	d00a      	beq.n	2250 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    223a:	2301      	movs	r3, #1
    223c:	6033      	str	r3, [r6, #0]
    223e:	e7de      	b.n	21fe <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2240:	1c7b      	adds	r3, r7, #1
    2242:	b25b      	sxtb	r3, r3
    2244:	2245      	movs	r2, #69	; 0x45
    2246:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2248:	2501      	movs	r5, #1
    224a:	e7d8      	b.n	21fe <xQueueGenericSendFromISR+0x2a>
    224c:	2501      	movs	r5, #1
    224e:	e7d6      	b.n	21fe <xQueueGenericSendFromISR+0x2a>
    2250:	2501      	movs	r5, #1
    2252:	e7d4      	b.n	21fe <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2254:	4b0e      	ldr	r3, [pc, #56]	; (2290 <xQueueGenericSendFromISR+0xbc>)
    2256:	4798      	blx	r3
    2258:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    225a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    225c:	2345      	movs	r3, #69	; 0x45
    225e:	5ce7      	ldrb	r7, [r4, r3]
    2260:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2262:	002a      	movs	r2, r5
    2264:	9901      	ldr	r1, [sp, #4]
    2266:	0020      	movs	r0, r4
    2268:	4b0c      	ldr	r3, [pc, #48]	; (229c <xQueueGenericSendFromISR+0xc8>)
    226a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    226c:	1c7b      	adds	r3, r7, #1
    226e:	d1e7      	bne.n	2240 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    2270:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2272:	2b00      	cmp	r3, #0
    2274:	d0d5      	beq.n	2222 <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2276:	0029      	movs	r1, r5
    2278:	0020      	movs	r0, r4
    227a:	4b09      	ldr	r3, [pc, #36]	; (22a0 <xQueueGenericSendFromISR+0xcc>)
    227c:	4798      	blx	r3
			xReturn = pdPASS;
    227e:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2280:	2800      	cmp	r0, #0
    2282:	d0bc      	beq.n	21fe <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    2284:	2e00      	cmp	r6, #0
    2286:	d0e1      	beq.n	224c <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2288:	2301      	movs	r3, #1
    228a:	6033      	str	r3, [r6, #0]
    228c:	e7b7      	b.n	21fe <xQueueGenericSendFromISR+0x2a>
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	00001059 	.word	0x00001059
    2294:	00001061 	.word	0x00001061
    2298:	00002c6d 	.word	0x00002c6d
    229c:	00001dc5 	.word	0x00001dc5
    22a0:	00001e41 	.word	0x00001e41

000022a4 <xQueueReceive>:
{
    22a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a6:	46c6      	mov	lr, r8
    22a8:	b500      	push	{lr}
    22aa:	b084      	sub	sp, #16
    22ac:	0004      	movs	r4, r0
    22ae:	000f      	movs	r7, r1
    22b0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    22b2:	2800      	cmp	r0, #0
    22b4:	d00a      	beq.n	22cc <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    22b6:	2900      	cmp	r1, #0
    22b8:	d00a      	beq.n	22d0 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    22ba:	4b42      	ldr	r3, [pc, #264]	; (23c4 <xQueueReceive+0x120>)
    22bc:	4798      	blx	r3
    22be:	2800      	cmp	r0, #0
    22c0:	d10b      	bne.n	22da <xQueueReceive+0x36>
    22c2:	9b01      	ldr	r3, [sp, #4]
    22c4:	2b00      	cmp	r3, #0
    22c6:	d00c      	beq.n	22e2 <xQueueReceive+0x3e>
    22c8:	b672      	cpsid	i
    22ca:	e7fe      	b.n	22ca <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    22cc:	b672      	cpsid	i
    22ce:	e7fe      	b.n	22ce <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    22d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    22d2:	2b00      	cmp	r3, #0
    22d4:	d0f1      	beq.n	22ba <xQueueReceive+0x16>
    22d6:	b672      	cpsid	i
    22d8:	e7fe      	b.n	22d8 <xQueueReceive+0x34>
    22da:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    22dc:	4b3a      	ldr	r3, [pc, #232]	; (23c8 <xQueueReceive+0x124>)
    22de:	4698      	mov	r8, r3
    22e0:	e02f      	b.n	2342 <xQueueReceive+0x9e>
    22e2:	2600      	movs	r6, #0
    22e4:	e7fa      	b.n	22dc <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    22e6:	0039      	movs	r1, r7
    22e8:	0020      	movs	r0, r4
    22ea:	4b38      	ldr	r3, [pc, #224]	; (23cc <xQueueReceive+0x128>)
    22ec:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    22ee:	3d01      	subs	r5, #1
    22f0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    22f2:	6923      	ldr	r3, [r4, #16]
    22f4:	2b00      	cmp	r3, #0
    22f6:	d007      	beq.n	2308 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    22f8:	0020      	movs	r0, r4
    22fa:	3010      	adds	r0, #16
    22fc:	4b34      	ldr	r3, [pc, #208]	; (23d0 <xQueueReceive+0x12c>)
    22fe:	4798      	blx	r3
    2300:	2800      	cmp	r0, #0
    2302:	d001      	beq.n	2308 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    2304:	4b33      	ldr	r3, [pc, #204]	; (23d4 <xQueueReceive+0x130>)
    2306:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2308:	4b33      	ldr	r3, [pc, #204]	; (23d8 <xQueueReceive+0x134>)
    230a:	4798      	blx	r3
				return pdPASS;
    230c:	2001      	movs	r0, #1
}
    230e:	b004      	add	sp, #16
    2310:	bc04      	pop	{r2}
    2312:	4690      	mov	r8, r2
    2314:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    2316:	4b30      	ldr	r3, [pc, #192]	; (23d8 <xQueueReceive+0x134>)
    2318:	4798      	blx	r3
					return errQUEUE_EMPTY;
    231a:	2000      	movs	r0, #0
    231c:	e7f7      	b.n	230e <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    231e:	a802      	add	r0, sp, #8
    2320:	4b2e      	ldr	r3, [pc, #184]	; (23dc <xQueueReceive+0x138>)
    2322:	4798      	blx	r3
    2324:	e016      	b.n	2354 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    2326:	2200      	movs	r2, #0
    2328:	2344      	movs	r3, #68	; 0x44
    232a:	54e2      	strb	r2, [r4, r3]
    232c:	e01d      	b.n	236a <xQueueReceive+0xc6>
    232e:	2200      	movs	r2, #0
    2330:	2345      	movs	r3, #69	; 0x45
    2332:	54e2      	strb	r2, [r4, r3]
    2334:	e01e      	b.n	2374 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    2336:	0020      	movs	r0, r4
    2338:	4b29      	ldr	r3, [pc, #164]	; (23e0 <xQueueReceive+0x13c>)
    233a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    233c:	4b29      	ldr	r3, [pc, #164]	; (23e4 <xQueueReceive+0x140>)
    233e:	4798      	blx	r3
    2340:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    2342:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2344:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2346:	2d00      	cmp	r5, #0
    2348:	d1cd      	bne.n	22e6 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    234a:	9b01      	ldr	r3, [sp, #4]
    234c:	2b00      	cmp	r3, #0
    234e:	d0e2      	beq.n	2316 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    2350:	2e00      	cmp	r6, #0
    2352:	d0e4      	beq.n	231e <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    2354:	4b20      	ldr	r3, [pc, #128]	; (23d8 <xQueueReceive+0x134>)
    2356:	4798      	blx	r3
		vTaskSuspendAll();
    2358:	4b23      	ldr	r3, [pc, #140]	; (23e8 <xQueueReceive+0x144>)
    235a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    235c:	4b1a      	ldr	r3, [pc, #104]	; (23c8 <xQueueReceive+0x124>)
    235e:	4798      	blx	r3
    2360:	2344      	movs	r3, #68	; 0x44
    2362:	5ce3      	ldrb	r3, [r4, r3]
    2364:	b25b      	sxtb	r3, r3
    2366:	3301      	adds	r3, #1
    2368:	d0dd      	beq.n	2326 <xQueueReceive+0x82>
    236a:	2345      	movs	r3, #69	; 0x45
    236c:	5ce3      	ldrb	r3, [r4, r3]
    236e:	b25b      	sxtb	r3, r3
    2370:	3301      	adds	r3, #1
    2372:	d0dc      	beq.n	232e <xQueueReceive+0x8a>
    2374:	4b18      	ldr	r3, [pc, #96]	; (23d8 <xQueueReceive+0x134>)
    2376:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2378:	a901      	add	r1, sp, #4
    237a:	a802      	add	r0, sp, #8
    237c:	4b1b      	ldr	r3, [pc, #108]	; (23ec <xQueueReceive+0x148>)
    237e:	4798      	blx	r3
    2380:	2800      	cmp	r0, #0
    2382:	d113      	bne.n	23ac <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2384:	0020      	movs	r0, r4
    2386:	4b1a      	ldr	r3, [pc, #104]	; (23f0 <xQueueReceive+0x14c>)
    2388:	4798      	blx	r3
    238a:	2800      	cmp	r0, #0
    238c:	d0d3      	beq.n	2336 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    238e:	0020      	movs	r0, r4
    2390:	3024      	adds	r0, #36	; 0x24
    2392:	9901      	ldr	r1, [sp, #4]
    2394:	4b17      	ldr	r3, [pc, #92]	; (23f4 <xQueueReceive+0x150>)
    2396:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2398:	0020      	movs	r0, r4
    239a:	4b11      	ldr	r3, [pc, #68]	; (23e0 <xQueueReceive+0x13c>)
    239c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    239e:	4b11      	ldr	r3, [pc, #68]	; (23e4 <xQueueReceive+0x140>)
    23a0:	4798      	blx	r3
    23a2:	2800      	cmp	r0, #0
    23a4:	d1cc      	bne.n	2340 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    23a6:	4b0b      	ldr	r3, [pc, #44]	; (23d4 <xQueueReceive+0x130>)
    23a8:	4798      	blx	r3
    23aa:	e7c9      	b.n	2340 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    23ac:	0020      	movs	r0, r4
    23ae:	4b0c      	ldr	r3, [pc, #48]	; (23e0 <xQueueReceive+0x13c>)
    23b0:	4798      	blx	r3
			( void ) xTaskResumeAll();
    23b2:	4b0c      	ldr	r3, [pc, #48]	; (23e4 <xQueueReceive+0x140>)
    23b4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    23b6:	0020      	movs	r0, r4
    23b8:	4b0d      	ldr	r3, [pc, #52]	; (23f0 <xQueueReceive+0x14c>)
    23ba:	4798      	blx	r3
    23bc:	2800      	cmp	r0, #0
    23be:	d0bf      	beq.n	2340 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    23c0:	2000      	movs	r0, #0
    23c2:	e7a4      	b.n	230e <xQueueReceive+0x6a>
    23c4:	00002d89 	.word	0x00002d89
    23c8:	00001021 	.word	0x00001021
    23cc:	00001ea9 	.word	0x00001ea9
    23d0:	00002c6d 	.word	0x00002c6d
    23d4:	00001009 	.word	0x00001009
    23d8:	00001039 	.word	0x00001039
    23dc:	00002cf5 	.word	0x00002cf5
    23e0:	00001ed1 	.word	0x00001ed1
    23e4:	00002979 	.word	0x00002979
    23e8:	00002825 	.word	0x00002825
    23ec:	00002d0d 	.word	0x00002d0d
    23f0:	00001da9 	.word	0x00001da9
    23f4:	00002c09 	.word	0x00002c09

000023f8 <vQueueAddToRegistry>:
	{
    23f8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    23fa:	4b0a      	ldr	r3, [pc, #40]	; (2424 <vQueueAddToRegistry+0x2c>)
    23fc:	681b      	ldr	r3, [r3, #0]
    23fe:	2b00      	cmp	r3, #0
    2400:	d009      	beq.n	2416 <vQueueAddToRegistry+0x1e>
    2402:	2301      	movs	r3, #1
    2404:	4c07      	ldr	r4, [pc, #28]	; (2424 <vQueueAddToRegistry+0x2c>)
    2406:	00da      	lsls	r2, r3, #3
    2408:	58a2      	ldr	r2, [r4, r2]
    240a:	2a00      	cmp	r2, #0
    240c:	d004      	beq.n	2418 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    240e:	3301      	adds	r3, #1
    2410:	2b08      	cmp	r3, #8
    2412:	d1f8      	bne.n	2406 <vQueueAddToRegistry+0xe>
	}
    2414:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2416:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    2418:	4a02      	ldr	r2, [pc, #8]	; (2424 <vQueueAddToRegistry+0x2c>)
    241a:	00db      	lsls	r3, r3, #3
    241c:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
    241e:	18d3      	adds	r3, r2, r3
    2420:	6058      	str	r0, [r3, #4]
				break;
    2422:	e7f7      	b.n	2414 <vQueueAddToRegistry+0x1c>
    2424:	2000523c 	.word	0x2000523c

00002428 <vQueueWaitForMessageRestricted>:
	{
    2428:	b570      	push	{r4, r5, r6, lr}
    242a:	0004      	movs	r4, r0
    242c:	000d      	movs	r5, r1
    242e:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    2430:	4b11      	ldr	r3, [pc, #68]	; (2478 <vQueueWaitForMessageRestricted+0x50>)
    2432:	4798      	blx	r3
    2434:	2344      	movs	r3, #68	; 0x44
    2436:	5ce3      	ldrb	r3, [r4, r3]
    2438:	b25b      	sxtb	r3, r3
    243a:	3301      	adds	r3, #1
    243c:	d00d      	beq.n	245a <vQueueWaitForMessageRestricted+0x32>
    243e:	2345      	movs	r3, #69	; 0x45
    2440:	5ce3      	ldrb	r3, [r4, r3]
    2442:	b25b      	sxtb	r3, r3
    2444:	3301      	adds	r3, #1
    2446:	d00c      	beq.n	2462 <vQueueWaitForMessageRestricted+0x3a>
    2448:	4b0c      	ldr	r3, [pc, #48]	; (247c <vQueueWaitForMessageRestricted+0x54>)
    244a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    244c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    244e:	2b00      	cmp	r3, #0
    2450:	d00b      	beq.n	246a <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    2452:	0020      	movs	r0, r4
    2454:	4b0a      	ldr	r3, [pc, #40]	; (2480 <vQueueWaitForMessageRestricted+0x58>)
    2456:	4798      	blx	r3
	}
    2458:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    245a:	2200      	movs	r2, #0
    245c:	2344      	movs	r3, #68	; 0x44
    245e:	54e2      	strb	r2, [r4, r3]
    2460:	e7ed      	b.n	243e <vQueueWaitForMessageRestricted+0x16>
    2462:	2200      	movs	r2, #0
    2464:	2345      	movs	r3, #69	; 0x45
    2466:	54e2      	strb	r2, [r4, r3]
    2468:	e7ee      	b.n	2448 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    246a:	0020      	movs	r0, r4
    246c:	3024      	adds	r0, #36	; 0x24
    246e:	0032      	movs	r2, r6
    2470:	0029      	movs	r1, r5
    2472:	4b04      	ldr	r3, [pc, #16]	; (2484 <vQueueWaitForMessageRestricted+0x5c>)
    2474:	4798      	blx	r3
    2476:	e7ec      	b.n	2452 <vQueueWaitForMessageRestricted+0x2a>
    2478:	00001021 	.word	0x00001021
    247c:	00001039 	.word	0x00001039
    2480:	00001ed1 	.word	0x00001ed1
    2484:	00002c35 	.word	0x00002c35

00002488 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2488:	4b08      	ldr	r3, [pc, #32]	; (24ac <prvResetNextTaskUnblockTime+0x24>)
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	681b      	ldr	r3, [r3, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d007      	beq.n	24a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2492:	4b06      	ldr	r3, [pc, #24]	; (24ac <prvResetNextTaskUnblockTime+0x24>)
    2494:	681b      	ldr	r3, [r3, #0]
    2496:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2498:	68db      	ldr	r3, [r3, #12]
    249a:	685a      	ldr	r2, [r3, #4]
    249c:	4b04      	ldr	r3, [pc, #16]	; (24b0 <prvResetNextTaskUnblockTime+0x28>)
    249e:	601a      	str	r2, [r3, #0]
	}
}
    24a0:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    24a2:	2201      	movs	r2, #1
    24a4:	4252      	negs	r2, r2
    24a6:	4b02      	ldr	r3, [pc, #8]	; (24b0 <prvResetNextTaskUnblockTime+0x28>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	e7f9      	b.n	24a0 <prvResetNextTaskUnblockTime+0x18>
    24ac:	200050bc 	.word	0x200050bc
    24b0:	2000516c 	.word	0x2000516c

000024b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    24b4:	b570      	push	{r4, r5, r6, lr}
    24b6:	0004      	movs	r4, r0
    24b8:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    24ba:	4b17      	ldr	r3, [pc, #92]	; (2518 <prvAddCurrentTaskToDelayedList+0x64>)
    24bc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    24be:	4b17      	ldr	r3, [pc, #92]	; (251c <prvAddCurrentTaskToDelayedList+0x68>)
    24c0:	6818      	ldr	r0, [r3, #0]
    24c2:	3004      	adds	r0, #4
    24c4:	4b16      	ldr	r3, [pc, #88]	; (2520 <prvAddCurrentTaskToDelayedList+0x6c>)
    24c6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    24c8:	1c63      	adds	r3, r4, #1
    24ca:	d013      	beq.n	24f4 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    24cc:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    24ce:	4b13      	ldr	r3, [pc, #76]	; (251c <prvAddCurrentTaskToDelayedList+0x68>)
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    24d4:	42a6      	cmp	r6, r4
    24d6:	d816      	bhi.n	2506 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24d8:	4b12      	ldr	r3, [pc, #72]	; (2524 <prvAddCurrentTaskToDelayedList+0x70>)
    24da:	6818      	ldr	r0, [r3, #0]
    24dc:	4b0f      	ldr	r3, [pc, #60]	; (251c <prvAddCurrentTaskToDelayedList+0x68>)
    24de:	6819      	ldr	r1, [r3, #0]
    24e0:	3104      	adds	r1, #4
    24e2:	4b11      	ldr	r3, [pc, #68]	; (2528 <prvAddCurrentTaskToDelayedList+0x74>)
    24e4:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    24e6:	4b11      	ldr	r3, [pc, #68]	; (252c <prvAddCurrentTaskToDelayedList+0x78>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	429c      	cmp	r4, r3
    24ec:	d212      	bcs.n	2514 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    24ee:	4b0f      	ldr	r3, [pc, #60]	; (252c <prvAddCurrentTaskToDelayedList+0x78>)
    24f0:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    24f2:	e00f      	b.n	2514 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    24f4:	2d00      	cmp	r5, #0
    24f6:	d0e9      	beq.n	24cc <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    24f8:	4b08      	ldr	r3, [pc, #32]	; (251c <prvAddCurrentTaskToDelayedList+0x68>)
    24fa:	6819      	ldr	r1, [r3, #0]
    24fc:	3104      	adds	r1, #4
    24fe:	480c      	ldr	r0, [pc, #48]	; (2530 <prvAddCurrentTaskToDelayedList+0x7c>)
    2500:	4b0c      	ldr	r3, [pc, #48]	; (2534 <prvAddCurrentTaskToDelayedList+0x80>)
    2502:	4798      	blx	r3
    2504:	e006      	b.n	2514 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2506:	4b0c      	ldr	r3, [pc, #48]	; (2538 <prvAddCurrentTaskToDelayedList+0x84>)
    2508:	6818      	ldr	r0, [r3, #0]
    250a:	4b04      	ldr	r3, [pc, #16]	; (251c <prvAddCurrentTaskToDelayedList+0x68>)
    250c:	6819      	ldr	r1, [r3, #0]
    250e:	3104      	adds	r1, #4
    2510:	4b05      	ldr	r3, [pc, #20]	; (2528 <prvAddCurrentTaskToDelayedList+0x74>)
    2512:	4798      	blx	r3
}
    2514:	bd70      	pop	{r4, r5, r6, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	200051b4 	.word	0x200051b4
    251c:	200050b8 	.word	0x200050b8
    2520:	00001d7f 	.word	0x00001d7f
    2524:	200050bc 	.word	0x200050bc
    2528:	00001d51 	.word	0x00001d51
    252c:	2000516c 	.word	0x2000516c
    2530:	2000518c 	.word	0x2000518c
    2534:	00001d39 	.word	0x00001d39
    2538:	200050c0 	.word	0x200050c0

0000253c <prvIdleTask>:
{
    253c:	b5f0      	push	{r4, r5, r6, r7, lr}
    253e:	46d6      	mov	lr, sl
    2540:	464f      	mov	r7, r9
    2542:	4646      	mov	r6, r8
    2544:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2546:	4b16      	ldr	r3, [pc, #88]	; (25a0 <prvIdleTask+0x64>)
    2548:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    254a:	4b16      	ldr	r3, [pc, #88]	; (25a4 <prvIdleTask+0x68>)
    254c:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    254e:	4f16      	ldr	r7, [pc, #88]	; (25a8 <prvIdleTask+0x6c>)
    2550:	e001      	b.n	2556 <prvIdleTask+0x1a>
			vApplicationIdleHook();
    2552:	4b16      	ldr	r3, [pc, #88]	; (25ac <prvIdleTask+0x70>)
    2554:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2556:	464b      	mov	r3, r9
    2558:	681b      	ldr	r3, [r3, #0]
    255a:	2b00      	cmp	r3, #0
    255c:	d018      	beq.n	2590 <prvIdleTask+0x54>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    255e:	4b14      	ldr	r3, [pc, #80]	; (25b0 <prvIdleTask+0x74>)
    2560:	469a      	mov	sl, r3
			taskENTER_CRITICAL();
    2562:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2568:	1d28      	adds	r0, r5, #4
    256a:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    256c:	4a11      	ldr	r2, [pc, #68]	; (25b4 <prvIdleTask+0x78>)
    256e:	6813      	ldr	r3, [r2, #0]
    2570:	3b01      	subs	r3, #1
    2572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    2574:	4c0a      	ldr	r4, [pc, #40]	; (25a0 <prvIdleTask+0x64>)
    2576:	6823      	ldr	r3, [r4, #0]
    2578:	3b01      	subs	r3, #1
    257a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    257c:	4b0e      	ldr	r3, [pc, #56]	; (25b8 <prvIdleTask+0x7c>)
    257e:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    2580:	6b28      	ldr	r0, [r5, #48]	; 0x30
    2582:	4e0e      	ldr	r6, [pc, #56]	; (25bc <prvIdleTask+0x80>)
    2584:	47b0      	blx	r6
			vPortFree( pxTCB );
    2586:	0028      	movs	r0, r5
    2588:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    258a:	6823      	ldr	r3, [r4, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d1e8      	bne.n	2562 <prvIdleTask+0x26>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2590:	4b0b      	ldr	r3, [pc, #44]	; (25c0 <prvIdleTask+0x84>)
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	2b01      	cmp	r3, #1
    2596:	d9dc      	bls.n	2552 <prvIdleTask+0x16>
				taskYIELD();
    2598:	4b0a      	ldr	r3, [pc, #40]	; (25c4 <prvIdleTask+0x88>)
    259a:	4798      	blx	r3
    259c:	e7d9      	b.n	2552 <prvIdleTask+0x16>
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	2000512c 	.word	0x2000512c
    25a4:	00001021 	.word	0x00001021
    25a8:	200051a0 	.word	0x200051a0
    25ac:	000042e5 	.word	0x000042e5
    25b0:	00001d7f 	.word	0x00001d7f
    25b4:	20005128 	.word	0x20005128
    25b8:	00001039 	.word	0x00001039
    25bc:	000011e9 	.word	0x000011e9
    25c0:	200050c4 	.word	0x200050c4
    25c4:	00001009 	.word	0x00001009

000025c8 <xTaskCreate>:
	{
    25c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ca:	46c6      	mov	lr, r8
    25cc:	b500      	push	{lr}
    25ce:	b084      	sub	sp, #16
    25d0:	9001      	str	r0, [sp, #4]
    25d2:	000d      	movs	r5, r1
    25d4:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25d6:	0097      	lsls	r7, r2, #2
    25d8:	0038      	movs	r0, r7
    25da:	4b5f      	ldr	r3, [pc, #380]	; (2758 <xTaskCreate+0x190>)
    25dc:	4798      	blx	r3
    25de:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    25e0:	d100      	bne.n	25e4 <xTaskCreate+0x1c>
    25e2:	e089      	b.n	26f8 <xTaskCreate+0x130>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    25e4:	2058      	movs	r0, #88	; 0x58
    25e6:	4b5c      	ldr	r3, [pc, #368]	; (2758 <xTaskCreate+0x190>)
    25e8:	4798      	blx	r3
    25ea:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    25ec:	d100      	bne.n	25f0 <xTaskCreate+0x28>
    25ee:	e080      	b.n	26f2 <xTaskCreate+0x12a>
					pxNewTCB->pxStack = pxStack;
    25f0:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    25f2:	003a      	movs	r2, r7
    25f4:	21a5      	movs	r1, #165	; 0xa5
    25f6:	0030      	movs	r0, r6
    25f8:	4b58      	ldr	r3, [pc, #352]	; (275c <xTaskCreate+0x194>)
    25fa:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    25fc:	1f3a      	subs	r2, r7, #4
    25fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2600:	469c      	mov	ip, r3
    2602:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2604:	2307      	movs	r3, #7
    2606:	439a      	bics	r2, r3
    2608:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    260a:	782a      	ldrb	r2, [r5, #0]
    260c:	332d      	adds	r3, #45	; 0x2d
    260e:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    2610:	782b      	ldrb	r3, [r5, #0]
    2612:	2b00      	cmp	r3, #0
    2614:	d00d      	beq.n	2632 <xTaskCreate+0x6a>
    2616:	3501      	adds	r5, #1
    2618:	0023      	movs	r3, r4
    261a:	3335      	adds	r3, #53	; 0x35
    261c:	0020      	movs	r0, r4
    261e:	303e      	adds	r0, #62	; 0x3e
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2620:	782a      	ldrb	r2, [r5, #0]
    2622:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    2624:	782a      	ldrb	r2, [r5, #0]
    2626:	2a00      	cmp	r2, #0
    2628:	d003      	beq.n	2632 <xTaskCreate+0x6a>
    262a:	3501      	adds	r5, #1
    262c:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    262e:	4283      	cmp	r3, r0
    2630:	d1f6      	bne.n	2620 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2632:	2200      	movs	r2, #0
    2634:	233d      	movs	r3, #61	; 0x3d
    2636:	54e2      	strb	r2, [r4, r3]
    2638:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    263a:	2f04      	cmp	r7, #4
    263c:	d900      	bls.n	2640 <xTaskCreate+0x78>
    263e:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    2640:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    2642:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    2644:	2600      	movs	r6, #0
    2646:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2648:	1d23      	adds	r3, r4, #4
    264a:	9303      	str	r3, [sp, #12]
    264c:	0018      	movs	r0, r3
    264e:	4d44      	ldr	r5, [pc, #272]	; (2760 <xTaskCreate+0x198>)
    2650:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2652:	0020      	movs	r0, r4
    2654:	3018      	adds	r0, #24
    2656:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2658:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    265a:	2305      	movs	r3, #5
    265c:	1bdb      	subs	r3, r3, r7
    265e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2660:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    2662:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2664:	2354      	movs	r3, #84	; 0x54
    2666:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2668:	9a02      	ldr	r2, [sp, #8]
    266a:	9901      	ldr	r1, [sp, #4]
    266c:	4640      	mov	r0, r8
    266e:	4b3d      	ldr	r3, [pc, #244]	; (2764 <xTaskCreate+0x19c>)
    2670:	4798      	blx	r3
    2672:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    2674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2676:	2b00      	cmp	r3, #0
    2678:	d000      	beq.n	267c <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    267a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    267c:	4b3a      	ldr	r3, [pc, #232]	; (2768 <xTaskCreate+0x1a0>)
    267e:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    2680:	4a3a      	ldr	r2, [pc, #232]	; (276c <xTaskCreate+0x1a4>)
    2682:	6813      	ldr	r3, [r2, #0]
    2684:	3301      	adds	r3, #1
    2686:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2688:	4b39      	ldr	r3, [pc, #228]	; (2770 <xTaskCreate+0x1a8>)
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	2b00      	cmp	r3, #0
    268e:	d036      	beq.n	26fe <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
    2690:	4b38      	ldr	r3, [pc, #224]	; (2774 <xTaskCreate+0x1ac>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	2b00      	cmp	r3, #0
    2696:	d107      	bne.n	26a8 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2698:	4b35      	ldr	r3, [pc, #212]	; (2770 <xTaskCreate+0x1a8>)
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    269e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    26a0:	4293      	cmp	r3, r2
    26a2:	d801      	bhi.n	26a8 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    26a4:	4b32      	ldr	r3, [pc, #200]	; (2770 <xTaskCreate+0x1a8>)
    26a6:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    26a8:	4a33      	ldr	r2, [pc, #204]	; (2778 <xTaskCreate+0x1b0>)
    26aa:	6813      	ldr	r3, [r2, #0]
    26ac:	3301      	adds	r3, #1
    26ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    26b0:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
    26b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    26b4:	4a31      	ldr	r2, [pc, #196]	; (277c <xTaskCreate+0x1b4>)
    26b6:	6812      	ldr	r2, [r2, #0]
    26b8:	4293      	cmp	r3, r2
    26ba:	d901      	bls.n	26c0 <xTaskCreate+0xf8>
    26bc:	4a2f      	ldr	r2, [pc, #188]	; (277c <xTaskCreate+0x1b4>)
    26be:	6013      	str	r3, [r2, #0]
    26c0:	0098      	lsls	r0, r3, #2
    26c2:	18c0      	adds	r0, r0, r3
    26c4:	0080      	lsls	r0, r0, #2
    26c6:	4b2e      	ldr	r3, [pc, #184]	; (2780 <xTaskCreate+0x1b8>)
    26c8:	1818      	adds	r0, r3, r0
    26ca:	9903      	ldr	r1, [sp, #12]
    26cc:	4b2d      	ldr	r3, [pc, #180]	; (2784 <xTaskCreate+0x1bc>)
    26ce:	4798      	blx	r3
	taskEXIT_CRITICAL();
    26d0:	4b2d      	ldr	r3, [pc, #180]	; (2788 <xTaskCreate+0x1c0>)
    26d2:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    26d4:	4b27      	ldr	r3, [pc, #156]	; (2774 <xTaskCreate+0x1ac>)
    26d6:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    26d8:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    26da:	2b00      	cmp	r3, #0
    26dc:	d005      	beq.n	26ea <xTaskCreate+0x122>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    26de:	4b24      	ldr	r3, [pc, #144]	; (2770 <xTaskCreate+0x1a8>)
    26e0:	681b      	ldr	r3, [r3, #0]
    26e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    26e6:	429a      	cmp	r2, r3
    26e8:	d331      	bcc.n	274e <xTaskCreate+0x186>
	}
    26ea:	b004      	add	sp, #16
    26ec:	bc04      	pop	{r2}
    26ee:	4690      	mov	r8, r2
    26f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    26f2:	0030      	movs	r0, r6
    26f4:	4b25      	ldr	r3, [pc, #148]	; (278c <xTaskCreate+0x1c4>)
    26f6:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    26f8:	2001      	movs	r0, #1
    26fa:	4240      	negs	r0, r0
    26fc:	e7f5      	b.n	26ea <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
    26fe:	4b1c      	ldr	r3, [pc, #112]	; (2770 <xTaskCreate+0x1a8>)
    2700:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2702:	6813      	ldr	r3, [r2, #0]
    2704:	2b01      	cmp	r3, #1
    2706:	d1cf      	bne.n	26a8 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2708:	4f1d      	ldr	r7, [pc, #116]	; (2780 <xTaskCreate+0x1b8>)
    270a:	0038      	movs	r0, r7
    270c:	4e20      	ldr	r6, [pc, #128]	; (2790 <xTaskCreate+0x1c8>)
    270e:	47b0      	blx	r6
    2710:	0038      	movs	r0, r7
    2712:	3014      	adds	r0, #20
    2714:	47b0      	blx	r6
    2716:	0038      	movs	r0, r7
    2718:	3028      	adds	r0, #40	; 0x28
    271a:	47b0      	blx	r6
    271c:	0038      	movs	r0, r7
    271e:	303c      	adds	r0, #60	; 0x3c
    2720:	47b0      	blx	r6
    2722:	0038      	movs	r0, r7
    2724:	3050      	adds	r0, #80	; 0x50
    2726:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2728:	4b1a      	ldr	r3, [pc, #104]	; (2794 <xTaskCreate+0x1cc>)
    272a:	4698      	mov	r8, r3
    272c:	0018      	movs	r0, r3
    272e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2730:	4f19      	ldr	r7, [pc, #100]	; (2798 <xTaskCreate+0x1d0>)
    2732:	0038      	movs	r0, r7
    2734:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2736:	4819      	ldr	r0, [pc, #100]	; (279c <xTaskCreate+0x1d4>)
    2738:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    273a:	4819      	ldr	r0, [pc, #100]	; (27a0 <xTaskCreate+0x1d8>)
    273c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    273e:	4819      	ldr	r0, [pc, #100]	; (27a4 <xTaskCreate+0x1dc>)
    2740:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    2742:	4b19      	ldr	r3, [pc, #100]	; (27a8 <xTaskCreate+0x1e0>)
    2744:	4642      	mov	r2, r8
    2746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2748:	4b18      	ldr	r3, [pc, #96]	; (27ac <xTaskCreate+0x1e4>)
    274a:	601f      	str	r7, [r3, #0]
    274c:	e7ac      	b.n	26a8 <xTaskCreate+0xe0>
			taskYIELD_IF_USING_PREEMPTION();
    274e:	4b18      	ldr	r3, [pc, #96]	; (27b0 <xTaskCreate+0x1e8>)
    2750:	4798      	blx	r3
			xReturn = pdPASS;
    2752:	2001      	movs	r0, #1
    2754:	e7c9      	b.n	26ea <xTaskCreate+0x122>
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	000010bd 	.word	0x000010bd
    275c:	00006a07 	.word	0x00006a07
    2760:	00001d33 	.word	0x00001d33
    2764:	00000f85 	.word	0x00000f85
    2768:	00001021 	.word	0x00001021
    276c:	20005128 	.word	0x20005128
    2770:	200050b8 	.word	0x200050b8
    2774:	20005188 	.word	0x20005188
    2778:	20005138 	.word	0x20005138
    277c:	2000513c 	.word	0x2000513c
    2780:	200050c4 	.word	0x200050c4
    2784:	00001d39 	.word	0x00001d39
    2788:	00001039 	.word	0x00001039
    278c:	000011e9 	.word	0x000011e9
    2790:	00001d1d 	.word	0x00001d1d
    2794:	20005140 	.word	0x20005140
    2798:	20005154 	.word	0x20005154
    279c:	20005174 	.word	0x20005174
    27a0:	200051a0 	.word	0x200051a0
    27a4:	2000518c 	.word	0x2000518c
    27a8:	200050bc 	.word	0x200050bc
    27ac:	200050c0 	.word	0x200050c0
    27b0:	00001009 	.word	0x00001009

000027b4 <vTaskStartScheduler>:
{
    27b4:	b510      	push	{r4, lr}
    27b6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    27b8:	4b11      	ldr	r3, [pc, #68]	; (2800 <vTaskStartScheduler+0x4c>)
    27ba:	9301      	str	r3, [sp, #4]
    27bc:	2300      	movs	r3, #0
    27be:	9300      	str	r3, [sp, #0]
    27c0:	2282      	movs	r2, #130	; 0x82
    27c2:	4910      	ldr	r1, [pc, #64]	; (2804 <vTaskStartScheduler+0x50>)
    27c4:	4810      	ldr	r0, [pc, #64]	; (2808 <vTaskStartScheduler+0x54>)
    27c6:	4c11      	ldr	r4, [pc, #68]	; (280c <vTaskStartScheduler+0x58>)
    27c8:	47a0      	blx	r4
		if( xReturn == pdPASS )
    27ca:	2801      	cmp	r0, #1
    27cc:	d003      	beq.n	27d6 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    27ce:	1c43      	adds	r3, r0, #1
    27d0:	d013      	beq.n	27fa <vTaskStartScheduler+0x46>
}
    27d2:	b002      	add	sp, #8
    27d4:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    27d6:	4b0e      	ldr	r3, [pc, #56]	; (2810 <vTaskStartScheduler+0x5c>)
    27d8:	4798      	blx	r3
	if( xReturn == pdPASS )
    27da:	2801      	cmp	r0, #1
    27dc:	d1f7      	bne.n	27ce <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    27de:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    27e0:	2201      	movs	r2, #1
    27e2:	4252      	negs	r2, r2
    27e4:	4b0b      	ldr	r3, [pc, #44]	; (2814 <vTaskStartScheduler+0x60>)
    27e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    27e8:	3202      	adds	r2, #2
    27ea:	4b0b      	ldr	r3, [pc, #44]	; (2818 <vTaskStartScheduler+0x64>)
    27ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    27ee:	2200      	movs	r2, #0
    27f0:	4b0a      	ldr	r3, [pc, #40]	; (281c <vTaskStartScheduler+0x68>)
    27f2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    27f4:	4b0a      	ldr	r3, [pc, #40]	; (2820 <vTaskStartScheduler+0x6c>)
    27f6:	4798      	blx	r3
    27f8:	e7eb      	b.n	27d2 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    27fa:	b672      	cpsid	i
    27fc:	e7fe      	b.n	27fc <vTaskStartScheduler+0x48>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	20005168 	.word	0x20005168
    2804:	00006b84 	.word	0x00006b84
    2808:	0000253d 	.word	0x0000253d
    280c:	000025c9 	.word	0x000025c9
    2810:	00002edd 	.word	0x00002edd
    2814:	2000516c 	.word	0x2000516c
    2818:	20005188 	.word	0x20005188
    281c:	200051b4 	.word	0x200051b4
    2820:	00000fa5 	.word	0x00000fa5

00002824 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2824:	4a02      	ldr	r2, [pc, #8]	; (2830 <vTaskSuspendAll+0xc>)
    2826:	6813      	ldr	r3, [r2, #0]
    2828:	3301      	adds	r3, #1
    282a:	6013      	str	r3, [r2, #0]
}
    282c:	4770      	bx	lr
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	20005134 	.word	0x20005134

00002834 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2834:	4b01      	ldr	r3, [pc, #4]	; (283c <xTaskGetTickCount+0x8>)
    2836:	6818      	ldr	r0, [r3, #0]
}
    2838:	4770      	bx	lr
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	200051b4 	.word	0x200051b4

00002840 <xTaskIncrementTick>:
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2844:	4b3d      	ldr	r3, [pc, #244]	; (293c <xTaskIncrementTick+0xfc>)
    2846:	681b      	ldr	r3, [r3, #0]
    2848:	2b00      	cmp	r3, #0
    284a:	d000      	beq.n	284e <xTaskIncrementTick+0xe>
    284c:	e06d      	b.n	292a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    284e:	4b3c      	ldr	r3, [pc, #240]	; (2940 <xTaskIncrementTick+0x100>)
    2850:	681d      	ldr	r5, [r3, #0]
    2852:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    2854:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    2856:	2d00      	cmp	r5, #0
    2858:	d112      	bne.n	2880 <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    285a:	4b3a      	ldr	r3, [pc, #232]	; (2944 <xTaskIncrementTick+0x104>)
    285c:	681b      	ldr	r3, [r3, #0]
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	2b00      	cmp	r3, #0
    2862:	d001      	beq.n	2868 <xTaskIncrementTick+0x28>
    2864:	b672      	cpsid	i
    2866:	e7fe      	b.n	2866 <xTaskIncrementTick+0x26>
    2868:	4a36      	ldr	r2, [pc, #216]	; (2944 <xTaskIncrementTick+0x104>)
    286a:	6811      	ldr	r1, [r2, #0]
    286c:	4b36      	ldr	r3, [pc, #216]	; (2948 <xTaskIncrementTick+0x108>)
    286e:	6818      	ldr	r0, [r3, #0]
    2870:	6010      	str	r0, [r2, #0]
    2872:	6019      	str	r1, [r3, #0]
    2874:	4a35      	ldr	r2, [pc, #212]	; (294c <xTaskIncrementTick+0x10c>)
    2876:	6813      	ldr	r3, [r2, #0]
    2878:	3301      	adds	r3, #1
    287a:	6013      	str	r3, [r2, #0]
    287c:	4b34      	ldr	r3, [pc, #208]	; (2950 <xTaskIncrementTick+0x110>)
    287e:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    2880:	4b34      	ldr	r3, [pc, #208]	; (2954 <xTaskIncrementTick+0x114>)
    2882:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    2884:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    2886:	429d      	cmp	r5, r3
    2888:	d333      	bcc.n	28f2 <xTaskIncrementTick+0xb2>
    288a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    288c:	4f2d      	ldr	r7, [pc, #180]	; (2944 <xTaskIncrementTick+0x104>)
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	681b      	ldr	r3, [r3, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d029      	beq.n	28ea <xTaskIncrementTick+0xaa>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2896:	4b2b      	ldr	r3, [pc, #172]	; (2944 <xTaskIncrementTick+0x104>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	68db      	ldr	r3, [r3, #12]
    289c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    289e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    28a0:	429d      	cmp	r5, r3
    28a2:	d33f      	bcc.n	2924 <xTaskIncrementTick+0xe4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    28a4:	1d33      	adds	r3, r6, #4
    28a6:	9301      	str	r3, [sp, #4]
    28a8:	0018      	movs	r0, r3
    28aa:	4b2b      	ldr	r3, [pc, #172]	; (2958 <xTaskIncrementTick+0x118>)
    28ac:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    28ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    28b0:	2b00      	cmp	r3, #0
    28b2:	d003      	beq.n	28bc <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    28b4:	0030      	movs	r0, r6
    28b6:	3018      	adds	r0, #24
    28b8:	4b27      	ldr	r3, [pc, #156]	; (2958 <xTaskIncrementTick+0x118>)
    28ba:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    28bc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    28be:	4a27      	ldr	r2, [pc, #156]	; (295c <xTaskIncrementTick+0x11c>)
    28c0:	6812      	ldr	r2, [r2, #0]
    28c2:	4293      	cmp	r3, r2
    28c4:	d901      	bls.n	28ca <xTaskIncrementTick+0x8a>
    28c6:	4a25      	ldr	r2, [pc, #148]	; (295c <xTaskIncrementTick+0x11c>)
    28c8:	6013      	str	r3, [r2, #0]
    28ca:	0098      	lsls	r0, r3, #2
    28cc:	18c0      	adds	r0, r0, r3
    28ce:	0080      	lsls	r0, r0, #2
    28d0:	4b23      	ldr	r3, [pc, #140]	; (2960 <xTaskIncrementTick+0x120>)
    28d2:	1818      	adds	r0, r3, r0
    28d4:	9901      	ldr	r1, [sp, #4]
    28d6:	4b23      	ldr	r3, [pc, #140]	; (2964 <xTaskIncrementTick+0x124>)
    28d8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    28da:	4b23      	ldr	r3, [pc, #140]	; (2968 <xTaskIncrementTick+0x128>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    28e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28e2:	429a      	cmp	r2, r3
    28e4:	d3d3      	bcc.n	288e <xTaskIncrementTick+0x4e>
							xSwitchRequired = pdTRUE;
    28e6:	2401      	movs	r4, #1
    28e8:	e7d1      	b.n	288e <xTaskIncrementTick+0x4e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28ea:	2201      	movs	r2, #1
    28ec:	4252      	negs	r2, r2
    28ee:	4b19      	ldr	r3, [pc, #100]	; (2954 <xTaskIncrementTick+0x114>)
    28f0:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    28f2:	4b1d      	ldr	r3, [pc, #116]	; (2968 <xTaskIncrementTick+0x128>)
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28f8:	0093      	lsls	r3, r2, #2
    28fa:	189b      	adds	r3, r3, r2
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	4a18      	ldr	r2, [pc, #96]	; (2960 <xTaskIncrementTick+0x120>)
    2900:	589b      	ldr	r3, [r3, r2]
    2902:	2b01      	cmp	r3, #1
    2904:	d900      	bls.n	2908 <xTaskIncrementTick+0xc8>
				xSwitchRequired = pdTRUE;
    2906:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    2908:	4b18      	ldr	r3, [pc, #96]	; (296c <xTaskIncrementTick+0x12c>)
    290a:	681b      	ldr	r3, [r3, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	d101      	bne.n	2914 <xTaskIncrementTick+0xd4>
				vApplicationTickHook();
    2910:	4b17      	ldr	r3, [pc, #92]	; (2970 <xTaskIncrementTick+0x130>)
    2912:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
    2914:	4b17      	ldr	r3, [pc, #92]	; (2974 <xTaskIncrementTick+0x134>)
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d000      	beq.n	291e <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
    291c:	2401      	movs	r4, #1
}
    291e:	0020      	movs	r0, r4
    2920:	b003      	add	sp, #12
    2922:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xNextTaskUnblockTime = xItemValue;
    2924:	4a0b      	ldr	r2, [pc, #44]	; (2954 <xTaskIncrementTick+0x114>)
    2926:	6013      	str	r3, [r2, #0]
						break;
    2928:	e7e3      	b.n	28f2 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    292a:	4a10      	ldr	r2, [pc, #64]	; (296c <xTaskIncrementTick+0x12c>)
    292c:	6813      	ldr	r3, [r2, #0]
    292e:	3301      	adds	r3, #1
    2930:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
    2932:	4b0f      	ldr	r3, [pc, #60]	; (2970 <xTaskIncrementTick+0x130>)
    2934:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
    2936:	2400      	movs	r4, #0
    2938:	e7ec      	b.n	2914 <xTaskIncrementTick+0xd4>
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	20005134 	.word	0x20005134
    2940:	200051b4 	.word	0x200051b4
    2944:	200050bc 	.word	0x200050bc
    2948:	200050c0 	.word	0x200050c0
    294c:	20005170 	.word	0x20005170
    2950:	00002489 	.word	0x00002489
    2954:	2000516c 	.word	0x2000516c
    2958:	00001d7f 	.word	0x00001d7f
    295c:	2000513c 	.word	0x2000513c
    2960:	200050c4 	.word	0x200050c4
    2964:	00001d39 	.word	0x00001d39
    2968:	200050b8 	.word	0x200050b8
    296c:	20005130 	.word	0x20005130
    2970:	000042f1 	.word	0x000042f1
    2974:	200051b8 	.word	0x200051b8

00002978 <xTaskResumeAll>:
{
    2978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    297a:	4b30      	ldr	r3, [pc, #192]	; (2a3c <xTaskResumeAll+0xc4>)
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d101      	bne.n	2986 <xTaskResumeAll+0xe>
    2982:	b672      	cpsid	i
    2984:	e7fe      	b.n	2984 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    2986:	4b2e      	ldr	r3, [pc, #184]	; (2a40 <xTaskResumeAll+0xc8>)
    2988:	4798      	blx	r3
		--uxSchedulerSuspended;
    298a:	4b2c      	ldr	r3, [pc, #176]	; (2a3c <xTaskResumeAll+0xc4>)
    298c:	681a      	ldr	r2, [r3, #0]
    298e:	3a01      	subs	r2, #1
    2990:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2992:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2994:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2996:	2b00      	cmp	r3, #0
    2998:	d103      	bne.n	29a2 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    299a:	4b2a      	ldr	r3, [pc, #168]	; (2a44 <xTaskResumeAll+0xcc>)
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	2b00      	cmp	r3, #0
    29a0:	d103      	bne.n	29aa <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    29a2:	4b29      	ldr	r3, [pc, #164]	; (2a48 <xTaskResumeAll+0xd0>)
    29a4:	4798      	blx	r3
}
    29a6:	0020      	movs	r0, r4
    29a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    29aa:	4d28      	ldr	r5, [pc, #160]	; (2a4c <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    29ac:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    29ae:	682b      	ldr	r3, [r5, #0]
    29b0:	2b00      	cmp	r3, #0
    29b2:	d022      	beq.n	29fa <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    29b4:	68fb      	ldr	r3, [r7, #12]
    29b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    29b8:	0020      	movs	r0, r4
    29ba:	3018      	adds	r0, #24
    29bc:	4b24      	ldr	r3, [pc, #144]	; (2a50 <xTaskResumeAll+0xd8>)
    29be:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    29c0:	1d26      	adds	r6, r4, #4
    29c2:	0030      	movs	r0, r6
    29c4:	4b22      	ldr	r3, [pc, #136]	; (2a50 <xTaskResumeAll+0xd8>)
    29c6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    29c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    29ca:	4a22      	ldr	r2, [pc, #136]	; (2a54 <xTaskResumeAll+0xdc>)
    29cc:	6812      	ldr	r2, [r2, #0]
    29ce:	4293      	cmp	r3, r2
    29d0:	d901      	bls.n	29d6 <xTaskResumeAll+0x5e>
    29d2:	4a20      	ldr	r2, [pc, #128]	; (2a54 <xTaskResumeAll+0xdc>)
    29d4:	6013      	str	r3, [r2, #0]
    29d6:	0098      	lsls	r0, r3, #2
    29d8:	18c0      	adds	r0, r0, r3
    29da:	0080      	lsls	r0, r0, #2
    29dc:	4b1e      	ldr	r3, [pc, #120]	; (2a58 <xTaskResumeAll+0xe0>)
    29de:	1818      	adds	r0, r3, r0
    29e0:	0031      	movs	r1, r6
    29e2:	4b1e      	ldr	r3, [pc, #120]	; (2a5c <xTaskResumeAll+0xe4>)
    29e4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    29e6:	4b1e      	ldr	r3, [pc, #120]	; (2a60 <xTaskResumeAll+0xe8>)
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    29ee:	429a      	cmp	r2, r3
    29f0:	d3dd      	bcc.n	29ae <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    29f2:	2201      	movs	r2, #1
    29f4:	4b1b      	ldr	r3, [pc, #108]	; (2a64 <xTaskResumeAll+0xec>)
    29f6:	601a      	str	r2, [r3, #0]
    29f8:	e7d9      	b.n	29ae <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    29fa:	2c00      	cmp	r4, #0
    29fc:	d001      	beq.n	2a02 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    29fe:	4b1a      	ldr	r3, [pc, #104]	; (2a68 <xTaskResumeAll+0xf0>)
    2a00:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2a02:	4b1a      	ldr	r3, [pc, #104]	; (2a6c <xTaskResumeAll+0xf4>)
    2a04:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    2a06:	2c00      	cmp	r4, #0
    2a08:	d00e      	beq.n	2a28 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    2a0a:	4f19      	ldr	r7, [pc, #100]	; (2a70 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    2a0c:	4e15      	ldr	r6, [pc, #84]	; (2a64 <xTaskResumeAll+0xec>)
    2a0e:	2501      	movs	r5, #1
    2a10:	e002      	b.n	2a18 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    2a12:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    2a14:	2c00      	cmp	r4, #0
    2a16:	d004      	beq.n	2a22 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    2a18:	47b8      	blx	r7
    2a1a:	2800      	cmp	r0, #0
    2a1c:	d0f9      	beq.n	2a12 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    2a1e:	6035      	str	r5, [r6, #0]
    2a20:	e7f7      	b.n	2a12 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    2a22:	2200      	movs	r2, #0
    2a24:	4b11      	ldr	r3, [pc, #68]	; (2a6c <xTaskResumeAll+0xf4>)
    2a26:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    2a28:	4b0e      	ldr	r3, [pc, #56]	; (2a64 <xTaskResumeAll+0xec>)
    2a2a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    2a2c:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d0b7      	beq.n	29a2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    2a32:	4b10      	ldr	r3, [pc, #64]	; (2a74 <xTaskResumeAll+0xfc>)
    2a34:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    2a36:	3401      	adds	r4, #1
    2a38:	e7b3      	b.n	29a2 <xTaskResumeAll+0x2a>
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20005134 	.word	0x20005134
    2a40:	00001021 	.word	0x00001021
    2a44:	20005128 	.word	0x20005128
    2a48:	00001039 	.word	0x00001039
    2a4c:	20005174 	.word	0x20005174
    2a50:	00001d7f 	.word	0x00001d7f
    2a54:	2000513c 	.word	0x2000513c
    2a58:	200050c4 	.word	0x200050c4
    2a5c:	00001d39 	.word	0x00001d39
    2a60:	200050b8 	.word	0x200050b8
    2a64:	200051b8 	.word	0x200051b8
    2a68:	00002489 	.word	0x00002489
    2a6c:	20005130 	.word	0x20005130
    2a70:	00002841 	.word	0x00002841
    2a74:	00001009 	.word	0x00001009

00002a78 <vTaskDelayUntil>:
	{
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	0005      	movs	r5, r0
    2a7c:	000c      	movs	r4, r1
		configASSERT( pxPreviousWakeTime );
    2a7e:	2800      	cmp	r0, #0
    2a80:	d003      	beq.n	2a8a <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
    2a82:	2900      	cmp	r1, #0
    2a84:	d103      	bne.n	2a8e <vTaskDelayUntil+0x16>
    2a86:	b672      	cpsid	i
    2a88:	e7fe      	b.n	2a88 <vTaskDelayUntil+0x10>
		configASSERT( pxPreviousWakeTime );
    2a8a:	b672      	cpsid	i
    2a8c:	e7fe      	b.n	2a8c <vTaskDelayUntil+0x14>
		configASSERT( uxSchedulerSuspended == 0 );
    2a8e:	4b13      	ldr	r3, [pc, #76]	; (2adc <vTaskDelayUntil+0x64>)
    2a90:	681b      	ldr	r3, [r3, #0]
    2a92:	2b00      	cmp	r3, #0
    2a94:	d001      	beq.n	2a9a <vTaskDelayUntil+0x22>
    2a96:	b672      	cpsid	i
    2a98:	e7fe      	b.n	2a98 <vTaskDelayUntil+0x20>
		vTaskSuspendAll();
    2a9a:	4b11      	ldr	r3, [pc, #68]	; (2ae0 <vTaskDelayUntil+0x68>)
    2a9c:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
    2a9e:	4b11      	ldr	r3, [pc, #68]	; (2ae4 <vTaskDelayUntil+0x6c>)
    2aa0:	681b      	ldr	r3, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2aa2:	682a      	ldr	r2, [r5, #0]
    2aa4:	18a0      	adds	r0, r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
    2aa6:	4293      	cmp	r3, r2
    2aa8:	d20f      	bcs.n	2aca <vTaskDelayUntil+0x52>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2aaa:	4282      	cmp	r2, r0
    2aac:	d911      	bls.n	2ad2 <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
    2aae:	6028      	str	r0, [r5, #0]
			if( xShouldDelay != pdFALSE )
    2ab0:	4283      	cmp	r3, r0
    2ab2:	d203      	bcs.n	2abc <vTaskDelayUntil+0x44>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    2ab4:	1ac0      	subs	r0, r0, r3
    2ab6:	2100      	movs	r1, #0
    2ab8:	4b0b      	ldr	r3, [pc, #44]	; (2ae8 <vTaskDelayUntil+0x70>)
    2aba:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    2abc:	4b0b      	ldr	r3, [pc, #44]	; (2aec <vTaskDelayUntil+0x74>)
    2abe:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d101      	bne.n	2ac8 <vTaskDelayUntil+0x50>
			portYIELD_WITHIN_API();
    2ac4:	4b0a      	ldr	r3, [pc, #40]	; (2af0 <vTaskDelayUntil+0x78>)
    2ac6:	4798      	blx	r3
	}
    2ac8:	bd70      	pop	{r4, r5, r6, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    2aca:	4282      	cmp	r2, r0
    2acc:	d803      	bhi.n	2ad6 <vTaskDelayUntil+0x5e>
    2ace:	4283      	cmp	r3, r0
    2ad0:	d301      	bcc.n	2ad6 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
    2ad2:	6028      	str	r0, [r5, #0]
    2ad4:	e7f2      	b.n	2abc <vTaskDelayUntil+0x44>
    2ad6:	6028      	str	r0, [r5, #0]
    2ad8:	e7ec      	b.n	2ab4 <vTaskDelayUntil+0x3c>
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	20005134 	.word	0x20005134
    2ae0:	00002825 	.word	0x00002825
    2ae4:	200051b4 	.word	0x200051b4
    2ae8:	000024b5 	.word	0x000024b5
    2aec:	00002979 	.word	0x00002979
    2af0:	00001009 	.word	0x00001009

00002af4 <vTaskDelay>:
	{
    2af4:	b510      	push	{r4, lr}
    2af6:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    2af8:	d00f      	beq.n	2b1a <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    2afa:	4b09      	ldr	r3, [pc, #36]	; (2b20 <vTaskDelay+0x2c>)
    2afc:	681b      	ldr	r3, [r3, #0]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <vTaskDelay+0x12>
    2b02:	b672      	cpsid	i
    2b04:	e7fe      	b.n	2b04 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2b06:	4b07      	ldr	r3, [pc, #28]	; (2b24 <vTaskDelay+0x30>)
    2b08:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2b0a:	2100      	movs	r1, #0
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b06      	ldr	r3, [pc, #24]	; (2b28 <vTaskDelay+0x34>)
    2b10:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    2b12:	4b06      	ldr	r3, [pc, #24]	; (2b2c <vTaskDelay+0x38>)
    2b14:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    2b16:	2800      	cmp	r0, #0
    2b18:	d101      	bne.n	2b1e <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    2b1a:	4b05      	ldr	r3, [pc, #20]	; (2b30 <vTaskDelay+0x3c>)
    2b1c:	4798      	blx	r3
	}
    2b1e:	bd10      	pop	{r4, pc}
    2b20:	20005134 	.word	0x20005134
    2b24:	00002825 	.word	0x00002825
    2b28:	000024b5 	.word	0x000024b5
    2b2c:	00002979 	.word	0x00002979
    2b30:	00001009 	.word	0x00001009

00002b34 <vTaskSwitchContext>:
{
    2b34:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2b36:	4b2d      	ldr	r3, [pc, #180]	; (2bec <vTaskSwitchContext+0xb8>)
    2b38:	681b      	ldr	r3, [r3, #0]
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d128      	bne.n	2b90 <vTaskSwitchContext+0x5c>
		xYieldPending = pdFALSE;
    2b3e:	2200      	movs	r2, #0
    2b40:	4b2b      	ldr	r3, [pc, #172]	; (2bf0 <vTaskSwitchContext+0xbc>)
    2b42:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    2b44:	4b2b      	ldr	r3, [pc, #172]	; (2bf4 <vTaskSwitchContext+0xc0>)
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b4a:	4a2b      	ldr	r2, [pc, #172]	; (2bf8 <vTaskSwitchContext+0xc4>)
    2b4c:	6819      	ldr	r1, [r3, #0]
    2b4e:	4291      	cmp	r1, r2
    2b50:	d102      	bne.n	2b58 <vTaskSwitchContext+0x24>
    2b52:	6859      	ldr	r1, [r3, #4]
    2b54:	4291      	cmp	r1, r2
    2b56:	d01f      	beq.n	2b98 <vTaskSwitchContext+0x64>
    2b58:	4b26      	ldr	r3, [pc, #152]	; (2bf4 <vTaskSwitchContext+0xc0>)
    2b5a:	6818      	ldr	r0, [r3, #0]
    2b5c:	6819      	ldr	r1, [r3, #0]
    2b5e:	3134      	adds	r1, #52	; 0x34
    2b60:	4b26      	ldr	r3, [pc, #152]	; (2bfc <vTaskSwitchContext+0xc8>)
    2b62:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2b64:	4b26      	ldr	r3, [pc, #152]	; (2c00 <vTaskSwitchContext+0xcc>)
    2b66:	681b      	ldr	r3, [r3, #0]
    2b68:	009a      	lsls	r2, r3, #2
    2b6a:	18d2      	adds	r2, r2, r3
    2b6c:	0092      	lsls	r2, r2, #2
    2b6e:	4925      	ldr	r1, [pc, #148]	; (2c04 <vTaskSwitchContext+0xd0>)
    2b70:	5852      	ldr	r2, [r2, r1]
    2b72:	2a00      	cmp	r2, #0
    2b74:	d117      	bne.n	2ba6 <vTaskSwitchContext+0x72>
    2b76:	2b00      	cmp	r3, #0
    2b78:	d008      	beq.n	2b8c <vTaskSwitchContext+0x58>
    2b7a:	3b01      	subs	r3, #1
    2b7c:	009a      	lsls	r2, r3, #2
    2b7e:	18d2      	adds	r2, r2, r3
    2b80:	0092      	lsls	r2, r2, #2
    2b82:	5852      	ldr	r2, [r2, r1]
    2b84:	2a00      	cmp	r2, #0
    2b86:	d10e      	bne.n	2ba6 <vTaskSwitchContext+0x72>
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1f6      	bne.n	2b7a <vTaskSwitchContext+0x46>
    2b8c:	b672      	cpsid	i
    2b8e:	e7fe      	b.n	2b8e <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
    2b90:	2201      	movs	r2, #1
    2b92:	4b17      	ldr	r3, [pc, #92]	; (2bf0 <vTaskSwitchContext+0xbc>)
    2b94:	601a      	str	r2, [r3, #0]
}
    2b96:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    2b98:	6899      	ldr	r1, [r3, #8]
    2b9a:	4291      	cmp	r1, r2
    2b9c:	d1dc      	bne.n	2b58 <vTaskSwitchContext+0x24>
    2b9e:	68db      	ldr	r3, [r3, #12]
    2ba0:	4293      	cmp	r3, r2
    2ba2:	d1d9      	bne.n	2b58 <vTaskSwitchContext+0x24>
    2ba4:	e7de      	b.n	2b64 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2ba6:	4817      	ldr	r0, [pc, #92]	; (2c04 <vTaskSwitchContext+0xd0>)
    2ba8:	009a      	lsls	r2, r3, #2
    2baa:	18d1      	adds	r1, r2, r3
    2bac:	0089      	lsls	r1, r1, #2
    2bae:	1841      	adds	r1, r0, r1
    2bb0:	684c      	ldr	r4, [r1, #4]
    2bb2:	6864      	ldr	r4, [r4, #4]
    2bb4:	604c      	str	r4, [r1, #4]
    2bb6:	18d2      	adds	r2, r2, r3
    2bb8:	0092      	lsls	r2, r2, #2
    2bba:	3208      	adds	r2, #8
    2bbc:	1882      	adds	r2, r0, r2
    2bbe:	4294      	cmp	r4, r2
    2bc0:	d00b      	beq.n	2bda <vTaskSwitchContext+0xa6>
    2bc2:	009a      	lsls	r2, r3, #2
    2bc4:	18d2      	adds	r2, r2, r3
    2bc6:	0092      	lsls	r2, r2, #2
    2bc8:	490e      	ldr	r1, [pc, #56]	; (2c04 <vTaskSwitchContext+0xd0>)
    2bca:	188a      	adds	r2, r1, r2
    2bcc:	6852      	ldr	r2, [r2, #4]
    2bce:	68d1      	ldr	r1, [r2, #12]
    2bd0:	4a08      	ldr	r2, [pc, #32]	; (2bf4 <vTaskSwitchContext+0xc0>)
    2bd2:	6011      	str	r1, [r2, #0]
    2bd4:	4a0a      	ldr	r2, [pc, #40]	; (2c00 <vTaskSwitchContext+0xcc>)
    2bd6:	6013      	str	r3, [r2, #0]
}
    2bd8:	e7dd      	b.n	2b96 <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2bda:	6860      	ldr	r0, [r4, #4]
    2bdc:	009a      	lsls	r2, r3, #2
    2bde:	18d2      	adds	r2, r2, r3
    2be0:	0092      	lsls	r2, r2, #2
    2be2:	4908      	ldr	r1, [pc, #32]	; (2c04 <vTaskSwitchContext+0xd0>)
    2be4:	188a      	adds	r2, r1, r2
    2be6:	6050      	str	r0, [r2, #4]
    2be8:	e7eb      	b.n	2bc2 <vTaskSwitchContext+0x8e>
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	20005134 	.word	0x20005134
    2bf0:	200051b8 	.word	0x200051b8
    2bf4:	200050b8 	.word	0x200050b8
    2bf8:	a5a5a5a5 	.word	0xa5a5a5a5
    2bfc:	000042f3 	.word	0x000042f3
    2c00:	2000513c 	.word	0x2000513c
    2c04:	200050c4 	.word	0x200050c4

00002c08 <vTaskPlaceOnEventList>:
{
    2c08:	b510      	push	{r4, lr}
    2c0a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    2c0c:	2800      	cmp	r0, #0
    2c0e:	d101      	bne.n	2c14 <vTaskPlaceOnEventList+0xc>
    2c10:	b672      	cpsid	i
    2c12:	e7fe      	b.n	2c12 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2c14:	4b04      	ldr	r3, [pc, #16]	; (2c28 <vTaskPlaceOnEventList+0x20>)
    2c16:	6819      	ldr	r1, [r3, #0]
    2c18:	3118      	adds	r1, #24
    2c1a:	4b04      	ldr	r3, [pc, #16]	; (2c2c <vTaskPlaceOnEventList+0x24>)
    2c1c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2c1e:	2101      	movs	r1, #1
    2c20:	0020      	movs	r0, r4
    2c22:	4b03      	ldr	r3, [pc, #12]	; (2c30 <vTaskPlaceOnEventList+0x28>)
    2c24:	4798      	blx	r3
}
    2c26:	bd10      	pop	{r4, pc}
    2c28:	200050b8 	.word	0x200050b8
    2c2c:	00001d51 	.word	0x00001d51
    2c30:	000024b5 	.word	0x000024b5

00002c34 <vTaskPlaceOnEventListRestricted>:
	{
    2c34:	b570      	push	{r4, r5, r6, lr}
    2c36:	000c      	movs	r4, r1
    2c38:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d00d      	beq.n	2c5a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2c3e:	4b08      	ldr	r3, [pc, #32]	; (2c60 <vTaskPlaceOnEventListRestricted+0x2c>)
    2c40:	6819      	ldr	r1, [r3, #0]
    2c42:	3118      	adds	r1, #24
    2c44:	4b07      	ldr	r3, [pc, #28]	; (2c64 <vTaskPlaceOnEventListRestricted+0x30>)
    2c46:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    2c48:	2d00      	cmp	r5, #0
    2c4a:	d001      	beq.n	2c50 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    2c4c:	2401      	movs	r4, #1
    2c4e:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2c50:	0029      	movs	r1, r5
    2c52:	0020      	movs	r0, r4
    2c54:	4b04      	ldr	r3, [pc, #16]	; (2c68 <vTaskPlaceOnEventListRestricted+0x34>)
    2c56:	4798      	blx	r3
	}
    2c58:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    2c5a:	b672      	cpsid	i
    2c5c:	e7fe      	b.n	2c5c <vTaskPlaceOnEventListRestricted+0x28>
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	200050b8 	.word	0x200050b8
    2c64:	00001d39 	.word	0x00001d39
    2c68:	000024b5 	.word	0x000024b5

00002c6c <xTaskRemoveFromEventList>:
{
    2c6c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2c6e:	68c3      	ldr	r3, [r0, #12]
    2c70:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2c72:	2c00      	cmp	r4, #0
    2c74:	d027      	beq.n	2cc6 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2c76:	0025      	movs	r5, r4
    2c78:	3518      	adds	r5, #24
    2c7a:	0028      	movs	r0, r5
    2c7c:	4b15      	ldr	r3, [pc, #84]	; (2cd4 <xTaskRemoveFromEventList+0x68>)
    2c7e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2c80:	4b15      	ldr	r3, [pc, #84]	; (2cd8 <xTaskRemoveFromEventList+0x6c>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d120      	bne.n	2cca <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2c88:	1d25      	adds	r5, r4, #4
    2c8a:	0028      	movs	r0, r5
    2c8c:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <xTaskRemoveFromEventList+0x68>)
    2c8e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c92:	4a12      	ldr	r2, [pc, #72]	; (2cdc <xTaskRemoveFromEventList+0x70>)
    2c94:	6812      	ldr	r2, [r2, #0]
    2c96:	4293      	cmp	r3, r2
    2c98:	d901      	bls.n	2c9e <xTaskRemoveFromEventList+0x32>
    2c9a:	4a10      	ldr	r2, [pc, #64]	; (2cdc <xTaskRemoveFromEventList+0x70>)
    2c9c:	6013      	str	r3, [r2, #0]
    2c9e:	0098      	lsls	r0, r3, #2
    2ca0:	18c0      	adds	r0, r0, r3
    2ca2:	0080      	lsls	r0, r0, #2
    2ca4:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <xTaskRemoveFromEventList+0x74>)
    2ca6:	1818      	adds	r0, r3, r0
    2ca8:	0029      	movs	r1, r5
    2caa:	4b0e      	ldr	r3, [pc, #56]	; (2ce4 <xTaskRemoveFromEventList+0x78>)
    2cac:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2cae:	4b0e      	ldr	r3, [pc, #56]	; (2ce8 <xTaskRemoveFromEventList+0x7c>)
    2cb0:	681b      	ldr	r3, [r3, #0]
    2cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    2cb6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2cb8:	429a      	cmp	r2, r3
    2cba:	d903      	bls.n	2cc4 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    2cbc:	2201      	movs	r2, #1
    2cbe:	4b0b      	ldr	r3, [pc, #44]	; (2cec <xTaskRemoveFromEventList+0x80>)
    2cc0:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    2cc2:	3001      	adds	r0, #1
}
    2cc4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    2cc6:	b672      	cpsid	i
    2cc8:	e7fe      	b.n	2cc8 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2cca:	0029      	movs	r1, r5
    2ccc:	4808      	ldr	r0, [pc, #32]	; (2cf0 <xTaskRemoveFromEventList+0x84>)
    2cce:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <xTaskRemoveFromEventList+0x78>)
    2cd0:	4798      	blx	r3
    2cd2:	e7ec      	b.n	2cae <xTaskRemoveFromEventList+0x42>
    2cd4:	00001d7f 	.word	0x00001d7f
    2cd8:	20005134 	.word	0x20005134
    2cdc:	2000513c 	.word	0x2000513c
    2ce0:	200050c4 	.word	0x200050c4
    2ce4:	00001d39 	.word	0x00001d39
    2ce8:	200050b8 	.word	0x200050b8
    2cec:	200051b8 	.word	0x200051b8
    2cf0:	20005174 	.word	0x20005174

00002cf4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2cf4:	4b03      	ldr	r3, [pc, #12]	; (2d04 <vTaskInternalSetTimeOutState+0x10>)
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2cfa:	4b03      	ldr	r3, [pc, #12]	; (2d08 <vTaskInternalSetTimeOutState+0x14>)
    2cfc:	681b      	ldr	r3, [r3, #0]
    2cfe:	6043      	str	r3, [r0, #4]
}
    2d00:	4770      	bx	lr
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	20005170 	.word	0x20005170
    2d08:	200051b4 	.word	0x200051b4

00002d0c <xTaskCheckForTimeOut>:
{
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	0006      	movs	r6, r0
    2d10:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    2d12:	2800      	cmp	r0, #0
    2d14:	d01b      	beq.n	2d4e <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    2d16:	2900      	cmp	r1, #0
    2d18:	d01b      	beq.n	2d52 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    2d1a:	4b13      	ldr	r3, [pc, #76]	; (2d68 <xTaskCheckForTimeOut+0x5c>)
    2d1c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    2d1e:	4b13      	ldr	r3, [pc, #76]	; (2d6c <xTaskCheckForTimeOut+0x60>)
    2d20:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2d22:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    2d24:	682b      	ldr	r3, [r5, #0]
    2d26:	1c58      	adds	r0, r3, #1
    2d28:	d01c      	beq.n	2d64 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2d2a:	4811      	ldr	r0, [pc, #68]	; (2d70 <xTaskCheckForTimeOut+0x64>)
    2d2c:	6800      	ldr	r0, [r0, #0]
    2d2e:	6834      	ldr	r4, [r6, #0]
    2d30:	4284      	cmp	r4, r0
    2d32:	d002      	beq.n	2d3a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    2d34:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2d36:	428a      	cmp	r2, r1
    2d38:	d205      	bcs.n	2d46 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2d3a:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d30a      	bcc.n	2d56 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    2d40:	2300      	movs	r3, #0
    2d42:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    2d44:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    2d46:	4b0b      	ldr	r3, [pc, #44]	; (2d74 <xTaskCheckForTimeOut+0x68>)
    2d48:	4798      	blx	r3
}
    2d4a:	0020      	movs	r0, r4
    2d4c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    2d4e:	b672      	cpsid	i
    2d50:	e7fe      	b.n	2d50 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    2d52:	b672      	cpsid	i
    2d54:	e7fe      	b.n	2d54 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    2d56:	1a9b      	subs	r3, r3, r2
    2d58:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    2d5a:	0030      	movs	r0, r6
    2d5c:	4b06      	ldr	r3, [pc, #24]	; (2d78 <xTaskCheckForTimeOut+0x6c>)
    2d5e:	4798      	blx	r3
			xReturn = pdFALSE;
    2d60:	2400      	movs	r4, #0
    2d62:	e7f0      	b.n	2d46 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    2d64:	2400      	movs	r4, #0
    2d66:	e7ee      	b.n	2d46 <xTaskCheckForTimeOut+0x3a>
    2d68:	00001021 	.word	0x00001021
    2d6c:	200051b4 	.word	0x200051b4
    2d70:	20005170 	.word	0x20005170
    2d74:	00001039 	.word	0x00001039
    2d78:	00002cf5 	.word	0x00002cf5

00002d7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    2d7c:	2201      	movs	r2, #1
    2d7e:	4b01      	ldr	r3, [pc, #4]	; (2d84 <vTaskMissedYield+0x8>)
    2d80:	601a      	str	r2, [r3, #0]
}
    2d82:	4770      	bx	lr
    2d84:	200051b8 	.word	0x200051b8

00002d88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    2d88:	4b05      	ldr	r3, [pc, #20]	; (2da0 <xTaskGetSchedulerState+0x18>)
    2d8a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    2d8c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d004      	beq.n	2d9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2d92:	4b04      	ldr	r3, [pc, #16]	; (2da4 <xTaskGetSchedulerState+0x1c>)
    2d94:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    2d96:	4243      	negs	r3, r0
    2d98:	4158      	adcs	r0, r3
    2d9a:	0040      	lsls	r0, r0, #1
	}
    2d9c:	4770      	bx	lr
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	20005188 	.word	0x20005188
    2da4:	20005134 	.word	0x20005134

00002da8 <xTaskPriorityDisinherit>:
	{
    2da8:	b570      	push	{r4, r5, r6, lr}
    2daa:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    2dac:	d02c      	beq.n	2e08 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    2dae:	4b18      	ldr	r3, [pc, #96]	; (2e10 <xTaskPriorityDisinherit+0x68>)
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	4298      	cmp	r0, r3
    2db4:	d001      	beq.n	2dba <xTaskPriorityDisinherit+0x12>
    2db6:	b672      	cpsid	i
    2db8:	e7fe      	b.n	2db8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    2dba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d101      	bne.n	2dc4 <xTaskPriorityDisinherit+0x1c>
    2dc0:	b672      	cpsid	i
    2dc2:	e7fe      	b.n	2dc2 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    2dc4:	3b01      	subs	r3, #1
    2dc6:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2dc8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2dca:	6c81      	ldr	r1, [r0, #72]	; 0x48
    2dcc:	428a      	cmp	r2, r1
    2dce:	d01d      	beq.n	2e0c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    2dd0:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d117      	bne.n	2e06 <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2dd6:	1d25      	adds	r5, r4, #4
    2dd8:	0028      	movs	r0, r5
    2dda:	4b0e      	ldr	r3, [pc, #56]	; (2e14 <xTaskPriorityDisinherit+0x6c>)
    2ddc:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2dde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2de0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2de2:	2205      	movs	r2, #5
    2de4:	1ad2      	subs	r2, r2, r3
    2de6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    2de8:	4a0b      	ldr	r2, [pc, #44]	; (2e18 <xTaskPriorityDisinherit+0x70>)
    2dea:	6812      	ldr	r2, [r2, #0]
    2dec:	4293      	cmp	r3, r2
    2dee:	d901      	bls.n	2df4 <xTaskPriorityDisinherit+0x4c>
    2df0:	4a09      	ldr	r2, [pc, #36]	; (2e18 <xTaskPriorityDisinherit+0x70>)
    2df2:	6013      	str	r3, [r2, #0]
    2df4:	009a      	lsls	r2, r3, #2
    2df6:	18d3      	adds	r3, r2, r3
    2df8:	009b      	lsls	r3, r3, #2
    2dfa:	4808      	ldr	r0, [pc, #32]	; (2e1c <xTaskPriorityDisinherit+0x74>)
    2dfc:	18c0      	adds	r0, r0, r3
    2dfe:	0029      	movs	r1, r5
    2e00:	4b07      	ldr	r3, [pc, #28]	; (2e20 <xTaskPriorityDisinherit+0x78>)
    2e02:	4798      	blx	r3
					xReturn = pdTRUE;
    2e04:	2001      	movs	r0, #1
	}
    2e06:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    2e08:	2000      	movs	r0, #0
    2e0a:	e7fc      	b.n	2e06 <xTaskPriorityDisinherit+0x5e>
    2e0c:	2000      	movs	r0, #0
    2e0e:	e7fa      	b.n	2e06 <xTaskPriorityDisinherit+0x5e>
    2e10:	200050b8 	.word	0x200050b8
    2e14:	00001d7f 	.word	0x00001d7f
    2e18:	2000513c 	.word	0x2000513c
    2e1c:	200050c4 	.word	0x200050c4
    2e20:	00001d39 	.word	0x00001d39

00002e24 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2e24:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2e26:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e28:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    2e2a:	4291      	cmp	r1, r2
    2e2c:	d80b      	bhi.n	2e46 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e2e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2e30:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e32:	6983      	ldr	r3, [r0, #24]
    2e34:	429a      	cmp	r2, r3
    2e36:	d211      	bcs.n	2e5c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2e38:	1d01      	adds	r1, r0, #4
    2e3a:	4b09      	ldr	r3, [pc, #36]	; (2e60 <prvInsertTimerInActiveList+0x3c>)
    2e3c:	6818      	ldr	r0, [r3, #0]
    2e3e:	4b09      	ldr	r3, [pc, #36]	; (2e64 <prvInsertTimerInActiveList+0x40>)
    2e40:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    2e42:	2400      	movs	r4, #0
    2e44:	e00a      	b.n	2e5c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2e46:	429a      	cmp	r2, r3
    2e48:	d202      	bcs.n	2e50 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2e4a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2e4c:	4299      	cmp	r1, r3
    2e4e:	d205      	bcs.n	2e5c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e50:	1d01      	adds	r1, r0, #4
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <prvInsertTimerInActiveList+0x44>)
    2e54:	6818      	ldr	r0, [r3, #0]
    2e56:	4b03      	ldr	r3, [pc, #12]	; (2e64 <prvInsertTimerInActiveList+0x40>)
    2e58:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    2e5a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    2e5c:	0020      	movs	r0, r4
    2e5e:	bd10      	pop	{r4, pc}
    2e60:	200051c0 	.word	0x200051c0
    2e64:	00001d51 	.word	0x00001d51
    2e68:	200051bc 	.word	0x200051bc

00002e6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2e6c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2e6e:	4b10      	ldr	r3, [pc, #64]	; (2eb0 <prvCheckForValidListAndQueue+0x44>)
    2e70:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    2e72:	4b10      	ldr	r3, [pc, #64]	; (2eb4 <prvCheckForValidListAndQueue+0x48>)
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d002      	beq.n	2e80 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2e7a:	4b0f      	ldr	r3, [pc, #60]	; (2eb8 <prvCheckForValidListAndQueue+0x4c>)
    2e7c:	4798      	blx	r3
}
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    2e80:	4d0e      	ldr	r5, [pc, #56]	; (2ebc <prvCheckForValidListAndQueue+0x50>)
    2e82:	0028      	movs	r0, r5
    2e84:	4e0e      	ldr	r6, [pc, #56]	; (2ec0 <prvCheckForValidListAndQueue+0x54>)
    2e86:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    2e88:	4c0e      	ldr	r4, [pc, #56]	; (2ec4 <prvCheckForValidListAndQueue+0x58>)
    2e8a:	0020      	movs	r0, r4
    2e8c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    2e8e:	4b0e      	ldr	r3, [pc, #56]	; (2ec8 <prvCheckForValidListAndQueue+0x5c>)
    2e90:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2e92:	4b0e      	ldr	r3, [pc, #56]	; (2ecc <prvCheckForValidListAndQueue+0x60>)
    2e94:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2e96:	2200      	movs	r2, #0
    2e98:	2110      	movs	r1, #16
    2e9a:	2005      	movs	r0, #5
    2e9c:	4b0c      	ldr	r3, [pc, #48]	; (2ed0 <prvCheckForValidListAndQueue+0x64>)
    2e9e:	4798      	blx	r3
    2ea0:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <prvCheckForValidListAndQueue+0x48>)
    2ea2:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d0e8      	beq.n	2e7a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    2ea8:	490a      	ldr	r1, [pc, #40]	; (2ed4 <prvCheckForValidListAndQueue+0x68>)
    2eaa:	4b0b      	ldr	r3, [pc, #44]	; (2ed8 <prvCheckForValidListAndQueue+0x6c>)
    2eac:	4798      	blx	r3
    2eae:	e7e4      	b.n	2e7a <prvCheckForValidListAndQueue+0xe>
    2eb0:	00001021 	.word	0x00001021
    2eb4:	200051f0 	.word	0x200051f0
    2eb8:	00001039 	.word	0x00001039
    2ebc:	200051c4 	.word	0x200051c4
    2ec0:	00001d1d 	.word	0x00001d1d
    2ec4:	200051d8 	.word	0x200051d8
    2ec8:	200051bc 	.word	0x200051bc
    2ecc:	200051c0 	.word	0x200051c0
    2ed0:	00001ffd 	.word	0x00001ffd
    2ed4:	00006bb4 	.word	0x00006bb4
    2ed8:	000023f9 	.word	0x000023f9

00002edc <xTimerCreateTimerTask>:
{
    2edc:	b510      	push	{r4, lr}
    2ede:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    2ee0:	4b0b      	ldr	r3, [pc, #44]	; (2f10 <xTimerCreateTimerTask+0x34>)
    2ee2:	4798      	blx	r3
	if( xTimerQueue != NULL )
    2ee4:	4b0b      	ldr	r3, [pc, #44]	; (2f14 <xTimerCreateTimerTask+0x38>)
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d00e      	beq.n	2f0a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
    2eec:	4b0a      	ldr	r3, [pc, #40]	; (2f18 <xTimerCreateTimerTask+0x3c>)
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	2304      	movs	r3, #4
    2ef2:	9300      	str	r3, [sp, #0]
    2ef4:	2300      	movs	r3, #0
    2ef6:	2282      	movs	r2, #130	; 0x82
    2ef8:	0052      	lsls	r2, r2, #1
    2efa:	4908      	ldr	r1, [pc, #32]	; (2f1c <xTimerCreateTimerTask+0x40>)
    2efc:	4808      	ldr	r0, [pc, #32]	; (2f20 <xTimerCreateTimerTask+0x44>)
    2efe:	4c09      	ldr	r4, [pc, #36]	; (2f24 <xTimerCreateTimerTask+0x48>)
    2f00:	47a0      	blx	r4
	configASSERT( xReturn );
    2f02:	2800      	cmp	r0, #0
    2f04:	d001      	beq.n	2f0a <xTimerCreateTimerTask+0x2e>
}
    2f06:	b002      	add	sp, #8
    2f08:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    2f0a:	b672      	cpsid	i
    2f0c:	e7fe      	b.n	2f0c <xTimerCreateTimerTask+0x30>
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	00002e6d 	.word	0x00002e6d
    2f14:	200051f0 	.word	0x200051f0
    2f18:	200051f4 	.word	0x200051f4
    2f1c:	00006bbc 	.word	0x00006bbc
    2f20:	00003099 	.word	0x00003099
    2f24:	000025c9 	.word	0x000025c9

00002f28 <xTimerCreate>:
	{
    2f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2a:	46c6      	mov	lr, r8
    2f2c:	b500      	push	{lr}
    2f2e:	4680      	mov	r8, r0
    2f30:	000d      	movs	r5, r1
    2f32:	0017      	movs	r7, r2
    2f34:	001e      	movs	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    2f36:	202c      	movs	r0, #44	; 0x2c
    2f38:	4b0b      	ldr	r3, [pc, #44]	; (2f68 <xTimerCreate+0x40>)
    2f3a:	4798      	blx	r3
    2f3c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    2f3e:	d00f      	beq.n	2f60 <xTimerCreate+0x38>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    2f40:	2d00      	cmp	r5, #0
    2f42:	d101      	bne.n	2f48 <xTimerCreate+0x20>
    2f44:	b672      	cpsid	i
    2f46:	e7fe      	b.n	2f46 <xTimerCreate+0x1e>
		prvCheckForValidListAndQueue();
    2f48:	4b08      	ldr	r3, [pc, #32]	; (2f6c <xTimerCreate+0x44>)
    2f4a:	4798      	blx	r3
		pxNewTimer->pcTimerName = pcTimerName;
    2f4c:	4643      	mov	r3, r8
    2f4e:	6023      	str	r3, [r4, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2f50:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    2f52:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    2f54:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2f56:	9b06      	ldr	r3, [sp, #24]
    2f58:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2f5a:	1d20      	adds	r0, r4, #4
    2f5c:	4b04      	ldr	r3, [pc, #16]	; (2f70 <xTimerCreate+0x48>)
    2f5e:	4798      	blx	r3
	}
    2f60:	0020      	movs	r0, r4
    2f62:	bc04      	pop	{r2}
    2f64:	4690      	mov	r8, r2
    2f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f68:	000010bd 	.word	0x000010bd
    2f6c:	00002e6d 	.word	0x00002e6d
    2f70:	00001d33 	.word	0x00001d33

00002f74 <xTimerGenericCommand>:
{
    2f74:	b530      	push	{r4, r5, lr}
    2f76:	b085      	sub	sp, #20
    2f78:	0004      	movs	r4, r0
    2f7a:	001d      	movs	r5, r3
	configASSERT( xTimer );
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d014      	beq.n	2faa <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    2f80:	4b13      	ldr	r3, [pc, #76]	; (2fd0 <xTimerGenericCommand+0x5c>)
    2f82:	6818      	ldr	r0, [r3, #0]
    2f84:	2800      	cmp	r0, #0
    2f86:	d021      	beq.n	2fcc <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    2f88:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f8a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2f8c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f8e:	2905      	cmp	r1, #5
    2f90:	dc15      	bgt.n	2fbe <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f92:	4b10      	ldr	r3, [pc, #64]	; (2fd4 <xTimerGenericCommand+0x60>)
    2f94:	4798      	blx	r3
    2f96:	2802      	cmp	r0, #2
    2f98:	d009      	beq.n	2fae <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f9a:	4b0d      	ldr	r3, [pc, #52]	; (2fd0 <xTimerGenericCommand+0x5c>)
    2f9c:	6818      	ldr	r0, [r3, #0]
    2f9e:	2300      	movs	r3, #0
    2fa0:	2200      	movs	r2, #0
    2fa2:	4669      	mov	r1, sp
    2fa4:	4c0c      	ldr	r4, [pc, #48]	; (2fd8 <xTimerGenericCommand+0x64>)
    2fa6:	47a0      	blx	r4
    2fa8:	e00e      	b.n	2fc8 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    2faa:	b672      	cpsid	i
    2fac:	e7fe      	b.n	2fac <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2fae:	4b08      	ldr	r3, [pc, #32]	; (2fd0 <xTimerGenericCommand+0x5c>)
    2fb0:	6818      	ldr	r0, [r3, #0]
    2fb2:	2300      	movs	r3, #0
    2fb4:	9a08      	ldr	r2, [sp, #32]
    2fb6:	4669      	mov	r1, sp
    2fb8:	4c07      	ldr	r4, [pc, #28]	; (2fd8 <xTimerGenericCommand+0x64>)
    2fba:	47a0      	blx	r4
    2fbc:	e004      	b.n	2fc8 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2fbe:	2300      	movs	r3, #0
    2fc0:	002a      	movs	r2, r5
    2fc2:	4669      	mov	r1, sp
    2fc4:	4c05      	ldr	r4, [pc, #20]	; (2fdc <xTimerGenericCommand+0x68>)
    2fc6:	47a0      	blx	r4
}
    2fc8:	b005      	add	sp, #20
    2fca:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    2fcc:	2000      	movs	r0, #0
	return xReturn;
    2fce:	e7fb      	b.n	2fc8 <xTimerGenericCommand+0x54>
    2fd0:	200051f0 	.word	0x200051f0
    2fd4:	00002d89 	.word	0x00002d89
    2fd8:	00002049 	.word	0x00002049
    2fdc:	000021d5 	.word	0x000021d5

00002fe0 <prvSampleTimeNow>:
{
    2fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fe2:	46d6      	mov	lr, sl
    2fe4:	464f      	mov	r7, r9
    2fe6:	4646      	mov	r6, r8
    2fe8:	b5c0      	push	{r6, r7, lr}
    2fea:	b082      	sub	sp, #8
    2fec:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    2fee:	4b23      	ldr	r3, [pc, #140]	; (307c <prvSampleTimeNow+0x9c>)
    2ff0:	4798      	blx	r3
    2ff2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    2ff4:	4b22      	ldr	r3, [pc, #136]	; (3080 <prvSampleTimeNow+0xa0>)
    2ff6:	681b      	ldr	r3, [r3, #0]
    2ff8:	4298      	cmp	r0, r3
    2ffa:	d317      	bcc.n	302c <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    2ffc:	2300      	movs	r3, #0
    2ffe:	4642      	mov	r2, r8
    3000:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    3002:	4b1f      	ldr	r3, [pc, #124]	; (3080 <prvSampleTimeNow+0xa0>)
    3004:	4652      	mov	r2, sl
    3006:	601a      	str	r2, [r3, #0]
}
    3008:	4650      	mov	r0, sl
    300a:	b002      	add	sp, #8
    300c:	bc1c      	pop	{r2, r3, r4}
    300e:	4690      	mov	r8, r2
    3010:	4699      	mov	r9, r3
    3012:	46a2      	mov	sl, r4
    3014:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3016:	2300      	movs	r3, #0
    3018:	9300      	str	r3, [sp, #0]
    301a:	003a      	movs	r2, r7
    301c:	2100      	movs	r1, #0
    301e:	0020      	movs	r0, r4
    3020:	4c18      	ldr	r4, [pc, #96]	; (3084 <prvSampleTimeNow+0xa4>)
    3022:	47a0      	blx	r4
				configASSERT( xResult );
    3024:	2800      	cmp	r0, #0
    3026:	d104      	bne.n	3032 <prvSampleTimeNow+0x52>
    3028:	b672      	cpsid	i
    302a:	e7fe      	b.n	302a <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    302c:	4d16      	ldr	r5, [pc, #88]	; (3088 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    302e:	4b17      	ldr	r3, [pc, #92]	; (308c <prvSampleTimeNow+0xac>)
    3030:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3032:	682b      	ldr	r3, [r5, #0]
    3034:	681a      	ldr	r2, [r3, #0]
    3036:	2a00      	cmp	r2, #0
    3038:	d017      	beq.n	306a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    303a:	68db      	ldr	r3, [r3, #12]
    303c:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    303e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3040:	1d26      	adds	r6, r4, #4
    3042:	0030      	movs	r0, r6
    3044:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3046:	0020      	movs	r0, r4
    3048:	6a63      	ldr	r3, [r4, #36]	; 0x24
    304a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    304c:	69e3      	ldr	r3, [r4, #28]
    304e:	2b01      	cmp	r3, #1
    3050:	d1ef      	bne.n	3032 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3052:	69a3      	ldr	r3, [r4, #24]
    3054:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    3056:	429f      	cmp	r7, r3
    3058:	d2dd      	bcs.n	3016 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    305a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    305c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    305e:	4b0a      	ldr	r3, [pc, #40]	; (3088 <prvSampleTimeNow+0xa8>)
    3060:	6818      	ldr	r0, [r3, #0]
    3062:	0031      	movs	r1, r6
    3064:	4b0a      	ldr	r3, [pc, #40]	; (3090 <prvSampleTimeNow+0xb0>)
    3066:	4798      	blx	r3
    3068:	e7e3      	b.n	3032 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    306a:	4a0a      	ldr	r2, [pc, #40]	; (3094 <prvSampleTimeNow+0xb4>)
    306c:	4906      	ldr	r1, [pc, #24]	; (3088 <prvSampleTimeNow+0xa8>)
    306e:	6810      	ldr	r0, [r2, #0]
    3070:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    3072:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    3074:	2301      	movs	r3, #1
    3076:	4642      	mov	r2, r8
    3078:	6013      	str	r3, [r2, #0]
    307a:	e7c2      	b.n	3002 <prvSampleTimeNow+0x22>
    307c:	00002835 	.word	0x00002835
    3080:	200051ec 	.word	0x200051ec
    3084:	00002f75 	.word	0x00002f75
    3088:	200051bc 	.word	0x200051bc
    308c:	00001d7f 	.word	0x00001d7f
    3090:	00001d51 	.word	0x00001d51
    3094:	200051c0 	.word	0x200051c0

00003098 <prvTimerTask>:
{
    3098:	b5f0      	push	{r4, r5, r6, r7, lr}
    309a:	b08d      	sub	sp, #52	; 0x34
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    309c:	4f59      	ldr	r7, [pc, #356]	; (3204 <prvTimerTask+0x16c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    309e:	4b5a      	ldr	r3, [pc, #360]	; (3208 <prvTimerTask+0x170>)
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    30a4:	2a00      	cmp	r2, #0
    30a6:	d00e      	beq.n	30c6 <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30a8:	68db      	ldr	r3, [r3, #12]
    30aa:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    30ac:	4b57      	ldr	r3, [pc, #348]	; (320c <prvTimerTask+0x174>)
    30ae:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30b0:	a808      	add	r0, sp, #32
    30b2:	4b57      	ldr	r3, [pc, #348]	; (3210 <prvTimerTask+0x178>)
    30b4:	4798      	blx	r3
    30b6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    30b8:	9b08      	ldr	r3, [sp, #32]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d146      	bne.n	314c <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    30be:	42a0      	cmp	r0, r4
    30c0:	d21d      	bcs.n	30fe <prvTimerTask+0x66>
    30c2:	2200      	movs	r2, #0
    30c4:	e00f      	b.n	30e6 <prvTimerTask+0x4e>
	vTaskSuspendAll();
    30c6:	4b51      	ldr	r3, [pc, #324]	; (320c <prvTimerTask+0x174>)
    30c8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30ca:	a808      	add	r0, sp, #32
    30cc:	4b50      	ldr	r3, [pc, #320]	; (3210 <prvTimerTask+0x178>)
    30ce:	4798      	blx	r3
    30d0:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    30d2:	9b08      	ldr	r3, [sp, #32]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d139      	bne.n	314c <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    30d8:	4b4e      	ldr	r3, [pc, #312]	; (3214 <prvTimerTask+0x17c>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	425a      	negs	r2, r3
    30e0:	415a      	adcs	r2, r3
    30e2:	b2d2      	uxtb	r2, r2
    30e4:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    30e6:	1b61      	subs	r1, r4, r5
    30e8:	4b4b      	ldr	r3, [pc, #300]	; (3218 <prvTimerTask+0x180>)
    30ea:	6818      	ldr	r0, [r3, #0]
    30ec:	4b4b      	ldr	r3, [pc, #300]	; (321c <prvTimerTask+0x184>)
    30ee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    30f0:	4b4b      	ldr	r3, [pc, #300]	; (3220 <prvTimerTask+0x188>)
    30f2:	4798      	blx	r3
    30f4:	2800      	cmp	r0, #0
    30f6:	d026      	beq.n	3146 <prvTimerTask+0xae>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30f8:	4d47      	ldr	r5, [pc, #284]	; (3218 <prvTimerTask+0x180>)
    30fa:	4c4a      	ldr	r4, [pc, #296]	; (3224 <prvTimerTask+0x18c>)
    30fc:	e036      	b.n	316c <prvTimerTask+0xd4>
				( void ) xTaskResumeAll();
    30fe:	4b48      	ldr	r3, [pc, #288]	; (3220 <prvTimerTask+0x188>)
    3100:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3102:	4b41      	ldr	r3, [pc, #260]	; (3208 <prvTimerTask+0x170>)
    3104:	681b      	ldr	r3, [r3, #0]
    3106:	68db      	ldr	r3, [r3, #12]
    3108:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    310a:	1d30      	adds	r0, r6, #4
    310c:	4b3d      	ldr	r3, [pc, #244]	; (3204 <prvTimerTask+0x16c>)
    310e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3110:	69f3      	ldr	r3, [r6, #28]
    3112:	2b01      	cmp	r3, #1
    3114:	d003      	beq.n	311e <prvTimerTask+0x86>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3116:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3118:	0030      	movs	r0, r6
    311a:	4798      	blx	r3
    311c:	e7ec      	b.n	30f8 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    311e:	69b3      	ldr	r3, [r6, #24]
    3120:	18e1      	adds	r1, r4, r3
    3122:	0023      	movs	r3, r4
    3124:	002a      	movs	r2, r5
    3126:	0030      	movs	r0, r6
    3128:	4d3f      	ldr	r5, [pc, #252]	; (3228 <prvTimerTask+0x190>)
    312a:	47a8      	blx	r5
    312c:	2800      	cmp	r0, #0
    312e:	d0f2      	beq.n	3116 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3130:	2300      	movs	r3, #0
    3132:	9300      	str	r3, [sp, #0]
    3134:	0022      	movs	r2, r4
    3136:	2100      	movs	r1, #0
    3138:	0030      	movs	r0, r6
    313a:	4c3c      	ldr	r4, [pc, #240]	; (322c <prvTimerTask+0x194>)
    313c:	47a0      	blx	r4
			configASSERT( xResult );
    313e:	2800      	cmp	r0, #0
    3140:	d1e9      	bne.n	3116 <prvTimerTask+0x7e>
    3142:	b672      	cpsid	i
    3144:	e7fe      	b.n	3144 <prvTimerTask+0xac>
					portYIELD_WITHIN_API();
    3146:	4b3a      	ldr	r3, [pc, #232]	; (3230 <prvTimerTask+0x198>)
    3148:	4798      	blx	r3
    314a:	e7d5      	b.n	30f8 <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    314c:	4b34      	ldr	r3, [pc, #208]	; (3220 <prvTimerTask+0x188>)
    314e:	4798      	blx	r3
    3150:	e7d2      	b.n	30f8 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    3152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3154:	9303      	str	r3, [sp, #12]
    3156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3158:	9304      	str	r3, [sp, #16]
    315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    315c:	9305      	str	r3, [sp, #20]
    315e:	9903      	ldr	r1, [sp, #12]
    3160:	9804      	ldr	r0, [sp, #16]
    3162:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3164:	9b08      	ldr	r3, [sp, #32]
    3166:	9303      	str	r3, [sp, #12]
    3168:	2b00      	cmp	r3, #0
    316a:	da09      	bge.n	3180 <prvTimerTask+0xe8>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    316c:	2200      	movs	r2, #0
    316e:	a908      	add	r1, sp, #32
    3170:	6828      	ldr	r0, [r5, #0]
    3172:	47a0      	blx	r4
    3174:	2800      	cmp	r0, #0
    3176:	d092      	beq.n	309e <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    3178:	9b08      	ldr	r3, [sp, #32]
    317a:	9303      	str	r3, [sp, #12]
    317c:	2b00      	cmp	r3, #0
    317e:	dbe8      	blt.n	3152 <prvTimerTask+0xba>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3180:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3182:	6973      	ldr	r3, [r6, #20]
    3184:	2b00      	cmp	r3, #0
    3186:	d001      	beq.n	318c <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3188:	1d30      	adds	r0, r6, #4
    318a:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    318c:	a807      	add	r0, sp, #28
    318e:	4b20      	ldr	r3, [pc, #128]	; (3210 <prvTimerTask+0x178>)
    3190:	4798      	blx	r3
			switch( xMessage.xMessageID )
    3192:	9b08      	ldr	r3, [sp, #32]
    3194:	2b09      	cmp	r3, #9
    3196:	d8e9      	bhi.n	316c <prvTimerTask+0xd4>
    3198:	009b      	lsls	r3, r3, #2
    319a:	4a26      	ldr	r2, [pc, #152]	; (3234 <prvTimerTask+0x19c>)
    319c:	58d3      	ldr	r3, [r2, r3]
    319e:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    31a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31a2:	69b2      	ldr	r2, [r6, #24]
    31a4:	4694      	mov	ip, r2
    31a6:	4463      	add	r3, ip
    31a8:	0019      	movs	r1, r3
    31aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31ac:	0002      	movs	r2, r0
    31ae:	0030      	movs	r0, r6
    31b0:	4c1d      	ldr	r4, [pc, #116]	; (3228 <prvTimerTask+0x190>)
    31b2:	47a0      	blx	r4
    31b4:	2800      	cmp	r0, #0
    31b6:	d0a0      	beq.n	30fa <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31b8:	0030      	movs	r0, r6
    31ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
    31bc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    31be:	69f3      	ldr	r3, [r6, #28]
    31c0:	2b01      	cmp	r3, #1
    31c2:	d19a      	bne.n	30fa <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    31c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31c6:	69b1      	ldr	r1, [r6, #24]
    31c8:	468c      	mov	ip, r1
    31ca:	4463      	add	r3, ip
    31cc:	001a      	movs	r2, r3
    31ce:	2300      	movs	r3, #0
    31d0:	9300      	str	r3, [sp, #0]
    31d2:	2100      	movs	r1, #0
    31d4:	0030      	movs	r0, r6
    31d6:	4c15      	ldr	r4, [pc, #84]	; (322c <prvTimerTask+0x194>)
    31d8:	47a0      	blx	r4
							configASSERT( xResult );
    31da:	2800      	cmp	r0, #0
    31dc:	d18d      	bne.n	30fa <prvTimerTask+0x62>
    31de:	b672      	cpsid	i
    31e0:	e7fe      	b.n	31e0 <prvTimerTask+0x148>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31e2:	9909      	ldr	r1, [sp, #36]	; 0x24
    31e4:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    31e6:	2900      	cmp	r1, #0
    31e8:	d006      	beq.n	31f8 <prvTimerTask+0x160>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31ea:	1841      	adds	r1, r0, r1
    31ec:	0003      	movs	r3, r0
    31ee:	0002      	movs	r2, r0
    31f0:	0030      	movs	r0, r6
    31f2:	4c0d      	ldr	r4, [pc, #52]	; (3228 <prvTimerTask+0x190>)
    31f4:	47a0      	blx	r4
    31f6:	e780      	b.n	30fa <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    31f8:	b672      	cpsid	i
    31fa:	e7fe      	b.n	31fa <prvTimerTask+0x162>
						vPortFree( pxTimer );
    31fc:	0030      	movs	r0, r6
    31fe:	4b0e      	ldr	r3, [pc, #56]	; (3238 <prvTimerTask+0x1a0>)
    3200:	4798      	blx	r3
    3202:	e77a      	b.n	30fa <prvTimerTask+0x62>
    3204:	00001d7f 	.word	0x00001d7f
    3208:	200051bc 	.word	0x200051bc
    320c:	00002825 	.word	0x00002825
    3210:	00002fe1 	.word	0x00002fe1
    3214:	200051c0 	.word	0x200051c0
    3218:	200051f0 	.word	0x200051f0
    321c:	00002429 	.word	0x00002429
    3220:	00002979 	.word	0x00002979
    3224:	000022a5 	.word	0x000022a5
    3228:	00002e25 	.word	0x00002e25
    322c:	00002f75 	.word	0x00002f75
    3230:	00001009 	.word	0x00001009
    3234:	00006b8c 	.word	0x00006b8c
    3238:	000011e9 	.word	0x000011e9

0000323c <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    323c:	b510      	push	{r4, lr}
    323e:	b082      	sub	sp, #8
    3240:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
    3242:	4a39      	ldr	r2, [pc, #228]	; (3328 <wdt_set_config+0xec>)
    3244:	6993      	ldr	r3, [r2, #24]
    3246:	2110      	movs	r1, #16
    3248:	430b      	orrs	r3, r1
    324a:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    324c:	4b37      	ldr	r3, [pc, #220]	; (332c <wdt_set_config+0xf0>)
    324e:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    3250:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
    3252:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
    3254:	2b00      	cmp	r3, #0
    3256:	db03      	blt.n	3260 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    3258:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
    325a:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
    325c:	2b00      	cmp	r3, #0
    325e:	d101      	bne.n	3264 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
    3260:	b002      	add	sp, #8
    3262:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
    3264:	7922      	ldrb	r2, [r4, #4]
    3266:	429a      	cmp	r2, r3
    3268:	d8fa      	bhi.n	3260 <wdt_set_config+0x24>
    326a:	7962      	ldrb	r2, [r4, #5]
    326c:	429a      	cmp	r2, r3
    326e:	d8f7      	bhi.n	3260 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    3270:	4a2e      	ldr	r2, [pc, #184]	; (332c <wdt_set_config+0xf0>)
    3272:	7813      	ldrb	r3, [r2, #0]
    3274:	390e      	subs	r1, #14
    3276:	438b      	bics	r3, r1
    3278:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    327a:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    327c:	b25b      	sxtb	r3, r3
    327e:	2b00      	cmp	r3, #0
    3280:	dbfb      	blt.n	327a <wdt_set_config+0x3e>
	if(config->enable == false) {
    3282:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    3284:	2000      	movs	r0, #0
	if(config->enable == false) {
    3286:	2b00      	cmp	r3, #0
    3288:	d0ea      	beq.n	3260 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
    328a:	a901      	add	r1, sp, #4
    328c:	78a3      	ldrb	r3, [r4, #2]
    328e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    3290:	3003      	adds	r0, #3
    3292:	4b27      	ldr	r3, [pc, #156]	; (3330 <wdt_set_config+0xf4>)
    3294:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    3296:	2003      	movs	r0, #3
    3298:	4b26      	ldr	r3, [pc, #152]	; (3334 <wdt_set_config+0xf8>)
    329a:	4798      	blx	r3
	if (config->always_on) {
    329c:	7823      	ldrb	r3, [r4, #0]
    329e:	2b00      	cmp	r3, #0
    32a0:	d127      	bne.n	32f2 <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    32a2:	78e3      	ldrb	r3, [r4, #3]
    32a4:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
    32a6:	7922      	ldrb	r2, [r4, #4]
    32a8:	2a00      	cmp	r2, #0
    32aa:	d026      	beq.n	32fa <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    32ac:	491f      	ldr	r1, [pc, #124]	; (332c <wdt_set_config+0xf0>)
    32ae:	780a      	ldrb	r2, [r1, #0]
    32b0:	2004      	movs	r0, #4
    32b2:	4302      	orrs	r2, r0
    32b4:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    32b6:	7922      	ldrb	r2, [r4, #4]
    32b8:	3a01      	subs	r2, #1
    32ba:	4082      	lsls	r2, r0
    32bc:	4313      	orrs	r3, r2
    32be:	491b      	ldr	r1, [pc, #108]	; (332c <wdt_set_config+0xf0>)
    32c0:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
    32c2:	b252      	sxtb	r2, r2
    32c4:	2a00      	cmp	r2, #0
    32c6:	dbfb      	blt.n	32c0 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
    32c8:	b2db      	uxtb	r3, r3
    32ca:	4a18      	ldr	r2, [pc, #96]	; (332c <wdt_set_config+0xf0>)
    32cc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    32ce:	7963      	ldrb	r3, [r4, #5]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d118      	bne.n	3306 <wdt_set_config+0xca>
	if (config->always_on) {
    32d4:	7823      	ldrb	r3, [r4, #0]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d01f      	beq.n	331a <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    32da:	4a14      	ldr	r2, [pc, #80]	; (332c <wdt_set_config+0xf0>)
    32dc:	7813      	ldrb	r3, [r2, #0]
    32de:	2180      	movs	r1, #128	; 0x80
    32e0:	430b      	orrs	r3, r1
    32e2:	7013      	strb	r3, [r2, #0]
    32e4:	4a11      	ldr	r2, [pc, #68]	; (332c <wdt_set_config+0xf0>)
    32e6:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
    32e8:	b25b      	sxtb	r3, r3
    32ea:	2b00      	cmp	r3, #0
    32ec:	dbfb      	blt.n	32e6 <wdt_set_config+0xaa>
	return STATUS_OK;
    32ee:	2000      	movs	r0, #0
    32f0:	e7b6      	b.n	3260 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
    32f2:	2003      	movs	r0, #3
    32f4:	4b10      	ldr	r3, [pc, #64]	; (3338 <wdt_set_config+0xfc>)
    32f6:	4798      	blx	r3
    32f8:	e7d3      	b.n	32a2 <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    32fa:	490c      	ldr	r1, [pc, #48]	; (332c <wdt_set_config+0xf0>)
    32fc:	780a      	ldrb	r2, [r1, #0]
    32fe:	2004      	movs	r0, #4
    3300:	4382      	bics	r2, r0
    3302:	700a      	strb	r2, [r1, #0]
    3304:	e7db      	b.n	32be <wdt_set_config+0x82>
    3306:	0011      	movs	r1, r2
    3308:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    330a:	b252      	sxtb	r2, r2
    330c:	2a00      	cmp	r2, #0
    330e:	dbfb      	blt.n	3308 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    3310:	3b01      	subs	r3, #1
    3312:	b2db      	uxtb	r3, r3
    3314:	4a05      	ldr	r2, [pc, #20]	; (332c <wdt_set_config+0xf0>)
    3316:	7093      	strb	r3, [r2, #2]
    3318:	e7dc      	b.n	32d4 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    331a:	4a04      	ldr	r2, [pc, #16]	; (332c <wdt_set_config+0xf0>)
    331c:	7813      	ldrb	r3, [r2, #0]
    331e:	2102      	movs	r1, #2
    3320:	430b      	orrs	r3, r1
    3322:	7013      	strb	r3, [r2, #0]
    3324:	e7de      	b.n	32e4 <wdt_set_config+0xa8>
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	40000400 	.word	0x40000400
    332c:	40001000 	.word	0x40001000
    3330:	00003ff9 	.word	0x00003ff9
    3334:	00003f6d 	.word	0x00003f6d
    3338:	00004015 	.word	0x00004015

0000333c <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    333c:	22a5      	movs	r2, #165	; 0xa5
    333e:	4b04      	ldr	r3, [pc, #16]	; (3350 <wdt_reset_count+0x14>)
    3340:	721a      	strb	r2, [r3, #8]
    3342:	001a      	movs	r2, r3
    3344:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    3346:	b25b      	sxtb	r3, r3
    3348:	2b00      	cmp	r3, #0
    334a:	dbfb      	blt.n	3344 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    334c:	4770      	bx	lr
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	40001000 	.word	0x40001000

00003354 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    3354:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    3356:	2201      	movs	r2, #1
    3358:	4b03      	ldr	r3, [pc, #12]	; (3368 <WDT_Handler+0x14>)
    335a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    335c:	4b03      	ldr	r3, [pc, #12]	; (336c <WDT_Handler+0x18>)
    335e:	681b      	ldr	r3, [r3, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d000      	beq.n	3366 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    3364:	4798      	blx	r3
	}
}
    3366:	bd10      	pop	{r4, pc}
    3368:	40001000 	.word	0x40001000
    336c:	2000527c 	.word	0x2000527c

00003370 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3370:	b510      	push	{r4, lr}
    3372:	b082      	sub	sp, #8
    3374:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3376:	4b0e      	ldr	r3, [pc, #56]	; (33b0 <sercom_set_gclk_generator+0x40>)
    3378:	781b      	ldrb	r3, [r3, #0]
    337a:	2b00      	cmp	r3, #0
    337c:	d007      	beq.n	338e <sercom_set_gclk_generator+0x1e>
    337e:	2900      	cmp	r1, #0
    3380:	d105      	bne.n	338e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3382:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <sercom_set_gclk_generator+0x40>)
    3384:	785b      	ldrb	r3, [r3, #1]
    3386:	4283      	cmp	r3, r0
    3388:	d010      	beq.n	33ac <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    338a:	201d      	movs	r0, #29
    338c:	e00c      	b.n	33a8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    338e:	a901      	add	r1, sp, #4
    3390:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3392:	2013      	movs	r0, #19
    3394:	4b07      	ldr	r3, [pc, #28]	; (33b4 <sercom_set_gclk_generator+0x44>)
    3396:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3398:	2013      	movs	r0, #19
    339a:	4b07      	ldr	r3, [pc, #28]	; (33b8 <sercom_set_gclk_generator+0x48>)
    339c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    339e:	4b04      	ldr	r3, [pc, #16]	; (33b0 <sercom_set_gclk_generator+0x40>)
    33a0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    33a2:	2201      	movs	r2, #1
    33a4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    33a6:	2000      	movs	r0, #0
}
    33a8:	b002      	add	sp, #8
    33aa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    33ac:	2000      	movs	r0, #0
    33ae:	e7fb      	b.n	33a8 <sercom_set_gclk_generator+0x38>
    33b0:	200051f8 	.word	0x200051f8
    33b4:	00003ff9 	.word	0x00003ff9
    33b8:	00003f6d 	.word	0x00003f6d

000033bc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    33bc:	4b40      	ldr	r3, [pc, #256]	; (34c0 <_sercom_get_default_pad+0x104>)
    33be:	4298      	cmp	r0, r3
    33c0:	d031      	beq.n	3426 <_sercom_get_default_pad+0x6a>
    33c2:	d90a      	bls.n	33da <_sercom_get_default_pad+0x1e>
    33c4:	4b3f      	ldr	r3, [pc, #252]	; (34c4 <_sercom_get_default_pad+0x108>)
    33c6:	4298      	cmp	r0, r3
    33c8:	d04d      	beq.n	3466 <_sercom_get_default_pad+0xaa>
    33ca:	4b3f      	ldr	r3, [pc, #252]	; (34c8 <_sercom_get_default_pad+0x10c>)
    33cc:	4298      	cmp	r0, r3
    33ce:	d05a      	beq.n	3486 <_sercom_get_default_pad+0xca>
    33d0:	4b3e      	ldr	r3, [pc, #248]	; (34cc <_sercom_get_default_pad+0x110>)
    33d2:	4298      	cmp	r0, r3
    33d4:	d037      	beq.n	3446 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    33d6:	2000      	movs	r0, #0
}
    33d8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    33da:	4b3d      	ldr	r3, [pc, #244]	; (34d0 <_sercom_get_default_pad+0x114>)
    33dc:	4298      	cmp	r0, r3
    33de:	d00c      	beq.n	33fa <_sercom_get_default_pad+0x3e>
    33e0:	4b3c      	ldr	r3, [pc, #240]	; (34d4 <_sercom_get_default_pad+0x118>)
    33e2:	4298      	cmp	r0, r3
    33e4:	d1f7      	bne.n	33d6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    33e6:	2901      	cmp	r1, #1
    33e8:	d017      	beq.n	341a <_sercom_get_default_pad+0x5e>
    33ea:	2900      	cmp	r1, #0
    33ec:	d05d      	beq.n	34aa <_sercom_get_default_pad+0xee>
    33ee:	2902      	cmp	r1, #2
    33f0:	d015      	beq.n	341e <_sercom_get_default_pad+0x62>
    33f2:	2903      	cmp	r1, #3
    33f4:	d015      	beq.n	3422 <_sercom_get_default_pad+0x66>
	return 0;
    33f6:	2000      	movs	r0, #0
    33f8:	e7ee      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    33fa:	2901      	cmp	r1, #1
    33fc:	d007      	beq.n	340e <_sercom_get_default_pad+0x52>
    33fe:	2900      	cmp	r1, #0
    3400:	d051      	beq.n	34a6 <_sercom_get_default_pad+0xea>
    3402:	2902      	cmp	r1, #2
    3404:	d005      	beq.n	3412 <_sercom_get_default_pad+0x56>
    3406:	2903      	cmp	r1, #3
    3408:	d005      	beq.n	3416 <_sercom_get_default_pad+0x5a>
	return 0;
    340a:	2000      	movs	r0, #0
    340c:	e7e4      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    340e:	4832      	ldr	r0, [pc, #200]	; (34d8 <_sercom_get_default_pad+0x11c>)
    3410:	e7e2      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3412:	4832      	ldr	r0, [pc, #200]	; (34dc <_sercom_get_default_pad+0x120>)
    3414:	e7e0      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3416:	4832      	ldr	r0, [pc, #200]	; (34e0 <_sercom_get_default_pad+0x124>)
    3418:	e7de      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    341a:	4832      	ldr	r0, [pc, #200]	; (34e4 <_sercom_get_default_pad+0x128>)
    341c:	e7dc      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    341e:	4832      	ldr	r0, [pc, #200]	; (34e8 <_sercom_get_default_pad+0x12c>)
    3420:	e7da      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3422:	4832      	ldr	r0, [pc, #200]	; (34ec <_sercom_get_default_pad+0x130>)
    3424:	e7d8      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3426:	2901      	cmp	r1, #1
    3428:	d007      	beq.n	343a <_sercom_get_default_pad+0x7e>
    342a:	2900      	cmp	r1, #0
    342c:	d03f      	beq.n	34ae <_sercom_get_default_pad+0xf2>
    342e:	2902      	cmp	r1, #2
    3430:	d005      	beq.n	343e <_sercom_get_default_pad+0x82>
    3432:	2903      	cmp	r1, #3
    3434:	d005      	beq.n	3442 <_sercom_get_default_pad+0x86>
	return 0;
    3436:	2000      	movs	r0, #0
    3438:	e7ce      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    343a:	482d      	ldr	r0, [pc, #180]	; (34f0 <_sercom_get_default_pad+0x134>)
    343c:	e7cc      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    343e:	482d      	ldr	r0, [pc, #180]	; (34f4 <_sercom_get_default_pad+0x138>)
    3440:	e7ca      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3442:	482d      	ldr	r0, [pc, #180]	; (34f8 <_sercom_get_default_pad+0x13c>)
    3444:	e7c8      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3446:	2901      	cmp	r1, #1
    3448:	d007      	beq.n	345a <_sercom_get_default_pad+0x9e>
    344a:	2900      	cmp	r1, #0
    344c:	d031      	beq.n	34b2 <_sercom_get_default_pad+0xf6>
    344e:	2902      	cmp	r1, #2
    3450:	d005      	beq.n	345e <_sercom_get_default_pad+0xa2>
    3452:	2903      	cmp	r1, #3
    3454:	d005      	beq.n	3462 <_sercom_get_default_pad+0xa6>
	return 0;
    3456:	2000      	movs	r0, #0
    3458:	e7be      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    345a:	4828      	ldr	r0, [pc, #160]	; (34fc <_sercom_get_default_pad+0x140>)
    345c:	e7bc      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    345e:	4828      	ldr	r0, [pc, #160]	; (3500 <_sercom_get_default_pad+0x144>)
    3460:	e7ba      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3462:	4828      	ldr	r0, [pc, #160]	; (3504 <_sercom_get_default_pad+0x148>)
    3464:	e7b8      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3466:	2901      	cmp	r1, #1
    3468:	d007      	beq.n	347a <_sercom_get_default_pad+0xbe>
    346a:	2900      	cmp	r1, #0
    346c:	d023      	beq.n	34b6 <_sercom_get_default_pad+0xfa>
    346e:	2902      	cmp	r1, #2
    3470:	d005      	beq.n	347e <_sercom_get_default_pad+0xc2>
    3472:	2903      	cmp	r1, #3
    3474:	d005      	beq.n	3482 <_sercom_get_default_pad+0xc6>
	return 0;
    3476:	2000      	movs	r0, #0
    3478:	e7ae      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    347a:	4823      	ldr	r0, [pc, #140]	; (3508 <_sercom_get_default_pad+0x14c>)
    347c:	e7ac      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    347e:	4823      	ldr	r0, [pc, #140]	; (350c <_sercom_get_default_pad+0x150>)
    3480:	e7aa      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3482:	4823      	ldr	r0, [pc, #140]	; (3510 <_sercom_get_default_pad+0x154>)
    3484:	e7a8      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    3486:	2901      	cmp	r1, #1
    3488:	d007      	beq.n	349a <_sercom_get_default_pad+0xde>
    348a:	2900      	cmp	r1, #0
    348c:	d015      	beq.n	34ba <_sercom_get_default_pad+0xfe>
    348e:	2902      	cmp	r1, #2
    3490:	d005      	beq.n	349e <_sercom_get_default_pad+0xe2>
    3492:	2903      	cmp	r1, #3
    3494:	d005      	beq.n	34a2 <_sercom_get_default_pad+0xe6>
	return 0;
    3496:	2000      	movs	r0, #0
    3498:	e79e      	b.n	33d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    349a:	481e      	ldr	r0, [pc, #120]	; (3514 <_sercom_get_default_pad+0x158>)
    349c:	e79c      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    349e:	481e      	ldr	r0, [pc, #120]	; (3518 <_sercom_get_default_pad+0x15c>)
    34a0:	e79a      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34a2:	481e      	ldr	r0, [pc, #120]	; (351c <_sercom_get_default_pad+0x160>)
    34a4:	e798      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34a6:	481e      	ldr	r0, [pc, #120]	; (3520 <_sercom_get_default_pad+0x164>)
    34a8:	e796      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34aa:	2003      	movs	r0, #3
    34ac:	e794      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34ae:	481d      	ldr	r0, [pc, #116]	; (3524 <_sercom_get_default_pad+0x168>)
    34b0:	e792      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34b2:	481d      	ldr	r0, [pc, #116]	; (3528 <_sercom_get_default_pad+0x16c>)
    34b4:	e790      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34b6:	481d      	ldr	r0, [pc, #116]	; (352c <_sercom_get_default_pad+0x170>)
    34b8:	e78e      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34ba:	481d      	ldr	r0, [pc, #116]	; (3530 <_sercom_get_default_pad+0x174>)
    34bc:	e78c      	b.n	33d8 <_sercom_get_default_pad+0x1c>
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	42001000 	.word	0x42001000
    34c4:	42001800 	.word	0x42001800
    34c8:	42001c00 	.word	0x42001c00
    34cc:	42001400 	.word	0x42001400
    34d0:	42000800 	.word	0x42000800
    34d4:	42000c00 	.word	0x42000c00
    34d8:	00050003 	.word	0x00050003
    34dc:	00060003 	.word	0x00060003
    34e0:	00070003 	.word	0x00070003
    34e4:	00010003 	.word	0x00010003
    34e8:	001e0003 	.word	0x001e0003
    34ec:	001f0003 	.word	0x001f0003
    34f0:	00090003 	.word	0x00090003
    34f4:	000a0003 	.word	0x000a0003
    34f8:	000b0003 	.word	0x000b0003
    34fc:	00110003 	.word	0x00110003
    3500:	00120003 	.word	0x00120003
    3504:	00130003 	.word	0x00130003
    3508:	000d0003 	.word	0x000d0003
    350c:	000e0003 	.word	0x000e0003
    3510:	000f0003 	.word	0x000f0003
    3514:	00170003 	.word	0x00170003
    3518:	00180003 	.word	0x00180003
    351c:	00190003 	.word	0x00190003
    3520:	00040003 	.word	0x00040003
    3524:	00080003 	.word	0x00080003
    3528:	00100003 	.word	0x00100003
    352c:	000c0003 	.word	0x000c0003
    3530:	00160003 	.word	0x00160003

00003534 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3534:	b530      	push	{r4, r5, lr}
    3536:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3538:	4b0b      	ldr	r3, [pc, #44]	; (3568 <_sercom_get_sercom_inst_index+0x34>)
    353a:	466a      	mov	r2, sp
    353c:	cb32      	ldmia	r3!, {r1, r4, r5}
    353e:	c232      	stmia	r2!, {r1, r4, r5}
    3540:	cb32      	ldmia	r3!, {r1, r4, r5}
    3542:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3544:	9b00      	ldr	r3, [sp, #0]
    3546:	4283      	cmp	r3, r0
    3548:	d00b      	beq.n	3562 <_sercom_get_sercom_inst_index+0x2e>
    354a:	2301      	movs	r3, #1
    354c:	009a      	lsls	r2, r3, #2
    354e:	4669      	mov	r1, sp
    3550:	5852      	ldr	r2, [r2, r1]
    3552:	4282      	cmp	r2, r0
    3554:	d006      	beq.n	3564 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3556:	3301      	adds	r3, #1
    3558:	2b06      	cmp	r3, #6
    355a:	d1f7      	bne.n	354c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    355c:	2000      	movs	r0, #0
}
    355e:	b007      	add	sp, #28
    3560:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3562:	2300      	movs	r3, #0
			return i;
    3564:	b2d8      	uxtb	r0, r3
    3566:	e7fa      	b.n	355e <_sercom_get_sercom_inst_index+0x2a>
    3568:	00006bc4 	.word	0x00006bc4

0000356c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    356c:	4770      	bx	lr
	...

00003570 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3570:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3572:	4b0a      	ldr	r3, [pc, #40]	; (359c <_sercom_set_handler+0x2c>)
    3574:	781b      	ldrb	r3, [r3, #0]
    3576:	2b00      	cmp	r3, #0
    3578:	d10c      	bne.n	3594 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    357a:	4f09      	ldr	r7, [pc, #36]	; (35a0 <_sercom_set_handler+0x30>)
    357c:	4e09      	ldr	r6, [pc, #36]	; (35a4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    357e:	4d0a      	ldr	r5, [pc, #40]	; (35a8 <_sercom_set_handler+0x38>)
    3580:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3582:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3584:	195a      	adds	r2, r3, r5
    3586:	6014      	str	r4, [r2, #0]
    3588:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    358a:	2b18      	cmp	r3, #24
    358c:	d1f9      	bne.n	3582 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    358e:	2201      	movs	r2, #1
    3590:	4b02      	ldr	r3, [pc, #8]	; (359c <_sercom_set_handler+0x2c>)
    3592:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3594:	0080      	lsls	r0, r0, #2
    3596:	4b02      	ldr	r3, [pc, #8]	; (35a0 <_sercom_set_handler+0x30>)
    3598:	50c1      	str	r1, [r0, r3]
}
    359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    359c:	200051fa 	.word	0x200051fa
    35a0:	200051fc 	.word	0x200051fc
    35a4:	0000356d 	.word	0x0000356d
    35a8:	20005280 	.word	0x20005280

000035ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    35ac:	b500      	push	{lr}
    35ae:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    35b0:	2309      	movs	r3, #9
    35b2:	466a      	mov	r2, sp
    35b4:	7013      	strb	r3, [r2, #0]
    35b6:	3301      	adds	r3, #1
    35b8:	7053      	strb	r3, [r2, #1]
    35ba:	3301      	adds	r3, #1
    35bc:	7093      	strb	r3, [r2, #2]
    35be:	3301      	adds	r3, #1
    35c0:	70d3      	strb	r3, [r2, #3]
    35c2:	3301      	adds	r3, #1
    35c4:	7113      	strb	r3, [r2, #4]
    35c6:	3301      	adds	r3, #1
    35c8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    35ca:	4b03      	ldr	r3, [pc, #12]	; (35d8 <_sercom_get_interrupt_vector+0x2c>)
    35cc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    35ce:	466b      	mov	r3, sp
    35d0:	5618      	ldrsb	r0, [r3, r0]
}
    35d2:	b003      	add	sp, #12
    35d4:	bd00      	pop	{pc}
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	00003535 	.word	0x00003535

000035dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    35dc:	b510      	push	{r4, lr}
    35de:	4b02      	ldr	r3, [pc, #8]	; (35e8 <SERCOM0_Handler+0xc>)
    35e0:	681b      	ldr	r3, [r3, #0]
    35e2:	2000      	movs	r0, #0
    35e4:	4798      	blx	r3
    35e6:	bd10      	pop	{r4, pc}
    35e8:	200051fc 	.word	0x200051fc

000035ec <SERCOM1_Handler>:
    35ec:	b510      	push	{r4, lr}
    35ee:	4b02      	ldr	r3, [pc, #8]	; (35f8 <SERCOM1_Handler+0xc>)
    35f0:	685b      	ldr	r3, [r3, #4]
    35f2:	2001      	movs	r0, #1
    35f4:	4798      	blx	r3
    35f6:	bd10      	pop	{r4, pc}
    35f8:	200051fc 	.word	0x200051fc

000035fc <SERCOM2_Handler>:
    35fc:	b510      	push	{r4, lr}
    35fe:	4b02      	ldr	r3, [pc, #8]	; (3608 <SERCOM2_Handler+0xc>)
    3600:	689b      	ldr	r3, [r3, #8]
    3602:	2002      	movs	r0, #2
    3604:	4798      	blx	r3
    3606:	bd10      	pop	{r4, pc}
    3608:	200051fc 	.word	0x200051fc

0000360c <SERCOM3_Handler>:
    360c:	b510      	push	{r4, lr}
    360e:	4b02      	ldr	r3, [pc, #8]	; (3618 <SERCOM3_Handler+0xc>)
    3610:	68db      	ldr	r3, [r3, #12]
    3612:	2003      	movs	r0, #3
    3614:	4798      	blx	r3
    3616:	bd10      	pop	{r4, pc}
    3618:	200051fc 	.word	0x200051fc

0000361c <SERCOM4_Handler>:
    361c:	b510      	push	{r4, lr}
    361e:	4b02      	ldr	r3, [pc, #8]	; (3628 <SERCOM4_Handler+0xc>)
    3620:	691b      	ldr	r3, [r3, #16]
    3622:	2004      	movs	r0, #4
    3624:	4798      	blx	r3
    3626:	bd10      	pop	{r4, pc}
    3628:	200051fc 	.word	0x200051fc

0000362c <SERCOM5_Handler>:
    362c:	b510      	push	{r4, lr}
    362e:	4b02      	ldr	r3, [pc, #8]	; (3638 <SERCOM5_Handler+0xc>)
    3630:	695b      	ldr	r3, [r3, #20]
    3632:	2005      	movs	r0, #5
    3634:	4798      	blx	r3
    3636:	bd10      	pop	{r4, pc}
    3638:	200051fc 	.word	0x200051fc

0000363c <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    363c:	4770      	bx	lr
	...

00003640 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3640:	b530      	push	{r4, r5, lr}
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3642:	4bcb      	ldr	r3, [pc, #812]	; (3970 <system_board_init+0x330>)
    3644:	2201      	movs	r2, #1
    3646:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3648:	2540      	movs	r5, #64	; 0x40
    364a:	5d59      	ldrb	r1, [r3, r5]
    364c:	2002      	movs	r0, #2
    364e:	2402      	movs	r4, #2
    3650:	4321      	orrs	r1, r4
    3652:	b2c9      	uxtb	r1, r1
    3654:	5559      	strb	r1, [r3, r5]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3656:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3658:	6058      	str	r0, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    365a:	2141      	movs	r1, #65	; 0x41
    365c:	5c5a      	ldrb	r2, [r3, r1]
    365e:	4322      	orrs	r2, r4
    3660:	b2d2      	uxtb	r2, r2
    3662:	545a      	strb	r2, [r3, r1]
	base->WRCONFIG.reg =
    3664:	4ac3      	ldr	r2, [pc, #780]	; (3974 <system_board_init+0x334>)
    3666:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3668:	4ac3      	ldr	r2, [pc, #780]	; (3978 <system_board_init+0x338>)
    366a:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    366c:	6158      	str	r0, [r3, #20]
	base->WRCONFIG.reg =
    366e:	4ac3      	ldr	r2, [pc, #780]	; (397c <system_board_init+0x33c>)
    3670:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3672:	4ac3      	ldr	r2, [pc, #780]	; (3980 <system_board_init+0x340>)
    3674:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3676:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3678:	2401      	movs	r4, #1
    367a:	3002      	adds	r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    367c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    367e:	3301      	adds	r3, #1
    3680:	2b20      	cmp	r3, #32
    3682:	d00a      	beq.n	369a <system_board_init+0x5a>
		if (mask & (1 << i)) {
    3684:	0022      	movs	r2, r4
    3686:	409a      	lsls	r2, r3
    3688:	4210      	tst	r0, r2
    368a:	d0f8      	beq.n	367e <system_board_init+0x3e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    368c:	4abd      	ldr	r2, [pc, #756]	; (3984 <system_board_init+0x344>)
    368e:	1899      	adds	r1, r3, r2
    3690:	780a      	ldrb	r2, [r1, #0]
    3692:	432a      	orrs	r2, r5
    3694:	b2d2      	uxtb	r2, r2
    3696:	700a      	strb	r2, [r1, #0]
    3698:	e7f1      	b.n	367e <system_board_init+0x3e>
	base->WRCONFIG.reg =
    369a:	4bbb      	ldr	r3, [pc, #748]	; (3988 <system_board_init+0x348>)
    369c:	4abb      	ldr	r2, [pc, #748]	; (398c <system_board_init+0x34c>)
    369e:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    36a0:	4ab7      	ldr	r2, [pc, #732]	; (3980 <system_board_init+0x340>)
    36a2:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    36a4:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    36a6:	2401      	movs	r4, #1
    36a8:	2080      	movs	r0, #128	; 0x80
    36aa:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    36ac:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    36ae:	3301      	adds	r3, #1
    36b0:	2b20      	cmp	r3, #32
    36b2:	d00a      	beq.n	36ca <system_board_init+0x8a>
		if (mask & (1 << i)) {
    36b4:	0022      	movs	r2, r4
    36b6:	409a      	lsls	r2, r3
    36b8:	4202      	tst	r2, r0
    36ba:	d0f8      	beq.n	36ae <system_board_init+0x6e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    36bc:	4ab4      	ldr	r2, [pc, #720]	; (3990 <system_board_init+0x350>)
    36be:	1899      	adds	r1, r3, r2
    36c0:	780a      	ldrb	r2, [r1, #0]
    36c2:	432a      	orrs	r2, r5
    36c4:	b2d2      	uxtb	r2, r2
    36c6:	700a      	strb	r2, [r1, #0]
    36c8:	e7f1      	b.n	36ae <system_board_init+0x6e>
	base->WRCONFIG.reg =
    36ca:	4baf      	ldr	r3, [pc, #700]	; (3988 <system_board_init+0x348>)
    36cc:	4ab1      	ldr	r2, [pc, #708]	; (3994 <system_board_init+0x354>)
    36ce:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    36d0:	4aab      	ldr	r2, [pc, #684]	; (3980 <system_board_init+0x340>)
    36d2:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    36d4:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    36d6:	2401      	movs	r4, #1
    36d8:	2080      	movs	r0, #128	; 0x80
    36da:	0080      	lsls	r0, r0, #2
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    36dc:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    36de:	3301      	adds	r3, #1
    36e0:	2b20      	cmp	r3, #32
    36e2:	d00a      	beq.n	36fa <system_board_init+0xba>
		if (mask & (1 << i)) {
    36e4:	0022      	movs	r2, r4
    36e6:	409a      	lsls	r2, r3
    36e8:	4202      	tst	r2, r0
    36ea:	d0f8      	beq.n	36de <system_board_init+0x9e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    36ec:	4aa8      	ldr	r2, [pc, #672]	; (3990 <system_board_init+0x350>)
    36ee:	1899      	adds	r1, r3, r2
    36f0:	780a      	ldrb	r2, [r1, #0]
    36f2:	432a      	orrs	r2, r5
    36f4:	b2d2      	uxtb	r2, r2
    36f6:	700a      	strb	r2, [r1, #0]
    36f8:	e7f1      	b.n	36de <system_board_init+0x9e>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    36fa:	4b9d      	ldr	r3, [pc, #628]	; (3970 <system_board_init+0x330>)
    36fc:	2280      	movs	r2, #128	; 0x80
    36fe:	05d2      	lsls	r2, r2, #23
    3700:	605a      	str	r2, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3702:	205e      	movs	r0, #94	; 0x5e
    3704:	5c19      	ldrb	r1, [r3, r0]
    3706:	2502      	movs	r5, #2
    3708:	4329      	orrs	r1, r5
    370a:	b2c9      	uxtb	r1, r1
    370c:	5419      	strb	r1, [r3, r0]
	base->WRCONFIG.reg =
    370e:	48a2      	ldr	r0, [pc, #648]	; (3998 <system_board_init+0x358>)
    3710:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3712:	49a2      	ldr	r1, [pc, #648]	; (399c <system_board_init+0x35c>)
    3714:	6299      	str	r1, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    3716:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3718:	2180      	movs	r1, #128	; 0x80
    371a:	0609      	lsls	r1, r1, #24
    371c:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    371e:	245f      	movs	r4, #95	; 0x5f
    3720:	5d1a      	ldrb	r2, [r3, r4]
    3722:	432a      	orrs	r2, r5
    3724:	b2d2      	uxtb	r2, r2
    3726:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    3728:	6298      	str	r0, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    372a:	4a9d      	ldr	r2, [pc, #628]	; (39a0 <system_board_init+0x360>)
    372c:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    372e:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    3730:	4a9c      	ldr	r2, [pc, #624]	; (39a4 <system_board_init+0x364>)
    3732:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3734:	4a92      	ldr	r2, [pc, #584]	; (3980 <system_board_init+0x340>)
    3736:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3738:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    373a:	3c5e      	subs	r4, #94	; 0x5e
    373c:	2010      	movs	r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    373e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3740:	3301      	adds	r3, #1
    3742:	2b20      	cmp	r3, #32
    3744:	d00a      	beq.n	375c <system_board_init+0x11c>
		if (mask & (1 << i)) {
    3746:	0022      	movs	r2, r4
    3748:	409a      	lsls	r2, r3
    374a:	4210      	tst	r0, r2
    374c:	d0f8      	beq.n	3740 <system_board_init+0x100>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    374e:	4a8d      	ldr	r2, [pc, #564]	; (3984 <system_board_init+0x344>)
    3750:	1899      	adds	r1, r3, r2
    3752:	780a      	ldrb	r2, [r1, #0]
    3754:	432a      	orrs	r2, r5
    3756:	b2d2      	uxtb	r2, r2
    3758:	700a      	strb	r2, [r1, #0]
    375a:	e7f1      	b.n	3740 <system_board_init+0x100>
	base->WRCONFIG.reg =
    375c:	4b84      	ldr	r3, [pc, #528]	; (3970 <system_board_init+0x330>)
    375e:	4a92      	ldr	r2, [pc, #584]	; (39a8 <system_board_init+0x368>)
    3760:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3762:	4a87      	ldr	r2, [pc, #540]	; (3980 <system_board_init+0x340>)
    3764:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3766:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3768:	2401      	movs	r4, #1
    376a:	2020      	movs	r0, #32
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    376c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    376e:	3301      	adds	r3, #1
    3770:	2b20      	cmp	r3, #32
    3772:	d00a      	beq.n	378a <system_board_init+0x14a>
		if (mask & (1 << i)) {
    3774:	0022      	movs	r2, r4
    3776:	409a      	lsls	r2, r3
    3778:	4210      	tst	r0, r2
    377a:	d0f8      	beq.n	376e <system_board_init+0x12e>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    377c:	4a81      	ldr	r2, [pc, #516]	; (3984 <system_board_init+0x344>)
    377e:	1899      	adds	r1, r3, r2
    3780:	780a      	ldrb	r2, [r1, #0]
    3782:	432a      	orrs	r2, r5
    3784:	b2d2      	uxtb	r2, r2
    3786:	700a      	strb	r2, [r1, #0]
    3788:	e7f1      	b.n	376e <system_board_init+0x12e>
	base->WRCONFIG.reg =
    378a:	4b79      	ldr	r3, [pc, #484]	; (3970 <system_board_init+0x330>)
    378c:	4a87      	ldr	r2, [pc, #540]	; (39ac <system_board_init+0x36c>)
    378e:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3790:	4a7b      	ldr	r2, [pc, #492]	; (3980 <system_board_init+0x340>)
    3792:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3794:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3796:	2401      	movs	r4, #1
    3798:	2040      	movs	r0, #64	; 0x40
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    379a:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    379c:	3301      	adds	r3, #1
    379e:	2b20      	cmp	r3, #32
    37a0:	d00a      	beq.n	37b8 <system_board_init+0x178>
		if (mask & (1 << i)) {
    37a2:	0022      	movs	r2, r4
    37a4:	409a      	lsls	r2, r3
    37a6:	4210      	tst	r0, r2
    37a8:	d0f8      	beq.n	379c <system_board_init+0x15c>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    37aa:	4a76      	ldr	r2, [pc, #472]	; (3984 <system_board_init+0x344>)
    37ac:	1899      	adds	r1, r3, r2
    37ae:	780a      	ldrb	r2, [r1, #0]
    37b0:	432a      	orrs	r2, r5
    37b2:	b2d2      	uxtb	r2, r2
    37b4:	700a      	strb	r2, [r1, #0]
    37b6:	e7f1      	b.n	379c <system_board_init+0x15c>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    37b8:	4b73      	ldr	r3, [pc, #460]	; (3988 <system_board_init+0x348>)
    37ba:	2180      	movs	r1, #128	; 0x80
    37bc:	0409      	lsls	r1, r1, #16
    37be:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    37c0:	2077      	movs	r0, #119	; 0x77
    37c2:	5c1a      	ldrb	r2, [r3, r0]
    37c4:	2402      	movs	r4, #2
    37c6:	4322      	orrs	r2, r4
    37c8:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    37ca:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    37cc:	4b68      	ldr	r3, [pc, #416]	; (3970 <system_board_init+0x330>)
    37ce:	4a78      	ldr	r2, [pc, #480]	; (39b0 <system_board_init+0x370>)
    37d0:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    37d2:	4a78      	ldr	r2, [pc, #480]	; (39b4 <system_board_init+0x374>)
    37d4:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    37d6:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    37d8:	3c01      	subs	r4, #1
    37da:	2080      	movs	r0, #128	; 0x80
    37dc:	03c0      	lsls	r0, r0, #15
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    37de:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    37e0:	3301      	adds	r3, #1
    37e2:	2b20      	cmp	r3, #32
    37e4:	d00a      	beq.n	37fc <system_board_init+0x1bc>
		if (mask & (1 << i)) {
    37e6:	0022      	movs	r2, r4
    37e8:	409a      	lsls	r2, r3
    37ea:	4202      	tst	r2, r0
    37ec:	d0f8      	beq.n	37e0 <system_board_init+0x1a0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    37ee:	4a65      	ldr	r2, [pc, #404]	; (3984 <system_board_init+0x344>)
    37f0:	1899      	adds	r1, r3, r2
    37f2:	780a      	ldrb	r2, [r1, #0]
    37f4:	432a      	orrs	r2, r5
    37f6:	b2d2      	uxtb	r2, r2
    37f8:	700a      	strb	r2, [r1, #0]
    37fa:	e7f1      	b.n	37e0 <system_board_init+0x1a0>
	base->WRCONFIG.reg =
    37fc:	4b5c      	ldr	r3, [pc, #368]	; (3970 <system_board_init+0x330>)
    37fe:	4a6c      	ldr	r2, [pc, #432]	; (39b0 <system_board_init+0x370>)
    3800:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3802:	4a6d      	ldr	r2, [pc, #436]	; (39b8 <system_board_init+0x378>)
    3804:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3806:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3808:	2401      	movs	r4, #1
    380a:	2080      	movs	r0, #128	; 0x80
    380c:	0400      	lsls	r0, r0, #16
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    380e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3810:	3301      	adds	r3, #1
    3812:	2b20      	cmp	r3, #32
    3814:	d00a      	beq.n	382c <system_board_init+0x1ec>
		if (mask & (1 << i)) {
    3816:	0022      	movs	r2, r4
    3818:	409a      	lsls	r2, r3
    381a:	4202      	tst	r2, r0
    381c:	d0f8      	beq.n	3810 <system_board_init+0x1d0>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    381e:	4a59      	ldr	r2, [pc, #356]	; (3984 <system_board_init+0x344>)
    3820:	1899      	adds	r1, r3, r2
    3822:	780a      	ldrb	r2, [r1, #0]
    3824:	432a      	orrs	r2, r5
    3826:	b2d2      	uxtb	r2, r2
    3828:	700a      	strb	r2, [r1, #0]
    382a:	e7f1      	b.n	3810 <system_board_init+0x1d0>
	base->WRCONFIG.reg =
    382c:	4b56      	ldr	r3, [pc, #344]	; (3988 <system_board_init+0x348>)
    382e:	4a53      	ldr	r2, [pc, #332]	; (397c <system_board_init+0x33c>)
    3830:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3832:	4a53      	ldr	r2, [pc, #332]	; (3980 <system_board_init+0x340>)
    3834:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3836:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3838:	2401      	movs	r4, #1
    383a:	2004      	movs	r0, #4
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    383c:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    383e:	3301      	adds	r3, #1
    3840:	2b20      	cmp	r3, #32
    3842:	d00a      	beq.n	385a <system_board_init+0x21a>
		if (mask & (1 << i)) {
    3844:	0022      	movs	r2, r4
    3846:	409a      	lsls	r2, r3
    3848:	4210      	tst	r0, r2
    384a:	d0f8      	beq.n	383e <system_board_init+0x1fe>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    384c:	4a50      	ldr	r2, [pc, #320]	; (3990 <system_board_init+0x350>)
    384e:	1899      	adds	r1, r3, r2
    3850:	780a      	ldrb	r2, [r1, #0]
    3852:	432a      	orrs	r2, r5
    3854:	b2d2      	uxtb	r2, r2
    3856:	700a      	strb	r2, [r1, #0]
    3858:	e7f1      	b.n	383e <system_board_init+0x1fe>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    385a:	4b45      	ldr	r3, [pc, #276]	; (3970 <system_board_init+0x330>)
    385c:	2180      	movs	r1, #128	; 0x80
    385e:	0509      	lsls	r1, r1, #20
    3860:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3862:	205b      	movs	r0, #91	; 0x5b
    3864:	5c1a      	ldrb	r2, [r3, r0]
    3866:	2402      	movs	r4, #2
    3868:	4322      	orrs	r2, r4
    386a:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    386c:	6159      	str	r1, [r3, #20]
	base->WRCONFIG.reg =
    386e:	4a50      	ldr	r2, [pc, #320]	; (39b0 <system_board_init+0x370>)
    3870:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3872:	4a52      	ldr	r2, [pc, #328]	; (39bc <system_board_init+0x37c>)
    3874:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3876:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    3878:	3c01      	subs	r4, #1
    387a:	2080      	movs	r0, #128	; 0x80
    387c:	0240      	lsls	r0, r0, #9
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    387e:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3880:	3301      	adds	r3, #1
    3882:	2b20      	cmp	r3, #32
    3884:	d00a      	beq.n	389c <system_board_init+0x25c>
		if (mask & (1 << i)) {
    3886:	0022      	movs	r2, r4
    3888:	409a      	lsls	r2, r3
    388a:	4202      	tst	r2, r0
    388c:	d0f8      	beq.n	3880 <system_board_init+0x240>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    388e:	4a3d      	ldr	r2, [pc, #244]	; (3984 <system_board_init+0x344>)
    3890:	1899      	adds	r1, r3, r2
    3892:	780a      	ldrb	r2, [r1, #0]
    3894:	432a      	orrs	r2, r5
    3896:	b2d2      	uxtb	r2, r2
    3898:	700a      	strb	r2, [r1, #0]
    389a:	e7f1      	b.n	3880 <system_board_init+0x240>
	base->WRCONFIG.reg =
    389c:	4b34      	ldr	r3, [pc, #208]	; (3970 <system_board_init+0x330>)
    389e:	4a44      	ldr	r2, [pc, #272]	; (39b0 <system_board_init+0x370>)
    38a0:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    38a2:	4a47      	ldr	r2, [pc, #284]	; (39c0 <system_board_init+0x380>)
    38a4:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    38a6:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    38a8:	2401      	movs	r4, #1
    38aa:	2080      	movs	r0, #128	; 0x80
    38ac:	0280      	lsls	r0, r0, #10
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    38ae:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    38b0:	3301      	adds	r3, #1
    38b2:	2b20      	cmp	r3, #32
    38b4:	d00a      	beq.n	38cc <system_board_init+0x28c>
		if (mask & (1 << i)) {
    38b6:	0022      	movs	r2, r4
    38b8:	409a      	lsls	r2, r3
    38ba:	4202      	tst	r2, r0
    38bc:	d0f8      	beq.n	38b0 <system_board_init+0x270>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    38be:	4a31      	ldr	r2, [pc, #196]	; (3984 <system_board_init+0x344>)
    38c0:	1899      	adds	r1, r3, r2
    38c2:	780a      	ldrb	r2, [r1, #0]
    38c4:	432a      	orrs	r2, r5
    38c6:	b2d2      	uxtb	r2, r2
    38c8:	700a      	strb	r2, [r1, #0]
    38ca:	e7f1      	b.n	38b0 <system_board_init+0x270>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    38cc:	4b28      	ldr	r3, [pc, #160]	; (3970 <system_board_init+0x330>)
    38ce:	2180      	movs	r1, #128	; 0x80
    38d0:	0109      	lsls	r1, r1, #4
    38d2:	6099      	str	r1, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    38d4:	204b      	movs	r0, #75	; 0x4b
    38d6:	5c1a      	ldrb	r2, [r3, r0]
    38d8:	2402      	movs	r4, #2
    38da:	4322      	orrs	r2, r4
    38dc:	541a      	strb	r2, [r3, r0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    38de:	6199      	str	r1, [r3, #24]
	base->WRCONFIG.reg =
    38e0:	4a38      	ldr	r2, [pc, #224]	; (39c4 <system_board_init+0x384>)
    38e2:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    38e4:	4a38      	ldr	r2, [pc, #224]	; (39c8 <system_board_init+0x388>)
    38e6:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    38e8:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    38ea:	3c01      	subs	r4, #1
    38ec:	30b6      	adds	r0, #182	; 0xb6
    38ee:	30ff      	adds	r0, #255	; 0xff
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    38f0:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    38f2:	3301      	adds	r3, #1
    38f4:	2b20      	cmp	r3, #32
    38f6:	d00a      	beq.n	390e <system_board_init+0x2ce>
		if (mask & (1 << i)) {
    38f8:	0022      	movs	r2, r4
    38fa:	409a      	lsls	r2, r3
    38fc:	4202      	tst	r2, r0
    38fe:	d0f8      	beq.n	38f2 <system_board_init+0x2b2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3900:	4a20      	ldr	r2, [pc, #128]	; (3984 <system_board_init+0x344>)
    3902:	1899      	adds	r1, r3, r2
    3904:	780a      	ldrb	r2, [r1, #0]
    3906:	432a      	orrs	r2, r5
    3908:	b2d2      	uxtb	r2, r2
    390a:	700a      	strb	r2, [r1, #0]
    390c:	e7f1      	b.n	38f2 <system_board_init+0x2b2>
	base->WRCONFIG.reg =
    390e:	4b18      	ldr	r3, [pc, #96]	; (3970 <system_board_init+0x330>)
    3910:	4a2e      	ldr	r2, [pc, #184]	; (39cc <system_board_init+0x38c>)
    3912:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3914:	4a2c      	ldr	r2, [pc, #176]	; (39c8 <system_board_init+0x388>)
    3916:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3918:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    391a:	2401      	movs	r4, #1
    391c:	2080      	movs	r0, #128	; 0x80
    391e:	00c0      	lsls	r0, r0, #3
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3920:	2501      	movs	r5, #1
	for (uint32_t i = 0; i < 32; i++) {
    3922:	3301      	adds	r3, #1
    3924:	2b20      	cmp	r3, #32
    3926:	d00a      	beq.n	393e <system_board_init+0x2fe>
		if (mask & (1 << i)) {
    3928:	0022      	movs	r2, r4
    392a:	409a      	lsls	r2, r3
    392c:	4202      	tst	r2, r0
    392e:	d0f8      	beq.n	3922 <system_board_init+0x2e2>
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3930:	4a14      	ldr	r2, [pc, #80]	; (3984 <system_board_init+0x344>)
    3932:	1899      	adds	r1, r3, r2
    3934:	780a      	ldrb	r2, [r1, #0]
    3936:	432a      	orrs	r2, r5
    3938:	b2d2      	uxtb	r2, r2
    393a:	700a      	strb	r2, [r1, #0]
    393c:	e7f1      	b.n	3922 <system_board_init+0x2e2>
	base->WRCONFIG.reg =
    393e:	4b0c      	ldr	r3, [pc, #48]	; (3970 <system_board_init+0x330>)
    3940:	4a23      	ldr	r2, [pc, #140]	; (39d0 <system_board_init+0x390>)
    3942:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3944:	4a20      	ldr	r2, [pc, #128]	; (39c8 <system_board_init+0x388>)
    3946:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i = 0; i < 32; i++) {
    3948:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    394a:	2401      	movs	r4, #1
    394c:	2080      	movs	r0, #128	; 0x80
    394e:	0040      	lsls	r0, r0, #1
			base->PINCFG[i].reg |= PORT_PINCFG_PMUXEN;
    3950:	2501      	movs	r5, #1
    3952:	e005      	b.n	3960 <system_board_init+0x320>
    3954:	4a0b      	ldr	r2, [pc, #44]	; (3984 <system_board_init+0x344>)
    3956:	1899      	adds	r1, r3, r2
    3958:	780a      	ldrb	r2, [r1, #0]
    395a:	432a      	orrs	r2, r5
    395c:	b2d2      	uxtb	r2, r2
    395e:	700a      	strb	r2, [r1, #0]
	for (uint32_t i = 0; i < 32; i++) {
    3960:	3301      	adds	r3, #1
    3962:	2b20      	cmp	r3, #32
    3964:	d036      	beq.n	39d4 <system_board_init+0x394>
		if (mask & (1 << i)) {
    3966:	0022      	movs	r2, r4
    3968:	409a      	lsls	r2, r3
    396a:	4202      	tst	r2, r0
    396c:	d1f2      	bne.n	3954 <system_board_init+0x314>
    396e:	e7f7      	b.n	3960 <system_board_init+0x320>
    3970:	41004400 	.word	0x41004400
    3974:	50060002 	.word	0x50060002
    3978:	d0060000 	.word	0xd0060000
    397c:	51020004 	.word	0x51020004
    3980:	d1020000 	.word	0xd1020000
    3984:	41004440 	.word	0x41004440
    3988:	41004480 	.word	0x41004480
    398c:	51020100 	.word	0x51020100
    3990:	410044c0 	.word	0x410044c0
    3994:	51020200 	.word	0x51020200
    3998:	50060000 	.word	0x50060000
    399c:	d0064000 	.word	0xd0064000
    39a0:	d0068000 	.word	0xd0068000
    39a4:	51020010 	.word	0x51020010
    39a8:	51020020 	.word	0x51020020
    39ac:	51020040 	.word	0x51020040
    39b0:	52020000 	.word	0x52020000
    39b4:	d2020040 	.word	0xd2020040
    39b8:	d2020080 	.word	0xd2020080
    39bc:	d2020001 	.word	0xd2020001
    39c0:	d2020002 	.word	0xd2020002
    39c4:	52020200 	.word	0x52020200
    39c8:	d2020000 	.word	0xd2020000
    39cc:	52020400 	.word	0x52020400
    39d0:	52020100 	.word	0x52020100
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    39d4:	4911      	ldr	r1, [pc, #68]	; (3a1c <system_board_init+0x3dc>)
    39d6:	2280      	movs	r2, #128	; 0x80
    39d8:	03d2      	lsls	r2, r2, #15
    39da:	608a      	str	r2, [r1, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    39dc:	2476      	movs	r4, #118	; 0x76
    39de:	5d0b      	ldrb	r3, [r1, r4]
    39e0:	2002      	movs	r0, #2
    39e2:	4303      	orrs	r3, r0
    39e4:	b2db      	uxtb	r3, r3
    39e6:	550b      	strb	r3, [r1, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    39e8:	614a      	str	r2, [r1, #20]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    39ea:	4b0d      	ldr	r3, [pc, #52]	; (3a20 <system_board_init+0x3e0>)
    39ec:	2280      	movs	r2, #128	; 0x80
    39ee:	0392      	lsls	r2, r2, #14
    39f0:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    39f2:	3c21      	subs	r4, #33	; 0x21
    39f4:	5d19      	ldrb	r1, [r3, r4]
    39f6:	4301      	orrs	r1, r0
    39f8:	b2c9      	uxtb	r1, r1
    39fa:	5519      	strb	r1, [r3, r4]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    39fc:	615a      	str	r2, [r3, #20]
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    39fe:	2180      	movs	r1, #128	; 0x80
    3a00:	0549      	lsls	r1, r1, #21
    3a02:	6059      	str	r1, [r3, #4]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    3a04:	3407      	adds	r4, #7
    3a06:	5d1a      	ldrb	r2, [r3, r4]
    3a08:	4302      	orrs	r2, r0
    3a0a:	b2d2      	uxtb	r2, r2
    3a0c:	551a      	strb	r2, [r3, r4]
	base->WRCONFIG.reg =
    3a0e:	4a05      	ldr	r2, [pc, #20]	; (3a24 <system_board_init+0x3e4>)
    3a10:	629a      	str	r2, [r3, #40]	; 0x28
	base->WRCONFIG.reg =
    3a12:	4a05      	ldr	r2, [pc, #20]	; (3a28 <system_board_init+0x3e8>)
    3a14:	629a      	str	r2, [r3, #40]	; 0x28
		base->OUTCLR.reg = mask;
    3a16:	6159      	str	r1, [r3, #20]

	// Power monitoring
	ioport_set_pin_dir(POWER_MONITOR_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(POWER_MONITOR_GPIO, IOPORT_MODE_PULLDOWN);
	
    3a18:	bd30      	pop	{r4, r5, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	41004480 	.word	0x41004480
    3a20:	41004400 	.word	0x41004400
    3a24:	50060000 	.word	0x50060000
    3a28:	d0061000 	.word	0xd0061000

00003a2c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3a2c:	4b0c      	ldr	r3, [pc, #48]	; (3a60 <cpu_irq_enter_critical+0x34>)
    3a2e:	681b      	ldr	r3, [r3, #0]
    3a30:	2b00      	cmp	r3, #0
    3a32:	d106      	bne.n	3a42 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a34:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d007      	beq.n	3a4c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3a3c:	2200      	movs	r2, #0
    3a3e:	4b09      	ldr	r3, [pc, #36]	; (3a64 <cpu_irq_enter_critical+0x38>)
    3a40:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3a42:	4a07      	ldr	r2, [pc, #28]	; (3a60 <cpu_irq_enter_critical+0x34>)
    3a44:	6813      	ldr	r3, [r2, #0]
    3a46:	3301      	adds	r3, #1
    3a48:	6013      	str	r3, [r2, #0]
}
    3a4a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3a4c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3a4e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3a52:	2200      	movs	r2, #0
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <cpu_irq_enter_critical+0x3c>)
    3a56:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3a58:	3201      	adds	r2, #1
    3a5a:	4b02      	ldr	r3, [pc, #8]	; (3a64 <cpu_irq_enter_critical+0x38>)
    3a5c:	701a      	strb	r2, [r3, #0]
    3a5e:	e7f0      	b.n	3a42 <cpu_irq_enter_critical+0x16>
    3a60:	20005214 	.word	0x20005214
    3a64:	20005218 	.word	0x20005218
    3a68:	2000000f 	.word	0x2000000f

00003a6c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3a6c:	4b08      	ldr	r3, [pc, #32]	; (3a90 <cpu_irq_leave_critical+0x24>)
    3a6e:	681a      	ldr	r2, [r3, #0]
    3a70:	3a01      	subs	r2, #1
    3a72:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	2b00      	cmp	r3, #0
    3a78:	d109      	bne.n	3a8e <cpu_irq_leave_critical+0x22>
    3a7a:	4b06      	ldr	r3, [pc, #24]	; (3a94 <cpu_irq_leave_critical+0x28>)
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d005      	beq.n	3a8e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3a82:	2201      	movs	r2, #1
    3a84:	4b04      	ldr	r3, [pc, #16]	; (3a98 <cpu_irq_leave_critical+0x2c>)
    3a86:	701a      	strb	r2, [r3, #0]
    3a88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a8c:	b662      	cpsie	i
	}
}
    3a8e:	4770      	bx	lr
    3a90:	20005214 	.word	0x20005214
    3a94:	20005218 	.word	0x20005218
    3a98:	2000000f 	.word	0x2000000f

00003a9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3a9c:	b510      	push	{r4, lr}
	switch (clock_source) {
    3a9e:	2808      	cmp	r0, #8
    3aa0:	d803      	bhi.n	3aaa <system_clock_source_get_hz+0xe>
    3aa2:	0080      	lsls	r0, r0, #2
    3aa4:	4b1c      	ldr	r3, [pc, #112]	; (3b18 <system_clock_source_get_hz+0x7c>)
    3aa6:	581b      	ldr	r3, [r3, r0]
    3aa8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3aaa:	2000      	movs	r0, #0
    3aac:	e032      	b.n	3b14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    3aae:	4b1b      	ldr	r3, [pc, #108]	; (3b1c <system_clock_source_get_hz+0x80>)
    3ab0:	6918      	ldr	r0, [r3, #16]
    3ab2:	e02f      	b.n	3b14 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3ab4:	4b1a      	ldr	r3, [pc, #104]	; (3b20 <system_clock_source_get_hz+0x84>)
    3ab6:	6a1b      	ldr	r3, [r3, #32]
    3ab8:	059b      	lsls	r3, r3, #22
    3aba:	0f9b      	lsrs	r3, r3, #30
    3abc:	4819      	ldr	r0, [pc, #100]	; (3b24 <system_clock_source_get_hz+0x88>)
    3abe:	40d8      	lsrs	r0, r3
    3ac0:	e028      	b.n	3b14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    3ac2:	4b16      	ldr	r3, [pc, #88]	; (3b1c <system_clock_source_get_hz+0x80>)
    3ac4:	6958      	ldr	r0, [r3, #20]
    3ac6:	e025      	b.n	3b14 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3ac8:	4b14      	ldr	r3, [pc, #80]	; (3b1c <system_clock_source_get_hz+0x80>)
    3aca:	681b      	ldr	r3, [r3, #0]
			return 0;
    3acc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3ace:	079b      	lsls	r3, r3, #30
    3ad0:	d520      	bpl.n	3b14 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3ad2:	4913      	ldr	r1, [pc, #76]	; (3b20 <system_clock_source_get_hz+0x84>)
    3ad4:	2210      	movs	r2, #16
    3ad6:	68cb      	ldr	r3, [r1, #12]
    3ad8:	421a      	tst	r2, r3
    3ada:	d0fc      	beq.n	3ad6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    3adc:	4b0f      	ldr	r3, [pc, #60]	; (3b1c <system_clock_source_get_hz+0x80>)
    3ade:	681a      	ldr	r2, [r3, #0]
    3ae0:	2324      	movs	r3, #36	; 0x24
    3ae2:	4013      	ands	r3, r2
    3ae4:	2b04      	cmp	r3, #4
    3ae6:	d001      	beq.n	3aec <system_clock_source_get_hz+0x50>
			return 48000000UL;
    3ae8:	480f      	ldr	r0, [pc, #60]	; (3b28 <system_clock_source_get_hz+0x8c>)
    3aea:	e013      	b.n	3b14 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3aec:	2000      	movs	r0, #0
    3aee:	4b0f      	ldr	r3, [pc, #60]	; (3b2c <system_clock_source_get_hz+0x90>)
    3af0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3af2:	4b0a      	ldr	r3, [pc, #40]	; (3b1c <system_clock_source_get_hz+0x80>)
    3af4:	689b      	ldr	r3, [r3, #8]
    3af6:	041b      	lsls	r3, r3, #16
    3af8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3afa:	4358      	muls	r0, r3
    3afc:	e00a      	b.n	3b14 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3afe:	2350      	movs	r3, #80	; 0x50
    3b00:	4a07      	ldr	r2, [pc, #28]	; (3b20 <system_clock_source_get_hz+0x84>)
    3b02:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3b04:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3b06:	075b      	lsls	r3, r3, #29
    3b08:	d504      	bpl.n	3b14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    3b0a:	4b04      	ldr	r3, [pc, #16]	; (3b1c <system_clock_source_get_hz+0x80>)
    3b0c:	68d8      	ldr	r0, [r3, #12]
    3b0e:	e001      	b.n	3b14 <system_clock_source_get_hz+0x78>
		return 32768UL;
    3b10:	2080      	movs	r0, #128	; 0x80
    3b12:	0200      	lsls	r0, r0, #8
	}
}
    3b14:	bd10      	pop	{r4, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	00006bdc 	.word	0x00006bdc
    3b1c:	2000521c 	.word	0x2000521c
    3b20:	40000800 	.word	0x40000800
    3b24:	007a1200 	.word	0x007a1200
    3b28:	02dc6c00 	.word	0x02dc6c00
    3b2c:	00004045 	.word	0x00004045

00003b30 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3b30:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3b32:	490c      	ldr	r1, [pc, #48]	; (3b64 <system_clock_source_osc8m_set_config+0x34>)
    3b34:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3b36:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3b38:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3b3a:	7840      	ldrb	r0, [r0, #1]
    3b3c:	2201      	movs	r2, #1
    3b3e:	4010      	ands	r0, r2
    3b40:	0180      	lsls	r0, r0, #6
    3b42:	2640      	movs	r6, #64	; 0x40
    3b44:	43b3      	bics	r3, r6
    3b46:	4303      	orrs	r3, r0
    3b48:	402a      	ands	r2, r5
    3b4a:	01d2      	lsls	r2, r2, #7
    3b4c:	2080      	movs	r0, #128	; 0x80
    3b4e:	4383      	bics	r3, r0
    3b50:	4313      	orrs	r3, r2
    3b52:	2203      	movs	r2, #3
    3b54:	4022      	ands	r2, r4
    3b56:	0212      	lsls	r2, r2, #8
    3b58:	4803      	ldr	r0, [pc, #12]	; (3b68 <system_clock_source_osc8m_set_config+0x38>)
    3b5a:	4003      	ands	r3, r0
    3b5c:	4313      	orrs	r3, r2
    3b5e:	620b      	str	r3, [r1, #32]
}
    3b60:	bd70      	pop	{r4, r5, r6, pc}
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	40000800 	.word	0x40000800
    3b68:	fffffcff 	.word	0xfffffcff

00003b6c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3b6c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3b6e:	7a03      	ldrb	r3, [r0, #8]
    3b70:	069b      	lsls	r3, r3, #26
    3b72:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3b74:	8942      	ldrh	r2, [r0, #10]
    3b76:	0592      	lsls	r2, r2, #22
    3b78:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3b7a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3b7c:	4918      	ldr	r1, [pc, #96]	; (3be0 <system_clock_source_dfll_set_config+0x74>)
    3b7e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3b80:	7983      	ldrb	r3, [r0, #6]
    3b82:	79c2      	ldrb	r2, [r0, #7]
    3b84:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3b86:	8842      	ldrh	r2, [r0, #2]
    3b88:	8884      	ldrh	r4, [r0, #4]
    3b8a:	4322      	orrs	r2, r4
    3b8c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3b8e:	7842      	ldrb	r2, [r0, #1]
    3b90:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3b92:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3b94:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3b96:	7803      	ldrb	r3, [r0, #0]
    3b98:	2b04      	cmp	r3, #4
    3b9a:	d011      	beq.n	3bc0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3b9c:	2b20      	cmp	r3, #32
    3b9e:	d10e      	bne.n	3bbe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3ba0:	7b03      	ldrb	r3, [r0, #12]
    3ba2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3ba4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3ba6:	4313      	orrs	r3, r2
    3ba8:	89c2      	ldrh	r2, [r0, #14]
    3baa:	0412      	lsls	r2, r2, #16
    3bac:	490d      	ldr	r1, [pc, #52]	; (3be4 <system_clock_source_dfll_set_config+0x78>)
    3bae:	400a      	ands	r2, r1
    3bb0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3bb2:	4a0b      	ldr	r2, [pc, #44]	; (3be0 <system_clock_source_dfll_set_config+0x74>)
    3bb4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3bb6:	6811      	ldr	r1, [r2, #0]
    3bb8:	4b0b      	ldr	r3, [pc, #44]	; (3be8 <system_clock_source_dfll_set_config+0x7c>)
    3bba:	430b      	orrs	r3, r1
    3bbc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3bbe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3bc0:	7b03      	ldrb	r3, [r0, #12]
    3bc2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3bc4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3bc6:	4313      	orrs	r3, r2
    3bc8:	89c2      	ldrh	r2, [r0, #14]
    3bca:	0412      	lsls	r2, r2, #16
    3bcc:	4905      	ldr	r1, [pc, #20]	; (3be4 <system_clock_source_dfll_set_config+0x78>)
    3bce:	400a      	ands	r2, r1
    3bd0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3bd2:	4a03      	ldr	r2, [pc, #12]	; (3be0 <system_clock_source_dfll_set_config+0x74>)
    3bd4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3bd6:	6813      	ldr	r3, [r2, #0]
    3bd8:	2104      	movs	r1, #4
    3bda:	430b      	orrs	r3, r1
    3bdc:	6013      	str	r3, [r2, #0]
    3bde:	e7ee      	b.n	3bbe <system_clock_source_dfll_set_config+0x52>
    3be0:	2000521c 	.word	0x2000521c
    3be4:	03ff0000 	.word	0x03ff0000
    3be8:	00000424 	.word	0x00000424

00003bec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3bec:	2808      	cmp	r0, #8
    3bee:	d803      	bhi.n	3bf8 <system_clock_source_enable+0xc>
    3bf0:	0080      	lsls	r0, r0, #2
    3bf2:	4b25      	ldr	r3, [pc, #148]	; (3c88 <system_clock_source_enable+0x9c>)
    3bf4:	581b      	ldr	r3, [r3, r0]
    3bf6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3bf8:	2017      	movs	r0, #23
    3bfa:	e044      	b.n	3c86 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3bfc:	4a23      	ldr	r2, [pc, #140]	; (3c8c <system_clock_source_enable+0xa0>)
    3bfe:	6a13      	ldr	r3, [r2, #32]
    3c00:	2102      	movs	r1, #2
    3c02:	430b      	orrs	r3, r1
    3c04:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3c06:	2000      	movs	r0, #0
    3c08:	e03d      	b.n	3c86 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3c0a:	4a20      	ldr	r2, [pc, #128]	; (3c8c <system_clock_source_enable+0xa0>)
    3c0c:	6993      	ldr	r3, [r2, #24]
    3c0e:	2102      	movs	r1, #2
    3c10:	430b      	orrs	r3, r1
    3c12:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3c14:	2000      	movs	r0, #0
		break;
    3c16:	e036      	b.n	3c86 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3c18:	4a1c      	ldr	r2, [pc, #112]	; (3c8c <system_clock_source_enable+0xa0>)
    3c1a:	8a13      	ldrh	r3, [r2, #16]
    3c1c:	2102      	movs	r1, #2
    3c1e:	430b      	orrs	r3, r1
    3c20:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    3c22:	2000      	movs	r0, #0
		break;
    3c24:	e02f      	b.n	3c86 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3c26:	4a19      	ldr	r2, [pc, #100]	; (3c8c <system_clock_source_enable+0xa0>)
    3c28:	8a93      	ldrh	r3, [r2, #20]
    3c2a:	2102      	movs	r1, #2
    3c2c:	430b      	orrs	r3, r1
    3c2e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3c30:	2000      	movs	r0, #0
		break;
    3c32:	e028      	b.n	3c86 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3c34:	4916      	ldr	r1, [pc, #88]	; (3c90 <system_clock_source_enable+0xa4>)
    3c36:	680b      	ldr	r3, [r1, #0]
    3c38:	2202      	movs	r2, #2
    3c3a:	4313      	orrs	r3, r2
    3c3c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3c3e:	4b13      	ldr	r3, [pc, #76]	; (3c8c <system_clock_source_enable+0xa0>)
    3c40:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3c42:	0019      	movs	r1, r3
    3c44:	320e      	adds	r2, #14
    3c46:	68cb      	ldr	r3, [r1, #12]
    3c48:	421a      	tst	r2, r3
    3c4a:	d0fc      	beq.n	3c46 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3c4c:	4a10      	ldr	r2, [pc, #64]	; (3c90 <system_clock_source_enable+0xa4>)
    3c4e:	6891      	ldr	r1, [r2, #8]
    3c50:	4b0e      	ldr	r3, [pc, #56]	; (3c8c <system_clock_source_enable+0xa0>)
    3c52:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3c54:	6852      	ldr	r2, [r2, #4]
    3c56:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3c58:	2200      	movs	r2, #0
    3c5a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3c5c:	0019      	movs	r1, r3
    3c5e:	3210      	adds	r2, #16
    3c60:	68cb      	ldr	r3, [r1, #12]
    3c62:	421a      	tst	r2, r3
    3c64:	d0fc      	beq.n	3c60 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3c66:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <system_clock_source_enable+0xa4>)
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	b29b      	uxth	r3, r3
    3c6c:	4a07      	ldr	r2, [pc, #28]	; (3c8c <system_clock_source_enable+0xa0>)
    3c6e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3c70:	2000      	movs	r0, #0
    3c72:	e008      	b.n	3c86 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3c74:	4905      	ldr	r1, [pc, #20]	; (3c8c <system_clock_source_enable+0xa0>)
    3c76:	2244      	movs	r2, #68	; 0x44
    3c78:	5c8b      	ldrb	r3, [r1, r2]
    3c7a:	2002      	movs	r0, #2
    3c7c:	4303      	orrs	r3, r0
    3c7e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3c80:	2000      	movs	r0, #0
		break;
    3c82:	e000      	b.n	3c86 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3c84:	2000      	movs	r0, #0
}
    3c86:	4770      	bx	lr
    3c88:	00006c00 	.word	0x00006c00
    3c8c:	40000800 	.word	0x40000800
    3c90:	2000521c 	.word	0x2000521c

00003c94 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	46ce      	mov	lr, r9
    3c98:	4647      	mov	r7, r8
    3c9a:	b580      	push	{r7, lr}
    3c9c:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3c9e:	22c2      	movs	r2, #194	; 0xc2
    3ca0:	00d2      	lsls	r2, r2, #3
    3ca2:	4b3c      	ldr	r3, [pc, #240]	; (3d94 <system_clock_init+0x100>)
    3ca4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3ca6:	4a3c      	ldr	r2, [pc, #240]	; (3d98 <system_clock_init+0x104>)
    3ca8:	6853      	ldr	r3, [r2, #4]
    3caa:	211e      	movs	r1, #30
    3cac:	438b      	bics	r3, r1
    3cae:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3cb0:	2202      	movs	r2, #2
    3cb2:	ab01      	add	r3, sp, #4
    3cb4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3cb6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3cb8:	4d38      	ldr	r5, [pc, #224]	; (3d9c <system_clock_init+0x108>)
    3cba:	b2e0      	uxtb	r0, r4
    3cbc:	a901      	add	r1, sp, #4
    3cbe:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3cc0:	3401      	adds	r4, #1
    3cc2:	2c25      	cmp	r4, #37	; 0x25
    3cc4:	d1f9      	bne.n	3cba <system_clock_init+0x26>
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3cc6:	ab05      	add	r3, sp, #20
    3cc8:	2100      	movs	r1, #0
    3cca:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3ccc:	2200      	movs	r2, #0
    3cce:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3cd0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3cd2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3cd4:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    3cd6:	3106      	adds	r1, #6
    3cd8:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    3cda:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3cdc:	4b30      	ldr	r3, [pc, #192]	; (3da0 <system_clock_init+0x10c>)
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3ce2:	2b3f      	cmp	r3, #63	; 0x3f
    3ce4:	d054      	beq.n	3d90 <system_clock_init+0xfc>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3ce6:	a805      	add	r0, sp, #20
    3ce8:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    3cea:	2380      	movs	r3, #128	; 0x80
    3cec:	009b      	lsls	r3, r3, #2
    3cee:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3cf0:	3bfa      	subs	r3, #250	; 0xfa
    3cf2:	3bff      	subs	r3, #255	; 0xff
    3cf4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3cf6:	3338      	adds	r3, #56	; 0x38
    3cf8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3cfa:	4b2a      	ldr	r3, [pc, #168]	; (3da4 <system_clock_init+0x110>)
    3cfc:	4798      	blx	r3
	config->run_in_standby  = false;
    3cfe:	a804      	add	r0, sp, #16
    3d00:	2500      	movs	r5, #0
    3d02:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3d04:	2701      	movs	r7, #1
    3d06:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3d08:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3d0a:	4b27      	ldr	r3, [pc, #156]	; (3da8 <system_clock_init+0x114>)
    3d0c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3d0e:	2006      	movs	r0, #6
    3d10:	4e26      	ldr	r6, [pc, #152]	; (3dac <system_clock_init+0x118>)
    3d12:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3d14:	4b26      	ldr	r3, [pc, #152]	; (3db0 <system_clock_init+0x11c>)
    3d16:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3d18:	ac01      	add	r4, sp, #4
    3d1a:	9702      	str	r7, [sp, #8]
	config->high_when_disabled = false;
    3d1c:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3d1e:	2306      	movs	r3, #6
    3d20:	4699      	mov	r9, r3
    3d22:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    3d24:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3d26:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3d28:	0021      	movs	r1, r4
    3d2a:	2001      	movs	r0, #1
    3d2c:	4b21      	ldr	r3, [pc, #132]	; (3db4 <system_clock_init+0x120>)
    3d2e:	4698      	mov	r8, r3
    3d30:	4798      	blx	r3
    3d32:	2001      	movs	r0, #1
    3d34:	4f20      	ldr	r7, [pc, #128]	; (3db8 <system_clock_init+0x124>)
    3d36:	47b8      	blx	r7
	config->high_when_disabled = false;
    3d38:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3d3a:	464b      	mov	r3, r9
    3d3c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3d3e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3d40:	7265      	strb	r5, [r4, #9]
    3d42:	23ff      	movs	r3, #255	; 0xff
    3d44:	6063      	str	r3, [r4, #4]
    3d46:	0021      	movs	r1, r4
    3d48:	2004      	movs	r0, #4
    3d4a:	47c0      	blx	r8
    3d4c:	2004      	movs	r0, #4
    3d4e:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3d50:	2007      	movs	r0, #7
    3d52:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3d54:	490f      	ldr	r1, [pc, #60]	; (3d94 <system_clock_init+0x100>)
    3d56:	2210      	movs	r2, #16
    3d58:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3d5a:	421a      	tst	r2, r3
    3d5c:	d0fc      	beq.n	3d58 <system_clock_init+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    3d5e:	4a17      	ldr	r2, [pc, #92]	; (3dbc <system_clock_init+0x128>)
    3d60:	2300      	movs	r3, #0
    3d62:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3d64:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3d66:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3d68:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3d6a:	a901      	add	r1, sp, #4
    3d6c:	2201      	movs	r2, #1
    3d6e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3d70:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    3d72:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3d74:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3d76:	3307      	adds	r3, #7
    3d78:	700b      	strb	r3, [r1, #0]
    3d7a:	2000      	movs	r0, #0
    3d7c:	4b0d      	ldr	r3, [pc, #52]	; (3db4 <system_clock_init+0x120>)
    3d7e:	4798      	blx	r3
    3d80:	2000      	movs	r0, #0
    3d82:	4b0d      	ldr	r3, [pc, #52]	; (3db8 <system_clock_init+0x124>)
    3d84:	4798      	blx	r3
#endif
}
    3d86:	b00b      	add	sp, #44	; 0x2c
    3d88:	bc0c      	pop	{r2, r3}
    3d8a:	4690      	mov	r8, r2
    3d8c:	4699      	mov	r9, r3
    3d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3d90:	3b20      	subs	r3, #32
    3d92:	e7a8      	b.n	3ce6 <system_clock_init+0x52>
    3d94:	40000800 	.word	0x40000800
    3d98:	41004000 	.word	0x41004000
    3d9c:	00003ff9 	.word	0x00003ff9
    3da0:	00806024 	.word	0x00806024
    3da4:	00003b6d 	.word	0x00003b6d
    3da8:	00003b31 	.word	0x00003b31
    3dac:	00003bed 	.word	0x00003bed
    3db0:	00003dc1 	.word	0x00003dc1
    3db4:	00003de5 	.word	0x00003de5
    3db8:	00003e9d 	.word	0x00003e9d
    3dbc:	40000400 	.word	0x40000400

00003dc0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3dc0:	4a06      	ldr	r2, [pc, #24]	; (3ddc <system_gclk_init+0x1c>)
    3dc2:	6993      	ldr	r3, [r2, #24]
    3dc4:	2108      	movs	r1, #8
    3dc6:	430b      	orrs	r3, r1
    3dc8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3dca:	2201      	movs	r2, #1
    3dcc:	4b04      	ldr	r3, [pc, #16]	; (3de0 <system_gclk_init+0x20>)
    3dce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3dd0:	0019      	movs	r1, r3
    3dd2:	780b      	ldrb	r3, [r1, #0]
    3dd4:	4213      	tst	r3, r2
    3dd6:	d1fc      	bne.n	3dd2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3dd8:	4770      	bx	lr
    3dda:	46c0      	nop			; (mov r8, r8)
    3ddc:	40000400 	.word	0x40000400
    3de0:	40000c00 	.word	0x40000c00

00003de4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3de4:	b570      	push	{r4, r5, r6, lr}
    3de6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3de8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3dea:	780d      	ldrb	r5, [r1, #0]
    3dec:	022d      	lsls	r5, r5, #8
    3dee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3df0:	784b      	ldrb	r3, [r1, #1]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d002      	beq.n	3dfc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3df6:	2380      	movs	r3, #128	; 0x80
    3df8:	02db      	lsls	r3, r3, #11
    3dfa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3dfc:	7a4b      	ldrb	r3, [r1, #9]
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d002      	beq.n	3e08 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3e02:	2380      	movs	r3, #128	; 0x80
    3e04:	031b      	lsls	r3, r3, #12
    3e06:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3e08:	6848      	ldr	r0, [r1, #4]
    3e0a:	2801      	cmp	r0, #1
    3e0c:	d910      	bls.n	3e30 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3e0e:	1e43      	subs	r3, r0, #1
    3e10:	4218      	tst	r0, r3
    3e12:	d134      	bne.n	3e7e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3e14:	2802      	cmp	r0, #2
    3e16:	d930      	bls.n	3e7a <system_gclk_gen_set_config+0x96>
    3e18:	2302      	movs	r3, #2
    3e1a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3e1c:	3201      	adds	r2, #1
						mask <<= 1) {
    3e1e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3e20:	4298      	cmp	r0, r3
    3e22:	d8fb      	bhi.n	3e1c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3e24:	0212      	lsls	r2, r2, #8
    3e26:	4332      	orrs	r2, r6
    3e28:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3e2a:	2380      	movs	r3, #128	; 0x80
    3e2c:	035b      	lsls	r3, r3, #13
    3e2e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3e30:	7a0b      	ldrb	r3, [r1, #8]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d002      	beq.n	3e3c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3e36:	2380      	movs	r3, #128	; 0x80
    3e38:	039b      	lsls	r3, r3, #14
    3e3a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e3c:	4a13      	ldr	r2, [pc, #76]	; (3e8c <system_gclk_gen_set_config+0xa8>)
    3e3e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3e40:	b25b      	sxtb	r3, r3
    3e42:	2b00      	cmp	r3, #0
    3e44:	dbfb      	blt.n	3e3e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3e46:	4b12      	ldr	r3, [pc, #72]	; (3e90 <system_gclk_gen_set_config+0xac>)
    3e48:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3e4a:	4b12      	ldr	r3, [pc, #72]	; (3e94 <system_gclk_gen_set_config+0xb0>)
    3e4c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e4e:	4a0f      	ldr	r2, [pc, #60]	; (3e8c <system_gclk_gen_set_config+0xa8>)
    3e50:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3e52:	b25b      	sxtb	r3, r3
    3e54:	2b00      	cmp	r3, #0
    3e56:	dbfb      	blt.n	3e50 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3e58:	4b0c      	ldr	r3, [pc, #48]	; (3e8c <system_gclk_gen_set_config+0xa8>)
    3e5a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e5c:	001a      	movs	r2, r3
    3e5e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3e60:	b25b      	sxtb	r3, r3
    3e62:	2b00      	cmp	r3, #0
    3e64:	dbfb      	blt.n	3e5e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3e66:	4a09      	ldr	r2, [pc, #36]	; (3e8c <system_gclk_gen_set_config+0xa8>)
    3e68:	6853      	ldr	r3, [r2, #4]
    3e6a:	2180      	movs	r1, #128	; 0x80
    3e6c:	0249      	lsls	r1, r1, #9
    3e6e:	400b      	ands	r3, r1
    3e70:	431d      	orrs	r5, r3
    3e72:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3e74:	4b08      	ldr	r3, [pc, #32]	; (3e98 <system_gclk_gen_set_config+0xb4>)
    3e76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3e78:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3e7a:	2200      	movs	r2, #0
    3e7c:	e7d2      	b.n	3e24 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3e7e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3e80:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3e82:	2380      	movs	r3, #128	; 0x80
    3e84:	029b      	lsls	r3, r3, #10
    3e86:	431d      	orrs	r5, r3
    3e88:	e7d2      	b.n	3e30 <system_gclk_gen_set_config+0x4c>
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	40000c00 	.word	0x40000c00
    3e90:	00003a2d 	.word	0x00003a2d
    3e94:	40000c08 	.word	0x40000c08
    3e98:	00003a6d 	.word	0x00003a6d

00003e9c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3e9c:	b510      	push	{r4, lr}
    3e9e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ea0:	4a0b      	ldr	r2, [pc, #44]	; (3ed0 <system_gclk_gen_enable+0x34>)
    3ea2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3ea4:	b25b      	sxtb	r3, r3
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	dbfb      	blt.n	3ea2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3eaa:	4b0a      	ldr	r3, [pc, #40]	; (3ed4 <system_gclk_gen_enable+0x38>)
    3eac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3eae:	4b0a      	ldr	r3, [pc, #40]	; (3ed8 <system_gclk_gen_enable+0x3c>)
    3eb0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3eb2:	4a07      	ldr	r2, [pc, #28]	; (3ed0 <system_gclk_gen_enable+0x34>)
    3eb4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3eb6:	b25b      	sxtb	r3, r3
    3eb8:	2b00      	cmp	r3, #0
    3eba:	dbfb      	blt.n	3eb4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3ebc:	4a04      	ldr	r2, [pc, #16]	; (3ed0 <system_gclk_gen_enable+0x34>)
    3ebe:	6851      	ldr	r1, [r2, #4]
    3ec0:	2380      	movs	r3, #128	; 0x80
    3ec2:	025b      	lsls	r3, r3, #9
    3ec4:	430b      	orrs	r3, r1
    3ec6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3ec8:	4b04      	ldr	r3, [pc, #16]	; (3edc <system_gclk_gen_enable+0x40>)
    3eca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	46c0      	nop			; (mov r8, r8)
    3ed0:	40000c00 	.word	0x40000c00
    3ed4:	00003a2d 	.word	0x00003a2d
    3ed8:	40000c04 	.word	0x40000c04
    3edc:	00003a6d 	.word	0x00003a6d

00003ee0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ee4:	4a1a      	ldr	r2, [pc, #104]	; (3f50 <system_gclk_gen_get_hz+0x70>)
    3ee6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3ee8:	b25b      	sxtb	r3, r3
    3eea:	2b00      	cmp	r3, #0
    3eec:	dbfb      	blt.n	3ee6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3eee:	4b19      	ldr	r3, [pc, #100]	; (3f54 <system_gclk_gen_get_hz+0x74>)
    3ef0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3ef2:	4b19      	ldr	r3, [pc, #100]	; (3f58 <system_gclk_gen_get_hz+0x78>)
    3ef4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ef6:	4a16      	ldr	r2, [pc, #88]	; (3f50 <system_gclk_gen_get_hz+0x70>)
    3ef8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3efa:	b25b      	sxtb	r3, r3
    3efc:	2b00      	cmp	r3, #0
    3efe:	dbfb      	blt.n	3ef8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3f00:	4e13      	ldr	r6, [pc, #76]	; (3f50 <system_gclk_gen_get_hz+0x70>)
    3f02:	6870      	ldr	r0, [r6, #4]
    3f04:	04c0      	lsls	r0, r0, #19
    3f06:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3f08:	4b14      	ldr	r3, [pc, #80]	; (3f5c <system_gclk_gen_get_hz+0x7c>)
    3f0a:	4798      	blx	r3
    3f0c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3f0e:	4b12      	ldr	r3, [pc, #72]	; (3f58 <system_gclk_gen_get_hz+0x78>)
    3f10:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3f12:	6876      	ldr	r6, [r6, #4]
    3f14:	02f6      	lsls	r6, r6, #11
    3f16:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3f18:	4b11      	ldr	r3, [pc, #68]	; (3f60 <system_gclk_gen_get_hz+0x80>)
    3f1a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3f1c:	4a0c      	ldr	r2, [pc, #48]	; (3f50 <system_gclk_gen_get_hz+0x70>)
    3f1e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3f20:	b25b      	sxtb	r3, r3
    3f22:	2b00      	cmp	r3, #0
    3f24:	dbfb      	blt.n	3f1e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3f26:	4b0a      	ldr	r3, [pc, #40]	; (3f50 <system_gclk_gen_get_hz+0x70>)
    3f28:	689c      	ldr	r4, [r3, #8]
    3f2a:	0224      	lsls	r4, r4, #8
    3f2c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3f2e:	4b0d      	ldr	r3, [pc, #52]	; (3f64 <system_gclk_gen_get_hz+0x84>)
    3f30:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3f32:	2e00      	cmp	r6, #0
    3f34:	d107      	bne.n	3f46 <system_gclk_gen_get_hz+0x66>
    3f36:	2c01      	cmp	r4, #1
    3f38:	d907      	bls.n	3f4a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3f3a:	0021      	movs	r1, r4
    3f3c:	0028      	movs	r0, r5
    3f3e:	4b0a      	ldr	r3, [pc, #40]	; (3f68 <system_gclk_gen_get_hz+0x88>)
    3f40:	4798      	blx	r3
    3f42:	0005      	movs	r5, r0
    3f44:	e001      	b.n	3f4a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3f46:	3401      	adds	r4, #1
    3f48:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3f4a:	0028      	movs	r0, r5
    3f4c:	bd70      	pop	{r4, r5, r6, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	40000c00 	.word	0x40000c00
    3f54:	00003a2d 	.word	0x00003a2d
    3f58:	40000c04 	.word	0x40000c04
    3f5c:	00003a9d 	.word	0x00003a9d
    3f60:	40000c08 	.word	0x40000c08
    3f64:	00003a6d 	.word	0x00003a6d
    3f68:	000042f9 	.word	0x000042f9

00003f6c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3f6c:	b510      	push	{r4, lr}
    3f6e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3f70:	4b06      	ldr	r3, [pc, #24]	; (3f8c <system_gclk_chan_enable+0x20>)
    3f72:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3f74:	4b06      	ldr	r3, [pc, #24]	; (3f90 <system_gclk_chan_enable+0x24>)
    3f76:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3f78:	4a06      	ldr	r2, [pc, #24]	; (3f94 <system_gclk_chan_enable+0x28>)
    3f7a:	8853      	ldrh	r3, [r2, #2]
    3f7c:	2180      	movs	r1, #128	; 0x80
    3f7e:	01c9      	lsls	r1, r1, #7
    3f80:	430b      	orrs	r3, r1
    3f82:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3f84:	4b04      	ldr	r3, [pc, #16]	; (3f98 <system_gclk_chan_enable+0x2c>)
    3f86:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	00003a2d 	.word	0x00003a2d
    3f90:	40000c02 	.word	0x40000c02
    3f94:	40000c00 	.word	0x40000c00
    3f98:	00003a6d 	.word	0x00003a6d

00003f9c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3f9c:	b510      	push	{r4, lr}
    3f9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3fa0:	4b0f      	ldr	r3, [pc, #60]	; (3fe0 <system_gclk_chan_disable+0x44>)
    3fa2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3fa4:	4b0f      	ldr	r3, [pc, #60]	; (3fe4 <system_gclk_chan_disable+0x48>)
    3fa6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3fa8:	4a0f      	ldr	r2, [pc, #60]	; (3fe8 <system_gclk_chan_disable+0x4c>)
    3faa:	8853      	ldrh	r3, [r2, #2]
    3fac:	051b      	lsls	r3, r3, #20
    3fae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3fb0:	8853      	ldrh	r3, [r2, #2]
    3fb2:	490e      	ldr	r1, [pc, #56]	; (3fec <system_gclk_chan_disable+0x50>)
    3fb4:	400b      	ands	r3, r1
    3fb6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3fb8:	8853      	ldrh	r3, [r2, #2]
    3fba:	490d      	ldr	r1, [pc, #52]	; (3ff0 <system_gclk_chan_disable+0x54>)
    3fbc:	400b      	ands	r3, r1
    3fbe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3fc0:	0011      	movs	r1, r2
    3fc2:	2280      	movs	r2, #128	; 0x80
    3fc4:	01d2      	lsls	r2, r2, #7
    3fc6:	884b      	ldrh	r3, [r1, #2]
    3fc8:	4213      	tst	r3, r2
    3fca:	d1fc      	bne.n	3fc6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3fcc:	4906      	ldr	r1, [pc, #24]	; (3fe8 <system_gclk_chan_disable+0x4c>)
    3fce:	884a      	ldrh	r2, [r1, #2]
    3fd0:	0203      	lsls	r3, r0, #8
    3fd2:	4806      	ldr	r0, [pc, #24]	; (3fec <system_gclk_chan_disable+0x50>)
    3fd4:	4002      	ands	r2, r0
    3fd6:	4313      	orrs	r3, r2
    3fd8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3fda:	4b06      	ldr	r3, [pc, #24]	; (3ff4 <system_gclk_chan_disable+0x58>)
    3fdc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3fde:	bd10      	pop	{r4, pc}
    3fe0:	00003a2d 	.word	0x00003a2d
    3fe4:	40000c02 	.word	0x40000c02
    3fe8:	40000c00 	.word	0x40000c00
    3fec:	fffff0ff 	.word	0xfffff0ff
    3ff0:	ffffbfff 	.word	0xffffbfff
    3ff4:	00003a6d 	.word	0x00003a6d

00003ff8 <system_gclk_chan_set_config>:
{
    3ff8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3ffa:	780c      	ldrb	r4, [r1, #0]
    3ffc:	0224      	lsls	r4, r4, #8
    3ffe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4000:	4b02      	ldr	r3, [pc, #8]	; (400c <system_gclk_chan_set_config+0x14>)
    4002:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4004:	b2a4      	uxth	r4, r4
    4006:	4b02      	ldr	r3, [pc, #8]	; (4010 <system_gclk_chan_set_config+0x18>)
    4008:	805c      	strh	r4, [r3, #2]
}
    400a:	bd10      	pop	{r4, pc}
    400c:	00003f9d 	.word	0x00003f9d
    4010:	40000c00 	.word	0x40000c00

00004014 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    4014:	b510      	push	{r4, lr}
    4016:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4018:	4b06      	ldr	r3, [pc, #24]	; (4034 <system_gclk_chan_lock+0x20>)
    401a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    401c:	4b06      	ldr	r3, [pc, #24]	; (4038 <system_gclk_chan_lock+0x24>)
    401e:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    4020:	4a06      	ldr	r2, [pc, #24]	; (403c <system_gclk_chan_lock+0x28>)
    4022:	8853      	ldrh	r3, [r2, #2]
    4024:	21c0      	movs	r1, #192	; 0xc0
    4026:	0209      	lsls	r1, r1, #8
    4028:	430b      	orrs	r3, r1
    402a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    402c:	4b04      	ldr	r3, [pc, #16]	; (4040 <system_gclk_chan_lock+0x2c>)
    402e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4030:	bd10      	pop	{r4, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	00003a2d 	.word	0x00003a2d
    4038:	40000c02 	.word	0x40000c02
    403c:	40000c00 	.word	0x40000c00
    4040:	00003a6d 	.word	0x00003a6d

00004044 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4044:	b510      	push	{r4, lr}
    4046:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4048:	4b06      	ldr	r3, [pc, #24]	; (4064 <system_gclk_chan_get_hz+0x20>)
    404a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    404c:	4b06      	ldr	r3, [pc, #24]	; (4068 <system_gclk_chan_get_hz+0x24>)
    404e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4050:	4b06      	ldr	r3, [pc, #24]	; (406c <system_gclk_chan_get_hz+0x28>)
    4052:	885c      	ldrh	r4, [r3, #2]
    4054:	0524      	lsls	r4, r4, #20
    4056:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4058:	4b05      	ldr	r3, [pc, #20]	; (4070 <system_gclk_chan_get_hz+0x2c>)
    405a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    405c:	0020      	movs	r0, r4
    405e:	4b05      	ldr	r3, [pc, #20]	; (4074 <system_gclk_chan_get_hz+0x30>)
    4060:	4798      	blx	r3
}
    4062:	bd10      	pop	{r4, pc}
    4064:	00003a2d 	.word	0x00003a2d
    4068:	40000c02 	.word	0x40000c02
    406c:	40000c00 	.word	0x40000c00
    4070:	00003a6d 	.word	0x00003a6d
    4074:	00003ee1 	.word	0x00003ee1

00004078 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4078:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    407a:	78d3      	ldrb	r3, [r2, #3]
    407c:	2b00      	cmp	r3, #0
    407e:	d135      	bne.n	40ec <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4080:	7813      	ldrb	r3, [r2, #0]
    4082:	2b80      	cmp	r3, #128	; 0x80
    4084:	d029      	beq.n	40da <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4086:	061b      	lsls	r3, r3, #24
    4088:	2480      	movs	r4, #128	; 0x80
    408a:	0264      	lsls	r4, r4, #9
    408c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    408e:	7854      	ldrb	r4, [r2, #1]
    4090:	2502      	movs	r5, #2
    4092:	43ac      	bics	r4, r5
    4094:	d106      	bne.n	40a4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4096:	7894      	ldrb	r4, [r2, #2]
    4098:	2c00      	cmp	r4, #0
    409a:	d120      	bne.n	40de <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    409c:	2480      	movs	r4, #128	; 0x80
    409e:	02a4      	lsls	r4, r4, #10
    40a0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    40a2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    40a4:	7854      	ldrb	r4, [r2, #1]
    40a6:	3c01      	subs	r4, #1
    40a8:	2c01      	cmp	r4, #1
    40aa:	d91c      	bls.n	40e6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    40ac:	040d      	lsls	r5, r1, #16
    40ae:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    40b0:	24a0      	movs	r4, #160	; 0xa0
    40b2:	05e4      	lsls	r4, r4, #23
    40b4:	432c      	orrs	r4, r5
    40b6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    40b8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    40ba:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    40bc:	24d0      	movs	r4, #208	; 0xd0
    40be:	0624      	lsls	r4, r4, #24
    40c0:	432c      	orrs	r4, r5
    40c2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    40c4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    40c6:	78d4      	ldrb	r4, [r2, #3]
    40c8:	2c00      	cmp	r4, #0
    40ca:	d122      	bne.n	4112 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    40cc:	035b      	lsls	r3, r3, #13
    40ce:	d51c      	bpl.n	410a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    40d0:	7893      	ldrb	r3, [r2, #2]
    40d2:	2b01      	cmp	r3, #1
    40d4:	d01e      	beq.n	4114 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    40d6:	6141      	str	r1, [r0, #20]
    40d8:	e017      	b.n	410a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    40da:	2300      	movs	r3, #0
    40dc:	e7d7      	b.n	408e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    40de:	24c0      	movs	r4, #192	; 0xc0
    40e0:	02e4      	lsls	r4, r4, #11
    40e2:	4323      	orrs	r3, r4
    40e4:	e7dd      	b.n	40a2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    40e6:	4c0d      	ldr	r4, [pc, #52]	; (411c <_system_pinmux_config+0xa4>)
    40e8:	4023      	ands	r3, r4
    40ea:	e7df      	b.n	40ac <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    40ec:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    40ee:	040c      	lsls	r4, r1, #16
    40f0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    40f2:	23a0      	movs	r3, #160	; 0xa0
    40f4:	05db      	lsls	r3, r3, #23
    40f6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    40f8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    40fa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    40fc:	23d0      	movs	r3, #208	; 0xd0
    40fe:	061b      	lsls	r3, r3, #24
    4100:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4102:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4104:	78d3      	ldrb	r3, [r2, #3]
    4106:	2b00      	cmp	r3, #0
    4108:	d103      	bne.n	4112 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    410a:	7853      	ldrb	r3, [r2, #1]
    410c:	3b01      	subs	r3, #1
    410e:	2b01      	cmp	r3, #1
    4110:	d902      	bls.n	4118 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4112:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4114:	6181      	str	r1, [r0, #24]
    4116:	e7f8      	b.n	410a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4118:	6081      	str	r1, [r0, #8]
}
    411a:	e7fa      	b.n	4112 <_system_pinmux_config+0x9a>
    411c:	fffbffff 	.word	0xfffbffff

00004120 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4120:	b510      	push	{r4, lr}
    4122:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4124:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4126:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4128:	2900      	cmp	r1, #0
    412a:	d104      	bne.n	4136 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    412c:	0943      	lsrs	r3, r0, #5
    412e:	01db      	lsls	r3, r3, #7
    4130:	4905      	ldr	r1, [pc, #20]	; (4148 <system_pinmux_pin_set_config+0x28>)
    4132:	468c      	mov	ip, r1
    4134:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4136:	241f      	movs	r4, #31
    4138:	4020      	ands	r0, r4
    413a:	2101      	movs	r1, #1
    413c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    413e:	0018      	movs	r0, r3
    4140:	4b02      	ldr	r3, [pc, #8]	; (414c <system_pinmux_pin_set_config+0x2c>)
    4142:	4798      	blx	r3
}
    4144:	bd10      	pop	{r4, pc}
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	41004400 	.word	0x41004400
    414c:	00004079 	.word	0x00004079

00004150 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4150:	4770      	bx	lr
	...

00004154 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4154:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4156:	4b05      	ldr	r3, [pc, #20]	; (416c <system_init+0x18>)
    4158:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    415a:	4b05      	ldr	r3, [pc, #20]	; (4170 <system_init+0x1c>)
    415c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    415e:	4b05      	ldr	r3, [pc, #20]	; (4174 <system_init+0x20>)
    4160:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4162:	4b05      	ldr	r3, [pc, #20]	; (4178 <system_init+0x24>)
    4164:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4166:	4b05      	ldr	r3, [pc, #20]	; (417c <system_init+0x28>)
    4168:	4798      	blx	r3
}
    416a:	bd10      	pop	{r4, pc}
    416c:	00003c95 	.word	0x00003c95
    4170:	00003641 	.word	0x00003641
    4174:	00004151 	.word	0x00004151
    4178:	00004151 	.word	0x00004151
    417c:	00004151 	.word	0x00004151

00004180 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4180:	e7fe      	b.n	4180 <Dummy_Handler>
	...

00004184 <Reset_Handler>:
{
    4184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4186:	4a2a      	ldr	r2, [pc, #168]	; (4230 <Reset_Handler+0xac>)
    4188:	4b2a      	ldr	r3, [pc, #168]	; (4234 <Reset_Handler+0xb0>)
    418a:	429a      	cmp	r2, r3
    418c:	d011      	beq.n	41b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    418e:	001a      	movs	r2, r3
    4190:	4b29      	ldr	r3, [pc, #164]	; (4238 <Reset_Handler+0xb4>)
    4192:	429a      	cmp	r2, r3
    4194:	d20d      	bcs.n	41b2 <Reset_Handler+0x2e>
    4196:	4a29      	ldr	r2, [pc, #164]	; (423c <Reset_Handler+0xb8>)
    4198:	3303      	adds	r3, #3
    419a:	1a9b      	subs	r3, r3, r2
    419c:	089b      	lsrs	r3, r3, #2
    419e:	3301      	adds	r3, #1
    41a0:	009b      	lsls	r3, r3, #2
    41a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    41a4:	4823      	ldr	r0, [pc, #140]	; (4234 <Reset_Handler+0xb0>)
    41a6:	4922      	ldr	r1, [pc, #136]	; (4230 <Reset_Handler+0xac>)
    41a8:	588c      	ldr	r4, [r1, r2]
    41aa:	5084      	str	r4, [r0, r2]
    41ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    41ae:	429a      	cmp	r2, r3
    41b0:	d1fa      	bne.n	41a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    41b2:	4a23      	ldr	r2, [pc, #140]	; (4240 <Reset_Handler+0xbc>)
    41b4:	4b23      	ldr	r3, [pc, #140]	; (4244 <Reset_Handler+0xc0>)
    41b6:	429a      	cmp	r2, r3
    41b8:	d20a      	bcs.n	41d0 <Reset_Handler+0x4c>
    41ba:	43d3      	mvns	r3, r2
    41bc:	4921      	ldr	r1, [pc, #132]	; (4244 <Reset_Handler+0xc0>)
    41be:	185b      	adds	r3, r3, r1
    41c0:	2103      	movs	r1, #3
    41c2:	438b      	bics	r3, r1
    41c4:	3304      	adds	r3, #4
    41c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    41c8:	2100      	movs	r1, #0
    41ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    41cc:	4293      	cmp	r3, r2
    41ce:	d1fc      	bne.n	41ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    41d0:	4a1d      	ldr	r2, [pc, #116]	; (4248 <Reset_Handler+0xc4>)
    41d2:	21ff      	movs	r1, #255	; 0xff
    41d4:	4b1d      	ldr	r3, [pc, #116]	; (424c <Reset_Handler+0xc8>)
    41d6:	438b      	bics	r3, r1
    41d8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    41da:	39fd      	subs	r1, #253	; 0xfd
    41dc:	2390      	movs	r3, #144	; 0x90
    41de:	005b      	lsls	r3, r3, #1
    41e0:	4a1b      	ldr	r2, [pc, #108]	; (4250 <Reset_Handler+0xcc>)
    41e2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    41e4:	4a1b      	ldr	r2, [pc, #108]	; (4254 <Reset_Handler+0xd0>)
    41e6:	78d3      	ldrb	r3, [r2, #3]
    41e8:	2503      	movs	r5, #3
    41ea:	43ab      	bics	r3, r5
    41ec:	2402      	movs	r4, #2
    41ee:	4323      	orrs	r3, r4
    41f0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    41f2:	78d3      	ldrb	r3, [r2, #3]
    41f4:	270c      	movs	r7, #12
    41f6:	43bb      	bics	r3, r7
    41f8:	2608      	movs	r6, #8
    41fa:	4333      	orrs	r3, r6
    41fc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    41fe:	4b16      	ldr	r3, [pc, #88]	; (4258 <Reset_Handler+0xd4>)
    4200:	7b98      	ldrb	r0, [r3, #14]
    4202:	2230      	movs	r2, #48	; 0x30
    4204:	4390      	bics	r0, r2
    4206:	2220      	movs	r2, #32
    4208:	4310      	orrs	r0, r2
    420a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    420c:	7b99      	ldrb	r1, [r3, #14]
    420e:	43b9      	bics	r1, r7
    4210:	4331      	orrs	r1, r6
    4212:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4214:	7b9a      	ldrb	r2, [r3, #14]
    4216:	43aa      	bics	r2, r5
    4218:	4322      	orrs	r2, r4
    421a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    421c:	4a0f      	ldr	r2, [pc, #60]	; (425c <Reset_Handler+0xd8>)
    421e:	6853      	ldr	r3, [r2, #4]
    4220:	2180      	movs	r1, #128	; 0x80
    4222:	430b      	orrs	r3, r1
    4224:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4226:	4b0e      	ldr	r3, [pc, #56]	; (4260 <Reset_Handler+0xdc>)
    4228:	4798      	blx	r3
        main();
    422a:	4b0e      	ldr	r3, [pc, #56]	; (4264 <Reset_Handler+0xe0>)
    422c:	4798      	blx	r3
    422e:	e7fe      	b.n	422e <Reset_Handler+0xaa>
    4230:	00006d04 	.word	0x00006d04
    4234:	20000000 	.word	0x20000000
    4238:	20000010 	.word	0x20000010
    423c:	20000004 	.word	0x20000004
    4240:	20000010 	.word	0x20000010
    4244:	20005298 	.word	0x20005298
    4248:	e000ed00 	.word	0xe000ed00
    424c:	00000000 	.word	0x00000000
    4250:	41007000 	.word	0x41007000
    4254:	41005000 	.word	0x41005000
    4258:	41004800 	.word	0x41004800
    425c:	41004000 	.word	0x41004000
    4260:	000069ad 	.word	0x000069ad
    4264:	00004269 	.word	0x00004269

00004268 <main>:
	config_wdt.timeout_period = WDT_PERIOD_16384CLK; // Approx 0.5 seconds
	wdt_set_config(&config_wdt);
}

int main (void)
{
    4268:	b510      	push	{r4, lr}
    426a:	b082      	sub	sp, #8
	system_init();
    426c:	4b14      	ldr	r3, [pc, #80]	; (42c0 <main+0x58>)
    426e:	4798      	blx	r3
	delay_init();
    4270:	4b14      	ldr	r3, [pc, #80]	; (42c4 <main+0x5c>)
    4272:	4798      	blx	r3
	config->enable               = true;
    4274:	2301      	movs	r3, #1
    4276:	466a      	mov	r2, sp
    4278:	7053      	strb	r3, [r2, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    427a:	2204      	movs	r2, #4
    427c:	4669      	mov	r1, sp
    427e:	708a      	strb	r2, [r1, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    4280:	3208      	adds	r2, #8
    4282:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    4284:	2200      	movs	r2, #0
    4286:	710a      	strb	r2, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    4288:	714a      	strb	r2, [r1, #5]
	config_wdt.always_on = true; // Cannot be turned off
    428a:	700b      	strb	r3, [r1, #0]
	wdt_set_config(&config_wdt);
    428c:	4668      	mov	r0, sp
    428e:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <main+0x60>)
    4290:	4798      	blx	r3
	
	// Enable WDT
	configure_wdt();
	
	// Set up application tasks.
	create_monitor_task(taskMONITOR_TASK_STACK_SIZE, taskMONITOR_TASK_PRIORITY);
    4292:	2103      	movs	r1, #3
    4294:	2080      	movs	r0, #128	; 0x80
    4296:	0040      	lsls	r0, r0, #1
    4298:	4b0c      	ldr	r3, [pc, #48]	; (42cc <main+0x64>)
    429a:	4798      	blx	r3
	create_control_task(taskCONTROL_TASK_STACK_SIZE, taskCONTROL_TASK_PRIORITY);
    429c:	2480      	movs	r4, #128	; 0x80
    429e:	00a4      	lsls	r4, r4, #2
    42a0:	2102      	movs	r1, #2
    42a2:	0020      	movs	r0, r4
    42a4:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <main+0x68>)
    42a6:	4798      	blx	r3
	create_sensor_task(taskSENSOR_TASK_STACK_SIZE, taskSENSOR_TASK_PRIORITY);
    42a8:	2102      	movs	r1, #2
    42aa:	0020      	movs	r0, r4
    42ac:	4b09      	ldr	r3, [pc, #36]	; (42d4 <main+0x6c>)
    42ae:	4798      	blx	r3
	create_hmi_task(taskHMI_TASK_STACK_SIZE, taskHMI_TASK_PRIORITY);
    42b0:	2101      	movs	r1, #1
    42b2:	0020      	movs	r0, r4
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <main+0x70>)
    42b6:	4798      	blx	r3

	vTaskStartScheduler();
    42b8:	4b08      	ldr	r3, [pc, #32]	; (42dc <main+0x74>)
    42ba:	4798      	blx	r3
    42bc:	e7fe      	b.n	42bc <main+0x54>
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	00004155 	.word	0x00004155
    42c4:	0000363d 	.word	0x0000363d
    42c8:	0000323d 	.word	0x0000323d
    42cc:	00001bdd 	.word	0x00001bdd
    42d0:	00001a99 	.word	0x00001a99
    42d4:	00001cf1 	.word	0x00001cf1
    42d8:	00001b9d 	.word	0x00001b9d
    42dc:	000027b5 	.word	0x000027b5

000042e0 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void);

void vApplicationMallocFailedHook(void)
{
	/* Only called if configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    42e0:	b672      	cpsid	i
    42e2:	e7fe      	b.n	42e2 <vApplicationMallocFailedHook+0x2>

000042e4 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);

void vApplicationIdleHook(void)
{
    42e4:	b510      	push	{r4, lr}
	/* Only called if configUSE_IDLE_HOOK is not set to 0 in FreeRTOSConfig.h */
	// There must be time spent in idle tick, or system will reset
	wdt_reset_count();
    42e6:	4b01      	ldr	r3, [pc, #4]	; (42ec <vApplicationIdleHook+0x8>)
    42e8:	4798      	blx	r3
}
    42ea:	bd10      	pop	{r4, pc}
    42ec:	0000333d 	.word	0x0000333d

000042f0 <vApplicationTickHook>:

void vApplicationTickHook(void)
{
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h */
}
    42f0:	4770      	bx	lr

000042f2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(void);

void vApplicationStackOverflowHook(void)
{
	/* Only called if configCHECK_FOR_STACK_OVERFLOW is not set to 0 in FreeRTOSConfig.h */
	taskDISABLE_INTERRUPTS();
    42f2:	b672      	cpsid	i
    42f4:	e7fe      	b.n	42f4 <vApplicationStackOverflowHook+0x2>

000042f6 <HardFault_Handler>:
	{
	}
}

ISR(HardFault_Handler)
{
    42f6:	e7fe      	b.n	42f6 <HardFault_Handler>

000042f8 <__udivsi3>:
    42f8:	2200      	movs	r2, #0
    42fa:	0843      	lsrs	r3, r0, #1
    42fc:	428b      	cmp	r3, r1
    42fe:	d374      	bcc.n	43ea <__udivsi3+0xf2>
    4300:	0903      	lsrs	r3, r0, #4
    4302:	428b      	cmp	r3, r1
    4304:	d35f      	bcc.n	43c6 <__udivsi3+0xce>
    4306:	0a03      	lsrs	r3, r0, #8
    4308:	428b      	cmp	r3, r1
    430a:	d344      	bcc.n	4396 <__udivsi3+0x9e>
    430c:	0b03      	lsrs	r3, r0, #12
    430e:	428b      	cmp	r3, r1
    4310:	d328      	bcc.n	4364 <__udivsi3+0x6c>
    4312:	0c03      	lsrs	r3, r0, #16
    4314:	428b      	cmp	r3, r1
    4316:	d30d      	bcc.n	4334 <__udivsi3+0x3c>
    4318:	22ff      	movs	r2, #255	; 0xff
    431a:	0209      	lsls	r1, r1, #8
    431c:	ba12      	rev	r2, r2
    431e:	0c03      	lsrs	r3, r0, #16
    4320:	428b      	cmp	r3, r1
    4322:	d302      	bcc.n	432a <__udivsi3+0x32>
    4324:	1212      	asrs	r2, r2, #8
    4326:	0209      	lsls	r1, r1, #8
    4328:	d065      	beq.n	43f6 <__udivsi3+0xfe>
    432a:	0b03      	lsrs	r3, r0, #12
    432c:	428b      	cmp	r3, r1
    432e:	d319      	bcc.n	4364 <__udivsi3+0x6c>
    4330:	e000      	b.n	4334 <__udivsi3+0x3c>
    4332:	0a09      	lsrs	r1, r1, #8
    4334:	0bc3      	lsrs	r3, r0, #15
    4336:	428b      	cmp	r3, r1
    4338:	d301      	bcc.n	433e <__udivsi3+0x46>
    433a:	03cb      	lsls	r3, r1, #15
    433c:	1ac0      	subs	r0, r0, r3
    433e:	4152      	adcs	r2, r2
    4340:	0b83      	lsrs	r3, r0, #14
    4342:	428b      	cmp	r3, r1
    4344:	d301      	bcc.n	434a <__udivsi3+0x52>
    4346:	038b      	lsls	r3, r1, #14
    4348:	1ac0      	subs	r0, r0, r3
    434a:	4152      	adcs	r2, r2
    434c:	0b43      	lsrs	r3, r0, #13
    434e:	428b      	cmp	r3, r1
    4350:	d301      	bcc.n	4356 <__udivsi3+0x5e>
    4352:	034b      	lsls	r3, r1, #13
    4354:	1ac0      	subs	r0, r0, r3
    4356:	4152      	adcs	r2, r2
    4358:	0b03      	lsrs	r3, r0, #12
    435a:	428b      	cmp	r3, r1
    435c:	d301      	bcc.n	4362 <__udivsi3+0x6a>
    435e:	030b      	lsls	r3, r1, #12
    4360:	1ac0      	subs	r0, r0, r3
    4362:	4152      	adcs	r2, r2
    4364:	0ac3      	lsrs	r3, r0, #11
    4366:	428b      	cmp	r3, r1
    4368:	d301      	bcc.n	436e <__udivsi3+0x76>
    436a:	02cb      	lsls	r3, r1, #11
    436c:	1ac0      	subs	r0, r0, r3
    436e:	4152      	adcs	r2, r2
    4370:	0a83      	lsrs	r3, r0, #10
    4372:	428b      	cmp	r3, r1
    4374:	d301      	bcc.n	437a <__udivsi3+0x82>
    4376:	028b      	lsls	r3, r1, #10
    4378:	1ac0      	subs	r0, r0, r3
    437a:	4152      	adcs	r2, r2
    437c:	0a43      	lsrs	r3, r0, #9
    437e:	428b      	cmp	r3, r1
    4380:	d301      	bcc.n	4386 <__udivsi3+0x8e>
    4382:	024b      	lsls	r3, r1, #9
    4384:	1ac0      	subs	r0, r0, r3
    4386:	4152      	adcs	r2, r2
    4388:	0a03      	lsrs	r3, r0, #8
    438a:	428b      	cmp	r3, r1
    438c:	d301      	bcc.n	4392 <__udivsi3+0x9a>
    438e:	020b      	lsls	r3, r1, #8
    4390:	1ac0      	subs	r0, r0, r3
    4392:	4152      	adcs	r2, r2
    4394:	d2cd      	bcs.n	4332 <__udivsi3+0x3a>
    4396:	09c3      	lsrs	r3, r0, #7
    4398:	428b      	cmp	r3, r1
    439a:	d301      	bcc.n	43a0 <__udivsi3+0xa8>
    439c:	01cb      	lsls	r3, r1, #7
    439e:	1ac0      	subs	r0, r0, r3
    43a0:	4152      	adcs	r2, r2
    43a2:	0983      	lsrs	r3, r0, #6
    43a4:	428b      	cmp	r3, r1
    43a6:	d301      	bcc.n	43ac <__udivsi3+0xb4>
    43a8:	018b      	lsls	r3, r1, #6
    43aa:	1ac0      	subs	r0, r0, r3
    43ac:	4152      	adcs	r2, r2
    43ae:	0943      	lsrs	r3, r0, #5
    43b0:	428b      	cmp	r3, r1
    43b2:	d301      	bcc.n	43b8 <__udivsi3+0xc0>
    43b4:	014b      	lsls	r3, r1, #5
    43b6:	1ac0      	subs	r0, r0, r3
    43b8:	4152      	adcs	r2, r2
    43ba:	0903      	lsrs	r3, r0, #4
    43bc:	428b      	cmp	r3, r1
    43be:	d301      	bcc.n	43c4 <__udivsi3+0xcc>
    43c0:	010b      	lsls	r3, r1, #4
    43c2:	1ac0      	subs	r0, r0, r3
    43c4:	4152      	adcs	r2, r2
    43c6:	08c3      	lsrs	r3, r0, #3
    43c8:	428b      	cmp	r3, r1
    43ca:	d301      	bcc.n	43d0 <__udivsi3+0xd8>
    43cc:	00cb      	lsls	r3, r1, #3
    43ce:	1ac0      	subs	r0, r0, r3
    43d0:	4152      	adcs	r2, r2
    43d2:	0883      	lsrs	r3, r0, #2
    43d4:	428b      	cmp	r3, r1
    43d6:	d301      	bcc.n	43dc <__udivsi3+0xe4>
    43d8:	008b      	lsls	r3, r1, #2
    43da:	1ac0      	subs	r0, r0, r3
    43dc:	4152      	adcs	r2, r2
    43de:	0843      	lsrs	r3, r0, #1
    43e0:	428b      	cmp	r3, r1
    43e2:	d301      	bcc.n	43e8 <__udivsi3+0xf0>
    43e4:	004b      	lsls	r3, r1, #1
    43e6:	1ac0      	subs	r0, r0, r3
    43e8:	4152      	adcs	r2, r2
    43ea:	1a41      	subs	r1, r0, r1
    43ec:	d200      	bcs.n	43f0 <__udivsi3+0xf8>
    43ee:	4601      	mov	r1, r0
    43f0:	4152      	adcs	r2, r2
    43f2:	4610      	mov	r0, r2
    43f4:	4770      	bx	lr
    43f6:	e7ff      	b.n	43f8 <__udivsi3+0x100>
    43f8:	b501      	push	{r0, lr}
    43fa:	2000      	movs	r0, #0
    43fc:	f000 f806 	bl	440c <__aeabi_idiv0>
    4400:	bd02      	pop	{r1, pc}
    4402:	46c0      	nop			; (mov r8, r8)

00004404 <__aeabi_uidivmod>:
    4404:	2900      	cmp	r1, #0
    4406:	d0f7      	beq.n	43f8 <__udivsi3+0x100>
    4408:	e776      	b.n	42f8 <__udivsi3>
    440a:	4770      	bx	lr

0000440c <__aeabi_idiv0>:
    440c:	4770      	bx	lr
    440e:	46c0      	nop			; (mov r8, r8)

00004410 <__aeabi_cdrcmple>:
    4410:	4684      	mov	ip, r0
    4412:	1c10      	adds	r0, r2, #0
    4414:	4662      	mov	r2, ip
    4416:	468c      	mov	ip, r1
    4418:	1c19      	adds	r1, r3, #0
    441a:	4663      	mov	r3, ip
    441c:	e000      	b.n	4420 <__aeabi_cdcmpeq>
    441e:	46c0      	nop			; (mov r8, r8)

00004420 <__aeabi_cdcmpeq>:
    4420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4422:	f001 fb23 	bl	5a6c <__ledf2>
    4426:	2800      	cmp	r0, #0
    4428:	d401      	bmi.n	442e <__aeabi_cdcmpeq+0xe>
    442a:	2100      	movs	r1, #0
    442c:	42c8      	cmn	r0, r1
    442e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004430 <__aeabi_dcmpeq>:
    4430:	b510      	push	{r4, lr}
    4432:	f001 fa7d 	bl	5930 <__eqdf2>
    4436:	4240      	negs	r0, r0
    4438:	3001      	adds	r0, #1
    443a:	bd10      	pop	{r4, pc}

0000443c <__aeabi_dcmplt>:
    443c:	b510      	push	{r4, lr}
    443e:	f001 fb15 	bl	5a6c <__ledf2>
    4442:	2800      	cmp	r0, #0
    4444:	db01      	blt.n	444a <__aeabi_dcmplt+0xe>
    4446:	2000      	movs	r0, #0
    4448:	bd10      	pop	{r4, pc}
    444a:	2001      	movs	r0, #1
    444c:	bd10      	pop	{r4, pc}
    444e:	46c0      	nop			; (mov r8, r8)

00004450 <__aeabi_dcmple>:
    4450:	b510      	push	{r4, lr}
    4452:	f001 fb0b 	bl	5a6c <__ledf2>
    4456:	2800      	cmp	r0, #0
    4458:	dd01      	ble.n	445e <__aeabi_dcmple+0xe>
    445a:	2000      	movs	r0, #0
    445c:	bd10      	pop	{r4, pc}
    445e:	2001      	movs	r0, #1
    4460:	bd10      	pop	{r4, pc}
    4462:	46c0      	nop			; (mov r8, r8)

00004464 <__aeabi_dcmpgt>:
    4464:	b510      	push	{r4, lr}
    4466:	f001 fa9d 	bl	59a4 <__gedf2>
    446a:	2800      	cmp	r0, #0
    446c:	dc01      	bgt.n	4472 <__aeabi_dcmpgt+0xe>
    446e:	2000      	movs	r0, #0
    4470:	bd10      	pop	{r4, pc}
    4472:	2001      	movs	r0, #1
    4474:	bd10      	pop	{r4, pc}
    4476:	46c0      	nop			; (mov r8, r8)

00004478 <__aeabi_dcmpge>:
    4478:	b510      	push	{r4, lr}
    447a:	f001 fa93 	bl	59a4 <__gedf2>
    447e:	2800      	cmp	r0, #0
    4480:	da01      	bge.n	4486 <__aeabi_dcmpge+0xe>
    4482:	2000      	movs	r0, #0
    4484:	bd10      	pop	{r4, pc}
    4486:	2001      	movs	r0, #1
    4488:	bd10      	pop	{r4, pc}
    448a:	46c0      	nop			; (mov r8, r8)

0000448c <__aeabi_cfrcmple>:
    448c:	4684      	mov	ip, r0
    448e:	1c08      	adds	r0, r1, #0
    4490:	4661      	mov	r1, ip
    4492:	e7ff      	b.n	4494 <__aeabi_cfcmpeq>

00004494 <__aeabi_cfcmpeq>:
    4494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4496:	f000 f899 	bl	45cc <__lesf2>
    449a:	2800      	cmp	r0, #0
    449c:	d401      	bmi.n	44a2 <__aeabi_cfcmpeq+0xe>
    449e:	2100      	movs	r1, #0
    44a0:	42c8      	cmn	r0, r1
    44a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000044a4 <__aeabi_fcmpeq>:
    44a4:	b510      	push	{r4, lr}
    44a6:	f000 f82b 	bl	4500 <__eqsf2>
    44aa:	4240      	negs	r0, r0
    44ac:	3001      	adds	r0, #1
    44ae:	bd10      	pop	{r4, pc}

000044b0 <__aeabi_fcmplt>:
    44b0:	b510      	push	{r4, lr}
    44b2:	f000 f88b 	bl	45cc <__lesf2>
    44b6:	2800      	cmp	r0, #0
    44b8:	db01      	blt.n	44be <__aeabi_fcmplt+0xe>
    44ba:	2000      	movs	r0, #0
    44bc:	bd10      	pop	{r4, pc}
    44be:	2001      	movs	r0, #1
    44c0:	bd10      	pop	{r4, pc}
    44c2:	46c0      	nop			; (mov r8, r8)

000044c4 <__aeabi_fcmple>:
    44c4:	b510      	push	{r4, lr}
    44c6:	f000 f881 	bl	45cc <__lesf2>
    44ca:	2800      	cmp	r0, #0
    44cc:	dd01      	ble.n	44d2 <__aeabi_fcmple+0xe>
    44ce:	2000      	movs	r0, #0
    44d0:	bd10      	pop	{r4, pc}
    44d2:	2001      	movs	r0, #1
    44d4:	bd10      	pop	{r4, pc}
    44d6:	46c0      	nop			; (mov r8, r8)

000044d8 <__aeabi_fcmpgt>:
    44d8:	b510      	push	{r4, lr}
    44da:	f000 f837 	bl	454c <__gesf2>
    44de:	2800      	cmp	r0, #0
    44e0:	dc01      	bgt.n	44e6 <__aeabi_fcmpgt+0xe>
    44e2:	2000      	movs	r0, #0
    44e4:	bd10      	pop	{r4, pc}
    44e6:	2001      	movs	r0, #1
    44e8:	bd10      	pop	{r4, pc}
    44ea:	46c0      	nop			; (mov r8, r8)

000044ec <__aeabi_fcmpge>:
    44ec:	b510      	push	{r4, lr}
    44ee:	f000 f82d 	bl	454c <__gesf2>
    44f2:	2800      	cmp	r0, #0
    44f4:	da01      	bge.n	44fa <__aeabi_fcmpge+0xe>
    44f6:	2000      	movs	r0, #0
    44f8:	bd10      	pop	{r4, pc}
    44fa:	2001      	movs	r0, #1
    44fc:	bd10      	pop	{r4, pc}
    44fe:	46c0      	nop			; (mov r8, r8)

00004500 <__eqsf2>:
    4500:	b570      	push	{r4, r5, r6, lr}
    4502:	0042      	lsls	r2, r0, #1
    4504:	0245      	lsls	r5, r0, #9
    4506:	024e      	lsls	r6, r1, #9
    4508:	004c      	lsls	r4, r1, #1
    450a:	0fc3      	lsrs	r3, r0, #31
    450c:	0a6d      	lsrs	r5, r5, #9
    450e:	0e12      	lsrs	r2, r2, #24
    4510:	0a76      	lsrs	r6, r6, #9
    4512:	0e24      	lsrs	r4, r4, #24
    4514:	0fc9      	lsrs	r1, r1, #31
    4516:	2001      	movs	r0, #1
    4518:	2aff      	cmp	r2, #255	; 0xff
    451a:	d006      	beq.n	452a <__eqsf2+0x2a>
    451c:	2cff      	cmp	r4, #255	; 0xff
    451e:	d003      	beq.n	4528 <__eqsf2+0x28>
    4520:	42a2      	cmp	r2, r4
    4522:	d101      	bne.n	4528 <__eqsf2+0x28>
    4524:	42b5      	cmp	r5, r6
    4526:	d006      	beq.n	4536 <__eqsf2+0x36>
    4528:	bd70      	pop	{r4, r5, r6, pc}
    452a:	2d00      	cmp	r5, #0
    452c:	d1fc      	bne.n	4528 <__eqsf2+0x28>
    452e:	2cff      	cmp	r4, #255	; 0xff
    4530:	d1fa      	bne.n	4528 <__eqsf2+0x28>
    4532:	2e00      	cmp	r6, #0
    4534:	d1f8      	bne.n	4528 <__eqsf2+0x28>
    4536:	428b      	cmp	r3, r1
    4538:	d006      	beq.n	4548 <__eqsf2+0x48>
    453a:	2001      	movs	r0, #1
    453c:	2a00      	cmp	r2, #0
    453e:	d1f3      	bne.n	4528 <__eqsf2+0x28>
    4540:	0028      	movs	r0, r5
    4542:	1e45      	subs	r5, r0, #1
    4544:	41a8      	sbcs	r0, r5
    4546:	e7ef      	b.n	4528 <__eqsf2+0x28>
    4548:	2000      	movs	r0, #0
    454a:	e7ed      	b.n	4528 <__eqsf2+0x28>

0000454c <__gesf2>:
    454c:	b5f0      	push	{r4, r5, r6, r7, lr}
    454e:	0042      	lsls	r2, r0, #1
    4550:	0245      	lsls	r5, r0, #9
    4552:	024c      	lsls	r4, r1, #9
    4554:	0fc3      	lsrs	r3, r0, #31
    4556:	0048      	lsls	r0, r1, #1
    4558:	0a6d      	lsrs	r5, r5, #9
    455a:	0e12      	lsrs	r2, r2, #24
    455c:	0a64      	lsrs	r4, r4, #9
    455e:	0e00      	lsrs	r0, r0, #24
    4560:	0fc9      	lsrs	r1, r1, #31
    4562:	2aff      	cmp	r2, #255	; 0xff
    4564:	d01e      	beq.n	45a4 <__gesf2+0x58>
    4566:	28ff      	cmp	r0, #255	; 0xff
    4568:	d021      	beq.n	45ae <__gesf2+0x62>
    456a:	2a00      	cmp	r2, #0
    456c:	d10a      	bne.n	4584 <__gesf2+0x38>
    456e:	426e      	negs	r6, r5
    4570:	416e      	adcs	r6, r5
    4572:	b2f6      	uxtb	r6, r6
    4574:	2800      	cmp	r0, #0
    4576:	d10f      	bne.n	4598 <__gesf2+0x4c>
    4578:	2c00      	cmp	r4, #0
    457a:	d10d      	bne.n	4598 <__gesf2+0x4c>
    457c:	2000      	movs	r0, #0
    457e:	2d00      	cmp	r5, #0
    4580:	d009      	beq.n	4596 <__gesf2+0x4a>
    4582:	e005      	b.n	4590 <__gesf2+0x44>
    4584:	2800      	cmp	r0, #0
    4586:	d101      	bne.n	458c <__gesf2+0x40>
    4588:	2c00      	cmp	r4, #0
    458a:	d001      	beq.n	4590 <__gesf2+0x44>
    458c:	428b      	cmp	r3, r1
    458e:	d011      	beq.n	45b4 <__gesf2+0x68>
    4590:	2101      	movs	r1, #1
    4592:	4258      	negs	r0, r3
    4594:	4308      	orrs	r0, r1
    4596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4598:	2e00      	cmp	r6, #0
    459a:	d0f7      	beq.n	458c <__gesf2+0x40>
    459c:	2001      	movs	r0, #1
    459e:	3901      	subs	r1, #1
    45a0:	4308      	orrs	r0, r1
    45a2:	e7f8      	b.n	4596 <__gesf2+0x4a>
    45a4:	2d00      	cmp	r5, #0
    45a6:	d0de      	beq.n	4566 <__gesf2+0x1a>
    45a8:	2002      	movs	r0, #2
    45aa:	4240      	negs	r0, r0
    45ac:	e7f3      	b.n	4596 <__gesf2+0x4a>
    45ae:	2c00      	cmp	r4, #0
    45b0:	d0db      	beq.n	456a <__gesf2+0x1e>
    45b2:	e7f9      	b.n	45a8 <__gesf2+0x5c>
    45b4:	4282      	cmp	r2, r0
    45b6:	dceb      	bgt.n	4590 <__gesf2+0x44>
    45b8:	db04      	blt.n	45c4 <__gesf2+0x78>
    45ba:	42a5      	cmp	r5, r4
    45bc:	d8e8      	bhi.n	4590 <__gesf2+0x44>
    45be:	2000      	movs	r0, #0
    45c0:	42a5      	cmp	r5, r4
    45c2:	d2e8      	bcs.n	4596 <__gesf2+0x4a>
    45c4:	2101      	movs	r1, #1
    45c6:	1e58      	subs	r0, r3, #1
    45c8:	4308      	orrs	r0, r1
    45ca:	e7e4      	b.n	4596 <__gesf2+0x4a>

000045cc <__lesf2>:
    45cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ce:	0042      	lsls	r2, r0, #1
    45d0:	024d      	lsls	r5, r1, #9
    45d2:	004c      	lsls	r4, r1, #1
    45d4:	0246      	lsls	r6, r0, #9
    45d6:	0a76      	lsrs	r6, r6, #9
    45d8:	0e12      	lsrs	r2, r2, #24
    45da:	0fc3      	lsrs	r3, r0, #31
    45dc:	0a6d      	lsrs	r5, r5, #9
    45de:	0e24      	lsrs	r4, r4, #24
    45e0:	0fc9      	lsrs	r1, r1, #31
    45e2:	2aff      	cmp	r2, #255	; 0xff
    45e4:	d016      	beq.n	4614 <__lesf2+0x48>
    45e6:	2cff      	cmp	r4, #255	; 0xff
    45e8:	d018      	beq.n	461c <__lesf2+0x50>
    45ea:	2a00      	cmp	r2, #0
    45ec:	d10a      	bne.n	4604 <__lesf2+0x38>
    45ee:	4270      	negs	r0, r6
    45f0:	4170      	adcs	r0, r6
    45f2:	b2c0      	uxtb	r0, r0
    45f4:	2c00      	cmp	r4, #0
    45f6:	d015      	beq.n	4624 <__lesf2+0x58>
    45f8:	2800      	cmp	r0, #0
    45fa:	d005      	beq.n	4608 <__lesf2+0x3c>
    45fc:	2001      	movs	r0, #1
    45fe:	3901      	subs	r1, #1
    4600:	4308      	orrs	r0, r1
    4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4604:	2c00      	cmp	r4, #0
    4606:	d013      	beq.n	4630 <__lesf2+0x64>
    4608:	4299      	cmp	r1, r3
    460a:	d014      	beq.n	4636 <__lesf2+0x6a>
    460c:	2001      	movs	r0, #1
    460e:	425b      	negs	r3, r3
    4610:	4318      	orrs	r0, r3
    4612:	e7f6      	b.n	4602 <__lesf2+0x36>
    4614:	2002      	movs	r0, #2
    4616:	2e00      	cmp	r6, #0
    4618:	d1f3      	bne.n	4602 <__lesf2+0x36>
    461a:	e7e4      	b.n	45e6 <__lesf2+0x1a>
    461c:	2002      	movs	r0, #2
    461e:	2d00      	cmp	r5, #0
    4620:	d1ef      	bne.n	4602 <__lesf2+0x36>
    4622:	e7e2      	b.n	45ea <__lesf2+0x1e>
    4624:	2d00      	cmp	r5, #0
    4626:	d1e7      	bne.n	45f8 <__lesf2+0x2c>
    4628:	2000      	movs	r0, #0
    462a:	2e00      	cmp	r6, #0
    462c:	d0e9      	beq.n	4602 <__lesf2+0x36>
    462e:	e7ed      	b.n	460c <__lesf2+0x40>
    4630:	2d00      	cmp	r5, #0
    4632:	d1e9      	bne.n	4608 <__lesf2+0x3c>
    4634:	e7ea      	b.n	460c <__lesf2+0x40>
    4636:	42a2      	cmp	r2, r4
    4638:	dc06      	bgt.n	4648 <__lesf2+0x7c>
    463a:	dbdf      	blt.n	45fc <__lesf2+0x30>
    463c:	42ae      	cmp	r6, r5
    463e:	d803      	bhi.n	4648 <__lesf2+0x7c>
    4640:	2000      	movs	r0, #0
    4642:	42ae      	cmp	r6, r5
    4644:	d3da      	bcc.n	45fc <__lesf2+0x30>
    4646:	e7dc      	b.n	4602 <__lesf2+0x36>
    4648:	2001      	movs	r0, #1
    464a:	4249      	negs	r1, r1
    464c:	4308      	orrs	r0, r1
    464e:	e7d8      	b.n	4602 <__lesf2+0x36>

00004650 <__aeabi_fmul>:
    4650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4652:	4657      	mov	r7, sl
    4654:	464e      	mov	r6, r9
    4656:	4645      	mov	r5, r8
    4658:	46de      	mov	lr, fp
    465a:	b5e0      	push	{r5, r6, r7, lr}
    465c:	0247      	lsls	r7, r0, #9
    465e:	0046      	lsls	r6, r0, #1
    4660:	4688      	mov	r8, r1
    4662:	0a7f      	lsrs	r7, r7, #9
    4664:	0e36      	lsrs	r6, r6, #24
    4666:	0fc4      	lsrs	r4, r0, #31
    4668:	2e00      	cmp	r6, #0
    466a:	d047      	beq.n	46fc <__aeabi_fmul+0xac>
    466c:	2eff      	cmp	r6, #255	; 0xff
    466e:	d024      	beq.n	46ba <__aeabi_fmul+0x6a>
    4670:	00fb      	lsls	r3, r7, #3
    4672:	2780      	movs	r7, #128	; 0x80
    4674:	04ff      	lsls	r7, r7, #19
    4676:	431f      	orrs	r7, r3
    4678:	2300      	movs	r3, #0
    467a:	4699      	mov	r9, r3
    467c:	469a      	mov	sl, r3
    467e:	3e7f      	subs	r6, #127	; 0x7f
    4680:	4643      	mov	r3, r8
    4682:	025d      	lsls	r5, r3, #9
    4684:	0058      	lsls	r0, r3, #1
    4686:	0fdb      	lsrs	r3, r3, #31
    4688:	0a6d      	lsrs	r5, r5, #9
    468a:	0e00      	lsrs	r0, r0, #24
    468c:	4698      	mov	r8, r3
    468e:	d043      	beq.n	4718 <__aeabi_fmul+0xc8>
    4690:	28ff      	cmp	r0, #255	; 0xff
    4692:	d03b      	beq.n	470c <__aeabi_fmul+0xbc>
    4694:	00eb      	lsls	r3, r5, #3
    4696:	2580      	movs	r5, #128	; 0x80
    4698:	2200      	movs	r2, #0
    469a:	04ed      	lsls	r5, r5, #19
    469c:	431d      	orrs	r5, r3
    469e:	387f      	subs	r0, #127	; 0x7f
    46a0:	1836      	adds	r6, r6, r0
    46a2:	1c73      	adds	r3, r6, #1
    46a4:	4641      	mov	r1, r8
    46a6:	469b      	mov	fp, r3
    46a8:	464b      	mov	r3, r9
    46aa:	4061      	eors	r1, r4
    46ac:	4313      	orrs	r3, r2
    46ae:	2b0f      	cmp	r3, #15
    46b0:	d864      	bhi.n	477c <__aeabi_fmul+0x12c>
    46b2:	4875      	ldr	r0, [pc, #468]	; (4888 <__aeabi_fmul+0x238>)
    46b4:	009b      	lsls	r3, r3, #2
    46b6:	58c3      	ldr	r3, [r0, r3]
    46b8:	469f      	mov	pc, r3
    46ba:	2f00      	cmp	r7, #0
    46bc:	d142      	bne.n	4744 <__aeabi_fmul+0xf4>
    46be:	2308      	movs	r3, #8
    46c0:	4699      	mov	r9, r3
    46c2:	3b06      	subs	r3, #6
    46c4:	26ff      	movs	r6, #255	; 0xff
    46c6:	469a      	mov	sl, r3
    46c8:	e7da      	b.n	4680 <__aeabi_fmul+0x30>
    46ca:	4641      	mov	r1, r8
    46cc:	2a02      	cmp	r2, #2
    46ce:	d028      	beq.n	4722 <__aeabi_fmul+0xd2>
    46d0:	2a03      	cmp	r2, #3
    46d2:	d100      	bne.n	46d6 <__aeabi_fmul+0x86>
    46d4:	e0ce      	b.n	4874 <__aeabi_fmul+0x224>
    46d6:	2a01      	cmp	r2, #1
    46d8:	d000      	beq.n	46dc <__aeabi_fmul+0x8c>
    46da:	e0ac      	b.n	4836 <__aeabi_fmul+0x1e6>
    46dc:	4011      	ands	r1, r2
    46de:	2000      	movs	r0, #0
    46e0:	2200      	movs	r2, #0
    46e2:	b2cc      	uxtb	r4, r1
    46e4:	0240      	lsls	r0, r0, #9
    46e6:	05d2      	lsls	r2, r2, #23
    46e8:	0a40      	lsrs	r0, r0, #9
    46ea:	07e4      	lsls	r4, r4, #31
    46ec:	4310      	orrs	r0, r2
    46ee:	4320      	orrs	r0, r4
    46f0:	bc3c      	pop	{r2, r3, r4, r5}
    46f2:	4690      	mov	r8, r2
    46f4:	4699      	mov	r9, r3
    46f6:	46a2      	mov	sl, r4
    46f8:	46ab      	mov	fp, r5
    46fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46fc:	2f00      	cmp	r7, #0
    46fe:	d115      	bne.n	472c <__aeabi_fmul+0xdc>
    4700:	2304      	movs	r3, #4
    4702:	4699      	mov	r9, r3
    4704:	3b03      	subs	r3, #3
    4706:	2600      	movs	r6, #0
    4708:	469a      	mov	sl, r3
    470a:	e7b9      	b.n	4680 <__aeabi_fmul+0x30>
    470c:	20ff      	movs	r0, #255	; 0xff
    470e:	2202      	movs	r2, #2
    4710:	2d00      	cmp	r5, #0
    4712:	d0c5      	beq.n	46a0 <__aeabi_fmul+0x50>
    4714:	2203      	movs	r2, #3
    4716:	e7c3      	b.n	46a0 <__aeabi_fmul+0x50>
    4718:	2d00      	cmp	r5, #0
    471a:	d119      	bne.n	4750 <__aeabi_fmul+0x100>
    471c:	2000      	movs	r0, #0
    471e:	2201      	movs	r2, #1
    4720:	e7be      	b.n	46a0 <__aeabi_fmul+0x50>
    4722:	2401      	movs	r4, #1
    4724:	22ff      	movs	r2, #255	; 0xff
    4726:	400c      	ands	r4, r1
    4728:	2000      	movs	r0, #0
    472a:	e7db      	b.n	46e4 <__aeabi_fmul+0x94>
    472c:	0038      	movs	r0, r7
    472e:	f002 f91f 	bl	6970 <__clzsi2>
    4732:	2676      	movs	r6, #118	; 0x76
    4734:	1f43      	subs	r3, r0, #5
    4736:	409f      	lsls	r7, r3
    4738:	2300      	movs	r3, #0
    473a:	4276      	negs	r6, r6
    473c:	1a36      	subs	r6, r6, r0
    473e:	4699      	mov	r9, r3
    4740:	469a      	mov	sl, r3
    4742:	e79d      	b.n	4680 <__aeabi_fmul+0x30>
    4744:	230c      	movs	r3, #12
    4746:	4699      	mov	r9, r3
    4748:	3b09      	subs	r3, #9
    474a:	26ff      	movs	r6, #255	; 0xff
    474c:	469a      	mov	sl, r3
    474e:	e797      	b.n	4680 <__aeabi_fmul+0x30>
    4750:	0028      	movs	r0, r5
    4752:	f002 f90d 	bl	6970 <__clzsi2>
    4756:	1f43      	subs	r3, r0, #5
    4758:	409d      	lsls	r5, r3
    475a:	2376      	movs	r3, #118	; 0x76
    475c:	425b      	negs	r3, r3
    475e:	1a18      	subs	r0, r3, r0
    4760:	2200      	movs	r2, #0
    4762:	e79d      	b.n	46a0 <__aeabi_fmul+0x50>
    4764:	2080      	movs	r0, #128	; 0x80
    4766:	2400      	movs	r4, #0
    4768:	03c0      	lsls	r0, r0, #15
    476a:	22ff      	movs	r2, #255	; 0xff
    476c:	e7ba      	b.n	46e4 <__aeabi_fmul+0x94>
    476e:	003d      	movs	r5, r7
    4770:	4652      	mov	r2, sl
    4772:	e7ab      	b.n	46cc <__aeabi_fmul+0x7c>
    4774:	003d      	movs	r5, r7
    4776:	0021      	movs	r1, r4
    4778:	4652      	mov	r2, sl
    477a:	e7a7      	b.n	46cc <__aeabi_fmul+0x7c>
    477c:	0c3b      	lsrs	r3, r7, #16
    477e:	469c      	mov	ip, r3
    4780:	042a      	lsls	r2, r5, #16
    4782:	0c12      	lsrs	r2, r2, #16
    4784:	0c2b      	lsrs	r3, r5, #16
    4786:	0014      	movs	r4, r2
    4788:	4660      	mov	r0, ip
    478a:	4665      	mov	r5, ip
    478c:	043f      	lsls	r7, r7, #16
    478e:	0c3f      	lsrs	r7, r7, #16
    4790:	437c      	muls	r4, r7
    4792:	4342      	muls	r2, r0
    4794:	435d      	muls	r5, r3
    4796:	437b      	muls	r3, r7
    4798:	0c27      	lsrs	r7, r4, #16
    479a:	189b      	adds	r3, r3, r2
    479c:	18ff      	adds	r7, r7, r3
    479e:	42ba      	cmp	r2, r7
    47a0:	d903      	bls.n	47aa <__aeabi_fmul+0x15a>
    47a2:	2380      	movs	r3, #128	; 0x80
    47a4:	025b      	lsls	r3, r3, #9
    47a6:	469c      	mov	ip, r3
    47a8:	4465      	add	r5, ip
    47aa:	0424      	lsls	r4, r4, #16
    47ac:	043a      	lsls	r2, r7, #16
    47ae:	0c24      	lsrs	r4, r4, #16
    47b0:	1912      	adds	r2, r2, r4
    47b2:	0193      	lsls	r3, r2, #6
    47b4:	1e5c      	subs	r4, r3, #1
    47b6:	41a3      	sbcs	r3, r4
    47b8:	0c3f      	lsrs	r7, r7, #16
    47ba:	0e92      	lsrs	r2, r2, #26
    47bc:	197d      	adds	r5, r7, r5
    47be:	431a      	orrs	r2, r3
    47c0:	01ad      	lsls	r5, r5, #6
    47c2:	4315      	orrs	r5, r2
    47c4:	012b      	lsls	r3, r5, #4
    47c6:	d504      	bpl.n	47d2 <__aeabi_fmul+0x182>
    47c8:	2301      	movs	r3, #1
    47ca:	465e      	mov	r6, fp
    47cc:	086a      	lsrs	r2, r5, #1
    47ce:	401d      	ands	r5, r3
    47d0:	4315      	orrs	r5, r2
    47d2:	0032      	movs	r2, r6
    47d4:	327f      	adds	r2, #127	; 0x7f
    47d6:	2a00      	cmp	r2, #0
    47d8:	dd25      	ble.n	4826 <__aeabi_fmul+0x1d6>
    47da:	076b      	lsls	r3, r5, #29
    47dc:	d004      	beq.n	47e8 <__aeabi_fmul+0x198>
    47de:	230f      	movs	r3, #15
    47e0:	402b      	ands	r3, r5
    47e2:	2b04      	cmp	r3, #4
    47e4:	d000      	beq.n	47e8 <__aeabi_fmul+0x198>
    47e6:	3504      	adds	r5, #4
    47e8:	012b      	lsls	r3, r5, #4
    47ea:	d503      	bpl.n	47f4 <__aeabi_fmul+0x1a4>
    47ec:	0032      	movs	r2, r6
    47ee:	4b27      	ldr	r3, [pc, #156]	; (488c <__aeabi_fmul+0x23c>)
    47f0:	3280      	adds	r2, #128	; 0x80
    47f2:	401d      	ands	r5, r3
    47f4:	2afe      	cmp	r2, #254	; 0xfe
    47f6:	dc94      	bgt.n	4722 <__aeabi_fmul+0xd2>
    47f8:	2401      	movs	r4, #1
    47fa:	01a8      	lsls	r0, r5, #6
    47fc:	0a40      	lsrs	r0, r0, #9
    47fe:	b2d2      	uxtb	r2, r2
    4800:	400c      	ands	r4, r1
    4802:	e76f      	b.n	46e4 <__aeabi_fmul+0x94>
    4804:	2080      	movs	r0, #128	; 0x80
    4806:	03c0      	lsls	r0, r0, #15
    4808:	4207      	tst	r7, r0
    480a:	d007      	beq.n	481c <__aeabi_fmul+0x1cc>
    480c:	4205      	tst	r5, r0
    480e:	d105      	bne.n	481c <__aeabi_fmul+0x1cc>
    4810:	4328      	orrs	r0, r5
    4812:	0240      	lsls	r0, r0, #9
    4814:	0a40      	lsrs	r0, r0, #9
    4816:	4644      	mov	r4, r8
    4818:	22ff      	movs	r2, #255	; 0xff
    481a:	e763      	b.n	46e4 <__aeabi_fmul+0x94>
    481c:	4338      	orrs	r0, r7
    481e:	0240      	lsls	r0, r0, #9
    4820:	0a40      	lsrs	r0, r0, #9
    4822:	22ff      	movs	r2, #255	; 0xff
    4824:	e75e      	b.n	46e4 <__aeabi_fmul+0x94>
    4826:	2401      	movs	r4, #1
    4828:	1aa3      	subs	r3, r4, r2
    482a:	2b1b      	cmp	r3, #27
    482c:	dd05      	ble.n	483a <__aeabi_fmul+0x1ea>
    482e:	400c      	ands	r4, r1
    4830:	2200      	movs	r2, #0
    4832:	2000      	movs	r0, #0
    4834:	e756      	b.n	46e4 <__aeabi_fmul+0x94>
    4836:	465e      	mov	r6, fp
    4838:	e7cb      	b.n	47d2 <__aeabi_fmul+0x182>
    483a:	002a      	movs	r2, r5
    483c:	2020      	movs	r0, #32
    483e:	40da      	lsrs	r2, r3
    4840:	1ac3      	subs	r3, r0, r3
    4842:	409d      	lsls	r5, r3
    4844:	002b      	movs	r3, r5
    4846:	1e5d      	subs	r5, r3, #1
    4848:	41ab      	sbcs	r3, r5
    484a:	4313      	orrs	r3, r2
    484c:	075a      	lsls	r2, r3, #29
    484e:	d004      	beq.n	485a <__aeabi_fmul+0x20a>
    4850:	220f      	movs	r2, #15
    4852:	401a      	ands	r2, r3
    4854:	2a04      	cmp	r2, #4
    4856:	d000      	beq.n	485a <__aeabi_fmul+0x20a>
    4858:	3304      	adds	r3, #4
    485a:	015a      	lsls	r2, r3, #5
    485c:	d504      	bpl.n	4868 <__aeabi_fmul+0x218>
    485e:	2401      	movs	r4, #1
    4860:	2201      	movs	r2, #1
    4862:	400c      	ands	r4, r1
    4864:	2000      	movs	r0, #0
    4866:	e73d      	b.n	46e4 <__aeabi_fmul+0x94>
    4868:	2401      	movs	r4, #1
    486a:	019b      	lsls	r3, r3, #6
    486c:	0a58      	lsrs	r0, r3, #9
    486e:	400c      	ands	r4, r1
    4870:	2200      	movs	r2, #0
    4872:	e737      	b.n	46e4 <__aeabi_fmul+0x94>
    4874:	2080      	movs	r0, #128	; 0x80
    4876:	2401      	movs	r4, #1
    4878:	03c0      	lsls	r0, r0, #15
    487a:	4328      	orrs	r0, r5
    487c:	0240      	lsls	r0, r0, #9
    487e:	0a40      	lsrs	r0, r0, #9
    4880:	400c      	ands	r4, r1
    4882:	22ff      	movs	r2, #255	; 0xff
    4884:	e72e      	b.n	46e4 <__aeabi_fmul+0x94>
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	00006c24 	.word	0x00006c24
    488c:	f7ffffff 	.word	0xf7ffffff

00004890 <__aeabi_fsub>:
    4890:	b5f0      	push	{r4, r5, r6, r7, lr}
    4892:	464f      	mov	r7, r9
    4894:	46d6      	mov	lr, sl
    4896:	4646      	mov	r6, r8
    4898:	0044      	lsls	r4, r0, #1
    489a:	b5c0      	push	{r6, r7, lr}
    489c:	0fc2      	lsrs	r2, r0, #31
    489e:	0247      	lsls	r7, r0, #9
    48a0:	0248      	lsls	r0, r1, #9
    48a2:	0a40      	lsrs	r0, r0, #9
    48a4:	4684      	mov	ip, r0
    48a6:	4666      	mov	r6, ip
    48a8:	0a7b      	lsrs	r3, r7, #9
    48aa:	0048      	lsls	r0, r1, #1
    48ac:	0fc9      	lsrs	r1, r1, #31
    48ae:	469a      	mov	sl, r3
    48b0:	0e24      	lsrs	r4, r4, #24
    48b2:	0015      	movs	r5, r2
    48b4:	00db      	lsls	r3, r3, #3
    48b6:	0e00      	lsrs	r0, r0, #24
    48b8:	4689      	mov	r9, r1
    48ba:	00f6      	lsls	r6, r6, #3
    48bc:	28ff      	cmp	r0, #255	; 0xff
    48be:	d100      	bne.n	48c2 <__aeabi_fsub+0x32>
    48c0:	e08f      	b.n	49e2 <__aeabi_fsub+0x152>
    48c2:	2101      	movs	r1, #1
    48c4:	464f      	mov	r7, r9
    48c6:	404f      	eors	r7, r1
    48c8:	0039      	movs	r1, r7
    48ca:	4291      	cmp	r1, r2
    48cc:	d066      	beq.n	499c <__aeabi_fsub+0x10c>
    48ce:	1a22      	subs	r2, r4, r0
    48d0:	2a00      	cmp	r2, #0
    48d2:	dc00      	bgt.n	48d6 <__aeabi_fsub+0x46>
    48d4:	e09d      	b.n	4a12 <__aeabi_fsub+0x182>
    48d6:	2800      	cmp	r0, #0
    48d8:	d13d      	bne.n	4956 <__aeabi_fsub+0xc6>
    48da:	2e00      	cmp	r6, #0
    48dc:	d100      	bne.n	48e0 <__aeabi_fsub+0x50>
    48de:	e08b      	b.n	49f8 <__aeabi_fsub+0x168>
    48e0:	1e51      	subs	r1, r2, #1
    48e2:	2900      	cmp	r1, #0
    48e4:	d000      	beq.n	48e8 <__aeabi_fsub+0x58>
    48e6:	e0b5      	b.n	4a54 <__aeabi_fsub+0x1c4>
    48e8:	2401      	movs	r4, #1
    48ea:	1b9b      	subs	r3, r3, r6
    48ec:	015a      	lsls	r2, r3, #5
    48ee:	d544      	bpl.n	497a <__aeabi_fsub+0xea>
    48f0:	019b      	lsls	r3, r3, #6
    48f2:	099f      	lsrs	r7, r3, #6
    48f4:	0038      	movs	r0, r7
    48f6:	f002 f83b 	bl	6970 <__clzsi2>
    48fa:	3805      	subs	r0, #5
    48fc:	4087      	lsls	r7, r0
    48fe:	4284      	cmp	r4, r0
    4900:	dd00      	ble.n	4904 <__aeabi_fsub+0x74>
    4902:	e096      	b.n	4a32 <__aeabi_fsub+0x1a2>
    4904:	1b04      	subs	r4, r0, r4
    4906:	003a      	movs	r2, r7
    4908:	2020      	movs	r0, #32
    490a:	3401      	adds	r4, #1
    490c:	40e2      	lsrs	r2, r4
    490e:	1b04      	subs	r4, r0, r4
    4910:	40a7      	lsls	r7, r4
    4912:	003b      	movs	r3, r7
    4914:	1e5f      	subs	r7, r3, #1
    4916:	41bb      	sbcs	r3, r7
    4918:	2400      	movs	r4, #0
    491a:	4313      	orrs	r3, r2
    491c:	075a      	lsls	r2, r3, #29
    491e:	d004      	beq.n	492a <__aeabi_fsub+0x9a>
    4920:	220f      	movs	r2, #15
    4922:	401a      	ands	r2, r3
    4924:	2a04      	cmp	r2, #4
    4926:	d000      	beq.n	492a <__aeabi_fsub+0x9a>
    4928:	3304      	adds	r3, #4
    492a:	015a      	lsls	r2, r3, #5
    492c:	d527      	bpl.n	497e <__aeabi_fsub+0xee>
    492e:	3401      	adds	r4, #1
    4930:	2cff      	cmp	r4, #255	; 0xff
    4932:	d100      	bne.n	4936 <__aeabi_fsub+0xa6>
    4934:	e079      	b.n	4a2a <__aeabi_fsub+0x19a>
    4936:	2201      	movs	r2, #1
    4938:	019b      	lsls	r3, r3, #6
    493a:	0a5b      	lsrs	r3, r3, #9
    493c:	b2e4      	uxtb	r4, r4
    493e:	402a      	ands	r2, r5
    4940:	025b      	lsls	r3, r3, #9
    4942:	05e4      	lsls	r4, r4, #23
    4944:	0a58      	lsrs	r0, r3, #9
    4946:	07d2      	lsls	r2, r2, #31
    4948:	4320      	orrs	r0, r4
    494a:	4310      	orrs	r0, r2
    494c:	bc1c      	pop	{r2, r3, r4}
    494e:	4690      	mov	r8, r2
    4950:	4699      	mov	r9, r3
    4952:	46a2      	mov	sl, r4
    4954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4956:	2cff      	cmp	r4, #255	; 0xff
    4958:	d0e0      	beq.n	491c <__aeabi_fsub+0x8c>
    495a:	2180      	movs	r1, #128	; 0x80
    495c:	04c9      	lsls	r1, r1, #19
    495e:	430e      	orrs	r6, r1
    4960:	2a1b      	cmp	r2, #27
    4962:	dc7b      	bgt.n	4a5c <__aeabi_fsub+0x1cc>
    4964:	0031      	movs	r1, r6
    4966:	2020      	movs	r0, #32
    4968:	40d1      	lsrs	r1, r2
    496a:	1a82      	subs	r2, r0, r2
    496c:	4096      	lsls	r6, r2
    496e:	1e72      	subs	r2, r6, #1
    4970:	4196      	sbcs	r6, r2
    4972:	430e      	orrs	r6, r1
    4974:	1b9b      	subs	r3, r3, r6
    4976:	015a      	lsls	r2, r3, #5
    4978:	d4ba      	bmi.n	48f0 <__aeabi_fsub+0x60>
    497a:	075a      	lsls	r2, r3, #29
    497c:	d1d0      	bne.n	4920 <__aeabi_fsub+0x90>
    497e:	2201      	movs	r2, #1
    4980:	08df      	lsrs	r7, r3, #3
    4982:	402a      	ands	r2, r5
    4984:	2cff      	cmp	r4, #255	; 0xff
    4986:	d133      	bne.n	49f0 <__aeabi_fsub+0x160>
    4988:	2f00      	cmp	r7, #0
    498a:	d100      	bne.n	498e <__aeabi_fsub+0xfe>
    498c:	e0a8      	b.n	4ae0 <__aeabi_fsub+0x250>
    498e:	2380      	movs	r3, #128	; 0x80
    4990:	03db      	lsls	r3, r3, #15
    4992:	433b      	orrs	r3, r7
    4994:	025b      	lsls	r3, r3, #9
    4996:	0a5b      	lsrs	r3, r3, #9
    4998:	24ff      	movs	r4, #255	; 0xff
    499a:	e7d1      	b.n	4940 <__aeabi_fsub+0xb0>
    499c:	1a21      	subs	r1, r4, r0
    499e:	2900      	cmp	r1, #0
    49a0:	dd4c      	ble.n	4a3c <__aeabi_fsub+0x1ac>
    49a2:	2800      	cmp	r0, #0
    49a4:	d02a      	beq.n	49fc <__aeabi_fsub+0x16c>
    49a6:	2cff      	cmp	r4, #255	; 0xff
    49a8:	d0b8      	beq.n	491c <__aeabi_fsub+0x8c>
    49aa:	2080      	movs	r0, #128	; 0x80
    49ac:	04c0      	lsls	r0, r0, #19
    49ae:	4306      	orrs	r6, r0
    49b0:	291b      	cmp	r1, #27
    49b2:	dd00      	ble.n	49b6 <__aeabi_fsub+0x126>
    49b4:	e0af      	b.n	4b16 <__aeabi_fsub+0x286>
    49b6:	0030      	movs	r0, r6
    49b8:	2720      	movs	r7, #32
    49ba:	40c8      	lsrs	r0, r1
    49bc:	1a79      	subs	r1, r7, r1
    49be:	408e      	lsls	r6, r1
    49c0:	1e71      	subs	r1, r6, #1
    49c2:	418e      	sbcs	r6, r1
    49c4:	4306      	orrs	r6, r0
    49c6:	199b      	adds	r3, r3, r6
    49c8:	0159      	lsls	r1, r3, #5
    49ca:	d5d6      	bpl.n	497a <__aeabi_fsub+0xea>
    49cc:	3401      	adds	r4, #1
    49ce:	2cff      	cmp	r4, #255	; 0xff
    49d0:	d100      	bne.n	49d4 <__aeabi_fsub+0x144>
    49d2:	e085      	b.n	4ae0 <__aeabi_fsub+0x250>
    49d4:	2201      	movs	r2, #1
    49d6:	497a      	ldr	r1, [pc, #488]	; (4bc0 <__aeabi_fsub+0x330>)
    49d8:	401a      	ands	r2, r3
    49da:	085b      	lsrs	r3, r3, #1
    49dc:	400b      	ands	r3, r1
    49de:	4313      	orrs	r3, r2
    49e0:	e79c      	b.n	491c <__aeabi_fsub+0x8c>
    49e2:	2e00      	cmp	r6, #0
    49e4:	d000      	beq.n	49e8 <__aeabi_fsub+0x158>
    49e6:	e770      	b.n	48ca <__aeabi_fsub+0x3a>
    49e8:	e76b      	b.n	48c2 <__aeabi_fsub+0x32>
    49ea:	1e3b      	subs	r3, r7, #0
    49ec:	d1c5      	bne.n	497a <__aeabi_fsub+0xea>
    49ee:	2200      	movs	r2, #0
    49f0:	027b      	lsls	r3, r7, #9
    49f2:	0a5b      	lsrs	r3, r3, #9
    49f4:	b2e4      	uxtb	r4, r4
    49f6:	e7a3      	b.n	4940 <__aeabi_fsub+0xb0>
    49f8:	0014      	movs	r4, r2
    49fa:	e78f      	b.n	491c <__aeabi_fsub+0x8c>
    49fc:	2e00      	cmp	r6, #0
    49fe:	d04d      	beq.n	4a9c <__aeabi_fsub+0x20c>
    4a00:	1e48      	subs	r0, r1, #1
    4a02:	2800      	cmp	r0, #0
    4a04:	d157      	bne.n	4ab6 <__aeabi_fsub+0x226>
    4a06:	199b      	adds	r3, r3, r6
    4a08:	2401      	movs	r4, #1
    4a0a:	015a      	lsls	r2, r3, #5
    4a0c:	d5b5      	bpl.n	497a <__aeabi_fsub+0xea>
    4a0e:	2402      	movs	r4, #2
    4a10:	e7e0      	b.n	49d4 <__aeabi_fsub+0x144>
    4a12:	2a00      	cmp	r2, #0
    4a14:	d125      	bne.n	4a62 <__aeabi_fsub+0x1d2>
    4a16:	1c62      	adds	r2, r4, #1
    4a18:	b2d2      	uxtb	r2, r2
    4a1a:	2a01      	cmp	r2, #1
    4a1c:	dd72      	ble.n	4b04 <__aeabi_fsub+0x274>
    4a1e:	1b9f      	subs	r7, r3, r6
    4a20:	017a      	lsls	r2, r7, #5
    4a22:	d535      	bpl.n	4a90 <__aeabi_fsub+0x200>
    4a24:	1af7      	subs	r7, r6, r3
    4a26:	000d      	movs	r5, r1
    4a28:	e764      	b.n	48f4 <__aeabi_fsub+0x64>
    4a2a:	2201      	movs	r2, #1
    4a2c:	2300      	movs	r3, #0
    4a2e:	402a      	ands	r2, r5
    4a30:	e786      	b.n	4940 <__aeabi_fsub+0xb0>
    4a32:	003b      	movs	r3, r7
    4a34:	4a63      	ldr	r2, [pc, #396]	; (4bc4 <__aeabi_fsub+0x334>)
    4a36:	1a24      	subs	r4, r4, r0
    4a38:	4013      	ands	r3, r2
    4a3a:	e76f      	b.n	491c <__aeabi_fsub+0x8c>
    4a3c:	2900      	cmp	r1, #0
    4a3e:	d16c      	bne.n	4b1a <__aeabi_fsub+0x28a>
    4a40:	1c61      	adds	r1, r4, #1
    4a42:	b2c8      	uxtb	r0, r1
    4a44:	2801      	cmp	r0, #1
    4a46:	dd4e      	ble.n	4ae6 <__aeabi_fsub+0x256>
    4a48:	29ff      	cmp	r1, #255	; 0xff
    4a4a:	d049      	beq.n	4ae0 <__aeabi_fsub+0x250>
    4a4c:	199b      	adds	r3, r3, r6
    4a4e:	085b      	lsrs	r3, r3, #1
    4a50:	000c      	movs	r4, r1
    4a52:	e763      	b.n	491c <__aeabi_fsub+0x8c>
    4a54:	2aff      	cmp	r2, #255	; 0xff
    4a56:	d041      	beq.n	4adc <__aeabi_fsub+0x24c>
    4a58:	000a      	movs	r2, r1
    4a5a:	e781      	b.n	4960 <__aeabi_fsub+0xd0>
    4a5c:	2601      	movs	r6, #1
    4a5e:	1b9b      	subs	r3, r3, r6
    4a60:	e789      	b.n	4976 <__aeabi_fsub+0xe6>
    4a62:	2c00      	cmp	r4, #0
    4a64:	d01c      	beq.n	4aa0 <__aeabi_fsub+0x210>
    4a66:	28ff      	cmp	r0, #255	; 0xff
    4a68:	d021      	beq.n	4aae <__aeabi_fsub+0x21e>
    4a6a:	2480      	movs	r4, #128	; 0x80
    4a6c:	04e4      	lsls	r4, r4, #19
    4a6e:	4252      	negs	r2, r2
    4a70:	4323      	orrs	r3, r4
    4a72:	2a1b      	cmp	r2, #27
    4a74:	dd00      	ble.n	4a78 <__aeabi_fsub+0x1e8>
    4a76:	e096      	b.n	4ba6 <__aeabi_fsub+0x316>
    4a78:	001c      	movs	r4, r3
    4a7a:	2520      	movs	r5, #32
    4a7c:	40d4      	lsrs	r4, r2
    4a7e:	1aaa      	subs	r2, r5, r2
    4a80:	4093      	lsls	r3, r2
    4a82:	1e5a      	subs	r2, r3, #1
    4a84:	4193      	sbcs	r3, r2
    4a86:	4323      	orrs	r3, r4
    4a88:	1af3      	subs	r3, r6, r3
    4a8a:	0004      	movs	r4, r0
    4a8c:	000d      	movs	r5, r1
    4a8e:	e72d      	b.n	48ec <__aeabi_fsub+0x5c>
    4a90:	2f00      	cmp	r7, #0
    4a92:	d000      	beq.n	4a96 <__aeabi_fsub+0x206>
    4a94:	e72e      	b.n	48f4 <__aeabi_fsub+0x64>
    4a96:	2200      	movs	r2, #0
    4a98:	2400      	movs	r4, #0
    4a9a:	e7a9      	b.n	49f0 <__aeabi_fsub+0x160>
    4a9c:	000c      	movs	r4, r1
    4a9e:	e73d      	b.n	491c <__aeabi_fsub+0x8c>
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d058      	beq.n	4b56 <__aeabi_fsub+0x2c6>
    4aa4:	43d2      	mvns	r2, r2
    4aa6:	2a00      	cmp	r2, #0
    4aa8:	d0ee      	beq.n	4a88 <__aeabi_fsub+0x1f8>
    4aaa:	28ff      	cmp	r0, #255	; 0xff
    4aac:	d1e1      	bne.n	4a72 <__aeabi_fsub+0x1e2>
    4aae:	0033      	movs	r3, r6
    4ab0:	24ff      	movs	r4, #255	; 0xff
    4ab2:	000d      	movs	r5, r1
    4ab4:	e732      	b.n	491c <__aeabi_fsub+0x8c>
    4ab6:	29ff      	cmp	r1, #255	; 0xff
    4ab8:	d010      	beq.n	4adc <__aeabi_fsub+0x24c>
    4aba:	0001      	movs	r1, r0
    4abc:	e778      	b.n	49b0 <__aeabi_fsub+0x120>
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d06e      	beq.n	4ba0 <__aeabi_fsub+0x310>
    4ac2:	24ff      	movs	r4, #255	; 0xff
    4ac4:	2e00      	cmp	r6, #0
    4ac6:	d100      	bne.n	4aca <__aeabi_fsub+0x23a>
    4ac8:	e728      	b.n	491c <__aeabi_fsub+0x8c>
    4aca:	2280      	movs	r2, #128	; 0x80
    4acc:	4651      	mov	r1, sl
    4ace:	03d2      	lsls	r2, r2, #15
    4ad0:	4211      	tst	r1, r2
    4ad2:	d003      	beq.n	4adc <__aeabi_fsub+0x24c>
    4ad4:	4661      	mov	r1, ip
    4ad6:	4211      	tst	r1, r2
    4ad8:	d100      	bne.n	4adc <__aeabi_fsub+0x24c>
    4ada:	0033      	movs	r3, r6
    4adc:	24ff      	movs	r4, #255	; 0xff
    4ade:	e71d      	b.n	491c <__aeabi_fsub+0x8c>
    4ae0:	24ff      	movs	r4, #255	; 0xff
    4ae2:	2300      	movs	r3, #0
    4ae4:	e72c      	b.n	4940 <__aeabi_fsub+0xb0>
    4ae6:	2c00      	cmp	r4, #0
    4ae8:	d1e9      	bne.n	4abe <__aeabi_fsub+0x22e>
    4aea:	2b00      	cmp	r3, #0
    4aec:	d063      	beq.n	4bb6 <__aeabi_fsub+0x326>
    4aee:	2e00      	cmp	r6, #0
    4af0:	d100      	bne.n	4af4 <__aeabi_fsub+0x264>
    4af2:	e713      	b.n	491c <__aeabi_fsub+0x8c>
    4af4:	199b      	adds	r3, r3, r6
    4af6:	015a      	lsls	r2, r3, #5
    4af8:	d400      	bmi.n	4afc <__aeabi_fsub+0x26c>
    4afa:	e73e      	b.n	497a <__aeabi_fsub+0xea>
    4afc:	4a31      	ldr	r2, [pc, #196]	; (4bc4 <__aeabi_fsub+0x334>)
    4afe:	000c      	movs	r4, r1
    4b00:	4013      	ands	r3, r2
    4b02:	e70b      	b.n	491c <__aeabi_fsub+0x8c>
    4b04:	2c00      	cmp	r4, #0
    4b06:	d11e      	bne.n	4b46 <__aeabi_fsub+0x2b6>
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d12f      	bne.n	4b6c <__aeabi_fsub+0x2dc>
    4b0c:	2e00      	cmp	r6, #0
    4b0e:	d04f      	beq.n	4bb0 <__aeabi_fsub+0x320>
    4b10:	0033      	movs	r3, r6
    4b12:	000d      	movs	r5, r1
    4b14:	e702      	b.n	491c <__aeabi_fsub+0x8c>
    4b16:	2601      	movs	r6, #1
    4b18:	e755      	b.n	49c6 <__aeabi_fsub+0x136>
    4b1a:	2c00      	cmp	r4, #0
    4b1c:	d11f      	bne.n	4b5e <__aeabi_fsub+0x2ce>
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d043      	beq.n	4baa <__aeabi_fsub+0x31a>
    4b22:	43c9      	mvns	r1, r1
    4b24:	2900      	cmp	r1, #0
    4b26:	d00b      	beq.n	4b40 <__aeabi_fsub+0x2b0>
    4b28:	28ff      	cmp	r0, #255	; 0xff
    4b2a:	d039      	beq.n	4ba0 <__aeabi_fsub+0x310>
    4b2c:	291b      	cmp	r1, #27
    4b2e:	dc44      	bgt.n	4bba <__aeabi_fsub+0x32a>
    4b30:	001c      	movs	r4, r3
    4b32:	2720      	movs	r7, #32
    4b34:	40cc      	lsrs	r4, r1
    4b36:	1a79      	subs	r1, r7, r1
    4b38:	408b      	lsls	r3, r1
    4b3a:	1e59      	subs	r1, r3, #1
    4b3c:	418b      	sbcs	r3, r1
    4b3e:	4323      	orrs	r3, r4
    4b40:	199b      	adds	r3, r3, r6
    4b42:	0004      	movs	r4, r0
    4b44:	e740      	b.n	49c8 <__aeabi_fsub+0x138>
    4b46:	2b00      	cmp	r3, #0
    4b48:	d11a      	bne.n	4b80 <__aeabi_fsub+0x2f0>
    4b4a:	2e00      	cmp	r6, #0
    4b4c:	d124      	bne.n	4b98 <__aeabi_fsub+0x308>
    4b4e:	2780      	movs	r7, #128	; 0x80
    4b50:	2200      	movs	r2, #0
    4b52:	03ff      	lsls	r7, r7, #15
    4b54:	e71b      	b.n	498e <__aeabi_fsub+0xfe>
    4b56:	0033      	movs	r3, r6
    4b58:	0004      	movs	r4, r0
    4b5a:	000d      	movs	r5, r1
    4b5c:	e6de      	b.n	491c <__aeabi_fsub+0x8c>
    4b5e:	28ff      	cmp	r0, #255	; 0xff
    4b60:	d01e      	beq.n	4ba0 <__aeabi_fsub+0x310>
    4b62:	2480      	movs	r4, #128	; 0x80
    4b64:	04e4      	lsls	r4, r4, #19
    4b66:	4249      	negs	r1, r1
    4b68:	4323      	orrs	r3, r4
    4b6a:	e7df      	b.n	4b2c <__aeabi_fsub+0x29c>
    4b6c:	2e00      	cmp	r6, #0
    4b6e:	d100      	bne.n	4b72 <__aeabi_fsub+0x2e2>
    4b70:	e6d4      	b.n	491c <__aeabi_fsub+0x8c>
    4b72:	1b9f      	subs	r7, r3, r6
    4b74:	017a      	lsls	r2, r7, #5
    4b76:	d400      	bmi.n	4b7a <__aeabi_fsub+0x2ea>
    4b78:	e737      	b.n	49ea <__aeabi_fsub+0x15a>
    4b7a:	1af3      	subs	r3, r6, r3
    4b7c:	000d      	movs	r5, r1
    4b7e:	e6cd      	b.n	491c <__aeabi_fsub+0x8c>
    4b80:	24ff      	movs	r4, #255	; 0xff
    4b82:	2e00      	cmp	r6, #0
    4b84:	d100      	bne.n	4b88 <__aeabi_fsub+0x2f8>
    4b86:	e6c9      	b.n	491c <__aeabi_fsub+0x8c>
    4b88:	2280      	movs	r2, #128	; 0x80
    4b8a:	4650      	mov	r0, sl
    4b8c:	03d2      	lsls	r2, r2, #15
    4b8e:	4210      	tst	r0, r2
    4b90:	d0a4      	beq.n	4adc <__aeabi_fsub+0x24c>
    4b92:	4660      	mov	r0, ip
    4b94:	4210      	tst	r0, r2
    4b96:	d1a1      	bne.n	4adc <__aeabi_fsub+0x24c>
    4b98:	0033      	movs	r3, r6
    4b9a:	000d      	movs	r5, r1
    4b9c:	24ff      	movs	r4, #255	; 0xff
    4b9e:	e6bd      	b.n	491c <__aeabi_fsub+0x8c>
    4ba0:	0033      	movs	r3, r6
    4ba2:	24ff      	movs	r4, #255	; 0xff
    4ba4:	e6ba      	b.n	491c <__aeabi_fsub+0x8c>
    4ba6:	2301      	movs	r3, #1
    4ba8:	e76e      	b.n	4a88 <__aeabi_fsub+0x1f8>
    4baa:	0033      	movs	r3, r6
    4bac:	0004      	movs	r4, r0
    4bae:	e6b5      	b.n	491c <__aeabi_fsub+0x8c>
    4bb0:	2700      	movs	r7, #0
    4bb2:	2200      	movs	r2, #0
    4bb4:	e71c      	b.n	49f0 <__aeabi_fsub+0x160>
    4bb6:	0033      	movs	r3, r6
    4bb8:	e6b0      	b.n	491c <__aeabi_fsub+0x8c>
    4bba:	2301      	movs	r3, #1
    4bbc:	e7c0      	b.n	4b40 <__aeabi_fsub+0x2b0>
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	7dffffff 	.word	0x7dffffff
    4bc4:	fbffffff 	.word	0xfbffffff

00004bc8 <__aeabi_f2iz>:
    4bc8:	0241      	lsls	r1, r0, #9
    4bca:	0043      	lsls	r3, r0, #1
    4bcc:	0fc2      	lsrs	r2, r0, #31
    4bce:	0a49      	lsrs	r1, r1, #9
    4bd0:	0e1b      	lsrs	r3, r3, #24
    4bd2:	2000      	movs	r0, #0
    4bd4:	2b7e      	cmp	r3, #126	; 0x7e
    4bd6:	dd0d      	ble.n	4bf4 <__aeabi_f2iz+0x2c>
    4bd8:	2b9d      	cmp	r3, #157	; 0x9d
    4bda:	dc0c      	bgt.n	4bf6 <__aeabi_f2iz+0x2e>
    4bdc:	2080      	movs	r0, #128	; 0x80
    4bde:	0400      	lsls	r0, r0, #16
    4be0:	4301      	orrs	r1, r0
    4be2:	2b95      	cmp	r3, #149	; 0x95
    4be4:	dc0a      	bgt.n	4bfc <__aeabi_f2iz+0x34>
    4be6:	2096      	movs	r0, #150	; 0x96
    4be8:	1ac3      	subs	r3, r0, r3
    4bea:	40d9      	lsrs	r1, r3
    4bec:	4248      	negs	r0, r1
    4bee:	2a00      	cmp	r2, #0
    4bf0:	d100      	bne.n	4bf4 <__aeabi_f2iz+0x2c>
    4bf2:	0008      	movs	r0, r1
    4bf4:	4770      	bx	lr
    4bf6:	4b03      	ldr	r3, [pc, #12]	; (4c04 <__aeabi_f2iz+0x3c>)
    4bf8:	18d0      	adds	r0, r2, r3
    4bfa:	e7fb      	b.n	4bf4 <__aeabi_f2iz+0x2c>
    4bfc:	3b96      	subs	r3, #150	; 0x96
    4bfe:	4099      	lsls	r1, r3
    4c00:	e7f4      	b.n	4bec <__aeabi_f2iz+0x24>
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	7fffffff 	.word	0x7fffffff

00004c08 <__aeabi_i2f>:
    4c08:	b570      	push	{r4, r5, r6, lr}
    4c0a:	2800      	cmp	r0, #0
    4c0c:	d030      	beq.n	4c70 <__aeabi_i2f+0x68>
    4c0e:	17c3      	asrs	r3, r0, #31
    4c10:	18c4      	adds	r4, r0, r3
    4c12:	405c      	eors	r4, r3
    4c14:	0fc5      	lsrs	r5, r0, #31
    4c16:	0020      	movs	r0, r4
    4c18:	f001 feaa 	bl	6970 <__clzsi2>
    4c1c:	239e      	movs	r3, #158	; 0x9e
    4c1e:	1a1b      	subs	r3, r3, r0
    4c20:	2b96      	cmp	r3, #150	; 0x96
    4c22:	dc0d      	bgt.n	4c40 <__aeabi_i2f+0x38>
    4c24:	2296      	movs	r2, #150	; 0x96
    4c26:	1ad2      	subs	r2, r2, r3
    4c28:	4094      	lsls	r4, r2
    4c2a:	002a      	movs	r2, r5
    4c2c:	0264      	lsls	r4, r4, #9
    4c2e:	0a64      	lsrs	r4, r4, #9
    4c30:	b2db      	uxtb	r3, r3
    4c32:	0264      	lsls	r4, r4, #9
    4c34:	05db      	lsls	r3, r3, #23
    4c36:	0a60      	lsrs	r0, r4, #9
    4c38:	07d2      	lsls	r2, r2, #31
    4c3a:	4318      	orrs	r0, r3
    4c3c:	4310      	orrs	r0, r2
    4c3e:	bd70      	pop	{r4, r5, r6, pc}
    4c40:	2b99      	cmp	r3, #153	; 0x99
    4c42:	dc19      	bgt.n	4c78 <__aeabi_i2f+0x70>
    4c44:	2299      	movs	r2, #153	; 0x99
    4c46:	1ad2      	subs	r2, r2, r3
    4c48:	2a00      	cmp	r2, #0
    4c4a:	dd29      	ble.n	4ca0 <__aeabi_i2f+0x98>
    4c4c:	4094      	lsls	r4, r2
    4c4e:	0022      	movs	r2, r4
    4c50:	4c14      	ldr	r4, [pc, #80]	; (4ca4 <__aeabi_i2f+0x9c>)
    4c52:	4014      	ands	r4, r2
    4c54:	0751      	lsls	r1, r2, #29
    4c56:	d004      	beq.n	4c62 <__aeabi_i2f+0x5a>
    4c58:	210f      	movs	r1, #15
    4c5a:	400a      	ands	r2, r1
    4c5c:	2a04      	cmp	r2, #4
    4c5e:	d000      	beq.n	4c62 <__aeabi_i2f+0x5a>
    4c60:	3404      	adds	r4, #4
    4c62:	0162      	lsls	r2, r4, #5
    4c64:	d413      	bmi.n	4c8e <__aeabi_i2f+0x86>
    4c66:	01a4      	lsls	r4, r4, #6
    4c68:	0a64      	lsrs	r4, r4, #9
    4c6a:	b2db      	uxtb	r3, r3
    4c6c:	002a      	movs	r2, r5
    4c6e:	e7e0      	b.n	4c32 <__aeabi_i2f+0x2a>
    4c70:	2200      	movs	r2, #0
    4c72:	2300      	movs	r3, #0
    4c74:	2400      	movs	r4, #0
    4c76:	e7dc      	b.n	4c32 <__aeabi_i2f+0x2a>
    4c78:	2205      	movs	r2, #5
    4c7a:	0021      	movs	r1, r4
    4c7c:	1a12      	subs	r2, r2, r0
    4c7e:	40d1      	lsrs	r1, r2
    4c80:	22b9      	movs	r2, #185	; 0xb9
    4c82:	1ad2      	subs	r2, r2, r3
    4c84:	4094      	lsls	r4, r2
    4c86:	1e62      	subs	r2, r4, #1
    4c88:	4194      	sbcs	r4, r2
    4c8a:	430c      	orrs	r4, r1
    4c8c:	e7da      	b.n	4c44 <__aeabi_i2f+0x3c>
    4c8e:	4b05      	ldr	r3, [pc, #20]	; (4ca4 <__aeabi_i2f+0x9c>)
    4c90:	002a      	movs	r2, r5
    4c92:	401c      	ands	r4, r3
    4c94:	239f      	movs	r3, #159	; 0x9f
    4c96:	01a4      	lsls	r4, r4, #6
    4c98:	1a1b      	subs	r3, r3, r0
    4c9a:	0a64      	lsrs	r4, r4, #9
    4c9c:	b2db      	uxtb	r3, r3
    4c9e:	e7c8      	b.n	4c32 <__aeabi_i2f+0x2a>
    4ca0:	0022      	movs	r2, r4
    4ca2:	e7d5      	b.n	4c50 <__aeabi_i2f+0x48>
    4ca4:	fbffffff 	.word	0xfbffffff

00004ca8 <__aeabi_dadd>:
    4ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4caa:	4645      	mov	r5, r8
    4cac:	46de      	mov	lr, fp
    4cae:	4657      	mov	r7, sl
    4cb0:	464e      	mov	r6, r9
    4cb2:	030c      	lsls	r4, r1, #12
    4cb4:	b5e0      	push	{r5, r6, r7, lr}
    4cb6:	004e      	lsls	r6, r1, #1
    4cb8:	0fc9      	lsrs	r1, r1, #31
    4cba:	4688      	mov	r8, r1
    4cbc:	000d      	movs	r5, r1
    4cbe:	0a61      	lsrs	r1, r4, #9
    4cc0:	0f44      	lsrs	r4, r0, #29
    4cc2:	430c      	orrs	r4, r1
    4cc4:	00c7      	lsls	r7, r0, #3
    4cc6:	0319      	lsls	r1, r3, #12
    4cc8:	0058      	lsls	r0, r3, #1
    4cca:	0fdb      	lsrs	r3, r3, #31
    4ccc:	469b      	mov	fp, r3
    4cce:	0a4b      	lsrs	r3, r1, #9
    4cd0:	0f51      	lsrs	r1, r2, #29
    4cd2:	430b      	orrs	r3, r1
    4cd4:	0d76      	lsrs	r6, r6, #21
    4cd6:	0d40      	lsrs	r0, r0, #21
    4cd8:	0019      	movs	r1, r3
    4cda:	00d2      	lsls	r2, r2, #3
    4cdc:	45d8      	cmp	r8, fp
    4cde:	d100      	bne.n	4ce2 <__aeabi_dadd+0x3a>
    4ce0:	e0ae      	b.n	4e40 <__aeabi_dadd+0x198>
    4ce2:	1a35      	subs	r5, r6, r0
    4ce4:	2d00      	cmp	r5, #0
    4ce6:	dc00      	bgt.n	4cea <__aeabi_dadd+0x42>
    4ce8:	e0f6      	b.n	4ed8 <__aeabi_dadd+0x230>
    4cea:	2800      	cmp	r0, #0
    4cec:	d10f      	bne.n	4d0e <__aeabi_dadd+0x66>
    4cee:	4313      	orrs	r3, r2
    4cf0:	d100      	bne.n	4cf4 <__aeabi_dadd+0x4c>
    4cf2:	e0db      	b.n	4eac <__aeabi_dadd+0x204>
    4cf4:	1e6b      	subs	r3, r5, #1
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d000      	beq.n	4cfc <__aeabi_dadd+0x54>
    4cfa:	e137      	b.n	4f6c <__aeabi_dadd+0x2c4>
    4cfc:	1aba      	subs	r2, r7, r2
    4cfe:	4297      	cmp	r7, r2
    4d00:	41bf      	sbcs	r7, r7
    4d02:	1a64      	subs	r4, r4, r1
    4d04:	427f      	negs	r7, r7
    4d06:	1be4      	subs	r4, r4, r7
    4d08:	2601      	movs	r6, #1
    4d0a:	0017      	movs	r7, r2
    4d0c:	e024      	b.n	4d58 <__aeabi_dadd+0xb0>
    4d0e:	4bc6      	ldr	r3, [pc, #792]	; (5028 <__aeabi_dadd+0x380>)
    4d10:	429e      	cmp	r6, r3
    4d12:	d04d      	beq.n	4db0 <__aeabi_dadd+0x108>
    4d14:	2380      	movs	r3, #128	; 0x80
    4d16:	041b      	lsls	r3, r3, #16
    4d18:	4319      	orrs	r1, r3
    4d1a:	2d38      	cmp	r5, #56	; 0x38
    4d1c:	dd00      	ble.n	4d20 <__aeabi_dadd+0x78>
    4d1e:	e107      	b.n	4f30 <__aeabi_dadd+0x288>
    4d20:	2d1f      	cmp	r5, #31
    4d22:	dd00      	ble.n	4d26 <__aeabi_dadd+0x7e>
    4d24:	e138      	b.n	4f98 <__aeabi_dadd+0x2f0>
    4d26:	2020      	movs	r0, #32
    4d28:	1b43      	subs	r3, r0, r5
    4d2a:	469a      	mov	sl, r3
    4d2c:	000b      	movs	r3, r1
    4d2e:	4650      	mov	r0, sl
    4d30:	4083      	lsls	r3, r0
    4d32:	4699      	mov	r9, r3
    4d34:	0013      	movs	r3, r2
    4d36:	4648      	mov	r0, r9
    4d38:	40eb      	lsrs	r3, r5
    4d3a:	4318      	orrs	r0, r3
    4d3c:	0003      	movs	r3, r0
    4d3e:	4650      	mov	r0, sl
    4d40:	4082      	lsls	r2, r0
    4d42:	1e50      	subs	r0, r2, #1
    4d44:	4182      	sbcs	r2, r0
    4d46:	40e9      	lsrs	r1, r5
    4d48:	431a      	orrs	r2, r3
    4d4a:	1aba      	subs	r2, r7, r2
    4d4c:	1a61      	subs	r1, r4, r1
    4d4e:	4297      	cmp	r7, r2
    4d50:	41a4      	sbcs	r4, r4
    4d52:	0017      	movs	r7, r2
    4d54:	4264      	negs	r4, r4
    4d56:	1b0c      	subs	r4, r1, r4
    4d58:	0223      	lsls	r3, r4, #8
    4d5a:	d562      	bpl.n	4e22 <__aeabi_dadd+0x17a>
    4d5c:	0264      	lsls	r4, r4, #9
    4d5e:	0a65      	lsrs	r5, r4, #9
    4d60:	2d00      	cmp	r5, #0
    4d62:	d100      	bne.n	4d66 <__aeabi_dadd+0xbe>
    4d64:	e0df      	b.n	4f26 <__aeabi_dadd+0x27e>
    4d66:	0028      	movs	r0, r5
    4d68:	f001 fe02 	bl	6970 <__clzsi2>
    4d6c:	0003      	movs	r3, r0
    4d6e:	3b08      	subs	r3, #8
    4d70:	2b1f      	cmp	r3, #31
    4d72:	dd00      	ble.n	4d76 <__aeabi_dadd+0xce>
    4d74:	e0d2      	b.n	4f1c <__aeabi_dadd+0x274>
    4d76:	2220      	movs	r2, #32
    4d78:	003c      	movs	r4, r7
    4d7a:	1ad2      	subs	r2, r2, r3
    4d7c:	409d      	lsls	r5, r3
    4d7e:	40d4      	lsrs	r4, r2
    4d80:	409f      	lsls	r7, r3
    4d82:	4325      	orrs	r5, r4
    4d84:	429e      	cmp	r6, r3
    4d86:	dd00      	ble.n	4d8a <__aeabi_dadd+0xe2>
    4d88:	e0c4      	b.n	4f14 <__aeabi_dadd+0x26c>
    4d8a:	1b9e      	subs	r6, r3, r6
    4d8c:	1c73      	adds	r3, r6, #1
    4d8e:	2b1f      	cmp	r3, #31
    4d90:	dd00      	ble.n	4d94 <__aeabi_dadd+0xec>
    4d92:	e0f1      	b.n	4f78 <__aeabi_dadd+0x2d0>
    4d94:	2220      	movs	r2, #32
    4d96:	0038      	movs	r0, r7
    4d98:	0029      	movs	r1, r5
    4d9a:	1ad2      	subs	r2, r2, r3
    4d9c:	40d8      	lsrs	r0, r3
    4d9e:	4091      	lsls	r1, r2
    4da0:	4097      	lsls	r7, r2
    4da2:	002c      	movs	r4, r5
    4da4:	4301      	orrs	r1, r0
    4da6:	1e78      	subs	r0, r7, #1
    4da8:	4187      	sbcs	r7, r0
    4daa:	40dc      	lsrs	r4, r3
    4dac:	2600      	movs	r6, #0
    4dae:	430f      	orrs	r7, r1
    4db0:	077b      	lsls	r3, r7, #29
    4db2:	d009      	beq.n	4dc8 <__aeabi_dadd+0x120>
    4db4:	230f      	movs	r3, #15
    4db6:	403b      	ands	r3, r7
    4db8:	2b04      	cmp	r3, #4
    4dba:	d005      	beq.n	4dc8 <__aeabi_dadd+0x120>
    4dbc:	1d3b      	adds	r3, r7, #4
    4dbe:	42bb      	cmp	r3, r7
    4dc0:	41bf      	sbcs	r7, r7
    4dc2:	427f      	negs	r7, r7
    4dc4:	19e4      	adds	r4, r4, r7
    4dc6:	001f      	movs	r7, r3
    4dc8:	0223      	lsls	r3, r4, #8
    4dca:	d52c      	bpl.n	4e26 <__aeabi_dadd+0x17e>
    4dcc:	4b96      	ldr	r3, [pc, #600]	; (5028 <__aeabi_dadd+0x380>)
    4dce:	3601      	adds	r6, #1
    4dd0:	429e      	cmp	r6, r3
    4dd2:	d100      	bne.n	4dd6 <__aeabi_dadd+0x12e>
    4dd4:	e09a      	b.n	4f0c <__aeabi_dadd+0x264>
    4dd6:	4645      	mov	r5, r8
    4dd8:	4b94      	ldr	r3, [pc, #592]	; (502c <__aeabi_dadd+0x384>)
    4dda:	08ff      	lsrs	r7, r7, #3
    4ddc:	401c      	ands	r4, r3
    4dde:	0760      	lsls	r0, r4, #29
    4de0:	0576      	lsls	r6, r6, #21
    4de2:	0264      	lsls	r4, r4, #9
    4de4:	4307      	orrs	r7, r0
    4de6:	0b24      	lsrs	r4, r4, #12
    4de8:	0d76      	lsrs	r6, r6, #21
    4dea:	2100      	movs	r1, #0
    4dec:	0324      	lsls	r4, r4, #12
    4dee:	0b23      	lsrs	r3, r4, #12
    4df0:	0d0c      	lsrs	r4, r1, #20
    4df2:	4a8f      	ldr	r2, [pc, #572]	; (5030 <__aeabi_dadd+0x388>)
    4df4:	0524      	lsls	r4, r4, #20
    4df6:	431c      	orrs	r4, r3
    4df8:	4014      	ands	r4, r2
    4dfa:	0533      	lsls	r3, r6, #20
    4dfc:	4323      	orrs	r3, r4
    4dfe:	005b      	lsls	r3, r3, #1
    4e00:	07ed      	lsls	r5, r5, #31
    4e02:	085b      	lsrs	r3, r3, #1
    4e04:	432b      	orrs	r3, r5
    4e06:	0038      	movs	r0, r7
    4e08:	0019      	movs	r1, r3
    4e0a:	bc3c      	pop	{r2, r3, r4, r5}
    4e0c:	4690      	mov	r8, r2
    4e0e:	4699      	mov	r9, r3
    4e10:	46a2      	mov	sl, r4
    4e12:	46ab      	mov	fp, r5
    4e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e16:	4664      	mov	r4, ip
    4e18:	4304      	orrs	r4, r0
    4e1a:	d100      	bne.n	4e1e <__aeabi_dadd+0x176>
    4e1c:	e211      	b.n	5242 <__aeabi_dadd+0x59a>
    4e1e:	0004      	movs	r4, r0
    4e20:	4667      	mov	r7, ip
    4e22:	077b      	lsls	r3, r7, #29
    4e24:	d1c6      	bne.n	4db4 <__aeabi_dadd+0x10c>
    4e26:	4645      	mov	r5, r8
    4e28:	0760      	lsls	r0, r4, #29
    4e2a:	08ff      	lsrs	r7, r7, #3
    4e2c:	4307      	orrs	r7, r0
    4e2e:	08e4      	lsrs	r4, r4, #3
    4e30:	4b7d      	ldr	r3, [pc, #500]	; (5028 <__aeabi_dadd+0x380>)
    4e32:	429e      	cmp	r6, r3
    4e34:	d030      	beq.n	4e98 <__aeabi_dadd+0x1f0>
    4e36:	0324      	lsls	r4, r4, #12
    4e38:	0576      	lsls	r6, r6, #21
    4e3a:	0b24      	lsrs	r4, r4, #12
    4e3c:	0d76      	lsrs	r6, r6, #21
    4e3e:	e7d4      	b.n	4dea <__aeabi_dadd+0x142>
    4e40:	1a33      	subs	r3, r6, r0
    4e42:	469a      	mov	sl, r3
    4e44:	2b00      	cmp	r3, #0
    4e46:	dd78      	ble.n	4f3a <__aeabi_dadd+0x292>
    4e48:	2800      	cmp	r0, #0
    4e4a:	d031      	beq.n	4eb0 <__aeabi_dadd+0x208>
    4e4c:	4876      	ldr	r0, [pc, #472]	; (5028 <__aeabi_dadd+0x380>)
    4e4e:	4286      	cmp	r6, r0
    4e50:	d0ae      	beq.n	4db0 <__aeabi_dadd+0x108>
    4e52:	2080      	movs	r0, #128	; 0x80
    4e54:	0400      	lsls	r0, r0, #16
    4e56:	4301      	orrs	r1, r0
    4e58:	4653      	mov	r3, sl
    4e5a:	2b38      	cmp	r3, #56	; 0x38
    4e5c:	dc00      	bgt.n	4e60 <__aeabi_dadd+0x1b8>
    4e5e:	e0e9      	b.n	5034 <__aeabi_dadd+0x38c>
    4e60:	430a      	orrs	r2, r1
    4e62:	1e51      	subs	r1, r2, #1
    4e64:	418a      	sbcs	r2, r1
    4e66:	2100      	movs	r1, #0
    4e68:	19d2      	adds	r2, r2, r7
    4e6a:	42ba      	cmp	r2, r7
    4e6c:	41bf      	sbcs	r7, r7
    4e6e:	1909      	adds	r1, r1, r4
    4e70:	427c      	negs	r4, r7
    4e72:	0017      	movs	r7, r2
    4e74:	190c      	adds	r4, r1, r4
    4e76:	0223      	lsls	r3, r4, #8
    4e78:	d5d3      	bpl.n	4e22 <__aeabi_dadd+0x17a>
    4e7a:	4b6b      	ldr	r3, [pc, #428]	; (5028 <__aeabi_dadd+0x380>)
    4e7c:	3601      	adds	r6, #1
    4e7e:	429e      	cmp	r6, r3
    4e80:	d100      	bne.n	4e84 <__aeabi_dadd+0x1dc>
    4e82:	e13a      	b.n	50fa <__aeabi_dadd+0x452>
    4e84:	2001      	movs	r0, #1
    4e86:	4b69      	ldr	r3, [pc, #420]	; (502c <__aeabi_dadd+0x384>)
    4e88:	401c      	ands	r4, r3
    4e8a:	087b      	lsrs	r3, r7, #1
    4e8c:	4007      	ands	r7, r0
    4e8e:	431f      	orrs	r7, r3
    4e90:	07e0      	lsls	r0, r4, #31
    4e92:	4307      	orrs	r7, r0
    4e94:	0864      	lsrs	r4, r4, #1
    4e96:	e78b      	b.n	4db0 <__aeabi_dadd+0x108>
    4e98:	0023      	movs	r3, r4
    4e9a:	433b      	orrs	r3, r7
    4e9c:	d100      	bne.n	4ea0 <__aeabi_dadd+0x1f8>
    4e9e:	e1cb      	b.n	5238 <__aeabi_dadd+0x590>
    4ea0:	2280      	movs	r2, #128	; 0x80
    4ea2:	0312      	lsls	r2, r2, #12
    4ea4:	4314      	orrs	r4, r2
    4ea6:	0324      	lsls	r4, r4, #12
    4ea8:	0b24      	lsrs	r4, r4, #12
    4eaa:	e79e      	b.n	4dea <__aeabi_dadd+0x142>
    4eac:	002e      	movs	r6, r5
    4eae:	e77f      	b.n	4db0 <__aeabi_dadd+0x108>
    4eb0:	0008      	movs	r0, r1
    4eb2:	4310      	orrs	r0, r2
    4eb4:	d100      	bne.n	4eb8 <__aeabi_dadd+0x210>
    4eb6:	e0b4      	b.n	5022 <__aeabi_dadd+0x37a>
    4eb8:	1e58      	subs	r0, r3, #1
    4eba:	2800      	cmp	r0, #0
    4ebc:	d000      	beq.n	4ec0 <__aeabi_dadd+0x218>
    4ebe:	e0de      	b.n	507e <__aeabi_dadd+0x3d6>
    4ec0:	18ba      	adds	r2, r7, r2
    4ec2:	42ba      	cmp	r2, r7
    4ec4:	419b      	sbcs	r3, r3
    4ec6:	1864      	adds	r4, r4, r1
    4ec8:	425b      	negs	r3, r3
    4eca:	18e4      	adds	r4, r4, r3
    4ecc:	0017      	movs	r7, r2
    4ece:	2601      	movs	r6, #1
    4ed0:	0223      	lsls	r3, r4, #8
    4ed2:	d5a6      	bpl.n	4e22 <__aeabi_dadd+0x17a>
    4ed4:	2602      	movs	r6, #2
    4ed6:	e7d5      	b.n	4e84 <__aeabi_dadd+0x1dc>
    4ed8:	2d00      	cmp	r5, #0
    4eda:	d16e      	bne.n	4fba <__aeabi_dadd+0x312>
    4edc:	1c70      	adds	r0, r6, #1
    4ede:	0540      	lsls	r0, r0, #21
    4ee0:	0d40      	lsrs	r0, r0, #21
    4ee2:	2801      	cmp	r0, #1
    4ee4:	dc00      	bgt.n	4ee8 <__aeabi_dadd+0x240>
    4ee6:	e0f9      	b.n	50dc <__aeabi_dadd+0x434>
    4ee8:	1ab8      	subs	r0, r7, r2
    4eea:	4684      	mov	ip, r0
    4eec:	4287      	cmp	r7, r0
    4eee:	4180      	sbcs	r0, r0
    4ef0:	1ae5      	subs	r5, r4, r3
    4ef2:	4240      	negs	r0, r0
    4ef4:	1a2d      	subs	r5, r5, r0
    4ef6:	0228      	lsls	r0, r5, #8
    4ef8:	d400      	bmi.n	4efc <__aeabi_dadd+0x254>
    4efa:	e089      	b.n	5010 <__aeabi_dadd+0x368>
    4efc:	1bd7      	subs	r7, r2, r7
    4efe:	42ba      	cmp	r2, r7
    4f00:	4192      	sbcs	r2, r2
    4f02:	1b1c      	subs	r4, r3, r4
    4f04:	4252      	negs	r2, r2
    4f06:	1aa5      	subs	r5, r4, r2
    4f08:	46d8      	mov	r8, fp
    4f0a:	e729      	b.n	4d60 <__aeabi_dadd+0xb8>
    4f0c:	4645      	mov	r5, r8
    4f0e:	2400      	movs	r4, #0
    4f10:	2700      	movs	r7, #0
    4f12:	e76a      	b.n	4dea <__aeabi_dadd+0x142>
    4f14:	4c45      	ldr	r4, [pc, #276]	; (502c <__aeabi_dadd+0x384>)
    4f16:	1af6      	subs	r6, r6, r3
    4f18:	402c      	ands	r4, r5
    4f1a:	e749      	b.n	4db0 <__aeabi_dadd+0x108>
    4f1c:	003d      	movs	r5, r7
    4f1e:	3828      	subs	r0, #40	; 0x28
    4f20:	4085      	lsls	r5, r0
    4f22:	2700      	movs	r7, #0
    4f24:	e72e      	b.n	4d84 <__aeabi_dadd+0xdc>
    4f26:	0038      	movs	r0, r7
    4f28:	f001 fd22 	bl	6970 <__clzsi2>
    4f2c:	3020      	adds	r0, #32
    4f2e:	e71d      	b.n	4d6c <__aeabi_dadd+0xc4>
    4f30:	430a      	orrs	r2, r1
    4f32:	1e51      	subs	r1, r2, #1
    4f34:	418a      	sbcs	r2, r1
    4f36:	2100      	movs	r1, #0
    4f38:	e707      	b.n	4d4a <__aeabi_dadd+0xa2>
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d000      	beq.n	4f40 <__aeabi_dadd+0x298>
    4f3e:	e0f3      	b.n	5128 <__aeabi_dadd+0x480>
    4f40:	1c70      	adds	r0, r6, #1
    4f42:	0543      	lsls	r3, r0, #21
    4f44:	0d5b      	lsrs	r3, r3, #21
    4f46:	2b01      	cmp	r3, #1
    4f48:	dc00      	bgt.n	4f4c <__aeabi_dadd+0x2a4>
    4f4a:	e0ad      	b.n	50a8 <__aeabi_dadd+0x400>
    4f4c:	4b36      	ldr	r3, [pc, #216]	; (5028 <__aeabi_dadd+0x380>)
    4f4e:	4298      	cmp	r0, r3
    4f50:	d100      	bne.n	4f54 <__aeabi_dadd+0x2ac>
    4f52:	e0d1      	b.n	50f8 <__aeabi_dadd+0x450>
    4f54:	18ba      	adds	r2, r7, r2
    4f56:	42ba      	cmp	r2, r7
    4f58:	41bf      	sbcs	r7, r7
    4f5a:	1864      	adds	r4, r4, r1
    4f5c:	427f      	negs	r7, r7
    4f5e:	19e4      	adds	r4, r4, r7
    4f60:	07e7      	lsls	r7, r4, #31
    4f62:	0852      	lsrs	r2, r2, #1
    4f64:	4317      	orrs	r7, r2
    4f66:	0864      	lsrs	r4, r4, #1
    4f68:	0006      	movs	r6, r0
    4f6a:	e721      	b.n	4db0 <__aeabi_dadd+0x108>
    4f6c:	482e      	ldr	r0, [pc, #184]	; (5028 <__aeabi_dadd+0x380>)
    4f6e:	4285      	cmp	r5, r0
    4f70:	d100      	bne.n	4f74 <__aeabi_dadd+0x2cc>
    4f72:	e093      	b.n	509c <__aeabi_dadd+0x3f4>
    4f74:	001d      	movs	r5, r3
    4f76:	e6d0      	b.n	4d1a <__aeabi_dadd+0x72>
    4f78:	0029      	movs	r1, r5
    4f7a:	3e1f      	subs	r6, #31
    4f7c:	40f1      	lsrs	r1, r6
    4f7e:	2b20      	cmp	r3, #32
    4f80:	d100      	bne.n	4f84 <__aeabi_dadd+0x2dc>
    4f82:	e08d      	b.n	50a0 <__aeabi_dadd+0x3f8>
    4f84:	2240      	movs	r2, #64	; 0x40
    4f86:	1ad3      	subs	r3, r2, r3
    4f88:	409d      	lsls	r5, r3
    4f8a:	432f      	orrs	r7, r5
    4f8c:	1e7d      	subs	r5, r7, #1
    4f8e:	41af      	sbcs	r7, r5
    4f90:	2400      	movs	r4, #0
    4f92:	430f      	orrs	r7, r1
    4f94:	2600      	movs	r6, #0
    4f96:	e744      	b.n	4e22 <__aeabi_dadd+0x17a>
    4f98:	002b      	movs	r3, r5
    4f9a:	0008      	movs	r0, r1
    4f9c:	3b20      	subs	r3, #32
    4f9e:	40d8      	lsrs	r0, r3
    4fa0:	0003      	movs	r3, r0
    4fa2:	2d20      	cmp	r5, #32
    4fa4:	d100      	bne.n	4fa8 <__aeabi_dadd+0x300>
    4fa6:	e07d      	b.n	50a4 <__aeabi_dadd+0x3fc>
    4fa8:	2040      	movs	r0, #64	; 0x40
    4faa:	1b45      	subs	r5, r0, r5
    4fac:	40a9      	lsls	r1, r5
    4fae:	430a      	orrs	r2, r1
    4fb0:	1e51      	subs	r1, r2, #1
    4fb2:	418a      	sbcs	r2, r1
    4fb4:	2100      	movs	r1, #0
    4fb6:	431a      	orrs	r2, r3
    4fb8:	e6c7      	b.n	4d4a <__aeabi_dadd+0xa2>
    4fba:	2e00      	cmp	r6, #0
    4fbc:	d050      	beq.n	5060 <__aeabi_dadd+0x3b8>
    4fbe:	4e1a      	ldr	r6, [pc, #104]	; (5028 <__aeabi_dadd+0x380>)
    4fc0:	42b0      	cmp	r0, r6
    4fc2:	d057      	beq.n	5074 <__aeabi_dadd+0x3cc>
    4fc4:	2680      	movs	r6, #128	; 0x80
    4fc6:	426b      	negs	r3, r5
    4fc8:	4699      	mov	r9, r3
    4fca:	0436      	lsls	r6, r6, #16
    4fcc:	4334      	orrs	r4, r6
    4fce:	464b      	mov	r3, r9
    4fd0:	2b38      	cmp	r3, #56	; 0x38
    4fd2:	dd00      	ble.n	4fd6 <__aeabi_dadd+0x32e>
    4fd4:	e0d6      	b.n	5184 <__aeabi_dadd+0x4dc>
    4fd6:	2b1f      	cmp	r3, #31
    4fd8:	dd00      	ble.n	4fdc <__aeabi_dadd+0x334>
    4fda:	e135      	b.n	5248 <__aeabi_dadd+0x5a0>
    4fdc:	2620      	movs	r6, #32
    4fde:	1af5      	subs	r5, r6, r3
    4fe0:	0026      	movs	r6, r4
    4fe2:	40ae      	lsls	r6, r5
    4fe4:	46b2      	mov	sl, r6
    4fe6:	003e      	movs	r6, r7
    4fe8:	40de      	lsrs	r6, r3
    4fea:	46ac      	mov	ip, r5
    4fec:	0035      	movs	r5, r6
    4fee:	4656      	mov	r6, sl
    4ff0:	432e      	orrs	r6, r5
    4ff2:	4665      	mov	r5, ip
    4ff4:	40af      	lsls	r7, r5
    4ff6:	1e7d      	subs	r5, r7, #1
    4ff8:	41af      	sbcs	r7, r5
    4ffa:	40dc      	lsrs	r4, r3
    4ffc:	4337      	orrs	r7, r6
    4ffe:	1bd7      	subs	r7, r2, r7
    5000:	42ba      	cmp	r2, r7
    5002:	4192      	sbcs	r2, r2
    5004:	1b0c      	subs	r4, r1, r4
    5006:	4252      	negs	r2, r2
    5008:	1aa4      	subs	r4, r4, r2
    500a:	0006      	movs	r6, r0
    500c:	46d8      	mov	r8, fp
    500e:	e6a3      	b.n	4d58 <__aeabi_dadd+0xb0>
    5010:	4664      	mov	r4, ip
    5012:	4667      	mov	r7, ip
    5014:	432c      	orrs	r4, r5
    5016:	d000      	beq.n	501a <__aeabi_dadd+0x372>
    5018:	e6a2      	b.n	4d60 <__aeabi_dadd+0xb8>
    501a:	2500      	movs	r5, #0
    501c:	2600      	movs	r6, #0
    501e:	2700      	movs	r7, #0
    5020:	e706      	b.n	4e30 <__aeabi_dadd+0x188>
    5022:	001e      	movs	r6, r3
    5024:	e6c4      	b.n	4db0 <__aeabi_dadd+0x108>
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	000007ff 	.word	0x000007ff
    502c:	ff7fffff 	.word	0xff7fffff
    5030:	800fffff 	.word	0x800fffff
    5034:	2b1f      	cmp	r3, #31
    5036:	dc63      	bgt.n	5100 <__aeabi_dadd+0x458>
    5038:	2020      	movs	r0, #32
    503a:	1ac3      	subs	r3, r0, r3
    503c:	0008      	movs	r0, r1
    503e:	4098      	lsls	r0, r3
    5040:	469c      	mov	ip, r3
    5042:	4683      	mov	fp, r0
    5044:	4653      	mov	r3, sl
    5046:	0010      	movs	r0, r2
    5048:	40d8      	lsrs	r0, r3
    504a:	0003      	movs	r3, r0
    504c:	4658      	mov	r0, fp
    504e:	4318      	orrs	r0, r3
    5050:	4663      	mov	r3, ip
    5052:	409a      	lsls	r2, r3
    5054:	1e53      	subs	r3, r2, #1
    5056:	419a      	sbcs	r2, r3
    5058:	4653      	mov	r3, sl
    505a:	4302      	orrs	r2, r0
    505c:	40d9      	lsrs	r1, r3
    505e:	e703      	b.n	4e68 <__aeabi_dadd+0x1c0>
    5060:	0026      	movs	r6, r4
    5062:	433e      	orrs	r6, r7
    5064:	d006      	beq.n	5074 <__aeabi_dadd+0x3cc>
    5066:	43eb      	mvns	r3, r5
    5068:	4699      	mov	r9, r3
    506a:	2b00      	cmp	r3, #0
    506c:	d0c7      	beq.n	4ffe <__aeabi_dadd+0x356>
    506e:	4e94      	ldr	r6, [pc, #592]	; (52c0 <__aeabi_dadd+0x618>)
    5070:	42b0      	cmp	r0, r6
    5072:	d1ac      	bne.n	4fce <__aeabi_dadd+0x326>
    5074:	000c      	movs	r4, r1
    5076:	0017      	movs	r7, r2
    5078:	0006      	movs	r6, r0
    507a:	46d8      	mov	r8, fp
    507c:	e698      	b.n	4db0 <__aeabi_dadd+0x108>
    507e:	4b90      	ldr	r3, [pc, #576]	; (52c0 <__aeabi_dadd+0x618>)
    5080:	459a      	cmp	sl, r3
    5082:	d00b      	beq.n	509c <__aeabi_dadd+0x3f4>
    5084:	4682      	mov	sl, r0
    5086:	e6e7      	b.n	4e58 <__aeabi_dadd+0x1b0>
    5088:	2800      	cmp	r0, #0
    508a:	d000      	beq.n	508e <__aeabi_dadd+0x3e6>
    508c:	e09e      	b.n	51cc <__aeabi_dadd+0x524>
    508e:	0018      	movs	r0, r3
    5090:	4310      	orrs	r0, r2
    5092:	d100      	bne.n	5096 <__aeabi_dadd+0x3ee>
    5094:	e0e9      	b.n	526a <__aeabi_dadd+0x5c2>
    5096:	001c      	movs	r4, r3
    5098:	0017      	movs	r7, r2
    509a:	46d8      	mov	r8, fp
    509c:	4e88      	ldr	r6, [pc, #544]	; (52c0 <__aeabi_dadd+0x618>)
    509e:	e687      	b.n	4db0 <__aeabi_dadd+0x108>
    50a0:	2500      	movs	r5, #0
    50a2:	e772      	b.n	4f8a <__aeabi_dadd+0x2e2>
    50a4:	2100      	movs	r1, #0
    50a6:	e782      	b.n	4fae <__aeabi_dadd+0x306>
    50a8:	0023      	movs	r3, r4
    50aa:	433b      	orrs	r3, r7
    50ac:	2e00      	cmp	r6, #0
    50ae:	d000      	beq.n	50b2 <__aeabi_dadd+0x40a>
    50b0:	e0ab      	b.n	520a <__aeabi_dadd+0x562>
    50b2:	2b00      	cmp	r3, #0
    50b4:	d100      	bne.n	50b8 <__aeabi_dadd+0x410>
    50b6:	e0e7      	b.n	5288 <__aeabi_dadd+0x5e0>
    50b8:	000b      	movs	r3, r1
    50ba:	4313      	orrs	r3, r2
    50bc:	d100      	bne.n	50c0 <__aeabi_dadd+0x418>
    50be:	e677      	b.n	4db0 <__aeabi_dadd+0x108>
    50c0:	18ba      	adds	r2, r7, r2
    50c2:	42ba      	cmp	r2, r7
    50c4:	41bf      	sbcs	r7, r7
    50c6:	1864      	adds	r4, r4, r1
    50c8:	427f      	negs	r7, r7
    50ca:	19e4      	adds	r4, r4, r7
    50cc:	0223      	lsls	r3, r4, #8
    50ce:	d400      	bmi.n	50d2 <__aeabi_dadd+0x42a>
    50d0:	e0f2      	b.n	52b8 <__aeabi_dadd+0x610>
    50d2:	4b7c      	ldr	r3, [pc, #496]	; (52c4 <__aeabi_dadd+0x61c>)
    50d4:	0017      	movs	r7, r2
    50d6:	401c      	ands	r4, r3
    50d8:	0006      	movs	r6, r0
    50da:	e669      	b.n	4db0 <__aeabi_dadd+0x108>
    50dc:	0020      	movs	r0, r4
    50de:	4338      	orrs	r0, r7
    50e0:	2e00      	cmp	r6, #0
    50e2:	d1d1      	bne.n	5088 <__aeabi_dadd+0x3e0>
    50e4:	2800      	cmp	r0, #0
    50e6:	d15b      	bne.n	51a0 <__aeabi_dadd+0x4f8>
    50e8:	001c      	movs	r4, r3
    50ea:	4314      	orrs	r4, r2
    50ec:	d100      	bne.n	50f0 <__aeabi_dadd+0x448>
    50ee:	e0a8      	b.n	5242 <__aeabi_dadd+0x59a>
    50f0:	001c      	movs	r4, r3
    50f2:	0017      	movs	r7, r2
    50f4:	46d8      	mov	r8, fp
    50f6:	e65b      	b.n	4db0 <__aeabi_dadd+0x108>
    50f8:	0006      	movs	r6, r0
    50fa:	2400      	movs	r4, #0
    50fc:	2700      	movs	r7, #0
    50fe:	e697      	b.n	4e30 <__aeabi_dadd+0x188>
    5100:	4650      	mov	r0, sl
    5102:	000b      	movs	r3, r1
    5104:	3820      	subs	r0, #32
    5106:	40c3      	lsrs	r3, r0
    5108:	4699      	mov	r9, r3
    510a:	4653      	mov	r3, sl
    510c:	2b20      	cmp	r3, #32
    510e:	d100      	bne.n	5112 <__aeabi_dadd+0x46a>
    5110:	e095      	b.n	523e <__aeabi_dadd+0x596>
    5112:	2340      	movs	r3, #64	; 0x40
    5114:	4650      	mov	r0, sl
    5116:	1a1b      	subs	r3, r3, r0
    5118:	4099      	lsls	r1, r3
    511a:	430a      	orrs	r2, r1
    511c:	1e51      	subs	r1, r2, #1
    511e:	418a      	sbcs	r2, r1
    5120:	464b      	mov	r3, r9
    5122:	2100      	movs	r1, #0
    5124:	431a      	orrs	r2, r3
    5126:	e69f      	b.n	4e68 <__aeabi_dadd+0x1c0>
    5128:	2e00      	cmp	r6, #0
    512a:	d130      	bne.n	518e <__aeabi_dadd+0x4e6>
    512c:	0026      	movs	r6, r4
    512e:	433e      	orrs	r6, r7
    5130:	d067      	beq.n	5202 <__aeabi_dadd+0x55a>
    5132:	43db      	mvns	r3, r3
    5134:	469a      	mov	sl, r3
    5136:	2b00      	cmp	r3, #0
    5138:	d01c      	beq.n	5174 <__aeabi_dadd+0x4cc>
    513a:	4e61      	ldr	r6, [pc, #388]	; (52c0 <__aeabi_dadd+0x618>)
    513c:	42b0      	cmp	r0, r6
    513e:	d060      	beq.n	5202 <__aeabi_dadd+0x55a>
    5140:	4653      	mov	r3, sl
    5142:	2b38      	cmp	r3, #56	; 0x38
    5144:	dd00      	ble.n	5148 <__aeabi_dadd+0x4a0>
    5146:	e096      	b.n	5276 <__aeabi_dadd+0x5ce>
    5148:	2b1f      	cmp	r3, #31
    514a:	dd00      	ble.n	514e <__aeabi_dadd+0x4a6>
    514c:	e09f      	b.n	528e <__aeabi_dadd+0x5e6>
    514e:	2620      	movs	r6, #32
    5150:	1af3      	subs	r3, r6, r3
    5152:	0026      	movs	r6, r4
    5154:	409e      	lsls	r6, r3
    5156:	469c      	mov	ip, r3
    5158:	46b3      	mov	fp, r6
    515a:	4653      	mov	r3, sl
    515c:	003e      	movs	r6, r7
    515e:	40de      	lsrs	r6, r3
    5160:	0033      	movs	r3, r6
    5162:	465e      	mov	r6, fp
    5164:	431e      	orrs	r6, r3
    5166:	4663      	mov	r3, ip
    5168:	409f      	lsls	r7, r3
    516a:	1e7b      	subs	r3, r7, #1
    516c:	419f      	sbcs	r7, r3
    516e:	4653      	mov	r3, sl
    5170:	40dc      	lsrs	r4, r3
    5172:	4337      	orrs	r7, r6
    5174:	18bf      	adds	r7, r7, r2
    5176:	4297      	cmp	r7, r2
    5178:	4192      	sbcs	r2, r2
    517a:	1864      	adds	r4, r4, r1
    517c:	4252      	negs	r2, r2
    517e:	18a4      	adds	r4, r4, r2
    5180:	0006      	movs	r6, r0
    5182:	e678      	b.n	4e76 <__aeabi_dadd+0x1ce>
    5184:	4327      	orrs	r7, r4
    5186:	1e7c      	subs	r4, r7, #1
    5188:	41a7      	sbcs	r7, r4
    518a:	2400      	movs	r4, #0
    518c:	e737      	b.n	4ffe <__aeabi_dadd+0x356>
    518e:	4e4c      	ldr	r6, [pc, #304]	; (52c0 <__aeabi_dadd+0x618>)
    5190:	42b0      	cmp	r0, r6
    5192:	d036      	beq.n	5202 <__aeabi_dadd+0x55a>
    5194:	2680      	movs	r6, #128	; 0x80
    5196:	425b      	negs	r3, r3
    5198:	0436      	lsls	r6, r6, #16
    519a:	469a      	mov	sl, r3
    519c:	4334      	orrs	r4, r6
    519e:	e7cf      	b.n	5140 <__aeabi_dadd+0x498>
    51a0:	0018      	movs	r0, r3
    51a2:	4310      	orrs	r0, r2
    51a4:	d100      	bne.n	51a8 <__aeabi_dadd+0x500>
    51a6:	e603      	b.n	4db0 <__aeabi_dadd+0x108>
    51a8:	1ab8      	subs	r0, r7, r2
    51aa:	4684      	mov	ip, r0
    51ac:	4567      	cmp	r7, ip
    51ae:	41ad      	sbcs	r5, r5
    51b0:	1ae0      	subs	r0, r4, r3
    51b2:	426d      	negs	r5, r5
    51b4:	1b40      	subs	r0, r0, r5
    51b6:	0205      	lsls	r5, r0, #8
    51b8:	d400      	bmi.n	51bc <__aeabi_dadd+0x514>
    51ba:	e62c      	b.n	4e16 <__aeabi_dadd+0x16e>
    51bc:	1bd7      	subs	r7, r2, r7
    51be:	42ba      	cmp	r2, r7
    51c0:	4192      	sbcs	r2, r2
    51c2:	1b1c      	subs	r4, r3, r4
    51c4:	4252      	negs	r2, r2
    51c6:	1aa4      	subs	r4, r4, r2
    51c8:	46d8      	mov	r8, fp
    51ca:	e5f1      	b.n	4db0 <__aeabi_dadd+0x108>
    51cc:	0018      	movs	r0, r3
    51ce:	4310      	orrs	r0, r2
    51d0:	d100      	bne.n	51d4 <__aeabi_dadd+0x52c>
    51d2:	e763      	b.n	509c <__aeabi_dadd+0x3f4>
    51d4:	08f8      	lsrs	r0, r7, #3
    51d6:	0767      	lsls	r7, r4, #29
    51d8:	4307      	orrs	r7, r0
    51da:	2080      	movs	r0, #128	; 0x80
    51dc:	08e4      	lsrs	r4, r4, #3
    51de:	0300      	lsls	r0, r0, #12
    51e0:	4204      	tst	r4, r0
    51e2:	d008      	beq.n	51f6 <__aeabi_dadd+0x54e>
    51e4:	08dd      	lsrs	r5, r3, #3
    51e6:	4205      	tst	r5, r0
    51e8:	d105      	bne.n	51f6 <__aeabi_dadd+0x54e>
    51ea:	08d2      	lsrs	r2, r2, #3
    51ec:	0759      	lsls	r1, r3, #29
    51ee:	4311      	orrs	r1, r2
    51f0:	000f      	movs	r7, r1
    51f2:	002c      	movs	r4, r5
    51f4:	46d8      	mov	r8, fp
    51f6:	0f7b      	lsrs	r3, r7, #29
    51f8:	00e4      	lsls	r4, r4, #3
    51fa:	431c      	orrs	r4, r3
    51fc:	00ff      	lsls	r7, r7, #3
    51fe:	4e30      	ldr	r6, [pc, #192]	; (52c0 <__aeabi_dadd+0x618>)
    5200:	e5d6      	b.n	4db0 <__aeabi_dadd+0x108>
    5202:	000c      	movs	r4, r1
    5204:	0017      	movs	r7, r2
    5206:	0006      	movs	r6, r0
    5208:	e5d2      	b.n	4db0 <__aeabi_dadd+0x108>
    520a:	2b00      	cmp	r3, #0
    520c:	d038      	beq.n	5280 <__aeabi_dadd+0x5d8>
    520e:	000b      	movs	r3, r1
    5210:	4313      	orrs	r3, r2
    5212:	d100      	bne.n	5216 <__aeabi_dadd+0x56e>
    5214:	e742      	b.n	509c <__aeabi_dadd+0x3f4>
    5216:	08f8      	lsrs	r0, r7, #3
    5218:	0767      	lsls	r7, r4, #29
    521a:	4307      	orrs	r7, r0
    521c:	2080      	movs	r0, #128	; 0x80
    521e:	08e4      	lsrs	r4, r4, #3
    5220:	0300      	lsls	r0, r0, #12
    5222:	4204      	tst	r4, r0
    5224:	d0e7      	beq.n	51f6 <__aeabi_dadd+0x54e>
    5226:	08cb      	lsrs	r3, r1, #3
    5228:	4203      	tst	r3, r0
    522a:	d1e4      	bne.n	51f6 <__aeabi_dadd+0x54e>
    522c:	08d2      	lsrs	r2, r2, #3
    522e:	0749      	lsls	r1, r1, #29
    5230:	4311      	orrs	r1, r2
    5232:	000f      	movs	r7, r1
    5234:	001c      	movs	r4, r3
    5236:	e7de      	b.n	51f6 <__aeabi_dadd+0x54e>
    5238:	2700      	movs	r7, #0
    523a:	2400      	movs	r4, #0
    523c:	e5d5      	b.n	4dea <__aeabi_dadd+0x142>
    523e:	2100      	movs	r1, #0
    5240:	e76b      	b.n	511a <__aeabi_dadd+0x472>
    5242:	2500      	movs	r5, #0
    5244:	2700      	movs	r7, #0
    5246:	e5f3      	b.n	4e30 <__aeabi_dadd+0x188>
    5248:	464e      	mov	r6, r9
    524a:	0025      	movs	r5, r4
    524c:	3e20      	subs	r6, #32
    524e:	40f5      	lsrs	r5, r6
    5250:	464b      	mov	r3, r9
    5252:	002e      	movs	r6, r5
    5254:	2b20      	cmp	r3, #32
    5256:	d02d      	beq.n	52b4 <__aeabi_dadd+0x60c>
    5258:	2540      	movs	r5, #64	; 0x40
    525a:	1aed      	subs	r5, r5, r3
    525c:	40ac      	lsls	r4, r5
    525e:	4327      	orrs	r7, r4
    5260:	1e7c      	subs	r4, r7, #1
    5262:	41a7      	sbcs	r7, r4
    5264:	2400      	movs	r4, #0
    5266:	4337      	orrs	r7, r6
    5268:	e6c9      	b.n	4ffe <__aeabi_dadd+0x356>
    526a:	2480      	movs	r4, #128	; 0x80
    526c:	2500      	movs	r5, #0
    526e:	0324      	lsls	r4, r4, #12
    5270:	4e13      	ldr	r6, [pc, #76]	; (52c0 <__aeabi_dadd+0x618>)
    5272:	2700      	movs	r7, #0
    5274:	e5dc      	b.n	4e30 <__aeabi_dadd+0x188>
    5276:	4327      	orrs	r7, r4
    5278:	1e7c      	subs	r4, r7, #1
    527a:	41a7      	sbcs	r7, r4
    527c:	2400      	movs	r4, #0
    527e:	e779      	b.n	5174 <__aeabi_dadd+0x4cc>
    5280:	000c      	movs	r4, r1
    5282:	0017      	movs	r7, r2
    5284:	4e0e      	ldr	r6, [pc, #56]	; (52c0 <__aeabi_dadd+0x618>)
    5286:	e593      	b.n	4db0 <__aeabi_dadd+0x108>
    5288:	000c      	movs	r4, r1
    528a:	0017      	movs	r7, r2
    528c:	e590      	b.n	4db0 <__aeabi_dadd+0x108>
    528e:	4656      	mov	r6, sl
    5290:	0023      	movs	r3, r4
    5292:	3e20      	subs	r6, #32
    5294:	40f3      	lsrs	r3, r6
    5296:	4699      	mov	r9, r3
    5298:	4653      	mov	r3, sl
    529a:	2b20      	cmp	r3, #32
    529c:	d00e      	beq.n	52bc <__aeabi_dadd+0x614>
    529e:	2340      	movs	r3, #64	; 0x40
    52a0:	4656      	mov	r6, sl
    52a2:	1b9b      	subs	r3, r3, r6
    52a4:	409c      	lsls	r4, r3
    52a6:	4327      	orrs	r7, r4
    52a8:	1e7c      	subs	r4, r7, #1
    52aa:	41a7      	sbcs	r7, r4
    52ac:	464b      	mov	r3, r9
    52ae:	2400      	movs	r4, #0
    52b0:	431f      	orrs	r7, r3
    52b2:	e75f      	b.n	5174 <__aeabi_dadd+0x4cc>
    52b4:	2400      	movs	r4, #0
    52b6:	e7d2      	b.n	525e <__aeabi_dadd+0x5b6>
    52b8:	0017      	movs	r7, r2
    52ba:	e5b2      	b.n	4e22 <__aeabi_dadd+0x17a>
    52bc:	2400      	movs	r4, #0
    52be:	e7f2      	b.n	52a6 <__aeabi_dadd+0x5fe>
    52c0:	000007ff 	.word	0x000007ff
    52c4:	ff7fffff 	.word	0xff7fffff

000052c8 <__aeabi_ddiv>:
    52c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ca:	4657      	mov	r7, sl
    52cc:	4645      	mov	r5, r8
    52ce:	46de      	mov	lr, fp
    52d0:	464e      	mov	r6, r9
    52d2:	b5e0      	push	{r5, r6, r7, lr}
    52d4:	004c      	lsls	r4, r1, #1
    52d6:	030e      	lsls	r6, r1, #12
    52d8:	b087      	sub	sp, #28
    52da:	4683      	mov	fp, r0
    52dc:	4692      	mov	sl, r2
    52de:	001d      	movs	r5, r3
    52e0:	4680      	mov	r8, r0
    52e2:	0b36      	lsrs	r6, r6, #12
    52e4:	0d64      	lsrs	r4, r4, #21
    52e6:	0fcf      	lsrs	r7, r1, #31
    52e8:	2c00      	cmp	r4, #0
    52ea:	d04f      	beq.n	538c <__aeabi_ddiv+0xc4>
    52ec:	4b6f      	ldr	r3, [pc, #444]	; (54ac <__aeabi_ddiv+0x1e4>)
    52ee:	429c      	cmp	r4, r3
    52f0:	d035      	beq.n	535e <__aeabi_ddiv+0x96>
    52f2:	2380      	movs	r3, #128	; 0x80
    52f4:	0f42      	lsrs	r2, r0, #29
    52f6:	041b      	lsls	r3, r3, #16
    52f8:	00f6      	lsls	r6, r6, #3
    52fa:	4313      	orrs	r3, r2
    52fc:	4333      	orrs	r3, r6
    52fe:	4699      	mov	r9, r3
    5300:	00c3      	lsls	r3, r0, #3
    5302:	4698      	mov	r8, r3
    5304:	4b6a      	ldr	r3, [pc, #424]	; (54b0 <__aeabi_ddiv+0x1e8>)
    5306:	2600      	movs	r6, #0
    5308:	469c      	mov	ip, r3
    530a:	2300      	movs	r3, #0
    530c:	4464      	add	r4, ip
    530e:	9303      	str	r3, [sp, #12]
    5310:	032b      	lsls	r3, r5, #12
    5312:	0b1b      	lsrs	r3, r3, #12
    5314:	469b      	mov	fp, r3
    5316:	006b      	lsls	r3, r5, #1
    5318:	0fed      	lsrs	r5, r5, #31
    531a:	4650      	mov	r0, sl
    531c:	0d5b      	lsrs	r3, r3, #21
    531e:	9501      	str	r5, [sp, #4]
    5320:	d05e      	beq.n	53e0 <__aeabi_ddiv+0x118>
    5322:	4a62      	ldr	r2, [pc, #392]	; (54ac <__aeabi_ddiv+0x1e4>)
    5324:	4293      	cmp	r3, r2
    5326:	d053      	beq.n	53d0 <__aeabi_ddiv+0x108>
    5328:	465a      	mov	r2, fp
    532a:	00d1      	lsls	r1, r2, #3
    532c:	2280      	movs	r2, #128	; 0x80
    532e:	0f40      	lsrs	r0, r0, #29
    5330:	0412      	lsls	r2, r2, #16
    5332:	4302      	orrs	r2, r0
    5334:	430a      	orrs	r2, r1
    5336:	4693      	mov	fp, r2
    5338:	4652      	mov	r2, sl
    533a:	00d1      	lsls	r1, r2, #3
    533c:	4a5c      	ldr	r2, [pc, #368]	; (54b0 <__aeabi_ddiv+0x1e8>)
    533e:	4694      	mov	ip, r2
    5340:	2200      	movs	r2, #0
    5342:	4463      	add	r3, ip
    5344:	0038      	movs	r0, r7
    5346:	4068      	eors	r0, r5
    5348:	4684      	mov	ip, r0
    534a:	9002      	str	r0, [sp, #8]
    534c:	1ae4      	subs	r4, r4, r3
    534e:	4316      	orrs	r6, r2
    5350:	2e0f      	cmp	r6, #15
    5352:	d900      	bls.n	5356 <__aeabi_ddiv+0x8e>
    5354:	e0b4      	b.n	54c0 <__aeabi_ddiv+0x1f8>
    5356:	4b57      	ldr	r3, [pc, #348]	; (54b4 <__aeabi_ddiv+0x1ec>)
    5358:	00b6      	lsls	r6, r6, #2
    535a:	599b      	ldr	r3, [r3, r6]
    535c:	469f      	mov	pc, r3
    535e:	0003      	movs	r3, r0
    5360:	4333      	orrs	r3, r6
    5362:	4699      	mov	r9, r3
    5364:	d16c      	bne.n	5440 <__aeabi_ddiv+0x178>
    5366:	2300      	movs	r3, #0
    5368:	4698      	mov	r8, r3
    536a:	3302      	adds	r3, #2
    536c:	2608      	movs	r6, #8
    536e:	9303      	str	r3, [sp, #12]
    5370:	e7ce      	b.n	5310 <__aeabi_ddiv+0x48>
    5372:	46cb      	mov	fp, r9
    5374:	4641      	mov	r1, r8
    5376:	9a03      	ldr	r2, [sp, #12]
    5378:	9701      	str	r7, [sp, #4]
    537a:	2a02      	cmp	r2, #2
    537c:	d165      	bne.n	544a <__aeabi_ddiv+0x182>
    537e:	9b01      	ldr	r3, [sp, #4]
    5380:	4c4a      	ldr	r4, [pc, #296]	; (54ac <__aeabi_ddiv+0x1e4>)
    5382:	469c      	mov	ip, r3
    5384:	2300      	movs	r3, #0
    5386:	2200      	movs	r2, #0
    5388:	4698      	mov	r8, r3
    538a:	e06b      	b.n	5464 <__aeabi_ddiv+0x19c>
    538c:	0003      	movs	r3, r0
    538e:	4333      	orrs	r3, r6
    5390:	4699      	mov	r9, r3
    5392:	d04e      	beq.n	5432 <__aeabi_ddiv+0x16a>
    5394:	2e00      	cmp	r6, #0
    5396:	d100      	bne.n	539a <__aeabi_ddiv+0xd2>
    5398:	e1bc      	b.n	5714 <__aeabi_ddiv+0x44c>
    539a:	0030      	movs	r0, r6
    539c:	f001 fae8 	bl	6970 <__clzsi2>
    53a0:	0003      	movs	r3, r0
    53a2:	3b0b      	subs	r3, #11
    53a4:	2b1c      	cmp	r3, #28
    53a6:	dd00      	ble.n	53aa <__aeabi_ddiv+0xe2>
    53a8:	e1ac      	b.n	5704 <__aeabi_ddiv+0x43c>
    53aa:	221d      	movs	r2, #29
    53ac:	1ad3      	subs	r3, r2, r3
    53ae:	465a      	mov	r2, fp
    53b0:	0001      	movs	r1, r0
    53b2:	40da      	lsrs	r2, r3
    53b4:	3908      	subs	r1, #8
    53b6:	408e      	lsls	r6, r1
    53b8:	0013      	movs	r3, r2
    53ba:	4333      	orrs	r3, r6
    53bc:	4699      	mov	r9, r3
    53be:	465b      	mov	r3, fp
    53c0:	408b      	lsls	r3, r1
    53c2:	4698      	mov	r8, r3
    53c4:	2300      	movs	r3, #0
    53c6:	4c3c      	ldr	r4, [pc, #240]	; (54b8 <__aeabi_ddiv+0x1f0>)
    53c8:	2600      	movs	r6, #0
    53ca:	1a24      	subs	r4, r4, r0
    53cc:	9303      	str	r3, [sp, #12]
    53ce:	e79f      	b.n	5310 <__aeabi_ddiv+0x48>
    53d0:	4651      	mov	r1, sl
    53d2:	465a      	mov	r2, fp
    53d4:	4311      	orrs	r1, r2
    53d6:	d129      	bne.n	542c <__aeabi_ddiv+0x164>
    53d8:	2200      	movs	r2, #0
    53da:	4693      	mov	fp, r2
    53dc:	3202      	adds	r2, #2
    53de:	e7b1      	b.n	5344 <__aeabi_ddiv+0x7c>
    53e0:	4659      	mov	r1, fp
    53e2:	4301      	orrs	r1, r0
    53e4:	d01e      	beq.n	5424 <__aeabi_ddiv+0x15c>
    53e6:	465b      	mov	r3, fp
    53e8:	2b00      	cmp	r3, #0
    53ea:	d100      	bne.n	53ee <__aeabi_ddiv+0x126>
    53ec:	e19e      	b.n	572c <__aeabi_ddiv+0x464>
    53ee:	4658      	mov	r0, fp
    53f0:	f001 fabe 	bl	6970 <__clzsi2>
    53f4:	0003      	movs	r3, r0
    53f6:	3b0b      	subs	r3, #11
    53f8:	2b1c      	cmp	r3, #28
    53fa:	dd00      	ble.n	53fe <__aeabi_ddiv+0x136>
    53fc:	e18f      	b.n	571e <__aeabi_ddiv+0x456>
    53fe:	0002      	movs	r2, r0
    5400:	4659      	mov	r1, fp
    5402:	3a08      	subs	r2, #8
    5404:	4091      	lsls	r1, r2
    5406:	468b      	mov	fp, r1
    5408:	211d      	movs	r1, #29
    540a:	1acb      	subs	r3, r1, r3
    540c:	4651      	mov	r1, sl
    540e:	40d9      	lsrs	r1, r3
    5410:	000b      	movs	r3, r1
    5412:	4659      	mov	r1, fp
    5414:	430b      	orrs	r3, r1
    5416:	4651      	mov	r1, sl
    5418:	469b      	mov	fp, r3
    541a:	4091      	lsls	r1, r2
    541c:	4b26      	ldr	r3, [pc, #152]	; (54b8 <__aeabi_ddiv+0x1f0>)
    541e:	2200      	movs	r2, #0
    5420:	1a1b      	subs	r3, r3, r0
    5422:	e78f      	b.n	5344 <__aeabi_ddiv+0x7c>
    5424:	2300      	movs	r3, #0
    5426:	2201      	movs	r2, #1
    5428:	469b      	mov	fp, r3
    542a:	e78b      	b.n	5344 <__aeabi_ddiv+0x7c>
    542c:	4651      	mov	r1, sl
    542e:	2203      	movs	r2, #3
    5430:	e788      	b.n	5344 <__aeabi_ddiv+0x7c>
    5432:	2300      	movs	r3, #0
    5434:	4698      	mov	r8, r3
    5436:	3301      	adds	r3, #1
    5438:	2604      	movs	r6, #4
    543a:	2400      	movs	r4, #0
    543c:	9303      	str	r3, [sp, #12]
    543e:	e767      	b.n	5310 <__aeabi_ddiv+0x48>
    5440:	2303      	movs	r3, #3
    5442:	46b1      	mov	r9, r6
    5444:	9303      	str	r3, [sp, #12]
    5446:	260c      	movs	r6, #12
    5448:	e762      	b.n	5310 <__aeabi_ddiv+0x48>
    544a:	2a03      	cmp	r2, #3
    544c:	d100      	bne.n	5450 <__aeabi_ddiv+0x188>
    544e:	e25c      	b.n	590a <__aeabi_ddiv+0x642>
    5450:	9b01      	ldr	r3, [sp, #4]
    5452:	2a01      	cmp	r2, #1
    5454:	d000      	beq.n	5458 <__aeabi_ddiv+0x190>
    5456:	e1e4      	b.n	5822 <__aeabi_ddiv+0x55a>
    5458:	4013      	ands	r3, r2
    545a:	469c      	mov	ip, r3
    545c:	2300      	movs	r3, #0
    545e:	2400      	movs	r4, #0
    5460:	2200      	movs	r2, #0
    5462:	4698      	mov	r8, r3
    5464:	2100      	movs	r1, #0
    5466:	0312      	lsls	r2, r2, #12
    5468:	0b13      	lsrs	r3, r2, #12
    546a:	0d0a      	lsrs	r2, r1, #20
    546c:	0512      	lsls	r2, r2, #20
    546e:	431a      	orrs	r2, r3
    5470:	0523      	lsls	r3, r4, #20
    5472:	4c12      	ldr	r4, [pc, #72]	; (54bc <__aeabi_ddiv+0x1f4>)
    5474:	4640      	mov	r0, r8
    5476:	4022      	ands	r2, r4
    5478:	4313      	orrs	r3, r2
    547a:	4662      	mov	r2, ip
    547c:	005b      	lsls	r3, r3, #1
    547e:	07d2      	lsls	r2, r2, #31
    5480:	085b      	lsrs	r3, r3, #1
    5482:	4313      	orrs	r3, r2
    5484:	0019      	movs	r1, r3
    5486:	b007      	add	sp, #28
    5488:	bc3c      	pop	{r2, r3, r4, r5}
    548a:	4690      	mov	r8, r2
    548c:	4699      	mov	r9, r3
    548e:	46a2      	mov	sl, r4
    5490:	46ab      	mov	fp, r5
    5492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5494:	2300      	movs	r3, #0
    5496:	2280      	movs	r2, #128	; 0x80
    5498:	469c      	mov	ip, r3
    549a:	0312      	lsls	r2, r2, #12
    549c:	4698      	mov	r8, r3
    549e:	4c03      	ldr	r4, [pc, #12]	; (54ac <__aeabi_ddiv+0x1e4>)
    54a0:	e7e0      	b.n	5464 <__aeabi_ddiv+0x19c>
    54a2:	2300      	movs	r3, #0
    54a4:	4c01      	ldr	r4, [pc, #4]	; (54ac <__aeabi_ddiv+0x1e4>)
    54a6:	2200      	movs	r2, #0
    54a8:	4698      	mov	r8, r3
    54aa:	e7db      	b.n	5464 <__aeabi_ddiv+0x19c>
    54ac:	000007ff 	.word	0x000007ff
    54b0:	fffffc01 	.word	0xfffffc01
    54b4:	00006c64 	.word	0x00006c64
    54b8:	fffffc0d 	.word	0xfffffc0d
    54bc:	800fffff 	.word	0x800fffff
    54c0:	45d9      	cmp	r9, fp
    54c2:	d900      	bls.n	54c6 <__aeabi_ddiv+0x1fe>
    54c4:	e139      	b.n	573a <__aeabi_ddiv+0x472>
    54c6:	d100      	bne.n	54ca <__aeabi_ddiv+0x202>
    54c8:	e134      	b.n	5734 <__aeabi_ddiv+0x46c>
    54ca:	2300      	movs	r3, #0
    54cc:	4646      	mov	r6, r8
    54ce:	464d      	mov	r5, r9
    54d0:	469a      	mov	sl, r3
    54d2:	3c01      	subs	r4, #1
    54d4:	465b      	mov	r3, fp
    54d6:	0e0a      	lsrs	r2, r1, #24
    54d8:	021b      	lsls	r3, r3, #8
    54da:	431a      	orrs	r2, r3
    54dc:	020b      	lsls	r3, r1, #8
    54de:	0c17      	lsrs	r7, r2, #16
    54e0:	9303      	str	r3, [sp, #12]
    54e2:	0413      	lsls	r3, r2, #16
    54e4:	0c1b      	lsrs	r3, r3, #16
    54e6:	0039      	movs	r1, r7
    54e8:	0028      	movs	r0, r5
    54ea:	4690      	mov	r8, r2
    54ec:	9301      	str	r3, [sp, #4]
    54ee:	f7fe ff03 	bl	42f8 <__udivsi3>
    54f2:	0002      	movs	r2, r0
    54f4:	9b01      	ldr	r3, [sp, #4]
    54f6:	4683      	mov	fp, r0
    54f8:	435a      	muls	r2, r3
    54fa:	0028      	movs	r0, r5
    54fc:	0039      	movs	r1, r7
    54fe:	4691      	mov	r9, r2
    5500:	f7fe ff80 	bl	4404 <__aeabi_uidivmod>
    5504:	0c35      	lsrs	r5, r6, #16
    5506:	0409      	lsls	r1, r1, #16
    5508:	430d      	orrs	r5, r1
    550a:	45a9      	cmp	r9, r5
    550c:	d90d      	bls.n	552a <__aeabi_ddiv+0x262>
    550e:	465b      	mov	r3, fp
    5510:	4445      	add	r5, r8
    5512:	3b01      	subs	r3, #1
    5514:	45a8      	cmp	r8, r5
    5516:	d900      	bls.n	551a <__aeabi_ddiv+0x252>
    5518:	e13a      	b.n	5790 <__aeabi_ddiv+0x4c8>
    551a:	45a9      	cmp	r9, r5
    551c:	d800      	bhi.n	5520 <__aeabi_ddiv+0x258>
    551e:	e137      	b.n	5790 <__aeabi_ddiv+0x4c8>
    5520:	2302      	movs	r3, #2
    5522:	425b      	negs	r3, r3
    5524:	469c      	mov	ip, r3
    5526:	4445      	add	r5, r8
    5528:	44e3      	add	fp, ip
    552a:	464b      	mov	r3, r9
    552c:	1aeb      	subs	r3, r5, r3
    552e:	0039      	movs	r1, r7
    5530:	0018      	movs	r0, r3
    5532:	9304      	str	r3, [sp, #16]
    5534:	f7fe fee0 	bl	42f8 <__udivsi3>
    5538:	9b01      	ldr	r3, [sp, #4]
    553a:	0005      	movs	r5, r0
    553c:	4343      	muls	r3, r0
    553e:	0039      	movs	r1, r7
    5540:	9804      	ldr	r0, [sp, #16]
    5542:	4699      	mov	r9, r3
    5544:	f7fe ff5e 	bl	4404 <__aeabi_uidivmod>
    5548:	0433      	lsls	r3, r6, #16
    554a:	0409      	lsls	r1, r1, #16
    554c:	0c1b      	lsrs	r3, r3, #16
    554e:	430b      	orrs	r3, r1
    5550:	4599      	cmp	r9, r3
    5552:	d909      	bls.n	5568 <__aeabi_ddiv+0x2a0>
    5554:	4443      	add	r3, r8
    5556:	1e6a      	subs	r2, r5, #1
    5558:	4598      	cmp	r8, r3
    555a:	d900      	bls.n	555e <__aeabi_ddiv+0x296>
    555c:	e11a      	b.n	5794 <__aeabi_ddiv+0x4cc>
    555e:	4599      	cmp	r9, r3
    5560:	d800      	bhi.n	5564 <__aeabi_ddiv+0x29c>
    5562:	e117      	b.n	5794 <__aeabi_ddiv+0x4cc>
    5564:	3d02      	subs	r5, #2
    5566:	4443      	add	r3, r8
    5568:	464a      	mov	r2, r9
    556a:	1a9b      	subs	r3, r3, r2
    556c:	465a      	mov	r2, fp
    556e:	0412      	lsls	r2, r2, #16
    5570:	432a      	orrs	r2, r5
    5572:	9903      	ldr	r1, [sp, #12]
    5574:	4693      	mov	fp, r2
    5576:	0c10      	lsrs	r0, r2, #16
    5578:	0c0a      	lsrs	r2, r1, #16
    557a:	4691      	mov	r9, r2
    557c:	0409      	lsls	r1, r1, #16
    557e:	465a      	mov	r2, fp
    5580:	0c09      	lsrs	r1, r1, #16
    5582:	464e      	mov	r6, r9
    5584:	000d      	movs	r5, r1
    5586:	0412      	lsls	r2, r2, #16
    5588:	0c12      	lsrs	r2, r2, #16
    558a:	4345      	muls	r5, r0
    558c:	9105      	str	r1, [sp, #20]
    558e:	4351      	muls	r1, r2
    5590:	4372      	muls	r2, r6
    5592:	4370      	muls	r0, r6
    5594:	1952      	adds	r2, r2, r5
    5596:	0c0e      	lsrs	r6, r1, #16
    5598:	18b2      	adds	r2, r6, r2
    559a:	4295      	cmp	r5, r2
    559c:	d903      	bls.n	55a6 <__aeabi_ddiv+0x2de>
    559e:	2580      	movs	r5, #128	; 0x80
    55a0:	026d      	lsls	r5, r5, #9
    55a2:	46ac      	mov	ip, r5
    55a4:	4460      	add	r0, ip
    55a6:	0c15      	lsrs	r5, r2, #16
    55a8:	0409      	lsls	r1, r1, #16
    55aa:	0412      	lsls	r2, r2, #16
    55ac:	0c09      	lsrs	r1, r1, #16
    55ae:	1828      	adds	r0, r5, r0
    55b0:	1852      	adds	r2, r2, r1
    55b2:	4283      	cmp	r3, r0
    55b4:	d200      	bcs.n	55b8 <__aeabi_ddiv+0x2f0>
    55b6:	e0ce      	b.n	5756 <__aeabi_ddiv+0x48e>
    55b8:	d100      	bne.n	55bc <__aeabi_ddiv+0x2f4>
    55ba:	e0c8      	b.n	574e <__aeabi_ddiv+0x486>
    55bc:	1a1d      	subs	r5, r3, r0
    55be:	4653      	mov	r3, sl
    55c0:	1a9e      	subs	r6, r3, r2
    55c2:	45b2      	cmp	sl, r6
    55c4:	4192      	sbcs	r2, r2
    55c6:	4252      	negs	r2, r2
    55c8:	1aab      	subs	r3, r5, r2
    55ca:	469a      	mov	sl, r3
    55cc:	4598      	cmp	r8, r3
    55ce:	d100      	bne.n	55d2 <__aeabi_ddiv+0x30a>
    55d0:	e117      	b.n	5802 <__aeabi_ddiv+0x53a>
    55d2:	0039      	movs	r1, r7
    55d4:	0018      	movs	r0, r3
    55d6:	f7fe fe8f 	bl	42f8 <__udivsi3>
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	0005      	movs	r5, r0
    55de:	4343      	muls	r3, r0
    55e0:	0039      	movs	r1, r7
    55e2:	4650      	mov	r0, sl
    55e4:	9304      	str	r3, [sp, #16]
    55e6:	f7fe ff0d 	bl	4404 <__aeabi_uidivmod>
    55ea:	9804      	ldr	r0, [sp, #16]
    55ec:	040b      	lsls	r3, r1, #16
    55ee:	0c31      	lsrs	r1, r6, #16
    55f0:	4319      	orrs	r1, r3
    55f2:	4288      	cmp	r0, r1
    55f4:	d909      	bls.n	560a <__aeabi_ddiv+0x342>
    55f6:	4441      	add	r1, r8
    55f8:	1e6b      	subs	r3, r5, #1
    55fa:	4588      	cmp	r8, r1
    55fc:	d900      	bls.n	5600 <__aeabi_ddiv+0x338>
    55fe:	e107      	b.n	5810 <__aeabi_ddiv+0x548>
    5600:	4288      	cmp	r0, r1
    5602:	d800      	bhi.n	5606 <__aeabi_ddiv+0x33e>
    5604:	e104      	b.n	5810 <__aeabi_ddiv+0x548>
    5606:	3d02      	subs	r5, #2
    5608:	4441      	add	r1, r8
    560a:	9b04      	ldr	r3, [sp, #16]
    560c:	1acb      	subs	r3, r1, r3
    560e:	0018      	movs	r0, r3
    5610:	0039      	movs	r1, r7
    5612:	9304      	str	r3, [sp, #16]
    5614:	f7fe fe70 	bl	42f8 <__udivsi3>
    5618:	9b01      	ldr	r3, [sp, #4]
    561a:	4682      	mov	sl, r0
    561c:	4343      	muls	r3, r0
    561e:	0039      	movs	r1, r7
    5620:	9804      	ldr	r0, [sp, #16]
    5622:	9301      	str	r3, [sp, #4]
    5624:	f7fe feee 	bl	4404 <__aeabi_uidivmod>
    5628:	9801      	ldr	r0, [sp, #4]
    562a:	040b      	lsls	r3, r1, #16
    562c:	0431      	lsls	r1, r6, #16
    562e:	0c09      	lsrs	r1, r1, #16
    5630:	4319      	orrs	r1, r3
    5632:	4288      	cmp	r0, r1
    5634:	d90d      	bls.n	5652 <__aeabi_ddiv+0x38a>
    5636:	4653      	mov	r3, sl
    5638:	4441      	add	r1, r8
    563a:	3b01      	subs	r3, #1
    563c:	4588      	cmp	r8, r1
    563e:	d900      	bls.n	5642 <__aeabi_ddiv+0x37a>
    5640:	e0e8      	b.n	5814 <__aeabi_ddiv+0x54c>
    5642:	4288      	cmp	r0, r1
    5644:	d800      	bhi.n	5648 <__aeabi_ddiv+0x380>
    5646:	e0e5      	b.n	5814 <__aeabi_ddiv+0x54c>
    5648:	2302      	movs	r3, #2
    564a:	425b      	negs	r3, r3
    564c:	469c      	mov	ip, r3
    564e:	4441      	add	r1, r8
    5650:	44e2      	add	sl, ip
    5652:	9b01      	ldr	r3, [sp, #4]
    5654:	042d      	lsls	r5, r5, #16
    5656:	1ace      	subs	r6, r1, r3
    5658:	4651      	mov	r1, sl
    565a:	4329      	orrs	r1, r5
    565c:	9d05      	ldr	r5, [sp, #20]
    565e:	464f      	mov	r7, r9
    5660:	002a      	movs	r2, r5
    5662:	040b      	lsls	r3, r1, #16
    5664:	0c08      	lsrs	r0, r1, #16
    5666:	0c1b      	lsrs	r3, r3, #16
    5668:	435a      	muls	r2, r3
    566a:	4345      	muls	r5, r0
    566c:	437b      	muls	r3, r7
    566e:	4378      	muls	r0, r7
    5670:	195b      	adds	r3, r3, r5
    5672:	0c17      	lsrs	r7, r2, #16
    5674:	18fb      	adds	r3, r7, r3
    5676:	429d      	cmp	r5, r3
    5678:	d903      	bls.n	5682 <__aeabi_ddiv+0x3ba>
    567a:	2580      	movs	r5, #128	; 0x80
    567c:	026d      	lsls	r5, r5, #9
    567e:	46ac      	mov	ip, r5
    5680:	4460      	add	r0, ip
    5682:	0c1d      	lsrs	r5, r3, #16
    5684:	0412      	lsls	r2, r2, #16
    5686:	041b      	lsls	r3, r3, #16
    5688:	0c12      	lsrs	r2, r2, #16
    568a:	1828      	adds	r0, r5, r0
    568c:	189b      	adds	r3, r3, r2
    568e:	4286      	cmp	r6, r0
    5690:	d200      	bcs.n	5694 <__aeabi_ddiv+0x3cc>
    5692:	e093      	b.n	57bc <__aeabi_ddiv+0x4f4>
    5694:	d100      	bne.n	5698 <__aeabi_ddiv+0x3d0>
    5696:	e08e      	b.n	57b6 <__aeabi_ddiv+0x4ee>
    5698:	2301      	movs	r3, #1
    569a:	4319      	orrs	r1, r3
    569c:	4ba0      	ldr	r3, [pc, #640]	; (5920 <__aeabi_ddiv+0x658>)
    569e:	18e3      	adds	r3, r4, r3
    56a0:	2b00      	cmp	r3, #0
    56a2:	dc00      	bgt.n	56a6 <__aeabi_ddiv+0x3de>
    56a4:	e099      	b.n	57da <__aeabi_ddiv+0x512>
    56a6:	074a      	lsls	r2, r1, #29
    56a8:	d000      	beq.n	56ac <__aeabi_ddiv+0x3e4>
    56aa:	e09e      	b.n	57ea <__aeabi_ddiv+0x522>
    56ac:	465a      	mov	r2, fp
    56ae:	01d2      	lsls	r2, r2, #7
    56b0:	d506      	bpl.n	56c0 <__aeabi_ddiv+0x3f8>
    56b2:	465a      	mov	r2, fp
    56b4:	4b9b      	ldr	r3, [pc, #620]	; (5924 <__aeabi_ddiv+0x65c>)
    56b6:	401a      	ands	r2, r3
    56b8:	2380      	movs	r3, #128	; 0x80
    56ba:	4693      	mov	fp, r2
    56bc:	00db      	lsls	r3, r3, #3
    56be:	18e3      	adds	r3, r4, r3
    56c0:	4a99      	ldr	r2, [pc, #612]	; (5928 <__aeabi_ddiv+0x660>)
    56c2:	4293      	cmp	r3, r2
    56c4:	dd68      	ble.n	5798 <__aeabi_ddiv+0x4d0>
    56c6:	2301      	movs	r3, #1
    56c8:	9a02      	ldr	r2, [sp, #8]
    56ca:	4c98      	ldr	r4, [pc, #608]	; (592c <__aeabi_ddiv+0x664>)
    56cc:	401a      	ands	r2, r3
    56ce:	2300      	movs	r3, #0
    56d0:	4694      	mov	ip, r2
    56d2:	4698      	mov	r8, r3
    56d4:	2200      	movs	r2, #0
    56d6:	e6c5      	b.n	5464 <__aeabi_ddiv+0x19c>
    56d8:	2280      	movs	r2, #128	; 0x80
    56da:	464b      	mov	r3, r9
    56dc:	0312      	lsls	r2, r2, #12
    56de:	4213      	tst	r3, r2
    56e0:	d00a      	beq.n	56f8 <__aeabi_ddiv+0x430>
    56e2:	465b      	mov	r3, fp
    56e4:	4213      	tst	r3, r2
    56e6:	d106      	bne.n	56f6 <__aeabi_ddiv+0x42e>
    56e8:	431a      	orrs	r2, r3
    56ea:	0312      	lsls	r2, r2, #12
    56ec:	0b12      	lsrs	r2, r2, #12
    56ee:	46ac      	mov	ip, r5
    56f0:	4688      	mov	r8, r1
    56f2:	4c8e      	ldr	r4, [pc, #568]	; (592c <__aeabi_ddiv+0x664>)
    56f4:	e6b6      	b.n	5464 <__aeabi_ddiv+0x19c>
    56f6:	464b      	mov	r3, r9
    56f8:	431a      	orrs	r2, r3
    56fa:	0312      	lsls	r2, r2, #12
    56fc:	0b12      	lsrs	r2, r2, #12
    56fe:	46bc      	mov	ip, r7
    5700:	4c8a      	ldr	r4, [pc, #552]	; (592c <__aeabi_ddiv+0x664>)
    5702:	e6af      	b.n	5464 <__aeabi_ddiv+0x19c>
    5704:	0003      	movs	r3, r0
    5706:	465a      	mov	r2, fp
    5708:	3b28      	subs	r3, #40	; 0x28
    570a:	409a      	lsls	r2, r3
    570c:	2300      	movs	r3, #0
    570e:	4691      	mov	r9, r2
    5710:	4698      	mov	r8, r3
    5712:	e657      	b.n	53c4 <__aeabi_ddiv+0xfc>
    5714:	4658      	mov	r0, fp
    5716:	f001 f92b 	bl	6970 <__clzsi2>
    571a:	3020      	adds	r0, #32
    571c:	e640      	b.n	53a0 <__aeabi_ddiv+0xd8>
    571e:	0003      	movs	r3, r0
    5720:	4652      	mov	r2, sl
    5722:	3b28      	subs	r3, #40	; 0x28
    5724:	409a      	lsls	r2, r3
    5726:	2100      	movs	r1, #0
    5728:	4693      	mov	fp, r2
    572a:	e677      	b.n	541c <__aeabi_ddiv+0x154>
    572c:	f001 f920 	bl	6970 <__clzsi2>
    5730:	3020      	adds	r0, #32
    5732:	e65f      	b.n	53f4 <__aeabi_ddiv+0x12c>
    5734:	4588      	cmp	r8, r1
    5736:	d200      	bcs.n	573a <__aeabi_ddiv+0x472>
    5738:	e6c7      	b.n	54ca <__aeabi_ddiv+0x202>
    573a:	464b      	mov	r3, r9
    573c:	07de      	lsls	r6, r3, #31
    573e:	085d      	lsrs	r5, r3, #1
    5740:	4643      	mov	r3, r8
    5742:	085b      	lsrs	r3, r3, #1
    5744:	431e      	orrs	r6, r3
    5746:	4643      	mov	r3, r8
    5748:	07db      	lsls	r3, r3, #31
    574a:	469a      	mov	sl, r3
    574c:	e6c2      	b.n	54d4 <__aeabi_ddiv+0x20c>
    574e:	2500      	movs	r5, #0
    5750:	4592      	cmp	sl, r2
    5752:	d300      	bcc.n	5756 <__aeabi_ddiv+0x48e>
    5754:	e733      	b.n	55be <__aeabi_ddiv+0x2f6>
    5756:	9e03      	ldr	r6, [sp, #12]
    5758:	4659      	mov	r1, fp
    575a:	46b4      	mov	ip, r6
    575c:	44e2      	add	sl, ip
    575e:	45b2      	cmp	sl, r6
    5760:	41ad      	sbcs	r5, r5
    5762:	426d      	negs	r5, r5
    5764:	4445      	add	r5, r8
    5766:	18eb      	adds	r3, r5, r3
    5768:	3901      	subs	r1, #1
    576a:	4598      	cmp	r8, r3
    576c:	d207      	bcs.n	577e <__aeabi_ddiv+0x4b6>
    576e:	4298      	cmp	r0, r3
    5770:	d900      	bls.n	5774 <__aeabi_ddiv+0x4ac>
    5772:	e07f      	b.n	5874 <__aeabi_ddiv+0x5ac>
    5774:	d100      	bne.n	5778 <__aeabi_ddiv+0x4b0>
    5776:	e0bc      	b.n	58f2 <__aeabi_ddiv+0x62a>
    5778:	1a1d      	subs	r5, r3, r0
    577a:	468b      	mov	fp, r1
    577c:	e71f      	b.n	55be <__aeabi_ddiv+0x2f6>
    577e:	4598      	cmp	r8, r3
    5780:	d1fa      	bne.n	5778 <__aeabi_ddiv+0x4b0>
    5782:	9d03      	ldr	r5, [sp, #12]
    5784:	4555      	cmp	r5, sl
    5786:	d9f2      	bls.n	576e <__aeabi_ddiv+0x4a6>
    5788:	4643      	mov	r3, r8
    578a:	468b      	mov	fp, r1
    578c:	1a1d      	subs	r5, r3, r0
    578e:	e716      	b.n	55be <__aeabi_ddiv+0x2f6>
    5790:	469b      	mov	fp, r3
    5792:	e6ca      	b.n	552a <__aeabi_ddiv+0x262>
    5794:	0015      	movs	r5, r2
    5796:	e6e7      	b.n	5568 <__aeabi_ddiv+0x2a0>
    5798:	465a      	mov	r2, fp
    579a:	08c9      	lsrs	r1, r1, #3
    579c:	0752      	lsls	r2, r2, #29
    579e:	430a      	orrs	r2, r1
    57a0:	055b      	lsls	r3, r3, #21
    57a2:	4690      	mov	r8, r2
    57a4:	0d5c      	lsrs	r4, r3, #21
    57a6:	465a      	mov	r2, fp
    57a8:	2301      	movs	r3, #1
    57aa:	9902      	ldr	r1, [sp, #8]
    57ac:	0252      	lsls	r2, r2, #9
    57ae:	4019      	ands	r1, r3
    57b0:	0b12      	lsrs	r2, r2, #12
    57b2:	468c      	mov	ip, r1
    57b4:	e656      	b.n	5464 <__aeabi_ddiv+0x19c>
    57b6:	2b00      	cmp	r3, #0
    57b8:	d100      	bne.n	57bc <__aeabi_ddiv+0x4f4>
    57ba:	e76f      	b.n	569c <__aeabi_ddiv+0x3d4>
    57bc:	4446      	add	r6, r8
    57be:	1e4a      	subs	r2, r1, #1
    57c0:	45b0      	cmp	r8, r6
    57c2:	d929      	bls.n	5818 <__aeabi_ddiv+0x550>
    57c4:	0011      	movs	r1, r2
    57c6:	4286      	cmp	r6, r0
    57c8:	d000      	beq.n	57cc <__aeabi_ddiv+0x504>
    57ca:	e765      	b.n	5698 <__aeabi_ddiv+0x3d0>
    57cc:	9a03      	ldr	r2, [sp, #12]
    57ce:	4293      	cmp	r3, r2
    57d0:	d000      	beq.n	57d4 <__aeabi_ddiv+0x50c>
    57d2:	e761      	b.n	5698 <__aeabi_ddiv+0x3d0>
    57d4:	e762      	b.n	569c <__aeabi_ddiv+0x3d4>
    57d6:	2101      	movs	r1, #1
    57d8:	4249      	negs	r1, r1
    57da:	2001      	movs	r0, #1
    57dc:	1ac2      	subs	r2, r0, r3
    57de:	2a38      	cmp	r2, #56	; 0x38
    57e0:	dd21      	ble.n	5826 <__aeabi_ddiv+0x55e>
    57e2:	9b02      	ldr	r3, [sp, #8]
    57e4:	4003      	ands	r3, r0
    57e6:	469c      	mov	ip, r3
    57e8:	e638      	b.n	545c <__aeabi_ddiv+0x194>
    57ea:	220f      	movs	r2, #15
    57ec:	400a      	ands	r2, r1
    57ee:	2a04      	cmp	r2, #4
    57f0:	d100      	bne.n	57f4 <__aeabi_ddiv+0x52c>
    57f2:	e75b      	b.n	56ac <__aeabi_ddiv+0x3e4>
    57f4:	000a      	movs	r2, r1
    57f6:	1d11      	adds	r1, r2, #4
    57f8:	4291      	cmp	r1, r2
    57fa:	4192      	sbcs	r2, r2
    57fc:	4252      	negs	r2, r2
    57fe:	4493      	add	fp, r2
    5800:	e754      	b.n	56ac <__aeabi_ddiv+0x3e4>
    5802:	4b47      	ldr	r3, [pc, #284]	; (5920 <__aeabi_ddiv+0x658>)
    5804:	18e3      	adds	r3, r4, r3
    5806:	2b00      	cmp	r3, #0
    5808:	dde5      	ble.n	57d6 <__aeabi_ddiv+0x50e>
    580a:	2201      	movs	r2, #1
    580c:	4252      	negs	r2, r2
    580e:	e7f2      	b.n	57f6 <__aeabi_ddiv+0x52e>
    5810:	001d      	movs	r5, r3
    5812:	e6fa      	b.n	560a <__aeabi_ddiv+0x342>
    5814:	469a      	mov	sl, r3
    5816:	e71c      	b.n	5652 <__aeabi_ddiv+0x38a>
    5818:	42b0      	cmp	r0, r6
    581a:	d839      	bhi.n	5890 <__aeabi_ddiv+0x5c8>
    581c:	d06e      	beq.n	58fc <__aeabi_ddiv+0x634>
    581e:	0011      	movs	r1, r2
    5820:	e73a      	b.n	5698 <__aeabi_ddiv+0x3d0>
    5822:	9302      	str	r3, [sp, #8]
    5824:	e73a      	b.n	569c <__aeabi_ddiv+0x3d4>
    5826:	2a1f      	cmp	r2, #31
    5828:	dc3c      	bgt.n	58a4 <__aeabi_ddiv+0x5dc>
    582a:	2320      	movs	r3, #32
    582c:	1a9b      	subs	r3, r3, r2
    582e:	000c      	movs	r4, r1
    5830:	4658      	mov	r0, fp
    5832:	4099      	lsls	r1, r3
    5834:	4098      	lsls	r0, r3
    5836:	1e4b      	subs	r3, r1, #1
    5838:	4199      	sbcs	r1, r3
    583a:	465b      	mov	r3, fp
    583c:	40d4      	lsrs	r4, r2
    583e:	40d3      	lsrs	r3, r2
    5840:	4320      	orrs	r0, r4
    5842:	4308      	orrs	r0, r1
    5844:	001a      	movs	r2, r3
    5846:	0743      	lsls	r3, r0, #29
    5848:	d009      	beq.n	585e <__aeabi_ddiv+0x596>
    584a:	230f      	movs	r3, #15
    584c:	4003      	ands	r3, r0
    584e:	2b04      	cmp	r3, #4
    5850:	d005      	beq.n	585e <__aeabi_ddiv+0x596>
    5852:	0001      	movs	r1, r0
    5854:	1d08      	adds	r0, r1, #4
    5856:	4288      	cmp	r0, r1
    5858:	419b      	sbcs	r3, r3
    585a:	425b      	negs	r3, r3
    585c:	18d2      	adds	r2, r2, r3
    585e:	0213      	lsls	r3, r2, #8
    5860:	d53a      	bpl.n	58d8 <__aeabi_ddiv+0x610>
    5862:	2301      	movs	r3, #1
    5864:	9a02      	ldr	r2, [sp, #8]
    5866:	2401      	movs	r4, #1
    5868:	401a      	ands	r2, r3
    586a:	2300      	movs	r3, #0
    586c:	4694      	mov	ip, r2
    586e:	4698      	mov	r8, r3
    5870:	2200      	movs	r2, #0
    5872:	e5f7      	b.n	5464 <__aeabi_ddiv+0x19c>
    5874:	2102      	movs	r1, #2
    5876:	4249      	negs	r1, r1
    5878:	468c      	mov	ip, r1
    587a:	9d03      	ldr	r5, [sp, #12]
    587c:	44e3      	add	fp, ip
    587e:	46ac      	mov	ip, r5
    5880:	44e2      	add	sl, ip
    5882:	45aa      	cmp	sl, r5
    5884:	41ad      	sbcs	r5, r5
    5886:	426d      	negs	r5, r5
    5888:	4445      	add	r5, r8
    588a:	18ed      	adds	r5, r5, r3
    588c:	1a2d      	subs	r5, r5, r0
    588e:	e696      	b.n	55be <__aeabi_ddiv+0x2f6>
    5890:	1e8a      	subs	r2, r1, #2
    5892:	9903      	ldr	r1, [sp, #12]
    5894:	004d      	lsls	r5, r1, #1
    5896:	428d      	cmp	r5, r1
    5898:	4189      	sbcs	r1, r1
    589a:	4249      	negs	r1, r1
    589c:	4441      	add	r1, r8
    589e:	1876      	adds	r6, r6, r1
    58a0:	9503      	str	r5, [sp, #12]
    58a2:	e78f      	b.n	57c4 <__aeabi_ddiv+0x4fc>
    58a4:	201f      	movs	r0, #31
    58a6:	4240      	negs	r0, r0
    58a8:	1ac3      	subs	r3, r0, r3
    58aa:	4658      	mov	r0, fp
    58ac:	40d8      	lsrs	r0, r3
    58ae:	0003      	movs	r3, r0
    58b0:	2a20      	cmp	r2, #32
    58b2:	d028      	beq.n	5906 <__aeabi_ddiv+0x63e>
    58b4:	2040      	movs	r0, #64	; 0x40
    58b6:	465d      	mov	r5, fp
    58b8:	1a82      	subs	r2, r0, r2
    58ba:	4095      	lsls	r5, r2
    58bc:	4329      	orrs	r1, r5
    58be:	1e4a      	subs	r2, r1, #1
    58c0:	4191      	sbcs	r1, r2
    58c2:	4319      	orrs	r1, r3
    58c4:	2307      	movs	r3, #7
    58c6:	2200      	movs	r2, #0
    58c8:	400b      	ands	r3, r1
    58ca:	d009      	beq.n	58e0 <__aeabi_ddiv+0x618>
    58cc:	230f      	movs	r3, #15
    58ce:	2200      	movs	r2, #0
    58d0:	400b      	ands	r3, r1
    58d2:	0008      	movs	r0, r1
    58d4:	2b04      	cmp	r3, #4
    58d6:	d1bd      	bne.n	5854 <__aeabi_ddiv+0x58c>
    58d8:	0001      	movs	r1, r0
    58da:	0753      	lsls	r3, r2, #29
    58dc:	0252      	lsls	r2, r2, #9
    58de:	0b12      	lsrs	r2, r2, #12
    58e0:	08c9      	lsrs	r1, r1, #3
    58e2:	4319      	orrs	r1, r3
    58e4:	2301      	movs	r3, #1
    58e6:	4688      	mov	r8, r1
    58e8:	9902      	ldr	r1, [sp, #8]
    58ea:	2400      	movs	r4, #0
    58ec:	4019      	ands	r1, r3
    58ee:	468c      	mov	ip, r1
    58f0:	e5b8      	b.n	5464 <__aeabi_ddiv+0x19c>
    58f2:	4552      	cmp	r2, sl
    58f4:	d8be      	bhi.n	5874 <__aeabi_ddiv+0x5ac>
    58f6:	468b      	mov	fp, r1
    58f8:	2500      	movs	r5, #0
    58fa:	e660      	b.n	55be <__aeabi_ddiv+0x2f6>
    58fc:	9d03      	ldr	r5, [sp, #12]
    58fe:	429d      	cmp	r5, r3
    5900:	d3c6      	bcc.n	5890 <__aeabi_ddiv+0x5c8>
    5902:	0011      	movs	r1, r2
    5904:	e762      	b.n	57cc <__aeabi_ddiv+0x504>
    5906:	2500      	movs	r5, #0
    5908:	e7d8      	b.n	58bc <__aeabi_ddiv+0x5f4>
    590a:	2280      	movs	r2, #128	; 0x80
    590c:	465b      	mov	r3, fp
    590e:	0312      	lsls	r2, r2, #12
    5910:	431a      	orrs	r2, r3
    5912:	9b01      	ldr	r3, [sp, #4]
    5914:	0312      	lsls	r2, r2, #12
    5916:	0b12      	lsrs	r2, r2, #12
    5918:	469c      	mov	ip, r3
    591a:	4688      	mov	r8, r1
    591c:	4c03      	ldr	r4, [pc, #12]	; (592c <__aeabi_ddiv+0x664>)
    591e:	e5a1      	b.n	5464 <__aeabi_ddiv+0x19c>
    5920:	000003ff 	.word	0x000003ff
    5924:	feffffff 	.word	0xfeffffff
    5928:	000007fe 	.word	0x000007fe
    592c:	000007ff 	.word	0x000007ff

00005930 <__eqdf2>:
    5930:	b5f0      	push	{r4, r5, r6, r7, lr}
    5932:	464f      	mov	r7, r9
    5934:	4646      	mov	r6, r8
    5936:	46d6      	mov	lr, sl
    5938:	005c      	lsls	r4, r3, #1
    593a:	b5c0      	push	{r6, r7, lr}
    593c:	031f      	lsls	r7, r3, #12
    593e:	0fdb      	lsrs	r3, r3, #31
    5940:	469a      	mov	sl, r3
    5942:	4b17      	ldr	r3, [pc, #92]	; (59a0 <__eqdf2+0x70>)
    5944:	030e      	lsls	r6, r1, #12
    5946:	004d      	lsls	r5, r1, #1
    5948:	4684      	mov	ip, r0
    594a:	4680      	mov	r8, r0
    594c:	0b36      	lsrs	r6, r6, #12
    594e:	0d6d      	lsrs	r5, r5, #21
    5950:	0fc9      	lsrs	r1, r1, #31
    5952:	4691      	mov	r9, r2
    5954:	0b3f      	lsrs	r7, r7, #12
    5956:	0d64      	lsrs	r4, r4, #21
    5958:	2001      	movs	r0, #1
    595a:	429d      	cmp	r5, r3
    595c:	d008      	beq.n	5970 <__eqdf2+0x40>
    595e:	429c      	cmp	r4, r3
    5960:	d001      	beq.n	5966 <__eqdf2+0x36>
    5962:	42a5      	cmp	r5, r4
    5964:	d00b      	beq.n	597e <__eqdf2+0x4e>
    5966:	bc1c      	pop	{r2, r3, r4}
    5968:	4690      	mov	r8, r2
    596a:	4699      	mov	r9, r3
    596c:	46a2      	mov	sl, r4
    596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5970:	4663      	mov	r3, ip
    5972:	4333      	orrs	r3, r6
    5974:	d1f7      	bne.n	5966 <__eqdf2+0x36>
    5976:	42ac      	cmp	r4, r5
    5978:	d1f5      	bne.n	5966 <__eqdf2+0x36>
    597a:	433a      	orrs	r2, r7
    597c:	d1f3      	bne.n	5966 <__eqdf2+0x36>
    597e:	2001      	movs	r0, #1
    5980:	42be      	cmp	r6, r7
    5982:	d1f0      	bne.n	5966 <__eqdf2+0x36>
    5984:	45c8      	cmp	r8, r9
    5986:	d1ee      	bne.n	5966 <__eqdf2+0x36>
    5988:	4551      	cmp	r1, sl
    598a:	d007      	beq.n	599c <__eqdf2+0x6c>
    598c:	2d00      	cmp	r5, #0
    598e:	d1ea      	bne.n	5966 <__eqdf2+0x36>
    5990:	4663      	mov	r3, ip
    5992:	431e      	orrs	r6, r3
    5994:	0030      	movs	r0, r6
    5996:	1e46      	subs	r6, r0, #1
    5998:	41b0      	sbcs	r0, r6
    599a:	e7e4      	b.n	5966 <__eqdf2+0x36>
    599c:	2000      	movs	r0, #0
    599e:	e7e2      	b.n	5966 <__eqdf2+0x36>
    59a0:	000007ff 	.word	0x000007ff

000059a4 <__gedf2>:
    59a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59a6:	4645      	mov	r5, r8
    59a8:	46de      	mov	lr, fp
    59aa:	4657      	mov	r7, sl
    59ac:	464e      	mov	r6, r9
    59ae:	b5e0      	push	{r5, r6, r7, lr}
    59b0:	031f      	lsls	r7, r3, #12
    59b2:	0b3d      	lsrs	r5, r7, #12
    59b4:	4f2c      	ldr	r7, [pc, #176]	; (5a68 <__gedf2+0xc4>)
    59b6:	030e      	lsls	r6, r1, #12
    59b8:	004c      	lsls	r4, r1, #1
    59ba:	46ab      	mov	fp, r5
    59bc:	005d      	lsls	r5, r3, #1
    59be:	4684      	mov	ip, r0
    59c0:	0b36      	lsrs	r6, r6, #12
    59c2:	0d64      	lsrs	r4, r4, #21
    59c4:	0fc9      	lsrs	r1, r1, #31
    59c6:	4690      	mov	r8, r2
    59c8:	0d6d      	lsrs	r5, r5, #21
    59ca:	0fdb      	lsrs	r3, r3, #31
    59cc:	42bc      	cmp	r4, r7
    59ce:	d02a      	beq.n	5a26 <__gedf2+0x82>
    59d0:	4f25      	ldr	r7, [pc, #148]	; (5a68 <__gedf2+0xc4>)
    59d2:	42bd      	cmp	r5, r7
    59d4:	d02d      	beq.n	5a32 <__gedf2+0x8e>
    59d6:	2c00      	cmp	r4, #0
    59d8:	d10f      	bne.n	59fa <__gedf2+0x56>
    59da:	4330      	orrs	r0, r6
    59dc:	0007      	movs	r7, r0
    59de:	4681      	mov	r9, r0
    59e0:	4278      	negs	r0, r7
    59e2:	4178      	adcs	r0, r7
    59e4:	b2c0      	uxtb	r0, r0
    59e6:	2d00      	cmp	r5, #0
    59e8:	d117      	bne.n	5a1a <__gedf2+0x76>
    59ea:	465f      	mov	r7, fp
    59ec:	433a      	orrs	r2, r7
    59ee:	d114      	bne.n	5a1a <__gedf2+0x76>
    59f0:	464b      	mov	r3, r9
    59f2:	2000      	movs	r0, #0
    59f4:	2b00      	cmp	r3, #0
    59f6:	d00a      	beq.n	5a0e <__gedf2+0x6a>
    59f8:	e006      	b.n	5a08 <__gedf2+0x64>
    59fa:	2d00      	cmp	r5, #0
    59fc:	d102      	bne.n	5a04 <__gedf2+0x60>
    59fe:	4658      	mov	r0, fp
    5a00:	4302      	orrs	r2, r0
    5a02:	d001      	beq.n	5a08 <__gedf2+0x64>
    5a04:	4299      	cmp	r1, r3
    5a06:	d018      	beq.n	5a3a <__gedf2+0x96>
    5a08:	4248      	negs	r0, r1
    5a0a:	2101      	movs	r1, #1
    5a0c:	4308      	orrs	r0, r1
    5a0e:	bc3c      	pop	{r2, r3, r4, r5}
    5a10:	4690      	mov	r8, r2
    5a12:	4699      	mov	r9, r3
    5a14:	46a2      	mov	sl, r4
    5a16:	46ab      	mov	fp, r5
    5a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d0f2      	beq.n	5a04 <__gedf2+0x60>
    5a1e:	2001      	movs	r0, #1
    5a20:	3b01      	subs	r3, #1
    5a22:	4318      	orrs	r0, r3
    5a24:	e7f3      	b.n	5a0e <__gedf2+0x6a>
    5a26:	0037      	movs	r7, r6
    5a28:	4307      	orrs	r7, r0
    5a2a:	d0d1      	beq.n	59d0 <__gedf2+0x2c>
    5a2c:	2002      	movs	r0, #2
    5a2e:	4240      	negs	r0, r0
    5a30:	e7ed      	b.n	5a0e <__gedf2+0x6a>
    5a32:	465f      	mov	r7, fp
    5a34:	4317      	orrs	r7, r2
    5a36:	d0ce      	beq.n	59d6 <__gedf2+0x32>
    5a38:	e7f8      	b.n	5a2c <__gedf2+0x88>
    5a3a:	42ac      	cmp	r4, r5
    5a3c:	dce4      	bgt.n	5a08 <__gedf2+0x64>
    5a3e:	da03      	bge.n	5a48 <__gedf2+0xa4>
    5a40:	1e48      	subs	r0, r1, #1
    5a42:	2101      	movs	r1, #1
    5a44:	4308      	orrs	r0, r1
    5a46:	e7e2      	b.n	5a0e <__gedf2+0x6a>
    5a48:	455e      	cmp	r6, fp
    5a4a:	d8dd      	bhi.n	5a08 <__gedf2+0x64>
    5a4c:	d006      	beq.n	5a5c <__gedf2+0xb8>
    5a4e:	2000      	movs	r0, #0
    5a50:	455e      	cmp	r6, fp
    5a52:	d2dc      	bcs.n	5a0e <__gedf2+0x6a>
    5a54:	2301      	movs	r3, #1
    5a56:	1e48      	subs	r0, r1, #1
    5a58:	4318      	orrs	r0, r3
    5a5a:	e7d8      	b.n	5a0e <__gedf2+0x6a>
    5a5c:	45c4      	cmp	ip, r8
    5a5e:	d8d3      	bhi.n	5a08 <__gedf2+0x64>
    5a60:	2000      	movs	r0, #0
    5a62:	45c4      	cmp	ip, r8
    5a64:	d3f6      	bcc.n	5a54 <__gedf2+0xb0>
    5a66:	e7d2      	b.n	5a0e <__gedf2+0x6a>
    5a68:	000007ff 	.word	0x000007ff

00005a6c <__ledf2>:
    5a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a6e:	464e      	mov	r6, r9
    5a70:	4645      	mov	r5, r8
    5a72:	46de      	mov	lr, fp
    5a74:	4657      	mov	r7, sl
    5a76:	005c      	lsls	r4, r3, #1
    5a78:	b5e0      	push	{r5, r6, r7, lr}
    5a7a:	031f      	lsls	r7, r3, #12
    5a7c:	0fdb      	lsrs	r3, r3, #31
    5a7e:	4699      	mov	r9, r3
    5a80:	4b2a      	ldr	r3, [pc, #168]	; (5b2c <__ledf2+0xc0>)
    5a82:	030e      	lsls	r6, r1, #12
    5a84:	004d      	lsls	r5, r1, #1
    5a86:	0fc9      	lsrs	r1, r1, #31
    5a88:	4684      	mov	ip, r0
    5a8a:	0b36      	lsrs	r6, r6, #12
    5a8c:	0d6d      	lsrs	r5, r5, #21
    5a8e:	468b      	mov	fp, r1
    5a90:	4690      	mov	r8, r2
    5a92:	0b3f      	lsrs	r7, r7, #12
    5a94:	0d64      	lsrs	r4, r4, #21
    5a96:	429d      	cmp	r5, r3
    5a98:	d020      	beq.n	5adc <__ledf2+0x70>
    5a9a:	4b24      	ldr	r3, [pc, #144]	; (5b2c <__ledf2+0xc0>)
    5a9c:	429c      	cmp	r4, r3
    5a9e:	d022      	beq.n	5ae6 <__ledf2+0x7a>
    5aa0:	2d00      	cmp	r5, #0
    5aa2:	d112      	bne.n	5aca <__ledf2+0x5e>
    5aa4:	4330      	orrs	r0, r6
    5aa6:	4243      	negs	r3, r0
    5aa8:	4143      	adcs	r3, r0
    5aaa:	b2db      	uxtb	r3, r3
    5aac:	2c00      	cmp	r4, #0
    5aae:	d01f      	beq.n	5af0 <__ledf2+0x84>
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d00c      	beq.n	5ace <__ledf2+0x62>
    5ab4:	464b      	mov	r3, r9
    5ab6:	2001      	movs	r0, #1
    5ab8:	3b01      	subs	r3, #1
    5aba:	4303      	orrs	r3, r0
    5abc:	0018      	movs	r0, r3
    5abe:	bc3c      	pop	{r2, r3, r4, r5}
    5ac0:	4690      	mov	r8, r2
    5ac2:	4699      	mov	r9, r3
    5ac4:	46a2      	mov	sl, r4
    5ac6:	46ab      	mov	fp, r5
    5ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aca:	2c00      	cmp	r4, #0
    5acc:	d016      	beq.n	5afc <__ledf2+0x90>
    5ace:	45cb      	cmp	fp, r9
    5ad0:	d017      	beq.n	5b02 <__ledf2+0x96>
    5ad2:	465b      	mov	r3, fp
    5ad4:	4259      	negs	r1, r3
    5ad6:	2301      	movs	r3, #1
    5ad8:	430b      	orrs	r3, r1
    5ada:	e7ef      	b.n	5abc <__ledf2+0x50>
    5adc:	0031      	movs	r1, r6
    5ade:	2302      	movs	r3, #2
    5ae0:	4301      	orrs	r1, r0
    5ae2:	d1eb      	bne.n	5abc <__ledf2+0x50>
    5ae4:	e7d9      	b.n	5a9a <__ledf2+0x2e>
    5ae6:	0039      	movs	r1, r7
    5ae8:	2302      	movs	r3, #2
    5aea:	4311      	orrs	r1, r2
    5aec:	d1e6      	bne.n	5abc <__ledf2+0x50>
    5aee:	e7d7      	b.n	5aa0 <__ledf2+0x34>
    5af0:	433a      	orrs	r2, r7
    5af2:	d1dd      	bne.n	5ab0 <__ledf2+0x44>
    5af4:	2300      	movs	r3, #0
    5af6:	2800      	cmp	r0, #0
    5af8:	d0e0      	beq.n	5abc <__ledf2+0x50>
    5afa:	e7ea      	b.n	5ad2 <__ledf2+0x66>
    5afc:	433a      	orrs	r2, r7
    5afe:	d1e6      	bne.n	5ace <__ledf2+0x62>
    5b00:	e7e7      	b.n	5ad2 <__ledf2+0x66>
    5b02:	42a5      	cmp	r5, r4
    5b04:	dce5      	bgt.n	5ad2 <__ledf2+0x66>
    5b06:	db05      	blt.n	5b14 <__ledf2+0xa8>
    5b08:	42be      	cmp	r6, r7
    5b0a:	d8e2      	bhi.n	5ad2 <__ledf2+0x66>
    5b0c:	d007      	beq.n	5b1e <__ledf2+0xb2>
    5b0e:	2300      	movs	r3, #0
    5b10:	42be      	cmp	r6, r7
    5b12:	d2d3      	bcs.n	5abc <__ledf2+0x50>
    5b14:	4659      	mov	r1, fp
    5b16:	2301      	movs	r3, #1
    5b18:	3901      	subs	r1, #1
    5b1a:	430b      	orrs	r3, r1
    5b1c:	e7ce      	b.n	5abc <__ledf2+0x50>
    5b1e:	45c4      	cmp	ip, r8
    5b20:	d8d7      	bhi.n	5ad2 <__ledf2+0x66>
    5b22:	2300      	movs	r3, #0
    5b24:	45c4      	cmp	ip, r8
    5b26:	d3f5      	bcc.n	5b14 <__ledf2+0xa8>
    5b28:	e7c8      	b.n	5abc <__ledf2+0x50>
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	000007ff 	.word	0x000007ff

00005b30 <__aeabi_dmul>:
    5b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b32:	4657      	mov	r7, sl
    5b34:	4645      	mov	r5, r8
    5b36:	46de      	mov	lr, fp
    5b38:	464e      	mov	r6, r9
    5b3a:	b5e0      	push	{r5, r6, r7, lr}
    5b3c:	030c      	lsls	r4, r1, #12
    5b3e:	4698      	mov	r8, r3
    5b40:	004e      	lsls	r6, r1, #1
    5b42:	0b23      	lsrs	r3, r4, #12
    5b44:	b087      	sub	sp, #28
    5b46:	0007      	movs	r7, r0
    5b48:	4692      	mov	sl, r2
    5b4a:	469b      	mov	fp, r3
    5b4c:	0d76      	lsrs	r6, r6, #21
    5b4e:	0fcd      	lsrs	r5, r1, #31
    5b50:	2e00      	cmp	r6, #0
    5b52:	d06b      	beq.n	5c2c <__aeabi_dmul+0xfc>
    5b54:	4b6d      	ldr	r3, [pc, #436]	; (5d0c <__aeabi_dmul+0x1dc>)
    5b56:	429e      	cmp	r6, r3
    5b58:	d035      	beq.n	5bc6 <__aeabi_dmul+0x96>
    5b5a:	2480      	movs	r4, #128	; 0x80
    5b5c:	465b      	mov	r3, fp
    5b5e:	0f42      	lsrs	r2, r0, #29
    5b60:	0424      	lsls	r4, r4, #16
    5b62:	00db      	lsls	r3, r3, #3
    5b64:	4314      	orrs	r4, r2
    5b66:	431c      	orrs	r4, r3
    5b68:	00c3      	lsls	r3, r0, #3
    5b6a:	4699      	mov	r9, r3
    5b6c:	4b68      	ldr	r3, [pc, #416]	; (5d10 <__aeabi_dmul+0x1e0>)
    5b6e:	46a3      	mov	fp, r4
    5b70:	469c      	mov	ip, r3
    5b72:	2300      	movs	r3, #0
    5b74:	2700      	movs	r7, #0
    5b76:	4466      	add	r6, ip
    5b78:	9302      	str	r3, [sp, #8]
    5b7a:	4643      	mov	r3, r8
    5b7c:	031c      	lsls	r4, r3, #12
    5b7e:	005a      	lsls	r2, r3, #1
    5b80:	0fdb      	lsrs	r3, r3, #31
    5b82:	4650      	mov	r0, sl
    5b84:	0b24      	lsrs	r4, r4, #12
    5b86:	0d52      	lsrs	r2, r2, #21
    5b88:	4698      	mov	r8, r3
    5b8a:	d100      	bne.n	5b8e <__aeabi_dmul+0x5e>
    5b8c:	e076      	b.n	5c7c <__aeabi_dmul+0x14c>
    5b8e:	4b5f      	ldr	r3, [pc, #380]	; (5d0c <__aeabi_dmul+0x1dc>)
    5b90:	429a      	cmp	r2, r3
    5b92:	d06d      	beq.n	5c70 <__aeabi_dmul+0x140>
    5b94:	2380      	movs	r3, #128	; 0x80
    5b96:	0f41      	lsrs	r1, r0, #29
    5b98:	041b      	lsls	r3, r3, #16
    5b9a:	430b      	orrs	r3, r1
    5b9c:	495c      	ldr	r1, [pc, #368]	; (5d10 <__aeabi_dmul+0x1e0>)
    5b9e:	00e4      	lsls	r4, r4, #3
    5ba0:	468c      	mov	ip, r1
    5ba2:	431c      	orrs	r4, r3
    5ba4:	00c3      	lsls	r3, r0, #3
    5ba6:	2000      	movs	r0, #0
    5ba8:	4462      	add	r2, ip
    5baa:	4641      	mov	r1, r8
    5bac:	18b6      	adds	r6, r6, r2
    5bae:	4069      	eors	r1, r5
    5bb0:	1c72      	adds	r2, r6, #1
    5bb2:	9101      	str	r1, [sp, #4]
    5bb4:	4694      	mov	ip, r2
    5bb6:	4307      	orrs	r7, r0
    5bb8:	2f0f      	cmp	r7, #15
    5bba:	d900      	bls.n	5bbe <__aeabi_dmul+0x8e>
    5bbc:	e0b0      	b.n	5d20 <__aeabi_dmul+0x1f0>
    5bbe:	4a55      	ldr	r2, [pc, #340]	; (5d14 <__aeabi_dmul+0x1e4>)
    5bc0:	00bf      	lsls	r7, r7, #2
    5bc2:	59d2      	ldr	r2, [r2, r7]
    5bc4:	4697      	mov	pc, r2
    5bc6:	465b      	mov	r3, fp
    5bc8:	4303      	orrs	r3, r0
    5bca:	4699      	mov	r9, r3
    5bcc:	d000      	beq.n	5bd0 <__aeabi_dmul+0xa0>
    5bce:	e087      	b.n	5ce0 <__aeabi_dmul+0x1b0>
    5bd0:	2300      	movs	r3, #0
    5bd2:	469b      	mov	fp, r3
    5bd4:	3302      	adds	r3, #2
    5bd6:	2708      	movs	r7, #8
    5bd8:	9302      	str	r3, [sp, #8]
    5bda:	e7ce      	b.n	5b7a <__aeabi_dmul+0x4a>
    5bdc:	4642      	mov	r2, r8
    5bde:	9201      	str	r2, [sp, #4]
    5be0:	2802      	cmp	r0, #2
    5be2:	d067      	beq.n	5cb4 <__aeabi_dmul+0x184>
    5be4:	2803      	cmp	r0, #3
    5be6:	d100      	bne.n	5bea <__aeabi_dmul+0xba>
    5be8:	e20e      	b.n	6008 <__aeabi_dmul+0x4d8>
    5bea:	2801      	cmp	r0, #1
    5bec:	d000      	beq.n	5bf0 <__aeabi_dmul+0xc0>
    5bee:	e162      	b.n	5eb6 <__aeabi_dmul+0x386>
    5bf0:	2300      	movs	r3, #0
    5bf2:	2400      	movs	r4, #0
    5bf4:	2200      	movs	r2, #0
    5bf6:	4699      	mov	r9, r3
    5bf8:	9901      	ldr	r1, [sp, #4]
    5bfa:	4001      	ands	r1, r0
    5bfc:	b2cd      	uxtb	r5, r1
    5bfe:	2100      	movs	r1, #0
    5c00:	0312      	lsls	r2, r2, #12
    5c02:	0d0b      	lsrs	r3, r1, #20
    5c04:	0b12      	lsrs	r2, r2, #12
    5c06:	051b      	lsls	r3, r3, #20
    5c08:	4313      	orrs	r3, r2
    5c0a:	4a43      	ldr	r2, [pc, #268]	; (5d18 <__aeabi_dmul+0x1e8>)
    5c0c:	0524      	lsls	r4, r4, #20
    5c0e:	4013      	ands	r3, r2
    5c10:	431c      	orrs	r4, r3
    5c12:	0064      	lsls	r4, r4, #1
    5c14:	07ed      	lsls	r5, r5, #31
    5c16:	0864      	lsrs	r4, r4, #1
    5c18:	432c      	orrs	r4, r5
    5c1a:	4648      	mov	r0, r9
    5c1c:	0021      	movs	r1, r4
    5c1e:	b007      	add	sp, #28
    5c20:	bc3c      	pop	{r2, r3, r4, r5}
    5c22:	4690      	mov	r8, r2
    5c24:	4699      	mov	r9, r3
    5c26:	46a2      	mov	sl, r4
    5c28:	46ab      	mov	fp, r5
    5c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c2c:	4303      	orrs	r3, r0
    5c2e:	4699      	mov	r9, r3
    5c30:	d04f      	beq.n	5cd2 <__aeabi_dmul+0x1a2>
    5c32:	465b      	mov	r3, fp
    5c34:	2b00      	cmp	r3, #0
    5c36:	d100      	bne.n	5c3a <__aeabi_dmul+0x10a>
    5c38:	e189      	b.n	5f4e <__aeabi_dmul+0x41e>
    5c3a:	4658      	mov	r0, fp
    5c3c:	f000 fe98 	bl	6970 <__clzsi2>
    5c40:	0003      	movs	r3, r0
    5c42:	3b0b      	subs	r3, #11
    5c44:	2b1c      	cmp	r3, #28
    5c46:	dd00      	ble.n	5c4a <__aeabi_dmul+0x11a>
    5c48:	e17a      	b.n	5f40 <__aeabi_dmul+0x410>
    5c4a:	221d      	movs	r2, #29
    5c4c:	1ad3      	subs	r3, r2, r3
    5c4e:	003a      	movs	r2, r7
    5c50:	0001      	movs	r1, r0
    5c52:	465c      	mov	r4, fp
    5c54:	40da      	lsrs	r2, r3
    5c56:	3908      	subs	r1, #8
    5c58:	408c      	lsls	r4, r1
    5c5a:	0013      	movs	r3, r2
    5c5c:	408f      	lsls	r7, r1
    5c5e:	4323      	orrs	r3, r4
    5c60:	469b      	mov	fp, r3
    5c62:	46b9      	mov	r9, r7
    5c64:	2300      	movs	r3, #0
    5c66:	4e2d      	ldr	r6, [pc, #180]	; (5d1c <__aeabi_dmul+0x1ec>)
    5c68:	2700      	movs	r7, #0
    5c6a:	1a36      	subs	r6, r6, r0
    5c6c:	9302      	str	r3, [sp, #8]
    5c6e:	e784      	b.n	5b7a <__aeabi_dmul+0x4a>
    5c70:	4653      	mov	r3, sl
    5c72:	4323      	orrs	r3, r4
    5c74:	d12a      	bne.n	5ccc <__aeabi_dmul+0x19c>
    5c76:	2400      	movs	r4, #0
    5c78:	2002      	movs	r0, #2
    5c7a:	e796      	b.n	5baa <__aeabi_dmul+0x7a>
    5c7c:	4653      	mov	r3, sl
    5c7e:	4323      	orrs	r3, r4
    5c80:	d020      	beq.n	5cc4 <__aeabi_dmul+0x194>
    5c82:	2c00      	cmp	r4, #0
    5c84:	d100      	bne.n	5c88 <__aeabi_dmul+0x158>
    5c86:	e157      	b.n	5f38 <__aeabi_dmul+0x408>
    5c88:	0020      	movs	r0, r4
    5c8a:	f000 fe71 	bl	6970 <__clzsi2>
    5c8e:	0003      	movs	r3, r0
    5c90:	3b0b      	subs	r3, #11
    5c92:	2b1c      	cmp	r3, #28
    5c94:	dd00      	ble.n	5c98 <__aeabi_dmul+0x168>
    5c96:	e149      	b.n	5f2c <__aeabi_dmul+0x3fc>
    5c98:	211d      	movs	r1, #29
    5c9a:	1acb      	subs	r3, r1, r3
    5c9c:	4651      	mov	r1, sl
    5c9e:	0002      	movs	r2, r0
    5ca0:	40d9      	lsrs	r1, r3
    5ca2:	4653      	mov	r3, sl
    5ca4:	3a08      	subs	r2, #8
    5ca6:	4094      	lsls	r4, r2
    5ca8:	4093      	lsls	r3, r2
    5caa:	430c      	orrs	r4, r1
    5cac:	4a1b      	ldr	r2, [pc, #108]	; (5d1c <__aeabi_dmul+0x1ec>)
    5cae:	1a12      	subs	r2, r2, r0
    5cb0:	2000      	movs	r0, #0
    5cb2:	e77a      	b.n	5baa <__aeabi_dmul+0x7a>
    5cb4:	2501      	movs	r5, #1
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	4c14      	ldr	r4, [pc, #80]	; (5d0c <__aeabi_dmul+0x1dc>)
    5cba:	401d      	ands	r5, r3
    5cbc:	2300      	movs	r3, #0
    5cbe:	2200      	movs	r2, #0
    5cc0:	4699      	mov	r9, r3
    5cc2:	e79c      	b.n	5bfe <__aeabi_dmul+0xce>
    5cc4:	2400      	movs	r4, #0
    5cc6:	2200      	movs	r2, #0
    5cc8:	2001      	movs	r0, #1
    5cca:	e76e      	b.n	5baa <__aeabi_dmul+0x7a>
    5ccc:	4653      	mov	r3, sl
    5cce:	2003      	movs	r0, #3
    5cd0:	e76b      	b.n	5baa <__aeabi_dmul+0x7a>
    5cd2:	2300      	movs	r3, #0
    5cd4:	469b      	mov	fp, r3
    5cd6:	3301      	adds	r3, #1
    5cd8:	2704      	movs	r7, #4
    5cda:	2600      	movs	r6, #0
    5cdc:	9302      	str	r3, [sp, #8]
    5cde:	e74c      	b.n	5b7a <__aeabi_dmul+0x4a>
    5ce0:	2303      	movs	r3, #3
    5ce2:	4681      	mov	r9, r0
    5ce4:	270c      	movs	r7, #12
    5ce6:	9302      	str	r3, [sp, #8]
    5ce8:	e747      	b.n	5b7a <__aeabi_dmul+0x4a>
    5cea:	2280      	movs	r2, #128	; 0x80
    5cec:	2300      	movs	r3, #0
    5cee:	2500      	movs	r5, #0
    5cf0:	0312      	lsls	r2, r2, #12
    5cf2:	4699      	mov	r9, r3
    5cf4:	4c05      	ldr	r4, [pc, #20]	; (5d0c <__aeabi_dmul+0x1dc>)
    5cf6:	e782      	b.n	5bfe <__aeabi_dmul+0xce>
    5cf8:	465c      	mov	r4, fp
    5cfa:	464b      	mov	r3, r9
    5cfc:	9802      	ldr	r0, [sp, #8]
    5cfe:	e76f      	b.n	5be0 <__aeabi_dmul+0xb0>
    5d00:	465c      	mov	r4, fp
    5d02:	464b      	mov	r3, r9
    5d04:	9501      	str	r5, [sp, #4]
    5d06:	9802      	ldr	r0, [sp, #8]
    5d08:	e76a      	b.n	5be0 <__aeabi_dmul+0xb0>
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	000007ff 	.word	0x000007ff
    5d10:	fffffc01 	.word	0xfffffc01
    5d14:	00006ca4 	.word	0x00006ca4
    5d18:	800fffff 	.word	0x800fffff
    5d1c:	fffffc0d 	.word	0xfffffc0d
    5d20:	464a      	mov	r2, r9
    5d22:	4649      	mov	r1, r9
    5d24:	0c17      	lsrs	r7, r2, #16
    5d26:	0c1a      	lsrs	r2, r3, #16
    5d28:	041b      	lsls	r3, r3, #16
    5d2a:	0c1b      	lsrs	r3, r3, #16
    5d2c:	0408      	lsls	r0, r1, #16
    5d2e:	0019      	movs	r1, r3
    5d30:	0c00      	lsrs	r0, r0, #16
    5d32:	4341      	muls	r1, r0
    5d34:	0015      	movs	r5, r2
    5d36:	4688      	mov	r8, r1
    5d38:	0019      	movs	r1, r3
    5d3a:	437d      	muls	r5, r7
    5d3c:	4379      	muls	r1, r7
    5d3e:	9503      	str	r5, [sp, #12]
    5d40:	4689      	mov	r9, r1
    5d42:	0029      	movs	r1, r5
    5d44:	0015      	movs	r5, r2
    5d46:	4345      	muls	r5, r0
    5d48:	444d      	add	r5, r9
    5d4a:	9502      	str	r5, [sp, #8]
    5d4c:	4645      	mov	r5, r8
    5d4e:	0c2d      	lsrs	r5, r5, #16
    5d50:	46aa      	mov	sl, r5
    5d52:	9d02      	ldr	r5, [sp, #8]
    5d54:	4455      	add	r5, sl
    5d56:	45a9      	cmp	r9, r5
    5d58:	d906      	bls.n	5d68 <__aeabi_dmul+0x238>
    5d5a:	468a      	mov	sl, r1
    5d5c:	2180      	movs	r1, #128	; 0x80
    5d5e:	0249      	lsls	r1, r1, #9
    5d60:	4689      	mov	r9, r1
    5d62:	44ca      	add	sl, r9
    5d64:	4651      	mov	r1, sl
    5d66:	9103      	str	r1, [sp, #12]
    5d68:	0c29      	lsrs	r1, r5, #16
    5d6a:	9104      	str	r1, [sp, #16]
    5d6c:	4641      	mov	r1, r8
    5d6e:	0409      	lsls	r1, r1, #16
    5d70:	042d      	lsls	r5, r5, #16
    5d72:	0c09      	lsrs	r1, r1, #16
    5d74:	4688      	mov	r8, r1
    5d76:	0029      	movs	r1, r5
    5d78:	0c25      	lsrs	r5, r4, #16
    5d7a:	0424      	lsls	r4, r4, #16
    5d7c:	4441      	add	r1, r8
    5d7e:	0c24      	lsrs	r4, r4, #16
    5d80:	9105      	str	r1, [sp, #20]
    5d82:	0021      	movs	r1, r4
    5d84:	4341      	muls	r1, r0
    5d86:	4688      	mov	r8, r1
    5d88:	0021      	movs	r1, r4
    5d8a:	4379      	muls	r1, r7
    5d8c:	468a      	mov	sl, r1
    5d8e:	4368      	muls	r0, r5
    5d90:	4641      	mov	r1, r8
    5d92:	4450      	add	r0, sl
    5d94:	4681      	mov	r9, r0
    5d96:	0c08      	lsrs	r0, r1, #16
    5d98:	4448      	add	r0, r9
    5d9a:	436f      	muls	r7, r5
    5d9c:	4582      	cmp	sl, r0
    5d9e:	d903      	bls.n	5da8 <__aeabi_dmul+0x278>
    5da0:	2180      	movs	r1, #128	; 0x80
    5da2:	0249      	lsls	r1, r1, #9
    5da4:	4689      	mov	r9, r1
    5da6:	444f      	add	r7, r9
    5da8:	0c01      	lsrs	r1, r0, #16
    5daa:	4689      	mov	r9, r1
    5dac:	0039      	movs	r1, r7
    5dae:	4449      	add	r1, r9
    5db0:	9102      	str	r1, [sp, #8]
    5db2:	4641      	mov	r1, r8
    5db4:	040f      	lsls	r7, r1, #16
    5db6:	9904      	ldr	r1, [sp, #16]
    5db8:	0c3f      	lsrs	r7, r7, #16
    5dba:	4688      	mov	r8, r1
    5dbc:	0400      	lsls	r0, r0, #16
    5dbe:	19c0      	adds	r0, r0, r7
    5dc0:	4480      	add	r8, r0
    5dc2:	4641      	mov	r1, r8
    5dc4:	9104      	str	r1, [sp, #16]
    5dc6:	4659      	mov	r1, fp
    5dc8:	0c0f      	lsrs	r7, r1, #16
    5dca:	0409      	lsls	r1, r1, #16
    5dcc:	0c09      	lsrs	r1, r1, #16
    5dce:	4688      	mov	r8, r1
    5dd0:	4359      	muls	r1, r3
    5dd2:	468a      	mov	sl, r1
    5dd4:	0039      	movs	r1, r7
    5dd6:	4351      	muls	r1, r2
    5dd8:	4689      	mov	r9, r1
    5dda:	4641      	mov	r1, r8
    5ddc:	434a      	muls	r2, r1
    5dde:	4651      	mov	r1, sl
    5de0:	0c09      	lsrs	r1, r1, #16
    5de2:	468b      	mov	fp, r1
    5de4:	437b      	muls	r3, r7
    5de6:	18d2      	adds	r2, r2, r3
    5de8:	445a      	add	r2, fp
    5dea:	4293      	cmp	r3, r2
    5dec:	d903      	bls.n	5df6 <__aeabi_dmul+0x2c6>
    5dee:	2380      	movs	r3, #128	; 0x80
    5df0:	025b      	lsls	r3, r3, #9
    5df2:	469b      	mov	fp, r3
    5df4:	44d9      	add	r9, fp
    5df6:	4651      	mov	r1, sl
    5df8:	0409      	lsls	r1, r1, #16
    5dfa:	0c09      	lsrs	r1, r1, #16
    5dfc:	468a      	mov	sl, r1
    5dfe:	4641      	mov	r1, r8
    5e00:	4361      	muls	r1, r4
    5e02:	437c      	muls	r4, r7
    5e04:	0c13      	lsrs	r3, r2, #16
    5e06:	0412      	lsls	r2, r2, #16
    5e08:	444b      	add	r3, r9
    5e0a:	4452      	add	r2, sl
    5e0c:	46a1      	mov	r9, r4
    5e0e:	468a      	mov	sl, r1
    5e10:	003c      	movs	r4, r7
    5e12:	4641      	mov	r1, r8
    5e14:	436c      	muls	r4, r5
    5e16:	434d      	muls	r5, r1
    5e18:	4651      	mov	r1, sl
    5e1a:	444d      	add	r5, r9
    5e1c:	0c0f      	lsrs	r7, r1, #16
    5e1e:	197d      	adds	r5, r7, r5
    5e20:	45a9      	cmp	r9, r5
    5e22:	d903      	bls.n	5e2c <__aeabi_dmul+0x2fc>
    5e24:	2180      	movs	r1, #128	; 0x80
    5e26:	0249      	lsls	r1, r1, #9
    5e28:	4688      	mov	r8, r1
    5e2a:	4444      	add	r4, r8
    5e2c:	9f04      	ldr	r7, [sp, #16]
    5e2e:	9903      	ldr	r1, [sp, #12]
    5e30:	46b8      	mov	r8, r7
    5e32:	4441      	add	r1, r8
    5e34:	468b      	mov	fp, r1
    5e36:	4583      	cmp	fp, r0
    5e38:	4180      	sbcs	r0, r0
    5e3a:	4241      	negs	r1, r0
    5e3c:	4688      	mov	r8, r1
    5e3e:	4651      	mov	r1, sl
    5e40:	0408      	lsls	r0, r1, #16
    5e42:	042f      	lsls	r7, r5, #16
    5e44:	0c00      	lsrs	r0, r0, #16
    5e46:	183f      	adds	r7, r7, r0
    5e48:	4658      	mov	r0, fp
    5e4a:	9902      	ldr	r1, [sp, #8]
    5e4c:	1810      	adds	r0, r2, r0
    5e4e:	4689      	mov	r9, r1
    5e50:	4290      	cmp	r0, r2
    5e52:	4192      	sbcs	r2, r2
    5e54:	444f      	add	r7, r9
    5e56:	46ba      	mov	sl, r7
    5e58:	4252      	negs	r2, r2
    5e5a:	4699      	mov	r9, r3
    5e5c:	4693      	mov	fp, r2
    5e5e:	44c2      	add	sl, r8
    5e60:	44d1      	add	r9, sl
    5e62:	44cb      	add	fp, r9
    5e64:	428f      	cmp	r7, r1
    5e66:	41bf      	sbcs	r7, r7
    5e68:	45c2      	cmp	sl, r8
    5e6a:	4189      	sbcs	r1, r1
    5e6c:	4599      	cmp	r9, r3
    5e6e:	419b      	sbcs	r3, r3
    5e70:	4593      	cmp	fp, r2
    5e72:	4192      	sbcs	r2, r2
    5e74:	427f      	negs	r7, r7
    5e76:	4249      	negs	r1, r1
    5e78:	0c2d      	lsrs	r5, r5, #16
    5e7a:	4252      	negs	r2, r2
    5e7c:	430f      	orrs	r7, r1
    5e7e:	425b      	negs	r3, r3
    5e80:	4313      	orrs	r3, r2
    5e82:	197f      	adds	r7, r7, r5
    5e84:	18ff      	adds	r7, r7, r3
    5e86:	465b      	mov	r3, fp
    5e88:	193c      	adds	r4, r7, r4
    5e8a:	0ddb      	lsrs	r3, r3, #23
    5e8c:	9a05      	ldr	r2, [sp, #20]
    5e8e:	0264      	lsls	r4, r4, #9
    5e90:	431c      	orrs	r4, r3
    5e92:	0243      	lsls	r3, r0, #9
    5e94:	4313      	orrs	r3, r2
    5e96:	1e5d      	subs	r5, r3, #1
    5e98:	41ab      	sbcs	r3, r5
    5e9a:	465a      	mov	r2, fp
    5e9c:	0dc0      	lsrs	r0, r0, #23
    5e9e:	4303      	orrs	r3, r0
    5ea0:	0252      	lsls	r2, r2, #9
    5ea2:	4313      	orrs	r3, r2
    5ea4:	01e2      	lsls	r2, r4, #7
    5ea6:	d556      	bpl.n	5f56 <__aeabi_dmul+0x426>
    5ea8:	2001      	movs	r0, #1
    5eaa:	085a      	lsrs	r2, r3, #1
    5eac:	4003      	ands	r3, r0
    5eae:	4313      	orrs	r3, r2
    5eb0:	07e2      	lsls	r2, r4, #31
    5eb2:	4313      	orrs	r3, r2
    5eb4:	0864      	lsrs	r4, r4, #1
    5eb6:	485a      	ldr	r0, [pc, #360]	; (6020 <__aeabi_dmul+0x4f0>)
    5eb8:	4460      	add	r0, ip
    5eba:	2800      	cmp	r0, #0
    5ebc:	dd4d      	ble.n	5f5a <__aeabi_dmul+0x42a>
    5ebe:	075a      	lsls	r2, r3, #29
    5ec0:	d009      	beq.n	5ed6 <__aeabi_dmul+0x3a6>
    5ec2:	220f      	movs	r2, #15
    5ec4:	401a      	ands	r2, r3
    5ec6:	2a04      	cmp	r2, #4
    5ec8:	d005      	beq.n	5ed6 <__aeabi_dmul+0x3a6>
    5eca:	1d1a      	adds	r2, r3, #4
    5ecc:	429a      	cmp	r2, r3
    5ece:	419b      	sbcs	r3, r3
    5ed0:	425b      	negs	r3, r3
    5ed2:	18e4      	adds	r4, r4, r3
    5ed4:	0013      	movs	r3, r2
    5ed6:	01e2      	lsls	r2, r4, #7
    5ed8:	d504      	bpl.n	5ee4 <__aeabi_dmul+0x3b4>
    5eda:	2080      	movs	r0, #128	; 0x80
    5edc:	4a51      	ldr	r2, [pc, #324]	; (6024 <__aeabi_dmul+0x4f4>)
    5ede:	00c0      	lsls	r0, r0, #3
    5ee0:	4014      	ands	r4, r2
    5ee2:	4460      	add	r0, ip
    5ee4:	4a50      	ldr	r2, [pc, #320]	; (6028 <__aeabi_dmul+0x4f8>)
    5ee6:	4290      	cmp	r0, r2
    5ee8:	dd00      	ble.n	5eec <__aeabi_dmul+0x3bc>
    5eea:	e6e3      	b.n	5cb4 <__aeabi_dmul+0x184>
    5eec:	2501      	movs	r5, #1
    5eee:	08db      	lsrs	r3, r3, #3
    5ef0:	0762      	lsls	r2, r4, #29
    5ef2:	431a      	orrs	r2, r3
    5ef4:	0264      	lsls	r4, r4, #9
    5ef6:	9b01      	ldr	r3, [sp, #4]
    5ef8:	4691      	mov	r9, r2
    5efa:	0b22      	lsrs	r2, r4, #12
    5efc:	0544      	lsls	r4, r0, #21
    5efe:	0d64      	lsrs	r4, r4, #21
    5f00:	401d      	ands	r5, r3
    5f02:	e67c      	b.n	5bfe <__aeabi_dmul+0xce>
    5f04:	2280      	movs	r2, #128	; 0x80
    5f06:	4659      	mov	r1, fp
    5f08:	0312      	lsls	r2, r2, #12
    5f0a:	4211      	tst	r1, r2
    5f0c:	d008      	beq.n	5f20 <__aeabi_dmul+0x3f0>
    5f0e:	4214      	tst	r4, r2
    5f10:	d106      	bne.n	5f20 <__aeabi_dmul+0x3f0>
    5f12:	4322      	orrs	r2, r4
    5f14:	0312      	lsls	r2, r2, #12
    5f16:	0b12      	lsrs	r2, r2, #12
    5f18:	4645      	mov	r5, r8
    5f1a:	4699      	mov	r9, r3
    5f1c:	4c43      	ldr	r4, [pc, #268]	; (602c <__aeabi_dmul+0x4fc>)
    5f1e:	e66e      	b.n	5bfe <__aeabi_dmul+0xce>
    5f20:	465b      	mov	r3, fp
    5f22:	431a      	orrs	r2, r3
    5f24:	0312      	lsls	r2, r2, #12
    5f26:	0b12      	lsrs	r2, r2, #12
    5f28:	4c40      	ldr	r4, [pc, #256]	; (602c <__aeabi_dmul+0x4fc>)
    5f2a:	e668      	b.n	5bfe <__aeabi_dmul+0xce>
    5f2c:	0003      	movs	r3, r0
    5f2e:	4654      	mov	r4, sl
    5f30:	3b28      	subs	r3, #40	; 0x28
    5f32:	409c      	lsls	r4, r3
    5f34:	2300      	movs	r3, #0
    5f36:	e6b9      	b.n	5cac <__aeabi_dmul+0x17c>
    5f38:	f000 fd1a 	bl	6970 <__clzsi2>
    5f3c:	3020      	adds	r0, #32
    5f3e:	e6a6      	b.n	5c8e <__aeabi_dmul+0x15e>
    5f40:	0003      	movs	r3, r0
    5f42:	3b28      	subs	r3, #40	; 0x28
    5f44:	409f      	lsls	r7, r3
    5f46:	2300      	movs	r3, #0
    5f48:	46bb      	mov	fp, r7
    5f4a:	4699      	mov	r9, r3
    5f4c:	e68a      	b.n	5c64 <__aeabi_dmul+0x134>
    5f4e:	f000 fd0f 	bl	6970 <__clzsi2>
    5f52:	3020      	adds	r0, #32
    5f54:	e674      	b.n	5c40 <__aeabi_dmul+0x110>
    5f56:	46b4      	mov	ip, r6
    5f58:	e7ad      	b.n	5eb6 <__aeabi_dmul+0x386>
    5f5a:	2501      	movs	r5, #1
    5f5c:	1a2a      	subs	r2, r5, r0
    5f5e:	2a38      	cmp	r2, #56	; 0x38
    5f60:	dd06      	ble.n	5f70 <__aeabi_dmul+0x440>
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	2400      	movs	r4, #0
    5f66:	401d      	ands	r5, r3
    5f68:	2300      	movs	r3, #0
    5f6a:	2200      	movs	r2, #0
    5f6c:	4699      	mov	r9, r3
    5f6e:	e646      	b.n	5bfe <__aeabi_dmul+0xce>
    5f70:	2a1f      	cmp	r2, #31
    5f72:	dc21      	bgt.n	5fb8 <__aeabi_dmul+0x488>
    5f74:	2520      	movs	r5, #32
    5f76:	0020      	movs	r0, r4
    5f78:	1aad      	subs	r5, r5, r2
    5f7a:	001e      	movs	r6, r3
    5f7c:	40ab      	lsls	r3, r5
    5f7e:	40a8      	lsls	r0, r5
    5f80:	40d6      	lsrs	r6, r2
    5f82:	1e5d      	subs	r5, r3, #1
    5f84:	41ab      	sbcs	r3, r5
    5f86:	4330      	orrs	r0, r6
    5f88:	4318      	orrs	r0, r3
    5f8a:	40d4      	lsrs	r4, r2
    5f8c:	0743      	lsls	r3, r0, #29
    5f8e:	d009      	beq.n	5fa4 <__aeabi_dmul+0x474>
    5f90:	230f      	movs	r3, #15
    5f92:	4003      	ands	r3, r0
    5f94:	2b04      	cmp	r3, #4
    5f96:	d005      	beq.n	5fa4 <__aeabi_dmul+0x474>
    5f98:	0003      	movs	r3, r0
    5f9a:	1d18      	adds	r0, r3, #4
    5f9c:	4298      	cmp	r0, r3
    5f9e:	419b      	sbcs	r3, r3
    5fa0:	425b      	negs	r3, r3
    5fa2:	18e4      	adds	r4, r4, r3
    5fa4:	0223      	lsls	r3, r4, #8
    5fa6:	d521      	bpl.n	5fec <__aeabi_dmul+0x4bc>
    5fa8:	2501      	movs	r5, #1
    5faa:	9b01      	ldr	r3, [sp, #4]
    5fac:	2401      	movs	r4, #1
    5fae:	401d      	ands	r5, r3
    5fb0:	2300      	movs	r3, #0
    5fb2:	2200      	movs	r2, #0
    5fb4:	4699      	mov	r9, r3
    5fb6:	e622      	b.n	5bfe <__aeabi_dmul+0xce>
    5fb8:	251f      	movs	r5, #31
    5fba:	0021      	movs	r1, r4
    5fbc:	426d      	negs	r5, r5
    5fbe:	1a28      	subs	r0, r5, r0
    5fc0:	40c1      	lsrs	r1, r0
    5fc2:	0008      	movs	r0, r1
    5fc4:	2a20      	cmp	r2, #32
    5fc6:	d01d      	beq.n	6004 <__aeabi_dmul+0x4d4>
    5fc8:	355f      	adds	r5, #95	; 0x5f
    5fca:	1aaa      	subs	r2, r5, r2
    5fcc:	4094      	lsls	r4, r2
    5fce:	4323      	orrs	r3, r4
    5fd0:	1e5c      	subs	r4, r3, #1
    5fd2:	41a3      	sbcs	r3, r4
    5fd4:	2507      	movs	r5, #7
    5fd6:	4303      	orrs	r3, r0
    5fd8:	401d      	ands	r5, r3
    5fda:	2200      	movs	r2, #0
    5fdc:	2d00      	cmp	r5, #0
    5fde:	d009      	beq.n	5ff4 <__aeabi_dmul+0x4c4>
    5fe0:	220f      	movs	r2, #15
    5fe2:	2400      	movs	r4, #0
    5fe4:	401a      	ands	r2, r3
    5fe6:	0018      	movs	r0, r3
    5fe8:	2a04      	cmp	r2, #4
    5fea:	d1d6      	bne.n	5f9a <__aeabi_dmul+0x46a>
    5fec:	0003      	movs	r3, r0
    5fee:	0765      	lsls	r5, r4, #29
    5ff0:	0264      	lsls	r4, r4, #9
    5ff2:	0b22      	lsrs	r2, r4, #12
    5ff4:	08db      	lsrs	r3, r3, #3
    5ff6:	432b      	orrs	r3, r5
    5ff8:	2501      	movs	r5, #1
    5ffa:	4699      	mov	r9, r3
    5ffc:	9b01      	ldr	r3, [sp, #4]
    5ffe:	2400      	movs	r4, #0
    6000:	401d      	ands	r5, r3
    6002:	e5fc      	b.n	5bfe <__aeabi_dmul+0xce>
    6004:	2400      	movs	r4, #0
    6006:	e7e2      	b.n	5fce <__aeabi_dmul+0x49e>
    6008:	2280      	movs	r2, #128	; 0x80
    600a:	2501      	movs	r5, #1
    600c:	0312      	lsls	r2, r2, #12
    600e:	4322      	orrs	r2, r4
    6010:	9901      	ldr	r1, [sp, #4]
    6012:	0312      	lsls	r2, r2, #12
    6014:	0b12      	lsrs	r2, r2, #12
    6016:	400d      	ands	r5, r1
    6018:	4699      	mov	r9, r3
    601a:	4c04      	ldr	r4, [pc, #16]	; (602c <__aeabi_dmul+0x4fc>)
    601c:	e5ef      	b.n	5bfe <__aeabi_dmul+0xce>
    601e:	46c0      	nop			; (mov r8, r8)
    6020:	000003ff 	.word	0x000003ff
    6024:	feffffff 	.word	0xfeffffff
    6028:	000007fe 	.word	0x000007fe
    602c:	000007ff 	.word	0x000007ff

00006030 <__aeabi_dsub>:
    6030:	b5f0      	push	{r4, r5, r6, r7, lr}
    6032:	4646      	mov	r6, r8
    6034:	46d6      	mov	lr, sl
    6036:	464f      	mov	r7, r9
    6038:	030c      	lsls	r4, r1, #12
    603a:	b5c0      	push	{r6, r7, lr}
    603c:	0fcd      	lsrs	r5, r1, #31
    603e:	004e      	lsls	r6, r1, #1
    6040:	0a61      	lsrs	r1, r4, #9
    6042:	0f44      	lsrs	r4, r0, #29
    6044:	430c      	orrs	r4, r1
    6046:	00c1      	lsls	r1, r0, #3
    6048:	0058      	lsls	r0, r3, #1
    604a:	0d40      	lsrs	r0, r0, #21
    604c:	4684      	mov	ip, r0
    604e:	468a      	mov	sl, r1
    6050:	000f      	movs	r7, r1
    6052:	0319      	lsls	r1, r3, #12
    6054:	0f50      	lsrs	r0, r2, #29
    6056:	0a49      	lsrs	r1, r1, #9
    6058:	4301      	orrs	r1, r0
    605a:	48c6      	ldr	r0, [pc, #792]	; (6374 <__aeabi_dsub+0x344>)
    605c:	0d76      	lsrs	r6, r6, #21
    605e:	46a8      	mov	r8, r5
    6060:	0fdb      	lsrs	r3, r3, #31
    6062:	00d2      	lsls	r2, r2, #3
    6064:	4584      	cmp	ip, r0
    6066:	d100      	bne.n	606a <__aeabi_dsub+0x3a>
    6068:	e0d8      	b.n	621c <__aeabi_dsub+0x1ec>
    606a:	2001      	movs	r0, #1
    606c:	4043      	eors	r3, r0
    606e:	42ab      	cmp	r3, r5
    6070:	d100      	bne.n	6074 <__aeabi_dsub+0x44>
    6072:	e0a6      	b.n	61c2 <__aeabi_dsub+0x192>
    6074:	4660      	mov	r0, ip
    6076:	1a35      	subs	r5, r6, r0
    6078:	2d00      	cmp	r5, #0
    607a:	dc00      	bgt.n	607e <__aeabi_dsub+0x4e>
    607c:	e105      	b.n	628a <__aeabi_dsub+0x25a>
    607e:	2800      	cmp	r0, #0
    6080:	d110      	bne.n	60a4 <__aeabi_dsub+0x74>
    6082:	000b      	movs	r3, r1
    6084:	4313      	orrs	r3, r2
    6086:	d100      	bne.n	608a <__aeabi_dsub+0x5a>
    6088:	e0d7      	b.n	623a <__aeabi_dsub+0x20a>
    608a:	1e6b      	subs	r3, r5, #1
    608c:	2b00      	cmp	r3, #0
    608e:	d000      	beq.n	6092 <__aeabi_dsub+0x62>
    6090:	e14b      	b.n	632a <__aeabi_dsub+0x2fa>
    6092:	4653      	mov	r3, sl
    6094:	1a9f      	subs	r7, r3, r2
    6096:	45ba      	cmp	sl, r7
    6098:	4180      	sbcs	r0, r0
    609a:	1a64      	subs	r4, r4, r1
    609c:	4240      	negs	r0, r0
    609e:	1a24      	subs	r4, r4, r0
    60a0:	2601      	movs	r6, #1
    60a2:	e01e      	b.n	60e2 <__aeabi_dsub+0xb2>
    60a4:	4bb3      	ldr	r3, [pc, #716]	; (6374 <__aeabi_dsub+0x344>)
    60a6:	429e      	cmp	r6, r3
    60a8:	d048      	beq.n	613c <__aeabi_dsub+0x10c>
    60aa:	2380      	movs	r3, #128	; 0x80
    60ac:	041b      	lsls	r3, r3, #16
    60ae:	4319      	orrs	r1, r3
    60b0:	2d38      	cmp	r5, #56	; 0x38
    60b2:	dd00      	ble.n	60b6 <__aeabi_dsub+0x86>
    60b4:	e119      	b.n	62ea <__aeabi_dsub+0x2ba>
    60b6:	2d1f      	cmp	r5, #31
    60b8:	dd00      	ble.n	60bc <__aeabi_dsub+0x8c>
    60ba:	e14c      	b.n	6356 <__aeabi_dsub+0x326>
    60bc:	2320      	movs	r3, #32
    60be:	000f      	movs	r7, r1
    60c0:	1b5b      	subs	r3, r3, r5
    60c2:	0010      	movs	r0, r2
    60c4:	409a      	lsls	r2, r3
    60c6:	409f      	lsls	r7, r3
    60c8:	40e8      	lsrs	r0, r5
    60ca:	1e53      	subs	r3, r2, #1
    60cc:	419a      	sbcs	r2, r3
    60ce:	40e9      	lsrs	r1, r5
    60d0:	4307      	orrs	r7, r0
    60d2:	4317      	orrs	r7, r2
    60d4:	4653      	mov	r3, sl
    60d6:	1bdf      	subs	r7, r3, r7
    60d8:	1a61      	subs	r1, r4, r1
    60da:	45ba      	cmp	sl, r7
    60dc:	41a4      	sbcs	r4, r4
    60de:	4264      	negs	r4, r4
    60e0:	1b0c      	subs	r4, r1, r4
    60e2:	0223      	lsls	r3, r4, #8
    60e4:	d400      	bmi.n	60e8 <__aeabi_dsub+0xb8>
    60e6:	e0c5      	b.n	6274 <__aeabi_dsub+0x244>
    60e8:	0264      	lsls	r4, r4, #9
    60ea:	0a65      	lsrs	r5, r4, #9
    60ec:	2d00      	cmp	r5, #0
    60ee:	d100      	bne.n	60f2 <__aeabi_dsub+0xc2>
    60f0:	e0f6      	b.n	62e0 <__aeabi_dsub+0x2b0>
    60f2:	0028      	movs	r0, r5
    60f4:	f000 fc3c 	bl	6970 <__clzsi2>
    60f8:	0003      	movs	r3, r0
    60fa:	3b08      	subs	r3, #8
    60fc:	2b1f      	cmp	r3, #31
    60fe:	dd00      	ble.n	6102 <__aeabi_dsub+0xd2>
    6100:	e0e9      	b.n	62d6 <__aeabi_dsub+0x2a6>
    6102:	2220      	movs	r2, #32
    6104:	003c      	movs	r4, r7
    6106:	1ad2      	subs	r2, r2, r3
    6108:	409d      	lsls	r5, r3
    610a:	40d4      	lsrs	r4, r2
    610c:	409f      	lsls	r7, r3
    610e:	4325      	orrs	r5, r4
    6110:	429e      	cmp	r6, r3
    6112:	dd00      	ble.n	6116 <__aeabi_dsub+0xe6>
    6114:	e0db      	b.n	62ce <__aeabi_dsub+0x29e>
    6116:	1b9e      	subs	r6, r3, r6
    6118:	1c73      	adds	r3, r6, #1
    611a:	2b1f      	cmp	r3, #31
    611c:	dd00      	ble.n	6120 <__aeabi_dsub+0xf0>
    611e:	e10a      	b.n	6336 <__aeabi_dsub+0x306>
    6120:	2220      	movs	r2, #32
    6122:	0038      	movs	r0, r7
    6124:	1ad2      	subs	r2, r2, r3
    6126:	0029      	movs	r1, r5
    6128:	4097      	lsls	r7, r2
    612a:	002c      	movs	r4, r5
    612c:	4091      	lsls	r1, r2
    612e:	40d8      	lsrs	r0, r3
    6130:	1e7a      	subs	r2, r7, #1
    6132:	4197      	sbcs	r7, r2
    6134:	40dc      	lsrs	r4, r3
    6136:	2600      	movs	r6, #0
    6138:	4301      	orrs	r1, r0
    613a:	430f      	orrs	r7, r1
    613c:	077b      	lsls	r3, r7, #29
    613e:	d009      	beq.n	6154 <__aeabi_dsub+0x124>
    6140:	230f      	movs	r3, #15
    6142:	403b      	ands	r3, r7
    6144:	2b04      	cmp	r3, #4
    6146:	d005      	beq.n	6154 <__aeabi_dsub+0x124>
    6148:	1d3b      	adds	r3, r7, #4
    614a:	42bb      	cmp	r3, r7
    614c:	41bf      	sbcs	r7, r7
    614e:	427f      	negs	r7, r7
    6150:	19e4      	adds	r4, r4, r7
    6152:	001f      	movs	r7, r3
    6154:	0223      	lsls	r3, r4, #8
    6156:	d525      	bpl.n	61a4 <__aeabi_dsub+0x174>
    6158:	4b86      	ldr	r3, [pc, #536]	; (6374 <__aeabi_dsub+0x344>)
    615a:	3601      	adds	r6, #1
    615c:	429e      	cmp	r6, r3
    615e:	d100      	bne.n	6162 <__aeabi_dsub+0x132>
    6160:	e0af      	b.n	62c2 <__aeabi_dsub+0x292>
    6162:	4b85      	ldr	r3, [pc, #532]	; (6378 <__aeabi_dsub+0x348>)
    6164:	2501      	movs	r5, #1
    6166:	401c      	ands	r4, r3
    6168:	4643      	mov	r3, r8
    616a:	0762      	lsls	r2, r4, #29
    616c:	08ff      	lsrs	r7, r7, #3
    616e:	0264      	lsls	r4, r4, #9
    6170:	0576      	lsls	r6, r6, #21
    6172:	4317      	orrs	r7, r2
    6174:	0b24      	lsrs	r4, r4, #12
    6176:	0d76      	lsrs	r6, r6, #21
    6178:	401d      	ands	r5, r3
    617a:	2100      	movs	r1, #0
    617c:	0324      	lsls	r4, r4, #12
    617e:	0b23      	lsrs	r3, r4, #12
    6180:	0d0c      	lsrs	r4, r1, #20
    6182:	4a7e      	ldr	r2, [pc, #504]	; (637c <__aeabi_dsub+0x34c>)
    6184:	0524      	lsls	r4, r4, #20
    6186:	431c      	orrs	r4, r3
    6188:	4014      	ands	r4, r2
    618a:	0533      	lsls	r3, r6, #20
    618c:	4323      	orrs	r3, r4
    618e:	005b      	lsls	r3, r3, #1
    6190:	07ed      	lsls	r5, r5, #31
    6192:	085b      	lsrs	r3, r3, #1
    6194:	432b      	orrs	r3, r5
    6196:	0038      	movs	r0, r7
    6198:	0019      	movs	r1, r3
    619a:	bc1c      	pop	{r2, r3, r4}
    619c:	4690      	mov	r8, r2
    619e:	4699      	mov	r9, r3
    61a0:	46a2      	mov	sl, r4
    61a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61a4:	2501      	movs	r5, #1
    61a6:	4643      	mov	r3, r8
    61a8:	0762      	lsls	r2, r4, #29
    61aa:	08ff      	lsrs	r7, r7, #3
    61ac:	4317      	orrs	r7, r2
    61ae:	08e4      	lsrs	r4, r4, #3
    61b0:	401d      	ands	r5, r3
    61b2:	4b70      	ldr	r3, [pc, #448]	; (6374 <__aeabi_dsub+0x344>)
    61b4:	429e      	cmp	r6, r3
    61b6:	d036      	beq.n	6226 <__aeabi_dsub+0x1f6>
    61b8:	0324      	lsls	r4, r4, #12
    61ba:	0576      	lsls	r6, r6, #21
    61bc:	0b24      	lsrs	r4, r4, #12
    61be:	0d76      	lsrs	r6, r6, #21
    61c0:	e7db      	b.n	617a <__aeabi_dsub+0x14a>
    61c2:	4663      	mov	r3, ip
    61c4:	1af3      	subs	r3, r6, r3
    61c6:	2b00      	cmp	r3, #0
    61c8:	dc00      	bgt.n	61cc <__aeabi_dsub+0x19c>
    61ca:	e094      	b.n	62f6 <__aeabi_dsub+0x2c6>
    61cc:	4660      	mov	r0, ip
    61ce:	2800      	cmp	r0, #0
    61d0:	d035      	beq.n	623e <__aeabi_dsub+0x20e>
    61d2:	4868      	ldr	r0, [pc, #416]	; (6374 <__aeabi_dsub+0x344>)
    61d4:	4286      	cmp	r6, r0
    61d6:	d0b1      	beq.n	613c <__aeabi_dsub+0x10c>
    61d8:	2780      	movs	r7, #128	; 0x80
    61da:	043f      	lsls	r7, r7, #16
    61dc:	4339      	orrs	r1, r7
    61de:	2b38      	cmp	r3, #56	; 0x38
    61e0:	dc00      	bgt.n	61e4 <__aeabi_dsub+0x1b4>
    61e2:	e0fd      	b.n	63e0 <__aeabi_dsub+0x3b0>
    61e4:	430a      	orrs	r2, r1
    61e6:	0017      	movs	r7, r2
    61e8:	2100      	movs	r1, #0
    61ea:	1e7a      	subs	r2, r7, #1
    61ec:	4197      	sbcs	r7, r2
    61ee:	4457      	add	r7, sl
    61f0:	4557      	cmp	r7, sl
    61f2:	4180      	sbcs	r0, r0
    61f4:	1909      	adds	r1, r1, r4
    61f6:	4244      	negs	r4, r0
    61f8:	190c      	adds	r4, r1, r4
    61fa:	0223      	lsls	r3, r4, #8
    61fc:	d53a      	bpl.n	6274 <__aeabi_dsub+0x244>
    61fe:	4b5d      	ldr	r3, [pc, #372]	; (6374 <__aeabi_dsub+0x344>)
    6200:	3601      	adds	r6, #1
    6202:	429e      	cmp	r6, r3
    6204:	d100      	bne.n	6208 <__aeabi_dsub+0x1d8>
    6206:	e14b      	b.n	64a0 <__aeabi_dsub+0x470>
    6208:	2201      	movs	r2, #1
    620a:	4b5b      	ldr	r3, [pc, #364]	; (6378 <__aeabi_dsub+0x348>)
    620c:	401c      	ands	r4, r3
    620e:	087b      	lsrs	r3, r7, #1
    6210:	4017      	ands	r7, r2
    6212:	431f      	orrs	r7, r3
    6214:	07e2      	lsls	r2, r4, #31
    6216:	4317      	orrs	r7, r2
    6218:	0864      	lsrs	r4, r4, #1
    621a:	e78f      	b.n	613c <__aeabi_dsub+0x10c>
    621c:	0008      	movs	r0, r1
    621e:	4310      	orrs	r0, r2
    6220:	d000      	beq.n	6224 <__aeabi_dsub+0x1f4>
    6222:	e724      	b.n	606e <__aeabi_dsub+0x3e>
    6224:	e721      	b.n	606a <__aeabi_dsub+0x3a>
    6226:	0023      	movs	r3, r4
    6228:	433b      	orrs	r3, r7
    622a:	d100      	bne.n	622e <__aeabi_dsub+0x1fe>
    622c:	e1b9      	b.n	65a2 <__aeabi_dsub+0x572>
    622e:	2280      	movs	r2, #128	; 0x80
    6230:	0312      	lsls	r2, r2, #12
    6232:	4314      	orrs	r4, r2
    6234:	0324      	lsls	r4, r4, #12
    6236:	0b24      	lsrs	r4, r4, #12
    6238:	e79f      	b.n	617a <__aeabi_dsub+0x14a>
    623a:	002e      	movs	r6, r5
    623c:	e77e      	b.n	613c <__aeabi_dsub+0x10c>
    623e:	0008      	movs	r0, r1
    6240:	4310      	orrs	r0, r2
    6242:	d100      	bne.n	6246 <__aeabi_dsub+0x216>
    6244:	e0ca      	b.n	63dc <__aeabi_dsub+0x3ac>
    6246:	1e58      	subs	r0, r3, #1
    6248:	4684      	mov	ip, r0
    624a:	2800      	cmp	r0, #0
    624c:	d000      	beq.n	6250 <__aeabi_dsub+0x220>
    624e:	e0e7      	b.n	6420 <__aeabi_dsub+0x3f0>
    6250:	4452      	add	r2, sl
    6252:	4552      	cmp	r2, sl
    6254:	4180      	sbcs	r0, r0
    6256:	1864      	adds	r4, r4, r1
    6258:	4240      	negs	r0, r0
    625a:	1824      	adds	r4, r4, r0
    625c:	0017      	movs	r7, r2
    625e:	2601      	movs	r6, #1
    6260:	0223      	lsls	r3, r4, #8
    6262:	d507      	bpl.n	6274 <__aeabi_dsub+0x244>
    6264:	2602      	movs	r6, #2
    6266:	e7cf      	b.n	6208 <__aeabi_dsub+0x1d8>
    6268:	4664      	mov	r4, ip
    626a:	432c      	orrs	r4, r5
    626c:	d100      	bne.n	6270 <__aeabi_dsub+0x240>
    626e:	e1b3      	b.n	65d8 <__aeabi_dsub+0x5a8>
    6270:	002c      	movs	r4, r5
    6272:	4667      	mov	r7, ip
    6274:	077b      	lsls	r3, r7, #29
    6276:	d000      	beq.n	627a <__aeabi_dsub+0x24a>
    6278:	e762      	b.n	6140 <__aeabi_dsub+0x110>
    627a:	0763      	lsls	r3, r4, #29
    627c:	08ff      	lsrs	r7, r7, #3
    627e:	431f      	orrs	r7, r3
    6280:	2501      	movs	r5, #1
    6282:	4643      	mov	r3, r8
    6284:	08e4      	lsrs	r4, r4, #3
    6286:	401d      	ands	r5, r3
    6288:	e793      	b.n	61b2 <__aeabi_dsub+0x182>
    628a:	2d00      	cmp	r5, #0
    628c:	d178      	bne.n	6380 <__aeabi_dsub+0x350>
    628e:	1c75      	adds	r5, r6, #1
    6290:	056d      	lsls	r5, r5, #21
    6292:	0d6d      	lsrs	r5, r5, #21
    6294:	2d01      	cmp	r5, #1
    6296:	dc00      	bgt.n	629a <__aeabi_dsub+0x26a>
    6298:	e0f2      	b.n	6480 <__aeabi_dsub+0x450>
    629a:	4650      	mov	r0, sl
    629c:	1a80      	subs	r0, r0, r2
    629e:	4582      	cmp	sl, r0
    62a0:	41bf      	sbcs	r7, r7
    62a2:	1a65      	subs	r5, r4, r1
    62a4:	427f      	negs	r7, r7
    62a6:	1bed      	subs	r5, r5, r7
    62a8:	4684      	mov	ip, r0
    62aa:	0228      	lsls	r0, r5, #8
    62ac:	d400      	bmi.n	62b0 <__aeabi_dsub+0x280>
    62ae:	e08c      	b.n	63ca <__aeabi_dsub+0x39a>
    62b0:	4650      	mov	r0, sl
    62b2:	1a17      	subs	r7, r2, r0
    62b4:	42ba      	cmp	r2, r7
    62b6:	4192      	sbcs	r2, r2
    62b8:	1b0c      	subs	r4, r1, r4
    62ba:	4255      	negs	r5, r2
    62bc:	1b65      	subs	r5, r4, r5
    62be:	4698      	mov	r8, r3
    62c0:	e714      	b.n	60ec <__aeabi_dsub+0xbc>
    62c2:	2501      	movs	r5, #1
    62c4:	4643      	mov	r3, r8
    62c6:	2400      	movs	r4, #0
    62c8:	401d      	ands	r5, r3
    62ca:	2700      	movs	r7, #0
    62cc:	e755      	b.n	617a <__aeabi_dsub+0x14a>
    62ce:	4c2a      	ldr	r4, [pc, #168]	; (6378 <__aeabi_dsub+0x348>)
    62d0:	1af6      	subs	r6, r6, r3
    62d2:	402c      	ands	r4, r5
    62d4:	e732      	b.n	613c <__aeabi_dsub+0x10c>
    62d6:	003d      	movs	r5, r7
    62d8:	3828      	subs	r0, #40	; 0x28
    62da:	4085      	lsls	r5, r0
    62dc:	2700      	movs	r7, #0
    62de:	e717      	b.n	6110 <__aeabi_dsub+0xe0>
    62e0:	0038      	movs	r0, r7
    62e2:	f000 fb45 	bl	6970 <__clzsi2>
    62e6:	3020      	adds	r0, #32
    62e8:	e706      	b.n	60f8 <__aeabi_dsub+0xc8>
    62ea:	430a      	orrs	r2, r1
    62ec:	0017      	movs	r7, r2
    62ee:	2100      	movs	r1, #0
    62f0:	1e7a      	subs	r2, r7, #1
    62f2:	4197      	sbcs	r7, r2
    62f4:	e6ee      	b.n	60d4 <__aeabi_dsub+0xa4>
    62f6:	2b00      	cmp	r3, #0
    62f8:	d000      	beq.n	62fc <__aeabi_dsub+0x2cc>
    62fa:	e0e5      	b.n	64c8 <__aeabi_dsub+0x498>
    62fc:	1c73      	adds	r3, r6, #1
    62fe:	469c      	mov	ip, r3
    6300:	055b      	lsls	r3, r3, #21
    6302:	0d5b      	lsrs	r3, r3, #21
    6304:	2b01      	cmp	r3, #1
    6306:	dc00      	bgt.n	630a <__aeabi_dsub+0x2da>
    6308:	e09f      	b.n	644a <__aeabi_dsub+0x41a>
    630a:	4b1a      	ldr	r3, [pc, #104]	; (6374 <__aeabi_dsub+0x344>)
    630c:	459c      	cmp	ip, r3
    630e:	d100      	bne.n	6312 <__aeabi_dsub+0x2e2>
    6310:	e0c5      	b.n	649e <__aeabi_dsub+0x46e>
    6312:	4452      	add	r2, sl
    6314:	4552      	cmp	r2, sl
    6316:	4180      	sbcs	r0, r0
    6318:	1864      	adds	r4, r4, r1
    631a:	4240      	negs	r0, r0
    631c:	1824      	adds	r4, r4, r0
    631e:	07e7      	lsls	r7, r4, #31
    6320:	0852      	lsrs	r2, r2, #1
    6322:	4317      	orrs	r7, r2
    6324:	0864      	lsrs	r4, r4, #1
    6326:	4666      	mov	r6, ip
    6328:	e708      	b.n	613c <__aeabi_dsub+0x10c>
    632a:	4812      	ldr	r0, [pc, #72]	; (6374 <__aeabi_dsub+0x344>)
    632c:	4285      	cmp	r5, r0
    632e:	d100      	bne.n	6332 <__aeabi_dsub+0x302>
    6330:	e085      	b.n	643e <__aeabi_dsub+0x40e>
    6332:	001d      	movs	r5, r3
    6334:	e6bc      	b.n	60b0 <__aeabi_dsub+0x80>
    6336:	0029      	movs	r1, r5
    6338:	3e1f      	subs	r6, #31
    633a:	40f1      	lsrs	r1, r6
    633c:	2b20      	cmp	r3, #32
    633e:	d100      	bne.n	6342 <__aeabi_dsub+0x312>
    6340:	e07f      	b.n	6442 <__aeabi_dsub+0x412>
    6342:	2240      	movs	r2, #64	; 0x40
    6344:	1ad3      	subs	r3, r2, r3
    6346:	409d      	lsls	r5, r3
    6348:	432f      	orrs	r7, r5
    634a:	1e7d      	subs	r5, r7, #1
    634c:	41af      	sbcs	r7, r5
    634e:	2400      	movs	r4, #0
    6350:	430f      	orrs	r7, r1
    6352:	2600      	movs	r6, #0
    6354:	e78e      	b.n	6274 <__aeabi_dsub+0x244>
    6356:	002b      	movs	r3, r5
    6358:	000f      	movs	r7, r1
    635a:	3b20      	subs	r3, #32
    635c:	40df      	lsrs	r7, r3
    635e:	2d20      	cmp	r5, #32
    6360:	d071      	beq.n	6446 <__aeabi_dsub+0x416>
    6362:	2340      	movs	r3, #64	; 0x40
    6364:	1b5d      	subs	r5, r3, r5
    6366:	40a9      	lsls	r1, r5
    6368:	430a      	orrs	r2, r1
    636a:	1e51      	subs	r1, r2, #1
    636c:	418a      	sbcs	r2, r1
    636e:	2100      	movs	r1, #0
    6370:	4317      	orrs	r7, r2
    6372:	e6af      	b.n	60d4 <__aeabi_dsub+0xa4>
    6374:	000007ff 	.word	0x000007ff
    6378:	ff7fffff 	.word	0xff7fffff
    637c:	800fffff 	.word	0x800fffff
    6380:	2e00      	cmp	r6, #0
    6382:	d03e      	beq.n	6402 <__aeabi_dsub+0x3d2>
    6384:	4eb3      	ldr	r6, [pc, #716]	; (6654 <__aeabi_dsub+0x624>)
    6386:	45b4      	cmp	ip, r6
    6388:	d045      	beq.n	6416 <__aeabi_dsub+0x3e6>
    638a:	2680      	movs	r6, #128	; 0x80
    638c:	0436      	lsls	r6, r6, #16
    638e:	426d      	negs	r5, r5
    6390:	4334      	orrs	r4, r6
    6392:	2d38      	cmp	r5, #56	; 0x38
    6394:	dd00      	ble.n	6398 <__aeabi_dsub+0x368>
    6396:	e0a8      	b.n	64ea <__aeabi_dsub+0x4ba>
    6398:	2d1f      	cmp	r5, #31
    639a:	dd00      	ble.n	639e <__aeabi_dsub+0x36e>
    639c:	e11f      	b.n	65de <__aeabi_dsub+0x5ae>
    639e:	2620      	movs	r6, #32
    63a0:	0027      	movs	r7, r4
    63a2:	4650      	mov	r0, sl
    63a4:	1b76      	subs	r6, r6, r5
    63a6:	40b7      	lsls	r7, r6
    63a8:	40e8      	lsrs	r0, r5
    63aa:	4307      	orrs	r7, r0
    63ac:	4650      	mov	r0, sl
    63ae:	40b0      	lsls	r0, r6
    63b0:	1e46      	subs	r6, r0, #1
    63b2:	41b0      	sbcs	r0, r6
    63b4:	40ec      	lsrs	r4, r5
    63b6:	4338      	orrs	r0, r7
    63b8:	1a17      	subs	r7, r2, r0
    63ba:	42ba      	cmp	r2, r7
    63bc:	4192      	sbcs	r2, r2
    63be:	1b0c      	subs	r4, r1, r4
    63c0:	4252      	negs	r2, r2
    63c2:	1aa4      	subs	r4, r4, r2
    63c4:	4666      	mov	r6, ip
    63c6:	4698      	mov	r8, r3
    63c8:	e68b      	b.n	60e2 <__aeabi_dsub+0xb2>
    63ca:	4664      	mov	r4, ip
    63cc:	4667      	mov	r7, ip
    63ce:	432c      	orrs	r4, r5
    63d0:	d000      	beq.n	63d4 <__aeabi_dsub+0x3a4>
    63d2:	e68b      	b.n	60ec <__aeabi_dsub+0xbc>
    63d4:	2500      	movs	r5, #0
    63d6:	2600      	movs	r6, #0
    63d8:	2700      	movs	r7, #0
    63da:	e6ea      	b.n	61b2 <__aeabi_dsub+0x182>
    63dc:	001e      	movs	r6, r3
    63de:	e6ad      	b.n	613c <__aeabi_dsub+0x10c>
    63e0:	2b1f      	cmp	r3, #31
    63e2:	dc60      	bgt.n	64a6 <__aeabi_dsub+0x476>
    63e4:	2720      	movs	r7, #32
    63e6:	1af8      	subs	r0, r7, r3
    63e8:	000f      	movs	r7, r1
    63ea:	4684      	mov	ip, r0
    63ec:	4087      	lsls	r7, r0
    63ee:	0010      	movs	r0, r2
    63f0:	40d8      	lsrs	r0, r3
    63f2:	4307      	orrs	r7, r0
    63f4:	4660      	mov	r0, ip
    63f6:	4082      	lsls	r2, r0
    63f8:	1e50      	subs	r0, r2, #1
    63fa:	4182      	sbcs	r2, r0
    63fc:	40d9      	lsrs	r1, r3
    63fe:	4317      	orrs	r7, r2
    6400:	e6f5      	b.n	61ee <__aeabi_dsub+0x1be>
    6402:	0026      	movs	r6, r4
    6404:	4650      	mov	r0, sl
    6406:	4306      	orrs	r6, r0
    6408:	d005      	beq.n	6416 <__aeabi_dsub+0x3e6>
    640a:	43ed      	mvns	r5, r5
    640c:	2d00      	cmp	r5, #0
    640e:	d0d3      	beq.n	63b8 <__aeabi_dsub+0x388>
    6410:	4e90      	ldr	r6, [pc, #576]	; (6654 <__aeabi_dsub+0x624>)
    6412:	45b4      	cmp	ip, r6
    6414:	d1bd      	bne.n	6392 <__aeabi_dsub+0x362>
    6416:	000c      	movs	r4, r1
    6418:	0017      	movs	r7, r2
    641a:	4666      	mov	r6, ip
    641c:	4698      	mov	r8, r3
    641e:	e68d      	b.n	613c <__aeabi_dsub+0x10c>
    6420:	488c      	ldr	r0, [pc, #560]	; (6654 <__aeabi_dsub+0x624>)
    6422:	4283      	cmp	r3, r0
    6424:	d00b      	beq.n	643e <__aeabi_dsub+0x40e>
    6426:	4663      	mov	r3, ip
    6428:	e6d9      	b.n	61de <__aeabi_dsub+0x1ae>
    642a:	2d00      	cmp	r5, #0
    642c:	d000      	beq.n	6430 <__aeabi_dsub+0x400>
    642e:	e096      	b.n	655e <__aeabi_dsub+0x52e>
    6430:	0008      	movs	r0, r1
    6432:	4310      	orrs	r0, r2
    6434:	d100      	bne.n	6438 <__aeabi_dsub+0x408>
    6436:	e0e2      	b.n	65fe <__aeabi_dsub+0x5ce>
    6438:	000c      	movs	r4, r1
    643a:	0017      	movs	r7, r2
    643c:	4698      	mov	r8, r3
    643e:	4e85      	ldr	r6, [pc, #532]	; (6654 <__aeabi_dsub+0x624>)
    6440:	e67c      	b.n	613c <__aeabi_dsub+0x10c>
    6442:	2500      	movs	r5, #0
    6444:	e780      	b.n	6348 <__aeabi_dsub+0x318>
    6446:	2100      	movs	r1, #0
    6448:	e78e      	b.n	6368 <__aeabi_dsub+0x338>
    644a:	0023      	movs	r3, r4
    644c:	4650      	mov	r0, sl
    644e:	4303      	orrs	r3, r0
    6450:	2e00      	cmp	r6, #0
    6452:	d000      	beq.n	6456 <__aeabi_dsub+0x426>
    6454:	e0a8      	b.n	65a8 <__aeabi_dsub+0x578>
    6456:	2b00      	cmp	r3, #0
    6458:	d100      	bne.n	645c <__aeabi_dsub+0x42c>
    645a:	e0de      	b.n	661a <__aeabi_dsub+0x5ea>
    645c:	000b      	movs	r3, r1
    645e:	4313      	orrs	r3, r2
    6460:	d100      	bne.n	6464 <__aeabi_dsub+0x434>
    6462:	e66b      	b.n	613c <__aeabi_dsub+0x10c>
    6464:	4452      	add	r2, sl
    6466:	4552      	cmp	r2, sl
    6468:	4180      	sbcs	r0, r0
    646a:	1864      	adds	r4, r4, r1
    646c:	4240      	negs	r0, r0
    646e:	1824      	adds	r4, r4, r0
    6470:	0017      	movs	r7, r2
    6472:	0223      	lsls	r3, r4, #8
    6474:	d400      	bmi.n	6478 <__aeabi_dsub+0x448>
    6476:	e6fd      	b.n	6274 <__aeabi_dsub+0x244>
    6478:	4b77      	ldr	r3, [pc, #476]	; (6658 <__aeabi_dsub+0x628>)
    647a:	4666      	mov	r6, ip
    647c:	401c      	ands	r4, r3
    647e:	e65d      	b.n	613c <__aeabi_dsub+0x10c>
    6480:	0025      	movs	r5, r4
    6482:	4650      	mov	r0, sl
    6484:	4305      	orrs	r5, r0
    6486:	2e00      	cmp	r6, #0
    6488:	d1cf      	bne.n	642a <__aeabi_dsub+0x3fa>
    648a:	2d00      	cmp	r5, #0
    648c:	d14f      	bne.n	652e <__aeabi_dsub+0x4fe>
    648e:	000c      	movs	r4, r1
    6490:	4314      	orrs	r4, r2
    6492:	d100      	bne.n	6496 <__aeabi_dsub+0x466>
    6494:	e0a0      	b.n	65d8 <__aeabi_dsub+0x5a8>
    6496:	000c      	movs	r4, r1
    6498:	0017      	movs	r7, r2
    649a:	4698      	mov	r8, r3
    649c:	e64e      	b.n	613c <__aeabi_dsub+0x10c>
    649e:	4666      	mov	r6, ip
    64a0:	2400      	movs	r4, #0
    64a2:	2700      	movs	r7, #0
    64a4:	e685      	b.n	61b2 <__aeabi_dsub+0x182>
    64a6:	001f      	movs	r7, r3
    64a8:	0008      	movs	r0, r1
    64aa:	3f20      	subs	r7, #32
    64ac:	40f8      	lsrs	r0, r7
    64ae:	0007      	movs	r7, r0
    64b0:	2b20      	cmp	r3, #32
    64b2:	d100      	bne.n	64b6 <__aeabi_dsub+0x486>
    64b4:	e08e      	b.n	65d4 <__aeabi_dsub+0x5a4>
    64b6:	2040      	movs	r0, #64	; 0x40
    64b8:	1ac3      	subs	r3, r0, r3
    64ba:	4099      	lsls	r1, r3
    64bc:	430a      	orrs	r2, r1
    64be:	1e51      	subs	r1, r2, #1
    64c0:	418a      	sbcs	r2, r1
    64c2:	2100      	movs	r1, #0
    64c4:	4317      	orrs	r7, r2
    64c6:	e692      	b.n	61ee <__aeabi_dsub+0x1be>
    64c8:	2e00      	cmp	r6, #0
    64ca:	d114      	bne.n	64f6 <__aeabi_dsub+0x4c6>
    64cc:	0026      	movs	r6, r4
    64ce:	4650      	mov	r0, sl
    64d0:	4306      	orrs	r6, r0
    64d2:	d062      	beq.n	659a <__aeabi_dsub+0x56a>
    64d4:	43db      	mvns	r3, r3
    64d6:	2b00      	cmp	r3, #0
    64d8:	d15c      	bne.n	6594 <__aeabi_dsub+0x564>
    64da:	1887      	adds	r7, r0, r2
    64dc:	4297      	cmp	r7, r2
    64de:	4192      	sbcs	r2, r2
    64e0:	1864      	adds	r4, r4, r1
    64e2:	4252      	negs	r2, r2
    64e4:	18a4      	adds	r4, r4, r2
    64e6:	4666      	mov	r6, ip
    64e8:	e687      	b.n	61fa <__aeabi_dsub+0x1ca>
    64ea:	4650      	mov	r0, sl
    64ec:	4320      	orrs	r0, r4
    64ee:	1e44      	subs	r4, r0, #1
    64f0:	41a0      	sbcs	r0, r4
    64f2:	2400      	movs	r4, #0
    64f4:	e760      	b.n	63b8 <__aeabi_dsub+0x388>
    64f6:	4e57      	ldr	r6, [pc, #348]	; (6654 <__aeabi_dsub+0x624>)
    64f8:	45b4      	cmp	ip, r6
    64fa:	d04e      	beq.n	659a <__aeabi_dsub+0x56a>
    64fc:	2680      	movs	r6, #128	; 0x80
    64fe:	0436      	lsls	r6, r6, #16
    6500:	425b      	negs	r3, r3
    6502:	4334      	orrs	r4, r6
    6504:	2b38      	cmp	r3, #56	; 0x38
    6506:	dd00      	ble.n	650a <__aeabi_dsub+0x4da>
    6508:	e07f      	b.n	660a <__aeabi_dsub+0x5da>
    650a:	2b1f      	cmp	r3, #31
    650c:	dd00      	ble.n	6510 <__aeabi_dsub+0x4e0>
    650e:	e08b      	b.n	6628 <__aeabi_dsub+0x5f8>
    6510:	2620      	movs	r6, #32
    6512:	0027      	movs	r7, r4
    6514:	4650      	mov	r0, sl
    6516:	1af6      	subs	r6, r6, r3
    6518:	40b7      	lsls	r7, r6
    651a:	40d8      	lsrs	r0, r3
    651c:	4307      	orrs	r7, r0
    651e:	4650      	mov	r0, sl
    6520:	40b0      	lsls	r0, r6
    6522:	1e46      	subs	r6, r0, #1
    6524:	41b0      	sbcs	r0, r6
    6526:	4307      	orrs	r7, r0
    6528:	40dc      	lsrs	r4, r3
    652a:	18bf      	adds	r7, r7, r2
    652c:	e7d6      	b.n	64dc <__aeabi_dsub+0x4ac>
    652e:	000d      	movs	r5, r1
    6530:	4315      	orrs	r5, r2
    6532:	d100      	bne.n	6536 <__aeabi_dsub+0x506>
    6534:	e602      	b.n	613c <__aeabi_dsub+0x10c>
    6536:	4650      	mov	r0, sl
    6538:	1a80      	subs	r0, r0, r2
    653a:	4582      	cmp	sl, r0
    653c:	41bf      	sbcs	r7, r7
    653e:	1a65      	subs	r5, r4, r1
    6540:	427f      	negs	r7, r7
    6542:	1bed      	subs	r5, r5, r7
    6544:	4684      	mov	ip, r0
    6546:	0228      	lsls	r0, r5, #8
    6548:	d400      	bmi.n	654c <__aeabi_dsub+0x51c>
    654a:	e68d      	b.n	6268 <__aeabi_dsub+0x238>
    654c:	4650      	mov	r0, sl
    654e:	1a17      	subs	r7, r2, r0
    6550:	42ba      	cmp	r2, r7
    6552:	4192      	sbcs	r2, r2
    6554:	1b0c      	subs	r4, r1, r4
    6556:	4252      	negs	r2, r2
    6558:	1aa4      	subs	r4, r4, r2
    655a:	4698      	mov	r8, r3
    655c:	e5ee      	b.n	613c <__aeabi_dsub+0x10c>
    655e:	000d      	movs	r5, r1
    6560:	4315      	orrs	r5, r2
    6562:	d100      	bne.n	6566 <__aeabi_dsub+0x536>
    6564:	e76b      	b.n	643e <__aeabi_dsub+0x40e>
    6566:	4650      	mov	r0, sl
    6568:	0767      	lsls	r7, r4, #29
    656a:	08c0      	lsrs	r0, r0, #3
    656c:	4307      	orrs	r7, r0
    656e:	2080      	movs	r0, #128	; 0x80
    6570:	08e4      	lsrs	r4, r4, #3
    6572:	0300      	lsls	r0, r0, #12
    6574:	4204      	tst	r4, r0
    6576:	d007      	beq.n	6588 <__aeabi_dsub+0x558>
    6578:	08cd      	lsrs	r5, r1, #3
    657a:	4205      	tst	r5, r0
    657c:	d104      	bne.n	6588 <__aeabi_dsub+0x558>
    657e:	002c      	movs	r4, r5
    6580:	4698      	mov	r8, r3
    6582:	08d7      	lsrs	r7, r2, #3
    6584:	0749      	lsls	r1, r1, #29
    6586:	430f      	orrs	r7, r1
    6588:	0f7b      	lsrs	r3, r7, #29
    658a:	00e4      	lsls	r4, r4, #3
    658c:	431c      	orrs	r4, r3
    658e:	00ff      	lsls	r7, r7, #3
    6590:	4e30      	ldr	r6, [pc, #192]	; (6654 <__aeabi_dsub+0x624>)
    6592:	e5d3      	b.n	613c <__aeabi_dsub+0x10c>
    6594:	4e2f      	ldr	r6, [pc, #188]	; (6654 <__aeabi_dsub+0x624>)
    6596:	45b4      	cmp	ip, r6
    6598:	d1b4      	bne.n	6504 <__aeabi_dsub+0x4d4>
    659a:	000c      	movs	r4, r1
    659c:	0017      	movs	r7, r2
    659e:	4666      	mov	r6, ip
    65a0:	e5cc      	b.n	613c <__aeabi_dsub+0x10c>
    65a2:	2700      	movs	r7, #0
    65a4:	2400      	movs	r4, #0
    65a6:	e5e8      	b.n	617a <__aeabi_dsub+0x14a>
    65a8:	2b00      	cmp	r3, #0
    65aa:	d039      	beq.n	6620 <__aeabi_dsub+0x5f0>
    65ac:	000b      	movs	r3, r1
    65ae:	4313      	orrs	r3, r2
    65b0:	d100      	bne.n	65b4 <__aeabi_dsub+0x584>
    65b2:	e744      	b.n	643e <__aeabi_dsub+0x40e>
    65b4:	08c0      	lsrs	r0, r0, #3
    65b6:	0767      	lsls	r7, r4, #29
    65b8:	4307      	orrs	r7, r0
    65ba:	2080      	movs	r0, #128	; 0x80
    65bc:	08e4      	lsrs	r4, r4, #3
    65be:	0300      	lsls	r0, r0, #12
    65c0:	4204      	tst	r4, r0
    65c2:	d0e1      	beq.n	6588 <__aeabi_dsub+0x558>
    65c4:	08cb      	lsrs	r3, r1, #3
    65c6:	4203      	tst	r3, r0
    65c8:	d1de      	bne.n	6588 <__aeabi_dsub+0x558>
    65ca:	08d7      	lsrs	r7, r2, #3
    65cc:	0749      	lsls	r1, r1, #29
    65ce:	430f      	orrs	r7, r1
    65d0:	001c      	movs	r4, r3
    65d2:	e7d9      	b.n	6588 <__aeabi_dsub+0x558>
    65d4:	2100      	movs	r1, #0
    65d6:	e771      	b.n	64bc <__aeabi_dsub+0x48c>
    65d8:	2500      	movs	r5, #0
    65da:	2700      	movs	r7, #0
    65dc:	e5e9      	b.n	61b2 <__aeabi_dsub+0x182>
    65de:	002e      	movs	r6, r5
    65e0:	0027      	movs	r7, r4
    65e2:	3e20      	subs	r6, #32
    65e4:	40f7      	lsrs	r7, r6
    65e6:	2d20      	cmp	r5, #32
    65e8:	d02f      	beq.n	664a <__aeabi_dsub+0x61a>
    65ea:	2640      	movs	r6, #64	; 0x40
    65ec:	1b75      	subs	r5, r6, r5
    65ee:	40ac      	lsls	r4, r5
    65f0:	4650      	mov	r0, sl
    65f2:	4320      	orrs	r0, r4
    65f4:	1e44      	subs	r4, r0, #1
    65f6:	41a0      	sbcs	r0, r4
    65f8:	2400      	movs	r4, #0
    65fa:	4338      	orrs	r0, r7
    65fc:	e6dc      	b.n	63b8 <__aeabi_dsub+0x388>
    65fe:	2480      	movs	r4, #128	; 0x80
    6600:	2500      	movs	r5, #0
    6602:	0324      	lsls	r4, r4, #12
    6604:	4e13      	ldr	r6, [pc, #76]	; (6654 <__aeabi_dsub+0x624>)
    6606:	2700      	movs	r7, #0
    6608:	e5d3      	b.n	61b2 <__aeabi_dsub+0x182>
    660a:	4650      	mov	r0, sl
    660c:	4320      	orrs	r0, r4
    660e:	0007      	movs	r7, r0
    6610:	1e78      	subs	r0, r7, #1
    6612:	4187      	sbcs	r7, r0
    6614:	2400      	movs	r4, #0
    6616:	18bf      	adds	r7, r7, r2
    6618:	e760      	b.n	64dc <__aeabi_dsub+0x4ac>
    661a:	000c      	movs	r4, r1
    661c:	0017      	movs	r7, r2
    661e:	e58d      	b.n	613c <__aeabi_dsub+0x10c>
    6620:	000c      	movs	r4, r1
    6622:	0017      	movs	r7, r2
    6624:	4e0b      	ldr	r6, [pc, #44]	; (6654 <__aeabi_dsub+0x624>)
    6626:	e589      	b.n	613c <__aeabi_dsub+0x10c>
    6628:	001e      	movs	r6, r3
    662a:	0027      	movs	r7, r4
    662c:	3e20      	subs	r6, #32
    662e:	40f7      	lsrs	r7, r6
    6630:	2b20      	cmp	r3, #32
    6632:	d00c      	beq.n	664e <__aeabi_dsub+0x61e>
    6634:	2640      	movs	r6, #64	; 0x40
    6636:	1af3      	subs	r3, r6, r3
    6638:	409c      	lsls	r4, r3
    663a:	4650      	mov	r0, sl
    663c:	4320      	orrs	r0, r4
    663e:	1e44      	subs	r4, r0, #1
    6640:	41a0      	sbcs	r0, r4
    6642:	4307      	orrs	r7, r0
    6644:	2400      	movs	r4, #0
    6646:	18bf      	adds	r7, r7, r2
    6648:	e748      	b.n	64dc <__aeabi_dsub+0x4ac>
    664a:	2400      	movs	r4, #0
    664c:	e7d0      	b.n	65f0 <__aeabi_dsub+0x5c0>
    664e:	2400      	movs	r4, #0
    6650:	e7f3      	b.n	663a <__aeabi_dsub+0x60a>
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	000007ff 	.word	0x000007ff
    6658:	ff7fffff 	.word	0xff7fffff

0000665c <__aeabi_d2iz>:
    665c:	b530      	push	{r4, r5, lr}
    665e:	4d13      	ldr	r5, [pc, #76]	; (66ac <__aeabi_d2iz+0x50>)
    6660:	030a      	lsls	r2, r1, #12
    6662:	004b      	lsls	r3, r1, #1
    6664:	0b12      	lsrs	r2, r2, #12
    6666:	0d5b      	lsrs	r3, r3, #21
    6668:	0fc9      	lsrs	r1, r1, #31
    666a:	2400      	movs	r4, #0
    666c:	42ab      	cmp	r3, r5
    666e:	dd10      	ble.n	6692 <__aeabi_d2iz+0x36>
    6670:	4c0f      	ldr	r4, [pc, #60]	; (66b0 <__aeabi_d2iz+0x54>)
    6672:	42a3      	cmp	r3, r4
    6674:	dc0f      	bgt.n	6696 <__aeabi_d2iz+0x3a>
    6676:	2480      	movs	r4, #128	; 0x80
    6678:	4d0e      	ldr	r5, [pc, #56]	; (66b4 <__aeabi_d2iz+0x58>)
    667a:	0364      	lsls	r4, r4, #13
    667c:	4322      	orrs	r2, r4
    667e:	1aed      	subs	r5, r5, r3
    6680:	2d1f      	cmp	r5, #31
    6682:	dd0b      	ble.n	669c <__aeabi_d2iz+0x40>
    6684:	480c      	ldr	r0, [pc, #48]	; (66b8 <__aeabi_d2iz+0x5c>)
    6686:	1ac3      	subs	r3, r0, r3
    6688:	40da      	lsrs	r2, r3
    668a:	4254      	negs	r4, r2
    668c:	2900      	cmp	r1, #0
    668e:	d100      	bne.n	6692 <__aeabi_d2iz+0x36>
    6690:	0014      	movs	r4, r2
    6692:	0020      	movs	r0, r4
    6694:	bd30      	pop	{r4, r5, pc}
    6696:	4b09      	ldr	r3, [pc, #36]	; (66bc <__aeabi_d2iz+0x60>)
    6698:	18cc      	adds	r4, r1, r3
    669a:	e7fa      	b.n	6692 <__aeabi_d2iz+0x36>
    669c:	4c08      	ldr	r4, [pc, #32]	; (66c0 <__aeabi_d2iz+0x64>)
    669e:	40e8      	lsrs	r0, r5
    66a0:	46a4      	mov	ip, r4
    66a2:	4463      	add	r3, ip
    66a4:	409a      	lsls	r2, r3
    66a6:	4302      	orrs	r2, r0
    66a8:	e7ef      	b.n	668a <__aeabi_d2iz+0x2e>
    66aa:	46c0      	nop			; (mov r8, r8)
    66ac:	000003fe 	.word	0x000003fe
    66b0:	0000041d 	.word	0x0000041d
    66b4:	00000433 	.word	0x00000433
    66b8:	00000413 	.word	0x00000413
    66bc:	7fffffff 	.word	0x7fffffff
    66c0:	fffffbed 	.word	0xfffffbed

000066c4 <__aeabi_i2d>:
    66c4:	b570      	push	{r4, r5, r6, lr}
    66c6:	2800      	cmp	r0, #0
    66c8:	d030      	beq.n	672c <__aeabi_i2d+0x68>
    66ca:	17c3      	asrs	r3, r0, #31
    66cc:	18c4      	adds	r4, r0, r3
    66ce:	405c      	eors	r4, r3
    66d0:	0fc5      	lsrs	r5, r0, #31
    66d2:	0020      	movs	r0, r4
    66d4:	f000 f94c 	bl	6970 <__clzsi2>
    66d8:	4b17      	ldr	r3, [pc, #92]	; (6738 <__aeabi_i2d+0x74>)
    66da:	4a18      	ldr	r2, [pc, #96]	; (673c <__aeabi_i2d+0x78>)
    66dc:	1a1b      	subs	r3, r3, r0
    66de:	1ad2      	subs	r2, r2, r3
    66e0:	2a1f      	cmp	r2, #31
    66e2:	dd18      	ble.n	6716 <__aeabi_i2d+0x52>
    66e4:	4a16      	ldr	r2, [pc, #88]	; (6740 <__aeabi_i2d+0x7c>)
    66e6:	1ad2      	subs	r2, r2, r3
    66e8:	4094      	lsls	r4, r2
    66ea:	2200      	movs	r2, #0
    66ec:	0324      	lsls	r4, r4, #12
    66ee:	055b      	lsls	r3, r3, #21
    66f0:	0b24      	lsrs	r4, r4, #12
    66f2:	0d5b      	lsrs	r3, r3, #21
    66f4:	2100      	movs	r1, #0
    66f6:	0010      	movs	r0, r2
    66f8:	0324      	lsls	r4, r4, #12
    66fa:	0d0a      	lsrs	r2, r1, #20
    66fc:	0b24      	lsrs	r4, r4, #12
    66fe:	0512      	lsls	r2, r2, #20
    6700:	4322      	orrs	r2, r4
    6702:	4c10      	ldr	r4, [pc, #64]	; (6744 <__aeabi_i2d+0x80>)
    6704:	051b      	lsls	r3, r3, #20
    6706:	4022      	ands	r2, r4
    6708:	4313      	orrs	r3, r2
    670a:	005b      	lsls	r3, r3, #1
    670c:	07ed      	lsls	r5, r5, #31
    670e:	085b      	lsrs	r3, r3, #1
    6710:	432b      	orrs	r3, r5
    6712:	0019      	movs	r1, r3
    6714:	bd70      	pop	{r4, r5, r6, pc}
    6716:	0021      	movs	r1, r4
    6718:	4091      	lsls	r1, r2
    671a:	000a      	movs	r2, r1
    671c:	210b      	movs	r1, #11
    671e:	1a08      	subs	r0, r1, r0
    6720:	40c4      	lsrs	r4, r0
    6722:	055b      	lsls	r3, r3, #21
    6724:	0324      	lsls	r4, r4, #12
    6726:	0b24      	lsrs	r4, r4, #12
    6728:	0d5b      	lsrs	r3, r3, #21
    672a:	e7e3      	b.n	66f4 <__aeabi_i2d+0x30>
    672c:	2500      	movs	r5, #0
    672e:	2300      	movs	r3, #0
    6730:	2400      	movs	r4, #0
    6732:	2200      	movs	r2, #0
    6734:	e7de      	b.n	66f4 <__aeabi_i2d+0x30>
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	0000041e 	.word	0x0000041e
    673c:	00000433 	.word	0x00000433
    6740:	00000413 	.word	0x00000413
    6744:	800fffff 	.word	0x800fffff

00006748 <__aeabi_ui2d>:
    6748:	b510      	push	{r4, lr}
    674a:	1e04      	subs	r4, r0, #0
    674c:	d028      	beq.n	67a0 <__aeabi_ui2d+0x58>
    674e:	f000 f90f 	bl	6970 <__clzsi2>
    6752:	4b15      	ldr	r3, [pc, #84]	; (67a8 <__aeabi_ui2d+0x60>)
    6754:	4a15      	ldr	r2, [pc, #84]	; (67ac <__aeabi_ui2d+0x64>)
    6756:	1a1b      	subs	r3, r3, r0
    6758:	1ad2      	subs	r2, r2, r3
    675a:	2a1f      	cmp	r2, #31
    675c:	dd15      	ble.n	678a <__aeabi_ui2d+0x42>
    675e:	4a14      	ldr	r2, [pc, #80]	; (67b0 <__aeabi_ui2d+0x68>)
    6760:	1ad2      	subs	r2, r2, r3
    6762:	4094      	lsls	r4, r2
    6764:	2200      	movs	r2, #0
    6766:	0324      	lsls	r4, r4, #12
    6768:	055b      	lsls	r3, r3, #21
    676a:	0b24      	lsrs	r4, r4, #12
    676c:	0d5b      	lsrs	r3, r3, #21
    676e:	2100      	movs	r1, #0
    6770:	0010      	movs	r0, r2
    6772:	0324      	lsls	r4, r4, #12
    6774:	0d0a      	lsrs	r2, r1, #20
    6776:	0b24      	lsrs	r4, r4, #12
    6778:	0512      	lsls	r2, r2, #20
    677a:	4322      	orrs	r2, r4
    677c:	4c0d      	ldr	r4, [pc, #52]	; (67b4 <__aeabi_ui2d+0x6c>)
    677e:	051b      	lsls	r3, r3, #20
    6780:	4022      	ands	r2, r4
    6782:	4313      	orrs	r3, r2
    6784:	005b      	lsls	r3, r3, #1
    6786:	0859      	lsrs	r1, r3, #1
    6788:	bd10      	pop	{r4, pc}
    678a:	0021      	movs	r1, r4
    678c:	4091      	lsls	r1, r2
    678e:	000a      	movs	r2, r1
    6790:	210b      	movs	r1, #11
    6792:	1a08      	subs	r0, r1, r0
    6794:	40c4      	lsrs	r4, r0
    6796:	055b      	lsls	r3, r3, #21
    6798:	0324      	lsls	r4, r4, #12
    679a:	0b24      	lsrs	r4, r4, #12
    679c:	0d5b      	lsrs	r3, r3, #21
    679e:	e7e6      	b.n	676e <__aeabi_ui2d+0x26>
    67a0:	2300      	movs	r3, #0
    67a2:	2400      	movs	r4, #0
    67a4:	2200      	movs	r2, #0
    67a6:	e7e2      	b.n	676e <__aeabi_ui2d+0x26>
    67a8:	0000041e 	.word	0x0000041e
    67ac:	00000433 	.word	0x00000433
    67b0:	00000413 	.word	0x00000413
    67b4:	800fffff 	.word	0x800fffff

000067b8 <__aeabi_f2d>:
    67b8:	0041      	lsls	r1, r0, #1
    67ba:	0e09      	lsrs	r1, r1, #24
    67bc:	1c4b      	adds	r3, r1, #1
    67be:	b570      	push	{r4, r5, r6, lr}
    67c0:	b2db      	uxtb	r3, r3
    67c2:	0246      	lsls	r6, r0, #9
    67c4:	0a75      	lsrs	r5, r6, #9
    67c6:	0fc4      	lsrs	r4, r0, #31
    67c8:	2b01      	cmp	r3, #1
    67ca:	dd14      	ble.n	67f6 <__aeabi_f2d+0x3e>
    67cc:	23e0      	movs	r3, #224	; 0xe0
    67ce:	009b      	lsls	r3, r3, #2
    67d0:	076d      	lsls	r5, r5, #29
    67d2:	0b36      	lsrs	r6, r6, #12
    67d4:	18cb      	adds	r3, r1, r3
    67d6:	2100      	movs	r1, #0
    67d8:	0d0a      	lsrs	r2, r1, #20
    67da:	0028      	movs	r0, r5
    67dc:	0512      	lsls	r2, r2, #20
    67de:	4d1c      	ldr	r5, [pc, #112]	; (6850 <__aeabi_f2d+0x98>)
    67e0:	4332      	orrs	r2, r6
    67e2:	055b      	lsls	r3, r3, #21
    67e4:	402a      	ands	r2, r5
    67e6:	085b      	lsrs	r3, r3, #1
    67e8:	4313      	orrs	r3, r2
    67ea:	005b      	lsls	r3, r3, #1
    67ec:	07e4      	lsls	r4, r4, #31
    67ee:	085b      	lsrs	r3, r3, #1
    67f0:	4323      	orrs	r3, r4
    67f2:	0019      	movs	r1, r3
    67f4:	bd70      	pop	{r4, r5, r6, pc}
    67f6:	2900      	cmp	r1, #0
    67f8:	d114      	bne.n	6824 <__aeabi_f2d+0x6c>
    67fa:	2d00      	cmp	r5, #0
    67fc:	d01e      	beq.n	683c <__aeabi_f2d+0x84>
    67fe:	0028      	movs	r0, r5
    6800:	f000 f8b6 	bl	6970 <__clzsi2>
    6804:	280a      	cmp	r0, #10
    6806:	dc1c      	bgt.n	6842 <__aeabi_f2d+0x8a>
    6808:	230b      	movs	r3, #11
    680a:	002a      	movs	r2, r5
    680c:	1a1b      	subs	r3, r3, r0
    680e:	40da      	lsrs	r2, r3
    6810:	0003      	movs	r3, r0
    6812:	3315      	adds	r3, #21
    6814:	409d      	lsls	r5, r3
    6816:	4b0f      	ldr	r3, [pc, #60]	; (6854 <__aeabi_f2d+0x9c>)
    6818:	0312      	lsls	r2, r2, #12
    681a:	1a1b      	subs	r3, r3, r0
    681c:	055b      	lsls	r3, r3, #21
    681e:	0b16      	lsrs	r6, r2, #12
    6820:	0d5b      	lsrs	r3, r3, #21
    6822:	e7d8      	b.n	67d6 <__aeabi_f2d+0x1e>
    6824:	2d00      	cmp	r5, #0
    6826:	d006      	beq.n	6836 <__aeabi_f2d+0x7e>
    6828:	0b32      	lsrs	r2, r6, #12
    682a:	2680      	movs	r6, #128	; 0x80
    682c:	0336      	lsls	r6, r6, #12
    682e:	076d      	lsls	r5, r5, #29
    6830:	4316      	orrs	r6, r2
    6832:	4b09      	ldr	r3, [pc, #36]	; (6858 <__aeabi_f2d+0xa0>)
    6834:	e7cf      	b.n	67d6 <__aeabi_f2d+0x1e>
    6836:	4b08      	ldr	r3, [pc, #32]	; (6858 <__aeabi_f2d+0xa0>)
    6838:	2600      	movs	r6, #0
    683a:	e7cc      	b.n	67d6 <__aeabi_f2d+0x1e>
    683c:	2300      	movs	r3, #0
    683e:	2600      	movs	r6, #0
    6840:	e7c9      	b.n	67d6 <__aeabi_f2d+0x1e>
    6842:	0003      	movs	r3, r0
    6844:	002a      	movs	r2, r5
    6846:	3b0b      	subs	r3, #11
    6848:	409a      	lsls	r2, r3
    684a:	2500      	movs	r5, #0
    684c:	e7e3      	b.n	6816 <__aeabi_f2d+0x5e>
    684e:	46c0      	nop			; (mov r8, r8)
    6850:	800fffff 	.word	0x800fffff
    6854:	00000389 	.word	0x00000389
    6858:	000007ff 	.word	0x000007ff

0000685c <__aeabi_d2f>:
    685c:	b5f0      	push	{r4, r5, r6, r7, lr}
    685e:	004c      	lsls	r4, r1, #1
    6860:	0d64      	lsrs	r4, r4, #21
    6862:	030b      	lsls	r3, r1, #12
    6864:	1c62      	adds	r2, r4, #1
    6866:	0f45      	lsrs	r5, r0, #29
    6868:	0a5b      	lsrs	r3, r3, #9
    686a:	0552      	lsls	r2, r2, #21
    686c:	432b      	orrs	r3, r5
    686e:	0fc9      	lsrs	r1, r1, #31
    6870:	00c5      	lsls	r5, r0, #3
    6872:	0d52      	lsrs	r2, r2, #21
    6874:	2a01      	cmp	r2, #1
    6876:	dd28      	ble.n	68ca <__aeabi_d2f+0x6e>
    6878:	4a3a      	ldr	r2, [pc, #232]	; (6964 <__aeabi_d2f+0x108>)
    687a:	18a6      	adds	r6, r4, r2
    687c:	2efe      	cmp	r6, #254	; 0xfe
    687e:	dc1b      	bgt.n	68b8 <__aeabi_d2f+0x5c>
    6880:	2e00      	cmp	r6, #0
    6882:	dd3e      	ble.n	6902 <__aeabi_d2f+0xa6>
    6884:	0180      	lsls	r0, r0, #6
    6886:	0002      	movs	r2, r0
    6888:	1e50      	subs	r0, r2, #1
    688a:	4182      	sbcs	r2, r0
    688c:	0f6d      	lsrs	r5, r5, #29
    688e:	432a      	orrs	r2, r5
    6890:	00db      	lsls	r3, r3, #3
    6892:	4313      	orrs	r3, r2
    6894:	075a      	lsls	r2, r3, #29
    6896:	d004      	beq.n	68a2 <__aeabi_d2f+0x46>
    6898:	220f      	movs	r2, #15
    689a:	401a      	ands	r2, r3
    689c:	2a04      	cmp	r2, #4
    689e:	d000      	beq.n	68a2 <__aeabi_d2f+0x46>
    68a0:	3304      	adds	r3, #4
    68a2:	2280      	movs	r2, #128	; 0x80
    68a4:	04d2      	lsls	r2, r2, #19
    68a6:	401a      	ands	r2, r3
    68a8:	d05a      	beq.n	6960 <__aeabi_d2f+0x104>
    68aa:	3601      	adds	r6, #1
    68ac:	2eff      	cmp	r6, #255	; 0xff
    68ae:	d003      	beq.n	68b8 <__aeabi_d2f+0x5c>
    68b0:	019b      	lsls	r3, r3, #6
    68b2:	0a5b      	lsrs	r3, r3, #9
    68b4:	b2f4      	uxtb	r4, r6
    68b6:	e001      	b.n	68bc <__aeabi_d2f+0x60>
    68b8:	24ff      	movs	r4, #255	; 0xff
    68ba:	2300      	movs	r3, #0
    68bc:	0258      	lsls	r0, r3, #9
    68be:	05e4      	lsls	r4, r4, #23
    68c0:	0a40      	lsrs	r0, r0, #9
    68c2:	07c9      	lsls	r1, r1, #31
    68c4:	4320      	orrs	r0, r4
    68c6:	4308      	orrs	r0, r1
    68c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68ca:	2c00      	cmp	r4, #0
    68cc:	d007      	beq.n	68de <__aeabi_d2f+0x82>
    68ce:	431d      	orrs	r5, r3
    68d0:	d0f2      	beq.n	68b8 <__aeabi_d2f+0x5c>
    68d2:	2080      	movs	r0, #128	; 0x80
    68d4:	00db      	lsls	r3, r3, #3
    68d6:	0480      	lsls	r0, r0, #18
    68d8:	4303      	orrs	r3, r0
    68da:	26ff      	movs	r6, #255	; 0xff
    68dc:	e7da      	b.n	6894 <__aeabi_d2f+0x38>
    68de:	432b      	orrs	r3, r5
    68e0:	d003      	beq.n	68ea <__aeabi_d2f+0x8e>
    68e2:	2305      	movs	r3, #5
    68e4:	08db      	lsrs	r3, r3, #3
    68e6:	2cff      	cmp	r4, #255	; 0xff
    68e8:	d003      	beq.n	68f2 <__aeabi_d2f+0x96>
    68ea:	025b      	lsls	r3, r3, #9
    68ec:	0a5b      	lsrs	r3, r3, #9
    68ee:	b2e4      	uxtb	r4, r4
    68f0:	e7e4      	b.n	68bc <__aeabi_d2f+0x60>
    68f2:	2b00      	cmp	r3, #0
    68f4:	d032      	beq.n	695c <__aeabi_d2f+0x100>
    68f6:	2080      	movs	r0, #128	; 0x80
    68f8:	03c0      	lsls	r0, r0, #15
    68fa:	4303      	orrs	r3, r0
    68fc:	025b      	lsls	r3, r3, #9
    68fe:	0a5b      	lsrs	r3, r3, #9
    6900:	e7dc      	b.n	68bc <__aeabi_d2f+0x60>
    6902:	0032      	movs	r2, r6
    6904:	3217      	adds	r2, #23
    6906:	db14      	blt.n	6932 <__aeabi_d2f+0xd6>
    6908:	2280      	movs	r2, #128	; 0x80
    690a:	271e      	movs	r7, #30
    690c:	0412      	lsls	r2, r2, #16
    690e:	4313      	orrs	r3, r2
    6910:	1bbf      	subs	r7, r7, r6
    6912:	2f1f      	cmp	r7, #31
    6914:	dc0f      	bgt.n	6936 <__aeabi_d2f+0xda>
    6916:	4a14      	ldr	r2, [pc, #80]	; (6968 <__aeabi_d2f+0x10c>)
    6918:	4694      	mov	ip, r2
    691a:	4464      	add	r4, ip
    691c:	002a      	movs	r2, r5
    691e:	40a5      	lsls	r5, r4
    6920:	002e      	movs	r6, r5
    6922:	40a3      	lsls	r3, r4
    6924:	1e75      	subs	r5, r6, #1
    6926:	41ae      	sbcs	r6, r5
    6928:	40fa      	lsrs	r2, r7
    692a:	4333      	orrs	r3, r6
    692c:	4313      	orrs	r3, r2
    692e:	2600      	movs	r6, #0
    6930:	e7b0      	b.n	6894 <__aeabi_d2f+0x38>
    6932:	2400      	movs	r4, #0
    6934:	e7d5      	b.n	68e2 <__aeabi_d2f+0x86>
    6936:	2202      	movs	r2, #2
    6938:	4252      	negs	r2, r2
    693a:	1b96      	subs	r6, r2, r6
    693c:	001a      	movs	r2, r3
    693e:	40f2      	lsrs	r2, r6
    6940:	2f20      	cmp	r7, #32
    6942:	d009      	beq.n	6958 <__aeabi_d2f+0xfc>
    6944:	4809      	ldr	r0, [pc, #36]	; (696c <__aeabi_d2f+0x110>)
    6946:	4684      	mov	ip, r0
    6948:	4464      	add	r4, ip
    694a:	40a3      	lsls	r3, r4
    694c:	432b      	orrs	r3, r5
    694e:	1e5d      	subs	r5, r3, #1
    6950:	41ab      	sbcs	r3, r5
    6952:	2600      	movs	r6, #0
    6954:	4313      	orrs	r3, r2
    6956:	e79d      	b.n	6894 <__aeabi_d2f+0x38>
    6958:	2300      	movs	r3, #0
    695a:	e7f7      	b.n	694c <__aeabi_d2f+0xf0>
    695c:	2300      	movs	r3, #0
    695e:	e7ad      	b.n	68bc <__aeabi_d2f+0x60>
    6960:	0034      	movs	r4, r6
    6962:	e7bf      	b.n	68e4 <__aeabi_d2f+0x88>
    6964:	fffffc80 	.word	0xfffffc80
    6968:	fffffc82 	.word	0xfffffc82
    696c:	fffffca2 	.word	0xfffffca2

00006970 <__clzsi2>:
    6970:	211c      	movs	r1, #28
    6972:	2301      	movs	r3, #1
    6974:	041b      	lsls	r3, r3, #16
    6976:	4298      	cmp	r0, r3
    6978:	d301      	bcc.n	697e <__clzsi2+0xe>
    697a:	0c00      	lsrs	r0, r0, #16
    697c:	3910      	subs	r1, #16
    697e:	0a1b      	lsrs	r3, r3, #8
    6980:	4298      	cmp	r0, r3
    6982:	d301      	bcc.n	6988 <__clzsi2+0x18>
    6984:	0a00      	lsrs	r0, r0, #8
    6986:	3908      	subs	r1, #8
    6988:	091b      	lsrs	r3, r3, #4
    698a:	4298      	cmp	r0, r3
    698c:	d301      	bcc.n	6992 <__clzsi2+0x22>
    698e:	0900      	lsrs	r0, r0, #4
    6990:	3904      	subs	r1, #4
    6992:	a202      	add	r2, pc, #8	; (adr r2, 699c <__clzsi2+0x2c>)
    6994:	5c10      	ldrb	r0, [r2, r0]
    6996:	1840      	adds	r0, r0, r1
    6998:	4770      	bx	lr
    699a:	46c0      	nop			; (mov r8, r8)
    699c:	02020304 	.word	0x02020304
    69a0:	01010101 	.word	0x01010101
	...

000069ac <__libc_init_array>:
    69ac:	b570      	push	{r4, r5, r6, lr}
    69ae:	2600      	movs	r6, #0
    69b0:	4d0c      	ldr	r5, [pc, #48]	; (69e4 <__libc_init_array+0x38>)
    69b2:	4c0d      	ldr	r4, [pc, #52]	; (69e8 <__libc_init_array+0x3c>)
    69b4:	1b64      	subs	r4, r4, r5
    69b6:	10a4      	asrs	r4, r4, #2
    69b8:	42a6      	cmp	r6, r4
    69ba:	d109      	bne.n	69d0 <__libc_init_array+0x24>
    69bc:	2600      	movs	r6, #0
    69be:	f000 f991 	bl	6ce4 <_init>
    69c2:	4d0a      	ldr	r5, [pc, #40]	; (69ec <__libc_init_array+0x40>)
    69c4:	4c0a      	ldr	r4, [pc, #40]	; (69f0 <__libc_init_array+0x44>)
    69c6:	1b64      	subs	r4, r4, r5
    69c8:	10a4      	asrs	r4, r4, #2
    69ca:	42a6      	cmp	r6, r4
    69cc:	d105      	bne.n	69da <__libc_init_array+0x2e>
    69ce:	bd70      	pop	{r4, r5, r6, pc}
    69d0:	00b3      	lsls	r3, r6, #2
    69d2:	58eb      	ldr	r3, [r5, r3]
    69d4:	4798      	blx	r3
    69d6:	3601      	adds	r6, #1
    69d8:	e7ee      	b.n	69b8 <__libc_init_array+0xc>
    69da:	00b3      	lsls	r3, r6, #2
    69dc:	58eb      	ldr	r3, [r5, r3]
    69de:	4798      	blx	r3
    69e0:	3601      	adds	r6, #1
    69e2:	e7f2      	b.n	69ca <__libc_init_array+0x1e>
    69e4:	00006cf0 	.word	0x00006cf0
    69e8:	00006cf0 	.word	0x00006cf0
    69ec:	00006cf0 	.word	0x00006cf0
    69f0:	00006cf4 	.word	0x00006cf4

000069f4 <memcpy>:
    69f4:	2300      	movs	r3, #0
    69f6:	b510      	push	{r4, lr}
    69f8:	429a      	cmp	r2, r3
    69fa:	d100      	bne.n	69fe <memcpy+0xa>
    69fc:	bd10      	pop	{r4, pc}
    69fe:	5ccc      	ldrb	r4, [r1, r3]
    6a00:	54c4      	strb	r4, [r0, r3]
    6a02:	3301      	adds	r3, #1
    6a04:	e7f8      	b.n	69f8 <memcpy+0x4>

00006a06 <memset>:
    6a06:	0003      	movs	r3, r0
    6a08:	1882      	adds	r2, r0, r2
    6a0a:	4293      	cmp	r3, r2
    6a0c:	d100      	bne.n	6a10 <memset+0xa>
    6a0e:	4770      	bx	lr
    6a10:	7019      	strb	r1, [r3, #0]
    6a12:	3301      	adds	r3, #1
    6a14:	e7f9      	b.n	6a0a <memset+0x4>
    6a16:	0000      	movs	r0, r0
    6a18:	00000326 	.word	0x00000326
    6a1c:	00000572 	.word	0x00000572
    6a20:	00000572 	.word	0x00000572
    6a24:	00000572 	.word	0x00000572
    6a28:	00000572 	.word	0x00000572
    6a2c:	00000572 	.word	0x00000572
    6a30:	00000572 	.word	0x00000572
    6a34:	00000572 	.word	0x00000572
    6a38:	00000572 	.word	0x00000572
    6a3c:	00000572 	.word	0x00000572
    6a40:	00000572 	.word	0x00000572
    6a44:	00000572 	.word	0x00000572
    6a48:	00000572 	.word	0x00000572
    6a4c:	00000572 	.word	0x00000572
    6a50:	00000572 	.word	0x00000572
    6a54:	00000572 	.word	0x00000572
    6a58:	0000030e 	.word	0x0000030e
    6a5c:	00000572 	.word	0x00000572
    6a60:	00000572 	.word	0x00000572
    6a64:	00000572 	.word	0x00000572
    6a68:	00000572 	.word	0x00000572
    6a6c:	00000572 	.word	0x00000572
    6a70:	00000572 	.word	0x00000572
    6a74:	00000572 	.word	0x00000572
    6a78:	00000572 	.word	0x00000572
    6a7c:	00000572 	.word	0x00000572
    6a80:	00000572 	.word	0x00000572
    6a84:	00000572 	.word	0x00000572
    6a88:	00000572 	.word	0x00000572
    6a8c:	00000572 	.word	0x00000572
    6a90:	00000572 	.word	0x00000572
    6a94:	00000572 	.word	0x00000572
    6a98:	0000031e 	.word	0x0000031e
    6a9c:	00000572 	.word	0x00000572
    6aa0:	00000572 	.word	0x00000572
    6aa4:	00000572 	.word	0x00000572
    6aa8:	00000572 	.word	0x00000572
    6aac:	00000572 	.word	0x00000572
    6ab0:	00000572 	.word	0x00000572
    6ab4:	00000572 	.word	0x00000572
    6ab8:	00000572 	.word	0x00000572
    6abc:	00000572 	.word	0x00000572
    6ac0:	00000572 	.word	0x00000572
    6ac4:	00000572 	.word	0x00000572
    6ac8:	00000572 	.word	0x00000572
    6acc:	00000572 	.word	0x00000572
    6ad0:	00000572 	.word	0x00000572
    6ad4:	00000572 	.word	0x00000572
    6ad8:	00000316 	.word	0x00000316
    6adc:	0000032e 	.word	0x0000032e
    6ae0:	000002f6 	.word	0x000002f6
    6ae4:	00000306 	.word	0x00000306
    6ae8:	000002fe 	.word	0x000002fe
    6aec:	00000002 	.word	0x00000002
    6af0:	00000003 	.word	0x00000003
    6af4:	00000028 	.word	0x00000028
    6af8:	00000029 	.word	0x00000029
    6afc:	00000004 	.word	0x00000004
    6b00:	00000005 	.word	0x00000005
    6b04:	00000006 	.word	0x00000006
    6b08:	00000007 	.word	0x00000007
    6b0c:	0000ffff 	.word	0x0000ffff
    6b10:	0000ffff 	.word	0x0000ffff
    6b14:	00000022 	.word	0x00000022
    6b18:	00000023 	.word	0x00000023
    6b1c:	0000ffff 	.word	0x0000ffff
    6b20:	0000ffff 	.word	0x0000ffff
    6b24:	0000ffff 	.word	0x0000ffff
    6b28:	0000ffff 	.word	0x0000ffff
    6b2c:	00000008 	.word	0x00000008
    6b30:	00000009 	.word	0x00000009
    6b34:	0000000a 	.word	0x0000000a
    6b38:	0000000b 	.word	0x0000000b
    6b3c:	20776f4c 	.word	0x20776f4c
    6b40:	74736f43 	.word	0x74736f43
    6b44:	6e655620 	.word	0x6e655620
    6b48:	616c6974 	.word	0x616c6974
    6b4c:	00726f74 	.word	0x00726f74
    6b50:	544e4f43 	.word	0x544e4f43
    6b54:	004c4f52 	.word	0x004c4f52
    6b58:	00494d48 	.word	0x00494d48
    6b5c:	45524353 	.word	0x45524353
    6b60:	545f4e45 	.word	0x545f4e45
    6b64:	00004d49 	.word	0x00004d49
    6b68:	45524353 	.word	0x45524353
    6b6c:	435f4e45 	.word	0x435f4e45
    6b70:	00004748 	.word	0x00004748
    6b74:	494e4f4d 	.word	0x494e4f4d
    6b78:	00524f54 	.word	0x00524f54
    6b7c:	534e4553 	.word	0x534e4553
    6b80:	0000524f 	.word	0x0000524f
    6b84:	454c4449 	.word	0x454c4449
    6b88:	00000000 	.word	0x00000000
    6b8c:	000031a0 	.word	0x000031a0
    6b90:	000031a0 	.word	0x000031a0
    6b94:	000031a0 	.word	0x000031a0
    6b98:	0000316c 	.word	0x0000316c
    6b9c:	000031e2 	.word	0x000031e2
    6ba0:	000031fc 	.word	0x000031fc
    6ba4:	000031a0 	.word	0x000031a0
    6ba8:	000031a0 	.word	0x000031a0
    6bac:	0000316c 	.word	0x0000316c
    6bb0:	000031e2 	.word	0x000031e2
    6bb4:	51726d54 	.word	0x51726d54
    6bb8:	00000000 	.word	0x00000000
    6bbc:	20726d54 	.word	0x20726d54
    6bc0:	00637653 	.word	0x00637653
    6bc4:	42000800 	.word	0x42000800
    6bc8:	42000c00 	.word	0x42000c00
    6bcc:	42001000 	.word	0x42001000
    6bd0:	42001400 	.word	0x42001400
    6bd4:	42001800 	.word	0x42001800
    6bd8:	42001c00 	.word	0x42001c00
    6bdc:	00003aae 	.word	0x00003aae
    6be0:	00003aaa 	.word	0x00003aaa
    6be4:	00003aaa 	.word	0x00003aaa
    6be8:	00003b10 	.word	0x00003b10
    6bec:	00003b10 	.word	0x00003b10
    6bf0:	00003ac2 	.word	0x00003ac2
    6bf4:	00003ab4 	.word	0x00003ab4
    6bf8:	00003ac8 	.word	0x00003ac8
    6bfc:	00003afe 	.word	0x00003afe
    6c00:	00003c18 	.word	0x00003c18
    6c04:	00003bf8 	.word	0x00003bf8
    6c08:	00003bf8 	.word	0x00003bf8
    6c0c:	00003c84 	.word	0x00003c84
    6c10:	00003c0a 	.word	0x00003c0a
    6c14:	00003c26 	.word	0x00003c26
    6c18:	00003bfc 	.word	0x00003bfc
    6c1c:	00003c34 	.word	0x00003c34
    6c20:	00003c74 	.word	0x00003c74
    6c24:	0000477c 	.word	0x0000477c
    6c28:	000046cc 	.word	0x000046cc
    6c2c:	000046cc 	.word	0x000046cc
    6c30:	000046ca 	.word	0x000046ca
    6c34:	0000476e 	.word	0x0000476e
    6c38:	0000476e 	.word	0x0000476e
    6c3c:	00004764 	.word	0x00004764
    6c40:	000046ca 	.word	0x000046ca
    6c44:	0000476e 	.word	0x0000476e
    6c48:	00004764 	.word	0x00004764
    6c4c:	0000476e 	.word	0x0000476e
    6c50:	000046ca 	.word	0x000046ca
    6c54:	00004774 	.word	0x00004774
    6c58:	00004774 	.word	0x00004774
    6c5c:	00004774 	.word	0x00004774
    6c60:	00004804 	.word	0x00004804
    6c64:	000054c0 	.word	0x000054c0
    6c68:	000054a2 	.word	0x000054a2
    6c6c:	0000545c 	.word	0x0000545c
    6c70:	0000537a 	.word	0x0000537a
    6c74:	0000545c 	.word	0x0000545c
    6c78:	00005494 	.word	0x00005494
    6c7c:	0000545c 	.word	0x0000545c
    6c80:	0000537a 	.word	0x0000537a
    6c84:	000054a2 	.word	0x000054a2
    6c88:	000054a2 	.word	0x000054a2
    6c8c:	00005494 	.word	0x00005494
    6c90:	0000537a 	.word	0x0000537a
    6c94:	00005372 	.word	0x00005372
    6c98:	00005372 	.word	0x00005372
    6c9c:	00005372 	.word	0x00005372
    6ca0:	000056d8 	.word	0x000056d8
    6ca4:	00005d20 	.word	0x00005d20
    6ca8:	00005be0 	.word	0x00005be0
    6cac:	00005be0 	.word	0x00005be0
    6cb0:	00005bdc 	.word	0x00005bdc
    6cb4:	00005cf8 	.word	0x00005cf8
    6cb8:	00005cf8 	.word	0x00005cf8
    6cbc:	00005cea 	.word	0x00005cea
    6cc0:	00005bdc 	.word	0x00005bdc
    6cc4:	00005cf8 	.word	0x00005cf8
    6cc8:	00005cea 	.word	0x00005cea
    6ccc:	00005cf8 	.word	0x00005cf8
    6cd0:	00005bdc 	.word	0x00005bdc
    6cd4:	00005d00 	.word	0x00005d00
    6cd8:	00005d00 	.word	0x00005d00
    6cdc:	00005d00 	.word	0x00005d00
    6ce0:	00005f04 	.word	0x00005f04

00006ce4 <_init>:
    6ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ce6:	46c0      	nop			; (mov r8, r8)
    6ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6cea:	bc08      	pop	{r3}
    6cec:	469e      	mov	lr, r3
    6cee:	4770      	bx	lr

00006cf0 <__init_array_start>:
    6cf0:	000000dd 	.word	0x000000dd

00006cf4 <_fini>:
    6cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cf6:	46c0      	nop			; (mov r8, r8)
    6cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6cfa:	bc08      	pop	{r3}
    6cfc:	469e      	mov	lr, r3
    6cfe:	4770      	bx	lr

00006d00 <__fini_array_start>:
    6d00:	000000b5 	.word	0x000000b5
